using Core.DAO.Administracion.CtrlPresupuestalOficinasCentrales;
using Core.DTO;
using Core.DTO.Administracion.CtrlPptalOficinasCentrales;
using Core.DTO.Principal.Generales;
using Core.DTO.Utils.Data;
using Core.Entity.Administrativo.ControlPresupuestalOficinasCentrales;
using Core.Entity.Administrativo.CtrlPptalOficinasCentrales;
using Core.Entity.Administrativo.CtrlPresupuestalOficinasCentrales;
using Core.Entity.Principal.Multiempresa;
using Core.Entity.Principal.Usuarios;
using Core.Enum.Administracion.CtrlPptalOficinasCentrales;
using Core.Enum.Multiempresa;
using Core.Enum.Principal;
using Core.Enum.Principal.Bitacoras;
using Data.EntityFramework.Context;
using Data.EntityFramework.Generic;
using Infrastructure.Utils;
using System;
using System.Collections.Generic;
using System.Data.Odbc;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Core.DTO.Administracion.Seguridad.Capacitacion;
using Core.Entity.Maquinaria.Rentabilidad;
using Core.Entity.Principal.Alertas;
using Core.DTO.Utils.Firmas;
using Core.DTO.Enkontrol.Tablas.Poliza;
using Core.DTO.Administracion.CtrlPptalOficinasCentrales.Dashboard;
using Core.Enum;
using System.Net.Mail;
using Data.EntityFramework;
using Core.Enum.Principal.Usuario;
using System.Web;
using System.Web.SessionState;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Core.Objects;
using Core.Enum.Principal.Alertas;

namespace Data.DAO.Administracion.CtrlPresupuestalOficinasCentrales
{
    public class CtrlPresupuestalOficinasCentralesDAO : GenericDAO<tblP_Usuario>, ICtrlPresupuestalOficinasCentralesDAO
    {
        private Dictionary<string, object> resultado = new Dictionary<string, object>();
        private string _NOMBRE_CONTROLADOR = "CtrlPresupuestalOficinasCentralesController";
        private int _SISTEMA = (int)SistemasEnum.ADMINISTRACION_FINANZAS;
        private static HttpSessionState session { get { return HttpContext.Current.Session; } }

        string[] meses = { "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre" };

        #region CONTROL IMPACTOS
        public Dictionary<string, object> GetControlImpactos()
        {
            resultado = new Dictionary<string, object>();
            try
            {
                string strQuery = string.Empty;
                strQuery = @"SELECT t1.id, t1.consecutivo, t1.noCuenta, t1.descripcion, t1.total12meses, t1.promedioMes, t1.idEstrategia, t1.idResponsableLiderCuenta, t1.porcAhorroEsperado, t1.ahorroEsperadoAnual, 
                                    t1.posiblesAcciones, t1.estatus, t1.accionesEstablecidas, t1.fechaImplementacion, t1.pendientes, t2.responsableCuentaLider
                                        FROM tblAF_CtrlPptalOfCe_ControlImpactos AS t1
                                        INNER JOIN tblAF_CtrlPptalOfCe_CatResponsablesCuentas AS t2 ON t1.idResponsableLiderCuenta = t2.id
			                                WHERE t1.registroActivo = @registroActivo";

                List<ControlImpactoDTO> lstControlImpactos = _context.Select<ControlImpactoDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = strQuery,
                    parametros = new { registroActivo = true }
                }).ToList();

                resultado.Add("lstControlImpactos", lstControlImpactos);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetControlImpactos", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> CrearEditarControlImpacto(ControlImpactoDTO objDTO)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                resultado = new Dictionary<string, object>();
                try
                {
                    #region VALIDACIONES
                    if (objDTO.idResponsableLiderCuenta <= 0)
                        throw new Exception("Es necesario seleccionar a un responsable.");
                    #endregion

                    tblAF_CtrlPptalOfCe_ControlImpactos objCE = new tblAF_CtrlPptalOfCe_ControlImpactos();
                    if (objDTO.id > 0)
                    {
                        #region ACTUALIZAR CONTROL IMPACTO
                        tblAF_CtrlPptalOfCe_ControlImpactos objActualizar = _context.tblAF_CtrlPptalOfCe_ControlImpactos.Where(w => w.id == objDTO.id).FirstOrDefault();
                        if (objActualizar == null)
                            throw new Exception("Ocurrió un error al actualizar el registro.");

                        objActualizar.noCuenta = !string.IsNullOrEmpty(objDTO.noCuenta) ? objDTO.noCuenta.Trim() : null;
                        objActualizar.descripcion = !string.IsNullOrEmpty(objDTO.descripcion) ? objDTO.descripcion.Trim() : null;
                        objActualizar.total12meses = objDTO.total12meses;
                        objActualizar.promedioMes = objDTO.promedioMes;
                        objActualizar.idEstrategia = objDTO.idEstrategia;
                        objActualizar.idResponsableLiderCuenta = objDTO.idResponsableLiderCuenta;
                        objActualizar.porcAhorroEsperado = objDTO.porcAhorroEsperado;
                        objActualizar.ahorroEsperadoAnual = objDTO.ahorroEsperadoAnual;
                        objActualizar.posiblesAcciones = !string.IsNullOrEmpty(objDTO.posiblesAcciones) ? objDTO.posiblesAcciones.Trim() : null;
                        objActualizar.estatus = objDTO.estatus;
                        objActualizar.accionesEstablecidas = !string.IsNullOrEmpty(objDTO.accionesEstablecidas) ? objDTO.accionesEstablecidas.Trim() : null;
                        objActualizar.fechaImplementacion = objDTO.fechaImplementacion;
                        objActualizar.pendientes = !string.IsNullOrEmpty(objDTO.pendientes) ? objDTO.pendientes.Trim() : null;
                        objActualizar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                        objActualizar.fechaModificacion = DateTime.Now;
                        _context.SaveChanges();

                        resultado.Add(MESSAGE, "Se ha actualizado con éxito.");
                        #endregion
                    }
                    else
                    {
                        #region NUEVO CONTROL IMPACTO

                        //SE OBTIENE CONSECUTIVO
                        int consecutivo = GetConsecutivo();

                        tblAF_CtrlPptalOfCe_ControlImpactos objGuardar = new tblAF_CtrlPptalOfCe_ControlImpactos();
                        objGuardar.consecutivo = consecutivo;
                        objGuardar.noCuenta = !string.IsNullOrEmpty(objDTO.noCuenta) ? objDTO.noCuenta.Trim() : null;
                        objGuardar.descripcion = !string.IsNullOrEmpty(objDTO.descripcion) ? objDTO.descripcion.Trim() : null;
                        objGuardar.total12meses = objDTO.total12meses;
                        objGuardar.promedioMes = objDTO.promedioMes;
                        objGuardar.idEstrategia = objDTO.idEstrategia;
                        objGuardar.idResponsableLiderCuenta = objDTO.idResponsableLiderCuenta;
                        objGuardar.porcAhorroEsperado = objDTO.porcAhorroEsperado;
                        objGuardar.ahorroEsperadoAnual = objDTO.ahorroEsperadoAnual;
                        objGuardar.posiblesAcciones = !string.IsNullOrEmpty(objDTO.posiblesAcciones) ? objDTO.posiblesAcciones.Trim() : null;
                        objGuardar.estatus = objDTO.estatus;
                        objGuardar.accionesEstablecidas = !string.IsNullOrEmpty(objDTO.accionesEstablecidas) ? objDTO.accionesEstablecidas.Trim() : null;
                        objGuardar.fechaImplementacion = objDTO.fechaImplementacion;
                        objGuardar.pendientes = !string.IsNullOrEmpty(objDTO.pendientes) ? objDTO.pendientes.Trim() : null;
                        objGuardar.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                        objGuardar.fechaCreacion = DateTime.Now;
                        objGuardar.registroActivo = true;
                        _context.tblAF_CtrlPptalOfCe_ControlImpactos.Add(objGuardar);
                        _context.SaveChanges();

                        resultado.Add(MESSAGE, "Se ha registrado con éxito.");
                        #endregion
                    }

                    resultado.Add(SUCCESS, true);
                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "CrearEditarControlImpacto", e, objDTO.id > 0 ? AccionEnum.ACTUALIZAR : AccionEnum.AGREGAR, objDTO.id > 0 ? objDTO.id : 0, 0);
                    resultado.Add(MESSAGE, e.Message);
                    resultado.Add(SUCCESS, false);
                }
            }
            return resultado;
        }

        private int GetConsecutivo()
        {
            int consecutivo = 0;
            try
            {
                #region SE OBTIENE CONSECUTIVO
                consecutivo = _context.Select<int>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"SELECT TOP(1) consecutivo FROM tblAF_CtrlPptalOfCe_ControlImpactos WHERE registroActivo = registroActivo ORDER BY id DESC",
                    parametros = new { registroActivo = true }
                }).FirstOrDefault();
                consecutivo++;
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetConsecutivo", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return consecutivo;
        }

        public Dictionary<string, object> EliminarControlImpacto(int idControlImpacto)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                resultado = new Dictionary<string, object>();
                try
                {
                    #region SE ELIMINA EL CONTROL IMPACTO SELECCIONADO
                    tblAF_CtrlPptalOfCe_ControlImpactos objEliminar = _context.tblAF_CtrlPptalOfCe_ControlImpactos.Where(w => w.id == idControlImpacto).FirstOrDefault();
                    if (objEliminar == null)
                        throw new Exception("Ocurrió un error al eliminar el registro seleccionado.");

                    objEliminar.registroActivo = false;
                    objEliminar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                    objEliminar.fechaModificacion = DateTime.Now;
                    _context.SaveChanges();
                    #endregion

                    resultado.Add(MESSAGE, "Se ha eliminado con éxito.");
                    resultado.Add(SUCCESS, true);
                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "EliminarControlImpacto", e, AccionEnum.ELIMINAR, idControlImpacto, 0);
                    resultado.Add(MESSAGE, e.Message);
                    resultado.Add(SUCCESS, false);
                }
            }
            return resultado;
        }

        public Dictionary<string, object> GetDatosActualizarControlImpacto(int idControlImpacto)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                string strQuery = string.Empty;
                strQuery = @"SELECT id, consecutivo, noCuenta, descripcion, total12meses, promedioMes, idEstrategia, idResponsableLiderCuenta, porcAhorroEsperado, ahorroEsperadoAnual, posiblesAcciones, estatus, 
                                    accionesEstablecidas, fechaImplementacion, pendientes, idUsuarioCreacion, idUsuarioModificacion, fechaCreacion, fechaModificacion, registroActivo
                                        FROM tblAF_CtrlPptalOfCe_ControlImpactos
				                            WHERE id = @idControlImpacto";

                ControlImpactoDTO objControlImpacto = _context.Select<ControlImpactoDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = strQuery,
                    parametros = new { idControlImpacto = idControlImpacto }
                }).FirstOrDefault();

                if (objControlImpacto == null)
                    throw new Exception("Ocurrió un error al obtener la información.");

                resultado.Add("objControlImpacto", objControlImpacto);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetDatosActualizarControlImpacto", e, AccionEnum.CONSULTA, idControlImpacto, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }
        #endregion

        #region CONCEPTOS
        public Dictionary<string, object> GetConceptos(int idAgrupacion)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                List<ConceptoDTO> lstConceptos = _context.Select<ConceptoDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"SELECT t1.id, t1.idAgrupacion, t2.concepto AS concepto, t1.insumo, t1.cta, t1.scta, t1.sscta
		                                FROM tblAF_CtrlPptalOfCe_CatConceptos AS t1
		                                INNER JOIN tblAF_CtrlPptalOfCe_CatCtaInsumos AS t2 ON t1.idConcepto = t2.id
			                                WHERE t1.registroActivo = @registroActivo AND t1.idAgrupacion = @idAgrupacion",
                    parametros = new { registroActivo = true, idAgrupacion = idAgrupacion }
                }).ToList();

                var objAgrupacion = _context.tblAF_CtrllPptalOfCe_CatAgrupaciones.FirstOrDefault(e => e.id == idAgrupacion);

                foreach (var item in lstConceptos)
                {
                    item.anio = objAgrupacion.anio;
                    item.idCC = objAgrupacion.idCC;
                }

                resultado.Add("lstConceptos", lstConceptos);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetConceptos", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> CrearEditarConcepto(ConceptoDTO objDTO)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                resultado = new Dictionary<string, object>();
                try
                {
                    #region VALIDACIONES
                    if (objDTO.idConcepto <= 0)
                        throw new Exception("Es necesario indicar el concepto.");

                    //if (string.IsNullOrEmpty(objDTO.insumoDescripcion))
                    //{
                    //    throw new Exception("Debe indicar un insumo válido.");
                    //}

                    //if (string.IsNullOrEmpty(objDTO.cuentaDescripcion))
                    //{
                    //    throw new Exception("Debe indicar una cuenta válida.");
                    //}
                    #endregion

                    tblAF_CtrlPptalOfCe_CatConceptos objCE = new tblAF_CtrlPptalOfCe_CatConceptos();
                    if (objDTO.id > 0)
                    {
                        #region ACTUALIZAR CONCEPTO
                        objCE = _context.tblAF_CtrlPptalOfCe_CatConceptos.Where(w => w.id == objDTO.id).FirstOrDefault();
                        if (objCE == null)
                            throw new Exception("Ocurrió un error al actualizar el registro.");

                        objCE.idAgrupacion = (int)objDTO.idAgrupacion;
                        objCE.idConcepto = objDTO.idConcepto;
                        objCE.concepto = objDTO.concepto;
                        objCE.insumo = objDTO.insumo;
                        objCE.insumoDescripcion = objDTO.insumoDescripcion ?? "";
                        //objCE.cta = objDTO.cta;
                        //objCE.scta = objDTO.scta;
                        //objCE.sscta = objDTO.sscta;
                        objCE.cuentaDescripcion = objDTO.cuentaDescripcion ?? "";
                        objCE.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                        objCE.fechaModificacion = DateTime.Now;
                        _context.SaveChanges();

                        resultado.Add(MESSAGE, "Se ha actualizado con éxito.");
                        #endregion
                    }
                    else
                    {
                        #region NUEVO CONCEPTO
                        objCE = new tblAF_CtrlPptalOfCe_CatConceptos();
                        objCE.idAgrupacion = (int)objDTO.idAgrupacion;
                        objCE.idConcepto = objDTO.idConcepto;
                        objCE.concepto = objDTO.concepto;
                        objCE.insumo = objDTO.insumo;
                        objCE.insumoDescripcion = objDTO.insumoDescripcion ?? "";
                        //objCE.cta = objDTO.cta;
                        //objCE.scta = objDTO.scta;
                        //objCE.sscta = objDTO.sscta;
                        objCE.cuentaDescripcion = objDTO.cuentaDescripcion ?? "";
                        objCE.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                        objCE.fechaCreacion = DateTime.Now;
                        objCE.registroActivo = true;
                        _context.tblAF_CtrlPptalOfCe_CatConceptos.Add(objCE);
                        _context.SaveChanges();

                        resultado.Add(MESSAGE, "Se ha registrado con éxito.");
                        #endregion
                    }

                    resultado.Add(SUCCESS, true);
                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "CrearEditarConcepto", e, objDTO.id > 0 ? AccionEnum.ACTUALIZAR : AccionEnum.AGREGAR, objDTO.id > 0 ? objDTO.id : 0, 0);
                    resultado.Add(MESSAGE, e.Message);
                    resultado.Add(SUCCESS, false);
                }
            }
            return resultado;
        }

        public Dictionary<string, object> EliminarConcepto(int idConcepto)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                resultado = new Dictionary<string, object>();
                try
                {
                    #region SE ELIMINA EL CONCEPTO SELECCIONADO
                    tblAF_CtrlPptalOfCe_CatConceptos objEliminar = _context.tblAF_CtrlPptalOfCe_CatConceptos.Where(w => w.id == idConcepto).FirstOrDefault();
                    if (objEliminar == null)
                        throw new Exception("Ocurrió un error al eliminar el registro seleccionado.");

                    objEliminar.registroActivo = false;
                    objEliminar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                    objEliminar.fechaModificacion = DateTime.Now;
                    _context.SaveChanges();
                    #endregion

                    resultado.Add(MESSAGE, "Se ha eliminado con éxito.");
                    resultado.Add(SUCCESS, true);
                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "EliminarConcepto", e, AccionEnum.ELIMINAR, idConcepto, 0);
                    resultado.Add(MESSAGE, e.Message);
                    resultado.Add(SUCCESS, false);
                }
            }
            return resultado;
        }

        public Dictionary<string, object> GetDatosActualizarConcepto(int idConcepto)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                ConceptoDTO objConcepto = _context.Select<ConceptoDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"SELECT idAgrupacion, concepto, idConcepto, insumo, insumoDescripcion, cta, scta, sscta, cuentaDescripcion FROM tblAF_CtrlPptalOfCe_CatConceptos WHERE id = @idConcepto",
                    parametros = new { idConcepto = idConcepto }
                }).FirstOrDefault();

                if (objConcepto == null)
                    throw new Exception("Ocurrió un error al obtener la información.");

                resultado.Add("objConcepto", objConcepto);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetDatosActualizarConcepto", e, AccionEnum.CONSULTA, idConcepto, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> GetInsumoDescripcion(int insumo)
        {
            resultado = new Dictionary<string, object>();

            try
            {
                if (insumo.ToString().Count() != 7)
                {
                    throw new Exception("Debe ingresar un número válido de insumo (7 dígitos).");
                }

                var insumoEK = _contextEnkontrol.Select<InsumoDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                {
                    consulta = @"SELECT insumo, descripcion AS insumoDescripcion FROM insumos WHERE insumo = ?",
                    parametros = new List<OdbcParameterDTO> { new OdbcParameterDTO { nombre = "insumo", tipo = OdbcType.Int, valor = insumo } }
                });

                if (insumoEK.Count() == 0)
                {
                    throw new Exception("No se encuentra la información del insumo \"" + insumo + "\".");
                }

                resultado.Add("data", insumoEK[0]);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetInsumoDescripcion", e, AccionEnum.CONSULTA, 0, insumo);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }

            return resultado;
        }

        public List<AutocompletadoDTO> GetInsumosAutocomplete(string term)
        {
            return _contextEnkontrol.Select<AutocompletadoDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
            {
                consulta = @"SELECT TOP 12 insumo AS id, descripcion AS value FROM insumos WHERE descripcion LIKE '" + term.ToUpper() + "%' ORDER BY descripcion"
            });
        }

        public Dictionary<string, object> GetCuentaDescripcion(int cta, int scta, int sscta)
        {
            resultado = new Dictionary<string, object>();

            try
            {
                var cuentaEK = _contextEnkontrol.Select<CuentaContableDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                {
                    consulta = @"SELECT cta, scta, sscta, descripcion AS cuentaDescripcion FROM catcta WHERE cta = ? AND scta = ? AND sscta = ?",
                    parametros = new List<OdbcParameterDTO> {
                        new OdbcParameterDTO { nombre = "cta", tipo = OdbcType.Int, valor = cta },
                        new OdbcParameterDTO { nombre = "scta", tipo = OdbcType.Int, valor = scta },
                        new OdbcParameterDTO { nombre = "sscta", tipo = OdbcType.Int, valor = sscta }
                    }
                });

                if (cuentaEK.Count() == 0)
                {
                    throw new Exception("No se encuentra la información de la cuenta \"" + (cta + "-" + scta + "-" + sscta) + "\".");
                }

                resultado.Add("data", cuentaEK[0]);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetCuentaDescripcion", e, AccionEnum.CONSULTA, 0, new { cta = cta, scta = scta, sscta = sscta });
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }

            return resultado;
        }

        public List<AutocompletadoDTO> GetCuentasAutocomplete(string term)
        {
            return _contextEnkontrol.Select<AutocompletadoDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
            {
                consulta = @"
                    SELECT TOP 12
                        (CONVERT(varchar(10), cta) + '-' + CONVERT(varchar(10), scta) + '-' + CONVERT(varchar(10), sscta)) AS id,
                        descripcion AS value
                    FROM catcta
                    WHERE descripcion LIKE '" + term.ToUpper() + "%' ORDER BY descripcion"
            });
        }

        public Dictionary<string, object> GetCtaInsumoConcepto(int idConcepto)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region SE OBTIENE LA CUENTA E INSUMO DEL CONCEPTO SELECCIONADO
                ConceptoRelCtaInsumoDTO objConcepto = _context.Select<ConceptoRelCtaInsumoDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"SELECT cta, scta, sscta, insumo FROM tblAF_CtrlPptalOfCe_CatCtaInsumos WHERE id = @idConcepto",
                    parametros = new { idConcepto = idConcepto }
                }).FirstOrDefault();

                resultado.Add("objConcepto", objConcepto);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetCtaInsumoConcepto", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }
        #endregion

        #region CAPTURA PPTOS
        public Dictionary<string, object> GetCapturas(CapPptoDTO objDTO)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                List<CapPptoDTO> lstCapPptos = new List<CapPptoDTO>();
                if (objDTO.idConcepto > 0)
                {
                    lstCapPptos = _context.Select<CapPptoDTO>(new DapperDTO
                    {
                        baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                        consulta = @"SELECT t1.id, t1.actividad, t1.cc, t1.idAgrupacion, t1.idConcepto, t1.importeEnero, t1.importeFebrero, t1.importeMarzo, t1.importeAbril, t1.importeMayo, 
                                        t1.importeJunio, t1.importeJulio, t1.importeAgosto, t1.importeSeptiembre, t1.importeOctubre, t1.importeNoviembre, 
                                        t1.importeDiciembre, t1.importeTotal, t1.anio, t1.idResponsable, t2.nombre AS agrupacion, t3.concepto AS concepto,
                                        t4.nombre + ' ' + t4.apellidoPaterno + ' ' + t4.apellidoMaterno AS responsable,
                                        anual.autorizado
                                            FROM tblAF_CtrlPptalOfCe_CapPptos AS t1
			                                INNER JOIN tblAF_CtrllPptalOfCe_CatAgrupaciones AS t2 ON t2.id = t1.idAgrupacion
			                                INNER JOIN tblAF_CtrlPptalOfCe_CatConceptos AS t3 ON t3.id = t1.idConcepto
			                                INNER JOIN tblP_Usuario AS t4 ON t4.id = t1.idResponsable
                                            INNER JOIN tblAF_CtrlPptalOfCe_PptoAnual as anual ON anual.anio = t1.anio AND anual.idCC = t1.cc
				                                WHERE t1.registroActivo = @registroActivo AND t1.cc = @cc AND t1.idAgrupacion = @idAgrupacion AND t1.idConcepto = @idConcepto AND t1.anio = @anio",
                        parametros = new { registroActivo = true, cc = objDTO.cc, idAgrupacion = objDTO.idAgrupacion, idConcepto = objDTO.idConcepto, anio = objDTO.anio }
                    }).ToList();
                }
                else
                {
                    lstCapPptos = _context.Select<CapPptoDTO>(new DapperDTO
                    {
                        baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                        consulta = @"SELECT t1.id, t1.actividad, t1.cc, t1.idAgrupacion, t1.idConcepto, t1.importeEnero, t1.importeFebrero, t1.importeMarzo, t1.importeAbril, t1.importeMayo, 
                                            t1.importeJunio, t1.importeJulio, t1.importeAgosto, t1.importeSeptiembre, t1.importeOctubre, t1.importeNoviembre, 
                                            t1.importeDiciembre, t1.importeTotal, t1.anio, t1.idResponsable, t2.nombre AS agrupacion, t3.concepto AS concepto,
                                            t4.nombre + ' ' + t4.apellidoPaterno + ' ' + t4.apellidoMaterno AS responsable,
                                            anual.autorizado, (t1.importeEnero + t1.importeFebrero + t1.importeMarzo + t1.importeAbril + t1.importeMayo + 
                                            t1.importeJunio + t1.importeJulio + t1.importeAgosto + t1.importeSeptiembre + t1.importeOctubre + t1.importeNoviembre +
                                            t1.importeDiciembre) AS totalRow
                                            FROM tblAF_CtrlPptalOfCe_CapPptos AS t1
			                                INNER JOIN tblAF_CtrllPptalOfCe_CatAgrupaciones AS t2 ON t2.id = t1.idAgrupacion
			                                INNER JOIN tblAF_CtrlPptalOfCe_CatConceptos AS t3 ON t3.id = t1.idConcepto
			                                INNER JOIN tblP_Usuario AS t4 ON t4.id = t1.idResponsable
                                            INNER JOIN tblAF_CtrlPptalOfCe_PptoAnual as anual ON anual.anio = t1.anio AND anual.idCC = t1.cc
				                                WHERE t1.registroActivo = @registroActivo AND t1.cc = @cc AND t1.idAgrupacion = @idAgrupacion AND t1.anio = @anio",
                        parametros = new { registroActivo = true, cc = objDTO.cc, idAgrupacion = objDTO.idAgrupacion, anio = objDTO.anio }
                    }).ToList();
                }

                var presupuestosIds = lstCapPptos.Select(x => x.id).ToList();
                var aditivas = _context.tblAF_CtrlAditiva.Where(x => presupuestosIds.Contains(x.capPptosId) && x.autorizado).ToList();

                foreach (var item in lstCapPptos)
                {
                    var aditivasPresupuesto = aditivas.Where(x => x.capPptosId == item.id).ToList();
                    item.importeEnero += aditivasPresupuesto.Sum(x => x.importeEnero);
                    item.importeFebrero += aditivasPresupuesto.Sum(x => x.importeFebrero);
                    item.importeMarzo += aditivasPresupuesto.Sum(x => x.importeMarzo);
                    item.importeAbril += aditivasPresupuesto.Sum(x => x.importeAbril);
                    item.importeMayo += aditivasPresupuesto.Sum(x => x.importeMayo);
                    item.importeJunio += aditivasPresupuesto.Sum(x => x.importeJunio);
                    item.importeJulio += aditivasPresupuesto.Sum(x => x.importeJulio);
                    item.importeAgosto += aditivasPresupuesto.Sum(x => x.importeAgosto);
                    item.importeSeptiembre += aditivasPresupuesto.Sum(x => x.importeSeptiembre);
                    item.importeOctubre += aditivasPresupuesto.Sum(x => x.importeOctubre);
                    item.importeNoviembre += aditivasPresupuesto.Sum(x => x.importeNoviembre);
                    item.importeDiciembre += aditivasPresupuesto.Sum(x => x.importeDiciembre);
                    item.importeTotal += aditivasPresupuesto.Sum(x => x.importeTotal);
                    item.esTotal = false;
                }

                #region SE OBTIENE TOTALIZADOR POR MES (COLUMNA)
                CapPptoDTO objTotalColumna = new CapPptoDTO();
                objTotalColumna.actividad = "TOTAL";
                objTotalColumna.importeEnero = lstCapPptos.Sum(s => s.importeEnero);
                objTotalColumna.importeFebrero = lstCapPptos.Sum(s => s.importeFebrero);
                objTotalColumna.importeMarzo = lstCapPptos.Sum(s => s.importeMarzo);
                objTotalColumna.importeAbril = lstCapPptos.Sum(s => s.importeAbril);
                objTotalColumna.importeMayo = lstCapPptos.Sum(s => s.importeMayo);
                objTotalColumna.importeJunio = lstCapPptos.Sum(s => s.importeJunio);
                objTotalColumna.importeJulio = lstCapPptos.Sum(s => s.importeJulio);
                objTotalColumna.importeAgosto = lstCapPptos.Sum(s => s.importeAgosto);
                objTotalColumna.importeSeptiembre = lstCapPptos.Sum(s => s.importeSeptiembre);
                objTotalColumna.importeOctubre = lstCapPptos.Sum(s => s.importeOctubre);
                objTotalColumna.importeNoviembre = lstCapPptos.Sum(s => s.importeNoviembre);
                objTotalColumna.importeDiciembre = lstCapPptos.Sum(s => s.importeDiciembre);
                objTotalColumna.totalRow = lstCapPptos.Sum(s => s.importeTotal);
                objTotalColumna.esTotal = true;
                lstCapPptos.Add(objTotalColumna);
                #endregion

                #region SE CONVIERTE TEXTO A MAYUSCULAS
                foreach (var item in lstCapPptos)
                {
                    if (!string.IsNullOrEmpty(item.actividad))
                    {
                        string actividadTU = item.actividad.Trim().ToUpper();
                        item.actividad = actividadTU;
                    }

                    #region SI EL TEXTO DE LA ACTIVIDAD CONTIENE MUCHO TEXTO, SE MUESTRA REDUCIDO.
                    if (!string.IsNullOrEmpty(item.actividad))
                    {
                        string actividad = item.actividad;
                        int lenActividad = actividad.Length;
                        if (lenActividad >= 23)
                        {
                            string strActividad = actividad.Substring(0, 22);
                            item.lenActividad = strActividad + "...";
                        }
                        else
                            item.lenActividad = item.actividad;
                    }
                    #endregion
                }
                #endregion

                resultado.Add("lstCapPptos", lstCapPptos);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetCapturas", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> GetCapturasContable(CapPptoDTO objDTO)
        {
            resultado = new Dictionary<string, object>();

            try
            {
                var registroCentroCostoSIGOPLAN = _context.tblP_CC.FirstOrDefault(x => x.id == objDTO.idCC);
                var polizas = new List<PolizaDTO>();

                if (objDTO.idConcepto > 0) //Detalle de un concepto
                {
                    var registroConcepto = _context.tblAF_CtrlPptalOfCe_CatConceptos.FirstOrDefault(x => x.id == objDTO.idConcepto);

                    #region String para la consulta de múltiples cta-scta-sscta
                    var where_cuentas_string = "";
                    var listaCuentas = _context.tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas.Where(x => x.registroActivo && x.idConcepto == registroConcepto.idConcepto).ToList();

                    foreach (var cuenta in listaCuentas)
                    {
                        where_cuentas_string += string.Format(@"(cta = {0} AND scta = {1} AND sscta = {2})", cuenta.cta, cuenta.scta, cuenta.sscta);

                        if (cuenta != listaCuentas.Last())
                        {
                            where_cuentas_string += " OR ";
                        }
                    }

                    if (where_cuentas_string != "")
                    {
                        where_cuentas_string = " AND (" + where_cuentas_string + ")";
                    }
                    #endregion

                    polizas = _contextEnkontrol.Select<PolizaDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                    {
                        consulta = string.Format(@"
                                SELECT
                                    year, mes, poliza, tp, linea, cta, scta, sscta, concepto, monto
                                FROM sc_movpol
                                WHERE year = ? AND cc = ? {0}", where_cuentas_string),
                        parametros = new List<OdbcParameterDTO>() {
                        new OdbcParameterDTO() { nombre = "year", tipo = OdbcType.Numeric, valor = objDTO.anio },
                        new OdbcParameterDTO() { nombre = "cc", tipo = OdbcType.VarChar, valor = registroCentroCostoSIGOPLAN.cc }
                    }
                    });
                }
                else //Detalle de una agrupación de conceptos
                {
                    if (objDTO.idAgrupacion == 9999999)
                    {
                        //SIN CATALOGAR
                        var catalogoCuentas = new List<string>();

                        var capPptos = _context.tblAF_CtrlPptalOfCe_CapPptos
                            .Where(x =>
                                x.cc == objDTO.idCC.ToString() &&
                                x.anio == objDTO.anio &&
                                x.registroActivo).ToList();

                        var idConceptosPptos = capPptos.Select(x => x.idConcepto).ToList();

                        var catConceptos = _context.tblAF_CtrlPptalOfCe_CatConceptos.Where(x => idConceptosPptos.Contains(x.id)).Select(x => x.idConcepto).ToList();
                        var cuentasConcepto = _context.tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas.Where(x => catConceptos.Contains(x.idConcepto)).ToList();

                        foreach (var item in cuentasConcepto)
                        {
                            catalogoCuentas.Add(item.cta + "-" + item.scta + "-" + item.sscta);
                        }

                        var query_sinCatalogar = new OdbcConsultaDTO();
                        query_sinCatalogar.consulta = string.Format("SELECT DISTINCT CAST(cta as varchar(4)) + '-' + CAST(scta as varchar(4)) + '-' + CAST(sscta as varchar(4)) AS cuenta FROM catcta WHERE scta != 23 AND cta = 5280");
                        var cuentasEnkontrol = _contextEnkontrol.Select<CuentasEnkontrolDTO>(vSesiones.sesionAmbienteEnkontrolAdm, query_sinCatalogar);

                        cuentasEnkontrol.RemoveAll(x => catalogoCuentas.Contains(x.cuenta));

                        string where_movpolSinCatalogar = "";
                        if (cuentasEnkontrol.Count == 0)
                        {
                            where_movpolSinCatalogar = "1 = 2";
                        }
                        else
                        {
                            where_movpolSinCatalogar = string.Format("(CAST(cta as varchar(4)) + '-' + CAST(scta as varchar(4)) + '-' + CAST(sscta as varchar(4))) IN {0}", cuentasEnkontrol.Select(x => x.cuenta).ToList().ToParamInValue());
                        }

                        var query_movpolSinCatalogar = new OdbcConsultaDTO();
                        query_movpolSinCatalogar.consulta = string.Format(
                            @"SELECT
                                year, mes, poliza, tp, linea, cta, scta, sscta, concepto, monto
                            FROM
                                sc_movpol
                            WHERE
                                year = ? AND
                                cc = ? AND
                                {0}", where_movpolSinCatalogar);
                        query_movpolSinCatalogar.parametros.Add(new OdbcParameterDTO
                        {
                            nombre = "year",
                            tipo = OdbcType.Int,
                            valor = objDTO.anio
                        });
                        query_movpolSinCatalogar.parametros.Add(new OdbcParameterDTO
                        {
                            nombre = "cc",
                            tipo = OdbcType.NVarChar,
                            valor = registroCentroCostoSIGOPLAN.cc
                        });
                        if (cuentasEnkontrol.Count > 0)
                        {
                            query_movpolSinCatalogar.parametros.AddRange(cuentasEnkontrol.Select(x => new OdbcParameterDTO
                            {
                                nombre = "cuenta",
                                tipo = OdbcType.NVarChar,
                                valor = x.cuenta
                            }).ToList());
                        }
                        var montosGastosSinCatalogar = _contextEnkontrol.Select<PolizaDTO>(vSesiones.sesionAmbienteEnkontrolAdm, query_movpolSinCatalogar);
                        polizas.AddRange(montosGastosSinCatalogar);
                    }
                    else
                    {
                        var listaRegistrosConcepto = _context.tblAF_CtrlPptalOfCe_CatConceptos.Where(x => x.registroActivo && x.idAgrupacion == objDTO.idAgrupacion).ToList();

                        foreach (var concepto in listaRegistrosConcepto)
                        {
                            #region String para la consulta de múltiples cta-scta-sscta
                            var where_cuentas_string = "";
                            var listaCuentas = _context.tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas.Where(x => x.registroActivo && x.idConcepto == concepto.idConcepto).ToList();

                            foreach (var cuenta in listaCuentas)
                            {
                                where_cuentas_string += string.Format(@"(cta = {0} AND scta = {1} AND sscta = {2})", cuenta.cta, cuenta.scta, cuenta.sscta);

                                if (cuenta != listaCuentas.Last())
                                {
                                    where_cuentas_string += " OR ";
                                }
                            }

                            if (where_cuentas_string != "")
                            {
                                where_cuentas_string = " AND (" + where_cuentas_string + ")";
                            }
                            #endregion

                            polizas.AddRange(_contextEnkontrol.Select<PolizaDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                            {
                                consulta = string.Format(@"
                                SELECT
                                    year, mes, poliza, tp, linea, cta, scta, sscta, concepto, monto
                                FROM sc_movpol
                                WHERE year = ? AND cc = ? {0}", where_cuentas_string),
                                parametros = new List<OdbcParameterDTO>() {
                                new OdbcParameterDTO() { nombre = "year", tipo = OdbcType.Numeric, valor = objDTO.anio },
                                new OdbcParameterDTO() { nombre = "cc", tipo = OdbcType.VarChar, valor = registroCentroCostoSIGOPLAN.cc }
                            }
                            }));
                        }
                    }
                }

                resultado.Add("data", polizas);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetCapturasContable", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }

            return resultado;
        }

        public Dictionary<string, object> CrearEditarCaptura(CapPptoDTO objDTO)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                resultado = new Dictionary<string, object>();
                try
                {
                    #region VALIDACIONES
                    if (objDTO.idConcepto <= 0)
                        throw new Exception("Es necesario indicar el concepto.");

                    objDTO.idCC = Convert.ToInt32(objDTO.cc);
                    tblAF_CtrlPptalOfCe_RN_PlanMaestro objPM = _context.tblAF_CtrlPptalOfCe_RN_PlanMaestro.FirstOrDefault(x => x.registroActivo && x.anio == objDTO.anio && x.idCC == objDTO.idCC);
                    if (objPM == null)
                        throw new Exception("No existe un plan maestro para el año y cc indicado. No se puede proceder con la captura.");
                    #endregion

                    tblAF_CtrlPptalOfCe_CapPptos objCE = new tblAF_CtrlPptalOfCe_CapPptos();
                    if (objDTO.id > 0)
                    {
                        #region ACTUALIZAR CAPTURA PPTO
                        objCE = _context.tblAF_CtrlPptalOfCe_CapPptos.Where(w => w.id == objDTO.id).FirstOrDefault();
                        if (objCE == null)
                            throw new Exception("Ocurrió un error al actualizar el registro.");

                        objCE.actividad = !string.IsNullOrEmpty(objDTO.actividad) ? objDTO.actividad.Trim() : null;
                        objCE.idAgrupacion = (int)objDTO.idAgrupacion;
                        objCE.cc = objDTO.cc;
                        objCE.idConcepto = objDTO.idConcepto;
                        objCE.importeEnero = (decimal)objDTO.importeEnero;
                        objCE.importeFebrero = (decimal)objDTO.importeFebrero;
                        objCE.importeMarzo = (decimal)objDTO.importeMarzo;
                        objCE.importeAbril = (decimal)objDTO.importeAbril;
                        objCE.importeMayo = (decimal)objDTO.importeMayo;
                        objCE.importeJunio = (decimal)objDTO.importeJunio;
                        objCE.importeJulio = (decimal)objDTO.importeJulio;
                        objCE.importeAgosto = (decimal)objDTO.importeAgosto;
                        objCE.importeSeptiembre = (decimal)objDTO.importeSeptiembre;
                        objCE.importeOctubre = (decimal)objDTO.importeOctubre;
                        objCE.importeNoviembre = (decimal)objDTO.importeNoviembre;
                        objCE.importeDiciembre = (decimal)objDTO.importeDiciembre;
                        objCE.importeTotal = (decimal)objDTO.importeEnero + (decimal)objDTO.importeFebrero + (decimal)objDTO.importeMarzo +
                                             (decimal)objDTO.importeAbril + (decimal)objDTO.importeMayo + (decimal)objDTO.importeJunio +
                                             (decimal)objDTO.importeJulio + (decimal)objDTO.importeAgosto + (decimal)objDTO.importeSeptiembre +
                                             (decimal)objDTO.importeOctubre + (decimal)objDTO.importeNoviembre + (decimal)objDTO.importeDiciembre;
                        objCE.anio = objDTO.anio;
                        objCE.idResponsable = objDTO.idResponsable;
                        objCE.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                        objCE.fechaModificacion = DateTime.Now;
                        _context.SaveChanges();

                        resultado.Add(MESSAGE, "Se ha actualizado con éxito.");
                        #endregion
                    }
                    else
                    {
                        #region NUEVO CAPTURA PPTO
                        objCE = new tblAF_CtrlPptalOfCe_CapPptos();
                        objCE.actividad = !string.IsNullOrEmpty(objDTO.actividad) ? objDTO.actividad.Trim() : null;
                        objCE.cc = objDTO.cc;
                        objCE.idAgrupacion = (int)objDTO.idAgrupacion;
                        objCE.idConcepto = objDTO.idConcepto;
                        objCE.importeEnero = (decimal)objDTO.importeEnero;
                        objCE.importeFebrero = (decimal)objDTO.importeFebrero;
                        objCE.importeMarzo = (decimal)objDTO.importeMarzo;
                        objCE.importeAbril = (decimal)objDTO.importeAbril;
                        objCE.importeMayo = (decimal)objDTO.importeMayo;
                        objCE.importeJunio = (decimal)objDTO.importeJunio;
                        objCE.importeJulio = (decimal)objDTO.importeJulio;
                        objCE.importeAgosto = (decimal)objDTO.importeAgosto;
                        objCE.importeSeptiembre = (decimal)objDTO.importeSeptiembre;
                        objCE.importeOctubre = (decimal)objDTO.importeOctubre;
                        objCE.importeNoviembre = (decimal)objDTO.importeNoviembre;
                        objCE.importeDiciembre = (decimal)objDTO.importeDiciembre;
                        objCE.importeTotal = (decimal)objDTO.importeEnero + (decimal)objDTO.importeFebrero + (decimal)objDTO.importeMarzo +
                                             (decimal)objDTO.importeAbril + (decimal)objDTO.importeMayo + (decimal)objDTO.importeJunio +
                                             (decimal)objDTO.importeJulio + (decimal)objDTO.importeAgosto + (decimal)objDTO.importeSeptiembre +
                                             (decimal)objDTO.importeOctubre + (decimal)objDTO.importeNoviembre + (decimal)objDTO.importeDiciembre;
                        objCE.anio = objDTO.anio;
                        objCE.idResponsable = objDTO.idResponsable;
                        objCE.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                        objCE.fechaCreacion = DateTime.Now;
                        objCE.registroActivo = true;
                        _context.tblAF_CtrlPptalOfCe_CapPptos.Add(objCE);
                        _context.SaveChanges();

                        resultado.Add(MESSAGE, "Se ha registrado con éxito.");
                        #endregion
                    }

                    resultado.Add(SUCCESS, true);
                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "CrearEditarCaptura", e, objDTO.id > 0 ? AccionEnum.ACTUALIZAR : AccionEnum.AGREGAR, objDTO.id > 0 ? objDTO.id : 0, 0);
                    resultado.Add(MESSAGE, e.Message);
                    resultado.Add(SUCCESS, false);
                }
            }
            return resultado;
        }

        public Dictionary<string, object> EliminarCaptura(int idCaptura)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                resultado = new Dictionary<string, object>();
                try
                {
                    #region SE ELIMINA LA CAPTURA PPTO SELECCIONADO
                    tblAF_CtrlPptalOfCe_CapPptos objEliminar = _context.tblAF_CtrlPptalOfCe_CapPptos.Where(w => w.id == idCaptura).FirstOrDefault();
                    if (objEliminar == null)
                        throw new Exception("Ocurrió un error al eliminar el registro seleccionado.");

                    objEliminar.registroActivo = false;
                    objEliminar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                    objEliminar.fechaModificacion = DateTime.Now;
                    _context.SaveChanges();
                    #endregion

                    resultado.Add(MESSAGE, "Se ha eliminado con éxito.");
                    resultado.Add(SUCCESS, true);
                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "EliminarCaptura", e, AccionEnum.ELIMINAR, idCaptura, 0);
                    resultado.Add(MESSAGE, e.Message);
                    resultado.Add(SUCCESS, false);
                }
            }
            return resultado;
        }

        public Dictionary<string, object> GetDatosActualizarCaptura(int idCaptura)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                CapPptoDTO objCapPpto = _context.Select<CapPptoDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"SELECT t1.id, t1.cc, t1.idAgrupacion, t1.idConcepto, t1.importeEnero, t1.importeFebrero, t1.importeMarzo, t1.importeAbril, t1.importeMayo, 
                                        t1.importeJunio, t1.importeJulio, t1.importeAgosto, t1.importeSeptiembre, t1.importeOctubre, t1.importeNoviembre, 
                                        t1.importeDiciembre, t1.importeTotal, t1.anio, t1.idResponsable, t2.nombre AS agrupacion, t3.concepto AS concepto,
                                        t4.nombre + ' ' + t4.apellidoPaterno + ' ' + t4.apellidoMaterno AS responsable, t1.actividad
                                            FROM tblAF_CtrlPptalOfCe_CapPptos AS t1
			                                INNER JOIN tblAF_CtrllPptalOfCe_CatAgrupaciones AS t2 ON t2.id = t1.idAgrupacion
			                                INNER JOIN tblAF_CtrlPptalOfCe_CatConceptos AS t3 ON t3.id = t1.idConcepto
			                                INNER JOIN tblP_Usuario AS t4 ON t4.id = t1.idResponsable
				                                WHERE t1.id = @idCaptura",
                    parametros = new { idCaptura = idCaptura }
                }).FirstOrDefault();

                if (objCapPpto == null)
                    throw new Exception("Ocurrió un error al obtener la información.");

                resultado.Add("objCapPpto", objCapPpto);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetDatosActualizarCaptura", e, AccionEnum.CONSULTA, idCaptura, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> GetInsumoCuenta(int id)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                CapPptoDTO objInfo = _context.Select<CapPptoDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"SELECT insumoDescripcion, cuentaDescripcion FROM tblAF_CtrlPptalOfCe_CatConceptos WHERE id = @id",
                    parametros = new { id = id }
                }).FirstOrDefault();

                resultado.Add("objInfo", objInfo);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetInsumoCuenta", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> GetAditivas(int idPresupuesto)
        {
            try
            {
                var aditivas = new List<AditivaDTO>();

                var presupuesto = _context.tblAF_CtrlPptalOfCe_CapPptos.First(x => x.id == idPresupuesto);

                var presupuestoOriginal = new AditivaDTO();
                presupuestoOriginal.id = presupuesto.id;
                presupuestoOriginal.indicador = TipoPresupuestoEnum.original;
                presupuestoOriginal.descripcion = presupuesto.actividad;
                presupuestoOriginal.importeEnero = presupuesto.importeEnero;
                presupuestoOriginal.importeFebrero = presupuesto.importeFebrero;
                presupuestoOriginal.importeMarzo = presupuesto.importeMarzo;
                presupuestoOriginal.importeAbril = presupuesto.importeAbril;
                presupuestoOriginal.importeMayo = presupuesto.importeMayo;
                presupuestoOriginal.importeJunio = presupuesto.importeJunio;
                presupuestoOriginal.importeJulio = presupuesto.importeJulio;
                presupuestoOriginal.importeAgosto = presupuesto.importeAgosto;
                presupuestoOriginal.importeSeptiembre = presupuesto.importeSeptiembre;
                presupuestoOriginal.importeOctubre = presupuesto.importeOctubre;
                presupuestoOriginal.importeNoviembre = presupuesto.importeNoviembre;
                presupuestoOriginal.importeDiciembre = presupuesto.importeDiciembre;
                presupuestoOriginal.importeTotal = presupuesto.importeTotal;
                aditivas.Add(presupuestoOriginal);

                foreach (var item in presupuesto.aditivas.Where(x => x.autorizado && x.registroActivo).ToList())
                {
                    var p = new AditivaDTO();
                    p.id = item.id;
                    p.indicador = TipoPresupuestoEnum.aditivaDeductivaAutorizada;
                    p.descripcion = "ADITIVA/DEDUCTIVA";
                    p.importeEnero = item.importeEnero;
                    p.importeFebrero = item.importeFebrero;
                    p.importeMarzo = item.importeMarzo;
                    p.importeAbril = item.importeAbril;
                    p.importeMayo = item.importeMayo;
                    p.importeJunio = item.importeJunio;
                    p.importeJulio = item.importeJulio;
                    p.importeAgosto = item.importeAgosto;
                    p.importeSeptiembre = item.importeSeptiembre;
                    p.importeOctubre = item.importeOctubre;
                    p.importeNoviembre = item.importeNoviembre;
                    p.importeDiciembre = item.importeDiciembre;
                    p.importeTotal = item.importeTotal;
                    aditivas.Add(p);
                }

                var total = new AditivaDTO();
                total.id = 0;
                total.indicador = TipoPresupuestoEnum.total;
                total.descripcion = "TOTAL";
                total.importeEnero = aditivas.Sum(x => x.importeEnero);
                total.importeFebrero = aditivas.Sum(x => x.importeFebrero);
                total.importeMarzo = aditivas.Sum(x => x.importeMarzo);
                total.importeAbril = aditivas.Sum(x => x.importeAbril);
                total.importeMayo = aditivas.Sum(x => x.importeMayo);
                total.importeJunio = aditivas.Sum(x => x.importeJunio);
                total.importeJulio = aditivas.Sum(x => x.importeJulio);
                total.importeAgosto = aditivas.Sum(x => x.importeAgosto);
                total.importeSeptiembre = aditivas.Sum(x => x.importeSeptiembre);
                total.importeOctubre = aditivas.Sum(x => x.importeOctubre);
                total.importeNoviembre = aditivas.Sum(x => x.importeNoviembre);
                total.importeDiciembre = aditivas.Sum(x => x.importeDiciembre);
                total.importeTotal = aditivas.Sum(x => x.importeTotal);
                aditivas.Add(total);

                foreach (var item in presupuesto.aditivas.Where(x => !x.autorizado && x.registroActivo).ToList())
                {
                    var p = new AditivaDTO();
                    p.id = item.id;
                    p.indicador = TipoPresupuestoEnum.aditivaDeductivaPendiente;
                    p.descripcion = "PENDIENTE AUTORIZACIÓN";
                    p.importeEnero = item.importeEnero;
                    p.importeFebrero = item.importeFebrero;
                    p.importeMarzo = item.importeMarzo;
                    p.importeAbril = item.importeAbril;
                    p.importeMayo = item.importeMayo;
                    p.importeJunio = item.importeJunio;
                    p.importeJulio = item.importeJulio;
                    p.importeAgosto = item.importeAgosto;
                    p.importeSeptiembre = item.importeSeptiembre;
                    p.importeOctubre = item.importeOctubre;
                    p.importeNoviembre = item.importeNoviembre;
                    p.importeDiciembre = item.importeDiciembre;
                    p.importeTotal = item.importeTotal;
                    aditivas.Add(p);
                }

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, aditivas);
            }
            catch (Exception ex)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetAditivas", ex, AccionEnum.CONSULTA, 0, idPresupuesto);
                resultado.Add(MESSAGE, ex.Message);
                resultado.Add(SUCCESS, false);
            }

            return resultado;
        }

        public void QuitarAlerta(int idPresupuesto)
        {
            var quitarAlerta = _context.tblP_Alerta.FirstOrDefault(x => x.objID == idPresupuesto && !x.visto && x.userRecibeID == vSesiones.sesionUsuarioDTO.id && x.tipoAlerta == 2 && x.sistemaID == (int)SistemasEnum.ADMINISTRACION_FINANZAS && x.msj.Contains("ADITIVA AUTORIZADA"));
            if (quitarAlerta != null)
            {
                quitarAlerta.visto = true;
                _context.SaveChanges();
            }
        }

        public Dictionary<string, object> GuardarAditivasNuevas(List<AditivaDTO> aditivas, int idPresupuesto)
        {
            using (var transaccion = _context.Database.BeginTransaction())
            {
                try
                {
                    var presupuesto = _context.tblAF_CtrlPptalOfCe_CapPptos.FirstOrDefault(x => x.id == idPresupuesto);
                    var cc = Convert.ToInt32(presupuesto.cc);

                    var ccServicios = _context.tblAF_CtrlPptalOfCe_CCRelServicios.Where(x => x.registroActivo).Select(x => x.idCC).ToList();

                    if (presupuesto != null)
                    {
                        if (!_context.tblAF_CtrlPptalOfCe_PptoAnual.Any(x => x.idCC == cc && x.anio == presupuesto.anio && x.autorizado))
                        {
                            throw new Exception("No existe un presupuesto autorizado");
                        }
                        var aditivasNuevas = new List<tblAF_CtrlAditiva>();
                        foreach (var item in aditivas)
                        {
                            var aditiva = new tblAF_CtrlAditiva();

                            if (ccServicios.Contains(cc))
                            {
                                aditiva.autorizante1 = (int)AutorizantesEnum.segundoAutorizanteID;
                            }
                            else
                            {
                                aditiva.autorizante1 = (int)AutorizantesEnum.segundoAutorizanteID;
                                aditiva.autorizante1 = (int)AutorizantesEnum.tercerAutorizanteID;
                            }

                            aditiva.capPptosId = presupuesto.id;
                            aditiva.importeEnero = item.importeEnero;
                            aditiva.importeFebrero = item.importeFebrero;
                            aditiva.importeMarzo = item.importeMarzo;
                            aditiva.importeAbril = item.importeAbril;
                            aditiva.importeMayo = item.importeMayo;
                            aditiva.importeJunio = item.importeJunio;
                            aditiva.importeJulio = item.importeJulio;
                            aditiva.importeAgosto = item.importeAgosto;
                            aditiva.importeSeptiembre = item.importeSeptiembre;
                            aditiva.importeOctubre = item.importeOctubre;
                            aditiva.importeNoviembre = item.importeNoviembre;
                            aditiva.importeDiciembre = item.importeDiciembre;
                            aditiva.importeTotal = item.importeTotal;
                            aditiva.comentario = item.comentario;
                            aditiva.idUsuarioCreacion = vSesiones.sesionUsuarioDTO.id;
                            aditiva.idUsuarioModificacion = aditiva.idUsuarioCreacion;
                            aditiva.fechaCreacion = DateTime.Now;
                            aditiva.fechaModificacion = aditiva.fechaCreacion;
                            aditiva.registroActivo = true;
                            aditivasNuevas.Add(aditiva);
                        }

                        _context.tblAF_CtrlAditiva.AddRange(aditivasNuevas);
                        _context.SaveChanges();

                        tblAF_CtrlAutorizanteAditiva autorizante = null;

                        var lstAutorizantes = new List<FirmantesDTO>();

                        if (ccServicios.Contains(cc))
                        {
                            autorizante = _context.tblAF_CtrlAutorizanteAditiva.First(x => x.idRow == 2);

                            var objAutorizante = new FirmantesDTO();
                            objAutorizante.nombreCompleto = autorizante.autorizante.nombre.ToUpper() + " " + autorizante.autorizante.apellidoPaterno.ToUpper() + " " + autorizante.autorizante.apellidoMaterno.ToUpper();
                            objAutorizante.estatus = "PENDIENTE";
                            lstAutorizantes.Add(objAutorizante);
                        }
                        else
                        {
                            autorizante = _context.tblAF_CtrlAutorizanteAditiva.First(x => x.idRow == 2);

                            var objAutorizante = new FirmantesDTO();
                            objAutorizante.nombreCompleto = autorizante.autorizante.nombre.ToUpper() + " " + autorizante.autorizante.apellidoPaterno.ToUpper() + " " + autorizante.autorizante.apellidoMaterno.ToUpper();
                            objAutorizante.estatus = "PENDIENTE";
                            lstAutorizantes.Add(objAutorizante);
                        }

                        //Se verifica si el usuario ya tiene una alerta de aditiva del este CC para no notificarlo de nuevo.
                        var idsAditivasNuevas = aditivasNuevas.Select(x => x.id).ToList();
                        if (!_context.tblAF_CtrlAditiva.Any(x => x.presupuesto.cc == presupuesto.cc && x.registroActivo && !x.autorizado && !x.rechazado && !idsAditivasNuevas.Contains(x.id)))
                        {
                            #region SE INICIALIZA OBJETO PARA NOTIFICAR AL USUARIO QUE HAY UN ADITIVA POR AUTORIZAR/RECHAZAR
                            tblP_Alerta objAlerta = new tblP_Alerta();
                            objAlerta.userEnviaID = (int)vSesiones.sesionUsuarioDTO.id;
                            objAlerta.tipoAlerta = 2;
                            objAlerta.sistemaID = (int)SistemasEnum.ADMINISTRACION_FINANZAS;
                            objAlerta.visto = false;
                            objAlerta.url = "/Administrativo/CtrlPptalOficinasCentrales/AutorizacionesAditivas?anio=" + presupuesto.anio + "&idCC=" + cc + "";
                            objAlerta.obj = null;

                            tblP_CC objCC = _context.tblP_CC.Where(w => w.id == cc).FirstOrDefault();

                            if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                            {
                                if (objCC != null)
                                    objAlerta.msj = string.Format("{0}{1}", "GESTIÓN ADITIVA: CTRL PRESUPUESTAL - ", objCC.cc);
                                else
                                    objAlerta.msj = string.Format("{0}{1}", "GESTIÓN ADITIVA: CTRL PRESUPUESTAL");
                            }
                            else if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                            {
                                if (objCC != null)
                                    objAlerta.msj = string.Format("{0}{1}", "GESTIÓN ADITIVA: CTRL PRESUPUESTAL - ", objCC.areaCuenta);
                                else
                                    objAlerta.msj = string.Format("{0}{1}", "GESTIÓN ADITIVA: CTRL PRESUPUESTAL");
                            }

                            objAlerta.documentoID = 0;
                            objAlerta.moduloID = 0;
                            objAlerta.userRecibeID = autorizante.idAutorizante;
                            objAlerta.objID = presupuesto.id;

                            _context.tblP_Alerta.Add(objAlerta);
                            _context.SaveChanges();
                            #endregion

                            var ccDescripcion = _context.tblP_CC.First(x => x.id == cc).descripcion.Trim();

                            #region SE ENVIA CORREO //TODO
                            List<string> lstCorreos = new List<string>();
                            lstCorreos.Add(autorizante.autorizante.correo);

                            // SE OBTIENE CORREO DEL NOTIFICANTE
                            string correoNotificante = (string)vSesiones.sesionUsuarioDTO.correo;
                            if (!string.IsNullOrEmpty(correoNotificante))
                                lstCorreos.Add(correoNotificante);
                            else
                            {
                                correoNotificante = _context.tblP_Usuario.Where(w => w.id == (int)vSesiones.sesionUsuarioDTO.id).Select(s => s.correo).FirstOrDefault();
                                if (!string.IsNullOrEmpty(correoNotificante))
                                    lstCorreos.Add(correoNotificante);
                                else
                                {
                                    List<string> lstCorreosError = new List<string>();
                                    lstCorreosError.Add("omar.nunez@construplan.com.mx");
                                    GlobalUtils.sendEmail(string.Format("{0}: ERROR ENVIO CORREO NOTIFICAR", PersonalUtilities.GetNombreEmpresa()), "Ocurrió un error al enviar correo de notificar al notificante.", lstCorreos);
                                }
                            }

#if DEBUG
                            lstCorreos = new List<string>();
                            lstCorreos.Add("omar.nunez@construplan.com.mx");
#endif
                            string tablaAutorizantes = GlobalUtils.tablaFirmantesCtrlPptal(lstAutorizantes);
                            if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                            {
                                GlobalUtils.sendEmail(string.Format("{0}: CONTROL PRESUPUESTAL GESTIÓN ADITIVA/DEDUCTIVA - {1}", PersonalUtilities.GetNombreEmpresa(), ccDescripcion),
                                    "Buen día, el CC " + ccDescripcion + " ha notificado la creación de una aditiva/deductiva para su presupuesto y esta listo para ser evaluado<br><br>" + tablaAutorizantes +
                                    "<br><br>Favor de ingresar a <b>sigoplan.construplan.com.mx</b> al menú:<br>Construplan > Admin y Finanzas > Control presupuestal > Gestión aditivas.<br>" +
                                    "Se informa que este es un correo autogenerado por el sistema SIGOPLAN (<a href='http://sigoplan.construplan.com.mx/'>http://sigoplan.construplan.com.mx</a>). No es necesario dar una respuesta. Gracias.", lstCorreos);
                            }
                            else if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                            {
                                GlobalUtils.sendEmail(string.Format("{0}: CONTROL PRESUPUESTAL GESTIÓN ADITIVA/DEDUCTIVA - {1}", PersonalUtilities.GetNombreEmpresa(), ccDescripcion),
                                    "Buen día, el AC " + ccDescripcion + " ha notificado la creación de una aditiva/deductiva para su presupuesto y esta listo para ser evaluado<br><br>" + tablaAutorizantes +
                                    "<br><br>Favor de ingresar a <b>sigoplan.construplan.com.mx</b> al menú:<br>Construplan > Admin y Finanzas > Control presupuestal > Gestión aditivas.<br>" +
                                    "Se informa que este es un correo autogenerado por el sistema SIGOPLAN (<a href='http://sigoplan.construplan.com.mx/'>http://sigoplan.construplan.com.mx</a>). No es necesario dar una respuesta. Gracias.", lstCorreos);
                            }
                            #endregion
                        }
                        //

                        transaccion.Commit();
                        resultado.Add(SUCCESS, true);
                    }
                    else
                    {
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "No existe el presupuesto");
                    }
                }
                catch (Exception ex)
                {
                    transaccion.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GuardarAditivasNuevas", ex, AccionEnum.CONSULTA, 0, new { idPresupuesto = idPresupuesto, aditivas = aditivas });
                    resultado.Add(MESSAGE, ex.Message);
                    resultado.Add(SUCCESS, false);
                }
            }

            return resultado;
        }

        public Dictionary<string, object> NotificarPptoCapturado(int anio, string _idCC)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                resultado = new Dictionary<string, object>();
                try
                {
                    #region SE VERIFICA QUE EL PPTO CAPTURADO, HAGA MATCH CON EL PLAN MAESTRO
                    bool isMatch = true;
                    bool isMatchCeros = true;
                    bool isMatchAgrupaciones = true;
                    decimal totalPlanM = 0M;
                    decimal totalPptoM = 0M;
                    int idCC = Convert.ToInt32(_idCC);
                    List<tblAF_CtrllPptalOfCe_CatAgrupaciones> lstAgrupaciones = _context.tblAF_CtrllPptalOfCe_CatAgrupaciones.Where(w => w.anio == anio && w.idCC == idCC).ToList();
                    foreach (var item in lstAgrupaciones)
                    {
                        decimal totalAgrupacionPlanMaestro = _context.Select<decimal>(new DapperDTO
                        {
                            baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                            consulta = @"SELECT SUM(cantPpto) AS cantPpto
		                                FROM tblAF_CtrlPptalOfCe_CatConceptos
			                                WHERE idAgrupacion = @idAgrupacion AND registroActivo = @registroActivo",
                            parametros = new { idAgrupacion = item.id, registroActivo = true }
                        }).FirstOrDefault();

                        decimal totalAgrupacionCaptura = 0;
                        int cantCapPpto = _context.tblAF_CtrlPptalOfCe_CapPptos.Where(w => w.anio == item.anio && w.cc == _idCC && w.idAgrupacion == item.id && w.registroActivo).ToList().Count();
                        if (cantCapPpto > 0)
                        {
                            totalAgrupacionCaptura = _context.Select<decimal>(new DapperDTO
                            {
                                baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                                consulta = @"SELECT SUM(importeEnero) + SUM(importeFebrero) + SUM(importeMarzo) + SUM(importeAbril) + 
	                                    SUM(importeMayo) + SUM(importeJunio) + SUM(importeJulio) + SUM(importeAgosto) + 
	                                    SUM(importeSeptiembre) + SUM(importeOctubre) + SUM(importeNoviembre) + SUM(importeDiciembre)
		                                    FROM tblAF_CtrlPptalOfCe_CapPptos
			                                    WHERE anio = @anio AND cc = @cc AND idAgrupacion = @idAgrupacion AND registroActivo = @registroActivo",
                                parametros = new { anio = item.anio, cc = item.idCC, idAgrupacion = item.id, registroActivo = true }
                            }).FirstOrDefault();
                        }
                        totalPlanM += totalAgrupacionPlanMaestro;
                        totalPptoM += totalAgrupacionCaptura;
                        if (totalAgrupacionPlanMaestro != totalAgrupacionCaptura)
                        {
                            isMatchAgrupaciones = false;
                        }
                    }

                    if (totalPlanM == 0)
                    {
                        isMatchCeros = false;
                    }
                    if (totalPlanM != totalPptoM)
                    {
                        isMatch = false;
                    }

                    if (!isMatchCeros)
                        throw new Exception("No se pudo notificar.<br>Es necesario capturar la infomarcion correspondiente del Plan Maestro.");

                    if (!isMatchAgrupaciones)
                        throw new Exception("No se pudo notificar.<br>Es necesario capturar la infomarcion correspondiente de las agrupaciones del Plan Maestro.");

                    if (!isMatch)
                        throw new Exception("No se pudo notificar.<br>Los presupuestos no dan match.");
                    #endregion

                    #region SE ENVIA CORREO AL SEGUNDO AUTORIZANTE PARA QUE PROCEDA A AUTORIZAR O RECHAZAR EL PPTO DEL CC.
                    #region SE OBTIENE CORREO DEL USUARIO QUE TIENE QUE AUTORIZAR
                    List<string> lstCorreos = new List<string>();
                    int idCCINT = !string.IsNullOrEmpty(_idCC) ? Convert.ToInt32(_idCC) : 0;
                    tblP_CC objCC = _context.tblP_CC.Where(w => w.id == idCCINT).FirstOrDefault();
                    if (objCC == null)
                        throw new Exception("Ocurrió un error al notificar.");

                    string cc = !string.IsNullOrEmpty(objCC.cc) ? objCC.cc.Trim() : string.Empty;

                    //SE VERIFICA SI EL CC ES DE SERVICIO
                    int esServicioCC = _context.Select<int>(new DapperDTO
                    {
                        baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                        consulta = @"SELECT COUNT(id) AS esServicio FROM tblAF_CtrlPptalOfCe_CCRelServicios WHERE idCC = @idCC",
                        parametros = new { idCC = idCCINT }
                    }).FirstOrDefault();

                    #region SE INICIALIZA OBJETO PARA NOTIFICAR AL USUARIO QUE HAY UN PPTO POR AUTORIZAR/RECHAZAR
                    tblP_Alerta objAlerta = new tblP_Alerta();
                    objAlerta.userEnviaID = (int)vSesiones.sesionUsuarioDTO.id;
                    objAlerta.tipoAlerta = 2;
                    objAlerta.sistemaID = (int)SistemasEnum.ADMINISTRACION_FINANZAS;
                    objAlerta.visto = false;
                    objAlerta.url = "/Administrativo/CtrlPptalOficinasCentrales/Autorizaciones?anio=" + anio + "&idCC=" + idCC + "";
                    objAlerta.obj = null;

                    if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                        objAlerta.msj = string.Format("{0}{1}", "GESTIÓN: CTRL PRESUPUESTAL - ", cc);
                    else if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                        objAlerta.msj = string.Format("{0}{1}", "GESTIÓN: CTRL PRESUPUESTAL - ", objCC.areaCuenta);

                    objAlerta.documentoID = 0;
                    objAlerta.moduloID = 0;
                    #endregion

                    List<FirmantesDTO> lstAutorizantes = new List<FirmantesDTO>();
                    string correoAutorizante = string.Empty;
                    if (esServicioCC > 0)
                    {
                        #region SE AUTORIZA LA PRIMER AUTORIZACIÓN COMO DEFAULT
                        tblAF_CtrlPptalOfCe_PptoAnual objAutorizarPrimerFirma = _context.tblAF_CtrlPptalOfCe_PptoAnual.Where(w => w.anio == anio && w.idCC == idCCINT && w.registroActivo).FirstOrDefault();
                        if (objAutorizarPrimerFirma == null)
                            throw new Exception("Ocurrió un error al liberar la primera firma de autorizaciones.");

                        objAutorizarPrimerFirma.autorizante1 = 1;
                        objAutorizarPrimerFirma.fechaAutorizacion1 = DateTime.Now;
                        objAutorizarPrimerFirma.fechaModificacion = DateTime.Now;
                        _context.SaveChanges();
                        #endregion

                        #region SE NOTIFICA AL USUARIO QUE HAY UN PPTO POR AUTORIZAR/RECHAZAR
                        objAlerta.userRecibeID = (int)AutorizantesEnum.segundoAutorizanteID;
                        objAlerta.objID = objAutorizarPrimerFirma.id;
                        #endregion

                        #region SE OBTIENE EL CORREO DEL AUTORIZANTE
                        correoAutorizante = _context.Select<string>(new DapperDTO
                        {
                            baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                            consulta = @"SELECT correo FROM tblP_Usuario WHERE id = @id",
                            parametros = new { id = (int)AutorizantesEnum.segundoAutorizanteID }
                        }).FirstOrDefault();
                        #endregion

                        #region SE AGREGA AUTORIZANTE A LA LISTA DE ENVIO DE CORREOS
                        FirmantesDTO objAutorizante = new FirmantesDTO();
                        objAutorizante.nombreCompleto = "GAYTAN LIZAMA JOSE MANUEL";
                        objAutorizante.estatus = "PENDIENTE";
                        lstAutorizantes.Add(objAutorizante);

                        objAutorizante = new FirmantesDTO();
                        objAutorizante.nombreCompleto = "REINA CECCO GERARDO";
                        objAutorizante.estatus = "PENDIENTE";
                        lstAutorizantes.Add(objAutorizante);
                        #endregion
                    }
                    else
                    {
                        #region SE AUTORIZA LA PRIMER AUTORIZACIÓN Y SEGUNDA AUTORIZARIÓN COMO DEFAULT
                        tblAF_CtrlPptalOfCe_PptoAnual objLiberarPrimeraSegundaAutorizacion = _context.tblAF_CtrlPptalOfCe_PptoAnual.Where(w => w.anio == anio && w.idCC == idCCINT && w.registroActivo).FirstOrDefault();
                        if (objLiberarPrimeraSegundaAutorizacion == null)
                            throw new Exception("Ocurrió un error al liberar la primera firma de autorizaciones.");

                        objLiberarPrimeraSegundaAutorizacion.autorizante1 = 1;
                        objLiberarPrimeraSegundaAutorizacion.fechaAutorizacion1 = DateTime.Now;
                        objLiberarPrimeraSegundaAutorizacion.autorizante2 = 1;
                        objLiberarPrimeraSegundaAutorizacion.fechaAutorizacion2 = DateTime.Now;
                        objLiberarPrimeraSegundaAutorizacion.fechaModificacion = DateTime.Now;
                        _context.SaveChanges();
                        #endregion

                        #region SE NOTIFICA AL USUARIO QUE HAY UN PPTO POR AUTORIZAR/RECHAZAR
                        objAlerta.userRecibeID = (int)AutorizantesEnum.tercerAutorizanteID;
                        objAlerta.objID = objLiberarPrimeraSegundaAutorizacion.id;
                        #endregion

                        #region SE OBTIENE EL CORREO DEL AUTORIZANTE
                        correoAutorizante = _context.Select<string>(new DapperDTO
                        {
                            baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                            consulta = @"SELECT correo FROM tblP_Usuario WHERE id = @id",
                            parametros = new { id = (int)AutorizantesEnum.tercerAutorizanteID }
                        }).FirstOrDefault();
                        #endregion

                        #region SE AGREGA AUTORIZANTE A LA LISTA DE ENVIO DE CORREOS
                        FirmantesDTO objAutorizante = new FirmantesDTO();
                        objAutorizante.nombreCompleto = "REINA CECCO GERARDO";
                        objAutorizante.estatus = "PENDIENTE";
                        lstAutorizantes.Add(objAutorizante);
                        #endregion
                    }

                    #region SE REGISTRA LA ALERTA
                    if (objAlerta.userRecibeID > 0 && objAlerta.objID > 0)
                    {
                        _context.tblP_Alerta.Add(objAlerta);
                        _context.SaveChanges();
                    }
                    #endregion

                    // SE OBTIENE CORREO DEL NOTIFICANTE
                    string correoNotificante = (string)vSesiones.sesionUsuarioDTO.correo;
                    if (!string.IsNullOrEmpty(correoNotificante))
                        lstCorreos.Add(correoNotificante);
                    else
                    {
                        correoNotificante = _context.tblP_Usuario.Where(w => w.id == (int)vSesiones.sesionUsuarioDTO.id).Select(s => s.correo).FirstOrDefault();
                        if (!string.IsNullOrEmpty(correoNotificante))
                            lstCorreos.Add(correoNotificante);
                        else
                        {
                            List<string> lstCorreosError = new List<string>();
                            lstCorreosError.Add("omar.nunez@construplan.com.mx");
                            GlobalUtils.sendEmail(string.Format("{0}: ERROR ENVIO CORREO NOTIFICAR", PersonalUtilities.GetNombreEmpresa()), "Ocurrió un error al enviar correo de notificar al notificante.", lstCorreos);
                        }
                    }

                    lstCorreos.Add(correoAutorizante);

                    #endregion
#if DEBUG
                    #region IF DEBUG - SE ENVIA CORREO A OMAR.NUNEZ
                    lstCorreos = new List<string>();
                    lstCorreos.Add("omar.nunez@construplan.com.mx");
                    #endregion
#endif
                    #region SE CAMBIA EL PPTO DEL CC A NOTIFICADO COMO TRUE
                    tblAF_CtrlPptalOfCe_PptoAnual objNotificarPpto = _context.tblAF_CtrlPptalOfCe_PptoAnual.Where(w => w.anio == anio && w.idCC == idCC).FirstOrDefault();
                    objNotificarPpto.notificado = true;
                    objNotificarPpto.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                    objNotificarPpto.fechaModificacion = DateTime.Now;
                    _context.SaveChanges();
                    #endregion

                    #region SE ENVIA CORREO
                    string tablaAutorizantes = GlobalUtils.tablaFirmantesCtrlPptal(lstAutorizantes);
                    if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                    {
                        GlobalUtils.sendEmail(string.Format("{0}: CONTROL PRESUPUESTAL GESTIÓN - {1}", PersonalUtilities.GetNombreEmpresa(), objCC.cc),
                            "Buen día, el CC " + objCC.cc + " ha notificado que su presupuesto esta listo para ser evaluado<br><br>" + tablaAutorizantes +
                            "<br><br>Favor de ingresar a <b>sigoplan.construplan.com.mx</b> al menú:<br>Construplan > Admin y Finanzas > Control presupuestal > Gestión.<br>" +
                            "Se informa que este es un correo autogenerado por el sistema SIGOPLAN (<a href='http://sigoplan.construplan.com.mx/'>http://sigoplan.construplan.com.mx</a>). No es necesario dar una respuesta. Gracias.", lstCorreos);
                    }
                    else if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                    {
                        GlobalUtils.sendEmail(string.Format("{0}: CONTROL PRESUPUESTAL GESTIÓN - {1}", PersonalUtilities.GetNombreEmpresa(), objCC.areaCuenta),
                            "Buen día, el AC " + objCC.areaCuenta + " ha notificado que su presupuesto esta listo para ser evaluado<br><br>" + tablaAutorizantes +
                            "<br><br>Favor de ingresar a <b>sigoplan.construplan.com.mx</b> al menú:<br>Construplan > Admin y Finanzas > Control presupuestal > Gestión.<br>" +
                            "Se informa que este es un correo autogenerado por el sistema SIGOPLAN (<a href='http://sigoplan.construplan.com.mx/'>http://sigoplan.construplan.com.mx</a>). No es necesario dar una respuesta. Gracias.", lstCorreos);
                    }
                    #endregion

                    resultado.Add(MESSAGE, "Se ha notificado con éxito.");
                    resultado.Add(SUCCESS, true);
                    dbContextTransaction.Commit();
                    #endregion
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "NotificarPptoCapturado", e, AccionEnum.CORREO, 0, 0);
                    resultado.Add(MESSAGE, e.Message);
                    resultado.Add(SUCCESS, false);
                }
            }
            return resultado;
        }

        public Dictionary<string, object> VerificarPptoNotificado(int anio, string _idCC)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region SE VERIFICA SI EL PPTO YA SE ENCUENTRA NOTIFICADO
                bool notificado = false;
                int idCC = !string.IsNullOrEmpty(_idCC) ? Convert.ToInt32(_idCC) : 0;
                tblAF_CtrlPptalOfCe_PptoAnual obj = _context.tblAF_CtrlPptalOfCe_PptoAnual.Where(w => w.anio == anio && w.idCC == idCC).FirstOrDefault();
                if (obj != null)
                    notificado = obj.notificado;

                resultado.Add("obj", notificado);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "VerificarPptoNotificado", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> GetAditivasAAutorizar(int cc, int year, bool? esAutorizacion)
        {
            try
            {
                var usuarioSesion = vSesiones.sesionUsuarioDTO.id;

                var ccString = cc.ToString();

                var autorizantes = _context.tblAF_CtrlAutorizanteAditiva
                    .Where(x =>
                        x.registroActivo).OrderBy(x => x.idRow).ToList();

                var aditivas = _context.tblAF_CtrlAditiva
                    .Where(x =>
                        (cc == -1 ? true :  x.presupuesto.cc == ccString) &&
                        x.presupuesto.anio == year &&
                        (esAutorizacion.HasValue ? x.autorizado == esAutorizacion.Value : true) && x.rechazado == false &&
                        x.registroActivo).ToList().Select(x => {
                            var auxCC = _context.tblP_CC.FirstOrDefault(y => y.id.ToString() == x.presupuesto.cc);
                            return new AditivasAutorizacionDTO
                            {
                                idAditiva = x.id,
                                idPresupuesto = x.capPptosId,
                                indicador = x.autorizado ?
                                    TipoPresupuestoEnum.aditivaDeductivaAutorizada : x.rechazado ?
                                    TipoPresupuestoEnum.aditivaDeductivaRechazada : TipoPresupuestoEnum.aditivaDeductivaPendiente,
                                agrupacion = x.presupuesto.agrupacion.nombre,
                                descripcion = x.presupuesto.concepto.concepto,
                                actividad = x.presupuesto.actividad,
                                importeEnero = x.importeEnero,
                                importeFebrero = x.importeFebrero,
                                importeMarzo = x.importeMarzo,
                                importeAbril = x.importeAbril,
                                importeMayo = x.importeMayo,
                                importeJunio = x.importeJunio,
                                importeJulio = x.importeJulio,
                                importeAgosto = x.importeAgosto,
                                importeSeptiembre = x.importeSeptiembre,
                                importeOctubre = x.importeOctubre,
                                importeNoviembre = x.importeNoviembre,
                                importeDiciembre = x.importeDiciembre,
                                importeTotal = x.importeTotal,
                                comentario = x.comentario,
                                autorizantePendiente = x.autorizado || x.rechazado ? 0 : 2,
                                ccString = auxCC == null ? "" : "[" + (vSesiones.sesionEmpresaActual == 1 ? auxCC.cc : auxCC.areaCuenta) + "] " + auxCC.descripcion
                                //autorizantePendiente = !x.autorizante1.HasValue ? 1 : !x.autorizante2.HasValue ? 2 : !x.autorizante3.HasValue ? 3 : 0
                            };
                        }).OrderBy(x => x.ccString).ToList();

                foreach (var aditiva in aditivas)
                {
                    if (aditiva.indicador == TipoPresupuestoEnum.aditivaDeductivaAutorizada || aditiva.indicador == TipoPresupuestoEnum.aditivaDeductivaRechazada)
                    {
                        aditiva.elUsuarioPuedeAutorizar = false;
                    }
                    else
                    {
                        var autorizanteActual = autorizantes.First(x => x.idRow == aditiva.autorizantePendiente);
                        if (usuarioSesion == autorizanteActual.idAutorizante)
                        {
                            aditiva.elUsuarioPuedeAutorizar = true;
                        }
                    }
                }

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, aditivas);
            }
            catch (Exception ex)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetAditivasAAutorizar", ex, AccionEnum.CONSULTA, 0, new { cc = cc, year = year });

                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);
            }

            return resultado;
        }

        public Dictionary<string, object> GetDetalleAutorizacionAditiva(int aditivaId)
        {
            try
            {
                var detalleAutorizantes = new List<DetalleAutorizacionDTO>();

                var aditiva = _context.tblAF_CtrlAditiva.First(x => x.id == aditivaId);

                List<tblAF_CtrlAutorizanteAditiva> autorizantes = new List<tblAF_CtrlAutorizanteAditiva>();

                var ccServicios = _context.tblAF_CtrlPptalOfCe_CCRelServicios.Where(x => x.registroActivo).Select(x => x.idCC).ToList();

                int idCC = Convert.ToInt32(aditiva.presupuesto.cc);

                if (ccServicios.Contains(idCC))
                {
                    autorizantes = _context.tblAF_CtrlAutorizanteAditiva.Where(x => x.registroActivo).OrderBy(x => x.idRow).ToList();
                }
                else
                {
                    autorizantes = _context.tblAF_CtrlAutorizanteAditiva.Where(x => x.registroActivo && x.idRow > 1).OrderBy(x => x.idRow).ToList();
                }

                var ultimoAutorizanteRow = _context.tblAF_CtrlAutorizacionAditiva.Where(x => x.aditivaId == aditiva.id && x.registroActivo && !x.rechazada).OrderBy(x => x.id).ToList().LastOrDefault();
                var autorizanteRechazo = _context.tblAF_CtrlAutorizacionAditiva.FirstOrDefault(x => x.aditivaId == aditiva.id && x.registroActivo && x.rechazada);

                var cont = 1;
                foreach (var item in autorizantes)
                {
                    var detAutorizante = new DetalleAutorizacionDTO();
                    detAutorizante.numero = cont;
                    detAutorizante.nombre = item.autorizante.nombre.ToUpper() + " " + item.autorizante.apellidoPaterno.ToUpper() + " " + item.autorizante.apellidoMaterno.ToUpper();
                    if (aditiva.rechazado)
                    {
                        if (autorizanteRechazo != null && autorizanteRechazo.autorizanteId == item.idAutorizante)
                        {
                            //detAutorizante.estatus = -1;
                            detAutorizante.estatus = false;
                            detAutorizante.rechazado = true;
                        }
                        else
                        {
                            if (detalleAutorizantes.Any(x => x.rechazado))
                            {
                                detAutorizante.estatus = false;
                            }
                            else
                            {
                                //detAutorizante.estatus = 1;
                                detAutorizante.estatus = true;
                            }

                        }
                    }
                    else if (aditiva.autorizado)
                    {
                        detAutorizante.estatus = true;
                    }
                    else if (ultimoAutorizanteRow == null)
                    {
                        detAutorizante.estatus = false;
                    }
                    else
                    {
                        if (item.idRow == 1)
                        {
                            detAutorizante.estatus = aditiva.autorizante2.HasValue ? true : false;
                        }
                        if (item.idRow == 2)
                        {
                            detAutorizante.estatus = aditiva.autorizante3.HasValue ? true : false;
                        }
                    }

                    detAutorizante.tipoAutorizante = "";
                    detalleAutorizantes.Add(detAutorizante);

                    cont++;
                }
                //


                //var autorizantePendiente = aditiva.autorizado || aditiva.rechazado ? 0 : aditiva.autorizante2.HasValue ? 2 : 1;

                ////var autorizantePendiente = !aditiva.autorizante1.HasValue ? 1 : !aditiva.autorizante2.HasValue ? 2 : !aditiva.autorizante3.HasValue ? 3 : 0;

                //var detalleAutorizantes = new List<DetalleAutorizacionDTO>();
                ////var cont = 1;
                //foreach (var item in autorizantes)
                //{
                //    var detAutorizante = new DetalleAutorizacionDTO();
                //    detAutorizante.numero = cont;
                //    var usuario = _context.tblP_Usuario.First(x => x.id == item.idAutorizante);
                //    detAutorizante.nombre = usuario.nombre + (!string.IsNullOrEmpty(usuario.apellidoPaterno) ?
                //        " " + usuario.apellidoPaterno : "") + (!string.IsNullOrEmpty(usuario.apellidoMaterno) ?
                //        " " + usuario.apellidoMaterno : "");
                //    detAutorizante.estatus = aditiva.autorizado ? true : (autorizantePendiente > item.idRow);
                //    detAutorizante.tipoAutorizante = autorizantes.Where(w => w.idAutorizante == usuario.id).Select(s => s.descripcion).FirstOrDefault();
                //    detalleAutorizantes.Add(detAutorizante);
                //    cont++;
                //}

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, detalleAutorizantes);
            }
            catch (Exception ex)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetDetalleAutorizacionAditiva", ex, AccionEnum.CONSULTA, 0, aditivaId);

                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);
            }

            return resultado;
        }

        public Dictionary<string, object> AutorizarAditiva(int aditivaId)
        {
            using (var transaccion = _context.Database.BeginTransaction())
            {
                try
                {
                    var ccServicios = _context.tblAF_CtrlPptalOfCe_CCRelServicios.Where(x => x.registroActivo).Select(x => x.idCC).ToList();

                    var usuarioSesion = vSesiones.sesionUsuarioDTO.id;

                    var aditiva = _context.tblAF_CtrlAditiva.First(x => x.id == aditivaId);
                    aditiva.fechaModificacion = DateTime.Now;
                    aditiva.idUsuarioModificacion = usuarioSesion;

                    var idCC = Convert.ToInt32(aditiva.presupuesto.cc);

                    tblP_CC cc = _context.tblP_CC.First(x => x.id == idCC);

                    var autorizacionPendiente = aditiva.autorizante2.HasValue ? 2 : 2;
                    var autorizante = _context.tblAF_CtrlAutorizanteAditiva.First(x => x.idRow == autorizacionPendiente);

                    var idRowAutoriantePendiente = 0;

                    var aditivaAutorizacion = new tblAF_CtrlAutorizacionAditiva();
                    aditivaAutorizacion.aditivaId = aditiva.id;
                    aditivaAutorizacion.autorizanteId = usuarioSesion;
                    aditivaAutorizacion.fechaCreacion = DateTime.Now;
                    aditivaAutorizacion.fechaModificacion = aditivaAutorizacion.fechaCreacion;
                    aditivaAutorizacion.firma = "";
                    aditivaAutorizacion.rechazada = false;
                    aditivaAutorizacion.registroActivo = true;
                    aditivaAutorizacion.usuarioCreacionId = usuarioSesion;
                    aditivaAutorizacion.usuarioModificacionId = usuarioSesion;
                    _context.tblAF_CtrlAutorizacionAditiva.Add(aditivaAutorizacion);
                    _context.SaveChanges();

                    var fecha = DateTime.Now;
                    if (usuarioSesion == autorizante.idAutorizante)
                    {
                        switch (autorizacionPendiente)
                        {
                            case 1:
                                {
                                    #region QUITAR ALERTA
                                    var quitarAlerta = _context.tblP_Alerta.FirstOrDefault(x => x.objID == aditiva.presupuesto.id && !x.visto && x.userRecibeID == usuarioSesion && x.tipoAlerta == 2 && x.sistemaID == (int)SistemasEnum.ADMINISTRACION_FINANZAS && x.msj.Contains("GESTIÓN ADITIVA"));
                                    if (quitarAlerta != null)
                                    {
                                        quitarAlerta.visto = true;
                                        _context.SaveChanges();
                                    }
                                    else
                                    {
                                        string mensaje = string.Format(@"Se ha autorizado una aditiva con la siguiente información:<br><br>
                                                                            objID: {0}<br>
                                                                            userRecibeID: {1}<br>
                                                                            tipoAlerta: 2<br>
                                                                            sistemaID: {2}<br>
                                                                            msj: {3}", aditiva.presupuesto.id, usuarioSesion, (int)SistemasEnum.ADMINISTRACION_FINANZAS, "GESTIÓN ADITIVA");
                                        GlobalUtils.sendEmail(string.Format("{0}: 1. Autorizar aditiva", PersonalUtilities.GetNombreEmpresa()), mensaje, new List<string> { "omar.nunez@construplan.com.mx" });
                                    }
                                    #endregion

                                    aditiva.autorizante2 = usuarioSesion;
                                    _context.SaveChanges();
                                    idRowAutoriantePendiente = 2;

                                    var autorizantePendiente = _context.tblAF_CtrlAutorizanteAditiva.First(x => x.idRow == idRowAutoriantePendiente);

                                    #region SE INICIALIZA OBJETO PARA NOTIFICAR LA AUTORIZACION DE LA ADITIVA
                                    tblP_Alerta objAlerta = new tblP_Alerta();
                                    objAlerta.userEnviaID = (int)vSesiones.sesionUsuarioDTO.id;
                                    objAlerta.tipoAlerta = 2;
                                    objAlerta.sistemaID = (int)SistemasEnum.ADMINISTRACION_FINANZAS;
                                    objAlerta.visto = false;
                                    objAlerta.url = "/Administrativo/CtrlPptalOficinasCentrales/AutorizacionesAditivas?anio=" + aditiva.presupuesto.anio + "&idCC=" + idCC + "";
                                    objAlerta.obj = null;

                                    if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                                        objAlerta.msj = string.Format("{0}{1}", "GESTIÓN ADITIVA: CTRL PRESUPUESTAL - ", cc.cc);
                                    else
                                        objAlerta.msj = string.Format("{0}{1}", "GESTIÓN ADITIVA: CTRL PRESUPUESTAL - ", cc.areaCuenta);

                                    objAlerta.documentoID = 0;
                                    objAlerta.moduloID = 0;
                                    objAlerta.userRecibeID = autorizantePendiente.idAutorizante;
                                    objAlerta.objID = aditiva.presupuesto.id;

                                    _context.tblP_Alerta.Add(objAlerta);
                                    _context.SaveChanges();
                                    #endregion

                                    //
                                    var ccInt = Convert.ToInt32(aditiva.presupuesto.cc);
                                    var ccDescripcion = _context.tblP_CC.First(x => x.id == ccInt).descripcion.Trim();

                                    var lstAutorizantes = new List<FirmantesDTO>();

                                    if (ccServicios.Contains(idCC))
                                    {
                                        var rechazante = _context.tblAF_CtrlAutorizanteAditiva.First(x => x.idRow == 2);

                                        var objAutorizante = new FirmantesDTO();
                                        objAutorizante.nombreCompleto = rechazante.autorizante.nombre.ToUpper() + " " + rechazante.autorizante.apellidoPaterno.ToUpper() + " " + rechazante.autorizante.apellidoMaterno.ToUpper();
                                        objAutorizante.estatus = "AUTORIZADO";
                                        lstAutorizantes.Add(objAutorizante);
                                    }
                                    else
                                    {
                                        var rechazante = _context.tblAF_CtrlAutorizanteAditiva.First(x => x.idRow == 2);

                                        var objAutorizante = new FirmantesDTO();
                                        objAutorizante.nombreCompleto = rechazante.autorizante.nombre.ToUpper() + " " + rechazante.autorizante.apellidoPaterno.ToUpper() + " " + rechazante.autorizante.apellidoMaterno.ToUpper();
                                        objAutorizante.estatus = "AUTORIZADO";
                                        lstAutorizantes.Add(objAutorizante);
                                    }

                                    #region SE ENVIA CORREO
                                    string tablaAutorizantes = GlobalUtils.tablaFirmantesCtrlPptal(lstAutorizantes);

#if DEBUG
                                    GlobalUtils.sendEmail(string.Format("{0}: CONTROL PRESUPUESTAL GESTIÓN ADITIVA/DEDUCTIVA - {1}", PersonalUtilities.GetNombreEmpresa(), ccDescripcion),
                                        "Buen día, se ha autorizado la aditiva para " + ((int)EmpresaEnum.Construplan == vSesiones.sesionEmpresaActual ? "el CC " + cc.cc : "la área cuenta " + cc.areaCuenta) +
                                        " y ahora necesita su autorización<br><br>" + tablaAutorizantes + "<br>" +
                                        "Se informa que este es un correo autogenerado por el sistema SIGOPLAN (<a href='http://sigoplan.construplan.com.mx/'>http://sigoplan.construplan.com.mx</a>). No es necesario dar una respuesta. Gracias.",
                                        new List<string> { "martin.zayas@construplan.com.mx", "rene.olea@construplan.com.mx", "omar.nunez@construplan.com.mx" });
#else
                                    GlobalUtils.sendEmail(string.Format("{0}: CONTROL PRESUPUESTAL GESTIÓN ADITIVA/DEDUCTIVA - {1}", PersonalUtilities.GetNombreEmpresa(), ccDescripcion),
                                        "Se ha autorizado la aditiva para " + ((int)EmpresaEnum.Construplan == vSesiones.sesionEmpresaActual ? "el CC " + cc.cc : "la área cuenta " + cc.areaCuenta) + " y ahora necesita su autorización<br><br>" + tablaAutorizantes + "<br>" +
                                        //"<br><br>Favor de ingresar a <b>sigoplan.construplan.com.mx</b> al menú:<br>Construplan > Admin y Finanzas > Control presupuestal > Gestión aditivas.<br>" +
                                        "Se informa que este es un correo autogenerado por el sistema SIGOPLAN (<a href='http://sigoplan.construplan.com.mx/'>http://sigoplan.construplan.com.mx</a>). No es necesario dar una respuesta. Gracias.", new List<string> { autorizantePendiente.autorizante.correo });
#endif
                                    #endregion
                                    //
                                }

                                break;
                            case 2:
                                {
                                    aditiva.autorizante3 = usuarioSesion;
                                    aditiva.autorizado = true;
                                    _context.SaveChanges();

                                    if (!_context.tblAF_CtrlAditiva.Any(x => x.presupuesto.cc == aditiva.presupuesto.cc && x.registroActivo && !x.autorizado && !x.rechazado))
                                    {
                                        #region QUITAR ALERTA
                                        var quitarAlerta = _context.tblP_Alerta.FirstOrDefault(x => x.objID == aditiva.presupuesto.id && !x.visto && x.userRecibeID == usuarioSesion && x.tipoAlerta == 2 && x.sistemaID == (int)SistemasEnum.ADMINISTRACION_FINANZAS && x.msj.Contains("GESTIÓN ADITIVA"));
                                        if (quitarAlerta != null)
                                        {
                                            quitarAlerta.visto = true;
                                            _context.SaveChanges();
                                        }
                                        else
                                        {
                                            string mensaje = string.Format(@"Se ha autorizado una aditiva con la siguiente información:<br><br>
                                                                            objID: {0}<br>
                                                                            userRecibeID: {1}<br>
                                                                            tipoAlerta: 2<br>
                                                                            sistemaID: {2}<br>
                                                                            msj: {3}", aditiva.presupuesto.id, usuarioSesion, (int)SistemasEnum.ADMINISTRACION_FINANZAS, "GESTIÓN ADITIVA");
                                            GlobalUtils.sendEmail(string.Format("{0}: 1. Autorizar aditiva", PersonalUtilities.GetNombreEmpresa()), mensaje, new List<string> { "omar.nunez@construplan.com.mx" });
                                        }
                                        #endregion
                                    }

                                    var responsablesCC = _context.tblAF_CtrlPptalOfCe_UsuarioRelCC.Where(x => x.idCC == idCC).ToList();
                                    tblP_CC objCC = _context.tblP_CC.Where(w => w.id == idCC).FirstOrDefault();

                                    responsablesCC.RemoveAll(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

#if DEBUG
                                    responsablesCC = _context.tblAF_CtrlPptalOfCe_UsuarioRelCC.Where(x => x.idUsuario == 6571 || x.idUsuario == 7939).ToList();
#endif

                                    foreach (var resCC in responsablesCC.GroupBy(x => x.idUsuario))
                                    {
                                        #region SE INICIALIZA OBJETO PARA NOTIFICAR LA AUTORIZACION DE LA ADITIVA
                                        tblP_Alerta objAlerta = new tblP_Alerta();
                                        objAlerta.userEnviaID = (int)vSesiones.sesionUsuarioDTO.id;
                                        objAlerta.tipoAlerta = (int)AlertasEnum.REDIRECCION;
                                        objAlerta.sistemaID = (int)SistemasEnum.ADMINISTRACION_FINANZAS;
                                        objAlerta.visto = false;
                                        objAlerta.url = "/Administrativo/CtrlPptalOficinasCentrales/Capturas?idPresupuesto=" + aditiva.presupuesto.id;
                                        objAlerta.obj = null;

                                        if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                                        {
                                            if (objCC != null)
                                                objAlerta.msj = string.Format("ADITIVA AUTORIZADA: CTRL PRESUPUESTAL - {0}", objCC.cc);
                                            else
                                                objAlerta.msj = string.Format("ADITIVA AUTORIZADA: CTRL PRESUPUESTAL");
                                        }
                                        else if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                                        {
                                            if (objCC != null)
                                                objAlerta.msj = string.Format("ADITIVA AUTORIZADA: CTRL PRESUPUESTAL - {0}", objCC.areaCuenta);
                                            else
                                                objAlerta.msj = string.Format("ADITIVA AUTORIZADA: CTRL PRESUPUESTAL");
                                        }

                                        objAlerta.documentoID = 0;
                                        objAlerta.moduloID = 0;
                                        objAlerta.userRecibeID = resCC.First().idUsuario;
                                        objAlerta.objID = aditiva.presupuesto.id;

                                        _context.tblP_Alerta.Add(objAlerta);
                                        _context.SaveChanges();
                                        #endregion
                                    }

                                    //
                                    var ccInt = Convert.ToInt32(aditiva.presupuesto.cc);
                                    var ccDescripcion = _context.tblP_CC.First(x => x.id == ccInt).descripcion.Trim();

                                    var lstAutorizantes = new List<FirmantesDTO>();

                                    if (ccServicios.Contains(idCC))
                                    {
                                        //var rechazante = _context.tblAF_CtrlAutorizanteAditiva.First(x => x.idRow == 1);

                                        //var objAutorizante = new FirmantesDTO();
                                        //objAutorizante.nombreCompleto = rechazante.autorizante.nombre.ToUpper() + " " + rechazante.autorizante.apellidoPaterno.ToUpper() + " " + rechazante.autorizante.apellidoMaterno.ToUpper();
                                        //objAutorizante.estatus = aditiva.autorizante2.HasValue ? "AUTORIZADO" : "PENDIENTE";
                                        //objAutorizante.Fecha = aditiva.autorizante2.HasValue ? _context.tblAF_CtrlAutorizacionAditiva.First(x => x.aditivaId == aditiva.id && x.autorizanteId == rechazante.idAutorizante).fechaCreacion.ToString("dd/MM/yyyy") : "";
                                        //lstAutorizantes.Add(objAutorizante);

                                        //var rechazante2 = _context.tblAF_CtrlAutorizanteAditiva.First(x => x.idRow == 2);

                                        //var objAutorizante2 = new FirmantesDTO();
                                        //objAutorizante2.nombreCompleto = rechazante2.autorizante.nombre.ToUpper() + " " + rechazante2.autorizante.apellidoPaterno.ToUpper() + " " + rechazante2.autorizante.apellidoMaterno.ToUpper();
                                        //objAutorizante2.estatus = aditiva.autorizante3.HasValue ? "AUTORIZADO" : "PENDIENTE";
                                        //objAutorizante2.Fecha = aditiva.autorizante3.HasValue ? _context.tblAF_CtrlAutorizacionAditiva.First(x => x.aditivaId == aditiva.id && x.autorizanteId == rechazante2.idAutorizante).fechaCreacion.ToString("dd/MM/yyyy") : "";
                                        //lstAutorizantes.Add(objAutorizante2);

                                        var rechazante = _context.tblAF_CtrlAutorizanteAditiva.First(x => x.idRow == 2);

                                        var objAutorizante = new FirmantesDTO();
                                        objAutorizante.nombreCompleto = rechazante.autorizante.nombre.ToUpper() + " " + rechazante.autorizante.apellidoPaterno.ToUpper() + " " + rechazante.autorizante.apellidoMaterno.ToUpper();
                                        objAutorizante.estatus = "AUTORIZADO";
                                        objAutorizante.Fecha = aditiva.autorizante3.HasValue ? _context.tblAF_CtrlAutorizacionAditiva.First(x => x.aditivaId == aditiva.id && x.autorizanteId == rechazante.idAutorizante).fechaCreacion.ToString("dd/MM/yyyy") : "";
                                        lstAutorizantes.Add(objAutorizante);
                                    }
                                    else
                                    {
                                        var rechazante = _context.tblAF_CtrlAutorizanteAditiva.First(x => x.idRow == 2);

                                        var objAutorizante = new FirmantesDTO();
                                        objAutorizante.nombreCompleto = rechazante.autorizante.nombre.ToUpper() + " " + rechazante.autorizante.apellidoPaterno.ToUpper() + " " + rechazante.autorizante.apellidoMaterno.ToUpper();
                                        objAutorizante.estatus = "AUTORIZADO";
                                        objAutorizante.Fecha = aditiva.autorizante3.HasValue ? _context.tblAF_CtrlAutorizacionAditiva.First(x => x.aditivaId == aditiva.id && x.autorizanteId == rechazante.idAutorizante).fechaCreacion.ToString("dd/MM/yyyy") : "";
                                        lstAutorizantes.Add(objAutorizante);
                                    }

                                    #region SE ENVIA CORREO
                                    string tablaAutorizantes = GlobalUtils.tablaFirmantesCtrlPptal(lstAutorizantes);

#if DEBUG
                                    GlobalUtils.sendEmail(string.Format("{0}: CONTROL PRESUPUESTAL GESTIÓN ADITIVA/DEDUCTIVA - {1}", PersonalUtilities.GetNombreEmpresa(), ccDescripcion),
                                        "Buen día, se ha autorizado la aditiva para " + ((int)EmpresaEnum.Construplan == vSesiones.sesionEmpresaActual ? "el CC " + cc.cc : "la área cuenta " + cc.areaCuenta) + "<br><br>" + tablaAutorizantes + "<br>" +
                                        //"<br><br>Favor de ingresar a <b>sigoplan.construplan.com.mx</b> al menú:<br>Construplan > Admin y Finanzas > Control presupuestal > Gestión aditivas.<br>" +
                                        "Se informa que este es un correo autogenerado por el sistema SIGOPLAN (<a href='http://sigoplan.construplan.com.mx/'>http://sigoplan.construplan.com.mx</a>). No es necesario dar una respuesta. Gracias.", new List<string> { "martin.zayas@construplan.com.mx", "rene.olea@construplan.com.mx", "omar.nunez@construplan.com.mx" });
#else
                                    GlobalUtils.sendEmail(string.Format("{0}: CONTROL PRESUPUESTAL GESTIÓN ADITIVA/DEDUCTIVA - {1}", PersonalUtilities.GetNombreEmpresa(), ccDescripcion),
                                        "Buen día, se ha autorizado la aditiva para " + ((int)EmpresaEnum.Construplan == vSesiones.sesionEmpresaActual ? "el CC " + cc.cc : "la área cuenta " + cc.areaCuenta) + "<br><br>" + tablaAutorizantes + "<br>" +
                                        //"<br><br>Favor de ingresar a <b>sigoplan.construplan.com.mx</b> al menú:<br>Construplan > Admin y Finanzas > Control presupuestal > Gestión aditivas.<br>" +
                                        "Se informa que este es un correo autogenerado por el sistema SIGOPLAN (<a href='http://sigoplan.construplan.com.mx/'>http://sigoplan.construplan.com.mx</a>). No es necesario dar una respuesta. Gracias.", responsablesCC.Select(x => x.usuario.correo).Distinct().ToList());
#endif
                                    #endregion
                                    //
                                }

                                break;
                        }
                    }


                    _context.SaveChanges();



                    //

                    //                    if (idRowAutoriantePendiente != 0)
                    //                    {
                    //                        var autorizanteNotificar = _context.tblAF_CtrllPptalOfCe_CatAutorizantes.First(x => x.idRow == idRowAutoriantePendiente && x.cc == aditiva.presupuesto.cc);
                    //                        var correoNotificar = _context.tblP_Usuario.First(x => x.id == autorizanteNotificar.idAutorizante);

                    //                        var correos = new Infrastructure.DTO.CorreoDTO();
                    //                        correos.asunto = "Se han agregado aditivas al CC: " + ccDescripcion;
                    //                        correos.cuerpo = "<p>Se han agregado aditivas al CC: " + ccDescripcion + " y se necesita su autorización</p>";
                    //                        correos.cuerpo += "<p>Saludos.</p>";
                    //#if DEBUG
                    //                        correos.correos = new List<string> { "omar.nunez@construplan.com.mx" };
                    //#else
                    //                        correos.correos = new List<string> { correoNotificar.correo };
                    //#endif
                    //                        correos.Enviar();
                    //                    }

                    transaccion.Commit();

                    resultado.Add(SUCCESS, true);
                }
                catch (Exception ex)
                {
                    transaccion.Rollback();

                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "AutorizarAditiva", ex, AccionEnum.CONSULTA, 0, aditivaId);

                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, ex.Message);
                }
            }

            return resultado;
        }

        public Dictionary<string, object> RechazarAditiva(int aditivaId, string comentario)
        {
            using (var transaccion = _context.Database.BeginTransaction())
            {
                try
                {
                    var usuarioAutorizante = _context.tblAF_CtrlAutorizanteAditiva.First(x => x.idAutorizante == vSesiones.sesionUsuarioDTO.id);

                    var aditiva = _context.tblAF_CtrlAditiva.First(x => x.id == aditivaId);
                    aditiva.rechazado = true;
                    aditiva.comentarioRechazo = comentario.Trim();

                    switch (usuarioAutorizante.idRow)
                    {
                        case 1:
                            aditiva.autorizante2 = usuarioAutorizante.idAutorizante;
                            break;
                        case 2:
                            aditiva.autorizante3 = usuarioAutorizante.idAutorizante;
                            break;
                    }

                    var usuarioSesion = vSesiones.sesionUsuarioDTO.id;

                    var aditivaAutorizacion = new tblAF_CtrlAutorizacionAditiva();
                    aditivaAutorizacion.aditivaId = aditiva.id;
                    aditivaAutorizacion.autorizanteId = usuarioSesion;
                    aditivaAutorizacion.fechaCreacion = DateTime.Now;
                    aditivaAutorizacion.fechaModificacion = aditivaAutorizacion.fechaCreacion;
                    aditivaAutorizacion.firma = "";
                    aditivaAutorizacion.rechazada = true;
                    aditivaAutorizacion.registroActivo = true;
                    aditivaAutorizacion.usuarioCreacionId = usuarioSesion;
                    aditivaAutorizacion.usuarioModificacionId = usuarioSesion;
                    _context.tblAF_CtrlAutorizacionAditiva.Add(aditivaAutorizacion);
                    _context.SaveChanges();

                    #region QUITAR ALERTA
                    if (!_context.tblAF_CtrlAditiva.Any(x => x.presupuesto.cc == aditiva.presupuesto.cc && x.registroActivo && !x.autorizado && !x.rechazado))
                    {
                        var quitarAlerta = _context.tblP_Alerta.FirstOrDefault(x => x.objID == aditiva.presupuesto.id && !x.visto && x.userRecibeID == usuarioSesion && x.tipoAlerta == 2 && x.sistemaID == (int)SistemasEnum.ADMINISTRACION_FINANZAS && x.msj.Contains("GESTIÓN ADITIVA"));
                        if (quitarAlerta != null)
                        {
                            quitarAlerta.visto = true;
                            _context.SaveChanges();
                        }
                        else
                            GlobalUtils.sendEmail(string.Format("{0}: 1. Rechazar aditiva", PersonalUtilities.GetNombreEmpresa()), "Se ha rechazado una aditiva.", new List<string> { "omar.nunez@construplan.com.mx" });
                    }
                    else
                        GlobalUtils.sendEmail(string.Format("{0}: 2. Rechazar aditiva", PersonalUtilities.GetNombreEmpresa()), "Se ha rechazado una aditiva.", new List<string> { "omar.nunez@construplan.com.mx" });
                    #endregion

                    var ccServicios = _context.tblAF_CtrlPptalOfCe_CCRelServicios.Where(x => x.registroActivo).Select(x => x.idCC).ToList();

                    var idCC = Convert.ToInt32(aditiva.presupuesto.cc);

                    var responsablesCC = _context.tblAF_CtrlPptalOfCe_UsuarioRelCC.Where(x => x.idCC == idCC).ToList();

                    responsablesCC.RemoveAll(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                    var _cc = _context.tblP_CC.First(x => x.id == idCC);

                    var ccDescripcion = _cc.descripcion.Trim();

                    var lstAutorizantes = new List<FirmantesDTO>();

                    if (ccServicios.Contains(idCC))
                    {
                        var rechazante = _context.tblAF_CtrlAutorizanteAditiva.First(x => x.idRow == 2);

                        var objAutorizante = new FirmantesDTO();
                        objAutorizante.nombreCompleto = rechazante.autorizante.nombre.ToUpper() + " " + rechazante.autorizante.apellidoPaterno.ToUpper() + " " + rechazante.autorizante.apellidoMaterno.ToUpper();
                        objAutorizante.estatus = "RECHAZADO";
                        lstAutorizantes.Add(objAutorizante);
                    }
                    else
                    {
                        var rechazante = _context.tblAF_CtrlAutorizanteAditiva.First(x => x.idRow == 2);

                        var objAutorizante = new FirmantesDTO();
                        objAutorizante.nombreCompleto = rechazante.autorizante.nombre.ToUpper() + " " + rechazante.autorizante.apellidoPaterno.ToUpper() + " " + rechazante.autorizante.apellidoMaterno.ToUpper();
                        objAutorizante.estatus = "RECHAZADO";
                        lstAutorizantes.Add(objAutorizante);
                    }

                    #region SE ENVIA CORREO
                    string tablaAutorizantes = GlobalUtils.tablaFirmantesCtrlPptal(lstAutorizantes);
#if DEBUG
                    GlobalUtils.sendEmail(string.Format("{0}: CONTROL PRESUPUESTAL GESTIÓN ADITIVA/DEDUCTIVA - {1}", PersonalUtilities.GetNombreEmpresa(), ccDescripcion),
                        "Buen día, se ha rechazado la aditiva/deductiva capturada en " + ((int)EmpresaEnum.Construplan == vSesiones.sesionEmpresaActual ? "el CC " + _cc.cc : "la área cuenta " + _cc.areaCuenta) + "<br><br>" + tablaAutorizantes + "<br>" +
                        //"<br><br>Favor de ingresar a <b>sigoplan.construplan.com.mx</b> al menú:<br>Construplan > Admin y Finanzas > Control presupuestal > Gestión aditivas.<br>" +
                        "Motivo del rechazo<br>" +
                        comentario.Trim() + "<br><br>" +
                        "Se informa que este es un correo autogenerado por el sistema SIGOPLAN (<a href='http://sigoplan.construplan.com.mx/'>http://sigoplan.construplan.com.mx</a>). No es necesario dar una respuesta. Gracias.", new List<string> { "martin.zayas@construplan.com.mx", "rene.olea@construplan.com.mx", "omar.nunez@construplan.com.mx" });
#else
                    GlobalUtils.sendEmail(string.Format("{0}: CONTROL PRESUPUESTAL GESTIÓN ADITIVA/DEDUCTIVA - {1}", PersonalUtilities.GetNombreEmpresa(), ccDescripcion),
                        "Se ha rechazado la aditiva/deductiva capturada en " + ((int)EmpresaEnum.Construplan == vSesiones.sesionEmpresaActual ? "el CC " + _cc.cc : "la área cuenta " + _cc.areaCuenta) + "<br><br>" + tablaAutorizantes + "<br>" +
                        //"<br><br>Favor de ingresar a <b>sigoplan.construplan.com.mx</b> al menú:<br>Construplan > Admin y Finanzas > Control presupuestal > Gestión aditivas.<br>" +
                        "Motivo del rechazo<br>" +
                        comentario.Trim() + "<br><br>" +
                        "Se informa que este es un correo autogenerado por el sistema SIGOPLAN (<a href='http://sigoplan.construplan.com.mx/'>http://sigoplan.construplan.com.mx</a>). No es necesario dar una respuesta. Gracias.", responsablesCC.Select(x => x.usuario.correo).ToList());
#endif
                    #endregion

                    transaccion.Commit();

                    // SE REGISTRA BITACORA
                    SaveBitacora(0, aditivaId <= 0 ? (int)AccionEnum.AGREGAR : (int)AccionEnum.ACTUALIZAR, aditivaId, JsonUtils.convertNetObjectToJson(new {aditivaId = aditivaId, comentario = comentario }));

                    resultado.Add(SUCCESS, true);
                }
                catch (Exception ex)
                {
                    transaccion.Rollback();

                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "RechazarAditiva", ex, AccionEnum.CONSULTA, 0, aditivaId);

                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, ex.Message);
                }
            }

            return resultado;
        }

        public Dictionary<string, object> MatchPptoVsPlanMaestro(CapPptoDTO objDTO)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region VALIDACIONES
                if (objDTO.anio <= 0 || objDTO.idCC <= 0 || objDTO.idAgrupacion <= 0)
                {
                    string strMensajeError = string.Empty;
                    strMensajeError += objDTO.anio <= 0 ? "Es necesario indicar el año." : "";
                    strMensajeError += objDTO.idCC <= 0 ? "<br>Es necesario indicar el CC." : "";
                    strMensajeError += objDTO.idAgrupacion <= 0 ? "<br>Es necesario indicar la agrupación." : "";
                    throw new Exception(strMensajeError);
                }
                #endregion

                #region SE VERIFICA SI LA AGRUPACIÓN DE LA CAPTURA HACE MATCH CON LA AGRUPACIÓN DE RECURSOS NECESARIO REGISTRADO
                decimal totalAgrupacionPlanMaestro = 0, totalAgrupacionCaptura = 0;
                CapPptoDTO objCapPpto = new CapPptoDTO();

                //TOTAL PPTO POR PLAN MAESTRO (AGRUPACION)
                totalAgrupacionPlanMaestro = _context.Select<decimal>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"SELECT SUM(cantPpto) AS cantPpto
		                                FROM tblAF_CtrlPptalOfCe_CatConceptos
			                                WHERE idAgrupacion = @idAgrupacion AND registroActivo = @registroActivo",
                    parametros = new { idAgrupacion = objDTO.idAgrupacion, registroActivo = true }
                }).FirstOrDefault();
                objCapPpto.totalAgrupacionPlanMaestro = totalAgrupacionPlanMaestro;

                //TOTAL PPTO CAPTURA (AGRUPACION)
                string idCC = objDTO.idCC.ToString();
                int cantCapPpto = _context.tblAF_CtrlPptalOfCe_CapPptos.Where(w => w.anio == objDTO.anio && w.cc == idCC && w.idAgrupacion == objDTO.idAgrupacion && w.registroActivo).Count();
                if (cantCapPpto > 0)
                {
                    totalAgrupacionCaptura = _context.Select<decimal>(new DapperDTO
                    {
                        baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                        consulta = @"SELECT SUM(importeEnero) + SUM(importeFebrero) + SUM(importeMarzo) + SUM(importeAbril) + 
	                                    SUM(importeMayo) + SUM(importeJunio) + SUM(importeJulio) + SUM(importeAgosto) + 
	                                    SUM(importeSeptiembre) + SUM(importeOctubre) + SUM(importeNoviembre) + SUM(importeDiciembre)
		                                    FROM tblAF_CtrlPptalOfCe_CapPptos
			                                    WHERE anio = @anio AND cc = @cc AND idAgrupacion = @idAgrupacion AND registroActivo = @registroActivo",
                        parametros = new { anio = objDTO.anio, cc = objDTO.idCC, idAgrupacion = objDTO.idAgrupacion, registroActivo = true }
                    }).FirstOrDefault();
                }
                objCapPpto.totalAgrupacionCaptura = totalAgrupacionCaptura;

                resultado.Add("objCapPpto", objCapPpto);
                if (objCapPpto.totalAgrupacionCaptura == objCapPpto.totalAgrupacionPlanMaestro)
                {
                    resultado.Add("esMatch", true);
                    resultado.Add(MESSAGE, "");
                    resultado.Add(SUCCESS, true);
                }
                else if (objCapPpto.totalAgrupacionCaptura < objCapPpto.totalAgrupacionPlanMaestro)
                {
                    resultado.Add(MESSAGE, "El ppto capturado es menor al ppto del plan maestro.");
                    resultado.Add(SUCCESS, true);
                }
                else if (objCapPpto.totalAgrupacionCaptura > objCapPpto.totalAgrupacionPlanMaestro)
                {
                    resultado.Add(MESSAGE, "El ppto capturado es mayor al ppto del plan maestro.");
                    resultado.Add(SUCCESS, true);
                }
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "MatchPptoVsPlanMaestro", e, AccionEnum.CONSULTA, objDTO.id, objDTO);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> VerificarPlanMaestroCapturado(int anio, int idCC)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                var planMaestro = _context.tblAF_CtrlPptalOfCe_RN_PlanMaestro.FirstOrDefault(x => x.registroActivo && x.anio == anio && x.idCC == idCC);

                resultado.Add("existePlan", planMaestro != null);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "VerificarPlanMaestroCapturado", e, AccionEnum.CONSULTA, 0, new { anio = anio, idCC = idCC });
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }
        #endregion

        #region INDEX
        public Dictionary<string, object> GetSumaCapturas(CapPptoDTO objDTO)
        {
            resultado = new Dictionary<string, object>();
            try
            {

                var registroCentroCostoSIGOPLAN = _context.tblP_CC.FirstOrDefault(x => x.id == objDTO.idCC);

                #region VALIDACIONES
                if (objDTO.anio <= 0 || objDTO.idCC <= 0)
                {
                    if (objDTO.anio <= 0)
                        throw new Exception("Es necesario indicar un año.");

                    if (objDTO.idCC <= 0)
                        throw new Exception("Es necesario indicar un CC.");
                }

                #region SE VERIFICA SI EL DETALLE DEL PPTO (AÑO + CC) ESTE APROBADO
                int estatusPpto = _context.tblAF_CtrlPptalOfCe_PptoAnual.Where(w => w.anio == objDTO.anio && w.idCC == objDTO.idCC && w.autorizado).Count();
                //if (estatusPpto <= 0)
                //    throw new Exception("El ppto solicitado, no se encuentra autorizado.");
                #endregion
                #endregion

                #region SE OBTIENE CAPTURAS (AÑO + CC)
                List<CapPptoDTO> lstCapturas = _context.Select<CapPptoDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    #region CONSULTA INCLUYENDO LAS ADITIVASs
                    consulta = @"
                        SELECT
                            t1.id, t1.cc, t1.idAgrupacion, t1.idConcepto, t1.importeEnero, t1.importeFebrero, t1.importeMarzo, t1.importeAbril, t1.importeMayo, 
                            t1.importeJunio, t1.importeJulio, t1.importeAgosto, t1.importeSeptiembre, t1.importeOctubre, t1.importeNoviembre, 
                            t1.importeDiciembre, t1.importeTotal, t1.anio, t1.idResponsable, t2.nombre AS agrupacion, t3.concepto AS concepto,
                            t4.nombre + ' ' + t4.apellidoPaterno + ' ' + t4.apellidoMaterno AS responsable,
                            (SELECT SUM(ad.importeEnero) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeEneroAditiva,
                    	    (SELECT SUM(ad.importeFebrero) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeFebreroAditiva,
                    	    (SELECT SUM(ad.importeMarzo) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeMarzoAditiva,
                    	    (SELECT SUM(ad.importeAbril) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeAbrilAditiva,
                    	    (SELECT SUM(ad.importeMayo) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeMayoAditiva,
                    	    (SELECT SUM(ad.importeJunio) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeJunioAditiva,
                    	    (SELECT SUM(ad.importeJulio) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeJulioAditiva,
                    	    (SELECT SUM(ad.importeAgosto) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeAgostoAditiva,
                    	    (SELECT SUM(ad.importeSeptiembre) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeSeptiembreAditiva,
                    	    (SELECT SUM(ad.importeOctubre) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeOctubreAditiva,
                    	    (SELECT SUM(ad.importeNoviembre) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeNoviembreAditiva,
                    	    (SELECT SUM(ad.importeDiciembre) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeDiciembreAditiva
                        FROM tblAF_CtrlPptalOfCe_CapPptos AS t1
                    		INNER JOIN tblAF_CtrllPptalOfCe_CatAgrupaciones AS t2 ON t2.id = t1.idAgrupacion
                    		INNER JOIN tblAF_CtrlPptalOfCe_CatConceptos AS t3 ON t3.id = t1.idConcepto
                    		INNER JOIN tblP_Usuario AS t4 ON t4.id = t1.idResponsable
                    	WHERE t1.registroActivo = @registroActivo AND t1.cc = @cc AND t1.anio = @anio",
                    #endregion
                    //                    consulta = @"
                    //                        SELECT
                    //                            t1.id, t1.cc, t1.idAgrupacion, t1.idConcepto, t1.importeEnero, t1.importeFebrero, t1.importeMarzo, t1.importeAbril, t1.importeMayo, 
                    //                            t1.importeJunio, t1.importeJulio, t1.importeAgosto, t1.importeSeptiembre, t1.importeOctubre, t1.importeNoviembre, 
                    //                            t1.importeDiciembre, t1.importeTotal, t1.anio, t1.idResponsable, t2.nombre AS agrupacion, t3.concepto AS concepto,
                    //                            t4.nombre + ' ' + t4.apellidoPaterno + ' ' + t4.apellidoMaterno AS responsable
                    //                        FROM tblAF_CtrlPptalOfCe_CapPptos AS t1
                    //                        	INNER JOIN tblAF_CtrllPptalOfCe_CatAgrupaciones AS t2 ON t2.id = t1.idAgrupacion
                    //                        	INNER JOIN tblAF_CtrlPptalOfCe_CatConceptos AS t3 ON t3.id = t1.idConcepto
                    //                        	INNER JOIN tblP_Usuario AS t4 ON t4.id = t1.idResponsable
                    //                        WHERE t1.registroActivo = @registroActivo AND t1.cc = @cc AND t1.anio = @anio",
                    parametros = new { registroActivo = true, cc = objDTO.idCC, anio = objDTO.anio }
                }).ToList();
                #endregion

                //SE OBTIENE LISTADO DE AGRUPACIONES
                List<tblAF_CtrllPptalOfCe_CatAgrupaciones> lstAgrupaciones = _context.tblAF_CtrllPptalOfCe_CatAgrupaciones.Where(w => w.registroActivo).OrderBy(o => o.nombre).ToList();

                //SE OBTIENE LISTADO DE CONCEPTOS
                List<tblAF_CtrlPptalOfCe_CatConceptos> lstConceptos = _context.tblAF_CtrlPptalOfCe_CatConceptos.Where(w => w.registroActivo).OrderBy(o => o.concepto).ToList();

                List<CapPptoDTO> lstSumaCapturas = new List<CapPptoDTO>();
                CapPptoDTO obj = new CapPptoDTO();

                foreach (var item in lstConceptos)
                {
                    obj = new CapPptoDTO();

                    if (lstSumaCapturas.Where(w => w.idAgrupacion == item.idAgrupacion).Count() <= 0)
                    {
                        obj = new CapPptoDTO();

                        obj.idAgrupacion = item.idAgrupacion;
                        obj.concepto = lstAgrupaciones.Where(w => w.id == item.idAgrupacion).Select(s => s.nombre).FirstOrDefault();
                        obj.esAgrupacion = true;

                        lstSumaCapturas.Add(obj);
                    }

                    obj = new CapPptoDTO();

                    obj.cc = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Select(s => s.cc).FirstOrDefault();
                    obj.idAgrupacion = lstAgrupaciones.Where(w => w.id == item.idAgrupacion).Select(s => s.id).FirstOrDefault();
                    obj.idConcepto = item.id;
                    obj.agrupacion = lstAgrupaciones.Where(w => w.id == item.idAgrupacion).Select(s => s.nombre).FirstOrDefault();
                    obj.concepto = item.concepto;

                    //SUMATORIA CON ADITIVA
                    obj.importeEnero = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeEnero + s.importeEneroAditiva);
                    obj.importeFebrero = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeFebrero + s.importeFebreroAditiva);
                    obj.importeMarzo = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeMarzo + s.importeMarzoAditiva);
                    obj.importeAbril = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeAbril + s.importeAbrilAditiva);
                    obj.importeMayo = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeMayo + s.importeMayoAditiva);
                    obj.importeJunio = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeJunio + s.importeJunioAditiva);
                    obj.importeJulio = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeJulio + s.importeJulioAditiva);
                    obj.importeAgosto = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeAgosto + s.importeAgostoAditiva);
                    obj.importeSeptiembre = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeSeptiembre + s.importeSeptiembreAditiva);
                    obj.importeOctubre = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeOctubre + s.importeOctubreAditiva);
                    obj.importeNoviembre = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeNoviembre + s.importeNoviembreAditiva);
                    obj.importeDiciembre = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeDiciembre + s.importeDiciembreAditiva);

                    obj.anio = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Select(s => s.anio).FirstOrDefault();
                    obj.importeTotalConcepto =
                        obj.importeEnero + obj.importeFebrero + obj.importeMarzo + obj.importeAbril + obj.importeMayo + obj.importeJunio +
                        obj.importeJulio + obj.importeAgosto + obj.importeSeptiembre + obj.importeOctubre + obj.importeNoviembre + obj.importeDiciembre;
                    obj.esAgrupacion = false;

                    lstSumaCapturas.Add(obj);
                }

                foreach (var renglon in lstSumaCapturas)
                {
                    if (renglon.esAgrupacion)
                    {
                        var idAgrupacion = renglon.idAgrupacion;
                        var renglonesDetalle = lstSumaCapturas.Where(x => !x.esAgrupacion && x.idAgrupacion == idAgrupacion).ToList();

                        renglon.importeEnero = renglonesDetalle.Sum(x => x.importeEnero);
                        renglon.importeFebrero = renglonesDetalle.Sum(x => x.importeFebrero);
                        renglon.importeMarzo = renglonesDetalle.Sum(x => x.importeMarzo);
                        renglon.importeAbril = renglonesDetalle.Sum(x => x.importeAbril);
                        renglon.importeMayo = renglonesDetalle.Sum(x => x.importeMayo);
                        renglon.importeJunio = renglonesDetalle.Sum(x => x.importeJunio);
                        renglon.importeJulio = renglonesDetalle.Sum(x => x.importeJulio);
                        renglon.importeAgosto = renglonesDetalle.Sum(x => x.importeAgosto);
                        renglon.importeSeptiembre = renglonesDetalle.Sum(x => x.importeSeptiembre);
                        renglon.importeOctubre = renglonesDetalle.Sum(x => x.importeOctubre);
                        renglon.importeNoviembre = renglonesDetalle.Sum(x => x.importeNoviembre);
                        renglon.importeDiciembre = renglonesDetalle.Sum(x => x.importeDiciembre);
                        renglon.importeTotalConcepto = renglonesDetalle.Sum(x => x.importeTotalConcepto);
                    }
                }

                obj = new CapPptoDTO();
                obj.concepto = "TOTAL";

                //SUMATORIA CON ADITIVA
                obj.importeEnero = lstCapturas.Sum(s => s.importeEnero + s.importeEneroAditiva);
                obj.importeFebrero = lstCapturas.Sum(s => s.importeFebrero + s.importeFebreroAditiva);
                obj.importeMarzo = lstCapturas.Sum(s => s.importeMarzo + s.importeMarzoAditiva);
                obj.importeAbril = lstCapturas.Sum(s => s.importeAbril + s.importeAbrilAditiva);
                obj.importeMayo = lstCapturas.Sum(s => s.importeMayo + s.importeMayoAditiva);
                obj.importeJunio = lstCapturas.Sum(s => s.importeJunio + s.importeJunioAditiva);
                obj.importeJulio = lstCapturas.Sum(s => s.importeJulio + s.importeJulioAditiva);
                obj.importeAgosto = lstCapturas.Sum(s => s.importeAgosto + s.importeAgostoAditiva);
                obj.importeSeptiembre = lstCapturas.Sum(s => s.importeSeptiembre + s.importeSeptiembreAditiva);
                obj.importeOctubre = lstCapturas.Sum(s => s.importeOctubre + s.importeOctubreAditiva);
                obj.importeNoviembre = lstCapturas.Sum(s => s.importeNoviembre + s.importeNoviembreAditiva);
                obj.importeDiciembre = lstCapturas.Sum(s => s.importeDiciembre + s.importeDiciembreAditiva);
                obj.importeTotalConcepto =
                    obj.importeEnero + obj.importeFebrero + obj.importeMarzo + obj.importeAbril + obj.importeMayo + obj.importeJunio +
                    obj.importeJulio + obj.importeAgosto + obj.importeSeptiembre + obj.importeOctubre + obj.importeNoviembre + obj.importeDiciembre;

                obj.esAgrupacion = true;
                obj.idAgrupacion = 9999;

                lstSumaCapturas.Add(obj);

                resultado.Add("lstSumaCapturas", lstSumaCapturas.Where(x => x.importeTotalConcepto > 0).OrderBy(o => o.idAgrupacion));
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetSumaCapturas", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> GetCapturasPorMes(CapPptoDTO objDTO)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                List<CapPptoDTO> lstCapPptos = new List<CapPptoDTO>();

                string mesNombre = (new DateTime(2022, objDTO.idMes, 1)).ToString("MMMM");
                string mesNombreMayuscula = char.ToUpper(mesNombre[0]) + mesNombre.Substring(1);

                string sql = string.Format(@"
                               SELECT
                                    t1.id, t1.cc, t1.idAgrupacion, t1.idConcepto, t1.importe{0} AS importe, t1.anio, t1.idResponsable, 
                                    t2.nombre AS agrupacion, t3.concepto AS concepto, t4.nombre + ' ' + t4.apellidoPaterno + ' ' + t4.apellidoMaterno AS responsable
                                        FROM tblAF_CtrlPptalOfCe_CapPptos AS t1
			                                INNER JOIN tblAF_CtrllPptalOfCe_CatAgrupaciones AS t2 ON t2.id = t1.idAgrupacion
			                                INNER JOIN tblAF_CtrlPptalOfCe_CatConceptos AS t3 ON t3.id = t1.idConcepto
			                                INNER JOIN tblP_Usuario AS t4 ON t4.id = t1.idResponsable
				                WHERE t1.registroActivo = @registroActivo AND t1.cc = @cc AND t1.idAgrupacion = @idAgrupacion AND t1.idConcepto = @idConcepto AND t1.anio = @anio", mesNombreMayuscula);

                if (objDTO.idConcepto > 0)
                {
                    #region CONCEPTO
                    string sql2 = string.Format(@"
                                SELECT
                                    t1.id, t1.cc, t1.idAgrupacion, t1.idConcepto, t1.importe{0} AS importe, t1.anio, t1.idResponsable, t1.importeTotal,
                                    t2.nombre AS agrupacion, t3.concepto AS concepto, t4.nombre + ' ' + t4.apellidoPaterno + ' ' + t4.apellidoMaterno AS responsable
                                FROM tblAF_CtrlPptalOfCe_CapPptos AS t1
			                        INNER JOIN tblAF_CtrllPptalOfCe_CatAgrupaciones AS t2 ON t2.id = t1.idAgrupacion
			                        INNER JOIN tblAF_CtrlPptalOfCe_CatConceptos AS t3 ON t3.id = t1.idConcepto
			                        INNER JOIN tblP_Usuario AS t4 ON t4.id = t1.idResponsable
				                WHERE t1.registroActivo = @registroActivo AND t1.cc = @cc AND t1.idAgrupacion = @idAgrupacion AND t1.idConcepto = @idConcepto AND t1.anio = @anio", mesNombreMayuscula);
                    lstCapPptos = _context.Select<CapPptoDTO>(new DapperDTO
                    {
                        baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,

                        consulta = sql2,
                        parametros = new { registroActivo = true, cc = objDTO.cc, idAgrupacion = objDTO.idAgrupacion, idConcepto = objDTO.idConcepto, anio = objDTO.anio }
                    }).ToList();
                    #endregion
                }
                else
                {
                    #region AGRUPACIÓN
                    string sql2 = string.Format(@"
                                SELECT
                                    t1.id, t1.cc, t1.idAgrupacion, t1.idConcepto, t1.importe{0} AS importe, t1.anio, t1.idResponsable, t1.importeTotal,
                                    t2.nombre AS agrupacion, t3.concepto AS concepto, t4.nombre + ' ' + t4.apellidoPaterno + ' ' + t4.apellidoMaterno AS responsable
                                FROM tblAF_CtrlPptalOfCe_CapPptos AS t1
			                        INNER JOIN tblAF_CtrllPptalOfCe_CatAgrupaciones AS t2 ON t2.id = t1.idAgrupacion
			                        INNER JOIN tblAF_CtrlPptalOfCe_CatConceptos AS t3 ON t3.id = t1.idConcepto
			                        INNER JOIN tblP_Usuario AS t4 ON t4.id = t1.idResponsable
				                WHERE t1.registroActivo = @registroActivo AND t1.cc = @cc AND t1.idAgrupacion = @idAgrupacion AND t1.anio = @anio", mesNombreMayuscula);

                    lstCapPptos = _context.Select<CapPptoDTO>(new DapperDTO
                    {
                        baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                        consulta = sql2,
                        parametros = new { registroActivo = true, cc = objDTO.cc, idAgrupacion = objDTO.idAgrupacion, anio = objDTO.anio }
                    }).ToList();
                    #endregion
                }

                lstCapPptos = lstCapPptos.Where(e => e.importeTotal > 0).OrderBy(e => e.concepto).ToList();

                #region SUMAR ADITIVAS
                foreach (var registro in lstCapPptos)
                {
                    var listaAditivas = _context.Select<CapPptoDTO>(new DapperDTO
                    {
                        baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                        consulta = string.Format(@"SELECT SUM(importe{0}) AS importe FROM tblAF_CtrlAditiva WHERE registroActivo = 1 AND autorizado = 1 AND capPptosId = @capPptosId", mesNombreMayuscula),
                        parametros = new { capPptosId = registro.id }
                    }).ToList();

                    if (listaAditivas.Count() > 0)
                    {
                        registro.importe += listaAditivas[0].importe;
                    }


                }
                #endregion

                resultado.Add("lstCapPptos", lstCapPptos);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetCapturas", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }

            return resultado;
        }

        public Dictionary<string, object> GetCapturasPorMesContable(CapPptoDTO objDTO)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                var registroCentroCostoSIGOPLAN = _context.tblP_CC.FirstOrDefault(x => x.id == objDTO.idCC);
                var polizas = new List<PolizaDTO>();

                if (objDTO.idConcepto > 0) //Detalle de un concepto
                {
                    var registroConcepto = _context.tblAF_CtrlPptalOfCe_CatConceptos.FirstOrDefault(x => x.id == objDTO.idConcepto);

                    #region String para la consulta de múltiples cta-scta-sscta
                    var where_cuentas_string = "";
                    var listaCuentas = _context.tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas.Where(x => x.registroActivo && x.idConcepto == registroConcepto.idConcepto).ToList();

                    foreach (var cuenta in listaCuentas)
                    {
                        where_cuentas_string += string.Format(@"(cta = {0} AND scta = {1} AND sscta = {2})", cuenta.cta, cuenta.scta, cuenta.sscta);

                        if (cuenta != listaCuentas.Last())
                        {
                            where_cuentas_string += " OR ";
                        }
                    }

                    if (where_cuentas_string != "")
                    {
                        where_cuentas_string = " AND (" + where_cuentas_string + ")";
                    }
                    #endregion

                    polizas = _contextEnkontrol.Select<PolizaDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                    {
                        consulta = string.Format(@"
                        SELECT
                            year, mes, poliza, tp, linea, cta, scta, sscta, concepto, monto
                        FROM sc_movpol
                        WHERE year = ? AND mes = ? AND cc = ? {0}", where_cuentas_string),
                        parametros = new List<OdbcParameterDTO>() {
                            new OdbcParameterDTO() { nombre = "year", tipo = OdbcType.Numeric, valor = objDTO.anio },
                            new OdbcParameterDTO() { nombre = "mes", tipo = OdbcType.Numeric, valor = objDTO.idMes },
                            new OdbcParameterDTO() { nombre = "cc", tipo = OdbcType.VarChar, valor = registroCentroCostoSIGOPLAN.cc }
                        }
                    });
                    if (vSesiones.sesionEmpresaActual == 1) 
                    {
                        polizas.AddRange( _contextEnkontrol.Select<PolizaDTO>(EnkontrolAmbienteEnum.ProdGCPLAN, new OdbcConsultaDTO()
                        {
                            consulta = string.Format(@"
                        SELECT
                            year, mes, poliza, tp, linea, cta, scta, sscta, concepto, monto
                        FROM sc_movpol
                        WHERE year = ? AND mes = ? AND cc = ? {0}", where_cuentas_string),
                            parametros = new List<OdbcParameterDTO>() {
                            new OdbcParameterDTO() { nombre = "year", tipo = OdbcType.Numeric, valor = objDTO.anio },
                            new OdbcParameterDTO() { nombre = "mes", tipo = OdbcType.Numeric, valor = objDTO.idMes },
                            new OdbcParameterDTO() { nombre = "cc", tipo = OdbcType.VarChar, valor = registroCentroCostoSIGOPLAN.cc }
                        }
                        }));
                    }
                }
                else //Detalle de una agrupación de conceptos
                {
                    if (objDTO.idAgrupacion == 9999999)
                    {
                        //SIN CATALOGAR
                        var catalogoCuentas = new List<string>();

                        var capPptos = _context.tblAF_CtrlPptalOfCe_CapPptos
                            .Where(x =>
                                x.cc == objDTO.idCC.ToString() &&
                                x.anio == objDTO.anio &&
                                x.registroActivo).ToList();

                        var idConceptosPptos = capPptos.Select(x => x.idConcepto).ToList();

                        var catConceptos = _context.tblAF_CtrlPptalOfCe_CatConceptos.Where(x => idConceptosPptos.Contains(x.id)).Select(x => x.idConcepto).ToList();
                        var cuentasConcepto = _context.tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas.Where(x => catConceptos.Contains(x.idConcepto)).ToList();

                        foreach (var item in cuentasConcepto)
                        {
                            catalogoCuentas.Add(item.cta + "-" + item.scta + "-" + item.sscta);
                        }

                        var query_sinCatalogar = new OdbcConsultaDTO();
                        query_sinCatalogar.consulta = string.Format("SELECT DISTINCT CAST(cta as varchar(4)) + '-' + CAST(scta as varchar(4)) + '-' + CAST(sscta as varchar(4)) AS cuenta FROM catcta WHERE scta != 23 AND cta = 5280");
                        var cuentasEnkontrol = _contextEnkontrol.Select<CuentasEnkontrolDTO>(vSesiones.sesionAmbienteEnkontrolAdm, query_sinCatalogar);

                        cuentasEnkontrol.RemoveAll(x => catalogoCuentas.Contains(x.cuenta));

                        string where_movpolSinCatalogar = "";
                        if (cuentasEnkontrol.Count == 0)
                        {
                            where_movpolSinCatalogar = "1 = 2";
                        }
                        else
                        {
                            where_movpolSinCatalogar = string.Format("(CAST(cta as varchar(4)) + '-' + CAST(scta as varchar(4)) + '-' + CAST(sscta as varchar(4))) IN {0}", cuentasEnkontrol.Select(x => x.cuenta).ToList().ToParamInValue());
                        }

                        var query_movpolSinCatalogar = new OdbcConsultaDTO();
                        query_movpolSinCatalogar.consulta = string.Format(
                            @"SELECT
                                year, mes, poliza, tp, linea, cta, scta, sscta, concepto, monto
                            FROM
                                sc_movpol
                            WHERE
                                year = ? AND
                                mes = ? AND
                                cc = ? AND
                                {0}", where_movpolSinCatalogar);
                        query_movpolSinCatalogar.parametros.Add(new OdbcParameterDTO
                        {
                            nombre = "year",
                            tipo = OdbcType.Int,
                            valor = objDTO.anio
                        });
                        query_movpolSinCatalogar.parametros.Add(new OdbcParameterDTO
                        {
                            nombre = "mes",
                            tipo = OdbcType.Int,
                            valor = objDTO.idMes
                        });
                        query_movpolSinCatalogar.parametros.Add(new OdbcParameterDTO
                        {
                            nombre = "cc",
                            tipo = OdbcType.NVarChar,
                            valor = registroCentroCostoSIGOPLAN.cc
                        });
                        if (cuentasEnkontrol.Count > 0)
                        {
                            query_movpolSinCatalogar.parametros.AddRange(cuentasEnkontrol.Select(x => new OdbcParameterDTO
                            {
                                nombre = "cuenta",
                                tipo = OdbcType.NVarChar,
                                valor = x.cuenta
                            }).ToList());
                        }
                        var montosGastosSinCatalogar = _contextEnkontrol.Select<PolizaDTO>(vSesiones.sesionAmbienteEnkontrolAdm, query_movpolSinCatalogar);
                        polizas.AddRange(montosGastosSinCatalogar);
                        if (vSesiones.sesionEmpresaActual == 1) 
                        {
                            var montosGastosSinCatalogarGCPLAN = _contextEnkontrol.Select<PolizaDTO>(EnkontrolAmbienteEnum.ProdGCPLAN, query_movpolSinCatalogar);
                            polizas.AddRange(montosGastosSinCatalogarGCPLAN);
                        }        
                    }
                    else
                    {
                        var listaRegistrosConcepto = _context.tblAF_CtrlPptalOfCe_CatConceptos.Where(x => x.registroActivo && x.idAgrupacion == objDTO.idAgrupacion).ToList();

                        foreach (var concepto in listaRegistrosConcepto)
                        {
                            #region String para la consulta de múltiples cta-scta-sscta
                            var where_cuentas_string = "";
                            var listaCuentas = _context.tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas.Where(x => x.registroActivo && x.idConcepto == concepto.idConcepto).ToList();

                            if (listaCuentas.Count() > 0)
                            {

                                foreach (var cuenta in listaCuentas)
                                {
                                    where_cuentas_string += string.Format(@"(cta = {0} AND scta = {1} AND sscta = {2})", cuenta.cta, cuenta.scta, cuenta.sscta);

                                    if (cuenta != listaCuentas.Last())
                                    {
                                        where_cuentas_string += " OR ";
                                    }
                                }

                                if (where_cuentas_string != "")
                                {
                                    where_cuentas_string = " AND (" + where_cuentas_string + ")";
                                }
                            #endregion

                                polizas.AddRange(_contextEnkontrol.Select<PolizaDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                {
                                    consulta = string.Format(@"
                                        SELECT
                                            year, mes, poliza, tp, linea, cta, scta, sscta, concepto, monto
                                        FROM sc_movpol
                                        WHERE year = ? AND mes = ? AND cc = ? {0}", where_cuentas_string),
                                    parametros = new List<OdbcParameterDTO>() {
                                        new OdbcParameterDTO() { nombre = "year", tipo = OdbcType.Numeric, valor = objDTO.anio },
                                        new OdbcParameterDTO() { nombre = "mes", tipo = OdbcType.Numeric, valor = objDTO.idMes },
                                        new OdbcParameterDTO() { nombre = "cc", tipo = OdbcType.VarChar, valor = registroCentroCostoSIGOPLAN.cc }
                                    }
                                }));

                                if (vSesiones.sesionEmpresaActual == 1) 
                                {
                                    polizas.AddRange(_contextEnkontrol.Select<PolizaDTO>(EnkontrolAmbienteEnum.ProdGCPLAN, new OdbcConsultaDTO()
                                    {
                                        consulta = string.Format(@"
                                        SELECT
                                            year, mes, poliza, tp, linea, cta, scta, sscta, concepto, monto
                                        FROM sc_movpol
                                        WHERE year = ? AND mes = ? AND cc = ? {0}", where_cuentas_string),
                                        parametros = new List<OdbcParameterDTO>() {
                                            new OdbcParameterDTO() { nombre = "year", tipo = OdbcType.Numeric, valor = objDTO.anio },
                                            new OdbcParameterDTO() { nombre = "mes", tipo = OdbcType.Numeric, valor = objDTO.idMes },
                                            new OdbcParameterDTO() { nombre = "cc", tipo = OdbcType.VarChar, valor = registroCentroCostoSIGOPLAN.cc }
                                        }
                                    }));
                                }
                            }
                        }
                    }
                }

                resultado.Add("data", polizas);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetCapturasPorMesContable", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }

            return resultado;
        }

        public Dictionary<string, object> GetAditivasPorCaptura(CapPptoDTO objDTO)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region SE OBTIENE LISTADO DE ADITIVAS AUTORIZADAS DEL MES SELECCIONADO Y CAPTURA SELECCIONADA
                string mesNombre = (new DateTime(2022, objDTO.idMes, 1)).ToString("MMMM");
                string mesNombreMayuscula = char.ToUpper(mesNombre[0]) + mesNombre.Substring(1);



                List<AditivaDTO> lstAditivas = _context.Select<AditivaDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = string.Format(@"SELECT importe{0} AS importe, comentario FROM tblAF_CtrlAditiva WHERE autorizado = @autorizado AND capPptosId = @capPptosId AND registroActivo = @registroActivo", mesNombreMayuscula),
                    parametros = new { autorizado = 1, capPptosId = objDTO.id, registroActivo = true }
                }).ToList();
                resultado.Add("lstAditivas", lstAditivas.Where(w => w.importe > 0 || w.importe < 0).ToList());
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetAditivasPorCaptura", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> GetPlanMaestroRelReportePpto(CapPptoDTO objDTO)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region SE OBTIENE PLAN MAESTRO EN BASE AL AÑO Y CC SELECCIONADOS

                #region SE OBTIENE DATOS SUPERIORES DEL PLAN MAESTRO
                PlanMaestroDTO objPlanMaestro = _context.Select<PlanMaestroDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"SELECT id, anio, idCC, misionArea, objEspecificoMedible, meta 
                                        FROM tblAF_CtrlPptalOfCe_RN_PlanMaestro 
	                                        WHERE registroActivo = @registroActivo AND anio = @anio AND idCC = @idCC",
                    parametros = new { registroActivo = true, anio = objDTO.anio, idCC = objDTO.idCC }
                }).FirstOrDefault();

                if (objPlanMaestro == null)
                    throw new Exception("No se encontró un plan maestro con los filtros seleccionados.");
                #endregion

                #region SE OBTIENE MEDICIONES Y/O INDICADORES DEL PLAN MAESTRO CONSULTADO
                List<MedicionIndicadorDTO> lstMedicionesIndicadores = _context.Select<MedicionIndicadorDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"SELECT t1.id, t1.idPlanMaestro, t1.indicador, t1.fuenteDatos, t1.idUsuarioResponsable, t1.meta, t2.nombre + ' ' + t2.apellidoPaterno + ' ' + t2.apellidoMaterno AS usuarioResponsable
	                                    FROM tblAF_CtrlPptalOfCe_RN_MedicionesIndicadores AS t1
	                                    INNER JOIN tblP_Usuario AS t2 ON t1.idUsuarioResponsable = t2.id
		                                    WHERE registroActivo = @registroActivo AND idPlanMaestro = @idPlanMaestro",
                    parametros = new { registroActivo = true, idPlanMaestro = objPlanMaestro.id }
                }).ToList();
                #endregion

                #region SE OBTIENE AGRUPACIONES Y CONCEPTOS DEL PLAN MAESTO CONSULTADO
                List<tblAF_CtrllPptalOfCe_CatAgrupaciones> lstRNAgrupaciones = _context.tblAF_CtrllPptalOfCe_CatAgrupaciones.Where(w => w.anio == objDTO.anio && w.idCC == objDTO.idCC && w.registroActivo).ToList();
                List<int> lstRNAgrupacionesID = new List<int>();
                foreach (var item in lstRNAgrupaciones)
                {
                    lstRNAgrupacionesID.Add(item.id);
                }
                List<tblAF_CtrlPptalOfCe_CatConceptos> lstRNConceptos = _context.tblAF_CtrlPptalOfCe_CatConceptos.Where(w => lstRNAgrupacionesID.Contains(w.idAgrupacion) && w.registroActivo).ToList();
                List<tblAF_CtrlPptalOfCe_CapPptos> lstCapPptos = _context.tblAF_CtrlPptalOfCe_CapPptos.Where(w => w.anio == objDTO.anio && w.cc == objDTO.idCC.ToString() && w.registroActivo).ToList();
                RNConceptoDTO objRNAgrupacionRNConcepto = new RNConceptoDTO();
                List<RNConceptoDTO> lstRNAgrupacionesRNConceptos = new List<RNConceptoDTO>();
                foreach (var item in lstRNConceptos)
                {
                    int existeRNAgrupacion = lstRNAgrupacionesRNConceptos.Where(w => w.idRNAgrupacion == item.idAgrupacion).Count();
                    if (existeRNAgrupacion == 0)
                    {
                        objRNAgrupacionRNConcepto = new RNConceptoDTO();
                        objRNAgrupacionRNConcepto.idRNAgrupacion = item.idAgrupacion;
                        objRNAgrupacionRNConcepto.concepto = lstRNAgrupaciones.Where(w => w.id == item.idAgrupacion).Select(s => s.nombre).FirstOrDefault();
                        objRNAgrupacionRNConcepto.esAgrupacion = true;
                        lstRNAgrupacionesRNConceptos.Add(objRNAgrupacionRNConcepto);
                    }

                    if (objRNAgrupacionRNConcepto.esAgrupacion)
                    {
                        objRNAgrupacionRNConcepto.total = lstCapPptos.Where(w => w.idAgrupacion == item.idAgrupacion).Sum(s =>
                                                                                                                            s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril +
                                                                                                                            s.importeMayo + s.importeJunio + s.importeJulio + s.importeAgosto +
                                                                                                                            s.importeSeptiembre + s.importeOctubre + s.importeNoviembre + s.importeDiciembre);
                    }

                    objRNAgrupacionRNConcepto = new RNConceptoDTO();
                    objRNAgrupacionRNConcepto.concepto = item.concepto;
                    objRNAgrupacionRNConcepto.total = item.cantPpto;
                    lstRNAgrupacionesRNConceptos.Add(objRNAgrupacionRNConcepto);
                }
                #endregion

                #region SE CONVIERTE TEXTO A MAYUSCULAS
                if (objPlanMaestro != null)
                {
                    if (!string.IsNullOrEmpty(objPlanMaestro.misionArea))
                    {
                        string misionTU = objPlanMaestro.misionArea.Trim().ToUpper();
                        objPlanMaestro.misionArea = misionTU;
                    }

                    if (!string.IsNullOrEmpty(objPlanMaestro.objEspecificoMedible))
                    {
                        string objTU = objPlanMaestro.objEspecificoMedible.Trim().ToUpper();
                        objPlanMaestro.objEspecificoMedible = objTU;
                    }

                    if (!string.IsNullOrEmpty(objPlanMaestro.meta))
                    {
                        string metaTU = objPlanMaestro.meta.Trim().ToUpper();
                        objPlanMaestro.meta = metaTU;
                    }
                }

                foreach (var item in lstMedicionesIndicadores)
                {
                    if (!string.IsNullOrEmpty(item.indicador))
                    {
                        string indicadorTU = item.indicador.Trim().ToUpper();
                        item.indicador = indicadorTU;
                    }

                    if (!string.IsNullOrEmpty(item.fuenteDatos))
                    {
                        string fuenteTU = item.fuenteDatos.Trim().ToUpper();
                        item.fuenteDatos = fuenteTU;
                    }

                    if (!string.IsNullOrEmpty(item.meta))
                    {
                        string metaTU = item.meta.Trim().ToUpper();
                        item.meta = metaTU;
                    }
                }
                #endregion

                resultado.Add("objPlanMaestro", objPlanMaestro);
                resultado.Add("lstMedicionesIndicadores", lstMedicionesIndicadores);
                resultado.Add("lstRNAgrupacionesRNConceptos", lstRNAgrupacionesRNConceptos);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetPlanMaestroRelReportePpto", e, AccionEnum.CONSULTA, objDTO.id, objDTO);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }
        #endregion

        #region FILL COMBOS
        public Dictionary<string, object> FillEstrategias()
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region FILL CBO ESTRATEGIAS
                List<ComboDTO> lstEstrategias = _context.Select<ComboDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"SELECT id AS Value, estrategia AS Text FROM tblAF_CtrlPptalOfCe_CatEstrategicas WHERE registroActivo = @registroActivo",
                    parametros = new { registroActivo = true }
                });
                resultado.Add(ITEMS, lstEstrategias);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "FillEstrategias", e, AccionEnum.FILLCOMBO, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> FillResponsablesCuentasLider()
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region FILL CBO RESPONSABLES CUENTAS LIDER
                List<ComboDTO> lstResponsables = _context.Select<ComboDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"SELECT id AS Value, responsableCuentaLider AS Text FROM tblAF_CtrlPptalOfCe_CatResponsablesCuentas WHERE registroActivo = registroActivo",
                    parametros = new { registroActivo = true }
                });
                resultado.Add(ITEMS, lstResponsables);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "FillResponsablesCuentasLider", e, AccionEnum.FILLCOMBO, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> FillConceptos(int idAgrupacion)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region FILL COMBO CONCEPTOS
                List<ComboDTO> lstConceptos = _context.Select<ComboDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"SELECT id AS Value, concepto AS Text 
                                            FROM tblAF_CtrlPptalOfCe_CatConceptos 
                                                WHERE registroActivo = @registroActivo AND idAgrupacion = @idAgrupacion",
                    parametros = new { registroActivo = true, idAgrupacion = idAgrupacion }
                });
                resultado.Add(ITEMS, lstConceptos);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "FillConceptos", e, AccionEnum.FILLCOMBO, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> FillConceptosDeCapturas(int idCC, int idAgrupacion)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region SE OBTIENE CONCEPTOS ID DE LA AGRUPACIÓN
                List<int> lstConceptosID = _context.Select<int>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"SELECT idConcepto 
	                                    FROM tblAF_CtrlPptalOfCe_CapPptos 
		                                    WHERE idAgrupacion = @idAgrupacion AND cc = @idCC AND registroActivo = @registroActivo",
                    parametros = new { idAgrupacion = idAgrupacion, idCC = idCC, registroActivo = true }
                });

                List<tblAF_CtrlPptalOfCe_CatCtaInsumos> lstConceptos = _context.tblAF_CtrlPptalOfCe_CatCtaInsumos.Where(w => lstConceptosID.Contains(w.id) && w.registroActivo).ToList();
                List<ComboDTO> lstConceptosDTO = new List<ComboDTO>();
                foreach (var item in lstConceptos)
                {
                    ComboDTO obj = new ComboDTO();
                    obj.Value = item.id.ToString();
                    obj.Text = item.concepto;
                    lstConceptosDTO.Add(obj);
                }

                resultado.Add(ITEMS, lstConceptosDTO);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "FillConceptosDeCapturas", e, AccionEnum.FILLCOMBO, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> FillAgrupaciones(int anio, int idCC)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region VALIDACIONES
                if (anio <= 0 || idCC <= 0)
                {
                    string strMensajeError = string.Empty;
                    strMensajeError += anio <= 0 ? "Es necesario indicar el año." : "";
                    strMensajeError += idCC <= 0 ? "<br>Es necesario indicar el cc." : "";
                    throw new Exception(strMensajeError);
                }
                #endregion

                #region FILL AGRUPACIONES
                List<ComboDTO> lstAgrupaciones = new List<ComboDTO>();

                if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                {
                    lstAgrupaciones = _context.Select<ComboDTO>(new DapperDTO
                    {
                        baseDatos = MainContextEnum.Construplan,
                        consulta = @"SELECT id AS Value, nombre AS Text FROM tblAF_CtrllPptalOfCe_CatAgrupaciones WHERE registroActivo = @registroActivo AND anio = @anio AND idCC = @idCC",
                        parametros = new { registroActivo = true, anio = anio, idCC = idCC }
                    });
                }
                else if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                {
                    lstAgrupaciones = _context.Select<ComboDTO>(new DapperDTO
                    {
                        baseDatos = MainContextEnum.Arrendadora,
                        consulta = @"SELECT id AS Value, nombre AS Text FROM tblAF_CtrllPptalOfCe_CatAgrupaciones WHERE registroActivo = @registroActivo AND anio = @anio AND idCC = @idCC",
                        parametros = new { registroActivo = true, anio = anio, idCC = idCC }
                    });
                }

                resultado.Add(ITEMS, lstAgrupaciones);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "FillAgrupaciones", e, AccionEnum.FILLCOMBO, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> FillUsuarios()
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region FILL CBO USUARIOS
                List<ComboDTO> lstUsuarios = _context.Select<ComboDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"SELECT id AS Value, nombre + ' ' + apellidoPaterno + ' ' + apellidoMaterno AS Text 
	                                    FROM tblP_Usuario 
		                                    WHERE estatus = @estatus AND nombre + ' ' + apellidoPaterno + ' ' + apellidoMaterno IS NOT NULL",
                    parametros = new { estatus = 1 }
                });
                resultado.Add(ITEMS, lstUsuarios);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "FillUsuarios", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> FillCC()
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region FILL CC
                List<ComboDTO> lstCC = _context.Select<ComboDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"SELECT cc AS Value, cc + ' - ' + descripcion AS Text FROM tblP_CC WHERE estatus = @estatus",
                    parametros = new { estatus = 1 }
                });

                resultado.Add(ITEMS, lstCC);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "FillCbo", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> FillAnios()
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region FILL COMBO ANIOS EN BASE A LOS AÑOS REGISTRADOS EN LA TABLA PRINCIPAL DE CAPTURAS
                List<ComboDTO> lstAnios = _context.Select<ComboDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"SELECT DISTINCT anio Value, anio AS Text FROM tblAF_CtrlPptalOfCe_PptoAnual WHERE registroActivo = @registroActivo ORDER BY anio DESC",
                    parametros = new { registroActivo = true }
                });
                resultado.Add(ITEMS, lstAnios);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "FillAnios", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> FillUsuarioRelCC(int anio)
        {
            // SE OBTIENE LISTADO DE LOS CC QUE PUEDE ACCEDER EL USUARIO LOGUEADO, PERO SOLO EN BASE AL PPTO ANUAL SOLICITADO
            resultado = new Dictionary<string, object>();
            try
            {
                #region SE VERIFICA SI EL USUARIO TIENE ACCESO A TODOS LOS CC
                int idUsuario = (int)vSesiones.sesionUsuarioDTO.id;
                int todosLosCC = _context.tblAF_CtrlPptalOfCe_UsuarioRelCC.Where(w => w.idUsuario == idUsuario && w.todosCC && w.registroActivo).Count();
                #endregion

                #region SE OBTIENE LISTADO DE CC DE SERVICIOS
                List<tblAF_CtrlPptalOfCe_CCRelServicios> lstCCRelServicios = _context.tblAF_CtrlPptalOfCe_CCRelServicios.Where(w => w.registroActivo).ToList();
                #endregion

                List<ComboDTO> lstCCPptoAnual = new List<ComboDTO>();
                if (todosLosCC > 0)
                {
                    #region SE OBTIENE TODOS LOS CC DEL PPTO ANUAL EN BASE AL AÑO SELECCIONADO
                    if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                    {
                        lstCCPptoAnual = _context.Select<ComboDTO>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Construplan,
                            consulta = @"SELECT t1.idCC AS Value, CONVERT(NVARCHAR(50), t2.cc) + ' - ' + CONVERT(NVARCHAR(50), t2.descripcion) AS Text
	                                        FROM tblAF_CtrlPptalOfCe_PptoAnual AS t1
	                                        INNER JOIN tblP_CC AS t2 ON t1.idCC = t2.id
		                                        WHERE t1.registroActivo = @registroActivo AND t2.estatus = @estatus AND t1.anio = @anio 
                                                    ORDER BY Text",
                            parametros = new { registroActivo = true, estatus = 1, anio = anio }
                        }).ToList();
                    }
                    else if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                    {
                        lstCCPptoAnual = _context.Select<ComboDTO>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Arrendadora,
                            consulta = @"SELECT t1.idCC AS Value, CONVERT(NVARCHAR(50), t2.areaCuenta) + ' ' + CONVERT(NVARCHAR(50), t2.descripcion) AS Text
	                                        FROM tblAF_CtrlPptalOfCe_PptoAnual AS t1
	                                        INNER JOIN tblP_CC AS t2 ON t1.idCC = t2.id
		                                        WHERE t1.registroActivo = @registroActivo AND t2.estatus = @estatus AND t1.anio = @anio 
                                                    ORDER BY Text",
                            parametros = new { registroActivo = true, estatus = 1, anio = anio }
                        }).ToList();
                    }
                    #endregion
                }
                else
                {
                    #region SE OBTIENE LOS CC QUE TIENE ASIGNADO EL USUARIO
                    if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                    {
                        lstCCPptoAnual = _context.Select<ComboDTO>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Construplan,
                            consulta = @"SELECT t1.idCC AS Value, t2.cc + ' - ' + t2.descripcion AS Text  
		                                    FROM tblAF_CtrlPptalOfCe_UsuarioRelCC AS t1
		                                    INNER JOIN tblP_CC AS t2 ON t1.idCC = t2.id
		                                        WHERE t1.idUsuario = @idUsuario AND t1.registroACtivo = @registroActivo
                                                    ORDER BY Text",
                            parametros = new { idUsuario = (int)vSesiones.sesionUsuarioDTO.id, registroActivo = true }
                        }).ToList();
                    }
                    else if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                    {
                        lstCCPptoAnual = _context.Select<ComboDTO>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Arrendadora,
                            consulta = @"SELECT t1.idCC AS Value, t2.areaCuenta + ' ' + t2.descripcion AS Text
		                                    FROM tblAF_CtrlPptalOfCe_UsuarioRelCC AS t1
		                                    INNER JOIN tblP_CC AS t2 ON t1.idCC = t2.id
		                                        WHERE t1.idUsuario = @idUsuario AND t1.registroACtivo = @registroActivo
                                                    GROUP BY t1.idCC, t2.areaCuenta, t2.descripcion
                                                        ORDER BY Text",
                            parametros = new { idUsuario = (int)vSesiones.sesionUsuarioDTO.id, registroActivo = true }
                        }).ToList();
                    }
                    #endregion
                }

                List<ComboDTO> lstCCPptoAnualDTO = new List<ComboDTO>();
                if ((int)vSesiones.sesionUsuarioDTO.id == (int)AutorizantesEnum.segundoAutorizanteID)
                {
                    #region EN CASO DE JOSE.GAYTAN, SE MUESTRA SOLAMENTE LOS CC DE SERVICIOS
                    foreach (var item in lstCCPptoAnual)
                    {
                        int idCC = Convert.ToInt32(item.Value);
                        int esServicio = lstCCRelServicios.Where(w => w.idCC == idCC).Count();
                        if (esServicio == 1)
                        {
                            ComboDTO obj = new ComboDTO();
                            obj.Value = item.Value.ToString();
                            obj.Text = item.Text;
                            lstCCPptoAnualDTO.Add(obj);
                        }
                    }
                    resultado.Add(ITEMS, lstCCPptoAnualDTO.OrderBy(x => x.Text));
                    #endregion
                }
                else
                    resultado.Add(ITEMS, lstCCPptoAnual.OrderBy(x => x.Text));

                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "FillUsuarioRelCC", e, AccionEnum.FILLCOMBO, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> FillUsuarioRelCCPptosAutorizados(int anio, int idEmpresa)
        {
            if (idEmpresa == -1) idEmpresa = vSesiones.sesionEmpresaActual;
            // SE OBTIENE LISTADO DE LOS CC QUE PUEDE ACCEDER EL USUARIO LOGUEADO, PERO SOLO EN BASE AL PPTO ANUAL SOLICITADO Y SOLO SI EL PPTO YA SE ENCUENTRA AUTORIZADO
            resultado = new Dictionary<string, object>();
            try
            {
                #region SE VERIFICA SI EL USUARIO TIENE ACCESO A TODOS LOS CC
                int idUsuario = (int)vSesiones.sesionUsuarioDTO.id;
                int todosLosCC = _context.tblAF_CtrlPptalOfCe_UsuarioRelCC.Where(w => w.idUsuario == idUsuario && w.todosCC && w.registroActivo).Count();
                #endregion

                List<ComboDTO> lstCCPptoAnual = new List<ComboDTO>();
                if (todosLosCC > 0)
                {
                    #region SE OBTIENE TODOS LOS CC DEL PPTO ANUAL EN BASE AL AÑO SELECCIONADO
                    // SE VERIFICA SI ES CP O ARR
                    if (idEmpresa == (int)EmpresaEnum.Construplan)
                    {
                        lstCCPptoAnual = _context.Select<ComboDTO>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Construplan,
                            consulta = @"SELECT t1.idCC AS Value, CONVERT(NVARCHAR(50), t2.cc) + ' - ' + CONVERT(NVARCHAR(200), t2.descripcion) as Text
	                                        FROM tblAF_CtrlPptalOfCe_PptoAnual AS t1
	                                        INNER JOIN tblP_CC AS t2 ON t1.idCC = t2.id
		                                        WHERE t1.registroActivo = @registroActivo AND t1.anio = @anio AND t1.autorizado = @autorizado",
                            parametros = new { registroActivo = true, anio = anio, autorizado = 1 }
                        }).ToList();

                        foreach (var item in lstCCPptoAnual)
                        {
                            item.Prefijo = idEmpresa.ToString();
                        }
                    }
                    else if (idEmpresa == (int)EmpresaEnum.Arrendadora)
                    {
                        lstCCPptoAnual = _context.Select<ComboDTO>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Arrendadora,
                            consulta = @"SELECT t1.idCC AS Value, CONVERT(NVARCHAR(50), t2.areaCuenta) + ' ' + CONVERT(NVARCHAR(200), t2.descripcion) as Text
	                                        FROM tblAF_CtrlPptalOfCe_PptoAnual AS t1
	                                        INNER JOIN tblP_CC AS t2 ON t1.idCC = t2.id
		                                        WHERE t1.registroActivo = @registroActivo AND t1.anio = @anio AND t1.autorizado = @autorizado",
                            parametros = new { registroActivo = true, anio = anio, autorizado = 1 }
                        }).ToList();

                        foreach (var item in lstCCPptoAnual)
                        {
                            item.Prefijo = idEmpresa.ToString();
                        }
                    }
                    else if (idEmpresa == 9999) //AMBAS EMPRESAS
                    {
                        #region SE OBTIENE LISTADO DE CC DE CONSTRUPLAN CON PPTO AUTORIZADO
                        List<ComboDTO> lstCCPptoAnual_CP = _context.Select<ComboDTO>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Construplan,
                            consulta = @"SELECT t1.idCC AS Value, CONVERT(NVARCHAR(50), t2.cc) + ' - ' + CONVERT(NVARCHAR(200), t2.descripcion) as Text
	                                        FROM tblAF_CtrlPptalOfCe_PptoAnual AS t1
	                                        INNER JOIN tblP_CC AS t2 ON t1.idCC = t2.id
		                                        WHERE t1.registroActivo = @registroActivo AND t1.anio = @anio AND t1.autorizado = @autorizado",
                            parametros = new { registroActivo = true, anio = anio, autorizado = 1 }
                        }).ToList();
                        #endregion

                        #region SE OBTIENE LISTADO DE CC DE ARRENDADORA CON PPTO AUTORIZADO
                        List<ComboDTO> lstCCPptoAnual_ARR = _context.Select<ComboDTO>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Arrendadora,
                            consulta = @"SELECT t1.idCC AS Value, CONVERT(NVARCHAR(50), t2.areaCuenta) + ' ' + CONVERT(NVARCHAR(200), t2.descripcion) as Text
	                                        FROM tblAF_CtrlPptalOfCe_PptoAnual AS t1
	                                        INNER JOIN tblP_CC AS t2 ON t1.idCC = t2.id
		                                        WHERE t1.registroActivo = @registroActivo AND t1.anio = @anio AND t1.autorizado = @autorizado",
                            parametros = new { registroActivo = true, anio = anio, autorizado = 1 }
                        }).ToList();
                        #endregion

                        #region LOS RESULTADOS DE CP Y ARR, SE PASAN A UNA SOLA LISTA
                        lstCCPptoAnual = new List<ComboDTO>();
                        ComboDTO obj = new ComboDTO();

                        int idEmpresaCP = (int)EmpresaEnum.Construplan;
                        foreach (var item in lstCCPptoAnual_CP)
                        {
                            obj = new ComboDTO();
                            obj.Value = item.Value == "46" ? "cp_" + item.Value : item.Value;
                            obj.Text = item.Text;
                            obj.Prefijo = idEmpresaCP.ToString();
                            lstCCPptoAnual.Add(obj);
                        }

                        int idEmpresaARR = (int)EmpresaEnum.Arrendadora;
                        foreach (var item in lstCCPptoAnual_ARR)
                        {
                            obj = new ComboDTO();
                            obj.Value = item.Value == "46" ? "arr_" + item.Value : item.Value;
                            obj.Text = item.Text;
                            obj.Prefijo = idEmpresaARR.ToString();
                            lstCCPptoAnual.Add(obj);
                        }
                        #endregion
                    }
                    #endregion
                }
                else
                {
                    #region SE OBTIENE LOS CC QUE TIENE ASIGNADO EL USUARIO
                    // SE VERIFICA SI ES CP O ARR
                    if (idEmpresa == 1)
                    {
                        lstCCPptoAnual = _context.Select<ComboDTO>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Construplan,
                            consulta = @"SELECT t1.idCC AS Value, CONVERT(NVARCHAR(50), t2.cc) + ' - ' + CONVERT(NVARCHAR(50), t2.descripcion) AS Text  
		                                    FROM tblAF_CtrlPptalOfCe_UsuarioRelCC AS t1
		                                    INNER JOIN tblP_CC AS t2 ON t1.idCC = t2.id
		                                    INNER JOIN tblAF_CtrlPptalOfCe_PptoAnual AS t3 ON t3.idCC = t1.idCC
			                                    WHERE t1.idUsuario = @idUsuario AND t1.registroActivo = @registroActivo AND anio = @anio AND t3.autorizado = @autorizado",
                            parametros = new { idUsuario = (int)vSesiones.sesionUsuarioDTO.id, registroActivo = true, anio = anio, autorizado = 1 }
                        }).ToList();

                        foreach (var item in lstCCPptoAnual)
                        {
                            item.Prefijo = idEmpresa.ToString();
                        }
                    }
                    else if (idEmpresa == 2)
                    {
                        lstCCPptoAnual = _context.Select<ComboDTO>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Arrendadora,
                            consulta = @"SELECT t1.idCC AS Value, CONVERT(NVARCHAR(50), t2.areaCuenta) + ' ' + CONVERT(NVARCHAR(50), t2.descripcion) AS Text  
		                                    FROM tblAF_CtrlPptalOfCe_UsuarioRelCC AS t1
		                                    INNER JOIN tblP_CC AS t2 ON t1.idCC = t2.id
		                                    INNER JOIN tblAF_CtrlPptalOfCe_PptoAnual AS t3 ON t3.idCC = t1.idCC
			                                    WHERE t1.idUsuario = @idUsuario AND t1.registroActivo = @registroActivo AND anio = @anio AND t3.autorizado = @autorizado
                                                    GROUP BY t1.idCC, t2.areaCuenta, t2.descripcion",
                            parametros = new { idUsuario = (int)vSesiones.sesionUsuarioDTO.id, registroActivo = true, anio = anio, autorizado = 1 }
                        }).ToList();

                        foreach (var item in lstCCPptoAnual)
                        {
                            item.Prefijo = idEmpresa.ToString();
                        }
                    }
                    else
                    {
                        lstCCPptoAnual = _context.Select<ComboDTO>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Construplan,
                            consulta = @"SELECT t1.idCC AS Value, CONVERT(NVARCHAR(50), t2.cc) + ' - ' + CONVERT(NVARCHAR(50), t2.descripcion) AS Text  
		                                    FROM tblAF_CtrlPptalOfCe_UsuarioRelCC AS t1
		                                    INNER JOIN tblP_CC AS t2 ON t1.idCC = t2.id
		                                    INNER JOIN tblAF_CtrlPptalOfCe_PptoAnual AS t3 ON t3.idCC = t1.idCC
			                                    WHERE t1.idUsuario = @idUsuario AND t1.registroActivo = @registroActivo AND anio = @anio AND t3.autorizado = @autorizado",
                            parametros = new { idUsuario = (int)vSesiones.sesionUsuarioDTO.id, registroActivo = true, anio = anio, autorizado = 1 }
                        }).ToList();

                        foreach (var item in lstCCPptoAnual)
                        {
                            item.Prefijo = idEmpresa.ToString();
                        }

                        var lstCCPptoAnualArrendadora = _context.Select<ComboDTO>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Arrendadora,
                            consulta = @"SELECT t1.idCC AS Value, CONVERT(NVARCHAR(50), t2.areaCuenta) + ' ' + CONVERT(NVARCHAR(50), t2.descripcion) AS Text  
		                                    FROM tblAF_CtrlPptalOfCe_UsuarioRelCC AS t1
		                                    INNER JOIN tblP_CC AS t2 ON t1.idCC = t2.id
		                                    INNER JOIN tblAF_CtrlPptalOfCe_PptoAnual AS t3 ON t3.idCC = t1.idCC
			                                    WHERE t1.idUsuario = @idUsuario AND t1.registroActivo = @registroActivo AND anio = @anio AND t3.autorizado = @autorizado
                                                    GROUP BY t1.idCC, t2.areaCuenta, t2.descripcion",
                            parametros = new { idUsuario = (int)vSesiones.sesionUsuarioDTO.id, registroActivo = true, anio = anio, autorizado = 1 }
                        }).ToList();

                        foreach (var item in lstCCPptoAnualArrendadora)
                        {
                            item.Prefijo = idEmpresa.ToString();
                        }

                        lstCCPptoAnual.AddRange(lstCCPptoAnualArrendadora);
                    }
                    #endregion
                }

                resultado.Add(ITEMS, lstCCPptoAnual.OrderBy(x => x.Text));
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "FillUsuarioRelCCPptosAutorizados", e, AccionEnum.FILLCOMBO, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> FillDivisiones(int anio)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region VALIDACIONES
                if (anio <= 0)
                    throw new Exception("Es necesario indicar el año.");
                #endregion

                #region SE OBTIENE LOS CC DEL PRESUPUESTO DEL AÑO SELECCIONADO
                int idus = vSesiones.sesionUsuarioDTO.id;
                List<int> lstCCPptoRelAnio = _context.tblAF_CtrlPptalOfCe_UsuarioRelCC.Where(e => e.idUsuario == idus && e.registroActivo).Select(e => e.idCC).ToList();
                #endregion

                #region SE OBTIENE LAS DIVISIONES ID EN BASE A LOS CC QUE CONTENGA Y SEAN IGUALES A LAS DEL USUARIO LOGUEADO
                List<int> lstDivisionesID = _context.tblM_KBDivisionDetalle.Where(w => lstCCPptoRelAnio.Contains(w.acID) && w.estatus).Select(s => s.divisionID).ToList();
                #endregion

                #region PPTOS AUTORIZADOS
                List<int> lstCCAutorizados = _context.tblAF_CtrlPptalOfCe_PptoAnual.Where(w => w.autorizado && w.registroActivo).Select(s => s.idCC).ToList();
                #endregion

                #region SE OBTIENE LAS DIVISIONES
                List<tblM_KBDivision> lstDivisiones = _context.tblM_KBDivision.Where(w => lstDivisionesID.Contains(w.id) && lstCCAutorizados.Contains(w.id) && w.estatus).ToList();
                List<ComboDTO> lstDivisionesDTO = new List<ComboDTO>();
                foreach (var item in lstDivisiones)
                {
                    ComboDTO obj = new ComboDTO();
                    obj.Value = item.id.ToString();
                    obj.Text = item.division;
                    lstDivisionesDTO.Add(obj);
                }
                #endregion

                resultado.Add(ITEMS, lstDivisionesDTO);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "FillDivisiones", e, AccionEnum.FILLCOMBO, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> FillCCRelDivisiones(int anio, int divisionID)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region VALIDACIONES
                if (anio <= 0)
                    throw new Exception("Es necesario indicar el año.");
                #endregion

                #region SE OBTIENE LOS CC DEL PRESUPUESTO DEL AÑO SELECCIONADO
                List<int> lstCCPptoRelAnio = _context.Select<int>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"SELECT idCC FROM tblAF_CtrlPptalOfCe_PptoAnual WHERE anio = @anio AND registroActivo = @registroActivo",
                    parametros = new { anio = anio, registroActivo = true }
                }).ToList();
                #endregion

                #region SE OBTIENEN LOS CC AUTORIZADOS DEL USUARIO EN SESSION

                int idus = vSesiones.sesionUsuarioDTO.id;
                List<int> lstCCAutorizados = _context.tblAF_CtrlPptalOfCe_UsuarioRelCC.Where(e => e.idUsuario == idus && e.registroActivo).Select(e => e.idCC).ToList();

                #endregion

                #region SE OBTIENE LAS DIVISIONES ID EN BASE A LOS CC QUE CONTENGA Y SEAN IGUALES A LAS DEL USUARIO LOGUEADO
                List<int> lstCCID = _context.tblM_KBDivisionDetalle.Where(w => lstCCAutorizados.Contains(w.acID) && (divisionID != 0 ? w.divisionID == divisionID : true) && w.estatus).Select(s => s.acID).ToList();
                #endregion

                #region SE OBTIENE LOS CC
                List<tblP_CC> lstCC = _context.tblP_CC.Where(w => lstCCID.Contains(w.id) && w.estatus).ToList();
                List<ComboDTO> lstCCDTO = new List<ComboDTO>();
                foreach (var item in lstCC)
                {
                    ComboDTO obj = new ComboDTO();
                    obj.Value = item.id.ToString();

                    // SE VERIFICA SI LA EMPRESA ES CP O ARR
                    if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                        obj.Text = string.Format("{0}{1}{2}", item.cc, " - ", item.descripcion);
                    else if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                        obj.Text = string.Format("{0}{1}{2}", item.areaCuenta, " ", item.descripcion);

                    lstCCDTO.Add(obj);
                }
                #endregion

                resultado.Add(ITEMS, lstCCDTO);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "FillCCRelDivisiones", e, AccionEnum.FILLCOMBO, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> FillConceptosRelCtasInsumos()
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region FILL CBO
                List<ComboDTO> lstConceptos = _context.Select<ComboDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"SELECT id AS Value, concepto AS Text FROM tblAF_CtrlPptalOfCe_CatCtaInsumos WHERE registroActivo = @registroActivo ORDER BY concepto",
                    parametros = new { registroActivo = true }
                });

                resultado.Add(ITEMS, lstConceptos);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "FillConceptosRelCtasInsumos", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }
        #endregion

        #region CATÁLOGOS
        #region AGRUPACIONES
        public Dictionary<string, object> GetAgrupaciones(tblAF_CtrllPptalOfCe_CatAgrupaciones objFiltro)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                var agrupaciones = _context.tblAF_CtrllPptalOfCe_CatAgrupaciones.Where(x => (objFiltro.anio > 0 ? x.anio == objFiltro.anio : true) &&
                    (objFiltro.idCC > 0 ? x.idCC == objFiltro.idCC : true) && x.registroActivo).ToList().Select(x => new
                {
                    id = x.id,
                    nombre = x.nombre,
                    anio = x.anio,
                    idCC = x.idCC
                }).ToList();
                var combo = agrupaciones.Select(x => new ComboDTO
                {
                    Value = x.id.ToString(),
                    Text = string.Format(@"{0}", x.nombre)
                }).OrderBy(x => x.Text).ToList();

                resultado.Add("data", agrupaciones);
                resultado.Add("dataCombo", combo);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetAgrupaciones", e, AccionEnum.CONSULTA, 0, null);
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }

            return resultado;
        }

        public Dictionary<string, object> GuardarNuevaAgrupacion(tblAF_CtrllPptalOfCe_CatAgrupaciones agrupacion)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    agrupacion.idUsuarioCreacion = vSesiones.sesionUsuarioDTO.id;
                    agrupacion.fechaCreacion = DateTime.Now;
                    agrupacion.idUsuarioModificacion = 0;
                    agrupacion.fechaModificacion = null;
                    agrupacion.registroActivo = true;

                    _context.tblAF_CtrllPptalOfCe_CatAgrupaciones.Add(agrupacion);
                    _context.SaveChanges();

                    dbContextTransaction.Commit();
                    SaveBitacora(3, (int)AccionEnum.AGREGAR, agrupacion.id, JsonUtils.convertNetObjectToJson(agrupacion));
                    resultado.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GuardarNuevaAgrupacion", e, AccionEnum.AGREGAR, 0, agrupacion);
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                }
            }

            return resultado;
        }

        public Dictionary<string, object> EditarAgrupacion(tblAF_CtrllPptalOfCe_CatAgrupaciones agrupacion)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    var agrupacionSIGOPLAN = _context.tblAF_CtrllPptalOfCe_CatAgrupaciones.FirstOrDefault(x => x.id == agrupacion.id);

                    agrupacionSIGOPLAN.nombre = agrupacion.nombre;
                    agrupacionSIGOPLAN.idUsuarioModificacion = vSesiones.sesionUsuarioDTO.id;
                    agrupacionSIGOPLAN.fechaModificacion = DateTime.Now;

                    _context.SaveChanges();

                    dbContextTransaction.Commit();
                    SaveBitacora(3, (int)AccionEnum.ACTUALIZAR, agrupacion.id, JsonUtils.convertNetObjectToJson(agrupacion));
                    resultado.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "EditarAgrupacion", e, AccionEnum.ACTUALIZAR, 0, agrupacion);
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                }
            }

            return resultado;
        }

        public Dictionary<string, object> EliminarAgrupacion(tblAF_CtrllPptalOfCe_CatAgrupaciones agrupacion)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    var agrupacionSIGOPLAN = _context.tblAF_CtrllPptalOfCe_CatAgrupaciones.FirstOrDefault(x => x.id == agrupacion.id);

                    agrupacionSIGOPLAN.registroActivo = false;
                    agrupacionSIGOPLAN.idUsuarioModificacion = vSesiones.sesionUsuarioDTO.id;
                    agrupacionSIGOPLAN.fechaModificacion = DateTime.Now;
                    _context.SaveChanges();

                    dbContextTransaction.Commit();
                    SaveBitacora(3, (int)AccionEnum.ELIMINAR, agrupacion.id, JsonUtils.convertNetObjectToJson(agrupacion));
                    resultado.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "EliminarAgrupacion", e, AccionEnum.ELIMINAR, 0, agrupacion);
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                }
            }

            return resultado;
        }
        #endregion

        #region PRESUPUESTO ANUAL
        public Dictionary<string, object> GetPresupuestosAnuales()
        {
            try
            {
                var listaCentroCostoEK = _contextEnkontrol.Select<dynamic>(getEnkontrolEnumADM(), new OdbcConsultaDTO() { consulta = @"SELECT * FROM cc" });

                var presupuestos = _context.tblAF_CtrlPptalOfCe_PptoAnual.Where(x => x.registroActivo).ToList().Select(x => new
                {
                    id = x.id,
                    idCC = x.idCC,
                    cc = x.cc,
                    ccDesc =
                        listaCentroCostoEK.Where(y => (string)y.cc == x.cc).Select(z => (string)z.cc + " - " + (string)z.descripcion).FirstOrDefault() != null ?
                        listaCentroCostoEK.Where(y => (string)y.cc == x.cc).Select(z => (string)z.cc + " - " + (string)z.descripcion).FirstOrDefault() : "0 - OFICINAS CENTRALES",
                    anio = x.anio,
                    nombrePresupuesto = x.nombrePresupuesto,
                    terminado = x.terminado,
                    autorizado = x.autorizado,
                    autorizante1 = x.autorizante1,
                    autorizante2 = x.autorizante2,
                    autorizante3 = x.autorizante3,
                    fechaAutorizacion1 = x.fechaAutorizacion1,
                    fechaAutorizacion2 = x.fechaAutorizacion2,
                    fechaAutorizacion3 = x.fechaAutorizacion3
                }).ToList();

                var combo = presupuestos.Select(x => new ComboDTO
                {
                    Value = x.id.ToString(),
                    Text = string.Format(@"{0}", x.nombrePresupuesto)
                }).OrderBy(x => x.Text).ToList();

                resultado.Add("data", presupuestos);
                resultado.Add("dataCombo", combo);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetPresupuestosAnuales", e, AccionEnum.CONSULTA, 0, null);
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }

            return resultado;
        }

        public Dictionary<string, object> GuardarNuevoPresupuestoAnual(tblAF_CtrlPptalOfCe_PptoAnual presupuesto)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    presupuesto.idUsuarioCreacion = vSesiones.sesionUsuarioDTO.id;
                    presupuesto.fechaCreacion = DateTime.Now;
                    presupuesto.idUsuarioModificacion = 0;
                    presupuesto.fechaModificacion = null;
                    presupuesto.registroActivo = true;

                    _context.tblAF_CtrlPptalOfCe_PptoAnual.Add(presupuesto);
                    _context.SaveChanges();

                    dbContextTransaction.Commit();
                    SaveBitacora(3, (int)AccionEnum.AGREGAR, presupuesto.id, JsonUtils.convertNetObjectToJson(presupuesto));
                    resultado.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GuardarNuevoPresupuestoAnual", e, AccionEnum.AGREGAR, 0, presupuesto);
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                }
            }

            return resultado;
        }

        public Dictionary<string, object> EditarPresupuestoAnual(tblAF_CtrlPptalOfCe_PptoAnual presupuesto)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    var presupuestoSIGOPLAN = _context.tblAF_CtrlPptalOfCe_PptoAnual.FirstOrDefault(x => x.id == presupuesto.id);

                    presupuestoSIGOPLAN.cc = presupuesto.cc;
                    presupuestoSIGOPLAN.anio = presupuesto.anio;
                    presupuestoSIGOPLAN.nombrePresupuesto = presupuesto.nombrePresupuesto;
                    presupuestoSIGOPLAN.idUsuarioModificacion = vSesiones.sesionUsuarioDTO.id;
                    presupuestoSIGOPLAN.fechaModificacion = DateTime.Now;

                    _context.SaveChanges();

                    dbContextTransaction.Commit();
                    SaveBitacora(3, (int)AccionEnum.ACTUALIZAR, presupuesto.id, JsonUtils.convertNetObjectToJson(presupuesto));
                    resultado.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "EditarPresupuestoAnual", e, AccionEnum.ACTUALIZAR, 0, presupuesto);
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                }
            }

            return resultado;
        }

        public Dictionary<string, object> EliminarPresupuestoAnual(tblAF_CtrlPptalOfCe_PptoAnual presupuesto)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    var presupuestoSIGOPLAN = _context.tblAF_CtrlPptalOfCe_PptoAnual.FirstOrDefault(x => x.id == presupuesto.id);

                    presupuestoSIGOPLAN.registroActivo = false;
                    presupuestoSIGOPLAN.idUsuarioModificacion = vSesiones.sesionUsuarioDTO.id;
                    presupuestoSIGOPLAN.fechaModificacion = DateTime.Now;
                    _context.SaveChanges();

                    dbContextTransaction.Commit();
                    SaveBitacora(3, (int)AccionEnum.ELIMINAR, presupuesto.id, JsonUtils.convertNetObjectToJson(presupuesto));
                    resultado.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "EliminarPresupuestoAnual", e, AccionEnum.ELIMINAR, 0, presupuesto);
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                }
            }

            return resultado;
        }
        #endregion

        #region AUTORIZANTES
        public Dictionary<string, object> GetAutorizantes(tblAF_CtrllPptalOfCe_CatAutorizantes objDTO)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                string strQuery = string.Empty;
                strQuery += @"SELECT t1.id, t3.cc + ' - ' + t3.descripcion AS cc, t1.idAutorizante, t2.nombre + ' ' + t2.apellidoPaterno + ' ' + t2.apellidoMaterno AS nombreAutorizante, t1.descripcion, t1.cc AS idCC, t1.idRow
	                                    FROM tblAF_CtrllPptalOfCe_CatAutorizantes AS t1
	                                    INNER JOIN tblP_Usuario AS t2 ON t1.idAutorizante = t2.id
	                                    INNER JOIN tblP_CC AS t3 ON t1.cc = t3.id
		                                    WHERE t1.registroActivo = @registroActivo AND t2.estatus = @estatus AND t3.estatus = @estatus";
                if (!string.IsNullOrEmpty(objDTO.cc))
                    strQuery += " AND t1.cc = @idCC";

                List<AutorizanteDTO> lstAutorizantes = new List<AutorizanteDTO>();

                if (!string.IsNullOrEmpty(objDTO.cc))
                {
                    lstAutorizantes = _context.Select<AutorizanteDTO>(new DapperDTO
                    {
                        baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                        consulta = strQuery,
                        parametros = new { registroActivo = true, estatus = true, idCC = objDTO.cc }
                    }).ToList();
                }
                else
                {
                    lstAutorizantes = _context.Select<AutorizanteDTO>(new DapperDTO
                    {
                        baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                        consulta = strQuery,
                        parametros = new { registroActivo = true, estatus = true }
                    }).ToList();
                }

                resultado.Add(ITEMS, lstAutorizantes);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetAutorizantes", e, AccionEnum.CONSULTA, 0, objDTO);
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }
            return resultado;
        }
        public Dictionary<string, object> FillCCAutorizantes()
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region FILL CC
                List<ComboDTO> lstCC = _context.Select<ComboDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"SELECT id AS Value, cc + ' - ' + descripcion AS Text FROM tblP_CC WHERE estatus = @estatus",
                    parametros = new { estatus = 1 }
                });

                resultado.Add(ITEMS, lstCC);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "FillCbo", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }
        public Dictionary<string, object> AddEditAutorizantes(tblAF_CtrllPptalOfCe_CatAutorizantes objDTO)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                resultado = new Dictionary<string, object>();
                try
                {
                    tblAF_CtrllPptalOfCe_CatAutorizantes obj = _context.tblAF_CtrllPptalOfCe_CatAutorizantes.Where(r => r.id == objDTO.id).FirstOrDefault();
                    tblAF_CtrllPptalOfCe_CatAutorizantes objExiste = _context.tblAF_CtrllPptalOfCe_CatAutorizantes.Where(r => r.idAutorizante == objDTO.idAutorizante && r.cc == objDTO.cc && (r.registroActivo)).FirstOrDefault();
                    if (objExiste == null)
                    {
                        if (obj != null)
                        {
                            #region SE ACTUALIZA EL AUTORIZANTE
                            obj.idAutorizante = objDTO.idAutorizante;
                            obj.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                            obj.fechaModificacion = DateTime.Now;
                            _context.SaveChanges();
                            #endregion

                            resultado.Add(ITEMS, "");
                            resultado.Add(SUCCESS, true);
                            resultado.Add(MESSAGE, "Se ha actualizado con éxito.");
                        }
                        else
                        {
                            #region SE REGISTRA EL AUTORIZANTE
                            // SE VERIFICA SI EL USUARIO YA TIENE ASIGNADO EL CC SELECCIONADO
                            int idCC = !string.IsNullOrEmpty(objDTO.cc) ? Convert.ToInt32(objDTO.cc) : 0;
                            //int tieneAsignadoCC = _context.tblAF_CtrlPptalOfCe_UsuarioRelCC.Where(w => w.idUsuario == objDTO.idAutorizante && w.idCC == idCC && w.registroActivo).Count();
                            //if (tieneAsignadoCC <= 0)
                            //{
                            obj = new tblAF_CtrllPptalOfCe_CatAutorizantes();
                            obj.idRow = objDTO.idRow;
                            obj.cc = objDTO.cc;
                            obj.descripcion = objDTO.descripcion;
                            obj.idAutorizante = objDTO.idAutorizante;
                            obj.idUsuarioModificacion = 0;
                            obj.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                            obj.fechaCreacion = DateTime.Now;
                            obj.fechaModificacion = null;
                            obj.registroActivo = true;
                            _context.tblAF_CtrllPptalOfCe_CatAutorizantes.Add(obj);
                            _context.SaveChanges();

                            #region SE REGISTRA EL CC ASIGNADO DEL USUARIO SELECCIONADO
                            // SE VERIFICA SI EL USUARIO YA TIENE ASIGNADO ESTE CC O SI TIENE ACCESO A TODOS LOS CC
                            List<tblAF_CtrlPptalOfCe_UsuarioRelCC> objUsuarioRelCC = _context.tblAF_CtrlPptalOfCe_UsuarioRelCC.Where(w => w.idUsuario == objDTO.idAutorizante).ToList();

                            if (objUsuarioRelCC.Count() <= 0)
                            {
                                bool todosLosCC = objUsuarioRelCC.Where(w => w.idUsuario == objDTO.idAutorizante && w.todosCC && w.registroActivo).Select(s => s.todosCC).FirstOrDefault();
                                int ccAsignado = objUsuarioRelCC.Where(w => w.idUsuario == objDTO.idAutorizante && w.idCC == idCC && w.registroActivo).Count();
                                if (!todosLosCC && ccAsignado <= 0)
                                {
                                    tblAF_CtrlPptalOfCe_UsuarioRelCC objCE = new tblAF_CtrlPptalOfCe_UsuarioRelCC();
                                    objCE.idUsuario = objDTO.idAutorizante;
                                    objCE.idCC = idCC;
                                    objCE.todosCC = false;
                                    objCE.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                                    objCE.fechaCreacion = DateTime.Now;
                                    objCE.registroActivo = true;
                                    _context.tblAF_CtrlPptalOfCe_UsuarioRelCC.Add(objCE);
                                    _context.SaveChanges();
                                }
                            }
                            #endregion
                            //}

                            resultado.Add(ITEMS, "");
                            resultado.Add(MESSAGE, "Se ha registrado con éxito.");
                            resultado.Add(SUCCESS, true);
                            #endregion
                        }
                    }
                    else
                    {
                        resultado.Add(ITEMS, "");
                        resultado.Add(MESSAGE, "ya existe un usuario registrado para este centro de costo.");
                        resultado.Add(SUCCESS, false);
                    }


                    dbContextTransaction.Commit();

                    SaveBitacora(3, (int)AccionEnum.AGREGAR, objDTO.id, JsonUtils.convertNetObjectToJson(objDTO));
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "AddEditAutorizantes", e, AccionEnum.AGREGAR, 0, objDTO);
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                }
            }
            return resultado;
        }

        public Dictionary<string, object> DeleteAutorizantes(tblAF_CtrllPptalOfCe_CatAutorizantes objDTO)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                resultado = new Dictionary<string, object>();
                try
                {
                    tblAF_CtrllPptalOfCe_CatAutorizantes obj = _context.tblAF_CtrllPptalOfCe_CatAutorizantes.Where(r => r.id == objDTO.id).FirstOrDefault();
                    if (obj != null)
                    {
                        obj.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                        obj.fechaModificacion = DateTime.Now;
                        obj.registroActivo = false;
                        _context.SaveChanges();
                    }

                    SaveBitacora(3, (int)AccionEnum.ELIMINAR, objDTO.id, JsonUtils.convertNetObjectToJson(objDTO));
                    resultado.Add(ITEMS, "");
                    resultado.Add(SUCCESS, true);
                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "DeleteAutorizantes", e, AccionEnum.ELIMINAR, 0, objDTO);
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                }
            }
            return resultado;
        }

        public Dictionary<string, object> GetAutorizantesCombo()
        {
            resultado = new Dictionary<string, object>();
            try
            {
                var item = _context.tblP_Usuario.Where(r => r.estatus).ToList().Select(y => new ComboDTO
                {
                    Value = y.id.ToString(),
                    Text = y.nombre + " " + y.apellidoPaterno + " " + y.apellidoMaterno
                }).ToList();

                resultado.Add(ITEMS, item);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetAutorizantesCombo", e, AccionEnum.ELIMINAR, 0, new object());
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }
            return resultado;
        }

        public Dictionary<string, object> GetCCAutorizantes()
        {
            resultado = new Dictionary<string, object>();
            try
            {
                List<ComboDTO> lstCC = _context.Select<ComboDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"SELECT cc AS Value, cc + ' - ' + descripcion AS Text FROM tblP_CC WHERE estatus = @estatus",
                    parametros = new { estatus = 1 }
                });
                resultado.Add(ITEMS, lstCC);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetCCAutorizantes", e, AccionEnum.ELIMINAR, 0, new object());
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }
            return resultado;
        }
        #endregion
        #endregion

        private EnkontrolEnum getEnkontrolEnumADM()
        {
            var baseDatos = new EnkontrolEnum();

            if (vSesiones.sesionEmpresaActual == 1)
            {
                baseDatos = EnkontrolEnum.CplanProd;
            }
            else if (vSesiones.sesionEmpresaActual == 2)
            {
                baseDatos = EnkontrolEnum.ArrenProd;
            }
            else
            {
                throw new Exception("Empresa distinta a Construplan y Arrendadora");
            }

            return baseDatos;
        }

        #region AUTORIZACIONES
        public Dictionary<string, object> GetPresupuestosAEvaluar(string cc, int year, bool? estatus)
        {
            try
            {
                int idCC = !string.IsNullOrEmpty(cc) ? Convert.ToInt32(cc) : 0;

                #region VERIFICA SI EL CC YA NOTIFICO SU PPTO ANUAL
                tblAF_CtrlPptalOfCe_PptoAnual objPptoAnual = _context.tblAF_CtrlPptalOfCe_PptoAnual.Where(w => w.idCC == idCC && w.anio == year).FirstOrDefault();
                if (objPptoAnual == null)
                    throw new Exception("Ocurrió un error al obtener los resultados.");

                if (!objPptoAnual.notificado)
                    throw new Exception("El CC seleccionado, no ha notificado el presupuesto del año seleccionado.");
                #endregion

                var usuarioSesion = vSesiones.sesionUsuarioDTO.id;
                var presupuestos = _context.tblAF_CtrlPptalOfCe_PptoAnual
                    .Where(x =>
                        x.notificado &&
                        x.idCC == idCC &&
                        x.anio == year &&
                        (estatus.HasValue ? estatus.Value == x.autorizado : true) &&
                        x.registroActivo)
                    .Select(x => new PresupuestoAutorizacionDTO
                    {
                        id = x.id,
                        cc = x.cc,
                        year = x.anio,
                        nombrePresupuesto = x.nombrePresupuesto,
                        estatus = x.autorizado,
                        elUsuarioPuedeAutorizar = false,
                        //autorizantePendiente = x.autorizante1 == 0 ? 1 : x.autorizante2 == 0 ? 2 : x.autorizante3 == 0 ? 3 : 0
                        autorizantePendiente = x.autorizante2 == 0 ? 2 : x.autorizante3 == 0 ? 3 : 0
                    }).ToList();

                #region SE OBTIENE DESCRIPCION DEL CC
                List<tblP_CC> lstCC = _context.tblP_CC.Where(w => w.estatus).ToList();
                foreach (var item in presupuestos)
                {
                    // SE VERIFICA SI ES CP O ARR
                    if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                        item.cc = lstCC.Where(w => w.cc == item.cc).Select(s => s.cc + " - " + s.descripcion).FirstOrDefault();
                    else if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                        item.cc = lstCC.Where(w => w.areaCuenta == item.cc).Select(s => s.areaCuenta + " " + s.descripcion).FirstOrDefault();
                }
                #endregion

                foreach (var presupuesto in presupuestos)
                {
                    //
                    if (presupuesto.autorizado)
                    {
                        presupuesto.elUsuarioPuedeAutorizar = false;
                    }
                    else
                    {
                        if (presupuesto.autorizantePendiente == 2)
                        {
                            var autorizante = _context.tblP_Usuario.First(x => x.id == (int)AutorizantesEnum.segundoAutorizanteID);
#if DEBUG
                            autorizante = _context.tblP_Usuario.First(x => x.id == (int)AutorizantesEnum.segundoAutorizanteID);
#endif
                            if (vSesiones.sesionUsuarioDTO.id == autorizante.id)
                            {
                                presupuesto.elUsuarioPuedeAutorizar = true;
                            }
                        }
                        if (presupuesto.autorizantePendiente == 3)
                        {
                            var autorizante = _context.tblP_Usuario.First(x => x.id == (int)AutorizantesEnum.tercerAutorizanteID);
#if DEBUG
                            autorizante = _context.tblP_Usuario.First(x => x.id == (int)AutorizantesEnum.tercerAutorizanteID);
#endif
                            if (vSesiones.sesionUsuarioDTO.id == autorizante.id)
                            {
                                presupuesto.elUsuarioPuedeAutorizar = true;
                            }
                        }
                    }
                }

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, presupuestos);
            }
            catch (Exception ex)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetPresupuestosAEvaluar", ex, AccionEnum.CONSULTA, 0, new { cc = cc, year = year, estatus = estatus });

                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);
            }

            return resultado;
        }

        public Dictionary<string, object> Autorizar(int presupuestoId)
        {
            using (var transaccion = _context.Database.BeginTransaction())
            {
                try
                {
                    var usuarioSesion = vSesiones.sesionUsuarioDTO.id;
                    var presupuesto = _context.tblAF_CtrlPptalOfCe_PptoAnual.First(x => x.id == presupuestoId);
                    var idUsuario = vSesiones.sesionUsuarioDTO.id;

                    if (presupuesto.autorizante2 == 0)
                    {
                        if ((int)AutorizantesEnum.segundoAutorizanteID == idUsuario)
                        {
                            presupuesto.autorizante2 = idUsuario;
                            presupuesto.fechaAutorizacion2 = DateTime.Now;
                        }
                        else
                            throw new Exception("No cuenta con permisos para realizar esta autorización");
                    }
                    else if (presupuesto.autorizante3 == 0)
                    {
                        if ((int)AutorizantesEnum.tercerAutorizanteID == idUsuario)
                        {
                            presupuesto.autorizante3 = idUsuario;
                            presupuesto.fechaAutorizacion3 = DateTime.Now;
                            presupuesto.autorizado = true;
                        }
                        else
                            throw new Exception("No cuenta con permisos para realizar esta autorización");
                    }

                    presupuesto.fechaModificacion = DateTime.Now;
                    presupuesto.idUsuarioModificacion = usuarioSesion;
                    _context.SaveChanges();

                    tblAF_CtrlAutorizacionPresupuesto autorizacionPresupuesto = new tblAF_CtrlAutorizacionPresupuesto();
                    autorizacionPresupuesto.presupuestoId = presupuesto.id;
                    autorizacionPresupuesto.autorizanteId = usuarioSesion;
                    autorizacionPresupuesto.firma = "firmaDePrueba";
                    autorizacionPresupuesto.registroActivo = true;
                    autorizacionPresupuesto.fechaCreacion = DateTime.Now;
                    autorizacionPresupuesto.fechaModificacion = DateTime.Now;
                    autorizacionPresupuesto.usuarioCreacionId = usuarioSesion;
                    autorizacionPresupuesto.usuarioModificacionId = usuarioSesion;

                    _context.tblAF_CtrlAutorizacionPresupuesto.Add(autorizacionPresupuesto);
                    _context.SaveChanges();

                    #region SE VERIFICA SI EL CC ES DE SERVICIO
                    int esServicio = _context.tblAF_CtrlPptalOfCe_CCRelServicios.Where(w => w.idCC == presupuesto.idCC).Count();
                    #endregion

                    tblP_Alerta objAlerta = new tblP_Alerta();
                    if (presupuesto.autorizado)
                    {
                        var ccDescripcion = _context.tblP_CC.First(x => x.id == presupuesto.idCC);
                        var responsablesCC = _context.tblAF_CtrlPptalOfCe_UsuarioRelCC.Where(x => x.registroActivo && x.idCC == presupuesto.idCC);
                        var correos = responsablesCC.Select(m => m.usuario.correo).ToList();
#if DEBUG
                        correos = new List<string> { "omar.nunez@construplan.com.mx" };
#endif

                        #region SE CONSTRUYE TABLA AUTORIZANTES
                        List<FirmantesDTO> lstAutorizantes = new List<FirmantesDTO>();
                        FirmantesDTO objAutorizante = new FirmantesDTO();
                        if (esServicio == 1)
                        {
                            objAutorizante = new FirmantesDTO();
                            objAutorizante.nombreCompleto = "GAYTAN LIZAMA JOSE MANUEL";
                            objAutorizante.Fecha = presupuesto.fechaAutorizacion2.ToString();
                            objAutorizante.estatus = "AUTORIZADO";
                            lstAutorizantes.Add(objAutorizante);

                            // SE ELIMINA ALERTA A JOSE GAYTAN
                            objAlerta = new tblP_Alerta();
                            objAlerta = _context.tblP_Alerta.Where(w => w.userRecibeID == (int)AutorizantesEnum.segundoAutorizanteID && w.objID == presupuestoId && w.sistemaID == (int)SistemasEnum.ADMINISTRACION_FINANZAS && !w.visto).FirstOrDefault();
                            if (objAlerta != null)
                            {
                                objAlerta.visto = true;
                                _context.SaveChanges();
                            }
                        }

                        objAutorizante = new FirmantesDTO();
                        objAutorizante.nombreCompleto = "REINA CECCO GERARDO";
                        objAutorizante.Fecha = presupuesto.fechaAutorizacion3.ToString();
                        objAutorizante.estatus = "AUTORIZADO";
                        lstAutorizantes.Add(objAutorizante);

                        // SE ELIMINA ALERTA A GERARDO REINA
                        objAlerta = new tblP_Alerta();
                        objAlerta = _context.tblP_Alerta.Where(w => w.userRecibeID == (int)AutorizantesEnum.tercerAutorizanteID && w.objID == presupuestoId && w.sistemaID == (int)SistemasEnum.ADMINISTRACION_FINANZAS && !w.visto).FirstOrDefault();
                        if (objAlerta != null)
                        {
                            objAlerta.visto = true;
                            _context.SaveChanges();
                        }
                        #endregion

                        #region SE ENVIA CORREO
                        string tablaAutorizantes = GlobalUtils.tablaFirmantesCtrlPptal(lstAutorizantes);
                        if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                        {
                            GlobalUtils.sendEmail(string.Format("{0}: CONTROL PRESUPUESTAL", PersonalUtilities.GetNombreEmpresa()),
                                "Buen día, el CC " + presupuesto.cc + " ha sido autorizado su presupuesto<br><br>" + tablaAutorizantes +
                                "<br><br>Favor de ingresar a <b>sigoplan.construplan.com.mx</b> al menú:<br>Construplan > Admin y Finanzas > Control presupuestal > Gestión.<br>" +
                                "Se informa que este es un correo autogenerado por el sistema SIGOPLAN (<a href='http://sigoplan.construplan.com.mx/'>http://sigoplan.construplan.com.mx</a>). No es necesario dar una respuesta. Gracias.", correos);
                        }
                        else if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                        {

                            GlobalUtils.sendEmail(string.Format("{0}: CONTROL PRESUPUESTAL", PersonalUtilities.GetNombreEmpresa()),
                                "Buen día, el AC " + presupuesto.cc + " ha sido autorizado su presupuesto<br><br>" + tablaAutorizantes +
                                "<br><br>Favor de ingresar a <b>sigoplan.construplan.com.mx</b> al menú:<br>Construplan > Admin y Finanzas > Control presupuestal > Gestión.<br>" +
                                "Se informa que este es un correo autogenerado por el sistema SIGOPLAN (<a href='http://sigoplan.construplan.com.mx/'>http://sigoplan.construplan.com.mx</a>). No es necesario dar una respuesta. Gracias.", correos);
                        }
                        #endregion
                    }
                    else
                    {
                        var autorizantePendiente = _context.tblP_Usuario.Where(x => x.id == (int)AutorizantesEnum.tercerAutorizanteID).ToList();
                        var correos = autorizantePendiente.Select(x => x.correo).ToList();
#if DEBUG
                        correos = new List<string> { "omar.nunez@construplan.com.mx" };
#endif
                        var ccDescripcion = _context.tblP_CC.First(x => x.id == presupuesto.idCC);

                        #region SE CONSTRUYE TABLA AUTORIZANTES
                        List<FirmantesDTO> lstAutorizantes = new List<FirmantesDTO>();
                        FirmantesDTO objAutorizante = new FirmantesDTO();
                        if (esServicio == 1)
                        {
                            objAutorizante = new FirmantesDTO();
                            objAutorizante.nombreCompleto = "GAYTAN LIZAMA JOSE MANUEL";
                            objAutorizante.Fecha = presupuesto.fechaAutorizacion2.ToString();
                            objAutorizante.estatus = "AUTORIZADO";
                            lstAutorizantes.Add(objAutorizante);

                            // SE ELIMINA ALERTA A JOSE GAYTAN
                            objAlerta = new tblP_Alerta();
                            objAlerta = _context.tblP_Alerta.Where(w => w.userRecibeID == (int)AutorizantesEnum.segundoAutorizanteID && w.objID == presupuestoId && w.sistemaID == (int)SistemasEnum.ADMINISTRACION_FINANZAS && !w.visto).FirstOrDefault();
                            if (objAlerta != null)
                            {
                                objAlerta.visto = true;
                                _context.SaveChanges();
                            }
                        }

                        objAutorizante = new FirmantesDTO();
                        objAutorizante.nombreCompleto = "REINA CECCO GERARDO";
                        objAutorizante.Fecha = presupuesto.fechaAutorizacion3.ToString();
                        objAutorizante.estatus = "PENDIENTE";
                        lstAutorizantes.Add(objAutorizante);
                        #endregion

                        #region SE REGISTRA ALERTA PARA GERARDO REINA PARA PROCEDER A AUTORIZAR
                        objAlerta = new tblP_Alerta();
                        objAlerta.userEnviaID = (int)vSesiones.sesionUsuarioDTO.id;
                        objAlerta.tipoAlerta = 2;
                        objAlerta.userRecibeID = (int)AutorizantesEnum.tercerAutorizanteID;
                        objAlerta.objID = presupuesto.id;
                        objAlerta.sistemaID = (int)SistemasEnum.ADMINISTRACION_FINANZAS;
                        objAlerta.visto = false;
                        objAlerta.url = "/Administrativo/CtrlPptalOficinasCentrales/Autorizaciones?anio=" + presupuesto.anio + "&idCC=" + presupuesto.idCC + "";
                        objAlerta.obj = null;

                        if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                            objAlerta.msj = string.Format("{0}{1}", "GESTIÓN: CTRL PRESUPUESTAL - ", presupuesto.cc);
                        else if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                        {
                            tblP_CC objCC = _context.tblP_CC.Where(w => w.id == presupuesto.idCC).FirstOrDefault();
                            if (objCC != null)
                                objAlerta.msj = string.Format("{0}{1}", "GESTIÓN: CTRL PRESUPUESTAL - ", objCC.areaCuenta);
                            else
                                objAlerta.msj = string.Format("{0}{1}", "GESTIÓN: CTRL PRESUPUESTAL");
                        }

                        objAlerta.documentoID = 0;
                        objAlerta.moduloID = 0;
                        _context.tblP_Alerta.Add(objAlerta);
                        _context.SaveChanges();
                        #endregion

                        #region SE ENVIA CORREO
                        string tablaAutorizantes = GlobalUtils.tablaFirmantesCtrlPptal(lstAutorizantes);
                        if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                        {
                            GlobalUtils.sendEmail(string.Format("{0}: CONTROL PRESUPUESTAL", PersonalUtilities.GetNombreEmpresa()),
                                "Buen día, el CC " + presupuesto.cc + " ha sido autorizado por su primer autorizante.<br><br>" + tablaAutorizantes +
                                "<br><br>Favor de ingresar a <b>sigoplan.construplan.com.mx</b> al menú:<br>Construplan > Admin y Finanzas > Control presupuestal > Gestión.<br>" +
                                "Se informa que este es un correo autogenerado por el sistema SIGOPLAN (<a href='http://sigoplan.construplan.com.mx/'>http://sigoplan.construplan.com.mx</a>). No es necesario dar una respuesta. Gracias.", correos);
                        }
                        else if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                        {
                            GlobalUtils.sendEmail(string.Format("{0}: CONTROL PRESUPUESTAL", PersonalUtilities.GetNombreEmpresa()),
                                "Buen día, el AC " + presupuesto.cc + " ha sido autorizado por su primer autorizante.<br><br>" + tablaAutorizantes +
                                "<br><br>Favor de ingresar a <b>sigoplan.construplan.com.mx</b> al menú:<br>Construplan > Admin y Finanzas > Control presupuestal > Gestión.<br>" +
                                "Se informa que este es un correo autogenerado por el sistema SIGOPLAN (<a href='http://sigoplan.construplan.com.mx/'>http://sigoplan.construplan.com.mx</a>). No es necesario dar una respuesta. Gracias.", correos);
                        }
                        #endregion
                    }

                    transaccion.Commit();

                    resultado.Add(SUCCESS, true);
                }
                catch (Exception ex)
                {
                    transaccion.Rollback();

                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "Autorizar", ex, AccionEnum.CONSULTA, 0, presupuestoId);

                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, ex.Message);
                }
            }

            return resultado;
        }

        public Dictionary<string, object> RechazarPpto(int idPptoAnual, string comentarioRechazo)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                resultado = new Dictionary<string, object>();
                try
                {
                    #region SE RECHAZA EL PPTO DEL AÑO Y CC SELECCIONADOS.
                    tblAF_CtrlPptalOfCe_PptoAnual objRechazar = _context.tblAF_CtrlPptalOfCe_PptoAnual.Where(w => w.id == idPptoAnual).FirstOrDefault();
                    if (objRechazar == null)
                        throw new Exception("Ocurrió un error al rechazar el presupuesto.");

                    objRechazar.notificado = false;
                    objRechazar.autorizado = false;
                    objRechazar.autorizante1 = 0;
                    objRechazar.fechaAutorizacion1 = null;
                    objRechazar.autorizante2 = 0;
                    objRechazar.fechaAutorizacion2 = null;
                    objRechazar.autorizante3 = 0;
                    objRechazar.fechaAutorizacion3 = null;
                    objRechazar.comentarioRechazo = comentarioRechazo;
                    objRechazar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                    objRechazar.fechaModificacion = DateTime.Now;
                    _context.SaveChanges();
                    #endregion

                    #region SE ENVIA CORREO A LOS RESPONSABLES DEL CC DE QUE EL PPTO FUE RECHAZADO
                    List<int> lstUsuarioID = _context.tblAF_CtrlPptalOfCe_UsuarioRelCC.Where(w => w.idCC == objRechazar.idCC).Select(s => s.idUsuario).ToList();
                    List<string> lstCorreos = _context.tblP_Usuario.Where(w => lstUsuarioID.Contains(w.id)).Select(s => s.correo).ToList();
                    List<string> lstCorreosEnviar = new List<string>();
                    foreach (var item in lstCorreos)
                    {
                        if (!string.IsNullOrEmpty(item))
                            lstCorreosEnviar.Add(item);
                    }

#if DEBUG
                    #region IF DEBUG - SE ENVIA CORREO A OMAR.NUNEZ
                    lstCorreosEnviar = new List<string>();
                    lstCorreosEnviar.Add("omar.nunez@construplan.com.mx");
                    #endregion
#endif
                    #region SE VERIFICA SI EL CC ES DE SERVICIOS
                    List<FirmantesDTO> lstAutorizantes = new List<FirmantesDTO>();
                    FirmantesDTO objAutorizante = new FirmantesDTO();
                    int esServicio = _context.tblAF_CtrlPptalOfCe_CCRelServicios.Where(w => w.idCC == objRechazar.idCC && w.registroActivo).Count();
                    if ((int)vSesiones.sesionUsuarioDTO.id == (int)AutorizantesEnum.segundoAutorizanteID)
                    {
                        if (esServicio == 1)
                        {
                            objAutorizante = new FirmantesDTO();
                            objAutorizante.nombreCompleto = "GAYTAN LIZAMA JOSE MANUEL";
                            objAutorizante.Fecha = DateTime.Now.ToString();
                            objAutorizante.estatus = "RECHAZADO";
                            lstAutorizantes.Add(objAutorizante);
                        }
                    }
                    else
                    {
                        if (esServicio == 1)
                        {
                            objAutorizante = new FirmantesDTO();
                            objAutorizante.nombreCompleto = "GAYTAN LIZAMA JOSE MANUEL";
                            objAutorizante.Fecha = DateTime.Now.ToString();
                            objAutorizante.estatus = "AUTORIZADO";
                            lstAutorizantes.Add(objAutorizante);
                        }

                        objAutorizante = new FirmantesDTO();
                        objAutorizante.nombreCompleto = "REINA CECCO GERARDO";
                        objAutorizante.Fecha = DateTime.Now.ToString();
                        objAutorizante.estatus = "RECHAZADO";
                        lstAutorizantes.Add(objAutorizante);
                    }
                    #endregion

                    string tablaAutorizantes = GlobalUtils.tablaFirmantesCtrlPptal(lstAutorizantes);
                    if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                    {
                        GlobalUtils.sendEmail(string.Format("{0}: CONTROL PRESUPUESTAL - {1}", PersonalUtilities.GetNombreEmpresa(), objRechazar.cc),
                            "Buen día, el CC " + objRechazar.cc + " ha sido rechazado su presupuesto.<br><br>" + tablaAutorizantes +
                            "<br><br>Favor de ingresar a <b>sigoplan.construplan.com.mx</b> al menú:<br>Construplan > Admin y Finanzas > Control presupuestal > Gestión.<br>" +
                            "Se informa que este es un correo autogenerado por el sistema SIGOPLAN (<a href='http://sigoplan.construplan.com.mx/'>http://sigoplan.construplan.com.mx</a>). No es necesario dar una respuesta. Gracias.", lstCorreosEnviar);
                    }
                    else if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                    {
                        GlobalUtils.sendEmail(string.Format("{0}: CONTROL PRESUPUESTAL - {1}", PersonalUtilities.GetNombreEmpresa(), objRechazar.cc),
                            "Buen día, el AC " + objRechazar.cc + " ha sido rechazado su presupuesto.<br><br>" + tablaAutorizantes +
                            "<br><br>Favor de ingresar a <b>sigoplan.construplan.com.mx</b> al menú:<br>Construplan > Admin y Finanzas > Control presupuestal > Gestión.<br>" +
                            "Se informa que este es un correo autogenerado por el sistema SIGOPLAN (<a href='http://sigoplan.construplan.com.mx/'>http://sigoplan.construplan.com.mx</a>). No es necesario dar una respuesta. Gracias.", lstCorreosEnviar);
                    }
                    #endregion

                    #region SE ELIMINA ALERTA
                    tblP_Alerta objAlerta = _context.tblP_Alerta.Where(w => w.objID == idPptoAnual && w.sistemaID == (int)SistemasEnum.ADMINISTRACION_FINANZAS && !w.visto).FirstOrDefault();
                    if (objAlerta != null)
                    {
                        objAlerta.visto = true;
                        _context.SaveChanges();
                    }
                    #endregion

                    resultado.Add(MESSAGE, "Se ha rechazado con éxito el presupuesto.");
                    resultado.Add(SUCCESS, true);
                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "RechazarPpto", e, AccionEnum.CONSULTA, idPptoAnual, 0);
                    resultado.Add(MESSAGE, e.Message);
                    resultado.Add(SUCCESS, false);
                }
            }
            return resultado;
        }

        public Dictionary<string, object> GetDetalleAutorizacion(int presupuestoId)
        {
            try
            {
                var presupuesto = _context.tblAF_CtrlPptalOfCe_PptoAnual.First(x => x.id == presupuestoId);
                string cc = presupuesto.idCC.ToString();
                //var autorizantes = _context.tblAF_CtrllPptalOfCe_CatAutorizantes.Where(x => x.cc == cc && x.registroActivo).ToList();
                //var autorizantePendiente = presupuesto.autorizante1 == 0 ? 1 : presupuesto.autorizante2 == 0 ? 2 : presupuesto.autorizante3 == 0 ? 3 : 0;

                var ccServicios = _context.tblAF_CtrlPptalOfCe_CCRelServicios.Where(x => x.registroActivo).Select(x => x.idCC).ToList();
                var detalleAutorizantes = new List<DetalleAutorizacionDTO>();
                if (ccServicios.Contains(presupuesto.idCC))
                {
                    for (int i = 1; i <= 2; i++)
                    {
                        var detAutorizante = new DetalleAutorizacionDTO();
                        detAutorizante.numero = i;
                        detAutorizante.nombre = i == 1 ? "JOSE MANUEL GAYTAN LIZAMA" : "GERARDO REINA CECCO";
                        detAutorizante.estatus = presupuesto.autorizado ? true : i == 1 ? presupuesto.autorizante2 > 0 : presupuesto.autorizante3 > 0;
                        detAutorizante.tipoAutorizante = i == 1 ? "SERVICIOS" : "DIRECCIÓN";
                        detalleAutorizantes.Add(detAutorizante);
                    }
                }
                else
                {
                    var detAutorizante = new DetalleAutorizacionDTO();
                    detAutorizante.numero = 1;
                    detAutorizante.nombre = "GERARDO REINA CECCO";
                    detAutorizante.estatus = presupuesto.autorizado ? true : presupuesto.autorizante3 > 0;
                    detAutorizante.tipoAutorizante = "DIRECCIÓN";
                    detalleAutorizantes.Add(detAutorizante);
                }

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, detalleAutorizantes);
            }
            catch (Exception ex)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetDetalleAutorizacion", ex, AccionEnum.CONSULTA, 0, presupuestoId);

                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);
            }

            return resultado;
        }
        #endregion

        #region PPTO INICIAL
        public Dictionary<string, object> GetPptosIniciales()
        {
            resultado = new Dictionary<string, object>();
            try
            {
                List<PptoInicialDTO> lstPptosIniciales = _context.Select<PptoInicialDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"SELECT id, anio, nombrePresupuesto, fechaInicio, fechaFin, fechaInicioLimite, fechaFinLimite 
                                        FROM tblAF_CtrlPptalOfCe_PptoInicial 
                                            WHERE registroActivo = @registroActivo",
                    parametros = new { registroActivo = true }
                }).ToList();

                resultado.Add("lstPptosIniciales", lstPptosIniciales);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetPptosIniciales", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> CrearEditarPptoInicial(PptoInicialDTO objDTO)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                resultado = new Dictionary<string, object>();
                try
                {
                    tblAF_CtrlPptalOfCe_PptoInicial objCE = new tblAF_CtrlPptalOfCe_PptoInicial();

                    #region SE OBTIENE LISTADO DE CC ACTIVOS
                    List<tblP_CC> lstCC = _context.tblP_CC.Where(w => w.estatus).ToList();
                    #endregion

                    if (objDTO.id > 0)
                    {
                        #region ACTUALIZAR PPTO INICIAL
                        objCE = new tblAF_CtrlPptalOfCe_PptoInicial();
                        objCE = _context.tblAF_CtrlPptalOfCe_PptoInicial.Where(w => w.id == objDTO.id).FirstOrDefault();
                        if (objCE == null)
                            throw new Exception("Ocurrió un error al actualizar el ppto inicial.");

                        objCE.anio = objDTO.anio;
                        objCE.nombrePresupuesto = !string.IsNullOrEmpty(objDTO.nombrePresupuesto) ? objDTO.nombrePresupuesto.Trim() : string.Empty;
                        objCE.fechaInicio = objDTO.fechaInicio;
                        objCE.fechaFin = objDTO.fechaFin;
                        objCE.fechaInicioLimite = objDTO.fechaInicioLimite;
                        objCE.fechaFinLimite = objDTO.fechaFinLimite;
                        objCE.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                        objCE.fechaModificacion = DateTime.Now;
                        _context.SaveChanges();
                        #endregion

                        #region SE CREA DETALLE PPTO INICIAL POR CADA CC ACTIVO
                        List<tblAF_CtrlPptalOfCe_PptoAnual> lstCEPptoDet = new List<tblAF_CtrlPptalOfCe_PptoAnual>();
                        List<tblAF_CtrlPptalOfCe_PptoAnual> lstPptosAnuales = _context.tblAF_CtrlPptalOfCe_PptoAnual.Where(w => w.pptoInicialID == objDTO.id && w.registroActivo).ToList();
                        foreach (var item in lstCC)
                        {
                            tblAF_CtrlPptalOfCe_PptoAnual obj = lstPptosAnuales.Where(w => w.idCC == item.id).FirstOrDefault();
                            if (obj != null)
                            {
                                //SE VERIFICA SI ES CP O ARR
                                if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                                {
                                    string cc = item.cc;
                                    if (!string.IsNullOrEmpty(cc))
                                        obj.cc = cc.Trim();
                                }
                                else if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                                {
                                    string areaCuenta = item.areaCuenta;
                                    if (!string.IsNullOrEmpty(areaCuenta))
                                        obj.cc = areaCuenta.Trim();
                                }

                                obj.anio = objDTO.anio;
                                obj.nombrePresupuesto = !string.IsNullOrEmpty(objDTO.nombrePresupuesto) ? objDTO.nombrePresupuesto.Trim() : string.Empty;
                                obj.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                                obj.fechaModificacion = DateTime.Now;
                                lstCEPptoDet.Add(obj);
                            }
                        }
                        _context.SaveChanges();

                        resultado.Add(MESSAGE, "Se ha actualizado con éxito.");
                        #endregion
                    }
                    else
                    {
                        #region SE VERIFICA SI EL AÑO YA SE ENCUENTRA REGISTRADO
                        if (objDTO.anio <= 0)
                            throw new Exception("Es necesario indiciar el año.");

                        int existeAnio = _context.tblAF_CtrlPptalOfCe_PptoInicial.Where(w => w.anio == objDTO.anio && w.registroActivo).Count();
                        if (existeAnio > 0)
                            throw new Exception("Ya se encuentra un ppto con este año.");
                        #endregion

                        #region GUARDAR PPTO INICIAL
                        objCE = new tblAF_CtrlPptalOfCe_PptoInicial();
                        objCE.anio = objDTO.anio;
                        objCE.nombrePresupuesto = !string.IsNullOrEmpty(objDTO.nombrePresupuesto) ? objDTO.nombrePresupuesto.Trim() : string.Empty;
                        objCE.fechaInicio = objDTO.fechaInicio;
                        objCE.fechaFin = objDTO.fechaFin;
                        objCE.fechaInicioLimite = objDTO.fechaInicioLimite;
                        objCE.fechaFinLimite = objDTO.fechaFinLimite;
                        objCE.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                        objCE.fechaCreacion = DateTime.Now;
                        objCE.registroActivo = true;
                        _context.tblAF_CtrlPptalOfCe_PptoInicial.Add(objCE);
                        _context.SaveChanges();

                        #region SE OBTIENE ID DEL PPTO INICIAL REGISTRADO
                        int idPptoInicial = _context.tblAF_CtrlPptalOfCe_PptoInicial.OrderByDescending(o => o.id).Select(s => s.id).FirstOrDefault();
                        #endregion

                        #region SE CREA DETALLE PPTO INICIAL POR CADA CC ACTIVO
                        List<tblAF_CtrlPptalOfCe_PptoAnual> lstCEPptoDet = new List<tblAF_CtrlPptalOfCe_PptoAnual>();
                        foreach (var item in lstCC)
                        {
                            tblAF_CtrlPptalOfCe_PptoAnual obj = new tblAF_CtrlPptalOfCe_PptoAnual();
                            obj.pptoInicialID = idPptoInicial;
                            obj.idCC = item.id;

                            //SE VERIFICA SI ES CP O ARR
                            if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                            {
                                string cc = item.cc;
                                if (!string.IsNullOrEmpty(cc))
                                    obj.cc = cc.Trim();
                            }
                            else if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                            {
                                string areaCuenta = item.areaCuenta;
                                if (!string.IsNullOrEmpty(areaCuenta))
                                    obj.cc = areaCuenta.Trim();
                            }

                            obj.anio = objDTO.anio;
                            obj.nombrePresupuesto = !string.IsNullOrEmpty(objDTO.nombrePresupuesto) ? objDTO.nombrePresupuesto.Trim() : string.Empty;
                            obj.notificado = false;
                            obj.terminado = false;
                            obj.autorizado = false;
                            obj.autorizante1 = (int)AutorizacionEnum.rechazado;
                            obj.autorizante2 = (int)AutorizacionEnum.rechazado;
                            obj.autorizante3 = (int)AutorizacionEnum.rechazado;
                            obj.fechaAutorizacion1 = null;
                            obj.fechaAutorizacion2 = null;
                            obj.fechaAutorizacion3 = null;
                            obj.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                            obj.fechaCreacion = DateTime.Now;
                            obj.registroActivo = true;
                            lstCEPptoDet.Add(obj);
                        }
                        _context.tblAF_CtrlPptalOfCe_PptoAnual.AddRange(lstCEPptoDet);
                        _context.SaveChanges();
                        #endregion

                        resultado.Add(MESSAGE, "Se ha registrado con éxito.");
                        #endregion
                    }

                    resultado.Add(SUCCESS, true);
                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "CrearEditarPptoInicial", e, objDTO.id > 0 ? AccionEnum.ACTUALIZAR : AccionEnum.AGREGAR, objDTO.id > 0 ? objDTO.id : 0, 0);
                    resultado.Add(MESSAGE, e.Message);
                    resultado.Add(SUCCESS, false);
                }
            }
            return resultado;
        }

        public Dictionary<string, object> EliminarPptoInicial(int idPptoInicial)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                resultado = new Dictionary<string, object>();
                try
                {
                    #region SE ELIMINA EL PPTO INICIAL SELECCIONADO
                    tblAF_CtrlPptalOfCe_PptoInicial objEliminar = _context.tblAF_CtrlPptalOfCe_PptoInicial.Where(w => w.id == idPptoInicial).FirstOrDefault();
                    if (objEliminar == null)
                        throw new Exception("Ocurrió un error al eliminar el ppto inicial.");

                    objEliminar.registroActivo = false;
                    objEliminar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                    objEliminar.fechaModificacion = DateTime.Now;
                    _context.SaveChanges();
                    #endregion

                    #region SE ELIMINAN LOS DETALLES DE LOS PPTOS INICIALES
                    List<tblAF_CtrlPptalOfCe_PptoAnual> objEliminarPptoAnual = _context.tblAF_CtrlPptalOfCe_PptoAnual.Where(w => w.pptoInicialID == idPptoInicial && w.registroActivo).ToList();
                    foreach (var item in objEliminarPptoAnual)
                    {
                        item.registroActivo = false;
                        item.fechaModificacion = DateTime.Now;
                        item.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                    }
                    if (objEliminarPptoAnual != null)
                        _context.SaveChanges();

                    #region SE ELIMINAN LAS CAPTURAS
                    List<tblAF_CtrlPptalOfCe_CapPptos> objEliminarCapturas = _context.tblAF_CtrlPptalOfCe_CapPptos.Where(w => w.anio == objEliminar.anio && w.registroActivo).ToList();
                    foreach (var item in objEliminarCapturas)
                    {
                        item.registroActivo = false;
                        item.fechaModificacion = DateTime.Now;
                        item.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                    }
                    if (objEliminarCapturas != null)
                        _context.SaveChanges();
                    #endregion

                    resultado.Add(MESSAGE, "Se ha eliminado con éxito.");
                    #endregion

                    resultado.Add(SUCCESS, true);
                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "EliminarPptoInicial", e, AccionEnum.CONSULTA, 0, 0);
                    resultado.Add(MESSAGE, e.Message);
                    resultado.Add(SUCCESS, false);
                }
            }
            return resultado;
        }

        public Dictionary<string, object> GetCCRelPpto(int idPptoInicial)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region SE OBTIENE LISTADO DE CC RELACIONADO AL PPTO SELECCIONADO

                // SE VERIFICA SI ES CP O ARR
                List<CapPptoDTO> lstCCRelPpto = new List<CapPptoDTO>();
                if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                {
                    lstCCRelPpto = _context.Select<CapPptoDTO>(new DapperDTO
                    {
                        baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                        consulta = @"SELECT CONVERT(NVARCHAR(50), t1.cc) + ' - ' + CONVERT(NVARCHAR(50), t2.descripcion) AS cc
		                                    FROM tblAF_CtrlPptalOfCe_PptoAnual AS t1
		                                    INNER JOIN tblP_CC AS t2 ON t1.idCC = t2.id
			                                    WHERE t2.estatus = @estatus AND t1.pptoInicialID = @pptoInicialID",
                        parametros = new { estatus = 1, pptoInicialID = idPptoInicial }
                    }).ToList();
                }
                else if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                {
                    lstCCRelPpto = _context.Select<CapPptoDTO>(new DapperDTO
                    {
                        baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                        consulta = @"SELECT CONVERT(NVARCHAR(50), t2.areaCuenta) + ' ' + CONVERT(NVARCHAR(50), t2.descripcion) AS cc
		                                    FROM tblAF_CtrlPptalOfCe_PptoAnual AS t1
		                                    INNER JOIN tblP_CC AS t2 ON t1.idCC = t2.id
			                                    WHERE t2.estatus = @estatus AND t1.pptoInicialID = @pptoInicialID",
                        parametros = new { estatus = 1, pptoInicialID = idPptoInicial }
                    }).ToList();
                }
                #endregion

                resultado.Add("lstCCRelPpto", lstCCRelPpto);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetCCRelPpto", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> FillCCNoRelPpto()
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region SE OBTIENE LISTADO DE CC QUE NO SE ENCUENTREN RELACIONADOS AL PPTO
                List<ComboDTO> lstCbo = _context.Select<ComboDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"SELECT id AS Value, nombre as Text FROM tabla WHERE registroActivo = @registroActivo",
                    parametros = new { registroActivo = true }
                });

                resultado.Add(ITEMS, lstCbo);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "FillCbo", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> AgregarCC(int idPptoInicial, int idCC)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                resultado = new Dictionary<string, object>();
                try
                {
                    tblAF_CtrlPptalOfCe_PptoInicial objPpto = _context.tblAF_CtrlPptalOfCe_PptoInicial.Where(w => w.id == idPptoInicial).FirstOrDefault();

                    #region SE REGISTRA CC AL PPTO SELECCIONADO
                    tblAF_CtrlPptalOfCe_PptoAnual objCE = new tblAF_CtrlPptalOfCe_PptoAnual();
                    objCE.pptoInicialID = idPptoInicial;
                    objCE.idCC = idCC;
                    objCE.cc = _context.tblP_CC.Where(w => w.id == idCC).Select(s => s.cc).FirstOrDefault();
                    objCE.anio = objPpto.anio;
                    objCE.nombrePresupuesto = objPpto.nombrePresupuesto;
                    objCE.notificado = false;
                    objCE.terminado = false;
                    objCE.autorizado = false;
                    objCE.autorizante1 = 0;
                    objCE.autorizante2 = 0;
                    objCE.autorizante3 = 0;
                    objCE.fechaAutorizacion1 = null;
                    objCE.fechaAutorizacion2 = null;
                    objCE.fechaAutorizacion3 = null;
                    objCE.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                    objCE.fechaCreacion = DateTime.Now;
                    objCE.registroActivo = true;
                    _context.tblAF_CtrlPptalOfCe_PptoAnual.Add(objCE);
                    _context.SaveChanges();
                    resultado.Add(MESSAGE, "Se ha registrado con éxito.");
                    #endregion

                    resultado.Add(SUCCESS, true);
                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "AgregarCC", e, AccionEnum.AGREGAR, 0, 0);
                    resultado.Add(MESSAGE, e.Message);
                    resultado.Add(SUCCESS, false);
                }
            }
            return resultado;
        }

        public Dictionary<string, object> FillCboCCFaltantes(int idPptoInicial)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region FILL CBO
                List<tblP_CC> lstCC = _context.tblP_CC.Where(w => w.estatus).ToList();
                List<int> lstCCID = new List<int>();
                foreach (var item in lstCC)
                {
                    lstCCID.Add(item.id);
                }

                List<tblAF_CtrlPptalOfCe_PptoAnual> lstCCRelPptoAnual = _context.tblAF_CtrlPptalOfCe_PptoAnual.Where(w => w.pptoInicialID == idPptoInicial && w.registroActivo).ToList();
                List<int> lstCCRelPptoAnualID = new List<int>();
                foreach (var item in lstCCRelPptoAnual)
                {
                    lstCCRelPptoAnualID.Add(item.idCC);
                }

                List<tblP_CC> lstCCFaltantes = lstCC.Where(w => !lstCCRelPptoAnualID.Contains(w.id)).ToList();
                List<ComboDTO> lstCboDTO = new List<ComboDTO>();
                foreach (var item in lstCCFaltantes)
                {
                    ComboDTO obj = new ComboDTO();
                    obj.Value = item.id.ToString();

                    // SE VERIFICA SI ES CP O ARR
                    if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                        obj.Text = string.Format("{0}{1}{2}", item.cc, " - ", item.descripcion);
                    else if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                        obj.Text = string.Format("{0}{1}{2}", item.areaCuenta, " ", item.descripcion);

                    lstCboDTO.Add(obj);
                }

                resultado.Add(ITEMS, lstCboDTO);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "FillCboCCFaltantes", e, AccionEnum.FILLCOMBO, idPptoInicial, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }
        #endregion

        #region REPORTE CONTABLE
        public Dictionary<string, object> GetSumaCapturasContable(CapPptoDTO objDTO)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                int estatusPpto = 0;
                var registroCentroCostoSIGOPLAN = _context.tblP_CC.FirstOrDefault(x => x.id == objDTO.idCC);

                #region VALIDACIONES
                if (objDTO.anio > 0 || objDTO.idCC > 0)
                {
                    if (objDTO.anio <= 0)
                        throw new Exception("Es necesario indicar un año.");

                    if (objDTO.idCC <= 0)
                        throw new Exception("Es necesario indicar un CC.");
                }
                #endregion

                #region SE VERIFICA SI EL DETALLE DEL PPTO (AÑO + CC) ESTE APROBADO
                estatusPpto = _context.tblAF_CtrlPptalOfCe_PptoAnual.Where(w => w.anio == objDTO.anio && w.idCC == objDTO.idCC && w.autorizado).Count();
#if DEBUG
                if (estatusPpto <= 0)
                    throw new Exception("El ppto solicitado, no se encuentra autorizado.");
#else
                if (estatusPpto <= 0)
                    throw new Exception("El ppto solicitado, no se encuentra autorizado.");
#endif
                #endregion

                #region SE OBTIENE CAPTURAS (AÑO + CC)
                List<CapPptoDTO> lstCapturas = _context.Select<CapPptoDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    #region CONSULTA INCLUYENDO LAS ADITIVASs
                    consulta = @"
                                                SELECT
                                                    t1.id, t1.cc, t1.idAgrupacion, t1.idConcepto, t1.importeEnero, t1.importeFebrero, t1.importeMarzo, t1.importeAbril, t1.importeMayo, 
                                                    t1.importeJunio, t1.importeJulio, t1.importeAgosto, t1.importeSeptiembre, t1.importeOctubre, t1.importeNoviembre, 
                                                    t1.importeDiciembre, t1.importeTotal, t1.anio, t1.idResponsable, t2.nombre AS agrupacion, t3.concepto AS concepto,
                                                    t4.nombre + ' ' + t4.apellidoPaterno + ' ' + t4.apellidoMaterno AS responsable,
                                                    (SELECT SUM(ad.importeEnero) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeEneroAditiva,
                    	                            (SELECT SUM(ad.importeFebrero) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeFebreroAditiva,
                    	                            (SELECT SUM(ad.importeMarzo) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeMarzoAditiva,
                    	                            (SELECT SUM(ad.importeAbril) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeAbrilAditiva,
                    	                            (SELECT SUM(ad.importeMayo) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeMayoAditiva,
                    	                            (SELECT SUM(ad.importeJunio) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeJunioAditiva,
                    	                            (SELECT SUM(ad.importeJulio) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeJulioAditiva,
                    	                            (SELECT SUM(ad.importeAgosto) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeAgostoAditiva,
                    	                            (SELECT SUM(ad.importeSeptiembre) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeSeptiembreAditiva,
                    	                            (SELECT SUM(ad.importeOctubre) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeOctubreAditiva,
                    	                            (SELECT SUM(ad.importeNoviembre) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeNoviembreAditiva,
                    	                            (SELECT SUM(ad.importeDiciembre) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeDiciembreAditiva
                                                FROM tblAF_CtrlPptalOfCe_CapPptos AS t1
                    			                    INNER JOIN tblAF_CtrllPptalOfCe_CatAgrupaciones AS t2 ON t2.id = t1.idAgrupacion
                    			                    INNER JOIN tblAF_CtrlPptalOfCe_CatConceptos AS t3 ON t3.id = t1.idConcepto
                    			                    INNER JOIN tblP_Usuario AS t4 ON t4.id = t1.idResponsable
                    				            WHERE t1.registroActivo = @registroActivo AND t1.cc = @cc AND t1.anio = @anio",
                    #endregion
                    parametros = new { registroActivo = true, cc = objDTO.idCC, anio = objDTO.anio }
                }).ToList();
                #endregion

                #region SE OBTIENE LISTADO DE AGRUPACIONES
                List<tblAF_CtrllPptalOfCe_CatAgrupaciones> lstAgrupaciones = _context.tblAF_CtrllPptalOfCe_CatAgrupaciones.Where(w => w.registroActivo).OrderBy(o => o.nombre).ToList();
                #endregion

                #region SE OBTIENE LISTADO DE CONCEPTOS
                List<tblAF_CtrlPptalOfCe_CatConceptos> lstConceptos = _context.tblAF_CtrlPptalOfCe_CatConceptos.Where(w => w.registroActivo).OrderBy(o => o.concepto).ToList();
                #endregion

                List<CapPptoDTO> lstSumaCapturas = new List<CapPptoDTO>();
                CapPptoDTO obj = new CapPptoDTO();
                List<int> lstConceptosCap = lstCapturas.Select(e => e.idConcepto).ToList();
                List<int> lstAgrupacionCap = lstCapturas.Select(e => e.idAgrupacion).ToList();

                var lstConceptosID = lstConceptos.Select(cx => cx.idConcepto).ToList();

                var where_cuentas_string = "";
                var listaCuentasTotal = _context.tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas.Where(x => x.registroActivo && lstConceptosID.Contains(x.idConcepto)).ToList();

                foreach (var cuenta in listaCuentasTotal)
                {
                    where_cuentas_string += string.Format(@"(cta = {0} AND scta = {1} AND sscta = {2})", cuenta.cta, cuenta.scta, cuenta.sscta);

                    if (cuenta != listaCuentasTotal.Last())
                    {
                        where_cuentas_string += " OR ";
                    }
                }

                if (where_cuentas_string != "")
                {
                    where_cuentas_string = " AND (" + where_cuentas_string + ")";
                }


                var polizasTotal = new List<sc_movpolDTO>();
                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                {
                    polizasTotal = _contextEnkontrol.Select<sc_movpolDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                    {
                        consulta = string.Format(@"
                            SELECT
                                *
                            FROM sc_movpol
                            WHERE year = ? AND cc = ? {0}", where_cuentas_string),
                        parametros = new List<OdbcParameterDTO>() {
                            new OdbcParameterDTO() { nombre = "year", tipo = OdbcType.Numeric, valor = objDTO.anio },
                            new OdbcParameterDTO() { nombre = "cc", tipo = OdbcType.VarChar, valor = registroCentroCostoSIGOPLAN.cc }
                        }
                    });

                    polizasTotal.AddRange(_contextEnkontrol.Select<sc_movpolDTO>(EnkontrolAmbienteEnum.ProdGCPLAN, new OdbcConsultaDTO()
                    {
                        consulta = string.Format(@"
                            SELECT
                                *
                            FROM sc_movpol
                            WHERE year = ? AND cc = ? {0}", where_cuentas_string),
                        parametros = new List<OdbcParameterDTO>() {
                            new OdbcParameterDTO() { nombre = "year", tipo = OdbcType.Numeric, valor = objDTO.anio },
                            new OdbcParameterDTO() { nombre = "cc", tipo = OdbcType.VarChar, valor = registroCentroCostoSIGOPLAN.cc }
                        }
                    }));
                }
                else
                {
                    polizasTotal = _contextEnkontrol.Select<sc_movpolDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                    {
                        consulta = string.Format(@"
                            SELECT
                                *
                            FROM sc_movpol
                            WHERE year = ? AND area = ? AND cuenta_oc = ? {0}", where_cuentas_string),
                        parametros = new List<OdbcParameterDTO>() {
                            new OdbcParameterDTO() { nombre = "year", tipo = OdbcType.Numeric, valor = objDTO.anio },
                            new OdbcParameterDTO() { nombre = "area", tipo = OdbcType.Numeric, valor = registroCentroCostoSIGOPLAN.area },
                            new OdbcParameterDTO() { nombre = "cuenta_oc", tipo = OdbcType.Numeric, valor = registroCentroCostoSIGOPLAN.cuenta }
                        }
                    });
                }



                foreach (var item in lstConceptos)
                {
                    obj = new CapPptoDTO();
                    int existeAgrupacion = lstSumaCapturas.Where(w => w.idAgrupacion == item.idAgrupacion).Count();
                    if (existeAgrupacion <= 0 && lstAgrupacionCap.Contains(item.idAgrupacion))
                    {
                        obj = new CapPptoDTO();
                        obj.idAgrupacion = item.idAgrupacion;
                        obj.concepto = lstAgrupaciones.Where(w => w.id == item.idAgrupacion).Select(s => s.nombre).FirstOrDefault();
                        obj.esAgrupacion = true;
                        lstSumaCapturas.Add(obj);
                    }

                    obj = new CapPptoDTO();
                    obj.cc = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Select(s => s.cc).FirstOrDefault();
                    obj.idAgrupacion = lstAgrupaciones.Where(w => w.id == item.idAgrupacion).Select(s => s.id).FirstOrDefault();
                    obj.idConcepto = item.id;
                    obj.agrupacion = lstAgrupaciones.Where(w => w.id == item.idAgrupacion).Select(s => s.nombre).FirstOrDefault();
                    obj.concepto = item.concepto;
                    #region SUMATORIA CON ADITIVIA
                    obj.importeEnero = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeEnero + s.importeEneroAditiva);
                    obj.importeFebrero = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeFebrero + s.importeFebreroAditiva);
                    obj.importeMarzo = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeMarzo + s.importeMarzoAditiva);
                    obj.importeAbril = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeAbril + s.importeAbrilAditiva);
                    obj.importeMayo = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeMayo + s.importeMayoAditiva);
                    obj.importeJunio = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeJunio + s.importeJunioAditiva);
                    obj.importeJulio = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeJulio + s.importeJulioAditiva);
                    obj.importeAgosto = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeAgosto + s.importeAgostoAditiva);
                    obj.importeSeptiembre = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeSeptiembre + s.importeSeptiembreAditiva);
                    obj.importeOctubre = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeOctubre + s.importeOctubreAditiva);
                    obj.importeNoviembre = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeNoviembre + s.importeNoviembreAditiva);
                    obj.importeDiciembre = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeDiciembre + s.importeDiciembreAditiva);
                    #endregion
                    obj.anio = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Select(s => s.anio).FirstOrDefault();
                    obj.importeTotalConcepto = obj.importeEnero + obj.importeFebrero + obj.importeMarzo +
                                                obj.importeAbril + obj.importeMayo + obj.importeJunio +
                                                obj.importeJulio + obj.importeAgosto + obj.importeSeptiembre +
                                                obj.importeOctubre + obj.importeNoviembre + obj.importeDiciembre;
                    obj.esAgrupacion = false;

                    #region Enkontrol
                    #region String para la consulta de múltiples cta-scta-sscta
                    var listaCuentas = _context.tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas.Where(x => x.registroActivo && x.idConcepto == item.idConcepto).ToList();
                    #endregion

                    List<CapPptoDTO> polizas = new List<CapPptoDTO>();

                    foreach (var cuenta in listaCuentas)
                    {

                        var auxPolizas = polizasTotal.Where(x => x.cta == cuenta.cta && x.scta == cuenta.scta && x.sscta == cuenta.sscta).Select(x => new CapPptoDTO
                        {
                            importeContEnero = x.mes == 1 ? x.monto : 0,
                            importeContFebrero = x.mes == 2 ? x.monto : 0,
                            importeContMarzo = x.mes == 3 ? x.monto : 0,
                            importeContAbril = x.mes == 4 ? x.monto : 0,
                            importeContMayo = x.mes == 5 ? x.monto : 0,
                            importeContJunio = x.mes == 6 ? x.monto : 0,
                            importeContJulio = x.mes == 7 ? x.monto : 0,
                            importeContAgosto = x.mes == 8 ? x.monto : 0,
                            importeContSeptiembre = x.mes == 9 ? x.monto : 0,
                            importeContOctubre = x.mes == 10 ? x.monto : 0,
                            importeContNoviembre = x.mes == 11 ? x.monto : 0,
                            importeContDiciembre = x.mes == 12 ? x.monto : 0,
                            importeContTotalConcepto = x.monto,
                        });
                        polizas.AddRange(auxPolizas);
                    }

                    if (polizas.Count() > 0)
                    {
                        obj.importeContEnero = polizas.Sum(x => x.importeContEnero);
                        obj.importeContFebrero = polizas.Sum(x => x.importeContFebrero);
                        obj.importeContMarzo = polizas.Sum(x => x.importeContMarzo);
                        obj.importeContAbril = polizas.Sum(x => x.importeContAbril);
                        obj.importeContMayo = polizas.Sum(x => x.importeContMayo);
                        obj.importeContJunio = polizas.Sum(x => x.importeContJunio);
                        obj.importeContJulio = polizas.Sum(x => x.importeContJulio);
                        obj.importeContAgosto = polizas.Sum(x => x.importeContAgosto);
                        obj.importeContSeptiembre = polizas.Sum(x => x.importeContSeptiembre);
                        obj.importeContOctubre = polizas.Sum(x => x.importeContOctubre);
                        obj.importeContNoviembre = polizas.Sum(x => x.importeContNoviembre);
                        obj.importeContDiciembre = polizas.Sum(x => x.importeContDiciembre);
                        obj.importeContTotalConcepto = polizas.Sum(x => x.importeContTotalConcepto);
                    }
                    #endregion

                    if (lstConceptosCap.Contains(item.id))
                    {
                        lstSumaCapturas.Add(obj);
                    }

                }

                foreach (var renglon in lstSumaCapturas)
                {
                    if (renglon.esAgrupacion)
                    {
                        var idAgrupación = renglon.idAgrupacion;
                        var renglonesDetalle = lstSumaCapturas.Where(x => !x.esAgrupacion && x.idAgrupacion == idAgrupación).ToList();

                        renglon.importeEnero = renglonesDetalle.Sum(x => x.importeEnero);
                        renglon.importeFebrero = renglonesDetalle.Sum(x => x.importeFebrero);
                        renglon.importeMarzo = renglonesDetalle.Sum(x => x.importeMarzo);
                        renglon.importeAbril = renglonesDetalle.Sum(x => x.importeAbril);
                        renglon.importeMayo = renglonesDetalle.Sum(x => x.importeMayo);
                        renglon.importeJunio = renglonesDetalle.Sum(x => x.importeJunio);
                        renglon.importeJulio = renglonesDetalle.Sum(x => x.importeJulio);
                        renglon.importeAgosto = renglonesDetalle.Sum(x => x.importeAgosto);
                        renglon.importeSeptiembre = renglonesDetalle.Sum(x => x.importeSeptiembre);
                        renglon.importeOctubre = renglonesDetalle.Sum(x => x.importeOctubre);
                        renglon.importeNoviembre = renglonesDetalle.Sum(x => x.importeNoviembre);
                        renglon.importeDiciembre = renglonesDetalle.Sum(x => x.importeDiciembre);
                        renglon.importeTotalConcepto = renglonesDetalle.Sum(x => x.importeTotalConcepto);

                        renglon.importeContEnero = renglonesDetalle.Sum(x => x.importeContEnero);
                        renglon.importeContFebrero = renglonesDetalle.Sum(x => x.importeContFebrero);
                        renglon.importeContMarzo = renglonesDetalle.Sum(x => x.importeContMarzo);
                        renglon.importeContAbril = renglonesDetalle.Sum(x => x.importeContAbril);
                        renglon.importeContMayo = renglonesDetalle.Sum(x => x.importeContMayo);
                        renglon.importeContJunio = renglonesDetalle.Sum(x => x.importeContJunio);
                        renglon.importeContJulio = renglonesDetalle.Sum(x => x.importeContJulio);
                        renglon.importeContAgosto = renglonesDetalle.Sum(x => x.importeContAgosto);
                        renglon.importeContSeptiembre = renglonesDetalle.Sum(x => x.importeContSeptiembre);
                        renglon.importeContOctubre = renglonesDetalle.Sum(x => x.importeContOctubre);
                        renglon.importeContNoviembre = renglonesDetalle.Sum(x => x.importeContNoviembre);
                        renglon.importeContDiciembre = renglonesDetalle.Sum(x => x.importeContDiciembre);
                        renglon.importeContTotalConcepto = renglonesDetalle.Sum(x => x.importeContTotalConcepto);
                    }
                }

                //SIN CATALOGAR
                var catalogoCuentas = new List<string>();

                var capPptos = _context.tblAF_CtrlPptalOfCe_CapPptos
                    .Where(x =>
                        x.cc == objDTO.idCC.ToString() &&
                        x.anio == objDTO.anio &&
                        x.registroActivo).ToList();

                var idConceptosPptos = capPptos.Select(x => x.idConcepto).ToList();

                var catConceptos = _context.tblAF_CtrlPptalOfCe_CatConceptos.Where(x => idConceptosPptos.Contains(x.id)).Select(x => x.idConcepto).ToList();
                var cuentasConcepto = _context.tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas.Where(x => catConceptos.Contains(x.idConcepto)).ToList();

                foreach (var item in cuentasConcepto)
                {
                    catalogoCuentas.Add(item.cta + "-" + item.scta + "-" + item.sscta);
                }

                var query_sinCatalogar = new OdbcConsultaDTO();
                query_sinCatalogar.consulta = string.Format("SELECT DISTINCT CAST(cta as varchar(4)) + '-' + CAST(scta as varchar(4)) + '-' + CAST(sscta as varchar(4)) AS cuenta FROM catcta WHERE scta != 23 AND cta = 5280");
                var cuentasEnkontrol = _contextEnkontrol.Select<CuentasEnkontrolDTO>(vSesiones.sesionAmbienteEnkontrolAdm, query_sinCatalogar);
                if (vSesiones.sesionEmpresaActual == 1) 
                {
                    cuentasEnkontrol.AddRange(_contextEnkontrol.Select<CuentasEnkontrolDTO>(EnkontrolAmbienteEnum.ProdGCPLAN, query_sinCatalogar));
                }

                cuentasEnkontrol.RemoveAll(x => catalogoCuentas.Contains(x.cuenta));

                string where_movpolSinCatalogar = "";
                if (cuentasEnkontrol.Count == 0)
                {
                    where_movpolSinCatalogar = "1 = 2";
                }
                else
                {
                    where_movpolSinCatalogar = string.Format("(CAST(cta as varchar(4)) + '-' + CAST(scta as varchar(4)) + '-' + CAST(sscta as varchar(4))) IN {0}", cuentasEnkontrol.Select(x => x.cuenta).ToList().ToParamInValue());
                }

                var query_movpolSinCatalogar = new OdbcConsultaDTO();
                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                {
                    query_movpolSinCatalogar.consulta = string.Format(
                    @"SELECT
                        mes,
                        sum(monto) AS suma
                    FROM
                        sc_movpol
                    WHERE
                        year = ? AND
                        cc = ? AND
                        {0}
                    GROUP BY mes", where_movpolSinCatalogar);
                    query_movpolSinCatalogar.parametros.Add(new OdbcParameterDTO
                    {
                        nombre = "year",
                        tipo = OdbcType.Int,
                        valor = objDTO.anio
                    });
                    query_movpolSinCatalogar.parametros.Add(new OdbcParameterDTO
                    {
                        nombre = "cc",
                        tipo = OdbcType.NVarChar,
                        valor = registroCentroCostoSIGOPLAN.cc
                    });
                    if (cuentasEnkontrol.Count > 0)
                    {
                        query_movpolSinCatalogar.parametros.AddRange(cuentasEnkontrol.Select(x => new OdbcParameterDTO
                        {
                            nombre = "cuenta",
                            tipo = OdbcType.NVarChar,
                            valor = x.cuenta
                        }).ToList());
                    }
                }
                else
                {
                    query_movpolSinCatalogar.consulta = string.Format(
                    @"SELECT
                        mes,
                        sum(monto) AS suma
                    FROM
                        sc_movpol
                    WHERE
                        year = ? AND
                        area = ? AND
                        cuenta_oc = ? AND
                        {0}
                    GROUP BY mes", where_movpolSinCatalogar);
                    query_movpolSinCatalogar.parametros.Add(new OdbcParameterDTO
                    {
                        nombre = "year",
                        tipo = OdbcType.Int,
                        valor = objDTO.anio
                    });
                    query_movpolSinCatalogar.parametros.Add(new OdbcParameterDTO
                    {
                        nombre = "area",
                        tipo = OdbcType.NVarChar,
                        valor = registroCentroCostoSIGOPLAN.area
                    });
                    query_movpolSinCatalogar.parametros.Add(new OdbcParameterDTO
                    {
                        nombre = "cuenta_oc",
                        tipo = OdbcType.NVarChar,
                        valor = registroCentroCostoSIGOPLAN.cuenta
                    });
                    if (cuentasEnkontrol.Count > 0)
                    {
                        query_movpolSinCatalogar.parametros.AddRange(cuentasEnkontrol.Select(x => new OdbcParameterDTO
                        {
                            nombre = "cuenta",
                            tipo = OdbcType.NVarChar,
                            valor = x.cuenta
                        }).ToList());
                    }
                }

                var montosGastosSinCatalogar = _contextEnkontrol.Select<SumaDTO>(vSesiones.sesionAmbienteEnkontrolAdm, query_movpolSinCatalogar);
                if (vSesiones.sesionEmpresaActual == 1)
                {
                    montosGastosSinCatalogar.AddRange(_contextEnkontrol.Select<SumaDTO>(EnkontrolAmbienteEnum.ProdGCPLAN, query_movpolSinCatalogar));
                }

                obj = new CapPptoDTO();
                obj.concepto = "SIN AGRUPAR";
                obj.importeContEnero = montosGastosSinCatalogar.Where(x => x.mes == 1).Sum(x => x.suma);
                obj.importeContFebrero = montosGastosSinCatalogar.Where(x => x.mes == 2).Sum(x => x.suma);
                obj.importeContMarzo = montosGastosSinCatalogar.Where(x => x.mes == 3).Sum(x => x.suma);
                obj.importeContAbril = montosGastosSinCatalogar.Where(x => x.mes == 4).Sum(x => x.suma);
                obj.importeContMayo = montosGastosSinCatalogar.Where(x => x.mes == 5).Sum(x => x.suma);
                obj.importeContJunio = montosGastosSinCatalogar.Where(x => x.mes == 6).Sum(x => x.suma);
                obj.importeContJulio = montosGastosSinCatalogar.Where(x => x.mes == 7).Sum(x => x.suma);
                obj.importeContAgosto = montosGastosSinCatalogar.Where(x => x.mes == 8).Sum(x => x.suma);
                obj.importeContSeptiembre = montosGastosSinCatalogar.Where(x => x.mes == 9).Sum(x => x.suma);
                obj.importeContOctubre = montosGastosSinCatalogar.Where(x => x.mes == 10).Sum(x => x.suma);
                obj.importeContNoviembre = montosGastosSinCatalogar.Where(x => x.mes == 11).Sum(x => x.suma);
                obj.importeContDiciembre = montosGastosSinCatalogar.Where(x => x.mes == 12).Sum(x => x.suma);
                obj.importeContTotalConcepto = montosGastosSinCatalogar.Sum(x => x.suma);
                obj.esAgrupacion = true;
                obj.idAgrupacion = 9999999;
                lstSumaCapturas.Add(obj);
                //

                obj = new CapPptoDTO();
                obj.concepto = "TOTAL";

                #region ADITIVA
                obj.importeEnero = lstCapturas.Sum(s => s.importeEnero + s.importeEneroAditiva);
                obj.importeFebrero = lstCapturas.Sum(s => s.importeFebrero + s.importeFebreroAditiva);
                obj.importeMarzo = lstCapturas.Sum(s => s.importeMarzo + s.importeMarzoAditiva);
                obj.importeAbril = lstCapturas.Sum(s => s.importeAbril + s.importeAbrilAditiva);
                obj.importeMayo = lstCapturas.Sum(s => s.importeMayo + s.importeMayoAditiva);
                obj.importeJunio = lstCapturas.Sum(s => s.importeJunio + s.importeJunioAditiva);
                obj.importeJulio = lstCapturas.Sum(s => s.importeJulio + s.importeJulioAditiva);
                obj.importeAgosto = lstCapturas.Sum(s => s.importeAgosto + s.importeAgostoAditiva);
                obj.importeSeptiembre = lstCapturas.Sum(s => s.importeSeptiembre + s.importeSeptiembreAditiva);
                obj.importeOctubre = lstCapturas.Sum(s => s.importeOctubre + s.importeOctubreAditiva);
                obj.importeNoviembre = lstCapturas.Sum(s => s.importeNoviembre + s.importeNoviembreAditiva);
                obj.importeDiciembre = lstCapturas.Sum(s => s.importeDiciembre + s.importeDiciembreAditiva);
                #endregion
                obj.importeTotalConcepto = obj.importeEnero + obj.importeFebrero + obj.importeMarzo +
                                            obj.importeAbril + obj.importeMayo + obj.importeJunio +
                                            obj.importeJulio + obj.importeAgosto + obj.importeSeptiembre +
                                            obj.importeOctubre + obj.importeNoviembre + obj.importeDiciembre;

                obj.importeContEnero = lstSumaCapturas.Where(x => x.esAgrupacion).Sum(s => s.importeContEnero);
                obj.importeContFebrero = lstSumaCapturas.Where(x => x.esAgrupacion).Sum(s => s.importeContFebrero);
                obj.importeContMarzo = lstSumaCapturas.Where(x => x.esAgrupacion).Sum(s => s.importeContMarzo);
                obj.importeContAbril = lstSumaCapturas.Where(x => x.esAgrupacion).Sum(s => s.importeContAbril);
                obj.importeContMayo = lstSumaCapturas.Where(x => x.esAgrupacion).Sum(s => s.importeContMayo);
                obj.importeContJunio = lstSumaCapturas.Where(x => x.esAgrupacion).Sum(s => s.importeContJunio);
                obj.importeContJulio = lstSumaCapturas.Where(x => x.esAgrupacion).Sum(s => s.importeContJulio);
                obj.importeContAgosto = lstSumaCapturas.Where(x => x.esAgrupacion).Sum(s => s.importeContAgosto);
                obj.importeContSeptiembre = lstSumaCapturas.Where(x => x.esAgrupacion).Sum(s => s.importeContSeptiembre);
                obj.importeContOctubre = lstSumaCapturas.Where(x => x.esAgrupacion).Sum(s => s.importeContOctubre);
                obj.importeContNoviembre = lstSumaCapturas.Where(x => x.esAgrupacion).Sum(s => s.importeContNoviembre);
                obj.importeContDiciembre = lstSumaCapturas.Where(x => x.esAgrupacion).Sum(s => s.importeContDiciembre);
                obj.importeContTotalConcepto =
                    obj.importeContEnero + obj.importeContFebrero + obj.importeContMarzo +
                    obj.importeContAbril + obj.importeContMayo + obj.importeContJunio +
                    obj.importeContJulio + obj.importeContAgosto + obj.importeContSeptiembre +
                    obj.importeContOctubre + obj.importeContNoviembre + obj.importeContDiciembre;

                obj.esAgrupacion = true;
                obj.idAgrupacion = 99999999;
                lstSumaCapturas.Add(obj);

                var lstAgrupacion = lstSumaCapturas.OrderBy(o => o.idAgrupacion);



                resultado.Add("lstSumaCapturas", lstAgrupacion);

                #region GFX Presupuesto Gasto
                string[] meses = {
                                     "Enero",
                                     "Febrero",
                                     "Marzo",
                                     "Abril",
                                     "Mayo",
                                     "Junio",
                                     "Julio",
                                     "Agosto",
                                     "Septiembre",
                                     "Octubre",
                                     "Noviembre",
                                     "Diciembre"
                                 };

                var graficaPresupuestoGasto = new GraficaDTO();

                for (int i = 0; i < meses.Length; i++)
                {
                    var totalMesPresupuesto = Convert.ToDecimal(lstSumaCapturas.Last().GetType().GetProperty("importe" + meses[i]).GetValue(lstSumaCapturas.Last(), null));
                    var totalMesGasto = Convert.ToDecimal(lstSumaCapturas.Last().GetType().GetProperty("importeCont" + meses[i]).GetValue(lstSumaCapturas.Last(), null));

                    graficaPresupuestoGasto.categorias.Add(meses[i].ToUpper());
                    graficaPresupuestoGasto.serie1Descripcion = "Presupuesto";
                    graficaPresupuestoGasto.serie1.Add(totalMesPresupuesto);

                    graficaPresupuestoGasto.serie2Descripcion = "Gasto";
                    graficaPresupuestoGasto.serie2.Add(totalMesGasto);
                }

                resultado.Add("graficaPresupuestoGasto", graficaPresupuestoGasto);
                #endregion

                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetSumaCapturasContable", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> FillCboEmpresas()
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region SE OBTIENE LISTADO DE EMPRESAS
                List<ComboDTO> lstEmpresasDTO = new List<ComboDTO>();

                #region SE OBTIENE LISTADO DE USUARIOS RELACIONADOS A SU CC
                List<tblAF_CtrlPptalOfCe_UsuarioRelCC> lstUsuariosCP = _context.Select<tblAF_CtrlPptalOfCe_UsuarioRelCC>(new DapperDTO
                {
                    baseDatos = MainContextEnum.Construplan,
                    consulta = @"SELECT idUsuario, idCC FROM tblAF_CtrlPptalOfCe_UsuarioRelCC WHERE idUsuario = @idUsuario AND registroActivo = @registroActivo",
                    parametros = new { idUsuario = (int)vSesiones.sesionUsuarioDTO.id, registroActivo = true }
                }).ToList();

                List<tblAF_CtrlPptalOfCe_UsuarioRelCC> lstUsuariosARR = _context.Select<tblAF_CtrlPptalOfCe_UsuarioRelCC>(new DapperDTO
                {
                    baseDatos = MainContextEnum.Arrendadora,
                    consulta = @"SELECT idUsuario, idCC FROM tblAF_CtrlPptalOfCe_UsuarioRelCC WHERE idUsuario = @idUsuario AND registroActivo = @registroActivo",
                    parametros = new { idUsuario = (int)vSesiones.sesionUsuarioDTO.id, registroActivo = true }
                }).ToList();
                #endregion

                ComboDTO objDTO = new ComboDTO();
                if (lstUsuariosCP.Count() > 0)
                {
                    // CONSTRUPLAN
                    int idCP = (int)EmpresaEnum.Construplan;
                    objDTO.Value = idCP.ToString();
                    objDTO.Text = EnumHelper.GetDescription((EmpresaEnum.Construplan));
                    lstEmpresasDTO.Add(objDTO);
                }

                if (lstUsuariosARR.Count() > 0)
                {
                    // ARRENDADORA
                    objDTO = new ComboDTO();
                    int idARR = (int)EmpresaEnum.Arrendadora;
                    objDTO.Value = idARR.ToString();
                    objDTO.Text = EnumHelper.GetDescription((EmpresaEnum.Arrendadora));
                    lstEmpresasDTO.Add(objDTO);
                }

                if (lstUsuariosCP.Count() > 0 && lstUsuariosARR.Count() > 0)
                {
                    objDTO = new ComboDTO();
                    objDTO.Value = "9999"; //AMBAS EMPRESAS (CP Y ARR).
                    objDTO.Text = "AMBAS";
                    lstEmpresasDTO.Add(objDTO);
                }

                resultado.Add(ITEMS, lstEmpresasDTO);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "cboFiltroEmpresas", e, AccionEnum.FILLCOMBO, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }
        #endregion

        public List<tablaPanelNivel4DTO> obtenerTablaPorNivelMes(List<CapPptoDTO> lstSumaCapturas, int gasto, int mes)
        {
            tablaPanelNivel4DTO objNivel4 = new tablaPanelNivel4DTO();
            List<tablaPanelNivel4DTO> lstNivel4 = new List<tablaPanelNivel4DTO>();
            var lstAgrupacion = lstSumaCapturas.OrderBy(o => o.idAgrupacion);
            #region MESES EN CONCEPTOS
            //switch (mes)
            //{
            //    case 1:
            //        objNivel4 = new tablaPanelNivel4DTO();
            //        objNivel4.concepto = "Concepto";
            //        objNivel4.mes = "ENERO";
            //        lstNivel4.Add(objNivel4);
            //        break;
            //    case 2:
            //        objNivel4 = new tablaPanelNivel4DTO();
            //        objNivel4.concepto = "Concepto";
            //        objNivel4.mes = "FEBRERO";
            //        lstNivel4.Add(objNivel4);
            //        break;
            //    case 3:
            //        objNivel4 = new tablaPanelNivel4DTO();
            //        objNivel4.concepto = "Concepto";
            //        objNivel4.mes = "MARZO";
            //        lstNivel4.Add(objNivel4);
            //        break;
            //    case 4:
            //        objNivel4 = new tablaPanelNivel4DTO();
            //        objNivel4.concepto = "Concepto";
            //        objNivel4.mes = "ABRIL";
            //        lstNivel4.Add(objNivel4);
            //        break;
            //    case 5:
            //        objNivel4 = new tablaPanelNivel4DTO();
            //        objNivel4.concepto = "Concepto";
            //        objNivel4.mes = "MAYO";
            //        lstNivel4.Add(objNivel4);
            //        break;
            //    case 6:
            //        objNivel4 = new tablaPanelNivel4DTO();
            //        objNivel4.concepto = "Concepto";
            //        objNivel4.mes = "JUNIO";
            //        lstNivel4.Add(objNivel4);
            //        break;
            //    case 7:
            //        objNivel4 = new tablaPanelNivel4DTO();
            //        objNivel4.concepto = "Concepto";
            //        objNivel4.mes = "JULIO";
            //        lstNivel4.Add(objNivel4);
            //        break;
            //    case 8:
            //        objNivel4 = new tablaPanelNivel4DTO();
            //        objNivel4.concepto = "Concepto";
            //        objNivel4.mes = "AGOSTO";
            //        lstNivel4.Add(objNivel4);
            //        break;
            //    case 9:
            //        objNivel4 = new tablaPanelNivel4DTO();
            //        objNivel4.concepto = "Concepto";
            //        objNivel4.mes = "SEPTIEMBRE";
            //        lstNivel4.Add(objNivel4);
            //        break;
            //    case 10:
            //        objNivel4 = new tablaPanelNivel4DTO();
            //        objNivel4.concepto = "Concepto";
            //        objNivel4.mes = "OCTUBRE";
            //        lstNivel4.Add(objNivel4);
            //        break;
            //    case 11:
            //        objNivel4 = new tablaPanelNivel4DTO();
            //        objNivel4.concepto = "Concepto";
            //        objNivel4.mes = "NOVIEMBRE";
            //        lstNivel4.Add(objNivel4);
            //        break;
            //    case 12:
            //        objNivel4 = new tablaPanelNivel4DTO();
            //        objNivel4.concepto = "Concepto";
            //        objNivel4.mes = "DICIEMBRE";
            //        lstNivel4.Add(objNivel4);
            //        break;
            //}
            #endregion
            foreach (var item in lstAgrupacion)
            {
                objNivel4 = new tablaPanelNivel4DTO();
                if (gasto == 1)
                {
                    #region SWITCH PARA TRAER FORMATO
                    switch (mes)
                    {
                        case 1:
                            objNivel4.concepto = item.concepto;
                            objNivel4.mes = item.importeEnero.ToString();
                            lstNivel4.Add(objNivel4);
                            break;
                        case 2:
                            objNivel4.concepto = item.concepto;
                            objNivel4.mes = item.importeFebrero.ToString();
                            lstNivel4.Add(objNivel4);
                            break;
                        case 3:
                            objNivel4.concepto = item.concepto;
                            objNivel4.mes = item.importeMarzo.ToString();
                            lstNivel4.Add(objNivel4);
                            break;
                        case 4:
                            objNivel4.concepto = item.concepto;
                            objNivel4.mes = item.importeAbril.ToString();
                            lstNivel4.Add(objNivel4);
                            break;
                        case 5:
                            objNivel4.concepto = item.concepto;
                            objNivel4.mes = item.importeMayo.ToString();
                            lstNivel4.Add(objNivel4);
                            break;
                        case 6:
                            objNivel4.concepto = item.concepto;
                            objNivel4.mes = item.importeJunio.ToString();
                            lstNivel4.Add(objNivel4);
                            break;
                        case 7:
                            objNivel4.concepto = item.concepto;
                            objNivel4.mes = item.importeJulio.ToString();
                            lstNivel4.Add(objNivel4);
                            break;
                        case 8:
                            objNivel4.concepto = item.concepto;
                            objNivel4.mes = item.importeAgosto.ToString();
                            lstNivel4.Add(objNivel4);
                            break;
                        case 9:
                            objNivel4.concepto = item.concepto;
                            objNivel4.mes = item.importeSeptiembre.ToString();
                            lstNivel4.Add(objNivel4);
                            break;
                        case 10:
                            objNivel4.concepto = item.concepto;
                            objNivel4.mes = item.importeOctubre.ToString();
                            lstNivel4.Add(objNivel4);
                            break;
                        case 11:
                            objNivel4.concepto = item.concepto;
                            objNivel4.mes = item.importeNoviembre.ToString();
                            lstNivel4.Add(objNivel4);
                            break;
                        case 12:
                            objNivel4.concepto = item.concepto;
                            objNivel4.mes = item.importeDiciembre.ToString();
                            lstNivel4.Add(objNivel4);
                            break;
                    }
                    #endregion
                }
                else
                {
                    #region SWITCH PARA TRAER FORMATO
                    switch (mes)
                    {
                        case 1:
                            objNivel4.concepto = item.concepto;
                            objNivel4.mes = item.importeContEnero.ToString();
                            lstNivel4.Add(objNivel4);
                            break;
                        case 2:
                            objNivel4.concepto = item.concepto;
                            objNivel4.mes = item.importeContFebrero.ToString();
                            lstNivel4.Add(objNivel4);
                            break;
                        case 3:
                            objNivel4.concepto = item.concepto;
                            objNivel4.mes = item.importeContMarzo.ToString();
                            lstNivel4.Add(objNivel4);
                            break;
                        case 4:
                            objNivel4.concepto = item.concepto;
                            objNivel4.mes = item.importeContAbril.ToString();
                            lstNivel4.Add(objNivel4);
                            break;
                        case 5:
                            objNivel4.concepto = item.concepto;
                            objNivel4.mes = item.importeContMayo.ToString();
                            lstNivel4.Add(objNivel4);
                            break;
                        case 6:
                            objNivel4.concepto = item.concepto;
                            objNivel4.mes = item.importeContJunio.ToString();
                            lstNivel4.Add(objNivel4);
                            break;
                        case 7:
                            objNivel4.concepto = item.concepto;
                            objNivel4.mes = item.importeContJulio.ToString();
                            lstNivel4.Add(objNivel4);
                            break;
                        case 8:
                            objNivel4.concepto = item.concepto;
                            objNivel4.mes = item.importeContAgosto.ToString();
                            lstNivel4.Add(objNivel4);
                            break;
                        case 9:
                            objNivel4.concepto = item.concepto;
                            objNivel4.mes = item.importeContSeptiembre.ToString();
                            lstNivel4.Add(objNivel4);
                            break;
                        case 10:
                            objNivel4.concepto = item.concepto;
                            objNivel4.mes = item.importeContOctubre.ToString();
                            lstNivel4.Add(objNivel4);
                            break;
                        case 11:
                            objNivel4.concepto = item.concepto;
                            objNivel4.mes = item.importeContNoviembre.ToString();
                            lstNivel4.Add(objNivel4);
                            break;
                        case 12:
                            objNivel4.concepto = item.concepto;
                            objNivel4.mes = item.importeContDiciembre.ToString();
                            lstNivel4.Add(objNivel4);
                            break;
                    }
                    #endregion
                }

            }
            return lstNivel4;
        }

        #region PLAN MAESTRO
        public Dictionary<string, object> GetPlanMaestro(PlanMaestroDTO objDTO)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region SE OBTIENE LISTADO DE PLANES MAESTROS EN BASE AL AÑO Y CC
                List<PlanMaestroDTO> lstPlanMaestro = new List<PlanMaestroDTO>();
                if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                {
                    lstPlanMaestro = _context.Select<PlanMaestroDTO>(new DapperDTO
                    {
                        baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                        consulta = @"SELECT t1.id, t1.anio, t1.idCC, t2.cc + ' - ' + t2.descripcion AS cc, t1.misionArea, t1.objEspecificoMedible, t1.meta, t3.autorizado, t3.notificado
	                                        FROM tblAF_CtrlPptalOfCe_RN_PlanMaestro AS t1
	                                        INNER JOIN tblP_CC AS t2 ON t1.idCC = t2.id
		                                    INNER JOIN tblAF_CtrlPptalOfCe_PptoAnual AS t3 ON t1.anio = t3.anio AND t1.idCC = t3.idCC
		                                        WHERE t1.anio = @anio AND t1.idCC = @idCC AND t1.registroActivo = @registroActivo",
                        parametros = new { anio = objDTO.anio, idCC = objDTO.idCC, registroActivo = true }
                    }).ToList();
                }
                else if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                {
                    lstPlanMaestro = _context.Select<PlanMaestroDTO>(new DapperDTO
                    {
                        baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                        consulta = @"SELECT t1.id, t1.anio, t1.idCC, t2.areaCuenta + ' ' + t2.descripcion AS cc, t1.misionArea, t1.objEspecificoMedible, t1.meta, t3.autorizado, t3.notificado
	                                        FROM tblAF_CtrlPptalOfCe_RN_PlanMaestro AS t1
	                                        INNER JOIN tblP_CC AS t2 ON t1.idCC = t2.id
		                                    INNER JOIN tblAF_CtrlPptalOfCe_PptoAnual AS t3 ON t1.anio = t3.anio AND t1.idCC = t3.idCC
		                                        WHERE t1.anio = @anio AND t1.idCC = @idCC AND t1.registroActivo = @registroActivo",
                        parametros = new { anio = objDTO.anio, idCC = objDTO.idCC, registroActivo = true }
                    }).ToList();
                }

                #region SE CONVIERTE TEXTO EN MAYUSCULAS
                foreach (var item in lstPlanMaestro)
                {
                    string cc = string.Empty;
                    string misionArea = string.Empty;
                    string objEspecificoMedible = string.Empty;
                    string meta = string.Empty;

                    if (!string.IsNullOrEmpty(item.cc))
                    {
                        string ccTU = item.cc.Trim().ToUpper();
                        item.cc = ccTU;
                    }

                    if (!string.IsNullOrEmpty(item.misionArea))
                    {
                        string misionTU = item.misionArea.Trim().ToUpper();
                        item.misionArea = misionTU;
                    }

                    if (!string.IsNullOrEmpty(item.objEspecificoMedible))
                    {
                        string objTU = item.objEspecificoMedible.Trim().ToUpper();
                        item.objEspecificoMedible = objTU;
                    }

                    if (!string.IsNullOrEmpty(item.meta))
                    {
                        string metaTU = item.meta.Trim().ToUpper();
                        item.meta = metaTU;
                    }
                }
                #endregion

                resultado.Add("lstPlanMaestro", lstPlanMaestro);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetPlanMaestro", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> CrearEditarPlanMaestro(PlanMaestroDTO objDTO)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                resultado = new Dictionary<string, object>();
                try
                {
                    #region VALIDACIÓN CAMPOS VACIOS
                    string strMensajeError = string.Empty;
                    if (objDTO.anio <= 0 || objDTO.idCC <= 0 || string.IsNullOrEmpty(objDTO.misionArea) || string.IsNullOrEmpty(objDTO.objEspecificoMedible) || string.IsNullOrEmpty(objDTO.meta))
                    {
                        strMensajeError += objDTO.anio <= 0 ? "Es necesario indicar el año." : string.Empty;
                        strMensajeError += objDTO.idCC <= 0 ? "<br>Es necesario indicar el CC." : string.Empty;
                        strMensajeError += string.IsNullOrEmpty(objDTO.misionArea) ? "<br>Es necesario indicar la misión del área (CC)." : string.Empty;
                        strMensajeError += string.IsNullOrEmpty(objDTO.objEspecificoMedible) ? "<br>Es necesario indicar el objetivo específico medible." : string.Empty;
                        strMensajeError += string.IsNullOrEmpty(objDTO.meta) ? "<br>Es necesario indicar la meta." : string.Empty;
                        strMensajeError += objDTO.lstMedicionesIndicadores.Count() <= 0 ? "<br>Es necesario indicar información en Mediciones y/o indicadores." : string.Empty;
                        throw new Exception(strMensajeError);
                    }

                    foreach (var item in objDTO.lstMedicionesIndicadores)
                    {
                        strMensajeError += string.IsNullOrEmpty(item.indicador) ? "Es necesario ingresar el indicador." : string.Empty;
                        strMensajeError += string.IsNullOrEmpty(item.fuenteDatos) ? "<br>Es necesario ingresar la fuente de datos." : string.Empty;
                        strMensajeError += item.idUsuarioResponsable <= 0 ? "<br>Es necesario seleccionar al responsable." : string.Empty;

                        if (!string.IsNullOrEmpty(strMensajeError))
                            throw new Exception(strMensajeError);
                    }
                    #endregion

                    tblAF_CtrlPptalOfCe_RN_PlanMaestro objCE = new tblAF_CtrlPptalOfCe_RN_PlanMaestro();
                    if (objDTO.id > 0)
                    {
                        #region ACTUALIZAR PLAN MAESTRO
                        objCE = _context.tblAF_CtrlPptalOfCe_RN_PlanMaestro.Where(w => w.id == objDTO.id).FirstOrDefault();
                        if (objCE == null)
                            throw new Exception("Ocurrió un error al actualizar el registro.");

                        objCE.misionArea = objDTO.misionArea.Trim().ToUpper();
                        objCE.objEspecificoMedible = objDTO.objEspecificoMedible.Trim().ToUpper();
                        objCE.meta = objDTO.meta.Trim().ToUpper();
                        objCE.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                        objCE.fechaModificacion = DateTime.Now;
                        _context.SaveChanges();
                        #endregion

                        #region SE ACTUALIZA DETALLE PLAN MAESTRO - MEDICION Y/O INDICADOR
                        tblAF_CtrlPptalOfCe_RN_MedicionesIndicadores objCEMedicionIndicador = new tblAF_CtrlPptalOfCe_RN_MedicionesIndicadores();
                        List<tblAF_CtrlPptalOfCe_RN_MedicionesIndicadores> lstMedicionesIndicadores = _context.tblAF_CtrlPptalOfCe_RN_MedicionesIndicadores.Where(w => w.idPlanMaestro == objDTO.id).ToList();
                        List<tblAF_CtrlPptalOfCe_RN_MedicionesIndicadores> lstActualizar = new List<tblAF_CtrlPptalOfCe_RN_MedicionesIndicadores>();
                        foreach (var item in objDTO.lstMedicionesIndicadores)
                        {
                            objCEMedicionIndicador = lstMedicionesIndicadores.Where(w => w.id == item.id).FirstOrDefault();
                            if (objCEMedicionIndicador != null)
                            {
                                objCEMedicionIndicador.indicador = !string.IsNullOrEmpty(item.indicador) ? item.indicador.Trim().ToUpper() : string.Empty;
                                objCEMedicionIndicador.fuenteDatos = !string.IsNullOrEmpty(item.fuenteDatos) ? item.fuenteDatos.Trim().ToUpper() : string.Empty;
                                objCEMedicionIndicador.idUsuarioResponsable = item.idUsuarioResponsable;
                                objCEMedicionIndicador.meta = !string.IsNullOrEmpty(item.meta) ? item.meta.Trim().ToUpper() : string.Empty;
                                objCEMedicionIndicador.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                                objCEMedicionIndicador.fechaModificacion = DateTime.Now;
                            }
                        }
                        _context.SaveChanges();
                        #endregion
                    }
                    else
                    {
                        #region CREAR PLAN MAESTRO
                        objCE = new tblAF_CtrlPptalOfCe_RN_PlanMaestro();
                        objCE.anio = objDTO.anio;
                        objCE.idCC = objDTO.idCC;
                        objCE.misionArea = objDTO.misionArea.Trim().ToUpper();
                        objCE.objEspecificoMedible = objDTO.objEspecificoMedible.Trim().ToUpper();
                        objCE.meta = objDTO.meta.Trim().ToUpper();
                        objCE.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                        objCE.fechaCreacion = DateTime.Now;
                        objCE.registroActivo = true;
                        _context.tblAF_CtrlPptalOfCe_RN_PlanMaestro.Add(objCE);
                        _context.SaveChanges();
                        #endregion

                        #region SE CREA DETALLE PLAN MAESTRO - MEDICION Y/O INDICADOR
                        int idPlanMaestro = _context.tblAF_CtrlPptalOfCe_RN_PlanMaestro.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();
                        if (idPlanMaestro <= 0)
                            throw new Exception("Ocurrió un error al realizar el registro.");

                        List<tblAF_CtrlPptalOfCe_RN_MedicionesIndicadores> lstObjCEMedicionIndicador = new List<tblAF_CtrlPptalOfCe_RN_MedicionesIndicadores>();
                        tblAF_CtrlPptalOfCe_RN_MedicionesIndicadores objCEMedicionIndicador = new tblAF_CtrlPptalOfCe_RN_MedicionesIndicadores();
                        foreach (var item in objDTO.lstMedicionesIndicadores)
                        {
                            objCEMedicionIndicador = new tblAF_CtrlPptalOfCe_RN_MedicionesIndicadores();
                            objCEMedicionIndicador.idPlanMaestro = idPlanMaestro;
                            objCEMedicionIndicador.indicador = !string.IsNullOrEmpty(item.indicador) ? item.indicador.Trim().ToUpper() : string.Empty;
                            objCEMedicionIndicador.fuenteDatos = !string.IsNullOrEmpty(item.fuenteDatos) ? item.fuenteDatos.Trim().ToUpper() : string.Empty;
                            objCEMedicionIndicador.idUsuarioResponsable = item.idUsuarioResponsable;
                            objCEMedicionIndicador.meta = !string.IsNullOrEmpty(item.meta) ? item.meta.Trim().ToUpper() : string.Empty;
                            objCEMedicionIndicador.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                            objCEMedicionIndicador.fechaCreacion = DateTime.Now;
                            objCEMedicionIndicador.registroActivo = true;
                            lstObjCEMedicionIndicador.Add(objCEMedicionIndicador);
                        }
                        _context.tblAF_CtrlPptalOfCe_RN_MedicionesIndicadores.AddRange(lstObjCEMedicionIndicador);
                        _context.SaveChanges();
                        #endregion

                        #region SE CREA DETALLE PLAN MAESTRO - AGRUPACIONES/CONCEPTOS
                        tblAF_CtrlPptalOfCe_RN_PlanMaestroDet objCEPlanMaestro = new tblAF_CtrlPptalOfCe_RN_PlanMaestroDet();
                        List<tblAF_CtrlPptalOfCe_RN_PlanMaestroDet> lstCEPlanMaestro = new List<tblAF_CtrlPptalOfCe_RN_PlanMaestroDet>();
                        List<tblAF_CtrlPptalOfCe_RN_CatAgrupaciones> lstAgrupaciones = _context.tblAF_CtrlPptalOfCe_RN_CatAgrupaciones.Where(w => w.anio == objDTO.anio && w.idCC == objDTO.idCC && w.registroActivo).ToList();
                        List<int> lstAgrupacionesID = new List<int>();
                        foreach (var item in lstAgrupaciones)
                        {
                            lstAgrupacionesID.Add(item.id);
                        }
                        List<tblAF_CtrlPptalOfCe_RN_CatConceptos> lstConceptos = _context.tblAF_CtrlPptalOfCe_RN_CatConceptos.Where(w => (lstAgrupacionesID.Contains(w.idRNAgrupacion) && w.registroActivo)).ToList();
                        foreach (var item in lstConceptos)
                        {
                            objCEPlanMaestro = new tblAF_CtrlPptalOfCe_RN_PlanMaestroDet();
                            objCEPlanMaestro.idPlanMaestro = idPlanMaestro;
                            objCEPlanMaestro.idAgrupacion = item.idRNAgrupacion;
                            objCEPlanMaestro.idConcepto = item.id;
                            objCEPlanMaestro.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                            objCEPlanMaestro.fechaCreacion = DateTime.Now;
                            objCEPlanMaestro.registroActivo = true;
                            lstCEPlanMaestro.Add(objCEPlanMaestro);
                        }
                        _context.tblAF_CtrlPptalOfCe_RN_PlanMaestroDet.AddRange(lstCEPlanMaestro);
                        _context.SaveChanges();
                        #endregion
                    }

                    resultado.Add(MESSAGE, objDTO.id > 0 ? "Se ha actualizado con éxito." : "Se ha registrado con éxito.");
                    resultado.Add(SUCCESS, true);
                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "CrearEditarPlanMaestro", e, objDTO.id > 0 ? AccionEnum.ACTUALIZAR : AccionEnum.AGREGAR, objDTO.id > 0 ? objDTO.id : 0, 0);
                    resultado.Add(MESSAGE, e.Message);
                    resultado.Add(SUCCESS, false);
                }
            }
            return resultado;
        }

        public Dictionary<string, object> EliminarPlanMaestro(int idPlanMaestro)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                resultado = new Dictionary<string, object>();
                try
                {
                    if (idPlanMaestro <= 0)
                        throw new Exception("Ocurrió un error al eliminar el registro.");

                    #region SE ELIMINA LAS MEDICIONES/INDICADORES DEL PLAN MAESTRO
                    List<tblAF_CtrlPptalOfCe_RN_MedicionesIndicadores> objEliminarMedicionIndicador = _context.tblAF_CtrlPptalOfCe_RN_MedicionesIndicadores.Where(w => w.id == idPlanMaestro && w.registroActivo).ToList();
                    foreach (var item in objEliminarMedicionIndicador)
                    {
                        item.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                        item.fechaModificacion = DateTime.Now;
                        item.registroActivo = false;
                    }
                    _context.SaveChanges();
                    #endregion

                    #region SE ELIMINA EL DETALLE DEL PLAN MAESTRO
                    List<tblAF_CtrlPptalOfCe_RN_PlanMaestroDet> objEliminarPlanMaestroDetalle = _context.tblAF_CtrlPptalOfCe_RN_PlanMaestroDet.Where(w => w.idPlanMaestro == idPlanMaestro && w.registroActivo).ToList();
                    foreach (var item in objEliminarPlanMaestroDetalle)
                    {
                        item.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                        item.fechaModificacion = DateTime.Now;
                        item.registroActivo = false;
                    }
                    _context.SaveChanges();
                    #endregion

                    #region SE ELIMINA EL PLAN MAESTRO SELECCIONADO
                    tblAF_CtrlPptalOfCe_RN_PlanMaestro objEliminar = _context.tblAF_CtrlPptalOfCe_RN_PlanMaestro.Where(w => w.id == idPlanMaestro).FirstOrDefault();
                    if (objEliminar == null)
                        throw new Exception("Ocurrió un error al eliminar el registro.");

                    objEliminar.registroActivo = false;
                    objEliminar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                    objEliminar.fechaModificacion = DateTime.Now;
                    _context.SaveChanges();
                    #endregion

                    resultado.Add(MESSAGE, "Se ha eliminado con éxito el registro.");
                    resultado.Add(SUCCESS, true);
                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "EliminarPlanMaestro", e, AccionEnum.ELIMINAR, idPlanMaestro, 0);
                    resultado.Add(MESSAGE, e.Message);
                    resultado.Add(SUCCESS, false);
                }
            }
            return resultado;
        }

        public Dictionary<string, object> GetDatosActualizarPlanMaestro(int idPlanMaestro)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region SE OBTIENE LOS DATOS DEL PLAN MAESTRO SELECCIONADO PARA SER ACTUALIZADO
                PlanMaestroDTO objPlanMaestro = _context.Select<PlanMaestroDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"SELECT id, anio, idCC, misionArea, objEspecificoMedible, meta FROM tblAF_CtrlPptalOfCe_RN_PlanMaestro WHERE id = @id",
                    parametros = new { id = idPlanMaestro }
                }).FirstOrDefault();

                List<MedicionIndicadorDTO> lstIndicadores = _context.Select<MedicionIndicadorDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"SELECT id, indicador, fuenteDatos, idUsuarioResponsable, meta FROM tblAF_CtrlPptalOfCe_RN_MedicionesIndicadores WHERE idPlanMaestro = @idPlanMaestro AND registroActivo = @registroActivo",
                    parametros = new { idPlanMaestro = idPlanMaestro, registroActivo = true }
                }).ToList();

                #region SE CONVIERTE TEXTO EN MAYUSCULAS
                if (objPlanMaestro != null)
                {
                    if (!string.IsNullOrEmpty(objPlanMaestro.misionArea))
                    {
                        string misionTU = objPlanMaestro.misionArea.Trim().ToUpper();
                        objPlanMaestro.misionArea = misionTU;
                    }

                    if (!string.IsNullOrEmpty(objPlanMaestro.objEspecificoMedible))
                    {
                        string objTU = objPlanMaestro.objEspecificoMedible.Trim().ToUpper();
                        objPlanMaestro.objEspecificoMedible = objTU;
                    }

                    if (!string.IsNullOrEmpty(objPlanMaestro.meta))
                    {
                        string metaTU = objPlanMaestro.meta.Trim().ToUpper();
                        objPlanMaestro.meta = metaTU;
                    }
                }

                foreach (var item in lstIndicadores)
                {
                    if (!string.IsNullOrEmpty(item.indicador))
                    {
                        string indicadorTU = item.indicador.Trim().ToUpper();
                        item.indicador = indicadorTU;
                    }

                    if (!string.IsNullOrEmpty(item.fuenteDatos))
                    {
                        string fuenteTU = item.fuenteDatos.Trim().ToUpper();
                        item.fuenteDatos = fuenteTU;
                    }

                    if (!string.IsNullOrEmpty(item.meta))
                    {
                        string metaTU = item.meta.Trim().ToUpper();
                        item.meta = metaTU;
                    }
                }
                #endregion

                resultado.Add("objPlanMaestro", objPlanMaestro);
                resultado.Add("lstIndicadores", lstIndicadores);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetDatosActualizarPlanMaestro", e, AccionEnum.CONSULTA, idPlanMaestro, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> GetCantAgrupacionesConceptos(PlanMaestroDTO objDTO)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region VALIDACIONES
                if (objDTO.anio <= 0 || objDTO.idCC <= 0)
                {
                    string strMensajeError = string.Empty;
                    strMensajeError += objDTO.anio <= 0 ? "Es necesario indicar un año." : "";
                    strMensajeError += objDTO.idCC <= 0 ? "<br>Es necesario indicar un CC." : "";
                    throw new Exception(strMensajeError);
                }
                #endregion

                #region SE VERIFICA LA CANTIDAD DE AGRUPACIONES Y CONCEPTOS QUE CONTIENE EL PLAN MAESTRO SELECCIONADO
                int anio = 0, idCC = 0;
                List<int> lstAgrupacionesID = new List<int>();
                List<string> lstAgrupaciones = new List<string>();
                List<int> lstConceptosID = new List<int>();
                List<string> lstConceptos = new List<string>();
                List<string> lstCantidades = new List<string>();

                anio = objDTO.anio;
                idCC = objDTO.idCC;

                #region SE OBTIENE LAS AGRUPACIONES DEL AÑO Y CC SELECCIONADOS
                List<tblAF_CtrllPptalOfCe_CatAgrupaciones> lstAgrupacionesDB = _context.tblAF_CtrllPptalOfCe_CatAgrupaciones.Where(w => w.anio == anio && w.idCC == idCC && w.registroActivo).ToList();
                foreach (var item in lstAgrupacionesDB)
                {
                    lstAgrupacionesID.Add(item.id);

                    // SE OBTIENE EL TOTAL POR AGRUPACION
                    decimal totalAgrupacion = _context.Select<decimal>(new DapperDTO
                    {
                        baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                        consulta = @"SELECT SUM(cantPpto) AS totalAgrupacion
		                                    FROM tblAF_CtrlPptalOfCe_CatConceptos
			                                    WHERE idAgrupacion = @idAgrupacion AND registroActivo = @registroActivo",
                        parametros = new { idAgrupacion = item.id, registroActivo = true }
                    }).FirstOrDefault();

                    #region SE VERIFICA QUE EL PPTO CAPTURADO, HAGA MATCH CON EL PLAN MAESTRO
                    bool isMatch = true;
                    decimal totalAgrupacionPlanMaestro = _context.Select<decimal>(new DapperDTO
                    {
                        baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                        consulta = @"SELECT SUM(cantPpto) AS cantPpto
		                            FROM tblAF_CtrlPptalOfCe_CatConceptos
			                            WHERE idAgrupacion = @idAgrupacion AND registroActivo = @registroActivo",
                        parametros = new { idAgrupacion = item.id, registroActivo = true }
                    }).FirstOrDefault();

                    decimal totalAgrupacionCaptura = 0;
                    int cantCapPpto = _context.tblAF_CtrlPptalOfCe_CapPptos.Where(w => w.anio == item.anio && w.cc == item.idCC.ToString() && w.idAgrupacion == item.id && w.registroActivo).ToList().Count();
                    if (cantCapPpto > 0)
                    {
                        totalAgrupacionCaptura = _context.Select<decimal>(new DapperDTO
                        {
                            baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                            consulta = @"SELECT SUM(importeEnero) + SUM(importeFebrero) + SUM(importeMarzo) + SUM(importeAbril) + 
	                                SUM(importeMayo) + SUM(importeJunio) + SUM(importeJulio) + SUM(importeAgosto) + 
	                                SUM(importeSeptiembre) + SUM(importeOctubre) + SUM(importeNoviembre) + SUM(importeDiciembre)
		                                FROM tblAF_CtrlPptalOfCe_CapPptos
			                                WHERE anio = @anio AND cc = @cc AND idAgrupacion = @idAgrupacion AND registroActivo = @registroActivo",
                            parametros = new { anio = item.anio, cc = item.idCC, idAgrupacion = item.id, registroActivo = true }
                        }).FirstOrDefault();
                    }

                    if (totalAgrupacionPlanMaestro != totalAgrupacionCaptura)
                        isMatch = false;
                    #endregion

                    lstAgrupaciones.Add(string.Format("{0}{1}{2}", item.id, "|", string.Format("{0}{1}{2}{3}{4}", item.nombre, "|$", totalAgrupacion.ToString("#,##0.00"), "|", isMatch)));
                }

                List<tblAF_CtrlPptalOfCe_CatConceptos> lstConceptosDB = _context.tblAF_CtrlPptalOfCe_CatConceptos.Where(w => lstAgrupacionesID.Contains(w.idAgrupacion) && w.registroActivo).ToList();
                foreach (var item in lstConceptosDB)
                {
                    lstConceptosID.Add(item.id);
                    lstConceptos.Add(string.Format("{0}{1}{2}{3}{4}", item.idAgrupacion, "|", item.concepto, "|", item.id));
                    lstCantidades.Add(string.Format("{0}{1}{2}", item.idAgrupacion, "|", item.cantPpto));
                }
                #endregion

                resultado.Add("lstAgrupaciones", lstAgrupaciones);
                resultado.Add("lstConceptos", lstConceptos);
                resultado.Add("lstCantidades", lstCantidades);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetCantAgrupacionesConceptos", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> EliminarMedicionIndicador(int idMedicionIndicador)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                resultado = new Dictionary<string, object>();
                try
                {
                    #region SE ELIMINA LA MEDICIÓN/INDICADOR SELECCIONADA
                    tblAF_CtrlPptalOfCe_RN_MedicionesIndicadores objEliminar = _context.tblAF_CtrlPptalOfCe_RN_MedicionesIndicadores.Where(w => w.id == idMedicionIndicador).FirstOrDefault();
                    if (objEliminar == null)
                        throw new Exception("Ocurrió un error al eliminar el registro.");

                    objEliminar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                    objEliminar.fechaModificacion = DateTime.Now;
                    objEliminar.registroActivo = false;
                    _context.SaveChanges();

                    resultado.Add(MESSAGE, "Se ha eliminado con éxito el registro.");
                    resultado.Add(SUCCESS, true);
                    dbContextTransaction.Commit();
                    #endregion
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "EliminarMedicionIndicador", e, AccionEnum.ELIMINAR, 0, 0);
                    resultado.Add(MESSAGE, e.Message);
                    resultado.Add(SUCCESS, false);
                }
            }
            return resultado;
        }

        public Dictionary<string, object> CrearEditarMedicionIndicador(MedicionIndicadorDTO objDTO)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                resultado = new Dictionary<string, object>();
                try
                {
                    string strMensajeError = string.Empty;
                    if (string.IsNullOrEmpty(objDTO.indicador) || string.IsNullOrEmpty(objDTO.fuenteDatos) || objDTO.idUsuarioResponsable <= 0 || string.IsNullOrEmpty(objDTO.meta))
                    {
                        strMensajeError += string.IsNullOrEmpty(objDTO.indicador) ? "Es necesario ingresar el indicador." : string.Empty;
                        strMensajeError += string.IsNullOrEmpty(objDTO.fuenteDatos) ? "<br>Es necesario ingresar la fuente de datos." : string.Empty;
                        strMensajeError += objDTO.idUsuarioResponsable <= 0 ? "<br>Es necesario seleccionar al responsable." : string.Empty;
                        strMensajeError += string.IsNullOrEmpty(objDTO.meta) ? "<br>Es necesario ingresar la meta." : string.Empty;
                        throw new Exception(strMensajeError);
                    }

                    #region SE REGISTRA LA NUEVA MEDICIÓN/INDICADOR
                    tblAF_CtrlPptalOfCe_RN_MedicionesIndicadores objCE = new tblAF_CtrlPptalOfCe_RN_MedicionesIndicadores();
                    objCE.idPlanMaestro = objDTO.idPlanMaestro;
                    objCE.indicador = objDTO.indicador.Trim();
                    objCE.fuenteDatos = objDTO.fuenteDatos.Trim();
                    objCE.idUsuarioResponsable = objDTO.idUsuarioResponsable;
                    objCE.meta = objDTO.meta.Trim();
                    objCE.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                    objCE.fechaCreacion = DateTime.Now;
                    objCE.registroActivo = true;
                    _context.tblAF_CtrlPptalOfCe_RN_MedicionesIndicadores.Add(objCE);
                    _context.SaveChanges();

                    resultado.Add(MESSAGE, "Se ha registrado con éxito.");
                    resultado.Add(SUCCESS, true);
                    dbContextTransaction.Commit();
                    #endregion
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "CrearEditarMedicionIndicador", e, objDTO.id > 0 ? AccionEnum.ACTUALIZAR : AccionEnum.AGREGAR, objDTO.id, objDTO);
                    resultado.Add(MESSAGE, e.Message);
                    resultado.Add(SUCCESS, false);
                }
            }
            return resultado;
        }

        public Dictionary<string, object> GetRptPlanMaestro(int id)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region SE OBTIENE LISTADO DE PLANES MAESTROS EN BASE AL AÑO Y CC
                PlanMaestroDTO objPlanMaestro = _context.Select<PlanMaestroDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"SELECT t1.id, t1.anio, t1.idCC, t2.cc + ' - ' + t2.descripcion AS cc, t1.misionArea, t1.objEspecificoMedible, t1.meta
	                                    FROM tblAF_CtrlPptalOfCe_RN_PlanMaestro AS t1
	                                    INNER JOIN tblP_CC AS t2 ON t1.idCC = t2.id
		                                    WHERE t1.id = @id AND registroActivo = @registroActivo",
                    parametros = new { id = id, registroActivo = true }
                }).FirstOrDefault();

                objPlanMaestro.lstMedicionesIndicadores = _context.tblAF_CtrlPptalOfCe_RN_MedicionesIndicadores.Where(e => e.idPlanMaestro == id && e.registroActivo).Select(e => new MedicionIndicadorDTO
                {

                    id = e.id,
                    idPlanMaestro = e.idPlanMaestro,
                    indicador = e.indicador,
                    fuenteDatos = e.fuenteDatos,
                    idUsuarioResponsable = e.idUsuarioResponsable,
                    meta = e.meta,

                }).ToList();

                objPlanMaestro.lstAgrupacionesRN = _context.tblAF_CtrllPptalOfCe_CatAgrupaciones.Where(e => e.anio == objPlanMaestro.anio && e.idCC == objPlanMaestro.idCC && e.registroActivo).Select(e => new RNAgrupacionDTO
                {

                    id = e.id,
                    anio = e.anio,
                    idCC = e.idCC,
                    agrupacion = e.nombre,
                    descripcion = e.nombre,

                }).ToList();

                var agrupacionesU = objPlanMaestro.lstAgrupacionesRN.Select(e => e.id).ToList();

                var lstAgrupaciones = objPlanMaestro.lstAgrupacionesRN.ToList();

                objPlanMaestro.lstConceptosRN = _context.tblAF_CtrlPptalOfCe_CatConceptos.Where(e => agrupacionesU.Contains(e.idAgrupacion) && e.registroActivo).Select(e => new RNConceptoDTO
                {

                    id = e.id,
                    idRNAgrupacion = e.idAgrupacion,
                    anio = 0,
                    idCC = 0,
                    concepto = e.concepto,
                    cantidad = e.cantPpto,
                }).ToList();

                foreach (var item in objPlanMaestro.lstMedicionesIndicadores)
                {
                    var objInfoUsr = _context.tblP_Usuario.FirstOrDefault(e => e.id == item.idUsuarioResponsable);
                    item.usuarioResponsable = objInfoUsr.nombre + " " + objInfoUsr.apellidoPaterno + " " + objInfoUsr.apellidoMaterno;
                }

                foreach (var item in objPlanMaestro.lstConceptosRN)
                {
                    item.descAgrupacion = lstAgrupaciones.FirstOrDefault(e => e.id == item.idRNAgrupacion).agrupacion;
                }

                resultado.Add("lstPlanMaestro", objPlanMaestro);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetPlanMaestro", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }
        #endregion

        //#region PRESUPUESTOS GASTOS
        public Dictionary<string, object> GetSumaCapturasPptosGastos(CapPptoDTO objDTO)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                List<int> auxLstCCID = new List<int>();
                List<tablaPanel3DTO> lstResultadoPpto = new List<tablaPanel3DTO>();
                if (objDTO.lstCCID != null) auxLstCCID = objDTO.lstCCID;
                var registroCentroCostoSIGOPLAN = _context.tblP_CC.Where(x => auxLstCCID.Contains(x.id)).ToList();

                #region VALIDACIONES
                if (objDTO.anio <= 0 || auxLstCCID.Count() <= 0)
                {
                    if (objDTO.anio <= 0)
                        throw new Exception("Es necesario indicar un año.");

                    if (auxLstCCID.Count() <= 0)
                        throw new Exception("Es necesario indicar un CC.");
                }
                #endregion

                #region SE VERIFICA SI EL DETALLE DEL PPTO (AÑO + CC) ESTE APROBADO
#if DEBUG
                int estatusPpto = _context.tblAF_CtrlPptalOfCe_PptoAnual.Where(w => w.anio == objDTO.anio && auxLstCCID.Contains(w.idCC) && w.autorizado).Count();
                if (estatusPpto <= 0)
                    throw new Exception("El presupuesto solicitado, no se encuentra autorizado.");
#else
                int estatusPpto = _context.tblAF_CtrlPptalOfCe_PptoAnual.Where(w => w.anio == objDTO.anio && auxLstCCID.Contains(w.idCC) && w.autorizado).Count();
                if (estatusPpto <= 0)
                    throw new Exception("El ppto solicitado, no se encuentra autorizado.");
#endif
                #endregion

                #region SE OBTIENE CAPTURAS (AÑO + CC)
                List<CapPptoDTO> lstCapturas = _context.Select<CapPptoDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    #region CONSULTA INCLUYENDO LAS ADITIVASs
                    consulta = @"
                                                SELECT
                                                    t1.id, t1.cc, t1.idAgrupacion, t1.idConcepto, t1.importeEnero, t1.importeFebrero, t1.importeMarzo, t1.importeAbril, t1.importeMayo, 
                                                    t1.importeJunio, t1.importeJulio, t1.importeAgosto, t1.importeSeptiembre, t1.importeOctubre, t1.importeNoviembre, 
                                                    t1.importeDiciembre, t1.importeTotal, t1.anio, t1.idResponsable, t2.nombre AS agrupacion, t3.concepto AS concepto,
                                                    t4.nombre + ' ' + t4.apellidoPaterno + ' ' + t4.apellidoMaterno AS responsable,
                                                    (SELECT SUM(ad.importeEnero) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeEneroAditiva,
                    	                            (SELECT SUM(ad.importeFebrero) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeFebreroAditiva,
                    	                            (SELECT SUM(ad.importeMarzo) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeMarzoAditiva,
                    	                            (SELECT SUM(ad.importeAbril) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeAbrilAditiva,
                    	                            (SELECT SUM(ad.importeMayo) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeMayoAditiva,
                    	                            (SELECT SUM(ad.importeJunio) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeJunioAditiva,
                    	                            (SELECT SUM(ad.importeJulio) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeJulioAditiva,
                    	                            (SELECT SUM(ad.importeAgosto) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeAgostoAditiva,
                    	                            (SELECT SUM(ad.importeSeptiembre) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeSeptiembreAditiva,
                    	                            (SELECT SUM(ad.importeOctubre) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeOctubreAditiva,
                    	                            (SELECT SUM(ad.importeNoviembre) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeNoviembreAditiva,
                    	                            (SELECT SUM(ad.importeDiciembre) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeDiciembreAditiva
                                                FROM tblAF_CtrlPptalOfCe_CapPptos AS t1
                    			                    INNER JOIN tblAF_CtrllPptalOfCe_CatAgrupaciones AS t2 ON t2.id = t1.idAgrupacion
                    			                    INNER JOIN tblAF_CtrlPptalOfCe_CatConceptos AS t3 ON t3.id = t1.idConcepto
                    			                    INNER JOIN tblP_Usuario AS t4 ON t4.id = t1.idResponsable
                    				            WHERE t1.registroActivo = @registroActivo AND t1.cc IN @cc AND t1.anio = @anio",
                    #endregion
                    parametros = new { registroActivo = true, cc = objDTO.lstCCID, anio = objDTO.anio }
                }).ToList();
                #endregion

                #region
                List<CapPptoDTO> lstSumaCapturas = new List<CapPptoDTO>();

                List<sc_movpolDTO> polizasTotal = new List<sc_movpolDTO>();
                List<sc_movpolDTO> polizasTotalGCPLAN = new List<sc_movpolDTO>();

                OdbcConsultaDTO query = new OdbcConsultaDTO();

                if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                {
                    query.consulta = string.Format(@"SELECT mes, SUM(monto) as monto FROM sc_movpol WHERE year = ? AND cc IN {0} AND scta != 23 AND cta = 5280 GROUP BY mes", auxLstCCID.ToParamInValue());
                    query.parametros.Add(new OdbcParameterDTO() { nombre = "year", tipo = OdbcType.Numeric, valor = objDTO.anio });
                    query.parametros.AddRange(registroCentroCostoSIGOPLAN.Select(x => new OdbcParameterDTO { nombre = "cc", tipo = OdbcType.NVarChar, valor = x.cc }).ToList());
                    polizasTotal = _contextEnkontrol.Select<sc_movpolDTO>(getEnkontrolEnumADM(), query);
                    polizasTotalGCPLAN = _contextEnkontrol.Select<sc_movpolDTO>(EnkontrolAmbienteEnum.ProdGCPLAN, query);
                    foreach (var item in polizasTotal) 
                    {
                        var _auxPolizasTotal = polizasTotalGCPLAN.Where(x => x.mes == item.mes);
                        if (_auxPolizasTotal.Count() > 0) 
                        {
                            foreach(var itemAux in _auxPolizasTotal)
                            {
                                item.monto += itemAux.monto;
                            }                            
                        }
                    }
                }
                else
                {
                    var where_areasCuenta_string = "";
                    foreach (var registroCC in registroCentroCostoSIGOPLAN)
                    {
                        where_areasCuenta_string += string.Format(@"(area = {0} AND cuenta_oc = {1})", registroCC.area, registroCC.cuenta);

                        if (registroCC != registroCentroCostoSIGOPLAN.Last())
                        {
                            where_areasCuenta_string += " OR ";
                        }
                    }

                    query.consulta = string.Format(@"SELECT mes, SUM(monto) as monto FROM sc_movpol WHERE year = ? AND {0} AND scta != 23 AND cta = 5280 GROUP BY mes", where_areasCuenta_string);
                    query.parametros.Add(new OdbcParameterDTO() { nombre = "year", tipo = OdbcType.Numeric, valor = objDTO.anio });
                    query.parametros.AddRange(registroCentroCostoSIGOPLAN.Select(x => new OdbcParameterDTO { nombre = "areas", tipo = OdbcType.NVarChar, valor = x.area }).ToList());
                    query.parametros.AddRange(registroCentroCostoSIGOPLAN.Select(x => new OdbcParameterDTO { nombre = "cuenta_oc", tipo = OdbcType.NVarChar, valor = x.cuenta }).ToList());
                    polizasTotal = _contextEnkontrol.Select<sc_movpolDTO>(getEnkontrolEnumADM(), query);

                }


                tablaPanel3DTO presupuestoTotal = new tablaPanel3DTO
                {
                    concepto = "PRESUPUESTO",
                    enero = lstCapturas.Sum(x => x.importeEnero + x.importeEneroAditiva).ToString(),
                    febrero = lstCapturas.Sum(x => x.importeFebrero + x.importeFebreroAditiva).ToString(),
                    marzo = lstCapturas.Sum(x => x.importeMarzo + x.importeMarzoAditiva).ToString(),
                    abril = lstCapturas.Sum(x => x.importeAbril + x.importeAbrilAditiva).ToString(),
                    mayo = lstCapturas.Sum(x => x.importeMayo + x.importeMayoAditiva).ToString(),
                    junio = lstCapturas.Sum(x => x.importeJunio + x.importeJunioAditiva).ToString(),
                    julio = lstCapturas.Sum(x => x.importeJulio + x.importeJulioAditiva).ToString(),
                    agosto = lstCapturas.Sum(x => x.importeAgosto + x.importeAgostoAditiva).ToString(),
                    septiembre = lstCapturas.Sum(x => x.importeSeptiembre + x.importeSeptiembreAditiva).ToString(),
                    octubre = lstCapturas.Sum(x => x.importeOctubre + x.importeOctubreAditiva).ToString(),
                    noviembre = lstCapturas.Sum(x => x.importeNoviembre + x.importeNoviembreAditiva).ToString(),
                    diciembre = lstCapturas.Sum(x => x.importeDiciembre + x.importeDiciembreAditiva).ToString(),
                    total = (
                        lstCapturas.Sum(x => x.importeEnero + x.importeEneroAditiva +
                                             x.importeFebrero + x.importeFebreroAditiva +
                                             x.importeMarzo + x.importeMarzoAditiva +
                                             x.importeAbril + x.importeAbrilAditiva +
                                             x.importeMayo + x.importeMayoAditiva +
                                             x.importeJunio + x.importeJunioAditiva +
                                             x.importeJulio + x.importeJulioAditiva +
                                             x.importeAgosto + x.importeAgostoAditiva +
                                             x.importeSeptiembre + x.importeSeptiembreAditiva +
                                             x.importeOctubre + x.importeOctubreAditiva +
                                             x.importeNoviembre + x.importeNoviembreAditiva +
                                             x.importeDiciembre + x.importeDiciembreAditiva
                                        ).ToString()
                    )
                };

                tablaPanel3DTO gastosTotal = new tablaPanel3DTO
                {
                    concepto = "GASTOS",
                    enero = polizasTotal.Where(x => x.mes == 1).Sum(x => x.monto).ToString(),
                    febrero = polizasTotal.Where(x => x.mes == 2).Sum(x => x.monto).ToString(),
                    marzo = polizasTotal.Where(x => x.mes == 3).Sum(x => x.monto).ToString(),
                    abril = polizasTotal.Where(x => x.mes == 4).Sum(x => x.monto).ToString(),
                    mayo = polizasTotal.Where(x => x.mes == 5).Sum(x => x.monto).ToString(),
                    junio = polizasTotal.Where(x => x.mes == 6).Sum(x => x.monto).ToString(),
                    julio = polizasTotal.Where(x => x.mes == 7).Sum(x => x.monto).ToString(),
                    agosto = polizasTotal.Where(x => x.mes == 8).Sum(x => x.monto).ToString(),
                    septiembre = polizasTotal.Where(x => x.mes == 9).Sum(x => x.monto).ToString(),
                    octubre = polizasTotal.Where(x => x.mes == 10).Sum(x => x.monto).ToString(),
                    noviembre = polizasTotal.Where(x => x.mes == 11).Sum(x => x.monto).ToString(),
                    diciembre = polizasTotal.Where(x => x.mes == 12).Sum(x => x.monto).ToString(),
                    total = (
                        polizasTotal.Where(w => w.mes > 0 && w.mes < 13).Sum(s => s.monto).ToString()
                    )
                };

                tablaPanel3DTO diferenciaTotal = new tablaPanel3DTO
                {
                    concepto = "DIFERENCIA VS PRESUPUESTO",
                    enero = (lstCapturas.Sum(x => x.importeEnero + x.importeEneroAditiva) - polizasTotal.Where(x => x.mes == 1).Sum(x => x.monto)).ToString(), //FEBRERO ADITIVA EN ENERO?
                    febrero = (lstCapturas.Sum(x => x.importeFebrero + x.importeFebreroAditiva) - polizasTotal.Where(x => x.mes == 2).Sum(x => x.monto)).ToString(),
                    marzo = (lstCapturas.Sum(x => x.importeMarzo + x.importeMarzoAditiva) - polizasTotal.Where(x => x.mes == 3).Sum(x => x.monto)).ToString(),
                    abril = (lstCapturas.Sum(x => x.importeAbril + x.importeAbrilAditiva) - polizasTotal.Where(x => x.mes == 4).Sum(x => x.monto)).ToString(),
                    mayo = (lstCapturas.Sum(x => x.importeMayo + x.importeMayoAditiva) - polizasTotal.Where(x => x.mes == 5).Sum(x => x.monto)).ToString(),
                    junio = (lstCapturas.Sum(x => x.importeJunio + x.importeJunioAditiva) - polizasTotal.Where(x => x.mes == 6).Sum(x => x.monto)).ToString(),
                    julio = (lstCapturas.Sum(x => x.importeJulio + x.importeJulioAditiva) - polizasTotal.Where(x => x.mes == 7).Sum(x => x.monto)).ToString(),
                    agosto = (lstCapturas.Sum(x => x.importeAgosto + x.importeAgostoAditiva) - polizasTotal.Where(x => x.mes == 8).Sum(x => x.monto)).ToString(),
                    septiembre = (lstCapturas.Sum(x => x.importeSeptiembre + x.importeSeptiembreAditiva) - polizasTotal.Where(x => x.mes == 9).Sum(x => x.monto)).ToString(),
                    octubre = (lstCapturas.Sum(x => x.importeOctubre + x.importeOctubreAditiva) - polizasTotal.Where(x => x.mes == 10).Sum(x => x.monto)).ToString(),
                    noviembre = (lstCapturas.Sum(x => x.importeNoviembre + x.importeNoviembreAditiva) - polizasTotal.Where(x => x.mes == 11).Sum(x => x.monto)).ToString(),
                    diciembre = (lstCapturas.Sum(x => x.importeDiciembre + x.importeDiciembreAditiva) - polizasTotal.Where(x => x.mes == 12).Sum(x => x.monto)).ToString(),
                    total = (
                        (
                            (lstCapturas.Sum(x => x.importeEnero + x.importeFebreroAditiva) - polizasTotal.Where(x => x.mes == 1).Sum(x => x.monto)) +
                            (lstCapturas.Sum(x => x.importeFebrero + x.importeFebreroAditiva) - polizasTotal.Where(x => x.mes == 2).Sum(x => x.monto)) +
                            (lstCapturas.Sum(x => x.importeMarzo + x.importeMarzoAditiva) - polizasTotal.Where(x => x.mes == 3).Sum(x => x.monto)) +
                            (lstCapturas.Sum(x => x.importeAbril + x.importeAbrilAditiva) - polizasTotal.Where(x => x.mes == 4).Sum(x => x.monto)) +
                            (lstCapturas.Sum(x => x.importeMayo + x.importeMayoAditiva) - polizasTotal.Where(x => x.mes == 5).Sum(x => x.monto)) +
                            (lstCapturas.Sum(x => x.importeJunio + x.importeJunioAditiva) - polizasTotal.Where(x => x.mes == 6).Sum(x => x.monto)) +
                            (lstCapturas.Sum(x => x.importeJulio + x.importeJulioAditiva) - polizasTotal.Where(x => x.mes == 7).Sum(x => x.monto)) +
                            (lstCapturas.Sum(x => x.importeAgosto + x.importeAgostoAditiva) - polizasTotal.Where(x => x.mes == 8).Sum(x => x.monto)) +
                            (lstCapturas.Sum(x => x.importeSeptiembre + x.importeSeptiembreAditiva) - polizasTotal.Where(x => x.mes == 9).Sum(x => x.monto)) +
                            (lstCapturas.Sum(x => x.importeOctubre + x.importeOctubreAditiva) - polizasTotal.Where(x => x.mes == 10).Sum(x => x.monto)) +
                            (lstCapturas.Sum(x => x.importeNoviembre + x.importeNoviembreAditiva) - polizasTotal.Where(x => x.mes == 11).Sum(x => x.monto)) +
                            (lstCapturas.Sum(x => x.importeDiciembre + x.importeDiciembreAditiva) - polizasTotal.Where(x => x.mes == 12).Sum(x => x.monto))
                        ).ToString()
                    )
                };

                tablaPanel3DTO cumplimientoTotal = new tablaPanel3DTO
                {
                    concepto = "CUMPLIMIENTO",
                    enero = Math.Round((lstCapturas.Sum(x => x.importeEnero + x.importeEneroAditiva) == 0 ? 0 : (polizasTotal.Where(x => x.mes == 1).Sum(x => x.monto) * 100) / lstCapturas.Sum(x => x.importeEnero + x.importeEneroAditiva)), 2).ToString(),
                    febrero = Math.Round((lstCapturas.Sum(x => x.importeFebrero + x.importeFebreroAditiva) == 0 ? 0 : (polizasTotal.Where(x => x.mes == 2).Sum(x => x.monto) * 100) / lstCapturas.Sum(x => x.importeFebrero + x.importeFebreroAditiva)), 2).ToString(),
                    marzo = Math.Round((lstCapturas.Sum(x => x.importeMarzo + x.importeMarzoAditiva) == 0 ? 0 : (polizasTotal.Where(x => x.mes == 3).Sum(x => x.monto) * 100) / lstCapturas.Sum(x => x.importeMarzo + x.importeMarzoAditiva)), 2).ToString(),
                    abril = Math.Round((lstCapturas.Sum(x => x.importeAbril + x.importeAbrilAditiva) == 0 ? 0 : (polizasTotal.Where(x => x.mes == 4).Sum(x => x.monto) * 100) / lstCapturas.Sum(x => x.importeAbril + x.importeAbrilAditiva)), 2).ToString(),
                    mayo = Math.Round((lstCapturas.Sum(x => x.importeMayo + x.importeMayoAditiva) == 0 ? 0 : (polizasTotal.Where(x => x.mes == 5).Sum(x => x.monto) * 100) / lstCapturas.Sum(x => x.importeMayo + x.importeMarzoAditiva)), 2).ToString(),
                    junio = Math.Round((lstCapturas.Sum(x => x.importeJunio + x.importeJunioAditiva) == 0 ? 0 : (polizasTotal.Where(x => x.mes == 6).Sum(x => x.monto) * 100) / lstCapturas.Sum(x => x.importeJunio + x.importeJunioAditiva)), 2).ToString(),
                    julio = Math.Round((lstCapturas.Sum(x => x.importeJulio + x.importeJulioAditiva) == 0 ? 0 : (polizasTotal.Where(x => x.mes == 7).Sum(x => x.monto) * 100) / lstCapturas.Sum(x => x.importeJulio + x.importeJulioAditiva)), 2).ToString(),
                    agosto = Math.Round((lstCapturas.Sum(x => x.importeAgosto + x.importeAgostoAditiva) == 0 ? 0 : (polizasTotal.Where(x => x.mes == 8).Sum(x => x.monto) * 100) / lstCapturas.Sum(x => x.importeAgosto + x.importeAgostoAditiva)), 2).ToString(),
                    septiembre = Math.Round((lstCapturas.Sum(x => x.importeSeptiembre + x.importeSeptiembreAditiva) == 0 ? 0 : (polizasTotal.Where(x => x.mes == 9).Sum(x => x.monto) * 100) / lstCapturas.Sum(x => x.importeSeptiembre + x.importeSeptiembreAditiva)), 2).ToString(),
                    octubre = Math.Round((lstCapturas.Sum(x => x.importeOctubre + x.importeOctubreAditiva) == 0 ? 0 : (polizasTotal.Where(x => x.mes == 10).Sum(x => x.monto) * 100) / lstCapturas.Sum(x => x.importeOctubre + x.importeOctubreAditiva)), 2).ToString(),
                    noviembre = Math.Round((lstCapturas.Sum(x => x.importeNoviembre + x.importeNoviembreAditiva) == 0 ? 0 : (polizasTotal.Where(x => x.mes == 11).Sum(x => x.monto) * 100) / lstCapturas.Sum(x => x.importeNoviembre + x.importeNoviembreAditiva)), 2).ToString(),
                    diciembre = Math.Round((lstCapturas.Sum(x => x.importeDiciembre + x.importeDiciembreAditiva) == 0 ? 0 : (polizasTotal.Where(x => x.mes == 12).Sum(x => x.monto) * 100) / lstCapturas.Sum(x => x.importeDiciembre + x.importeDiciembreAditiva)), 2).ToString(),
                    total =
                    ((
                        Math.Round((lstCapturas.Sum(x => x.importeEnero + x.importeEneroAditiva) == 0 ? 0 : (polizasTotal.Where(x => x.mes == 1).Sum(x => x.monto) * 100) / lstCapturas.Sum(x => x.importeEnero + x.importeEneroAditiva)), 2) +
                        Math.Round((lstCapturas.Sum(x => x.importeFebrero + x.importeFebreroAditiva) == 0 ? 0 : (polizasTotal.Where(x => x.mes == 2).Sum(x => x.monto) * 100) / lstCapturas.Sum(x => x.importeFebrero + x.importeFebreroAditiva)), 2) +
                        Math.Round((lstCapturas.Sum(x => x.importeMarzo + x.importeMarzoAditiva) == 0 ? 0 : (polizasTotal.Where(x => x.mes == 3).Sum(x => x.monto) * 100) / lstCapturas.Sum(x => x.importeMarzo + x.importeMarzoAditiva)), 2) +
                        Math.Round((lstCapturas.Sum(x => x.importeAbril + x.importeAbrilAditiva) == 0 ? 0 : (polizasTotal.Where(x => x.mes == 4).Sum(x => x.monto) * 100) / lstCapturas.Sum(x => x.importeAbril + x.importeAbrilAditiva)), 2) +
                        Math.Round((lstCapturas.Sum(x => x.importeMayo + x.importeMayoAditiva) == 0 ? 0 : (polizasTotal.Where(x => x.mes == 5).Sum(x => x.monto) * 100) / lstCapturas.Sum(x => x.importeMayo + x.importeMarzoAditiva)), 2) +
                        Math.Round((lstCapturas.Sum(x => x.importeJunio + x.importeJunioAditiva) == 0 ? 0 : (polizasTotal.Where(x => x.mes == 6).Sum(x => x.monto) * 100) / lstCapturas.Sum(x => x.importeJunio + x.importeJunioAditiva)), 2) +
                        Math.Round((lstCapturas.Sum(x => x.importeJulio + x.importeJulioAditiva) == 0 ? 0 : (polizasTotal.Where(x => x.mes == 7).Sum(x => x.monto) * 100) / lstCapturas.Sum(x => x.importeJulio + x.importeJulioAditiva)), 2) +
                        Math.Round((lstCapturas.Sum(x => x.importeAgosto + x.importeAgostoAditiva) == 0 ? 0 : (polizasTotal.Where(x => x.mes == 8).Sum(x => x.monto) * 100) / lstCapturas.Sum(x => x.importeAgosto + x.importeAgostoAditiva)), 2) +
                        Math.Round((lstCapturas.Sum(x => x.importeSeptiembre + x.importeSeptiembreAditiva) == 0 ? 0 : (polizasTotal.Where(x => x.mes == 9).Sum(x => x.monto) * 100) / lstCapturas.Sum(x => x.importeSeptiembre + x.importeSeptiembreAditiva)), 2) +
                        Math.Round((lstCapturas.Sum(x => x.importeOctubre + x.importeOctubreAditiva) == 0 ? 0 : (polizasTotal.Where(x => x.mes == 10).Sum(x => x.monto) * 100) / lstCapturas.Sum(x => x.importeOctubre + x.importeOctubreAditiva)), 2) +
                        Math.Round((lstCapturas.Sum(x => x.importeNoviembre + x.importeNoviembreAditiva) == 0 ? 0 : (polizasTotal.Where(x => x.mes == 11).Sum(x => x.monto) * 100) / lstCapturas.Sum(x => x.importeNoviembre + x.importeNoviembreAditiva)), 2) +
                        Math.Round((lstCapturas.Sum(x => x.importeDiciembre + x.importeDiciembreAditiva) == 0 ? 0 : (polizasTotal.Where(x => x.mes == 12).Sum(x => x.monto) * 100) / lstCapturas.Sum(x => x.importeDiciembre + x.importeDiciembreAditiva)), 2)
                    ) / 12).ToString()
                };

                lstResultadoPpto.Add(presupuestoTotal);
                lstResultadoPpto.Add(gastosTotal);
                lstResultadoPpto.Add(diferenciaTotal);
                lstResultadoPpto.Add(cumplimientoTotal);
                #endregion

                resultado.Add("lstSumaCapturas", lstResultadoPpto);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetSumaCapturasPptosGastos", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> GetDataGraficasInforme(int year, int mes, List<int> arrConstruplan, List<int> arrArrendadora, bool costosAdministrativos)
        {
            try
            {
                //session["ControlPresupuestalDatos"] = null;
                List<MovPolControlPptalDTO> datosGenerales = new List<MovPolControlPptalDTO>();
                string strQuery = string.Empty;
                var ratioGastoVsIngreso = 0M;
                if ((int)EmpresaEnum.Construplan == vSesiones.sesionEmpresaActual)
                    ratioGastoVsIngreso = 3.6M;
                else
                    ratioGastoVsIngreso = 3.6M;

                List<tblAF_CtrlPptal_GastoIngresoRatio> listaCCRatio = _context.tblAF_CtrlPptal_GastoIngresoRatio.Where(x => x.registroActivo).ToList();
                //if (listaCCRatio.Count != arrConstruplan.Count)
                ratioGastoVsIngreso = 3.6M; // AHORA TODOS LOS CC, AUNQUE LA SELECCIÓN DEL LISTADO SEA SOLO 1, SU RATIO SERA 3.6

                tblAF_CtrlPptalOfCe_PptoInicial periodoPresupuesto = _context.tblAF_CtrlPptalOfCe_PptoInicial.FirstOrDefault(x => x.anio == year && x.registroActivo);

                #region PRESUPUESTO ARRENDADORA
                tblAF_CtrlPptalOfCe_PptoInicial periodoPresupuestoArr = _context.Select<tblAF_CtrlPptalOfCe_PptoInicial>(new DapperDTO
                {
                    baseDatos = MainContextEnum.Arrendadora,
                    consulta = @"SELECT * FROM tblAF_CtrlPptalOfCe_PptoInicial WHERE anio = @anio AND registroActivo = @registroActivo",
                    parametros = new { anio = year, registroActivo = true }
                }).FirstOrDefault();
                #endregion

                if (periodoPresupuesto != null || periodoPresupuestoArr != null)
                {
                    List<tblAF_CtrlPptalOfCe_PptoAnual> presupuestos = new List<tblAF_CtrlPptalOfCe_PptoAnual>();

                    // CP
                    if (arrConstruplan != null && arrConstruplan.Count() > 0)
                    {
                        presupuestos = _context.tblAF_CtrlPptalOfCe_PptoAnual
                                                                                   .Where(x => x.pptoInicialID == periodoPresupuesto.id &&
                                                                                               x.registroActivo && x.autorizado).ToList().Where(x =>
                                                                                               (arrConstruplan != null ? arrConstruplan.Contains(x.idCC) : true)).ToList();
                    }

                    string strQueryARR = string.Empty;
                    List<tblAF_CtrlPptalOfCe_PptoAnual> presupuestosArr = new List<tblAF_CtrlPptalOfCe_PptoAnual>();
                    if (arrArrendadora != null && arrArrendadora.Count() > 0)
                    {
                        strQueryARR = string.Format(@"SELECT * FROM tblAF_CtrlPptalOfCe_PptoAnual WHERE pptoInicialID = {0} AND registroActivo = 1 AND autorizado = 1 AND idCC IN ({1})", periodoPresupuestoArr.id, string.Join(",", arrArrendadora));
                        presupuestosArr = _context.Select<tblAF_CtrlPptalOfCe_PptoAnual>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Arrendadora,
                            consulta = strQueryARR
                        }).ToList();
                    }

                    List<tblAF_CtrlPptalOfCe_CapPptos> actividades = new List<tblAF_CtrlPptalOfCe_CapPptos>();

                    List<tblP_CC> lstCC = _context.tblP_CC.Where(w => w.estatus).ToList();

                    List<tblP_CC> lstCC_Arr = _context.Select<tblP_CC>(new DapperDTO
                    {
                        baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                        consulta = @"SELECT * FROM tblP_CC WHERE estatus = 1"
                    }).ToList();

                    var ccs = new List<string>();
                    var ccsArr = new List<string>();
                    List<int> lstAreasPol = new List<int>();
                    List<int> lstCuentasPol = new List<int>();

                    #region CONSTRUPLAN
                    foreach (var presupuesto in presupuestos)
                    {
                        int idCC = presupuesto.idCC;
                        string strCCID = presupuesto.idCC.ToString();
                        string cc = string.Empty;

                        if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                            cc = lstCC.Where(w => w.id == idCC && w.estatus).Select(s => s.cc).FirstOrDefault();
                        else
                            cc = presupuesto.cc;

                        int area = lstCC.Where(w => w.id == idCC && w.estatus).Select(s => s.area).FirstOrDefault();
                        int cuenta = lstCC.Where(w => w.id == idCC && w.estatus).Select(s => s.cuenta).FirstOrDefault();
                        lstAreasPol.Add(area);
                        lstCuentasPol.Add(cuenta);

                        ccs.Add(cc);

                        actividades.AddRange(_context.tblAF_CtrlPptalOfCe_CapPptos
                            .Where(x =>
                                x.cc == strCCID &&
                                x.anio == year &&
                                x.registroActivo
                            ));
                    }
                    #endregion

                    #region ARRENDADORA
                    foreach (var presupuesto in presupuestosArr)
                    {
                        int idCC = presupuesto.idCC;
                        string strCCID = presupuesto.idCC.ToString();
                        string cc = string.Empty;

                        cc = lstCC_Arr.Where(w => w.id == idCC && w.estatus).Select(s => s.cc).FirstOrDefault();

                        int area = lstCC_Arr.Where(w => w.id == idCC && w.estatus).Select(s => s.area).FirstOrDefault();
                        int cuenta = lstCC_Arr.Where(w => w.id == idCC && w.estatus).Select(s => s.cuenta).FirstOrDefault();
                        lstAreasPol.Add(area);
                        lstCuentasPol.Add(cuenta);

                        ccsArr.Add(cc);

                        strQueryARR = string.Empty;
                        strQueryARR = string.Format(@"SELECT * FROM tblAF_CtrlPptalOfCe_CapPptos WHERE cc = {0} AND anio = {1} AND registroActivo = 1", strCCID, year);
                        List<tblAF_CtrlPptalOfCe_CapPptos> lstActividadesArr = _context.Select<tblAF_CtrlPptalOfCe_CapPptos>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Arrendadora,
                            consulta = strQueryARR
                        }).ToList();

                        actividades.AddRange(lstActividadesArr);
                    }
                    #endregion

                    var gasto = 0M;
                    var ingreso = 0M;
                    var ingresoDB = 0M;

                    OdbcConsultaDTO query = new OdbcConsultaDTO();
                    OdbcConsultaDTO queryArr = new OdbcConsultaDTO();
                    if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan && arrConstruplan != null && arrArrendadora == null)
                    {
                        #region CONSTRUPLAN

                        var _excepcionCC = Enum.GetValues(typeof(ExcepcionesCCEnum));
                        List<int> excepcionCC = new List<int>((int[])_excepcionCC);
                        List<string> lstExcepcionCC = new List<string>();
                        var auxExcepcionCC = arrConstruplan.Where(x => excepcionCC.Contains(x)).ToList();
                        foreach (var item in auxExcepcionCC) { lstExcepcionCC.Add(((ExcepcionesCCEnum)item).GetDescription()); }

                        //var whereExcepcionCC = "";

                        //if (excepcionCC.Count() > 0)
                        //{
                        //    whereExcepcionCC = "OR ";                                
                        //    whereExcepcionCC += "(cc in (";
                        //    foreach (var item in excepcionCC) whereExcepcionCC += "'" + ((ExcepcionesCCEnum)item).GetDescription() + "',";
                        //    whereExcepcionCC = whereExcepcionCC.Substring(0, whereExcepcionCC.Length - 1);
                        //    whereExcepcionCC += ") AND cta in (5000, 5900))";
                        //}
                        var consulta_ppal = "";
                        List<string> mesesConsulta = new List<string> { "ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic" };

                        for (int i = 1; i <= mes; i++)
                        {
                            if (i == mes)
                            {
                                consulta_ppal += string.Format(
                                    @"SELECT year, cta, scta, sscta, cc, mes, sum(monto) AS monto, 1 AS empresa FROM sc_movpol WHERE (year = ? OR year = ?) AND mes = " + i.ToString() + " AND scta != 23 AND cta = 5280 AND cc IN {0} GROUP BY mes, year, cta, scta, sscta, cc"
                                    , ccs.ToParamInValue());
                                if (lstExcepcionCC.Count() > 0)
                                {
                                    consulta_ppal += string.Format(
                                        @" UNION SELECT year, cta, scta, sscta, cc, mes, sum(monto) AS monto, 1 AS empresa FROM sc_movpol WHERE (year = ? OR year = ?) AND mes = " + i.ToString() + " AND scta != 23 AND cta = 5000 AND cc IN {0} GROUP BY mes, year, cta, scta, sscta, cc"
                                        , lstExcepcionCC.ToParamInValue());
                                }
                            }
                            else
                            {
                                consulta_ppal += string.Format(
                                    @"SELECT year, cta, scta, sscta, cc, " + i.ToString() + " as mes, sum(" + mesesConsulta[i - 1] + "cargos + " + mesesConsulta[i - 1] + "abonos) AS monto, 1 AS empresa FROM sc_salcont_cc WHERE (year = ? OR year = ?) AND cta = 5280 AND cc IN {0} GROUP BY year, cta, scta, sscta, cc UNION "
                                    , ccs.ToParamInValue());
                                if (lstExcepcionCC.Count() > 0)
                                {
                                    consulta_ppal += string.Format(
                                    @"SELECT year, cta, scta, sscta, cc, " + i.ToString() + " as mes, sum(" + mesesConsulta[i - 1] + "cargos + " + mesesConsulta[i - 1] + "abonos) AS monto, 1 AS empresa FROM sc_salcont_cc WHERE (year = ? OR year = ?) AND cta = 5000 AND cc IN {0} GROUP BY year, cta, scta, sscta, cc UNION "
                                    , lstExcepcionCC.ToParamInValue());
                                }
                            }
                            query.parametros.Add(new OdbcParameterDTO
                            {
                                nombre = "year",
                                tipo = OdbcType.Int,
                                valor = year
                            });
                            query.parametros.Add(new OdbcParameterDTO
                            {
                                nombre = "year",
                                tipo = OdbcType.Int,
                                valor = year - 1
                            });
                            query.parametros.AddRange(ccs.Select(x => new OdbcParameterDTO
                            {
                                nombre = "cc",
                                tipo = OdbcType.NVarChar,
                                valor = x
                            }).ToList());
                            if (lstExcepcionCC.Count() > 0)
                            {
                                query.parametros.Add(new OdbcParameterDTO
                                {
                                    nombre = "year",
                                    tipo = OdbcType.Int,
                                    valor = year
                                });
                                query.parametros.Add(new OdbcParameterDTO
                                {
                                    nombre = "year",
                                    tipo = OdbcType.Int,
                                    valor = year - 1
                                });
                                query.parametros.AddRange(lstExcepcionCC.Select(x => new OdbcParameterDTO
                                {
                                    nombre = "cc",
                                    tipo = OdbcType.NVarChar,
                                    valor = x
                                }).ToList());
                            }
                        }

                        query.consulta = consulta_ppal;
                        #endregion
                    }
                    else if (((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora && arrArrendadora != null && arrConstruplan == null) || (arrConstruplan == null && arrArrendadora != null))
                    {
                        #region ARRENDADORA
                        var areasCuentas = _context.tblP_CC.Where(x => arrArrendadora.Contains(x.id)).ToList();
                        var where_area_cuenta = "";
                        foreach (var areaCuenta in areasCuentas)
                        {
                            where_area_cuenta += string.Format(@"(area = {0} AND cuenta_oc = {1})", areaCuenta.area, areaCuenta.cuenta);

                            if (areaCuenta != areasCuentas.Last())
                            {
                                where_area_cuenta += " OR ";
                            }
                        }

                        queryArr.consulta = string.Format(
                            @"SELECT year, mes, cta, scta, sscta, area, cuenta_oc, sum(monto) AS monto, 2 AS empresa FROM sc_movpol WHERE (year = ? OR year = ?) AND mes <= ? AND scta != 23 AND (cta = 5280 {0}) AND ({1}) GROUP BY year, mes, cta, scta, sscta, area, cuenta_oc", (costosAdministrativos ? "" : "OR cta = 5000"), where_area_cuenta);

                        queryArr.parametros.Add(new OdbcParameterDTO { nombre = "year", tipo = OdbcType.Int, valor = year });
                        queryArr.parametros.Add(new OdbcParameterDTO { nombre = "year", tipo = OdbcType.Int, valor = (year - 1) });
                        queryArr.parametros.Add(new OdbcParameterDTO { nombre = "mes", tipo = OdbcType.Int, valor = mes });
                        #endregion
                    }
                    else if (arrConstruplan.Count() > 0 && (arrArrendadora != null || arrArrendadora.Count() > 0))
                    {
                        #region CONSTRUPLAN
                        var consulta_ppal = "";
                        List<string> mesesConsulta = new List<string> { "ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic" };
                        var _excepcionCC = Enum.GetValues(typeof(ExcepcionesCCEnum));
                        List<int> excepcionCC = new List<int>((int[])_excepcionCC);
                        List<string> lstExcepcionCC = new List<string>();
                        var auxExcepcionCC = arrConstruplan.Where(x => excepcionCC.Contains(x)).ToList();
                        foreach (var item in auxExcepcionCC) { lstExcepcionCC.Add(((ExcepcionesCCEnum)item).GetDescription()); }

                        for (int i = 1; i <= mes; i++)
                        {
                            if (i == mes)
                            {
                                consulta_ppal += string.Format(
                                    @"SELECT year, cta, scta, sscta, cc, mes, sum(monto) AS monto, 1 AS empresa FROM sc_movpol WHERE (year = ? OR year = ?) AND mes = " + i.ToString() + " AND scta != 23 AND cta = 5280 AND cc IN {0} GROUP BY mes, year, cta, scta, sscta, cc"
                                    , ccs.ToParamInValue());
                                if (lstExcepcionCC.Count() > 0)
                                {
                                    consulta_ppal += string.Format(
                                        @" UNION SELECT year, cta, scta, sscta, cc, mes, sum(monto) AS monto, 1 AS empresa FROM sc_movpol WHERE (year = ? OR year = ?) AND mes = " + i.ToString() + " AND scta != 23 AND cta = 5000 AND cc IN {0} GROUP BY mes, year, cta, scta, sscta, cc"
                                        , lstExcepcionCC.ToParamInValue());
                                }
                            }
                            else
                            {
                                consulta_ppal += string.Format(
                                    @"SELECT year, cta, scta, sscta, cc, " + i.ToString() + " as mes, sum(" + mesesConsulta[i - 1] + "cargos + " + mesesConsulta[i - 1] + "abonos) AS monto, 1 AS empresa FROM sc_salcont_cc WHERE (year = ? OR year = ?) AND cta = 5280 AND cc IN {0} GROUP BY year, cta, scta, sscta, cc UNION "
                                    , ccs.ToParamInValue());
                                if (lstExcepcionCC.Count() > 0)
                                {
                                    consulta_ppal += string.Format(
                                    @"SELECT year, cta, scta, sscta, cc, " + i.ToString() + " as mes, sum(" + mesesConsulta[i - 1] + "cargos + " + mesesConsulta[i - 1] + "abonos) AS monto, 1 AS empresa FROM sc_salcont_cc WHERE (year = ? OR year = ?) AND cta = 5000 AND cc IN {0} GROUP BY year, cta, scta, sscta, cc UNION "
                                    , lstExcepcionCC.ToParamInValue());
                                }
                            }
                            query.parametros.Add(new OdbcParameterDTO
                            {
                                nombre = "year",
                                tipo = OdbcType.Int,
                                valor = year
                            });
                            query.parametros.Add(new OdbcParameterDTO
                            {
                                nombre = "year",
                                tipo = OdbcType.Int,
                                valor = year - 1
                            });
                            query.parametros.AddRange(ccs.Select(x => new OdbcParameterDTO
                            {
                                nombre = "cc",
                                tipo = OdbcType.NVarChar,
                                valor = x
                            }).ToList());
                            if (lstExcepcionCC.Count() > 0)
                            {
                                query.parametros.Add(new OdbcParameterDTO
                                {
                                    nombre = "year",
                                    tipo = OdbcType.Int,
                                    valor = year
                                });
                                query.parametros.Add(new OdbcParameterDTO
                                {
                                    nombre = "year",
                                    tipo = OdbcType.Int,
                                    valor = year - 1
                                });
                                query.parametros.AddRange(lstExcepcionCC.Select(x => new OdbcParameterDTO
                                {
                                    nombre = "cc",
                                    tipo = OdbcType.NVarChar,
                                    valor = x
                                }).ToList());
                            }
                        }

                        query.consulta = consulta_ppal;
                        #endregion

                        #region ARRENDADORA
                        var areasCuentas = _context.tblP_CC.Where(x => arrArrendadora.Contains(x.id)).ToList();
                        var where_area_cuenta = "";
                        foreach (var areaCuenta in areasCuentas)
                        {
                            where_area_cuenta += string.Format(@"(area = {0} AND cuenta_oc = {1})", areaCuenta.area, areaCuenta.cuenta);

                            if (areaCuenta != areasCuentas.Last())
                            {
                                where_area_cuenta += " OR ";
                            }
                        }

                        queryArr.consulta = string.Format(
                            @"SELECT year, mes, cta, scta, sscta, area, cuenta_oc, sum(monto) AS monto, 2 AS empresa FROM sc_movpol WHERE (year = ? OR year = ?) AND mes <= ? AND scta != 23 AND (cta = 5280 {0}) AND ({1}) GROUP BY year, mes, cta, scta, sscta, area, cuenta_oc", (costosAdministrativos ? "" : "OR cta = 5000"), where_area_cuenta);

                        queryArr.parametros.Add(new OdbcParameterDTO { nombre = "year", tipo = OdbcType.Int, valor = year });
                        queryArr.parametros.Add(new OdbcParameterDTO { nombre = "year", tipo = OdbcType.Int, valor = (year - 1) });
                        queryArr.parametros.Add(new OdbcParameterDTO { nombre = "mes", tipo = OdbcType.Int, valor = mes });
                        #endregion
                    }

                    List<SumaDTO> gastos = new List<SumaDTO>();
                    List<MovPolControlPptalDTO> auxGastos = new List<MovPolControlPptalDTO>();
                    List<MovPolControlPptalDTO> auxGastosGCPLAN = new List<MovPolControlPptalDTO>();
                    if (query.consulta != null)
                    {
                        auxGastos = _contextEnkontrol.Select<MovPolControlPptalDTO>(EnkontrolAmbienteEnum.ProdCPLAN, query);
                        datosGenerales.AddRange(auxGastos);
                        auxGastosGCPLAN = _contextEnkontrol.Select<MovPolControlPptalDTO>(EnkontrolAmbienteEnum.ProdGCPLAN, query);
                        datosGenerales.AddRange(auxGastosGCPLAN);
                    }

                    List<SumaDTO> gastosArr = new List<SumaDTO>();
                    List<MovPolControlPptalDTO> auxGastosArr = new List<MovPolControlPptalDTO>();
                    if (queryArr.consulta != null)
                    {
                        auxGastosArr = _contextEnkontrol.Select<MovPolControlPptalDTO>(EnkontrolAmbienteEnum.ProdARREND, queryArr);
                        datosGenerales.AddRange(auxGastosArr);
                    }

                    gastos = auxGastos.Where(x => x.year == year && ((x.mes == mes) || (x.mes < mes && x.scta == 0 && x.sscta == 0) || (x.mes < mes && x.scta == 23 && x.sscta == 0))).GroupBy(x => x.mes).Select(x => new SumaDTO
                    {
                        mes = x.Key,
                        suma = x.Where(y => y.scta != 23).Sum(y => y.monto) - x.Where(y => y.scta == 23).Sum(y => y.monto)
                    }).ToList();

                    gastosArr = auxGastosArr.Where(x => x.year == year).GroupBy(x => x.mes).Select(x => new SumaDTO
                    {
                        mes = x.Key,
                        suma = x.Sum(y => y.monto)
                    }).ToList();

                    //session["ControlPresupuestalDatos"] = datosGenerales;

                    gasto = gastos.Sum(x => x.suma);
                    gasto += gastosArr.Sum(s => s.suma);

                    var graficaGastoIngreso = new GraficaArcoDTO();

                    #region INGRESO CONSTRUPLAN
                    List<SumaDTO> ingresos = new List<SumaDTO>();
                    List<SumaDTO> ingresosGCPLAN = new List<SumaDTO>();
                    using (var _ctxCplan = new MainContext(EmpresaEnum.Construplan))
                    {
                        var cuentasIngresos = _ctxCplan.tblAF_CtrlCuenta.Where(x => x.tipoCuenta == 1 && x.registroActivo).ToList();

                        string whereIngresos = "";
                        foreach (var ctaIngreso in cuentasIngresos)
                        {
                            whereIngresos += "(cta = " + ctaIngreso.cta + " AND scta = " + ctaIngreso.scta + " AND sscta = " + ctaIngreso.sscta + ")";

                            if (ctaIngreso != cuentasIngresos.Last())
                            {
                                whereIngresos += " OR ";
                            }
                        }

                        OdbcConsultaDTO queryIngresos = new OdbcConsultaDTO();

                        var consulta_ppal_ingresos = "";
                        List<string> mesesConsulta = new List<string> { "ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic" };

                        for (int i = 1; i <= mes; i++)
                        {
                            if (i == mes)
                            {
                                consulta_ppal_ingresos += string.Format(
                                        @"SELECT " + i.ToString() + ", sum(monto) AS suma FROM sc_movpol WHERE year = ? AND mes = " + i.ToString() + " AND (" + whereIngresos + ")"
                                        , whereIngresos);
                            }
                            else
                            {
                                consulta_ppal_ingresos += string.Format(
                                    @"SELECT " + i.ToString() + " as mes, (SELECT sum(" + mesesConsulta[i - 1] + "cargos + " + mesesConsulta[i - 1] + "abonos) FROM sc_salcont_cc WHERE year = ? AND (" + whereIngresos + ")) as suma UNION "
                                    , whereIngresos);
                            }
                            queryIngresos.parametros.Add(new OdbcParameterDTO
                            {
                                nombre = "year",
                                tipo = OdbcType.Int,
                                valor = year
                            });
                        }

                        queryIngresos.consulta = consulta_ppal_ingresos;


                        ingresos = _contextEnkontrol.Select<SumaDTO>(EnkontrolAmbienteEnum.ProdCPLAN, queryIngresos);
                        ingresosGCPLAN = _contextEnkontrol.Select<SumaDTO>(EnkontrolAmbienteEnum.ProdGCPLAN, queryIngresos);
                        ingresos.AddRange(ingresosGCPLAN);
                    }
                    #endregion

                    #region INGRESO ARRENDADORA
                    List<SumaDTO> ingresoArrendadora = new List<SumaDTO>();
                    using (var _ctxArre = new MainContext(EmpresaEnum.Arrendadora))
                    {
                        var cuentasIngresosArre = _ctxArre.tblAF_CtrlCuenta.Where(x => x.tipoCuenta == 1 && x.registroActivo).ToList();

                        string whereIngresosArre = "";
                        foreach (var ctaIngreso in cuentasIngresosArre)
                        {
                            whereIngresosArre += "(cta = " + ctaIngreso.cta + " AND scta = " + ctaIngreso.scta + " AND sscta = " + ctaIngreso.sscta + ")";
                            if (ctaIngreso != cuentasIngresosArre.Last())
                            {
                                whereIngresosArre += " OR ";
                            }
                        }

                        OdbcConsultaDTO queryIngresosArre = new OdbcConsultaDTO();

                        var consulta_ppal_ingresos_arrendadora = "";
                        List<string> mesesConsulta = new List<string> { "ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic" };

                        for (int i = 1; i <= mes; i++)
                        {
                            if (i == mes)
                            {
                                consulta_ppal_ingresos_arrendadora += string.Format(
                                        @"SELECT " + i.ToString() + ", sum(monto) AS suma FROM sc_movpol WHERE year = ? AND mes = " + i.ToString() + " AND (" + whereIngresosArre + ") AND cc = '227'"
                                        , whereIngresosArre);
                            }
                            else
                            {
                                consulta_ppal_ingresos_arrendadora += string.Format(
                                    @"SELECT " + i.ToString() + " as mes, (SELECT sum(" + mesesConsulta[i - 1] + "cargos + " + mesesConsulta[i - 1] + "abonos) FROM sc_salcont_cc WHERE year = ? AND (" + whereIngresosArre + ") AND cc = '227') as suma UNION "
                                    , whereIngresosArre);
                            }
                            queryIngresosArre.parametros.Add(new OdbcParameterDTO
                            {
                                nombre = "year",
                                tipo = OdbcType.Int,
                                valor = year
                            });
                        }

                        queryIngresosArre.consulta = consulta_ppal_ingresos_arrendadora;
                        ingresoArrendadora = _contextEnkontrol.Select<SumaDTO>(EnkontrolAmbienteEnum.ProdARREND, queryIngresosArre);
                    }
                    #endregion

                    ingreso = ingresos.Sum(x => x.suma) * -1;
                    ingreso = ingreso + (ingresoArrendadora.Sum(x => x.suma) * -1);

                    ingresoDB = _context.Select<decimal>(new DapperDTO
                    {
                        baseDatos = MainContextEnum.Construplan,
                        consulta = @"SELECT ppto FROM tblAF_CtrlPptalOfCe_IngresosEstimados WHERE idMes = @idMes AND registroActivo = @registroActivo",
                        parametros = new { idMes = mes, registroActivo = true }
                    }).FirstOrDefault();

                    #region SE OBTIENE EL INGRESO PROPORCIONAL EN BASE DE LOS CC SELECCIONADOS
                    //tblAF_CtrlPptalOfCe_PptoInicial objPptoInicial = _context.tblAF_CtrlPptalOfCe_PptoInicial.Where(w => w.anio == year && w.registroActivo).FirstOrDefault();
                    //if (objPptoInicial == null)
                    //    throw new Exception("No se encuentra el presupuesto seleccionado.");

                    int idPpto = 0;
                    if (arrConstruplan != null && arrArrendadora == null)
                        idPpto = periodoPresupuesto.id;
                    else if (arrConstruplan == null && arrArrendadora != null)
                        idPpto = periodoPresupuestoArr.id;

                    string whereCC = string.Empty;
                    string whereCCARR = string.Empty;
                    int contadorWhere = 0;
                    int contadorWhereArr = 0;
                    if (arrConstruplan != null && arrArrendadora == null)
                    {
                        #region CONSTRUPLAN
                        for (int i = 0; i < arrConstruplan.Count(); i++)
                        {
                            contadorWhere++;
                            if (arrConstruplan.Count() == contadorWhere)
                                whereCC += string.Format("{0}", arrConstruplan[i]);
                            else
                                whereCC += string.Format("{0}, ", arrConstruplan[i]);
                        }
                        #endregion
                    }
                    else if (arrConstruplan == null && arrArrendadora != null)
                    {
                        #region ARRENDADORA
                        for (int i = 0; i < arrArrendadora.Count(); i++)
                        {
                            contadorWhere++;
                            if (arrArrendadora.Count() == contadorWhere)
                                whereCC += string.Format("{0}", arrArrendadora[i]);
                            else
                                whereCC += string.Format("{0}, ", arrArrendadora[i]);
                        }
                        #endregion
                    }
                    else if (arrConstruplan != null && arrArrendadora != null)
                    {
                        #region CONSTRUPLAN
                        for (int i = 0; i < arrConstruplan.Count(); i++)
                        {
                            contadorWhere++;
                            if (arrConstruplan.Count() == contadorWhere)
                                whereCC += string.Format("{0}", arrConstruplan[i]);
                            else
                                whereCC += string.Format("{0}, ", arrConstruplan[i]);
                        }
                        #endregion

                        #region ARRENDADORA
                        for (int i = 0; i < arrArrendadora.Count(); i++)
                        {
                            contadorWhereArr++;
                            if (arrArrendadora.Count() == contadorWhereArr)
                                whereCCARR += string.Format("{0}", arrArrendadora[i]);
                            else
                                whereCCARR += string.Format("{0}, ", arrArrendadora[i]);
                        }
                        #endregion
                    }

                    strQuery = string.Empty;
                    decimal porcIngresoPpto = new decimal();
                    if (arrConstruplan != null && arrArrendadora == null)
                    {
                        #region CONSTRUPLAN
                        strQuery = string.Format(@"SELECT SUM(porcIngresoPpto) AS porcIngresoPpto FROM tblAF_CtrlPptalOfCe_CatPorcIngresosPptoAnual WHERE idPpto = {0} AND idCC IN ({1}) AND registroActivo = 1", periodoPresupuesto.id, whereCC);
                        porcIngresoPpto = _context.Select<decimal>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Construplan,
                            consulta = strQuery
                        }).FirstOrDefault();
                        #endregion
                    }
                    else if (arrConstruplan == null && arrArrendadora != null)
                    {
                        #region ARRENDADORA
                        strQuery = string.Format(@"SELECT SUM(porcIngresoPpto) AS porcIngresoPpto FROM tblAF_CtrlPptalOfCe_CatPorcIngresosPptoAnual WHERE idPpto = {0} AND idCC IN ({1}) AND registroActivo = 1", periodoPresupuestoArr.id, whereCC);
                        porcIngresoPpto = _context.Select<decimal>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Arrendadora,
                            consulta = strQuery
                        }).FirstOrDefault();
                        #endregion
                    }
                    else if (arrConstruplan != null && arrArrendadora != null)
                    {
                        #region CONSTRUPLAN
                        strQuery = string.Format(@"SELECT SUM(porcIngresoPpto) AS porcIngresoPpto FROM tblAF_CtrlPptalOfCe_CatPorcIngresosPptoAnual WHERE idPpto = {0} AND idCC IN ({1}) AND registroActivo = 1", periodoPresupuesto.id, whereCC);
                        porcIngresoPpto = _context.Select<decimal>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Construplan,
                            consulta = strQuery,
                            parametros = new { idPpto = periodoPresupuesto.id, registroActivo = true }
                        }).FirstOrDefault();
                        #endregion

                        #region ARRENDADORA
                        strQuery = string.Format(@"SELECT SUM(porcIngresoPpto) AS porcIngresoPpto FROM tblAF_CtrlPptalOfCe_CatPorcIngresosPptoAnual WHERE idPpto = {0} AND idCC IN ({1}) AND registroActivo = 1", periodoPresupuestoArr.id, whereCCARR);
                        porcIngresoPpto += _context.Select<decimal>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Arrendadora,
                            consulta = strQuery
                        }).FirstOrDefault();
                        #endregion
                    }

                    if ((decimal)porcIngresoPpto > 0 && (decimal)ingreso > 0)
                        ingreso = ((decimal)porcIngresoPpto * (decimal)ingreso) / 100;

                    if ((decimal)porcIngresoPpto > 0 && (decimal)ingresoDB > 0)
                        ingresoDB = ((decimal)porcIngresoPpto * (decimal)ingresoDB) / 100;
                    #endregion

                    #region GASTOS VS INGRESOS - ACUMULADO
                    string colorGasto = "";
                    var porcentajeIngresoGasto = (gasto * 100) / (ingreso > 0 ? ingreso : 1);
                    var montoRealAcumulado = (gasto * 100) / (ingreso > 0 ? ingreso : 1);
                    var porcentajeRealAcumulado = (montoRealAcumulado * 100) / ratioGastoVsIngreso;
                    var coloIngresoGasto = "";

                    decimal ingresoMensual = 0;

                    if (ingresos[0].mes == 0)
                        ingresoMensual = ingresos.Sum(x => x.suma) * -1;
                    else
                        ingresoMensual = ingresos.Where(x => x.mes == mes).Sum(x => x.suma) * -1;

                    ingresoMensual = ingresoMensual + (ingresoArrendadora.Where(x => x.mes == mes).Sum(x => x.suma) * -1);
                    ingresoMensual = ((decimal)porcIngresoPpto * (decimal)ingresoMensual) / 100;

                    decimal gastoMensual = 0;

                    #region CP
                    if (gastos.Count() > 0)
                    {
                        if (gastos[0].mes == 0)
                            gastoMensual += gastos.Sum(x => x.suma);
                        else
                            gastoMensual += gastos.Where(x => x.mes == mes).Sum(x => x.suma);
                    }
                    #endregion

                    #region ARR
                    if (gastosArr.Count() > 0)
                    {
                        if (gastosArr[0].mes == 0)
                            gastoMensual += gastosArr.Sum(x => x.suma);
                        else
                            gastoMensual += gastosArr.Where(x => x.mes == mes).Sum(x => x.suma);
                    }
                    #endregion

                    var porcentajeIngresoGastoMensual = (gastoMensual * 100) / (ingresoMensual > 0 ? ingresoMensual : 1);
                    var porcentajeRealMensual = (porcentajeIngresoGastoMensual * 100) / ratioGastoVsIngreso;
                    var colorIngresoGastoMensual = "";

                    if (porcentajeRealAcumulado > 100)
                    {
                        coloIngresoGasto = "#AE2012";
                    }
                    else if (porcentajeRealAcumulado >= 97 && porcentajeRealAcumulado <= 100)
                    {
                        coloIngresoGasto = "#EE9B00";
                    }
                    else if (porcentajeRealAcumulado < 97)
                    {
                        coloIngresoGasto = "#0A9396";
                    }

                    if (porcentajeRealMensual > 100)
                    {
                        colorIngresoGastoMensual = "#AE2012";
                    }
                    else if (porcentajeRealMensual >= 97 && porcentajeRealMensual <= 100)
                    {
                        colorIngresoGastoMensual = "#EE9B00";
                    }
                    else if (porcentajeRealMensual < 97)
                    {
                        colorIngresoGastoMensual = "#0A9396";
                    }

                    if (porcentajeIngresoGasto > 100)
                    {
                        colorGasto = "#ff0000";
                    }
                    else if (porcentajeIngresoGasto > 85)
                    {
                        colorGasto = "#ffff00";
                    }
                    else
                    {
                        colorGasto = "#80ff00";
                    }

                    if (ingreso >= gasto)
                    {
                        graficaGastoIngreso.serie.Add(new serieArcoDTO
                        {
                            name = "Gastos",
                            y = porcentajeIngresoGasto,
                            color = colorGasto
                        });
                        graficaGastoIngreso.serie.Add(new serieArcoDTO
                        {
                            name = "Ingresos",
                            y = 100 - porcentajeIngresoGasto,
                            color = "#0080ff"
                        });
                    }
                    else
                    {
                        var _porcentajeIngreso = (ingreso * 100) / (gasto > 0 ? gasto : 1);
                        graficaGastoIngreso.serie.Add(new serieArcoDTO
                        {
                            name = "Ingresos",
                            y = _porcentajeIngreso,
                            color = "#0080ff"
                        });
                        graficaGastoIngreso.serie.Add(new serieArcoDTO
                        {
                            name = "Gastos",
                            y = 100 - _porcentajeIngreso,
                            color = colorGasto
                        });
                    }

                    var montoGasto = gasto;
                    var montoIngreso = ingreso;
                    var porcentajeCumplimientoIngresoGasto = porcentajeIngresoGasto;
                    #endregion

                    #region GASTOS VS PRESUPUESTOS - ACUMULADO
                    string colorGastoPpto = "";
                    var porcentajeIngresoGastoPpto = (gasto * 100) / (ingresoDB > 0 ? ingresoDB : 1);
                    var montoRealAcumuladoPpto = (gasto * 100) / (ingresoDB > 0 ? ingresoDB : 1);
                    var porcentajeRealAcumuladoPpto = (montoRealAcumulado * 100) / ratioGastoVsIngreso;
                    var coloIngresoGastoPpto = "";

                    var ingresoMensualPpto = ingresoDB * -1;
                    //ingresoMensual = ingresoMensual + (ingresoArrendadora.Where(x => x.mes == mes).Sum(x => x.suma) * -1);

                    //ingresoMensual = ((decimal)porcIngresoPpto * (decimal)ingresoMensual) / 100;

                    var gastoMensualPpto = gastos.Where(x => x.mes == mes).Sum(x => x.suma) + gastosArr.Where(x => x.mes == mes).Sum(x => x.suma);
                    var porcentajeIngresoGastoMensualPpto = (gastoMensual * 100) / (ingresoMensual > 0 ? ingresoMensual : 1);
                    var porcentajeRealMensualPpto = (porcentajeIngresoGastoMensual * 100) / ratioGastoVsIngreso;
                    var colorIngresoGastoMensualPpto = "";

                    if (porcentajeRealAcumuladoPpto > 100)
                    {
                        coloIngresoGastoPpto = "#AE2012";
                    }
                    else if (porcentajeRealAcumuladoPpto >= 97 && porcentajeRealAcumuladoPpto <= 100)
                    {
                        coloIngresoGastoPpto = "#EE9B00";
                    }
                    else if (porcentajeRealAcumuladoPpto < 97)
                    {
                        coloIngresoGastoPpto = "#0A9396";
                    }

                    if (porcentajeRealMensualPpto > 100)
                    {
                        colorIngresoGastoMensualPpto = "#AE2012";
                    }
                    else if (porcentajeRealMensualPpto >= 97 && porcentajeRealMensualPpto <= 100)
                    {
                        colorIngresoGastoMensualPpto = "#EE9B00";
                    }
                    else if (porcentajeRealMensualPpto < 97)
                    {
                        colorIngresoGastoMensualPpto = "#0A9396";
                    }

                    if (porcentajeIngresoGastoPpto > 100)
                    {
                        colorGastoPpto = "#ff0000";
                    }
                    else if (porcentajeIngresoGastoPpto > 85)
                    {
                        colorGastoPpto = "#ffff00";
                    }
                    else
                    {
                        colorGastoPpto = "#80ff00";
                    }

                    if (ingresoDB >= gasto)
                    {
                        graficaGastoIngreso.serie.Add(new serieArcoDTO
                        {
                            name = "Gastos",
                            y = porcentajeIngresoGasto,
                            color = colorGasto
                        });
                        graficaGastoIngreso.serie.Add(new serieArcoDTO
                        {
                            name = "Ingresos",
                            y = 100 - porcentajeIngresoGasto,
                            color = "#0080ff"
                        });
                    }
                    else
                    {
                        var _porcentajeIngresoPpto = (ingresoDB * 100) / (gasto > 0 ? gasto : 1);
                        graficaGastoIngreso.serie.Add(new serieArcoDTO
                        {
                            name = "Ingresos",
                            y = _porcentajeIngresoPpto,
                            color = "#0080ff"
                        });
                        graficaGastoIngreso.serie.Add(new serieArcoDTO
                        {
                            name = "Gastos",
                            y = 100 - _porcentajeIngresoPpto,
                            color = colorGasto
                        });
                    }

                    var montoGastoPpto = gasto;
                    var montoIngresoPpto = ingresoDB;
                    //var porcentajeCumplimientoIngresoGastoPpto = porcentajeIngresoGastoPpto;

                    var porcentajeCumplimientoIngresoGastoPpto = (ingreso * 100) / (ingresoDB > 0 ? ingresoDB : 1);
                    #endregion

                    #region GFX PRESUPUESTO / GASTO
                    var presupuestoAcumulado = 0M;
                    var graficaPresupuestoGasto = new GraficaArcoDTO();

                    for (int i = 0; i < mes; i++)
                    {
                        presupuestoAcumulado += actividades.Sum(x => Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[i]).GetValue(x, null)));
                        var actividadesIDs = actividades.Select(x => x.id).ToList();
                        var aditivas = _context.tblAF_CtrlAditiva.Where(x => actividadesIDs.Contains(x.capPptosId)).Where(x => x.registroActivo && x.autorizado).ToList();

                        presupuestoAcumulado += aditivas.Sum(x => Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[i]).GetValue(x, null)));
                    }

                    string colorGasto_arcoPresupuesto = "";
                    var maximoGraficaPresupuestoGasto = 150M;
                    var porcentajePresupuestoGasto = (gasto * 100M) / (presupuestoAcumulado > 0 ? presupuestoAcumulado : 1);
                    var porcentajePresupuestoBase100 = porcentajePresupuestoGasto;
                    var porcentajePresupuestoAcumulado66 = (66.6M * gasto) / (presupuestoAcumulado > 0 ? presupuestoAcumulado : 1);

                    if (porcentajePresupuestoGasto > 97)
                    {
                        colorGasto_arcoPresupuesto = "#AE2012";
                    }
                    else if (porcentajePresupuestoGasto >= 95)
                    {
                        colorGasto_arcoPresupuesto = "#EE9B00";
                    }
                    else
                    {
                        colorGasto_arcoPresupuesto = "#0A9396";
                    }

                    if (porcentajePresupuestoBase100 == 100)
                    {
                        graficaPresupuestoGasto.serie.Add(new serieArcoDTO
                        {
                            name = "GASTO",
                            y = 66.6M,
                            color = colorGasto_arcoPresupuesto
                        });
                        graficaPresupuestoGasto.serie.Add(new serieArcoDTO
                        {
                            name = "PRESUPUESTO",
                            y = 0M,
                            color = colorGasto_arcoPresupuesto
                        });
                        graficaPresupuestoGasto.serie.Add(new serieArcoDTO
                        {
                            name = "",
                            y = 33.4M,
                            color = "#005F73"
                        });
                    }
                    else if (porcentajePresupuestoBase100 > 100)
                    {
                        graficaPresupuestoGasto.serie.Add(new serieArcoDTO
                        {
                            name = "PRESUPUESTO",
                            y = 66.6M,
                            color = "#375aef"
                        });
                        graficaPresupuestoGasto.serie.Add(new serieArcoDTO
                        {
                            name = "GASTO",
                            y = porcentajePresupuestoAcumulado66 - 66.6M,
                            color = colorGasto_arcoPresupuesto
                        });
                        graficaPresupuestoGasto.serie.Add(new serieArcoDTO
                        {
                            name = "",
                            y = 100 - porcentajePresupuestoAcumulado66,
                            color = "#005F73"
                        });
                    }
                    else
                    {
                        graficaPresupuestoGasto.serie.Add(new serieArcoDTO
                        {
                            name = "GASTO",
                            y = porcentajePresupuestoAcumulado66,
                            color = colorGasto_arcoPresupuesto
                        });
                        graficaPresupuestoGasto.serie.Add(new serieArcoDTO
                        {
                            name = "PRESUPUESTO",
                            y = 66.6M - porcentajePresupuestoAcumulado66,
                            color = "#375aef"
                        });
                        graficaPresupuestoGasto.serie.Add(new serieArcoDTO
                        {
                            name = "",
                            y = 100 - 66.6M,
                            color = "#005F73"
                        });
                    }
                    #endregion

                    #region GFX PRESUPUESTO / GASTO MENSUAL
                    var presupuestoMensual = actividades.Sum(x => Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[mes - 1]).GetValue(x, null)));
                    string colorGasto_arcoPresupuestoMensual = "";
                    decimal gastosTotal = (gastos.Count() > 0 ? gastos.Where(x => x.mes == mes).Sum(x => x.suma) : 0) + (gastosArr.Count() > 0 ? gastosArr.Where(x => x.mes == mes).Sum(x => x.suma) : 0);
                    var porcentajeGastoMensualBase100 = (gastosTotal * 100) / (presupuestoMensual > 0 ? presupuestoMensual : 1);
                    var porcentajeGastoMensual = (66.6M * gastosTotal) / (presupuestoMensual > 0 ? presupuestoMensual : 1);
                    if (porcentajeGastoMensualBase100 >= 97)
                    {
                        colorGasto_arcoPresupuestoMensual = "#AE2012"; // rojo
                    }
                    else if (porcentajeGastoMensualBase100 >= 95)
                    {
                        colorGasto_arcoPresupuestoMensual = "#EE9B00"; // amarillo
                    }
                    else
                    {
                        colorGasto_arcoPresupuestoMensual = "#0A9396";// verde
                    }

                    var graficaPresupuestoGastoMensual = new GraficaArcoDTO();
                    if (porcentajeGastoMensualBase100 == 100)
                    {
                        graficaPresupuestoGastoMensual.serie.Add(new serieArcoDTO
                        {
                            name = "GASTO",
                            y = 66.6M,
                            color = colorGasto_arcoPresupuestoMensual
                        });
                        graficaPresupuestoGastoMensual.serie.Add(new serieArcoDTO
                        {
                            name = "PRESUPUESTO",
                            y = 0M,
                            color = colorGasto_arcoPresupuestoMensual
                        });
                        graficaPresupuestoGastoMensual.serie.Add(new serieArcoDTO
                        {
                            name = "",
                            y = 33.4M,
                            color = "#005F73"
                        });
                    }
                    else if (porcentajeGastoMensualBase100 > 100)
                    {
                        graficaPresupuestoGastoMensual.serie.Add(new serieArcoDTO
                        {
                            name = "PRESUPUESTO",
                            y = 66.6M,
                            color = "#375aef"
                        });
                        graficaPresupuestoGastoMensual.serie.Add(new serieArcoDTO
                        {
                            name = "GASTO",
                            y = porcentajeGastoMensual - 66.6M,
                            color = colorGasto_arcoPresupuestoMensual
                        });
                        graficaPresupuestoGastoMensual.serie.Add(new serieArcoDTO
                        {
                            name = "",
                            y = 100 - porcentajeGastoMensual,
                            color = "#005F73"
                        });
                    }
                    else
                    {
                        graficaPresupuestoGastoMensual.serie.Add(new serieArcoDTO
                        {
                            name = "GASTO",
                            y = porcentajeGastoMensual,
                            color = colorGasto_arcoPresupuestoMensual
                        });
                        graficaPresupuestoGastoMensual.serie.Add(new serieArcoDTO
                        {
                            name = "PRESUPUESTO",
                            y = 66.6M - porcentajeGastoMensual,
                            color = "#375aef"
                        });
                        graficaPresupuestoGastoMensual.serie.Add(new serieArcoDTO
                        {
                            name = "",
                            y = 100 - 66.6M,
                            color = "#005F73"
                        });
                    }
                    #endregion

                    #region GFX CUMPLIMIENTO
                    var porcentajeCumplimiento = (gasto * 100) / (presupuestoAcumulado > 0 ? presupuestoAcumulado : 1);
                    string colorCumplimiento = "";
                    if (porcentajeCumplimiento > 100)
                    {
                        colorCumplimiento = "#AE2012";
                    }
                    else if (porcentajeCumplimiento > 85)
                    {
                        colorCumplimiento = "#EE9B00";
                    }
                    else
                    {
                        colorCumplimiento = "#0A9396";
                    }

                    var graficaCumplimiento = new GraficaArcoDTO();
                    if (presupuestoAcumulado >= gasto)
                    {
                        graficaCumplimiento.serie.Add(new serieArcoDTO
                        {
                            name = "Cumplimiento",
                            y = porcentajeCumplimiento,
                            color = colorCumplimiento
                        });
                        graficaCumplimiento.serie.Add(new serieArcoDTO
                        {
                            name = "Presupuesto",
                            y = 100 - porcentajeCumplimiento,
                            color = "#0080ff"
                        });
                    }
                    else
                    {
                        graficaCumplimiento.serie.Add(new serieArcoDTO
                        {
                            name = "Presupuesto",
                            y = 100 - (porcentajeCumplimiento - 100),
                            color = "#0080ff"
                        });
                        graficaCumplimiento.serie.Add(new serieArcoDTO
                        {
                            name = "Cumplimiento",
                            y = porcentajeCumplimiento - 100,
                            color = colorCumplimiento
                        });
                    }

                    #endregion

                    #region GFX PROYECCION

                    #region SE OBTIENE LOS MESES A MOSTRAR
                    GraficaProyeccionDTO objGraficaProyeccion = new GraficaProyeccionDTO();
                    string[] arrMonths = new string[] { "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre" };
                    for (int i = 0; i < arrMonths.Length; i++)
                    {
                        objGraficaProyeccion.lstCategorias.Add(arrMonths[i]);
                    }
                    #endregion

                    #region SE OBTIENE LOS PPTOS CAPTURADOS
                    List<string> lstCCID = new List<string>();
                    if (arrConstruplan != null && arrArrendadora == null)
                    {
                        #region CONSTRUPLAN
                        foreach (var item in arrConstruplan)
                        {
                            lstCCID.Add(item.ToString());
                        }
                        #endregion
                    }
                    else if (arrConstruplan == null && arrArrendadora != null)
                    {
                        #region ARRENDADORA
                        foreach (var item in arrArrendadora)
                        {
                            lstCCID.Add(item.ToString());
                        }
                        #endregion
                    }
                    else if (arrConstruplan != null && arrArrendadora != null)
                    {
                        #region CONSTRUPLAN
                        foreach (var item in arrConstruplan)
                        {
                            lstCCID.Add(item.ToString());
                        }
                        #endregion

                        #region ARRENDADORA
                        foreach (var item in arrArrendadora)
                        {
                            lstCCID.Add(item.ToString());
                        }
                        #endregion
                    }

                    // SE VERIFICA SI LOS PPTOS ESTAN AUTORIZADOS
                    List<tblAF_CtrlPptalOfCe_PptoAnual> lstPptosAutorizados = new List<tblAF_CtrlPptalOfCe_PptoAnual>();
                    List<tblAF_CtrlPptalOfCe_PptoAnual> lstPptosAutorizadosCP = new List<tblAF_CtrlPptalOfCe_PptoAnual>();
                    List<tblAF_CtrlPptalOfCe_PptoAnual> lstPptosAutorizadosARR = new List<tblAF_CtrlPptalOfCe_PptoAnual>();
                    strQuery = string.Empty;
                    if (arrConstruplan != null && arrArrendadora == null)
                    {
                        strQuery = string.Format(@"SELECT * FROM tblAF_CtrlPptalOfCe_PptoAnual WHERE idCC IN ({0}) AND autorizado = 1 AND registroActivo = 1", string.Join(",", arrConstruplan));
                        lstPptosAutorizados = _context.Select<tblAF_CtrlPptalOfCe_PptoAnual>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Construplan,
                            consulta = strQuery
                        }).ToList();
                        //lstPptosAutorizados = _context.tblAF_CtrlPptalOfCe_PptoAnual.Where(w => arrConstruplan.Contains(w.idCC) && w.autorizado && w.registroActivo).ToList();
                    }
                    else if (arrConstruplan == null && arrArrendadora != null)
                    {
                        strQuery = string.Format(@"SELECT * FROM tblAF_CtrlPptalOfCe_PptoAnual WHERE idCC IN ({0}) AND autorizado = 1 AND registroActivo = 1", string.Join(",", arrArrendadora));
                        lstPptosAutorizados = _context.Select<tblAF_CtrlPptalOfCe_PptoAnual>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Arrendadora,
                            consulta = strQuery
                        }).ToList();
                    }
                    else if (arrConstruplan != null && arrArrendadora != null)
                    {
                        // CONSTRUPLAN
                        strQuery = string.Format(@"SELECT * FROM tblAF_CtrlPptalOfCe_PptoAnual WHERE idCC IN ({0}) AND autorizado = 1 AND registroActivo = 1", string.Join(",", arrConstruplan));
                        lstPptosAutorizadosCP = _context.Select<tblAF_CtrlPptalOfCe_PptoAnual>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Construplan,
                            consulta = strQuery
                        }).ToList();

                        // ARRENDADORA
                        strQuery = string.Format(@"SELECT * FROM tblAF_CtrlPptalOfCe_PptoAnual WHERE idCC IN ({0}) AND autorizado = 1 AND registroActivo = 1", string.Join(",", arrArrendadora));
                        lstPptosAutorizadosARR = _context.Select<tblAF_CtrlPptalOfCe_PptoAnual>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Arrendadora,
                            consulta = strQuery
                        }).ToList();
                    }

                    List<string> lstCCIDAutorizados = new List<string>();
                    foreach (var item in lstPptosAutorizados)
                    {
                        lstCCIDAutorizados.Add(item.idCC.ToString());
                    }

                    foreach (var item in lstPptosAutorizadosCP)
                    {
                        lstCCIDAutorizados.Add(item.idCC.ToString());
                    }
                    foreach (var item in lstPptosAutorizadosARR)
                    {
                        lstCCIDAutorizados.Add(item.idCC.ToString());
                    }

                    List<tblAF_CtrlPptalOfCe_CapPptos> lstPptos = new List<tblAF_CtrlPptalOfCe_CapPptos>();
                    strQuery = string.Empty;
                    strQuery = string.Format(@"SELECT * FROM tblAF_CtrlPptalOfCe_CapPptos WHERE anio = {0} AND cc IN ({1}) AND registroActivo = 1", year, string.Join(",", lstCCIDAutorizados));
                    //if (arrConstruplan != null && arrArrendadora == null)
                    //{
                    //    lstPptos = _context.Select<tblAF_CtrlPptalOfCe_CapPptos>(new DapperDTO
                    //    {
                    //        baseDatos = MainContextEnum.Construplan,
                    //        consulta = strQuery
                    //    }).ToList();
                    //    //lstPptos = _context.tblAF_CtrlPptalOfCe_CapPptos.Where(w => w.anio == year && lstCCIDAutorizados.Contains(w.cc) && w.registroActivo).ToList();
                    //}
                    //else
                    //{
                    //    lstPptos = _context.Select<tblAF_CtrlPptalOfCe_CapPptos>(new DapperDTO
                    //    {
                    //        baseDatos = MainContextEnum.Arrendadora,
                    //        consulta = strQuery
                    //    }).ToList();
                    //}

                    if (arrConstruplan != null && arrArrendadora == null)
                    {
                        lstPptos = _context.Select<tblAF_CtrlPptalOfCe_CapPptos>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Construplan,
                            consulta = strQuery
                        }).ToList();
                        //lstPptos = _context.tblAF_CtrlPptalOfCe_CapPptos.Where(w => w.anio == year && lstCCIDAutorizados.Contains(w.cc) && w.registroActivo).ToList();
                    }
                    else if (arrConstruplan == null && arrArrendadora != null)
                    {
                        lstPptos = _context.Select<tblAF_CtrlPptalOfCe_CapPptos>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Arrendadora,
                            consulta = strQuery
                        }).ToList();
                    }
                    else if (arrConstruplan != null && arrArrendadora != null)
                    {
                        var strQueryCplan = string.Empty;
                        strQueryCplan = string.Format(@"SELECT * FROM tblAF_CtrlPptalOfCe_CapPptos WHERE anio = {0} AND cc IN ({1}) AND registroActivo = 1", year, string.Join(",", lstPptosAutorizadosCP.Select(x => x.idCC).ToList()));
                        lstPptos = _context.Select<tblAF_CtrlPptalOfCe_CapPptos>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Construplan,
                            consulta = strQueryCplan
                        }).ToList();
                        var strQueryArrendadora = string.Empty;
                        strQueryArrendadora = string.Format(@"SELECT * FROM tblAF_CtrlPptalOfCe_CapPptos WHERE anio = {0} AND cc IN ({1}) AND registroActivo = 1", year, string.Join(",", lstPptosAutorizadosARR.Select(x => x.idCC).ToList()));

                        lstPptos.AddRange(_context.Select<tblAF_CtrlPptalOfCe_CapPptos>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Arrendadora,
                            consulta = strQueryArrendadora
                        }).ToList());
                    }


                    if (lstPptos.Count() > 0)
                    {
                        int idMes = 1;
                        string ccJOIN = string.Empty;
                        string ccJOIN_Arr = string.Empty;
                        if (arrConstruplan != null && arrArrendadora == null)
                            ccJOIN = string.Join(",", arrConstruplan);
                        else if (arrConstruplan == null && arrArrendadora != null)
                            ccJOIN = string.Join(",", arrArrendadora);
                        else if (arrConstruplan != null && arrArrendadora != null)
                        {
                            ccJOIN = string.Join(",", arrConstruplan);
                            ccJOIN_Arr = string.Join(",", arrArrendadora);
                        }

                        var pptoAcumulado = 0M;
                        var aditivasAcumuladas = 0M;
                        var listaMontosMensuales = new List<decimal>();
                        decimal pptoMes = 0;
                        decimal aditivasMes = 0;
                        for (int i = 0; i < objGraficaProyeccion.lstCategorias.Count(); i++)
                        {
                            if (arrConstruplan != null && arrArrendadora == null)
                            {
                                pptoMes = _context.Select<decimal>(new DapperDTO
                                {
                                    baseDatos = MainContextEnum.Construplan,
                                    consulta = string.Format(@"SELECT SUM(importe{0}) AS importe FROM tblAF_CtrlPptalOfCe_CapPptos WHERE anio = @anio AND cc IN ({1}) AND registroActivo = @registroActivo", arrMonths[i], ccJOIN),
                                    parametros = new { anio = year, registroActivo = true }
                                }).FirstOrDefault();
                                aditivasMes = _context.Select<decimal>(new DapperDTO
                                {
                                    baseDatos = MainContextEnum.Construplan,
                                    consulta = string.Format(@"SELECT SUM(importe{0}) AS importe FROM tblAF_CtrlAditiva WHERE autorizado = @registroActivo AND capPptosId IN (SELECT id FROM tblAF_CtrlPptalOfCe_CapPptos WHERE anio = @anio AND cc IN ({1}) AND registroActivo = @registroActivo) AND registroActivo = @registroActivo", arrMonths[i], ccJOIN),
                                    parametros = new { anio = year, registroActivo = true }
                                }).FirstOrDefault();
                            }
                            else if (arrConstruplan == null && arrArrendadora != null)
                            {
                                pptoMes = _context.Select<decimal>(new DapperDTO
                                {
                                    baseDatos = MainContextEnum.Arrendadora,
                                    consulta = string.Format(@"SELECT SUM(importe{0}) AS importe FROM tblAF_CtrlPptalOfCe_CapPptos WHERE anio = @anio AND cc IN ({1}) AND registroActivo = @registroActivo", arrMonths[i], ccJOIN),
                                    parametros = new { anio = year, registroActivo = true }
                                }).FirstOrDefault();
                                aditivasMes = _context.Select<decimal>(new DapperDTO
                                {
                                    baseDatos = MainContextEnum.Arrendadora,
                                    consulta = string.Format(@"SELECT SUM(importe{0}) AS importe FROM tblAF_CtrlAditiva WHERE autorizado = @registroActivo AND capPptosId IN (SELECT id FROM tblAF_CtrlPptalOfCe_CapPptos WHERE anio = @anio AND cc IN ({1}) AND registroActivo = @registroActivo) AND registroActivo = @registroActivo", arrMonths[i], ccJOIN),
                                    parametros = new { anio = year, registroActivo = true }
                                }).FirstOrDefault();
                            }
                            else if (arrConstruplan != null && arrArrendadora != null)
                            {
                                pptoMes = _context.Select<decimal>(new DapperDTO
                                {
                                    baseDatos = MainContextEnum.Construplan,
                                    consulta = string.Format(@"SELECT SUM(importe{0}) AS importe FROM tblAF_CtrlPptalOfCe_CapPptos WHERE anio = @anio AND cc IN ({1}) AND registroActivo = @registroActivo", arrMonths[i], ccJOIN),
                                    parametros = new { anio = year, registroActivo = true }
                                }).FirstOrDefault();

                                aditivasMes = _context.Select<decimal>(new DapperDTO
                                {
                                    baseDatos = MainContextEnum.Construplan,
                                    consulta = string.Format(@"SELECT SUM(importe{0}) AS importe FROM tblAF_CtrlAditiva WHERE autorizado = @registroActivo AND capPptosId IN (SELECT id FROM tblAF_CtrlPptalOfCe_CapPptos WHERE anio = @anio AND cc IN ({1}) AND registroActivo = @registroActivo) AND registroActivo = @registroActivo", arrMonths[i], ccJOIN),
                                    parametros = new { anio = year, registroActivo = true }
                                }).FirstOrDefault();

                                pptoMes += _context.Select<decimal>(new DapperDTO
                                {
                                    baseDatos = MainContextEnum.Arrendadora,
                                    consulta = string.Format(@"SELECT SUM(importe{0}) AS importe FROM tblAF_CtrlPptalOfCe_CapPptos WHERE anio = @anio AND cc IN ({1}) AND registroActivo = @registroActivo", arrMonths[i], ccJOIN_Arr),
                                    parametros = new { anio = year, registroActivo = true }
                                }).FirstOrDefault();

                                aditivasMes += _context.Select<decimal>(new DapperDTO
                                {
                                    baseDatos = MainContextEnum.Arrendadora,
                                    consulta = string.Format(@"SELECT SUM(importe{0}) AS importe FROM tblAF_CtrlAditiva WHERE autorizado = @registroActivo AND capPptosId IN (SELECT id FROM tblAF_CtrlPptalOfCe_CapPptos WHERE anio = @anio AND cc IN ({1}) AND registroActivo = @registroActivo) AND registroActivo = @registroActivo", arrMonths[i], ccJOIN),
                                    parametros = new { anio = year, registroActivo = true }
                                }).FirstOrDefault();
                            }

                            listaMontosMensuales.Add(pptoMes);
                            pptoAcumulado += pptoMes;
                            aditivasAcumuladas += aditivasMes;
                            objGraficaProyeccion.lstPpto.Add(pptoAcumulado);
                            objGraficaProyeccion.lstProyeccion.Add(pptoAcumulado + aditivasAcumuladas);
                            objGraficaProyeccion.lstPointKey.Add(pptoAcumulado);
                            idMes++;
                        }

                        #region SE OBTIENE LOS PPTOS REALES HASTA EL MES ACTUAL
                        int mesActualID = (int)DateTime.Now.Month;
                        List<int> lstAgrupacionesID = new List<int>();
                        List<int> lstConceptosID = new List<int>();
                        List<tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas> lstCuentas = new List<tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas>();

                        if (arrConstruplan != null && arrArrendadora == null)
                        {
                            lstAgrupacionesID = _context.tblAF_CtrllPptalOfCe_CatAgrupaciones.Where(w => w.anio == year && arrConstruplan.Contains(w.idCC) && w.registroActivo).Select(s => s.id).ToList();
                            lstConceptosID = _context.tblAF_CtrlPptalOfCe_CatConceptos.Where(w => lstAgrupacionesID.Contains(w.idAgrupacion) && w.registroActivo).Select(s => s.idConcepto).ToList();
                            lstCuentas = _context.tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas.Where(w => lstConceptosID.Contains(w.idConcepto) && w.registroActivo).ToList();
                        }
                        else if (arrConstruplan == null && arrArrendadora != null)
                        {
                            using (var _ctxArre = new MainContext(EmpresaEnum.Arrendadora))
                            {
                                lstAgrupacionesID = _ctxArre.tblAF_CtrllPptalOfCe_CatAgrupaciones.Where(w => w.anio == year && arrArrendadora.Contains(w.idCC) && w.registroActivo).Select(s => s.id).ToList();
                                lstConceptosID = _ctxArre.tblAF_CtrlPptalOfCe_CatConceptos.Where(w => lstAgrupacionesID.Contains(w.idAgrupacion) && w.registroActivo).Select(s => s.idConcepto).ToList();
                                lstCuentas = _ctxArre.tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas.Where(w => lstConceptosID.Contains(w.idConcepto) && w.registroActivo).ToList();
                            }
                        }

                        else if (arrConstruplan != null && arrArrendadora != null)
                        {
                            lstAgrupacionesID = _context.tblAF_CtrllPptalOfCe_CatAgrupaciones.Where(w => w.anio == year && arrConstruplan.Contains(w.idCC) && w.registroActivo).Select(s => s.id).ToList();
                            lstConceptosID = _context.tblAF_CtrlPptalOfCe_CatConceptos.Where(w => lstAgrupacionesID.Contains(w.idAgrupacion) && w.registroActivo).Select(s => s.idConcepto).ToList();
                            lstCuentas = _context.tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas.Where(w => lstConceptosID.Contains(w.idConcepto) && w.registroActivo).ToList();
                            using (var _ctxArre = new MainContext(EmpresaEnum.Arrendadora))
                            {
                                lstAgrupacionesID.AddRange(_ctxArre.tblAF_CtrllPptalOfCe_CatAgrupaciones.Where(w => w.anio == year && arrArrendadora.Contains(w.idCC) && w.registroActivo).Select(s => s.id).ToList());
                                lstConceptosID.AddRange(_ctxArre.tblAF_CtrlPptalOfCe_CatConceptos.Where(w => lstAgrupacionesID.Contains(w.idAgrupacion) && w.registroActivo).Select(s => s.idConcepto).ToList());
                                lstCuentas.AddRange(_ctxArre.tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas.Where(w => lstConceptosID.Contains(w.idConcepto) && w.registroActivo).ToList());
                            }
                        }

                        idMes = 1;
                        int contador = -1;
                        var pptoRealAcumulado = 0M;
                        bool banderaMontoEstimado = false;
                        decimal monteEstimado = 0M;
                        for (int i = 0; i < objGraficaProyeccion.lstCategorias.Count(); i++)
                        {
                            contador++;
                            decimal montoReal = 0;

                            // CP
                            if (gastos.Count() > 0)
                                montoReal += gastos.Where(w => w.mes == idMes).Sum(s => s.suma);

                            // ARR
                            if (gastosArr.Count() > 0)
                                montoReal += gastosArr.Where(w => w.mes == idMes).Sum(s => s.suma);

                            pptoRealAcumulado += montoReal;
                            if (montoReal > 0 || montoReal < 0)
                                objGraficaProyeccion.lstPptoReal.Add(pptoRealAcumulado);
                            else
                            {
                                if (!banderaMontoEstimado && i > 0)
                                {
                                    banderaMontoEstimado = true;
                                    monteEstimado = pptoRealAcumulado / (i);
                                }
                                pptoRealAcumulado += monteEstimado;
                                objGraficaProyeccion.lstPptoReal.Add(pptoRealAcumulado);
                            }
                            idMes++;
                        }
                        #endregion

                        #region SE OBTIENE EL CUMPLIMIENTO POR MES HASTA EL MES ACTUAL
                        decimal pptoMayor = objGraficaProyeccion.lstPpto.Max();
                        for (int i = 0; i < objGraficaProyeccion.lstCategorias.Count(); i++)
                        {
                            #region CUMPLIMIENTO POR MES (PORCENTAJE)
                            decimal ppto = (decimal)objGraficaProyeccion.lstPpto[i];
                            decimal pptoReal = (decimal)objGraficaProyeccion.lstPptoReal[i];
                            decimal cumplimientoPorcentaje = 0;
                            if ((decimal)ppto > 0 && (decimal)pptoReal > 0)
                                cumplimientoPorcentaje = (((decimal)pptoReal * 100) / (decimal)ppto);
                            #endregion

                            #region CUMPLIMIENTO EN BASE AL PPTO MAYOR
                            decimal cumplimiento = 0;
                            if ((decimal)cumplimientoPorcentaje > 0 && (decimal)pptoMayor > 0)
                                cumplimiento = ((decimal)cumplimientoPorcentaje * pptoMayor) / 100;
                            #endregion

                            objGraficaProyeccion.lstCumplimiento.Add(cumplimiento);
                            objGraficaProyeccion.lstCumplimientoPorc.Add(cumplimientoPorcentaje);
                        }

                        for (int i = 0; i < objGraficaProyeccion.lstCumplimiento.Count(); i++)
                        {
                            decimal pptoMax = objGraficaProyeccion.lstPpto.Max();
                            decimal pptoRealMax = objGraficaProyeccion.lstPptoReal.Max();
                            decimal cumplimientoPorcMax = objGraficaProyeccion.lstCumplimientoPorc.Max();
                            decimal cumplimientoPorc = objGraficaProyeccion.lstCumplimientoPorc[i];
                            decimal nuevoCumplimiento = 0;
                            if ((decimal)cumplimientoPorcMax > 0 && (decimal)cumplimientoPorc > 0)
                            {
                                objGraficaProyeccion.lstCumplimiento[i] = (decimal)cumplimientoPorc / (decimal)cumplimientoPorcMax;
                                nuevoCumplimiento = pptoMax > pptoRealMax ? objGraficaProyeccion.lstCumplimiento[i] * pptoMax : objGraficaProyeccion.lstCumplimiento[i] * pptoRealMax;
                                objGraficaProyeccion.lstCumplimiento[i] = nuevoCumplimiento;
                            }
                        }
                        #endregion

                        #region SE OBTIENE EL MAX DE LA GRAFICA
                        List<decimal> lstMax = new List<decimal>();
                        lstMax.Add(objGraficaProyeccion.lstPpto.Max());
                        lstMax.Add(objGraficaProyeccion.lstPptoReal.Max());
                        lstMax.Add(objGraficaProyeccion.lstCumplimiento.Max());
                        objGraficaProyeccion.max = lstMax.Max();
                        #endregion

                        // SE INDICA EL MES ACTUAL AL OBJETO PROYECCIÓN
                        mesActualID--;
                        objGraficaProyeccion.mesActualID = mesActualID;
                        resultado.Add("objGraficaProyeccion", objGraficaProyeccion);
                    }
                    #endregion
                    #endregion

                    #region SE OBTIENE EL INGRESO ESTIMADO REAL (ANA) DEL MES SELECCIONADO
                    strQuery = string.Format(@"SELECT ppto FROM tblAF_CtrlPptalOfCe_IngresosEstimados WHERE idMes = {0}", mes);
                    decimal montoGastoDB = _context.Select<decimal>(new DapperDTO
                    {
                        baseDatos = MainContextEnum.Construplan,
                        consulta = strQuery
                    }).FirstOrDefault();

                    decimal ingresoEstimado = (montoGastoDB * 100) / ingreso;
                    var porcentajeRealAcumuladoDB = (montoGastoDB / ingreso);
                    #endregion

                    resultado.Add(SUCCESS, true);
                    resultado.Add("gfxIngresoGasto", graficaGastoIngreso);
                    resultado.Add("gfxIngresoGastoPorcentaje", porcentajeRealAcumulado);
                    resultado.Add("gfxIngresoGastoReal", montoRealAcumulado);
                    resultado.Add("gfxIngresoGastoRealMensual", porcentajeIngresoGastoMensual);
                    resultado.Add("colorIngresoGasto", coloIngresoGasto);
                    resultado.Add("colorIngresoGastoMensual", colorIngresoGastoMensual);
                    resultado.Add("gfxPresupuestoGasto", graficaPresupuestoGasto);
                    resultado.Add("gfxPresupuestoGastoMensual", graficaPresupuestoGastoMensual);
                    resultado.Add("gfxPresupuestoGastoPorcentaje", porcentajePresupuestoBase100);
                    resultado.Add("gfxPresupuestoGastoPorcentajeMensual", porcentajeGastoMensualBase100);
                    resultado.Add("gfxCumplimiento", graficaCumplimiento);
                    resultado.Add("montoGasto", montoGasto);
                    resultado.Add("montoGastoDB", montoGastoDB);
                    resultado.Add("porcentajeRealAcumuladoDB", porcentajeRealAcumuladoDB);
                    resultado.Add("montoIngreso", montoIngreso);
                    resultado.Add("montoGastoMensual", gastoMensual);
                    resultado.Add("montoIngresoMensual", ingresoMensual);
                    resultado.Add("porcentajeCumplimientoIngresoGasto", porcentajeCumplimientoIngresoGasto);
                    resultado.Add("porcentajeCumplimientoIngresoGastoMensual", porcentajeRealMensual);
                    resultado.Add("ratioGastoVsIngreso", ratioGastoVsIngreso);

                    resultado.Add("montoIngresoPpto", montoIngresoPpto);
                    resultado.Add("porcentajeCumplimientoIngresoGastoPpto", porcentajeCumplimientoIngresoGastoPpto);
                    resultado.Add("gfxIngresoGastoPorcentajePpto", porcentajeRealAcumuladoPpto);
                    resultado.Add("colorIngresoGastoPpto", coloIngresoGastoPpto);
                }
                else
                {
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, "No existe presupuesto en el periodo seleccionado");
                }
            }
            catch (Exception ex)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetDataGraficasDashboard", ex, AccionEnum.CONSULTA, 0, 0);

                resultado.Add(MESSAGE, ex.Message);
                resultado.Add(SUCCESS, true);
            }

            return resultado;
        }

        public Dictionary<string, object> GetDataGraficasDashboard(int year, int mes, List<int> arrConstruplan, List<int> arrArrendadora, bool costosAdministrativos)
        {
            try
            {
                session["ControlPresupuestalDatos"] = null;
                List<MovPolControlPptalDTO> datosGenerales = new List<MovPolControlPptalDTO>();
                string strQuery = string.Empty;
                var ratioGastoVsIngreso = 0M;
                if ((int)EmpresaEnum.Construplan == vSesiones.sesionEmpresaActual)
                    ratioGastoVsIngreso = 3.6M;
                else
                    ratioGastoVsIngreso = 3.6M;

                List<tblAF_CtrlPptal_GastoIngresoRatio> listaCCRatio = _context.tblAF_CtrlPptal_GastoIngresoRatio.Where(x => x.registroActivo).ToList();
                //if (listaCCRatio.Count != arrConstruplan.Count)
                ratioGastoVsIngreso = 3.6M; // AHORA TODOS LOS CC, AUNQUE LA SELECCIÓN DEL LISTADO SEA SOLO 1, SU RATIO SERA 3.6

                tblAF_CtrlPptalOfCe_PptoInicial periodoPresupuesto = _context.tblAF_CtrlPptalOfCe_PptoInicial.FirstOrDefault(x => x.anio == year && x.registroActivo);

                #region PRESUPUESTO ARRENDADORA
                tblAF_CtrlPptalOfCe_PptoInicial periodoPresupuestoArr = _context.Select<tblAF_CtrlPptalOfCe_PptoInicial>(new DapperDTO
                {
                    baseDatos = MainContextEnum.Arrendadora,
                    consulta = @"SELECT * FROM tblAF_CtrlPptalOfCe_PptoInicial WHERE anio = @anio AND registroActivo = @registroActivo",
                    parametros = new { anio = year, registroActivo = true }
                }).FirstOrDefault();
                #endregion

                if (periodoPresupuesto != null || periodoPresupuestoArr != null)
                {
                    List<tblAF_CtrlPptalOfCe_PptoAnual> presupuestos = new List<tblAF_CtrlPptalOfCe_PptoAnual>();

                    // CP
                    if (arrConstruplan != null && arrConstruplan.Count() > 0)
                    {
                        presupuestos = _context.tblAF_CtrlPptalOfCe_PptoAnual
                                                                                   .Where(x => x.pptoInicialID == periodoPresupuesto.id &&
                                                                                               x.registroActivo && x.autorizado).ToList().Where(x =>
                                                                                               (arrConstruplan != null ? arrConstruplan.Contains(x.idCC) : true)).ToList();
                    }

                    string strQueryARR = string.Empty;
                    List<tblAF_CtrlPptalOfCe_PptoAnual> presupuestosArr = new List<tblAF_CtrlPptalOfCe_PptoAnual>();
                    if (arrArrendadora != null && arrArrendadora.Count() > 0)
                    {
                        strQueryARR = string.Format(@"SELECT * FROM tblAF_CtrlPptalOfCe_PptoAnual WHERE pptoInicialID = {0} AND registroActivo = 1 AND autorizado = 1 AND idCC IN ({1})", periodoPresupuestoArr.id, string.Join(",", arrArrendadora));
                        presupuestosArr = _context.Select<tblAF_CtrlPptalOfCe_PptoAnual>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Arrendadora,
                            consulta = strQueryARR
                        }).ToList();
                    }

                    List<tblAF_CtrlPptalOfCe_CapPptos> actividades = new List<tblAF_CtrlPptalOfCe_CapPptos>();

                    List<tblP_CC> lstCC = _context.tblP_CC.Where(w => w.estatus).ToList();

                    List<tblP_CC> lstCC_Arr = _context.Select<tblP_CC>(new DapperDTO
                    {
                        baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                        consulta = @"SELECT * FROM tblP_CC WHERE estatus = 1"
                    }).ToList();

                    var ccs = new List<string>();
                    var ccsArr = new List<string>();
                    List<int> lstAreasPol = new List<int>();
                    List<int> lstCuentasPol = new List<int>();

                    #region CONSTRUPLAN
                    foreach (var presupuesto in presupuestos)
                    {
                        int idCC = presupuesto.idCC;
                        string strCCID = presupuesto.idCC.ToString();
                        string cc = string.Empty;

                        if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                            cc = lstCC.Where(w => w.id == idCC && w.estatus).Select(s => s.cc).FirstOrDefault();
                        else
                            cc = presupuesto.cc;

                        int area = lstCC.Where(w => w.id == idCC && w.estatus).Select(s => s.area).FirstOrDefault();
                        int cuenta = lstCC.Where(w => w.id == idCC && w.estatus).Select(s => s.cuenta).FirstOrDefault();
                        lstAreasPol.Add(area);
                        lstCuentasPol.Add(cuenta);

                        ccs.Add(cc);

                        actividades.AddRange(_context.tblAF_CtrlPptalOfCe_CapPptos
                            .Where(x =>
                                x.cc == strCCID &&
                                x.anio == year &&
                                x.registroActivo
                            ));
                    }
                    #endregion

                    #region ARRENDADORA
                    foreach (var presupuesto in presupuestosArr)
                    {
                        int idCC = presupuesto.idCC;
                        string strCCID = presupuesto.idCC.ToString();
                        string cc = string.Empty;

                        cc = lstCC_Arr.Where(w => w.id == idCC && w.estatus).Select(s => s.cc).FirstOrDefault();

                        int area = lstCC_Arr.Where(w => w.id == idCC && w.estatus).Select(s => s.area).FirstOrDefault();
                        int cuenta = lstCC_Arr.Where(w => w.id == idCC && w.estatus).Select(s => s.cuenta).FirstOrDefault();
                        lstAreasPol.Add(area);
                        lstCuentasPol.Add(cuenta);

                        ccsArr.Add(cc);

                        strQueryARR = string.Empty;
                        strQueryARR = string.Format(@"SELECT * FROM tblAF_CtrlPptalOfCe_CapPptos WHERE cc = {0} AND anio = {1} AND registroActivo = 1", strCCID, year);
                        List<tblAF_CtrlPptalOfCe_CapPptos> lstActividadesArr = _context.Select<tblAF_CtrlPptalOfCe_CapPptos>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Arrendadora,
                            consulta = strQueryARR
                        }).ToList();

                        actividades.AddRange(lstActividadesArr);
                    }
                    #endregion

                    var gasto = 0M;
                    var ingreso = 0M;
                    var ingresoDB = 0M;

                    OdbcConsultaDTO query = new OdbcConsultaDTO();
                    OdbcConsultaDTO queryArr = new OdbcConsultaDTO();
                    if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan && arrConstruplan != null && arrArrendadora == null)
                    {
                        #region CONSTRUPLAN

                        var _excepcionCC = Enum.GetValues(typeof(ExcepcionesCCEnum));
                        List<int> excepcionCC = new List<int>((int[])_excepcionCC);
                        List<string> lstExcepcionCC = new List<string>();
                        var auxExcepcionCC = arrConstruplan.Where(x => excepcionCC.Contains(x)).ToList();
                        foreach (var item in auxExcepcionCC) { lstExcepcionCC.Add(((ExcepcionesCCEnum)item).GetDescription()); }

                        //var whereExcepcionCC = "";

                        //if (excepcionCC.Count() > 0)
                        //{
                        //    whereExcepcionCC = "OR ";                                
                        //    whereExcepcionCC += "(cc in (";
                        //    foreach (var item in excepcionCC) whereExcepcionCC += "'" + ((ExcepcionesCCEnum)item).GetDescription() + "',";
                        //    whereExcepcionCC = whereExcepcionCC.Substring(0, whereExcepcionCC.Length - 1);
                        //    whereExcepcionCC += ") AND cta in (5000, 5900))";
                        //}
                        var consulta_ppal = "";
                        List<string> mesesConsulta = new List<string> { "ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic" };

                        for (int i = 1; i <= mes; i++)
                        {
                            if (i == mes)
                            {
                                consulta_ppal += string.Format(
                                    @"SELECT year, cta, scta, sscta, cc, mes, sum(monto) AS monto, 1 AS empresa FROM sc_movpol WHERE (year = ? OR year = ?) AND mes = " + i.ToString() + " AND scta != 23 AND cta = 5280 AND scta != 23 AND cc IN {0} GROUP BY mes, year, cta, scta, sscta, cc"
                                    , ccs.ToParamInValue());
                                if (lstExcepcionCC.Count() > 0) 
                                {
                                    consulta_ppal += string.Format(
                                        @" UNION SELECT year, cta, scta, sscta, cc, mes, sum(monto) AS monto, 1 AS empresa FROM sc_movpol WHERE (year = ? OR year = ?) AND mes = " + i.ToString() + " AND scta != 23 AND cta = 5000 AND scta != 23 AND cc IN {0} GROUP BY mes, year, cta, scta, sscta, cc"
                                        , lstExcepcionCC.ToParamInValue());
                                }
                            }
                            else
                            {
                                consulta_ppal += string.Format(
                                    @"SELECT year, cta, scta, sscta, cc, " + i.ToString() + " as mes, sum(" + mesesConsulta[i - 1] + "cargos + " + mesesConsulta[i - 1] + "abonos) AS monto, 1 AS empresa FROM sc_salcont_cc WHERE (year = ? OR year = ?) AND cta = 5280 AND cc IN {0} GROUP BY year, cta, scta, sscta, cc UNION "
                                    , ccs.ToParamInValue());
                                if (lstExcepcionCC.Count() > 0)
                                {
                                    consulta_ppal += string.Format(
                                    @"SELECT year, cta, scta, sscta, cc, " + i.ToString() + " as mes, sum(" + mesesConsulta[i - 1] + "cargos + " + mesesConsulta[i - 1] + "abonos) AS monto, 1 AS empresa FROM sc_salcont_cc WHERE (year = ? OR year = ?) AND cta = 5000 AND cc IN {0} GROUP BY year, cta, scta, sscta, cc UNION "
                                    , lstExcepcionCC.ToParamInValue());
                                }
                            }
                            query.parametros.Add(new OdbcParameterDTO
                            {
                                nombre = "year",
                                tipo = OdbcType.Int,
                                valor = year
                            });
                            query.parametros.Add(new OdbcParameterDTO
                            {
                                nombre = "year",
                                tipo = OdbcType.Int,
                                valor = year - 1
                            });
                            query.parametros.AddRange(ccs.Select(x => new OdbcParameterDTO
                            {
                                nombre = "cc",
                                tipo = OdbcType.NVarChar,
                                valor = x
                            }).ToList());
                            if (lstExcepcionCC.Count() > 0)
                            {
                                query.parametros.Add(new OdbcParameterDTO
                                {
                                    nombre = "year",
                                    tipo = OdbcType.Int,
                                    valor = year
                                });
                                query.parametros.Add(new OdbcParameterDTO
                                {
                                    nombre = "year",
                                    tipo = OdbcType.Int,
                                    valor = year - 1
                                });
                                query.parametros.AddRange(lstExcepcionCC.Select(x => new OdbcParameterDTO
                                {
                                    nombre = "cc",
                                    tipo = OdbcType.NVarChar,
                                    valor = x
                                }).ToList());
                            }
                        }

                        query.consulta = consulta_ppal;
                        #endregion
                    }
                    else if (((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora && arrArrendadora != null && arrConstruplan == null) || (arrConstruplan == null && arrArrendadora != null))
                    {
                        #region ARRENDADORA
                        var areasCuentas = _context.tblP_CC.Where(x => arrArrendadora.Contains(x.id)).ToList();
                        var where_area_cuenta = "";
                        foreach (var areaCuenta in areasCuentas)
                        {
                            where_area_cuenta += string.Format(@"(area = {0} AND cuenta_oc = {1})", areaCuenta.area, areaCuenta.cuenta);

                            if (areaCuenta != areasCuentas.Last())
                            {
                                where_area_cuenta += " OR ";
                            }
                        }

                        queryArr.consulta = string.Format(
                            @"SELECT year, mes, cta, scta, sscta, area, cuenta_oc, sum(monto) AS monto, 2 AS empresa FROM sc_movpol WHERE (year = ? OR year = ?) AND mes <= ? AND scta != 23 AND (cta = 5280 {0}) AND ({1}) GROUP BY year, mes, cta, scta, sscta, area, cuenta_oc", (costosAdministrativos ? "" : "OR cta = 5000"), where_area_cuenta);

                        queryArr.parametros.Add(new OdbcParameterDTO { nombre = "year", tipo = OdbcType.Int, valor = year });
                        queryArr.parametros.Add(new OdbcParameterDTO { nombre = "year", tipo = OdbcType.Int, valor = (year - 1) });
                        queryArr.parametros.Add(new OdbcParameterDTO { nombre = "mes", tipo = OdbcType.Int, valor = mes });
                        #endregion
                    }
                    else if (arrConstruplan.Count() > 0 && (arrArrendadora != null || arrArrendadora.Count() > 0))
                    {
                        #region CONSTRUPLAN
                        var consulta_ppal = "";
                        List<string> mesesConsulta = new List<string> { "ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic" };
                        var _excepcionCC = Enum.GetValues(typeof(ExcepcionesCCEnum));
                        List<int> excepcionCC = new List<int>((int[])_excepcionCC);
                        List<string> lstExcepcionCC = new List<string>();
                        var auxExcepcionCC = arrConstruplan.Where(x => excepcionCC.Contains(x)).ToList();
                        foreach (var item in auxExcepcionCC) { lstExcepcionCC.Add(((ExcepcionesCCEnum)item).GetDescription()); }

                        for (int i = 1; i <= mes; i++)
                        {
                            if (i == mes)
                            {
                                consulta_ppal += string.Format(
                                    @"SELECT year, cta, scta, sscta, cc, mes, sum(monto) AS monto, 1 AS empresa FROM sc_movpol WHERE (year = ? OR year = ?) AND mes = " + i.ToString() + " AND scta != 23 AND cta = 5280 AND cc IN {0} GROUP BY mes, year, cta, scta, sscta, cc"
                                    , ccs.ToParamInValue());
                                if (lstExcepcionCC.Count() > 0)
                                {
                                    consulta_ppal += string.Format(
                                        @" UNION SELECT year, cta, scta, sscta, cc, mes, sum(monto) AS monto, 1 AS empresa FROM sc_movpol WHERE (year = ? OR year = ?) AND mes = " + i.ToString() + " AND scta != 23 AND cta = 5000 AND cc IN {0} GROUP BY mes, year, cta, scta, sscta, cc"
                                        , lstExcepcionCC.ToParamInValue());
                                }
                            }
                            else
                            {
                                consulta_ppal += string.Format(
                                    @"SELECT year, cta, scta, sscta, cc, " + i.ToString() + " as mes, sum(" + mesesConsulta[i - 1] + "cargos + " + mesesConsulta[i - 1] + "abonos) AS monto, 1 AS empresa FROM sc_salcont_cc WHERE (year = ? OR year = ?) AND cta = 5280 AND cc IN {0} GROUP BY year, cta, scta, sscta, cc UNION "
                                    , ccs.ToParamInValue());
                                if (lstExcepcionCC.Count() > 0)
                                {
                                    consulta_ppal += string.Format(
                                    @"SELECT year, cta, scta, sscta, cc, " + i.ToString() + " as mes, sum(" + mesesConsulta[i - 1] + "cargos + " + mesesConsulta[i - 1] + "abonos) AS monto, 1 AS empresa FROM sc_salcont_cc WHERE (year = ? OR year = ?) AND cta = 5000 AND cc IN {0} GROUP BY year, cta, scta, sscta, cc UNION "
                                    , lstExcepcionCC.ToParamInValue());
                                }
                            }
                            query.parametros.Add(new OdbcParameterDTO
                            {
                                nombre = "year",
                                tipo = OdbcType.Int,
                                valor = year
                            });
                            query.parametros.Add(new OdbcParameterDTO
                            {
                                nombre = "year",
                                tipo = OdbcType.Int,
                                valor = year - 1
                            });
                            query.parametros.AddRange(ccs.Select(x => new OdbcParameterDTO
                            {
                                nombre = "cc",
                                tipo = OdbcType.NVarChar,
                                valor = x
                            }).ToList());
                            if (lstExcepcionCC.Count() > 0)
                            {
                                query.parametros.Add(new OdbcParameterDTO
                                {
                                    nombre = "year",
                                    tipo = OdbcType.Int,
                                    valor = year
                                });
                                query.parametros.Add(new OdbcParameterDTO
                                {
                                    nombre = "year",
                                    tipo = OdbcType.Int,
                                    valor = year - 1
                                });
                                query.parametros.AddRange(lstExcepcionCC.Select(x => new OdbcParameterDTO
                                {
                                    nombre = "cc",
                                    tipo = OdbcType.NVarChar,
                                    valor = x
                                }).ToList());
                            }
                        }

                        query.consulta = consulta_ppal;
                        #endregion

                        #region ARRENDADORA
                        var areasCuentas = _context.tblP_CC.Where(x => arrArrendadora.Contains(x.id)).ToList();
                        var where_area_cuenta = "";
                        foreach (var areaCuenta in areasCuentas)
                        {
                            where_area_cuenta += string.Format(@"(area = {0} AND cuenta_oc = {1})", areaCuenta.area, areaCuenta.cuenta);

                            if (areaCuenta != areasCuentas.Last())
                            {
                                where_area_cuenta += " OR ";
                            }
                        }

                        queryArr.consulta = string.Format(
                            @"SELECT year, mes, cta, scta, sscta, area, cuenta_oc, sum(monto) AS monto, 2 AS empresa FROM sc_movpol WHERE (year = ? OR year = ?) AND mes <= ? AND scta != 23 AND (cta = 5280 {0}) AND ({1}) GROUP BY year, mes, cta, scta, sscta, area, cuenta_oc", (costosAdministrativos ? "" : "OR cta = 5000"), where_area_cuenta);

                        queryArr.parametros.Add(new OdbcParameterDTO { nombre = "year", tipo = OdbcType.Int, valor = year });
                        queryArr.parametros.Add(new OdbcParameterDTO { nombre = "year", tipo = OdbcType.Int, valor = (year - 1) });
                        queryArr.parametros.Add(new OdbcParameterDTO { nombre = "mes", tipo = OdbcType.Int, valor = mes });
                        #endregion
                    }

                    List<SumaDTO> gastos = new List<SumaDTO>();
                    List<MovPolControlPptalDTO> auxGastos = new List<MovPolControlPptalDTO>();
                    List<MovPolControlPptalDTO> auxGastosGCPLAN = new List<MovPolControlPptalDTO>();
                    if (query.consulta != null)
                    {
                        auxGastos = _contextEnkontrol.Select<MovPolControlPptalDTO>(EnkontrolAmbienteEnum.ProdCPLAN, query);
                        auxGastos.AddRange(_contextEnkontrol.Select<MovPolControlPptalDTO>(EnkontrolAmbienteEnum.ProdGCPLAN, query));
                        datosGenerales.AddRange(auxGastos);
                    }

                    List<SumaDTO> gastosArr = new List<SumaDTO>();
                    List<MovPolControlPptalDTO> auxGastosArr = new List<MovPolControlPptalDTO>();
                    if (queryArr.consulta != null)
                    {
                        auxGastosArr = _contextEnkontrol.Select<MovPolControlPptalDTO>(EnkontrolAmbienteEnum.ProdARREND, queryArr);
                        datosGenerales.AddRange(auxGastosArr);
                    }

                    gastos = auxGastos.Where(x => x.year == year && ((x.mes == mes) || (x.mes < mes && x.scta == 0 && x.sscta == 0) || (x.mes < mes && x.scta == 23 && x.sscta == 0))).GroupBy(x => x.mes).Select(x => new SumaDTO 
                    {
                        mes = x.Key,
                        suma = x.Where(y => y.scta != 23).Sum(y => y.monto) - x.Where(y => y.scta == 23).Sum(y => y.monto)
                    }).ToList();

                    gastosArr = auxGastosArr.Where(x => x.year == year).GroupBy(x => x.mes).Select(x => new SumaDTO
                    {
                        mes = x.Key,
                        suma = x.Sum(y => y.monto)
                    }).ToList();

                    session["ControlPresupuestalDatos"] = datosGenerales;

                    var auxiliar = datosGenerales.Where(x => x.year == 2023 && x.mes == 8).ToList();

                    decimal auxiliar2 = 0M;
                    auxiliar2 = auxiliar.Sum(x => x.monto);
                    
                    gasto = gastos.Sum(x => x.suma);
                    gasto += gastosArr.Sum(s => s.suma);

                    var graficaGastoIngreso = new GraficaArcoDTO();

                    #region INGRESO CONSTRUPLAN
                    List<SumaDTO> ingresos = new List<SumaDTO>();
                    using (var _ctxCplan = new MainContext(EmpresaEnum.Construplan))
                    {
                        var cuentasIngresos = _ctxCplan.tblAF_CtrlCuenta.Where(x => x.tipoCuenta == 1 && x.registroActivo).ToList();

                        string whereIngresos = "";
                        foreach (var ctaIngreso in cuentasIngresos)
                        {
                            whereIngresos += "(cta = " + ctaIngreso.cta + " AND scta = " + ctaIngreso.scta + " AND sscta = " + ctaIngreso.sscta + ")";

                            if (ctaIngreso != cuentasIngresos.Last())
                            {
                                whereIngresos += " OR ";
                            }
                        }

                        OdbcConsultaDTO queryIngresos = new OdbcConsultaDTO();

                        var consulta_ppal_ingresos = "";
                        List<string> mesesConsulta = new List<string> { "ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic" };

                        for (int i = 1; i <= mes; i++)
                        {
                            if (i == mes)
                            {
                                consulta_ppal_ingresos += string.Format(
                                        @"SELECT " + i.ToString() + ", sum(monto) AS suma FROM sc_movpol WHERE year = ? AND mes = " + i.ToString() + " AND (" + whereIngresos + ")"
                                        , whereIngresos);
                            }
                            else
                            {
                                consulta_ppal_ingresos += string.Format(
                                    @"SELECT " + i.ToString() + " as mes, (SELECT sum(" + mesesConsulta[i - 1] + "cargos + " + mesesConsulta[i - 1] + "abonos) FROM sc_salcont_cc WHERE year = ? AND (" + whereIngresos + ")) as suma UNION "
                                    , whereIngresos);
                            }
                            queryIngresos.parametros.Add(new OdbcParameterDTO
                            {
                                nombre = "year",
                                tipo = OdbcType.Int,
                                valor = year
                            });
                        }

                        queryIngresos.consulta = consulta_ppal_ingresos;


                        ingresos = _contextEnkontrol.Select<SumaDTO>(EnkontrolAmbienteEnum.ProdCPLAN, queryIngresos);
                        ingresos.AddRange(_contextEnkontrol.Select<SumaDTO>(EnkontrolAmbienteEnum.ProdGCPLAN, queryIngresos));
                    }
                    #endregion

                    #region INGRESO ARRENDADORA
                    List<SumaDTO> ingresoArrendadora = new List<SumaDTO>();
                    using (var _ctxArre = new MainContext(EmpresaEnum.Arrendadora))
                    {
                        var cuentasIngresosArre = _ctxArre.tblAF_CtrlCuenta.Where(x => x.tipoCuenta == 1 && x.registroActivo).ToList();

                        string whereIngresosArre = "";
                        foreach (var ctaIngreso in cuentasIngresosArre)
                        {
                            whereIngresosArre += "(cta = " + ctaIngreso.cta + " AND scta = " + ctaIngreso.scta + " AND sscta = " + ctaIngreso.sscta + ")";
                            if (ctaIngreso != cuentasIngresosArre.Last())
                            {
                                whereIngresosArre += " OR ";
                            }
                        }

                        OdbcConsultaDTO queryIngresosArre = new OdbcConsultaDTO();

                        var consulta_ppal_ingresos_arrendadora = "";
                        List<string> mesesConsulta = new List<string> { "ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic" };

                        for (int i = 1; i <= mes; i++)
                        {
                            if (i == mes)
                            {
                                consulta_ppal_ingresos_arrendadora += string.Format(
                                        @"SELECT " + i.ToString() + ", sum(monto) AS suma FROM sc_movpol WHERE year = ? AND mes = " + i.ToString() + " AND (" + whereIngresosArre + ") AND cc = '227'"
                                        , whereIngresosArre);
                            }
                            else
                            {
                                consulta_ppal_ingresos_arrendadora += string.Format(
                                    @"SELECT " + i.ToString() + " as mes, (SELECT sum(" + mesesConsulta[i - 1] + "cargos + " + mesesConsulta[i - 1] + "abonos) FROM sc_salcont_cc WHERE year = ? AND (" + whereIngresosArre + ") AND cc = '227') as suma UNION "
                                    , whereIngresosArre);
                            }
                            queryIngresosArre.parametros.Add(new OdbcParameterDTO
                            {
                                nombre = "year",
                                tipo = OdbcType.Int,
                                valor = year
                            });
                        }

                        queryIngresosArre.consulta = consulta_ppal_ingresos_arrendadora;
                        ingresoArrendadora = _contextEnkontrol.Select<SumaDTO>(EnkontrolAmbienteEnum.ProdARREND, queryIngresosArre);
                    }
                    #endregion

                    ingreso = ingresos.Sum(x => x.suma) * -1;
                    ingreso = ingreso + (ingresoArrendadora.Sum(x => x.suma) * -1);

                    ingresoDB = _context.Select<decimal>(new DapperDTO
                    {
                        baseDatos = MainContextEnum.Construplan,
                        consulta = @"SELECT ppto FROM tblAF_CtrlPptalOfCe_IngresosEstimados WHERE idMes = @idMes AND registroActivo = @registroActivo",
                        parametros = new { idMes = mes, registroActivo = true }
                    }).FirstOrDefault();

                    #region SE OBTIENE EL INGRESO PROPORCIONAL EN BASE DE LOS CC SELECCIONADOS
                    //tblAF_CtrlPptalOfCe_PptoInicial objPptoInicial = _context.tblAF_CtrlPptalOfCe_PptoInicial.Where(w => w.anio == year && w.registroActivo).FirstOrDefault();
                    //if (objPptoInicial == null)
                    //    throw new Exception("No se encuentra el presupuesto seleccionado.");

                    int idPpto = 0;
                    if (arrConstruplan != null && arrArrendadora == null)
                        idPpto = periodoPresupuesto.id;
                    else if (arrConstruplan == null && arrArrendadora != null)
                        idPpto = periodoPresupuestoArr.id;

                    string whereCC = string.Empty;
                    string whereCCARR = string.Empty;
                    int contadorWhere = 0;
                    int contadorWhereArr = 0;
                    if (arrConstruplan != null && arrArrendadora == null)
                    {
                        #region CONSTRUPLAN
                        for (int i = 0; i < arrConstruplan.Count(); i++)
                        {
                            contadorWhere++;
                            if (arrConstruplan.Count() == contadorWhere)
                                whereCC += string.Format("{0}", arrConstruplan[i]);
                            else
                                whereCC += string.Format("{0}, ", arrConstruplan[i]);
                        }
                        #endregion
                    }
                    else if (arrConstruplan == null && arrArrendadora != null)
                    {
                        #region ARRENDADORA
                        for (int i = 0; i < arrArrendadora.Count(); i++)
                        {
                            contadorWhere++;
                            if (arrArrendadora.Count() == contadorWhere)
                                whereCC += string.Format("{0}", arrArrendadora[i]);
                            else
                                whereCC += string.Format("{0}, ", arrArrendadora[i]);
                        }
                        #endregion
                    }
                    else if (arrConstruplan != null && arrArrendadora != null)
                    {
                        #region CONSTRUPLAN
                        for (int i = 0; i < arrConstruplan.Count(); i++)
                        {
                            contadorWhere++;
                            if (arrConstruplan.Count() == contadorWhere)
                                whereCC += string.Format("{0}", arrConstruplan[i]);
                            else
                                whereCC += string.Format("{0}, ", arrConstruplan[i]);
                        }
                        #endregion

                        #region ARRENDADORA
                        for (int i = 0; i < arrArrendadora.Count(); i++)
                        {
                            contadorWhereArr++;
                            if (arrArrendadora.Count() == contadorWhereArr)
                                whereCCARR += string.Format("{0}", arrArrendadora[i]);
                            else
                                whereCCARR += string.Format("{0}, ", arrArrendadora[i]);
                        }
                        #endregion
                    }

                    strQuery = string.Empty;
                    decimal porcIngresoPpto = new decimal();
                    if (arrConstruplan != null && arrArrendadora == null)
                    {
                        #region CONSTRUPLAN
                        strQuery = string.Format(@"SELECT SUM(porcIngresoPpto) AS porcIngresoPpto FROM tblAF_CtrlPptalOfCe_CatPorcIngresosPptoAnual WHERE idPpto = {0} AND idCC IN ({1}) AND registroActivo = 1", periodoPresupuesto.id, whereCC);
                        porcIngresoPpto = _context.Select<decimal>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Construplan,
                            consulta = strQuery
                        }).FirstOrDefault();
                        #endregion
                    }
                    else if (arrConstruplan == null && arrArrendadora != null)
                    {
                        #region ARRENDADORA
                        strQuery = string.Format(@"SELECT SUM(porcIngresoPpto) AS porcIngresoPpto FROM tblAF_CtrlPptalOfCe_CatPorcIngresosPptoAnual WHERE idPpto = {0} AND idCC IN ({1}) AND registroActivo = 1", periodoPresupuestoArr.id, whereCC);
                        porcIngresoPpto = _context.Select<decimal>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Arrendadora,
                            consulta = strQuery
                        }).FirstOrDefault();
                        #endregion
                    }
                    else if (arrConstruplan != null && arrArrendadora != null)
                    {
                        #region CONSTRUPLAN
                        strQuery = string.Format(@"SELECT SUM(porcIngresoPpto) AS porcIngresoPpto FROM tblAF_CtrlPptalOfCe_CatPorcIngresosPptoAnual WHERE idPpto = {0} AND idCC IN ({1}) AND registroActivo = 1", periodoPresupuesto.id, whereCC);
                        porcIngresoPpto = _context.Select<decimal>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Construplan,
                            consulta = strQuery,
                            parametros = new { idPpto = periodoPresupuesto.id, registroActivo = true }
                        }).FirstOrDefault();
                        #endregion

                        #region ARRENDADORA
                        strQuery = string.Format(@"SELECT SUM(porcIngresoPpto) AS porcIngresoPpto FROM tblAF_CtrlPptalOfCe_CatPorcIngresosPptoAnual WHERE idPpto = {0} AND idCC IN ({1}) AND registroActivo = 1", periodoPresupuestoArr.id, whereCCARR);
                        porcIngresoPpto += _context.Select<decimal>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Arrendadora,
                            consulta = strQuery
                        }).FirstOrDefault();
                        #endregion
                    }

                    if ((decimal)porcIngresoPpto > 0 && (decimal)ingreso > 0)
                        ingreso = ((decimal)porcIngresoPpto * (decimal)ingreso) / 100;

                    if ((decimal)porcIngresoPpto > 0 && (decimal)ingresoDB > 0)
                        ingresoDB = ((decimal)porcIngresoPpto * (decimal)ingresoDB) / 100;
                    #endregion

                    #region GASTOS VS INGRESOS - ACUMULADO
                    string colorGasto = "";
                    var porcentajeIngresoGasto = (gasto * 100) / (ingreso > 0 ? ingreso : 1);
                    var montoRealAcumulado = (gasto * 100) / (ingreso > 0 ? ingreso : 1);
                    var porcentajeRealAcumulado = (montoRealAcumulado * 100) / ratioGastoVsIngreso;
                    var coloIngresoGasto = "";

                    decimal ingresoMensual = 0;

                    if (ingresos[0].mes == 0)
                        ingresoMensual = ingresos.Sum(x => x.suma) * -1;
                    else
                        ingresoMensual = ingresos.Where(x => x.mes == mes).Sum(x => x.suma) * -1;

                    ingresoMensual = ingresoMensual + (ingresoArrendadora.Where(x => x.mes == mes).Sum(x => x.suma) * -1);
                    ingresoMensual = ((decimal)porcIngresoPpto * (decimal)ingresoMensual) / 100;

                    decimal gastoMensual = 0;

                    #region CP
                    if (gastos.Count() > 0)
                    {
                        if (gastos[0].mes == 0)
                            gastoMensual += gastos.Sum(x => x.suma);
                        else
                            gastoMensual += gastos.Where(x => x.mes == mes).Sum(x => x.suma);
                    }
                    #endregion

                    #region ARR
                    if (gastosArr.Count() > 0)
                    {
                        if (gastosArr[0].mes == 0)
                            gastoMensual += gastosArr.Sum(x => x.suma);
                        else
                            gastoMensual += gastosArr.Where(x => x.mes == mes).Sum(x => x.suma);
                    }
                    #endregion

                    var porcentajeIngresoGastoMensual = (gastoMensual * 100) / (ingresoMensual > 0 ? ingresoMensual : 1);
                    var porcentajeRealMensual = (porcentajeIngresoGastoMensual * 100) / ratioGastoVsIngreso;
                    var colorIngresoGastoMensual = "";

                    if (porcentajeRealAcumulado > 100)
                    {
                        coloIngresoGasto = "#AE2012";
                    }
                    else if (porcentajeRealAcumulado >= 97 && porcentajeRealAcumulado <= 100)
                    {
                        coloIngresoGasto = "#EE9B00";
                    }
                    else if (porcentajeRealAcumulado < 97)
                    {
                        coloIngresoGasto = "#0A9396";
                    }

                    if (porcentajeRealMensual > 100)
                    {
                        colorIngresoGastoMensual = "#AE2012";
                    }
                    else if (porcentajeRealMensual >= 97 && porcentajeRealMensual <= 100)
                    {
                        colorIngresoGastoMensual = "#EE9B00";
                    }
                    else if (porcentajeRealMensual < 97)
                    {
                        colorIngresoGastoMensual = "#0A9396";
                    }

                    if (porcentajeIngresoGasto > 100)
                    {
                        colorGasto = "#ff0000";
                    }
                    else if (porcentajeIngresoGasto > 85)
                    {
                        colorGasto = "#ffff00";
                    }
                    else
                    {
                        colorGasto = "#80ff00";
                    }

                    if (ingreso >= gasto)
                    {
                        graficaGastoIngreso.serie.Add(new serieArcoDTO
                        {
                            name = "Gastos",
                            y = porcentajeIngresoGasto,
                            color = colorGasto
                        });
                        graficaGastoIngreso.serie.Add(new serieArcoDTO
                        {
                            name = "Ingresos",
                            y = 100 - porcentajeIngresoGasto,
                            color = "#0080ff"
                        });
                    }
                    else
                    {
                        var _porcentajeIngreso = (ingreso * 100) / (gasto > 0 ? gasto : 1);
                        graficaGastoIngreso.serie.Add(new serieArcoDTO
                        {
                            name = "Ingresos",
                            y = _porcentajeIngreso,
                            color = "#0080ff"
                        });
                        graficaGastoIngreso.serie.Add(new serieArcoDTO
                        {
                            name = "Gastos",
                            y = 100 - _porcentajeIngreso,
                            color = colorGasto
                        });
                    }

                    var montoGasto = gasto;
                    var montoIngreso = ingreso;
                    var porcentajeCumplimientoIngresoGasto = porcentajeIngresoGasto;
                    #endregion

                    #region GASTOS VS PRESUPUESTOS - ACUMULADO
                    string colorGastoPpto = "";
                    var porcentajeIngresoGastoPpto = (gasto * 100) / (ingresoDB > 0 ? ingresoDB : 1);
                    var montoRealAcumuladoPpto = (gasto * 100) / (ingresoDB > 0 ? ingresoDB : 1);
                    var porcentajeRealAcumuladoPpto = (montoRealAcumulado * 100) / ratioGastoVsIngreso;
                    var coloIngresoGastoPpto = "";

                    var ingresoMensualPpto = ingresoDB * -1;
                    //ingresoMensual = ingresoMensual + (ingresoArrendadora.Where(x => x.mes == mes).Sum(x => x.suma) * -1);

                    //ingresoMensual = ((decimal)porcIngresoPpto * (decimal)ingresoMensual) / 100;

                    var gastoMensualPpto = gastos.Where(x => x.mes == mes).Sum(x => x.suma) + gastosArr.Where(x => x.mes == mes).Sum(x => x.suma);
                    var porcentajeIngresoGastoMensualPpto = (gastoMensual * 100) / (ingresoMensual > 0 ? ingresoMensual : 1);
                    var porcentajeRealMensualPpto = (porcentajeIngresoGastoMensual * 100) / ratioGastoVsIngreso;
                    var colorIngresoGastoMensualPpto = "";

                    if (porcentajeRealAcumuladoPpto > 100)
                    {
                        coloIngresoGastoPpto = "#AE2012";
                    }
                    else if (porcentajeRealAcumuladoPpto >= 97 && porcentajeRealAcumuladoPpto <= 100)
                    {
                        coloIngresoGastoPpto = "#EE9B00";
                    }
                    else if (porcentajeRealAcumuladoPpto < 97)
                    {
                        coloIngresoGastoPpto = "#0A9396";
                    }

                    if (porcentajeRealMensualPpto > 100)
                    {
                        colorIngresoGastoMensualPpto = "#AE2012";
                    }
                    else if (porcentajeRealMensualPpto >= 97 && porcentajeRealMensualPpto <= 100)
                    {
                        colorIngresoGastoMensualPpto = "#EE9B00";
                    }
                    else if (porcentajeRealMensualPpto < 97)
                    {
                        colorIngresoGastoMensualPpto = "#0A9396";
                    }

                    if (porcentajeIngresoGastoPpto > 100)
                    {
                        colorGastoPpto = "#ff0000";
                    }
                    else if (porcentajeIngresoGastoPpto > 85)
                    {
                        colorGastoPpto = "#ffff00";
                    }
                    else
                    {
                        colorGastoPpto = "#80ff00";
                    }

                    if (ingresoDB >= gasto)
                    {
                        graficaGastoIngreso.serie.Add(new serieArcoDTO
                        {
                            name = "Gastos",
                            y = porcentajeIngresoGasto,
                            color = colorGasto
                        });
                        graficaGastoIngreso.serie.Add(new serieArcoDTO
                        {
                            name = "Ingresos",
                            y = 100 - porcentajeIngresoGasto,
                            color = "#0080ff"
                        });
                    }
                    else
                    {
                        var _porcentajeIngresoPpto = (ingresoDB * 100) / (gasto > 0 ? gasto : 1);
                        graficaGastoIngreso.serie.Add(new serieArcoDTO
                        {
                            name = "Ingresos",
                            y = _porcentajeIngresoPpto,
                            color = "#0080ff"
                        });
                        graficaGastoIngreso.serie.Add(new serieArcoDTO
                        {
                            name = "Gastos",
                            y = 100 - _porcentajeIngresoPpto,
                            color = colorGasto
                        });
                    }

                    var montoGastoPpto = gasto;
                    var montoIngresoPpto = ingresoDB;
                    //var porcentajeCumplimientoIngresoGastoPpto = porcentajeIngresoGastoPpto;

                    var porcentajeCumplimientoIngresoGastoPpto = (ingreso * 100) / (ingresoDB > 0 ? ingresoDB : 1);
                    #endregion

                    #region GFX PRESUPUESTO / GASTO
                    var presupuestoAcumulado = 0M;
                    var graficaPresupuestoGasto = new GraficaArcoDTO();

                    for (int i = 0; i < mes; i++)
                    {
                        presupuestoAcumulado += actividades.Sum(x => Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[i]).GetValue(x, null)));
                        var actividadesIDs = actividades.Select(x => x.id).ToList();
                        var aditivas = _context.tblAF_CtrlAditiva.Where(x => actividadesIDs.Contains(x.capPptosId)).Where(x => x.registroActivo && x.autorizado).ToList();

                        presupuestoAcumulado += aditivas.Sum(x => Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[i]).GetValue(x, null)));
                    }

                    string colorGasto_arcoPresupuesto = "";
                    var maximoGraficaPresupuestoGasto = 150M;
                    var porcentajePresupuestoGasto = (gasto * 100M) / (presupuestoAcumulado > 0 ? presupuestoAcumulado : 1);
                    var porcentajePresupuestoBase100 = porcentajePresupuestoGasto;
                    var porcentajePresupuestoAcumulado66 = (66.6M * gasto) / (presupuestoAcumulado > 0 ? presupuestoAcumulado : 1);

                    if (porcentajePresupuestoGasto > 97)
                    {
                        colorGasto_arcoPresupuesto = "#AE2012";
                    }
                    else if (porcentajePresupuestoGasto >= 95)
                    {
                        colorGasto_arcoPresupuesto = "#EE9B00";
                    }
                    else
                    {
                        colorGasto_arcoPresupuesto = "#0A9396";
                    }

                    if (porcentajePresupuestoBase100 == 100)
                    {
                        graficaPresupuestoGasto.serie.Add(new serieArcoDTO
                        {
                            name = "GASTO",
                            y = 66.6M,
                            color = colorGasto_arcoPresupuesto
                        });
                        graficaPresupuestoGasto.serie.Add(new serieArcoDTO
                        {
                            name = "PRESUPUESTO",
                            y = 0M,
                            color = colorGasto_arcoPresupuesto
                        });
                        graficaPresupuestoGasto.serie.Add(new serieArcoDTO
                        {
                            name = "",
                            y = 33.4M,
                            color = "#005F73"
                        });
                    }
                    else if (porcentajePresupuestoBase100 > 100)
                    {
                        graficaPresupuestoGasto.serie.Add(new serieArcoDTO
                        {
                            name = "PRESUPUESTO",
                            y = 66.6M,
                            color = "#375aef"
                        });
                        graficaPresupuestoGasto.serie.Add(new serieArcoDTO
                        {
                            name = "GASTO",
                            y = porcentajePresupuestoAcumulado66 - 66.6M,
                            color = colorGasto_arcoPresupuesto
                        });
                        graficaPresupuestoGasto.serie.Add(new serieArcoDTO
                        {
                            name = "",
                            y = 100 - porcentajePresupuestoAcumulado66,
                            color = "#005F73"
                        });
                    }
                    else
                    {
                        graficaPresupuestoGasto.serie.Add(new serieArcoDTO
                        {
                            name = "GASTO",
                            y = porcentajePresupuestoAcumulado66,
                            color = colorGasto_arcoPresupuesto
                        });
                        graficaPresupuestoGasto.serie.Add(new serieArcoDTO
                        {
                            name = "PRESUPUESTO",
                            y = 66.6M - porcentajePresupuestoAcumulado66,
                            color = "#375aef"
                        });
                        graficaPresupuestoGasto.serie.Add(new serieArcoDTO
                        {
                            name = "",
                            y = 100 - 66.6M,
                            color = "#005F73"
                        });
                    }
                    #endregion

                    #region GFX PRESUPUESTO / GASTO MENSUAL
                    var presupuestoMensual = actividades.Sum(x => Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[mes - 1]).GetValue(x, null)));

                    var actividadesPresupuestoMensualIDs = actividades.Select(x => x.id).ToList();
                    var aditivasPresupuestoMensual = _context.tblAF_CtrlAditiva.Where(x => actividadesPresupuestoMensualIDs.Contains(x.capPptosId)).Where(x => x.registroActivo && x.autorizado).ToList();

                    presupuestoMensual += aditivasPresupuestoMensual.Sum(x => Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[mes - 1]).GetValue(x, null)));

                    string colorGasto_arcoPresupuestoMensual = "";
                    decimal gastosTotal = (gastos.Count() > 0 ? gastos.Where(x => x.mes == mes).Sum(x => x.suma) : 0) + (gastosArr.Count() > 0 ? gastosArr.Where(x => x.mes == mes).Sum(x => x.suma) : 0);
                    var porcentajeGastoMensualBase100 = (gastosTotal * 100) / (presupuestoMensual > 0 ? presupuestoMensual : 1);
                    var porcentajeGastoMensual = (66.6M * gastosTotal) / (presupuestoMensual > 0 ? presupuestoMensual : 1);
                    if (porcentajeGastoMensualBase100 >= 97)
                    {
                        colorGasto_arcoPresupuestoMensual = "#AE2012"; // rojo
                    }
                    else if (porcentajeGastoMensualBase100 >= 95)
                    {
                        colorGasto_arcoPresupuestoMensual = "#EE9B00"; // amarillo
                    }
                    else
                    {
                        colorGasto_arcoPresupuestoMensual = "#0A9396";// verde
                    }

                    var graficaPresupuestoGastoMensual = new GraficaArcoDTO();
                    if (porcentajeGastoMensualBase100 == 100)
                    {
                        graficaPresupuestoGastoMensual.serie.Add(new serieArcoDTO
                        {
                            name = "GASTO",
                            y = 66.6M,
                            color = colorGasto_arcoPresupuestoMensual
                        });
                        graficaPresupuestoGastoMensual.serie.Add(new serieArcoDTO
                        {
                            name = "PRESUPUESTO",
                            y = 0M,
                            color = colorGasto_arcoPresupuestoMensual
                        });
                        graficaPresupuestoGastoMensual.serie.Add(new serieArcoDTO
                        {
                            name = "",
                            y = 33.4M,
                            color = "#005F73"
                        });
                    }
                    else if (porcentajeGastoMensualBase100 > 100)
                    {
                        graficaPresupuestoGastoMensual.serie.Add(new serieArcoDTO
                        {
                            name = "PRESUPUESTO",
                            y = 66.6M,
                            color = "#375aef"
                        });
                        graficaPresupuestoGastoMensual.serie.Add(new serieArcoDTO
                        {
                            name = "GASTO",
                            y = porcentajeGastoMensual - 66.6M,
                            color = colorGasto_arcoPresupuestoMensual
                        });
                        graficaPresupuestoGastoMensual.serie.Add(new serieArcoDTO
                        {
                            name = "",
                            y = 100 - porcentajeGastoMensual,
                            color = "#005F73"
                        });
                    }
                    else
                    {
                        graficaPresupuestoGastoMensual.serie.Add(new serieArcoDTO
                        {
                            name = "GASTO",
                            y = porcentajeGastoMensual,
                            color = colorGasto_arcoPresupuestoMensual
                        });
                        graficaPresupuestoGastoMensual.serie.Add(new serieArcoDTO
                        {
                            name = "PRESUPUESTO",
                            y = 66.6M - porcentajeGastoMensual,
                            color = "#375aef"
                        });
                        graficaPresupuestoGastoMensual.serie.Add(new serieArcoDTO
                        {
                            name = "",
                            y = 100 - 66.6M,
                            color = "#005F73"
                        });
                    }
                    #endregion

                    #region GFX CUMPLIMIENTO
                    var porcentajeCumplimiento = (gasto * 100) / (presupuestoAcumulado > 0 ? presupuestoAcumulado : 1);
                    string colorCumplimiento = "";
                    if (porcentajeCumplimiento > 100)
                    {
                        colorCumplimiento = "#AE2012";
                    }
                    else if (porcentajeCumplimiento > 85)
                    {
                        colorCumplimiento = "#EE9B00";
                    }
                    else
                    {
                        colorCumplimiento = "#0A9396";
                    }

                    var graficaCumplimiento = new GraficaArcoDTO();
                    if (presupuestoAcumulado >= gasto)
                    {
                        graficaCumplimiento.serie.Add(new serieArcoDTO
                        {
                            name = "Cumplimiento",
                            y = porcentajeCumplimiento,
                            color = colorCumplimiento
                        });
                        graficaCumplimiento.serie.Add(new serieArcoDTO
                        {
                            name = "Presupuesto",
                            y = 100 - porcentajeCumplimiento,
                            color = "#0080ff"
                        });
                    }
                    else
                    {
                        graficaCumplimiento.serie.Add(new serieArcoDTO
                        {
                            name = "Presupuesto",
                            y = 100 - (porcentajeCumplimiento - 100),
                            color = "#0080ff"
                        });
                        graficaCumplimiento.serie.Add(new serieArcoDTO
                        {
                            name = "Cumplimiento",
                            y = porcentajeCumplimiento - 100,
                            color = colorCumplimiento
                        });
                    }

                    #endregion

                    #region GFX PROYECCION

                    #region SE OBTIENE LOS MESES A MOSTRAR
                    GraficaProyeccionDTO objGraficaProyeccion = new GraficaProyeccionDTO();
                    string[] arrMonths = new string[] { "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre" };
                    for (int i = 0; i < arrMonths.Length; i++)
                    {
                        objGraficaProyeccion.lstCategorias.Add(arrMonths[i]);
                    }
                    #endregion

                    #region SE OBTIENE LOS PPTOS CAPTURADOS
                    List<string> lstCCID = new List<string>();
                    if (arrConstruplan != null && arrArrendadora == null)
                    {
                        #region CONSTRUPLAN
                        foreach (var item in arrConstruplan)
                        {
                            lstCCID.Add(item.ToString());
                        }
                        #endregion
                    }
                    else if (arrConstruplan == null && arrArrendadora != null)
                    {
                        #region ARRENDADORA
                        foreach (var item in arrArrendadora)
                        {
                            lstCCID.Add(item.ToString());
                        }
                        #endregion
                    }
                    else if (arrConstruplan != null && arrArrendadora != null)
                    {
                        #region CONSTRUPLAN
                        foreach (var item in arrConstruplan)
                        {
                            lstCCID.Add(item.ToString());
                        }
                        #endregion

                        #region ARRENDADORA
                        foreach (var item in arrArrendadora)
                        {
                            lstCCID.Add(item.ToString());
                        }
                        #endregion
                    }

                    // SE VERIFICA SI LOS PPTOS ESTAN AUTORIZADOS
                    List<tblAF_CtrlPptalOfCe_PptoAnual> lstPptosAutorizados = new List<tblAF_CtrlPptalOfCe_PptoAnual>();
                    List<tblAF_CtrlPptalOfCe_PptoAnual> lstPptosAutorizadosCP = new List<tblAF_CtrlPptalOfCe_PptoAnual>();
                    List<tblAF_CtrlPptalOfCe_PptoAnual> lstPptosAutorizadosARR = new List<tblAF_CtrlPptalOfCe_PptoAnual>();
                    strQuery = string.Empty;
                    if (arrConstruplan != null && arrArrendadora == null)
                    {
                        strQuery = string.Format(@"SELECT * FROM tblAF_CtrlPptalOfCe_PptoAnual WHERE idCC IN ({0}) AND autorizado = 1 AND registroActivo = 1", string.Join(",", arrConstruplan));
                        lstPptosAutorizados = _context.Select<tblAF_CtrlPptalOfCe_PptoAnual>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Construplan,
                            consulta = strQuery
                        }).ToList();
                        //lstPptosAutorizados = _context.tblAF_CtrlPptalOfCe_PptoAnual.Where(w => arrConstruplan.Contains(w.idCC) && w.autorizado && w.registroActivo).ToList();
                    }
                    else if (arrConstruplan == null && arrArrendadora != null)
                    {
                        strQuery = string.Format(@"SELECT * FROM tblAF_CtrlPptalOfCe_PptoAnual WHERE idCC IN ({0}) AND autorizado = 1 AND registroActivo = 1", string.Join(",", arrArrendadora));
                        lstPptosAutorizados = _context.Select<tblAF_CtrlPptalOfCe_PptoAnual>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Arrendadora,
                            consulta = strQuery
                        }).ToList();
                    }
                    else if (arrConstruplan != null && arrArrendadora != null)
                    {
                        // CONSTRUPLAN
                        strQuery = string.Format(@"SELECT * FROM tblAF_CtrlPptalOfCe_PptoAnual WHERE idCC IN ({0}) AND autorizado = 1 AND registroActivo = 1", string.Join(",", arrConstruplan));
                        lstPptosAutorizadosCP = _context.Select<tblAF_CtrlPptalOfCe_PptoAnual>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Construplan,
                            consulta = strQuery
                        }).ToList();

                        // ARRENDADORA
                        strQuery = string.Format(@"SELECT * FROM tblAF_CtrlPptalOfCe_PptoAnual WHERE idCC IN ({0}) AND autorizado = 1 AND registroActivo = 1", string.Join(",", arrArrendadora));
                        lstPptosAutorizadosARR = _context.Select<tblAF_CtrlPptalOfCe_PptoAnual>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Arrendadora,
                            consulta = strQuery
                        }).ToList();
                    }

                    List<string> lstCCIDAutorizados = new List<string>();
                    foreach (var item in lstPptosAutorizados)
                    {
                        lstCCIDAutorizados.Add(item.idCC.ToString());
                    }

                    foreach (var item in lstPptosAutorizadosCP)
                    {
                        lstCCIDAutorizados.Add(item.idCC.ToString());
                    }
                    foreach (var item in lstPptosAutorizadosARR)
                    {
                        lstCCIDAutorizados.Add(item.idCC.ToString());
                    }

                    List<tblAF_CtrlPptalOfCe_CapPptos> lstPptos = new List<tblAF_CtrlPptalOfCe_CapPptos>();
                    strQuery = string.Empty;
                    strQuery = string.Format(@"SELECT * FROM tblAF_CtrlPptalOfCe_CapPptos WHERE anio = {0} AND cc IN ({1}) AND registroActivo = 1", year, string.Join(",", lstCCIDAutorizados));
                    //if (arrConstruplan != null && arrArrendadora == null)
                    //{
                    //    lstPptos = _context.Select<tblAF_CtrlPptalOfCe_CapPptos>(new DapperDTO
                    //    {
                    //        baseDatos = MainContextEnum.Construplan,
                    //        consulta = strQuery
                    //    }).ToList();
                    //    //lstPptos = _context.tblAF_CtrlPptalOfCe_CapPptos.Where(w => w.anio == year && lstCCIDAutorizados.Contains(w.cc) && w.registroActivo).ToList();
                    //}
                    //else
                    //{
                    //    lstPptos = _context.Select<tblAF_CtrlPptalOfCe_CapPptos>(new DapperDTO
                    //    {
                    //        baseDatos = MainContextEnum.Arrendadora,
                    //        consulta = strQuery
                    //    }).ToList();
                    //}

                    if (arrConstruplan != null && arrArrendadora == null)
                    {
                        lstPptos = _context.Select<tblAF_CtrlPptalOfCe_CapPptos>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Construplan,
                            consulta = strQuery
                        }).ToList();
                        //lstPptos = _context.tblAF_CtrlPptalOfCe_CapPptos.Where(w => w.anio == year && lstCCIDAutorizados.Contains(w.cc) && w.registroActivo).ToList();
                    }
                    else if (arrConstruplan == null && arrArrendadora != null)
                    {
                        lstPptos = _context.Select<tblAF_CtrlPptalOfCe_CapPptos>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Arrendadora,
                            consulta = strQuery
                        }).ToList();
                    }
                    else if (arrConstruplan != null && arrArrendadora != null)
                    {
                        var strQueryCplan = string.Empty;
                        strQueryCplan = string.Format(@"SELECT * FROM tblAF_CtrlPptalOfCe_CapPptos WHERE anio = {0} AND cc IN ({1}) AND registroActivo = 1", year, string.Join(",", lstPptosAutorizadosCP.Select(x => x.idCC).ToList()));
                        lstPptos = _context.Select<tblAF_CtrlPptalOfCe_CapPptos>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Construplan,
                            consulta = strQueryCplan
                        }).ToList();
                        var strQueryArrendadora = string.Empty;
                        strQueryArrendadora = string.Format(@"SELECT * FROM tblAF_CtrlPptalOfCe_CapPptos WHERE anio = {0} AND cc IN ({1}) AND registroActivo = 1", year, string.Join(",", lstPptosAutorizadosARR.Select(x => x.idCC).ToList()));

                        lstPptos.AddRange(_context.Select<tblAF_CtrlPptalOfCe_CapPptos>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Arrendadora,
                            consulta = strQueryArrendadora
                        }).ToList());
                    }


                    if (lstPptos.Count() > 0)
                    {
                        int idMes = 1;
                        string ccJOIN = string.Empty;
                        string ccJOIN_Arr = string.Empty;
                        if (arrConstruplan != null && arrArrendadora == null)
                            ccJOIN = string.Join(",", arrConstruplan);
                        else if (arrConstruplan == null && arrArrendadora != null)
                            ccJOIN = string.Join(",", arrArrendadora);
                        else if (arrConstruplan != null && arrArrendadora != null)
                        {
                            ccJOIN = string.Join(",", arrConstruplan);
                            ccJOIN_Arr = string.Join(",", arrArrendadora);
                        }

                        var pptoAcumulado = 0M;
                        var aditivasAcumuladas = 0M;
                        var listaMontosMensuales = new List<decimal>();
                        decimal pptoMes = 0;
                        decimal aditivasMes = 0;
                        for (int i = 0; i < objGraficaProyeccion.lstCategorias.Count(); i++)
                        {
                            if (arrConstruplan != null && arrArrendadora == null)
                            {
                                pptoMes = _context.Select<decimal>(new DapperDTO
                                {
                                    baseDatos = MainContextEnum.Construplan,
                                    consulta = string.Format(@"SELECT SUM(importe{0}) AS importe FROM tblAF_CtrlPptalOfCe_CapPptos WHERE anio = @anio AND cc IN ({1}) AND registroActivo = @registroActivo", arrMonths[i], ccJOIN),
                                    parametros = new { anio = year, registroActivo = true }
                                }).FirstOrDefault();
                                aditivasMes = _context.Select<decimal>(new DapperDTO
                                {
                                    baseDatos = MainContextEnum.Construplan,
                                    consulta = string.Format(@"SELECT SUM(importe{0}) AS importe FROM tblAF_CtrlAditiva WHERE autorizado = @registroActivo AND capPptosId IN (SELECT id FROM tblAF_CtrlPptalOfCe_CapPptos WHERE anio = @anio AND cc IN ({1}) AND registroActivo = @registroActivo) AND registroActivo = @registroActivo", arrMonths[i], ccJOIN),
                                    parametros = new { anio = year, registroActivo = true }
                                }).FirstOrDefault();
                            }
                            else if (arrConstruplan == null && arrArrendadora != null)
                            {
                                pptoMes = _context.Select<decimal>(new DapperDTO
                                {
                                    baseDatos = MainContextEnum.Arrendadora,
                                    consulta = string.Format(@"SELECT SUM(importe{0}) AS importe FROM tblAF_CtrlPptalOfCe_CapPptos WHERE anio = @anio AND cc IN ({1}) AND registroActivo = @registroActivo", arrMonths[i], ccJOIN),
                                    parametros = new { anio = year, registroActivo = true }
                                }).FirstOrDefault();
                                aditivasMes = _context.Select<decimal>(new DapperDTO
                                {
                                    baseDatos = MainContextEnum.Arrendadora,
                                    consulta = string.Format(@"SELECT SUM(importe{0}) AS importe FROM tblAF_CtrlAditiva WHERE autorizado = @registroActivo AND capPptosId IN (SELECT id FROM tblAF_CtrlPptalOfCe_CapPptos WHERE anio = @anio AND cc IN ({1}) AND registroActivo = @registroActivo) AND registroActivo = @registroActivo", arrMonths[i], ccJOIN),
                                    parametros = new { anio = year, registroActivo = true }
                                }).FirstOrDefault();
                            }
                            else if (arrConstruplan != null && arrArrendadora != null)
                            {
                                pptoMes = _context.Select<decimal>(new DapperDTO
                                {
                                    baseDatos = MainContextEnum.Construplan,
                                    consulta = string.Format(@"SELECT SUM(importe{0}) AS importe FROM tblAF_CtrlPptalOfCe_CapPptos WHERE anio = @anio AND cc IN ({1}) AND registroActivo = @registroActivo", arrMonths[i], ccJOIN),
                                    parametros = new { anio = year, registroActivo = true }
                                }).FirstOrDefault();

                                aditivasMes = _context.Select<decimal>(new DapperDTO
                                {
                                    baseDatos = MainContextEnum.Construplan,
                                    consulta = string.Format(@"SELECT SUM(importe{0}) AS importe FROM tblAF_CtrlAditiva WHERE autorizado = @registroActivo AND capPptosId IN (SELECT id FROM tblAF_CtrlPptalOfCe_CapPptos WHERE anio = @anio AND cc IN ({1}) AND registroActivo = @registroActivo) AND registroActivo = @registroActivo", arrMonths[i], ccJOIN),
                                    parametros = new { anio = year, registroActivo = true }
                                }).FirstOrDefault();

                                pptoMes += _context.Select<decimal>(new DapperDTO
                                {
                                    baseDatos = MainContextEnum.Arrendadora,
                                    consulta = string.Format(@"SELECT SUM(importe{0}) AS importe FROM tblAF_CtrlPptalOfCe_CapPptos WHERE anio = @anio AND cc IN ({1}) AND registroActivo = @registroActivo", arrMonths[i], ccJOIN_Arr),
                                    parametros = new { anio = year, registroActivo = true }
                                }).FirstOrDefault();

                                aditivasMes += _context.Select<decimal>(new DapperDTO
                                {
                                    baseDatos = MainContextEnum.Arrendadora,
                                    consulta = string.Format(@"SELECT SUM(importe{0}) AS importe FROM tblAF_CtrlAditiva WHERE autorizado = @registroActivo AND capPptosId IN (SELECT id FROM tblAF_CtrlPptalOfCe_CapPptos WHERE anio = @anio AND cc IN ({1}) AND registroActivo = @registroActivo) AND registroActivo = @registroActivo", arrMonths[i], ccJOIN),
                                    parametros = new { anio = year, registroActivo = true }
                                }).FirstOrDefault();
                            }

                            listaMontosMensuales.Add(pptoMes);
                            pptoAcumulado += pptoMes;
                            aditivasAcumuladas += aditivasMes;
                            objGraficaProyeccion.lstPpto.Add(pptoAcumulado);
                            objGraficaProyeccion.lstProyeccion.Add(pptoAcumulado + aditivasAcumuladas);
                            objGraficaProyeccion.lstPointKey.Add(pptoAcumulado);
                            idMes++;
                        }

                        #region SE OBTIENE LOS PPTOS REALES HASTA EL MES ACTUAL
                        int mesActualID = (int)DateTime.Now.Month;
                        List<int> lstAgrupacionesID = new List<int>();
                        List<int> lstConceptosID = new List<int>();
                        List<tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas> lstCuentas = new List<tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas>();

                        if (arrConstruplan != null && arrArrendadora == null)
                        {
                            lstAgrupacionesID = _context.tblAF_CtrllPptalOfCe_CatAgrupaciones.Where(w => w.anio == year && arrConstruplan.Contains(w.idCC) && w.registroActivo).Select(s => s.id).ToList();
                            lstConceptosID = _context.tblAF_CtrlPptalOfCe_CatConceptos.Where(w => lstAgrupacionesID.Contains(w.idAgrupacion) && w.registroActivo).Select(s => s.idConcepto).ToList();
                            lstCuentas = _context.tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas.Where(w => lstConceptosID.Contains(w.idConcepto) && w.registroActivo).ToList();
                        }
                        else if (arrConstruplan == null && arrArrendadora != null)
                        {
                            using (var _ctxArre = new MainContext(EmpresaEnum.Arrendadora))
                            {
                                lstAgrupacionesID = _ctxArre.tblAF_CtrllPptalOfCe_CatAgrupaciones.Where(w => w.anio == year && arrArrendadora.Contains(w.idCC) && w.registroActivo).Select(s => s.id).ToList();
                                lstConceptosID = _ctxArre.tblAF_CtrlPptalOfCe_CatConceptos.Where(w => lstAgrupacionesID.Contains(w.idAgrupacion) && w.registroActivo).Select(s => s.idConcepto).ToList();
                                lstCuentas = _ctxArre.tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas.Where(w => lstConceptosID.Contains(w.idConcepto) && w.registroActivo).ToList();
                            }
                        }

                        else if (arrConstruplan != null && arrArrendadora != null)
                        {
                            lstAgrupacionesID = _context.tblAF_CtrllPptalOfCe_CatAgrupaciones.Where(w => w.anio == year && arrConstruplan.Contains(w.idCC) && w.registroActivo).Select(s => s.id).ToList();
                            lstConceptosID = _context.tblAF_CtrlPptalOfCe_CatConceptos.Where(w => lstAgrupacionesID.Contains(w.idAgrupacion) && w.registroActivo).Select(s => s.idConcepto).ToList();
                            lstCuentas = _context.tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas.Where(w => lstConceptosID.Contains(w.idConcepto) && w.registroActivo).ToList();
                            using (var _ctxArre = new MainContext(EmpresaEnum.Arrendadora))
                            {
                                lstAgrupacionesID.AddRange(_ctxArre.tblAF_CtrllPptalOfCe_CatAgrupaciones.Where(w => w.anio == year && arrArrendadora.Contains(w.idCC) && w.registroActivo).Select(s => s.id).ToList());
                                lstConceptosID.AddRange(_ctxArre.tblAF_CtrlPptalOfCe_CatConceptos.Where(w => lstAgrupacionesID.Contains(w.idAgrupacion) && w.registroActivo).Select(s => s.idConcepto).ToList());
                                lstCuentas.AddRange(_ctxArre.tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas.Where(w => lstConceptosID.Contains(w.idConcepto) && w.registroActivo).ToList());
                            }
                        }

                        idMes = 1;
                        int contador = -1;
                        var pptoRealAcumulado = 0M;
                        bool banderaMontoEstimado = false;
                        decimal monteEstimado = 0M;
                        for (int i = 0; i < objGraficaProyeccion.lstCategorias.Count(); i++)
                        {
                            contador++;
                            decimal montoReal = 0;

                            // CP
                            if (gastos.Count() > 0)
                                montoReal += gastos.Where(w => w.mes == idMes).Sum(s => s.suma);

                            // ARR
                            if (gastosArr.Count() > 0)
                                montoReal += gastosArr.Where(w => w.mes == idMes).Sum(s => s.suma);

                            pptoRealAcumulado += montoReal;
                            if (montoReal > 0 || montoReal < 0)
                                objGraficaProyeccion.lstPptoReal.Add(pptoRealAcumulado);
                            else
                            {
                                if (!banderaMontoEstimado && i > 0)
                                {
                                    banderaMontoEstimado = true;
                                    monteEstimado = pptoRealAcumulado / (i);
                                }
                                pptoRealAcumulado += monteEstimado;
                                objGraficaProyeccion.lstPptoReal.Add(pptoRealAcumulado);
                            }
                            idMes++;
                        }
                        #endregion

                        #region SE OBTIENE EL CUMPLIMIENTO POR MES HASTA EL MES ACTUAL
                        decimal pptoMayor = objGraficaProyeccion.lstPpto.Max();
                        for (int i = 0; i < objGraficaProyeccion.lstCategorias.Count(); i++)
                        {
                            #region CUMPLIMIENTO POR MES (PORCENTAJE)
                            decimal ppto = (decimal)objGraficaProyeccion.lstPpto[i];
                            decimal pptoReal = (decimal)objGraficaProyeccion.lstPptoReal[i];
                            decimal cumplimientoPorcentaje = 0;
                            if ((decimal)ppto > 0 && (decimal)pptoReal > 0)
                                cumplimientoPorcentaje = (((decimal)pptoReal * 100) / (decimal)ppto);
                            #endregion

                            #region CUMPLIMIENTO EN BASE AL PPTO MAYOR
                            decimal cumplimiento = 0;
                            if ((decimal)cumplimientoPorcentaje > 0 && (decimal)pptoMayor > 0)
                                cumplimiento = ((decimal)cumplimientoPorcentaje * pptoMayor) / 100;
                            #endregion

                            objGraficaProyeccion.lstCumplimiento.Add(cumplimiento);
                            objGraficaProyeccion.lstCumplimientoPorc.Add(cumplimientoPorcentaje);
                        }

                        for (int i = 0; i < objGraficaProyeccion.lstCumplimiento.Count(); i++)
                        {
                            decimal pptoMax = objGraficaProyeccion.lstPpto.Max();
                            decimal pptoRealMax = objGraficaProyeccion.lstPptoReal.Max();
                            decimal cumplimientoPorcMax = objGraficaProyeccion.lstCumplimientoPorc.Max();
                            decimal cumplimientoPorc = objGraficaProyeccion.lstCumplimientoPorc[i];
                            decimal nuevoCumplimiento = 0;
                            if ((decimal)cumplimientoPorcMax > 0 && (decimal)cumplimientoPorc > 0)
                            {
                                objGraficaProyeccion.lstCumplimiento[i] = (decimal)cumplimientoPorc / (decimal)cumplimientoPorcMax;
                                nuevoCumplimiento = pptoMax > pptoRealMax ? objGraficaProyeccion.lstCumplimiento[i] * pptoMax : objGraficaProyeccion.lstCumplimiento[i] * pptoRealMax;
                                objGraficaProyeccion.lstCumplimiento[i] = nuevoCumplimiento;
                            }
                        }
                        #endregion

                        #region SE OBTIENE EL MAX DE LA GRAFICA
                        List<decimal> lstMax = new List<decimal>();
                        lstMax.Add(objGraficaProyeccion.lstPpto.Max());
                        lstMax.Add(objGraficaProyeccion.lstPptoReal.Max());
                        lstMax.Add(objGraficaProyeccion.lstCumplimiento.Max());
                        objGraficaProyeccion.max = lstMax.Max();
                        #endregion

                        // SE INDICA EL MES ACTUAL AL OBJETO PROYECCIÓN
                        mesActualID--;
                        objGraficaProyeccion.mesActualID = mesActualID;
                        resultado.Add("objGraficaProyeccion", objGraficaProyeccion);
                    }
                    #endregion
                    #endregion

                    #region SE OBTIENE EL INGRESO ESTIMADO REAL (ANA) DEL MES SELECCIONADO
                    strQuery = string.Format(@"SELECT ppto FROM tblAF_CtrlPptalOfCe_IngresosEstimados WHERE idMes = {0}", mes);
                    decimal montoGastoDB = _context.Select<decimal>(new DapperDTO
                    {
                        baseDatos = MainContextEnum.Construplan,
                        consulta = strQuery
                    }).FirstOrDefault();

                    decimal ingresoEstimado = (montoGastoDB * 100) / ingreso;
                    var porcentajeRealAcumuladoDB = (montoGastoDB / ingreso);
                    #endregion

                    #region SE OBTIENE EL ESTIMADO REAL MENSUAL DEL MES SELECCIONADO
                    tblAF_CtrlPptalOfCe_EstimadoRealMensual objEstimadoRealMensual = _context.tblAF_CtrlPptalOfCe_EstimadoRealMensual.Where(w => w.anio == year && w.registroActivo).FirstOrDefault();
                    if (objEstimadoRealMensual != null)
                    {
                        switch (mes)
                        {
                            case 1:
                                decimal estimadoReal_Enero = objEstimadoRealMensual.estimadoReal_Enero;
                                montoIngreso += estimadoReal_Enero;
                                break;
                            case 2:
                                decimal estimadoReal_Febrero = objEstimadoRealMensual.estimadoReal_Febrero;
                                montoIngreso += estimadoReal_Febrero;
                                break;
                            case 3:
                                decimal estimadoReal_Marzo = objEstimadoRealMensual.estimadoReal_Marzo;
                                montoIngreso += estimadoReal_Marzo;
                                break;
                            case 4:
                                decimal estimadoReal_Abril = objEstimadoRealMensual.estimadoReal_Abril;
                                montoIngreso += estimadoReal_Abril;
                                break;
                            case 5:
                                decimal estimadoReal_Mayo = objEstimadoRealMensual.estimadoReal_Mayo;
                                montoIngreso += estimadoReal_Mayo;
                                break;
                            case 6:
                                decimal estimadoReal_Junio = objEstimadoRealMensual.estimadoReal_Junio;
                                montoIngreso += estimadoReal_Junio;
                                break;
                            case 7:
                                decimal estimadoReal_Julio = objEstimadoRealMensual.estimadoReal_Julio;
                                montoIngreso += estimadoReal_Julio;
                                break;
                            case 8:
                                decimal estimadoReal_Agosto = objEstimadoRealMensual.estimadoReal_Agosto;
                                montoIngreso += estimadoReal_Agosto;
                                break;
                            case 9:
                                decimal estimadoReal_Septiembre = objEstimadoRealMensual.estimadoReal_Septiembre;
                                montoIngreso += estimadoReal_Septiembre;
                                break;
                            case 10:
                                decimal estimadoReal_Octubre = objEstimadoRealMensual.estimadoReal_Octubre;
                                montoIngreso += estimadoReal_Octubre;
                                break;
                            case 11:
                                decimal estimadoReal_Noviembre = objEstimadoRealMensual.estimadoReal_Noviembre;
                                montoIngreso += estimadoReal_Noviembre;
                                break;
                            case 12:
                                decimal estimadoReal_Diciembre = objEstimadoRealMensual.estimadoReal_Diciembre;
                                montoIngreso += estimadoReal_Diciembre;
                                break;
                        }
                    }
                    #endregion

                    resultado.Add(SUCCESS, true);
                    resultado.Add("gfxIngresoGasto", graficaGastoIngreso);
                    resultado.Add("gfxIngresoGastoPorcentaje", porcentajeRealAcumulado);
                    resultado.Add("gfxIngresoGastoReal", montoRealAcumulado);
                    resultado.Add("gfxIngresoGastoRealMensual", porcentajeIngresoGastoMensual);
                    resultado.Add("colorIngresoGasto", coloIngresoGasto);
                    resultado.Add("colorIngresoGastoMensual", colorIngresoGastoMensual);
                    resultado.Add("gfxPresupuestoGasto", graficaPresupuestoGasto);
                    resultado.Add("gfxPresupuestoGastoMensual", graficaPresupuestoGastoMensual);
                    resultado.Add("gfxPresupuestoGastoPorcentaje", porcentajePresupuestoBase100);
                    resultado.Add("gfxPresupuestoGastoPorcentajeMensual", porcentajeGastoMensualBase100);
                    resultado.Add("gfxCumplimiento", graficaCumplimiento);
                    resultado.Add("montoGasto", montoGasto);
                    resultado.Add("montoGastoDB", montoGastoDB);
                    resultado.Add("porcentajeRealAcumuladoDB", porcentajeRealAcumuladoDB);
                    resultado.Add("montoIngreso", montoIngreso);
                    resultado.Add("montoGastoMensual", gastoMensual);
                    resultado.Add("montoIngresoMensual", ingresoMensual);
                    resultado.Add("porcentajeCumplimientoIngresoGasto", porcentajeCumplimientoIngresoGasto);
                    resultado.Add("porcentajeCumplimientoIngresoGastoMensual", porcentajeRealMensual);
                    resultado.Add("ratioGastoVsIngreso", ratioGastoVsIngreso);

                    resultado.Add("montoIngresoPpto", montoIngresoPpto);
                    resultado.Add("porcentajeCumplimientoIngresoGastoPpto", porcentajeCumplimientoIngresoGastoPpto);
                    resultado.Add("gfxIngresoGastoPorcentajePpto", porcentajeRealAcumuladoPpto);
                    resultado.Add("colorIngresoGastoPpto", coloIngresoGastoPpto);
                }
                else
                {
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, "No existe presupuesto en el periodo seleccionado");
                }
            }
            catch (Exception ex)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetDataGraficasDashboard", ex, AccionEnum.CONSULTA, 0, 0);

                resultado.Add(MESSAGE, ex.Message);
                resultado.Add(SUCCESS, true);
            }

            return resultado;
        }

        public Dictionary<string, object> GetDetalleNivelDosIngresoGasto(int year, int mes, List<int> listaCC)
        {
            try
            {
                var datos = new InfoDetalleNivelDosIngresoGastoDTO();

                var periodoPresupuesto = _context.tblAF_CtrlPptalOfCe_PptoInicial
                    .FirstOrDefault(x =>
                        x.anio == year &&
                        x.registroActivo
                    );

                if (periodoPresupuesto != null)
                {
                    var presupuestos = _context.tblAF_CtrlPptalOfCe_PptoAnual
                        .Where(x =>
                            x.pptoInicialID == periodoPresupuesto.id &&
                            x.registroActivo &&
                            x.autorizado).ToList().Where(x => (listaCC != null ? listaCC.Contains(x.idCC) : true)
                        ).ToList();

                    List<tblAF_CtrlPptalOfCe_CapPptos> actividades = new List<tblAF_CtrlPptalOfCe_CapPptos>();
                    List<string> ccs = new List<string>();

                    foreach (var presupuesto in presupuestos)
                    {
                        string cc = presupuesto.idCC.ToString();

                        actividades.AddRange(_context.tblAF_CtrlPptalOfCe_CapPptos
                            .Where(x =>
                                x.cc == cc &&
                                x.anio == year &&
                                x.registroActivo));

                        ccs.Add(presupuesto.cc);
                    }

                    #region String para la consulta de múltiples cta-scta-sscta
                    var listaCuentasString = new List<string>();
                    var listaConceptos = actividades.Select(x => x.concepto).ToList();
                    var listaConceptosId = listaConceptos.Select(x => x.idConcepto).Distinct().ToList();
                    var listaCuentasConceptos = _context.tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas.Where(x => listaConceptosId.Contains(x.idConcepto)).ToList();

                    var where_cuentas_string = "";

                    foreach (var cuenta in listaCuentasConceptos)
                    {
                        where_cuentas_string += string.Format(@"(cta = {0} AND scta = {1} AND sscta = {2})", cuenta.cta, cuenta.scta, cuenta.sscta);

                        where_cuentas_string += " OR ";
                    }

                    var cuentasIngresos = _context.tblAF_CtrlCuenta.Where(x => x.tipoCuenta == 1 && x.registroActivo).ToList();

                    foreach (var ctaIngreso in cuentasIngresos)
                    {
                        where_cuentas_string += "(cta = " + ctaIngreso.cta + " AND scta = " + ctaIngreso.scta + " AND sscta = " + ctaIngreso.sscta + ")";

                        if (ctaIngreso != cuentasIngresos.Last())
                        {
                            where_cuentas_string += " OR ";
                        }
                    }
                    #endregion

                    OdbcConsultaDTO query = new OdbcConsultaDTO();
                    if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                    {
                        query.consulta = string.Format(@"
                                                SELECT
                                                    MOV.cc,
                                                    C.descripcion,
                                                    MOV.mes,
                                                    sum(CASE WHEN MOV.cta >= 5000 AND MOV.cta <= 5999 AND scta != 23 THEN monto ELSE 0 END) AS 'gastoMensual',
                                                    sum(CASE WHEN MOV.cta >= 4000 AND MOV.cta <= 4999 THEN monto ELSE 0 END) AS 'ingresoMensual'
                                                FROM
                                                    sc_movpol AS MOV
                                                INNER JOIN
                                                    cc AS C
                                                    ON
                                                        C.cc = MOV.cc
                                                WHERE
                                                    MOV.year = ? AND
                                                    MOV.mes <= ? AND
                                                    (
                                                        {0}
                                                    ) AND
                                                    MOV.cc in {1}
                                                GROUP BY
                                                    MOV.cc, C.descripcion, MOV.mes", where_cuentas_string, ccs.Distinct().ToParamInValue());
                        query.parametros.Add(new OdbcParameterDTO
                        {
                            nombre = "year",
                            tipo = OdbcType.Int,
                            valor = year
                        });
                        query.parametros.Add(new OdbcParameterDTO
                        {
                            nombre = "mes",
                            tipo = OdbcType.Int,
                            valor = mes
                        });
                        query.parametros.AddRange(ccs.Select(x => new OdbcParameterDTO
                        {
                            nombre = "cc",
                            tipo = OdbcType.NVarChar,
                            valor = x
                        }).ToList());
                    }
                    else
                    {
                        var areasCuentas = _context.tblP_CC.Where(x => listaCC.Contains(x.id)).ToList();

                        string whereAreaCuenta = "";
                        foreach (var item in areasCuentas)
                        {
                            whereAreaCuenta += string.Format(@"(MOV.area = {0} AND MOV.cuenta_oc = {1})", item.area, item.cuenta);

                            if (item != areasCuentas.Last())
                            {
                                whereAreaCuenta += " OR ";
                            }
                        }

                        query.consulta = string.Format(@"
                                                SELECT
                                                    MOV.cc,
                                                    C.descripcion,
                                                    MOV.area,
                                                    MOV.cuenta_oc,
                                                    MOV.mes,
                                                    sum(CASE WHEN MOV.cta >= 5000 AND MOV.cta <= 5999 AND scta != 23 THEN monto ELSE 0 END) AS 'gastoMensual',
                                                    sum(CASE WHEN MOV.cta >= 4000 AND MOV.cta <= 4999 THEN monto ELSE 0 END) AS 'ingresoMensual'
                                                FROM
                                                    sc_movpol AS MOV
                                                INNER JOIN
                                                    cc AS C
                                                    ON
                                                        C.cc = MOV.cc
                                                WHERE
                                                    MOV.year = ? AND
                                                    MOV.mes <= ? AND
                                                    (
                                                        {0}
                                                    ) AND
                                                    {1}
                                                GROUP BY
                                                    MOV.cc, C.descripcion, MOV.area, MOV.cuenta_oc, MOV.mes", where_cuentas_string, whereAreaCuenta);
                        query.parametros.Add(new OdbcParameterDTO
                        {
                            nombre = "year",
                            tipo = OdbcType.Int,
                            valor = year
                        });
                        query.parametros.Add(new OdbcParameterDTO
                        {
                            nombre = "mes",
                            tipo = OdbcType.Int,
                            valor = mes
                        });
                    }

                    var gastos = _contextEnkontrol.Select<IngresosGastosDTO>(getEnkontrolEnumADM(), query);

                    

                    var detallesTabla = new List<InfoDetalleNivelDosInfoPorCC>();
                    if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                    {
                        var gastosGCPLAN = _contextEnkontrol.Select<IngresosGastosDTO>(EnkontrolAmbienteEnum.ProdGCPLAN, query);
                        
                        foreach (var item in gastos.GroupBy(x => x.cc))
                        {
                            var detalleTabla = new InfoDetalleNivelDosInfoPorCC();

                            detalleTabla.idCC = presupuestos.FirstOrDefault(r => r.cc == item.First().cc) == null ? 0 : presupuestos.First(r => r.cc == item.First().cc).idCC;
                            detalleTabla.cc = item.First().cc;
                            detalleTabla.descripcion = item.First().descripcion;
                            detalleTabla.gastoMensual = item.First(x => x.mes == mes).gastoMensual;
                            detalleTabla.ingresoMensual = item.First(x => x.mes == mes).ingresoMensual * -1;
                            detalleTabla.cumplimientoMensual = detalleTabla.ingresoMensual > 0 ? (detalleTabla.gastoMensual * 100) / detalleTabla.ingresoMensual : (detalleTabla.gastoMensual * 100) / 1;// detalleTabla.ingresoMensual - detalleTabla.gastoMensual;// (detalleTabla.ingresoMensual / (detalleTabla.gastoMensual != 0 ? detalleTabla.gastoMensual : 1)) * 100;
                            detalleTabla.gastoAcumulado = item.Sum(x => x.gastoMensual);
                            detalleTabla.ingresoAcumulado = item.Sum(x => x.ingresoMensual) * -1;
                            detalleTabla.cumplimientoAcumulado = detalleTabla.ingresoMensual > 0 ? (detalleTabla.gastoAcumulado * 100) / detalleTabla.ingresoAcumulado : (detalleTabla.gastoAcumulado * 100) / 1;// (detalleTabla.ingresoAcumulado / (detalleTabla.gastoAcumulado != 0 ? detalleTabla.gastoAcumulado : 1)) * 100;
                            detalleTabla.esIngresoGasto = true;
                            detallesTabla.Add(detalleTabla);
                        }

                        foreach (var item in gastosGCPLAN.GroupBy(x => x.cc))
                        {
                            var detalleTabla = new InfoDetalleNivelDosInfoPorCC();

                            detalleTabla.idCC = presupuestos.FirstOrDefault(r => r.cc == item.First().cc) == null ? 0 : presupuestos.First(r => r.cc == item.First().cc).idCC;
                            detalleTabla.cc = item.First().cc;
                            detalleTabla.descripcion = item.First().descripcion;
                            detalleTabla.gastoMensual = item.First(x => x.mes == mes).gastoMensual;
                            detalleTabla.ingresoMensual = item.First(x => x.mes == mes).ingresoMensual * -1;
                            detalleTabla.cumplimientoMensual = detalleTabla.ingresoMensual > 0 ? (detalleTabla.gastoMensual * 100) / detalleTabla.ingresoMensual : (detalleTabla.gastoMensual * 100) / 1;// detalleTabla.ingresoMensual - detalleTabla.gastoMensual;// (detalleTabla.ingresoMensual / (detalleTabla.gastoMensual != 0 ? detalleTabla.gastoMensual : 1)) * 100;
                            detalleTabla.gastoAcumulado = item.Sum(x => x.gastoMensual);
                            detalleTabla.ingresoAcumulado = item.Sum(x => x.ingresoMensual) * -1;
                            detalleTabla.cumplimientoAcumulado = detalleTabla.ingresoMensual > 0 ? (detalleTabla.gastoAcumulado * 100) / detalleTabla.ingresoAcumulado : (detalleTabla.gastoAcumulado * 100) / 1;// (detalleTabla.ingresoAcumulado / (detalleTabla.gastoAcumulado != 0 ? detalleTabla.gastoAcumulado : 1)) * 100;
                            detalleTabla.esIngresoGasto = true;
                            detallesTabla.Add(detalleTabla);
                        }
                    }
                    else
                    {
                        foreach (var item in gastos)
                        {
                            item.areaCuenta = item.area + "-" + item.cuenta_oc;
                        }
                        foreach (var item in gastos.GroupBy(x => x.areaCuenta))
                        {
                            var detalleTabla = new InfoDetalleNivelDosInfoPorCC();

                            detalleTabla.idCC = presupuestos.FirstOrDefault(r => r.cc == item.Key) == null ? 0 : presupuestos.First(r => r.cc == item.First().areaCuenta).idCC;
                            detalleTabla.cc = item.First().areaCuenta;
                            detalleTabla.descripcion = item.First().descripcion;
                            detalleTabla.gastoMensual = item.Where(x => x.mes == mes).Sum(x => x.gastoMensual);
                            detalleTabla.ingresoMensual = item.Where(x => x.mes == mes).Sum(x => x.ingresoMensual) * -1;
                            detalleTabla.cumplimientoMensual = detalleTabla.ingresoMensual > 0 ? (detalleTabla.gastoMensual * 100) / detalleTabla.ingresoMensual : (detalleTabla.gastoMensual * 100) / 1;// detalleTabla.ingresoMensual - detalleTabla.gastoMensual;// (detalleTabla.ingresoMensual / (detalleTabla.gastoMensual != 0 ? detalleTabla.gastoMensual : 1)) * 100;
                            detalleTabla.gastoAcumulado = item.Sum(x => x.gastoMensual);
                            detalleTabla.ingresoAcumulado = item.Sum(x => x.ingresoMensual) * -1;
                            detalleTabla.cumplimientoAcumulado = detalleTabla.ingresoMensual > 0 ? (detalleTabla.gastoAcumulado * 100) / detalleTabla.ingresoAcumulado : (detalleTabla.gastoAcumulado * 100) / 1;// (detalleTabla.ingresoAcumulado / (detalleTabla.gastoAcumulado != 0 ? detalleTabla.gastoAcumulado : 1)) * 100;
                            detalleTabla.esIngresoGasto = true;
                            detallesTabla.Add(detalleTabla);
                        }
                    }

                    datos.datosTablaCC = detallesTabla;

                    datos.cumplimientoAcumuladoEmpresa = detallesTabla.Sum(x => x.ingresoAcumulado) - detallesTabla.Sum(x => x.gastoAcumulado);

                    datos.mesCierre = new DateTime(year, mes, 1).ToString("MMMM").ToUpper();

                    var graficaMensual = new GraficaDTO();
                    graficaMensual.serie1Descripcion = "GASTOS";
                    graficaMensual.serie2Descripcion = "INGRESOS";
                    for (int i = 0; i < meses.Length; i++)
                    {
                        var gastoMes = gastos.Where(x => x.mes == (i + 1)).Sum(x => x.gastoMensual);
                        var ingresoMes = gastos.Where(x => x.mes == (i + 1)).Sum(x => x.ingresoMensual) * -1;

                        graficaMensual.categorias.Add(meses[i].ToUpper());
                        graficaMensual.serie1.Add(gastoMes);

                        graficaMensual.serie2.Add(ingresoMes);
                    }

                    datos.graficaBarraMensual = graficaMensual;

                    resultado.Add(SUCCESS, true);
                    resultado.Add(ITEMS, datos);
                }
            }
            catch (Exception ex)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetDetalleNivelDosIngresoGasto", ex, AccionEnum.CONSULTA, 0, 0);

                resultado.Add(MESSAGE, ex.Message);
                resultado.Add(SUCCESS, false);
            }

            return resultado;
        }

        public Dictionary<string, object> GetDetalleNivelTresIngresoGasto(int year, int _cc)
        {
            try
            {
                var datos = new InfoDetalleNivelDosIngresoGastoDTO();

                var periodoPresupuesto = _context.tblAF_CtrlPptalOfCe_PptoInicial
                    .FirstOrDefault(x =>
                        x.anio == year &&
                        x.registroActivo
                    );

                if (periodoPresupuesto != null)
                {
                    var presupuestos = _context.tblAF_CtrlPptalOfCe_PptoAnual
                        .Where(x =>
                            x.pptoInicialID == periodoPresupuesto.id &&
                            x.registroActivo &&
                            x.autorizado &&
                            x.idCC == _cc
                        ).ToList();

                    List<tblAF_CtrlPptalOfCe_CapPptos> actividades = new List<tblAF_CtrlPptalOfCe_CapPptos>();
                    List<string> ccs = new List<string>();

                    foreach (var presupuesto in presupuestos)
                    {
                        string cc = _cc.ToString();

                        actividades.AddRange(_context.tblAF_CtrlPptalOfCe_CapPptos
                            .Where(x =>
                                x.cc == cc &&
                                x.anio == year &&
                                x.registroActivo));

                        ccs.Add(presupuesto.cc);
                    }

                    #region String para la consulta de múltiples cta-scta-sscta
                    var listaCuentasString = new List<string>();
                    var listaConceptos = actividades.Select(x => x.concepto).ToList();
                    var listaConceptosId = listaConceptos.Select(x => x.idConcepto).Distinct().ToList();
                    var listaCuentasConceptos = _context.tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas.Where(x => listaConceptosId.Contains(x.idConcepto)).ToList();

                    var where_cuentas_string = "";
                    foreach (var cuenta in listaCuentasConceptos)
                    {
                        where_cuentas_string += string.Format(@"(cta = {0} AND scta = {1} AND sscta = {2})", cuenta.cta, cuenta.scta, cuenta.sscta);
                    }

                    //foreach (var act in actividades)
                    //{
                    //    var listaCuentas = _context.tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas.Where(x => x.registroActivo && x.idConcepto == act.concepto.idConcepto).ToList();

                    //    foreach (var cuenta in listaCuentas)
                    //    {
                    //        where_cuentas_string += string.Format(@"(cta = {0} AND scta = {1} AND sscta = {2})", cuenta.cta, cuenta.scta, cuenta.sscta);

                    //        if (cuenta != listaCuentas.Last())
                    //        {
                    //            where_cuentas_string += " OR ";
                    //        }
                    //    }
                    //}

                    var cuentasIngresos = _context.tblAF_CtrlCuenta.Where(x => x.tipoCuenta == 1 && x.registroActivo).ToList();

                    foreach (var ctaIngreso in cuentasIngresos)
                    {
                        where_cuentas_string += "(cta = " + ctaIngreso.cta + " AND scta = " + ctaIngreso.scta + " AND sscta = " + ctaIngreso.sscta + ")";

                        if (ctaIngreso != cuentasIngresos.Last())
                        {
                            where_cuentas_string += " OR ";
                        }
                    }
                    #endregion

                    string ccstring = _context.tblP_CC.Where(x => x.id == _cc).FirstOrDefault().cc;
                    OdbcConsultaDTO query = new OdbcConsultaDTO();
                    query.consulta = string.Format(@"
                                                SELECT
                                                    MOV.cc,
                                                    C.descripcion,
                                                    MOV.mes,
                                                    sum(CASE WHEN MOV.cta >= 5000 AND MOV.cta <= 5999 AND scta != 23 THEN monto ELSE 0 END) AS 'gastoMensual',
                                                    sum(CASE WHEN MOV.cta >= 4000 AND MOV.cta <= 4999 THEN monto ELSE 0 END) AS 'ingresoMensual'
                                                FROM
                                                    sc_movpol AS MOV
                                                INNER JOIN
                                                    cc AS C
                                                    ON
                                                        C.cc = MOV.cc
                                                WHERE
                                                    MOV.year = ? AND
                                                    MOV.cc = '" + ccstring + @"'
                                                GROUP BY
                                                    MOV.cc, C.descripcion, MOV.mes", where_cuentas_string, ccs.Distinct().ToParamInValue());
                    query.parametros.Add(new OdbcParameterDTO
                    {
                        nombre = "year",
                        tipo = OdbcType.Int,
                        valor = year
                    });


                    var gastos = _contextEnkontrol.Select<IngresosGastosDTO>(getEnkontrolEnumADM(), query);
                    if (vSesiones.sesionEmpresaActual == 1) gastos.AddRange(_contextEnkontrol.Select<IngresosGastosDTO>(EnkontrolAmbienteEnum.ProdGCPLAN, query));

                    tablaPanel3DTO objtablaPanel3 = new tablaPanel3DTO();
                    List<tablaPanel3DTO> LstPanel = new List<tablaPanel3DTO>();
                    for (int i = 0; i < 3; i++)
                    {
                        objtablaPanel3 = new tablaPanel3DTO();
                        switch (i)
                        {
                            case 0:
                                objtablaPanel3.concepto = "INGRESOS";
                                objtablaPanel3.enero = gastos.Count > 0 ? gastos[0].ingresoMensual.ToString() : "";
                                objtablaPanel3.febrero = gastos.Count > 1 ? gastos[1].ingresoMensual.ToString() : "";
                                objtablaPanel3.marzo = gastos.Count > 2 ? gastos[2].ingresoMensual.ToString() : "";
                                objtablaPanel3.abril = gastos.Count > 3 ? gastos[3].ingresoMensual.ToString() : "";
                                objtablaPanel3.mayo = gastos.Count > 4 ? gastos[4].ingresoMensual.ToString() : "";
                                objtablaPanel3.junio = gastos.Count > 5 ? gastos[5].ingresoMensual.ToString() : "";
                                objtablaPanel3.julio = gastos.Count > 6 ? gastos[6].ingresoMensual.ToString() : "";
                                objtablaPanel3.agosto = gastos.Count > 7 ? gastos[7].ingresoMensual.ToString() : "";
                                objtablaPanel3.septiembre = gastos.Count > 8 ? gastos[8].ingresoMensual.ToString() : "";
                                objtablaPanel3.octubre = gastos.Count > 9 ? gastos[9].ingresoMensual.ToString() : "";
                                objtablaPanel3.noviembre = gastos.Count > 10 ? gastos[10].ingresoMensual.ToString() : "";
                                objtablaPanel3.diciembre = gastos.Count > 11 ? gastos[11].ingresoMensual.ToString() : "";
                                LstPanel.Add(objtablaPanel3);
                                break;
                            case 1:
                                objtablaPanel3.concepto = "GASTOS";
                                objtablaPanel3.enero = gastos.Count > 0 ? gastos[0].gastoMensual.ToString() : "";
                                objtablaPanel3.febrero = gastos.Count > 1 ? gastos[1].gastoMensual.ToString() : "";
                                objtablaPanel3.marzo = gastos.Count > 2 ? gastos[2].gastoMensual.ToString() : "";
                                objtablaPanel3.abril = gastos.Count > 3 ? gastos[3].gastoMensual.ToString() : "";
                                objtablaPanel3.mayo = gastos.Count > 4 ? gastos[4].gastoMensual.ToString() : "";
                                objtablaPanel3.junio = gastos.Count > 5 ? gastos[5].gastoMensual.ToString() : "";
                                objtablaPanel3.julio = gastos.Count > 6 ? gastos[6].gastoMensual.ToString() : "";
                                objtablaPanel3.agosto = gastos.Count > 7 ? gastos[7].gastoMensual.ToString() : "";
                                objtablaPanel3.septiembre = gastos.Count > 8 ? gastos[8].gastoMensual.ToString() : "";
                                objtablaPanel3.octubre = gastos.Count > 9 ? gastos[9].gastoMensual.ToString() : "";
                                objtablaPanel3.noviembre = gastos.Count > 10 ? gastos[10].gastoMensual.ToString() : "";
                                objtablaPanel3.diciembre = gastos.Count > 11 ? gastos[11].gastoMensual.ToString() : "";
                                LstPanel.Add(objtablaPanel3);
                                break;
                            case 2:
                                objtablaPanel3.concepto = "CUMPLIMIENTO";
                                objtablaPanel3.enero = gastos.Count > 0 ? (gastos[0].ingresoMensual - gastos[0].gastoMensual).ToString() : "";
                                objtablaPanel3.febrero = gastos.Count > 0 ? (gastos[1].ingresoMensual - gastos[1].gastoMensual).ToString() : "";
                                objtablaPanel3.marzo = gastos.Count > 0 ? (gastos[2].ingresoMensual - gastos[2].gastoMensual).ToString() : "";
                                objtablaPanel3.abril = gastos.Count > 0 ? (gastos[3].ingresoMensual - gastos[3].gastoMensual).ToString() : "";
                                objtablaPanel3.mayo = gastos.Count > 0 ? (gastos[4].ingresoMensual - gastos[4].gastoMensual).ToString() : "";
                                objtablaPanel3.junio = gastos.Count > 0 ? (gastos[5].ingresoMensual - gastos[5].gastoMensual).ToString() : "";
                                objtablaPanel3.julio = gastos.Count > 0 ? (gastos[6].ingresoMensual - gastos[6].gastoMensual).ToString() : "";
                                objtablaPanel3.agosto = gastos.Count > 0 ? (gastos[7].ingresoMensual - gastos[7].gastoMensual).ToString() : "";
                                objtablaPanel3.septiembre = gastos.Count > 0 ? (gastos[8].ingresoMensual - gastos[8].gastoMensual).ToString() : "";
                                objtablaPanel3.octubre = gastos.Count > 0 ? (gastos[9].ingresoMensual - gastos[9].gastoMensual).ToString() : "";
                                objtablaPanel3.noviembre = gastos.Count > 0 ? (gastos[10].ingresoMensual - gastos[10].gastoMensual).ToString() : "";
                                objtablaPanel3.diciembre = gastos.Count > 0 ? (gastos[11].ingresoMensual - gastos[11].gastoMensual).ToString() : "";
                                LstPanel.Add(objtablaPanel3);
                                break;
                        }
                    }

                    #region COMENTADO
                    //var detallesTabla = new List<InfoDetalleNivelDosInfoPorCC>();
                    //foreach (var item in gastos.GroupBy(x => x.cc))
                    //{
                    //    var detalleTabla = new InfoDetalleNivelDosInfoPorCC();

                    //    detalleTabla.cc = item.First().cc;
                    //    detalleTabla.descripcion = item.First().descripcion;
                    //    detalleTabla.gastoMensual = item.First(x => x.mes == mes).gastoMensual;
                    //    detalleTabla.ingresoMensual = item.First(x => x.mes == mes).ingresoMensual * -1;
                    //    detalleTabla.cumplimientoMensual = detalleTabla.ingresoMensual - detalleTabla.gastoMensual;// (detalleTabla.ingresoMensual / (detalleTabla.gastoMensual != 0 ? detalleTabla.gastoMensual : 1)) * 100;
                    //    detalleTabla.gastoAcumulado = item.Sum(x => x.gastoMensual);
                    //    detalleTabla.ingresoAcumulado = item.Sum(x => x.ingresoMensual) * -1;
                    //    detalleTabla.cumplimientoAcumulado = detalleTabla.ingresoAcumulado - detalleTabla.gastoAcumulado;// (detalleTabla.ingresoAcumulado / (detalleTabla.gastoAcumulado != 0 ? detalleTabla.gastoAcumulado : 1)) * 100;
                    //    detalleTabla.esIngresoGasto = true;
                    //    detallesTabla.Add(detalleTabla);
                    //}

                    //datos.datosTablaCC = detallesTabla;

                    //datos.cumplimientoAcumuladoEmpresa = detallesTabla.Sum(x => x.ingresoAcumulado) - detallesTabla.Sum(x => x.gastoAcumulado);

                    ////if (detallesTabla.Sum(x => x.gastoAcumulado) != 0)
                    ////{
                    ////    datos.cumplimientoAcumuladoEmpresa = (detallesTabla.Sum(x => x.ingresoAcumulado) / detallesTabla.Sum(x => x.gastoAcumulado)) * 100;
                    ////}
                    ////else
                    ////{
                    ////    datos.cumplimientoAcumuladoEmpresa = detallesTabla.Sum(x => x.ingresoAcumulado) * 100;
                    ////}
                    //datos.mesCierre = new DateTime(year, mes, 1).ToString("MMMM").ToUpper();

                    //var graficaMensual = new GraficaDTO();
                    //graficaMensual.serie1Descripcion = "GASTOS";
                    //graficaMensual.serie2Descripcion = "INGRESOS";
                    //for (int i = 0; i < meses.Length; i++)
                    //{
                    //    var gastoMes = gastos.Where(x => x.mes == (i + 1)).Sum(x => x.gastoMensual);
                    //    var ingresoMes = gastos.Where(x => x.mes == (i + 1)).Sum(x => x.ingresoMensual) * -1;

                    //    graficaMensual.categorias.Add(meses[i].ToUpper());
                    //    graficaMensual.serie1.Add(gastoMes);

                    //    graficaMensual.serie2.Add(ingresoMes);
                    //}

                    //datos.graficaBarraMensual = graficaMensual;
                    #endregion

                    resultado.Add(SUCCESS, true);
                    resultado.Add(ITEMS, LstPanel);
                }
            }
            catch (Exception ex)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetDetalleNivelDosIngresoGasto", ex, AccionEnum.CONSULTA, 0, 0);

                resultado.Add(MESSAGE, ex.Message);
                resultado.Add(SUCCESS, false);
            }

            return resultado;
        }

        public Dictionary<string, object> GetDetalleNivelDosPresupuestoGasto(int year, int mes, List<int> arrConstruplan, List<int> arrArrendadora)
        {
            try
            {
                List<MovPolControlPptalDTO> datosGenerales = (List<MovPolControlPptalDTO>)session["ControlPresupuestalDatos"];
                var datos = new InfoDetalleNivelDosIngresoGastoDTO(); 
                List<tablaPanel3DTO> lstResultadoPpto = new List<tablaPanel3DTO>();
                List<tablaPanel3DTO> lstResultadoPptoArr = new List<tablaPanel3DTO>();
                var detallesTabla = new List<InfoDetalleNivelDosInfoPorCC>();
                var detallesTablaArr = new List<InfoDetalleNivelDosInfoPorCC>();
                #region Datos Cplan
                var datosAnioPasado = new InfoDetalleNivelDosIngresoGastoDTO();

                tblAF_CtrlPptalOfCe_PptoInicial periodoPresupuesto = _context.tblAF_CtrlPptalOfCe_PptoInicial.FirstOrDefault(x => x.anio == year && x.registroActivo);

                if (periodoPresupuesto != null && arrConstruplan != null && arrConstruplan.Count() > 0)
                {
                    List<tblAF_CtrlPptalOfCe_PptoAnual> presupuestos = _context.tblAF_CtrlPptalOfCe_PptoAnual.Where(x => x.pptoInicialID == periodoPresupuesto.id && x.registroActivo && x.autorizado).ToList()
                                                                                                             .Where(x => (arrConstruplan != null ? arrConstruplan.Contains(x.idCC) : true)).ToList();
                    // LISTADO DE CC ACTIVOS
                    List<tblP_CC> lstCC = _context.tblP_CC.Where(w => w.estatus).ToList();

                    #region PPTO AÑO SELECCIONADO
                    List<tblAF_CtrlPptalOfCe_CapPptos> actividades = new List<tblAF_CtrlPptalOfCe_CapPptos>();
                    List<string> ccs = new List<string>();
                    List<int> lstAreasPol = new List<int>();
                    List<int> lstCuentasPol = new List<int>();
                    foreach (var presupuesto in presupuestos)
                    {
                        string strCC = presupuesto.idCC.ToString();
                        int idCC = presupuesto.idCC;
                        int area = lstCC.Where(w => w.id == idCC).Select(s => s.area).FirstOrDefault();
                        int cuenta = lstCC.Where(w => w.id == idCC).Select(s => s.cuenta).FirstOrDefault();
                        string cc = lstCC.Where(w => w.id == idCC).Select(s => s.cc).FirstOrDefault();

                        lstAreasPol.Add(area);
                        lstCuentasPol.Add(cuenta);

                        actividades.AddRange(_context.tblAF_CtrlPptalOfCe_CapPptos
                            .Where(x =>
                                x.cc == strCC &&
                                x.anio == year &&
                                x.registroActivo));

                        if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                            ccs.Add(presupuesto.cc);
                        else
                            ccs.Add(cc);
                    }
                    #endregion

                    #region AÑO SELECCIONADO
                    var listaCuentasString = new List<string>();
                    var listaActividadesID = actividades.Select(x => x.idConcepto).ToList();
                    var listaConceptos = _context.tblAF_CtrlPptalOfCe_CatConceptos.Where(x => listaActividadesID.Contains(x.idConcepto)).ToList();
                    var listaConceptosId = listaConceptos.Select(x => x.idConcepto).Distinct().ToList();
                    var listaCuentasConceptos = _context.tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas.Where(x => listaConceptosId.Contains(x.idConcepto)).ToList();
                    #endregion

                    OdbcConsultaDTO query = new OdbcConsultaDTO();
                    OdbcConsultaDTO queryAnioPasado = new OdbcConsultaDTO();
                    List<IngresosGastosDTO> gastos = datosGenerales.Where(x => x.empresa == 1 && x.year == year && ((x.mes == mes) || (x.mes < mes && x.scta == 0 && x.sscta == 0) || (x.mes < mes && x.scta == 23 && x.sscta == 0))).GroupBy(x => new { cc = x.cc, mes = x.mes }).Select(x => new IngresosGastosDTO
                    {
                        cc = x.Key.cc,
                        descripcion = x.Key.cc,
                        mes = x.Key.mes,
                        gastoMensual = x.Where(y => y.scta != 23).Sum(y => y.monto) - x.Where(y => y.scta == 23).Sum(y => y.monto)
                    }).ToList();

                    List<IngresosGastosDTO> gastosAnioPasado = datosGenerales.Where(x => x.empresa == 1 && x.year == (year - 1) && ((x.mes == mes) || (x.mes < mes && x.scta == 0 && x.sscta == 0))).GroupBy(x => new { cc = x.cc, mes = x.mes }).Select(x => new IngresosGastosDTO
                    {
                        cc = x.Key.cc,
                        descripcion = x.Key.cc,
                        mes = x.Key.mes,
                        gastoMensual = x.Sum(y => y.monto)
                    }).ToList();

                    foreach (var item in gastos)
                    {
                        List<IngresosGastosDTO> objGastoActual = gastosAnioPasado.Where(w => w.cc == item.cc).ToList();
                        if (objGastoActual != null)
                        {
                            foreach (var itemGasto in objGastoActual)
                            {
                                item.gastoAnioPasado += itemGasto.gastoMensual;
                            }
                        }
                    }
                    var _ccs = _context.tblP_CC.ToList();

                    #region AÑO SELECCIONADO
                    foreach (var presupuesto in presupuestos.OrderBy(x => x.cc).GroupBy(x => x.idCC))
                    {
                        var ccString = presupuesto.First().idCC.ToString();
                        var _actividades = actividades.Where(x => x.cc == ccString).ToList();
                        var aditivas = new List<tblAF_CtrlAditiva>();
                        var actividadesIDs = _actividades.Select(x => x.id).ToList();
                        aditivas = _context.tblAF_CtrlAditiva.Where(x => actividadesIDs.Contains(x.capPptosId)).Where(x => x.registroActivo && x.autorizado).ToList();
                        var detalleTabla = new InfoDetalleNivelDosInfoPorCC();

                        detalleTabla.empresa = 1;
                        detalleTabla.idCC = presupuesto.First().idCC;
                        detalleTabla.cc = presupuesto.First().cc;
                        detalleTabla.descripcion = _ccs.First(x => x.id == presupuesto.First().idCC).descripcion;

                        for (int i = 0; i < mes; i++)
                        {
                            detalleTabla.gastoAcumulado += _actividades.Sum(x => Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[i]).GetValue(x, null)));
                            detalleTabla.gastoAcumulado += aditivas.Sum(x => Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[i]).GetValue(x, null)));
                        }

                        detalleTabla.gastoMensual = _actividades.Sum(x => Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[mes - 1]).GetValue(x, null))); 
                        detalleTabla.gastoMensual += aditivas.Sum(x => Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[mes - 1]).GetValue(x, null)));

                        if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                        {
                            detalleTabla.ingresoMensual = gastos.Where(x => x.cc == presupuesto.First().cc && x.mes == mes).Sum(x => x.gastoMensual);
                            detalleTabla.ingresoAcumulado = gastos.Where(x => x.cc == presupuesto.First().cc).Sum(x => x.gastoMensual);
                            detalleTabla.gastoAnioPasado = gastos.Where(x => x.cc == presupuesto.First().cc && x.mes == mes).Select(x => x.gastoAnioPasado).FirstOrDefault();
                            detalleTabla.diferenciaAnioActualVsAnioAcumulado = detalleTabla.ingresoAcumulado - detalleTabla.gastoAnioPasado;
                        }
                        else
                        {
                            detalleTabla.ingresoMensual = gastos.Where(x => x.areaCuenta == presupuesto.First().cc && x.mes == mes).Sum(x => x.gastoMensual);
                            detalleTabla.ingresoAcumulado = gastos.Where(x => x.areaCuenta == presupuesto.First().cc).Sum(x => x.gastoMensual);
                        }

                        detalleTabla.cumplimientoMensual = (detalleTabla.ingresoMensual / (detalleTabla.gastoMensual != 0 ? detalleTabla.gastoMensual : 1)) * 100;
                        detalleTabla.cumplimientoAcumulado = (detalleTabla.ingresoAcumulado / (detalleTabla.gastoAcumulado != 0 ? detalleTabla.gastoAcumulado : 1)) * 100;

                        detallesTabla.Add(detalleTabla);
                    }
                    #endregion

                    // AÑO SELECCIONADO
                    datos.datosTablaCC = detallesTabla;

                    // AÑO SELECCIONADO
                    datos.mesCierre = new DateTime(year, mes, 1).ToString("MMMM").ToUpper();

                    var graficaMensual = new GraficaDTO();
                    graficaMensual.serie1Descripcion = "GASTOS";
                    graficaMensual.serie2Descripcion = "PRESUPUESTO";
                    graficaMensual.serie3Descripcion = "CUMPLIMIENTO";

                    var _aditivas = new List<tblAF_CtrlAditiva>();
                    var _actividadesIDs = actividades.Select(x => x.id).ToList();
                    _aditivas = _context.tblAF_CtrlAditiva.Where(x => _actividadesIDs.Contains(x.capPptosId)).Where(x => x.registroActivo && x.autorizado).ToList();

                    for (int i = 0; i < meses.Length; i++)
                    {
                        var gastoMes = gastos.Where(x => x.mes == (i + 1)).Sum(x => x.gastoMensual);
                        var presupuestoMes = actividades.Sum(x => Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[i]).GetValue(x, null)));
                        presupuestoMes += _aditivas.Sum(x => Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[i]).GetValue(x, null)));
                        graficaMensual.categorias.Add(meses[i].ToUpper());
                        graficaMensual.serie1.Add(gastoMes);
                        graficaMensual.serie2.Add(presupuestoMes);
                        graficaMensual.serie3.Add(presupuestoMes > 0 ? (gastoMes * 100) / presupuestoMes : 0);
                    }

                    var maximo = graficaMensual.serie1.Max() > graficaMensual.serie2.Max() ? graficaMensual.serie1.Max() : graficaMensual.serie2.Max();
                    datos.maximoGrafica = maximo;
                    datos.maximoPorcentaje = graficaMensual.serie3.Max();

                    for (int i = 0; i < graficaMensual.serie3.Count(); i++) { graficaMensual.serie3[i] = datos.maximoPorcentaje > 0 ? ((graficaMensual.serie3[i] * maximo) / datos.maximoPorcentaje) : 0; }

                    datos.graficaBarraMensual = graficaMensual;

                    #region GetSumaCapturasPptosGastos

                    List<int> auxLstCCID = new List<int>();
                    var registroCentroCostoSIGOPLANGastos = _context.tblP_CC.Where(x => auxLstCCID.Contains(x.id)).ToList();

                    #region SE OBTIENE CAPTURAS (AÑO + CC)
                    List<CapPptoDTO> lstCapturasGastos = _context.Select<CapPptoDTO>(new DapperDTO
                    {
                        baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                        #region CONSULTA INCLUYENDO LAS ADITIVAS
                        consulta = @"
                                                SELECT
                                                    t1.id, t1.cc, t1.idAgrupacion, t1.idConcepto, t1.importeEnero, t1.importeFebrero, t1.importeMarzo, t1.importeAbril, t1.importeMayo, 
                                                    t1.importeJunio, t1.importeJulio, t1.importeAgosto, t1.importeSeptiembre, t1.importeOctubre, t1.importeNoviembre, 
                                                    t1.importeDiciembre, t1.importeTotal, t1.anio, t1.idResponsable, t2.nombre AS agrupacion, t3.concepto AS concepto,
                                                    t4.nombre + ' ' + t4.apellidoPaterno + ' ' + t4.apellidoMaterno AS responsable,
                                                    (SELECT SUM(ad.importeEnero) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeEneroAditiva,
                    	                            (SELECT SUM(ad.importeFebrero) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeFebreroAditiva,
                    	                            (SELECT SUM(ad.importeMarzo) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeMarzoAditiva,
                    	                            (SELECT SUM(ad.importeAbril) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeAbrilAditiva,
                    	                            (SELECT SUM(ad.importeMayo) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeMayoAditiva,
                    	                            (SELECT SUM(ad.importeJunio) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeJunioAditiva,
                    	                            (SELECT SUM(ad.importeJulio) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeJulioAditiva,
                    	                            (SELECT SUM(ad.importeAgosto) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeAgostoAditiva,
                    	                            (SELECT SUM(ad.importeSeptiembre) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeSeptiembreAditiva,
                    	                            (SELECT SUM(ad.importeOctubre) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeOctubreAditiva,
                    	                            (SELECT SUM(ad.importeNoviembre) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeNoviembreAditiva,
                    	                            (SELECT SUM(ad.importeDiciembre) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeDiciembreAditiva
                                                FROM tblAF_CtrlPptalOfCe_CapPptos AS t1
                    			                    INNER JOIN tblAF_CtrllPptalOfCe_CatAgrupaciones AS t2 ON t2.id = t1.idAgrupacion
                    			                    INNER JOIN tblAF_CtrlPptalOfCe_CatConceptos AS t3 ON t3.id = t1.idConcepto
                    			                    INNER JOIN tblP_Usuario AS t4 ON t4.id = t1.idResponsable
                    				            WHERE t1.registroActivo = @registroActivo AND t1.cc IN @cc AND t1.anio = @anio",
                        #endregion
                        parametros = new { registroActivo = true, cc = arrConstruplan, anio = year }
                    }).ToList();
                    #endregion

                    List<sc_movpolDTO> polizasTotalGastos = new List<sc_movpolDTO>();
                    polizasTotalGastos = gastos.GroupBy(x => x.mes).Select(x => new sc_movpolDTO
                    {
                        mes = x.Key,
                        monto = x.Sum(y => y.gastoMensual)
                    }).ToList();

                    tablaPanel3DTO presupuestoTotal = new tablaPanel3DTO
                    {
                        concepto = "PRESUPUESTO",
                        enero = lstCapturasGastos.Sum(x => x.importeEnero + x.importeEneroAditiva).ToString(),
                        febrero = lstCapturasGastos.Sum(x => x.importeFebrero + x.importeFebreroAditiva).ToString(),
                        marzo = lstCapturasGastos.Sum(x => x.importeMarzo + x.importeMarzoAditiva).ToString(),
                        abril = lstCapturasGastos.Sum(x => x.importeAbril + x.importeAbrilAditiva).ToString(),
                        mayo = lstCapturasGastos.Sum(x => x.importeMayo + x.importeMayoAditiva).ToString(),
                        junio = lstCapturasGastos.Sum(x => x.importeJunio + x.importeJunioAditiva).ToString(),
                        julio = lstCapturasGastos.Sum(x => x.importeJulio + x.importeJulioAditiva).ToString(),
                        agosto = lstCapturasGastos.Sum(x => x.importeAgosto + x.importeAgostoAditiva).ToString(),
                        septiembre = lstCapturasGastos.Sum(x => x.importeSeptiembre + x.importeSeptiembreAditiva).ToString(),
                        octubre = lstCapturasGastos.Sum(x => x.importeOctubre + x.importeOctubreAditiva).ToString(),
                        noviembre = lstCapturasGastos.Sum(x => x.importeNoviembre + x.importeNoviembreAditiva).ToString(),
                        diciembre = lstCapturasGastos.Sum(x => x.importeDiciembre + x.importeDiciembreAditiva).ToString(),
                        total = (
                            lstCapturasGastos.Sum(x => x.importeEnero + x.importeEneroAditiva +
                                                     x.importeFebrero + x.importeFebreroAditiva +
                                                     x.importeMarzo + x.importeMarzoAditiva +
                                                     x.importeAbril + x.importeAbrilAditiva +
                                                     x.importeMayo + x.importeMayoAditiva +
                                                     x.importeJunio + x.importeJunioAditiva +
                                                     x.importeJulio + x.importeJulioAditiva +
                                                     x.importeAgosto + x.importeAgostoAditiva +
                                                     x.importeSeptiembre + x.importeSeptiembreAditiva +
                                                     x.importeOctubre + x.importeOctubreAditiva +
                                                     x.importeNoviembre + x.importeNoviembreAditiva +
                                                     x.importeDiciembre + x.importeDiciembreAditiva
                                                ).ToString()
                        )
                    };

                    tablaPanel3DTO gastosTotal = new tablaPanel3DTO
                    {
                        concepto = "GASTOS",
                        enero = polizasTotalGastos.Where(x => x.mes == 1).Sum(x => x.monto).ToString(),
                        febrero = polizasTotalGastos.Where(x => x.mes == 2).Sum(x => x.monto).ToString(),
                        marzo = polizasTotalGastos.Where(x => x.mes == 3).Sum(x => x.monto).ToString(),
                        abril = polizasTotalGastos.Where(x => x.mes == 4).Sum(x => x.monto).ToString(),
                        mayo = polizasTotalGastos.Where(x => x.mes == 5).Sum(x => x.monto).ToString(),
                        junio = polizasTotalGastos.Where(x => x.mes == 6).Sum(x => x.monto).ToString(),
                        julio = polizasTotalGastos.Where(x => x.mes == 7).Sum(x => x.monto).ToString(),
                        agosto = polizasTotalGastos.Where(x => x.mes == 8).Sum(x => x.monto).ToString(),
                        septiembre = polizasTotalGastos.Where(x => x.mes == 9).Sum(x => x.monto).ToString(),
                        octubre = polizasTotalGastos.Where(x => x.mes == 10).Sum(x => x.monto).ToString(),
                        noviembre = polizasTotalGastos.Where(x => x.mes == 11).Sum(x => x.monto).ToString(),
                        diciembre = polizasTotalGastos.Where(x => x.mes == 12).Sum(x => x.monto).ToString(),
                        total = (
                            polizasTotalGastos.Where(w => w.mes > 0 && w.mes < 13).Sum(s => s.monto).ToString()
                        )
                    };

                    tablaPanel3DTO diferenciaTotal = new tablaPanel3DTO
                    {
                        concepto = "DIFERENCIA VS PRESUPUESTO",
                        enero = (lstCapturasGastos.Sum(x => x.importeEnero + x.importeFebreroAditiva) - polizasTotalGastos.Where(x => x.mes == 1).Sum(x => x.monto)).ToString(),
                        febrero = (lstCapturasGastos.Sum(x => x.importeFebrero + x.importeFebreroAditiva) - polizasTotalGastos.Where(x => x.mes == 2).Sum(x => x.monto)).ToString(),
                        marzo = (lstCapturasGastos.Sum(x => x.importeMarzo + x.importeMarzoAditiva) - polizasTotalGastos.Where(x => x.mes == 3).Sum(x => x.monto)).ToString(),
                        abril = (lstCapturasGastos.Sum(x => x.importeAbril + x.importeAbrilAditiva) - polizasTotalGastos.Where(x => x.mes == 4).Sum(x => x.monto)).ToString(),
                        mayo = (lstCapturasGastos.Sum(x => x.importeMayo + x.importeMayoAditiva) - polizasTotalGastos.Where(x => x.mes == 5).Sum(x => x.monto)).ToString(),
                        junio = (lstCapturasGastos.Sum(x => x.importeJunio + x.importeJunioAditiva) - polizasTotalGastos.Where(x => x.mes == 6).Sum(x => x.monto)).ToString(),
                        julio = (lstCapturasGastos.Sum(x => x.importeJulio + x.importeJulioAditiva) - polizasTotalGastos.Where(x => x.mes == 7).Sum(x => x.monto)).ToString(),
                        agosto = (lstCapturasGastos.Sum(x => x.importeAgosto + x.importeAgostoAditiva) - polizasTotalGastos.Where(x => x.mes == 8).Sum(x => x.monto)).ToString(),
                        septiembre = (lstCapturasGastos.Sum(x => x.importeSeptiembre + x.importeSeptiembreAditiva) - polizasTotalGastos.Where(x => x.mes == 9).Sum(x => x.monto)).ToString(),
                        octubre = (lstCapturasGastos.Sum(x => x.importeOctubre + x.importeOctubreAditiva) - polizasTotalGastos.Where(x => x.mes == 10).Sum(x => x.monto)).ToString(),
                        noviembre = (lstCapturasGastos.Sum(x => x.importeNoviembre + x.importeNoviembreAditiva) - polizasTotalGastos.Where(x => x.mes == 11).Sum(x => x.monto)).ToString(),
                        diciembre = (lstCapturasGastos.Sum(x => x.importeDiciembre + x.importeDiciembreAditiva) - polizasTotalGastos.Where(x => x.mes == 12).Sum(x => x.monto)).ToString(),
                        total = (
                        (
                            (lstCapturasGastos.Sum(x => x.importeEnero + x.importeEneroAditiva) - polizasTotalGastos.Where(x => x.mes == 1).Sum(x => x.monto)) +
                            (lstCapturasGastos.Sum(x => x.importeFebrero + x.importeFebreroAditiva) - polizasTotalGastos.Where(x => x.mes == 2).Sum(x => x.monto)) +
                            (lstCapturasGastos.Sum(x => x.importeMarzo + x.importeMarzoAditiva) - polizasTotalGastos.Where(x => x.mes == 3).Sum(x => x.monto)) +
                            (lstCapturasGastos.Sum(x => x.importeAbril + x.importeAbrilAditiva) - polizasTotalGastos.Where(x => x.mes == 4).Sum(x => x.monto)) +
                            (lstCapturasGastos.Sum(x => x.importeMayo + x.importeMayoAditiva) - polizasTotalGastos.Where(x => x.mes == 5).Sum(x => x.monto)) +
                            (lstCapturasGastos.Sum(x => x.importeJunio + x.importeJunioAditiva) - polizasTotalGastos.Where(x => x.mes == 6).Sum(x => x.monto)) +
                            (lstCapturasGastos.Sum(x => x.importeJulio + x.importeJulioAditiva) - polizasTotalGastos.Where(x => x.mes == 7).Sum(x => x.monto)) +
                            (lstCapturasGastos.Sum(x => x.importeAgosto + x.importeAgostoAditiva) - polizasTotalGastos.Where(x => x.mes == 8).Sum(x => x.monto)) +
                            (lstCapturasGastos.Sum(x => x.importeSeptiembre + x.importeSeptiembreAditiva) - polizasTotalGastos.Where(x => x.mes == 9).Sum(x => x.monto)) +
                            (lstCapturasGastos.Sum(x => x.importeOctubre + x.importeOctubreAditiva) - polizasTotalGastos.Where(x => x.mes == 10).Sum(x => x.monto)) +
                            (lstCapturasGastos.Sum(x => x.importeNoviembre + x.importeNoviembreAditiva) - polizasTotalGastos.Where(x => x.mes == 11).Sum(x => x.monto)) +
                            (lstCapturasGastos.Sum(x => x.importeDiciembre + x.importeDiciembreAditiva) - polizasTotalGastos.Where(x => x.mes == 12).Sum(x => x.monto))
                        ).ToString()
                    )
                    };

                    tablaPanel3DTO cumplimientoTotal = new tablaPanel3DTO
                    {
                        concepto = "CUMPLIMIENTO",
                        enero = Math.Round((lstCapturasGastos.Sum(x => x.importeEnero + x.importeEneroAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 1).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeEnero + x.importeEneroAditiva)), 2).ToString(),
                        febrero = Math.Round((lstCapturasGastos.Sum(x => x.importeFebrero + x.importeFebreroAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 2).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeFebrero + x.importeFebreroAditiva)), 2).ToString(),
                        marzo = Math.Round((lstCapturasGastos.Sum(x => x.importeMarzo + x.importeMarzoAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 3).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeMarzo + x.importeMarzoAditiva)), 2).ToString(),
                        abril = Math.Round((lstCapturasGastos.Sum(x => x.importeAbril + x.importeAbrilAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 4).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeAbril + x.importeAbrilAditiva)), 2).ToString(),
                        mayo = Math.Round((lstCapturasGastos.Sum(x => x.importeMayo + x.importeMayoAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 5).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeMayo + x.importeMarzoAditiva)), 2).ToString(),
                        junio = Math.Round((lstCapturasGastos.Sum(x => x.importeJunio + x.importeJunioAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 6).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeJunio + x.importeJunioAditiva)), 2).ToString(),
                        julio = Math.Round((lstCapturasGastos.Sum(x => x.importeJulio + x.importeJulioAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 7).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeJulio + x.importeJulioAditiva)), 2).ToString(),
                        agosto = Math.Round((lstCapturasGastos.Sum(x => x.importeAgosto + x.importeAgostoAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 8).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeAgosto + x.importeAgostoAditiva)), 2).ToString(),
                        septiembre = Math.Round((lstCapturasGastos.Sum(x => x.importeSeptiembre + x.importeSeptiembreAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 9).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeSeptiembre + x.importeSeptiembreAditiva)), 2).ToString(),
                        octubre = Math.Round((lstCapturasGastos.Sum(x => x.importeOctubre + x.importeOctubreAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 10).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeOctubre + x.importeOctubreAditiva)), 2).ToString(),
                        noviembre = Math.Round((lstCapturasGastos.Sum(x => x.importeNoviembre + x.importeNoviembreAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 11).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeNoviembre + x.importeNoviembreAditiva)), 2).ToString(),
                        diciembre = Math.Round((lstCapturasGastos.Sum(x => x.importeDiciembre + x.importeDiciembreAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 12).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeDiciembre + x.importeDiciembreAditiva)), 2).ToString(),
                        total =
                        ((
                            Math.Round((lstCapturasGastos.Sum(x => x.importeEnero + x.importeEneroAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 1).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeEnero + x.importeEneroAditiva)), 2) +
                            Math.Round((lstCapturasGastos.Sum(x => x.importeFebrero + x.importeFebreroAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 2).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeFebrero + x.importeFebreroAditiva)), 2) +
                            Math.Round((lstCapturasGastos.Sum(x => x.importeMarzo + x.importeMarzoAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 3).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeMarzo + x.importeMarzoAditiva)), 2) +
                            Math.Round((lstCapturasGastos.Sum(x => x.importeAbril + x.importeAbrilAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 4).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeAbril + x.importeAbrilAditiva)), 2) +
                            Math.Round((lstCapturasGastos.Sum(x => x.importeMayo + x.importeMayoAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 5).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeMayo + x.importeMarzoAditiva)), 2) +
                            Math.Round((lstCapturasGastos.Sum(x => x.importeJunio + x.importeJunioAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 6).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeJunio + x.importeJunioAditiva)), 2) +
                            Math.Round((lstCapturasGastos.Sum(x => x.importeJulio + x.importeJulioAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 7).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeJulio + x.importeJulioAditiva)), 2) +
                            Math.Round((lstCapturasGastos.Sum(x => x.importeAgosto + x.importeAgostoAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 8).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeAgosto + x.importeAgostoAditiva)), 2) +
                            Math.Round((lstCapturasGastos.Sum(x => x.importeSeptiembre + x.importeSeptiembreAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 9).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeSeptiembre + x.importeSeptiembreAditiva)), 2) +
                            Math.Round((lstCapturasGastos.Sum(x => x.importeOctubre + x.importeOctubreAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 10).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeOctubre + x.importeOctubreAditiva)), 2) +
                            Math.Round((lstCapturasGastos.Sum(x => x.importeNoviembre + x.importeNoviembreAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 11).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeNoviembre + x.importeNoviembreAditiva)), 2) +
                            Math.Round((lstCapturasGastos.Sum(x => x.importeDiciembre + x.importeDiciembreAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 12).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeDiciembre + x.importeDiciembreAditiva)), 2)
                        ) / 12).ToString()
                    };

                    lstResultadoPpto.Add(presupuestoTotal);
                    lstResultadoPpto.Add(gastosTotal);
                    lstResultadoPpto.Add(diferenciaTotal);
                    lstResultadoPpto.Add(cumplimientoTotal);

                    foreach (var item in datos.datosTablaCC)
                    {
                        item.diferenciaMensual = (decimal)item.gastoMensual - (decimal)item.ingresoMensual;
                        item.diferenciaAcumulado = (decimal)item.gastoAcumulado - (decimal)item.ingresoAcumulado;
                        item.total = (decimal)item.gastoMensual + (decimal)item.ingresoMensual + (decimal)item.gastoAcumulado + (decimal)item.ingresoAcumulado;
                    }
                }
                    #endregion
                #endregion

                #region Datos Arrendadora
                using (var _ctxArre = new MainContext(EmpresaEnum.Arrendadora))
                {
                    var datosArrendadora = new InfoDetalleNivelDosIngresoGastoDTO();
                    var datosAnioPasadoArrendadora = new InfoDetalleNivelDosIngresoGastoDTO();

                    tblAF_CtrlPptalOfCe_PptoInicial periodoPresupuestoArrendadora = _ctxArre.tblAF_CtrlPptalOfCe_PptoInicial.FirstOrDefault(x => x.anio == year && x.registroActivo);
                    if (periodoPresupuestoArrendadora != null && arrArrendadora != null && arrArrendadora.Count() > 0)
                    {
                        List<tblAF_CtrlPptalOfCe_PptoAnual> presupuestos = _ctxArre.tblAF_CtrlPptalOfCe_PptoAnual.Where(x => x.pptoInicialID == periodoPresupuestoArrendadora.id && x.registroActivo && x.autorizado).ToList()
                                                                                                                 .Where(x => (arrArrendadora != null ? arrArrendadora.Contains(x.idCC) : true)).ToList();
                        // LISTADO DE CC ACTIVOS
                        List<tblP_CC> lstCC = _ctxArre.tblP_CC.Where(w => w.estatus).ToList();

                        #region PPTO AÑO SELECCIONADO
                        List<tblAF_CtrlPptalOfCe_CapPptos> actividades = new List<tblAF_CtrlPptalOfCe_CapPptos>();
                        List<string> ccs = new List<string>();
                        List<int> lstAreasPol = new List<int>();
                        List<int> lstCuentasPol = new List<int>();
                        foreach (var presupuesto in presupuestos)
                        {
                            string strCC = presupuesto.idCC.ToString();
                            int idCC = presupuesto.idCC;
                            int area = lstCC.Where(w => w.id == idCC).Select(s => s.area).FirstOrDefault();
                            int cuenta = lstCC.Where(w => w.id == idCC).Select(s => s.cuenta).FirstOrDefault();
                            string cc = lstCC.Where(w => w.id == idCC).Select(s => s.cc).FirstOrDefault();

                            lstAreasPol.Add(area);
                            lstCuentasPol.Add(cuenta);

                            actividades.AddRange(_ctxArre.tblAF_CtrlPptalOfCe_CapPptos
                                .Where(x =>
                                    x.cc == strCC &&
                                    x.anio == year &&
                                    x.registroActivo));

                            ccs.Add(cc);
                        }
                        #endregion

                        #region AÑO SELECCIONADO
                        var listaCuentasString = new List<string>();
                        var listaActividadesID = actividades.Select(x => x.idConcepto).ToList();

                        var listaConceptos = _ctxArre.tblAF_CtrlPptalOfCe_CatConceptos.Where(x => listaActividadesID.Contains(x.idConcepto)).ToList();
                        var listaConceptosId = listaConceptos.Select(x => x.idConcepto).Distinct().ToList();
                        var listaCuentasConceptos = _ctxArre.tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas.Where(x => listaConceptosId.Contains(x.idConcepto)).ToList();
                        #endregion

                        OdbcConsultaDTO query = new OdbcConsultaDTO();
                        OdbcConsultaDTO queryAnioPasado = new OdbcConsultaDTO();

                        List<IngresosGastosDTO> gastos = datosGenerales.Where(x => x.empresa == 2 && x.year == year).GroupBy(x => new { area = x.area, cuenta = x.cuenta_oc, mes = x.mes }).Select(x => new IngresosGastosDTO
                        {
                            areaCuenta = x.Key.area.ToString() + "-" + x.Key.cuenta.ToString(),
                            descripcion = x.Key.area.ToString() + "-" + x.Key.cuenta.ToString(),
                            mes = x.Key.mes,
                            gastoMensual = x.Sum(y => y.monto)
                        }).ToList();

                        List<IngresosGastosDTO> gastosAnioPasado = datosGenerales.Where(x => x.empresa == 2 && x.year == (year - 1)).GroupBy(x => new { area = x.area, cuenta = x.cuenta_oc, mes = x.mes }).Select(x => new IngresosGastosDTO
                        {
                            areaCuenta = x.Key.area.ToString() + "-" + x.Key.cuenta.ToString(),
                            descripcion = x.Key.area.ToString() + "-" + x.Key.cuenta.ToString(),
                            mes = x.Key.mes,
                            gastoMensual = x.Sum(y => y.monto)
                        }).ToList();

                        foreach (var item in gastos)
                        {
                            IngresosGastosDTO objGastoActual = gastosAnioPasado.Where(w => w.area == item.area && w.cuenta_oc == item.cuenta_oc && w.mes == item.mes).FirstOrDefault();
                            if (objGastoActual != null)
                                item.gastoAnioPasado = objGastoActual.gastoMensual;
                        }

                        var _ccs = _ctxArre.tblP_CC.ToList();

                        #region AÑO SELECCIONADO
                        foreach (var presupuesto in presupuestos.OrderBy(x => x.cc).GroupBy(x => x.idCC))
                        {
                            var ccString = presupuesto.First().idCC.ToString();
                            var _actividades = actividades.Where(x => x.cc == ccString).ToList();

                            var aditivas = new List<tblAF_CtrlAditiva>(); 
                            var actividadesIDs = _actividades.Select(x => x.id).ToList();
                            aditivas = _ctxArre.tblAF_CtrlAditiva.Where(x => actividadesIDs.Contains(x.capPptosId)).Where(x => x.registroActivo && x.autorizado).ToList();

                            var detalleTabla = new InfoDetalleNivelDosInfoPorCC();
                            detalleTabla.empresa = 2;
                            detalleTabla.idCC = presupuesto.First().idCC;
                            detalleTabla.cc = presupuesto.First().cc;
                            detalleTabla.descripcion = _ccs.First(x => x.id == presupuesto.First().idCC).descripcion;

                            for (int i = 0; i < mes; i++)
                            {
                                detalleTabla.gastoAcumulado += _actividades.Sum(x => Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[i]).GetValue(x, null)));
                                detalleTabla.gastoAcumulado += aditivas.Sum(x => Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[i]).GetValue(x, null)));
                            }

                            detalleTabla.gastoMensual = _actividades.Sum(x => Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[mes - 1]).GetValue(x, null)));
                            detalleTabla.gastoMensual += aditivas.Sum(x => Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[mes - 1]).GetValue(x, null)));

                            detalleTabla.ingresoMensual = gastos.Where(x => x.areaCuenta == presupuesto.First().cc && x.mes == mes).Sum(x => x.gastoMensual);
                            detalleTabla.ingresoAcumulado = gastos.Where(x => x.areaCuenta == presupuesto.First().cc).Sum(x => x.gastoMensual);
                            var auxGastoAnioPasado = gastos.Where(x => x.areaCuenta == presupuesto.First().cc && x.mes <= mes).ToList();
                            detalleTabla.gastoAnioPasado = auxGastoAnioPasado.Sum(x => x.gastoAnioPasado);
                            detalleTabla.diferenciaAnioActualVsAnioAcumulado = detalleTabla.ingresoAcumulado - detalleTabla.gastoAnioPasado;
                            
                            detalleTabla.cumplimientoMensual = (detalleTabla.ingresoMensual / (detalleTabla.gastoMensual != 0 ? detalleTabla.gastoMensual : 1)) * 100;
                            detalleTabla.cumplimientoAcumulado = (detalleTabla.ingresoAcumulado / (detalleTabla.gastoAcumulado != 0 ? detalleTabla.gastoAcumulado : 1)) * 100;

                            detallesTablaArr.Add(detalleTabla);
                        }
                        #endregion

                        // AÑO SELECCIONADO
                        datosArrendadora.datosTablaCC = detallesTablaArr;

                        #region AÑO SELECCIONADO
                        if (detallesTablaArr.Sum(x => x.ingresoAcumulado) != 0)
                            datosArrendadora.cumplimientoAcumuladoEmpresa = (detallesTablaArr.Sum(x => x.ingresoAcumulado) / detallesTablaArr.Sum(x => x.gastoAcumulado)) * 100;
                        else
                            datosArrendadora.cumplimientoAcumuladoEmpresa = 0;
                        #endregion

                        // AÑO SELECCIONADO
                        datosArrendadora.mesCierre = new DateTime(year, mes, 1).ToString("MMMM").ToUpper();

                        var graficaMensual = new GraficaDTO();
                        graficaMensual.serie1Descripcion = "GASTOS";
                        graficaMensual.serie2Descripcion = "PRESUPUESTO";
                        graficaMensual.serie3Descripcion = "CUMPLIMIENTO";

                        var _aditivas = new List<tblAF_CtrlAditiva>();
                        var _actividadesIDs = actividades.Select(x => x.id).ToList();
                        _aditivas = _context.tblAF_CtrlAditiva.Where(x => _actividadesIDs.Contains(x.capPptosId)).Where(x => x.registroActivo && x.autorizado).ToList();

                        for (int i = 0; i < meses.Length; i++)
                        {
                            var gastoMes = gastos.Where(x => x.mes == (i + 1)).Sum(x => x.gastoMensual);

                            var presupuestoMes = actividades.Sum(x => Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[i]).GetValue(x, null)));
                            presupuestoMes += _aditivas.Sum(x => Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[i]).GetValue(x, null)));

                            graficaMensual.categorias.Add(meses[i].ToUpper());
                            graficaMensual.serie1.Add(gastoMes);

                            graficaMensual.serie2.Add(presupuestoMes);

                            graficaMensual.serie3.Add(presupuestoMes > 0 ? (gastoMes * 100) / presupuestoMes : 0);
                        }

                        var maximo = graficaMensual.serie1.Max() > graficaMensual.serie2.Max() ? graficaMensual.serie1.Max() : graficaMensual.serie2.Max();
                        datosArrendadora.maximoGrafica = maximo;
                        datosArrendadora.maximoPorcentaje = graficaMensual.serie3.Max();

                        for (int i = 0; i < graficaMensual.serie3.Count(); i++) { graficaMensual.serie3[i] = datosArrendadora.maximoPorcentaje > 0 ? ((graficaMensual.serie3[i] * maximo) / datosArrendadora.maximoPorcentaje) : 0; }

                        datosArrendadora.graficaBarraMensual = graficaMensual;

                        #region GetSumaCapturasPptosGastos

                        List<int> auxLstCCID = new List<int>();

                        var registroCentroCostoSIGOPLANGastos = _ctxArre.tblP_CC.Where(x => auxLstCCID.Contains(x.id)).ToList();

                        #region SE OBTIENE CAPTURAS (AÑO + CC)
                        List<CapPptoDTO> lstCapturasGastos = _ctxArre.Select<CapPptoDTO>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Arrendadora,
                            #region CONSULTA INCLUYENDO LAS ADITIVASs
                            consulta = @"
                                                SELECT
                                                    t1.id, t1.cc, t1.idAgrupacion, t1.idConcepto, t1.importeEnero, t1.importeFebrero, t1.importeMarzo, t1.importeAbril, t1.importeMayo, 
                                                    t1.importeJunio, t1.importeJulio, t1.importeAgosto, t1.importeSeptiembre, t1.importeOctubre, t1.importeNoviembre, 
                                                    t1.importeDiciembre, t1.importeTotal, t1.anio, t1.idResponsable, t2.nombre AS agrupacion, t3.concepto AS concepto,
                                                    t4.nombre + ' ' + t4.apellidoPaterno + ' ' + t4.apellidoMaterno AS responsable,
                                                    (SELECT SUM(ad.importeEnero) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeEneroAditiva,
                    	                            (SELECT SUM(ad.importeFebrero) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeFebreroAditiva,
                    	                            (SELECT SUM(ad.importeMarzo) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeMarzoAditiva,
                    	                            (SELECT SUM(ad.importeAbril) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeAbrilAditiva,
                    	                            (SELECT SUM(ad.importeMayo) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeMayoAditiva,
                    	                            (SELECT SUM(ad.importeJunio) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeJunioAditiva,
                    	                            (SELECT SUM(ad.importeJulio) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeJulioAditiva,
                    	                            (SELECT SUM(ad.importeAgosto) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeAgostoAditiva,
                    	                            (SELECT SUM(ad.importeSeptiembre) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeSeptiembreAditiva,
                    	                            (SELECT SUM(ad.importeOctubre) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeOctubreAditiva,
                    	                            (SELECT SUM(ad.importeNoviembre) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeNoviembreAditiva,
                    	                            (SELECT SUM(ad.importeDiciembre) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeDiciembreAditiva
                                                FROM tblAF_CtrlPptalOfCe_CapPptos AS t1
                    			                    INNER JOIN tblAF_CtrllPptalOfCe_CatAgrupaciones AS t2 ON t2.id = t1.idAgrupacion
                    			                    INNER JOIN tblAF_CtrlPptalOfCe_CatConceptos AS t3 ON t3.id = t1.idConcepto
                    			                    INNER JOIN tblP_Usuario AS t4 ON t4.id = t1.idResponsable
                    				            WHERE t1.registroActivo = @registroActivo AND t1.cc IN @cc AND t1.anio = @anio",
                            #endregion
                            parametros = new { registroActivo = true, cc = arrArrendadora, anio = year }
                        }).ToList();
                        #endregion

                        List<sc_movpolDTO> polizasTotalGastos = new List<sc_movpolDTO>();

                        polizasTotalGastos = gastos.GroupBy(x => x.mes).Select(x => new sc_movpolDTO
                        {
                            mes = x.Key,
                            monto = x.Sum(y => y.gastoMensual)
                        }).ToList();

                        tablaPanel3DTO presupuestoTotal = new tablaPanel3DTO
                        {
                            concepto = "PRESUPUESTO",
                            enero = lstCapturasGastos.Sum(x => x.importeEnero + x.importeEneroAditiva).ToString(),
                            febrero = lstCapturasGastos.Sum(x => x.importeFebrero + x.importeFebreroAditiva).ToString(),
                            marzo = lstCapturasGastos.Sum(x => x.importeMarzo + x.importeMarzoAditiva).ToString(),
                            abril = lstCapturasGastos.Sum(x => x.importeAbril + x.importeAbrilAditiva).ToString(),
                            mayo = lstCapturasGastos.Sum(x => x.importeMayo + x.importeMayoAditiva).ToString(),
                            junio = lstCapturasGastos.Sum(x => x.importeJunio + x.importeJunioAditiva).ToString(),
                            julio = lstCapturasGastos.Sum(x => x.importeJulio + x.importeJulioAditiva).ToString(),
                            agosto = lstCapturasGastos.Sum(x => x.importeAgosto + x.importeAgostoAditiva).ToString(),
                            septiembre = lstCapturasGastos.Sum(x => x.importeSeptiembre + x.importeSeptiembreAditiva).ToString(),
                            octubre = lstCapturasGastos.Sum(x => x.importeOctubre + x.importeOctubreAditiva).ToString(),
                            noviembre = lstCapturasGastos.Sum(x => x.importeNoviembre + x.importeNoviembreAditiva).ToString(),
                            diciembre = lstCapturasGastos.Sum(x => x.importeDiciembre + x.importeDiciembreAditiva).ToString(),
                            total = (
                                lstCapturasGastos.Sum(x => x.importeEnero + x.importeEneroAditiva +
                                                         x.importeFebrero + x.importeFebreroAditiva +
                                                         x.importeMarzo + x.importeMarzoAditiva +
                                                         x.importeAbril + x.importeAbrilAditiva +
                                                         x.importeMayo + x.importeMayoAditiva +
                                                         x.importeJunio + x.importeJunioAditiva +
                                                         x.importeJulio + x.importeJulioAditiva +
                                                         x.importeAgosto + x.importeAgostoAditiva +
                                                         x.importeSeptiembre + x.importeSeptiembreAditiva +
                                                         x.importeOctubre + x.importeOctubreAditiva +
                                                         x.importeNoviembre + x.importeNoviembreAditiva +
                                                         x.importeDiciembre + x.importeDiciembreAditiva
                                                    ).ToString()
                            )
                        };

                        tablaPanel3DTO gastosTotal = new tablaPanel3DTO
                        {
                            concepto = "GASTOS",
                            enero = polizasTotalGastos.Where(x => x.mes == 1).Sum(x => x.monto).ToString(),
                            febrero = polizasTotalGastos.Where(x => x.mes == 2).Sum(x => x.monto).ToString(),
                            marzo = polizasTotalGastos.Where(x => x.mes == 3).Sum(x => x.monto).ToString(),
                            abril = polizasTotalGastos.Where(x => x.mes == 4).Sum(x => x.monto).ToString(),
                            mayo = polizasTotalGastos.Where(x => x.mes == 5).Sum(x => x.monto).ToString(),
                            junio = polizasTotalGastos.Where(x => x.mes == 6).Sum(x => x.monto).ToString(),
                            julio = polizasTotalGastos.Where(x => x.mes == 7).Sum(x => x.monto).ToString(),
                            agosto = polizasTotalGastos.Where(x => x.mes == 8).Sum(x => x.monto).ToString(),
                            septiembre = polizasTotalGastos.Where(x => x.mes == 9).Sum(x => x.monto).ToString(),
                            octubre = polizasTotalGastos.Where(x => x.mes == 10).Sum(x => x.monto).ToString(),
                            noviembre = polizasTotalGastos.Where(x => x.mes == 11).Sum(x => x.monto).ToString(),
                            diciembre = polizasTotalGastos.Where(x => x.mes == 12).Sum(x => x.monto).ToString(),
                            total = (
                                polizasTotalGastos.Where(w => w.mes > 0 && w.mes < 13).Sum(s => s.monto).ToString()
                            )
                        };

                        tablaPanel3DTO diferenciaTotal = new tablaPanel3DTO
                        {
                            concepto = "DIFERENCIA VS PRESUPUESTO",
                            enero = (lstCapturasGastos.Sum(x => x.importeEnero + x.importeFebreroAditiva) - polizasTotalGastos.Where(x => x.mes == 1).Sum(x => x.monto)).ToString(),
                            febrero = (lstCapturasGastos.Sum(x => x.importeFebrero + x.importeFebreroAditiva) - polizasTotalGastos.Where(x => x.mes == 2).Sum(x => x.monto)).ToString(),
                            marzo = (lstCapturasGastos.Sum(x => x.importeMarzo + x.importeMarzoAditiva) - polizasTotalGastos.Where(x => x.mes == 3).Sum(x => x.monto)).ToString(),
                            abril = (lstCapturasGastos.Sum(x => x.importeAbril + x.importeAbrilAditiva) - polizasTotalGastos.Where(x => x.mes == 4).Sum(x => x.monto)).ToString(),
                            mayo = (lstCapturasGastos.Sum(x => x.importeMayo + x.importeMayoAditiva) - polizasTotalGastos.Where(x => x.mes == 5).Sum(x => x.monto)).ToString(),
                            junio = (lstCapturasGastos.Sum(x => x.importeJunio + x.importeJunioAditiva) - polizasTotalGastos.Where(x => x.mes == 6).Sum(x => x.monto)).ToString(),
                            julio = (lstCapturasGastos.Sum(x => x.importeJulio + x.importeJulioAditiva) - polizasTotalGastos.Where(x => x.mes == 7).Sum(x => x.monto)).ToString(),
                            agosto = (lstCapturasGastos.Sum(x => x.importeAgosto + x.importeAgostoAditiva) - polizasTotalGastos.Where(x => x.mes == 8).Sum(x => x.monto)).ToString(),
                            septiembre = (lstCapturasGastos.Sum(x => x.importeSeptiembre + x.importeSeptiembreAditiva) - polizasTotalGastos.Where(x => x.mes == 9).Sum(x => x.monto)).ToString(),
                            octubre = (lstCapturasGastos.Sum(x => x.importeOctubre + x.importeOctubreAditiva) - polizasTotalGastos.Where(x => x.mes == 10).Sum(x => x.monto)).ToString(),
                            noviembre = (lstCapturasGastos.Sum(x => x.importeNoviembre + x.importeNoviembreAditiva) - polizasTotalGastos.Where(x => x.mes == 11).Sum(x => x.monto)).ToString(),
                            diciembre = (lstCapturasGastos.Sum(x => x.importeDiciembre + x.importeDiciembreAditiva) - polizasTotalGastos.Where(x => x.mes == 12).Sum(x => x.monto)).ToString(),
                            total = (
                            (
                                (lstCapturasGastos.Sum(x => x.importeEnero + x.importeEneroAditiva) - polizasTotalGastos.Where(x => x.mes == 1).Sum(x => x.monto)) +
                                (lstCapturasGastos.Sum(x => x.importeFebrero + x.importeFebreroAditiva) - polizasTotalGastos.Where(x => x.mes == 2).Sum(x => x.monto)) +
                                (lstCapturasGastos.Sum(x => x.importeMarzo + x.importeMarzoAditiva) - polizasTotalGastos.Where(x => x.mes == 3).Sum(x => x.monto)) +
                                (lstCapturasGastos.Sum(x => x.importeAbril + x.importeAbrilAditiva) - polizasTotalGastos.Where(x => x.mes == 4).Sum(x => x.monto)) +
                                (lstCapturasGastos.Sum(x => x.importeMayo + x.importeMayoAditiva) - polizasTotalGastos.Where(x => x.mes == 5).Sum(x => x.monto)) +
                                (lstCapturasGastos.Sum(x => x.importeJunio + x.importeJunioAditiva) - polizasTotalGastos.Where(x => x.mes == 6).Sum(x => x.monto)) +
                                (lstCapturasGastos.Sum(x => x.importeJulio + x.importeJulioAditiva) - polizasTotalGastos.Where(x => x.mes == 7).Sum(x => x.monto)) +
                                (lstCapturasGastos.Sum(x => x.importeAgosto + x.importeAgostoAditiva) - polizasTotalGastos.Where(x => x.mes == 8).Sum(x => x.monto)) +
                                (lstCapturasGastos.Sum(x => x.importeSeptiembre + x.importeSeptiembreAditiva) - polizasTotalGastos.Where(x => x.mes == 9).Sum(x => x.monto)) +
                                (lstCapturasGastos.Sum(x => x.importeOctubre + x.importeOctubreAditiva) - polizasTotalGastos.Where(x => x.mes == 10).Sum(x => x.monto)) +
                                (lstCapturasGastos.Sum(x => x.importeNoviembre + x.importeNoviembreAditiva) - polizasTotalGastos.Where(x => x.mes == 11).Sum(x => x.monto)) +
                                (lstCapturasGastos.Sum(x => x.importeDiciembre + x.importeDiciembreAditiva) - polizasTotalGastos.Where(x => x.mes == 12).Sum(x => x.monto))
                            ).ToString()
                        )
                        };

                        tablaPanel3DTO cumplimientoTotal = new tablaPanel3DTO
                        {
                            concepto = "CUMPLIMIENTO",
                            enero = Math.Round((lstCapturasGastos.Sum(x => x.importeEnero + x.importeEneroAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 1).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeEnero + x.importeEneroAditiva)), 2).ToString(),
                            febrero = Math.Round((lstCapturasGastos.Sum(x => x.importeFebrero + x.importeFebreroAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 2).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeFebrero + x.importeFebreroAditiva)), 2).ToString(),
                            marzo = Math.Round((lstCapturasGastos.Sum(x => x.importeMarzo + x.importeMarzoAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 3).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeMarzo + x.importeMarzoAditiva)), 2).ToString(),
                            abril = Math.Round((lstCapturasGastos.Sum(x => x.importeAbril + x.importeAbrilAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 4).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeAbril + x.importeAbrilAditiva)), 2).ToString(),
                            mayo = Math.Round((lstCapturasGastos.Sum(x => x.importeMayo + x.importeMayoAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 5).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeMayo + x.importeMarzoAditiva)), 2).ToString(),
                            junio = Math.Round((lstCapturasGastos.Sum(x => x.importeJunio + x.importeJunioAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 6).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeJunio + x.importeJunioAditiva)), 2).ToString(),
                            julio = Math.Round((lstCapturasGastos.Sum(x => x.importeJulio + x.importeJulioAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 7).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeJulio + x.importeJulioAditiva)), 2).ToString(),
                            agosto = Math.Round((lstCapturasGastos.Sum(x => x.importeAgosto + x.importeAgostoAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 8).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeAgosto + x.importeAgostoAditiva)), 2).ToString(),
                            septiembre = Math.Round((lstCapturasGastos.Sum(x => x.importeSeptiembre + x.importeSeptiembreAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 9).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeSeptiembre + x.importeSeptiembreAditiva)), 2).ToString(),
                            octubre = Math.Round((lstCapturasGastos.Sum(x => x.importeOctubre + x.importeOctubreAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 10).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeOctubre + x.importeOctubreAditiva)), 2).ToString(),
                            noviembre = Math.Round((lstCapturasGastos.Sum(x => x.importeNoviembre + x.importeNoviembreAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 11).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeNoviembre + x.importeNoviembreAditiva)), 2).ToString(),
                            diciembre = Math.Round((lstCapturasGastos.Sum(x => x.importeDiciembre + x.importeDiciembreAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 12).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeDiciembre + x.importeDiciembreAditiva)), 2).ToString(),
                            total =
                            ((
                                Math.Round((lstCapturasGastos.Sum(x => x.importeEnero + x.importeEneroAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 1).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeEnero + x.importeEneroAditiva)), 2) +
                                Math.Round((lstCapturasGastos.Sum(x => x.importeFebrero + x.importeFebreroAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 2).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeFebrero + x.importeFebreroAditiva)), 2) +
                                Math.Round((lstCapturasGastos.Sum(x => x.importeMarzo + x.importeMarzoAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 3).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeMarzo + x.importeMarzoAditiva)), 2) +
                                Math.Round((lstCapturasGastos.Sum(x => x.importeAbril + x.importeAbrilAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 4).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeAbril + x.importeAbrilAditiva)), 2) +
                                Math.Round((lstCapturasGastos.Sum(x => x.importeMayo + x.importeMayoAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 5).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeMayo + x.importeMarzoAditiva)), 2) +
                                Math.Round((lstCapturasGastos.Sum(x => x.importeJunio + x.importeJunioAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 6).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeJunio + x.importeJunioAditiva)), 2) +
                                Math.Round((lstCapturasGastos.Sum(x => x.importeJulio + x.importeJulioAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 7).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeJulio + x.importeJulioAditiva)), 2) +
                                Math.Round((lstCapturasGastos.Sum(x => x.importeAgosto + x.importeAgostoAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 8).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeAgosto + x.importeAgostoAditiva)), 2) +
                                Math.Round((lstCapturasGastos.Sum(x => x.importeSeptiembre + x.importeSeptiembreAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 9).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeSeptiembre + x.importeSeptiembreAditiva)), 2) +
                                Math.Round((lstCapturasGastos.Sum(x => x.importeOctubre + x.importeOctubreAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 10).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeOctubre + x.importeOctubreAditiva)), 2) +
                                Math.Round((lstCapturasGastos.Sum(x => x.importeNoviembre + x.importeNoviembreAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 11).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeNoviembre + x.importeNoviembreAditiva)), 2) +
                                Math.Round((lstCapturasGastos.Sum(x => x.importeDiciembre + x.importeDiciembreAditiva) == 0 ? 0 : (polizasTotalGastos.Where(x => x.mes == 12).Sum(x => x.monto) * 100) / lstCapturasGastos.Sum(x => x.importeDiciembre + x.importeDiciembreAditiva)), 2)
                            ) / 12).ToString()
                        };

                        lstResultadoPptoArr.Add(presupuestoTotal);
                        lstResultadoPptoArr.Add(gastosTotal);
                        lstResultadoPptoArr.Add(diferenciaTotal);
                        lstResultadoPptoArr.Add(cumplimientoTotal);

                        foreach (var item in datosArrendadora.datosTablaCC)
                        {
                            item.diferenciaMensual = (decimal)item.gastoMensual - (decimal)item.ingresoMensual;
                            item.diferenciaAcumulado = (decimal)item.gastoAcumulado - (decimal)item.ingresoAcumulado;
                            item.total = (decimal)item.gastoMensual + (decimal)item.ingresoMensual + (decimal)item.gastoAcumulado + (decimal)item.ingresoAcumulado;
                        }
                        if (datos.datosTablaCC == null || datos.datosTablaCC.Count() < 1) datos.datosTablaCC = datosArrendadora.datosTablaCC;
                        else datos.datosTablaCC.AddRange(datosArrendadora.datosTablaCC);

                        if (datos.graficaBarraMensual == null)
                        {
                            datos.graficaBarraMensual = datosArrendadora.graficaBarraMensual;
                        }
                        else
                        {
                            for (int i = 0; i < datos.graficaBarraMensual.serie1.Count(); i++) 
                            {
                                datos.graficaBarraMensual.serie1[i] += datosArrendadora.graficaBarraMensual.serie1[i];
                            }
                            for (int i = 0; i < datos.graficaBarraMensual.serie2.Count(); i++)
                            {
                                datos.graficaBarraMensual.serie2[i] += datosArrendadora.graficaBarraMensual.serie2[i];
                            }
                            for (int i = 0; i < datos.graficaBarraMensual.serie3.Count(); i++)
                            {
                                datos.graficaBarraMensual.serie3[i] += datosArrendadora.graficaBarraMensual.serie3[i];
                            }
                        }
                        datos.maximoGrafica = datos.maximoGrafica >= datosArrendadora.maximoGrafica ? datos.maximoGrafica : datosArrendadora.maximoGrafica;
                        datos.maximoPorcentaje = datos.maximoPorcentaje >= datosArrendadora.maximoPorcentaje ? datos.maximoPorcentaje : datosArrendadora.maximoPorcentaje;
                        datos.total += datosArrendadora.total;
                    }
                }

                        #endregion
                #endregion
                if (detallesTabla.Sum(x => x.gastoAcumulado) != 0)
                {
                    datos.cumplimientoAcumuladoEmpresa = (detallesTabla.Sum(x => x.ingresoAcumulado) / detallesTabla.Sum(x => x.gastoAcumulado)) * 100;
                }
                else
                    datos.cumplimientoAcumuladoEmpresa = 0;

                if (lstResultadoPptoArr.Count() > 0)
                {
                    if (lstResultadoPpto.Count() > 0)
                    {
                        for (int i = 0; i < lstResultadoPpto.Count(); i++)
                        {
                            if (i == lstResultadoPpto.Count() - 1)
                            {
                                lstResultadoPpto[i].enero = Decimal.Parse(lstResultadoPpto[0].enero) != 0 ? ((Decimal.Parse(lstResultadoPpto[1].enero) * 100) / Decimal.Parse(lstResultadoPpto[0].enero)).ToString() : "0";
                                lstResultadoPpto[i].febrero = Decimal.Parse(lstResultadoPpto[0].febrero) != 0 ? ((Decimal.Parse(lstResultadoPpto[1].febrero) * 100) / Decimal.Parse(lstResultadoPpto[0].febrero)).ToString() : "0";
                                lstResultadoPpto[i].marzo = Decimal.Parse(lstResultadoPpto[0].marzo) != 0 ? ((Decimal.Parse(lstResultadoPpto[1].marzo) * 100) / Decimal.Parse(lstResultadoPpto[0].marzo)).ToString() : "0";
                                lstResultadoPpto[i].abril = Decimal.Parse(lstResultadoPpto[0].abril) != 0 ? ((Decimal.Parse(lstResultadoPpto[1].abril) * 100) / Decimal.Parse(lstResultadoPpto[0].abril)).ToString() : "0";
                                lstResultadoPpto[i].mayo = Decimal.Parse(lstResultadoPpto[0].mayo) != 0 ? ((Decimal.Parse(lstResultadoPpto[1].mayo) * 100) / Decimal.Parse(lstResultadoPpto[0].mayo)).ToString() : "0";
                                lstResultadoPpto[i].junio = Decimal.Parse(lstResultadoPpto[0].junio) != 0 ? ((Decimal.Parse(lstResultadoPpto[1].junio) * 100) / Decimal.Parse(lstResultadoPpto[0].junio)).ToString() : "0";
                                lstResultadoPpto[i].julio = Decimal.Parse(lstResultadoPpto[0].julio) != 0 ? ((Decimal.Parse(lstResultadoPpto[1].julio) * 100) / Decimal.Parse(lstResultadoPpto[0].julio)).ToString() : "0";
                                lstResultadoPpto[i].agosto = Decimal.Parse(lstResultadoPpto[0].agosto) != 0 ? ((Decimal.Parse(lstResultadoPpto[1].agosto) * 100) / Decimal.Parse(lstResultadoPpto[0].agosto)).ToString() : "0";
                                lstResultadoPpto[i].septiembre = Decimal.Parse(lstResultadoPpto[0].septiembre) != 0 ? ((Decimal.Parse(lstResultadoPpto[1].septiembre) * 100) / Decimal.Parse(lstResultadoPpto[0].septiembre)).ToString() : "0";
                                lstResultadoPpto[i].octubre = Decimal.Parse(lstResultadoPpto[0].octubre) != 0 ? ((Decimal.Parse(lstResultadoPpto[1].octubre) * 100) / Decimal.Parse(lstResultadoPpto[0].octubre)).ToString() : "0";
                                lstResultadoPpto[i].noviembre = Decimal.Parse(lstResultadoPpto[0].noviembre) != 0 ? ((Decimal.Parse(lstResultadoPpto[1].noviembre) * 100) / Decimal.Parse(lstResultadoPpto[0].noviembre)).ToString() : "0";
                                lstResultadoPpto[i].diciembre = Decimal.Parse(lstResultadoPpto[0].diciembre) != 0 ? ((Decimal.Parse(lstResultadoPpto[1].diciembre) * 100) / Decimal.Parse(lstResultadoPpto[0].diciembre)).ToString() : "0";
                                lstResultadoPpto[i].total = Decimal.Parse(lstResultadoPpto[0].total) != 0 ? ((Decimal.Parse(lstResultadoPpto[1].total) * 100) / Decimal.Parse(lstResultadoPpto[0].total)).ToString() : "0";
                            }
                            else
                            {
                                lstResultadoPpto[i].enero = (Decimal.Parse(lstResultadoPpto[i].enero) + Decimal.Parse(lstResultadoPptoArr[i].enero)).ToString();
                                lstResultadoPpto[i].febrero = (Decimal.Parse(lstResultadoPpto[i].febrero) + Decimal.Parse(lstResultadoPptoArr[i].febrero)).ToString();
                                lstResultadoPpto[i].marzo = (Decimal.Parse(lstResultadoPpto[i].marzo) + Decimal.Parse(lstResultadoPptoArr[i].marzo)).ToString();
                                lstResultadoPpto[i].abril = (Decimal.Parse(lstResultadoPpto[i].abril) + Decimal.Parse(lstResultadoPptoArr[i].abril)).ToString();
                                lstResultadoPpto[i].mayo = (Decimal.Parse(lstResultadoPpto[i].mayo) + Decimal.Parse(lstResultadoPptoArr[i].mayo)).ToString();
                                lstResultadoPpto[i].junio = (Decimal.Parse(lstResultadoPpto[i].junio) + Decimal.Parse(lstResultadoPptoArr[i].junio)).ToString();
                                lstResultadoPpto[i].julio = (Decimal.Parse(lstResultadoPpto[i].julio) + Decimal.Parse(lstResultadoPptoArr[i].julio)).ToString();
                                lstResultadoPpto[i].agosto = (Decimal.Parse(lstResultadoPpto[i].agosto) + Decimal.Parse(lstResultadoPptoArr[i].agosto)).ToString();
                                lstResultadoPpto[i].septiembre = (Decimal.Parse(lstResultadoPpto[i].septiembre) + Decimal.Parse(lstResultadoPptoArr[i].septiembre)).ToString();
                                lstResultadoPpto[i].octubre = (Decimal.Parse(lstResultadoPpto[i].octubre) + Decimal.Parse(lstResultadoPptoArr[i].octubre)).ToString();
                                lstResultadoPpto[i].noviembre = (Decimal.Parse(lstResultadoPpto[i].noviembre) + Decimal.Parse(lstResultadoPptoArr[i].noviembre)).ToString();
                                lstResultadoPpto[i].diciembre = (Decimal.Parse(lstResultadoPpto[i].diciembre) + Decimal.Parse(lstResultadoPptoArr[i].diciembre)).ToString();
                                lstResultadoPpto[i].total = (Decimal.Parse(lstResultadoPpto[i].total) + Decimal.Parse(lstResultadoPptoArr[i].total)).ToString();
                            }
                        }
                    }
                    else lstResultadoPpto.AddRange(lstResultadoPptoArr);
                }

                resultado.Add("lstSumaCapturasGastos", lstResultadoPpto);
                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, datos);
            }
            catch (Exception ex)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetDetalleNivelDosPresupuestoGasto", ex, AccionEnum.CONSULTA, 0, 0);

                resultado.Add(MESSAGE, ex.Message);
                resultado.Add(SUCCESS, false);
            }


            return resultado;
        }

        public Dictionary<string, object> GetDetalleNivelCuatroPresupuestoGasto(CapPptoDTO objDTO, int gasto, int mes)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                var registroCentroCostoSIGOPLAN = _context.tblP_CC.FirstOrDefault(x => x.id == objDTO.idCC);
                tblAF_CtrlPptalOfCe_PptoAnual presupuesto = _context.tblAF_CtrlPptalOfCe_PptoAnual.Where(w => w.registroActivo && w.autorizado && w.anio == objDTO.anio && w.idCC == objDTO.idCC).FirstOrDefault();
                var lstGastos = new List<CapPptoDTO>();

                #region VALIDACIONES
                if (objDTO.anio > 0 || objDTO.idCC > 0)
                {
                    if (objDTO.anio <= 0)
                        throw new Exception("Es necesario indicar un año.");

                    if (objDTO.idCC <= 0)
                        throw new Exception("Es necesario indicar un CC.");
                }
                #endregion

                #region SE VERIFICA SI EL DETALLE DEL PPTO (AÑO + CC) ESTE APROBADO
#if DEBUG
                int estatusPpto = _context.tblAF_CtrlPptalOfCe_PptoAnual.Where(w => w.anio == objDTO.anio && w.idCC == objDTO.idCC && w.autorizado).Count();
                if (estatusPpto <= 0)
                    throw new Exception("El presupuesto solicitado, no se encuentra autorizado.");
#else
                int estatusPpto = _context.tblAF_CtrlPptalOfCe_PptoAnual.Where(w => w.anio == objDTO.anio && w.idCC == objDTO.idCC && w.autorizado).Count();
                if (estatusPpto <= 0)
                    throw new Exception("El ppto solicitado, no se encuentra autorizado.");
#endif
                #endregion

                #region SE OBTIENE CAPTURAS (AÑO + CC)
                List<CapPptoDTO> lstCapturas = _context.Select<CapPptoDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    #region CONSULTA INCLUYENDO LAS ADITIVASs
                    consulta = @"
                                                SELECT
                                                    t1.id, t1.cc, t1.idAgrupacion, t1.idConcepto, t1.importeEnero, t1.importeFebrero, t1.importeMarzo, t1.importeAbril, t1.importeMayo, 
                                                    t1.importeJunio, t1.importeJulio, t1.importeAgosto, t1.importeSeptiembre, t1.importeOctubre, t1.importeNoviembre, 
                                                    t1.importeDiciembre, t1.importeTotal, t1.anio, t1.idResponsable, t2.nombre AS agrupacion, t3.concepto AS concepto,
                                                    t4.nombre + ' ' + t4.apellidoPaterno + ' ' + t4.apellidoMaterno AS responsable,
                                                    (SELECT SUM(ad.importeEnero) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeEneroAditiva,
                    	                            (SELECT SUM(ad.importeFebrero) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeFebreroAditiva,
                    	                            (SELECT SUM(ad.importeMarzo) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeMarzoAditiva,
                    	                            (SELECT SUM(ad.importeAbril) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeAbrilAditiva,
                    	                            (SELECT SUM(ad.importeMayo) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeMayoAditiva,
                    	                            (SELECT SUM(ad.importeJunio) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeJunioAditiva,
                    	                            (SELECT SUM(ad.importeJulio) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeJulioAditiva,
                    	                            (SELECT SUM(ad.importeAgosto) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeAgostoAditiva,
                    	                            (SELECT SUM(ad.importeSeptiembre) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeSeptiembreAditiva,
                    	                            (SELECT SUM(ad.importeOctubre) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeOctubreAditiva,
                    	                            (SELECT SUM(ad.importeNoviembre) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeNoviembreAditiva,
                    	                            (SELECT SUM(ad.importeDiciembre) FROM tblAF_CtrlAditiva ad WHERE ad.registroActivo = 1 AND ad.capPptosId = t1.id AND autorizado = 1) AS importeDiciembreAditiva
                                                FROM tblAF_CtrlPptalOfCe_CapPptos AS t1
                    			                    INNER JOIN tblAF_CtrllPptalOfCe_CatAgrupaciones AS t2 ON t2.id = t1.idAgrupacion
                    			                    INNER JOIN tblAF_CtrlPptalOfCe_CatConceptos AS t3 ON t3.id = t1.idConcepto
                    			                    INNER JOIN tblP_Usuario AS t4 ON t4.id = t1.idResponsable
                    				            WHERE t1.registroActivo = @registroActivo AND t1.cc = @cc AND t1.anio = @anio",
                    #endregion
                    parametros = new { registroActivo = true, cc = objDTO.idCC, anio = objDTO.anio }
                }).ToList();
                #endregion

                #region SE OBTIENE LISTADO DE AGRUPACIONES
                List<tblAF_CtrllPptalOfCe_CatAgrupaciones> lstAgrupaciones = _context.tblAF_CtrllPptalOfCe_CatAgrupaciones.Where(w => w.registroActivo).OrderBy(o => o.nombre).ToList();
                #endregion

                #region SE OBTIENE LISTADO DE CONCEPTOS
                List<tblAF_CtrlPptalOfCe_CatConceptos> lstConceptos = _context.tblAF_CtrlPptalOfCe_CatConceptos.Where(w => w.registroActivo).OrderBy(o => o.concepto).ToList();

                string cc = presupuesto.idCC.ToString();

                var idConceptos = _context.tblAF_CtrlPptalOfCe_CapPptos
                    .Where(x =>
                        x.cc == cc &&
                        x.anio == presupuesto.anio &&
                        x.registroActivo).Select(x => x.idConcepto).Distinct().ToList();
                #endregion

                List<CapPptoDTO> lstSumaCapturas = new List<CapPptoDTO>();
                CapPptoDTO obj = new CapPptoDTO();

                var lstConceptosID = lstConceptos.Select(cx => cx.idConcepto).ToList();

                var where_cuentas_string = "";
                var listaCuentasTotal = _context.tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas.Where(x => x.registroActivo && lstConceptosID.Contains(x.idConcepto)).ToList();

                foreach (var cuenta in listaCuentasTotal)
                {
                    where_cuentas_string += string.Format(@"(cta = {0} AND scta = {1} AND sscta = {2})", cuenta.cta, cuenta.scta, cuenta.sscta);

                    if (cuenta != listaCuentasTotal.Last())
                    {
                        where_cuentas_string += " OR ";
                    }
                }

                if (where_cuentas_string != "")
                {
                    where_cuentas_string = " AND (" + where_cuentas_string + ")";
                }

                List<sc_movpolDTO> polizasTotal = new List<sc_movpolDTO>();
                if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                {
                    polizasTotal = _contextEnkontrol.Select<sc_movpolDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                    {
                        consulta = string.Format(@"SELECT * FROM sc_movpol WHERE year = ? AND cc = ? {0}", where_cuentas_string),
                        parametros = new List<OdbcParameterDTO>() {
                            new OdbcParameterDTO() { nombre = "year", tipo = OdbcType.Numeric, valor = objDTO.anio },
                            new OdbcParameterDTO() { nombre = "cc", tipo = OdbcType.VarChar, valor = registroCentroCostoSIGOPLAN.cc }
                        }
                    });
                    polizasTotal.AddRange(_contextEnkontrol.Select<sc_movpolDTO>(EnkontrolAmbienteEnum.ProdGCPLAN, new OdbcConsultaDTO()
                    {
                        consulta = string.Format(@"SELECT * FROM sc_movpol WHERE year = ? AND cc = ? {0}", where_cuentas_string),
                        parametros = new List<OdbcParameterDTO>() {
                            new OdbcParameterDTO() { nombre = "year", tipo = OdbcType.Numeric, valor = objDTO.anio },
                            new OdbcParameterDTO() { nombre = "cc", tipo = OdbcType.VarChar, valor = registroCentroCostoSIGOPLAN.cc }
                        }
                    }));
                }
                else
                {
                    polizasTotal = _contextEnkontrol.Select<sc_movpolDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                    {
                        consulta = string.Format(@"SELECT * FROM sc_movpol WHERE year = ? AND cc = ? AND area = ? AND cuenta_oc = ? {0}", where_cuentas_string),
                        parametros = new List<OdbcParameterDTO>() {
                            new OdbcParameterDTO() { nombre = "year", tipo = OdbcType.Numeric, valor = objDTO.anio },
                            new OdbcParameterDTO() { nombre = "cc", tipo = OdbcType.VarChar, valor = registroCentroCostoSIGOPLAN.cc },
                            new OdbcParameterDTO() { nombre = "area", tipo = OdbcType.Numeric, valor = registroCentroCostoSIGOPLAN.area },
                            new OdbcParameterDTO() { nombre = "cuenta_oc", tipo = OdbcType.Numeric, valor = registroCentroCostoSIGOPLAN.cuenta }
                        }
                    });
                }

                foreach (var item in lstConceptos)
                {
                    obj = new CapPptoDTO();
                    obj = new CapPptoDTO();
                    obj.cc = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Select(s => s.cc).FirstOrDefault();
                    obj.idAgrupacion = lstAgrupaciones.Where(w => w.id == item.idAgrupacion).Select(s => s.id).FirstOrDefault();
                    obj.idConcepto = item.id;
                    obj.agrupacion = lstAgrupaciones.Where(w => w.id == item.idAgrupacion).Select(s => s.nombre).FirstOrDefault();
                    obj.concepto = item.concepto;
                    #region SUMATORIA CON ADITIVIA
                    obj.importeEnero = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeEnero + s.importeEneroAditiva);
                    obj.importeFebrero = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeFebrero + s.importeFebreroAditiva);
                    obj.importeMarzo = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeMarzo + s.importeMarzoAditiva);
                    obj.importeAbril = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeAbril + s.importeAbrilAditiva);
                    obj.importeMayo = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeMayo + s.importeMayoAditiva);
                    obj.importeJunio = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeJunio + s.importeJunioAditiva);
                    obj.importeJulio = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeJulio + s.importeJulioAditiva);
                    obj.importeAgosto = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeAgosto + s.importeAgostoAditiva);
                    obj.importeSeptiembre = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeSeptiembre + s.importeSeptiembreAditiva);
                    obj.importeOctubre = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeOctubre + s.importeOctubreAditiva);
                    obj.importeNoviembre = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeNoviembre + s.importeNoviembreAditiva);
                    obj.importeDiciembre = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Sum(s => s.importeDiciembre + s.importeDiciembreAditiva);
                    #endregion
                    obj.anio = lstCapturas.Where(w => w.idAgrupacion == item.idAgrupacion && w.idConcepto == item.id).Select(s => s.anio).FirstOrDefault();
                    obj.importeTotalConcepto = obj.importeEnero + obj.importeFebrero + obj.importeMarzo +
                                                obj.importeAbril + obj.importeMayo + obj.importeJunio +
                                                obj.importeJulio + obj.importeAgosto + obj.importeSeptiembre +
                                                obj.importeOctubre + obj.importeNoviembre + obj.importeDiciembre;
                    obj.esAgrupacion = false;

                    #region Enkontrol
                    #region String para la consulta de múltiples cta-scta-sscta
                    //var where_cuentas_string = "";
                    var listaCuentas = _context.tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas.Where(x => x.registroActivo && x.idConcepto == item.idConcepto).ToList();

                    //foreach (var cuenta in listaCuentas)
                    //{
                    //    where_cuentas_string += string.Format(@"(cta = {0} AND scta = {1} AND sscta = {2})", cuenta.cta, cuenta.scta, cuenta.sscta);

                    //    if (cuenta != listaCuentas.Last())
                    //    {
                    //        where_cuentas_string += " OR ";
                    //    }
                    //}

                    //if (where_cuentas_string != "")
                    //{
                    //    where_cuentas_string = " AND (" + where_cuentas_string + ")";
                    //}
                    #endregion

                    List<CapPptoDTO> polizas = new List<CapPptoDTO>();

                    foreach (var cuenta in listaCuentas)
                    {
                        var auxPolizas = polizasTotal.Where(x => x.cta == cuenta.cta && x.scta == cuenta.scta && x.sscta == cuenta.sscta).Select(x => new CapPptoDTO
                        {
                            importeContEnero = x.mes == 1 ? x.monto : 0,
                            importeContFebrero = x.mes == 2 ? x.monto : 0,
                            importeContMarzo = x.mes == 3 ? x.monto : 0,
                            importeContAbril = x.mes == 4 ? x.monto : 0,
                            importeContMayo = x.mes == 5 ? x.monto : 0,
                            importeContJunio = x.mes == 6 ? x.monto : 0,
                            importeContJulio = x.mes == 7 ? x.monto : 0,
                            importeContAgosto = x.mes == 8 ? x.monto : 0,
                            importeContSeptiembre = x.mes == 9 ? x.monto : 0,
                            importeContOctubre = x.mes == 10 ? x.monto : 0,
                            importeContNoviembre = x.mes == 11 ? x.monto : 0,
                            importeContDiciembre = x.mes == 12 ? x.monto : 0,
                            importeContTotalConcepto = x.monto,
                        });
                        polizas.AddRange(auxPolizas);
                    }

                    //                    var polizas = _contextEnkontrol.Select<CapPptoDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                    //                    {
                    //                        consulta = string.Format(@"
                    //                            SELECT
                    //                                SUM(CASE WHEN mes = 1 THEN monto ELSE 0 END) AS importeContEnero,
                    //                                SUM(CASE WHEN mes = 2 THEN monto ELSE 0 END) AS importeContFebrero,
                    //                                SUM(CASE WHEN mes = 3 THEN monto ELSE 0 END) AS importeContMarzo,
                    //                                SUM(CASE WHEN mes = 4 THEN monto ELSE 0 END) AS importeContAbril,
                    //                                SUM(CASE WHEN mes = 5 THEN monto ELSE 0 END) AS importeContMayo,
                    //                                SUM(CASE WHEN mes = 6 THEN monto ELSE 0 END) AS importeContJunio,
                    //                                SUM(CASE WHEN mes = 7 THEN monto ELSE 0 END) AS importeContJulio,
                    //                                SUM(CASE WHEN mes = 8 THEN monto ELSE 0 END) AS importeContAgosto,
                    //                                SUM(CASE WHEN mes = 9 THEN monto ELSE 0 END) AS importeContSeptiembre,
                    //                                SUM(CASE WHEN mes = 10 THEN monto ELSE 0 END) AS importeContOctubre,
                    //                                SUM(CASE WHEN mes = 11 THEN monto ELSE 0 END) AS importeContNoviembre,
                    //                                SUM(CASE WHEN mes = 12 THEN monto ELSE 0 END) AS importeContDiciembre,
                    //                                SUM(monto) AS importeContTotalConcepto
                    //                            FROM sc_movpol
                    //                            WHERE year = ? AND cc = ? {0}", where_cuentas_string),
                    //                        parametros = new List<OdbcParameterDTO>() {
                    //                            new OdbcParameterDTO() { nombre = "year", tipo = OdbcType.Numeric, valor = objDTO.anio },
                    //                            new OdbcParameterDTO() { nombre = "cc", tipo = OdbcType.VarChar, valor = registroCentroCostoSIGOPLAN.cc }
                    //                        }
                    //                    });


                    if (polizas.Count() > 0)
                    {
                        obj.importeContEnero = polizas.Sum(x => x.importeContEnero);
                        obj.importeContFebrero = polizas.Sum(x => x.importeContFebrero);
                        obj.importeContMarzo = polizas.Sum(x => x.importeContMarzo);
                        obj.importeContAbril = polizas.Sum(x => x.importeContAbril);
                        obj.importeContMayo = polizas.Sum(x => x.importeContMayo);
                        obj.importeContJunio = polizas.Sum(x => x.importeContJunio);
                        obj.importeContJulio = polizas.Sum(x => x.importeContJulio);
                        obj.importeContAgosto = polizas.Sum(x => x.importeContAgosto);
                        obj.importeContSeptiembre = polizas.Sum(x => x.importeContSeptiembre);
                        obj.importeContOctubre = polizas.Sum(x => x.importeContOctubre);
                        obj.importeContNoviembre = polizas.Sum(x => x.importeContNoviembre);
                        obj.importeContDiciembre = polizas.Sum(x => x.importeContDiciembre);
                        obj.importeContTotalConcepto = polizas.Sum(x => x.importeContTotalConcepto);
                    }

                    #endregion

                    if (idConceptos.Contains(item.id))
                    {
                        lstSumaCapturas.Add(obj);
                    }
                }

                foreach (var renglon in lstSumaCapturas)
                {
                    if (renglon.esAgrupacion)
                    {
                        var idAgrupacion = renglon.idAgrupacion;
                        var renglonesDetalle = lstSumaCapturas.Where(x => !x.esAgrupacion && x.idAgrupacion == idAgrupacion).ToList();

                        renglon.importeEnero = renglonesDetalle.Sum(x => x.importeEnero);
                        renglon.importeFebrero = renglonesDetalle.Sum(x => x.importeFebrero);
                        renglon.importeMarzo = renglonesDetalle.Sum(x => x.importeMarzo);
                        renglon.importeAbril = renglonesDetalle.Sum(x => x.importeAbril);
                        renglon.importeMayo = renglonesDetalle.Sum(x => x.importeMayo);
                        renglon.importeJunio = renglonesDetalle.Sum(x => x.importeJunio);
                        renglon.importeJulio = renglonesDetalle.Sum(x => x.importeJulio);
                        renglon.importeAgosto = renglonesDetalle.Sum(x => x.importeAgosto);
                        renglon.importeSeptiembre = renglonesDetalle.Sum(x => x.importeSeptiembre);
                        renglon.importeOctubre = renglonesDetalle.Sum(x => x.importeOctubre);
                        renglon.importeNoviembre = renglonesDetalle.Sum(x => x.importeNoviembre);
                        renglon.importeDiciembre = renglonesDetalle.Sum(x => x.importeDiciembre);
                        renglon.importeTotalConcepto = renglonesDetalle.Sum(x => x.importeTotalConcepto);

                        renglon.importeContEnero = renglonesDetalle.Sum(x => x.importeContEnero);
                        renglon.importeContFebrero = renglonesDetalle.Sum(x => x.importeContFebrero);
                        renglon.importeContMarzo = renglonesDetalle.Sum(x => x.importeContMarzo);
                        renglon.importeContAbril = renglonesDetalle.Sum(x => x.importeContAbril);
                        renglon.importeContMayo = renglonesDetalle.Sum(x => x.importeContMayo);
                        renglon.importeContJunio = renglonesDetalle.Sum(x => x.importeContJunio);
                        renglon.importeContJulio = renglonesDetalle.Sum(x => x.importeContJulio);
                        renglon.importeContAgosto = renglonesDetalle.Sum(x => x.importeContAgosto);
                        renglon.importeContSeptiembre = renglonesDetalle.Sum(x => x.importeContSeptiembre);
                        renglon.importeContOctubre = renglonesDetalle.Sum(x => x.importeContOctubre);
                        renglon.importeContNoviembre = renglonesDetalle.Sum(x => x.importeContNoviembre);
                        renglon.importeContDiciembre = renglonesDetalle.Sum(x => x.importeContDiciembre);
                        renglon.importeContTotalConcepto = renglonesDetalle.Sum(x => x.importeContTotalConcepto);
                    }
                }

                obj = new CapPptoDTO();
                obj.concepto = "TOTAL";

                #region ADITIVA
                obj.importeEnero = lstCapturas.Sum(s => s.importeEnero + s.importeEneroAditiva);
                obj.importeFebrero = lstCapturas.Sum(s => s.importeFebrero + s.importeFebreroAditiva);
                obj.importeMarzo = lstCapturas.Sum(s => s.importeMarzo + s.importeMarzoAditiva);
                obj.importeAbril = lstCapturas.Sum(s => s.importeAbril + s.importeAbrilAditiva);
                obj.importeMayo = lstCapturas.Sum(s => s.importeMayo + s.importeMayoAditiva);
                obj.importeJunio = lstCapturas.Sum(s => s.importeJunio + s.importeJunioAditiva);
                obj.importeJulio = lstCapturas.Sum(s => s.importeJulio + s.importeJulioAditiva);
                obj.importeAgosto = lstCapturas.Sum(s => s.importeAgosto + s.importeAgostoAditiva);
                obj.importeSeptiembre = lstCapturas.Sum(s => s.importeSeptiembre + s.importeSeptiembreAditiva);
                obj.importeOctubre = lstCapturas.Sum(s => s.importeOctubre + s.importeOctubreAditiva);
                obj.importeNoviembre = lstCapturas.Sum(s => s.importeNoviembre + s.importeNoviembreAditiva);
                obj.importeDiciembre = lstCapturas.Sum(s => s.importeDiciembre + s.importeDiciembreAditiva);
                #endregion
                obj.importeTotalConcepto = obj.importeEnero + obj.importeFebrero + obj.importeMarzo +
                                            obj.importeAbril + obj.importeMayo + obj.importeJunio +
                                            obj.importeJulio + obj.importeAgosto + obj.importeSeptiembre +
                                            obj.importeOctubre + obj.importeNoviembre + obj.importeDiciembre;

                obj.importeContEnero = lstSumaCapturas.Sum(s => s.importeContEnero);
                obj.importeContFebrero = lstSumaCapturas.Sum(s => s.importeContFebrero);
                obj.importeContMarzo = lstSumaCapturas.Sum(s => s.importeContMarzo);
                obj.importeContAbril = lstSumaCapturas.Sum(s => s.importeContAbril);
                obj.importeContMayo = lstSumaCapturas.Sum(s => s.importeContMayo);
                obj.importeContJunio = lstSumaCapturas.Sum(s => s.importeContJunio);
                obj.importeContJulio = lstSumaCapturas.Sum(s => s.importeContJulio);
                obj.importeContAgosto = lstSumaCapturas.Sum(s => s.importeContAgosto);
                obj.importeContSeptiembre = lstSumaCapturas.Sum(s => s.importeContSeptiembre);
                obj.importeContOctubre = lstSumaCapturas.Sum(s => s.importeContOctubre);
                obj.importeContNoviembre = lstSumaCapturas.Sum(s => s.importeContNoviembre);
                obj.importeContDiciembre = lstSumaCapturas.Sum(s => s.importeContDiciembre);
                obj.importeContTotalConcepto =
                    obj.importeContEnero + obj.importeContFebrero + obj.importeContMarzo +
                    obj.importeContAbril + obj.importeContMayo + obj.importeContJunio +
                    obj.importeContJulio + obj.importeContAgosto + obj.importeContSeptiembre +
                    obj.importeContOctubre + obj.importeContNoviembre + obj.importeContDiciembre;

                obj.esAgrupacion = true;
                obj.idAgrupacion = 9999;
                lstSumaCapturas.Add(obj);


                var lstResultado = obtenerTablaPorNivelMes(lstSumaCapturas, gasto, mes);


                resultado.Add("lstSumaCapturas", lstResultado);

                #region GFX Presupuesto Gasto
                string[] meses = {
                                     "Enero",
                                     "Febrero",
                                     "Marzo",
                                     "Abril",
                                     "Mayo",
                                     "Junio",
                                     "Julio",
                                     "Agosto",
                                     "Septiembre",
                                     "Octubre",
                                     "Noviembre",
                                     "Diciembre"
                                 };

                var graficaPresupuestoGasto = new GraficaDTO();

                for (int i = 0; i < meses.Length; i++)
                {
                    //var totalMesPresupuesto = Convert.ToDecimal(lstSumaCapturas.Last().GetType().GetProperty("importe" + meses[i]).GetValue(lstSumaCapturas.Last(), null));
                    decimal totalMesPresupuesto = 0;
                    decimal totalMesGasto = 0;
                    foreach (var auxSumaCapturas in lstSumaCapturas)
                    {
                        totalMesPresupuesto += Convert.ToDecimal(auxSumaCapturas.GetType().GetProperty("importe" + meses[i]).GetValue(auxSumaCapturas, null));
                        totalMesGasto += Convert.ToDecimal(auxSumaCapturas.GetType().GetProperty("importeCont" + meses[i]).GetValue(auxSumaCapturas, null));
                    }

                    //var totalMesGasto = Convert.ToDecimal(lstSumaCapturas.Last().GetType().GetProperty("importeCont" + meses[i]).GetValue(lstSumaCapturas.Last(), null));

                    graficaPresupuestoGasto.categorias.Add(meses[i].ToUpper());
                    graficaPresupuestoGasto.serie1Descripcion = "Presupuesto";
                    graficaPresupuestoGasto.serie1.Add(totalMesPresupuesto);

                    graficaPresupuestoGasto.serie2Descripcion = "Gasto";
                    graficaPresupuestoGasto.serie2.Add(totalMesGasto);
                }

                resultado.Add("graficaPresupuestoGasto", graficaPresupuestoGasto);
                #endregion


                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetDetalleNivelCuatroPresupuestoGasto", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> GetDetalleAgrupadorConcepto(ConceptoDTO objDTO)
        {
            resultado.Clear();
            List<MovPolControlPptalDTO> datosGenerales = (List<MovPolControlPptalDTO>)session["ControlPresupuestalDatos"];
            try
            {
                using (var _ctxArre = new MainContext(objDTO.empresa == 1 ? EmpresaEnum.Construplan : EmpresaEnum.Arrendadora))
                {
                    var presupuestoVsGastoConceptos = new List<PresupuestoVsGastoDTO>();

                    string idCCString = Convert.ToString(objDTO.idCC);

                    var _cc = _ctxArre.tblP_CC.First(x => x.id == objDTO.idCC);

                    var capPptos = _ctxArre.tblAF_CtrlPptalOfCe_CapPptos
                        .Where(x =>
                            x.cc == idCCString &&
                            x.anio == objDTO.year &&
                            x.registroActivo).ToList();

                    var capPptosIds = capPptos.Select(x => x.id).ToList();
                    var idConceptosPptos = capPptos.Select(x => x.idConcepto).ToList();

                    var aditivas = _ctxArre.tblAF_CtrlAditiva
                        .Where(x =>
                            capPptosIds.Contains(x.capPptosId) &&
                            x.autorizado &&
                            x.registroActivo).ToList();

                    var catConceptos = _ctxArre.tblAF_CtrlPptalOfCe_CatConceptos.Where(x => idConceptosPptos.Contains(x.id)).ToList();

                    var idConceptos = catConceptos.Select(x => x.idConcepto).ToList();

                    var cuentas = _ctxArre.tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas
                        .Where(x =>
                            idConceptos.Contains(x.idConcepto) &&
                            x.registroActivo
                        ).ToList();

                    var catalogoCuentas = new List<string>();

                    string whereGeneral = "";

                    var agrupaciones = capPptos.GroupBy(x => x.idAgrupacion).OrderBy(x => x.Key);
                    foreach (var gbAgrupacion in agrupaciones)
                    {
                        var infoConceptos = new List<PresupuestoVsGastoDTO>();

                        foreach (var conceptoPptos in gbAgrupacion)
                        {
                            var catConcepto = catConceptos.First(x => x.id == conceptoPptos.idConcepto);
                            var cuentasConcepto = cuentas.Where(x => x.idConcepto == catConcepto.idConcepto).ToList();



                            foreach (var cuenta in cuentasConcepto)
                            {
                                catalogoCuentas.Add(cuenta.cta + "-" + cuenta.scta + "-" + cuenta.sscta);

                                whereGeneral += "(cta = " + cuenta.cta + " AND scta = " + cuenta.scta + " AND sscta = " + cuenta.sscta + ") OR ";
                                if (objDTO.empresa == 2 && !objDTO.costosAdministrativos) whereGeneral += "(cta = 5000 AND scta = " + cuenta.scta + " AND sscta = " + cuenta.sscta + ") OR ";

                            }
                        }
                    }
                    whereGeneral = whereGeneral.Substring(0, whereGeneral.Length - 4);

                    if (string.IsNullOrEmpty(whereGeneral))
                    {
                        whereGeneral = "1 = 2";
                    }

                    var query_movpol = new OdbcConsultaDTO();
                    //if (objDTO.empresa == 1)
                    //{

                    //    var consulta_ppal = "";
                    //    List<string> mesesConsulta = new List<string> { "ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic" };

                    //    for (int i = 1; i <= objDTO.mes; i++)
                    //    {
                    //        if (i == objDTO.mes)
                    //        {
                    //            consulta_ppal += string.Format(
                    //                    @"SELECT mes, sum(monto) AS suma, cta, scta, sscta  FROM sc_movpol WHERE year = ? AND cc = ? AND mes = " + i.ToString() + " AND ({0}) GROUP BY mes, cta, scta, sscta"
                    //                    , whereGeneral);
                    //        }
                    //        else
                    //        {
                    //            consulta_ppal += string.Format(
                    //                @"SELECT " + i.ToString() + " AS mes, SUM(" + mesesConsulta[i - 1] + "cargos + " + mesesConsulta[i - 1] + "abonos) AS suma, cta, scta, sscta FROM sc_salcont_cc WHERE year = ? AND cc = ? AND ({0}) GROUP BY cta, scta, sscta UNION "
                    //                , whereGeneral);
                    //        }
                    //        query_movpol.parametros.Add(new OdbcParameterDTO
                    //        {
                    //            nombre = "year",
                    //            tipo = OdbcType.Int,
                    //            valor = objDTO.year
                    //        });
                    //        query_movpol.parametros.Add(new OdbcParameterDTO
                    //        {
                    //            nombre = "cc",
                    //            tipo = OdbcType.NVarChar,
                    //            valor = _cc.cc
                    //        });
                    //    }
                    //    query_movpol.consulta = consulta_ppal;
                    //}
                    //else
                    //{
                    //    query_movpol.consulta = string.Format(
                    //        @"SELECT mes, sum(monto) AS suma, cta, scta, sscta FROM sc_movpol WHERE year = ? AND mes <= ? AND area = ? AND cuenta_oc = ? AND ({0}) GROUP BY mes, cta, scta, sscta", whereGeneral);
                    //    query_movpol.parametros.Add(new OdbcParameterDTO
                    //    {
                    //        nombre = "year",
                    //        tipo = OdbcType.Int,
                    //        valor = objDTO.year
                    //    });
                    //    query_movpol.parametros.Add(new OdbcParameterDTO
                    //    {
                    //        nombre = "mes",
                    //        tipo = OdbcType.Int,
                    //        valor = objDTO.mes
                    //    });
                    //    query_movpol.parametros.Add(new OdbcParameterDTO
                    //    {
                    //        nombre = "area",
                    //        tipo = OdbcType.Int,
                    //        valor = _cc.area
                    //    });
                    //    query_movpol.parametros.Add(new OdbcParameterDTO
                    //    {
                    //        nombre = "cuenta_oc",
                    //        tipo = OdbcType.Int,
                    //        valor = _cc.cuenta
                    //    });
                    //}
                    //var movpolGeneral = _contextEnkontrol.Select<SumaDTO>((objDTO.empresa == 1 ? EnkontrolAmbienteEnum.ProdCPLAN : EnkontrolAmbienteEnum.ProdARREND), query_movpol);

                    var movpolGeneral = objDTO.empresa == 1 ?
                        datosGenerales.Where(x => x.year == objDTO.year && x.empresa == 1 && x.cc == _cc.cc).GroupBy(x => new { mes = x.mes, cta = x.cta, scta = x.scta, sscta = x.sscta }).Select(x => new SumaDTO {
                            mes = x.Key.mes,
                            cta = x.Key.cta,
                            scta = x.Key.scta,
                            sscta = x.Key.sscta,
                            suma = x.Sum(y => y.monto)
                        }).ToList() :
                        datosGenerales.Where(x => x.year == objDTO.year && x.empresa == 2 && x.area == _cc.area && x.cuenta_oc == _cc.cuenta).GroupBy(x => new { mes = x.mes, cta = x.cta, scta = x.scta, sscta = x.sscta }).Select(x => new SumaDTO
                        {
                            mes = x.Key.mes,
                            cta = x.Key.cta,
                            scta = x.Key.scta,
                            sscta = x.Key.sscta,
                            suma = x.Sum(y => y.monto)
                        }).ToList();


                    foreach (var gbAgrupacion in capPptos.GroupBy(x => x.idAgrupacion).OrderBy(x => x.Key))
                    {
                        var infoConceptos = new List<PresupuestoVsGastoDTO>();

                        foreach (var conceptoPptos in gbAgrupacion)
                        {
                            var catConcepto = catConceptos.First(x => x.id == conceptoPptos.idConcepto);
                            var cuentasConcepto = cuentas.Where(x => x.idConcepto == catConcepto.idConcepto).ToList();

                            List<SumaDTO> movpol = new List<SumaDTO>();
                            foreach (var cuenta in cuentasConcepto)
                            {
                                var auxMovPol = movpolGeneral.Where(x => x.cta == cuenta.cta && cuenta.scta == x.scta && x.sscta == cuenta.sscta).ToList();
                                if (auxMovPol == null)
                                    auxMovPol = movpolGeneral.Where(x => x.cta == cuenta.cta && x.scta == cuenta.scta && x.sscta == cuenta.sscta).ToList();

                                movpol.AddRange(auxMovPol);
                            }
                            var conceptoPvsG = new PresupuestoVsGastoDTO();
                            conceptoPvsG.idCC = objDTO.idCC;
                            conceptoPvsG.year = objDTO.year;
                            conceptoPvsG.mes = objDTO.mes;
                            conceptoPvsG.idAgrupador = conceptoPptos.idAgrupacion;
                            conceptoPvsG.idConcepto = catConcepto.idConcepto;
                            conceptoPvsG.descripcion = conceptoPptos.concepto.concepto;
                            conceptoPvsG.presupuestoMensual = Convert.ToDecimal(conceptoPptos.GetType().GetProperty("importe" + meses[objDTO.mes - 1]).GetValue(conceptoPptos, null));
                            var aditivasPpto = aditivas.Where(x => x.capPptosId == conceptoPptos.id && x.registroActivo).ToList();
                            conceptoPvsG.presupuestoMensual += aditivasPpto.Sum(x => Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[objDTO.mes - 1]).GetValue(x, null)));
                            conceptoPvsG.gastoMensual = movpol.Where(x => x.mes == objDTO.mes).Sum(x => x.suma);
                            for (int i = 0; i < objDTO.mes; i++)
                            {
                                conceptoPvsG.presupuestoAcumulado += Convert.ToDecimal(conceptoPptos.GetType().GetProperty("importe" + meses[i]).GetValue(conceptoPptos, null));
                                conceptoPvsG.presupuestoAcumulado += aditivasPpto.Sum(x => Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[i]).GetValue(x, null)));
                            }
                            conceptoPvsG.gastoAcumulado += movpol.Sum(x => x.suma);
                            conceptoPvsG.cumplimientoMensual = (conceptoPvsG.gastoMensual * 100) / (conceptoPvsG.presupuestoMensual != 0 ? conceptoPvsG.presupuestoMensual : 100);
                            conceptoPvsG.cumplimientoAcumulado = (conceptoPvsG.gastoAcumulado * 100) / (conceptoPvsG.presupuestoAcumulado != 0 ? conceptoPvsG.presupuestoAcumulado : 100);
                            infoConceptos.Add(conceptoPvsG);
                        }

                        var agrupacionPvsG = new PresupuestoVsGastoDTO();
                        agrupacionPvsG.idCC = objDTO.idCC;
                        agrupacionPvsG.year = objDTO.year;
                        agrupacionPvsG.mes = objDTO.mes;
                        agrupacionPvsG.idAgrupador = gbAgrupacion.Key;
                        agrupacionPvsG.esAgrupador = true;
                        agrupacionPvsG.descripcion = gbAgrupacion.First().agrupacion.nombre;
                        agrupacionPvsG.presupuestoMensual = infoConceptos.Sum(x => x.presupuestoMensual);
                        agrupacionPvsG.presupuestoAcumulado = infoConceptos.Sum(x => x.presupuestoAcumulado);
                        agrupacionPvsG.gastoMensual = infoConceptos.Sum(x => x.gastoMensual);
                        agrupacionPvsG.gastoAcumulado = infoConceptos.Sum(x => x.gastoAcumulado);
                        agrupacionPvsG.cumplimientoMensual = (agrupacionPvsG.gastoMensual * 100) / (agrupacionPvsG.presupuestoMensual != 0 ? agrupacionPvsG.presupuestoMensual : 100);
                        agrupacionPvsG.cumplimientoAcumulado = (agrupacionPvsG.gastoAcumulado * 100) / (agrupacionPvsG.presupuestoAcumulado != 0 ? agrupacionPvsG.presupuestoAcumulado : 100);

                        presupuestoVsGastoConceptos.Add(agrupacionPvsG);
                        presupuestoVsGastoConceptos.AddRange(infoConceptos);
                    }

                    var query_sinCatalogar = new OdbcConsultaDTO();
                    query_sinCatalogar.consulta = string.Format("SELECT cta, scta, sscta FROM catcta WHERE cta in (5000, 5280) AND scta != 0 AND sscta != 0 AND scta != 23");
                    var cuentasEnkontrol = _contextEnkontrol.Select<tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas>((objDTO.empresa == 1 ? EnkontrolAmbienteEnum.ProdCPLAN : EnkontrolAmbienteEnum.ProdARREND), query_sinCatalogar);

                    cuentasEnkontrol.RemoveAll(x => cuentas.Any(y => y.cta == x.cta && y.scta == x.scta && y.sscta == x.sscta));

                    //string where_movpolSinCatalogar = "";
                    //if (cuentasEnkontrol.Count == 0)
                    //{
                    //    where_movpolSinCatalogar = "1 = 2";
                    //}
                    //else
                    //{
                    //    foreach (var item in cuentasEnkontrol)
                    //    {
                    //        where_movpolSinCatalogar += string.Format("(cta = " + item.cta + " AND scta = " + item.scta + " AND sscta = " + item.sscta + ") OR ");

                    //    }
                    //    where_movpolSinCatalogar = where_movpolSinCatalogar.Substring(0, where_movpolSinCatalogar.Length - 4);
                    //    //where_movpolSinCatalogar = string.Format("(CAST(cta as varchar(4)) + '-' + CAST(scta as varchar(4)) + '-' + CAST(sscta as varchar(4))) IN {0}", cuentasEnkontrol.Select(x => x.cuenta).ToList().ToParamInValue());
                    //}


//                    var query_movpolSinCatalogar = new OdbcConsultaDTO();
//                    if (objDTO.empresa == 1)
//                    {
//                        var consulta_ppal = "";

//                        List<string> mesesConsulta = new List<string> { "ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic" };

//                        for (int i = 1; i <= objDTO.mes; i++)
//                        {
//                            if (i == objDTO.mes)
//                            {
//                                consulta_ppal += string.Format(
//                                        @"SELECT mes, sum(monto) AS suma FROM sc_movpol WHERE year = ? AND cc = ? AND mes = " + i.ToString() + " AND ({0}) GROUP BY mes"
//                                        , where_movpolSinCatalogar);
//                            }
//                            else
//                            {
//                                consulta_ppal += string.Format(
//                                    @"SELECT " + i.ToString() + " AS mes, SUM(" + mesesConsulta[i - 1] + "cargos + " + mesesConsulta[i - 1] + "abonos) AS suma FROM sc_salcont_cc WHERE year = ? AND cc = ? AND ({0}) UNION "
//                                    , where_movpolSinCatalogar);
//                            }
//                            query_movpolSinCatalogar.parametros.Add(new OdbcParameterDTO
//                            {
//                                nombre = "year",
//                                tipo = OdbcType.Int,
//                                valor = objDTO.year
//                            });
//                            query_movpolSinCatalogar.parametros.Add(new OdbcParameterDTO
//                            {
//                                nombre = "cc",
//                                tipo = OdbcType.NVarChar,
//                                valor = _cc.cc
//                            });
//                        }
//                        query_movpolSinCatalogar.consulta = consulta_ppal;
//                    }
//                    else
//                    {
//                        query_movpolSinCatalogar.consulta = string.Format(
//                        @"SELECT
//                        mes,
//                        sum(monto) AS suma
//                    FROM
//                        sc_movpol
//                    WHERE
//                        year = ? AND
//                        mes <= ? AND
//                        area = ? AND
//                        cuenta_oc = ? AND
//                        {0}
//                    GROUP BY mes", where_movpolSinCatalogar);
//                        query_movpolSinCatalogar.parametros.Add(new OdbcParameterDTO
//                        {
//                            nombre = "year",
//                            tipo = OdbcType.Int,
//                            valor = objDTO.year
//                        });
//                        query_movpolSinCatalogar.parametros.Add(new OdbcParameterDTO
//                        {
//                            nombre = "mes",
//                            tipo = OdbcType.Int,
//                            valor = objDTO.mes
//                        });
//                        query_movpolSinCatalogar.parametros.Add(new OdbcParameterDTO
//                        {
//                            nombre = "area",
//                            tipo = OdbcType.Int,
//                            valor = _cc.area
//                        });
//                        query_movpolSinCatalogar.parametros.Add(new OdbcParameterDTO
//                        {
//                            nombre = "cuenta_oc",
//                            tipo = OdbcType.NVarChar,
//                            valor = _cc.cuenta
//                        });
//                    }

                    List<SumaDTO> montosGastosSinCatalogar = new List<SumaDTO>();
                    foreach (var cuenta in cuentasEnkontrol)
                    {
                        var auxMovPol = movpolGeneral.Where(x => x.cta == cuenta.cta && cuenta.scta == x.scta && x.sscta == cuenta.sscta).ToList();
                        if (auxMovPol == null)
                            auxMovPol = movpolGeneral.Where(x => x.cta == cuenta.cta && x.scta == cuenta.scta && x.sscta == cuenta.sscta).ToList();

                        montosGastosSinCatalogar.AddRange(auxMovPol);
                    }

                    //var montosGastosSinCatalogar = _contextEnkontrol.Select<SumaDTO>((objDTO.empresa == 1 ? EnkontrolAmbienteEnum.ProdCPLAN : EnkontrolAmbienteEnum.ProdARREND), query_movpolSinCatalogar);

                    var agrupacionSinCatalogar = new PresupuestoVsGastoDTO();
                    agrupacionSinCatalogar.idCC = objDTO.idCC;
                    agrupacionSinCatalogar.year = objDTO.year;
                    agrupacionSinCatalogar.mes = objDTO.mes;
                    agrupacionSinCatalogar.idAgrupador = 0;
                    agrupacionSinCatalogar.esAgrupador = true;
                    agrupacionSinCatalogar.descripcion = "SIN CATALOGAR";
                    agrupacionSinCatalogar.presupuestoMensual = 0;
                    agrupacionSinCatalogar.presupuestoAcumulado = 0;
                    agrupacionSinCatalogar.gastoMensual = montosGastosSinCatalogar.Where(x => x.mes == objDTO.mes).Sum(x => x.suma);
                    agrupacionSinCatalogar.gastoAcumulado = montosGastosSinCatalogar.Sum(x => x.suma);
                    agrupacionSinCatalogar.cumplimientoMensual = agrupacionSinCatalogar.gastoMensual;
                    agrupacionSinCatalogar.cumplimientoAcumulado = agrupacionSinCatalogar.gastoAcumulado;
                    presupuestoVsGastoConceptos.Add(agrupacionSinCatalogar);

                    var conceptoSinCatalogar = new PresupuestoVsGastoDTO();
                    conceptoSinCatalogar.idCC = objDTO.idCC;
                    conceptoSinCatalogar.year = objDTO.year;
                    conceptoSinCatalogar.mes = objDTO.mes;
                    conceptoSinCatalogar.idAgrupador = 0;
                    conceptoSinCatalogar.idConcepto = 0;
                    conceptoSinCatalogar.descripcion = "SIN CATALOGAR";
                    conceptoSinCatalogar.presupuestoMensual = 0;
                    conceptoSinCatalogar.presupuestoAcumulado = 0;
                    conceptoSinCatalogar.gastoMensual = agrupacionSinCatalogar.gastoMensual;
                    conceptoSinCatalogar.gastoAcumulado = agrupacionSinCatalogar.gastoAcumulado;
                    conceptoSinCatalogar.cumplimientoMensual = agrupacionSinCatalogar.cumplimientoMensual;
                    conceptoSinCatalogar.cumplimientoAcumulado = agrupacionSinCatalogar.cumplimientoAcumulado;
                    presupuestoVsGastoConceptos.Add(conceptoSinCatalogar);

                    var lstConceptosSinCatalogar = presupuestoVsGastoConceptos.Where(w => w.descripcion == "SIN CATALOGAR").ToList();
                    foreach (var item in lstConceptosSinCatalogar)
                    {
                        item.idConcepto = -1;
                    }

                    presupuestoVsGastoConceptos.ForEach(x => x.empresa = objDTO.empresa);

                    resultado.Add(SUCCESS, true);
                    resultado.Add(ITEMS, presupuestoVsGastoConceptos);
                }
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);
            }

            return resultado;
        }

        public Dictionary<string, object> GetDetalleAgrupadorConceptoCC(ConceptoDTO objDTO)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                List<MovPolControlPptalDTO> datosGenerales = (List<MovPolControlPptalDTO>)session["ControlPresupuestalDatos"];
                string strQuery_CP = string.Empty; 
                string strQuery_ARR = string.Empty;

                #region SE OBTIENE LOS PPTOS DE LOS CC SELECCIONADOS
                List<PresupuestoVsGastoDTO> lstPptos_CP = new List<PresupuestoVsGastoDTO>();
                List<PresupuestoVsGastoDTO> lstPptos_ARR = new List<PresupuestoVsGastoDTO>();

                #region CONSTRUPLAN
                if (objDTO.arrConstruplan != null)
                {
                    strQuery_CP = string.Format(@"SELECT t3.id AS idCaptura, t1.id AS agrupacionID, t2.idConcepto AS conceptoCuentaID, t1.nombre AS agrupacion, t2.id AS conceptoID, t2.concepto AS concepto, 
	                                                t3.importeEnero, t3.importeFebrero, t3.importeMarzo, t3.importeAbril, t3.importeMayo, t3.importeJunio, 
	                                                t3.importeJulio, t3.importeAgosto, t3.importeSeptiembre, t3.importeOctubre, t3.importeNoviembre, t3.importeDiciembre
		                                                FROM tblAF_CtrllPptalOfCe_CatAgrupaciones AS t1
		                                                INNER JOIN tblAF_CtrlPptalOfCe_CatConceptos AS t2 ON t1.id = t2.idAgrupacion
		                                                INNER JOIN tblAF_CtrlPptalOfCe_CapPptos AS t3 ON t1.id = t3.idAgrupacion AND t2.id = t3.idConcepto
			                                                WHERE t1.idCC IN ({0}) AND t1.registroActivo = 1 AND t2.registroActivo = 1 AND t3.registroActivo = 1", string.Join(",", objDTO.arrConstruplan));
                    lstPptos_CP = _context.Select<PresupuestoVsGastoDTO>(new DapperDTO
                    {
                        baseDatos = MainContextEnum.Construplan,
                        consulta = strQuery_CP
                    }).ToList();
                }
                #endregion

                #region ARRENDADORA
                if (objDTO.arrArrendadora != null)
                {
                    strQuery_ARR = string.Format(@"SELECT t3.id AS idCaptura, t1.id AS agrupacionID, t2.idConcepto AS conceptoCuentaID, t1.nombre AS agrupacion, t2.id AS conceptoID, t2.concepto AS concepto, 
	                                                t3.importeEnero, t3.importeFebrero, t3.importeMarzo, t3.importeAbril, t3.importeMayo, t3.importeJunio, 
	                                                t3.importeJulio, t3.importeAgosto, t3.importeSeptiembre, t3.importeOctubre, t3.importeNoviembre, t3.importeDiciembre
		                                                FROM tblAF_CtrllPptalOfCe_CatAgrupaciones AS t1
		                                                INNER JOIN tblAF_CtrlPptalOfCe_CatConceptos AS t2 ON t1.id = t2.idAgrupacion
		                                                INNER JOIN tblAF_CtrlPptalOfCe_CapPptos AS t3 ON t1.id = t3.idAgrupacion AND t2.id = t3.idConcepto
			                                                WHERE t1.idCC IN ({0}) AND t1.registroActivo = 1 AND t2.registroActivo = 1 AND t3.registroActivo = 1", string.Join(",", objDTO.arrArrendadora));
                    lstPptos_ARR = _context.Select<PresupuestoVsGastoDTO>(new DapperDTO
                    {
                        baseDatos = MainContextEnum.Arrendadora,
                        consulta = strQuery_ARR
                    }).ToList();
                }
                #endregion

                // SE OBTIENE EL MES EN STRING
                objDTO.nombreMes = GetNombreMes(objDTO.idMes);
                #endregion

                #region SE OBTIENE LOS MONTOS DE LAS CUENTAS EN BASE A LOS CC SELECCIONADOS || EK
                List<tblP_CC> lstCC_CP = _context.tblP_CC.Where(w => w.estatus).ToList();
                List<tblP_CC> lstCC_ARR = new List<tblP_CC>();
                using (var _ctxArre = new MainContext(EmpresaEnum.Arrendadora))
                {
                    lstCC_ARR = _ctxArre.tblP_CC.Where(w => w.estatus).ToList();
                }
                List<string> lstCCEK_CP = new List<string>();
                List<string> lstAreaEK_ARR = new List<string>();
                List<string> lstCuentaEK_ARR = new List<string>();
                List<SumaDTO> lstMontosCuentasCC_CP = new List<SumaDTO>();
                List<SumaDTO> lstMontosCuentasCC_ARR = new List<SumaDTO>();
                List<SumaDTO> lstMontosCuentasCCAnterior_CP = new List<SumaDTO>();
                List<SumaDTO> lstMontosCuentasCCAnterior_ARR = new List<SumaDTO>();

                if (objDTO.arrConstruplan != null)
                {
                    #region CONSTRUPLAN
                    foreach (var item in objDTO.arrConstruplan)
                    {
                        lstCCEK_CP.Add(string.Format("'{0}'", lstCC_CP.Where(w => w.id == item).Select(s => s.cc).FirstOrDefault()));
                    }

                    if (lstCCEK_CP.Count() > 0)
                    {
//                        strQuery_CP = string.Format(@"SELECT mov.mes, mov.cta, mov.scta, mov.sscta, mov.cc, mov.monto
//                                                        FROM sc_movpol AS mov 
//                                                        INNER JOIN sc_polizas AS pol ON pol.year = mov.year AND pol.mes = mov.mes AND pol.poliza = mov.poliza AND pol.tp = mov.tp
//                                                            WHERE mov.year = {0} AND pol.status = 'A' AND mov.cc IN ({1})", objDTO.year, string.Join(",", lstCCEK_CP));

//                        lstMontosCuentasCC_CP = _contextEnkontrol.Select<SumaDTO>(EnkontrolAmbienteEnum.ProdCPLAN, strQuery_CP);
                        lstMontosCuentasCC_CP = datosGenerales.Where(x => x.year == objDTO.year && x.empresa == 1).GroupBy(x => new { mes = x.mes, cta = x.cta, scta = x.scta, sscta = x.sscta, cc = x.cc }).Select(x => new SumaDTO {
                            mes = x.Key.mes,
                            cta = x.Key.cta,
                            scta = x.Key.scta,
                            sscta = x.Key.sscta,
                            cc = x.Key.cc,
                            monto = x.Sum(y => y.monto)
                        }).ToList();
                        lstMontosCuentasCCAnterior_CP = datosGenerales.Where(x => x.year == (objDTO.year - 1) && x.empresa == 1).GroupBy(x => new { mes = x.mes, cta = x.cta, scta = x.scta, sscta = x.sscta, cc = x.cc }).Select(x => new SumaDTO
                        {
                            mes = x.Key.mes,
                            cta = x.Key.cta,
                            scta = x.Key.scta,
                            sscta = x.Key.sscta,
                            cc = x.Key.cc,
                            monto = x.Sum(y => y.monto)
                        }).ToList();
                    }
                    #endregion
                }

                if (objDTO.arrArrendadora != null)
                {
                    #region ARRENDADORA
                    foreach (var item in objDTO.arrArrendadora)
                    {
                        lstAreaEK_ARR.Add(string.Format("'{0}'", lstCC_ARR.Where(w => w.id == item).Select(s => s.area).FirstOrDefault()));
                        lstCuentaEK_ARR.Add(string.Format("'{0}'", lstCC_ARR.Where(w => w.id == item).Select(s => s.cuenta).FirstOrDefault()));
                    }

                    if (lstAreaEK_ARR.Count() > 0 && lstCuentaEK_ARR.Count() > 0)
                    {
//                        strQuery_ARR = string.Format(@"SELECT mov.mes, mov.cta, mov.scta, mov.sscta, mov.cc, mov.monto
//                                                        FROM sc_movpol AS mov 
//                                                        INNER JOIN sc_polizas AS pol ON pol.year = mov.year AND pol.mes = mov.mes AND pol.poliza = mov.poliza AND pol.tp = mov.tp
//                                                            WHERE mov.year = {0} AND pol.status = 'A' AND mov.area IN ({1}) AND mov.cuenta_oc IN ({2})", objDTO.year, string.Join(",", lstAreaEK_ARR), string.Join(",", lstCuentaEK_ARR));

//                        lstMontosCuentasCC_ARR = _contextEnkontrol.Select<SumaDTO>(EnkontrolAmbienteEnum.ProdARREND, strQuery_ARR);
                        lstMontosCuentasCC_ARR = datosGenerales.Where(x => x.year == objDTO.year && x.empresa == 2).GroupBy(x => new { mes = x.mes, cta = x.cta, scta = x.scta, sscta = x.sscta, cc = x.cc }).Select(x => new SumaDTO
                        {
                            mes = x.Key.mes,
                            cta = x.Key.cta,
                            scta = x.Key.scta,
                            sscta = x.Key.sscta,
                            cc = x.Key.cc,
                            monto = x.Sum(y => y.monto)
                        }).ToList();
                        lstMontosCuentasCCAnterior_ARR = datosGenerales.Where(x => (x.year == objDTO.year - 1) && x.empresa == 2).GroupBy(x => new { mes = x.mes, cta = x.cta, scta = x.scta, sscta = x.sscta, cc = x.cc }).Select(x => new SumaDTO
                        {
                            mes = x.Key.mes,
                            cta = x.Key.cta,
                            scta = x.Key.scta,
                            sscta = x.Key.sscta,
                            cc = x.Key.cc,
                            monto = x.Sum(y => y.monto)
                        }).ToList();
                    }
                    #endregion
                }
                #endregion

                #region SE OBTIENE LAS CUENTAS QUE CONTIENE CADA CONCEPTO EN BASE A LOS CC SELECIONADOS
                List<SumaDTO> lstCuentasRelConcepto_CP = new List<SumaDTO>();
                List<SumaDTO> lstCuentasRelConcepto_ARR = new List<SumaDTO>();

                #region CONSTRUPLAN
                lstCuentasRelConcepto_CP = _context.Select<SumaDTO>(new DapperDTO
                {
                    baseDatos = MainContextEnum.Construplan,
                    consulta = "SELECT idConcepto, cta, scta, sscta FROM tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas WHERE registroActivo = 1",
                }).ToList();
                #endregion

                #region ARRENDADORA
                lstCuentasRelConcepto_ARR = _context.Select<SumaDTO>(new DapperDTO
                {
                    baseDatos = MainContextEnum.Arrendadora,
                    consulta = "SELECT idConcepto, cta, scta, sscta FROM tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas WHERE registroActivo = 1",
                }).ToList();
                #endregion

                #endregion

                #region SE OBTIENE LISTADO DE AGRUPACIONES Y CONCEPTOS
                List<PresupuestoVsGastoDTO> lstPptosVsGastosDTO = new List<PresupuestoVsGastoDTO>();
                PresupuestoVsGastoDTO obj = new PresupuestoVsGastoDTO();

                #region CONSTRUPLAN
                foreach (var item in lstPptos_CP)
                {
                    // SE VERIFICA SI EXISTE LA AGRUPACIÓN EN LA LISTA
                    string con = item.concepto;
                    PresupuestoVsGastoDTO objPpto = lstPptosVsGastosDTO.Where(w => w.descripcion == item.agrupacion && w.esAgrupador).FirstOrDefault();
                    if (objPpto == null)
                    {
                        #region NO EXISTE, SE AGREGA AGRUPACIÓN A LA LISTA
                        obj = new PresupuestoVsGastoDTO();
                        obj.descripcion = item.agrupacion;
                        obj.pptoMensual = 0;
                        obj.gastoMensual = 0;
                        obj.diferenciaMensual = 0;
                        obj.cumplimientoMensual = 0;
                        obj.pptoAcumulado = 0;
                        obj.gastoAcumulado = 0;
                        obj.diferenciaAcumulado = 0;
                        obj.cumplimientoAcumulado = 0;
                        obj.gastoAnioPasado = 0;
                        obj.diferenciaAnioActualVsAnioAcumulado = 0;
                        obj.esAgrupador = true;
                        obj.agrupacionID = item.agrupacionID;
                        obj.year = objDTO.year;
                        lstPptosVsGastosDTO.Add(obj);
                        #endregion
                    }
                    var auxAgrupacion = obj.agrupacionID;
                    objPpto = lstPptosVsGastosDTO.Where(w => w.descripcion == item.concepto && !w.esAgrupador).FirstOrDefault();
                    if (objPpto == null)
                    {
                        #region SE REGISTRA EL CONCEPTO EN LA LISTA
                        obj = new PresupuestoVsGastoDTO();
                        obj.idConceptoString = item.idCaptura.ToString();
                        obj.descripcion = item.concepto;
                        obj.agrupacion = item.agrupacion;
                        obj.pptoMensual += 0;
                        obj.pptoAcumulado = 0;
                        obj.diferenciaMensual = 0;
                        obj.gastoMensual = 0;
                        obj.gastoAcumulado = 0;
                        obj.cumplimientoMensual = 0;
                        obj.diferenciaAcumulado = 0;
                        obj.cumplimientoAcumulado = 0;
                        obj.gastoAnioPasado = 0;
                        obj.diferenciaAnioActualVsAnioAcumulado = 0;
                        obj.agrupacionID = auxAgrupacion;
                        obj.esAgrupador = false;
                        obj.year = objDTO.year;
                        obj.conceptoCuentaID = item.conceptoCuentaID;

                        /* 
                         * SE OBTIENE EL PPTO MENSUAL
                         * SE OBTIENE EL PPTO ACUMULADO
                         * SE OBTIENE EL GASTO MENSUAL
                         * SE OBTIENE EL GASTO ACUMULADO
                         * SE OBTIENE LA DIFERENCIA PPTO MENSUAL - GASTO MENSUAL
                         * SE OBTIENE LA DIFERENCIA PPTO ACUMULADO - GASTO ACUMULADO
                        */
                        switch (objDTO.idMes)
                        {
                            case 1:
                                obj.pptoMensual += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeEnero);
                                obj.pptoAcumulado += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeEnero);
                                break;
                            case 2:
                                obj.pptoMensual += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeFebrero);
                                obj.pptoAcumulado += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeEnero + s.importeFebrero);
                                break;
                            case 3:
                                obj.pptoMensual += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeMarzo);
                                obj.pptoAcumulado += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo);
                                break;
                            case 4:
                                obj.pptoMensual += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeAbril);
                                obj.pptoAcumulado += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril);
                                break;
                            case 5:
                                obj.pptoMensual += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeMayo);
                                obj.pptoAcumulado += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo);
                                break;
                            case 6:
                                obj.pptoMensual += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeJunio);
                                obj.pptoAcumulado += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio);
                                break;
                            case 7:
                                obj.pptoMensual += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeJulio);
                                obj.pptoAcumulado += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio);
                                break;
                            case 8:
                                obj.pptoMensual += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeAgosto);
                                obj.pptoAcumulado += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio + s.importeAgosto);
                                break;
                            case 9:
                                obj.pptoMensual += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeSeptiembre);
                                obj.pptoAcumulado += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio + s.importeAgosto + s.importeSeptiembre);
                                break;
                            case 10:
                                obj.pptoMensual += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeOctubre);
                                obj.pptoAcumulado += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio + s.importeAgosto + s.importeSeptiembre + s.importeOctubre);
                                break;
                            case 11:
                                obj.pptoMensual += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeNoviembre);
                                obj.pptoAcumulado += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio + s.importeAgosto + s.importeSeptiembre + s.importeOctubre + s.importeNoviembre);
                                break;
                            case 12:
                                obj.pptoMensual += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeDiciembre);
                                obj.pptoAcumulado += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio + s.importeAgosto + s.importeSeptiembre + s.importeOctubre + s.importeNoviembre + s.importeDiciembre);
                                break;
                            default:
                                break;
                        }

                        // SE OBTIENE LAS CUENTAS DEL CONCEPTO
                        List<SumaDTO> lstCuentasConcepto = new List<SumaDTO>();
                        lstCuentasConcepto = lstCuentasRelConcepto_CP.Where(w => w.idConcepto == item.conceptoCuentaID).ToList();
                        foreach (var itemCuentaRelConcepto in lstCuentasConcepto)
                        {
                            int cta = itemCuentaRelConcepto.cta > 0 ? itemCuentaRelConcepto.cta : 0;
                            int scta = itemCuentaRelConcepto.scta > 0 ? itemCuentaRelConcepto.scta : 0;
                            int sscta = itemCuentaRelConcepto.sscta > 0 ? itemCuentaRelConcepto.sscta : 0;
                            obj.gastoMensual += lstMontosCuentasCC_CP.Where(w => w.mes == objDTO.idMes && w.cta == cta && w.scta == scta && w.sscta == sscta).Select(s => s.monto).Sum(s => s);
                            obj.gastoAcumulado += lstMontosCuentasCC_CP.Where(w => w.mes > 0 && w.mes <= objDTO.idMes && w.cta == cta && w.scta == scta && w.sscta == sscta).Select(s => s.monto).Sum(s => s);
                            obj.gastoAnioPasado += lstMontosCuentasCCAnterior_CP.Where(w => w.mes > 0 && w.mes <= objDTO.idMes && w.cta == cta && w.scta == scta && w.sscta == sscta).Select(s => s.monto).Sum(s => s);
                        }

                        lstPptosVsGastosDTO.Add(obj);
                        #endregion
                    }
                    else
                    {
                        #region SE ACTUALIZA LA INFORMACIÓN DEL CONCEPTO, YA QUE SE ENCUENTRA EN LA LISTA, Y SE LE SUMA LO DEL NUEVO CONCEPTO
                        /* 
                         * SE OBTIENE EL PPTO MENSUAL
                         * SE OBTIENE EL PPTO ACUMULADO
                         * SE OBTIENE EL GASTO MENSUAL
                         * SE OBTIENE EL GASTO ACUMULADO
                         * SE OBTIENE LA DIFERENCIA PPTO MENSUAL - GASTO MENSUAL
                         * SE OBTIENE LA DIFERENCIA PPTO ACUMULADO - GASTO ACUMULADO
                        */
                        switch (objDTO.idMes)
                        {
                            case 1:
                                objPpto.idConceptoString += string.Format(", {0}", item.idCaptura.ToString());
                                objPpto.pptoMensual += item.importeEnero;
                                objPpto.pptoAcumulado += item.importeEnero;
                                break;
                            case 2:
                                objPpto.idConceptoString += string.Format(", {0}", item.idCaptura.ToString());
                                objPpto.pptoMensual += item.importeFebrero;
                                objPpto.pptoAcumulado += item.importeEnero + item.importeFebrero;
                                break;
                            case 3:
                                objPpto.idConceptoString += string.Format(", {0}", item.idCaptura.ToString());
                                objPpto.pptoMensual += item.importeMarzo;
                                objPpto.pptoAcumulado += item.importeEnero + item.importeFebrero + item.importeMarzo;
                                break;
                            case 4:
                                objPpto.idConceptoString += string.Format(", {0}", item.idCaptura.ToString());
                                objPpto.pptoMensual += item.importeAbril;
                                objPpto.pptoAcumulado += item.importeEnero + item.importeFebrero + item.importeMarzo + item.importeAbril;
                                break;
                            case 5:
                                objPpto.idConceptoString += string.Format(", {0}", item.idCaptura.ToString());
                                objPpto.pptoMensual += item.importeAbril;
                                objPpto.pptoAcumulado += item.importeEnero + item.importeFebrero + item.importeMarzo + item.importeAbril + item.importeMayo;
                                break;
                            case 6:
                                objPpto.idConceptoString += string.Format(", {0}", item.idCaptura.ToString());
                                objPpto.pptoMensual += item.importeAbril;
                                objPpto.pptoAcumulado += item.importeEnero + item.importeFebrero + item.importeMarzo + item.importeAbril + item.importeMayo + item.importeJunio;
                                break;
                            case 7:
                                objPpto.idConceptoString += string.Format(", {0}", item.idCaptura.ToString());
                                objPpto.pptoMensual += item.importeAbril;
                                objPpto.pptoAcumulado += item.importeEnero + item.importeFebrero + item.importeMarzo + item.importeAbril + item.importeMayo + item.importeJunio + item.importeJulio;
                                break;
                            case 8:
                                objPpto.idConceptoString += string.Format(", {0}", item.idCaptura.ToString());
                                objPpto.pptoMensual += item.importeAbril;
                                objPpto.pptoAcumulado += item.importeEnero + item.importeFebrero + item.importeMarzo + item.importeAbril + item.importeMayo + item.importeJunio + item.importeJulio + item.importeAgosto;
                                break;
                            case 9:
                                objPpto.idConceptoString += string.Format(", {0}", item.idCaptura.ToString());
                                objPpto.pptoMensual += item.importeAbril;
                                objPpto.pptoAcumulado += item.importeEnero + item.importeFebrero + item.importeMarzo + item.importeAbril + item.importeMayo + item.importeJunio + item.importeJulio + item.importeAgosto + item.importeSeptiembre;
                                break;
                            case 10:
                                objPpto.idConceptoString += string.Format(", {0}", item.idCaptura.ToString());
                                objPpto.pptoMensual += item.importeAbril;
                                objPpto.pptoAcumulado += item.importeEnero + item.importeFebrero + item.importeMarzo + item.importeAbril + item.importeMayo + item.importeJunio + item.importeJulio + item.importeAgosto + item.importeSeptiembre + item.importeOctubre;
                                break;
                            case 11:
                                objPpto.idConceptoString += string.Format(", {0}", item.idCaptura.ToString());
                                objPpto.pptoMensual += item.importeAbril;
                                objPpto.pptoAcumulado += item.importeEnero + item.importeFebrero + item.importeMarzo + item.importeAbril + item.importeMayo + item.importeJunio + item.importeJulio + item.importeAgosto + item.importeSeptiembre + item.importeOctubre + item.importeNoviembre;
                                break;
                            case 12:
                                objPpto.idConceptoString += string.Format(", {0}", item.idCaptura.ToString());
                                objPpto.pptoMensual += item.importeAbril;
                                objPpto.pptoAcumulado += item.importeEnero + item.importeFebrero + item.importeMarzo + item.importeAbril + item.importeMayo + item.importeJunio + item.importeJulio + item.importeAgosto + item.importeSeptiembre + item.importeOctubre + item.importeNoviembre + item.importeDiciembre;
                                break;
                            default:
                                break;
                        }
                        #endregion
                        // SE OBTIENE LAS CUENTAS DEL CONCEPTO
                        List<SumaDTO> lstCuentasConcepto = new List<SumaDTO>();
                        lstCuentasConcepto = lstCuentasRelConcepto_CP.Where(w => w.idConcepto == item.conceptoCuentaID).ToList();
                        foreach (var itemCuentaRelConcepto in lstCuentasConcepto)
                        {
                            int cta = itemCuentaRelConcepto.cta > 0 ? itemCuentaRelConcepto.cta : 0;
                            int scta = itemCuentaRelConcepto.scta > 0 ? itemCuentaRelConcepto.scta : 0;
                            int sscta = itemCuentaRelConcepto.sscta > 0 ? itemCuentaRelConcepto.sscta : 0;
                            obj.gastoMensual += lstMontosCuentasCC_CP.Where(w => w.mes == objDTO.idMes && w.cta == cta && w.scta == scta && w.sscta == sscta).Select(s => s.monto).Sum(s => s);
                            obj.gastoAcumulado += lstMontosCuentasCC_CP.Where(w => w.mes > 0 && w.mes <= objDTO.idMes && w.cta == cta && w.scta == scta && w.sscta == sscta).Select(s => s.monto).Sum(s => s);
                            obj.gastoAnioPasado += lstMontosCuentasCCAnterior_CP.Where(w => w.mes > 0 && w.mes <= objDTO.idMes && w.cta == cta && w.scta == scta && w.sscta == sscta).Select(s => s.monto).Sum(s => s);
                        }
                    }
                }
                #endregion

                #region ARRENDADORA
                foreach (var item in lstPptos_ARR)
                {
                    // SE VERIFICA SI EXISTE LA AGRUPACIÓN EN LA LISTA
                    string con = item.concepto;
                    PresupuestoVsGastoDTO objPpto = lstPptosVsGastosDTO.Where(w => w.descripcion == item.agrupacion && w.esAgrupador).FirstOrDefault();
                    if (objPpto == null)
                    {
                        #region NO EXISTE, SE AGREGA AGRUPACIÓN A LA LISTA
                        obj = new PresupuestoVsGastoDTO();
                        obj.descripcion = item.agrupacion;
                        obj.pptoMensual = 0;
                        obj.gastoMensual = 0;
                        obj.diferenciaMensual = 0;
                        obj.cumplimientoMensual = 0;
                        obj.pptoAcumulado = 0;
                        obj.gastoAcumulado = 0;
                        obj.diferenciaAcumulado = 0;
                        obj.cumplimientoAcumulado = 0;
                        obj.gastoAnioPasado = 0;
                        obj.diferenciaAnioActualVsAnioAcumulado = 0;
                        obj.esAgrupador = true;
                        obj.agrupacionID = item.agrupacionID;
                        obj.year = objDTO.year;
                        lstPptosVsGastosDTO.Add(obj);
                        #endregion
                    }

                    objPpto = lstPptosVsGastosDTO.Where(w => w.descripcion == item.concepto && !w.esAgrupador).FirstOrDefault();
                    if (objPpto == null)
                    {
                        #region SE REGISTRA EL CONCEPTO EN LA LISTA
                        obj = new PresupuestoVsGastoDTO();
                        obj.idConceptoString = item.idCaptura.ToString();
                        obj.descripcion = item.concepto;
                        obj.agrupacion = item.agrupacion;
                        obj.pptoMensual += 0;
                        obj.pptoAcumulado = 0;
                        obj.diferenciaMensual = 0;
                        obj.gastoMensual = 0;
                        obj.gastoAcumulado = 0;
                        obj.cumplimientoMensual = 0;
                        obj.diferenciaAcumulado = 0;
                        obj.cumplimientoAcumulado = 0;
                        obj.gastoAnioPasado = 0;
                        obj.diferenciaAnioActualVsAnioAcumulado = 0;
                        obj.agrupacionID = item.agrupacionID;
                        obj.esAgrupador = false;
                        obj.year = objDTO.year;
                        obj.conceptoCuentaID = item.conceptoCuentaID;

                        /* 
                         * SE OBTIENE EL PPTO MENSUAL
                         * SE OBTIENE EL PPTO ACUMULADO
                         * SE OBTIENE EL GASTO MENSUAL
                         * SE OBTIENE EL GASTO ACUMULADO
                         * SE OBTIENE LA DIFERENCIA PPTO MENSUAL - GASTO MENSUAL
                         * SE OBTIENE LA DIFERENCIA PPTO ACUMULADO - GASTO ACUMULADO
                        */
                        switch (objDTO.idMes)
                        {
                            case 1:
                                obj.pptoMensual += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeEnero);
                                obj.pptoAcumulado += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeEnero);
                                break;
                            case 2:
                                obj.pptoMensual += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeFebrero);
                                obj.pptoAcumulado += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeEnero + s.importeFebrero);
                                break;
                            case 3:
                                obj.pptoMensual += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeMarzo);
                                obj.pptoAcumulado += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo);
                                break;
                            case 4:
                                obj.pptoMensual += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeAbril);
                                obj.pptoAcumulado += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril);
                                break;
                            case 5:
                                obj.pptoMensual += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeMayo);
                                obj.pptoAcumulado += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo);
                                break;
                            case 6:
                                obj.pptoMensual += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeJunio);
                                obj.pptoAcumulado += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio);
                                break;
                            case 7:
                                obj.pptoMensual += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeJulio);
                                obj.pptoAcumulado += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio);
                                break;
                            case 8:
                                obj.pptoMensual += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeAgosto);
                                obj.pptoAcumulado += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio + s.importeAgosto);
                                break;
                            case 9:
                                obj.pptoMensual += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeSeptiembre);
                                obj.pptoAcumulado += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio + s.importeAgosto + s.importeSeptiembre);
                                break;
                            case 10:
                                obj.pptoMensual += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeOctubre);
                                obj.pptoAcumulado += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio + s.importeAgosto + s.importeSeptiembre + s.importeOctubre);
                                break;
                            case 11:
                                obj.pptoMensual += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeNoviembre);
                                obj.pptoAcumulado += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio + s.importeAgosto + s.importeSeptiembre + s.importeOctubre + s.importeNoviembre);
                                break;
                            case 12:
                                obj.pptoMensual += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeDiciembre);
                                obj.pptoAcumulado += lstPptos_CP.Where(w => w.conceptoCuentaID == item.conceptoCuentaID).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio + s.importeAgosto + s.importeSeptiembre + s.importeOctubre + s.importeNoviembre + s.importeDiciembre);
                                break;
                            default:
                                break;
                        }
                        // SE OBTIENE LAS CUENTAS DEL CONCEPTO
                        List<SumaDTO> lstCuentasConcepto = new List<SumaDTO>();
                        lstCuentasConcepto = lstCuentasRelConcepto_ARR.Where(w => w.idConcepto == item.conceptoCuentaID).ToList();
                        foreach (var itemCuentaRelConcepto in lstCuentasConcepto)
                        {
                            int cta = itemCuentaRelConcepto.cta > 0 ? itemCuentaRelConcepto.cta : 0;
                            int scta = itemCuentaRelConcepto.scta > 0 ? itemCuentaRelConcepto.scta : 0;
                            int sscta = itemCuentaRelConcepto.sscta > 0 ? itemCuentaRelConcepto.sscta : 0;
                            obj.gastoMensual += lstMontosCuentasCC_ARR.Where(w => w.mes == objDTO.idMes && (w.cta == cta || (!objDTO.costosAdministrativos ? w.cta == 5000 : true)) && w.scta == scta && w.sscta == sscta).Select(s => s.monto).Sum(s => s);
                            obj.gastoAcumulado += lstMontosCuentasCC_ARR.Where(w => w.mes > 0 && w.mes <= objDTO.idMes && (w.cta == cta || (!objDTO.costosAdministrativos ? w.cta == 5000 : true)) && w.scta == scta && w.sscta == sscta).Select(s => s.monto).Sum(s => s);
                        }

                        lstPptosVsGastosDTO.Add(obj);
                        #endregion
                    }
                    else
                    {
                        #region SE ACTUALIZA LA INFORMACIÓN DEL CONCEPTO, YA QUE SE ENCUENTRA EN LA LISTA, Y SE LE SUMA LO DEL NUEVO CONCEPTO
                        /* 
                         * SE OBTIENE EL PPTO MENSUAL
                         * SE OBTIENE EL PPTO ACUMULADO
                         * SE OBTIENE EL GASTO MENSUAL
                         * SE OBTIENE EL GASTO ACUMULADO
                         * SE OBTIENE LA DIFERENCIA PPTO MENSUAL - GASTO MENSUAL
                         * SE OBTIENE LA DIFERENCIA PPTO ACUMULADO - GASTO ACUMULADO
                        */
                        //switch (objDTO.idMes)
                        //{
                        //    case 4:
                        //        objPpto.idConceptoString += string.Format(", {0}", item.idCaptura.ToString());
                        //        objPpto.pptoMensual += item.importeAbril;
                        //        objPpto.pptoAcumulado += item.importeEnero + item.importeFebrero + item.importeMarzo + item.importeAbril;

                        //        // SE OBTIENE LAS CUENTAS DEL CONCEPTO
                        //        List<SumaDTO> lstCuentasConcepto = new List<SumaDTO>();
                        //        lstCuentasConcepto = lstCuentasRelConcepto_ARR.Where(w => w.idConcepto == item.conceptoCuentaID).ToList();
                        //        foreach (var itemCuentaRelConcepto in lstCuentasConcepto)
                        //        {
                        //            int cta = itemCuentaRelConcepto.cta > 0 ? itemCuentaRelConcepto.cta : 0;
                        //            int scta = itemCuentaRelConcepto.scta > 0 ? itemCuentaRelConcepto.scta : 0;
                        //            int sscta = itemCuentaRelConcepto.sscta > 0 ? itemCuentaRelConcepto.sscta : 0;
                        //            obj.gastoMensual += lstMontosCuentasCC_ARR.Where(w => w.mes == objDTO.idMes && w.cta == cta && w.scta == scta && w.sscta == sscta).Select(s => s.monto).Sum(s => s);
                        //            obj.gastoAcumulado += lstMontosCuentasCC_ARR.Where(w => w.mes > 0 && w.mes <= objDTO.idMes && w.cta == cta && w.scta == scta && w.sscta == sscta).Select(s => s.monto).Sum(s => s);
                        //        }
                        //        break;
                        //    default:
                        //        break;
                        //}

                        switch (objDTO.idMes)
                        {
                            case 1:
                                objPpto.idConceptoString += string.Format(", {0}", item.idCaptura.ToString());
                                objPpto.pptoMensual += item.importeEnero;
                                objPpto.pptoAcumulado += item.importeEnero;
                                break;
                            case 2:
                                objPpto.idConceptoString += string.Format(", {0}", item.idCaptura.ToString());
                                objPpto.pptoMensual += item.importeFebrero;
                                objPpto.pptoAcumulado += item.importeEnero + item.importeFebrero;
                                break;
                            case 3:
                                objPpto.idConceptoString += string.Format(", {0}", item.idCaptura.ToString());
                                objPpto.pptoMensual += item.importeMarzo;
                                objPpto.pptoAcumulado += item.importeEnero + item.importeFebrero + item.importeMarzo;
                                break;
                            case 4:
                                objPpto.idConceptoString += string.Format(", {0}", item.idCaptura.ToString());
                                objPpto.pptoMensual += item.importeAbril;
                                objPpto.pptoAcumulado += item.importeEnero + item.importeFebrero + item.importeMarzo + item.importeAbril;
                                break;
                            case 5:
                                objPpto.idConceptoString += string.Format(", {0}", item.idCaptura.ToString());
                                objPpto.pptoMensual += item.importeAbril;
                                objPpto.pptoAcumulado += item.importeEnero + item.importeFebrero + item.importeMarzo + item.importeAbril + item.importeMayo;
                                break;
                            case 6:
                                objPpto.idConceptoString += string.Format(", {0}", item.idCaptura.ToString());
                                objPpto.pptoMensual += item.importeAbril;
                                objPpto.pptoAcumulado += item.importeEnero + item.importeFebrero + item.importeMarzo + item.importeAbril + item.importeMayo + item.importeJunio;
                                break;
                            case 7:
                                objPpto.idConceptoString += string.Format(", {0}", item.idCaptura.ToString());
                                objPpto.pptoMensual += item.importeAbril;
                                objPpto.pptoAcumulado += item.importeEnero + item.importeFebrero + item.importeMarzo + item.importeAbril + item.importeMayo + item.importeJunio + item.importeJulio;
                                break;
                            case 8:
                                objPpto.idConceptoString += string.Format(", {0}", item.idCaptura.ToString());
                                objPpto.pptoMensual += item.importeAbril;
                                objPpto.pptoAcumulado += item.importeEnero + item.importeFebrero + item.importeMarzo + item.importeAbril + item.importeMayo + item.importeJunio + item.importeJulio + item.importeAgosto;
                                break;
                            case 9:
                                objPpto.idConceptoString += string.Format(", {0}", item.idCaptura.ToString());
                                objPpto.pptoMensual += item.importeAbril;
                                objPpto.pptoAcumulado += item.importeEnero + item.importeFebrero + item.importeMarzo + item.importeAbril + item.importeMayo + item.importeJunio + item.importeJulio + item.importeAgosto + item.importeSeptiembre;
                                break;
                            case 10:
                                objPpto.idConceptoString += string.Format(", {0}", item.idCaptura.ToString());
                                objPpto.pptoMensual += item.importeAbril;
                                objPpto.pptoAcumulado += item.importeEnero + item.importeFebrero + item.importeMarzo + item.importeAbril + item.importeMayo + item.importeJunio + item.importeJulio + item.importeAgosto + item.importeSeptiembre + item.importeOctubre;
                                break;
                            case 11:
                                objPpto.idConceptoString += string.Format(", {0}", item.idCaptura.ToString());
                                objPpto.pptoMensual += item.importeAbril;
                                objPpto.pptoAcumulado += item.importeEnero + item.importeFebrero + item.importeMarzo + item.importeAbril + item.importeMayo + item.importeJunio + item.importeJulio + item.importeAgosto + item.importeSeptiembre + item.importeOctubre + item.importeNoviembre;
                                break;
                            case 12:
                                objPpto.idConceptoString += string.Format(", {0}", item.idCaptura.ToString());
                                objPpto.pptoMensual += item.importeAbril;
                                objPpto.pptoAcumulado += item.importeEnero + item.importeFebrero + item.importeMarzo + item.importeAbril + item.importeMayo + item.importeJunio + item.importeJulio + item.importeAgosto + item.importeSeptiembre + item.importeOctubre + item.importeNoviembre + item.importeDiciembre;
                                break;
                            default:
                                break;
                        }
                        // SE OBTIENE LAS CUENTAS DEL CONCEPTO
                        List<SumaDTO> lstCuentasConcepto = new List<SumaDTO>();
                        lstCuentasConcepto = lstCuentasRelConcepto_ARR.Where(w => w.idConcepto == item.conceptoCuentaID).ToList();
                        foreach (var itemCuentaRelConcepto in lstCuentasConcepto)
                        {
                            int cta = itemCuentaRelConcepto.cta > 0 ? itemCuentaRelConcepto.cta : 0;
                            int scta = itemCuentaRelConcepto.scta > 0 ? itemCuentaRelConcepto.scta : 0;
                            int sscta = itemCuentaRelConcepto.sscta > 0 ? itemCuentaRelConcepto.sscta : 0;
                            obj.gastoMensual += lstMontosCuentasCC_ARR.Where(w => w.mes == objDTO.idMes && (w.cta == cta || (!objDTO.costosAdministrativos ? w.cta == 5000 : true)) && w.scta == scta && w.sscta == sscta).Select(s => s.monto).Sum(s => s);
                            obj.gastoAcumulado += lstMontosCuentasCC_ARR.Where(w => w.mes > 0 && w.mes <= objDTO.idMes && (w.cta == cta || (!objDTO.costosAdministrativos ? w.cta == 5000 : true)) && w.scta == scta && w.sscta == sscta).Select(s => s.monto).Sum(s => s);
                            obj.gastoAnioPasado += lstMontosCuentasCCAnterior_ARR.Where(w => w.mes > 0 && w.mes <= objDTO.idMes && (w.cta == cta || (!objDTO.costosAdministrativos ? w.cta == 5000 : true)) && w.scta == scta && w.sscta == sscta).Select(s => s.monto).Sum(s => s);
                        }
                        #endregion
                    }
                }
                #endregion

                foreach (var item in lstPptosVsGastosDTO)
                {
                    #region SE OBTIENE LA SUMA DE TODOS LOS CONCEPTOS DEL AGRUPADOR
                    if (item.esAgrupador)
                    {
                        item.pptoMensual += lstPptosVsGastosDTO.Where(w => w.agrupacionID == item.agrupacionID && !w.esAgrupador).Sum(s => s.pptoMensual);
                        item.pptoAcumulado += lstPptosVsGastosDTO.Where(w => w.agrupacionID == item.agrupacionID && !w.esAgrupador).Sum(s => s.pptoAcumulado);
                        item.gastoMensual += lstPptosVsGastosDTO.Where(w => w.agrupacionID == item.agrupacionID && !w.esAgrupador).Sum(s => s.gastoMensual);
                        item.gastoAcumulado += lstPptosVsGastosDTO.Where(w => w.agrupacionID == item.agrupacionID && !w.esAgrupador).Sum(s => s.gastoAcumulado);
                    }
                    #endregion

                    item.diferenciaMensual += item.pptoMensual - item.gastoMensual;
                    item.diferenciaAcumulado += item.pptoAcumulado - item.gastoAcumulado;
                    item.diferenciaAnioActualVsAnioAcumulado += item.gastoAnioPasado - item.gastoAcumulado;
                    item.cumplimientoMensual += ((item.gastoMensual > 0 ? item.gastoMensual : 1) / (item.pptoMensual > 0 ? item.pptoMensual : 1)) * 100;
                    item.cumplimientoAcumulado += ((item.gastoAcumulado > 0 ? item.gastoAcumulado : 1) / (item.pptoAcumulado > 0 ? item.pptoAcumulado : 1)) * 100;

                    if (item.cumplimientoMensual == 100)
                        item.cumplimientoMensual = 0;

                    if (item.cumplimientoAcumulado == 100)
                        item.cumplimientoAcumulado = 0;
                }
                #endregion

                resultado.Add("lstPptosVsGastosDTO", lstPptosVsGastosDTO);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        #region RECURSOS NECESARIOS
        #region AGRUPACIONES
        public Dictionary<string, object> GetRNAgrupaciones(RNAgrupacionDTO objDTO)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region SE OBTIENE LISTADO DE AGRUPACIONES EN BASE AL AÑO
                List<RNAgrupacionDTO> lstAgrupaciones = _context.Select<RNAgrupacionDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"SELECT id, anio, idCC, agrupacion 
	                                    FROM tblAF_CtrlPptalOfCe_RN_CatAgrupaciones 
		                                    WHERE anio = @anio AND idCC = @idCC AND registroActivo = @registroActivo",
                    parametros = new { anio = objDTO.anio, idCC = objDTO.idCC, registroActivo = true }
                }).ToList();

                resultado.Add("lstAgrupaciones", lstAgrupaciones);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetRNAgrupaciones", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> CrearEditarRNAgrupacion(RNAgrupacionDTO objDTO)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                resultado = new Dictionary<string, object>();
                try
                {
                    #region VALIDACIÓN CAMPOS VACIOS
                    string strMensajeError = string.Empty;
                    if (objDTO.anio <= 0 || objDTO.idCC <= 0 || string.IsNullOrEmpty(objDTO.agrupacion))
                    {
                        strMensajeError += objDTO.anio <= 0 ? "Es necesario indicar el año." : string.Empty;
                        strMensajeError += objDTO.idCC <= 0 ? "<br>Es necesario indicar el CC." : string.Empty;
                        strMensajeError += string.IsNullOrEmpty(objDTO.agrupacion) ? "<br>Es necesario indicar la agrupación." : string.Empty;
                        throw new Exception(strMensajeError);
                    }
                    #endregion

                    tblAF_CtrlPptalOfCe_RN_CatAgrupaciones objCE = new tblAF_CtrlPptalOfCe_RN_CatAgrupaciones();
                    if (objDTO.id > 0)
                    {
                        #region ACTUALIZAR AGRUPACIÓN
                        objCE = _context.tblAF_CtrlPptalOfCe_RN_CatAgrupaciones.Where(w => w.id == objDTO.id).FirstOrDefault();
                        if (objCE == null)
                            throw new Exception("Ocurrió un error al actualizar el registro.");

                        objCE.anio = objDTO.anio;
                        objCE.idCC = objDTO.idCC;
                        objCE.agrupacion = objDTO.agrupacion.Trim();
                        objCE.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                        objCE.fechaModificacion = DateTime.Now;
                        _context.SaveChanges();
                        #endregion
                    }
                    else
                    {
                        #region CREAR AGRUPACIÓN
                        objCE = new tblAF_CtrlPptalOfCe_RN_CatAgrupaciones();
                        objCE.anio = objDTO.anio;
                        objCE.idCC = objDTO.idCC;
                        objCE.agrupacion = objDTO.agrupacion.Trim();
                        objCE.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                        objCE.fechaCreacion = DateTime.Now;
                        objCE.registroActivo = true;
                        _context.tblAF_CtrlPptalOfCe_RN_CatAgrupaciones.Add(objCE);
                        _context.SaveChanges();
                        #endregion
                    }

                    resultado.Add(MESSAGE, objDTO.id > 0 ? "Se ha actualizado con éxito." : "Se ha registrado con éxito.");
                    resultado.Add(SUCCESS, true);
                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "CrearEditarRNAgrupacion", e, AccionEnum.CONSULTA, 0, 0);
                    resultado.Add(MESSAGE, e.Message);
                    resultado.Add(SUCCESS, false);
                }
            }
            return resultado;
        }

        public Dictionary<string, object> EliminarRNAgrupacion(int idAgrupacion)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                resultado = new Dictionary<string, object>();
                try
                {
                    if (idAgrupacion <= 0)
                        throw new Exception("Ocurrió un error al eliminar el registro.");

                    #region SE ELIMINA LOS CONCEPTOS QUE CONTENGA LA AGRUPACIÓN
                    List<tblAF_CtrlPptalOfCe_RN_CatConceptos> lstConceptosEliminar = _context.tblAF_CtrlPptalOfCe_RN_CatConceptos.Where(w => w.idRNAgrupacion == idAgrupacion && w.registroActivo).ToList();
                    foreach (var item in lstConceptosEliminar)
                    {
                        item.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                        item.fechaModificacion = DateTime.Now;
                        item.registroActivo = false;
                    }
                    if (lstConceptosEliminar.Count() > 0)
                        _context.SaveChanges();
                    #endregion

                    #region SE ELIMINA LA AGRUPACIÓN SELECCIONADA
                    tblAF_CtrlPptalOfCe_RN_CatAgrupaciones objEliminar = _context.tblAF_CtrlPptalOfCe_RN_CatAgrupaciones.Where(w => w.id == idAgrupacion).FirstOrDefault();
                    if (objEliminar == null)
                        throw new Exception("Ocurrió un error al eliminar el registro.");

                    objEliminar.registroActivo = false;
                    objEliminar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                    objEliminar.fechaModificacion = DateTime.Now;
                    _context.SaveChanges();
                    #endregion

                    resultado.Add(MESSAGE, "Se ha eliminado con éxito el registro.");
                    resultado.Add(SUCCESS, true);
                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "EliminarRNAgrupacion", e, AccionEnum.ELIMINAR, idAgrupacion, 0);
                    resultado.Add(MESSAGE, e.Message);
                    resultado.Add(SUCCESS, false);
                }
            }
            return resultado;
        }

        public Dictionary<string, object> GetDatosActualizarRNAgrupacion(int idAgrupacion)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region SE OBTIENE LOS DATOS DE LA AGRUPACIÓN SELECCIONADA PARA SER ACTUALIZADA
                RNAgrupacionDTO objAgrupacion = _context.Select<RNAgrupacionDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"SELECT id, anio, idCC, agrupacion FROM tblAF_CtrlPptalOfCe_RN_CatAgrupaciones WHERE id = @id",
                    parametros = new { id = idAgrupacion }
                }).FirstOrDefault();

                resultado.Add("objAgrupacion", objAgrupacion);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetDatosActualizarRNAgrupacion", e, AccionEnum.CONSULTA, idAgrupacion, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }
        #endregion

        #region CONCEPTOS
        public Dictionary<string, object> GetRNConceptos(RNConceptoDTO objDTO)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region SE OBTIENE LISTADO DE CONCEPTOS EN BASE A LA AGRUPACIÓN SELECCIONADA
                List<RNConceptoDTO> lstConceptos = _context.Select<RNConceptoDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"SELECT id, concepto, cantidad FROM tblAF_CtrlPptalOfCe_RN_CatConceptos WHERE idRNAgrupacion = @idRNAgrupacion AND registroActivo = @registroActivo",
                    parametros = new { idRNAgrupacion = objDTO.idRNAgrupacion, registroActivo = true }
                }).ToList();

                resultado.Add("lstConceptos", lstConceptos);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetRNConceptos", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> CrearEditarRNConcepto(RNConceptoDTO objDTO)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                resultado = new Dictionary<string, object>();
                try
                {
                    #region VALIDACIÓN CAMPOS VACIOS
                    if (objDTO.idRNAgrupacion <= 0)
                    {
                        string strMensajeError = string.Format("Ocurrió un error al {0} el concepto", objDTO.id > 0 ? "actualizar" : "registrar");
                        throw new Exception(strMensajeError);
                    }

                    if (string.IsNullOrEmpty(objDTO.concepto))
                        throw new Exception("Es necesario indicar el concepto.");
                    #endregion

                    tblAF_CtrlPptalOfCe_CatConceptos objCE = new tblAF_CtrlPptalOfCe_CatConceptos();
                    if (objDTO.id > 0)
                    {
                        #region ACTUALIZAR CONCEPTO
                        objCE = _context.tblAF_CtrlPptalOfCe_CatConceptos.Where(w => w.id == objDTO.id).FirstOrDefault();
                        if (objCE == null)
                            throw new Exception("Ocurrió un error al actualizar el registro.");

                        objCE.concepto = objDTO.concepto.Trim();
                        objCE.cantPpto = objDTO.cantidad;
                        objCE.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                        objCE.fechaModificacion = DateTime.Now;
                        _context.SaveChanges();
                        #endregion
                    }
                    else
                    {
                        #region CREAR CONCEPTO
                        objCE = new tblAF_CtrlPptalOfCe_CatConceptos();
                        objCE.idAgrupacion = objDTO.idRNAgrupacion;
                        objCE.concepto = objDTO.concepto.Trim();
                        objCE.cantPpto = objDTO.cantidad;
                        objCE.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                        objCE.fechaCreacion = DateTime.Now;
                        objCE.registroActivo = true;
                        _context.tblAF_CtrlPptalOfCe_CatConceptos.Add(objCE);
                        _context.SaveChanges();
                        #endregion
                    }

                    resultado.Add(MESSAGE, objDTO.id > 0 ? "Se ha actualizado con éxito." : "Se ha registrado con éxito.");
                    resultado.Add(SUCCESS, true);
                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "CrearEditarRNConcepto", e, AccionEnum.CONSULTA, 0, 0);
                    resultado.Add(MESSAGE, e.Message);
                    resultado.Add(SUCCESS, false);
                }
            }
            return resultado;
        }

        public Dictionary<string, object> EliminarRNConcepto(int idConcepto)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                resultado = new Dictionary<string, object>();
                try
                {
                    if (idConcepto <= 0)
                        throw new Exception("Ocurrió un error al eliminar el registro.");

                    #region SE ELIMINA EL REGISTRO SELECCIONADO
                    tblAF_CtrlPptalOfCe_RN_CatConceptos objEliminar = _context.tblAF_CtrlPptalOfCe_RN_CatConceptos.Where(w => w.id == idConcepto).FirstOrDefault();
                    if (objEliminar == null)
                        throw new Exception("Ocurrió un error al eliminar el registro.");

                    objEliminar.registroActivo = false;
                    objEliminar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                    objEliminar.fechaModificacion = DateTime.Now;
                    _context.SaveChanges();
                    #endregion

                    resultado.Add(MESSAGE, "Se ha eliminado con éxito el registro.");
                    resultado.Add(SUCCESS, true);
                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "EliminarRNAgrupacion", e, AccionEnum.ELIMINAR, idConcepto, 0);
                    resultado.Add(MESSAGE, e.Message);
                    resultado.Add(SUCCESS, false);
                }
            }
            return resultado;
        }

        public Dictionary<string, object> GetDatosActualizarRNConcepto(int idConcepto)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region SE OBTIENE LOS DATOS DEL CONCEPTO SELECCIONADO PARA SER ACTUALIZADA
                ConceptoDTO objConcepto = _context.Select<ConceptoDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"SELECT t1.concepto, t1.cantPpto, t2.anio, t2.idCC, t1.idAgrupacion
	                                    FROM tblAF_CtrlPptalOfCe_CatConceptos AS t1
	                                    INNER JOIN tblAF_CtrllPptalOfCe_CatAgrupaciones AS t2 ON t1.idAgrupacion = t2.id
		                                    WHERE t1.id = @idConcepto",
                    parametros = new { idConcepto = idConcepto }
                }).FirstOrDefault();

                resultado.Add("objConcepto", objConcepto);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetDatosActualizarRNConcepto", e, AccionEnum.CONSULTA, idConcepto, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> FillRNAgrupaciones(RNConceptoDTO objDTO)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region FILL COMBO AGRUPACIONES
                List<ComboDTO> lstRNAgrupaciones = _context.Select<ComboDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"SELECT id AS Value, agrupacion AS Text FROM tblAF_CtrlPptalOfCe_RN_CatAgrupaciones WHERE anio = @anio AND idCC = @idCC AND registroActivo = @registroActivo",
                    parametros = new { anio = objDTO.anio, idCC = objDTO.idCC, registroActivo = true }
                });

                resultado.Add(ITEMS, lstRNAgrupaciones);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "FillRNAgrupaciones", e, AccionEnum.FILLCOMBO, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }
        #endregion
        #endregion

        public Dictionary<string, object> GetDetallePorAgrupacion(int anio, int mes, int idCC)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                var agrupacionesAnioCC = _context.tblAF_CtrllPptalOfCe_CatAgrupaciones.Where(x => x.registroActivo && x.anio == anio && x.idCC == idCC).ToList();
                var agrupacionesAnioCC_id = agrupacionesAnioCC.Select(x => x.id).ToList();
                var conceptos = _context.tblAF_CtrlPptalOfCe_CatConceptos.Where(x => x.registroActivo && agrupacionesAnioCC_id.Contains(x.idAgrupacion)).ToList();
                var meses = new Dictionary<int, string>() {
                    {1, "Enero"},
                    {2, "Febrero"},
                    {3, "Marzo"},
                    {4, "Abril"},
                    {5, "Mayo"},
                    {6, "Junio"},
                    {7, "Julio"},
                    {8, "Agosto"},
                    {9, "Septiembre"},
                    {10, "Octubre"},
                    {11, "Noviembre"},
                    {12, "Diciembre"},
                };

                #region Gastos y presupuestos
                var presupuestos = _context.tblAF_CtrlPptalOfCe_PptoAnual.Where(x => x.registroActivo && x.autorizado && x.anio == anio && x.idCC == idCC).ToList();

                List<tblAF_CtrlPptalOfCe_CapPptos> capturasPresupuesto = new List<tblAF_CtrlPptalOfCe_CapPptos>();
                List<string> ccs = new List<string>();

                foreach (var presupuesto in presupuestos)
                {
                    string cc = presupuesto.idCC.ToString();

                    capturasPresupuesto.AddRange(_context.tblAF_CtrlPptalOfCe_CapPptos.Where(x => x.cc == cc && x.anio == anio && x.registroActivo));

                    ccs.Add(presupuesto.cc);
                }

                #region String para la consulta de múltiples cta-scta-sscta
                var where_cuentas_string = "";

                foreach (var cap in capturasPresupuesto)
                {
                    var listaCuentas = _context.tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas.Where(x => x.registroActivo && x.idConcepto == cap.concepto.idConcepto).ToList();
                    string ctaUltimo = listaCuentas.Count() > 0 ? listaCuentas.Select(s => s.cta + "-" + s.scta + "-" + s.sscta).Last() : null;

                    foreach (var cuenta in listaCuentas)
                    {
                        string ctaActual = cuenta.cta + "-" + cuenta.scta + "-" + cuenta.sscta;
                        where_cuentas_string += string.Format(@"(cta = {0} AND scta = {1} AND sscta = {2})", cuenta.cta, cuenta.scta, cuenta.sscta);

                        if (ctaUltimo != null && ctaUltimo != ctaActual)
                            where_cuentas_string += " OR ";
                    }

                    string strOR = (where_cuentas_string.Substring(where_cuentas_string.Length - 3));
                    if (!(strOR == " OR ") && cap.id != capturasPresupuesto.Last().id)
                        where_cuentas_string += " OR ";
                }

                string strORL = (where_cuentas_string.Substring(where_cuentas_string.Length - 3));
                if (strORL == "OR ")
                {
                    int length = where_cuentas_string.Length - 3;
                    where_cuentas_string = where_cuentas_string.Substring(0, length);
                }

                if (where_cuentas_string != "")
                {
                    where_cuentas_string = " AND (" + where_cuentas_string + ")";
                }
                #endregion

                //List<CuentasStringDTO> cuentasGastos = capturasPresupuesto.Select(x => new CuentasStringDTO
                //{
                //    cuenta = "(cta = " + x.concepto.cta + " AND scta = " + x.concepto.scta + " AND sscta = " + x.concepto.sscta + ")"
                //}).ToList();

                //string where = "";
                //foreach (var ctaGasto in cuentasGastos)
                //{
                //    where += (ctaGasto.cuenta);

                //    if (ctaGasto != cuentasGastos.Last())
                //    {
                //        where += " OR ";
                //    }
                //}

                OdbcConsultaDTO query = new OdbcConsultaDTO();
                query.consulta = string.Format(@"
                    SELECT
                        MOV.cta,
                        MOV.scta,
                        MOV.sscta,
                        MOV.mes,
                        sum(CASE WHEN MOV.cta >= 5000 AND MOV.cta <= 5999 AND scta != 23 THEN monto ELSE 0 END) AS 'gastoMensual'
                    FROM sc_movpol AS MOV
                    WHERE MOV.year = ? AND MOV.mes <= ? {0} AND MOV.cc in {1}
                    GROUP BY MOV.cta, MOV.scta, MOV.sscta, MOV.mes", where_cuentas_string, ccs.Distinct().ToParamInValue());
                query.parametros.Add(new OdbcParameterDTO { nombre = "year", tipo = OdbcType.Int, valor = anio });
                query.parametros.Add(new OdbcParameterDTO { nombre = "mes", tipo = OdbcType.Int, valor = mes });
                query.parametros.AddRange(ccs.Select(x => new OdbcParameterDTO { nombre = "cc", tipo = OdbcType.NVarChar, valor = x }).ToList());

                var gastos = _contextEnkontrol.Select<IngresosGastosDTO>(getEnkontrolEnumADM(), query);
                if (vSesiones.sesionEmpresaActual == 1) gastos.AddRange(_contextEnkontrol.Select<IngresosGastosDTO>(EnkontrolAmbienteEnum.ProdGCPLAN, query));
                #endregion

                var data = new List<InfoDetalleNivelDosInfoPorCC>();

                foreach (var agrupacion in agrupacionesAnioCC)
                {
                    var conceptosAgrupacion = conceptos.Where(x => x.idAgrupacion == agrupacion.id).ToList();
                    var gastoMensualAgrupacion = 0m;
                    var presupuestoMensualAgrupacion = 0m;
                    var gastoAcumuladoAgrupacion = 0m;
                    var presupuestoAcumuladoAgrupacion = 0m;
                    var dataTemp = new List<InfoDetalleNivelDosInfoPorCC>();

                    foreach (var concepto in conceptosAgrupacion)
                    {
                        var capturas = capturasPresupuesto.Where(x => x.idConcepto == concepto.id).ToList();
                        var presupuestoMensual = capturas.Sum(x => Convert.ToDecimal(GetPropValue(x, "importe" + meses[mes])));

                        var listaCuentas = _context.tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas.Where(x => x.registroActivo && x.idConcepto == concepto.idConcepto).ToList();

                        var gastoMensual = gastos.Where(x => listaCuentas.Select(y => y.cta + "-" + y.scta + "-" + y.sscta).Contains(x.cta + "-" + x.scta + "-" + x.sscta) && x.mes == mes).Sum(x => x.gastoMensual);
                        var presupuestoAcumulado = 0m;
                        var gastoAcumulado = 0m;

                        for (int i = 0; i < mes; i++)
                        {
                            presupuestoAcumulado += capturas.Sum(x => Convert.ToDecimal(GetPropValue(x, "importe" + meses[(i + 1)])));
                            gastoAcumulado = gastos.Where(x => listaCuentas.Select(y => y.cta + "-" + y.scta + "-" + y.sscta).Contains(x.cta + "-" + x.scta + "-" + x.sscta) && x.mes == (i + 1)).Sum(x => x.gastoMensual);
                        }

                        dataTemp.Add(new InfoDetalleNivelDosInfoPorCC
                        {
                            id = concepto.id,
                            idCC = idCC,
                            descripcion = concepto.concepto,
                            gastoMensual = gastoMensual,
                            presupuestoMensual = presupuestoMensual,
                            cumplimientoMensual = (presupuestoMensual / (gastoMensual != 0 ? gastoMensual : 1)) * 100,
                            gastoAcumulado = gastoAcumulado,
                            presupuestoAcumulado = presupuestoAcumulado,
                            cumplimientoAcumulado = (presupuestoAcumulado / (gastoAcumulado != 0 ? gastoAcumulado : 1)) * 100,
                            tipo = 2
                        });

                        gastoMensualAgrupacion += gastoMensual;
                        presupuestoMensualAgrupacion += presupuestoMensual;
                        gastoAcumuladoAgrupacion += gastoAcumulado;
                        presupuestoAcumuladoAgrupacion += presupuestoAcumulado;
                    }

                    data.Add(new InfoDetalleNivelDosInfoPorCC
                    {
                        id = agrupacion.id,
                        idCC = idCC,
                        descripcion = agrupacion.nombre,
                        gastoMensual = gastoMensualAgrupacion,
                        presupuestoMensual = presupuestoMensualAgrupacion,
                        cumplimientoMensual = (presupuestoMensualAgrupacion / (gastoMensualAgrupacion != 0 ? gastoMensualAgrupacion : 1)) * 100,
                        gastoAcumulado = gastoAcumuladoAgrupacion,
                        presupuestoAcumulado = presupuestoAcumuladoAgrupacion,
                        cumplimientoAcumulado = (presupuestoAcumuladoAgrupacion / (gastoAcumuladoAgrupacion != 0 ? gastoAcumuladoAgrupacion : 1)) * 100,
                        tipo = 1
                    });
                    data.AddRange(dataTemp);
                }

                resultado.Add("data", data);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetDetallePorAgrupacion", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> GetDetalleAnual(int anio, int mes, int idCC, int tipo, int id)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                var agrupacionesAnioCC = _context.tblAF_CtrllPptalOfCe_CatAgrupaciones.Where(x => x.registroActivo && x.anio == anio && x.idCC == idCC).ToList();
                var agrupacionesAnioCC_id = agrupacionesAnioCC.Select(x => x.id).ToList();
                var conceptos = _context.tblAF_CtrlPptalOfCe_CatConceptos.Where(x => x.registroActivo && agrupacionesAnioCC_id.Contains(x.idAgrupacion)).ToList();
                var meses = new Dictionary<int, string>() {
                    {1, "Enero"},
                    {2, "Febrero"},
                    {3, "Marzo"},
                    {4, "Abril"},
                    {5, "Mayo"},
                    {6, "Junio"},
                    {7, "Julio"},
                    {8, "Agosto"},
                    {9, "Septiembre"},
                    {10, "Octubre"},
                    {11, "Noviembre"},
                    {12, "Diciembre"},
                };

                #region Gastos y presupuestos
                var presupuestos = _context.tblAF_CtrlPptalOfCe_PptoAnual.Where(x => x.registroActivo && x.autorizado && x.anio == anio && x.idCC == idCC).ToList();

                List<tblAF_CtrlPptalOfCe_CapPptos> capturasPresupuesto = new List<tblAF_CtrlPptalOfCe_CapPptos>();
                List<string> ccs = new List<string>();

                foreach (var presupuesto in presupuestos)
                {
                    string cc = presupuesto.idCC.ToString();

                    capturasPresupuesto.AddRange(_context.tblAF_CtrlPptalOfCe_CapPptos.Where(x => x.cc == cc && x.anio == anio && x.registroActivo));

                    ccs.Add(presupuesto.cc);
                }

                #region String para la consulta de múltiples cta-scta-sscta
                var where_cuentas_string = "";

                foreach (var cap in capturasPresupuesto)
                {
                    var listaCuentas = _context.tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas.Where(x => x.registroActivo && x.idConcepto == cap.concepto.idConcepto).ToList();
                    string ctaUltimo = listaCuentas.Count() > 0 ? listaCuentas.Select(s => s.cta + "-" + s.scta + "-" + s.sscta).Last() : null;

                    foreach (var cuenta in listaCuentas)
                    {
                        string ctaActual = cuenta.cta + "-" + cuenta.scta + "-" + cuenta.sscta;
                        where_cuentas_string += string.Format(@"(cta = {0} AND scta = {1} AND sscta = {2})", cuenta.cta, cuenta.scta, cuenta.sscta);

                        if (ctaUltimo != null && ctaUltimo != ctaActual)
                            where_cuentas_string += " OR ";
                    }

                    string strOR = (where_cuentas_string.Substring(where_cuentas_string.Length - 3));
                    if (!(strOR == " OR ") && cap.id != capturasPresupuesto.Last().id)
                        where_cuentas_string += " OR ";
                }

                string strORL = (where_cuentas_string.Substring(where_cuentas_string.Length - 3));
                if (strORL == "OR ")
                {
                    int length = where_cuentas_string.Length - 3;
                    where_cuentas_string = where_cuentas_string.Substring(0, length);
                }

                if (where_cuentas_string != "")
                    where_cuentas_string = " AND (" + where_cuentas_string + ")";
                #endregion

                //List<CuentasStringDTO> cuentasGastos = capturasPresupuesto.Select(x => new CuentasStringDTO
                //{
                //    cuenta = "(cta = " + x.concepto.cta + " AND scta = " + x.concepto.scta + " AND sscta = " + x.concepto.sscta + ")"
                //}).ToList();

                //string where = "";
                //foreach (var ctaGasto in cuentasGastos)
                //{
                //    where += (ctaGasto.cuenta);

                //    if (ctaGasto != cuentasGastos.Last())
                //    {
                //        where += " OR ";
                //    }
                //}

                OdbcConsultaDTO query = new OdbcConsultaDTO();
                query.consulta = string.Format(@"
                    SELECT
                        MOV.cta,
                        MOV.scta,
                        MOV.sscta,
                        MOV.mes,
                        sum(CASE WHEN MOV.cta >= 5000 AND MOV.cta <= 5999 AND scta != 23 THEN monto ELSE 0 END) AS 'gastoMensual'
                    FROM sc_movpol AS MOV
                    WHERE MOV.year = ? AND MOV.mes <= ? {0} AND MOV.cc in {1}
                    GROUP BY MOV.cta, MOV.scta, MOV.sscta, MOV.mes", where_cuentas_string, ccs.Distinct().ToParamInValue());
                query.parametros.Add(new OdbcParameterDTO { nombre = "year", tipo = OdbcType.Int, valor = anio });
                query.parametros.Add(new OdbcParameterDTO { nombre = "mes", tipo = OdbcType.Int, valor = mes });
                query.parametros.AddRange(ccs.Select(x => new OdbcParameterDTO { nombre = "cc", tipo = OdbcType.NVarChar, valor = x }).ToList());

                var gastos = _contextEnkontrol.Select<IngresosGastosDTO>(getEnkontrolEnumADM(), query);
                if (vSesiones.sesionEmpresaActual == 1) gastos.AddRange(_contextEnkontrol.Select<IngresosGastosDTO>(EnkontrolAmbienteEnum.ProdGCPLAN, query));
                #endregion

                var data = new List<InfoDetalleNivelDosInfoPorCC>();

                foreach (var agrupacion in agrupacionesAnioCC)
                {
                    var conceptosAgrupacion = conceptos.Where(x => x.idAgrupacion == agrupacion.id).ToList();
                    var gastoEneroAgrupacion = 0m;
                    var presupuestoEneroAgrupacion = 0m;
                    var gastoFebreroAgrupacion = 0m;
                    var presupuestoFebreroAgrupacion = 0m;
                    var gastoMarzoAgrupacion = 0m;
                    var presupuestoMarzoAgrupacion = 0m;
                    var gastoAbrilAgrupacion = 0m;
                    var presupuestoAbrilAgrupacion = 0m;
                    var gastoMayoAgrupacion = 0m;
                    var presupuestoMayoAgrupacion = 0m;
                    var gastoJunioAgrupacion = 0m;
                    var presupuestoJunioAgrupacion = 0m;
                    var gastoJulioAgrupacion = 0m;
                    var presupuestoJulioAgrupacion = 0m;
                    var gastoAgostoAgrupacion = 0m;
                    var presupuestoAgostoAgrupacion = 0m;
                    var gastoSeptiembreAgrupacion = 0m;
                    var presupuestoSeptiembreAgrupacion = 0m;
                    var gastoOctubreAgrupacion = 0m;
                    var presupuestoOctubreAgrupacion = 0m;
                    var gastoNoviembreAgrupacion = 0m;
                    var presupuestoNoviembreAgrupacion = 0m;
                    var gastoDiciembreAgrupacion = 0m;
                    var presupuestoDiciembreAgrupacion = 0m;
                    var dataTemp = new List<InfoDetalleNivelDosInfoPorCC>();

                    foreach (var concepto in conceptosAgrupacion)
                    {
                        var listaCuentas = _context.tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas.Where(x => x.registroActivo && x.idConcepto == concepto.idConcepto).ToList();
                        var capturas = capturasPresupuesto.Where(x => x.idConcepto == concepto.id).ToList();
                        var conceptoData = new InfoDetalleNivelDosInfoPorCC
                        {
                            id = concepto.id,
                            descripcion = concepto.concepto,
                            presupuestoEnero = capturas.Sum(x => Convert.ToDecimal(GetPropValue(x, "importe" + meses[1]))),
                            gastoEnero = gastos.Where(x => listaCuentas.Select(y => y.cta + "-" + y.scta + "-" + y.sscta).Contains(x.cta + "-" + x.scta + "-" + x.sscta) && x.mes == 1).Sum(x => x.gastoMensual),
                            presupuestoFebrero = capturas.Sum(x => Convert.ToDecimal(GetPropValue(x, "importe" + meses[2]))),
                            gastoFebrero = gastos.Where(x => listaCuentas.Select(y => y.cta + "-" + y.scta + "-" + y.sscta).Contains(x.cta + "-" + x.scta + "-" + x.sscta) && x.mes == 2).Sum(x => x.gastoMensual),
                            presupuestoMarzo = capturas.Sum(x => Convert.ToDecimal(GetPropValue(x, "importe" + meses[3]))),
                            gastoMarzo = gastos.Where(x => listaCuentas.Select(y => y.cta + "-" + y.scta + "-" + y.sscta).Contains(x.cta + "-" + x.scta + "-" + x.sscta) && x.mes == 3).Sum(x => x.gastoMensual),
                            presupuestoAbril = capturas.Sum(x => Convert.ToDecimal(GetPropValue(x, "importe" + meses[4]))),
                            gastoAbril = gastos.Where(x => listaCuentas.Select(y => y.cta + "-" + y.scta + "-" + y.sscta).Contains(x.cta + "-" + x.scta + "-" + x.sscta) && x.mes == 4).Sum(x => x.gastoMensual),
                            presupuestoMayo = capturas.Sum(x => Convert.ToDecimal(GetPropValue(x, "importe" + meses[5]))),
                            gastoMayo = gastos.Where(x => listaCuentas.Select(y => y.cta + "-" + y.scta + "-" + y.sscta).Contains(x.cta + "-" + x.scta + "-" + x.sscta) && x.mes == 5).Sum(x => x.gastoMensual),
                            presupuestoJunio = capturas.Sum(x => Convert.ToDecimal(GetPropValue(x, "importe" + meses[6]))),
                            gastoJunio = gastos.Where(x => listaCuentas.Select(y => y.cta + "-" + y.scta + "-" + y.sscta).Contains(x.cta + "-" + x.scta + "-" + x.sscta) && x.mes == 6).Sum(x => x.gastoMensual),
                            presupuestoJulio = capturas.Sum(x => Convert.ToDecimal(GetPropValue(x, "importe" + meses[7]))),
                            gastoJulio = gastos.Where(x => listaCuentas.Select(y => y.cta + "-" + y.scta + "-" + y.sscta).Contains(x.cta + "-" + x.scta + "-" + x.sscta) && x.mes == 7).Sum(x => x.gastoMensual),
                            presupuestoAgosto = capturas.Sum(x => Convert.ToDecimal(GetPropValue(x, "importe" + meses[8]))),
                            gastoAgosto = gastos.Where(x => listaCuentas.Select(y => y.cta + "-" + y.scta + "-" + y.sscta).Contains(x.cta + "-" + x.scta + "-" + x.sscta) && x.mes == 8).Sum(x => x.gastoMensual),
                            presupuestoSeptiembre = capturas.Sum(x => Convert.ToDecimal(GetPropValue(x, "importe" + meses[9]))),
                            gastoSeptiembre = gastos.Where(x => listaCuentas.Select(y => y.cta + "-" + y.scta + "-" + y.sscta).Contains(x.cta + "-" + x.scta + "-" + x.sscta) && x.mes == 9).Sum(x => x.gastoMensual),
                            presupuestoOctubre = capturas.Sum(x => Convert.ToDecimal(GetPropValue(x, "importe" + meses[10]))),
                            gastoOctubre = gastos.Where(x => listaCuentas.Select(y => y.cta + "-" + y.scta + "-" + y.sscta).Contains(x.cta + "-" + x.scta + "-" + x.sscta) && x.mes == 10).Sum(x => x.gastoMensual),
                            presupuestoNoviembre = capturas.Sum(x => Convert.ToDecimal(GetPropValue(x, "importe" + meses[11]))),
                            gastoNoviembre = gastos.Where(x => listaCuentas.Select(y => y.cta + "-" + y.scta + "-" + y.sscta).Contains(x.cta + "-" + x.scta + "-" + x.sscta) && x.mes == 11).Sum(x => x.gastoMensual),
                            presupuestoDiciembre = capturas.Sum(x => Convert.ToDecimal(GetPropValue(x, "importe" + meses[12]))),
                            gastoDiciembre = gastos.Where(x => listaCuentas.Select(y => y.cta + "-" + y.scta + "-" + y.sscta).Contains(x.cta + "-" + x.scta + "-" + x.sscta) && x.mes == 12).Sum(x => x.gastoMensual),
                            tipo = 2
                        };

                        dataTemp.Add(conceptoData);

                        gastoEneroAgrupacion += conceptoData.gastoEnero;
                        presupuestoEneroAgrupacion += conceptoData.presupuestoEnero;
                        gastoFebreroAgrupacion += conceptoData.gastoFebrero;
                        presupuestoFebreroAgrupacion += conceptoData.presupuestoFebrero;
                        gastoMarzoAgrupacion += conceptoData.gastoMarzo;
                        presupuestoMarzoAgrupacion += conceptoData.presupuestoMarzo;
                        gastoAbrilAgrupacion += conceptoData.gastoAbril;
                        presupuestoAbrilAgrupacion += conceptoData.presupuestoAbril;
                        gastoMayoAgrupacion += conceptoData.gastoMayo;
                        presupuestoMayoAgrupacion += conceptoData.presupuestoMayo;
                        gastoJunioAgrupacion += conceptoData.gastoJunio;
                        presupuestoJunioAgrupacion += conceptoData.presupuestoJunio;
                        gastoJulioAgrupacion += conceptoData.gastoJulio;
                        presupuestoJulioAgrupacion += conceptoData.presupuestoJulio;
                        gastoAgostoAgrupacion += conceptoData.gastoAgosto;
                        presupuestoAgostoAgrupacion += conceptoData.presupuestoAgosto;
                        gastoSeptiembreAgrupacion += conceptoData.gastoSeptiembre;
                        presupuestoSeptiembreAgrupacion += conceptoData.presupuestoSeptiembre;
                        gastoOctubreAgrupacion += conceptoData.gastoOctubre;
                        presupuestoOctubreAgrupacion += conceptoData.presupuestoOctubre;
                        gastoNoviembreAgrupacion += conceptoData.gastoNoviembre;
                        presupuestoNoviembreAgrupacion += conceptoData.presupuestoNoviembre;
                        gastoDiciembreAgrupacion += conceptoData.gastoDiciembre;
                        presupuestoDiciembreAgrupacion += conceptoData.presupuestoDiciembre;
                    }

                    data.Add(new InfoDetalleNivelDosInfoPorCC
                    {
                        id = agrupacion.id,
                        descripcion = agrupacion.nombre,
                        gastoEnero = gastoEneroAgrupacion,
                        presupuestoEnero = presupuestoEneroAgrupacion,
                        gastoFebrero = gastoFebreroAgrupacion,
                        presupuestoFebrero = presupuestoFebreroAgrupacion,
                        gastoMarzo = gastoMarzoAgrupacion,
                        presupuestoMarzo = presupuestoMarzoAgrupacion,
                        gastoAbril = gastoAbrilAgrupacion,
                        presupuestoAbril = presupuestoAbrilAgrupacion,
                        gastoMayo = gastoMayoAgrupacion,
                        presupuestoMayo = presupuestoMayoAgrupacion,
                        gastoJunio = gastoJunioAgrupacion,
                        presupuestoJunio = presupuestoJunioAgrupacion,
                        gastoJulio = gastoJulioAgrupacion,
                        presupuestoJulio = presupuestoJulioAgrupacion,
                        gastoAgosto = gastoAgostoAgrupacion,
                        presupuestoAgosto = presupuestoAgostoAgrupacion,
                        gastoSeptiembre = gastoSeptiembreAgrupacion,
                        presupuestoSeptiembre = presupuestoSeptiembreAgrupacion,
                        gastoOctubre = gastoOctubreAgrupacion,
                        presupuestoOctubre = presupuestoOctubreAgrupacion,
                        gastoNoviembre = gastoNoviembreAgrupacion,
                        presupuestoNoviembre = presupuestoNoviembreAgrupacion,
                        gastoDiciembre = gastoDiciembreAgrupacion,
                        presupuestoDiciembre = presupuestoDiciembreAgrupacion,
                        tipo = 1
                    });
                    data.AddRange(dataTemp);
                }

                resultado.Add("data", data.Where(x => x.tipo == tipo && x.id == id).ToList());
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetDetallePorAgrupacion", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public static object GetPropValue(object src, string propName)
        {
            return src.GetType().GetProperty(propName).GetValue(src, null);
        }

        public Dictionary<string, object> CrearComentario(ComentarioDTO objDTO)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                resultado = new Dictionary<string, object>();
                try
                {
                    #region SE REGISTRA COMENTARIO
                    tblAF_CtrlPptalOfCe_Comentarios obj = new tblAF_CtrlPptalOfCe_Comentarios();
                    obj.anio = objDTO.anio;
                    obj.idCC = objDTO.idCC;
                    obj.idConcepto = objDTO.idConcepto;
                    obj.comentario = objDTO.comentario;
                    obj.idMes = objDTO.idMes;
                    obj.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                    obj.fechaCreacion = DateTime.Now;
                    obj.registroActivo = true;
                    _context.tblAF_CtrlPptalOfCe_Comentarios.Add(obj);
                    _context.SaveChanges();
                    #endregion

                    resultado.Add(SUCCESS, true);
                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "CrearComentario", e, AccionEnum.CONSULTA, 0, 0);
                    resultado.Add(MESSAGE, e.Message);
                    resultado.Add(SUCCESS, false);
                }
            }
            return resultado;
        }

        public Dictionary<string, object> GetComentarios(ComentarioDTO objDTO)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region SE OBTIENE COMENTARIOS EN BASE AL AÑO, CC Y MES
                List<ComentarioDTO> lstComentarios = _context.Select<ComentarioDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"
                        SELECT
                            t1.fechaCreacion, t2.nombre + ' ' + t2.apellidoPaterno AS usuarioNombre, t1.comentario, t1.idConcepto
	                    FROM tblAF_CtrlPptalOfCe_Comentarios AS t1
	                        INNER JOIN tblP_Usuario AS t2 ON t1.idUsuarioCreacion = t2.id
		                WHERE t1.anio = @anio AND t1.idCC = @idCC AND t1.registroActivo = @registroActivo AND t1.idMes = @idMes AND t1.idConcepto = @idConcepto",
                    parametros = new { anio = objDTO.anio, idCC = objDTO.idCC, registroActivo = true, idMes = objDTO.idMes, idConcepto = objDTO.idConcepto }
                }).ToList();
                foreach (var item in lstComentarios)
                {
                    int dd = item.fechaCreacion.Day;
                    int MM = item.fechaCreacion.Month;
                    int yyyy = item.fechaCreacion.Year;

                    DateTime fecha = new DateTime(yyyy, MM, dd);
                    item.fecha = fecha.ToString();
                }

                resultado.Add("lstComentarios", lstComentarios);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> GetCtasPolizas(int idCC, int anio, int idMes, int idConcepto, int empresa, bool costosAdministrativos, bool esConsultaMensual)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                using (var _ctxArre = new MainContext(empresa == vSesiones.sesionEmpresaActual ? EmpresaEnum.Construplan : EmpresaEnum.Arrendadora))
                {
                    if (esConsultaMensual)
                    {
                        #region VALIDACIONES
                        if (idCC <= 0) throw new Exception("Ocurrió un error al obtener los resultados.");
                        if (anio <= 0) throw new Exception("Ocurrió un error al obtener los resultados.");
                        if (idMes <= 0) throw new Exception("Ocurrió un error al obtener los resultados.");
                        //if (idConcepto <= 0) throw new Exception("Ocurrió un error al obtener los resultados.");
                        #endregion

                        #region SE CONSTRUYE CONSULTA PARA OBTENER GASTOS DEL CONCEPTO
                        tblP_CC objCC = _ctxArre.tblP_CC.Where(w => w.id == idCC).FirstOrDefault();
                        if (string.IsNullOrEmpty(objCC.cc))
                            throw new Exception("Ocurrió un error al obtener los resultados.");

                        var lstCtas = new List<tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas>();
                        var catalogoCuentas = new List<string>();
                        string strCtas = string.Empty;
                        var cuentasEnkontrol = new List<CuentasEnkontrolDTO>();

                        if (idConcepto == -1)
                        {
                            var capPptos = _ctxArre.tblAF_CtrlPptalOfCe_CapPptos
                            .Where(x =>
                                x.cc == idCC.ToString() &&
                                x.anio == anio &&
                                x.registroActivo).ToList();

                            var idConceptosPptos = capPptos.Select(x => x.idConcepto).ToList();

                            var catConceptos = _ctxArre.tblAF_CtrlPptalOfCe_CatConceptos.Where(x => idConceptosPptos.Contains(x.id)).Select(x => x.idConcepto).ToList();
                            var cuentasConcepto = _ctxArre.tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas.Where(x => catConceptos.Contains(x.idConcepto)).ToList();

                            foreach (var item in cuentasConcepto)
                            {
                                catalogoCuentas.Add(item.cta + "-" + item.scta + "-" + item.sscta);
                            }

                            List<int> ccBajio = new List<int> { 34, 36, 38, 97 };

                            var query_sinCatalogar = new OdbcConsultaDTO();
                            query_sinCatalogar.consulta = string.Format("SELECT DISTINCT CAST(cta as varchar(4)) + '-' + CAST(scta as varchar(4)) + '-' + CAST(sscta as varchar(4)) AS cuenta FROM catcta WHERE scta != 23 AND cta IN (5280 {0})", (((empresa == 2 && !costosAdministrativos) || (empresa == 1 && ccBajio.Contains(idCC))) ? ", 5000" : ""));
                            cuentasEnkontrol = _contextEnkontrol.Select<CuentasEnkontrolDTO>((empresa == 1 ? EnkontrolAmbienteEnum.ProdCPLAN : EnkontrolAmbienteEnum.ProdARREND), query_sinCatalogar);

                            cuentasEnkontrol.RemoveAll(x => catalogoCuentas.Contains(x.cuenta));

                            strCtas = "";
                            if (cuentasEnkontrol.Count == 0)
                            {
                                strCtas = "1 = 2";
                            }
                            else
                            {
                                strCtas = string.Format("((CAST(cta as varchar(4)) + '-' + CAST(scta as varchar(4)) + '-' + CAST(sscta as varchar(4))) IN {0})", cuentasEnkontrol.Select(x => x.cuenta).ToList().ToParamInValue());
                            }
                        }
                        else
                        {
                            lstCtas = _ctxArre.tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas.Where(w => w.idConcepto == idConcepto && w.registroActivo).ToList();

                            foreach (var item in lstCtas)
                            {
                                string ultimaCta = lstCtas.Count() > 0 ? lstCtas.Select(s => s.cta + "-" + s.scta + "-" + s.sscta).Last() : null;
                                string actualCta = item.cta + "-" + item.sscta + "-" + item.sscta;
                                strCtas += string.Format(@"(cta = {0} AND scta = {1} AND sscta = {2})", item.cta, item.scta, item.sscta);
                                if (ultimaCta != null && ultimaCta != actualCta)
                                    strCtas += " OR ";
                            }

                            if (string.IsNullOrEmpty(strCtas))
                            {
                                resultado.Add(SUCCESS, true);
                                resultado.Add("lstGastos", new List<IngresosGastosDTO>());
                                return resultado;
                            }
                            string strOR = (strCtas.Substring(strCtas.Length - 3));
                            if (strOR == "OR ")
                            {
                                int length = strCtas.Length - 3;
                                strCtas = strCtas.Substring(0, length);
                            }
                            strCtas = string.Format("{0}{1}{2}", "(", strCtas, ")");
                        }
                        #endregion

                        #region SE OBTIENE LOS GASTOS DEL CONCEPTO SELECCIONADO
                        OdbcConsultaDTO strQuery = new OdbcConsultaDTO();
                        if (empresa == 1)
                        {
                            #region CONSTRUPLAN
                            if (!string.IsNullOrEmpty(strCtas))
                            {
                                strQuery.consulta = string.Format(@"SELECT (CAST(MOV.year as varchar(10)) + '-' + CAST(MOV.mes as varchar(10)) + '-' + CAST(MOV.poliza as varchar(10)) + '-' + MOV.tp) AS poliza, MOV.linea, MOV.concepto, MOV.cta, MOV.scta, MOV.sscta, MOV.mes, MOV.monto AS 'gastoMensual', MOV.poliza as pPoliza
                                                FROM sc_movpol AS MOV
                                                    WHERE MOV.year = {0} AND MOV.mes = {1} AND MOV.cc = '{2}' AND {3}
                                                        ", anio, idMes, objCC.cc, strCtas);
                            }
                            else
                            {
                                strQuery.consulta = string.Format(@"SELECT (CAST(MOV.year as varchar(10)) + '-' + CAST(MOV.mes as varchar(10)) + '-' + CAST(MOV.poliza as varchar(10)) + '-' + MOV.tp) AS poliza, MOV.linea, MOV.concepto, MOV.cta, MOV.scta, MOV.sscta, MOV.mes, MOV.monto AS 'gastoMensual', MOV.poliza as pPoliza
                                                FROM sc_movpol AS MOV
                                                    WHERE MOV.year = {0} AND MOV.mes = {1} AND MOV.cc = '{2}'
                                                        ", anio, idMes, objCC.cc);
                            }
                            #endregion
                        }
                        else
                        {
                            #region ARRENDADORA
                            if (!string.IsNullOrEmpty(strCtas))
                            {
                                strQuery.consulta = string.Format(@"SELECT (CAST(MOV.year as varchar(10)) + '-' + CAST(MOV.mes as varchar(10)) + '-' + CAST(MOV.poliza as varchar(10)) + '-' + MOV.tp) AS poliza, MOV.linea, MOV.concepto, MOV.cta, MOV.scta, MOV.sscta, MOV.mes, MOV.monto AS 'gastoMensual', MOV.poliza as pPoliza
                                                        FROM sc_movpol AS MOV
                                                            WHERE MOV.year = {0} AND MOV.mes = {1} AND MOV.area = {2} AND cuenta_oc = {3} AND {4}
                                                                ", anio, idMes, objCC.area, objCC.cuenta, strCtas);
                            }
                            else
                            {
                                strQuery.consulta = string.Format(@"SELECT (CAST(MOV.year as varchar(10)) + '-' + CAST(MOV.mes as varchar(10)) + '-' + CAST(MOV.poliza as varchar(10)) + '-' + MOV.tp) AS poliza, MOV.linea, MOV.concepto, MOV.cta, MOV.scta, MOV.sscta, MOV.mes, MOV.monto AS 'gastoMensual', MOV.poliza as pPoliza
                                                                    FROM sc_movpol AS MOV
                                                                        WHERE MOV.year = {0} AND MOV.mes = {1} AND MOV.area = {2} AND cuenta_oc = {3}
                                                                            ", anio, idMes, objCC.area, objCC.cuenta);
                            }
                            #endregion
                        }

                        if (idConcepto == -1)
                        {
                            if (cuentasEnkontrol.Count > 0)
                            {
                                strQuery.parametros.AddRange(cuentasEnkontrol.Select(x => new OdbcParameterDTO
                                {
                                    nombre = "cuenta",
                                    tipo = OdbcType.NVarChar,
                                    valor = x.cuenta
                                }).ToList());
                            }
                        }
                        List<IngresosGastosDTO> lstGastos = _contextEnkontrol.Select<IngresosGastosDTO>((empresa == 1 ? EnkontrolAmbienteEnum.ProdCPLAN : EnkontrolAmbienteEnum.ProdARREND), strQuery);
                        if(vSesiones.sesionEmpresaActual == 1) lstGastos.AddRange(_contextEnkontrol.Select<IngresosGastosDTO>(EnkontrolAmbienteEnum.ProdGCPLAN, strQuery));

                        foreach (var item in lstGastos)
                        {
                            if (empresa == 1)
                                item.cc = "[" + objCC.cc + "]" + " " + objCC.descripcion;
                            else
                                item.cc = "[" + objCC.area + " - " + objCC.cuenta + "]" + " " + objCC.descripcion;

                            switch (item.mes)
                            {
                                case 1:
                                    item.mesTexto = "ENERO";
                                    break;
                                case 2:
                                    item.mesTexto = "FEBRERO";
                                    break;
                                case 3:
                                    item.mesTexto = "MARZO";
                                    break;
                                case 4:
                                    item.mesTexto = "ABRIL";
                                    break;
                                case 5:
                                    item.mesTexto = "MAYO";
                                    break;
                                case 6:
                                    item.mesTexto = "JUNIO";
                                    break;
                                case 7:
                                    item.mesTexto = "JULIO";
                                    break;
                                case 8:
                                    item.mesTexto = "AGOSTO";
                                    break;
                                case 9:
                                    item.mesTexto = "SEPTIEMBRE";
                                    break;
                                case 10:
                                    item.mesTexto = "OCTUBRE";
                                    break;
                                case 11:
                                    item.mesTexto = "NOVIEMBRE";
                                    break;
                                case 12:
                                    item.mesTexto = "DICIEMBRE";
                                    break;
                                default:
                                    break;
                            }
                        }

                        resultado.Add(SUCCESS, true);
                        resultado.Add("lstGastos", lstGastos);
                        #endregion
                    }
                    else
                    {
                        #region VALIDACIONES
                        if (idCC <= 0) throw new Exception("Ocurrió un error al obtener los resultados.");
                        if (anio <= 0) throw new Exception("Ocurrió un error al obtener los resultados.");
                        #endregion

                        #region SE CONSTRUYE CONSULTA PARA OBTENER GASTOS DEL CONCEPTO
                        List<int> lstMeses = new List<int>();
                        for (int i = 1; i <= idMes; i++)
                        {
                            lstMeses.Add(i);
                        }

                        tblP_CC objCC = _ctxArre.tblP_CC.Where(w => w.id == idCC).FirstOrDefault();
                        if (string.IsNullOrEmpty(objCC.cc))
                            throw new Exception("Ocurrió un error al obtener los resultados.");

                        var lstCtas = new List<tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas>();
                        var catalogoCuentas = new List<string>();
                        string strCtas = string.Empty;
                        var cuentasEnkontrol = new List<CuentasEnkontrolDTO>();

                        if (idConcepto == -1)
                        {
                            var capPptos = _ctxArre.tblAF_CtrlPptalOfCe_CapPptos.Where(x => x.cc == idCC.ToString() && x.anio == anio && x.registroActivo).ToList();
                            var idConceptosPptos = capPptos.Select(x => x.idConcepto).ToList();
                            var catConceptos = _ctxArre.tblAF_CtrlPptalOfCe_CatConceptos.Where(x => idConceptosPptos.Contains(x.id)).Select(x => x.idConcepto).ToList();
                            var cuentasConcepto = _ctxArre.tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas.Where(x => catConceptos.Contains(x.idConcepto)).ToList();

                            foreach (var item in cuentasConcepto)
                            {
                                catalogoCuentas.Add(item.cta + "-" + item.scta + "-" + item.sscta);
                            }

                            List<int> ccBajio = new List<int> { 34, 36, 38, 97 };

                            var query_sinCatalogar = new OdbcConsultaDTO();
                            query_sinCatalogar.consulta = string.Format("SELECT DISTINCT CAST(cta as varchar(4)) + '-' + CAST(scta as varchar(4)) + '-' + CAST(sscta as varchar(4)) AS cuenta FROM catcta WHERE scta != 23 AND cta IN (5280 {0})", (((empresa == 2 && !costosAdministrativos) || (empresa == 1 && ccBajio.Contains(idCC))) ? ", 5000" : ""));
                            cuentasEnkontrol = _contextEnkontrol.Select<CuentasEnkontrolDTO>((empresa == 1 ? EnkontrolAmbienteEnum.ProdCPLAN : EnkontrolAmbienteEnum.ProdARREND), query_sinCatalogar);

                            cuentasEnkontrol.RemoveAll(x => catalogoCuentas.Contains(x.cuenta));

                            strCtas = "";
                            if (cuentasEnkontrol.Count == 0)
                            {
                                strCtas = "1 = 2";
                            }
                            else
                            {
                                strCtas = string.Format("((CAST(cta as varchar(4)) + '-' + CAST(scta as varchar(4)) + '-' + CAST(sscta as varchar(4))) IN {0})", cuentasEnkontrol.Select(x => x.cuenta).ToList().ToParamInValue());
                            }
                        }
                        else
                        {
                            lstCtas = _ctxArre.tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas.Where(w => w.idConcepto == idConcepto && w.registroActivo).ToList();

                            foreach (var item in lstCtas)
                            {
                                string ultimaCta = lstCtas.Count() > 0 ? lstCtas.Select(s => s.cta + "-" + s.scta + "-" + s.sscta).Last() : null;
                                string actualCta = item.cta + "-" + item.sscta + "-" + item.sscta;
                                strCtas += string.Format(@"(cta = {0} AND scta = {1} AND sscta = {2})", item.cta, item.scta, item.sscta);
                                if (ultimaCta != null && ultimaCta != actualCta)
                                    strCtas += " OR ";
                            }

                            if (string.IsNullOrEmpty(strCtas))
                            {
                                resultado.Add(SUCCESS, true);
                                resultado.Add("lstGastos", new List<IngresosGastosDTO>());
                                return resultado;
                            }
                            string strOR = (strCtas.Substring(strCtas.Length - 3));
                            if (strOR == "OR ")
                            {
                                int length = strCtas.Length - 3;
                                strCtas = strCtas.Substring(0, length);
                            }
                            strCtas = string.Format("{0}{1}{2}", "(", strCtas, ")");
                        }
                        #endregion

                        #region SE OBTIENE LOS GASTOS DEL CONCEPTO SELECCIONADO
                        OdbcConsultaDTO strQuery = new OdbcConsultaDTO();
                        if (empresa == 1)
                        {
                            #region CONSTRUPLAN
                            if (!string.IsNullOrEmpty(strCtas))
                            {
                                strQuery.consulta = string.Format(@"SELECT (CAST(MOV.year as varchar(10)) + '-' + CAST(MOV.mes as varchar(10)) + '-' + CAST(MOV.poliza as varchar(10)) + '-' + MOV.tp) AS poliza, MOV.linea, MOV.concepto, MOV.cta, MOV.scta, MOV.sscta, MOV.mes, MOV.monto AS 'gastoMensual', MOV.poliza as pPoliza
                                                FROM sc_movpol AS MOV
                                                    WHERE MOV.year = {0} AND MOV.mes IN ({1}) AND MOV.cc = '{2}' AND {3}
                                                        ", anio, string.Join(",", lstMeses), objCC.cc, strCtas);
                            }
                            else
                            {
                                strQuery.consulta = string.Format(@"SELECT (CAST(MOV.year as varchar(10)) + '-' + CAST(MOV.mes as varchar(10)) + '-' + CAST(MOV.poliza as varchar(10)) + '-' + MOV.tp) AS poliza, MOV.linea, MOV.concepto, MOV.cta, MOV.scta, MOV.sscta, MOV.mes, MOV.monto AS 'gastoMensual', MOV.poliza as pPoliza
                                                FROM sc_movpol AS MOV
                                                    WHERE MOV.year = {0} AND MOV.mes IN ({1}) AND MOV.cc = '{2}'
                                                        ", anio, string.Join(",", lstMeses), objCC.cc);
                            }
                            #endregion
                        }
                        else
                        {
                            #region ARRENDADORA
                            if (!string.IsNullOrEmpty(strCtas))
                            {
                                strQuery.consulta = string.Format(@"SELECT (CAST(MOV.year as varchar(10)) + '-' + CAST(MOV.mes as varchar(10)) + '-' + CAST(MOV.poliza as varchar(10)) + '-' + MOV.tp) AS poliza, MOV.linea, MOV.concepto, MOV.cta, MOV.scta, MOV.sscta, MOV.mes, MOV.monto AS 'gastoMensual', MOV.poliza as pPoliza
                                                        FROM sc_movpol AS MOV
                                                            WHERE MOV.year = {0} AND MOV.mes IN ({1}) AND MOV.area = {2} AND cuenta_oc = {3} AND {4}
                                                                ", anio, string.Join(",", lstMeses), objCC.area, objCC.cuenta, strCtas);
                            }
                            else
                            {
                                strQuery.consulta = string.Format(@"SELECT (CAST(MOV.year as varchar(10)) + '-' + CAST(MOV.mes as varchar(10)) + '-' + CAST(MOV.poliza as varchar(10)) + '-' + MOV.tp) AS poliza, MOV.linea, MOV.concepto, MOV.cta, MOV.scta, MOV.sscta, MOV.mes, MOV.monto AS 'gastoMensual', MOV.poliza as pPoliza
                                                                    FROM sc_movpol AS MOV
                                                                        WHERE MOV.year = {0} AND MOV.mes IN ({1}) AND MOV.area = {2} AND cuenta_oc = {3}
                                                                            ", anio, string.Join(",", lstMeses), objCC.area, objCC.cuenta);
                            }
                            #endregion
                        }

                        if (idConcepto == -1)
                        {
                            if (cuentasEnkontrol.Count > 0)
                            {
                                strQuery.parametros.AddRange(cuentasEnkontrol.Select(x => new OdbcParameterDTO
                                {
                                    nombre = "cuenta",
                                    tipo = OdbcType.NVarChar,
                                    valor = x.cuenta
                                }).ToList());
                            }
                        }
                        List<IngresosGastosDTO> lstGastos = _contextEnkontrol.Select<IngresosGastosDTO>((empresa == 1 ? EnkontrolAmbienteEnum.ProdCPLAN : EnkontrolAmbienteEnum.ProdARREND), strQuery);
                        if (vSesiones.sesionEmpresaActual == 1) lstGastos.AddRange(_contextEnkontrol.Select<IngresosGastosDTO>(EnkontrolAmbienteEnum.ProdGCPLAN, strQuery));

                        foreach (var item in lstGastos)
                        {
                            if (empresa == 1)
                                item.cc = "[" + objCC.cc + "]" + " " + objCC.descripcion;
                            else
                                item.cc = "[" + objCC.area + " - " + objCC.cuenta + "]" + " " + objCC.descripcion;

                            switch (item.mes)
                            {
                                case 1:
                                    item.mesTexto = "ENERO";
                                    break;
                                case 2:
                                    item.mesTexto = "FEBRERO";
                                    break;
                                case 3:
                                    item.mesTexto = "MARZO";
                                    break;
                                case 4:
                                    item.mesTexto = "ABRIL";
                                    break;
                                case 5:
                                    item.mesTexto = "MAYO";
                                    break;
                                case 6:
                                    item.mesTexto = "JUNIO";
                                    break;
                                case 7:
                                    item.mesTexto = "JULIO";
                                    break;
                                case 8:
                                    item.mesTexto = "AGOSTO";
                                    break;
                                case 9:
                                    item.mesTexto = "SEPTIEMBRE";
                                    break;
                                case 10:
                                    item.mesTexto = "OCTUBRE";
                                    break;
                                case 11:
                                    item.mesTexto = "NOVIEMBRE";
                                    break;
                                case 12:
                                    item.mesTexto = "DICIEMBRE";
                                    break;
                                default:
                                    break;
                            }
                        }

                        resultado.Add(SUCCESS, true);
                        resultado.Add("lstGastos", lstGastos);
                        #endregion
                    }
                }
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetCtasPolizas", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        #region FNC GRALES REPORTE
        public Dictionary<string, object> GetAreaCuentaByCC(int idCC)
        {
            resultado = new Dictionary<string, object>();

            try
            {
                List<tblP_CC> values = new List<tblP_CC>();
                tblP_CC aCuenta = _context.tblP_CC.FirstOrDefault(e => e.id == idCC);


                resultado.Add(ITEMS, aCuenta);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                resultado.Add(SUCCESS, false);
            }

            return resultado;
        }
        #endregion

        #region PLAN DE ACCIÓN
        public Dictionary<string, object> GetPlanAccion(PlanAccionDTO objDTO)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region VALIDACIONES
                if (objDTO.idPlanAccion <= 0)
                {
                    if (objDTO.anio <= 0) throw new Exception("Es necesario seleccionar un año en los filtros.");
                    if (objDTO.idCC <= 0) throw new Exception("Ocurrió un error al obtener el CC.");
                    if (objDTO.idConcepto > 0 || objDTO.idConcepto == -1) { } else { throw new Exception("Ocurrió un error al obtener el concepto."); }
                    if (objDTO.idMes <= 0) throw new Exception("Es necesario seleccionar un mes en los filtros.");
                }
                #endregion

                #region SE OBTIENE EL PLAN DE ACCION EN BASE AL CC Y AÑO.
                PlanAccionDTO objPlanAccion = new PlanAccionDTO();
                string strQuery = string.Empty;
                if (objDTO.idPlanAccion <= 0)
                {
                    strQuery = string.Format(@"SELECT id, anio, idCC, idConcepto, planAccion, justificacion, fechaCompromiso, correoResponsableSeguimiento, idEstatusPlanAccion, vistoBueno
	                                                        FROM tblAF_CtrlPptalOfCe_PlanAccion 
		                                                        WHERE anio = {0} AND idCC = {1} AND idConcepto = {2} AND idMes = {3} AND registroActivo = {4}", objDTO.anio, objDTO.idCC, objDTO.idConcepto, objDTO.idMes, 1);
                }
                else
                {
                    strQuery = string.Format(@"SELECT id, anio, idCC, idConcepto, planAccion, justificacion, fechaCompromiso, correoResponsableSeguimiento, idEstatusPlanAccion, vistoBueno
	                                                        FROM tblAF_CtrlPptalOfCe_PlanAccion 
		                                                        WHERE id = {0}", objDTO.idPlanAccion);
                }

                objPlanAccion = _context.Select<PlanAccionDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = strQuery
                }).FirstOrDefault();

                int idUsuario = (int)vSesiones.sesionUsuarioDTO.id;
                if (objDTO.idPlanAccion > 0)
                {
                    if (!objPlanAccion.vistoBueno && (idUsuario == 4 || idUsuario == 3314 || idUsuario == 1164 || idUsuario == 6185))
                        objPlanAccion.usuarioVoBo = true;
                }
                else if (objPlanAccion != null)
                {
                    objPlanAccion.usuarioVoBo = false;
                }

                #region SE OBTIENE EL ESTATUS DEL PLAN DE ACCIÓN
                if (objPlanAccion != null)
                {
                    switch (objPlanAccion.idEstatusPlanAccion)
                    {
                        case (int)EstatusPlanAccionEnum.abierto:
                            objPlanAccion.estatus = EnumHelper.GetDescription((EstatusPlanAccionEnum.abierto));
                            objPlanAccion.backgroundColor = "#0000ff"; // AZUL
                            objPlanAccion.color = "#fff"; // BLANCO
                            break;
                        case (int)EstatusPlanAccionEnum.pendiente:
                            objPlanAccion.estatus = EnumHelper.GetDescription((EstatusPlanAccionEnum.pendiente));
                            objPlanAccion.backgroundColor = "##d0d000"; // AMARILLO
                            objPlanAccion.color = "#000"; // BLACK

                            if (!objPlanAccion.vistoBueno && (idUsuario == 4 || idUsuario == 3314 || idUsuario == 1164 || idUsuario == 6185))
                                objPlanAccion.usuarioVoBo = true;

                            break;
                        case (int)EstatusPlanAccionEnum.retrasado:
                            objPlanAccion.estatus = EnumHelper.GetDescription((EstatusPlanAccionEnum.retrasado));
                            objPlanAccion.backgroundColor = "##db0000"; // ROJO
                            objPlanAccion.color = "#fff"; // BLANCO

                            if (!objPlanAccion.vistoBueno && (idUsuario == 4 || idUsuario == 3314 || idUsuario == 1164 || idUsuario == 6185))
                                objPlanAccion.usuarioVoBo = true;

                            break;
                        case (int)EstatusPlanAccionEnum.cerrado:
                            objPlanAccion.estatus = EnumHelper.GetDescription((EstatusPlanAccionEnum.cerrado));
                            objPlanAccion.backgroundColor = "#008000"; // AZUL
                            objPlanAccion.color = "#fff"; // BLANCO

                            if (!objPlanAccion.vistoBueno && (idUsuario == 4 || idUsuario == 3314 || idUsuario == 1164 || idUsuario == 6185))
                                objPlanAccion.usuarioVoBo = true;

                            break;
                        default:
                            objPlanAccion.estatus = string.Empty;
                            break;
                    }
                }
                #endregion

                resultado.Add("objPlanAccion", objPlanAccion);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetPlanAccion", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> CEPlanAccion(PlanAccionDTO objDTO)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                resultado = new Dictionary<string, object>();
                try
                {
                    #region VALIDACIONES
                    if (objDTO.id <= 0)
                    {
                        if (objDTO.anio <= 0) throw new Exception("Es necesario seleccionar un año en los filtros.");
                        if (objDTO.idCC <= 0) throw new Exception("Ocurrió un error al obtener el CC.");
                        if (objDTO.idConcepto > 0 || objDTO.idConcepto == -1) { } else { throw new Exception("Ocurrió un error al obtener el concepto."); }
                        if (objDTO.idMes <= 0) throw new Exception("Es necesario seleccionar un mes en los filtros.");
                    }
                    if (string.IsNullOrEmpty(objDTO.planAccion)) throw new Exception("Es necesario ingresar el plan de acción.");
                    if (objDTO.fechaCompromiso.Year <= 2021) throw new Exception("Es necesario ingresar la fecha compromiso.");
                    if (string.IsNullOrEmpty(objDTO.correoResponsableSeguimiento)) throw new Exception("Es necesario ingresar el correo del responsable del seguimiento.");

                    // SE VERIFICA SI EL CORREO PROPORCIONADO, SEA VALIDO
                    bool formatoCorrectoMensaje = ValidarFormatoCorreo(objDTO.correoResponsableSeguimiento);
                    if (!formatoCorrectoMensaje)
                        throw new Exception("El correo proporcionado no cuenta con el formato correcto.<br>Ejemplo: responsable@construplan.com.mx");
                    #endregion

                    tblAF_CtrlPptalOfCe_PlanAccion objCEPlanAccion = new tblAF_CtrlPptalOfCe_PlanAccion();
                    if (objDTO.id > 0)
                    {
                        #region ACTUALIZAR PLAN DE ACCIÓN / AGREGAR JUSTIFICACIÓN
                        objCEPlanAccion = _context.tblAF_CtrlPptalOfCe_PlanAccion.Where(w => w.id == objDTO.id).FirstOrDefault();
                        if (objCEPlanAccion == null)
                        {
                            if (!string.IsNullOrEmpty(objDTO.justificacion))
                                throw new Exception("Ocurrió un error al registrar la justifación.");
                            else
                                throw new Exception("Ocurrió un error al actualizar el plan de acción.");
                        }

                        objCEPlanAccion.planAccion = objDTO.planAccion.Trim();
                        objCEPlanAccion.justificacion = !string.IsNullOrEmpty(objDTO.justificacion) ? objDTO.justificacion.Trim() : null;
                        objCEPlanAccion.fechaCompromiso = objDTO.fechaCompromiso;
                        objCEPlanAccion.correoResponsableSeguimiento = objDTO.correoResponsableSeguimiento.Trim();
                        objCEPlanAccion.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                        objCEPlanAccion.fechaModificacion = DateTime.Now;
                        _context.SaveChanges();

                        SaveBitacora(0, (int)AccionEnum.ACTUALIZAR, objDTO.id, JsonUtils.convertNetObjectToJson(objDTO));
                        #endregion
                    }
                    else
                    {
                        #region REGISTRAR PLAN DE ACCIÓN
                        objCEPlanAccion.anio = objDTO.anio;
                        objCEPlanAccion.idCC = objDTO.idCC;
                        objCEPlanAccion.idConcepto = objDTO.idConcepto;
                        objCEPlanAccion.idMes = objDTO.idMes;
                        objCEPlanAccion.planAccion = objDTO.planAccion.Trim();
                        objCEPlanAccion.fechaCompromiso = objDTO.fechaCompromiso;
                        objCEPlanAccion.correoResponsableSeguimiento = objDTO.correoResponsableSeguimiento;
                        objCEPlanAccion.idEstatusPlanAccion = (int)EstatusPlanAccionEnum.pendiente;
                        objCEPlanAccion.vistoBueno = false;
                        objCEPlanAccion.idUsuarioVistoBueno = 0;
                        objCEPlanAccion.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                        objCEPlanAccion.fechaCreacion = DateTime.Now;
                        objCEPlanAccion.registroActivo = true;
                        _context.tblAF_CtrlPptalOfCe_PlanAccion.Add(objCEPlanAccion);
                        _context.SaveChanges();
                        #endregion

                        #region SE CONSULTA EL ID DEL PLAN DE ACCIÓN RECIEN CREADO
                        tblAF_CtrlPptalOfCe_PlanAccion objPlanAccion = _context.tblAF_CtrlPptalOfCe_PlanAccion.OrderByDescending(o => o.id).FirstOrDefault();
                        if (objPlanAccion == null)
                        {
                            Exception e = new Exception();
                            LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "CrearAlerta", e, AccionEnum.CONSULTA, objDTO.id, objDTO);
                        }
                        #endregion

                        #region SE OBTIENE EL CC EN STRING
                        tblP_CC objCC = _context.tblP_CC.Where(w => w.id == objDTO.idCC).FirstOrDefault();
                        if (objCC == null)
                        {
                            Exception e = new Exception();
                            LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "CrearAlerta", e, AccionEnum.CONSULTA, objDTO.id, objDTO);
                        }
                        #endregion

                        #region COMENTADO
                        //                        if (objPlanAccion != null)
                        //                        {
                        //                            List<string> lstCorreos = new List<string>();
                        //                            #region SE CREA ALERTA // COMENTADO
                        //                            bool CCRelServicio = VerificarCCRelServicio(objDTO.idCC);
                        //                            if (CCRelServicio)
                        //                            {
                        //                                #region EL CC ES DE SERVICIO, POR LO QUE SE CREA ALERTA A CARLA.VELASCO

                        //                                #region SE CREA ALERTA A CARLA.VELASCO // COMENTADO
                        ////                                tblP_Alerta objCrearAlerta = new tblP_Alerta();
                        ////                                objCrearAlerta.userEnviaID = (int)vSesiones.sesionUsuarioDTO.id;
                        ////                                objCrearAlerta.userRecibeID = 6185; //CARLA.VELASCO
                        ////#if DEBUG
                        ////                                objCrearAlerta.userRecibeID = 7939; //OMAR.NUNEZ
                        ////#endif
                        ////                                objCrearAlerta.tipoAlerta = 2;
                        ////                                objCrearAlerta.sistemaID = 11;
                        ////                                objCrearAlerta.visto = false;
                        ////                                objCrearAlerta.url = string.Format("/Administrativo/CtrlPptalOficinasCentrales/PresupuestosGastos?idPlanAccion={0}", objPlanAccion.id);
                        ////                                objCrearAlerta.objID = objPlanAccion.id;
                        ////                                objCrearAlerta.msj = string.Format("{0} [{1}]", "PLAN ACCIÓN: CTRL PRESUPUESTAL", (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? objCC.cc : objCC.areaCuenta);
                        ////                                objCrearAlerta.documentoID = 0;
                        ////                                objCrearAlerta.moduloID = 0;
                        ////                                _context.tblP_Alerta.Add(objCrearAlerta);
                        ////                                _context.SaveChanges();
                        //                                #endregion

                        //                                #endregion

                        //                                #region SE OBTIENE CORREO DE CARLA.VELASCO // COMENTADO
                        //                                //lstCorreos = _context.Select<string>(new DapperDTO
                        //                                //{
                        //                                //    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                        //                                //    consulta = string.Format(@"SELECT correo FROM tblP_Usuario WHERE id = {0}", 6185)
                        //                                //}).ToList();
                        //                                #endregion
                        //                            }
                        //                            else
                        //                            {
                        //                                #region EL CC NO ES DE SERVICIO, POR LO QUE SE LE CREA ALERTA A GERARDO.REINA Y CARLA.VELASCO

                        //                                #region SE CREA ALERTA A CARLA.VELASCO // COMENTADO
                        ////                                tblP_Alerta objCrearAlerta = new tblP_Alerta();
                        ////                                objCrearAlerta.userEnviaID = (int)vSesiones.sesionUsuarioDTO.id;
                        ////                                objCrearAlerta.userRecibeID = 6185; //CARLA.VELASCO
                        ////#if DEBUG
                        ////                                objCrearAlerta.userRecibeID = 7939; //OMAR.NUNEZ
                        ////#endif
                        ////                                objCrearAlerta.tipoAlerta = 2;
                        ////                                objCrearAlerta.sistemaID = 11;
                        ////                                objCrearAlerta.visto = false;
                        ////                                objCrearAlerta.url = string.Format("/Administrativo/CtrlPptalOficinasCentrales/PresupuestosGastos?idPlanAccion={0}", objPlanAccion.id);
                        ////                                objCrearAlerta.objID = objPlanAccion.id;
                        ////                                objCrearAlerta.msj = string.Format("{0} [{1}]", "PLAN ACCIÓN: CTRL PRESUPUESTAL", (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? objCC.cc : objCC.areaCuenta);
                        ////                                objCrearAlerta.documentoID = 0;
                        ////                                objCrearAlerta.moduloID = 0;
                        ////                                _context.tblP_Alerta.Add(objCrearAlerta);
                        ////                                _context.SaveChanges();
                        //                                #endregion

                        //                                #endregion

                        //                                #region SE OBTIENE CARLA.VELASCO // COMENTADO
                        //                                //lstCorreos = _context.Select<string>(new DapperDTO
                        //                                //{
                        //                                //    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                        //                                //    consulta = string.Format(@"SELECT correo FROM tblP_Usuario WHERE id = {0}", 6185)
                        //                                //}).ToList();
                        //                                #endregion
                        //                            }
                        //                            #endregion

                        //                            #region SE ENVIA CORREO DE QUE SE CREO UN PLAN DE ACCIÓN // COMENTADO
                        ////                            if (lstCorreos.Count() > 0)
                        ////                            {
                        ////#if DEBUG
                        ////                                lstCorreos = new List<string> { "omar.nunez@construplan.com.mx" };
                        ////#endif
                        ////                                GlobalUtils.sendEmail(string.Format("{0} [{1}]", "PLAN ACCIÓN: CTRL PRESUPUESTAL", (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? objCC.cc : objCC.areaCuenta),
                        ////                                    "Buen día, el CC " + objCC.cc + " ha notificado la creación de un plan de acción.<br><br>" +
                        ////                                    "<br><br>Favor de ingresar a <b>sigoplan.construplan.com.mx</b> al menú:<br>Construplan > Admin y Finanzas > Control presupuestal > Dashboard.<br>" +
                        ////                                    "Se informa que este es un correo autogenerado por el sistema SIGOPLAN (<a href='http://sigoplan.construplan.com.mx/'>http://sigoplan.construplan.com.mx</a>)." +
                        ////                                    "No es necesario dar una respuesta. Gracias.", lstCorreos);
                        ////                            }
                        //                            #endregion
                        //                        }
                        //                        else
                        //                              throw new Exception("Ocurrió un error al registrar el plan de acción.");
                        #endregion

                        SaveBitacora(0, (int)AccionEnum.AGREGAR, objDTO.id, JsonUtils.convertNetObjectToJson(objDTO));
                    }

                    string mensajeExito = string.Empty;
                    if (objDTO.id <= 0)
                        mensajeExito = "Se ha registrado con éxito.";
                    else if (objDTO.id > 0 && string.IsNullOrEmpty(objDTO.justificacion))
                        mensajeExito = "Se ha actualizado con éxito.";
                    else if (objDTO.id > 0 && !string.IsNullOrEmpty(objDTO.justificacion))
                        mensajeExito = "Se ha actualizado con éxito.";

                    resultado.Add(MESSAGE, mensajeExito);
                    resultado.Add(SUCCESS, true);
                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "CEPlanAccion", e, objDTO.id > 0 ? AccionEnum.ACTUALIZAR : AccionEnum.AGREGAR, objDTO.id, objDTO);
                    resultado.Add(MESSAGE, e.Message);
                    resultado.Add(SUCCESS, false);
                }
            }
            return resultado;
        }

        public Dictionary<string, object> CerrarPlanAccion(PlanAccionDTO objDTO)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region VALIDACIONES
                if (objDTO.id <= 0) throw new Exception("Ocurrió un error al cerrar el plan de acción.");
                if (string.IsNullOrEmpty(objDTO.justificacion)) throw new Exception("Es necesario indicar la justificación (Resultado obtenido).");
                #endregion

                #region SE CIERRA EL PLAN DE ACCIÓN
                tblAF_CtrlPptalOfCe_PlanAccion objPlanAccion = _context.tblAF_CtrlPptalOfCe_PlanAccion.Where(w => w.id == objDTO.id).FirstOrDefault();
                if (objPlanAccion == null)
                    throw new Exception("Ocurrió un error al cerrar el plan de acción.");

                objPlanAccion.idEstatusPlanAccion = (int)EstatusPlanAccionEnum.cerrado;
                objPlanAccion.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                objPlanAccion.fechaModificacion = DateTime.Now;
                _context.SaveChanges();
                #endregion

                #region EN CASO QUE HAYA ALERTAS, SE CIERRAN
                List<tblP_Alerta> lstAlertas = _context.tblP_Alerta.Where(w => w.tipoAlerta == 2 && w.sistemaID == 11 && w.visto == false && w.objID == objDTO.id).ToList();
                if (lstAlertas.Count() > 0)
                {
                    foreach (var item in lstAlertas)
                    {
                        item.visto = true;
                    }
                }
                _context.SaveChanges();
                #endregion

                resultado.Add(SUCCESS, true);
                resultado.Add(MESSAGE, "Se ha cerrado con éxito el plan de acción.");
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "CerrarPlanAccion", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> VerificarExistenciaPlanAccion(PlanAccionDTO objDTO)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region VALIDACIONES
                if (objDTO.listaCC != null)
                {
                    if (objDTO.listaCC.Count() > 1)
                        throw new Exception("Debe seleccionar solamente un CC.");
                    else if (objDTO.listaCC.Count() <= 0)
                        throw new Exception("Es necesario seleccionar un CC.");
                    else if (objDTO.listaCC.Count() == 1)
                        objDTO.idCC = objDTO.listaCC[0];
                }
                else
                    throw new Exception("Es necesario seleccionar un CC.");
                #endregion

                #region SE VERIFICA SI HAY ALGUN PLAN DE ACCIÓN CON ESTATUS PENDIENTE O VENCIDO DEL CC SELECCIONADO
                int cantPlanAccion = _context.Select<int>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"SELECT COUNT(id) as cantPlanAccion FROM tblAF_CtrlPptalOfCe_PlanAccion WHERE idCC = @idCC AND registroActivo = @registroActivo AND idEstatusPlanAccion IN (2, 3)",
                    parametros = new { idCC = objDTO.idCC, registroActivo = true }
                }).FirstOrDefault();

                resultado.Add("cantPlanAccion", cantPlanAccion);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "VerificarExistenciaPlanAccion", e, AccionEnum.CONSULTA, 0, objDTO);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> IndicarVobo(PlanAccionDTO objDTO)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                resultado = new Dictionary<string, object>();
                try
                {
                    #region VALIDACIONES
                    if (objDTO.idPlanAccion <= 0) throw new Exception("Ocurrió un error al indicar el visto bueno.");
                    #endregion

                    #region SE INDICA EL VISTO BUENO AL PLAN DE ACCIÓN SELECCIONADO
                    tblAF_CtrlPptalOfCe_PlanAccion objPlanAccion = _context.tblAF_CtrlPptalOfCe_PlanAccion.Where(w => w.id == objDTO.idPlanAccion).FirstOrDefault();
                    if (objPlanAccion == null)
                        throw new Exception("Ocurrió un error al indicar el visto bueno.");

                    objPlanAccion.vistoBueno = true;
                    objPlanAccion.idUsuarioVistoBueno = (int)vSesiones.sesionUsuarioDTO.id;
                    objPlanAccion.fechaVistoBueno = DateTime.Now;
                    _context.SaveChanges();
                    #endregion

                    #region SE ELIMINA LAS ALERTAS DEL PLAN DE ACCIÓN QUE SE LE DIO EL VISTO BUENO.
                    List<tblP_Alerta> lstAlertas = _context.tblP_Alerta.Where(w => w.tipoAlerta == 2 && w.sistemaID == 11 && w.visto == false && w.objID == objDTO.idPlanAccion).ToList();
                    if (lstAlertas.Count() > 0)
                    {
                        foreach (var item in lstAlertas)
                        {
                            item.visto = true;
                        }
                        _context.SaveChanges();
                    }
                    #endregion

                    resultado.Add(MESSAGE, "Se ha indicado el visto bueno con éxito.");
                    resultado.Add(SUCCESS, true);
                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                    resultado.Add(MESSAGE, e.Message);
                    resultado.Add(SUCCESS, false);
                }
            }
            return resultado;
        }
        #endregion

        #region REPORTE (HTML) PLAN DE ACCIÓN
        public List<PlanAccionReporteDTO> GetPlanAccion(int idCC)
        {
            //var listaConceptos = _context.tblAF_CtrlPptalOfCe_BaseConceptos.ToList();
            var listaConceptos = _context.tblAF_CtrlPptalOfCe_CatConceptos.ToList();

            List<PlanAccionReporteDTO> lstPlanesAccion = new List<PlanAccionReporteDTO>();
            lstPlanesAccion = _context.tblAF_CtrlPptalOfCe_PlanAccion.Where(x => x.registroActivo && (x.idEstatusPlanAccion == 2 || x.idEstatusPlanAccion == 3) && x.idCC == idCC).ToList().Select(x => new PlanAccionReporteDTO
            {
                planAccion = x.planAccion,
                resultado = x.justificacion,
                concepto = listaConceptos.Where(y => y.idConcepto == x.idConcepto).Select(z => "PLAN ACCIÓN - " + z.concepto).FirstOrDefault(),
                descEstado = x.idEstatusPlanAccion == 3 ? string.Format("VENCIDO: {0} días", (DateTime.Now - x.fechaCompromiso).Days) : "PENDIENTE",
                esRetrasado = x.idEstatusPlanAccion == 3 ? true : false,
            }).ToList();

            if (lstPlanesAccion.Count <= 0)
            {
                PlanAccionReporteDTO objDTO = new PlanAccionReporteDTO();
                objDTO.planAccion = string.Empty;
                objDTO.resultado = string.Empty;
                objDTO.concepto = "CONCEPTO";
                objDTO.descEstado = string.Empty;
                objDTO.esRetrasado = false;
                lstPlanesAccion.Add(objDTO);
            }

            return lstPlanesAccion;
        }

        public Dictionary<string, object> GetReportePlanAcciones(ReportePlanAccionDTO objDTO)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region VALIDACIONES
                if (objDTO.anio <= 0) throw new Exception("Es necesario seleccionar un año en los filtros.");
                if (objDTO.lstCC.Count() <= 0) throw new Exception("Ocurrió un error al obtener el CC.");
                #endregion

                #region SE OBTIENE LISTADO DE PLANES DE ACCIÓN EN BASE AL AÑO Y CC (SOLAMENTE ES POR UN CC)
                objDTO.idCC = Convert.ToInt32(objDTO.lstCC[0]);
                string lstEstatusPlanAccion = string.Format("({0}, {1})", (int)EstatusPlanAccionEnum.pendiente, (int)EstatusPlanAccionEnum.retrasado);
                List<ReportePlanAccionDTO> lstPlanAcciones = _context.Select<ReportePlanAccionDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = string.Format(@"SELECT t1.id, t1.anio, t1.idCC, t1.idConcepto, t1.planAccion, t1.justificacion, t1.fechaCompromiso, t1.correoResponsableSeguimiento, t1.idEstatusPlanAccion, t2.concepto
	                                                    FROM tblAF_CtrlPptalOfCe_PlanAccion AS t1
		                                                INNER JOIN tblAF_CtrlPptalOfCe_CatConceptos AS t2 ON t1.idConcepto = t2.idConcepto
		                                                INNER JOIN tblAF_CtrllPptalOfCe_CatAgrupaciones AS t3 ON t3.id = t2.idAgrupacion AND t3.idCC = t1.idCC
		                                                    WHERE t1.anio = @anio AND t1.idCC = @idCC AND t1.idEstatusPlanAccion IN {0} AND t1.registroActivo = @registroActivo 
                                                            GROUP BY t1.id, t1.anio, t1.idCC, t1.idConcepto, t1.planAccion, t1.justificacion, t1.fechaCompromiso, t1.correoResponsableSeguimiento, t1.idEstatusPlanAccion, t2.concepto", lstEstatusPlanAccion),
                    parametros = new { anio = objDTO.anio, idCC = objDTO.idCC, registroActivo = true }
                }).ToList();

                // SE VERIFICA SI CUENTA CON CONCEPTO SIN CATALOGAR EN EL PLAN DE ACCIÓN
                List<PlanAccionDTO> lstSinCatalogar = _context.Select<PlanAccionDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = string.Format(@"SELECT * FROM tblAF_CtrlPptalOfCe_PlanAccion WHERE anio = @anio AND idCC = @idCC AND idEstatusPlanAccion IN {0} AND idConcepto = @idConcepto AND registroActivo = @registroActivo", lstEstatusPlanAccion),
                    parametros = new { anio = objDTO.anio, idCC = objDTO.idCC, idConcepto = -1, registroActivo = true }
                }).ToList();

                foreach (var item in lstSinCatalogar)
                {
                    ReportePlanAccionDTO obj = new ReportePlanAccionDTO();
                    obj.planAccion = item.planAccion;
                    obj.idConcepto = -1;
                    obj.justificacion = item.justificacion;
                    obj.id = item.id;
                    lstPlanAcciones.Add(obj);
                }

                string html = string.Empty;
                if (lstPlanAcciones.Count() > 0)
                {
                    foreach (var item in lstPlanAcciones)
                    {
                        #region SE VERIFICA SI EL PLAN DE ACCIÓN ESTA VENCIDO, EN CASO QUE SI, SE OBTIENE LOS DÍAS QUE LLEVA VENCIDO
                        int diasVencido = 0;
                        if (item.idEstatusPlanAccion == (int)EstatusPlanAccionEnum.retrasado)
                        {
                            DateTime fechaActual = DateTime.Now;
                            diasVencido = (fechaActual - item.fechaCompromiso).Days;
                        }
                        #endregion

                        #region SE CONSTRUYE HTML (PLANES DE ACCIONES Y JUSTIFICACIONES)
                        html += string.Format(
                            @"
                            <div class='col-sm-5'>
                                <div class='panel panel-primary panel-grafica'>
                                    <div class='panel-heading text-center'>
                                        <div class='row'>
                                            <h5>PLAN ACCIÓN{1}</h5>
                                        </div>
                                    </div>
                                    <div class='panel-body'>
                                        <div class='row'>
                                            <div class='col-lg-12'>
                                                <textarea cols='30' rows='11' class='form-control' onkeypress='return false'>{0}</textarea>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class='col-sm-5'>
                                <div class='panel panel-primary panel-grafica'>
                                    <div class='panel-heading text-center'>
                                        <h5>RESULTADO</h5>
                                    </div>
                                    <div class='panel-body'>
                                        <div class='row'>
                                            <div class='col-lg-12'>
                                                <textarea cols='30' rows='11' class='form-control' onkeypress='return false'>{2}</textarea>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class='col-sm-2'>
                                <div class='panel panel-primary panel-grafica' style='height: 123px !important;'>
                                    <div class='panel-heading text-center'>
                                        <h5>ESTATUS</h5>
                                    </div>
                                    <div class='panel-body'>
                                        <div class='row'>
                                            <div class='col-lg-12'>
                                                <h5><label style='color: {4};'>{3}</label></h5>
                                            </div>
                                        </div>
                                        <div class='row'>
                                            <div class='col-lg-12'>
                                                <button class='btn btn-xs btn-warning editarPlanAccion' title='Actualizar plan de acción.' data-id='{5}'><i class='fas fa-pencil-alt'></i>&nbsp;Actualizar plan acción</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>", item.planAccion,
                                     item.idConcepto == -1 ? " - SIN CATALOGAR" : !string.IsNullOrEmpty(item.concepto) ? " - " + item.concepto.Trim().ToUpper() : string.Empty,
                                     item.justificacion,
                                     diasVencido > 0 ? string.Format("VENCIDO: {0} días.", diasVencido) : "PENDIENTE",
                                     diasVencido > 0 ? "red" : "#969600",
                                     item.id);
                        #endregion
                    }
                }

                resultado.Add("html", html);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetReportePlanAcciones", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> EnviarCorreoReportePlanAccion(ReportePlanAccionDTO objDTO)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region VALIDACIONES
                if (objDTO.idCC <= 0) throw new Exception("Ocurrió un error al obtener el CC.");
                #endregion

                #region SE OBTIENE LA INFORMACIÓN DEL CC
                tblP_CC objCC = _context.tblP_CC.Where(w => w.id == objDTO.idCC).FirstOrDefault();
                if (objCC == null)
                    throw new Exception("Ocurrió un error al enviar el informe.");
                #endregion

                #region SE OBTIENE A LOS RESPONSABLES DEL SEGUIMIENTO DE PLANES DE ACCIONES CON ESTATUS PENDIENTE Y RETRASADO
                string lstEstatusPlanAccion = string.Format("({0}, {1})", (int)EstatusPlanAccionEnum.pendiente, (int)EstatusPlanAccionEnum.retrasado);
                List<ReportePlanAccionDTO> lstPlanAcciones = _context.Select<ReportePlanAccionDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = string.Format(@"SELECT DISTINCT t1.correoResponsableSeguimiento
	                                                FROM tblAF_CtrlPptalOfCe_PlanAccion AS t1
		                                            INNER JOIN tblAF_CtrlPptalOfCe_BaseConceptos AS t2 ON t1.idConcepto = t2.id
		                                                WHERE t1.idCC = @idCC AND t1.idEstatusPlanAccion IN {0} AND t1.registroActivo = @registroActivo", lstEstatusPlanAccion),
                    parametros = new { idCC = objDTO.idCC, registroActivo = true }
                }).ToList();
                #endregion

                if (lstPlanAcciones.Count() > 0)
                {
                    #region SE OBTIENE LOS CORREOS DE LOS RESPONSABLES DEL CC SELECCIONADO
                    List<string> lstCorreosUsuariosResponsablesCC = _context.Select<string>(new DapperDTO
                    {
                        baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                        consulta = @"SELECT DISTINCT t1.correo
	                                    FROM tblP_Usuario AS t1
	                                    INNER JOIN tblAF_CtrlPptalOfCe_UsuarioRelCC AS t2 ON t1.id = t2.idUsuario
		                                    WHERE t1.estatus = @estatus AND t2.idCC = @idCC AND t2.registroActivo = @registroActivo",
                        parametros = new { estatus = true, idCC = objDTO.idCC, registroActivo = true }
                    }).ToList();
                    #endregion

                    #region SE ENVIA CORREO A LOS RESPONSABLES DEL SEGUIMIENTO DE LOS PLANES DE ACCION Y A LOS RESPONSABLES DEL CC SELECCIONADO
                    List<string> lstCorreos = new List<string>();
                    foreach (var item in lstPlanAcciones)
                    {
                        lstCorreos.Add(item.correoResponsableSeguimiento);
                    }
                    foreach (var item in lstCorreosUsuariosResponsablesCC)
                    {
                        lstCorreos.Add(item);
                    }

                    // SE VERIFICA SI EL CC ES DE SERVICIO, EN CASO QUE SI, SE ENVIA COPIA A JOSE GAYTAN
                    tblP_Alerta objCrearAlerta = new tblP_Alerta();
                    bool CCRelServicio = VerificarCCRelServicio(objDTO.idCC);
                    if (CCRelServicio)
                    {
                        // SE OBTIENE CORREO DE JOSE.GAYTAN
                        lstCorreos.Add("jose.gaytan@construplan.com.mx");

                        #region SE LE CREA ALERTA A JOSE.GAYTAN

                        #region JOSE.GAYTAN
                        objCrearAlerta = new tblP_Alerta();
                        objCrearAlerta.userEnviaID = (int)vSesiones.sesionUsuarioDTO.id;
                        objCrearAlerta.userRecibeID = 4; //JOSE.GAYTAN
#if DEBUG
                        objCrearAlerta.userRecibeID = 7939; //OMAR.NUNEZ
#endif
                        objCrearAlerta.tipoAlerta = 4;
                        objCrearAlerta.sistemaID = 11;
                        objCrearAlerta.visto = false;
                        objCrearAlerta.url = "/Administrativo/CtrlPptalOficinasCentrales/PresupuestosGastos?anio=" + objDTO.anio + "&idMes=" + objDTO.idMes + "&idCC=" + objDTO.idCC + "";
                        objCrearAlerta.objID = 0;
                        objCrearAlerta.msj = string.Format("{0} [{1}]", "CTRL PPTAL: SE ENVIÓ REPORTE.", (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? objCC.cc.Trim().ToUpper() : objCC.areaCuenta.Trim().ToUpper());
                        objCrearAlerta.documentoID = 0;
                        objCrearAlerta.moduloID = 0;
                        _context.tblP_Alerta.Add(objCrearAlerta);
                        _context.SaveChanges();
                        #endregion

                        #endregion
                    }

                    // SE OBTIENE CORREO DE CARLA.VELASCO Y GERARDO.REINA
                    lstCorreos.Add("g.reina@construplan.com.mx");
                    lstCorreos.Add("carla.velasco@construplan.com.mx");

                    #region SE LE CREA ALERTA A CARLA.VELASCO Y GERARDO.REINA

                    #region CARLA.VELASCO
                    objCrearAlerta = new tblP_Alerta();
                    objCrearAlerta.userEnviaID = (int)vSesiones.sesionUsuarioDTO.id;
                    objCrearAlerta.userRecibeID = 6185; //CARLA.VELASCO
#if DEBUG
                    objCrearAlerta.userRecibeID = 7939; //OMAR.NUNEZ
#endif
                    objCrearAlerta.tipoAlerta = 4;
                    objCrearAlerta.sistemaID = 11;
                    objCrearAlerta.visto = false;
                    objCrearAlerta.url = "/Administrativo/CtrlPptalOficinasCentrales/PresupuestosGastos?anio=" + objDTO.anio + "&idMes=" + objDTO.idMes + "&idCC=" + objDTO.idCC + "";
                    objCrearAlerta.objID = 0;
                    objCrearAlerta.msj = string.Format("{0} [{1}]", "CTRL PPTAL: SE ENVIÓ REPORTE.", (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? objCC.cc.Trim().ToUpper() : objCC.areaCuenta.Trim().ToUpper());
                    objCrearAlerta.documentoID = 0;
                    objCrearAlerta.moduloID = 0;
                    _context.tblP_Alerta.Add(objCrearAlerta);
                    _context.SaveChanges();
                    #endregion

                    #region GERARDO.REINA
                    objCrearAlerta = new tblP_Alerta();
                    objCrearAlerta.userEnviaID = (int)vSesiones.sesionUsuarioDTO.id;
                    objCrearAlerta.userRecibeID = 1164; //GERARDO.REINA
#if DEBUG
                    objCrearAlerta.userRecibeID = 7939; //OMAR.NUNEZ
#endif
                    objCrearAlerta.tipoAlerta = 4;
                    objCrearAlerta.sistemaID = 11;
                    objCrearAlerta.visto = false;
                    objCrearAlerta.url = "/Administrativo/CtrlPptalOficinasCentrales/PresupuestosGastos?anio=" + objDTO.anio + "&idMes=" + objDTO.idMes + "&idCC=" + objDTO.idCC + "";
                    objCrearAlerta.objID = 0;
                    objCrearAlerta.msj = string.Format("{0} [{1}]", "CTRL PPTAL: SE ENVIÓ REPORTE.", (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? objCC.cc.Trim().ToUpper() : objCC.areaCuenta.Trim().ToUpper());
                    objCrearAlerta.documentoID = 0;
                    objCrearAlerta.moduloID = 0;
                    _context.tblP_Alerta.Add(objCrearAlerta);
                    _context.SaveChanges();
                    #endregion

                    #endregion

                    var archivosAdjuntos = new List<Core.DTO.Utils.adjuntoCorreoDTO> { new Core.DTO.Utils.adjuntoCorreoDTO
                        {
                            archivo = objDTO.archivoPDF[0],
                            extArchivo = ".pdf",
                            nombreArchivo = string.Format("{0} [{1}]", "INFORME PLAN DE ACCIÓN", (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? objCC.cc.Trim().ToUpper() : objCC.areaCuenta.Trim().ToUpper())
                        }
                    };
#if DEBUG
                    lstCorreos = new List<string>();
                    lstCorreos.Add("omar.nunez@construplan.com.mx");
#endif
                    GlobalUtils.sendMailWithFiles(string.Format("{0}: {1} [{2}]", "INFORME PLAN DE ACCIÓN", PersonalUtilities.GetNombreEmpresa(), (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? objCC.cc.Trim().ToUpper() : objCC.areaCuenta.Trim().ToUpper()),
                                                   @"Se adjunta informe plan de acción.<br><br>
                                                     Favor de ingresar a <b>sigoplan.construplan.com.mx</b> al menú:<br>Construplan > Admin y Finanzas > Control presupuestal > Dashboard.<br>" +
                                                     "Se informa que este es un correo autogenerado por el sistema SIGOPLAN (<a href='http://sigoplan.construplan.com.mx/'>http://sigoplan.construplan.com.mx</a>)." +
                                                     "No es necesario dar una respuesta. Gracias.", lstCorreos, archivosAdjuntos);
                    #endregion

                    #region SE REGISTRA QUE EL CC HA ENVIADO UN INFORME DE PLAN DE ACCIÓN
                    tblAF_CtrlPptalOfCe_EnvioInforme objCEEnvioInforme = new tblAF_CtrlPptalOfCe_EnvioInforme();
                    objCEEnvioInforme.anio = objDTO.anio;
                    objCEEnvioInforme.idMes = objDTO.idMes;
                    objCEEnvioInforme.idEmpresa = objDTO.idEmpresa;
                    objCEEnvioInforme.idCC = objDTO.idCC;
                    objCEEnvioInforme.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                    objCEEnvioInforme.fechaCreacion = DateTime.Now;
                    objCEEnvioInforme.registroActivo = true;
                    _context.tblAF_CtrlPptalOfCe_EnvioInforme.Add(objCEEnvioInforme);
                    _context.SaveChanges();
                    #endregion
                }

                resultado.Add("exito", lstPlanAcciones.Count());
                resultado.Add(MESSAGE, lstPlanAcciones.Count() > 0 ? "Se ha enviado con éxito el informe plan de acción." : "No hay planes de acción para esta CC.");
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "EnviarCorreoReportePlanAccion", e, AccionEnum.CORREO, 0, objDTO);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        private bool ValidarFormatoCorreo(string correo)
        {
            bool formatoCorrecto = false;
            try
            {
                string correoTrim = correo.Trim();
                MailAddress correoFormatoCorrecto = new MailAddress(correoTrim);
                if (correoFormatoCorrecto.Address == correoTrim)
                    formatoCorrecto = true;
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "ValidarFormatoCorreo", e, AccionEnum.CONSULTA, 0, correo);
                return false;
            }
            return formatoCorrecto;
        }

        public PlanAccionDTO GetMesCC(PlanAccionDTO objDTO)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region SE OBTIENE NOMBRE DEL CC Y EL MES
                PlanAccionDTO objPlanAccionDTO = new PlanAccionDTO();

                #region SE OBTIENE NOMBRE DEL MES
                switch (objDTO.idMes)
                {
                    case 1:
                        objPlanAccionDTO.mes = "ENERO";
                        break;
                    case 2:
                        objPlanAccionDTO.mes = "FEBRERO";
                        break;
                    case 3:
                        objPlanAccionDTO.mes = "MARZO";
                        break;
                    case 4:
                        objPlanAccionDTO.mes = "ABRIL";
                        break;
                    case 5:
                        objPlanAccionDTO.mes = "MAYO";
                        break;
                    case 6:
                        objPlanAccionDTO.mes = "JUNIO";
                        break;
                    case 7:
                        objPlanAccionDTO.mes = "JULIO";
                        break;
                    case 8:
                        objPlanAccionDTO.mes = "AGOSTO";
                        break;
                    case 9:
                        objPlanAccionDTO.mes = "SEPTIEMBRE";
                        break;
                    case 10:
                        objPlanAccionDTO.mes = "OCTUBRE";
                        break;
                    case 11:
                        objPlanAccionDTO.mes = "NOVIEMBRE";
                        break;
                    case 12:
                        objPlanAccionDTO.mes = "DICIEMBRE";
                        break;
                    default:
                        objPlanAccionDTO.mes = string.Empty;
                        break;
                }
                #endregion

                #region SE OBTIENE DESCRIPCIÓN DEL CC
                tblP_CC objCC = _context.tblP_CC.Where(w => w.id == objDTO.idCC).FirstOrDefault();
                if (objCC == null)
                    throw new Exception("Ocurrió un error al generar el reporte.");

                if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                    objPlanAccionDTO.ccDescripcion = string.Format("[{0}] {1}", objCC.cc.Trim().ToUpper(), objCC.descripcion.Trim().ToUpper());
                else if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                    objPlanAccionDTO.ccDescripcion = string.Format("[{0}] {1}", objCC.areaCuenta.Trim().ToUpper(), objCC.descripcion.Trim().ToUpper());
                #endregion

                objPlanAccionDTO.MesCC = string.Format("{0} - {1}", objPlanAccionDTO.ccDescripcion, objPlanAccionDTO.mes);

                return objPlanAccionDTO;
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetMesCC", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }
        #endregion

        #region GENERALES
        private bool VerificarCCRelServicio(int idCC)
        {
            bool CCRelServicio = false;
            try
            {
                #region VALIDACIONES
                if (idCC <= 0) throw new Exception("Ocurrió un error al verificar si el CC es de servicio.");
                #endregion

                #region SE VERIFICA SI EL CC ES DE SERVICIO
                tblAF_CtrlPptalOfCe_CCRelServicios objCCRelServicio = _context.tblAF_CtrlPptalOfCe_CCRelServicios.Where(w => w.idCC == idCC && w.registroActivo).FirstOrDefault();
                if (objCCRelServicio != null)
                    CCRelServicio = true;
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "CrearAlerta", e, AccionEnum.AGREGAR, idCC, 0);
                return CCRelServicio;
            }
            return CCRelServicio;
        }
        #endregion

        #region ENVIO INFORME
        public Dictionary<string, object> GetEnvioInforme(EnvioInformeDTO objDTO)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                string strQuery = string.Empty;
                List<MovPolControlPptalDTO> datosGenerales = (List<MovPolControlPptalDTO>)session["ControlPresupuestalDatos"];
                #region SE OBTIENE EL NOMBRE DEL MES EN STRING
                objDTO.mes = GetNombreMes(objDTO.idMes);
                #endregion

                #region SE OBTIENE LISTADO DE CC CON PPTO APROBADO

                // CONSTRUPLAN
                strQuery = string.Format(@"SELECT t1.id, t1.idCC, t2.cc, t1.anio, t2.descripcion AS descripcionCC FROM tblAF_CtrlPptalOfCe_PptoAnual AS t1 INNER JOIN tblP_CC AS t2 ON t1.idCC = t2.id WHERE autorizado = 1 AND registroActivo = 1 AND t2.estatus = 1");
                List<EnvioInformeDTO> lstCC_Autorizados_CP = _context.Select<EnvioInformeDTO>(new DapperDTO
                {
                    baseDatos = MainContextEnum.Construplan,
                    consulta = strQuery
                }).ToList();

                // ARRENDADORA
                strQuery = string.Format(@"SELECT t1.id, t1.idCC, t2.areaCuenta as cc, t1.anio, t2.descripcion AS descripcionCC, t2.area, t2.cuenta FROM tblAF_CtrlPptalOfCe_PptoAnual AS t1 INNER JOIN tblP_CC AS t2 ON t1.idCC = t2.id WHERE autorizado = 1 AND registroActivo = 1 AND t2.estatus = 1");
                List<EnvioInformeDTO> lstCC_Autorizados_ARR = _context.Select<EnvioInformeDTO>(new DapperDTO
                {
                    baseDatos = MainContextEnum.Arrendadora,
                    consulta = strQuery
                }).ToList();
                #endregion

                #region SE OBTIENE LOS CC QUE YA ENVIARON SU INFORME
                // CONSTRUPLAN
                strQuery = string.Format(@"SELECT t1.anio, t1.idMes, t1.idEmpresa, t1.idCC, t2.cc, t2.descripcion AS descripcionCC, t1.idUsuarioCreacion, t1.fechaCreacion 
	                                                FROM tblAF_CtrlPptalOfCe_EnvioInforme AS t1
	                                                INNER JOIN tblP_CC AS t2 ON t1.idCC = t2.id
		                                                WHERE t1.registroActivo = {0} AND t1.idMes = {1}", 1, objDTO.idMes);
                List<EnvioInformeDTO> lstEnviosInformes_CP = _context.Select<EnvioInformeDTO>(new DapperDTO
                {
                    baseDatos = MainContextEnum.Construplan,
                    consulta = strQuery
                }).ToList();

                // ARRENDADORA
                strQuery = string.Format(@"SELECT t1.anio, t1.idMes, t1.idEmpresa, t1.idCC, t2.cc, t2.descripcion AS descripcionCC, t1.idUsuarioCreacion, t1.fechaCreacion, t2.area, t2.cuenta 
	                                                FROM tblAF_CtrlPptalOfCe_EnvioInforme AS t1
	                                                INNER JOIN tblP_CC AS t2 ON t1.idCC = t2.id
		                                                WHERE t1.registroActivo = {0} AND t1.idMes = {1}", 1, objDTO.idMes);
                List<EnvioInformeDTO> lstEnviosInformes_ARR = _context.Select<EnvioInformeDTO>(new DapperDTO
                {
                    baseDatos = MainContextEnum.Arrendadora,
                    consulta = strQuery
                }).ToList();
                #endregion

                #region SE VERIFICA QUE CC YA ENVIO SU INFORME, QUIENES NO Y QUIENES NO APLICAN
                List<EnvioInformeDTO> lstEnvioInformeDTO = new List<EnvioInformeDTO>();
                EnvioInformeDTO obj = new EnvioInformeDTO();
                foreach (var item in lstCC_Autorizados_CP)
                {
                    #region SE REVISA SI YA ENVIO SU INFORME EN BASE AL CC
                    var gastoMesual = datosGenerales.Where(x => x.empresa == 1 && x.cc == item.cc && x.year == objDTO.anio && x.mes == objDTO.idMes).Sum(x => x.monto);
                    var actividades = _context.tblAF_CtrlPptalOfCe_CapPptos.Where(x => x.cc == item.idCC.ToString() && x.anio == objDTO.anio && x.registroActivo).ToList();

                    var actividadesIDs = actividades.Select(x => x.id).ToList();
                    var auxAditivas = _context.tblAF_CtrlAditiva.Where(x => actividadesIDs.Contains(x.capPptosId)).Where(x => x.registroActivo).ToList();
                    var aditivas = auxAditivas.Where(x => x.autorizado).ToList();

                    var presupuestoMensual = actividades.Sum(x => Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[objDTO.idMes - 1]).GetValue(x, null)));
                    presupuestoMensual += aditivas.Sum(x => Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[objDTO.idMes - 1]).GetValue(x, null)));
                    var cumplimiento = presupuestoMensual > 0 ? (gastoMesual * 100) / presupuestoMensual : (gastoMesual * 100) / 1;

                    List<tblAF_CtrlPptalOfCe_Mensaje> mensajes = new List<tblAF_CtrlPptalOfCe_Mensaje>();

                    //var auxMensajes = CargarMensajes(objDTO.anio, objDTO.idMes, item.idCC, 1);
                    //if (auxMensajes["mensajes"] != null) mensajes = (List<tblAF_CtrlPptalOfCe_Mensaje>)auxMensajes["mensajes"];

                    EnvioInformeDTO objEnvioSuInforme = lstEnviosInformes_CP.Where(w => w.idCC == item.idCC).FirstOrDefault();
                    if (objEnvioSuInforme != null)
                    {
                        // ENVIO UN INFORME
                        obj = new EnvioInformeDTO();
                        obj.anio = objEnvioSuInforme.anio;
                        obj.idCC = item.idCC;
                        obj.empresa = "CONSTRUPLAN";
                        obj.idEmpresa = (int)EmpresaEnum.Construplan;
                        obj.mes = GetNombreMes(objEnvioSuInforme.idMes);
                        obj.idMes = objDTO.idMes;
                        obj.cc = !string.IsNullOrEmpty(objEnvioSuInforme.cc) && !string.IsNullOrEmpty(objEnvioSuInforme.descripcionCC) ? string.Format("<b>[{0}]</b> {1}", objEnvioSuInforme.cc.Trim().ToUpper(), objEnvioSuInforme.descripcionCC.Trim().ToUpper()) : string.Empty;
                        obj.envioInforme = (int)EnvioInformeEnum.envio;
                        obj.cumplimientoMensual = cumplimiento;
                        obj.aplicaAditiva = auxAditivas.Where(x => !x.rechazado).Count() > 0;
                        obj.totalAditivas = auxAditivas.Where(x => x.autorizado).Sum(x => Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[objDTO.idMes - 1]).GetValue(x, null)));
                        obj.numAditivasAutorizadas = auxAditivas.Where(x => x.autorizado && (Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[objDTO.idMes - 1]).GetValue(x, null))) > 0).Count();
                        obj.numDeductivasAutorizadas = auxAditivas.Where(x => x.autorizado && (Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[objDTO.idMes - 1]).GetValue(x, null))) < 0).Count();
                        obj.numAditivasPendientes = auxAditivas.Where(x => !x.autorizado && !x.rechazado && (Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[objDTO.idMes - 1]).GetValue(x, null))) > 0).Count();
                        obj.mensajes = mensajes;

                        int registroDuplicado = lstEnvioInformeDTO.Where(w => w.anio == obj.anio && w.idMes == obj.idMes && w.cc == obj.cc).Count();
                        if (registroDuplicado <= 0)
                            lstEnvioInformeDTO.Add(obj);
                    }
                    else
                    {
                        // NO ENVIO UN INFORME
                        obj = new EnvioInformeDTO();
                        obj.anio = item.anio;
                        obj.idCC = item.idCC;
                        obj.empresa = "CONSTRUPLAN";
                        obj.idEmpresa = (int)EmpresaEnum.Construplan;
                        obj.mes = GetNombreMes(objDTO.idMes);
                        obj.idMes = objDTO.idMes;
                        obj.cc = !string.IsNullOrEmpty(item.cc) && !string.IsNullOrEmpty(item.descripcionCC) ? string.Format("<b>[{0}]</b> {1}", item.cc.Trim().ToUpper(), item.descripcionCC.Trim().ToUpper()) : string.Empty;
                        obj.envioInforme = cumplimiento < 97 ? (int)EnvioInformeEnum.noAplica : (int)EnvioInformeEnum.noEnvio;
                        obj.cumplimientoMensual = cumplimiento;
                        obj.aplicaAditiva = auxAditivas.Where(x => !x.rechazado).Count() > 0;
                        obj.totalAditivas = auxAditivas.Where(x => x.autorizado).Sum(x => Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[objDTO.idMes - 1]).GetValue(x, null)));
                        obj.numAditivasAutorizadas = auxAditivas.Where(x => x.autorizado && (Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[objDTO.idMes - 1]).GetValue(x, null))) > 0).Count();
                        obj.numDeductivasAutorizadas = auxAditivas.Where(x => x.autorizado && (Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[objDTO.idMes - 1]).GetValue(x, null))) < 0).Count();
                        obj.numAditivasPendientes = auxAditivas.Where(x => !x.autorizado && !x.rechazado && (Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[objDTO.idMes - 1]).GetValue(x, null))) > 0).Count();
                        obj.mensajes = mensajes;

                        int registroDuplicado = lstEnvioInformeDTO.Where(w => w.anio == obj.anio && w.idMes == obj.idMes && w.cc == obj.cc).Count();
                        if (registroDuplicado <= 0)
                            lstEnvioInformeDTO.Add(obj);
                    }
                    #endregion
                }

                foreach (var item in lstCC_Autorizados_ARR)
                {
                    #region SE REVISA SI YA ENVIO SU INFORME EN BASE AL CC
                    decimal cumplimiento = 0;
                    List<tblAF_CtrlAditiva> auxAditivas = new List<tblAF_CtrlAditiva>();
                    List<tblAF_CtrlPptalOfCe_Mensaje> mensajes = new List<tblAF_CtrlPptalOfCe_Mensaje>();
                    using (var _ctxArre = new MainContext(EmpresaEnum.Arrendadora)) 
                    {
                        var gastoMesual = datosGenerales.Where(x => x.empresa == 2 && x.area == item.area && x.cuenta_oc == item.cuenta && x.year == objDTO.anio && x.mes == objDTO.idMes).Sum(x => x.monto);
                        var actividades = _ctxArre.tblAF_CtrlPptalOfCe_CapPptos.Where(x => x.cc == item.idCC.ToString() && x.anio == objDTO.anio && x.registroActivo).ToList();

                        var actividadesIDs = actividades.Select(x => x.id).ToList();
                        auxAditivas = _context.tblAF_CtrlAditiva.Where(x => actividadesIDs.Contains(x.capPptosId)).Where(x => x.registroActivo).ToList();
                        var aditivas = auxAditivas.Where(x => x.autorizado).ToList();

                        var presupuestoMensual = actividades.Sum(x => Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[objDTO.idMes - 1]).GetValue(x, null)));
                        presupuestoMensual += aditivas.Sum(x => Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[objDTO.idMes - 1]).GetValue(x, null)));
                        cumplimiento = presupuestoMensual > 0 ? (gastoMesual * 100) / presupuestoMensual : (gastoMesual * 100) / 1;                       

                        //var auxMensajes = CargarMensajes(objDTO.anio, objDTO.idMes, item.idCC, 2);
                        //if (auxMensajes["mensajes"] != null) mensajes = (List<tblAF_CtrlPptalOfCe_Mensaje>)auxMensajes["mensajes"];
                    }

                    EnvioInformeDTO objEnvioSuInforme = lstEnviosInformes_ARR.Where(w => w.idCC == item.idCC).FirstOrDefault();
                    if (objEnvioSuInforme != null)
                    {
                        // ENVIO UN INFORME
                        obj = new EnvioInformeDTO();
                        obj.anio = objEnvioSuInforme.anio;
                        obj.idCC = item.idCC;
                        obj.empresa = "ARRENDADORA";
                        obj.idEmpresa = (int)EmpresaEnum.Arrendadora;
                        obj.mes = GetNombreMes(objEnvioSuInforme.idMes);
                        obj.idMes = objDTO.idMes;
                        obj.cc = !string.IsNullOrEmpty(objEnvioSuInforme.cc) && !string.IsNullOrEmpty(objEnvioSuInforme.descripcionCC) ? string.Format("<b>[{0}]</b> {1}", objEnvioSuInforme.cc.Trim().ToUpper(), objEnvioSuInforme.descripcionCC.Trim().ToUpper()) : string.Empty;
                        obj.envioInforme = (int)EnvioInformeEnum.envio;
                        obj.cumplimientoMensual = cumplimiento;
                        obj.aplicaAditiva = auxAditivas.Where(x => !x.rechazado).Count() > 0;
                        obj.totalAditivas = auxAditivas.Where(x => x.autorizado).Sum(x => Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[objDTO.idMes - 1]).GetValue(x, null)));
                        obj.numAditivasAutorizadas = auxAditivas.Where(x => x.autorizado && (Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[objDTO.idMes - 1]).GetValue(x, null))) > 0).Count();
                        obj.numDeductivasAutorizadas = auxAditivas.Where(x => x.autorizado && (Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[objDTO.idMes - 1]).GetValue(x, null))) < 0).Count();
                        obj.numAditivasPendientes = auxAditivas.Where(x => !x.autorizado && !x.rechazado && (Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[objDTO.idMes - 1]).GetValue(x, null))) > 0).Count();
                        obj.mensajes = mensajes;

                        int registroDuplicado = lstEnvioInformeDTO.Where(w => w.anio == obj.anio && w.idMes == obj.idMes && w.cc == obj.cc).Count();
                        if (registroDuplicado <= 0)
                            lstEnvioInformeDTO.Add(obj);
                    }
                    else
                    {
                        // NO ENVIO UN INFORME
                        obj = new EnvioInformeDTO();
                        obj.anio = item.anio;
                        obj.idCC = item.idCC;
                        obj.empresa = "ARRENDADORA";
                        obj.idEmpresa = (int)EmpresaEnum.Arrendadora;
                        obj.mes = GetNombreMes(objDTO.idMes);
                        obj.idMes = objDTO.idMes;
                        obj.cc = !string.IsNullOrEmpty(item.cc) && !string.IsNullOrEmpty(item.descripcionCC) ? string.Format("<b>[{0}]</b> {1}", item.cc.Trim().ToUpper(), item.descripcionCC.Trim().ToUpper()) : string.Empty;
                        obj.envioInforme = cumplimiento < 97 ? (int)EnvioInformeEnum.noAplica : (int)EnvioInformeEnum.noEnvio;
                        obj.cumplimientoMensual = cumplimiento;
                        obj.aplicaAditiva = auxAditivas.Where(x => !x.rechazado).Count() > 0;
                        obj.totalAditivas = auxAditivas.Where(x => x.autorizado).Sum(x => Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[objDTO.idMes - 1]).GetValue(x, null)));
                        obj.numAditivasAutorizadas = auxAditivas.Where(x => x.autorizado && (Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[objDTO.idMes - 1]).GetValue(x, null))) > 0).Count();
                        obj.numDeductivasAutorizadas = auxAditivas.Where(x => x.autorizado && (Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[objDTO.idMes - 1]).GetValue(x, null))) < 0).Count();
                        obj.numAditivasPendientes = auxAditivas.Where(x => !x.autorizado && !x.rechazado && (Convert.ToDecimal(x.GetType().GetProperty("importe" + meses[objDTO.idMes - 1]).GetValue(x, null))) > 0).Count();
                        obj.mensajes = mensajes;

                        int registroDuplicado = lstEnvioInformeDTO.Where(w => w.anio == obj.anio && w.idMes == obj.idMes && w.cc == obj.cc).Count();
                        if (registroDuplicado <= 0)
                            lstEnvioInformeDTO.Add(obj);
                    }
                    #endregion
                }
                #endregion

                if (objDTO.idEmpresa > 0 && objDTO.idEmpresa != 9999)
                    lstEnvioInformeDTO = lstEnvioInformeDTO.Where(w => w.idEmpresa == objDTO.idEmpresa).ToList();

                lstEnvioInformeDTO = lstEnvioInformeDTO.Where(w => w.anio == objDTO.anio && w.idMes == objDTO.idMes).OrderBy(x => x.idEmpresa).ThenBy(x => x.cc).ToList();

                resultado.Add("lstEnvioInformeDTO", lstEnvioInformeDTO);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetEnvioInforme", e, AccionEnum.CONSULTA, objDTO.id, objDTO);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        private string GetNombreMes(int idMes)
        {
            string mes = string.Empty;
            switch (idMes)
            {
                case 1:
                    mes = "ENERO";
                    break;
                case 2:
                    mes = "FEBRERO";
                    break;
                case 3:
                    mes = "MARZO";
                    break;
                case 4:
                    mes = "ABRIL";
                    break;
                case 5:
                    mes = "MAYO";
                    break;
                case 6:
                    mes = "JUNIO";
                    break;
                case 7:
                    mes = "JULIO";
                    break;
                case 8:
                    mes = "AGOSTO";
                    break;
                case 9:
                    mes = "SEPTIEMBRE";
                    break;
                case 10:
                    mes = "OCTUBRE";
                    break;
                case 11:
                    mes = "NOVIEMBRE";
                    break;
                case 12:
                    mes = "DICIEMBRE";
                    break;
                default:
                    break;
            }

            return mes;
        }

        public Dictionary<string, object> GetPermisoVisualizarEnvioInformes()
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region SE HABILITA BOTÓN PARA VISUALIZAR INFORME PLAN DE ACCIÓN (GERARDO.REINA, CARLA.VELASCO, JOSE.GAYTAN)
                bool tieneAcceso = false;
                switch ((int)vSesiones.sesionUsuarioDTO.id)
                {
                    case 1164:
                        tieneAcceso = true;
                        break;
                    case 6185:
                        tieneAcceso = true;
                        break;
                    case 4:
                        tieneAcceso = true;
                        break;
                    //case 79419:
                    //    tieneAcceso = true;
                    //    break;
                    default:
                        tieneAcceso = false;
                        break;
                }

                bool esAdmin = (int)vSesiones.sesionUsuarioDTO.idPerfil == (int)PerfilUsuarioEnum.ADMINISTRADOR ? true : false;

                if (esAdmin)
                    tieneAcceso = true;

                #endregion
                resultado.Add("tieneAcceso", tieneAcceso);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }
        #endregion

        public Dictionary<string, object> GetConceptosRelCC(ConceptosRelCCDTO objDTO)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region SE OBTIENE EL PPTO MENSUAL, ACUMULADO Y SUS CUMPLIMIENTOS
                List<MovPolControlPptalDTO> datosGenerales = (List<MovPolControlPptalDTO>)session["ControlPresupuestalDatos"];
                string strQuery_CP = string.Empty;
                string strQuery_ARR = string.Empty;
                string nombreMes = GetNombreMes(objDTO.idMes);
                List<ConceptosRelCCDTO> lstConceptosRelCC_CP = new List<ConceptosRelCCDTO>();
                List<ConceptosRelCCDTO> lstConceptosRelCC_ARR = new List<ConceptosRelCCDTO>();
                List<ConceptosRelCCDTO> lstConceptosDTO = new List<ConceptosRelCCDTO>();
                List<tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas> lstCuentasContables_CP = new List<tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas>();
                List<tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas> lstCuentasContables_ARR = new List<tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas>();

                #region SE OBTIENE LAS CUENTAS QUE CONTIENE CADA CONCEPTO EN BASE A LOS CC SELECIONADOS
                List<SumaDTO> lstCuentasRelConcepto_CP = _context.Select<SumaDTO>(new DapperDTO
                {
                    baseDatos = MainContextEnum.Construplan,
                    consulta = "SELECT idConcepto, cta, scta, sscta FROM tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas WHERE registroActivo = 1",
                }).ToList();

                List<SumaDTO> lstCuentasRelConcepto_ARR = _context.Select<SumaDTO>(new DapperDTO
                {
                    baseDatos = MainContextEnum.Arrendadora,
                    consulta = "SELECT idConcepto, cta, scta, sscta FROM tblAF_CtrlPptalOfCe_CatCtaInsumos_Cuentas WHERE registroActivo = 1",
                }).ToList();
                #endregion

                if (objDTO.arrConstruplan != null && objDTO.arrArrendadora == null)
                {
                    #region CONSTRUPLAN
                    List<tblP_CC> lstCC = _context.tblP_CC.Where(w => objDTO.arrConstruplan.Contains(w.id)).ToList();
                    List<string> lstCCString = lstCC.Select(x => x.cc).ToList();

                    strQuery_CP = string.Format(@"SELECT t1.id, t1.cc, t1.idAgrupacion, t1.idConcepto, t2.concepto, t2.idConcepto AS idConceptoCuenta,
	                                                  t1.importeEnero, t1.importeFebrero, t1.importeMarzo, t1.importeAbril, 
	                                                  t1.importeMayo, t1.importeJunio, t1.importeJulio, t1.importeAgosto, 
	                                                  t1.importeSeptiembre, t1.importeOctubre, t1.importeNoviembre, t1.importeDiciembre
		                                                FROM tblAF_CtrlPptalOfCe_CapPptos AS t1
		                                                    INNER JOIN tblAF_CtrlPptalOfCe_CatConceptos AS t2 ON t1.idConcepto = t2.id
			                                                    WHERE t2.idConcepto IN ({0}) AND t1.cc IN ({1}) AND t1.registroActivo = {2} AND t1.anio = {3}", string.Join(",", objDTO.arrCapturasID), string.Join(",", objDTO.arrConstruplan), 1, objDTO.anio);
                    lstConceptosRelCC_CP = _context.Select<ConceptosRelCCDTO>(new DapperDTO
                    {
                        baseDatos = MainContextEnum.Construplan,
                        consulta = strQuery_CP
                    }).ToList();

                    #region SE OBTIENE LOS MONTOS DE LAS CUENTAS EN BASE A LOS CC SELECCIONADOS || EK
                    List<string> lstCCEK_CP = new List<string>();
                    List<SumaDTO> lstMontosCuentasCC = new List<SumaDTO>();
                    foreach (var item in objDTO.arrConstruplan)
                    {
                        lstCCEK_CP.Add(string.Format("'{0}'", lstCC.Where(w => w.id == item).Select(s => s.cc).FirstOrDefault()));
                    }

                    if (lstCCEK_CP.Count() > 0)
                    {
//                        strQuery_CP = string.Format(@"SELECT mov.mes, mov.cta, mov.scta, mov.sscta, mov.cc, mov.monto
//                                                        FROM sc_movpol AS mov 
//                                                        INNER JOIN sc_polizas AS pol ON pol.year = mov.year AND pol.mes = mov.mes AND pol.poliza = mov.poliza AND pol.tp = mov.tp
//                                                            WHERE mov.year = {0} AND pol.status = 'A' AND mov.cc IN ({1})", objDTO.anio, string.Join(",", lstCCEK_CP));

//                        lstMontosCuentasCC = _contextEnkontrol.Select<SumaDTO>(EnkontrolAmbienteEnum.ProdCPLAN, strQuery_CP);
                        lstMontosCuentasCC = datosGenerales.Where(x => x.year == objDTO.anio && lstCCString.Contains(x.cc)).GroupBy(x => new { mes = x.mes, cta = x.cta, scta = x.scta, sscta = x.sscta, cc = x.cc }).Select(x => new SumaDTO {
                            mes = x.Key.mes,
                            cta = x.Key.cta,
                            scta = x.Key.scta,
                            sscta = x.Key.sscta,
                            cc = x.Key.cc,
                            monto = x.Sum(y => y.monto)
                        }).ToList();
                    }
                    #endregion

                    lstConceptosDTO = new List<ConceptosRelCCDTO>();
                    foreach (var item in lstConceptosRelCC_CP)
                    {
                        ConceptosRelCCDTO objConcepto = new ConceptosRelCCDTO();

                        objConcepto.concepto = item.concepto.Trim().ToUpper();

                        #region SE OBTIENE NOMBRE DEL CC COMPLETO
                        string cc = lstCC.Where(w => w.id == Convert.ToInt32(item.cc)).Select(s => s.cc).FirstOrDefault();
                        string descripcionCC = lstCC.Where(w => w.id == Convert.ToInt32(item.cc)).Select(s => s.descripcion).FirstOrDefault();
                        objConcepto.cc = string.Format("[{0}] {1}", cc.Trim().ToUpper(), descripcionCC.Trim().ToUpper());
                        #endregion

                        #region SE OBTIENE: PPTO MENSUAL || PPTO ACUMULADO
                        switch (objDTO.idMes)
                        {
                            case 1:
                                objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeEnero).FirstOrDefault();
                                objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeEnero).Sum(s => s);
                                break;
                            case 2:
                                objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeFebrero).FirstOrDefault();
                                objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero);
                                break;
                            case 3:
                                objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeMarzo).FirstOrDefault();
                                objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo);
                                break;
                            case 4:
                                objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeAbril).FirstOrDefault();
                                objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril);
                                break;
                            case 5:
                                objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeMayo).FirstOrDefault();
                                objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo);
                                break;
                            case 6:
                                objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeJunio).FirstOrDefault();
                                objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio);
                                break;
                            case 7:
                                objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeJulio).FirstOrDefault();
                                objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio);
                                break;
                            case 8:
                                objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeAgosto).FirstOrDefault();
                                objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio + s.importeAgosto);
                                break;
                            case 9:
                                objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeSeptiembre).FirstOrDefault();
                                objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio + s.importeAgosto + s.importeSeptiembre);
                                break;
                            case 10:
                                objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeOctubre).FirstOrDefault();
                                objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio + s.importeAgosto + s.importeSeptiembre + s.importeOctubre);
                                break;
                            case 11:
                                objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeNoviembre).FirstOrDefault();
                                objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio + s.importeAgosto + s.importeSeptiembre + s.importeOctubre + s.importeNoviembre);
                                break;
                            case 12:
                                objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeDiciembre).FirstOrDefault();
                                objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio + s.importeAgosto + s.importeSeptiembre + s.importeOctubre + s.importeNoviembre + s.importeDiciembre);
                                break;
                            default:
                                break;
                        }
                        // SE OBTIENE LAS CUENTAS DEL CONCEPTO
                        List<SumaDTO> lstCuentasConcepto = new List<SumaDTO>();
                        lstCuentasConcepto = lstCuentasRelConcepto_CP.Where(w => w.idConcepto == item.idConceptoCuenta).ToList();
                        foreach (var itemCuentaRelConcepto in lstCuentasConcepto)
                        {
                            int cta = itemCuentaRelConcepto.cta > 0 ? itemCuentaRelConcepto.cta : 0;
                            int scta = itemCuentaRelConcepto.scta > 0 ? itemCuentaRelConcepto.scta : 0;
                            int sscta = itemCuentaRelConcepto.sscta > 0 ? itemCuentaRelConcepto.sscta : 0;
                            objConcepto.gastoMensual += lstMontosCuentasCC.Where(w => w.cc == cc && w.mes == objDTO.idMes && w.cta == cta && w.scta == scta && w.sscta == sscta).Select(s => s.monto).Sum(s => s);
                            objConcepto.gastoAcumulado += lstMontosCuentasCC.Where(w => w.cc == cc && w.mes > 0 && w.mes <= objDTO.idMes && w.cta == cta && w.scta == scta && w.sscta == sscta).Select(s => s.monto).Sum(s => s);
                        }

                        objConcepto.cumplimientoMensual = 0;
                        if (objConcepto.pptoMensual > 0 && objConcepto.gastoMensual > 0)
                            objConcepto.cumplimientoMensual = (objConcepto.gastoMensual / objConcepto.pptoMensual) * 100;

                        objConcepto.cumplimientoAcumulado = 0;
                        if (objConcepto.pptoAcumulado > 0 && objConcepto.gastoAcumulado > 0)
                            objConcepto.cumplimientoAcumulado = (objConcepto.gastoAcumulado / objConcepto.pptoAcumulado) * 100;

                        objConcepto.diferenciaMensual = objConcepto.pptoMensual - objConcepto.gastoMensual;
                        objConcepto.diferenciaAcumulado = objConcepto.pptoAcumulado - objConcepto.gastoAcumulado;
                        #endregion

                        lstConceptosDTO.Add(objConcepto);
                    }
                    #endregion
                }
                else if (objDTO.arrConstruplan == null && objDTO.arrArrendadora != null)
                {
                    #region ARRENDADORA
                    using (var _ctxArre = new MainContext(EmpresaEnum.Arrendadora))
                    {
                        List<int> auxArrArrendadora = new List<int>();
                        if (objDTO.arrArrendadora != null) auxArrArrendadora = objDTO.arrArrendadora;
                        List<tblP_CC> lstCC = _ctxArre.tblP_CC.Where(w => auxArrArrendadora.Contains(w.id)).ToList();
                        List<string> lstCCString = lstCC.Select(x => x.areaCuenta).ToList();

                        strQuery_ARR = string.Format(@"SELECT t1.id, t1.cc, t1.idAgrupacion, t1.idConcepto, t2.concepto, t2.idConcepto AS idConceptoCuenta,
	                                                  t1.importeEnero, t1.importeFebrero, t1.importeMarzo, t1.importeAbril, 
	                                                  t1.importeMayo, t1.importeJunio, t1.importeJulio, t1.importeAgosto, 
	                                                  t1.importeSeptiembre, t1.importeOctubre, t1.importeNoviembre, t1.importeDiciembre
		                                                FROM tblAF_CtrlPptalOfCe_CapPptos AS t1
		                                                    INNER JOIN tblAF_CtrlPptalOfCe_CatConceptos AS t2 ON t1.idConcepto = t2.id
			                                                    WHERE t2.idConcepto IN ({0}) AND t1.cc IN ({1}) AND t1.registroActivo = {2} AND t1.anio = {3}", string.Join(",", objDTO.arrCapturasID), string.Join(",", auxArrArrendadora), 1, objDTO.anio);
                        lstConceptosRelCC_ARR = _ctxArre.Select<ConceptosRelCCDTO>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Arrendadora,
                            consulta = strQuery_ARR
                        }).ToList();

                        #region SE OBTIENE LOS MONTOS DE LAS CUENTAS EN BASE A LOS CC SELECCIONADOS || EK
                        List<string> lstAreaEK_ARR = new List<string>();
                        List<string> lstCuentaEK_ARR = new List<string>();
                        List<SumaDTO> lstMontosCuentasCC = new List<SumaDTO>();
                        foreach (var item in objDTO.arrArrendadora)
                        {
                            lstAreaEK_ARR.Add(string.Format("'{0}'", lstCC.Where(w => w.id == item).Select(s => s.area).FirstOrDefault()));
                            lstCuentaEK_ARR.Add(string.Format("'{0}'", lstCC.Where(w => w.id == item).Select(s => s.cuenta).FirstOrDefault()));
                        }

                        if (lstAreaEK_ARR.Count() > 0 && lstCuentaEK_ARR.Count() > 0)
                        {
//                            strQuery_ARR = string.Format(@"SELECT mov.mes, mov.cta, mov.scta, mov.sscta, mov.cc, mov.monto
//                                                                    FROM sc_movpol AS mov 
//                                                                    INNER JOIN sc_polizas AS pol ON pol.year = mov.year AND pol.mes = mov.mes AND pol.poliza = mov.poliza AND pol.tp = mov.tp
//                                                                        WHERE mov.year = {0} AND pol.status = 'A' AND mov.area IN ({1}) AND mov.cuenta_oc IN ({2})", objDTO.anio, string.Join(",", lstAreaEK_ARR), string.Join(",", lstCuentaEK_ARR));

//                            lstMontosCuentasCC = _contextEnkontrol.Select<SumaDTO>(EnkontrolAmbienteEnum.ProdCPLAN, strQuery_ARR);

                            lstMontosCuentasCC = datosGenerales.Where(x => x.year == objDTO.anio && lstCCString.Contains(x.area.ToString() + "-" + x.cuenta_oc.ToString())).GroupBy(x => new { mes = x.mes, cta = x.cta, scta = x.scta, sscta = x.sscta, area = x.area, cuenta = x.cuenta_oc }).Select(x => new SumaDTO
                            {
                                mes = x.Key.mes,
                                cta = x.Key.cta,
                                scta = x.Key.scta,
                                sscta = x.Key.sscta,
                                cc = x.Key.area.ToString() + "-" + x.Key.cuenta.ToString(),
                                monto = x.Sum(y => y.monto)
                            }).ToList();
                        }
                        #endregion

                        lstConceptosDTO = new List<ConceptosRelCCDTO>();
                        foreach (var item in lstConceptosRelCC_ARR)
                        {
                            ConceptosRelCCDTO objConcepto = new ConceptosRelCCDTO();

                            objConcepto.concepto = item.concepto.Trim().ToUpper();

                            #region SE OBTIENE NOMBRE DEL CC COMPLETO
                            string cc = lstCC.Where(w => w.id == Convert.ToInt32(item.cc)).Select(s => s.areaCuenta).FirstOrDefault();
                            string descripcionCC = lstCC.Where(w => w.id == Convert.ToInt32(item.cc)).Select(s => s.descripcion).FirstOrDefault();
                            objConcepto.cc = string.Format("[{0}] {1}", cc.Trim().ToUpper(), descripcionCC.Trim().ToUpper());
                            #endregion

                            #region SE OBTIENE: PPTO MENSUAL || PPTO ACUMULADO
                            switch (objDTO.idMes)
                            {
                                case 1:
                                    objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeEnero).FirstOrDefault();
                                    objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeEnero).Sum(s => s);
                                    break;
                                case 2:
                                    objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeFebrero).FirstOrDefault();
                                    objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero);
                                    break;
                                case 3:
                                    objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeMarzo).FirstOrDefault();
                                    objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo);
                                    break;
                                case 4:
                                    objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeAbril).FirstOrDefault();
                                    objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril);
                                    break;
                                case 5:
                                    objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeMayo).FirstOrDefault();
                                    objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo);
                                    break;
                                case 6:
                                    objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeJunio).FirstOrDefault();
                                    objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio);
                                    break;
                                case 7:
                                    objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeJulio).FirstOrDefault();
                                    objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio);
                                    break;
                                case 8:
                                    objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeAgosto).FirstOrDefault();
                                    objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio + s.importeAgosto);
                                    break;
                                case 9:
                                    objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeSeptiembre).FirstOrDefault();
                                    objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio + s.importeAgosto + s.importeSeptiembre);
                                    break;
                                case 10:
                                    objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeOctubre).FirstOrDefault();
                                    objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio + s.importeAgosto + s.importeSeptiembre + s.importeOctubre);
                                    break;
                                case 11:
                                    objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeNoviembre).FirstOrDefault();
                                    objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio + s.importeAgosto + s.importeSeptiembre + s.importeOctubre + s.importeNoviembre);
                                    break;
                                case 12:
                                    objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeDiciembre).FirstOrDefault();
                                    objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio + s.importeAgosto + s.importeSeptiembre + s.importeOctubre + s.importeNoviembre + s.importeDiciembre);
                                    break;
                                default:
                                    break;
                            }
                            // SE OBTIENE LAS CUENTAS DEL CONCEPTO
                            List<SumaDTO> lstCuentasConcepto = new List<SumaDTO>();
                            lstCuentasConcepto = lstCuentasRelConcepto_ARR.Where(w => w.idConcepto == item.idConceptoCuenta).ToList();
                            foreach (var itemCuentaRelConcepto in lstCuentasConcepto)
                            {
                                int cta = itemCuentaRelConcepto.cta > 0 ? itemCuentaRelConcepto.cta : 0;
                                int scta = itemCuentaRelConcepto.scta > 0 ? itemCuentaRelConcepto.scta : 0;
                                int sscta = itemCuentaRelConcepto.sscta > 0 ? itemCuentaRelConcepto.sscta : 0;
                                objConcepto.gastoMensual += lstMontosCuentasCC.Where(w => w.cc == cc && w.mes == objDTO.idMes && w.cta == cta && w.scta == scta && w.sscta == sscta).Select(s => s.monto).Sum(s => s);
                                objConcepto.gastoAcumulado += lstMontosCuentasCC.Where(w => w.cc == cc && w.mes > 0 && w.mes <= objDTO.idMes && w.cta == cta && w.scta == scta && w.sscta == sscta).Select(s => s.monto).Sum(s => s);
                            }

                            objConcepto.cumplimientoMensual = 0;
                            if (objConcepto.pptoMensual > 0 && objConcepto.gastoMensual > 0)
                                objConcepto.cumplimientoMensual = (objConcepto.gastoMensual / objConcepto.pptoMensual) * 100;

                            objConcepto.cumplimientoAcumulado = 0;
                            if (objConcepto.pptoAcumulado > 0 && objConcepto.gastoAcumulado > 0)
                                objConcepto.cumplimientoAcumulado = (objConcepto.gastoAcumulado / objConcepto.pptoAcumulado) * 100;

                            objConcepto.diferenciaMensual = objConcepto.pptoMensual - objConcepto.gastoMensual;
                            objConcepto.diferenciaAcumulado = objConcepto.pptoAcumulado - objConcepto.gastoAcumulado;
                            #endregion

                            lstConceptosDTO.Add(objConcepto);
                        }
                    }
                    #endregion
                }
                else if (objDTO.arrConstruplan != null && objDTO.arrArrendadora != null)
                {
                    #region AMBAS
                    #region CONSTRUPLAN
                    List<tblP_CC> lstCC_CP = _context.tblP_CC.Where(w => objDTO.arrConstruplan.Contains(w.id)).ToList();
                    List<string> lstCCString_CP = lstCC_CP.Select(x => x.cc).ToList();

                    strQuery_CP = string.Format(@"SELECT t1.id, t1.cc, t1.idAgrupacion, t1.idConcepto, t2.concepto, t2.idConcepto AS idConceptoCuenta,
	                                                  t1.importeEnero, t1.importeFebrero, t1.importeMarzo, t1.importeAbril, 
	                                                  t1.importeMayo, t1.importeJunio, t1.importeJulio, t1.importeAgosto, 
	                                                  t1.importeSeptiembre, t1.importeOctubre, t1.importeNoviembre, t1.importeDiciembre
		                                                FROM tblAF_CtrlPptalOfCe_CapPptos AS t1
		                                                    INNER JOIN tblAF_CtrlPptalOfCe_CatConceptos AS t2 ON t1.idConcepto = t2.id
			                                                    WHERE t2.idConcepto IN ({0}) AND t1.cc IN ({1}) AND t1.registroActivo = {2} AND t1.anio = {3}", string.Join(",", objDTO.arrCapturasID), string.Join(",", objDTO.arrConstruplan), 1, objDTO.anio);
                    lstConceptosRelCC_CP = _context.Select<ConceptosRelCCDTO>(new DapperDTO
                    {
                        baseDatos = MainContextEnum.Construplan,
                        consulta = strQuery_CP
                    }).ToList();

                    #region SE OBTIENE LOS MONTOS DE LAS CUENTAS EN BASE A LOS CC SELECCIONADOS || EK
                    List<string> lstCCEK_CP = new List<string>();
                    List<SumaDTO> lstMontosCuentasCC_CP = new List<SumaDTO>();
                    foreach (var item in objDTO.arrConstruplan)
                    {
                        lstCCEK_CP.Add(string.Format("'{0}'", lstCC_CP.Where(w => w.id == item).Select(s => s.cc).FirstOrDefault()));
                    }

                    if (lstCCEK_CP.Count() > 0)
                    {
//                        strQuery_CP = string.Format(@"SELECT mov.mes, mov.cta, mov.scta, mov.sscta, mov.cc, mov.monto
//                                                        FROM sc_movpol AS mov 
//                                                        INNER JOIN sc_polizas AS pol ON pol.year = mov.year AND pol.mes = mov.mes AND pol.poliza = mov.poliza AND pol.tp = mov.tp
//                                                            WHERE mov.year = {0} AND pol.status = 'A' AND mov.cc IN ({1})", objDTO.anio, string.Join(",", lstCCEK_CP));

//                        lstMontosCuentasCC_CP = _contextEnkontrol.Select<SumaDTO>(EnkontrolAmbienteEnum.ProdCPLAN, strQuery_CP);
                        lstMontosCuentasCC_CP = datosGenerales.Where(x => x.year == objDTO.anio && lstCCString_CP.Contains(x.cc)).GroupBy(x => new { mes = x.mes, cta = x.cta, scta = x.scta, sscta = x.sscta, cc = x.cc }).Select(x => new SumaDTO
                        {
                            mes = x.Key.mes,
                            cta = x.Key.cta,
                            scta = x.Key.scta,
                            sscta = x.Key.sscta,
                            cc = x.Key.cc,
                            monto = x.Sum(y => y.monto)
                        }).ToList();
                    }
                    #endregion

                    lstConceptosDTO = new List<ConceptosRelCCDTO>();
                    foreach (var item in lstConceptosRelCC_CP)
                    {
                        ConceptosRelCCDTO objConcepto = new ConceptosRelCCDTO();

                        objConcepto.concepto = item.concepto.Trim().ToUpper();

                        #region SE OBTIENE NOMBRE DEL CC COMPLETO
                        string cc = lstCC_CP.Where(w => w.id == Convert.ToInt32(item.cc)).Select(s => s.cc).FirstOrDefault();
                        string descripcionCC = lstCC_CP.Where(w => w.id == Convert.ToInt32(item.cc)).Select(s => s.descripcion).FirstOrDefault();
                        objConcepto.cc = string.Format("[{0}] {1}", cc.Trim().ToUpper(), descripcionCC.Trim().ToUpper());
                        #endregion

                        #region SE OBTIENE: PPTO MENSUAL || PPTO ACUMULADO
                        switch (objDTO.idMes)
                        {
                            case 1:
                                objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeEnero).FirstOrDefault();
                                objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeEnero).Sum(s => s);
                                break;
                            case 2:
                                objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeFebrero).FirstOrDefault();
                                objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero);
                                break;
                            case 3:
                                objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeMarzo).FirstOrDefault();
                                objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo);
                                break;
                            case 4:
                                objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeAbril).FirstOrDefault();
                                objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril);
                                break;
                            case 5:
                                objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeMayo).FirstOrDefault();
                                objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo);
                                break;
                            case 6:
                                objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeJunio).FirstOrDefault();
                                objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio);
                                break;
                            case 7:
                                objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeJulio).FirstOrDefault();
                                objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio);
                                break;
                            case 8:
                                objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeAgosto).FirstOrDefault();
                                objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio + s.importeAgosto);
                                break;
                            case 9:
                                objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeSeptiembre).FirstOrDefault();
                                objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio + s.importeAgosto + s.importeSeptiembre);
                                break;
                            case 10:
                                objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeOctubre).FirstOrDefault();
                                objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio + s.importeAgosto + s.importeSeptiembre + s.importeOctubre);
                                break;
                            case 11:
                                objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeNoviembre).FirstOrDefault();
                                objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio + s.importeAgosto + s.importeSeptiembre + s.importeOctubre + s.importeNoviembre);
                                break;
                            case 12:
                                objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeDiciembre).FirstOrDefault();
                                objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio + s.importeAgosto + s.importeSeptiembre + s.importeOctubre + s.importeNoviembre + s.importeDiciembre);
                                break;
                            default:
                                break;
                        }

                        // SE OBTIENE LAS CUENTAS DEL CONCEPTO
                        List<SumaDTO> lstCuentasConcepto = new List<SumaDTO>();
                        lstCuentasConcepto = lstCuentasRelConcepto_CP.Where(w => w.idConcepto == item.idConceptoCuenta).ToList();
                        foreach (var itemCuentaRelConcepto in lstCuentasConcepto)
                        {
                            int cta = itemCuentaRelConcepto.cta > 0 ? itemCuentaRelConcepto.cta : 0;
                            int scta = itemCuentaRelConcepto.scta > 0 ? itemCuentaRelConcepto.scta : 0;
                            int sscta = itemCuentaRelConcepto.sscta > 0 ? itemCuentaRelConcepto.sscta : 0;
                            objConcepto.gastoMensual += lstMontosCuentasCC_CP.Where(w => w.cc == cc && w.mes == objDTO.idMes && w.cta == cta && w.scta == scta && w.sscta == sscta).Select(s => s.monto).Sum(s => s);
                            objConcepto.gastoAcumulado += lstMontosCuentasCC_CP.Where(w => w.cc == cc && w.mes > 0 && w.mes <= objDTO.idMes && w.cta == cta && w.scta == scta && w.sscta == sscta).Select(s => s.monto).Sum(s => s);
                        }

                        objConcepto.cumplimientoMensual = 0;
                        if (objConcepto.pptoMensual > 0 && objConcepto.gastoMensual > 0)
                            objConcepto.cumplimientoMensual = (objConcepto.gastoMensual / objConcepto.pptoMensual) * 100;

                        objConcepto.cumplimientoAcumulado = 0;
                        if (objConcepto.pptoAcumulado > 0 && objConcepto.gastoAcumulado > 0)
                            objConcepto.cumplimientoAcumulado = (objConcepto.gastoAcumulado / objConcepto.pptoAcumulado) * 100;

                        objConcepto.diferenciaMensual = objConcepto.pptoMensual - objConcepto.gastoMensual;
                        objConcepto.diferenciaAcumulado = objConcepto.pptoAcumulado - objConcepto.gastoAcumulado;
                        #endregion

                        lstConceptosDTO.Add(objConcepto);
                    }
                    #endregion

                    #region ARRENDADORA
                    using (var _ctxArre = new MainContext(EmpresaEnum.Arrendadora))
                    {
                        List<tblP_CC> lstCC_ARR = _ctxArre.tblP_CC.Where(w => objDTO.arrConstruplan.Contains(w.id)).ToList();
                        List<string> lstCCString_ARR = lstCC_ARR.Select(x => x.areaCuenta).ToList();

                        strQuery_ARR = string.Format(@"SELECT t1.id, t1.cc, t1.idAgrupacion, t1.idConcepto, t2.concepto, t2.idConcepto AS idConceptoCuenta,
	                                                  t1.importeEnero, t1.importeFebrero, t1.importeMarzo, t1.importeAbril, 
	                                                  t1.importeMayo, t1.importeJunio, t1.importeJulio, t1.importeAgosto, 
	                                                  t1.importeSeptiembre, t1.importeOctubre, t1.importeNoviembre, t1.importeDiciembre
		                                                FROM tblAF_CtrlPptalOfCe_CapPptos AS t1
		                                                    INNER JOIN tblAF_CtrlPptalOfCe_CatConceptos AS t2 ON t1.idConcepto = t2.id
			                                                    WHERE t2.idConcepto IN ({0}) AND t1.cc IN ({1}) AND t1.registroActivo = {2} AND t1.anio = {3}", string.Join(",", objDTO.arrCapturasID), string.Join(",", objDTO.arrConstruplan), 1, objDTO.anio);
                        lstConceptosRelCC_CP = _ctxArre.Select<ConceptosRelCCDTO>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Arrendadora,
                            consulta = strQuery_ARR
                        }).ToList();

                        #region SE OBTIENE LOS MONTOS DE LAS CUENTAS EN BASE A LOS CC SELECCIONADOS || EK
                        List<string> lstAreaEK_ARR = new List<string>();
                        List<string> lstCuentaEK_ARR = new List<string>();
                        List<SumaDTO> lstMontosCuentasCC_ARR = new List<SumaDTO>();
                        foreach (var item in objDTO.arrArrendadora)
                        {
                            lstAreaEK_ARR.Add(string.Format("'{0}'", lstCC_ARR.Where(w => w.id == item).Select(s => s.area).FirstOrDefault()));
                            lstCuentaEK_ARR.Add(string.Format("'{0}'", lstCC_ARR.Where(w => w.id == item).Select(s => s.cuenta).FirstOrDefault()));
                        }

                        if (lstAreaEK_ARR.Count() > 0 && lstCuentaEK_ARR.Count() > 0)
                        {
//                            strQuery_ARR = string.Format(@"SELECT mov.mes, mov.cta, mov.scta, mov.sscta, mov.cc, mov.monto
//                                                                    FROM sc_movpol AS mov 
//                                                                    INNER JOIN sc_polizas AS pol ON pol.year = mov.year AND pol.mes = mov.mes AND pol.poliza = mov.poliza AND pol.tp = mov.tp
//                                                                        WHERE mov.year = {0} AND pol.status = 'A' AND mov.area IN ({1}) AND mov.cuenta_oc IN ({2})", objDTO.anio, string.Join(",", lstAreaEK_ARR), string.Join(",", lstCuentaEK_ARR));

//                            lstMontosCuentasCC_ARR = _contextEnkontrol.Select<SumaDTO>(EnkontrolAmbienteEnum.ProdCPLAN, strQuery_ARR);
                            lstMontosCuentasCC_ARR = datosGenerales.Where(x => x.year == objDTO.anio && lstCCString_ARR.Contains(x.area.ToString() + "-" + x.cuenta_oc.ToString())).GroupBy(x => new { mes = x.mes, cta = x.cta, scta = x.scta, sscta = x.sscta, area = x.area, cuenta = x.cuenta_oc }).Select(x => new SumaDTO
                            {
                                mes = x.Key.mes,
                                cta = x.Key.cta,
                                scta = x.Key.scta,
                                sscta = x.Key.sscta,
                                cc = x.Key.area.ToString() + "-" + x.Key.cuenta.ToString(),
                                monto = x.Sum(y => y.monto)
                            }).ToList();
                        }
                        #endregion

                        //lstConceptosDTO = new List<ConceptosRelCCDTO>();
                        foreach (var item in lstConceptosRelCC_ARR)
                        {
                            ConceptosRelCCDTO objConcepto = new ConceptosRelCCDTO();

                            objConcepto.concepto = item.concepto.Trim().ToUpper();

                            #region SE OBTIENE NOMBRE DEL CC COMPLETO
                            string cc = lstCC_ARR.Where(w => w.id == Convert.ToInt32(item.cc)).Select(s => s.areaCuenta).FirstOrDefault();
                            string descripcionCC = lstCC_ARR.Where(w => w.id == Convert.ToInt32(item.cc)).Select(s => s.descripcion).FirstOrDefault();
                            objConcepto.cc = string.Format("[{0}] {1}", cc.Trim().ToUpper(), descripcionCC.Trim().ToUpper());
                            #endregion

                            #region SE OBTIENE: PPTO MENSUAL || PPTO ACUMULADO
                            switch (objDTO.idMes)
                            {
                                case 1:
                                    objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeEnero).FirstOrDefault();
                                    objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeEnero).Sum(s => s);
                                    break;
                                case 2:
                                    objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeFebrero).FirstOrDefault();
                                    objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero);
                                    break;
                                case 3:
                                    objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeMarzo).FirstOrDefault();
                                    objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo);
                                    break;
                                case 4:
                                    objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeAbril).FirstOrDefault();
                                    objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril);
                                    break;
                                case 5:
                                    objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeMayo).FirstOrDefault();
                                    objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo);
                                    break;
                                case 6:
                                    objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeJunio).FirstOrDefault();
                                    objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio);
                                    break;
                                case 7:
                                    objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeJulio).FirstOrDefault();
                                    objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio);
                                    break;
                                case 8:
                                    objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeAgosto).FirstOrDefault();
                                    objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio + s.importeAgosto);
                                    break;
                                case 9:
                                    objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeSeptiembre).FirstOrDefault();
                                    objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio + s.importeAgosto + s.importeSeptiembre);
                                    break;
                                case 10:
                                    objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeOctubre).FirstOrDefault();
                                    objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio + s.importeAgosto + s.importeSeptiembre + s.importeOctubre);
                                    break;
                                case 11:
                                    objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeNoviembre).FirstOrDefault();
                                    objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio + s.importeAgosto + s.importeSeptiembre + s.importeOctubre + s.importeNoviembre);
                                    break;
                                case 12:
                                    objConcepto.pptoMensual = lstConceptosRelCC_CP.Where(w => w.id == item.id).Select(s => s.importeDiciembre).FirstOrDefault();
                                    objConcepto.pptoAcumulado = lstConceptosRelCC_CP.Where(w => w.id == item.id).Sum(s => s.importeEnero + s.importeFebrero + s.importeMarzo + s.importeAbril + s.importeMayo + s.importeJunio + s.importeJulio + s.importeAgosto + s.importeSeptiembre + s.importeOctubre + s.importeNoviembre + s.importeDiciembre);
                                    break;
                                default:
                                    break;
                            }
                            #endregion
                            // SE OBTIENE LAS CUENTAS DEL CONCEPTO
                            List<SumaDTO> lstCuentasConcepto = new List<SumaDTO>();
                            lstCuentasConcepto = lstCuentasRelConcepto_ARR.Where(w => w.idConcepto == item.idConceptoCuenta).ToList();
                            foreach (var itemCuentaRelConcepto in lstCuentasConcepto)
                            {
                                int cta = itemCuentaRelConcepto.cta > 0 ? itemCuentaRelConcepto.cta : 0;
                                int scta = itemCuentaRelConcepto.scta > 0 ? itemCuentaRelConcepto.scta : 0;
                                int sscta = itemCuentaRelConcepto.sscta > 0 ? itemCuentaRelConcepto.sscta : 0;
                                objConcepto.gastoMensual += lstMontosCuentasCC_ARR.Where(w => w.cc == cc && w.mes == objDTO.idMes && (w.cta == cta || (!objDTO.costosAdministrativos ? w.cta == 5000 : true)) && w.scta == scta && w.sscta == sscta).Select(s => s.monto).Sum(s => s);
                                objConcepto.gastoAcumulado += lstMontosCuentasCC_ARR.Where(w => w.cc == cc && w.mes > 0 && w.mes <= objDTO.idMes && (w.cta == cta || (!objDTO.costosAdministrativos ? w.cta == 5000 : true)) && w.scta == scta && w.sscta == sscta).Select(s => s.monto).Sum(s => s);
                            }

                            objConcepto.cumplimientoMensual = 0;
                            if (objConcepto.pptoMensual > 0 && objConcepto.gastoMensual > 0)
                                objConcepto.cumplimientoMensual = (objConcepto.gastoMensual / objConcepto.pptoMensual) * 100;

                            objConcepto.cumplimientoAcumulado = 0;
                            if (objConcepto.pptoAcumulado > 0 && objConcepto.gastoAcumulado > 0)
                                objConcepto.cumplimientoAcumulado = (objConcepto.gastoAcumulado / objConcepto.pptoAcumulado) * 100;

                            objConcepto.diferenciaMensual = objConcepto.pptoMensual - objConcepto.gastoMensual;
                            objConcepto.diferenciaAcumulado = objConcepto.pptoAcumulado - objConcepto.gastoAcumulado;
                            lstConceptosDTO.Add(objConcepto);
                        }
                    }
                    #endregion
                    #endregion
                }

                resultado.Add("lstConceptosDTO", lstConceptosDTO);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetConceptosRelCC", e, AccionEnum.CONSULTA, objDTO.id, objDTO); 
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> GuardarMensajes(tblAF_CtrlPptalOfCe_Mensaje obj, int empresa)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                using (var _ctxArre = new MainContext(empresa == 1 ? EmpresaEnum.Construplan : EmpresaEnum.Arrendadora))
                {
                    IObjectSet<tblAF_CtrlPptalOfCe_Mensaje> _objectSet = ((IObjectContextAdapter)_ctxArre).ObjectContext.CreateObjectSet<tblAF_CtrlPptalOfCe_Mensaje>();
                    if (obj == null) { throw new ArgumentNullException("Entity"); }

                    obj.fechaCreacion = DateTime.Now;
                    obj.idUsuarioCreacion = vSesiones.sesionUsuarioDTO.id;
                    obj.registroActivo = true;

                    _objectSet.AddObject(obj);
                    _ctxArre.SaveChanges();

                    var comentarioDTO = new tblAF_CtrlPptalOfCe_Mensaje
                    {
                        id = obj.id,
                        anio = obj.anio,
                        mes = obj.mes,
                        idCC = obj.idCC,
                        mensaje = obj.mensaje,
                        idUsuarioCreacion = obj.idUsuarioCreacion,
                        fechaCreacion = obj.fechaCreacion,
                        registroActivo = obj.registroActivo,
                    };

                    SaveBitacora((int)BitacoraEnum.COMENTARIO, (int)AccionEnum.AGREGAR, obj.id, JsonUtils.convertNetObjectToJson(comentarioDTO));
                }
                resultado.Add("obj", obj);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e) {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> CargarMensajes(int anio, int mes, int idCC, int empresa)
        {
            resultado = new Dictionary<string, object>();            
            try
            {
                using (var _ctxArre = new MainContext(empresa == 1 ? EmpresaEnum.Construplan : EmpresaEnum.Arrendadora))
                {
                    List<ComentarioDTO> mensajes = new List<ComentarioDTO>();
                    var usuarios = _ctxArre.tblP_Usuario.ToList();
                    mensajes = _ctxArre.tblAF_CtrlPptalOfCe_Mensaje.Where(x => x.anio == anio && x.mes == mes && x.idCC == idCC && x.registroActivo).ToList().Select(x => {
                        var auxUsuario = usuarios.FirstOrDefault(y => y.id == x.idUsuarioCreacion);
                        return new ComentarioDTO { 
                            id = x.id,
                            anio = x.anio,
                            idCC = x.idCC,
                            comentario = x.mensaje,
                            idMes = x.mes,
                            idUsuarioCreacion = x.idUsuarioCreacion,
                            fechaCreacion = x.fechaCreacion,
                            registroActivo = x.registroActivo,
                            fecha = x.fechaCreacion.ToShortDateString(),
                            usuarioNombre = auxUsuario == null ? "N/A" : (auxUsuario.nombre + " " + auxUsuario.apellidoPaterno + " " + auxUsuario.apellidoMaterno),
                            idConcepto = x.id,
                        };
                    }).ToList();
                    resultado.Add("mensajes", mensajes);
                }
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        #region ESTIMADO REAL MENSUAL
        /// <summary>
        /// Se verifica si ya se encuentra inicializado el registro en base al año seleccionado, de lo contrario, lo inicializa.
        /// </summary>
        /// <param name="anio">Año seleccionado para visualizar su ppto estimado real mensual.</param>
        /// <returns>Retornar respuesta booleana si se inicializó con éxito o no el registro.</returns>
        private bool InitAnioEstimadoRealMensual(EstimadoRealMensualDTO objParamsDTO)
        {
            bool exitoInitAnio = false;
            try
            {
                using (var _ctx = new MainContext())
                {
                    #region SE INICIALIZA REGISTRO PARA INGRESAR EL ESTIMADO REAL MENSUAL DEL AÑO
                    // SE VERIFICA SI YA SE ENCUENTRA INICIALIZADO EN BASE AL AÑO SELECCIONADO
                    if (!_ctx.tblAF_CtrlPptalOfCe_EstimadoRealMensual.Any(w => w.anio == objParamsDTO.anio && w.registroActivo))
                    {
                        // SE INICIALIZA REGISTRO EN BASE AL AÑO SELECCIONADO
                        tblAF_CtrlPptalOfCe_EstimadoRealMensual objEstimadoRealMensual = new tblAF_CtrlPptalOfCe_EstimadoRealMensual();
                        objEstimadoRealMensual.anio = objParamsDTO.anio;
                        objEstimadoRealMensual.FK_UsuarioCreacion = vSesiones.sesionUsuarioDTO.id;
                        objEstimadoRealMensual.fechaCreacion = DateTime.Now;
                        objEstimadoRealMensual.registroActivo = true;
                        _ctx.tblAF_CtrlPptalOfCe_EstimadoRealMensual.Add(objEstimadoRealMensual);
                        _ctx.SaveChanges();

                        exitoInitAnio = true;

                        // SE REGISTRA BITACORA
                        SaveBitacora(0, objParamsDTO.id <= 0 ? (int)AccionEnum.AGREGAR : (int)AccionEnum.ACTUALIZAR, objParamsDTO.id, JsonUtils.convertNetObjectToJson(objParamsDTO));
                    }
                    else
                        exitoInitAnio = true;
                    #endregion
                }
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "InitAnioEstimadoRealMensual", e, AccionEnum.CONSULTA, objParamsDTO.id, objParamsDTO);
                return exitoInitAnio;
            }
            return exitoInitAnio;
        }

        /// <summary>
        /// Se obtiene listado de meses en base al año seleccionado con su ppto estimado real mensual.
        /// </summary>
        /// <param name="anio">Año del ppto estimado real mensual deseado.</param>
        /// <returns>Retorna listado DTO con el ppto estimado real mensual.</returns>
        public Dictionary<string, object> GetListadoEstimadoRealMensual(EstimadoRealMensualDTO objParamsDTO)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                using (var _ctx = new MainContext())
                {
                    #region VALIDACIONES
                    if (objParamsDTO.anio <= 0) { throw new Exception("Es necesario seleccionar un año."); }
                    #endregion

                    #region SE VERIFICA SI SE ENCUENTRA INICIALIZADO EL AÑO
                    if (!InitAnioEstimadoRealMensual(objParamsDTO))
                        throw new Exception("Ocurrió un error al inicializar el registro con el año seleccionado.");
                    #endregion

                    #region SE OBTIENE EL PPTO ESTIMADO REAL MENSUAL
                    tblAF_CtrlPptalOfCe_EstimadoRealMensual objEstimadoRealMensual = _ctx.tblAF_CtrlPptalOfCe_EstimadoRealMensual.Where(w => w.anio == objParamsDTO.anio && w.registroActivo).FirstOrDefault();
                    if (objEstimadoRealMensual == null)
                        throw new Exception("Ocurrió un error al obtener la información del registro.");

                    List<EstimadoRealMensualDTO> lstEstimadoRealMensualDTO = new List<EstimadoRealMensualDTO>();
                    EstimadoRealMensualDTO objEstimadoRealMensualDTO = new EstimadoRealMensualDTO();
                    objEstimadoRealMensualDTO.id = objEstimadoRealMensual.id;
                    objEstimadoRealMensualDTO.anio = objEstimadoRealMensual.anio;
                    objEstimadoRealMensualDTO.estimadoReal_Enero = objEstimadoRealMensual.estimadoReal_Enero;
                    objEstimadoRealMensualDTO.estimadoReal_Febrero = objEstimadoRealMensual.estimadoReal_Febrero;
                    objEstimadoRealMensualDTO.estimadoReal_Marzo = objEstimadoRealMensual.estimadoReal_Marzo;
                    objEstimadoRealMensualDTO.estimadoReal_Abril = objEstimadoRealMensual.estimadoReal_Abril;
                    objEstimadoRealMensualDTO.estimadoReal_Mayo = objEstimadoRealMensual.estimadoReal_Mayo;
                    objEstimadoRealMensualDTO.estimadoReal_Junio = objEstimadoRealMensual.estimadoReal_Junio;
                    objEstimadoRealMensualDTO.estimadoReal_Julio = objEstimadoRealMensual.estimadoReal_Julio;
                    objEstimadoRealMensualDTO.estimadoReal_Agosto = objEstimadoRealMensual.estimadoReal_Agosto;
                    objEstimadoRealMensualDTO.estimadoReal_Septiembre = objEstimadoRealMensual.estimadoReal_Septiembre;
                    objEstimadoRealMensualDTO.estimadoReal_Octubre = objEstimadoRealMensual.estimadoReal_Octubre;
                    objEstimadoRealMensualDTO.estimadoReal_Noviembre = objEstimadoRealMensual.estimadoReal_Noviembre;
                    objEstimadoRealMensualDTO.estimadoReal_Diciembre = objEstimadoRealMensual.estimadoReal_Diciembre;
                    lstEstimadoRealMensualDTO.Add(objEstimadoRealMensualDTO);

                    resultado.Add(SUCCESS, true);
                    resultado.Add("lstEstimadoRealMensualDTO", lstEstimadoRealMensualDTO);
                    #endregion
                }
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetListadoEstimadoRealMensual", e, AccionEnum.CONSULTA, objParamsDTO.id, objParamsDTO);
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }
            return resultado;
        }

        /// <summary>
        /// Se edita el ppto estimado real mensual del año seleccionado y los meses afectos por el propio usuario.
        /// </summary>
        /// <param name="id">Identificador del registro a modificar.</param>
        /// <returns>Retornar respuesta booleana si se modifico con éxito o no el registro.</returns>
        public Dictionary<string, object> CEEstimadoRealMensual(EstimadoRealMensualDTO objParamsDTO)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                using (var _ctx = new MainContext())
                {
                    #region VALIDACIONES
                    if (objParamsDTO.anio <= 0) { throw new Exception("Es necesario seleccionar un año."); }
                    if (objParamsDTO.estimadoReal_Enero < 0) { throw new Exception("Favor de ingresar solamente numeros positivos en enero."); }
                    if (objParamsDTO.estimadoReal_Febrero < 0) { throw new Exception("Favor de ingresar solamente numeros positivos en febrero."); }
                    if (objParamsDTO.estimadoReal_Marzo < 0) { throw new Exception("Favor de ingresar solamente numeros positivos en marzo."); }
                    if (objParamsDTO.estimadoReal_Abril < 0) { throw new Exception("Favor de ingresar solamente numeros positivos en abril."); }
                    if (objParamsDTO.estimadoReal_Mayo < 0) { throw new Exception("Favor de ingresar solamente numeros positivos en mayo."); }
                    if (objParamsDTO.estimadoReal_Junio < 0) { throw new Exception("Favor de ingresar solamente numeros positivos en junio."); }
                    if (objParamsDTO.estimadoReal_Julio < 0) { throw new Exception("Favor de ingresar solamente numeros positivos en julio."); }
                    if (objParamsDTO.estimadoReal_Agosto < 0) { throw new Exception("Favor de ingresar solamente numeros positivos en agosto."); }
                    if (objParamsDTO.estimadoReal_Septiembre < 0) { throw new Exception("Favor de ingresar solamente numeros positivos en septiembre."); }
                    if (objParamsDTO.estimadoReal_Octubre < 0) { throw new Exception("Favor de ingresar solamente numeros positivos en octubre."); }
                    if (objParamsDTO.estimadoReal_Noviembre < 0) { throw new Exception("Favor de ingresar solamente numeros positivos en noviembre."); }
                    if (objParamsDTO.estimadoReal_Diciembre < 0) { throw new Exception("Favor de ingresar solamente numeros positivos en diciembre."); }
                    #endregion

                    #region SE ACTUALIZA EL REGISTRO
                    tblAF_CtrlPptalOfCe_EstimadoRealMensual objEstimadoRealMensual = _ctx.tblAF_CtrlPptalOfCe_EstimadoRealMensual.Where(w => w.registroActivo).FirstOrDefault();
                    if (objEstimadoRealMensual == null)
                        throw new Exception("Ocurrió un error al actualizar la información.");

                    objEstimadoRealMensual.estimadoReal_Enero = objParamsDTO.estimadoReal_Enero;
                    objEstimadoRealMensual.estimadoReal_Febrero = objParamsDTO.estimadoReal_Febrero;
                    objEstimadoRealMensual.estimadoReal_Marzo = objParamsDTO.estimadoReal_Marzo;
                    objEstimadoRealMensual.estimadoReal_Abril = objParamsDTO.estimadoReal_Abril;
                    objEstimadoRealMensual.estimadoReal_Mayo = objParamsDTO.estimadoReal_Mayo;
                    objEstimadoRealMensual.estimadoReal_Junio = objParamsDTO.estimadoReal_Junio;
                    objEstimadoRealMensual.estimadoReal_Julio = objParamsDTO.estimadoReal_Julio;
                    objEstimadoRealMensual.estimadoReal_Agosto = objParamsDTO.estimadoReal_Agosto;
                    objEstimadoRealMensual.estimadoReal_Septiembre = objParamsDTO.estimadoReal_Septiembre;
                    objEstimadoRealMensual.estimadoReal_Octubre = objParamsDTO.estimadoReal_Octubre;
                    objEstimadoRealMensual.estimadoReal_Noviembre = objParamsDTO.estimadoReal_Noviembre;
                    objEstimadoRealMensual.estimadoReal_Diciembre = objParamsDTO.estimadoReal_Diciembre;
                    objEstimadoRealMensual.FK_UsuarioModificacion = vSesiones.sesionUsuarioDTO.id;
                    objEstimadoRealMensual.fechaModificacion = DateTime.Now;
                    _ctx.SaveChanges();

                    // SE REGISTRA BITACORA
                    SaveBitacora(0, objParamsDTO.id <= 0 ? (int)AccionEnum.AGREGAR : (int)AccionEnum.ACTUALIZAR, objParamsDTO.id, JsonUtils.convertNetObjectToJson(objParamsDTO));

                    resultado.Add(SUCCESS, true);
                    resultado.Add(MESSAGE, "Se ha registrado con éxito");
                    #endregion
                }
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "", e, AccionEnum.CONSULTA, objParamsDTO.id, objParamsDTO);
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }
            return resultado;
        }

        /// <summary>
        /// Se obtiene todos los meses con su ppto estimado real mensual en base al registro seleccionado.
        /// </summary>
        /// <param name="id">Identificador del registro a consultar.</param>
        /// <returns>Retornar objeto DTO.</returns>
        public Dictionary<string, object> GetDatosActualizarEstimadoRealMensual(EstimadoRealMensualDTO objParamsDTO)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                using (var _ctx = new MainContext())
                {
                    #region VALIDACIONES
                    if (objParamsDTO.id <= 0) { throw new Exception("Ocurrió un error al obtener la información del registro."); }
                    #endregion

                    #region SE OBTIENE LA INFORMACIÓN DEL REGISTRO
                    tblAF_CtrlPptalOfCe_EstimadoRealMensual objEstimadoRealMensual = _ctx.tblAF_CtrlPptalOfCe_EstimadoRealMensual.Where(w => w.id == objParamsDTO.id && w.registroActivo).FirstOrDefault();
                    if (objEstimadoRealMensual == null)
                        throw new Exception("Ocurrió un error al obtener la información del registro.");

                    EstimadoRealMensualDTO objEstimadoRealMensualDTO = new EstimadoRealMensualDTO();
                    objEstimadoRealMensualDTO.estimadoReal_Enero = objEstimadoRealMensual.id;
                    objEstimadoRealMensualDTO.id = objEstimadoRealMensual.id;
                    objEstimadoRealMensualDTO.estimadoReal_Enero = objEstimadoRealMensual.estimadoReal_Enero;
                    objEstimadoRealMensualDTO.estimadoReal_Febrero = objEstimadoRealMensual.estimadoReal_Febrero;
                    objEstimadoRealMensualDTO.estimadoReal_Marzo = objEstimadoRealMensual.estimadoReal_Marzo;
                    objEstimadoRealMensualDTO.estimadoReal_Abril = objEstimadoRealMensual.estimadoReal_Abril;
                    objEstimadoRealMensualDTO.estimadoReal_Mayo = objEstimadoRealMensual.estimadoReal_Mayo;
                    objEstimadoRealMensualDTO.estimadoReal_Junio = objEstimadoRealMensual.estimadoReal_Junio;
                    objEstimadoRealMensualDTO.estimadoReal_Julio = objEstimadoRealMensual.estimadoReal_Julio;
                    objEstimadoRealMensualDTO.estimadoReal_Agosto = objEstimadoRealMensual.estimadoReal_Agosto;
                    objEstimadoRealMensualDTO.estimadoReal_Septiembre = objEstimadoRealMensual.estimadoReal_Septiembre;
                    objEstimadoRealMensualDTO.estimadoReal_Octubre = objEstimadoRealMensual.estimadoReal_Octubre;
                    objEstimadoRealMensualDTO.estimadoReal_Noviembre = objEstimadoRealMensual.estimadoReal_Noviembre;
                    objEstimadoRealMensualDTO.estimadoReal_Diciembre = objEstimadoRealMensual.estimadoReal_Diciembre;

                    resultado.Add(SUCCESS, true);
                    resultado.Add("objEstimadoRealMensualDTO", objEstimadoRealMensualDTO);
                    #endregion
                }
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "", e, AccionEnum.CONSULTA, objParamsDTO.id, objParamsDTO);
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }
            return resultado;
        }
        #endregion
    }
}