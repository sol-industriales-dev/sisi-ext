using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Data.EntityFramework.Generic;
using Core.Entity.Administrativo.Contabilidad.Nomina;
using System.IO;
using System.Data;
using Newtonsoft.Json;
using OfficeOpenXml;
using Core.DTO;
using Core.Enum.Multiempresa;
using Data.EntityFramework.Context;
using Core.DAO.Contabilidad.Nomina;
using Core.Enum.Contabilidad.Nomina;
using Core.DTO.Enkontrol.Tablas.Poliza;
using Core.Enum.Principal.Bitacoras;
using Core.DTO.Contabilidad.Poliza;
using Core.DTO.Contabilidad.Nomina.PolizaNomina;
using Core.Enum.Contabilidad.Poliza;
using Core.DAO.Contabilidad.Poliza;
using Data.Factory.Contabilidad.Poliza;
using Data.EntityFramework;
using System.Web;
using Core.DTO.Contabilidad.Nomina.CuentaEmpleado;
using Core.DAO.Enkontrol.General.CC;
using Data.Factory.Enkontrol.General.CC;
using Core.DTO.Utils.Data;
using Core.DAO.Contabilidad.Cuenta;
using Data.Factory.Contabilidad.Cuenta;
using Core.DTO.Enkontrol.Tablas.Cuenta;
using Core.DTO.Enkontrol.Tablas.CC;
using Core.DAO.RecursosHumanos.Empleado;
using Data.Factory.RecursosHumanos.Empleado;
using Core.DTO.Enkontrol.Tablas.RH.Empleado;
using Core.DAO.Principal.Archivos;
using Data.Factory.Principal.Archivos;
using Core.DTO.Contabilidad.Nomina.Raya;
using Core.Enum.Administracion.Propuesta.Nomina;
using Core.Entity.RecursosHumanos.Captura;
using Infrastructure.Utils;
using System.Data.Odbc;
using Core.Entity.Administrativo.FacultamientosDpto;
using OfficeOpenXml.Style;
using Core.DTO.Contabilidad.Nomina;
using Core.Enum.Principal;
using Core.DTO.Utils.Auth;
using Core.DTO.Contabilidad.Propuesta.Nomina;
using Core.DTO.Principal.Generales;
using System.Text.RegularExpressions;
using System.Drawing;
using OfficeOpenXml.Table;
using Core.DTO.Contabilidad.Nomina.AcomuladoMensual;
using Core.DTO.Contabilidad.Nomina.ReporteRangoCC;
using Core.DTO.Contabilidad.Nomina.ReporteCentroCuenta;
using System.Globalization;
using Core.DTO.Contabilidad.Nomina.ReporteEmpleadoCC;
using Core.Enum.Administracion.Nomina;
using Core.DTO.Enkontrol.Alamcen;
using Core.Entity.Administrativo.RecursosHumanos.Enkontrol;
using Core.DTO.Contabilidad.Nomina.SUA;
using Core.DAO.Contabilidad.Banco;
using Data.Factory.Contabilidad.Banco;
using Core.DTO.Contabilidad.Nomina.ReporteConcentrado;
using Core.Entity.Principal.Multiempresa;
using System.Drawing;
using OfficeOpenXml.Drawing;
using Core.Entity.StarSoft.Plantillas;
using Core.DAO.RecursosHumanos.Vacaciones;
using Data.Factory.RecursosHumanos;
using Data.DAO.RecursosHumanos.Vacaciones;
using Core.Entity.RecursosHumanos.Reclutamientos;
using Core.Enum.RecursosHumanos.Reclutamientos;
using CrystalDecisions.CrystalReports.Engine;
using CrystalDecisions.Shared;
using Core.DAO.RecursosHumanos.Reclutamientos;
using Core.DAO.Maquinaria.Reporte;
using System.Web.Hosting;
using Data.Factory.Maquinaria.Reporte;
using Reportes.Reports.Contabilidad.Nomina;
using Core.Entity.Principal.Usuarios;
using Core.DTO.RecursosHumanos;
using Core.Enum.RecursosHumanos.CatNotificantes;
using Core.Entity.Enkontrol.Compras.OrdenCompra;
using Core.Enum.Enkontrol;
using Core.DTO.Enkontrol.OrdenCompra;


namespace Data.DAO.Contabilidad.Nomina
{
    public class NominaDAO : GenericDAO<tblC_Nom_Nomina>, INominaDAO
    {
        #region INIT
        private const string _NOMBRE_CONTROLADOR = "PrenominaController";
        private const int _SISTEMA = (int)SistemasEnum.RH;

        IPolizaSPDAO _polizaEkFs = new PolizaSPFactoryService().GetPolizaEkService();
        IPolizaSPDAO _polizaSpFs = new PolizaSPFactoryService().GetPolizaSPService();
        ICCDAO _ccDAO = new CCFactoryService().getCCService();
        ICuentaDAO _cuentaDAO = new CuentaFactoryService().GetCuentaEkService();
        IEmpleadoDAO _empleadoDAO = new EmpleadoFactoryService().GetEmpleadoService();
        IDirArchivosDAO archivoFS = new ArchivoFactoryServices().getArchivo();
        ICCDAO _ccFS_SP = new CCFactoryService().getCCServiceSP();
        IBancoDAO _bancoFS = new BancoFactoryService().GetBancoEkService();
        IVacacionesDAO _vacacionesDAO = new VacacionesFactoryService().GetVacacionesService();
        IReclutamientosDAO ReclutamientoFS = new ReclutamientosFactoryServices().getReclutamientosService();
        IEncabezadoDAO encabezadoFactoryServices = new EncabezadoFactoryServices().getEncabezadoServices();

        List<EmpleadosSinRegistrarDTO> empleadosSinRegistrar = new List<EmpleadosSinRegistrarDTO>();
        List<tblC_Nom_CatalogoCC> _catalogoCC = new List<tblC_Nom_CatalogoCC>();

        Dictionary<string, object> resultado = new Dictionary<string, object>();
        #endregion

        #region General
        public Dictionary<string, object> PeriodosNomina(int tipoNomina)
        {
            var resultado = new Dictionary<string, object>();

            var anioActual = DateTime.Now.Year;
            var diciembre = new DateTime(anioActual - 1, 12, 1);

            if (tipoNomina == 13) tipoNomina = 1;
            if (tipoNomina == 14) tipoNomina = 4;

            try
            {
                using (var _ctx = new MainContext((EmpresaEnum)vSesiones.sesionEmpresaActual))
                {
                    var periodos = _ctx.tblRH_BN_EstatusPeriodos
                        .Where(x =>
                            (
                                (x.anio == anioActual ||
                                (x.anio == anioActual - 1))
                                && x.tipo_nomina == tipoNomina
                            )).ToList();
                    DateTime diaLimite = DateTime.Today;
                    diaLimite = diaLimite.AddDays(3);

                    var periodoActual = periodos.Where(x => x.fecha_limite <= diaLimite).OrderByDescending(x => x.fecha_limite).FirstOrDefault();

                    var periodosResult = periodos
                        .GroupBy(x => x.tipo_nomina).ToList()
                        .Select(x => new ComboGroupDTO()
                        {
                            label = EnumExtensions.GetDescription((tipoNominaPropuestaEnum)x.Key),
                            options = x.OrderByDescending(y => y.anio).ThenByDescending(y => y.periodo).Select(y => new Core.DTO.Principal.Generales.ComboDTO()
                            {
                                Value = y.periodo.ToString(),
                                Text = string.Format((tipoNomina == 10 ? "AGUINALDO " + (y.periodo == 1 ? "SEMANAL" : "QUINCENAL") + " {6}" : "{0} #{1:00} NÓMINA DEL {2:00} {3} AL {4:00} {5} {6}"),
                                    EnumExtensions.GetDescription((tipoNominaPropuestaEnum)x.Key),
                                    y.periodo,
                                    y.fecha_inicial.Day,
                                    y.fecha_inicial.ToString("MMMM").ToUpper(),
                                    y.fecha_final.Day,
                                    y.fecha_final.ToString("MMMM").ToUpper(),
                                    y.fecha_final.Year),
                                Prefijo = string.Format("{0}-{1}-{2}-{3}",
                                    y.fecha_inicial.ToShortDateString(),
                                    y.fecha_final.ToShortDateString(),
                                    y.tipo_nomina,
                                    y.anio),
                                addClass = (y.periodo == periodoActual.periodo && y.anio == periodoActual.anio && y.tipo_nomina == periodoActual.tipo_nomina) ? "selected" : ""
                            }).ToList()
                        }).ToList();

                    resultado.Add(SUCCESS, true);
                    resultado.Add(ITEMS, periodosResult);
                }
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);

                LogError(_SISTEMA, 0, "NominaController", "PeriodosNomina", ex, AccionEnum.CONSULTA, 0, null);
            }

            return resultado;
        }

        public Dictionary<string, object> PeriodosNominaAguinaldo()
        {
            var resultado = new Dictionary<string, object>();
            var anioActual = DateTime.Now.Year;
            try
            {
                using (var _ctx = new MainContext(EmpresaEnum.Construplan))
                {
                    List<tblRH_BN_EstatusPeriodos> periodos = new List<tblRH_BN_EstatusPeriodos>();
                    for (int i = 2022; i <= anioActual + 1; i++)
                    {
                        tblRH_BN_EstatusPeriodos auxLst = new tblRH_BN_EstatusPeriodos
                        {
                            tipo_nomina = 10,
                            periodo = 1,
                            fecha_inicial = new DateTime(i, 1, 1),
                            fecha_final = new DateTime(i, 12, 31),
                            fecha_limite = new DateTime(i, 12, 15),
                            anio = i
                        };
                        periodos.Add(auxLst);
                    }
                    DateTime diaLimite = DateTime.Today;
                    diaLimite = new DateTime(anioActual, 12, 31);
                    var periodoActual = periodos.Where(x => x.fecha_limite <= diaLimite).OrderByDescending(x => x.fecha_limite).FirstOrDefault();
                    var periodosResult = periodos
                        .GroupBy(x => x.tipo_nomina).ToList()
                        .Select(x => new ComboGroupDTO()
                        {
                            label = EnumExtensions.GetDescription((tipoNominaPropuestaEnum)x.Key),
                            options = x.Select(y => new Core.DTO.Principal.Generales.ComboDTO()
                            {
                                Value = y.periodo.ToString(),
                                Text = string.Format("{0} #{1:00} NÓMINA DEL {2:00} {3} AL {4:00} {5} {6}",
                                    EnumExtensions.GetDescription((tipoNominaPropuestaEnum)x.Key),
                                    y.periodo,
                                    y.fecha_inicial.Day,
                                    y.fecha_inicial.ToString("MMMM").ToUpper(),
                                    y.fecha_final.Day,
                                    y.fecha_final.ToString("MMMM").ToUpper(),
                                    y.fecha_final.Year),
                                Prefijo = string.Format("{0}-{1}-{2}-{3}",
                                    y.fecha_inicial.ToShortDateString(),
                                    y.fecha_final.ToShortDateString(),
                                    y.tipo_nomina,
                                    y.anio),
                                addClass = (y.periodo == periodoActual.periodo && y.anio == periodoActual.anio && y.tipo_nomina == periodoActual.tipo_nomina) ? "selected" : ""
                            }).ToList()
                        }).ToList();

                    resultado.Add(SUCCESS, true);
                    resultado.Add(ITEMS, periodosResult);
                }
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);

                LogError(_SISTEMA, 0, "NominaController", "PeriodosNomina", ex, AccionEnum.CONSULTA, 0, null);
            }

            return resultado;
        }

        public Dictionary<string, object> PeriodosNominaAnterior()
        {
            var resultado = new Dictionary<string, object>();

            try
            {
                const int meses = 12;
                var ahora = DateTime.Now;
                var yearActual = ahora.Year;

                var consultas = new List<OdbcConsultaDTO>();

                for (int i = 0; i < meses; i++)
                {
                    consultas.Add(new OdbcConsultaDTO()
                    {
                        consulta = PeriodoNominaEK(),
                        parametros = parametrosPeriodoNomina(ahora)
                    });

                    ahora = ahora.AddMonths(-1);
                    if (ahora.Year < yearActual)
                    {
                        break;
                    }
                }

                var lst = SetCboNominas(_contextEnkontrol.Select<PeriodosNominaDTO>(EnkontrolEnum.CplanRh, consultas)
                    .GroupBy(g => new
                    {
                        g.fecha_final,
                        g.fecha_finalStr,
                        g.fecha_inicial,
                        g.fecha_inicialStr,
                        g.fecha_pago,
                        g.fecha_pagoStr,
                        g.mes_cc,
                        g.periodo,
                        g.tipo_nomina,
                        g.tipo_periodo
                    })
                    .Select(s => s.First())
                    .OrderByDescending(o => o.fecha_inicial)
                    .ThenByDescending(o => o.periodo)
                    .ThenBy(o => o.tipo_nomina)
                    .ToList());

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, lst);
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);

                LogError(_SISTEMA, 0, "NominaController", "PeriodosNomina", ex, AccionEnum.CONSULTA, 0, null);
            }

            return resultado;
        }

        private string PeriodoNominaEK()
        {
            return string.Format(@"SELECT tipo_nomina, periodo, tipo_periodo, fecha_inicial, fecha_final, mes_cc, fecha_pago, year
                FROM sn_periodos 
                WHERE year = ? AND mes_cc = ?");
        }

        private List<OdbcParameterDTO> parametrosPeriodoNomina(DateTime ahora)
        {
            var parameters = new List<OdbcParameterDTO>();
            parameters.Add(new OdbcParameterDTO() { nombre = "year", tipo = OdbcType.Numeric, valor = ahora.Year });
            parameters.Add(new OdbcParameterDTO() { nombre = "mes_cc", tipo = OdbcType.Numeric, valor = ahora.Month });
            return parameters;
        }

        private List<ComboGroupDTO> SetCboNominas(List<PeriodosNominaDTO> lst)
        {
            return lst.GroupBy(g => g.tipo_nomina).Select(per => new ComboGroupDTO()
            {
                label = EnumExtensions.GetDescription((tipoNominaPropuestaEnum)per.Key),
                options = per.Select(nom => new Core.DTO.Principal.Generales.ComboDTO()
                {
                    Value = nom.periodo.ToString(),
                    Text = string.Format("{0} #{1:00} NÓMINA DEL {2:00} AL {3:00} {4} {5}",
                        EnumExtensions.GetDescription((tipoNominaPropuestaEnum)per.Key),
                        nom.periodo,
                        nom.fecha_inicial.Day,
                        nom.fecha_final.Day,
                        nom.fecha_final.ToString("MMMMM").ToUpper(),
                        nom.fecha_final.Year),
                    Prefijo = string.Format("{0}-{1}-{2}-{3}",
                    nom.fecha_inicial.ToShortDateString(),
                    nom.fecha_final.ToShortDateString(),
                    nom.tipo_nomina,
                    nom.year),
                }).ToList()
            }).ToList();
        }
        #endregion


        #region Raya
        public List<tblC_Nom_PreNomina_Det> ConvertCSVTABtoPrenomina(byte[] file)
        {
            List<tblC_Nom_PreNomina_Det> prenominaDetalles = new List<tblC_Nom_PreNomina_Det>();
            using (MemoryStream stream = new MemoryStream(file))
            using (ExcelPackage excelPackage = new ExcelPackage(stream))
            {
                ExcelWorksheet worksheet = excelPackage.Workbook.Worksheets[1];
                int numRows = worksheet.Dimension.End.Row;
                int numCol = worksheet.Dimension.End.Column;

                int auxIndex = 1;
                while (worksheet.Cells[auxIndex, 1].Value == null) auxIndex++;
                var encabezados = worksheet.Cells[auxIndex, 1, auxIndex, numCol];


                for (int i = auxIndex + 1; i <= worksheet.Dimension.End.Row; i++)
                {
                    if (worksheet.Cells[i, 1].Value != null)
                    {
                        int parseInt = 0;
                        decimal parseDecimal = 0;
                        tblC_Nom_PreNomina_Det auxPrenominaDetalle = new tblC_Nom_PreNomina_Det
                        {
                            id = 0,
                            prenominaID = 0,
                            orden = Int32.TryParse(worksheet.Cells[i, 1].Text, out parseInt) ? Int32.Parse(worksheet.Cells[i, 1].Text) : 0,
                            empleadoCve = Int32.TryParse(worksheet.Cells[i, 2].Text, out parseInt) ? Int32.Parse(worksheet.Cells[i, 2].Text) : 0,
                            empleadoNombre = worksheet.Cells[i, 3].Text,
                            puesto = worksheet.Cells[i, 4].Text,
                            sueldoSemanal = Decimal.TryParse(worksheet.Cells[i, 5].Text, out parseDecimal) ? Decimal.Parse(worksheet.Cells[i, 5].Text) : 0,
                            dias = Int32.TryParse(worksheet.Cells[i, 6].Text, out parseInt) ? Int32.Parse(worksheet.Cells[i, 6].Text) : 0,
                            nominaBase = Decimal.TryParse(worksheet.Cells[i, 7].Text, out parseDecimal) ? Decimal.Parse(worksheet.Cells[i, 7].Text) : 0,
                            descuento = Decimal.TryParse(worksheet.Cells[i, 8].Text, out parseDecimal) ? Decimal.Parse(worksheet.Cells[i, 8].Text) : 0,
                            prestamo = Decimal.TryParse(worksheet.Cells[i, 9].Text, out parseDecimal) ? Decimal.Parse(worksheet.Cells[i, 9].Text) : 0,
                            descuentoFamsa = Decimal.TryParse(worksheet.Cells[i, 10].Text, out parseDecimal) ? Decimal.Parse(worksheet.Cells[i, 10].Text) : 0,
                            pensionAlimenticia = Decimal.TryParse(worksheet.Cells[i, 11].Text, out parseDecimal) ? Decimal.Parse(worksheet.Cells[i, 11].Text) : 0,
                            fonacot = Decimal.TryParse(worksheet.Cells[i, 12].Text, out parseDecimal) ? Decimal.Parse(worksheet.Cells[i, 12].Text) : 0,
                            infonavit = Decimal.TryParse(worksheet.Cells[i, 13].Text, out parseDecimal) ? Decimal.Parse(worksheet.Cells[i, 13].Text) : 0,
                            sindicato = Decimal.TryParse(worksheet.Cells[i, 14].Text, out parseDecimal) ? Decimal.Parse(worksheet.Cells[i, 14].Text) : 0,
                            fondoAhorroNomina = Decimal.TryParse(worksheet.Cells[i, 15].Text, out parseDecimal) ? Decimal.Parse(worksheet.Cells[i, 15].Text) : 0,
                            totalNomina = Decimal.TryParse(worksheet.Cells[i, 16].Text, out parseDecimal) ? Decimal.Parse(worksheet.Cells[i, 16].Text) : 0,
                            complementoNomina = Decimal.TryParse(worksheet.Cells[i, 18].Text, out parseDecimal) ? Decimal.Parse(worksheet.Cells[i, 18].Text) : 0,
                            fondoAhorroComplemento = Decimal.TryParse(worksheet.Cells[i, 19].Text, out parseDecimal) ? Decimal.Parse(worksheet.Cells[i, 19].Text) : 0,
                            bonoZona = Decimal.TryParse(worksheet.Cells[i, 20].Text, out parseDecimal) ? Decimal.Parse(worksheet.Cells[i, 20].Text) : 0,
                            bonoProduccion = Decimal.TryParse(worksheet.Cells[i, 21].Text, out parseDecimal) ? Decimal.Parse(worksheet.Cells[i, 21].Text) : 0,
                            otros = Decimal.TryParse(worksheet.Cells[i, 22].Text, out parseDecimal) ? Decimal.Parse(worksheet.Cells[i, 22].Text) : 0,
                            primaVacacional = Decimal.TryParse(worksheet.Cells[i, 23].Text, out parseDecimal) ? Decimal.Parse(worksheet.Cells[i, 23].Text) : 0,
                            primaDominical = Decimal.TryParse(worksheet.Cells[i, 24].Text, out parseDecimal) ? Decimal.Parse(worksheet.Cells[i, 24].Text) : 0,
                            hrExtra = Int32.TryParse(worksheet.Cells[i, 25].Text, out parseInt) ? Int32.Parse(worksheet.Cells[i, 25].Text) : 0,
                            hrExtraValor = Decimal.TryParse(worksheet.Cells[i, 26].Text, out parseDecimal) ? Decimal.Parse(worksheet.Cells[i, 26].Text) : 0,
                            importeExtra = Decimal.TryParse(worksheet.Cells[i, 27].Text, out parseDecimal) ? Decimal.Parse(worksheet.Cells[i, 27].Text) : 0,
                            diaHrExtra = Int32.TryParse(worksheet.Cells[i, 28].Text, out parseInt) ? Int32.Parse(worksheet.Cells[i, 28].Text) : 0,
                            diaExtraValor = Decimal.TryParse(worksheet.Cells[i, 29].Text, out parseDecimal) ? Decimal.Parse(worksheet.Cells[i, 29].Text) : 0,
                            importeDiaExtra = Decimal.TryParse(worksheet.Cells[i, 30].Text, out parseDecimal) ? Decimal.Parse(worksheet.Cells[i, 30].Text) : 0,
                            totalComplemento = Decimal.TryParse(worksheet.Cells[i, 31].Text, out parseDecimal) ? Decimal.Parse(worksheet.Cells[i, 31].Text) : 0,
                            totalPagar = Decimal.TryParse(worksheet.Cells[i, 33].Text, out parseDecimal) ? Decimal.Parse(worksheet.Cells[i, 33].Text) : 0,
                            valesDespensa = Decimal.TryParse(worksheet.Cells[i, 34].Text, out parseDecimal) ? Decimal.Parse(worksheet.Cells[i, 34].Text) : 0,
                            totalDeposito = Decimal.TryParse(worksheet.Cells[i, 35].Text, out parseDecimal) ? Decimal.Parse(worksheet.Cells[i, 35].Text) : 0,
                            cuenta = worksheet.Cells[i, 36].Text,
                            clabeInterbancaria = worksheet.Cells[i, 37].Text,
                            banco = worksheet.Cells[i, 38].Text,
                        };
                        prenominaDetalles.Add(auxPrenominaDetalle);
                    }
                }
            }

            return prenominaDetalles;
        }

        //public Dictionary<string, object> GuardarPrenomina(tblC_Nom_Nomina nomina, List<tblC_Nom_PreNomina_Det> detalles, List<tblC_Nom_PreNomina_Aut> autorizantes)
        //{
        //    Dictionary<string, object> resultado = new Dictionary<string, object>();
        //    using (var dbContextTransaction = _context.Database.BeginTransaction())
        //    {
        //        try
        //        {
        //            _context.tblC_Nom_Nomina.Add(nomina);
        //            _context.tblC_Nom_PreNomina_Det.AddRange(detalles);
        //            _context.tblC_Nom_PreNomina_Aut.AddRange(autorizantes);

        //            dbContextTransaction.Commit();
        //            resultado.Add(SUCCESS, true);
        //        }
        //        catch (Exception e)
        //        {
        //            dbContextTransaction.Rollback();
        //            resultado.Add(SUCCESS, false);
        //            resultado.Add(MESSAGE, e.Message);
        //            LogError(_SISTEMA, 0, "NominaController", "GuardarPrenomina", e, AccionEnum.AGREGAR, 0, new { nomina = nomina });
        //        }
        //    }
        //    return resultado;
        //}

        public List<Core.DTO.Principal.Generales.ComboDTO> FillCboCentroCostros()
        {
            return _context.tblP_CC.Where(x => x.estatus == true).Select(x => new Core.DTO.Principal.Generales.ComboDTO()
            {
                Text = (vSesiones.sesionEmpresaActual == 2 ? x.areaCuenta : x.cc) + " " + x.descripcion,
                Value = x.id.ToString()
            }).ToList();
        }
        #endregion

        #region Raya
        public Dictionary<string, object> GetTipoRaya()
        {
            var resultado = new Dictionary<string, object>();

            try
            {
                var tiposRaya = _context.tblC_Nom_TipoRaya.Where(w => w.estatus).Select(m => new
                {
                    Value = m.id,
                    Text = m.descripcion
                });

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, tiposRaya);
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);

                LogError(_SISTEMA, 0, "NominaController", "GetTipoRaya", ex, AccionEnum.CONSULTA, 0, null);
            }

            return resultado;
        }

        public Dictionary<string, object> GetClasificacionCC()
        {
            var resultado = new Dictionary<string, object>();

            try
            {
                var clasificacionesCC = _context.tblC_Nom_ClasificacionCC.Select(m => new
                {
                    Value = m.id,
                    Text = m.descripcion
                });

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, clasificacionesCC);
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);

                LogError(_SISTEMA, 0, "NominaController", "GetClasificacionCC", ex, AccionEnum.CONSULTA, 0, null);
            }

            return resultado;
        }

        public Dictionary<string, object> CargarRaya(HttpPostedFileBase raya, int periodo, int tipoPeriodo, int year, int tipoRaya)
        {
            var resultado = new Dictionary<string, object>();

            using (var transaccion = _context.Database.BeginTransaction())
            {
                using (var excel = new ExcelPackage(raya.InputStream))
                {
                    try
                    {
                        #region archivo
                        var folder = year.ToString() + @"\" + Infrastructure.Utils.EnumExtensions.GetDescription((TipoPeriodoEnum)tipoPeriodo);

                        var fechaArchivo = DateTime.Now.ToString("yyyy-MM-ddTHHmmssfff");
                        var ruta = archivoFS.getUrlDelServidor(1023) + folder + @"\";

                        var extension = System.IO.Path.GetExtension(raya.FileName);
                        var archivoNombreNuevo = (periodo < 10 ? "0" : "") + periodo.ToString() + "_" + fechaArchivo + extension;

#if DEBUG
                        var directorio = new DirectoryInfo(@"c:\NOMINA\" + folder + @"\");
#else
                                var directorio = new DirectoryInfo(ruta);
#endif
                        if (!directorio.Exists)
                        {
                            directorio.Create();
                        }

                        var pathCompleto = System.IO.Path.Combine(directorio.ToString(), archivoNombreNuevo);

                        raya.SaveAs(pathCompleto);
                        #endregion

                        var catalogoCC = _context.tblC_Nom_CatalogoCC.Where(w => w.estatus).ToList();

                        var fechaCaptura = DateTime.Now;

                        var hoja = excel.Workbook.Worksheets[1];

                        var listaRaya = new List<tblC_Nom_Raya>();
                        var listaNominas = new List<tblC_Nom_Nomina>();
                        var listaRayaTotalesDTO = new List<RayaTotalDetalleDTO>();

                        var catalogoColumna = _context.tblC_Nom_ColumnaRaya.Where(w => w.estatus && w.tipoColumna != null).ToList();
                        var catalogoColumnaTotales = catalogoColumna.Where(w => w.estatus && w.tipoColumna == "T").ToList();

                        int renglonInicial = 1;
                        for (int i = 1; i <= hoja.Dimension.End.Row; i++)
                        {
                            if (!string.IsNullOrEmpty(hoja.Cells["A" + i].GetValue<string>()) && hoja.Cells["A" + i].GetValue<string>().ToUpper() == "EMPLEADO")
                            {
                                renglonInicial = i + 1;
                                break;
                            }
                        }

                        List<tblC_Nom_EstructuraPolizaNominaCC> cuentasPorEmpleado = null;

                        tblC_Nom_Nomina nomina = null;
                        int renglonNulo = 0;
                        for (int i = renglonInicial; i <= hoja.Dimension.End.Row; i++)
                        {
                            if (hoja.Cells["A" + i].Value != null)
                            {
                                if (nomina == null)
                                {
                                    renglonNulo = 0;

                                    nomina = new tblC_Nom_Nomina();
                                    nomina.CC = hoja.Cells["C" + i].GetValue<string>().Split(' ')[0];

                                    var ccInfo = catalogoCC.FirstOrDefault(f => f.cc.Trim().ToUpper() == nomina.CC.Trim().ToUpper());

                                    if (ccInfo == null)
                                    {
                                        throw new Exception("El cc: " + nomina.CC + " encontrado en la lista de raya no se encuentra en el catalogo de cc");
                                    }

                                    nomina.estatus = true;
                                    nomina.fechaCaptura = fechaCaptura;
                                    nomina.fechaCreacion = fechaCaptura;
                                    nomina.fechaModificacion = fechaCaptura;
                                    nomina.nombreCC = ccInfo.ccDescripcion;
                                    nomina.periodo = periodo;
                                    nomina.tipoNomina = tipoPeriodo;
                                    nomina.usuarioCreacionId = vSesiones.sesionUsuarioDTO.id;
                                    nomina.usuarioModificacionId = vSesiones.sesionUsuarioDTO.id;
                                    nomina.year = year;
                                    nomina.dirArchivo = pathCompleto;
                                    nomina.nombreArchivo = archivoNombreNuevo;
                                    nomina.tipoRayaId = tipoRaya;
                                    nomina.clasificacionCcId = ccInfo.clasificacionCcId;

                                    var existeNomina = _context.tblC_Nom_Nomina
                                        .FirstOrDefault(f =>
                                            f.periodo == periodo &&
                                            f.tipoNomina == tipoPeriodo &&
                                            f.year == year &&
                                            f.tipoRayaId == tipoRaya &&
                                            f.clasificacionCcId == nomina.clasificacionCcId &&
                                            f.CC == nomina.CC &&
                                            f.estatus
                                        );

                                    if (existeNomina != null)
                                    {
                                        if (existeNomina.validada)
                                        {
                                            throw new Exception("Ya se cargó una raya con el CC: " + existeNomina.CC + " y se encuetra validada");
                                        }
                                        else
                                        {
                                            existeNomina.estatus = false;
                                            existeNomina.fechaModificacion = fechaCaptura;
                                            existeNomina.usuarioModificacionId = vSesiones.sesionUsuarioDTO.id;

                                            foreach (var infoRaya in existeNomina.raya)
                                            {
                                                infoRaya.estatus = false;
                                                infoRaya.usuarioModificacionId = vSesiones.sesionUsuarioDTO.id;
                                                infoRaya.fechaModificacion = fechaCaptura;
                                            }
                                            foreach (var infoResumen in existeNomina.resumen.ToList())
                                            {
                                                infoResumen.estatus = false;
                                                infoResumen.usuarioModificacionId = vSesiones.sesionUsuarioDTO.id;
                                                infoResumen.fechaModificacion = fechaCaptura;
                                            }
                                        }
                                    }

                                    cuentasPorEmpleado = _context.tblC_Nom_EstructuraPolizaNominaCC
                                        .Where(w =>
                                            w.estatus &&
                                            w.descuento &&
                                            w.esPorEmpleado &&
                                            w.tipoNominaId == tipoPeriodo &&
                                            w.tipoRayaId == tipoRaya &&
                                            w.clasificacionCcId == nomina.clasificacionCcId
                                        ).ToList();

                                    _context.tblC_Nom_Nomina.Add(nomina);
                                    _context.SaveChanges();

                                    listaNominas.Add(nomina);
                                }

                                var info = new tblC_Nom_Raya();
                                info.nominaID = nomina.id;
                                info.numeroEmpleado = hoja.Cells["A" + i].GetValue<int>();
                                info.nombreCompleto = hoja.Cells["B" + i].GetValue<string>().Replace('/', ' ');

                                for (int columnaHeader = 1; columnaHeader <= hoja.Dimension.End.Column; columnaHeader++)
                                {
                                    if (hoja.Cells[1, columnaHeader].Value == null)
                                    {
                                        #region columnasTotales
                                        foreach (var colTotales in catalogoColumnaTotales)
                                        {
                                            var coincidenciaPalabras = false;
                                            var palabrasTotales = colTotales.concepto.Split('|');
                                            var renglonPalabra = 2;

                                            foreach (var palabra in palabrasTotales)
                                            {
                                                if (hoja.Cells[renglonPalabra, columnaHeader].GetValue<string>() == palabra)
                                                {
                                                    coincidenciaPalabras = true;
                                                    renglonPalabra++;
                                                }
                                                else
                                                {
                                                    coincidenciaPalabras = false;
                                                }
                                            }

                                            if (coincidenciaPalabras)
                                            {
                                                typeof(tblC_Nom_Raya).GetProperty(colTotales.nombreColumnaImportes).SetValue(info, hoja.Cells[i, columnaHeader].GetValue<decimal>());
                                            }
                                        }
                                        continue;
                                        #endregion
                                    }

                                    var claveColumna = catalogoColumna.FirstOrDefault(f => f.clave == hoja.Cells[1, columnaHeader].GetValue<int>());

                                    if (claveColumna != null)
                                    {
                                        bool columnaConInformacion = false;

                                        foreach (var tipoColumna in claveColumna.tipoColumna)
                                        {
                                            switch (tipoColumna)
                                            {
                                                case 'U':
                                                    if (hoja.Cells[renglonInicial - 1, columnaHeader].GetValue<string>() == "UNIDADES")
                                                    {
                                                        typeof(tblC_Nom_Raya).GetProperty(claveColumna.nombreColumnaUnidades).SetValue(info, hoja.Cells[i, columnaHeader++].GetValue<decimal>());
                                                        columnaConInformacion = true;
                                                    }
                                                    break;
                                                case 'I':
                                                    if (hoja.Cells[renglonInicial - 1, columnaHeader].GetValue<string>() == "IMPORTE")
                                                    {
                                                        typeof(tblC_Nom_Raya).GetProperty(claveColumna.nombreColumnaImportes).SetValue(info, hoja.Cells[i, columnaHeader++].GetValue<decimal>());
                                                        columnaConInformacion = true;
                                                    }
                                                    break;
                                                //case 'F'://No sé de que va esto. Sigo sin saber pero el tipo del despacho dijo que no se utiliza.
                                                //    typeof(tblC_Nom_Raya).GetProperty(claveColumna.nombreColumnaFechas).SetValue(info, hoja.Cells[i, columnaHeader++].GetValue<decimal>());
                                                //    break;
                                            }
                                        }

                                        if (columnaConInformacion)
                                        {
                                            columnaHeader--;
                                        }
                                    }
                                    else
                                    {
                                        throw new Exception("No se encontró el identificador: " + hoja.Cells[1, columnaHeader].GetValue<int>() + " en el catalogo de identificadores de columnas");
                                    }
                                }

                                info.estatus = true;
                                info.fechaCreacion = fechaCaptura;
                                info.fechaModificacion = fechaCaptura;
                                info.usuarioCreacionId = vSesiones.sesionUsuarioDTO.id;
                                info.usuarioModificacionId = vSesiones.sesionUsuarioDTO.id;

                                foreach (var ctaPorEmpleado in cuentasPorEmpleado)
                                {
                                    if (Convert.ToDecimal(info.GetType().GetProperty(ctaPorEmpleado.columnaRaya).GetValue(info)) != 0)
                                    {
                                        RegistrarCuentaEmpleado((TipoCuentaEnum)ctaPorEmpleado.cuenta.tipoCuentaId, info.numeroEmpleado, hoja.Cells["B" + i].GetValue<string>(), nomina.CC, nomina.nombreCC);
                                    }
                                }

                                listaRaya.Add(info);
                            }
                            else
                            {
                                renglonNulo++;

                                nomina = null;

                                if (renglonNulo == 2)
                                {
                                    break;
                                }
                            }
                        }

                        _context.tblC_Nom_Raya.AddRange(listaRaya);
                        _context.SaveChanges();

                        listaRayaTotalesDTO.AddRange(CrearRayaTotalesDTO(listaRaya, listaNominas));

                        transaccion.Commit();

                        resultado.Add(SUCCESS, true);
                        resultado.Add(ITEMS, listaRayaTotalesDTO);
                    }
                    catch (Exception ex)
                    {
                        transaccion.Rollback();

                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, ex.Message);

                        LogError(_SISTEMA, 0, "NominaController", "CargarRaya", ex, AccionEnum.AGREGAR, 0, new { periodo, tipoPeriodo, year, tipoRaya });
                    }
                }
            }

            return resultado;
        }


        public Dictionary<string, object> GetRayaCargada(int periodo, int tipoPeriodo, int year, int tipoRaya, int clasificacionCC)
        {
            var resultado = new Dictionary<string, object>();

            try
            {
                var nominas = _context.tblC_Nom_Nomina
                    .Where(w =>
                        w.tipoNomina == tipoPeriodo &&
                        w.periodo == periodo &&
                        w.year == year &&
                        w.clasificacionCcId == clasificacionCC &&
                        w.tipoRayaId == tipoRaya &&
                        w.estatus
                    ).ToList();

                var totales = new List<RayaTotalDetalleDTO>();

                foreach (var nom in nominas)
                {
                    var total = new RayaTotalDetalleDTO();
                    var valoresTotales = new RayaPropiedadesValoresDTO();

                    total.idNomina = nom.id;
                    total.cc = nom.CC;
                    total.ccDescripcion = nom.nombreCC;
                    total.empleados = nom.raya.Count;

                    foreach (var item in typeof(RayaPropiedadesValoresDTO).GetProperties())
                    {
                        typeof(RayaPropiedadesValoresDTO).GetProperty(item.Name).SetValue(valoresTotales, nom.raya.Sum(s => Convert.ToDecimal(s.GetType().GetProperty(item.Name).GetValue(s, null))));
                    }

                    total.totales = valoresTotales;

                    totales.Add(total);
                }

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, totales);
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);

                LogError(_SISTEMA, 0, "NominaController", "GetRayaCargada", ex, AccionEnum.CONSULTA, 0, null);
            }

            return resultado;
        }

        public Dictionary<string, object> GetRayaDetalleCargada(int nominaId)
        {
            var resultado = new Dictionary<string, object>();

            try
            {
                var nomina = _context.tblC_Nom_Nomina.First(f => f.id == nominaId);
                var listaRaya = new List<RayaDTO>();

                foreach (var item in nomina.raya)
                {
                    listaRaya.Add(CrearRayaDTO(item, nomina));
                }

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, listaRaya);
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);

                LogError(_SISTEMA, 0, "NominaController", "GetRayaDetalleCargada", ex, AccionEnum.CONSULTA, 0, null);
            }

            return resultado;
        }

        private bool RegistrarCuentaEmpleado(TipoCuentaEnum tipoCuenta, int numeroEmpleado, string nombreEmpleado, string cc, string ccDescripcion)
        {
            var cuenta = _context.tblC_Nom_Cuenta.FirstOrDefault(f => f.tipoCuentaId == (int)tipoCuenta && f.estatus);

            if (cuenta != null)
            {
                var existeRelacion = _context.tblC_Nom_CuentaEmpleado
                    .FirstOrDefault(f =>
                        f.estatus &&
                        f.numero == numeroEmpleado &&
                        f.cuentaId == cuenta.id
                    );

                if (existeRelacion == null)
                {
                    var catcta = _cuentaDAO.GetCuenta(cuenta.cta, cuenta.scta, nombreEmpleado.Replace('/', ' ')) as catctaDTO;

                    if (catcta != null)
                    {
                        var nomEmpleado = nombreEmpleado.Split('/');

                        var cuentaEmpleado = new tblC_Nom_CuentaEmpleado();
                        cuentaEmpleado.numero = numeroEmpleado;
                        cuentaEmpleado.nombre = nomEmpleado.Last();
                        cuentaEmpleado.apellidoPaterno = nomEmpleado[0];
                        cuentaEmpleado.apellidoMaterno = nomEmpleado.Length == 3 ? nomEmpleado[1] : "";
                        cuentaEmpleado.cuentaId = cuenta.id;
                        cuentaEmpleado.cta = catcta.cta;
                        cuentaEmpleado.scta = catcta.scta;
                        cuentaEmpleado.sscta = catcta.sscta;
                        cuentaEmpleado.digito = catcta.digito;
                        cuentaEmpleado.cuentaDescripcion = catcta.descripcion;
                        cuentaEmpleado.cc = cc;
                        cuentaEmpleado.ccDescripcion = ccDescripcion;
                        cuentaEmpleado.estatus = true;
                        cuentaEmpleado.fechaCreacion = DateTime.Now;
                        cuentaEmpleado.fechaModificacion = cuentaEmpleado.fechaCreacion;
                        cuentaEmpleado.usuarioCreacionId = vSesiones.sesionUsuarioDTO.id;
                        cuentaEmpleado.usuarioModificacionId = vSesiones.sesionUsuarioDTO.id;

                        _context.tblC_Nom_CuentaEmpleado.Add(cuentaEmpleado);
                        _context.SaveChanges();
                    }
                    else
                    {
                        return false;
                    }
                }

                return true;
            }
            else
            {
                throw new Exception("No se encontro cuenta principal para el tipo de cuenta: " + Enum.GetName(typeof(TipoCuentaEnum), tipoCuenta));
            }
        }

        private List<RayaTotalDetalleDTO> CrearRayaTotalesDTO(List<tblC_Nom_Raya> raya, List<tblC_Nom_Nomina> nomina)
        {
            var totales = new List<RayaTotalDetalleDTO>();

            foreach (var nom in nomina)
            {
                var total = new RayaTotalDetalleDTO();
                var valoresTotales = new RayaPropiedadesValoresDTO();

                total.idNomina = nom.id;
                total.cc = nom.CC;
                total.ccDescripcion = nom.nombreCC;
                total.empleados = raya.Where(w => w.nominaID == nom.id).Count();

                foreach (var item in typeof(RayaPropiedadesValoresDTO).GetProperties())
                {
                    typeof(RayaPropiedadesValoresDTO).GetProperty(item.Name).SetValue(valoresTotales, raya.Where(w => w.nominaID == nom.id).Sum(s => Convert.ToDecimal(s.GetType().GetProperty(item.Name).GetValue(s, null))));
                }

                total.totales = valoresTotales;
                totales.Add(total);
            }

            return totales;
        }

        private RayaDTO CrearRayaDTO(tblC_Nom_Raya raya, tblC_Nom_Nomina nomina)
        {
            var rayaDTO = new RayaDTO();

            rayaDTO.nominaID = raya.id;
            rayaDTO.numeroEmpleado = raya.numeroEmpleado;
            rayaDTO.nombreCompleto = raya.nombreCompleto;
            rayaDTO.cc = nomina.CC;

            var valor = new RayaPropiedadesValoresDTO();

            foreach (var item in typeof(RayaPropiedadesValoresDTO).GetProperties())
            {
                typeof(RayaPropiedadesValoresDTO).GetProperty(item.Name).SetValue(valor, Convert.ToDecimal(raya.GetType().GetProperty(item.Name).GetValue(raya, null)));
            }

            rayaDTO.propiedadesRaya = valor;

            return rayaDTO;
        }
        #endregion

        #region Nómina
        public Dictionary<string, object> GetNominas(int year, int tipoPeriodo, int periodo, int tipoRaya)
        {
            var resultado = new Dictionary<string, object>();

            try
            {
                var nominasPeriodo = new List<NominaPeriodoDTO>();
                if (tipoRaya == 3)
                {
                    var nominasQuincenales = _context.tblC_Nom_CatalogoCC.Where(x => x.quincenal).ToList();
                    var nominasSemanales = _context.tblC_Nom_CatalogoCC.Where(x => x.semanal).ToList();
                    int totalDias = DateTime.IsLeapYear(year) ? 366 : 365;

                    var nominas = nominasQuincenales.Union(nominasSemanales).ToList();
                    nominas = nominas.Where(x => x.cc != "180-A" && x.cc != "187-A").OrderBy(x => x.cc).ToList();

                    foreach (var nomina in nominas)
                    {
                        string auxCC = nomina.cc == null ? "" : nomina.cc;
                        var empleadosActivosQuincenales = _context.tblRH_EK_Empleados.Where(x => x.estatus_empleado == "A" && x.cc_contable == auxCC && x.tipo_nomina == 4).ToList();
                        var empleadosActivosQuincenalesID = empleadosActivosQuincenales.Select(x => x.clave_empleado).ToList();

                        var empleadosActivosSemanales = _context.tblRH_EK_Empleados.Where(x => x.estatus_empleado == "A" && x.cc_contable == auxCC && x.tipo_nomina == 1).ToList();
                        var empleadosActivosSemanalesID = empleadosActivosSemanales.Select(x => x.clave_empleado).ToList();

                        var empleadosActivosID = empleadosActivosQuincenalesID.Union(empleadosActivosSemanalesID).ToList();
                        var tabuladoresActivos = _context.tblRH_EK_Tabulador_Historial.Where(x => empleadosActivosID.Contains(x.clave_empleado)).ToList();

                        decimal auxTotalPagarSemanal = 0;
                        decimal auxTotalPagarQuincenal = 0;
                        foreach (var empleado in empleadosActivosQuincenales)
                        {
                            int diasTrabajados = totalDias;
                            if (empleado.fecha_antiguedad > new DateTime(year, 1, 1)) diasTrabajados = (new DateTime(year, 12, 31) - (empleado.fecha_antiguedad ?? (new DateTime(year, 1, 1)))).TotalDays.ParseInt();
                            var tabuladorEmpleado = tabuladoresActivos.Where(x => x.clave_empleado == empleado.clave_empleado).OrderByDescending(x => x.fechaAplicaCambio).ThenByDescending(x => x.id).FirstOrDefault();
                            decimal totalAguinaldoEmpleado = tabuladorEmpleado == null ? 0 : ((tabuladorEmpleado.salario_base + tabuladorEmpleado.complemento + tabuladorEmpleado.bono_zona) * diasTrabajados * 15) / (totalDias * 15);
                            auxTotalPagarSemanal += totalAguinaldoEmpleado;
                        }
                        foreach (var empleado in empleadosActivosSemanales)
                        {
                            int diasTrabajados = totalDias;
                            if (empleado.fecha_antiguedad > new DateTime(year, 1, 1)) diasTrabajados = (new DateTime(year, 12, 31) - (empleado.fecha_antiguedad ?? (new DateTime(year, 1, 1)))).TotalDays.ParseInt();
                            var tabuladorEmpleado = tabuladoresActivos.Where(x => x.clave_empleado == empleado.clave_empleado).OrderByDescending(x => x.fechaAplicaCambio).ThenByDescending(x => x.id).FirstOrDefault();
                            decimal totalAguinaldoEmpleado = tabuladorEmpleado == null ? 0 : ((tabuladorEmpleado.salario_base + tabuladorEmpleado.complemento + tabuladorEmpleado.bono_zona) * diasTrabajados * 15) / (totalDias * 7);
                            auxTotalPagarQuincenal += totalAguinaldoEmpleado;
                        }
                        var nominaPeriodo = new NominaPeriodoDTO();
                        nominaPeriodo.id = nomina.id;
                        nominaPeriodo.year = year;
                        nominaPeriodo.periodo = 1;
                        nominaPeriodo.tipoNomina = Infrastructure.Utils.EnumExtensions.GetDescription((TipoPeriodoEnum)tipoPeriodo);
                        nominaPeriodo.tipoRaya = Infrastructure.Utils.EnumExtensions.GetDescription((TipoRayaEnum)tipoRaya);
                        nominaPeriodo.cc = nomina.cc;
                        nominaPeriodo.descripcionCC = "[" + nomina.cc + "] " + nomina.ccDescripcion;

                        nominaPeriodo.cantidadEmpleados = empleadosActivosSemanales.Count() + empleadosActivosQuincenales.Count();
                        nominaPeriodo.netoPagar = auxTotalPagarSemanal;
                        nominaPeriodo.netoPagar2 = auxTotalPagarQuincenal;
                        nominaPeriodo.fechaCaptura = DateTime.Now;
                        nominaPeriodo.validada = "NO";
                        nominaPeriodo.validadaEstatus = false;
                        nominaPeriodo.fechaValidacion = null;
                        nominaPeriodo.tienePoliza = false;
                        nominaPeriodo.poliza = "";
                        if (nominaPeriodo.tienePoliza)
                        {
                            var infoPoliza = nominaPeriodo.poliza.Split('-');
                            nominaPeriodo.estatusPoliza = nominaPeriodo.tienePoliza ? _polizaEkFs.EstatusPoliza(Convert.ToInt32(infoPoliza[0]), Convert.ToInt32(infoPoliza[1]), Convert.ToInt32(infoPoliza[2]), infoPoliza[3]) : "";
                        }
                        nominasPeriodo.Add(nominaPeriodo);
                    }
                }
                else
                {
                    var nominas = _context.tblC_Nom_Nomina.Where(f => f.year == year && f.tipoNomina == tipoPeriodo && f.periodo == periodo && f.tipoRayaId == tipoRaya && f.estatus).ToList();

                    foreach (var nomina in nominas)
                    {
                        var nominaPeriodo = new NominaPeriodoDTO();
                        nominaPeriodo.id = nomina.id;
                        nominaPeriodo.year = nomina.year;
                        nominaPeriodo.periodo = nomina.periodo;
                        nominaPeriodo.tipoNomina = Infrastructure.Utils.EnumExtensions.GetDescription((TipoPeriodoEnum)nomina.tipoNomina);
                        nominaPeriodo.tipoRaya = Infrastructure.Utils.EnumExtensions.GetDescription((TipoRayaEnum)nomina.tipoRayaId);
                        nominaPeriodo.cc = nomina.CC;
                        nominaPeriodo.descripcionCC = "[" + nomina.CC + "] " + nomina.nombreCC;
                        nominaPeriodo.cantidadEmpleados = nomina.raya.Count;
                        nominaPeriodo.netoPagar = nomina.raya.Sum(s => s.netoPagar);
                        nominaPeriodo.netoPagar2 = nomina.raya.Sum(s => s.netoPagar2Importe);
                        nominaPeriodo.fechaCaptura = nomina.fechaCaptura;
                        nominaPeriodo.validada = nomina.validada ? "SÍ" : "NO";
                        nominaPeriodo.validadaEstatus = nomina.validada;
                        nominaPeriodo.fechaValidacion = nomina.fechaValidacion;
                        nominaPeriodo.tienePoliza = !string.IsNullOrEmpty(nomina.poliza);
                        nominaPeriodo.poliza = nomina.poliza ?? null;
                        if (nominaPeriodo.tienePoliza)
                        {
                            var infoPoliza = nominaPeriodo.poliza.Split('-');
                            nominaPeriodo.estatusPoliza = nominaPeriodo.tienePoliza ? _polizaEkFs.EstatusPoliza(Convert.ToInt32(infoPoliza[0]), Convert.ToInt32(infoPoliza[1]), Convert.ToInt32(infoPoliza[2]), infoPoliza[3]) : "";
                        }

                        nominasPeriodo.Add(nominaPeriodo);
                    }
                }
                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, nominasPeriodo);
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);

                LogError(_SISTEMA, 0, "NominaController", "GetNominas", ex, AccionEnum.CONSULTA, 0, new { year, tipoPeriodo, periodo });
            }

            return resultado;
        }

        public Dictionary<string, object> ResumenNomina(int nominaId)
        {
            var resultado = new Dictionary<string, object>();

            try
            {
                var nomina = _context.tblC_Nom_Nomina.First(f => f.id == nominaId && f.estatus);
                var estructura = _context.tblC_Nom_EstructuraResumenNominaCC
                    .Where(w =>
                        w.clasificacionCcId == nomina.clasificacionCcId &&
                        w.tipoNominaId == nomina.tipoNomina &&
                        w.tipoRayaId == nomina.tipoRayaId &&
                        w.estatus
                    ).OrderBy(o => o.id).ToList();

                var resumen = new ResumenNominaDTO();

                if (!nomina.validada)
                {
                    foreach (var renglon in estructura)
                    {
                        var columnas = renglon.columnaRaya.Split(',');

                        var detalle = new ResumenDetalleNominaDTO();
                        detalle.cta = renglon.cuenta.cta.ToString();
                        detalle.cta += renglon.incluirScta ? "-" + renglon.cuenta.scta.ToString() : "";
                        detalle.cta += renglon.incluirScta && renglon.incluirSscta ? "-" + renglon.cuenta.sscta.ToString() : "";
                        detalle.concepto = renglon.cuenta.tipoCuenta.descripcion;
                        detalle.cuentaId = renglon.cuenta.id;

                        foreach (var col in columnas)
                        {
                            var columna = col;
                            var columnaQueSeTomaraConMontoNegativo = false;
                            if (columna.Contains('-'))
                            {
                                columnaQueSeTomaraConMontoNegativo = true;
                                columna = col.Replace("-", "");
                            }

                            switch (renglon.cuenta.tipoCuenta.tipoMovimientoId)
                            {
                                case (int)TipoMovimientoEnum.Cargo:
                                    detalle.monto += nomina.raya.Sum(s => Convert.ToDecimal(s.GetType().GetProperty(columna).GetValue(s, null))) * (columnaQueSeTomaraConMontoNegativo ? -1 : 1);
                                    break;
                                case (int)TipoMovimientoEnum.CargoRojo:
                                    detalle.monto += nomina.raya.Sum(s => Convert.ToDecimal(s.GetType().GetProperty(columna).GetValue(s, null))) * -1 * (columnaQueSeTomaraConMontoNegativo ? -1 : 1);
                                    break;
                                case (int)TipoMovimientoEnum.Abono:
                                    detalle.monto += nomina.raya.Sum(s => Convert.ToDecimal(s.GetType().GetProperty(columna).GetValue(s, null))) * -1 * (columnaQueSeTomaraConMontoNegativo ? -1 : 1);
                                    break;
                                case (int)TipoMovimientoEnum.AbonoRojo:
                                    detalle.monto += nomina.raya.Sum(s => Convert.ToDecimal(s.GetType().GetProperty(columna).GetValue(s, null))) * (columnaQueSeTomaraConMontoNegativo ? -1 : 1);
                                    break;
                            }
                        }

                        resumen.detalle.Add(detalle);
                    }
                }
                else
                {
                    foreach (var renglon in nomina.resumen.Where(w => w.estatus))
                    {
                        var detalle = new ResumenDetalleNominaDTO();
                        detalle.cta = renglon.cta;
                        detalle.concepto = renglon.concepto;
                        detalle.monto = renglon.monto;

                        resumen.detalle.Add(detalle);
                    }
                }

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, resumen);
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);

                LogError(_SISTEMA, 0, "NominaController", "ResumenNomina", ex, AccionEnum.CONSULTA, 0, new { nominaId });
            }

            return resultado;
        }

        public Dictionary<string, object> ResumenNominaAguinaldo(int year, string cc)
        {
            var resultado = new Dictionary<string, object>();
            ResumenNominaDTO resumen = new ResumenNominaDTO();

            try
            {
                var nomina = _context.tblC_Nom_Nomina.FirstOrDefault(f => f.tipoNomina == 10 && f.CC == cc && f.year == year && f.estatus);
                var registroCC = _context.tblC_Nom_CatalogoCC.FirstOrDefault(x => x.cc == cc) ?? new tblC_Nom_CatalogoCC();

                if (nomina == null)
                {
                    int totalDias = DateTime.IsLeapYear(year) ? 366 : 365;

                    var empleadosActivosQuincenales = _context.tblRH_EK_Empleados.Where(x => x.estatus_empleado == "A" && x.cc_contable == cc && x.tipo_nomina == 4).ToList();
                    var empleadosActivosQuincenalesID = empleadosActivosQuincenales.Select(x => x.clave_empleado).ToList();

                    var empleadosActivosSemanales = _context.tblRH_EK_Empleados.Where(x => x.estatus_empleado == "A" && x.cc_contable == cc && x.tipo_nomina == 1).ToList();
                    var empleadosActivosSemanalesID = empleadosActivosSemanales.Select(x => x.clave_empleado).ToList();

                    var empleadosActivosID = empleadosActivosQuincenalesID.Union(empleadosActivosSemanalesID).ToList();
                    var tabuladoresActivos = _context.tblRH_EK_Tabulador_Historial.Where(x => empleadosActivosID.Contains(x.clave_empleado)).ToList();

                    foreach (var empleado in empleadosActivosQuincenales)
                    {
                        int diasTrabajados = totalDias;
                        if (empleado.fecha_antiguedad > new DateTime(year, 1, 1)) diasTrabajados = (new DateTime(year, 12, 31) - (empleado.fecha_antiguedad ?? (new DateTime(year, 1, 1)))).TotalDays.ParseInt();
                        var tabuladorEmpleado = tabuladoresActivos.Where(x => x.clave_empleado == empleado.clave_empleado).OrderByDescending(x => x.fechaAplicaCambio).ThenByDescending(x => x.id).FirstOrDefault();
                        decimal totalAguinaldoEmpleado = tabuladorEmpleado == null ? 0 : ((tabuladorEmpleado.salario_base + tabuladorEmpleado.complemento + tabuladorEmpleado.bono_zona) * diasTrabajados * 15) / (totalDias * 15);

                        ResumenDetalleNominaDTO auxNominasPeriodo = new ResumenDetalleNominaDTO();
                        auxNominasPeriodo.cta = registroCC == null ? "5280-14-5" : (registroCC.clasificacionCcId == 1 ? "5280-14-5" : "5000-14-5");
                        auxNominasPeriodo.concepto = "AGUINALDO QUINCENAL " + year.ToString() + " >> " + empleado.clave_empleado + " - " + empleado.ape_paterno + " " + empleado.ape_materno + " " + empleado.nombre;
                        auxNominasPeriodo.monto = totalAguinaldoEmpleado;
                        auxNominasPeriodo.cuentaId = registroCC == null ? 257 : (registroCC.clasificacionCcId == 1 ? 257 : 230);

                        resumen.detalle.Add(auxNominasPeriodo);
                    }
                    foreach (var empleado in empleadosActivosSemanales)
                    {
                        int diasTrabajados = totalDias;
                        if (empleado.fecha_antiguedad > new DateTime(year, 1, 1)) diasTrabajados = (new DateTime(year, 12, 31) - (empleado.fecha_antiguedad ?? (new DateTime(year, 1, 1)))).TotalDays.ParseInt();
                        var tabuladorEmpleado = tabuladoresActivos.Where(x => x.clave_empleado == empleado.clave_empleado).OrderByDescending(x => x.fechaAplicaCambio).ThenByDescending(x => x.id).FirstOrDefault();
                        decimal totalAguinaldoEmpleado = tabuladorEmpleado == null ? 0 : ((tabuladorEmpleado.salario_base + tabuladorEmpleado.complemento + tabuladorEmpleado.bono_zona) * diasTrabajados * 15) / (totalDias * 7);

                        ResumenDetalleNominaDTO auxNominasPeriodo = new ResumenDetalleNominaDTO();
                        auxNominasPeriodo.cta = registroCC == null ? "5280-13-5" : (registroCC.clasificacionCcId == 1 ? "5280-13-5" : "5000-13-5");
                        auxNominasPeriodo.concepto = "AGUINALDO SEMANAL " + year.ToString() + " >> " + empleado.clave_empleado + " - " + empleado.ape_paterno + " " + empleado.ape_materno + " " + empleado.nombre;
                        auxNominasPeriodo.monto = totalAguinaldoEmpleado;
                        auxNominasPeriodo.cuentaId = registroCC == null ? 257 : (registroCC.clasificacionCcId == 1 ? 257 : 116);

                        resumen.detalle.Add(auxNominasPeriodo);
                    }

                }
                else
                {

                }

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, resumen);
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);

                LogError(_SISTEMA, 0, "NominaController", "ResumenNominaAgionaldo", ex, AccionEnum.CONSULTA, 0, new { year, cc });
            }

            return resultado;
        }

        public Dictionary<string, object> ValidarNomina(int nominaId, List<ResumenDetalleNominaDTO> resumen)
        {
            var resultado = new Dictionary<string, object>();

            using (var transaccion = _context.Database.BeginTransaction())
            {
                try
                {
                    if (_context.tblC_Nom_UsuarioValida.Any(a => a.usuarioId == vSesiones.sesionUsuarioDTO.id))
                    {
                        var nomina = _context.tblC_Nom_Nomina.First(f => f.id == nominaId && f.estatus && !f.validada);

                        nomina.fechaValidacion = DateTime.Now;
                        nomina.usuarioValidoId = vSesiones.sesionUsuarioDTO.id;
                        nomina.validada = true;

                        _context.SaveChanges();

                        var resumenRaya = new List<tblC_Nom_ResumenRaya>();
                        foreach (var infoResumen in resumen)
                        {
                            var infoRaya = new tblC_Nom_ResumenRaya();
                            infoRaya.nominaId = nomina.id;
                            infoRaya.cuentaId = infoResumen.cuentaId;
                            infoRaya.cta = infoResumen.cta;
                            infoRaya.concepto = infoResumen.concepto;
                            infoRaya.monto = infoResumen.monto;
                            infoRaya.estatus = true;
                            infoRaya.fechaCreacion = DateTime.Now;
                            infoRaya.fechaModificacion = infoRaya.fechaCreacion;
                            infoRaya.usuarioCreacionId = vSesiones.sesionUsuarioDTO.id;
                            infoRaya.usuarioModificacionId = infoRaya.usuarioCreacionId;

                            resumenRaya.Add(infoRaya);
                        }

                        _context.tblC_Nom_ResumenRaya.AddRange(resumenRaya);
                        _context.SaveChanges();

                        transaccion.Commit();

                        resultado.Add(SUCCESS, true);
                    }
                    else
                    {
                        throw new Exception("No cuenta con permisos para realizar esta operación");
                    }
                }
                catch (Exception ex)
                {
                    transaccion.Rollback();

                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, ex.Message);

                    LogError(_SISTEMA, 0, "NominaController", "ValidarNomina", ex, AccionEnum.CONSULTA, 0, new { nominaId });
                }
            }

            return resultado;
        }

        public Dictionary<string, object> GenerarPoliza(int nominaId, DateTime fechaPol)
        {
            var resultado = new Dictionary<string, object>();

            try
            {
                var nomina = _context.tblC_Nom_Nomina.First(f => f.id == nominaId && f.estatus);
                _catalogoCC = _context.tblC_Nom_CatalogoCC.Where(w => w.estatus && w.clasificacionCcId == nomina.clasificacionCcId).ToList();

                if (!string.IsNullOrEmpty(nomina.poliza))
                {
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, "Ya existe una póliza para esta nomina");
                }
                else
                {
                    var estructura = _context.tblC_Nom_EstructuraPolizaNominaCC
                        .Where(w =>
                            w.estatus &&
                            w.tipoNominaId == nomina.tipoNomina &&
                            w.tipoRayaId == nomina.tipoRayaId &&
                            w.clasificacionCcId == nomina.clasificacionCcId
                        ).OrderBy(o => o.id).ToList();

                    var cuentasEmpleados = _context.tblC_Nom_CuentaEmpleado.Where(w => w.estatus).ToList();

                    var tblPoliza = new List<tblPolizaDTO>();
                    var poliza_movpol = new PolizaMovPolEkDTO();
                    var poliza = new sc_polizasDTO();
                    var movimientos = new List<sc_movpolDTO>();

                    poliza_movpol.idReferencia = nomina.id;

                    var usuarioRegistro = _context.tblP_Usuario_Enkontrol.FirstOrDefault(f => f.idUsuario == vSesiones.sesionUsuarioDTO.id);

                    if (usuarioRegistro != null)
                    {
                        int linea = 1;
                        #region movpol - infoGeneral
                        foreach (var renglon in estructura.Where(w => !w.descuento || (w.descuento && !w.esPorEmpleado)))
                        {

                            var movimientoPoliza = CrearLineaPoliza(fechaPol, linea, renglon, nomina, null, null);

                            if (movimientoPoliza.monto != 0)
                            {
                                movimientos.Add(movimientoPoliza);
                                linea++;

                                tblPoliza.Add(CrearLineaTblPoliza(movimientoPoliza, renglon.cuenta.tipoCuenta.descripcion));
                            }
                        }
                        #endregion

                        #region movpol - descuentos
                        foreach (var empleado in nomina.raya)
                        {
                            foreach (var renglon in estructura.Where(w => w.descuento && w.esPorEmpleado))
                            {
                                var movimientoPoliza = CrearLineaPoliza(fechaPol, linea, renglon, nomina, empleado, cuentasEmpleados);

                                if (movimientoPoliza.monto != 0)
                                {
                                    movimientos.Add(movimientoPoliza);
                                    linea++;

                                    var ctaEmpleado = cuentasEmpleados.FirstOrDefault(f => f.numero == empleado.numeroEmpleado && f.cuenta.tipoCuentaId == renglon.cuenta.tipoCuentaId && f.validada);
                                    tblPoliza.Add(CrearLineaTblPoliza(movimientoPoliza, renglon.cuenta.tipoCuenta.descripcion + (ctaEmpleado != null ? " - " + ctaEmpleado.cuentaDescripcion : "")));
                                }
                            }
                        }
                        #endregion

                        #region poliza
                        poliza.year = fechaPol.Year;
                        poliza.mes = fechaPol.Month;
                        poliza.tp = "03";
                        poliza.fechapol = fechaPol.Date;
                        poliza.cargos = movimientos.Where(w => w.tm == (int)TipoMovimientoEnum.Cargo || w.tm == (int)TipoMovimientoEnum.CargoRojo).Sum(s => s.monto);
                        poliza.abonos = movimientos.Where(w => w.tm == (int)TipoMovimientoEnum.Abono || w.tm == (int)TipoMovimientoEnum.AbonoRojo).Sum(s => s.monto);
                        poliza.generada = "C";
                        poliza.fecha_hora_crea = DateTime.Now;
                        poliza.usuario_crea = usuarioRegistro.empleado;
                        poliza.concepto = "Póliza de DIARIO";

                        poliza_movpol.poliza = poliza;
                        poliza_movpol.movimientos = movimientos;
                        #endregion

                        if (empleadosSinRegistrar.Count > 0)
                        {
                            resultado.Add(SUCCESS, false);
                            resultado.Add(MESSAGE, "No se generó la póliza debido a que hay empleados sin relacionar con su cuenta de descuentos correspondientes");
                            resultado.Add("empleadosSinRegistrar", empleadosSinRegistrar);
                        }
                        else
                        {
                            resultado.Add(SUCCESS, true);
                            resultado.Add(ITEMS, poliza_movpol);
                            resultado.Add("tblPoliza", tblPoliza);
                            resultado.Add("tipoRayaId", nomina.tipoRayaId);
                        }
                    }
                    else
                    {
                        throw new Exception("Favor de registrar su información de empleado");
                    }
                }
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);

                LogError(_SISTEMA, 0, "NominaController", "CrearPoliza", ex, AccionEnum.AGREGAR, 0, new { nominaId });
            }

            return resultado;
        }

        public Dictionary<string, object> RegistrarPoliza(PolizaMovPolEkDTO poliza_movimientos, int tipoRayaId)
        {
            var resultado = new Dictionary<string, object>();

            using (var transaccionSP = _context.Database.BeginTransaction())
            {
                using (var conexionEK = new Conexion().ConexionEKAdm())
                {
                    using (var transaccionEK = conexionEK.BeginTransaction())
                    {
                        try
                        {
                            if (_context.tblC_Nom_UsuarioValida.Any(a => a.usuarioId == vSesiones.sesionUsuarioDTO.id && a.estatus))
                            {
                                var nomina = _context.tblC_Nom_Nomina.First(f => f.id == poliza_movimientos.idReferencia && string.IsNullOrEmpty(f.poliza));

                                if (nomina != null)
                                {
                                    if (tipoRayaId == (int)TipoRayaEnum.NOMINA)
                                    {
                                        _polizaEkFs.SetContext(conexionEK);
                                        _polizaEkFs.SetTransaccion(transaccionEK);
                                        string numeroPoliza = _polizaEkFs.GuardarPoliza(poliza_movimientos.poliza, poliza_movimientos.movimientos);

                                        _polizaSpFs.SetContext(_context);
                                        _polizaSpFs.SetTransaccion(transaccionSP);
                                        var polizaPoliza = numeroPoliza.Split('-')[2];
                                        poliza_movimientos.poliza.poliza = Convert.ToInt32(polizaPoliza);
                                        var resultadoSP = _polizaSpFs.GuardarPoliza(poliza_movimientos.poliza, poliza_movimientos.movimientos);

                                        nomina.poliza = numeroPoliza;
                                        _context.SaveChanges();

                                        #region Crear Compras Automáticas Autorizadas
                                        #region Información Inicial
                                        List<string> listaComprasGeneradas = new List<string>();
                                        decimal cantidadPendiente = 0m;

                                        EnkontrolEnum conexionEnkontrol = EnkontrolEnum.CplanProd;
                                        tblC_Nom_RequisicionGlobal requisicionGlobal = null;

                                        switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                                        {
                                            case EmpresaEnum.Construplan:
                                                conexionEnkontrol = EnkontrolEnum.CplanProd;
                                                requisicionGlobal = _context.tblC_Nom_RequisicionGlobal.FirstOrDefault(x => x.registroActivo && x.cc == nomina.CC && x.tipoRequisicion == TipoRequisicionGlobalEnum.TyL_OCSI_COSTO_SOCIAL);
                                                break;
                                            case EmpresaEnum.Arrendadora:
                                                conexionEnkontrol = EnkontrolEnum.ArrenProd;
                                                requisicionGlobal = _context.tblC_Nom_RequisicionGlobal.FirstOrDefault(x => x.registroActivo && x.cc == nomina.CC && x.tipoRequisicion == TipoRequisicionGlobalEnum.TyL_OCSI);
                                                break;
                                            case EmpresaEnum.GCPLAN:
                                                conexionEnkontrol = EnkontrolEnum.GCPLAN;
                                                requisicionGlobal = _context.tblC_Nom_RequisicionGlobal.FirstOrDefault(x => x.registroActivo && x.cc == nomina.CC && x.tipoRequisicion == TipoRequisicionGlobalEnum.TyL_OCSI_COSTO_SOCIAL);
                                                break;
                                        }

                                        if (requisicionGlobal == null)
                                        {
                                            throw new Exception("No se encuentra la requisición global para el centro de costo \"" + nomina.CC + "\".");
                                        }

                                        var registroRequisicionGlobal = _contextEnkontrol.Select<dynamic>(conexionEnkontrol, new OdbcConsultaDTO()
                                        {
                                            consulta = string.Format(@"
                                            SELECT * FROM so_requisicion WHERE cc = '{0}' AND numero = {1} 
                                        ", requisicionGlobal.cc, requisicionGlobal.numero)
                                        }).FirstOrDefault();

                                        if (registroRequisicionGlobal == null)
                                        {
                                            throw new Exception("No se encuentra el registro de la requisición global para el centro de costo \"" + nomina.CC + "\".");
                                        }

                                        var area = 0;
                                        var cuenta = 0;

                                        if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                                        {
                                            var registroCentroCosto = _context.tblC_Nom_CatalogoCC.FirstOrDefault(x => x.estatus && x.cc == nomina.CC);

                                            if (registroCentroCosto != null)
                                            {
                                                area = (int)registroCentroCosto.area;
                                                cuenta = (int)registroCentroCosto.cuenta;
                                            }
                                            else
                                            {
                                                throw new Exception("No se encuentra la información del centro de costo \"" + nomina.CC + "\".");
                                            }
                                        }

                                        int insumo = 0;

                                        switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                                        {
                                            case EmpresaEnum.Construplan:
                                            case EmpresaEnum.GCPLAN:
                                                switch (nomina.clasificacionCcId)
                                                {
                                                    case 1: //Administración Central
                                                        insumo = 7070000;
                                                        break;
                                                    case 2: //Foránea
                                                        insumo = 6070000;
                                                        break;
                                                }
                                                break;
                                            case EmpresaEnum.Arrendadora:
                                                insumo = 6080001;
                                                break;
                                        }

                                        var listaRaya = _context.tblC_Nom_Raya.Where(x => x.estatus && x.nominaID == nomina.id).ToList();

                                        var ultimaCompra = _contextEnkontrol.Select<OrdenCompraDTO>(conexionEnkontrol, new OdbcConsultaDTO
                                        {
                                            consulta = string.Format(@"SELECT TOP 1 numero FROM so_orden_compra WHERE cc = '{0}' ORDER BY numero DESC", (string)registroRequisicionGlobal.cc)
                                        });
                                        var numeroCompraNueva = 1;

                                        if (ultimaCompra.Count() > 0)
                                        {
                                            numeroCompraNueva = ultimaCompra[0].numero + 1;
                                        }

                                        var ultimaCompraConstruplan = _contextEnkontrol.Select<OrdenCompraDTO>(EnkontrolEnum.CplanProd, new OdbcConsultaDTO
                                        {
                                            consulta = string.Format(@"SELECT TOP 1 numero FROM so_orden_compra WHERE cc = '{0}' ORDER BY numero DESC", (string)registroRequisicionGlobal.cc)
                                        });
                                        #endregion

                                        #region Compra OCSI
                                        {
                                            var proveedor = 5451;
                                            var registroRequisicionDetalleGlobal = _contextEnkontrol.Select<dynamic>(conexionEnkontrol, new OdbcConsultaDTO
                                            {
                                                consulta = string.Format(@"
                                                SELECT * FROM so_requisicion_det WHERE cc = '{0}' AND numero = {1} 
                                            ", requisicionGlobal.cc, requisicionGlobal.numero)
                                            }).FirstOrDefault();
                                            cantidadPendiente =
                                                Convert.ToDecimal(registroRequisicionDetalleGlobal.cantidad, CultureInfo.InvariantCulture) - Convert.ToDecimal(registroRequisicionDetalleGlobal.cant_ordenada, CultureInfo.InvariantCulture);

                                            //Cálculo OCSI = despensaImporte * 0.01
                                            var cantidad = listaRaya.Sum(x => x.despensaImporte) * 0.01m;

                                            if (cantidad > 0)
                                            {
                                                var iva = cantidad * 0.16m;

                                                if (cantidad > cantidadPendiente)
                                                {
                                                    throw new Exception("La cantidad de la compra sobrepasa la cantidad pendiente de ordenar para la requisición \"" + (string)registroRequisicionGlobal.cc + "-" + ((int)registroRequisicionGlobal.numero).ToString() + "\".");
                                                }

                                                #region SIGOPLAN
                                                #region Registro General
                                                var nuevaCompraSIGOPLAN = new tblCom_OrdenCompra
                                                {
                                                    cc = registroRequisicionGlobal.cc,
                                                    numero = numeroCompraNueva,
                                                    fecha = DateTime.Now,
                                                    idLibreAbordo = 999,
                                                    tipo_oc_req = "1", //Esto podría no ser fijo.
                                                    compradorSIGOPLAN = 13, //Admin
                                                    compradorEnkontrol = 1, //Admin
                                                    compradorStarsoft = 0,
                                                    moneda = "1",
                                                    tipo_cambio = 1,
                                                    porcent_iva = 16m,
                                                    sub_total = cantidad,
                                                    iva = iva,
                                                    total = cantidad + iva,
                                                    sub_total_rec = 0m,
                                                    iva_rec = 0m,
                                                    total_rec = 0m,
                                                    estatus = "",
                                                    comentarios = "SERV. ADMIVOS.",
                                                    bienes_servicios = "S",
                                                    CFDI = "G03 (Gastos en general)",
                                                    tiempoEntregaDias = 1,
                                                    tiempoEntregaComentarios = (nomina.tipoNomina == 1 ? "S" : "Q") + nomina.periodo.ToString(),
                                                    anticipo = false,
                                                    totalAnticipo = cantidad + iva,
                                                    estatusRegistro = true,
                                                    colocada = false,
                                                    colocadaFecha = null,
                                                    correoProveedor = "",
                                                    proveedor = proveedor,
                                                    st_impresa = "",
                                                    autorizo = 1,
                                                    usuario_autoriza = 1,
                                                    fecha_autoriza = DateTime.Now,
                                                    ST_OC = "A",
                                                    empleado_autoriza = 1,
                                                    empleadoUltimaAccion = 1,
                                                    PERU_proveedor = "",
                                                    PERU_cuentaCorriente = "",
                                                    PERU_formaPago = "",
                                                    PERU_tipoCambio = "",
                                                    PERU_tipoCompra = "",
                                                    fechaUltimaAccion = DateTime.Now,
                                                    tipoUltimaAccion = TipoUltimaAccionEnum.Autorizacion,
                                                    vobo = 0,
                                                    vobo2 = 0
                                                };

                                                _context.tblCom_OrdenCompra.Add(nuevaCompraSIGOPLAN);
                                                _context.SaveChanges();
                                                #endregion

                                                #region Registro Detalle
                                                var nuevaCompraSIGOPLANDet = new tblCom_OrdenCompraDet
                                                {
                                                    idOrdenCompra = nuevaCompraSIGOPLAN.id,
                                                    cc = nuevaCompraSIGOPLAN.cc,
                                                    numero = nuevaCompraSIGOPLAN.numero,
                                                    partida = 1,
                                                    insumo = insumo,
                                                    fecha_entrega = DateTime.Now.AddDays(1),
                                                    cantidad = cantidad,
                                                    precio = 1,
                                                    importe = cantidad,
                                                    ajuste_cant = 0,
                                                    ajuste_imp = 0,
                                                    num_requisicion = (int)registroRequisicionGlobal.numero,
                                                    part_requisicion = 1,
                                                    cant_recibida = 0,
                                                    imp_recibido = 0,
                                                    fecha_recibido = null,
                                                    cant_canc = 0,
                                                    imp_canc = 0,
                                                    acum_ant = 0,
                                                    max_orig = 0,
                                                    max_ppto = 0,
                                                    area = area,
                                                    cuenta = cuenta,
                                                    porcent_iva = 16,
                                                    iva = iva,
                                                    partidaDescripcion = "Servicio de vales " + (nomina.tipoNomina == 1 ? "S" : "Q") + nomina.periodo.ToString(),
                                                    estatusRegistro = true
                                                };

                                                _context.tblCom_OrdenCompraDet.Add(nuevaCompraSIGOPLANDet);
                                                _context.SaveChanges();
                                                #endregion

                                                #region Actualizar Partida Requisición
                                                string ccRequisicion = (string)registroRequisicionGlobal.cc;
                                                int numeroRequisicion = (int)registroRequisicionGlobal.numero;
                                                var registroRequisicionSIGOPLAN = _context.tblCom_Req.FirstOrDefault(x => x.estatusRegistro && x.cc == ccRequisicion && x.numero == numeroRequisicion);

                                                if (registroRequisicionSIGOPLAN != null)
                                                {
                                                    var registroRequisicionDetalleSIGOPLAN = _context.tblCom_ReqDet.FirstOrDefault(x => x.estatusRegistro && x.idReq == registroRequisicionSIGOPLAN.id);

                                                    registroRequisicionDetalleSIGOPLAN.cantOrdenada += cantidad;
                                                    _context.SaveChanges();
                                                }
                                                #endregion
                                                #endregion

                                                #region Enkontrol
                                                #region Registro General
                                                using (var cmd = new OdbcCommand(@"
                                                INSERT INTO so_orden_compra (
                                                    cc, numero, fecha, libre_abordo, tipo_oc_req, comprador, proveedor, moneda, tipo_cambio, porcent_iva, 
                                                    sub_total, iva, total, sub_tot_rec, iva_rec, total_rec, sub_tot_ajus, iva_ajus, total_ajus, st_impresa, 
                                                    estatus, comentarios, solicito, vobo, autorizo, sub_tot_canc, iva_canc, total_canc, total_fac, total_pag, 
                                                    embarquese, empleado_modifica, fecha_modifica, hora_modifica, tc_cc, anticipo, monto_anticipo, almacen, 
                                                    bit_autorecepcion, almacen_autorecepcion, empleado_autorecepcion, rentencion_antes_iva, rentencion_despues_iva, 
                                                    bienes_servicios, concepto_factura, tot_fac_ret, tot_ret_ret, usuario_autoriza, fecha_autoriza, st_autorizada, 
                                                    imprime_porcentaje, ST_OC, empleado_autoriza, vobo_informa, vobo2, vobo3, vobo4, vobo5, vobo6, cambia_vobo, tmc, 
                                                    autoriza_activos, fecha_vobo, fecha_vobo2, fecha_vobo3, bit_af, bit_arrenda, estatus_bloqueo, ruta_pdf, ruta_map) 
                                                VALUES (
                                                    ?,?,?,?,?,?,?,?,?,?, 
                                                    ?,?,?,?,?,?,?,?,?,?, 
                                                    ?,?,?,?,?,?,?,?,?,?, 
                                                    ?,?,?,?,?,?,?,?,?,?, 
                                                    ?,?,?,?,?,?,?,?,?,?, 
                                                    ?,?,?,?,?,?,?,?,?,?, 
                                                    ?,?,?,?,?,?,?,?,?,?)"))
                                                {
                                                    OdbcParameterCollection parameters = cmd.Parameters;

                                                    parameters.Add("@cc", OdbcType.Char).Value = registroRequisicionGlobal.cc;
                                                    parameters.Add("@numero", OdbcType.Numeric).Value = numeroCompraNueva;
                                                    parameters.Add("@fecha", OdbcType.Date).Value = DateTime.Now;

                                                    //Se guarda siempre con 1 porque en EnKontrol la tabla de libre abordo no contiene todos los almacenes. En SIGOPLAN se guarda con el número de almacén.
                                                    parameters.Add("@libre_abordo", OdbcType.Numeric).Value = 1;

                                                    parameters.Add("@tipo_oc_req", OdbcType.Char).Value = "1";
                                                    parameters.Add("@comprador", OdbcType.Numeric).Value = 1;
                                                    parameters.Add("@proveedor", OdbcType.Numeric).Value = proveedor;
                                                    parameters.Add("@moneda", OdbcType.Char).Value = "1";
                                                    parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = "1";
                                                    parameters.Add("@porcent_iva", OdbcType.Numeric).Value = 16;
                                                    parameters.Add("@sub_total", OdbcType.Numeric).Value = cantidad;
                                                    parameters.Add("@iva", OdbcType.Numeric).Value = iva;
                                                    parameters.Add("@total", OdbcType.Numeric).Value = cantidad + iva;
                                                    parameters.Add("@sub_tot_rec", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@iva_rec", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@total_rec", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@sub_tot_ajus", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@iva_ajus", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@total_ajus", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@st_impresa", OdbcType.Char).Value = "";
                                                    parameters.Add("@estatus", OdbcType.Char).Value = " "; //Se pone un espacio en blanco porque si se guarda un string vacío truena en Enkontrol y no se ven algunos reportes.
                                                    parameters.Add("@comentarios", OdbcType.Char).Value = "SERV. ADMIVOS.";
                                                    parameters.Add("@solicito", OdbcType.Numeric).Value = 1;
                                                    parameters.Add("@vobo", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@autorizo", OdbcType.Numeric).Value = 1;
                                                    parameters.Add("@sub_tot_canc", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@iva_canc", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@total_canc", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@total_fac", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@total_pag", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@embarquese", OdbcType.Char).Value = "";
                                                    parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = 1;
                                                    parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                                    parameters.Add("@hora_modifica", OdbcType.DateTime).Value = DateTime.Now;
                                                    parameters.Add("@tc_cc", OdbcType.Numeric).Value = 1;
                                                    parameters.Add("@anticipo", OdbcType.Char).Value = DBNull.Value;
                                                    parameters.Add("@monto_anticipo", OdbcType.Numeric).Value = DBNull.Value;
                                                    parameters.Add("@almacen", OdbcType.Numeric).Value = DBNull.Value;
                                                    parameters.Add("@bit_autorecepcion", OdbcType.Char).Value = "S";
                                                    parameters.Add("@almacen_autorecepcion", OdbcType.Numeric).Value = 999;
                                                    parameters.Add("@empleado_autorecepcion", OdbcType.Numeric).Value = 7;
                                                    parameters.Add("@rentencion_antes_iva", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@rentencion_despues_iva", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@bienes_servicios", OdbcType.Char).Value = "S";
                                                    parameters.Add("@concepto_factura", OdbcType.Char).Value = DBNull.Value;
                                                    parameters.Add("@tot_fac_ret", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@tot_ret_ret", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@usuario_autoriza", OdbcType.Numeric).Value = 1;
                                                    parameters.Add("@fecha_autoriza", OdbcType.Date).Value = DateTime.Now.Date;
                                                    parameters.Add("@st_autorizada", OdbcType.Char).Value = DBNull.Value;
                                                    parameters.Add("@imprime_porcentaje", OdbcType.Char).Value = "N";
                                                    parameters.Add("@ST_OC", OdbcType.Char).Value = "A";
                                                    parameters.Add("@empleado_autoriza", OdbcType.Numeric).Value = 1;
                                                    parameters.Add("@vobo_informa", OdbcType.Char).Value = "N";
                                                    parameters.Add("@vobo2", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@vobo3", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@vobo4", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@vobo5", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@vobo6", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@cambia_vobo", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@tmc", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@autoriza_activos", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@fecha_vobo", OdbcType.Date).Value = DBNull.Value;
                                                    parameters.Add("@fecha_vobo2", OdbcType.Date).Value = DBNull.Value;
                                                    parameters.Add("@fecha_vobo3", OdbcType.Date).Value = DBNull.Value;
                                                    parameters.Add("@bit_af", OdbcType.Char).Value = "N";
                                                    parameters.Add("@bit_arrenda", OdbcType.Char).Value = "N";
                                                    parameters.Add("@estatus_bloqueo", OdbcType.Char).Value = DBNull.Value;
                                                    parameters.Add("@ruta_pdf", OdbcType.VarChar).Value = DBNull.Value;
                                                    parameters.Add("@ruta_map", OdbcType.VarChar).Value = DBNull.Value;

                                                    cmd.Connection = transaccionEK.Connection;
                                                    cmd.Transaction = transaccionEK;
                                                    cmd.ExecuteNonQuery();
                                                }
                                                #endregion

                                                #region Registro Detalle
                                                using (var cmd = new OdbcCommand(@"
                                                INSERT INTO so_orden_compra_det (
                                                    cc, numero, partida, insumo, fecha_entrega, cantidad, precio, importe, ajuste_cant, ajuste_imp, num_requisicion, part_requisicion, 
                                                    cant_recibida, imp_recibido, fecha_recibido, cant_canc, imp_canc, acum_ant, max_orig, max_ppto, area, cuenta, porcent_iva, iva) 
                                                VALUES (
                                                    ?,?,?,?,?,?,?,?,?,?, 
                                                    ?,?,?,?,?,?,?,?,?,?, 
                                                    ?,?,?,?)"))
                                                {
                                                    OdbcParameterCollection parameters = cmd.Parameters;

                                                    parameters.Add("@cc", OdbcType.Char).Value = registroRequisicionGlobal.cc;
                                                    parameters.Add("@numero", OdbcType.Numeric).Value = numeroCompraNueva;
                                                    parameters.Add("@partida", OdbcType.Numeric).Value = 1;
                                                    parameters.Add("@insumo", OdbcType.Numeric).Value = insumo;
                                                    parameters.Add("@fecha_entrega", OdbcType.Date).Value = DateTime.Now.AddDays(1).Date;
                                                    parameters.Add("@cantidad", OdbcType.Numeric).Value = cantidad;
                                                    parameters.Add("@precio", OdbcType.Numeric).Value = 1;
                                                    parameters.Add("@importe", OdbcType.Numeric).Value = cantidad;
                                                    parameters.Add("@ajuste_cant", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@ajuste_imp", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@num_requisicion", OdbcType.Numeric).Value = (int)registroRequisicionGlobal.numero;
                                                    parameters.Add("@part_requisicion", OdbcType.Numeric).Value = 1;
                                                    parameters.Add("@cant_recibida", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@imp_recibido", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@fecha_recibido", OdbcType.Date).Value = (object)DBNull.Value;
                                                    parameters.Add("@cant_canc", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@imp_canc", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@acum_ant", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@max_orig", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@max_ppto", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@area", OdbcType.Numeric).Value = area;
                                                    parameters.Add("@cuenta", OdbcType.Numeric).Value = cuenta;
                                                    parameters.Add("@porcent_iva", OdbcType.Numeric).Value = DBNull.Value;
                                                    parameters.Add("@iva", OdbcType.Numeric).Value = DBNull.Value;

                                                    cmd.Connection = transaccionEK.Connection;
                                                    cmd.Transaction = transaccionEK;
                                                    cmd.ExecuteNonQuery();
                                                }
                                                #endregion

                                                #region Registro Linea Comentario
                                                using (var cmd = new OdbcCommand(@"INSERT INTO so_orden_det_linea (cc, numero, partida, descripcion) VALUES (?,?,?,?)"))
                                                {
                                                    OdbcParameterCollection parameters = cmd.Parameters;

                                                    parameters.Add("@cc", OdbcType.Char).Value = registroRequisicionGlobal.cc;
                                                    parameters.Add("@numero", OdbcType.Numeric).Value = numeroCompraNueva;
                                                    parameters.Add("@partida", OdbcType.Numeric).Value = 1;
                                                    parameters.Add("@descripcion", OdbcType.VarChar).Value = "Servicio de vales " + (nomina.tipoNomina == 1 ? "S" : "Q") + nomina.periodo.ToString();

                                                    cmd.Connection = transaccionEK.Connection;
                                                    cmd.Transaction = transaccionEK;
                                                    cmd.ExecuteNonQuery();
                                                }
                                                #endregion

                                                #region Actualizar Explosión
                                                var registroExplosionEK = _contextEnkontrol.Select<dynamic>(conexionEnkontrol, new OdbcConsultaDTO
                                                {
                                                    consulta = string.Format(@"
                                                SELECT * FROM so_explos_mat WHERE cc = '{0}' AND insumo = {1} AND year_explos = {2} 
                                            ", registroRequisicionGlobal.cc, insumo, DateTime.Now.Year)
                                                });

                                                if (registroExplosionEK.Count() == 0)
                                                {
                                                    #region Insert Registro Explosión
                                                    using (var cmd = new OdbcCommand(@"
                                                    INSERT INTO so_explos_mat (
                                                        cc, insumo, cantidad, precio, aditiva_cant, aditiva_imp, deduc_cant, deduc_imp, cant_requerida, 
                                                        comp_cant, comp_imp, ajuste_cant, ajuste_imp, traspaso_cant, traspaso_imp, cant_recibida, imp_recibido, 
                                                        aditiva_cant_fecha, deduc_cant_fecha, aditiva_precio_fecha, deduc_precio_fecha, aditiva_precio, deductiva_precio, 
                                                        traspaso_cant_entrada, traspaso_imp_entrada, importe, year_explos, periodo, bit_auto_presu, cantidad_aditiva_sun, 
                                                        cantidad_deductiva_sun, cantidad_extra_sun) 
                                                    VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"))
                                                    {
                                                        OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                        parametersExplosion.Add("@cc", OdbcType.Char).Value = registroRequisicionGlobal.cc;
                                                        parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = insumo;
                                                        parametersExplosion.Add("@cantidad", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@precio", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@aditiva_cant", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@aditiva_imp", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@deduc_cant", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@deduc_imp", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@cant_requerida", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@comp_cant", OdbcType.Numeric).Value = cantidad;
                                                        parametersExplosion.Add("@comp_imp", OdbcType.Numeric).Value = cantidad;
                                                        parametersExplosion.Add("@ajuste_cant", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@ajuste_imp", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@traspaso_cant", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@traspaso_imp", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@cant_recibida", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@imp_recibido", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@aditiva_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                                        parametersExplosion.Add("@deduc_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                                        parametersExplosion.Add("@aditiva_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                                        parametersExplosion.Add("@deduc_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                                        parametersExplosion.Add("@aditiva_precio", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@deductiva_precio", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@traspaso_cant_entrada", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@traspaso_imp_entrada", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@importe", OdbcType.Numeric).Value = DBNull.Value;
                                                        parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;
                                                        parametersExplosion.Add("@periodo", OdbcType.Char).Value = DBNull.Value;
                                                        parametersExplosion.Add("@bit_auto_presu", OdbcType.Char).Value = "N";
                                                        parametersExplosion.Add("@cantidad_aditiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                                        parametersExplosion.Add("@cantidad_deductiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                                        parametersExplosion.Add("@cantidad_extra_sun", OdbcType.Numeric).Value = DBNull.Value;

                                                        cmd.Connection = transaccionEK.Connection;
                                                        cmd.Transaction = transaccionEK;
                                                        cmd.ExecuteNonQuery();
                                                    }
                                                    #endregion
                                                }
                                                else
                                                {
                                                    #region Update Registro Explosión
                                                    var nuevaCantidadComprada = Convert.ToDecimal(registroExplosionEK[0].comp_cant, CultureInfo.InvariantCulture) + cantidad;
                                                    var nuevoImporteComprado = Convert.ToDecimal(registroExplosionEK[0].comp_imp, CultureInfo.InvariantCulture) + cantidad;

                                                    using (var cmd = new OdbcCommand(@"UPDATE so_explos_mat SET comp_cant = ?, comp_imp = ? WHERE cc = ? AND insumo = ? AND year_explos = ?"))
                                                    {
                                                        OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                        parametersExplosion.Add("@comp_cant", OdbcType.Numeric).Value = nuevaCantidadComprada;
                                                        parametersExplosion.Add("@comp_imp", OdbcType.Numeric).Value = nuevoImporteComprado;

                                                        parametersExplosion.Add("@cc", OdbcType.Char).Value = registroRequisicionGlobal.cc;
                                                        parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = insumo;
                                                        parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;

                                                        cmd.Connection = transaccionEK.Connection;
                                                        cmd.Transaction = transaccionEK;
                                                        cmd.ExecuteNonQuery();
                                                    }
                                                    #endregion
                                                }
                                                #endregion

                                                #region Actualizar Partida Requisición
                                                using (var cmd = new OdbcCommand(@"UPDATE so_requisicion_det SET cant_ordenada = ? WHERE cc = ? AND numero = ? AND partida = ? AND insumo = ?"))
                                                {
                                                    OdbcParameterCollection parameters = cmd.Parameters;

                                                    parameters.Add("@cant_ordenada", OdbcType.Numeric).Value =
                                                        Convert.ToDecimal(registroRequisicionDetalleGlobal.cant_ordenada, CultureInfo.InvariantCulture) + cantidad;

                                                    parameters.Add("@cc", OdbcType.Char).Value = registroRequisicionGlobal.cc;
                                                    parameters.Add("@numero", OdbcType.Numeric).Value = (int)registroRequisicionGlobal.numero;
                                                    parameters.Add("@partida", OdbcType.Numeric).Value = 1;
                                                    parameters.Add("@insumo", OdbcType.Numeric).Value = insumo;

                                                    cmd.Connection = transaccionEK.Connection;
                                                    cmd.Transaction = transaccionEK;
                                                    cmd.ExecuteNonQuery();
                                                }
                                                #endregion
                                                #endregion

                                                listaComprasGeneradas.Add(string.Format(@"[OCSI {0}-{1}]", registroRequisicionGlobal.cc, numeroCompraNueva));

                                                var ccDesc = _context.tblC_Nom_CatalogoCC.FirstOrDefault(x => x.estatus && x.cc == nomina.CC).ccDescripcion;
                                                _context.tblC_Nom_Compra_Nomina.Add(new tblC_Nom_Compra_Nomina
                                                {
                                                    nomina_id = nomina.id,
                                                    year = nomina.year,
                                                    periodo = nomina.periodo,
                                                    tipoNomina = nomina.tipoNomina,
                                                    cc = nomina.CC,
                                                    ccDesc = ccDesc,
                                                    numeroCompra = numeroCompraNueva,
                                                    tipoRequisicion = "OCSI",
                                                    registroActivo = true
                                                });
                                                _context.SaveChanges();
                                            }
                                        }
                                        #endregion

                                        #region Compra T&L
                                        {
                                            var proveedor = 5740;

                                            numeroCompraNueva++;

                                            var registroRequisicionDetalleGlobal = _contextEnkontrol.Select<dynamic>(conexionEnkontrol, new OdbcConsultaDTO
                                            {
                                                consulta = string.Format(@"
                                                SELECT * FROM so_requisicion_det WHERE cc = '{0}' AND numero = {1} 
                                            ", requisicionGlobal.cc, requisicionGlobal.numero)
                                            }).FirstOrDefault();
                                            cantidadPendiente =
                                                Convert.ToDecimal(registroRequisicionDetalleGlobal.cantidad, CultureInfo.InvariantCulture) - Convert.ToDecimal(registroRequisicionDetalleGlobal.cant_ordenada, CultureInfo.InvariantCulture);

                                            //Cálculo T&L = (netoPagar – despensaImporte + pensionAlimenticiaImporte) * 0.03
                                            var cantidad = listaRaya.Sum(x => x.netoPagar - x.despensaImporte + x.pensionAlimenticiaImporte) * 0.03m;

                                            if (cantidad > 0)
                                            {
                                                var iva = cantidad * 0.16m;

                                                if (cantidad > cantidadPendiente)
                                                {
                                                    throw new Exception("La cantidad de la compra sobrepasa la cantidad pendiente de ordenar para la requisición \"" + (string)registroRequisicionGlobal.cc + "-" + ((int)registroRequisicionGlobal.numero).ToString() + "\".");
                                                }

                                                #region SIGOPLAN
                                                #region Registro General
                                                var nuevaCompraSIGOPLAN = new tblCom_OrdenCompra
                                                {
                                                    cc = registroRequisicionGlobal.cc,
                                                    numero = numeroCompraNueva,
                                                    fecha = DateTime.Now,
                                                    idLibreAbordo = 999,
                                                    tipo_oc_req = "1", //Esto podría no ser fijo.
                                                    compradorSIGOPLAN = 13, //Admin
                                                    compradorEnkontrol = 1, //Admin
                                                    compradorStarsoft = 0,
                                                    moneda = "1",
                                                    tipo_cambio = 1,
                                                    porcent_iva = 16m,
                                                    sub_total = cantidad,
                                                    iva = iva,
                                                    total = cantidad + iva,
                                                    sub_total_rec = 0m,
                                                    iva_rec = 0m,
                                                    total_rec = 0m,
                                                    estatus = "",
                                                    comentarios = "SERV. ADMIVOS.",
                                                    bienes_servicios = "S",
                                                    CFDI = "G03 (Gastos en general)",
                                                    tiempoEntregaDias = 1,
                                                    tiempoEntregaComentarios = (nomina.tipoNomina == 1 ? "S" : "Q") + nomina.periodo.ToString(),
                                                    anticipo = false,
                                                    totalAnticipo = cantidad + iva,
                                                    estatusRegistro = true,
                                                    colocada = false,
                                                    colocadaFecha = null,
                                                    correoProveedor = "",
                                                    proveedor = proveedor,
                                                    st_impresa = "",
                                                    autorizo = 1,
                                                    usuario_autoriza = 1,
                                                    fecha_autoriza = DateTime.Now,
                                                    ST_OC = "A",
                                                    empleado_autoriza = 1,
                                                    empleadoUltimaAccion = 1,
                                                    PERU_proveedor = "",
                                                    PERU_cuentaCorriente = "",
                                                    PERU_formaPago = "",
                                                    PERU_tipoCambio = "",
                                                    PERU_tipoCompra = "",
                                                    fechaUltimaAccion = DateTime.Now,
                                                    tipoUltimaAccion = TipoUltimaAccionEnum.Autorizacion,
                                                    vobo = 0,
                                                    vobo2 = 0
                                                };

                                                _context.tblCom_OrdenCompra.Add(nuevaCompraSIGOPLAN);
                                                _context.SaveChanges();
                                                #endregion

                                                #region Registro Detalle
                                                var nuevaCompraSIGOPLANDet = new tblCom_OrdenCompraDet
                                                {
                                                    idOrdenCompra = nuevaCompraSIGOPLAN.id,
                                                    cc = nuevaCompraSIGOPLAN.cc,
                                                    numero = nuevaCompraSIGOPLAN.numero,
                                                    partida = 1,
                                                    insumo = insumo,
                                                    fecha_entrega = DateTime.Now.AddDays(1),
                                                    cantidad = cantidad,
                                                    precio = 1,
                                                    importe = cantidad,
                                                    ajuste_cant = 0,
                                                    ajuste_imp = 0,
                                                    num_requisicion = (int)registroRequisicionGlobal.numero,
                                                    part_requisicion = 1,
                                                    cant_recibida = 0,
                                                    imp_recibido = 0,
                                                    fecha_recibido = null,
                                                    cant_canc = 0,
                                                    imp_canc = 0,
                                                    acum_ant = 0,
                                                    max_orig = 0,
                                                    max_ppto = 0,
                                                    area = area,
                                                    cuenta = cuenta,
                                                    porcent_iva = 16,
                                                    iva = iva,
                                                    partidaDescripcion = "Procesamiento, cálculo y dispersión de nómina " + (nomina.tipoNomina == 1 ? "S" : "Q") + nomina.periodo.ToString(),
                                                    estatusRegistro = true
                                                };

                                                _context.tblCom_OrdenCompraDet.Add(nuevaCompraSIGOPLANDet);
                                                _context.SaveChanges();
                                                #endregion

                                                #region Actualizar Partida Requisición
                                                string ccRequisicion = (string)registroRequisicionGlobal.cc;
                                                int numeroRequisicion = (int)registroRequisicionGlobal.numero;
                                                var registroRequisicionSIGOPLAN = _context.tblCom_Req.FirstOrDefault(x => x.estatusRegistro && x.cc == ccRequisicion && x.numero == numeroRequisicion);

                                                if (registroRequisicionSIGOPLAN != null)
                                                {
                                                    var registroRequisicionDetalleSIGOPLAN = _context.tblCom_ReqDet.FirstOrDefault(x => x.estatusRegistro && x.idReq == registroRequisicionSIGOPLAN.id);

                                                    registroRequisicionDetalleSIGOPLAN.cantOrdenada += cantidad;
                                                    _context.SaveChanges();
                                                }
                                                #endregion
                                                #endregion

                                                #region Enkontrol
                                                #region Registro General
                                                using (var cmd = new OdbcCommand(@"
                                                INSERT INTO so_orden_compra (
                                                    cc, numero, fecha, libre_abordo, tipo_oc_req, comprador, proveedor, moneda, tipo_cambio, porcent_iva, 
                                                    sub_total, iva, total, sub_tot_rec, iva_rec, total_rec, sub_tot_ajus, iva_ajus, total_ajus, st_impresa, 
                                                    estatus, comentarios, solicito, vobo, autorizo, sub_tot_canc, iva_canc, total_canc, total_fac, total_pag, 
                                                    embarquese, empleado_modifica, fecha_modifica, hora_modifica, tc_cc, anticipo, monto_anticipo, almacen, 
                                                    bit_autorecepcion, almacen_autorecepcion, empleado_autorecepcion, rentencion_antes_iva, rentencion_despues_iva, 
                                                    bienes_servicios, concepto_factura, tot_fac_ret, tot_ret_ret, usuario_autoriza, fecha_autoriza, st_autorizada, 
                                                    imprime_porcentaje, ST_OC, empleado_autoriza, vobo_informa, vobo2, vobo3, vobo4, vobo5, vobo6, cambia_vobo, tmc, 
                                                    autoriza_activos, fecha_vobo, fecha_vobo2, fecha_vobo3, bit_af, bit_arrenda, estatus_bloqueo, ruta_pdf, ruta_map) 
                                                VALUES (
                                                    ?,?,?,?,?,?,?,?,?,?, 
                                                    ?,?,?,?,?,?,?,?,?,?, 
                                                    ?,?,?,?,?,?,?,?,?,?, 
                                                    ?,?,?,?,?,?,?,?,?,?, 
                                                    ?,?,?,?,?,?,?,?,?,?, 
                                                    ?,?,?,?,?,?,?,?,?,?, 
                                                    ?,?,?,?,?,?,?,?,?,?)"))
                                                {
                                                    OdbcParameterCollection parameters = cmd.Parameters;

                                                    parameters.Add("@cc", OdbcType.Char).Value = registroRequisicionGlobal.cc;
                                                    parameters.Add("@numero", OdbcType.Numeric).Value = numeroCompraNueva;
                                                    parameters.Add("@fecha", OdbcType.Date).Value = DateTime.Now;

                                                    //Se guarda siempre con 1 porque en EnKontrol la tabla de libre abordo no contiene todos los almacenes. En SIGOPLAN se guarda con el número de almacén.
                                                    parameters.Add("@libre_abordo", OdbcType.Numeric).Value = 1;

                                                    parameters.Add("@tipo_oc_req", OdbcType.Char).Value = "1";
                                                    parameters.Add("@comprador", OdbcType.Numeric).Value = 1;
                                                    parameters.Add("@proveedor", OdbcType.Numeric).Value = proveedor;
                                                    parameters.Add("@moneda", OdbcType.Char).Value = "1";
                                                    parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = "1";
                                                    parameters.Add("@porcent_iva", OdbcType.Numeric).Value = 16;
                                                    parameters.Add("@sub_total", OdbcType.Numeric).Value = cantidad;
                                                    parameters.Add("@iva", OdbcType.Numeric).Value = iva;
                                                    parameters.Add("@total", OdbcType.Numeric).Value = cantidad + iva;
                                                    parameters.Add("@sub_tot_rec", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@iva_rec", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@total_rec", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@sub_tot_ajus", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@iva_ajus", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@total_ajus", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@st_impresa", OdbcType.Char).Value = "";
                                                    parameters.Add("@estatus", OdbcType.Char).Value = " "; //Se pone un espacio en blanco porque si se guarda un string vacío truena en Enkontrol y no se ven algunos reportes.
                                                    parameters.Add("@comentarios", OdbcType.Char).Value = "SERV. ADMIVOS.";
                                                    parameters.Add("@solicito", OdbcType.Numeric).Value = 1;
                                                    parameters.Add("@vobo", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@autorizo", OdbcType.Numeric).Value = 1;
                                                    parameters.Add("@sub_tot_canc", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@iva_canc", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@total_canc", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@total_fac", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@total_pag", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@embarquese", OdbcType.Char).Value = "";
                                                    parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = 1;
                                                    parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                                    parameters.Add("@hora_modifica", OdbcType.DateTime).Value = DateTime.Now;
                                                    parameters.Add("@tc_cc", OdbcType.Numeric).Value = 1;
                                                    parameters.Add("@anticipo", OdbcType.Char).Value = DBNull.Value;
                                                    parameters.Add("@monto_anticipo", OdbcType.Numeric).Value = DBNull.Value;
                                                    parameters.Add("@almacen", OdbcType.Numeric).Value = DBNull.Value;
                                                    parameters.Add("@bit_autorecepcion", OdbcType.Char).Value = "S";
                                                    parameters.Add("@almacen_autorecepcion", OdbcType.Numeric).Value = 999;
                                                    parameters.Add("@empleado_autorecepcion", OdbcType.Numeric).Value = 7;
                                                    parameters.Add("@rentencion_antes_iva", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@rentencion_despues_iva", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@bienes_servicios", OdbcType.Char).Value = "S";
                                                    parameters.Add("@concepto_factura", OdbcType.Char).Value = DBNull.Value;
                                                    parameters.Add("@tot_fac_ret", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@tot_ret_ret", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@usuario_autoriza", OdbcType.Numeric).Value = 1;
                                                    parameters.Add("@fecha_autoriza", OdbcType.Date).Value = DateTime.Now.Date;
                                                    parameters.Add("@st_autorizada", OdbcType.Char).Value = DBNull.Value;
                                                    parameters.Add("@imprime_porcentaje", OdbcType.Char).Value = "N";
                                                    parameters.Add("@ST_OC", OdbcType.Char).Value = "A";
                                                    parameters.Add("@empleado_autoriza", OdbcType.Numeric).Value = 1;
                                                    parameters.Add("@vobo_informa", OdbcType.Char).Value = "N";
                                                    parameters.Add("@vobo2", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@vobo3", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@vobo4", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@vobo5", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@vobo6", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@cambia_vobo", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@tmc", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@autoriza_activos", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@fecha_vobo", OdbcType.Date).Value = DBNull.Value;
                                                    parameters.Add("@fecha_vobo2", OdbcType.Date).Value = DBNull.Value;
                                                    parameters.Add("@fecha_vobo3", OdbcType.Date).Value = DBNull.Value;
                                                    parameters.Add("@bit_af", OdbcType.Char).Value = "N";
                                                    parameters.Add("@bit_arrenda", OdbcType.Char).Value = "N";
                                                    parameters.Add("@estatus_bloqueo", OdbcType.Char).Value = DBNull.Value;
                                                    parameters.Add("@ruta_pdf", OdbcType.VarChar).Value = DBNull.Value;
                                                    parameters.Add("@ruta_map", OdbcType.VarChar).Value = DBNull.Value;

                                                    cmd.Connection = transaccionEK.Connection;
                                                    cmd.Transaction = transaccionEK;
                                                    cmd.ExecuteNonQuery();
                                                }
                                                #endregion

                                                #region Registro Detalle
                                                using (var cmd = new OdbcCommand(@"
                                                INSERT INTO so_orden_compra_det (
                                                    cc, numero, partida, insumo, fecha_entrega, cantidad, precio, importe, ajuste_cant, ajuste_imp, num_requisicion, part_requisicion, 
                                                    cant_recibida, imp_recibido, fecha_recibido, cant_canc, imp_canc, acum_ant, max_orig, max_ppto, area, cuenta, porcent_iva, iva) 
                                                VALUES (
                                                    ?,?,?,?,?,?,?,?,?,?, 
                                                    ?,?,?,?,?,?,?,?,?,?, 
                                                    ?,?,?,?)"))
                                                {
                                                    OdbcParameterCollection parameters = cmd.Parameters;

                                                    parameters.Add("@cc", OdbcType.Char).Value = registroRequisicionGlobal.cc;
                                                    parameters.Add("@numero", OdbcType.Numeric).Value = numeroCompraNueva;
                                                    parameters.Add("@partida", OdbcType.Numeric).Value = 1;
                                                    parameters.Add("@insumo", OdbcType.Numeric).Value = insumo;
                                                    parameters.Add("@fecha_entrega", OdbcType.Date).Value = DateTime.Now.AddDays(1).Date;
                                                    parameters.Add("@cantidad", OdbcType.Numeric).Value = cantidad;
                                                    parameters.Add("@precio", OdbcType.Numeric).Value = 1;
                                                    parameters.Add("@importe", OdbcType.Numeric).Value = cantidad;
                                                    parameters.Add("@ajuste_cant", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@ajuste_imp", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@num_requisicion", OdbcType.Numeric).Value = (int)registroRequisicionGlobal.numero;
                                                    parameters.Add("@part_requisicion", OdbcType.Numeric).Value = 1;
                                                    parameters.Add("@cant_recibida", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@imp_recibido", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@fecha_recibido", OdbcType.Date).Value = (object)DBNull.Value;
                                                    parameters.Add("@cant_canc", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@imp_canc", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@acum_ant", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@max_orig", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@max_ppto", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@area", OdbcType.Numeric).Value = area;
                                                    parameters.Add("@cuenta", OdbcType.Numeric).Value = cuenta;
                                                    parameters.Add("@porcent_iva", OdbcType.Numeric).Value = DBNull.Value;
                                                    parameters.Add("@iva", OdbcType.Numeric).Value = DBNull.Value;

                                                    cmd.Connection = transaccionEK.Connection;
                                                    cmd.Transaction = transaccionEK;
                                                    cmd.ExecuteNonQuery();
                                                }
                                                #endregion

                                                #region Registro Linea Comentario
                                                using (var cmd = new OdbcCommand(@"INSERT INTO so_orden_det_linea (cc, numero, partida, descripcion) VALUES (?,?,?,?)"))
                                                {
                                                    OdbcParameterCollection parameters = cmd.Parameters;

                                                    parameters.Add("@cc", OdbcType.Char).Value = registroRequisicionGlobal.cc;
                                                    parameters.Add("@numero", OdbcType.Numeric).Value = numeroCompraNueva;
                                                    parameters.Add("@partida", OdbcType.Numeric).Value = 1;
                                                    parameters.Add("@descripcion", OdbcType.VarChar).Value = "Procesamiento, cálculo y dispersión de nómina Periodo " + (nomina.tipoNomina == 1 ? "Semana " : "Quincena ") + nomina.periodo.ToString();

                                                    cmd.Connection = transaccionEK.Connection;
                                                    cmd.Transaction = transaccionEK;
                                                    cmd.ExecuteNonQuery();
                                                }
                                                #endregion

                                                #region Actualizar Explosión
                                                var registroExplosionEK = _contextEnkontrol.Select<dynamic>(conexionEnkontrol, new OdbcConsultaDTO
                                                {
                                                    consulta = string.Format(@"
                                                SELECT * FROM so_explos_mat WHERE cc = '{0}' AND insumo = {1} AND year_explos = {2} 
                                            ", registroRequisicionGlobal.cc, insumo, DateTime.Now.Year)
                                                });

                                                if (registroExplosionEK.Count() == 0)
                                                {
                                                    #region Insert Registro Explosión
                                                    using (var cmd = new OdbcCommand(@"
                                                    INSERT INTO so_explos_mat (
                                                        cc, insumo, cantidad, precio, aditiva_cant, aditiva_imp, deduc_cant, deduc_imp, cant_requerida, 
                                                        comp_cant, comp_imp, ajuste_cant, ajuste_imp, traspaso_cant, traspaso_imp, cant_recibida, imp_recibido, 
                                                        aditiva_cant_fecha, deduc_cant_fecha, aditiva_precio_fecha, deduc_precio_fecha, aditiva_precio, deductiva_precio, 
                                                        traspaso_cant_entrada, traspaso_imp_entrada, importe, year_explos, periodo, bit_auto_presu, cantidad_aditiva_sun, 
                                                        cantidad_deductiva_sun, cantidad_extra_sun) 
                                                    VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"))
                                                    {
                                                        OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                        parametersExplosion.Add("@cc", OdbcType.Char).Value = registroRequisicionGlobal.cc;
                                                        parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = insumo;
                                                        parametersExplosion.Add("@cantidad", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@precio", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@aditiva_cant", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@aditiva_imp", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@deduc_cant", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@deduc_imp", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@cant_requerida", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@comp_cant", OdbcType.Numeric).Value = cantidad;
                                                        parametersExplosion.Add("@comp_imp", OdbcType.Numeric).Value = cantidad;
                                                        parametersExplosion.Add("@ajuste_cant", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@ajuste_imp", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@traspaso_cant", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@traspaso_imp", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@cant_recibida", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@imp_recibido", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@aditiva_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                                        parametersExplosion.Add("@deduc_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                                        parametersExplosion.Add("@aditiva_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                                        parametersExplosion.Add("@deduc_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                                        parametersExplosion.Add("@aditiva_precio", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@deductiva_precio", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@traspaso_cant_entrada", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@traspaso_imp_entrada", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@importe", OdbcType.Numeric).Value = DBNull.Value;
                                                        parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;
                                                        parametersExplosion.Add("@periodo", OdbcType.Char).Value = DBNull.Value;
                                                        parametersExplosion.Add("@bit_auto_presu", OdbcType.Char).Value = "N";
                                                        parametersExplosion.Add("@cantidad_aditiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                                        parametersExplosion.Add("@cantidad_deductiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                                        parametersExplosion.Add("@cantidad_extra_sun", OdbcType.Numeric).Value = DBNull.Value;

                                                        cmd.Connection = transaccionEK.Connection;
                                                        cmd.Transaction = transaccionEK;
                                                        cmd.ExecuteNonQuery();
                                                    }
                                                    #endregion
                                                }
                                                else
                                                {
                                                    #region Update Registro Explosión
                                                    var nuevaCantidadComprada = Convert.ToDecimal(registroExplosionEK[0].comp_cant, CultureInfo.InvariantCulture) + cantidad;
                                                    var nuevoImporteComprado = Convert.ToDecimal(registroExplosionEK[0].comp_imp, CultureInfo.InvariantCulture) + cantidad;

                                                    using (var cmd = new OdbcCommand(@"UPDATE so_explos_mat SET comp_cant = ?, comp_imp = ? WHERE cc = ? AND insumo = ? AND year_explos = ?"))
                                                    {
                                                        OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                        parametersExplosion.Add("@comp_cant", OdbcType.Numeric).Value = nuevaCantidadComprada;
                                                        parametersExplosion.Add("@comp_imp", OdbcType.Numeric).Value = nuevoImporteComprado;

                                                        parametersExplosion.Add("@cc", OdbcType.Char).Value = registroRequisicionGlobal.cc;
                                                        parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = insumo;
                                                        parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;

                                                        cmd.Connection = transaccionEK.Connection;
                                                        cmd.Transaction = transaccionEK;
                                                        cmd.ExecuteNonQuery();
                                                    }
                                                    #endregion
                                                }
                                                #endregion

                                                #region Actualizar Partida Requisición
                                                using (var cmd = new OdbcCommand(@"UPDATE so_requisicion_det SET cant_ordenada = ? WHERE cc = ? AND numero = ? AND partida = ? AND insumo = ?"))
                                                {
                                                    OdbcParameterCollection parameters = cmd.Parameters;

                                                    parameters.Add("@cant_ordenada", OdbcType.Numeric).Value =
                                                        Convert.ToDecimal(registroRequisicionDetalleGlobal.cant_ordenada, CultureInfo.InvariantCulture) + cantidad;

                                                    parameters.Add("@cc", OdbcType.Char).Value = registroRequisicionGlobal.cc;
                                                    parameters.Add("@numero", OdbcType.Numeric).Value = (int)registroRequisicionGlobal.numero;
                                                    parameters.Add("@partida", OdbcType.Numeric).Value = 1;
                                                    parameters.Add("@insumo", OdbcType.Numeric).Value = insumo;

                                                    cmd.Connection = transaccionEK.Connection;
                                                    cmd.Transaction = transaccionEK;
                                                    cmd.ExecuteNonQuery();
                                                }
                                                #endregion
                                                #endregion

                                                listaComprasGeneradas.Add(string.Format(@"[T&L {0}-{1}]", registroRequisicionGlobal.cc, numeroCompraNueva));

                                                var ccDesc = _context.tblC_Nom_CatalogoCC.FirstOrDefault(x => x.estatus && x.cc == nomina.CC).ccDescripcion;
                                                _context.tblC_Nom_Compra_Nomina.Add(new tblC_Nom_Compra_Nomina
                                                {
                                                    nomina_id = nomina.id,
                                                    year = nomina.year,
                                                    periodo = nomina.periodo,
                                                    tipoNomina = nomina.tipoNomina,
                                                    cc = nomina.CC,
                                                    ccDesc = ccDesc,
                                                    numeroCompra = numeroCompraNueva,
                                                    tipoRequisicion = "T&L",
                                                    registroActivo = true
                                                });
                                                _context.SaveChanges();
                                            }
                                        }
                                        #endregion

                                        if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.GCPLAN)
                                        {
                                            #region Compra GCPLAN -> CONSTRUPLAN
                                            {
                                                conexionEnkontrol = EnkontrolEnum.CplanProd;
                                                requisicionGlobal = _context.tblC_Nom_RequisicionGlobal.FirstOrDefault(x => x.registroActivo && x.cc == nomina.CC && x.tipoRequisicion == TipoRequisicionGlobalEnum.INTERCOMPANIA);

                                                var proveedor = 6689;

                                                numeroCompraNueva = 1;

                                                if (ultimaCompraConstruplan.Count() > 0)
                                                {
                                                    numeroCompraNueva = ultimaCompraConstruplan[0].numero + 1;
                                                }

                                                var registroRequisicionDetalleGlobal = _contextEnkontrol.Select<dynamic>(conexionEnkontrol, new OdbcConsultaDTO
                                                {
                                                    consulta = string.Format(@"
                                                    SELECT * FROM so_requisicion_det WHERE cc = '{0}' AND numero = {1} 
                                                ", requisicionGlobal.cc, requisicionGlobal.numero)
                                                }).FirstOrDefault();
                                                cantidadPendiente =
                                                    Convert.ToDecimal(registroRequisicionDetalleGlobal.cantidad, CultureInfo.InvariantCulture) - Convert.ToDecimal(registroRequisicionDetalleGlobal.cant_ordenada, CultureInfo.InvariantCulture);

                                                //Cálculo CONSTRUPLAN-GCPLAN = (totalPercepciones * 0.01) + [Cálculo T&L] + totalPercepciones
                                                var cantidad = (listaRaya.Sum(x => x.totalPercepciones) * 0.01m) + (listaRaya.Sum(x => x.netoPagar - x.despensaImporte + x.pensionAlimenticiaImporte) * 0.03m) + listaRaya.Sum(x => x.totalPercepciones);

                                                if (cantidad > 0)
                                                {
                                                    var iva = cantidad * 0.16m;

                                                    if (cantidad > cantidadPendiente)
                                                    {
                                                        throw new Exception("La cantidad de la compra sobrepasa la cantidad pendiente de ordenar para la requisición \"" + (string)registroRequisicionGlobal.cc + "-" + ((int)registroRequisicionGlobal.numero).ToString() + "\".");
                                                    }

                                                    switch (nomina.clasificacionCcId)
                                                    {
                                                        case 1: //Administración Central
                                                            insumo = 7070005;
                                                            break;
                                                        case 2: //Foránea
                                                            insumo = 6070005;
                                                            break;
                                                    }

                                                    using (var _contextConstruplan = new MainContext(EmpresaEnum.Construplan))
                                                    {
                                                        using (var transaccionConstruplanSP = _contextConstruplan.Database.BeginTransaction())
                                                        {
                                                            using (var conexionConstruplanEK = new Conexion().ConnectConstruplanConstruplan())
                                                            {
                                                                using (var transaccionConstruplanEK = conexionConstruplanEK.BeginTransaction())
                                                                {
                                                                    try
                                                                    {
                                                                        #region SIGOPLAN
                                                                        #region Registro General
                                                                        var nuevaCompraSIGOPLAN = new tblCom_OrdenCompra
                                                                        {
                                                                            cc = registroRequisicionGlobal.cc,
                                                                            numero = numeroCompraNueva,
                                                                            fecha = DateTime.Now,
                                                                            idLibreAbordo = 999,
                                                                            tipo_oc_req = "1", //Esto podría no ser fijo.
                                                                            compradorSIGOPLAN = 13, //Admin
                                                                            compradorEnkontrol = 1, //Admin
                                                                            compradorStarsoft = 0,
                                                                            moneda = "1",
                                                                            tipo_cambio = 1,
                                                                            porcent_iva = 16m,
                                                                            sub_total = cantidad,
                                                                            iva = iva,
                                                                            total = cantidad + iva,
                                                                            sub_total_rec = 0m,
                                                                            iva_rec = 0m,
                                                                            total_rec = 0m,
                                                                            estatus = "",
                                                                            comentarios = "SERV. ADMIVOS.",
                                                                            bienes_servicios = "S",
                                                                            CFDI = "G03 (Gastos en general)",
                                                                            tiempoEntregaDias = 1,
                                                                            tiempoEntregaComentarios = (nomina.tipoNomina == 1 ? "S" : "Q") + nomina.periodo.ToString(),
                                                                            anticipo = false,
                                                                            totalAnticipo = cantidad + iva,
                                                                            estatusRegistro = true,
                                                                            colocada = false,
                                                                            colocadaFecha = null,
                                                                            correoProveedor = "",
                                                                            proveedor = proveedor,
                                                                            st_impresa = "",
                                                                            autorizo = 1,
                                                                            usuario_autoriza = 1,
                                                                            fecha_autoriza = DateTime.Now,
                                                                            ST_OC = "A",
                                                                            empleado_autoriza = 1,
                                                                            empleadoUltimaAccion = 1,
                                                                            PERU_proveedor = "",
                                                                            PERU_cuentaCorriente = "",
                                                                            PERU_formaPago = "",
                                                                            PERU_tipoCambio = "",
                                                                            PERU_tipoCompra = "",
                                                                            fechaUltimaAccion = DateTime.Now,
                                                                            tipoUltimaAccion = TipoUltimaAccionEnum.Autorizacion,
                                                                            vobo = 0,
                                                                            vobo2 = 0
                                                                        };

                                                                        _contextConstruplan.tblCom_OrdenCompra.Add(nuevaCompraSIGOPLAN);
                                                                        _contextConstruplan.SaveChanges();
                                                                        #endregion

                                                                        #region Registro Detalle
                                                                        var nuevaCompraSIGOPLANDet = new tblCom_OrdenCompraDet
                                                                        {
                                                                            idOrdenCompra = nuevaCompraSIGOPLAN.id,
                                                                            cc = nuevaCompraSIGOPLAN.cc,
                                                                            numero = nuevaCompraSIGOPLAN.numero,
                                                                            partida = 1,
                                                                            insumo = insumo,
                                                                            fecha_entrega = DateTime.Now.AddDays(1),
                                                                            cantidad = cantidad,
                                                                            precio = 1,
                                                                            importe = cantidad,
                                                                            ajuste_cant = 0,
                                                                            ajuste_imp = 0,
                                                                            num_requisicion = (int)registroRequisicionGlobal.numero,
                                                                            part_requisicion = 1,
                                                                            cant_recibida = 0,
                                                                            imp_recibido = 0,
                                                                            fecha_recibido = null,
                                                                            cant_canc = 0,
                                                                            imp_canc = 0,
                                                                            acum_ant = 0,
                                                                            max_orig = 0,
                                                                            max_ppto = 0,
                                                                            area = area,
                                                                            cuenta = cuenta,
                                                                            porcent_iva = 16,
                                                                            iva = iva,
                                                                            partidaDescripcion = "Servicios administrativos conforme a contrato " + (nomina.tipoNomina == 1 ? "S" : "Q") + nomina.periodo.ToString(),
                                                                            estatusRegistro = true
                                                                        };

                                                                        _contextConstruplan.tblCom_OrdenCompraDet.Add(nuevaCompraSIGOPLANDet);
                                                                        _contextConstruplan.SaveChanges();
                                                                        #endregion

                                                                        #region Actualizar Partida Requisición
                                                                        string ccRequisicion = (string)registroRequisicionGlobal.cc;
                                                                        int numeroRequisicion = (int)registroRequisicionGlobal.numero;
                                                                        var registroRequisicionSIGOPLAN = _contextConstruplan.tblCom_Req.FirstOrDefault(x => x.estatusRegistro && x.cc == ccRequisicion && x.numero == numeroRequisicion);

                                                                        if (registroRequisicionSIGOPLAN != null)
                                                                        {
                                                                            var registroRequisicionDetalleSIGOPLAN = _contextConstruplan.tblCom_ReqDet.FirstOrDefault(x => x.estatusRegistro && x.idReq == registroRequisicionSIGOPLAN.id);

                                                                            registroRequisicionDetalleSIGOPLAN.cantOrdenada += cantidad;
                                                                            _contextConstruplan.SaveChanges();
                                                                        }
                                                                        #endregion
                                                                        #endregion

                                                                        #region Enkontrol
                                                                        #region Registro General
                                                                        using (var cmd = new OdbcCommand(@"
                                                                        INSERT INTO so_orden_compra (
                                                                            cc, numero, fecha, libre_abordo, tipo_oc_req, comprador, proveedor, moneda, tipo_cambio, porcent_iva, 
                                                                            sub_total, iva, total, sub_tot_rec, iva_rec, total_rec, sub_tot_ajus, iva_ajus, total_ajus, st_impresa, 
                                                                            estatus, comentarios, solicito, vobo, autorizo, sub_tot_canc, iva_canc, total_canc, total_fac, total_pag, 
                                                                            embarquese, empleado_modifica, fecha_modifica, hora_modifica, tc_cc, anticipo, monto_anticipo, almacen, 
                                                                            bit_autorecepcion, almacen_autorecepcion, empleado_autorecepcion, rentencion_antes_iva, rentencion_despues_iva, 
                                                                            bienes_servicios, concepto_factura, tot_fac_ret, tot_ret_ret, usuario_autoriza, fecha_autoriza, st_autorizada, 
                                                                            imprime_porcentaje, ST_OC, empleado_autoriza, vobo_informa, vobo2, vobo3, vobo4, vobo5, vobo6, cambia_vobo, tmc, 
                                                                            autoriza_activos, fecha_vobo, fecha_vobo2, fecha_vobo3, bit_af, bit_arrenda, estatus_bloqueo, ruta_pdf, ruta_map) 
                                                                        VALUES (
                                                                            ?,?,?,?,?,?,?,?,?,?, 
                                                                            ?,?,?,?,?,?,?,?,?,?, 
                                                                            ?,?,?,?,?,?,?,?,?,?, 
                                                                            ?,?,?,?,?,?,?,?,?,?, 
                                                                            ?,?,?,?,?,?,?,?,?,?, 
                                                                            ?,?,?,?,?,?,?,?,?,?, 
                                                                            ?,?,?,?,?,?,?,?,?,?)"))
                                                                        {
                                                                            OdbcParameterCollection parameters = cmd.Parameters;

                                                                            parameters.Add("@cc", OdbcType.Char).Value = registroRequisicionGlobal.cc;
                                                                            parameters.Add("@numero", OdbcType.Numeric).Value = numeroCompraNueva;
                                                                            parameters.Add("@fecha", OdbcType.Date).Value = DateTime.Now;

                                                                            //Se guarda siempre con 1 porque en EnKontrol la tabla de libre abordo no contiene todos los almacenes. En SIGOPLAN se guarda con el número de almacén.
                                                                            parameters.Add("@libre_abordo", OdbcType.Numeric).Value = 1;

                                                                            parameters.Add("@tipo_oc_req", OdbcType.Char).Value = "1";
                                                                            parameters.Add("@comprador", OdbcType.Numeric).Value = 1;
                                                                            parameters.Add("@proveedor", OdbcType.Numeric).Value = proveedor;
                                                                            parameters.Add("@moneda", OdbcType.Char).Value = "1";
                                                                            parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = "1";
                                                                            parameters.Add("@porcent_iva", OdbcType.Numeric).Value = 16;
                                                                            parameters.Add("@sub_total", OdbcType.Numeric).Value = cantidad;
                                                                            parameters.Add("@iva", OdbcType.Numeric).Value = iva;
                                                                            parameters.Add("@total", OdbcType.Numeric).Value = cantidad + iva;
                                                                            parameters.Add("@sub_tot_rec", OdbcType.Numeric).Value = 0;
                                                                            parameters.Add("@iva_rec", OdbcType.Numeric).Value = 0;
                                                                            parameters.Add("@total_rec", OdbcType.Numeric).Value = 0;
                                                                            parameters.Add("@sub_tot_ajus", OdbcType.Numeric).Value = 0;
                                                                            parameters.Add("@iva_ajus", OdbcType.Numeric).Value = 0;
                                                                            parameters.Add("@total_ajus", OdbcType.Numeric).Value = 0;
                                                                            parameters.Add("@st_impresa", OdbcType.Char).Value = "";
                                                                            parameters.Add("@estatus", OdbcType.Char).Value = " "; //Se pone un espacio en blanco porque si se guarda un string vacío truena en Enkontrol y no se ven algunos reportes.
                                                                            parameters.Add("@comentarios", OdbcType.Char).Value = "SERV. ADMIVOS.";
                                                                            parameters.Add("@solicito", OdbcType.Numeric).Value = 1;
                                                                            parameters.Add("@vobo", OdbcType.Numeric).Value = 0;
                                                                            parameters.Add("@autorizo", OdbcType.Numeric).Value = 1;
                                                                            parameters.Add("@sub_tot_canc", OdbcType.Numeric).Value = 0;
                                                                            parameters.Add("@iva_canc", OdbcType.Numeric).Value = 0;
                                                                            parameters.Add("@total_canc", OdbcType.Numeric).Value = 0;
                                                                            parameters.Add("@total_fac", OdbcType.Numeric).Value = 0;
                                                                            parameters.Add("@total_pag", OdbcType.Numeric).Value = 0;
                                                                            parameters.Add("@embarquese", OdbcType.Char).Value = "";
                                                                            parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = 1;
                                                                            parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                                                            parameters.Add("@hora_modifica", OdbcType.DateTime).Value = DateTime.Now;
                                                                            parameters.Add("@tc_cc", OdbcType.Numeric).Value = 1;
                                                                            parameters.Add("@anticipo", OdbcType.Char).Value = DBNull.Value;
                                                                            parameters.Add("@monto_anticipo", OdbcType.Numeric).Value = DBNull.Value;
                                                                            parameters.Add("@almacen", OdbcType.Numeric).Value = DBNull.Value;
                                                                            parameters.Add("@bit_autorecepcion", OdbcType.Char).Value = "S";
                                                                            parameters.Add("@almacen_autorecepcion", OdbcType.Numeric).Value = 999;
                                                                            parameters.Add("@empleado_autorecepcion", OdbcType.Numeric).Value = 7;
                                                                            parameters.Add("@rentencion_antes_iva", OdbcType.Numeric).Value = 0;
                                                                            parameters.Add("@rentencion_despues_iva", OdbcType.Numeric).Value = 0;
                                                                            parameters.Add("@bienes_servicios", OdbcType.Char).Value = "S";
                                                                            parameters.Add("@concepto_factura", OdbcType.Char).Value = DBNull.Value;
                                                                            parameters.Add("@tot_fac_ret", OdbcType.Numeric).Value = 0;
                                                                            parameters.Add("@tot_ret_ret", OdbcType.Numeric).Value = 0;
                                                                            parameters.Add("@usuario_autoriza", OdbcType.Numeric).Value = 1;
                                                                            parameters.Add("@fecha_autoriza", OdbcType.Date).Value = DateTime.Now.Date;
                                                                            parameters.Add("@st_autorizada", OdbcType.Char).Value = DBNull.Value;
                                                                            parameters.Add("@imprime_porcentaje", OdbcType.Char).Value = "N";
                                                                            parameters.Add("@ST_OC", OdbcType.Char).Value = "A";
                                                                            parameters.Add("@empleado_autoriza", OdbcType.Numeric).Value = 1;
                                                                            parameters.Add("@vobo_informa", OdbcType.Char).Value = "N";
                                                                            parameters.Add("@vobo2", OdbcType.Numeric).Value = 0;
                                                                            parameters.Add("@vobo3", OdbcType.Numeric).Value = 0;
                                                                            parameters.Add("@vobo4", OdbcType.Numeric).Value = 0;
                                                                            parameters.Add("@vobo5", OdbcType.Numeric).Value = 0;
                                                                            parameters.Add("@vobo6", OdbcType.Numeric).Value = 0;
                                                                            parameters.Add("@cambia_vobo", OdbcType.Numeric).Value = 0;
                                                                            parameters.Add("@tmc", OdbcType.Numeric).Value = 0;
                                                                            parameters.Add("@autoriza_activos", OdbcType.Numeric).Value = 0;
                                                                            parameters.Add("@fecha_vobo", OdbcType.Date).Value = DBNull.Value;
                                                                            parameters.Add("@fecha_vobo2", OdbcType.Date).Value = DBNull.Value;
                                                                            parameters.Add("@fecha_vobo3", OdbcType.Date).Value = DBNull.Value;
                                                                            parameters.Add("@bit_af", OdbcType.Char).Value = "N";
                                                                            parameters.Add("@bit_arrenda", OdbcType.Char).Value = "N";
                                                                            parameters.Add("@estatus_bloqueo", OdbcType.Char).Value = DBNull.Value;
                                                                            parameters.Add("@ruta_pdf", OdbcType.VarChar).Value = DBNull.Value;
                                                                            parameters.Add("@ruta_map", OdbcType.VarChar).Value = DBNull.Value;

                                                                            cmd.Connection = transaccionConstruplanEK.Connection;
                                                                            cmd.Transaction = transaccionConstruplanEK;
                                                                            cmd.ExecuteNonQuery();
                                                                        }
                                                                        #endregion

                                                                        #region Registro Detalle
                                                                        using (var cmd = new OdbcCommand(@"
                                                                        INSERT INTO so_orden_compra_det (
                                                                            cc, numero, partida, insumo, fecha_entrega, cantidad, precio, importe, ajuste_cant, ajuste_imp, num_requisicion, part_requisicion, 
                                                                            cant_recibida, imp_recibido, fecha_recibido, cant_canc, imp_canc, acum_ant, max_orig, max_ppto, area, cuenta, porcent_iva, iva) 
                                                                        VALUES (
                                                                            ?,?,?,?,?,?,?,?,?,?, 
                                                                            ?,?,?,?,?,?,?,?,?,?, 
                                                                            ?,?,?,?)"))
                                                                        {
                                                                            OdbcParameterCollection parameters = cmd.Parameters;

                                                                            parameters.Add("@cc", OdbcType.Char).Value = registroRequisicionGlobal.cc;
                                                                            parameters.Add("@numero", OdbcType.Numeric).Value = numeroCompraNueva;
                                                                            parameters.Add("@partida", OdbcType.Numeric).Value = 1;
                                                                            parameters.Add("@insumo", OdbcType.Numeric).Value = insumo;
                                                                            parameters.Add("@fecha_entrega", OdbcType.Date).Value = DateTime.Now.AddDays(1).Date;
                                                                            parameters.Add("@cantidad", OdbcType.Numeric).Value = cantidad;
                                                                            parameters.Add("@precio", OdbcType.Numeric).Value = 1;
                                                                            parameters.Add("@importe", OdbcType.Numeric).Value = cantidad;
                                                                            parameters.Add("@ajuste_cant", OdbcType.Numeric).Value = 0;
                                                                            parameters.Add("@ajuste_imp", OdbcType.Numeric).Value = 0;
                                                                            parameters.Add("@num_requisicion", OdbcType.Numeric).Value = (int)registroRequisicionGlobal.numero;
                                                                            parameters.Add("@part_requisicion", OdbcType.Numeric).Value = 1;
                                                                            parameters.Add("@cant_recibida", OdbcType.Numeric).Value = 0;
                                                                            parameters.Add("@imp_recibido", OdbcType.Numeric).Value = 0;
                                                                            parameters.Add("@fecha_recibido", OdbcType.Date).Value = (object)DBNull.Value;
                                                                            parameters.Add("@cant_canc", OdbcType.Numeric).Value = 0;
                                                                            parameters.Add("@imp_canc", OdbcType.Numeric).Value = 0;
                                                                            parameters.Add("@acum_ant", OdbcType.Numeric).Value = 0;
                                                                            parameters.Add("@max_orig", OdbcType.Numeric).Value = 0;
                                                                            parameters.Add("@max_ppto", OdbcType.Numeric).Value = 0;
                                                                            parameters.Add("@area", OdbcType.Numeric).Value = area;
                                                                            parameters.Add("@cuenta", OdbcType.Numeric).Value = cuenta;
                                                                            parameters.Add("@porcent_iva", OdbcType.Numeric).Value = DBNull.Value;
                                                                            parameters.Add("@iva", OdbcType.Numeric).Value = DBNull.Value;

                                                                            cmd.Connection = transaccionConstruplanEK.Connection;
                                                                            cmd.Transaction = transaccionConstruplanEK;
                                                                            cmd.ExecuteNonQuery();
                                                                        }
                                                                        #endregion

                                                                        #region Registro Linea Comentario
                                                                        using (var cmd = new OdbcCommand(@"INSERT INTO so_orden_det_linea (cc, numero, partida, descripcion) VALUES (?,?,?,?)"))
                                                                        {
                                                                            OdbcParameterCollection parameters = cmd.Parameters;

                                                                            parameters.Add("@cc", OdbcType.Char).Value = registroRequisicionGlobal.cc;
                                                                            parameters.Add("@numero", OdbcType.Numeric).Value = numeroCompraNueva;
                                                                            parameters.Add("@partida", OdbcType.Numeric).Value = 1;
                                                                            parameters.Add("@descripcion", OdbcType.VarChar).Value = "Servicios Administrativos conforme a contrato Periodo " + (nomina.tipoNomina == 1 ? "Semana " : "Quincena ") + nomina.periodo.ToString();

                                                                            cmd.Connection = transaccionConstruplanEK.Connection;
                                                                            cmd.Transaction = transaccionConstruplanEK;
                                                                            cmd.ExecuteNonQuery();
                                                                        }
                                                                        #endregion

                                                                        #region Actualizar Explosión
                                                                        var registroExplosionEK = _contextEnkontrol.Select<dynamic>(conexionEnkontrol, new OdbcConsultaDTO
                                                                        {
                                                                            consulta = string.Format(@"
                                                                        SELECT * FROM so_explos_mat WHERE cc = '{0}' AND insumo = {1} AND year_explos = {2} 
                                                                    ", registroRequisicionGlobal.cc, insumo, DateTime.Now.Year)
                                                                        });

                                                                        if (registroExplosionEK.Count() == 0)
                                                                        {
                                                                            #region Insert Registro Explosión
                                                                            using (var cmd = new OdbcCommand(@"
                                                                            INSERT INTO so_explos_mat (
                                                                                cc, insumo, cantidad, precio, aditiva_cant, aditiva_imp, deduc_cant, deduc_imp, cant_requerida, 
                                                                                comp_cant, comp_imp, ajuste_cant, ajuste_imp, traspaso_cant, traspaso_imp, cant_recibida, imp_recibido, 
                                                                                aditiva_cant_fecha, deduc_cant_fecha, aditiva_precio_fecha, deduc_precio_fecha, aditiva_precio, deductiva_precio, 
                                                                                traspaso_cant_entrada, traspaso_imp_entrada, importe, year_explos, periodo, bit_auto_presu, cantidad_aditiva_sun, 
                                                                                cantidad_deductiva_sun, cantidad_extra_sun) 
                                                                            VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"))
                                                                            {
                                                                                OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                                                parametersExplosion.Add("@cc", OdbcType.Char).Value = registroRequisicionGlobal.cc;
                                                                                parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = insumo;
                                                                                parametersExplosion.Add("@cantidad", OdbcType.Numeric).Value = 0;
                                                                                parametersExplosion.Add("@precio", OdbcType.Numeric).Value = 0;
                                                                                parametersExplosion.Add("@aditiva_cant", OdbcType.Numeric).Value = 0;
                                                                                parametersExplosion.Add("@aditiva_imp", OdbcType.Numeric).Value = 0;
                                                                                parametersExplosion.Add("@deduc_cant", OdbcType.Numeric).Value = 0;
                                                                                parametersExplosion.Add("@deduc_imp", OdbcType.Numeric).Value = 0;
                                                                                parametersExplosion.Add("@cant_requerida", OdbcType.Numeric).Value = 0;
                                                                                parametersExplosion.Add("@comp_cant", OdbcType.Numeric).Value = cantidad;
                                                                                parametersExplosion.Add("@comp_imp", OdbcType.Numeric).Value = cantidad;
                                                                                parametersExplosion.Add("@ajuste_cant", OdbcType.Numeric).Value = 0;
                                                                                parametersExplosion.Add("@ajuste_imp", OdbcType.Numeric).Value = 0;
                                                                                parametersExplosion.Add("@traspaso_cant", OdbcType.Numeric).Value = 0;
                                                                                parametersExplosion.Add("@traspaso_imp", OdbcType.Numeric).Value = 0;
                                                                                parametersExplosion.Add("@cant_recibida", OdbcType.Numeric).Value = 0;
                                                                                parametersExplosion.Add("@imp_recibido", OdbcType.Numeric).Value = 0;
                                                                                parametersExplosion.Add("@aditiva_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                                                                parametersExplosion.Add("@deduc_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                                                                parametersExplosion.Add("@aditiva_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                                                                parametersExplosion.Add("@deduc_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                                                                parametersExplosion.Add("@aditiva_precio", OdbcType.Numeric).Value = 0;
                                                                                parametersExplosion.Add("@deductiva_precio", OdbcType.Numeric).Value = 0;
                                                                                parametersExplosion.Add("@traspaso_cant_entrada", OdbcType.Numeric).Value = 0;
                                                                                parametersExplosion.Add("@traspaso_imp_entrada", OdbcType.Numeric).Value = 0;
                                                                                parametersExplosion.Add("@importe", OdbcType.Numeric).Value = DBNull.Value;
                                                                                parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;
                                                                                parametersExplosion.Add("@periodo", OdbcType.Char).Value = DBNull.Value;
                                                                                parametersExplosion.Add("@bit_auto_presu", OdbcType.Char).Value = "N";
                                                                                parametersExplosion.Add("@cantidad_aditiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                                                                parametersExplosion.Add("@cantidad_deductiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                                                                parametersExplosion.Add("@cantidad_extra_sun", OdbcType.Numeric).Value = DBNull.Value;

                                                                                cmd.Connection = transaccionConstruplanEK.Connection;
                                                                                cmd.Transaction = transaccionConstruplanEK;
                                                                                cmd.ExecuteNonQuery();
                                                                            }
                                                                            #endregion
                                                                        }
                                                                        else
                                                                        {
                                                                            #region Update Registro Explosión
                                                                            var nuevaCantidadComprada = Convert.ToDecimal(registroExplosionEK[0].comp_cant, CultureInfo.InvariantCulture) + cantidad;
                                                                            var nuevoImporteComprado = Convert.ToDecimal(registroExplosionEK[0].comp_imp, CultureInfo.InvariantCulture) + cantidad;

                                                                            using (var cmd = new OdbcCommand(@"UPDATE so_explos_mat SET comp_cant = ?, comp_imp = ? WHERE cc = ? AND insumo = ? AND year_explos = ?"))
                                                                            {
                                                                                OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                                                parametersExplosion.Add("@comp_cant", OdbcType.Numeric).Value = nuevaCantidadComprada;
                                                                                parametersExplosion.Add("@comp_imp", OdbcType.Numeric).Value = nuevoImporteComprado;

                                                                                parametersExplosion.Add("@cc", OdbcType.Char).Value = registroRequisicionGlobal.cc;
                                                                                parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = insumo;
                                                                                parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;

                                                                                cmd.Connection = transaccionConstruplanEK.Connection;
                                                                                cmd.Transaction = transaccionConstruplanEK;
                                                                                cmd.ExecuteNonQuery();
                                                                            }
                                                                            #endregion
                                                                        }
                                                                        #endregion

                                                                        #region Actualizar Partida Requisición
                                                                        using (var cmd = new OdbcCommand(@"UPDATE so_requisicion_det SET cant_ordenada = ? WHERE cc = ? AND numero = ? AND partida = ? AND insumo = ?"))
                                                                        {
                                                                            OdbcParameterCollection parameters = cmd.Parameters;

                                                                            parameters.Add("@cant_ordenada", OdbcType.Numeric).Value =
                                                                                Convert.ToDecimal(registroRequisicionDetalleGlobal.cant_ordenada, CultureInfo.InvariantCulture) + cantidad;

                                                                            parameters.Add("@cc", OdbcType.Char).Value = registroRequisicionGlobal.cc;
                                                                            parameters.Add("@numero", OdbcType.Numeric).Value = (int)registroRequisicionGlobal.numero;
                                                                            parameters.Add("@partida", OdbcType.Numeric).Value = 1;
                                                                            parameters.Add("@insumo", OdbcType.Numeric).Value = insumo;

                                                                            cmd.Connection = transaccionConstruplanEK.Connection;
                                                                            cmd.Transaction = transaccionConstruplanEK;
                                                                            cmd.ExecuteNonQuery();
                                                                        }
                                                                        #endregion
                                                                        #endregion

                                                                        transaccionConstruplanEK.Commit();
                                                                        transaccionConstruplanSP.Commit();

                                                                        listaComprasGeneradas.Add(string.Format(@"[INTERCOMPAÑÍA CPLAN-GCPLAN {0}-{1}]", registroRequisicionGlobal.cc, numeroCompraNueva));

                                                                        var ccDesc = _context.tblC_Nom_CatalogoCC.FirstOrDefault(x => x.estatus && x.cc == nomina.CC).ccDescripcion;
                                                                        _context.tblC_Nom_Compra_Nomina.Add(new tblC_Nom_Compra_Nomina
                                                                        {
                                                                            nomina_id = nomina.id,
                                                                            year = nomina.year,
                                                                            periodo = nomina.periodo,
                                                                            tipoNomina = nomina.tipoNomina,
                                                                            cc = nomina.CC,
                                                                            ccDesc = ccDesc,
                                                                            numeroCompra = numeroCompraNueva,
                                                                            tipoRequisicion = "INTERCOMPAÑÍA CPLAN-GCPLAN",
                                                                            registroActivo = true
                                                                        });
                                                                        _context.SaveChanges();
                                                                    }
                                                                    catch (Exception ex)
                                                                    {
                                                                        transaccionConstruplanEK.Rollback();
                                                                        transaccionConstruplanSP.Rollback();

                                                                        throw new Exception(ex.Message);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            #endregion
                                        }
                                        #endregion

                                        transaccionEK.Commit();
                                        transaccionSP.Commit();

                                        resultado.Add(SUCCESS, true);
                                        resultado.Add("poliza", numeroPoliza);
                                        resultado.Add("stringComprasGeneradas", string.Join(", ", listaComprasGeneradas));
                                    }

                                    if (tipoRayaId == (int)TipoRayaEnum.FINIQUITO)
                                    {
                                        _polizaEkFs.SetContext(conexionEK);
                                        _polizaEkFs.SetTransaccion(transaccionEK);
                                        string numeroPoliza = _polizaEkFs.GuardarPoliza(poliza_movimientos.poliza, poliza_movimientos.movimientos);
                                        
                                        _polizaSpFs.SetContext(_context);
                                        _polizaSpFs.SetTransaccion(transaccionSP);
                                        var polizaPoliza = numeroPoliza.Split('-')[2];
                                        poliza_movimientos.poliza.poliza = Convert.ToInt32(polizaPoliza);
                                        var resultadoSP = _polizaSpFs.GuardarPoliza(poliza_movimientos.poliza, poliza_movimientos.movimientos);

                                        _context.SaveChanges();

                                        transaccionSP.Commit();

                                        resultado.Add(SUCCESS, true);
                                        resultado.Add("poliza", 0);
                                    }
                                }
                                else
                                {
                                    resultado.Add(SUCCESS, false);
                                    resultado.Add(MESSAGE, "Ya se encuentra registrada una póliza para la nómina seleccionada");
                                }
                            }
                            else
                            {
                                resultado.Add(SUCCESS, false);
                                resultado.Add(MESSAGE, "No cuenta con permisos para realizar esta operación");
                            }
                        }
                        catch (Exception ex)
                        {
                            transaccionEK.Rollback();
                            transaccionSP.Rollback();

                            resultado.Add(SUCCESS, false);
                            resultado.Add(MESSAGE, ex.Message);

                            LogError(_SISTEMA, 0, "NominaController", "RegistrarPoliza", ex, AccionEnum.AGREGAR, 0, new { poliza_movimientos.poliza });
                        }
                    }
                }
            }

            return resultado;
        }

        public Dictionary<string, object> DescargarPoliza(int idNomina)
        {
            var resultado = new Dictionary<string, object>();

            return null;
        }

        private tblPolizaDTO CrearLineaTblPoliza(sc_movpolDTO movimiento, string descripcionCuenta)
        {
            var detalleTblPoliza = new tblPolizaDTO();
            detalleTblPoliza.linea = movimiento.linea;
            detalleTblPoliza.cta = movimiento.cta;
            detalleTblPoliza.scta = movimiento.scta;
            detalleTblPoliza.sscta = movimiento.sscta;
            detalleTblPoliza.digito = movimiento.digito;
            detalleTblPoliza.descripcion = descripcionCuenta;
            detalleTblPoliza.cc = movimiento.cc;
            detalleTblPoliza.referencia = movimiento.referencia;
            detalleTblPoliza.concepto = movimiento.concepto;
            detalleTblPoliza.tm = movimiento.tm;
            detalleTblPoliza.cargo = detalleTblPoliza.tm == (int)TipoMovimientoEnum.Cargo || detalleTblPoliza.tm == (int)TipoMovimientoEnum.CargoRojo ? movimiento.monto : 0M;
            detalleTblPoliza.abono = detalleTblPoliza.tm == (int)TipoMovimientoEnum.Abono || detalleTblPoliza.tm == (int)TipoMovimientoEnum.AbonoRojo ? movimiento.monto : 0M;

            return detalleTblPoliza;
        }

        private sc_movpolDTO CrearLineaPoliza(DateTime fechaPol, int linea, tblC_Nom_EstructuraPolizaNominaCC renglon, tblC_Nom_Nomina nomina, tblC_Nom_Raya raya, List<tblC_Nom_CuentaEmpleado> relacionesCtaEmpleados)
        {
            var mov = new sc_movpolDTO();
            mov.year = fechaPol.Year;
            mov.mes = fechaPol.Month;
            mov.tp = "03";
            mov.linea = linea;
            mov.tm = renglon.cuenta.tipoCuenta.tipoMovimientoId;
            mov.referencia = nomina.periodo.ToString();
            mov.cc = nomina.CC;

            if (renglon.tipoRayaId == (int)TipoRayaEnum.NOMINA)
            {
                switch (nomina.tipoNomina)
                {
                    case (int)TipoPeriodoEnum.Semanal:
                        mov.concepto = "SEMANA " + nomina.periodo;
                        break;
                    case (int)TipoPeriodoEnum.Quincenal:
                        mov.concepto = "QUINCENA " + nomina.periodo;
                        break;
                }
            }
            if (renglon.tipoRayaId == (int)TipoRayaEnum.FINIQUITO)
            {
                mov.referencia = fechaPol.ToString("ddMMyy");
                mov.concepto = "ISPT " + fechaPol.ToString("MMMMM yyyy").ToUpper();
            }

            var columnas = renglon.columnaRaya.Split(',');
            foreach (var col in columnas)
            {
                string columna = col;
                var columnaQueSeTomaraConMontoNegativo = false;
                if (columna.Contains('-'))
                {
                    columnaQueSeTomaraConMontoNegativo = true;
                    columna = col.Replace("-", "");
                }

                var montoColumna = 0M;
                if (raya == null)
                {
                    montoColumna = nomina.raya.Sum(s => Convert.ToDecimal(s.GetType().GetProperty(columna).GetValue(s, null))) * (columnaQueSeTomaraConMontoNegativo ? -1 : 1);
                }
                else
                {
                    montoColumna = Convert.ToDecimal(raya.GetType().GetProperty(columna).GetValue(raya)) * (columnaQueSeTomaraConMontoNegativo ? -1 : 1);
                }

                switch (renglon.cuenta.tipoCuenta.tipoMovimientoId)
                {
                    case (int)TipoMovimientoEnum.Cargo:
                        mov.monto += montoColumna;
                        break;
                    case (int)TipoMovimientoEnum.CargoRojo:
                        mov.monto += (montoColumna * -1);
                        break;
                    case (int)TipoMovimientoEnum.Abono:
                        mov.monto += (montoColumna * -1);
                        break;
                    case (int)TipoMovimientoEnum.AbonoRojo:
                        mov.monto += montoColumna;
                        break;
                }
            }

            tblC_Nom_CuentaEmpleado ctaEmpleado = null;

            if (raya != null && mov.monto != 0)
            {
                ctaEmpleado = relacionesCtaEmpleados.FirstOrDefault(f => f.numero == raya.numeroEmpleado && f.cuenta.tipoCuentaId == renglon.cuenta.tipoCuentaId && f.validada);

                if (ctaEmpleado == null)
                {
                    var empleadoSinRegistrar = new EmpleadosSinRegistrarDTO();
                    empleadoSinRegistrar.numeroEmpleado = raya.numeroEmpleado;
                    empleadoSinRegistrar.descripcionTipoCuenta = renglon.cuenta.tipoCuenta.descripcion;
                    empleadoSinRegistrar.cc = nomina.CC;
                    empleadosSinRegistrar.Add(empleadoSinRegistrar);
                }
            }

            mov.cta = ctaEmpleado == null ? renglon.cuenta.cta : ctaEmpleado.cta;
            mov.scta = ctaEmpleado == null ? renglon.cuenta.scta : ctaEmpleado.scta;
            mov.sscta = ctaEmpleado == null ? renglon.cuenta.sscta : ctaEmpleado.sscta;
            mov.digito = ctaEmpleado == null ? renglon.cuenta.digito : ctaEmpleado.digito;

            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
            {
                var areaCuenta = _catalogoCC.FirstOrDefault(f => f.cc == mov.cc && f.area.HasValue && f.cuenta.HasValue);

                if (areaCuenta == null)
                {
                    throw new Exception("No se encontró un area cuenta para el CC: " + mov.cc);
                }

                mov.area = areaCuenta.area.Value;
                mov.cuenta_oc = areaCuenta.cuenta.Value;
            }

            return mov;
        }

        public MemoryStream DescargarExcelNomina(int tipo_nomina, int anio, int periodo)
        {
            try
            {
                #region Información Inicial
                var empresaDesc = ((EmpresaEnum)vSesiones.sesionEmpresaActual).GetDescription();

                EnkontrolEnum conexionEnkontrol = EnkontrolEnum.CplanProd;

                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {
                    case EmpresaEnum.Construplan:
                        conexionEnkontrol = EnkontrolEnum.CplanProd;
                        break;
                    case EmpresaEnum.Arrendadora:
                        conexionEnkontrol = EnkontrolEnum.ArrenProd;
                        break;
                    case EmpresaEnum.GCPLAN:
                        conexionEnkontrol = EnkontrolEnum.GCPLAN;
                        break;
                }
                #endregion

                using (ExcelPackage excel = new ExcelPackage())
                {
                    #region Hoja T&L
                    {
                        #region Información Hoja
                        string fechaPoliza = "";
                        string mesNombre = "";
                        string tipoNominaDesc = "";

                        var listaRegistrosCompraNomina = _context.tblC_Nom_Compra_Nomina.Where(x => x.registroActivo && x.year == anio && x.periodo == periodo && x.tipoNomina == tipo_nomina && x.tipoRequisicion == "T&L").ToList();

                        //Se agrupa la lista para obtener el último número de compra.
                        listaRegistrosCompraNomina = listaRegistrosCompraNomina.GroupBy(x => new { x.nomina_id, x.year, x.periodo, x.tipoNomina, x.cc, x.tipoRequisicion }).Select(x => new tblC_Nom_Compra_Nomina
                        {
                            nomina_id = x.Key.nomina_id,
                            year = x.Key.year,
                            periodo = x.Key.periodo,
                            tipoNomina = x.Key.tipoNomina,
                            cc = x.Key.cc,
                            numeroCompra = x.Max(y => y.numeroCompra),
                            tipoRequisicion = x.Key.tipoRequisicion
                        }).ToList();

                        if (listaRegistrosCompraNomina.Count() > 0)
                        {
                            var listaRegistrosCompraNomina_nomina_id = listaRegistrosCompraNomina.Select(x => x.nomina_id).ToList();
                            var listaRegistrosNomina = _context.tblC_Nom_Nomina.Where(x => listaRegistrosCompraNomina_nomina_id.Contains(x.id)).ToList();
                            var listaRaya = _context.tblC_Nom_Raya.Where(x => listaRegistrosCompraNomina_nomina_id.Contains(x.nominaID)).ToList();

                            if (listaRegistrosNomina.Count() > 0)
                            {
                                var listaStringPoliza = listaRegistrosNomina[0].poliza != null ? listaRegistrosNomina[0].poliza.Split('-').ToList() : new List<string>();
                                var mes = Int32.Parse(listaStringPoliza[1]);
                                var numeroPoliza = Int32.Parse(listaStringPoliza[2]);
                                var tp = listaStringPoliza[3];

                                var registroPolizaEK = _contextEnkontrol.Select<NominaPolizaDTO>(conexionEnkontrol, new OdbcConsultaDTO()
                                {
                                    consulta =
                                        string.Format(@"SELECT * FROM sc_polizas WHERE year = {0} AND mes = {1} AND poliza = {2} AND tp = '{3}'", anio, mes, numeroPoliza, tp)
                                }).FirstOrDefault();

                                fechaPoliza = registroPolizaEK.fechapol.ToShortDateString();
                                mesNombre = new DateTime(anio, mes, 1).ToString("MMMM", CultureInfo.CreateSpecificCulture("es")).ToUpper();
                                tipoNominaDesc = ((TipoPeriodoEnum)listaRegistrosNomina[0].tipoNomina).GetDescription().ToUpper().Replace("L", ""); //Se quita la letra "L" para que diga "Quincena" o "Semana".
                            }
                        }
                        #endregion

                        var hoja = excel.Workbook.Worksheets.Add("REPORTE T&L");

                        #region HEADER
                        hoja.Cells["B2:E2"].Merge = true;
                        hoja.Cells["B2:E2"].LoadFromArrays(new List<string[]>() { new string[] { "CONCENTRADO PAGO DE NÓMINA T&L " + empresaDesc } });
                        hoja.Cells["B2:E2"].Style.Font.Bold = true;
                        hoja.Cells["B2:E2"].Style.Font.Italic = true;
                        hoja.Cells["B2:E2"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        hoja.Cells["B2:E2"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        hoja.Cells["B2:E2"].Style.Font.Size = 12;
                        hoja.Cells["G2"].Value = fechaPoliza;
                        hoja.Cells["G2"].Style.Font.Bold = true;
                        hoja.Cells["G2"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        hoja.Cells["G2"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        hoja.Cells["G2"].Style.Font.Size = 11;
                        hoja.Cells["G2"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja.Cells["G2"].Style.Fill.BackgroundColor.SetColor(255, 255, 230, 153);

                        hoja.Cells["C3:D3"].Merge = true;
                        hoja.Cells["C3:D3"].LoadFromArrays(new List<string[]>() { new string[] { "PROVEEDOR 5740" } });
                        hoja.Cells["C3:D3"].Style.Font.Bold = true;
                        hoja.Cells["C3:D3"].Style.Font.Italic = true;
                        hoja.Cells["C3:D3"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        hoja.Cells["C3:D3"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        hoja.Cells["C3:D3"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja.Cells["C3:D3"].Style.Fill.BackgroundColor.SetColor(255, 255, 242, 204);
                        hoja.Cells["C3:D3"].Style.Font.Size = 12;

                        hoja.Cells["C4:D4"].Merge = true;
                        hoja.Cells["C4:D4"].LoadFromArrays(new List<string[]>() { new string[] { tipoNominaDesc + " " + periodo } });
                        hoja.Cells["C4:D4"].Style.Font.Bold = true;
                        hoja.Cells["C4:D4"].Style.Font.Italic = true;
                        hoja.Cells["C4:D4"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        hoja.Cells["C4:D4"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        hoja.Cells["C4:D4"].Style.Font.Size = 12;

                        hoja.Cells["A5"].LoadFromArrays(new List<string[]>() { new string[] { "C.C." } });
                        hoja.Cells["A5"].Style.Font.Bold = true;
                        hoja.Cells["A5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        hoja.Cells["A5"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        hoja.Cells["A5"].Style.Font.Size = 10;
                        hoja.Cells["A5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["A5"].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["A5"].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["A5"].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["B5"].LoadFromArrays(new List<string[]>() { new string[] { "REQ." } });
                        hoja.Cells["B5"].Style.Font.Bold = true;
                        hoja.Cells["B5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        hoja.Cells["B5"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        hoja.Cells["B5"].Style.Font.Size = 10;
                        hoja.Cells["B5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["B5"].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["B5"].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["B5"].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["C5"].LoadFromArrays(new List<string[]>() { new string[] { "OBRA" } });
                        hoja.Cells["C5"].Style.Font.Bold = true;
                        hoja.Cells["C5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        hoja.Cells["C5"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        hoja.Cells["C5"].Style.Font.Size = 10;
                        hoja.Cells["C5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["C5"].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["C5"].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["C5"].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["D5"].LoadFromArrays(new List<string[]>() { new string[] { "Subtotal" } });
                        hoja.Cells["D5"].Style.Font.Bold = true;
                        hoja.Cells["D5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        hoja.Cells["D5"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        hoja.Cells["D5"].Style.Font.Size = 10;
                        hoja.Cells["D5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["D5"].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["D5"].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["D5"].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["D5"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja.Cells["D5"].Style.Fill.BackgroundColor.SetColor(255, 255, 230, 153);
                        hoja.Cells["E5"].LoadFromArrays(new List<string[]>() { new string[] { "IVA" } });
                        hoja.Cells["E5"].Style.Font.Bold = true;
                        hoja.Cells["E5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        hoja.Cells["E5"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        hoja.Cells["E5"].Style.Font.Size = 10;
                        hoja.Cells["E5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["E5"].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["E5"].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["E5"].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["F5"].LoadFromArrays(new List<string[]>() { new string[] { "Total Facturado" } });
                        hoja.Cells["F5"].Style.Font.Bold = true;
                        hoja.Cells["F5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        hoja.Cells["F5"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        hoja.Cells["F5"].Style.Font.Size = 10;
                        hoja.Cells["F5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["F5"].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["F5"].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["F5"].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["G5"].LoadFromArrays(new List<string[]>() { new string[] { "O.C." } });
                        hoja.Cells["G5"].Style.Font.Bold = true;
                        hoja.Cells["G5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        hoja.Cells["G5"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        hoja.Cells["G5"].Style.Font.Size = 10;
                        hoja.Cells["G5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["G5"].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["G5"].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["G5"].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["G5"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja.Cells["G5"].Style.Fill.BackgroundColor.SetColor(255, 255, 230, 153);
                        #endregion

                        #region DATOS
                        var cellData = new List<object[]>();
                        var contadorRenglones = 6;

                        foreach (var compra in listaRegistrosCompraNomina)
                        {
                            var registroCompraEK = _contextEnkontrol.Select<dynamic>(conexionEnkontrol, new OdbcConsultaDTO()
                            {
                                consulta =
                                    string.Format(@"SELECT * FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", compra.cc, compra.numeroCompra)
                            }).FirstOrDefault();
                            var registroCompraDetalleEK = _contextEnkontrol.Select<OrdenCompraDetDTO>(conexionEnkontrol, new OdbcConsultaDTO()
                            {
                                consulta =
                                    string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", compra.cc, compra.numeroCompra)
                            }).FirstOrDefault();

                            string nombreObra = _context.tblC_Nom_CatalogoCC.Where(x => x.cc == compra.cc).Select(x => x.ccDescripcion).FirstOrDefault();

                            cellData.Add(new object[] {
                                compra.cc,
                                registroCompraDetalleEK != null ? registroCompraDetalleEK.num_requisicion.ToString() : "",
                                nombreObra,
                                registroCompraEK != null ? Convert.ToDecimal(registroCompraEK.sub_total, CultureInfo.InvariantCulture).ToString("C") : "0",
                                registroCompraEK != null ? Convert.ToDecimal(registroCompraEK.iva, CultureInfo.InvariantCulture).ToString("C") : "0",
                                registroCompraEK != null ? Convert.ToDecimal(registroCompraEK.total, CultureInfo.InvariantCulture).ToString("C") : "0",
                                compra.numeroCompra
                            });

                            if (registroCompraEK == null || registroCompraDetalleEK == null)
                            {
                                hoja.Cells[string.Format("A{0}:G{0}", contadorRenglones)].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                hoja.Cells[string.Format("A{0}:G{0}", contadorRenglones)].Style.Fill.BackgroundColor.SetColor(255, 255, 0, 0);
                            }

                            contadorRenglones++;
                        }

                        //Renglón Totales
                        cellData.Add(new object[] {
                            "",
                            "",
                            "TOTAL",
                            cellData.Sum(x => Convert.ToDecimal(x[3].ToString().Replace("$", "").Replace(",", ""))).ToString("C"),
                            cellData.Sum(x => Convert.ToDecimal(x[4].ToString().Replace("$", "").Replace(",", ""))).ToString("C"),
                            cellData.Sum(x => Convert.ToDecimal(x[5].ToString().Replace("$", "").Replace(",", ""))).ToString("C"),
                            ""
                        });

                        hoja.Cells[6, 1].LoadFromArrays(cellData);

                        hoja.Cells["A1:G" + contadorRenglones].Style.Font.Name = "Calibri Light";
                        hoja.Cells["C" + contadorRenglones].Style.Font.Bold = true;

                        hoja.Cells["A6:G" + contadorRenglones].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["A6:G" + contadorRenglones].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["A6:G" + contadorRenglones].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["A6:G" + contadorRenglones].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                        hoja.Cells[hoja.Dimension.Address].AutoFitColumns();
                        #endregion
                    }
                    #endregion

                    #region Hoja OCSI
                    {
                        #region Información Hoja
                        string fechaPoliza = "";
                        string mesNombre = "";
                        string tipoNominaDesc = "";

                        var listaRegistrosCompraNomina = _context.tblC_Nom_Compra_Nomina.Where(x => x.registroActivo && x.year == anio && x.periodo == periodo && x.tipoNomina == tipo_nomina && x.tipoRequisicion == "OCSI").ToList();

                        //Se agrupa la lista para obtener el último número de compra.
                        listaRegistrosCompraNomina = listaRegistrosCompraNomina.GroupBy(x => new { x.nomina_id, x.year, x.periodo, x.tipoNomina, x.cc, x.tipoRequisicion }).Select(x => new tblC_Nom_Compra_Nomina
                        {
                            nomina_id = x.Key.nomina_id,
                            year = x.Key.year,
                            periodo = x.Key.periodo,
                            tipoNomina = x.Key.tipoNomina,
                            cc = x.Key.cc,
                            numeroCompra = x.Max(y => y.numeroCompra),
                            tipoRequisicion = x.Key.tipoRequisicion
                        }).ToList();

                        if (listaRegistrosCompraNomina.Count() > 0)
                        {
                            var listaRegistrosCompraNomina_nomina_id = listaRegistrosCompraNomina.Select(x => x.nomina_id).ToList();
                            var listaRegistrosNomina = _context.tblC_Nom_Nomina.Where(x => listaRegistrosCompraNomina_nomina_id.Contains(x.id)).ToList();
                            var listaRaya = _context.tblC_Nom_Raya.Where(x => listaRegistrosCompraNomina_nomina_id.Contains(x.nominaID)).ToList();

                            if (listaRegistrosNomina.Count() > 0)
                            {
                                var listaStringPoliza = listaRegistrosNomina[0].poliza != null ? listaRegistrosNomina[0].poliza.Split('-').ToList() : new List<string>();
                                var mes = Int32.Parse(listaStringPoliza[1]);
                                var numeroPoliza = Int32.Parse(listaStringPoliza[2]);
                                var tp = listaStringPoliza[3];

                                var registroPolizaEK = _contextEnkontrol.Select<NominaPolizaDTO>(conexionEnkontrol, new OdbcConsultaDTO()
                                {
                                    consulta =
                                        string.Format(@"SELECT * FROM sc_polizas WHERE year = {0} AND mes = {1} AND poliza = {2} AND tp = '{3}'", anio, mes, numeroPoliza, tp)
                                }).FirstOrDefault();

                                fechaPoliza = registroPolizaEK.fechapol.ToShortDateString();
                                mesNombre = new DateTime(anio, mes, 1).ToString("MMMM", CultureInfo.CreateSpecificCulture("es")).ToUpper();
                                tipoNominaDesc = ((TipoPeriodoEnum)listaRegistrosNomina[0].tipoNomina).GetDescription().ToUpper().Replace("L", ""); //Se quita la letra "L" para que diga "Quincena" o "Semana".
                            }
                        }
                        #endregion

                        var hoja = excel.Workbook.Worksheets.Add("REPORTE OCSI");

                        #region HEADER
                        hoja.Cells["B2:E2"].Merge = true;
                        hoja.Cells["B2:E2"].LoadFromArrays(new List<string[]>() { new string[] { "CONCENTRADO PAGO DE ONE CARD -OCSI SOLUCIONES " + empresaDesc } });
                        hoja.Cells["B2:E2"].Style.Font.Bold = true;
                        hoja.Cells["B2:E2"].Style.Font.Italic = true;
                        hoja.Cells["B2:E2"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        hoja.Cells["B2:E2"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        hoja.Cells["B2:E2"].Style.Font.Size = 12;
                        hoja.Cells["G2"].Value = fechaPoliza;
                        hoja.Cells["G2"].Style.Font.Bold = true;
                        hoja.Cells["G2"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        hoja.Cells["G2"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        hoja.Cells["G2"].Style.Font.Size = 11;
                        hoja.Cells["G2"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja.Cells["G2"].Style.Fill.BackgroundColor.SetColor(255, 255, 230, 153);

                        hoja.Cells["C3:D3"].Merge = true;
                        hoja.Cells["C3:D3"].LoadFromArrays(new List<string[]>() { new string[] { "PROVEEDOR 5451" } });
                        hoja.Cells["C3:D3"].Style.Font.Bold = true;
                        hoja.Cells["C3:D3"].Style.Font.Italic = true;
                        hoja.Cells["C3:D3"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        hoja.Cells["C3:D3"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        hoja.Cells["C3:D3"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja.Cells["C3:D3"].Style.Fill.BackgroundColor.SetColor(255, 255, 242, 204);
                        hoja.Cells["C3:D3"].Style.Font.Size = 12;

                        hoja.Cells["C4:D4"].Merge = true;
                        hoja.Cells["C4:D4"].LoadFromArrays(new List<string[]>() { new string[] { tipoNominaDesc + " " + periodo } });
                        hoja.Cells["C4:D4"].Style.Font.Bold = true;
                        hoja.Cells["C4:D4"].Style.Font.Italic = true;
                        hoja.Cells["C4:D4"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        hoja.Cells["C4:D4"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        hoja.Cells["C4:D4"].Style.Font.Size = 12;

                        hoja.Cells["A5"].LoadFromArrays(new List<string[]>() { new string[] { "C.C." } });
                        hoja.Cells["A5"].Style.Font.Bold = true;
                        hoja.Cells["A5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        hoja.Cells["A5"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        hoja.Cells["A5"].Style.Font.Size = 10;
                        hoja.Cells["A5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["A5"].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["A5"].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["A5"].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["B5"].LoadFromArrays(new List<string[]>() { new string[] { "REQ." } });
                        hoja.Cells["B5"].Style.Font.Bold = true;
                        hoja.Cells["B5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        hoja.Cells["B5"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        hoja.Cells["B5"].Style.Font.Size = 10;
                        hoja.Cells["B5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["B5"].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["B5"].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["B5"].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["C5"].LoadFromArrays(new List<string[]>() { new string[] { "OBRA" } });
                        hoja.Cells["C5"].Style.Font.Bold = true;
                        hoja.Cells["C5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        hoja.Cells["C5"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        hoja.Cells["C5"].Style.Font.Size = 10;
                        hoja.Cells["C5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["C5"].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["C5"].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["C5"].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["D5"].LoadFromArrays(new List<string[]>() { new string[] { "Subtotal" } });
                        hoja.Cells["D5"].Style.Font.Bold = true;
                        hoja.Cells["D5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        hoja.Cells["D5"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        hoja.Cells["D5"].Style.Font.Size = 10;
                        hoja.Cells["D5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["D5"].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["D5"].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["D5"].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["D5"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja.Cells["D5"].Style.Fill.BackgroundColor.SetColor(255, 255, 230, 153);
                        hoja.Cells["E5"].LoadFromArrays(new List<string[]>() { new string[] { "IVA" } });
                        hoja.Cells["E5"].Style.Font.Bold = true;
                        hoja.Cells["E5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        hoja.Cells["E5"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        hoja.Cells["E5"].Style.Font.Size = 10;
                        hoja.Cells["E5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["E5"].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["E5"].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["E5"].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["F5"].LoadFromArrays(new List<string[]>() { new string[] { "Total Facturado" } });
                        hoja.Cells["F5"].Style.Font.Bold = true;
                        hoja.Cells["F5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        hoja.Cells["F5"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        hoja.Cells["F5"].Style.Font.Size = 10;
                        hoja.Cells["F5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["F5"].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["F5"].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["F5"].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["G5"].LoadFromArrays(new List<string[]>() { new string[] { "O.C." } });
                        hoja.Cells["G5"].Style.Font.Bold = true;
                        hoja.Cells["G5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        hoja.Cells["G5"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        hoja.Cells["G5"].Style.Font.Size = 10;
                        hoja.Cells["G5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["G5"].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["G5"].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["G5"].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["G5"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja.Cells["G5"].Style.Fill.BackgroundColor.SetColor(255, 255, 230, 153);
                        #endregion

                        #region DATOS
                        var cellData = new List<object[]>();
                        var contadorRenglones = 6;

                        foreach (var compra in listaRegistrosCompraNomina)
                        {
                            var registroCompraEK = _contextEnkontrol.Select<dynamic>(conexionEnkontrol, new OdbcConsultaDTO()
                            {
                                consulta =
                                    string.Format(@"SELECT * FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", compra.cc, compra.numeroCompra)
                            }).FirstOrDefault();
                            var registroCompraDetalleEK = _contextEnkontrol.Select<OrdenCompraDetDTO>(conexionEnkontrol, new OdbcConsultaDTO()
                            {
                                consulta =
                                    string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", compra.cc, compra.numeroCompra)
                            }).FirstOrDefault();

                            string nombreObra = _context.tblC_Nom_CatalogoCC.Where(x => x.cc == compra.cc).Select(x => x.ccDescripcion).FirstOrDefault();

                            cellData.Add(new object[] {
                                compra.cc,
                                registroCompraDetalleEK != null ? registroCompraDetalleEK.num_requisicion.ToString() : "",
                                nombreObra,
                                registroCompraEK != null ? Convert.ToDecimal(registroCompraEK.sub_total, CultureInfo.InvariantCulture).ToString("C") : "0",
                                registroCompraEK != null ? Convert.ToDecimal(registroCompraEK.iva, CultureInfo.InvariantCulture).ToString("C") : "0",
                                registroCompraEK != null ? Convert.ToDecimal(registroCompraEK.total, CultureInfo.InvariantCulture).ToString("C") : "0",
                                compra.numeroCompra
                            });

                            if (registroCompraEK == null || registroCompraDetalleEK == null)
                            {
                                hoja.Cells[string.Format("A{0}:G{0}", contadorRenglones)].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                hoja.Cells[string.Format("A{0}:G{0}", contadorRenglones)].Style.Fill.BackgroundColor.SetColor(255, 255, 0, 0);
                            }

                            contadorRenglones++;
                        }

                        //Renglón Totales
                        cellData.Add(new object[] {
                            "",
                            "",
                            "TOTAL",
                            cellData.Sum(x => Convert.ToDecimal(x[3].ToString().Replace("$", "").Replace(",", ""))).ToString("C"),
                            cellData.Sum(x => Convert.ToDecimal(x[4].ToString().Replace("$", "").Replace(",", ""))).ToString("C"),
                            cellData.Sum(x => Convert.ToDecimal(x[5].ToString().Replace("$", "").Replace(",", ""))).ToString("C"),
                            ""
                        });

                        hoja.Cells[6, 1].LoadFromArrays(cellData);

                        hoja.Cells["A1:G" + contadorRenglones].Style.Font.Name = "Calibri Light";
                        hoja.Cells["C" + contadorRenglones].Style.Font.Bold = true;

                        hoja.Cells["A6:G" + contadorRenglones].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["A6:G" + contadorRenglones].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["A6:G" + contadorRenglones].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        hoja.Cells["A6:G" + contadorRenglones].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                        hoja.Cells[hoja.Dimension.Address].AutoFitColumns();
                        #endregion
                    }
                    #endregion

                    if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.GCPLAN)
                    {
                        #region Hoja Intercompañías
                        {
                            #region Información Hoja
                            string fechaPoliza = "";
                            string mesNombre = "";
                            string tipoNominaDesc = "";

                            var listaRegistrosCompraNomina = _context.tblC_Nom_Compra_Nomina.Where(x =>
                                x.registroActivo && x.year == anio && x.periodo == periodo && x.tipoNomina == tipo_nomina && x.tipoRequisicion == "INTERCOMPAÑÍA CPLAN-GCPLAN"
                            ).ToList();

                            //Se agrupa la lista para obtener el último número de compra.
                            listaRegistrosCompraNomina = listaRegistrosCompraNomina.GroupBy(x => new { x.nomina_id, x.year, x.periodo, x.tipoNomina, x.cc, x.tipoRequisicion }).Select(x => new tblC_Nom_Compra_Nomina
                            {
                                nomina_id = x.Key.nomina_id,
                                year = x.Key.year,
                                periodo = x.Key.periodo,
                                tipoNomina = x.Key.tipoNomina,
                                cc = x.Key.cc,
                                numeroCompra = x.Max(y => y.numeroCompra),
                                tipoRequisicion = x.Key.tipoRequisicion
                            }).ToList();

                            if (listaRegistrosCompraNomina.Count() > 0)
                            {
                                var listaRegistrosCompraNomina_nomina_id = listaRegistrosCompraNomina.Select(x => x.nomina_id).ToList();
                                var listaRegistrosNomina = _context.tblC_Nom_Nomina.Where(x => listaRegistrosCompraNomina_nomina_id.Contains(x.id)).ToList();
                                var listaRaya = _context.tblC_Nom_Raya.Where(x => listaRegistrosCompraNomina_nomina_id.Contains(x.nominaID)).ToList();

                                if (listaRegistrosNomina.Count() > 0)
                                {
                                    var listaStringPoliza = listaRegistrosNomina[0].poliza != null ? listaRegistrosNomina[0].poliza.Split('-').ToList() : new List<string>();
                                    var mes = Int32.Parse(listaStringPoliza[1]);
                                    var numeroPoliza = Int32.Parse(listaStringPoliza[2]);
                                    var tp = listaStringPoliza[3];

                                    var registroPolizaEK = _contextEnkontrol.Select<NominaPolizaDTO>(conexionEnkontrol, new OdbcConsultaDTO()
                                    {
                                        consulta =
                                            string.Format(@"SELECT * FROM sc_polizas WHERE year = {0} AND mes = {1} AND poliza = {2} AND tp = '{3}'", anio, mes, numeroPoliza, tp)
                                    }).FirstOrDefault();

                                    fechaPoliza = registroPolizaEK.fechapol.ToShortDateString();
                                    mesNombre = new DateTime(anio, mes, 1).ToString("MMMM", CultureInfo.CreateSpecificCulture("es")).ToUpper();
                                    tipoNominaDesc = ((TipoPeriodoEnum)listaRegistrosNomina[0].tipoNomina).GetDescription().ToUpper().Replace("L", ""); //Se quita la letra "L" para que diga "Quincena" o "Semana".
                                }
                            }
                            #endregion

                            var hoja = excel.Workbook.Worksheets.Add("REPORTE INTERCOMPAÑÍAS");

                            #region HEADER
                            hoja.Cells["B2:E2"].Merge = true;
                            hoja.Cells["B2:E2"].LoadFromArrays(new List<string[]>() { new string[] { "CONCENTRADO INTERCOMPAÑÍAS 6689 CPLAN-GCPLAN " + anio} });
                            hoja.Cells["B2:E2"].Style.Font.Bold = true;
                            hoja.Cells["B2:E2"].Style.Font.Italic = true;
                            hoja.Cells["B2:E2"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                            hoja.Cells["B2:E2"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            hoja.Cells["B2:E2"].Style.Font.Size = 12;
                            hoja.Cells["G2"].Value = fechaPoliza;
                            hoja.Cells["G2"].Style.Font.Bold = true;
                            hoja.Cells["G2"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                            hoja.Cells["G2"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            hoja.Cells["G2"].Style.Font.Size = 11;
                            hoja.Cells["G2"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            hoja.Cells["G2"].Style.Fill.BackgroundColor.SetColor(255, 255, 230, 153);

                            hoja.Cells["C3:D3"].Merge = true;
                            hoja.Cells["C3:D3"].LoadFromArrays(new List<string[]>() { new string[] { "CUENTA GCPLAN CONCENTRADORA 65509952066" } });
                            hoja.Cells["C3:D3"].Style.Font.Bold = true;
                            hoja.Cells["C3:D3"].Style.Font.Italic = true;
                            hoja.Cells["C3:D3"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                            hoja.Cells["C3:D3"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            hoja.Cells["C3:D3"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            hoja.Cells["C3:D3"].Style.Fill.BackgroundColor.SetColor(255, 255, 255, 0);
                            hoja.Cells["C3:D3"].Style.Font.Size = 12;

                            //El valor del campo total se agrega hasta lo último.
                            hoja.Cells["F3"].Style.Font.Bold = true;
                            hoja.Cells["F3"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            hoja.Cells["F3"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            hoja.Cells["F3"].Style.Fill.BackgroundColor.SetColor(255, 255, 255, 0);
                            hoja.Cells["F3"].Style.Font.Size = 12;

                            hoja.Cells["C4:D4"].Merge = true;
                            hoja.Cells["C4:D4"].LoadFromArrays(new List<string[]>() { new string[] { tipoNominaDesc + " " + periodo } });
                            hoja.Cells["C4:D4"].Style.Font.Bold = true;
                            hoja.Cells["C4:D4"].Style.Font.Italic = true;
                            hoja.Cells["C4:D4"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                            hoja.Cells["C4:D4"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            hoja.Cells["C4:D4"].Style.Font.Size = 12;

                            hoja.Cells["A5"].LoadFromArrays(new List<string[]>() { new string[] { "C.C." } });
                            hoja.Cells["A5"].Style.Font.Bold = true;
                            hoja.Cells["A5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                            hoja.Cells["A5"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            hoja.Cells["A5"].Style.Font.Size = 10;
                            hoja.Cells["A5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                            hoja.Cells["A5"].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                            hoja.Cells["A5"].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                            hoja.Cells["A5"].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                            hoja.Cells["B5"].LoadFromArrays(new List<string[]>() { new string[] { "REQ." } });
                            hoja.Cells["B5"].Style.Font.Bold = true;
                            hoja.Cells["B5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                            hoja.Cells["B5"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            hoja.Cells["B5"].Style.Font.Size = 10;
                            hoja.Cells["B5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                            hoja.Cells["B5"].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                            hoja.Cells["B5"].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                            hoja.Cells["B5"].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                            hoja.Cells["C5"].LoadFromArrays(new List<string[]>() { new string[] { "OBRA" } });
                            hoja.Cells["C5"].Style.Font.Bold = true;
                            hoja.Cells["C5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                            hoja.Cells["C5"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            hoja.Cells["C5"].Style.Font.Size = 10;
                            hoja.Cells["C5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                            hoja.Cells["C5"].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                            hoja.Cells["C5"].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                            hoja.Cells["C5"].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                            hoja.Cells["D5"].LoadFromArrays(new List<string[]>() { new string[] { "Subtotal" } });
                            hoja.Cells["D5"].Style.Font.Bold = true;
                            hoja.Cells["D5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                            hoja.Cells["D5"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            hoja.Cells["D5"].Style.Font.Size = 10;
                            hoja.Cells["D5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                            hoja.Cells["D5"].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                            hoja.Cells["D5"].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                            hoja.Cells["D5"].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                            hoja.Cells["D5"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            hoja.Cells["D5"].Style.Fill.BackgroundColor.SetColor(255, 255, 230, 153);
                            hoja.Cells["E5"].LoadFromArrays(new List<string[]>() { new string[] { "IVA" } });
                            hoja.Cells["E5"].Style.Font.Bold = true;
                            hoja.Cells["E5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                            hoja.Cells["E5"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            hoja.Cells["E5"].Style.Font.Size = 10;
                            hoja.Cells["E5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                            hoja.Cells["E5"].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                            hoja.Cells["E5"].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                            hoja.Cells["E5"].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                            hoja.Cells["F5"].LoadFromArrays(new List<string[]>() { new string[] { "Total Facturado" } });
                            hoja.Cells["F5"].Style.Font.Bold = true;
                            hoja.Cells["F5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                            hoja.Cells["F5"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            hoja.Cells["F5"].Style.Font.Size = 10;
                            hoja.Cells["F5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                            hoja.Cells["F5"].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                            hoja.Cells["F5"].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                            hoja.Cells["F5"].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                            hoja.Cells["G5"].LoadFromArrays(new List<string[]>() { new string[] { "O.C." } });
                            hoja.Cells["G5"].Style.Font.Bold = true;
                            hoja.Cells["G5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                            hoja.Cells["G5"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            hoja.Cells["G5"].Style.Font.Size = 10;
                            hoja.Cells["G5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                            hoja.Cells["G5"].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                            hoja.Cells["G5"].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                            hoja.Cells["G5"].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                            hoja.Cells["G5"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            hoja.Cells["G5"].Style.Fill.BackgroundColor.SetColor(255, 255, 230, 153);
                            #endregion

                            #region DATOS
                            var cellData = new List<object[]>();
                            var contadorRenglones = 6;

                            foreach (var compra in listaRegistrosCompraNomina)
                            {
                                var registroCompraEK = _contextEnkontrol.Select<dynamic>(EnkontrolEnum.CplanProd, new OdbcConsultaDTO()
                                {
                                    consulta =
                                        string.Format(@"SELECT * FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", compra.cc, compra.numeroCompra)
                                }).FirstOrDefault();
                                var registroCompraDetalleEK = _contextEnkontrol.Select<OrdenCompraDetDTO>(EnkontrolEnum.CplanProd, new OdbcConsultaDTO()
                                {
                                    consulta =
                                        string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", compra.cc, compra.numeroCompra)
                                }).FirstOrDefault();

                                string nombreObra = _context.tblC_Nom_CatalogoCC.Where(x => x.cc == compra.cc).Select(x => x.ccDescripcion).FirstOrDefault();

                                cellData.Add(new object[] {
                                    compra.cc,
                                    registroCompraDetalleEK != null ? registroCompraDetalleEK.num_requisicion.ToString() : "",
                                    nombreObra,
                                    registroCompraEK != null ? Convert.ToDecimal(registroCompraEK.sub_total, CultureInfo.InvariantCulture).ToString("C") : "0",
                                    registroCompraEK != null ? Convert.ToDecimal(registroCompraEK.iva, CultureInfo.InvariantCulture).ToString("C") : "0",
                                    registroCompraEK != null ? Convert.ToDecimal(registroCompraEK.total, CultureInfo.InvariantCulture).ToString("C") : "0",
                                    compra.numeroCompra
                                });

                                if (registroCompraEK == null || registroCompraDetalleEK == null)
                                {
                                    hoja.Cells[string.Format("A{0}:G{0}", contadorRenglones)].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                    hoja.Cells[string.Format("A{0}:G{0}", contadorRenglones)].Style.Fill.BackgroundColor.SetColor(255, 255, 0, 0);
                                }

                                contadorRenglones++;
                            }

                            //Campo Total en el encabezado. Se setea antes del renglón de totales para evitar que se duplique la cantidad.
                            hoja.Cells["F3"].LoadFromArrays(new List<string[]>() { new string[] { cellData.Sum(x => Convert.ToDecimal(x[5].ToString().Replace("$", "").Replace(",", ""))).ToString("C") } });

                            //Renglón Totales
                            cellData.Add(new object[] {
                                "",
                                "",
                                "TOTAL",
                                cellData.Sum(x => Convert.ToDecimal(x[3].ToString().Replace("$", "").Replace(",", ""))).ToString("C"),
                                cellData.Sum(x => Convert.ToDecimal(x[4].ToString().Replace("$", "").Replace(",", ""))).ToString("C"),
                                cellData.Sum(x => Convert.ToDecimal(x[5].ToString().Replace("$", "").Replace(",", ""))).ToString("C"),
                                ""
                            });

                            hoja.Cells[6, 1].LoadFromArrays(cellData);

                            hoja.Cells["A1:G" + contadorRenglones].Style.Font.Name = "Calibri Light";
                            hoja.Cells["C" + contadorRenglones].Style.Font.Bold = true;

                            hoja.Cells["A6:G" + contadorRenglones].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                            hoja.Cells["A6:G" + contadorRenglones].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                            hoja.Cells["A6:G" + contadorRenglones].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                            hoja.Cells["A6:G" + contadorRenglones].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                            hoja.Cells[hoja.Dimension.Address].AutoFitColumns();
                            #endregion
                        }
                        #endregion
                    }

                    excel.Compression = OfficeOpenXml.CompressionLevel.BestSpeed;

                    var bytes = new MemoryStream();

                    using (var exportData = new MemoryStream())
                    {
                        excel.SaveAs(exportData);
                        bytes = exportData;
                    }

                    return bytes;
                }
            }
            catch (Exception e)
            {
                LogError(0, 0, _NOMBRE_CONTROLADOR, "DescargarExcelSUA", e, AccionEnum.CONSULTA, 0, new { tipo_nomina = tipo_nomina, anio = anio, periodo = periodo });

                return null;
            }
        }
        #endregion

        #region SUA
        public Dictionary<string, object> GetSUA(int tipoDocumento, int year, int periodo)
        {
            var resultado = new Dictionary<string, object>();

            using (var _ctx = new MainContext())
            {
                try
                {
                    var _ccs = _ccFS_SP.GetCCsNomina(null);
                    var suasPeriodo = new List<SuasPeriodoDTO>();
                    var tienePoliza = false;
                    var poliza = "";
                    var idSua = 0;

                    if (tipoDocumento == (int)ClasificacionDocumentosSUAEnum.cedulaMensual)
                    {
                        var suas = _ctx.tblC_Nom_SUA.FirstOrDefault(x => x.anio == year && x.tipoDocumento == tipoDocumento && x.periodo == periodo && x.registroActivo);

                        if (suas != null)
                        {
                            idSua = suas.id;
                            //tienePoliza = suas.polizaGuardada;
                            poliza = suas.poliza;

                            var detalle = _ctx.tblC_Nom_SUA_Resumen.Where(x => x.suaID == suas.id && x.registroActivo).ToList();
                            foreach (var gbCC in detalle.GroupBy(x => x.cc).OrderBy(x => x.Key))
                            {
                                var ccInfo = _ccs.FirstOrDefault(x => x.cc == gbCC.Key);
                                tblP_CC ccInfo2 = null;
                                if (ccInfo == null)
                                {
                                    ccInfo2 = _ctx.tblP_CC.FirstOrDefault(x => x.cc == gbCC.Key);
                                }

                                var suaPeriodo = new SuasPeriodoDTO();
                                suaPeriodo.cc = gbCC.Key;
                                suaPeriodo.estado = "";
                                suaPeriodo.registroPatronal = "";
                                suaPeriodo.ccDescripcion = ccInfo != null ? ccInfo.descripcion : ccInfo2 != null ? ccInfo2.descripcion.Trim() : "";
                                suaPeriodo.imssPatronal = gbCC.Sum(x => x.imssPatronal);
                                suaPeriodo.imssObrero = gbCC.Sum(x => x.imssObrero);
                                suaPeriodo.rcvPatronal = gbCC.Sum(x => x.rcvPatronal);
                                suaPeriodo.rcvObrero = gbCC.Sum(x => x.rcvObrero);
                                suaPeriodo.infonavit = gbCC.Sum(x => x.infonavit + x.amortizacion);
                                suaPeriodo.total = suaPeriodo.imssPatronal + suaPeriodo.imssObrero + suaPeriodo.rcvPatronal + suaPeriodo.rcvObrero + suaPeriodo.infonavit;
                                suasPeriodo.Add(suaPeriodo);
                            }
                        }
                    }
                    else if (tipoDocumento == (int)ClasificacionDocumentosSUAEnum.cedulaIsnMensual)
                    {
                        var suas = _ctx.tblC_Nom_SUA.FirstOrDefault(x => x.anio == year && x.tipoDocumento == (int)ClasificacionDocumentosSUAEnum.cedulaIsnMensual && x.periodo == periodo && x.registroActivo);

                        if (suas != null)
                        {
                            idSua = suas.id;
                            //tienePoliza = suas.polizaGuardada;
                            poliza = suas.poliza;

                            var detalle = _ctx.tblC_Nom_SUA_Resumen.Where(x => x.suaID == suas.id && x.registroActivo).ToList();
                            foreach (var gbCC in detalle.GroupBy(x => x.cc).OrderBy(x => x.Key))
                            {
                                var ccInfo = _ccs.FirstOrDefault(x => x.cc == gbCC.Key);
                                tblP_CC ccInfo2 = null;
                                if (ccInfo == null)
                                {
                                    ccInfo2 = _ctx.tblP_CC.FirstOrDefault(x => x.cc == gbCC.Key);
                                }

                                var suaPeriodo = new SuasPeriodoDTO();
                                suaPeriodo.cc = gbCC.Key;
                                suaPeriodo.estado = "";
                                suaPeriodo.registroPatronal = "";
                                suaPeriodo.ccDescripcion = ccInfo != null ? ccInfo.descripcion : ccInfo2 != null ? ccInfo2.descripcion.Trim() : "";
                                //suaPeriodo.imssPatronal = gbCC.Sum(x => x.imssPatronal);
                                //suaPeriodo.imssObrero = gbCC.Sum(x => x.imssObrero);
                                //suaPeriodo.rcvPatronal = gbCC.Sum(x => x.rcvPatronal);
                                //suaPeriodo.rcvObrero = gbCC.Sum(x => x.rcvObrero);
                                //suaPeriodo.infonavit = gbCC.Sum(x => x.infonavit + x.amortizacion);
                                //suaPeriodo.total = suaPeriodo.imssPatronal + suaPeriodo.imssObrero + suaPeriodo.rcvPatronal + suaPeriodo.rcvObrero + suaPeriodo.infonavit;
                                suaPeriodo.isn = gbCC.Sum(x => x.isn);
                                suaPeriodo.total = suaPeriodo.isn;
                                suasPeriodo.Add(suaPeriodo);
                            }
                        }
                    }
                    else
                    {
                        var suas = _ctx.tblC_Nom_SUA.FirstOrDefault(x => x.anio == year && x.tipoDocumento == tipoDocumento && x.periodo == periodo && x.registroActivo);

                        if (suas != null)
                        {
                            idSua = suas.id;
                            //tienePoliza = suas.polizaGuardada;
                            poliza = suas.poliza;

                            foreach (var gbCC in suas.suaDetalle.GroupBy(x => x.cc).OrderBy(x => x.Key))
                            {
                                var ccInfo = _ccs.FirstOrDefault(x => x.cc == gbCC.Key);
                                tblP_CC ccInfo2 = null;
                                if (ccInfo == null)
                                {
                                    ccInfo2 = _ctx.tblP_CC.FirstOrDefault(x => x.cc == gbCC.Key);
                                }

                                var suaPeriodo = new SuasPeriodoDTO();
                                suaPeriodo.cc = gbCC.Key;
                                suaPeriodo.estado = "";
                                suaPeriodo.registroPatronal = "";
                                suaPeriodo.ccDescripcion = ccInfo != null ? ccInfo.descripcion : ccInfo2 != null ? ccInfo2.descripcion.Trim() : "";
                                suaPeriodo.imssPatronal = gbCC.Sum(x => x.patronal) / (tipoDocumento == (int)ClasificacionDocumentosSUAEnum.imss ? 4 : 8);
                                suaPeriodo.imssObrero = gbCC.Sum(x => x.obrera) / (tipoDocumento == (int)ClasificacionDocumentosSUAEnum.imss ? 4 : 8);
                                suaPeriodo.rcvPatronal = gbCC.Sum(x => x.rcvPatronal + x.rcvRetiro) / (tipoDocumento == (int)ClasificacionDocumentosSUAEnum.imss ? 4 : 8);
                                suaPeriodo.rcvObrero = gbCC.Sum(x => x.rcvObrera) / (tipoDocumento == (int)ClasificacionDocumentosSUAEnum.imss ? 4 : 8);
                                suaPeriodo.infonavit = gbCC.Sum(x => x.infonavitAportacionPatronal + x.infonavitAmortizacion) / (tipoDocumento == (int)ClasificacionDocumentosSUAEnum.imss ? 4 : 8);
                                suaPeriodo.total = suaPeriodo.imssPatronal + suaPeriodo.imssObrero + suaPeriodo.rcvPatronal + suaPeriodo.rcvObrero + suaPeriodo.infonavit;
                                suasPeriodo.Add(suaPeriodo);
                            }
                        }
                    }

                    resultado.Add(SUCCESS, true);
                    resultado.Add(ITEMS, suasPeriodo);
                    resultado.Add("tienePoliza", tienePoliza);
                    resultado.Add("poliza", poliza);
                    resultado.Add("idSua", idSua);
                }
                catch (Exception ex)
                {
                    LogError(_SISTEMA, 0, "NominaController", "GetSUA", ex, AccionEnum.CONSULTA, 0, new { tipoDocumento, year, periodo });
                    resultado.Add(SUCCESS, false);
                    resultado.Add(SUCCESS, ex.Message);
                }
            }

            return resultado;
        }

        public Dictionary<string, object> GenerarPolizaSUA(int suaId, DateTime fecha, int tipoDocumento)
        {
            var resultado = new Dictionary<string, object>();

            using (var _ctx = new MainContext())
            {
                try
                {
                    var movimientos = new List<sc_movpolDTO>();
                    var poliza = new sc_polizasDTO();

                    var empleado = _ctx.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                    var sua = _ctx.tblC_Nom_SUA.First(x => x.id == suaId);

                    var bancoPrincipal = _ctx.tblC_Nom_SUA_BancoCuenta.First(x => x.estado == "*" && x.registroActivo);
                    var otrosBancos = _ctx.tblC_Nom_SUA_BancoCuenta.Where(x => x.estado != "*" && x.registroActivo).ToList();

                    var ccs = _ctx.tblC_Nom_CatalogoCC.Where(x => x.estatus).ToList();

                    if ((ClasificacionDocumentosSUAEnum)sua.tipoDocumento == ClasificacionDocumentosSUAEnum.cedulaMensual && tipoDocumento == (int)ClasificacionDocumentosSUAEnum.cedulaMensual)
                    {
                        var detalleMensual = _ctx.tblC_Nom_SUA_Resumen.Where(x => x.suaID == sua.id && x.registroActivo).ToList();

                        var _referencia = ObtenerReferencia(fecha, 1110);

                        int contador = 1;
                        foreach (var gbCC in detalleMensual.GroupBy(x => x.cc).OrderBy(x => x.Key))
                        {
                            var lineasDelCC = new List<sc_movpolDTO>();

                            for (int i = 0; i < 6; i++)
                            {
                                var movIsn = new sc_movpolDTO();

                                var mov = new sc_movpolDTO();
                                mov.year = fecha.Year;
                                mov.mes = fecha.Month;
                                mov.tp = "03";
                                mov.linea = contador;
                                mov.tm = (int)TipoMovimientoEnum.Cargo;
                                mov.referencia = _referencia;
                                mov.cc = gbCC.Key;
                                mov.concepto = "PAGO COSTO SOCIAL " + fecha.AddMonths(-1).ToString("MMMM").ToUpper();

                                switch (i)
                                {
                                    case 0:
                                        mov.monto = gbCC.Sum(x => x.imssPatronal);
                                        mov.cta = 2115;
                                        mov.scta = 5;
                                        mov.sscta = 0;
                                        mov.digito = 0;
                                        lineasDelCC.Add(mov);
                                        break;
                                    case 1:
                                        mov.monto = gbCC.Sum(x => x.imssObrero);
                                        mov.cta = 2115;
                                        mov.scta = 11;
                                        mov.sscta = 0;
                                        mov.digito = 0;
                                        lineasDelCC.Add(mov);
                                        break;
                                    case 2:
                                        mov.monto = gbCC.Sum(x => x.rcvPatronal);
                                        mov.cta = 2115;
                                        mov.scta = 9;
                                        mov.sscta = 0;
                                        mov.digito = 0;
                                        lineasDelCC.Add(mov);
                                        break;
                                    case 3:
                                        mov.monto = gbCC.Sum(x => x.rcvObrero);
                                        mov.cta = 2115;
                                        mov.scta = 15;
                                        mov.sscta = 0;
                                        mov.digito = 7;
                                        lineasDelCC.Add(mov);
                                        break;
                                    case 4:
                                        mov.monto = gbCC.Sum(x => x.infonavit);
                                        mov.cta = 2115;
                                        mov.scta = 8;
                                        mov.sscta = 0;
                                        mov.digito = 0;
                                        lineasDelCC.Add(mov);
                                        break;
                                    case 5:
                                        mov.monto = gbCC.Sum(x => x.amortizacion);
                                        mov.cta = 2115;
                                        mov.scta = 12;
                                        mov.sscta = 0;
                                        mov.digito = 0;
                                        lineasDelCC.Add(mov);
                                        break;
                                    //case 6:
                                    //    var _refNum = Convert.ToInt32(_referencia) + 1;
                                    //    _referencia = _refNum.ToString();

                                    //    mov.referencia = _referencia;
                                    //    mov.monto = gbCC.Sum(x => x.isn);
                                    //    mov.cta = 2115;
                                    //    mov.scta = 6;
                                    //    mov.sscta = 0;
                                    //    mov.digito = 0;

                                    //    contador++;
                                    //    movIsn.year = fecha.Year;
                                    //    movIsn.mes = fecha.Month;
                                    //    movIsn.tp = "03";
                                    //    movIsn.linea = contador;
                                    //    movIsn.tm = (int)TipoMovimientoEnum.Abono;
                                    //    movIsn.referencia = _referencia;
                                    //    movIsn.cc = gbCC.Key;
                                    //    movIsn.concepto = "PAGO COSTO SOCIAL " + fecha.AddMonths(-1).ToString("MMMM").ToUpper();;
                                    //    movIsn.monto = mov.monto * -1;

                                    //    var bancoMov = otrosBancos.FirstOrDefault(x => x.estado == gbCC.First().estado);
                                    //    if (bancoMov != null)
                                    //    {
                                    //        movIsn.cta = bancoMov.cta;
                                    //        movIsn.scta = bancoMov.scta;
                                    //        movIsn.sscta = bancoMov.sscta;
                                    //        movIsn.digito = bancoMov.digito;
                                    //    }
                                    //    else
                                    //    {
                                    //        movIsn.cta = bancoPrincipal.cta;
                                    //        movIsn.scta = bancoPrincipal.scta;
                                    //        movIsn.sscta = bancoPrincipal.sscta;
                                    //        movIsn.digito = bancoPrincipal.digito;
                                    //    }

                                    //    movIsn.iclave = 0;
                                    //    movIsn.itm = 71;
                                    //    break;
                                }

                                mov.iclave = 0;
                                mov.itm = 0;

                                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                                {
                                    var area_cuenta = gbCC.First().ac.Split('-');
                                    mov.area = Convert.ToInt32(area_cuenta[0]);
                                    mov.cuenta_oc = Convert.ToInt32(area_cuenta[1]);
                                }

                                if (mov.monto != 0)
                                {
                                    movimientos.Add(mov);
                                }

                                //if (i == 6)
                                //{
                                //    if (movIsn.monto != 0)
                                //    {
                                //        movimientos.Add(movIsn);
                                //    }
                                //}

                                contador++;
                            }

                            {

                                var mov = new sc_movpolDTO();
                                mov.year = fecha.Year;
                                mov.mes = fecha.Month;
                                mov.tp = "03";
                                mov.linea = contador;
                                mov.tm = (int)TipoMovimientoEnum.Abono;
                                mov.referencia = lineasDelCC.First().referencia;
                                mov.cc = gbCC.Key;
                                mov.concepto = "PAGO COSTO SOCIAL " + fecha.AddMonths(-1).ToString("MMMM").ToUpper(); ;
                                mov.monto = lineasDelCC.Sum(x => x.monto) * -1;
                                mov.cta = 1110;
                                mov.scta = 6;
                                mov.sscta = vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora ? 7 : vSesiones.sesionEmpresaActual != (int)EmpresaEnum.GCPLAN ? 5 : 2;
                                mov.digito = vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora ? 1 : 0;

                                mov.iclave = 0;
                                mov.itm = 71;

                                movimientos.Add(mov);

                                var _refNum = Convert.ToInt32(_referencia) + 1;
                                _referencia = _refNum.ToString();

                                contador++;
                            }
                        }
                    }
                    else if ((ClasificacionDocumentosSUAEnum)tipoDocumento == ClasificacionDocumentosSUAEnum.cedulaIsnMensual)
                    {
                        var detalleMensual = _ctx.tblC_Nom_SUA_Resumen.Where(x => x.suaID == sua.id && x.registroActivo).ToList();

                        var _referencia = ObtenerReferencia(fecha, 1110);

                        int contador = 1;
                        foreach (var gbCC in detalleMensual.GroupBy(x => x.cc).OrderBy(x => x.Key))
                        {
                            var lineasDelCC = new List<sc_movpolDTO>();

                            for (int i = 6; i < 7; i++)
                            {
                                var movIsn = new sc_movpolDTO();

                                var mov = new sc_movpolDTO();
                                mov.year = fecha.Year;
                                mov.mes = fecha.Month;
                                mov.tp = "03";
                                mov.linea = contador;
                                mov.tm = (int)TipoMovimientoEnum.Cargo;
                                mov.referencia = _referencia;
                                mov.cc = gbCC.Key;
                                mov.concepto = "PAGO 2% ISN " + fecha.AddMonths(-1).ToString("MMMM").ToUpper();

                                switch (i)
                                {

                                    case 6:
                                        var _refNum = Convert.ToInt32(_referencia) + 1;
                                        _referencia = _refNum.ToString();

                                        mov.referencia = _referencia;
                                        mov.monto = gbCC.Sum(x => x.isn);
                                        mov.cta = 2115;
                                        mov.scta = 6;
                                        mov.sscta = 0;
                                        mov.digito = 0;

                                        contador++;
                                        movIsn.year = fecha.Year;
                                        movIsn.mes = fecha.Month;
                                        movIsn.tp = "03";
                                        movIsn.linea = contador;
                                        movIsn.tm = (int)TipoMovimientoEnum.Abono;
                                        movIsn.referencia = _referencia;
                                        movIsn.cc = gbCC.Key;
                                        movIsn.concepto = "PAGO 2% ISN " + fecha.AddMonths(-1).ToString("MMMM").ToUpper(); ;
                                        movIsn.monto = mov.monto * -1;

                                        var bancoMov = otrosBancos.FirstOrDefault(x => x.estado == gbCC.First().estado);
                                        if (bancoMov != null)
                                        {
                                            movIsn.cta = bancoMov.cta;
                                            movIsn.scta = bancoMov.scta;
                                            movIsn.sscta = bancoMov.sscta;
                                            movIsn.digito = bancoMov.digito;
                                        }
                                        else
                                        {
                                            movIsn.cta = bancoPrincipal.cta;
                                            movIsn.scta = bancoPrincipal.scta;
                                            movIsn.sscta = bancoPrincipal.sscta;
                                            movIsn.digito = bancoPrincipal.digito;
                                        }

                                        movIsn.iclave = 0;
                                        movIsn.itm = 71;
                                        break;
                                }

                                mov.iclave = 0;
                                mov.itm = 0;

                                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                                {
                                    var area_cuenta = gbCC.First().ac.Split('-');
                                    mov.area = Convert.ToInt32(area_cuenta[0]);
                                    mov.cuenta_oc = Convert.ToInt32(area_cuenta[1]);
                                }

                                if (mov.monto != 0)
                                {
                                    movimientos.Add(mov);
                                    lineasDelCC.Add(mov);
                                }

                                if (i == 6)
                                {
                                    if (movIsn.monto != 0)
                                    {
                                        movimientos.Add(movIsn);
                                        lineasDelCC.Add(movIsn);
                                    }
                                }

                                contador++;
                            }

                            //if (lineasDelCC.Count > 0)
                            //{
                            //    var mov = new sc_movpolDTO();
                            //    mov.year = fecha.Year;
                            //    mov.mes = fecha.Month;
                            //    mov.tp = "03";
                            //    mov.linea = contador;
                            //    mov.tm = (int)TipoMovimientoEnum.Abono;
                            //    mov.referencia = lineasDelCC.First().referencia;
                            //    mov.cc = gbCC.Key;
                            //    mov.concepto = "PAGO 2% ISN " + fecha.AddMonths(-1).ToString("MMMM").ToUpper(); ;
                            //    mov.monto = lineasDelCC.Sum(x => x.monto) * -1;
                            //    mov.cta = 1110;
                            //    mov.scta = 6;
                            //    mov.sscta = 5;
                            //    mov.digito = 0;

                            //    mov.iclave = 0;
                            //    mov.itm = 71;

                            //    movimientos.Add(mov);

                            //    var _refNum = Convert.ToInt32(_referencia) + 1;
                            //    _referencia = _refNum.ToString();

                            //    contador++;
                            //}
                        }
                    }
                    else
                    {
                        int contador = 1;
                        foreach (var gbCC in sua.suaDetalle.GroupBy(x => x.cc).OrderBy(x => x.Key))
                        {
                            var cc3digitos = gbCC.Key.PadLeft(3, '0');
                            var cc = ccs.FirstOrDefault(x => x.cc == cc3digitos);
                            if (cc == null)
                            {
                                throw new Exception("No se encontró información del CC " + gbCC.Key);
                            }

                            switch ((ClasificacionDocumentosSUAEnum)sua.tipoDocumento)
                            {
                                case ClasificacionDocumentosSUAEnum.imss:
                                    {
                                        for (int i = 0; i < 2; i++)
                                        {
                                            var mov = new sc_movpolDTO();
                                            mov.year = fecha.Year;
                                            mov.mes = fecha.Month;
                                            mov.tp = "03";
                                            mov.linea = contador;
                                            mov.referencia = "1";
                                            mov.cc = gbCC.Key;
                                            mov.concepto = "PROVISION IMSS " + fecha.ToString("MMMM").ToUpper(); ;

                                            if (i == 0)
                                            {
                                                mov.tm = (int)TipoMovimientoEnum.Cargo;
                                                mov.monto = gbCC.Sum(x => x.patronal) / 4;

                                                if (cc.clasificacionCcId == 1)
                                                {
                                                    mov.cta = 5280;
                                                    mov.scta = 13;
                                                    mov.sscta = 1;
                                                    mov.digito = 3;
                                                }
                                                else
                                                {
                                                    mov.cta = 5000;
                                                    mov.scta = 15;
                                                    mov.sscta = 1;
                                                    mov.digito = 0;
                                                }
                                            }
                                            else
                                            {
                                                mov.tm = (int)TipoMovimientoEnum.Abono;
                                                mov.monto = (gbCC.Sum(x => x.patronal) / 4) * -1;
                                                mov.cta = 2115;
                                                mov.scta = 5;
                                                mov.sscta = 0;
                                                mov.digito = 0;
                                            }

                                            mov.iclave = 0;
                                            mov.itm = 0;

                                            movimientos.Add(mov);

                                            contador++;
                                        }
                                    }
                                    break;
                                case ClasificacionDocumentosSUAEnum.infonavit:
                                    {
                                        for (int i = 0; i < 4; i++)
                                        {
                                            var mov = new sc_movpolDTO();
                                            mov.year = fecha.Year;
                                            mov.mes = fecha.Month;
                                            mov.tp = "03";
                                            mov.linea = contador;
                                            mov.tm = (int)TipoMovimientoEnum.Cargo;
                                            mov.referencia = "1";
                                            mov.cc = gbCC.Key;

                                            switch (i)
                                            {
                                                case 0:
                                                    mov.concepto = "PROVISION RCV " + fecha.ToString("MMMM").ToUpper(); ;
                                                    mov.tm = (int)TipoMovimientoEnum.Cargo;
                                                    mov.monto = gbCC.Sum(x => x.rcvPatronal + x.rcvRetiro) / 8;

                                                    if (cc.clasificacionCcId == 1)
                                                    {
                                                        mov.cta = 5280;
                                                        mov.scta = 13;
                                                        mov.sscta = 2;
                                                        mov.digito = 4;
                                                    }
                                                    else
                                                    {
                                                        mov.cta = 5000;
                                                        mov.scta = 15;
                                                        mov.sscta = 2;
                                                        mov.digito = 1;
                                                    }
                                                    break;
                                                case 1:
                                                    mov.concepto = "PROVISION RCV " + fecha.ToString("MMMM").ToUpper(); ;
                                                    mov.tm = (int)TipoMovimientoEnum.Abono;
                                                    mov.monto = (gbCC.Sum(x => x.rcvPatronal + x.rcvRetiro) / 8) * -1;
                                                    mov.cta = 2115;
                                                    mov.scta = 9;
                                                    mov.sscta = 0;
                                                    mov.digito = 0;
                                                    break;
                                                case 2:
                                                    mov.concepto = "PROVISION INFONAVIT " + fecha.ToString("MMMM").ToUpper(); ;
                                                    mov.tm = (int)TipoMovimientoEnum.Cargo;
                                                    mov.monto = gbCC.Sum(x => x.infonavitAportacionPatronal) / 8;

                                                    if (cc.clasificacionCcId == 1)
                                                    {
                                                        mov.cta = 5280;
                                                        mov.scta = 13;
                                                        mov.sscta = 3;
                                                        mov.digito = 5;
                                                    }
                                                    else
                                                    {
                                                        mov.cta = 5000;
                                                        mov.scta = 15;
                                                        mov.sscta = 3;
                                                        mov.digito = 2;
                                                    }
                                                    break;
                                                case 3:
                                                    mov.concepto = "PROVISION INFONAVIT " + fecha.ToString("MMMM").ToUpper(); ;
                                                    mov.tm = (int)TipoMovimientoEnum.Abono;
                                                    mov.monto = (gbCC.Sum(x => x.infonavitAportacionPatronal) / 8) * -1;
                                                    mov.cta = 2115;
                                                    mov.scta = 8;
                                                    mov.sscta = 0;
                                                    mov.digito = 0;
                                                    break;
                                            }

                                            mov.iclave = 0;
                                            mov.itm = 0;

                                            movimientos.Add(mov);

                                            contador++;
                                        }
                                    }
                                    break;
                            }
                        }
                    }

                    poliza.year = fecha.Year;
                    poliza.mes = fecha.Month;
                    poliza.tp = "03";
                    poliza.fechapol = fecha;
                    poliza.cargos = movimientos.Where(x => x.tm == (int)TipoMovimientoEnum.Cargo).Sum(x => x.monto);
                    poliza.abonos = movimientos.Where(x => x.tm == (int)TipoMovimientoEnum.Abono).Sum(x => x.monto);
                    poliza.generada = "C";
                    poliza.status = "C";
                    poliza.status_lock = "N";
                    poliza.fec_hora_movto = DateTime.Now;
                    poliza.usuario_movto = null;
                    poliza.fecha_hora_crea = poliza.fec_hora_movto;
                    poliza.usuario_crea = empleado != null ? empleado.empleado : 1;
                    poliza.concepto = "Póliza de DIARIO";

                    var poliza_movpol = new PolizaMovPolEkDTO();
                    poliza_movpol.poliza = poliza;
                    poliza_movpol.movimientos = movimientos;

                    resultado.Add(SUCCESS, true);
                    resultado.Add(ITEMS, poliza_movpol);
                    resultado.Add("suaId", sua.id);
                }
                catch (Exception ex)
                {
                    LogError(_SISTEMA, 0, "NominaController", "GenerarPolizaSUA", ex, AccionEnum.CONSULTA, 0, new { suaId });

                    resultado.Add(SUCCESS, false);
                    resultado.Add(SUCCESS, ex.Message);
                }
            }

            return resultado;
        }

        private string ObtenerReferencia(DateTime fecha, int ctaBanco)
        {
            int referenciaInicial = 100000;
            int ultimaReferenciaPQ = _context.tblC_Nom_SUA.Select(m => m.id).OrderByDescending(o => o).FirstOrDefault();
            referenciaInicial += ultimaReferenciaPQ;
            do
            {
            } while (!_polizaEkFs.ReferenciaDisponible(fecha, ctaBanco, referenciaInicial++));

            string referencia = (referenciaInicial - 1).ToString();

            return referencia;
        }

        public Dictionary<string, object> RegistrarPolizaSUA(PolizaMovPolEkDTO poliza_movimientos, int suaId, ClasificacionDocumentosSUAEnum tipoDocumento)
        {
            var resultado = new Dictionary<string, object>();

            using (var _ctx = new MainContext())
            {
                using (var transaccionSP = _ctx.Database.BeginTransaction())
                {
                    using (var conexionEK = new Conexion().ConexionEKAdm())
                    {
                        using (var transaccionEK = conexionEK.BeginTransaction())
                        {
                            try
                            {
                                var sua = _ctx.tblC_Nom_SUA.First(f => f.id == suaId /*&& string.IsNullOrEmpty(f.poliza)*/);

                                if (sua != null)
                                {
                                    if (sua.tipoDocumento == (int)ClasificacionDocumentosSUAEnum.cedulaMensual)
                                    {
                                        _polizaEkFs.SetContext(conexionEK);
                                        _polizaEkFs.SetTransaccion(transaccionEK);
                                        string numeroPoliza = _polizaEkFs.GuardarPoliza(poliza_movimientos.poliza, poliza_movimientos.movimientos);

                                        _polizaSpFs.SetContext(_ctx);
                                        _polizaSpFs.SetTransaccion(transaccionSP);
                                        var polizaPoliza = numeroPoliza.Split('-')[2];
                                        poliza_movimientos.poliza.poliza = Convert.ToInt32(polizaPoliza);
                                        var resultadoSP = _polizaSpFs.GuardarPoliza(poliza_movimientos.poliza, poliza_movimientos.movimientos);

                                        sua.poliza = numeroPoliza;
                                        sua.polizaGuardada = true;
                                        _ctx.SaveChanges();

                                        var infoAConciliar = GenerarInfoConcilia(poliza_movimientos.movimientos, poliza_movimientos.poliza);

                                        foreach (var concilia in infoAConciliar)
                                        {
                                            _polizaEkFs.GuardarParaConciliar(concilia);
                                        }

                                        if (tipoDocumento == ClasificacionDocumentosSUAEnum.cedulaMensual)
                                        {
                                            #region Crear Compras Automáticas Autorizadas
                                            var listaDetalleSUA = _context.tblC_Nom_SUA_Resumen.Where(x => x.registroActivo && x.suaID == sua.id).ToList();
                                            var SUAGemelo = _ctx.tblC_Nom_SUA.FirstOrDefault(x => x.periodo == sua.periodo && x.anio == sua.anio && x.tipoNomina == sua.tipoNomina && x.tipoDocumento == 4 && x.registroActivo);

                                            if (SUAGemelo == null)
                                            {
                                                throw new Exception("No se ha registrado el documento CÉDULA PAGO ISN. Favor de procesarlo e intentar de nuevo.");
                                            }

                                            var listaDetalleSUAGemelo = _ctx.tblC_Nom_SUA_Resumen.Where(x => x.registroActivo && x.suaID == SUAGemelo.id).ToList();

                                            foreach (var det in listaDetalleSUA)
                                            {
                                                var detGemelo = listaDetalleSUAGemelo.FirstOrDefault(x => x.cc == det.cc && x.ac == det.ac && x.registroActivo);
                                                #region Información Inicial
                                                decimal cantidadPendiente = 0m;

                                                tblC_Nom_RequisicionGlobal requisicionGlobal = null;
                                                EnkontrolEnum conexionEnkontrol = EnkontrolEnum.CplanProd;

                                                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                                                {
                                                    case EmpresaEnum.Construplan:
                                                        conexionEnkontrol = EnkontrolEnum.CplanProd;
                                                        requisicionGlobal = _context.tblC_Nom_RequisicionGlobal.FirstOrDefault(x => x.registroActivo && x.cc == det.cc && x.tipoRequisicion == TipoRequisicionGlobalEnum.TyL_OCSI_COSTO_SOCIAL);
                                                        break;
                                                    case EmpresaEnum.Arrendadora:
                                                        conexionEnkontrol = EnkontrolEnum.ArrenProd;
                                                        requisicionGlobal = _context.tblC_Nom_RequisicionGlobal.FirstOrDefault(x => x.registroActivo && x.cc == det.cc && x.tipoRequisicion == TipoRequisicionGlobalEnum.COSTO_SOCIAL);
                                                        break;
                                                    case EmpresaEnum.GCPLAN:
                                                        conexionEnkontrol = EnkontrolEnum.GCPLAN;
                                                        requisicionGlobal = _context.tblC_Nom_RequisicionGlobal.FirstOrDefault(x => x.registroActivo && x.cc == det.cc && x.tipoRequisicion == TipoRequisicionGlobalEnum.TyL_OCSI_COSTO_SOCIAL);
                                                        break;
                                                }

                                                if (requisicionGlobal == null)
                                                {
                                                    throw new Exception("No se encuentra la requisición global para el centro de costo \"" + det.cc + "\".");
                                                }

                                                var registroRequisicionGlobal = _contextEnkontrol.Select<dynamic>(conexionEnkontrol, new OdbcConsultaDTO()
                                                {
                                                    consulta = string.Format(@"SELECT * FROM so_requisicion WHERE cc = '{0}' AND numero = {1}", requisicionGlobal.cc, requisicionGlobal.numero)
                                                }).FirstOrDefault();

                                                if (registroRequisicionGlobal == null)
                                                {
                                                    throw new Exception("No se encuentra el registro de la requisición global para el centro de costo \"" + det.cc + "\".");
                                                }

                                                var area = 0;
                                                var cuenta = 0;
                                                var registroCentroCosto = _context.tblC_Nom_CatalogoCC.FirstOrDefault(x => x.estatus && x.cc == det.cc);

                                                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                                                {
                                                    area = (int)registroCentroCosto.area;
                                                    cuenta = (int)registroCentroCosto.cuenta;
                                                }

                                                int insumo = 0;

                                                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                                                {
                                                    case EmpresaEnum.Construplan:
                                                    case EmpresaEnum.GCPLAN:
                                                        switch (registroCentroCosto.clasificacionCcId)
                                                        {
                                                            case 1: //Administración Central
                                                                insumo = 7070000;
                                                                break;
                                                            case 2: //Foránea
                                                                insumo = 6070000;
                                                                break;
                                                        }
                                                        break;
                                                    case EmpresaEnum.Arrendadora:
                                                        insumo = 6080001;
                                                        break;
                                                }

                                                var ultimaCompra = _contextEnkontrol.Select<OrdenCompraDTO>(conexionEnkontrol, new OdbcConsultaDTO
                                                {
                                                    consulta = string.Format(@"SELECT TOP 1 numero FROM so_orden_compra WHERE cc = '{0}' ORDER BY numero DESC", (string)registroRequisicionGlobal.cc)
                                                });
                                                var numeroCompraNueva = 1;

                                                if (ultimaCompra.Count() > 0)
                                                {
                                                    numeroCompraNueva = ultimaCompra[0].numero + 1;
                                                }

                                                DateTime fechapol = poliza_movimientos.poliza.fechapol;
                                                DateTime fechaMesAnterior = new DateTime(fechapol.Year, fechapol.Month, fechapol.Day).AddMonths(-1);
                                                string mesNombre = fechaMesAnterior.ToString("MMMM", CultureInfo.CreateSpecificCulture("es"));
                                                int mesAnioAnterior = fechaMesAnterior.Year;

                                                var ultimaCompraConstruplan = _contextEnkontrol.Select<OrdenCompraDTO>(EnkontrolEnum.CplanProd, new OdbcConsultaDTO
                                                {
                                                    consulta = string.Format(@"SELECT TOP 1 numero FROM so_orden_compra WHERE cc = '{0}' ORDER BY numero DESC", (string)registroRequisicionGlobal.cc)
                                                });
                                                #endregion

                                                #region Compra Costo Social
                                                {
                                                    var proveedor = 5740;
                                                    var registroRequisicionDetalleGlobal = _contextEnkontrol.Select<dynamic>(conexionEnkontrol, new OdbcConsultaDTO
                                                    {
                                                        consulta = string.Format(@"SELECT * FROM so_requisicion_det WHERE cc = '{0}' AND numero = {1}", requisicionGlobal.cc, requisicionGlobal.numero)
                                                    }).FirstOrDefault();
                                                    cantidadPendiente =
                                                        Convert.ToDecimal(registroRequisicionDetalleGlobal.cantidad, CultureInfo.InvariantCulture) - Convert.ToDecimal(registroRequisicionDetalleGlobal.cant_ordenada, CultureInfo.InvariantCulture);

                                                    //Cálculo Costo Social = (det.imssPatronal + det.imssObrero + det.rcvPatronal + det.rcvObrero + det.infonavit + det.amortizacion) * 0.03
                                                    var cantidad = (det.imssPatronal + det.imssObrero + det.rcvPatronal + det.rcvObrero + det.infonavit + det.amortizacion) * 0.03m;

                                                    if (cantidad > 0)
                                                    {
                                                        var iva = cantidad * 0.16m;

                                                        if (cantidad > cantidadPendiente)
                                                        {
                                                            throw new Exception("La cantidad de la compra sobrepasa la cantidad pendiente de ordenar para la requisición \"" + (string)registroRequisicionGlobal.cc + "-" + ((int)registroRequisicionGlobal.numero).ToString() + "\".");
                                                        }

                                                        #region SIGOPLAN
                                                        #region Registro General
                                                        var nuevaCompraSIGOPLAN = new tblCom_OrdenCompra
                                                        {
                                                            cc = registroRequisicionGlobal.cc,
                                                            numero = numeroCompraNueva,
                                                            fecha = DateTime.Now,
                                                            idLibreAbordo = 999,
                                                            tipo_oc_req = "1", //Esto podría no ser fijo.
                                                            compradorSIGOPLAN = 13, //Admin
                                                            compradorEnkontrol = 1, //Admin
                                                            compradorStarsoft = 0,
                                                            moneda = "1",
                                                            tipo_cambio = 1,
                                                            porcent_iva = 16m,
                                                            sub_total = cantidad,
                                                            iva = iva,
                                                            total = cantidad + iva,
                                                            sub_total_rec = 0m,
                                                            iva_rec = 0m,
                                                            total_rec = 0m,
                                                            estatus = "",
                                                            comentarios = "SERV. ADMIVOS.",
                                                            bienes_servicios = "S",
                                                            CFDI = "G03 (Gastos en general)",
                                                            tiempoEntregaDias = 1,
                                                            tiempoEntregaComentarios = string.Format("CS{0}", mesNombre),
                                                            anticipo = false,
                                                            totalAnticipo = cantidad + iva,
                                                            estatusRegistro = true,
                                                            colocada = false,
                                                            colocadaFecha = null,
                                                            correoProveedor = "",
                                                            proveedor = proveedor,
                                                            st_impresa = "",
                                                            autorizo = 1,
                                                            usuario_autoriza = 1,
                                                            fecha_autoriza = DateTime.Now,
                                                            ST_OC = "A",
                                                            empleado_autoriza = 1,
                                                            empleadoUltimaAccion = 1,
                                                            PERU_proveedor = "",
                                                            PERU_cuentaCorriente = "",
                                                            PERU_formaPago = "",
                                                            PERU_tipoCambio = "",
                                                            PERU_tipoCompra = "",
                                                            fechaUltimaAccion = DateTime.Now,
                                                            tipoUltimaAccion = TipoUltimaAccionEnum.Autorizacion,
                                                            vobo = 0,
                                                            vobo2 = 0
                                                        };

                                                        _context.tblCom_OrdenCompra.Add(nuevaCompraSIGOPLAN);
                                                        _context.SaveChanges();
                                                        #endregion

                                                        #region Registro Detalle
                                                        var nuevaCompraSIGOPLANDet = new tblCom_OrdenCompraDet
                                                        {
                                                            idOrdenCompra = nuevaCompraSIGOPLAN.id,
                                                            cc = nuevaCompraSIGOPLAN.cc,
                                                            numero = nuevaCompraSIGOPLAN.numero,
                                                            partida = 1,
                                                            insumo = insumo,
                                                            fecha_entrega = DateTime.Now.AddDays(1),
                                                            cantidad = cantidad,
                                                            precio = 1,
                                                            importe = cantidad,
                                                            ajuste_cant = 0,
                                                            ajuste_imp = 0,
                                                            num_requisicion = (int)registroRequisicionGlobal.numero,
                                                            part_requisicion = 1,
                                                            cant_recibida = 0,
                                                            imp_recibido = 0,
                                                            fecha_recibido = null,
                                                            cant_canc = 0,
                                                            imp_canc = 0,
                                                            acum_ant = 0,
                                                            max_orig = 0,
                                                            max_ppto = 0,
                                                            area = area,
                                                            cuenta = cuenta,
                                                            porcent_iva = 16,
                                                            iva = iva,
                                                            partidaDescripcion = string.Format("COSTO SOCIAL {0} {1}", mesNombre, mesAnioAnterior),
                                                            estatusRegistro = true
                                                        };

                                                        _context.tblCom_OrdenCompraDet.Add(nuevaCompraSIGOPLANDet);
                                                        _context.SaveChanges();
                                                        #endregion

                                                        #region Actualizar Partida Requisición
                                                        string ccRequisicion = (string)registroRequisicionGlobal.cc;
                                                        int numeroRequisicion = (int)registroRequisicionGlobal.numero;
                                                        var registroRequisicionSIGOPLAN = _context.tblCom_Req.FirstOrDefault(x => x.estatusRegistro && x.cc == ccRequisicion && x.numero == numeroRequisicion);

                                                        if (registroRequisicionSIGOPLAN != null)
                                                        {
                                                            var registroRequisicionDetalleSIGOPLAN = _context.tblCom_ReqDet.FirstOrDefault(x => x.estatusRegistro && x.idReq == registroRequisicionSIGOPLAN.id);

                                                            registroRequisicionDetalleSIGOPLAN.cantOrdenada += cantidad;
                                                            _context.SaveChanges();
                                                        }
                                                        #endregion
                                                        #endregion

                                                        #region Enkontrol
                                                        #region Registro General
                                                        using (var cmd = new OdbcCommand(@"
                                                INSERT INTO so_orden_compra (
                                                    cc, numero, fecha, libre_abordo, tipo_oc_req, comprador, proveedor, moneda, tipo_cambio, porcent_iva, 
                                                    sub_total, iva, total, sub_tot_rec, iva_rec, total_rec, sub_tot_ajus, iva_ajus, total_ajus, st_impresa, 
                                                    estatus, comentarios, solicito, vobo, autorizo, sub_tot_canc, iva_canc, total_canc, total_fac, total_pag, 
                                                    embarquese, empleado_modifica, fecha_modifica, hora_modifica, tc_cc, anticipo, monto_anticipo, almacen, 
                                                    bit_autorecepcion, almacen_autorecepcion, empleado_autorecepcion, rentencion_antes_iva, rentencion_despues_iva, 
                                                    bienes_servicios, concepto_factura, tot_fac_ret, tot_ret_ret, usuario_autoriza, fecha_autoriza, st_autorizada, 
                                                    imprime_porcentaje, ST_OC, empleado_autoriza, vobo_informa, vobo2, vobo3, vobo4, vobo5, vobo6, cambia_vobo, tmc, 
                                                    autoriza_activos, fecha_vobo, fecha_vobo2, fecha_vobo3, bit_af, bit_arrenda, estatus_bloqueo, ruta_pdf, ruta_map) 
                                                VALUES (
                                                    ?,?,?,?,?,?,?,?,?,?, 
                                                    ?,?,?,?,?,?,?,?,?,?, 
                                                    ?,?,?,?,?,?,?,?,?,?, 
                                                    ?,?,?,?,?,?,?,?,?,?, 
                                                    ?,?,?,?,?,?,?,?,?,?, 
                                                    ?,?,?,?,?,?,?,?,?,?, 
                                                    ?,?,?,?,?,?,?,?,?,?)"))
                                                        {
                                                            OdbcParameterCollection parameters = cmd.Parameters;

                                                            parameters.Add("@cc", OdbcType.Char).Value = registroRequisicionGlobal.cc;
                                                            parameters.Add("@numero", OdbcType.Numeric).Value = numeroCompraNueva;
                                                            parameters.Add("@fecha", OdbcType.Date).Value = DateTime.Now;

                                                            //Se guarda siempre con 1 porque en EnKontrol la tabla de libre abordo no contiene todos los almacenes. En SIGOPLAN se guarda con el número de almacén.
                                                            parameters.Add("@libre_abordo", OdbcType.Numeric).Value = 1;

                                                            parameters.Add("@tipo_oc_req", OdbcType.Char).Value = "1";
                                                            parameters.Add("@comprador", OdbcType.Numeric).Value = 1;
                                                            parameters.Add("@proveedor", OdbcType.Numeric).Value = proveedor;
                                                            parameters.Add("@moneda", OdbcType.Char).Value = "1";
                                                            parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = "1";
                                                            parameters.Add("@porcent_iva", OdbcType.Numeric).Value = 16;
                                                            parameters.Add("@sub_total", OdbcType.Numeric).Value = cantidad;
                                                            parameters.Add("@iva", OdbcType.Numeric).Value = iva;
                                                            parameters.Add("@total", OdbcType.Numeric).Value = cantidad + iva;
                                                            parameters.Add("@sub_tot_rec", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@iva_rec", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@total_rec", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@sub_tot_ajus", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@iva_ajus", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@total_ajus", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@st_impresa", OdbcType.Char).Value = "";
                                                            parameters.Add("@estatus", OdbcType.Char).Value = " "; //Se pone un espacio en blanco porque si se guarda un string vacío truena en Enkontrol y no se ven algunos reportes.
                                                            parameters.Add("@comentarios", OdbcType.Char).Value = "SERV. ADMIVOS.";
                                                            parameters.Add("@solicito", OdbcType.Numeric).Value = 1;
                                                            parameters.Add("@vobo", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@autorizo", OdbcType.Numeric).Value = 1;
                                                            parameters.Add("@sub_tot_canc", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@iva_canc", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@total_canc", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@total_fac", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@total_pag", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@embarquese", OdbcType.Char).Value = "";
                                                            parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = 1;
                                                            parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                                            parameters.Add("@hora_modifica", OdbcType.DateTime).Value = DateTime.Now;
                                                            parameters.Add("@tc_cc", OdbcType.Numeric).Value = 1;
                                                            parameters.Add("@anticipo", OdbcType.Char).Value = DBNull.Value;
                                                            parameters.Add("@monto_anticipo", OdbcType.Numeric).Value = DBNull.Value;
                                                            parameters.Add("@almacen", OdbcType.Numeric).Value = DBNull.Value;
                                                            parameters.Add("@bit_autorecepcion", OdbcType.Char).Value = "S";
                                                            parameters.Add("@almacen_autorecepcion", OdbcType.Numeric).Value = 999;
                                                            parameters.Add("@empleado_autorecepcion", OdbcType.Numeric).Value = 7;
                                                            parameters.Add("@rentencion_antes_iva", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@rentencion_despues_iva", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@bienes_servicios", OdbcType.Char).Value = "S";
                                                            parameters.Add("@concepto_factura", OdbcType.Char).Value = DBNull.Value;
                                                            parameters.Add("@tot_fac_ret", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@tot_ret_ret", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@usuario_autoriza", OdbcType.Numeric).Value = 1;
                                                            parameters.Add("@fecha_autoriza", OdbcType.Date).Value = DateTime.Now.Date;
                                                            parameters.Add("@st_autorizada", OdbcType.Char).Value = DBNull.Value;
                                                            parameters.Add("@imprime_porcentaje", OdbcType.Char).Value = "N";
                                                            parameters.Add("@ST_OC", OdbcType.Char).Value = "A";
                                                            parameters.Add("@empleado_autoriza", OdbcType.Numeric).Value = 1;
                                                            parameters.Add("@vobo_informa", OdbcType.Char).Value = "N";
                                                            parameters.Add("@vobo2", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@vobo3", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@vobo4", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@vobo5", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@vobo6", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@cambia_vobo", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@tmc", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@autoriza_activos", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@fecha_vobo", OdbcType.Date).Value = DBNull.Value;
                                                            parameters.Add("@fecha_vobo2", OdbcType.Date).Value = DBNull.Value;
                                                            parameters.Add("@fecha_vobo3", OdbcType.Date).Value = DBNull.Value;
                                                            parameters.Add("@bit_af", OdbcType.Char).Value = "N";
                                                            parameters.Add("@bit_arrenda", OdbcType.Char).Value = "N";
                                                            parameters.Add("@estatus_bloqueo", OdbcType.Char).Value = DBNull.Value;
                                                            parameters.Add("@ruta_pdf", OdbcType.VarChar).Value = DBNull.Value;
                                                            parameters.Add("@ruta_map", OdbcType.VarChar).Value = DBNull.Value;

                                                            cmd.Connection = transaccionEK.Connection;
                                                            cmd.Transaction = transaccionEK;
                                                            cmd.ExecuteNonQuery();
                                                        }
                                                        #endregion

                                                        #region Registro Detalle
                                                        using (var cmd = new OdbcCommand(@"
                                                INSERT INTO so_orden_compra_det (
                                                    cc, numero, partida, insumo, fecha_entrega, cantidad, precio, importe, ajuste_cant, ajuste_imp, num_requisicion, part_requisicion, 
                                                    cant_recibida, imp_recibido, fecha_recibido, cant_canc, imp_canc, acum_ant, max_orig, max_ppto, area, cuenta, porcent_iva, iva) 
                                                VALUES (
                                                    ?,?,?,?,?,?,?,?,?,?, 
                                                    ?,?,?,?,?,?,?,?,?,?, 
                                                    ?,?,?,?)"))
                                                        {
                                                            OdbcParameterCollection parameters = cmd.Parameters;

                                                            parameters.Add("@cc", OdbcType.Char).Value = registroRequisicionGlobal.cc;
                                                            parameters.Add("@numero", OdbcType.Numeric).Value = numeroCompraNueva;
                                                            parameters.Add("@partida", OdbcType.Numeric).Value = 1;
                                                            parameters.Add("@insumo", OdbcType.Numeric).Value = insumo;
                                                            parameters.Add("@fecha_entrega", OdbcType.Date).Value = DateTime.Now.AddDays(1).Date;
                                                            parameters.Add("@cantidad", OdbcType.Numeric).Value = cantidad;
                                                            parameters.Add("@precio", OdbcType.Numeric).Value = 1;
                                                            parameters.Add("@importe", OdbcType.Numeric).Value = cantidad;
                                                            parameters.Add("@ajuste_cant", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@ajuste_imp", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@num_requisicion", OdbcType.Numeric).Value = (int)registroRequisicionGlobal.numero;
                                                            parameters.Add("@part_requisicion", OdbcType.Numeric).Value = 1;
                                                            parameters.Add("@cant_recibida", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@imp_recibido", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@fecha_recibido", OdbcType.Date).Value = (object)DBNull.Value;
                                                            parameters.Add("@cant_canc", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@imp_canc", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@acum_ant", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@max_orig", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@max_ppto", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@area", OdbcType.Numeric).Value = area;
                                                            parameters.Add("@cuenta", OdbcType.Numeric).Value = cuenta;
                                                            parameters.Add("@porcent_iva", OdbcType.Numeric).Value = DBNull.Value;
                                                            parameters.Add("@iva", OdbcType.Numeric).Value = DBNull.Value;

                                                            cmd.Connection = transaccionEK.Connection;
                                                            cmd.Transaction = transaccionEK;
                                                            cmd.ExecuteNonQuery();
                                                        }
                                                        #endregion

                                                        #region Registro Linea Comentario
                                                        using (var cmd = new OdbcCommand(@"INSERT INTO so_orden_det_linea (cc, numero, partida, descripcion) VALUES (?,?,?,?)"))
                                                        {
                                                            OdbcParameterCollection parameters = cmd.Parameters;

                                                            parameters.Add("@cc", OdbcType.Char).Value = registroRequisicionGlobal.cc;
                                                            parameters.Add("@numero", OdbcType.Numeric).Value = numeroCompraNueva;
                                                            parameters.Add("@partida", OdbcType.Numeric).Value = 1;
                                                            parameters.Add("@descripcion", OdbcType.VarChar).Value = string.Format("Costo Social de {0} del {1}", mesNombre, fechapol.Year);

                                                            cmd.Connection = transaccionEK.Connection;
                                                            cmd.Transaction = transaccionEK;
                                                            cmd.ExecuteNonQuery();
                                                        }
                                                        #endregion

                                                        #region Actualizar Explosión
                                                        var registroExplosionEK = _contextEnkontrol.Select<dynamic>(conexionEnkontrol, new OdbcConsultaDTO
                                                        {
                                                            consulta = string.Format(@"SELECT * FROM so_explos_mat WHERE cc = '{0}' AND insumo = {1} AND year_explos = {2}", registroRequisicionGlobal.cc, insumo, DateTime.Now.Year)
                                                        });

                                                        if (registroExplosionEK.Count() == 0)
                                                        {
                                                            #region Insert Registro Explosión
                                                            using (var cmd = new OdbcCommand(@"
                                                    INSERT INTO so_explos_mat (
                                                        cc, insumo, cantidad, precio, aditiva_cant, aditiva_imp, deduc_cant, deduc_imp, cant_requerida, 
                                                        comp_cant, comp_imp, ajuste_cant, ajuste_imp, traspaso_cant, traspaso_imp, cant_recibida, imp_recibido, 
                                                        aditiva_cant_fecha, deduc_cant_fecha, aditiva_precio_fecha, deduc_precio_fecha, aditiva_precio, deductiva_precio, 
                                                        traspaso_cant_entrada, traspaso_imp_entrada, importe, year_explos, periodo, bit_auto_presu, cantidad_aditiva_sun, 
                                                        cantidad_deductiva_sun, cantidad_extra_sun) 
                                                    VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"))
                                                            {
                                                                OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                                parametersExplosion.Add("@cc", OdbcType.Char).Value = registroRequisicionGlobal.cc;
                                                                parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = insumo;
                                                                parametersExplosion.Add("@cantidad", OdbcType.Numeric).Value = 0;
                                                                parametersExplosion.Add("@precio", OdbcType.Numeric).Value = 0;
                                                                parametersExplosion.Add("@aditiva_cant", OdbcType.Numeric).Value = 0;
                                                                parametersExplosion.Add("@aditiva_imp", OdbcType.Numeric).Value = 0;
                                                                parametersExplosion.Add("@deduc_cant", OdbcType.Numeric).Value = 0;
                                                                parametersExplosion.Add("@deduc_imp", OdbcType.Numeric).Value = 0;
                                                                parametersExplosion.Add("@cant_requerida", OdbcType.Numeric).Value = 0;
                                                                parametersExplosion.Add("@comp_cant", OdbcType.Numeric).Value = cantidad;
                                                                parametersExplosion.Add("@comp_imp", OdbcType.Numeric).Value = cantidad;
                                                                parametersExplosion.Add("@ajuste_cant", OdbcType.Numeric).Value = 0;
                                                                parametersExplosion.Add("@ajuste_imp", OdbcType.Numeric).Value = 0;
                                                                parametersExplosion.Add("@traspaso_cant", OdbcType.Numeric).Value = 0;
                                                                parametersExplosion.Add("@traspaso_imp", OdbcType.Numeric).Value = 0;
                                                                parametersExplosion.Add("@cant_recibida", OdbcType.Numeric).Value = 0;
                                                                parametersExplosion.Add("@imp_recibido", OdbcType.Numeric).Value = 0;
                                                                parametersExplosion.Add("@aditiva_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                                                parametersExplosion.Add("@deduc_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                                                parametersExplosion.Add("@aditiva_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                                                parametersExplosion.Add("@deduc_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                                                parametersExplosion.Add("@aditiva_precio", OdbcType.Numeric).Value = 0;
                                                                parametersExplosion.Add("@deductiva_precio", OdbcType.Numeric).Value = 0;
                                                                parametersExplosion.Add("@traspaso_cant_entrada", OdbcType.Numeric).Value = 0;
                                                                parametersExplosion.Add("@traspaso_imp_entrada", OdbcType.Numeric).Value = 0;
                                                                parametersExplosion.Add("@importe", OdbcType.Numeric).Value = DBNull.Value;
                                                                parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;
                                                                parametersExplosion.Add("@periodo", OdbcType.Char).Value = DBNull.Value;
                                                                parametersExplosion.Add("@bit_auto_presu", OdbcType.Char).Value = "N";
                                                                parametersExplosion.Add("@cantidad_aditiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                                                parametersExplosion.Add("@cantidad_deductiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                                                parametersExplosion.Add("@cantidad_extra_sun", OdbcType.Numeric).Value = DBNull.Value;

                                                                cmd.Connection = transaccionEK.Connection;
                                                                cmd.Transaction = transaccionEK;
                                                                cmd.ExecuteNonQuery();
                                                            }
                                                            #endregion
                                                        }
                                                        else
                                                        {
                                                            #region Update Registro Explosión
                                                            var nuevaCantidadComprada = Convert.ToDecimal(registroExplosionEK[0].comp_cant, CultureInfo.InvariantCulture) + cantidad;
                                                            var nuevoImporteComprado = Convert.ToDecimal(registroExplosionEK[0].comp_imp, CultureInfo.InvariantCulture) + cantidad;

                                                            using (var cmd = new OdbcCommand(@"UPDATE so_explos_mat SET comp_cant = ?, comp_imp = ? WHERE cc = ? AND insumo = ? AND year_explos = ?"))
                                                            {
                                                                OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                                parametersExplosion.Add("@comp_cant", OdbcType.Numeric).Value = nuevaCantidadComprada;
                                                                parametersExplosion.Add("@comp_imp", OdbcType.Numeric).Value = nuevoImporteComprado;

                                                                parametersExplosion.Add("@cc", OdbcType.Char).Value = registroRequisicionGlobal.cc;
                                                                parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = insumo;
                                                                parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;

                                                                cmd.Connection = transaccionEK.Connection;
                                                                cmd.Transaction = transaccionEK;
                                                                cmd.ExecuteNonQuery();
                                                            }
                                                            #endregion
                                                        }
                                                        #endregion

                                                        #region Actualizar Partida Requisición
                                                        using (var cmd = new OdbcCommand(@"UPDATE so_requisicion_det SET cant_ordenada = ? WHERE cc = ? AND numero = ? AND partida = ? AND insumo = ?"))
                                                        {
                                                            OdbcParameterCollection parameters = cmd.Parameters;

                                                            parameters.Add("@cant_ordenada", OdbcType.Numeric).Value =
                                                                Convert.ToDecimal(registroRequisicionDetalleGlobal.cant_ordenada, CultureInfo.InvariantCulture) + cantidad;

                                                            parameters.Add("@cc", OdbcType.Char).Value = registroRequisicionGlobal.cc;
                                                            parameters.Add("@numero", OdbcType.Numeric).Value = (int)registroRequisicionGlobal.numero;
                                                            parameters.Add("@partida", OdbcType.Numeric).Value = 1;
                                                            parameters.Add("@insumo", OdbcType.Numeric).Value = insumo;

                                                            cmd.Connection = transaccionEK.Connection;
                                                            cmd.Transaction = transaccionEK;
                                                            cmd.ExecuteNonQuery();
                                                        }
                                                        #endregion
                                                        #endregion

                                                        _context.tblC_Nom_Compra_SUA.Add(new tblC_Nom_Compra_SUA
                                                        {
                                                            sua_id = sua.id,
                                                            det_id = det.id,
                                                            year = sua.anio,
                                                            periodo = sua.periodo,
                                                            tipoNomina = sua.tipoNomina,
                                                            cc = det.cc,
                                                            ccDesc = registroCentroCosto.ccDescripcion,
                                                            numeroCompra = numeroCompraNueva,
                                                            tipoRequisicion = "COSTO SOCIAL",
                                                            registroActivo = true
                                                        });
                                                        _context.SaveChanges();
                                                    }
                                                }
                                                #endregion

                                                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.GCPLAN)
                                                {
                                                    #region Compra Costo Social GCPLAN -> CONSTRUPLAN
                                                    {
                                                        conexionEnkontrol = EnkontrolEnum.CplanProd;
                                                        requisicionGlobal = _context.tblC_Nom_RequisicionGlobal.FirstOrDefault(x => x.registroActivo && x.cc == det.cc && x.tipoRequisicion == TipoRequisicionGlobalEnum.INTERCOMPANIA);

                                                        var proveedor = 6689;

                                                        numeroCompraNueva = 1;

                                                        if (ultimaCompraConstruplan.Count() > 0)
                                                        {
                                                            numeroCompraNueva = ultimaCompraConstruplan[0].numero + 1;
                                                        }

                                                        var registroRequisicionDetalleGlobal = _contextEnkontrol.Select<dynamic>(conexionEnkontrol, new OdbcConsultaDTO
                                                        {
                                                            consulta = string.Format(@"SELECT * FROM so_requisicion_det WHERE cc = '{0}' AND numero = {1} ", requisicionGlobal.cc, requisicionGlobal.numero)
                                                        }).FirstOrDefault();
                                                        cantidadPendiente =
                                                            Convert.ToDecimal(registroRequisicionDetalleGlobal.cantidad, CultureInfo.InvariantCulture) - Convert.ToDecimal(registroRequisicionDetalleGlobal.cant_ordenada, CultureInfo.InvariantCulture);

                                                        //Cálculo Costo Social Intercompañia
                                                        var costoPatronal = det.imssPatronal + det.rcvPatronal + det.infonavit + (detGemelo == null ? 0 :  detGemelo.isn);
                                                        var totalSinISN = det.imssPatronal + det.imssObrero + det.rcvPatronal + det.rcvObrero + det.infonavit + det.amortizacion;
                                                        var cantidad = costoPatronal + (costoPatronal * 0.01m) + (totalSinISN * 0.03m);

                                                        if (cantidad > 0)
                                                        {
                                                            var iva = cantidad * 0.16m;

                                                            if (cantidad > cantidadPendiente)
                                                            {
                                                                throw new Exception("La cantidad de la compra sobrepasa la cantidad pendiente de ordenar para la requisición \"" + (string)registroRequisicionGlobal.cc + "-" + ((int)registroRequisicionGlobal.numero).ToString() + "\".");
                                                            }

                                                            using (var _contextConstruplan = new MainContext(EmpresaEnum.Construplan))
                                                            {
                                                                using (var transaccionConstruplanSP = _contextConstruplan.Database.BeginTransaction())
                                                                {
                                                                    using (var conexionConstruplanEK = new Conexion().ConnectConstruplanConstruplan())
                                                                    {
                                                                        using (var transaccionConstruplanEK = conexionConstruplanEK.BeginTransaction())
                                                                        {
                                                                            try
                                                                            {
                                                                                #region SIGOPLAN
                                                                                #region Registro General
                                                                                var nuevaCompraSIGOPLAN = new tblCom_OrdenCompra
                                                                                {
                                                                                    cc = registroRequisicionGlobal.cc,
                                                                                    numero = numeroCompraNueva,
                                                                                    fecha = DateTime.Now,
                                                                                    idLibreAbordo = 999,
                                                                                    tipo_oc_req = "1", //Esto podría no ser fijo.
                                                                                    compradorSIGOPLAN = 13, //Admin
                                                                                    compradorEnkontrol = 1, //Admin
                                                                                    compradorStarsoft = 0,
                                                                                    moneda = "1",
                                                                                    tipo_cambio = 1,
                                                                                    porcent_iva = 16m,
                                                                                    sub_total = cantidad,
                                                                                    iva = iva,
                                                                                    total = cantidad + iva,
                                                                                    sub_total_rec = 0m,
                                                                                    iva_rec = 0m,
                                                                                    total_rec = 0m,
                                                                                    estatus = "",
                                                                                    comentarios = "SERV. ADMIVOS.",
                                                                                    bienes_servicios = "S",
                                                                                    CFDI = "G03 (Gastos en general)",
                                                                                    tiempoEntregaDias = 1,
                                                                                    tiempoEntregaComentarios = string.Format("CS{0}", mesNombre),
                                                                                    anticipo = false,
                                                                                    totalAnticipo = cantidad + iva,
                                                                                    estatusRegistro = true,
                                                                                    colocada = false,
                                                                                    colocadaFecha = null,
                                                                                    correoProveedor = "",
                                                                                    proveedor = proveedor,
                                                                                    st_impresa = "",
                                                                                    autorizo = 1,
                                                                                    usuario_autoriza = 1,
                                                                                    fecha_autoriza = DateTime.Now,
                                                                                    ST_OC = "A",
                                                                                    empleado_autoriza = 1,
                                                                                    empleadoUltimaAccion = 1,
                                                                                    PERU_proveedor = "",
                                                                                    PERU_cuentaCorriente = "",
                                                                                    PERU_formaPago = "",
                                                                                    PERU_tipoCambio = "",
                                                                                    PERU_tipoCompra = "",
                                                                                    fechaUltimaAccion = DateTime.Now,
                                                                                    tipoUltimaAccion = TipoUltimaAccionEnum.Autorizacion,
                                                                                    vobo = 0,
                                                                                    vobo2 = 0
                                                                                };

                                                                                _contextConstruplan.tblCom_OrdenCompra.Add(nuevaCompraSIGOPLAN);
                                                                                _contextConstruplan.SaveChanges();
                                                                                #endregion

                                                                                #region Registro Detalle

                                                                                var insumoIntercompania = 0;
                                                                                switch (registroCentroCosto.clasificacionCcId)
                                                                                {
                                                                                    case 1: //Administración Central
                                                                                        insumo = 7070005;
                                                                                        break;
                                                                                    case 2: //Foránea
                                                                                        insumo = 6070005;
                                                                                        break;
                                                                                }
                                                                                var nuevaCompraSIGOPLANDet = new tblCom_OrdenCompraDet
                                                                                {
                                                                                    idOrdenCompra = nuevaCompraSIGOPLAN.id,
                                                                                    cc = nuevaCompraSIGOPLAN.cc,
                                                                                    numero = nuevaCompraSIGOPLAN.numero,
                                                                                    partida = 1,
                                                                                    insumo = insumoIntercompania,
                                                                                    fecha_entrega = DateTime.Now.AddDays(1),
                                                                                    cantidad = cantidad,
                                                                                    precio = 1,
                                                                                    importe = cantidad,
                                                                                    ajuste_cant = 0,
                                                                                    ajuste_imp = 0,
                                                                                    num_requisicion = (int)registroRequisicionGlobal.numero,
                                                                                    part_requisicion = 1,
                                                                                    cant_recibida = 0,
                                                                                    imp_recibido = 0,
                                                                                    fecha_recibido = null,
                                                                                    cant_canc = 0,
                                                                                    imp_canc = 0,
                                                                                    acum_ant = 0,
                                                                                    max_orig = 0,
                                                                                    max_ppto = 0,
                                                                                    area = area,
                                                                                    cuenta = cuenta,
                                                                                    porcent_iva = 16,
                                                                                    iva = iva,
                                                                                    partidaDescripcion = string.Format("COSTO SOCIAL {0} {1}", mesNombre, mesAnioAnterior),
                                                                                    estatusRegistro = true
                                                                                };

                                                                                _contextConstruplan.tblCom_OrdenCompraDet.Add(nuevaCompraSIGOPLANDet);
                                                                                _contextConstruplan.SaveChanges();
                                                                                #endregion

                                                                                #region Actualizar Partida Requisición
                                                                                string ccRequisicion = (string)registroRequisicionGlobal.cc;
                                                                                int numeroRequisicion = (int)registroRequisicionGlobal.numero;
                                                                                var registroRequisicionSIGOPLAN = _contextConstruplan.tblCom_Req.FirstOrDefault(x => x.estatusRegistro && x.cc == ccRequisicion && x.numero == numeroRequisicion);

                                                                                if (registroRequisicionSIGOPLAN != null)
                                                                                {
                                                                                    var registroRequisicionDetalleSIGOPLAN = _contextConstruplan.tblCom_ReqDet.FirstOrDefault(x => x.estatusRegistro && x.idReq == registroRequisicionSIGOPLAN.id);

                                                                                    registroRequisicionDetalleSIGOPLAN.cantOrdenada += cantidad;
                                                                                    _contextConstruplan.SaveChanges();
                                                                                }
                                                                                #endregion
                                                                                #endregion

                                                                                #region Enkontrol
                                                                                #region Registro General
                                                                                using (var cmd = new OdbcCommand(@"
                                                                        INSERT INTO so_orden_compra (
                                                                            cc, numero, fecha, libre_abordo, tipo_oc_req, comprador, proveedor, moneda, tipo_cambio, porcent_iva, 
                                                                            sub_total, iva, total, sub_tot_rec, iva_rec, total_rec, sub_tot_ajus, iva_ajus, total_ajus, st_impresa, 
                                                                            estatus, comentarios, solicito, vobo, autorizo, sub_tot_canc, iva_canc, total_canc, total_fac, total_pag, 
                                                                            embarquese, empleado_modifica, fecha_modifica, hora_modifica, tc_cc, anticipo, monto_anticipo, almacen, 
                                                                            bit_autorecepcion, almacen_autorecepcion, empleado_autorecepcion, rentencion_antes_iva, rentencion_despues_iva, 
                                                                            bienes_servicios, concepto_factura, tot_fac_ret, tot_ret_ret, usuario_autoriza, fecha_autoriza, st_autorizada, 
                                                                            imprime_porcentaje, ST_OC, empleado_autoriza, vobo_informa, vobo2, vobo3, vobo4, vobo5, vobo6, cambia_vobo, tmc, 
                                                                            autoriza_activos, fecha_vobo, fecha_vobo2, fecha_vobo3, bit_af, bit_arrenda, estatus_bloqueo, ruta_pdf, ruta_map) 
                                                                        VALUES (
                                                                            ?,?,?,?,?,?,?,?,?,?, 
                                                                            ?,?,?,?,?,?,?,?,?,?, 
                                                                            ?,?,?,?,?,?,?,?,?,?, 
                                                                            ?,?,?,?,?,?,?,?,?,?, 
                                                                            ?,?,?,?,?,?,?,?,?,?, 
                                                                            ?,?,?,?,?,?,?,?,?,?, 
                                                                            ?,?,?,?,?,?,?,?,?,?)"))
                                                                                {
                                                                                    OdbcParameterCollection parameters = cmd.Parameters;

                                                                                    parameters.Add("@cc", OdbcType.Char).Value = registroRequisicionGlobal.cc;
                                                                                    parameters.Add("@numero", OdbcType.Numeric).Value = numeroCompraNueva;
                                                                                    parameters.Add("@fecha", OdbcType.Date).Value = DateTime.Now;

                                                                                    //Se guarda siempre con 1 porque en EnKontrol la tabla de libre abordo no contiene todos los almacenes. En SIGOPLAN se guarda con el número de almacén.
                                                                                    parameters.Add("@libre_abordo", OdbcType.Numeric).Value = 1;

                                                                                    parameters.Add("@tipo_oc_req", OdbcType.Char).Value = "1";
                                                                                    parameters.Add("@comprador", OdbcType.Numeric).Value = 1;
                                                                                    parameters.Add("@proveedor", OdbcType.Numeric).Value = proveedor;
                                                                                    parameters.Add("@moneda", OdbcType.Char).Value = "1";
                                                                                    parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = "1";
                                                                                    parameters.Add("@porcent_iva", OdbcType.Numeric).Value = 16;
                                                                                    parameters.Add("@sub_total", OdbcType.Numeric).Value = cantidad;
                                                                                    parameters.Add("@iva", OdbcType.Numeric).Value = iva;
                                                                                    parameters.Add("@total", OdbcType.Numeric).Value = cantidad + iva;
                                                                                    parameters.Add("@sub_tot_rec", OdbcType.Numeric).Value = 0;
                                                                                    parameters.Add("@iva_rec", OdbcType.Numeric).Value = 0;
                                                                                    parameters.Add("@total_rec", OdbcType.Numeric).Value = 0;
                                                                                    parameters.Add("@sub_tot_ajus", OdbcType.Numeric).Value = 0;
                                                                                    parameters.Add("@iva_ajus", OdbcType.Numeric).Value = 0;
                                                                                    parameters.Add("@total_ajus", OdbcType.Numeric).Value = 0;
                                                                                    parameters.Add("@st_impresa", OdbcType.Char).Value = "";
                                                                                    parameters.Add("@estatus", OdbcType.Char).Value = " "; //Se pone un espacio en blanco porque si se guarda un string vacío truena en Enkontrol y no se ven algunos reportes.
                                                                                    parameters.Add("@comentarios", OdbcType.Char).Value = "SERV. ADMIVOS.";
                                                                                    parameters.Add("@solicito", OdbcType.Numeric).Value = 1;
                                                                                    parameters.Add("@vobo", OdbcType.Numeric).Value = 0;
                                                                                    parameters.Add("@autorizo", OdbcType.Numeric).Value = 1;
                                                                                    parameters.Add("@sub_tot_canc", OdbcType.Numeric).Value = 0;
                                                                                    parameters.Add("@iva_canc", OdbcType.Numeric).Value = 0;
                                                                                    parameters.Add("@total_canc", OdbcType.Numeric).Value = 0;
                                                                                    parameters.Add("@total_fac", OdbcType.Numeric).Value = 0;
                                                                                    parameters.Add("@total_pag", OdbcType.Numeric).Value = 0;
                                                                                    parameters.Add("@embarquese", OdbcType.Char).Value = "";
                                                                                    parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = 1;
                                                                                    parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                                                                    parameters.Add("@hora_modifica", OdbcType.DateTime).Value = DateTime.Now;
                                                                                    parameters.Add("@tc_cc", OdbcType.Numeric).Value = 1;
                                                                                    parameters.Add("@anticipo", OdbcType.Char).Value = DBNull.Value;
                                                                                    parameters.Add("@monto_anticipo", OdbcType.Numeric).Value = DBNull.Value;
                                                                                    parameters.Add("@almacen", OdbcType.Numeric).Value = DBNull.Value;
                                                                                    parameters.Add("@bit_autorecepcion", OdbcType.Char).Value = "S";
                                                                                    parameters.Add("@almacen_autorecepcion", OdbcType.Numeric).Value = 999;
                                                                                    parameters.Add("@empleado_autorecepcion", OdbcType.Numeric).Value = 7;
                                                                                    parameters.Add("@rentencion_antes_iva", OdbcType.Numeric).Value = 0;
                                                                                    parameters.Add("@rentencion_despues_iva", OdbcType.Numeric).Value = 0;
                                                                                    parameters.Add("@bienes_servicios", OdbcType.Char).Value = "S";
                                                                                    parameters.Add("@concepto_factura", OdbcType.Char).Value = DBNull.Value;
                                                                                    parameters.Add("@tot_fac_ret", OdbcType.Numeric).Value = 0;
                                                                                    parameters.Add("@tot_ret_ret", OdbcType.Numeric).Value = 0;
                                                                                    parameters.Add("@usuario_autoriza", OdbcType.Numeric).Value = 1;
                                                                                    parameters.Add("@fecha_autoriza", OdbcType.Date).Value = DateTime.Now.Date;
                                                                                    parameters.Add("@st_autorizada", OdbcType.Char).Value = DBNull.Value;
                                                                                    parameters.Add("@imprime_porcentaje", OdbcType.Char).Value = "N";
                                                                                    parameters.Add("@ST_OC", OdbcType.Char).Value = "A";
                                                                                    parameters.Add("@empleado_autoriza", OdbcType.Numeric).Value = 1;
                                                                                    parameters.Add("@vobo_informa", OdbcType.Char).Value = "N";
                                                                                    parameters.Add("@vobo2", OdbcType.Numeric).Value = 0;
                                                                                    parameters.Add("@vobo3", OdbcType.Numeric).Value = 0;
                                                                                    parameters.Add("@vobo4", OdbcType.Numeric).Value = 0;
                                                                                    parameters.Add("@vobo5", OdbcType.Numeric).Value = 0;
                                                                                    parameters.Add("@vobo6", OdbcType.Numeric).Value = 0;
                                                                                    parameters.Add("@cambia_vobo", OdbcType.Numeric).Value = 0;
                                                                                    parameters.Add("@tmc", OdbcType.Numeric).Value = 0;
                                                                                    parameters.Add("@autoriza_activos", OdbcType.Numeric).Value = 0;
                                                                                    parameters.Add("@fecha_vobo", OdbcType.Date).Value = DBNull.Value;
                                                                                    parameters.Add("@fecha_vobo2", OdbcType.Date).Value = DBNull.Value;
                                                                                    parameters.Add("@fecha_vobo3", OdbcType.Date).Value = DBNull.Value;
                                                                                    parameters.Add("@bit_af", OdbcType.Char).Value = "N";
                                                                                    parameters.Add("@bit_arrenda", OdbcType.Char).Value = "N";
                                                                                    parameters.Add("@estatus_bloqueo", OdbcType.Char).Value = DBNull.Value;
                                                                                    parameters.Add("@ruta_pdf", OdbcType.VarChar).Value = DBNull.Value;
                                                                                    parameters.Add("@ruta_map", OdbcType.VarChar).Value = DBNull.Value;

                                                                                    cmd.Connection = transaccionConstruplanEK.Connection;
                                                                                    cmd.Transaction = transaccionConstruplanEK;
                                                                                    cmd.ExecuteNonQuery();
                                                                                }
                                                                                #endregion

                                                                                #region Registro Detalle
                                                                                using (var cmd = new OdbcCommand(@"
                                                                        INSERT INTO so_orden_compra_det (
                                                                            cc, numero, partida, insumo, fecha_entrega, cantidad, precio, importe, ajuste_cant, ajuste_imp, num_requisicion, part_requisicion, 
                                                                            cant_recibida, imp_recibido, fecha_recibido, cant_canc, imp_canc, acum_ant, max_orig, max_ppto, area, cuenta, porcent_iva, iva) 
                                                                        VALUES (
                                                                            ?,?,?,?,?,?,?,?,?,?, 
                                                                            ?,?,?,?,?,?,?,?,?,?, 
                                                                            ?,?,?,?)"))
                                                                                {
                                                                                    OdbcParameterCollection parameters = cmd.Parameters;

                                                                                    parameters.Add("@cc", OdbcType.Char).Value = registroRequisicionGlobal.cc;
                                                                                    parameters.Add("@numero", OdbcType.Numeric).Value = numeroCompraNueva;
                                                                                    parameters.Add("@partida", OdbcType.Numeric).Value = 1;
                                                                                    parameters.Add("@insumo", OdbcType.Numeric).Value = insumoIntercompania;
                                                                                    parameters.Add("@fecha_entrega", OdbcType.Date).Value = DateTime.Now.AddDays(1).Date;
                                                                                    parameters.Add("@cantidad", OdbcType.Numeric).Value = cantidad;
                                                                                    parameters.Add("@precio", OdbcType.Numeric).Value = 1;
                                                                                    parameters.Add("@importe", OdbcType.Numeric).Value = cantidad;
                                                                                    parameters.Add("@ajuste_cant", OdbcType.Numeric).Value = 0;
                                                                                    parameters.Add("@ajuste_imp", OdbcType.Numeric).Value = 0;
                                                                                    parameters.Add("@num_requisicion", OdbcType.Numeric).Value = (int)registroRequisicionGlobal.numero;
                                                                                    parameters.Add("@part_requisicion", OdbcType.Numeric).Value = 1;
                                                                                    parameters.Add("@cant_recibida", OdbcType.Numeric).Value = 0;
                                                                                    parameters.Add("@imp_recibido", OdbcType.Numeric).Value = 0;
                                                                                    parameters.Add("@fecha_recibido", OdbcType.Date).Value = (object)DBNull.Value;
                                                                                    parameters.Add("@cant_canc", OdbcType.Numeric).Value = 0;
                                                                                    parameters.Add("@imp_canc", OdbcType.Numeric).Value = 0;
                                                                                    parameters.Add("@acum_ant", OdbcType.Numeric).Value = 0;
                                                                                    parameters.Add("@max_orig", OdbcType.Numeric).Value = 0;
                                                                                    parameters.Add("@max_ppto", OdbcType.Numeric).Value = 0;
                                                                                    parameters.Add("@area", OdbcType.Numeric).Value = area;
                                                                                    parameters.Add("@cuenta", OdbcType.Numeric).Value = cuenta;
                                                                                    parameters.Add("@porcent_iva", OdbcType.Numeric).Value = DBNull.Value;
                                                                                    parameters.Add("@iva", OdbcType.Numeric).Value = DBNull.Value;

                                                                                    cmd.Connection = transaccionConstruplanEK.Connection;
                                                                                    cmd.Transaction = transaccionConstruplanEK;
                                                                                    cmd.ExecuteNonQuery();
                                                                                }
                                                                                #endregion

                                                                                var mes = DateTime.Today.AddMonths(-1).ToString("MMM yyyy", CultureInfo.InvariantCulture);

                                                                                #region Registro Linea Comentario
                                                                                using (var cmd = new OdbcCommand(@"INSERT INTO so_orden_det_linea (cc, numero, partida, descripcion) VALUES (?,?,?,?)"))
                                                                                {
                                                                                    OdbcParameterCollection parameters = cmd.Parameters;

                                                                                    parameters.Add("@cc", OdbcType.Char).Value = registroRequisicionGlobal.cc;
                                                                                    parameters.Add("@numero", OdbcType.Numeric).Value = numeroCompraNueva;
                                                                                    parameters.Add("@partida", OdbcType.Numeric).Value = 1;
                                                                                    parameters.Add("@descripcion", OdbcType.VarChar).Value = "Servicios Administrativos conforme a contrato Costo Social " + mes;

                                                                                    cmd.Connection = transaccionConstruplanEK.Connection;
                                                                                    cmd.Transaction = transaccionConstruplanEK;
                                                                                    cmd.ExecuteNonQuery();
                                                                                }
                                                                                #endregion

                                                                                #region Actualizar Explosión
                                                                                var registroExplosionEK = _contextEnkontrol.Select<dynamic>(conexionEnkontrol, new OdbcConsultaDTO
                                                                                {
                                                                                    consulta = string.Format(@"
                                                                        SELECT * FROM so_explos_mat WHERE cc = '{0}' AND insumo = {1} AND year_explos = {2} 
                                                                    ", registroRequisicionGlobal.cc, insumoIntercompania, DateTime.Now.Year)
                                                                                });

                                                                                if (registroExplosionEK.Count() == 0)
                                                                                {
                                                                                    #region Insert Registro Explosión
                                                                                    using (var cmd = new OdbcCommand(@"
                                                                            INSERT INTO so_explos_mat (
                                                                                cc, insumo, cantidad, precio, aditiva_cant, aditiva_imp, deduc_cant, deduc_imp, cant_requerida, 
                                                                                comp_cant, comp_imp, ajuste_cant, ajuste_imp, traspaso_cant, traspaso_imp, cant_recibida, imp_recibido, 
                                                                                aditiva_cant_fecha, deduc_cant_fecha, aditiva_precio_fecha, deduc_precio_fecha, aditiva_precio, deductiva_precio, 
                                                                                traspaso_cant_entrada, traspaso_imp_entrada, importe, year_explos, periodo, bit_auto_presu, cantidad_aditiva_sun, 
                                                                                cantidad_deductiva_sun, cantidad_extra_sun) 
                                                                            VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"))
                                                                                    {
                                                                                        OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                                                        parametersExplosion.Add("@cc", OdbcType.Char).Value = registroRequisicionGlobal.cc;
                                                                                        parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = insumoIntercompania;
                                                                                        parametersExplosion.Add("@cantidad", OdbcType.Numeric).Value = 0;
                                                                                        parametersExplosion.Add("@precio", OdbcType.Numeric).Value = 0;
                                                                                        parametersExplosion.Add("@aditiva_cant", OdbcType.Numeric).Value = 0;
                                                                                        parametersExplosion.Add("@aditiva_imp", OdbcType.Numeric).Value = 0;
                                                                                        parametersExplosion.Add("@deduc_cant", OdbcType.Numeric).Value = 0;
                                                                                        parametersExplosion.Add("@deduc_imp", OdbcType.Numeric).Value = 0;
                                                                                        parametersExplosion.Add("@cant_requerida", OdbcType.Numeric).Value = 0;
                                                                                        parametersExplosion.Add("@comp_cant", OdbcType.Numeric).Value = cantidad;
                                                                                        parametersExplosion.Add("@comp_imp", OdbcType.Numeric).Value = cantidad;
                                                                                        parametersExplosion.Add("@ajuste_cant", OdbcType.Numeric).Value = 0;
                                                                                        parametersExplosion.Add("@ajuste_imp", OdbcType.Numeric).Value = 0;
                                                                                        parametersExplosion.Add("@traspaso_cant", OdbcType.Numeric).Value = 0;
                                                                                        parametersExplosion.Add("@traspaso_imp", OdbcType.Numeric).Value = 0;
                                                                                        parametersExplosion.Add("@cant_recibida", OdbcType.Numeric).Value = 0;
                                                                                        parametersExplosion.Add("@imp_recibido", OdbcType.Numeric).Value = 0;
                                                                                        parametersExplosion.Add("@aditiva_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                                                                        parametersExplosion.Add("@deduc_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                                                                        parametersExplosion.Add("@aditiva_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                                                                        parametersExplosion.Add("@deduc_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                                                                        parametersExplosion.Add("@aditiva_precio", OdbcType.Numeric).Value = 0;
                                                                                        parametersExplosion.Add("@deductiva_precio", OdbcType.Numeric).Value = 0;
                                                                                        parametersExplosion.Add("@traspaso_cant_entrada", OdbcType.Numeric).Value = 0;
                                                                                        parametersExplosion.Add("@traspaso_imp_entrada", OdbcType.Numeric).Value = 0;
                                                                                        parametersExplosion.Add("@importe", OdbcType.Numeric).Value = DBNull.Value;
                                                                                        parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;
                                                                                        parametersExplosion.Add("@periodo", OdbcType.Char).Value = DBNull.Value;
                                                                                        parametersExplosion.Add("@bit_auto_presu", OdbcType.Char).Value = "N";
                                                                                        parametersExplosion.Add("@cantidad_aditiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                                                                        parametersExplosion.Add("@cantidad_deductiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                                                                        parametersExplosion.Add("@cantidad_extra_sun", OdbcType.Numeric).Value = DBNull.Value;

                                                                                        cmd.Connection = transaccionConstruplanEK.Connection;
                                                                                        cmd.Transaction = transaccionConstruplanEK;
                                                                                        cmd.ExecuteNonQuery();
                                                                                    }
                                                                                    #endregion
                                                                                }
                                                                                else
                                                                                {
                                                                                    #region Update Registro Explosión
                                                                                    var nuevaCantidadComprada = Convert.ToDecimal(registroExplosionEK[0].comp_cant, CultureInfo.InvariantCulture) + cantidad;
                                                                                    var nuevoImporteComprado = Convert.ToDecimal(registroExplosionEK[0].comp_imp, CultureInfo.InvariantCulture) + cantidad;

                                                                                    using (var cmd = new OdbcCommand(@"UPDATE so_explos_mat SET comp_cant = ?, comp_imp = ? WHERE cc = ? AND insumo = ? AND year_explos = ?"))
                                                                                    {
                                                                                        OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                                                        parametersExplosion.Add("@comp_cant", OdbcType.Numeric).Value = nuevaCantidadComprada;
                                                                                        parametersExplosion.Add("@comp_imp", OdbcType.Numeric).Value = nuevoImporteComprado;

                                                                                        parametersExplosion.Add("@cc", OdbcType.Char).Value = registroRequisicionGlobal.cc;
                                                                                        parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = insumoIntercompania;
                                                                                        parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;

                                                                                        cmd.Connection = transaccionConstruplanEK.Connection;
                                                                                        cmd.Transaction = transaccionConstruplanEK;
                                                                                        cmd.ExecuteNonQuery();
                                                                                    }
                                                                                    #endregion
                                                                                }
                                                                                #endregion

                                                                                #region Actualizar Partida Requisición
                                                                                using (var cmd = new OdbcCommand(@"UPDATE so_requisicion_det SET cant_ordenada = ? WHERE cc = ? AND numero = ? AND partida = ? AND insumo = ?"))
                                                                                {
                                                                                    OdbcParameterCollection parameters = cmd.Parameters;

                                                                                    parameters.Add("@cant_ordenada", OdbcType.Numeric).Value =
                                                                                        Convert.ToDecimal(registroRequisicionDetalleGlobal.cant_ordenada, CultureInfo.InvariantCulture) + cantidad;

                                                                                    parameters.Add("@cc", OdbcType.Char).Value = registroRequisicionGlobal.cc;
                                                                                    parameters.Add("@numero", OdbcType.Numeric).Value = (int)registroRequisicionGlobal.numero;
                                                                                    parameters.Add("@partida", OdbcType.Numeric).Value = 1;
                                                                                    parameters.Add("@insumo", OdbcType.Numeric).Value = insumoIntercompania;

                                                                                    cmd.Connection = transaccionConstruplanEK.Connection;
                                                                                    cmd.Transaction = transaccionConstruplanEK;
                                                                                    cmd.ExecuteNonQuery();
                                                                                }
                                                                                #endregion
                                                                                #endregion

                                                                                transaccionConstruplanEK.Commit();
                                                                                transaccionConstruplanSP.Commit();

                                                                                var ccDesc = _context.tblC_Nom_CatalogoCC.FirstOrDefault(x => x.estatus && x.cc == det.cc).ccDescripcion;
                                                                                _context.tblC_Nom_Compra_SUA.Add(new tblC_Nom_Compra_SUA
                                                                                {
                                                                                    sua_id = sua.id,
                                                                                    det_id = det.id,
                                                                                    year = sua.anio,
                                                                                    periodo = sua.periodo,
                                                                                    tipoNomina = sua.tipoNomina,
                                                                                    cc = det.cc,
                                                                                    ccDesc = ccDesc,
                                                                                    numeroCompra = numeroCompraNueva,
                                                                                    tipoRequisicion = "COSTO SOCIAL INTERCOMPAÑÍA CPLAN-GCPLAN",
                                                                                    registroActivo = true
                                                                                });
                                                                                _context.SaveChanges();
                                                                            }
                                                                            catch (Exception ex)
                                                                            {
                                                                                transaccionConstruplanEK.Rollback();
                                                                                transaccionConstruplanSP.Rollback();

                                                                                throw new Exception(ex.Message);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    #endregion
                                                }
                                            }
                                            #endregion
                                        }

                                        transaccionEK.Commit();
                                        transaccionSP.Commit();

                                        resultado.Add(SUCCESS, true);
                                        resultado.Add("poliza", numeroPoliza);
                                    }
                                    else if (sua.tipoDocumento == (int)ClasificacionDocumentosSUAEnum.cedulaIsnMensual)
                                    {
                                        _polizaEkFs.SetContext(conexionEK);
                                        _polizaEkFs.SetTransaccion(transaccionEK);
                                        string numeroPoliza = _polizaEkFs.GuardarPoliza(poliza_movimientos.poliza, poliza_movimientos.movimientos);

                                        _polizaSpFs.SetContext(_ctx);
                                        _polizaSpFs.SetTransaccion(transaccionSP);
                                        var polizaPoliza = numeroPoliza.Split('-')[2];
                                        poliza_movimientos.poliza.poliza = Convert.ToInt32(polizaPoliza);
                                        var resultadoSP = _polizaSpFs.GuardarPoliza(poliza_movimientos.poliza, poliza_movimientos.movimientos);

                                        sua.poliza = numeroPoliza;
                                        sua.polizaGuardada = true;
                                        _ctx.SaveChanges();

                                        var infoAConciliar = GenerarInfoConcilia(poliza_movimientos.movimientos, poliza_movimientos.poliza);

                                        foreach (var concilia in infoAConciliar)
                                        {
                                            _polizaEkFs.GuardarParaConciliar(concilia);
                                        }

                                        transaccionEK.Commit();
                                        transaccionSP.Commit();

                                        resultado.Add(SUCCESS, true);
                                        resultado.Add("poliza", numeroPoliza);
                                    }
                                    else
                                    {
                                        _polizaEkFs.SetContext(conexionEK);
                                        _polizaEkFs.SetTransaccion(transaccionEK);
                                        string numeroPoliza = _polizaEkFs.GuardarPoliza(poliza_movimientos.poliza, poliza_movimientos.movimientos);

                                        _polizaSpFs.SetContext(_ctx);
                                        _polizaSpFs.SetTransaccion(transaccionSP);
                                        var polizaPoliza = numeroPoliza.Split('-')[2];
                                        poliza_movimientos.poliza.poliza = Convert.ToInt32(polizaPoliza);
                                        var resultadoSP = _polizaSpFs.GuardarPoliza(poliza_movimientos.poliza, poliza_movimientos.movimientos);

                                        sua.poliza = numeroPoliza;
                                        sua.polizaGuardada = true;
                                        _ctx.SaveChanges();

                                        transaccionEK.Commit();
                                        transaccionSP.Commit();

                                        resultado.Add(SUCCESS, true);
                                        resultado.Add("poliza", numeroPoliza);
                                    }
                                }
                                else
                                {
                                    resultado.Add(SUCCESS, false);
                                    resultado.Add(MESSAGE, "Ya se encuentra registrada una póliza para la nómina seleccionada");
                                }
                            }
                            catch (Exception ex)
                            {
                                transaccionEK.Rollback();
                                transaccionSP.Rollback();

                                resultado.Add(SUCCESS, false);
                                resultado.Add(MESSAGE, ex.Message);

                                LogError(_SISTEMA, 0, "NominaController", "RegistrarPolizaSUA", ex, AccionEnum.AGREGAR, 0, new { poliza_movimientos.poliza });
                            }
                        }
                    }
                }
            }

            return resultado;
        }

        private List<Core.DTO.Enkontrol.Tablas.Poliza.sb_edo_cta_chequeraDTO> GenerarInfoConcilia(List<Core.DTO.Enkontrol.Tablas.Poliza.sc_movpolDTO> movimientos, sc_polizasDTO poliza)
        {
            var infoAConciliar = new List<Core.DTO.Enkontrol.Tablas.Poliza.sb_edo_cta_chequeraDTO>();

            foreach (var mov in movimientos.Where(x => x.cta == 1110))
            {
                var cuentaBanco = _bancoFS.GetBanco(mov.cta, mov.scta, mov.sscta);

                if (cuentaBanco != null)
                {
                    var concilia = new Core.DTO.Enkontrol.Tablas.Poliza.sb_edo_cta_chequeraDTO();

                    concilia.cuenta = cuentaBanco.cuenta;
                    concilia.fecha_mov = poliza.fechapol;
                    concilia.tm = mov.itm;
                    concilia.numero = Convert.ToInt32(mov.referencia);
                    concilia.cc = mov.cc;
                    concilia.descripcion = mov.concepto;
                    concilia.monto = mov.monto;
                    concilia.tc = 1M;
                    concilia.origen_mov = "C";
                    concilia.generada = "C";
                    concilia.iyear = mov.year;
                    concilia.imes = mov.mes;
                    concilia.ipoliza = poliza.poliza;
                    concilia.itp = mov.tp;
                    concilia.ilinea = mov.linea;
                    concilia.banco = cuentaBanco.banco;

                    infoAConciliar.Add(concilia);
                }
                else
                {
                    throw new Exception("Error al obtener el número de cuenta banco");
                }
            }

            return infoAConciliar;
        }

        public MemoryStream DescargarExcelSUA(int tipo_nomina, int anio, int periodo, int tipo_documento)
        {
            try
            {
                #region Información Inicial
                var empresaDesc = ((EmpresaEnum)vSesiones.sesionEmpresaActual).GetDescription();

                EnkontrolEnum conexionEnkontrol = EnkontrolEnum.CplanProd;

                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {
                    case EmpresaEnum.Construplan:
                        conexionEnkontrol = EnkontrolEnum.CplanProd;
                        break;
                    case EmpresaEnum.Arrendadora:
                        conexionEnkontrol = EnkontrolEnum.ArrenProd;
                        break;
                    case EmpresaEnum.GCPLAN:
                        conexionEnkontrol = EnkontrolEnum.GCPLAN;
                        break;
                }

                string fechaPoliza = "";
                string mesNombre = "";
                string year = "";

                var listaRegistrosCompraSUA = _context.tblC_Nom_Compra_SUA.Where(x => x.registroActivo && x.year == anio && x.periodo == periodo && x.tipoNomina == tipo_nomina).ToList();

                //Se agrupa la lista para obtener el último número de compra.
                listaRegistrosCompraSUA = listaRegistrosCompraSUA.GroupBy(x => new { x.sua_id, x.det_id, x.year, x.periodo, x.tipoNomina, x.cc, x.tipoRequisicion }).Select(x => new tblC_Nom_Compra_SUA
                {
                    sua_id = x.Key.sua_id,
                    det_id = x.Key.det_id,
                    year = x.Key.year,
                    periodo = x.Key.periodo,
                    tipoNomina = x.Key.tipoNomina,
                    cc = x.Key.cc,
                    numeroCompra = x.Max(y => y.numeroCompra),
                    tipoRequisicion = x.Key.tipoRequisicion
                }).ToList();

                if (listaRegistrosCompraSUA.Count() > 0)
                {
                    var sua_id = listaRegistrosCompraSUA[0].sua_id;
                    var listaRegistrosCompraSUA_det_id = listaRegistrosCompraSUA.Select(x => x.det_id).ToList();
                    var registroSUA = _context.tblC_Nom_SUA.FirstOrDefault(x => x.id == sua_id);

                    

                    if (registroSUA.poliza != null)
                    {
                        var listaStringPoliza = registroSUA.poliza != null ? registroSUA.poliza.Split('-').ToList() : new List<string>();
                        var yearPoliza = Int32.Parse(listaStringPoliza[0]);
                        var mes = Int32.Parse(listaStringPoliza[1]);
                        var numeroPoliza = Int32.Parse(listaStringPoliza[2]);
                        var tp = listaStringPoliza[3];

                        var registroPolizaEK = _contextEnkontrol.Select<NominaPolizaDTO>(conexionEnkontrol, new OdbcConsultaDTO()
                        {
                            consulta =
                                string.Format(@"SELECT * FROM sc_polizas WHERE year = {0} AND mes = {1} AND poliza = {2} AND tp = '{3}'", yearPoliza, mes, numeroPoliza, tp)
                        }).FirstOrDefault();

                        fechaPoliza = registroPolizaEK.fechapol.ToShortDateString();
                        var fechaMesAnterior = registroPolizaEK.fechapol.AddMonths(-1);
                        //mesNombre = new DateTime(anio, mes, 1).ToString("MMMM", CultureInfo.CreateSpecificCulture("es")).ToUpper();
                        mesNombre = fechaMesAnterior.ToString("MMMM", CultureInfo.CreateSpecificCulture("es")).ToUpper();
                        year = fechaMesAnterior.ToString("yyyy", CultureInfo.CreateSpecificCulture("es"));
                    }
                }
                #endregion

                using (ExcelPackage excel = new ExcelPackage())
                {
                    var hoja1 = excel.Workbook.Worksheets.Add("REPORTE COSTO SOCIAL");

                    #region HEADER
                    hoja1.Cells["B2:E2"].Merge = true;
                    hoja1.Cells["B2:E2"].LoadFromArrays(new List<string[]>() { new string[] { "CONCENTRADO COSTO SOCIAL " + empresaDesc } });
                    hoja1.Cells["B2:E2"].Style.Font.Bold = true;
                    hoja1.Cells["B2:E2"].Style.Font.Italic = true;
                    hoja1.Cells["B2:E2"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    hoja1.Cells["B2:E2"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    hoja1.Cells["B2:E2"].Style.Font.Size = 12;
                    hoja1.Cells["G2"].Value = fechaPoliza;
                    hoja1.Cells["G2"].Style.Font.Bold = true;
                    hoja1.Cells["G2"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    hoja1.Cells["G2"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    hoja1.Cells["G2"].Style.Font.Size = 11;
                    hoja1.Cells["G2"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    hoja1.Cells["G2"].Style.Fill.BackgroundColor.SetColor(255, 255, 230, 153);

                    hoja1.Cells["C3:D3"].Merge = true;
                    hoja1.Cells["C3:D3"].LoadFromArrays(new List<string[]>() { new string[] { "PROVEEDOR 5740" } });
                    hoja1.Cells["C3:D3"].Style.Font.Bold = true;
                    hoja1.Cells["C3:D3"].Style.Font.Italic = true;
                    hoja1.Cells["C3:D3"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    hoja1.Cells["C3:D3"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    hoja1.Cells["C3:D3"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    hoja1.Cells["C3:D3"].Style.Fill.BackgroundColor.SetColor(255, 255, 242, 204);
                    hoja1.Cells["C3:D3"].Style.Font.Size = 12;

                    hoja1.Cells["C4:D4"].Merge = true;
                    hoja1.Cells["C4:D4"].LoadFromArrays(new List<string[]>() { new string[] { mesNombre + " " + year } });
                    hoja1.Cells["C4:D4"].Style.Font.Bold = true;
                    hoja1.Cells["C4:D4"].Style.Font.Italic = true;
                    hoja1.Cells["C4:D4"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    hoja1.Cells["C4:D4"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    hoja1.Cells["C4:D4"].Style.Font.Size = 12;

                    hoja1.Cells["A5"].LoadFromArrays(new List<string[]>() { new string[] { "C.C." } });
                    hoja1.Cells["A5"].Style.Font.Bold = true;
                    hoja1.Cells["A5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    hoja1.Cells["A5"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    hoja1.Cells["A5"].Style.Font.Size = 10;
                    hoja1.Cells["A5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    hoja1.Cells["A5"].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    hoja1.Cells["A5"].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    hoja1.Cells["A5"].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    hoja1.Cells["B5"].LoadFromArrays(new List<string[]>() { new string[] { "REQ." } });
                    hoja1.Cells["B5"].Style.Font.Bold = true;
                    hoja1.Cells["B5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    hoja1.Cells["B5"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    hoja1.Cells["B5"].Style.Font.Size = 10;
                    hoja1.Cells["B5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    hoja1.Cells["B5"].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    hoja1.Cells["B5"].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    hoja1.Cells["B5"].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    hoja1.Cells["C5"].LoadFromArrays(new List<string[]>() { new string[] { "OBRA" } });
                    hoja1.Cells["C5"].Style.Font.Bold = true;
                    hoja1.Cells["C5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    hoja1.Cells["C5"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    hoja1.Cells["C5"].Style.Font.Size = 10;
                    hoja1.Cells["C5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    hoja1.Cells["C5"].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    hoja1.Cells["C5"].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    hoja1.Cells["C5"].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    hoja1.Cells["D5"].LoadFromArrays(new List<string[]>() { new string[] { "Subtotal" } });
                    hoja1.Cells["D5"].Style.Font.Bold = true;
                    hoja1.Cells["D5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    hoja1.Cells["D5"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    hoja1.Cells["D5"].Style.Font.Size = 10;
                    hoja1.Cells["D5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    hoja1.Cells["D5"].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    hoja1.Cells["D5"].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    hoja1.Cells["D5"].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    hoja1.Cells["D5"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    hoja1.Cells["D5"].Style.Fill.BackgroundColor.SetColor(255, 255, 230, 153);
                    hoja1.Cells["E5"].LoadFromArrays(new List<string[]>() { new string[] { "IVA" } });
                    hoja1.Cells["E5"].Style.Font.Bold = true;
                    hoja1.Cells["E5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    hoja1.Cells["E5"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    hoja1.Cells["E5"].Style.Font.Size = 10;
                    hoja1.Cells["E5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    hoja1.Cells["E5"].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    hoja1.Cells["E5"].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    hoja1.Cells["E5"].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    hoja1.Cells["F5"].LoadFromArrays(new List<string[]>() { new string[] { "Total Facturado" } });
                    hoja1.Cells["F5"].Style.Font.Bold = true;
                    hoja1.Cells["F5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    hoja1.Cells["F5"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    hoja1.Cells["F5"].Style.Font.Size = 10;
                    hoja1.Cells["F5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    hoja1.Cells["F5"].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    hoja1.Cells["F5"].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    hoja1.Cells["F5"].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    hoja1.Cells["G5"].LoadFromArrays(new List<string[]>() { new string[] { "O.C." } });
                    hoja1.Cells["G5"].Style.Font.Bold = true;
                    hoja1.Cells["G5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    hoja1.Cells["G5"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    hoja1.Cells["G5"].Style.Font.Size = 10;
                    hoja1.Cells["G5"].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    hoja1.Cells["G5"].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    hoja1.Cells["G5"].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    hoja1.Cells["G5"].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    hoja1.Cells["G5"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    hoja1.Cells["G5"].Style.Fill.BackgroundColor.SetColor(255, 255, 230, 153);
                    #endregion

                    #region DATOS
                    var cellData = new List<object[]>();
                    var contadorRenglones = 6;

                    foreach (var compraSUA in listaRegistrosCompraSUA)
                    {
                        dynamic registroCompraEK = null; //Se usa el tipo dinámico ya que truena la conversión del objeto cuando se usa OrdenCompraDTO.
                        OrdenCompraDetDTO registroCompraDetalleEK = null;

                        switch (compraSUA.tipoRequisicion)
                        {
                            case "COSTO SOCIAL":
                                registroCompraEK = _contextEnkontrol.Select<dynamic>(conexionEnkontrol, new OdbcConsultaDTO()
                                {
                                    consulta = string.Format(@"SELECT * FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", compraSUA.cc, compraSUA.numeroCompra)
                                }).FirstOrDefault();
                                registroCompraDetalleEK = _contextEnkontrol.Select<OrdenCompraDetDTO>(conexionEnkontrol, new OdbcConsultaDTO()
                                {
                                    consulta = string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", compraSUA.cc, compraSUA.numeroCompra)
                                }).FirstOrDefault();
                                break;
                            case "COSTO SOCIAL INTERCOMPAÑÍA CPLAN-GCPLAN":
                                registroCompraEK = _contextEnkontrol.Select<dynamic>(EnkontrolEnum.CplanProd, new OdbcConsultaDTO()
                                {
                                    consulta = string.Format(@"SELECT * FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", compraSUA.cc, compraSUA.numeroCompra)
                                }).FirstOrDefault();
                                registroCompraDetalleEK = _contextEnkontrol.Select<OrdenCompraDetDTO>(EnkontrolEnum.CplanProd, new OdbcConsultaDTO()
                                {
                                    consulta = string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", compraSUA.cc, compraSUA.numeroCompra)
                                }).FirstOrDefault();
                                break;
                        }

                        string nombreObra = _context.tblC_Nom_CatalogoCC.Where(x => x.cc == compraSUA.cc).Select(x => x.ccDescripcion).FirstOrDefault();

                        cellData.Add(new object[] {
                            compraSUA.cc,
                            registroCompraDetalleEK != null ? registroCompraDetalleEK.num_requisicion.ToString() : "",
                            nombreObra,
                            registroCompraEK != null ? Convert.ToDecimal(registroCompraEK.sub_total, CultureInfo.InvariantCulture).ToString("C") : "0",
                            registroCompraEK != null ? Convert.ToDecimal(registroCompraEK.iva, CultureInfo.InvariantCulture).ToString("C") : "0",
                            registroCompraEK != null ? Convert.ToDecimal(registroCompraEK.total, CultureInfo.InvariantCulture).ToString("C") : "0",
                            compraSUA.numeroCompra
                        });

                        if (registroCompraEK == null || registroCompraDetalleEK == null)
                        {
                            hoja1.Cells[string.Format("A{0}:G{0}", contadorRenglones)].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            hoja1.Cells[string.Format("A{0}:G{0}", contadorRenglones)].Style.Fill.BackgroundColor.SetColor(255, 255, 0, 0);
                        }

                        contadorRenglones++;
                    }

                    //Renglón Totales
                    cellData.Add(new object[] {
                        "",
                        "",
                        "TOTAL",
                        cellData.Sum(x => Convert.ToDecimal(x[3].ToString().Replace("$", "").Replace(",", ""))).ToString("C"),
                        cellData.Sum(x => Convert.ToDecimal(x[4].ToString().Replace("$", "").Replace(",", ""))).ToString("C"),
                        cellData.Sum(x => Convert.ToDecimal(x[5].ToString().Replace("$", "").Replace(",", ""))).ToString("C"),
                        ""
                    });

                    hoja1.Cells[6, 1].LoadFromArrays(cellData);

                    hoja1.Cells["A1:G" + contadorRenglones].Style.Font.Name = "Calibri Light";
                    hoja1.Cells["C" + contadorRenglones].Style.Font.Bold = true;

                    hoja1.Cells["A6:G" + contadorRenglones].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    hoja1.Cells["A6:G" + contadorRenglones].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    hoja1.Cells["A6:G" + contadorRenglones].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    hoja1.Cells["A6:G" + contadorRenglones].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                    hoja1.Cells[hoja1.Dimension.Address].AutoFitColumns();
                    #endregion

                    excel.Compression = OfficeOpenXml.CompressionLevel.BestSpeed;

                    var bytes = new MemoryStream();

                    using (var exportData = new MemoryStream())
                    {
                        excel.SaveAs(exportData);
                        bytes = exportData;
                    }

                    return bytes;
                }
            }
            catch (Exception e)
            {
                LogError(0, 0, _NOMBRE_CONTROLADOR, "DescargarExcelSUA", e, AccionEnum.CONSULTA, 0, new { tipo_nomina = tipo_nomina, anio = anio, periodo = periodo, tipo_documento = tipo_documento });

                return null;
            }
        }
        #endregion

        #region Empleado
        public Dictionary<string, object> GetTipoCuenta()
        {
            var resultado = new Dictionary<string, object>();

            try
            {
                var tiposCuenta = _context.tblC_Nom_EstructuraPolizaNominaCC
                    .Where(w =>
                        w.estatus &&
                        w.esPorEmpleado
                    ).Select(m => new Infrastructure.DTO.ComboDTO
                    {
                        Value = m.cuenta.id,
                        Text = m.cuenta.tipoCuenta.descripcion
                    });

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, tiposCuenta);
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);

                LogError(_SISTEMA, 0, "NominaController", "GetTipoCuenta", ex, AccionEnum.CONSULTA, 0, null);
            }

            return resultado;
        }
        public Dictionary<string, object> CatalogoCuentaEmpleado(int? tipoCuentaId, string cc)
        {
            var resultado = new Dictionary<string, object>();

            try
            {
                var cuentas = _context.tblC_Nom_CuentaEmpleado
                    .Where(w =>
                        w.estatus &&
                        (tipoCuentaId.HasValue ? w.cuenta.id == tipoCuentaId.Value : true) &&
                        (!string.IsNullOrEmpty(cc) ? w.cc == cc : true)
                    ).ToList();

                var cuentaEmpleado = new List<CuentaEmpleadoDTO>();

                foreach (var cuenta in cuentas)
                {
                    var infoEmpleado = new CuentaEmpleadoDTO();
                    infoEmpleado.id = cuenta.id;
                    infoEmpleado.numero = cuenta.numero;
                    infoEmpleado.nombre = cuenta.nombre;
                    infoEmpleado.apellidoPaterno = cuenta.apellidoPaterno;
                    infoEmpleado.apellidoMaterno = cuenta.apellidoMaterno;
                    infoEmpleado.nombreCompleto = !string.IsNullOrEmpty(cuenta.apellidoPaterno) ? cuenta.apellidoPaterno + " " : "";
                    infoEmpleado.nombreCompleto += !string.IsNullOrEmpty(cuenta.apellidoMaterno) ? cuenta.apellidoMaterno + " " : "";
                    infoEmpleado.nombreCompleto += cuenta.nombre;
                    infoEmpleado.tipoCuentaId = cuenta.cuenta.tipoCuentaId;
                    infoEmpleado.tipoCuentaDescripcion = cuenta.cuenta.tipoCuenta.descripcion;
                    infoEmpleado.cuenta = cuenta.cta + "-" + cuenta.scta + "-" + cuenta.sscta + "-" + cuenta.digito;
                    infoEmpleado.cuentaDescripcion = "[" + infoEmpleado.cuenta + "] " + cuenta.cuentaDescripcion;
                    infoEmpleado.validada = cuenta.validada;
                    infoEmpleado.cc = cuenta.cc;
                    infoEmpleado.ccDescripcion = "[" + cuenta.cc + "] " + cuenta.ccDescripcion;

                    cuentaEmpleado.Add(infoEmpleado);
                }

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, cuentaEmpleado);
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, true);
                resultado.Add(MESSAGE, ex.Message);

                LogError(_SISTEMA, 0, "NominaController", "CuentaEmpleado", ex, AccionEnum.CONSULTA, 0, null);
            }

            return resultado;
        }

        public Dictionary<string, object> RegistrarEmpleado(tblC_Nom_CuentaEmpleado empleado)
        {
            var resultado = new Dictionary<string, object>();

            try
            {
                if (_context.tblC_Nom_UsuarioValida.Any(a => a.estatus && a.usuarioId == vSesiones.sesionUsuarioDTO.id))
                {
                    var yaExiste = _context.tblC_Nom_CuentaEmpleado.FirstOrDefault(f => f.estatus && f.numero == empleado.numero && f.cuenta.id == empleado.cuentaId);
                    if (yaExiste == null)
                    {
                        empleado.cuentaDescripcion = (_cuentaDAO.GetCuenta(empleado.cta, empleado.scta, empleado.sscta) as catctaDTO).descripcion;
                        empleado.cuentaId = _context.tblC_Nom_Cuenta.First(f => f.id == empleado.cuentaId).tipoCuentaId;
                        empleado.estatus = true;
                        empleado.fechaCreacion = DateTime.Now;
                        empleado.fechaModificacion = empleado.fechaCreacion;
                        empleado.fechaValidacion = empleado.fechaCreacion;
                        empleado.usuarioCreacionId = vSesiones.sesionUsuarioDTO.id;
                        empleado.usuarioModificacionId = empleado.usuarioCreacionId;
                        empleado.usuarioValidoId = empleado.usuarioCreacionId;
                        empleado.validada = true;

                        _context.tblC_Nom_CuentaEmpleado.Add(empleado);
                        _context.SaveChanges();

                        resultado.Add(SUCCESS, true);
                        resultado.Add(ITEMS, CrearDTOCuentaEmpleado(empleado));
                    }
                    else
                    {
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "Ya existe una relación cuenta-empleado para el número de empleado " + empleado.numero + " y tipo de cuenta " + yaExiste.cuenta.tipoCuenta.descripcion);
                    }
                }
                else
                {
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, "No cuenta con permisos para realizar esta operación");
                }
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);

                LogError(_SISTEMA, 0, "NominaController", "RegistrarEmpleado", ex, AccionEnum.AGREGAR, 0, empleado);
            }

            return resultado;
        }

        public Dictionary<string, object> EliminarEmpleado(int id)
        {
            var resultado = new Dictionary<string, object>();

            try
            {
                if (_context.tblC_Nom_UsuarioValida.Any(a => a.estatus && a.usuarioId == vSesiones.sesionUsuarioDTO.id))
                {
                    var empleado = _context.tblC_Nom_CuentaEmpleado.First(f => f.estatus && f.id == id);
                    empleado.estatus = false;

                    _context.SaveChanges();

                    resultado.Add(SUCCESS, true);
                }
                else
                {
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, "No cuenta con permisos para realizar esta operación");
                }
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);

                LogError(_SISTEMA, 0, "NominaController", "EliminarEmpleado", ex, AccionEnum.ELIMINAR, 0, new { id });
            }

            return resultado;
        }

        public Dictionary<string, object> ModificarEmpleado(tblC_Nom_CuentaEmpleado empleado)
        {
            var resultado = new Dictionary<string, object>();

            try
            {
                if (_context.tblC_Nom_UsuarioValida.Any(a => a.estatus && a.usuarioId == vSesiones.sesionUsuarioDTO.id))
                {
                    var registro = _context.tblC_Nom_CuentaEmpleado.First(f => f.id == empleado.id && f.estatus);

                    registro.numero = empleado.numero;
                    registro.nombre = empleado.nombre.Trim();
                    registro.apellidoPaterno = empleado.apellidoPaterno.Trim();
                    registro.apellidoMaterno = empleado.apellidoMaterno.Trim();
                    registro.cuentaId = _context.tblC_Nom_Cuenta.First(f => f.id == empleado.cuentaId).tipoCuentaId;
                    registro.cta = empleado.cta;
                    registro.scta = empleado.scta;
                    registro.sscta = empleado.sscta;
                    registro.digito = empleado.digito;
                    registro.cuentaDescripcion = (_cuentaDAO.GetCuenta(empleado.cta, empleado.scta, empleado.sscta) as catctaDTO).descripcion;
                    registro.cc = empleado.cc;
                    registro.validada = true;
                    registro.fechaValidacion = registro.fechaValidacion != null ? registro.fechaValidacion : registro.fechaModificacion;
                    registro.fechaModificacion = DateTime.Now;
                    registro.usuarioModificacionId = vSesiones.sesionUsuarioDTO.id;
                    registro.usuarioValidoId = vSesiones.sesionUsuarioDTO.id;

                    if (_context.tblC_Nom_CuentaEmpleado
                        .Any(a =>
                            a.estatus &&
                            a.numero == registro.numero &&
                            (
                                (
                                    a.cuentaId == registro.cuentaId &&
                                    a.id == empleado.id
                                ) ? false : (a.id != empleado.id && a.cuentaId == registro.cuentaId) ? true : false
                            )))
                    {
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "Ya existe una relación cuenta-empleado para este número de empleado y tipo de cuenta");
                    }
                    else
                    {
                        _context.SaveChanges();

                        resultado.Add(SUCCESS, true);
                        resultado.Add(ITEMS, CrearDTOCuentaEmpleado(registro));
                    }
                }
                else
                {
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, "No cuenta con permisos para realizar esta operación");
                }
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);

                LogError(_SISTEMA, 0, "NominaController", "ModificarEmpleado", ex, AccionEnum.ACTUALIZAR, 0, empleado);
            }

            return resultado;
        }

        public Dictionary<string, object> ValidarCuentaEmpleado(List<ValidarCuentaEmpleadoDTO> ids)
        {
            var resultado = new Dictionary<string, object>();

            try
            {
                if (_context.tblC_Nom_UsuarioValida.Any(a => a.estatus && a.usuarioId == vSesiones.sesionUsuarioDTO.id))
                {
                    if (ids != null)
                    {
                        var fechaActual = DateTime.Now;

                        var soloIds = ids.Select(m => m.id).ToList();

                        var cuentas = _context.tblC_Nom_CuentaEmpleado.Where(w => soloIds.Contains(w.id) && w.estatus).ToList();

                        foreach (var cta in cuentas)
                        {
                            var nuevoEstatus = ids.First(f => f.id == cta.id);

                            if (!nuevoEstatus.check)
                            {
                                if (cta.validada)
                                {
                                    cta.validada = false;
                                    cta.usuarioValidoId = null;
                                    cta.usuarioModificacionId = vSesiones.sesionUsuarioDTO.id;
                                    cta.fechaValidacion = null;
                                    cta.fechaModificacion = fechaActual;
                                }
                            }
                            else
                            {
                                if (!cta.validada)
                                {
                                    cta.validada = true;
                                    cta.usuarioValidoId = vSesiones.sesionUsuarioDTO.id;
                                    cta.usuarioModificacionId = vSesiones.sesionUsuarioDTO.id;
                                    cta.fechaValidacion = fechaActual;
                                    cta.fechaModificacion = fechaActual;
                                }
                            }
                        }

                        _context.SaveChanges();
                    }

                    resultado.Add(SUCCESS, true);
                }
                else
                {
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, "No cuenta con permisos para realizar esta operación");
                }
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);

                LogError(_SISTEMA, 0, "NominaController", "ValidarCuentaEmpleado", ex, AccionEnum.ACTUALIZAR, 0, ids);
            }

            return resultado;
        }

        public Dictionary<string, object> RelacionarCuentasEmpleadosAutomaticamente()
        {
            var resultado = new Dictionary<string, object>();

            using (var transaccion = _context.Database.BeginTransaction())
            {
                try
                {
                    if (vSesiones.sesionUsuarioDTO.id == 6571)
                    {
                        var cuentasDescuentoPorEmpleado = _context.tblC_Nom_EstructuraPolizaNominaCC.Where(w => w.estatus && w.esPorEmpleado && w.descuento && w.tipoNominaId == (int)TipoPeriodoEnum.Semanal && w.clasificacionCcId == 2).Select(m => new { cta = m.cuenta.cta, scta = m.cuenta.scta, cuentaId = m.cuentaId }).Distinct().ToList();
                        var catalogoCuentas = _cuentaDAO.GetCuentas(cuentasDescuentoPorEmpleado.Select(m => m.cta).ToList()) as List<catctaDTO>;
                        var catalogoEmpleados = _empleadoDAO.ObtenerEmpleados();

                        var listaRegistros = new List<tblC_Nom_CuentaEmpleado>();

                        foreach (var cuentaDescuento in cuentasDescuentoPorEmpleado)
                        {
                            foreach (var cta in catalogoCuentas.Where(w => w.cta == cuentaDescuento.cta && w.scta == cuentaDescuento.scta))
                            {
                                var ctaEmpleado = catalogoEmpleados.FirstOrDefault(f => (f.ape_paterno + " " + f.ape_materno + " " + f.nombre) == cta.descripcion);

                                if (ctaEmpleado != null && !_context.tblC_Nom_CuentaEmpleado.Any(a => a.estatus && a.numero == ctaEmpleado.clave_empleado && a.cuentaId == cuentaDescuento.cuentaId))
                                {
                                    var cuentaEmpleado = new tblC_Nom_CuentaEmpleado();
                                    cuentaEmpleado.numero = ctaEmpleado.clave_empleado;
                                    cuentaEmpleado.nombre = ctaEmpleado.nombre;
                                    cuentaEmpleado.apellidoPaterno = ctaEmpleado.ape_paterno;
                                    cuentaEmpleado.apellidoMaterno = ctaEmpleado.ape_materno;
                                    cuentaEmpleado.cuentaId = cuentaDescuento.cuentaId;
                                    cuentaEmpleado.cta = cta.cta;
                                    cuentaEmpleado.scta = cta.scta;
                                    cuentaEmpleado.sscta = cta.sscta;
                                    cuentaEmpleado.digito = cta.digito;
                                    cuentaEmpleado.cuentaDescripcion = cta.descripcion;
                                    cuentaEmpleado.cc = "";
                                    cuentaEmpleado.ccDescripcion = "";
                                    cuentaEmpleado.estatus = true;
                                    cuentaEmpleado.fechaCreacion = DateTime.Now;
                                    cuentaEmpleado.fechaModificacion = cuentaEmpleado.fechaCreacion;
                                    cuentaEmpleado.usuarioCreacionId = vSesiones.sesionUsuarioDTO.id;
                                    cuentaEmpleado.usuarioModificacionId = vSesiones.sesionUsuarioDTO.id;

                                    _context.tblC_Nom_CuentaEmpleado.Add(cuentaEmpleado);
                                    _context.SaveChanges();//Tengo el save dentro del ciclo para poder buscar si se acaba de registrar y evitar duplicarlo
                                }
                            }
                        }

                        transaccion.Commit();

                        resultado.Add(SUCCESS, true);
                    }

                }
                catch (Exception ex)
                {
                    transaccion.Rollback();

                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, ex.Message);

                    LogError(_SISTEMA, 0, "NominaController", "RelacionarCuentasEmpleadosAutomaticamente", ex, AccionEnum.AGREGAR, 0, null);
                }
            }

            return resultado;
        }

        private CuentaEmpleadoDTO CrearDTOCuentaEmpleado(tblC_Nom_CuentaEmpleado cuentaEmpleado)
        {
            var infoEmpleado = new CuentaEmpleadoDTO();
            infoEmpleado.id = cuentaEmpleado.id;
            infoEmpleado.numero = cuentaEmpleado.numero;
            infoEmpleado.nombre = cuentaEmpleado.nombre;
            infoEmpleado.apellidoPaterno = cuentaEmpleado.apellidoPaterno;
            infoEmpleado.apellidoMaterno = cuentaEmpleado.apellidoMaterno;
            infoEmpleado.nombreCompleto = !string.IsNullOrEmpty(cuentaEmpleado.apellidoPaterno) ? cuentaEmpleado.apellidoPaterno + " " : "";
            infoEmpleado.nombreCompleto += !string.IsNullOrEmpty(cuentaEmpleado.apellidoMaterno) ? cuentaEmpleado.apellidoMaterno + " " : "";
            infoEmpleado.nombreCompleto += cuentaEmpleado.nombre;
            infoEmpleado.tipoCuentaId = cuentaEmpleado.cuenta.tipoCuentaId;
            infoEmpleado.tipoCuentaDescripcion = cuentaEmpleado.cuenta.tipoCuenta.descripcion;
            infoEmpleado.cuenta = cuentaEmpleado.cta + "-" + cuentaEmpleado.scta + "-" + cuentaEmpleado.sscta + "-" + cuentaEmpleado.digito;
            infoEmpleado.cuentaDescripcion = "[" + infoEmpleado.cuenta + "] " + cuentaEmpleado.cuentaDescripcion;
            infoEmpleado.validada = cuentaEmpleado.validada;
            infoEmpleado.cc = cuentaEmpleado.cc;
            infoEmpleado.ccDescripcion = "[" + cuentaEmpleado.cc + "] " + cuentaEmpleado.ccDescripcion;

            return infoEmpleado;
        }
        #endregion

        #region Prenomina
        //Este metodo ya incluye la consulta a todos los CCs para una sola prenomina unificada y ataja los casos cuando un empleado aparece en varios CCs
        private List<tblC_Nom_PreNomina_Det> CalcularPrenominaBase(string CC_Todo, int periodo, tipoNominaPropuestaEnum tipoNomina, int anio, List<tblC_Nom_PreNomina_Det> detallesCambio)
        {
            try
            {
                // Ahora saco listado de CC
                List<tblC_Nom_CatalogoCC> ccsCatalogo = new List<tblC_Nom_CatalogoCC>();
                if (tipoNomina == tipoNominaPropuestaEnum.Aguinaldo)
                    ccsCatalogo = _context.tblC_Nom_CatalogoCC.Where(x => (periodo == 1 ? x.semanal : x.quincenal) && x.estatus).Distinct().ToList();
                else
                    ccsCatalogo = _context.tblC_Nom_CatalogoCC.Where(x => (tipoNomina == tipoNominaPropuestaEnum.Semanal ? x.semanal : x.quincenal) && x.estatus).Distinct().ToList();

                // Lista para almacenar todos los detalles de prenomina
                List<tblC_Nom_PreNomina_Det> todosLosDetalles = new List<tblC_Nom_PreNomina_Det>();

                // Procesar cada centro de costo
                foreach (var cc in ccsCatalogo)
                {
                    string CC = cc.cc; // Obtener el valor del centro de costo actual
                    List<tblC_Nom_PreNomina_Det> detalles = new List<tblC_Nom_PreNomina_Det>();
                    tblRH_BN_Incidencia incidenciaPpal = _context.tblRH_BN_Incidencia.Where(x => x.cc == CC && x.anio == anio && x.tipo_nomina == (int)tipoNomina && x.periodo == periodo && x.estatus == "A").OrderByDescending(x => x.fecha_auto).FirstOrDefault();

                    if (incidenciaPpal != null)
                    {
                        int incidenciaID = incidenciaPpal.id;
                        var incidenciaDet = _context.tblRH_BN_Incidencia_det.Where(x => x.incidenciaID == incidenciaID).ToList();
                        List<int> empleados = incidenciaDet.Select(x => x.clave_empleado).ToList();
                        var listaDescuentosProgramados = _context.tblC_Nom_PreNomina_Descuento.Where(x => x.anio == anio && (int)tipoNomina == x.tipoNomina && x.periodoInicial <= periodo && x.periodoFinal >= periodo && empleados.Contains(x.empleadoCve) && x.estatus).ToList();
                        var fechasPeriodo = _context.tblRH_BN_EstatusPeriodos.FirstOrDefault(x => x.anio == anio && x.tipo_nomina == (int)tipoNomina && x.periodo == periodo);
                        DateTime fechaCorte = fechasPeriodo == null ? DateTime.Today : fechasPeriodo.fecha_limite;

                        var stringEmpleados = string.Join(",", empleados);
                        var result = _context.Select<tblRH_BN_Evaluacion_Det>(new DapperDTO
                        {
                            baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                            consulta = string.Format(@"SELECT 
                          e.clave_empleado AS cve_Emp,
                          e.fecha_antiguedad AS fechaAlta,
                          (SELECT TOP 1 salario_base FROM tblRH_EK_Tabulador_Historial WHERE clave_empleado = e.clave_empleado AND fechaAplicaCambio <= @fecha_cambio ORDER BY fechaAplicaCambio DESC, id DESC) AS base_Emp,
                          (SELECT TOP 1 complemento FROM tblRH_EK_Tabulador_Historial WHERE clave_empleado = e.clave_empleado AND fechaAplicaCambio <= @fecha_cambio ORDER BY fechaAplicaCambio DESC, id DESC) AS complemento_Emp,
                          (SELECT TOP 1 bono_zona FROM tblRH_EK_Tabulador_Historial WHERE clave_empleado = e.clave_empleado AND fechaAplicaCambio <= @fecha_cambio ORDER BY fechaAplicaCambio DESC, id DESC) AS bono_FC,
                          e.sindicato AS aplicaSindicato
                          FROM tblRH_EK_Empleados AS e 
                          INNER JOIN tblRH_EK_Tipos_Nomina AS tn ON e.tipo_nomina = tn.tipo_nomina
                          WHERE tn.tipo_nomina = {0} AND e.clave_empleado IN ({1})", (int)tipoNomina, stringEmpleados),
                            parametros = new { fecha_cambio = fechaCorte }
                        }).ToList();

                        var tipoNominaDias = tipoNomina == tipoNominaPropuestaEnum.Semanal ? 7 : tipoNomina == tipoNominaPropuestaEnum.Quincenal ? 15 : 1;
                        bool aplicaSindicatoCC = _context.tblRH_BN_REGLA_CC.Any(x => x.cc == CC && x.tipo == 1);
                        bool aplicaPrimaDominicalCC = _context.tblRH_BN_REGLA_CC.Any(x => x.cc == CC && x.tipo == 2);
                        tblRH_BN_REGLA_CC reglaSindicato = _context.tblRH_BN_REGLA_CC.FirstOrDefault(x => x.cc == CC && x.tipo == 1);
                        decimal porcentajeSindicato = reglaSindicato != null ? reglaSindicato.cuota : 0;
                        List<int> domingos = new List<int>();

                        if (aplicaPrimaDominicalCC)
                        {
                            if (tipoNomina == tipoNominaPropuestaEnum.Semanal)
                            {
                                domingos.Add(5);
                            }
                            else if (tipoNomina == tipoNominaPropuestaEnum.Quincenal)
                            {
                                var diaInicial = _context.tblC_Nom_CatPeriodo.FirstOrDefault(x => x.anio == anio && x.periodo == periodo && x.tipoNomina == (int)tipoNomina).fechaInicio;
                                var diaSemana = (int)diaInicial.DayOfWeek;
                                switch (diaSemana)
                                {
                                    case 0: domingos.AddRange(new[] { 1, 8, 15 }); break;
                                    case 1: domingos.AddRange(new[] { 7, 14 }); break;
                                    case 2: domingos.AddRange(new[] { 6, 13 }); break;
                                    case 3: domingos.AddRange(new[] { 5, 12 }); break;
                                    case 4: domingos.AddRange(new[] { 4, 11 }); break;
                                    case 5: domingos.AddRange(new[] { 3, 10 }); break;
                                    case 6: domingos.AddRange(new[] { 2, 9 }); break;
                                    case 7: domingos.AddRange(new[] { 1, 8, 15 }); break;
                                }
                            }
                        }

                        var vacacionesAutorizadas = _context.tblRH_Vacaciones_Vacaciones.Where(x => x.cc == CC && x.estado == 1 && x.registroActivo).ToList();
                        var vacacionesAutorizadasID = vacacionesAutorizadas.Select(x => x.id).ToList();
                        var vacacionesSistema = _context.tblRH_Vacaciones_Fechas.Where(x => x.idIncidencia == incidenciaID && vacacionesAutorizadasID.Contains(x.vacacionID) && x.registroActivo && x.incidenciaAplicada).ToList().Select(x =>
                        {
                            var vacacion = vacacionesAutorizadas.FirstOrDefault(y => y.id == x.vacacionID);
                            return new FechasVacacionesDTO
                            {
                                clave_empleado = vacacion != null ? int.Parse(vacacion.claveEmpleado) : 0,
                                fecha = x.fecha != null ? x.fecha.Value : DateTime.Today
                            };
                        }).ToList();

                        detalles = incidenciaDet.Select(x =>
                        {
                            var auxDetallesCambio = detallesCambio.FirstOrDefault(y => y.empleadoCve == x.clave_empleado);
                            var listaDescuentosProgramadosEmpleado = listaDescuentosProgramados.Where(y => y.empleadoCve == x.clave_empleado).ToList();

                            decimal totalDiasFinal = x.total_Dias - x.dias_extras - x.dias_extra_concepto;
                            int totalDiasExtraFinal = x.dias_extras;
                            int totalDiasFestivosFinal = 0;
                            decimal hrExtraFinal = x.totalo_Horas;
                            decimal totalDiasVacacionesFinal = vacacionesSistema.Count(y => y.clave_empleado == x.clave_empleado);

                            var diasDoblePaga = new List<int> { 9 };
                            var diasTriplePaga = new List<int> { 17 };

                            if (diasDoblePaga.Contains(x.dia1)) totalDiasExtraFinal++;
                            if (diasTriplePaga.Contains(x.dia1)) totalDiasFestivosFinal++;

                            // Calcular los descuentos
                            decimal descuentosFinal = 0;
                            decimal apoyoColectivoFinal = 0;
                            decimal prestamoFinal = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.Prestamo).Sum(y => y.monto);
                            decimal axaFinal = 0;
                            decimal famsaFinal = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.Famsa).Sum(y => y.monto);
                            decimal pensionFinal = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.PensionAlimenticia).Sum(y => y.monto);
                            decimal fonacotFinal = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.Fonacot).Sum(y => y.monto);
                            decimal infonavitFinal = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.Infonavit).Sum(y => y.monto);
                            decimal otrosFinal = 0;
                            decimal primaVacacionalFinal = 0;

                            if (auxDetallesCambio != null)
                            {
                                totalDiasFinal = auxDetallesCambio.dias;
                                totalDiasVacacionesFinal = auxDetallesCambio.diasVacaciones;
                                totalDiasExtraFinal = auxDetallesCambio.diaHrExtra;
                                totalDiasFestivosFinal = auxDetallesCambio.diaFestivo;
                                hrExtraFinal = auxDetallesCambio.hrExtra;

                                descuentosFinal = auxDetallesCambio.descuento;
                                apoyoColectivoFinal = auxDetallesCambio.apoyoColectivo;
                                prestamoFinal = auxDetallesCambio.prestamo;
                                axaFinal = auxDetallesCambio.axa;
                                famsaFinal = auxDetallesCambio.descuentoFamsa;
                                pensionFinal = auxDetallesCambio.pensionAlimenticia;
                                fonacotFinal = auxDetallesCambio.fonacot;
                                infonavitFinal = auxDetallesCambio.infonavit;
                                otrosFinal = auxDetallesCambio.otros;
                            }

                            var importes = result.FirstOrDefault(y => y.cve_Emp == x.clave_empleado);
                            decimal baseNomina = importes != null ? importes.base_Emp * ((decimal)totalDiasFinal / (decimal)tipoNominaDias) : 0;
                            decimal baseNominaVacaciones = importes != null ? importes.base_Emp * ((decimal)totalDiasVacacionesFinal / (decimal)tipoNominaDias) : 0;
                            decimal fondoAhorroNomina = importes != null ? (baseNomina + baseNominaVacaciones) * (decimal)0.025 : 0;
                            decimal complementoFinal = importes != null ? importes.complemento_Emp * (((decimal)totalDiasFinal + (decimal)totalDiasVacacionesFinal) / (decimal)tipoNominaDias) : 0;
                            decimal fondoAhorroComplemento = importes != null ? complementoFinal * (decimal)0.025 : 0;

                            var fechaAniversario = importes != null ? new DateTime(anio, importes.fechaAlta.Month, importes.fechaAlta.Day) : DateTime.MinValue;
                            if (importes != null && fechaAniversario >= fechasPeriodo.fecha_inicial && fechaAniversario <= fechasPeriodo.fecha_final)
                            {
                                int numDias = _vacacionesDAO.GetNumDias(x.clave_empleado.ToString(), fechaAniversario) ?? 0;
                                primaVacacionalFinal = (numDias * (importes.base_Emp + importes.complemento_Emp + importes.bono_FC) * 0.25M) / (decimal)tipoNominaDias;
                            }

                            if (auxDetallesCambio != null)
                            {
                                fondoAhorroNomina = auxDetallesCambio.fondoAhorroNomina;
                                fondoAhorroComplemento = auxDetallesCambio.fondoAhorroComplemento;
                                primaVacacionalFinal = auxDetallesCambio.primaVacacional;
                            }

                            List<int> empleadosExcepcion = new List<int> { 0 };

                            if (empleadosExcepcion.Contains(x.clave_empleado) && tipoNomina == tipoNominaPropuestaEnum.Quincenal)
                            {
                                fondoAhorroNomina = 0;
                                fondoAhorroComplemento = 0;
                            }

                            bool aplicaSindicato = aplicaSindicatoCC && _context.tblRH_BN_REGLA_Puestos.Any(y => y.puesto == x.puesto && y.tipo == 1) && tipoNomina == tipoNominaPropuestaEnum.Semanal;
                            bool aplicaPrimaDominical = aplicaPrimaDominicalCC;
                            if (CC == "007" && x.puesto != 93) aplicaPrimaDominical = false;
                            decimal primaDominical = 0;

                            decimal bonoZona = importes != null ? importes.bono_FC : 0;

                            decimal sueldoSemanal = importes != null ? importes.base_Emp + importes.complemento_Emp + bonoZona + x.bonoCuadrado : 0;
                            decimal sueldoDia = importes != null ? (importes.base_Emp + importes.complemento_Emp + bonoZona) / tipoNominaDias : 0;
                            decimal sueldoHora = importes != null ? ((importes.base_Emp + importes.complemento_Emp + bonoZona) / 55) * 2 : 0;

                            bonoZona = bonoZona * (((decimal)totalDiasFinal + (decimal)totalDiasVacacionesFinal) / (decimal)tipoNominaDias);

                            if (aplicaPrimaDominical && x.primaDominical)
                            {
                                decimal auxPrimaDominical = (sueldoSemanal / (tipoNomina == tipoNominaPropuestaEnum.Semanal ? 7 : 15)) * (decimal)0.25;

                                if (domingos.Contains(1) && (x.dia1 == 1 || x.dia1 == 9 || x.dia1 == (vSesiones.sesionEmpresaActual == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                                if (domingos.Contains(2) && (x.dia2 == 1 || x.dia2 == 9 || x.dia2 == (vSesiones.sesionEmpresaActual == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                                if (domingos.Contains(3) && (x.dia3 == 1 || x.dia3 == 9 || x.dia3 == (vSesiones.sesionEmpresaActual == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                                if (domingos.Contains(4) && (x.dia4 == 1 || x.dia4 == 9 || x.dia4 == (vSesiones.sesionEmpresaActual == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                                if (domingos.Contains(5) && (x.dia5 == 1 || x.dia5 == 9 || x.dia5 == (vSesiones.sesionEmpresaActual == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                                if (domingos.Contains(6) && (x.dia6 == 1 || x.dia6 == 9 || x.dia6 == (vSesiones.sesionEmpresaActual == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                                if (domingos.Contains(7) && (x.dia7 == 1 || x.dia7 == 9 || x.dia7 == (vSesiones.sesionEmpresaActual == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                                if (domingos.Contains(8) && (x.dia8 == 1 || x.dia8 == 9 || x.dia8 == (vSesiones.sesionEmpresaActual == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                                if (domingos.Contains(9) && (x.dia9 == 1 || x.dia9 == 9 || x.dia9 == (vSesiones.sesionEmpresaActual == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                                if (domingos.Contains(10) && (x.dia10 == 1 || x.dia10 == 9 || x.dia10 == (vSesiones.sesionEmpresaActual == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                                if (domingos.Contains(11) && (x.dia11 == 1 || x.dia11 == 9 || x.dia11 == (vSesiones.sesionEmpresaActual == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                                if (domingos.Contains(12) && (x.dia12 == 1 || x.dia12 == 9 || x.dia12 == (vSesiones.sesionEmpresaActual == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                                if (domingos.Contains(13) && (x.dia13 == 1 || x.dia13 == 9 || x.dia13 == (vSesiones.sesionEmpresaActual == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                                if (domingos.Contains(14) && (x.dia14 == 1 || x.dia14 == 9 || x.dia14 == (vSesiones.sesionEmpresaActual == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                                if (domingos.Contains(15) && (x.dia15 == 1 || x.dia15 == 9 || x.dia15 == (vSesiones.sesionEmpresaActual == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                                if (domingos.Contains(16) && (x.dia16 == 1 || x.dia16 == 9 || x.dia16 == (vSesiones.sesionEmpresaActual == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                            }

                            decimal sindicato = (importes == null || !aplicaSindicato) ? 0 : (baseNomina + baseNominaVacaciones) * (porcentajeSindicato == 0 ? (decimal)0.02 : (porcentajeSindicato / (decimal)100));
                            decimal bonoProduccion = auxDetallesCambio == null ? x.bono + x.bonoU + x.bonoDM : auxDetallesCambio.bonoProduccion;
                            decimal totalNominaFinal = (baseNomina + baseNominaVacaciones) - sindicato - fondoAhorroNomina - descuentosFinal - apoyoColectivoFinal - prestamoFinal - axaFinal - famsaFinal - pensionFinal - fonacotFinal - infonavitFinal;
                            decimal totalComplementoFinal = complementoFinal - fondoAhorroComplemento + bonoProduccion + bonoZona + otrosFinal + primaVacacionalFinal + primaDominical + (hrExtraFinal * sueldoHora) + ((decimal)totalDiasExtraFinal * sueldoDia) + ((decimal)totalDiasFestivosFinal * sueldoDia * 2);
                            decimal totalPagar = totalNominaFinal + totalComplementoFinal;

                            return new tblC_Nom_PreNomina_Det
                            {
                                empleadoCve = x.clave_empleado,
                                empleadoNombre = x.ape_paterno + ' ' + x.ape_materno + " " + x.nombre,
                                puesto = x.puestoDesc,
                                sueldoSemanal = sueldoSemanal,
                                dias = totalDiasFinal,
                                nominaBase = baseNomina,
                                diasVacaciones = totalDiasVacacionesFinal,
                                nominaBaseVacaciones = baseNominaVacaciones,
                                sindicato = sindicato,
                                fondoAhorroNomina = fondoAhorroNomina,
                                descuento = descuentosFinal,
                                prestamo = prestamoFinal,
                                axa = axaFinal,
                                descuentoFamsa = famsaFinal,
                                pensionAlimenticia = pensionFinal,
                                fonacot = fonacotFinal,
                                infonavit = infonavitFinal,
                                totalNomina = totalNominaFinal,
                                complementoNomina = complementoFinal,
                                fondoAhorroComplemento = fondoAhorroComplemento,
                                bonoProduccion = bonoProduccion,
                                bonoZona = bonoZona,
                                otros = otrosFinal,
                                primaVacacional = primaVacacionalFinal,
                                primaDominical = primaDominical,
                                hrExtra = hrExtraFinal,
                                hrExtraValor = sueldoHora,
                                importeExtra = hrExtraFinal * sueldoHora,
                                diaHrExtra = totalDiasExtraFinal,
                                diaExtraValor = sueldoDia,
                                importeDiaExtra = (decimal)totalDiasExtraFinal * sueldoDia,
                                diaFestivo = totalDiasFestivosFinal,
                                diaFestivoValor = sueldoDia * 2,
                                importeDiaFestivo = (decimal)totalDiasFestivosFinal * sueldoDia * 2,
                                totalComplemento = totalComplementoFinal,
                                totalPagar = totalPagar,
                                porcentajeTotalPagar = 1,
                                totalRealPagar = totalPagar,
                                valesDespensa = Math.Round(((decimal)103.74 * (decimal)0.4 * ((decimal)totalDiasFinal + (decimal)totalDiasVacacionesFinal)), 2),
                                totalDeposito = totalPagar - Math.Round(((decimal)103.74 * (decimal)0.4 * ((decimal)totalDiasFinal + (decimal)totalDiasVacacionesFinal)), 2),
                                observaciones = x.observaciones + (x.observaciones == "" ? "" : Environment.NewLine) + x.bono_Obs,
                                estatus = true,
                                apoyoColectivo = apoyoColectivoFinal,
                                fechaAntiguedad = importes != null ? importes.fechaAlta.ToShortDateString() : ""
                            };
                        }).ToList();
                    }

                    // Agregar los detalles calculados para el CC actual a la lista total
                    todosLosDetalles.AddRange(detalles);
                }

                // Fusión de registros duplicados
                var registrosFusionados = todosLosDetalles
                    .GroupBy(x => x.empleadoCve)
                    .Select(g =>
                    {
                        var primerRegistro = g.First();
                        var registroFusionado = new tblC_Nom_PreNomina_Det
                        {
                            empleadoCve = primerRegistro.empleadoCve,
                            empleadoNombre = primerRegistro.empleadoNombre,
                            puesto = primerRegistro.puesto,
                            sueldoSemanal = g.Sum(x => x.sueldoSemanal),
                            dias = g.Sum(x => x.dias),
                            nominaBase = g.Sum(x => x.nominaBase),
                            diasVacaciones = g.Sum(x => x.diasVacaciones),
                            nominaBaseVacaciones = g.Sum(x => x.nominaBaseVacaciones),
                            sindicato = g.Sum(x => x.sindicato),
                            fondoAhorroNomina = g.Sum(x => x.fondoAhorroNomina),
                            descuento = g.Sum(x => x.descuento),
                            prestamo = g.Sum(x => x.prestamo),
                            axa = g.Sum(x => x.axa),
                            descuentoFamsa = g.Sum(x => x.descuentoFamsa),
                            pensionAlimenticia = g.Sum(x => x.pensionAlimenticia),
                            fonacot = g.Sum(x => x.fonacot),
                            infonavit = g.Sum(x => x.infonavit),
                            totalNomina = g.Sum(x => x.totalNomina),
                            complementoNomina = g.Sum(x => x.complementoNomina),
                            fondoAhorroComplemento = g.Sum(x => x.fondoAhorroComplemento),
                            bonoProduccion = g.Sum(x => x.bonoProduccion),
                            bonoZona = g.Sum(x => x.bonoZona),
                            otros = g.Sum(x => x.otros),
                            primaVacacional = g.Sum(x => x.primaVacacional),
                            primaDominical = g.Sum(x => x.primaDominical),
                            hrExtra = g.Sum(x => x.hrExtra),
                            hrExtraValor = primerRegistro.hrExtraValor,
                            importeExtra = g.Sum(x => x.importeExtra),
                            diaHrExtra = g.Sum(x => x.diaHrExtra),
                            diaExtraValor = primerRegistro.diaExtraValor,
                            importeDiaExtra = g.Sum(x => x.importeDiaExtra),
                            diaFestivo = g.Sum(x => x.diaFestivo),
                            diaFestivoValor = primerRegistro.diaFestivoValor,
                            importeDiaFestivo = g.Sum(x => x.importeDiaFestivo),
                            totalComplemento = g.Sum(x => x.totalComplemento),
                            totalPagar = g.Sum(x => x.totalPagar),
                            porcentajeTotalPagar = 1,
                            totalRealPagar = g.Sum(x => x.totalRealPagar),
                            valesDespensa = g.Sum(x => x.valesDespensa),
                            totalDeposito = g.Sum(x => x.totalDeposito),
                            observaciones = string.Join(Environment.NewLine, g.Select(x => x.observaciones).Distinct()),
                            estatus = primerRegistro.estatus,
                            apoyoColectivo = g.Sum(x => x.apoyoColectivo),
                            fechaAntiguedad = primerRegistro.fechaAntiguedad
                        };
                        return registroFusionado;
                    })
                    .OrderBy(x => x.empleadoNombre)
                    .ToList();

                return registrosFusionados;
            }
            catch (Exception e)
            {
                return new List<tblC_Nom_PreNomina_Det>();
            }
        }
        //Esta otra version ya saca de todos los CCs pero no unifica los empleados duplicados
        private List<tblC_Nom_PreNomina_Det> CalcularPrenominaBase_V2(string CC_TODO, int periodo, tipoNominaPropuestaEnum tipoNomina, int anio, List<tblC_Nom_PreNomina_Det> detallesCambio)
        {
            try
            {
                // Ahora saco listado de CC
                List<tblC_Nom_CatalogoCC> ccsCatalogo = new List<tblC_Nom_CatalogoCC>();
                if (tipoNomina == tipoNominaPropuestaEnum.Aguinaldo) 
                    ccsCatalogo = _context.tblC_Nom_CatalogoCC.Where(x => (periodo == 1 ? x.semanal : x.quincenal) && x.estatus).Distinct().ToList();
                else 
                    ccsCatalogo = _context.tblC_Nom_CatalogoCC.Where(x => (tipoNomina == tipoNominaPropuestaEnum.Semanal ? x.semanal : x.quincenal) && x.estatus).Distinct().ToList();
        
                // Lista para almacenar todos los detalles de prenomina
                List<tblC_Nom_PreNomina_Det> todosLosDetalles = new List<tblC_Nom_PreNomina_Det>();

                // Procesar cada centro de costo
                foreach (var cc in ccsCatalogo)
                {
                    string CC = cc.cc; // Obtener el valor del centro de costo actual
                    List<tblC_Nom_PreNomina_Det> detalles = new List<tblC_Nom_PreNomina_Det>();
                    tblRH_BN_Incidencia incidenciaPpal = _context.tblRH_BN_Incidencia.Where(x => x.cc == CC && x.anio == anio && x.tipo_nomina == (int)tipoNomina && x.periodo == periodo && x.estatus == "A").OrderByDescending(x => x.fecha_auto).FirstOrDefault();
            
                    if (incidenciaPpal != null)
                    {
                        int incidenciaID = incidenciaPpal.id;
                        var incidenciaDet = _context.tblRH_BN_Incidencia_det.Where(x => x.incidenciaID == incidenciaID).ToList();
                        List<int> empleados = incidenciaDet.Select(x => x.clave_empleado).ToList();
                        var listaDescuentosProgramados = _context.tblC_Nom_PreNomina_Descuento.Where(x => x.anio == anio && (int)tipoNomina == x.tipoNomina && x.periodoInicial <= periodo && x.periodoFinal >= periodo && empleados.Contains(x.empleadoCve) && x.estatus).ToList();
                        var fechasPeriodo = _context.tblRH_BN_EstatusPeriodos.FirstOrDefault(x => x.anio == anio && x.tipo_nomina == (int)tipoNomina && x.periodo == periodo);
                        DateTime fechaCorte = fechasPeriodo == null ? DateTime.Today : fechasPeriodo.fecha_limite;
                
                        var stringEmpleados = string.Join(",", empleados);
                        var result = _context.Select<tblRH_BN_Evaluacion_Det>(new DapperDTO
                        {
                            baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                            consulta = string.Format(@"SELECT 
                                  e.clave_empleado AS cve_Emp,
                                  e.fecha_antiguedad AS fechaAlta,
                                  (SELECT TOP 1 salario_base FROM tblRH_EK_Tabulador_Historial WHERE clave_empleado = e.clave_empleado AND fechaAplicaCambio <= @fecha_cambio ORDER BY fechaAplicaCambio DESC, id DESC) AS base_Emp,
                                  (SELECT TOP 1 complemento FROM tblRH_EK_Tabulador_Historial WHERE clave_empleado = e.clave_empleado AND fechaAplicaCambio <= @fecha_cambio ORDER BY fechaAplicaCambio DESC, id DESC) AS complemento_Emp,
                                  (SELECT TOP 1 bono_zona FROM tblRH_EK_Tabulador_Historial WHERE clave_empleado = e.clave_empleado AND fechaAplicaCambio <= @fecha_cambio ORDER BY fechaAplicaCambio DESC, id DESC) AS bono_FC,
                                  e.sindicato AS aplicaSindicato
                                  FROM tblRH_EK_Empleados AS e 
                                  INNER JOIN tblRH_EK_Tipos_Nomina AS tn ON e.tipo_nomina = tn.tipo_nomina
                                  WHERE tn.tipo_nomina = {0} AND e.clave_empleado IN ({1})", (int)tipoNomina, stringEmpleados),
                            parametros = new { fecha_cambio = fechaCorte }
                        }).ToList();

                        var tipoNominaDias = tipoNomina == tipoNominaPropuestaEnum.Semanal ? 7 : tipoNomina == tipoNominaPropuestaEnum.Quincenal ? 15 : 1;
                        bool aplicaSindicatoCC = _context.tblRH_BN_REGLA_CC.Any(x => x.cc == CC && x.tipo == 1);
                        bool aplicaPrimaDominicalCC = _context.tblRH_BN_REGLA_CC.Any(x => x.cc == CC && x.tipo == 2);
                        tblRH_BN_REGLA_CC reglaSindicato = _context.tblRH_BN_REGLA_CC.FirstOrDefault(x => x.cc == CC && x.tipo == 1);
                        decimal porcentajeSindicato = reglaSindicato == null ? 0 : reglaSindicato.cuota;
                        List<int> domingos = new List<int>();

                        if (aplicaPrimaDominicalCC)
                        {
                            if (tipoNomina == tipoNominaPropuestaEnum.Semanal)
                            {
                                domingos.Add(5);
                            }
                            else if (tipoNomina == tipoNominaPropuestaEnum.Quincenal)
                            {
                                var diaInicial = _context.tblC_Nom_CatPeriodo.FirstOrDefault(x => x.anio == anio && x.periodo == periodo && x.tipoNomina == (int)tipoNomina).fechaInicio;
                                var diaSemana = (int)diaInicial.DayOfWeek;
                                switch (diaSemana)
                                {
                                    case 0: domingos.AddRange(new[] { 1, 8, 15 }); break;
                                    case 1: domingos.AddRange(new[] { 7, 14 }); break;
                                    case 2: domingos.AddRange(new[] { 6, 13 }); break;
                                    case 3: domingos.AddRange(new[] { 5, 12 }); break;
                                    case 4: domingos.AddRange(new[] { 4, 11 }); break;
                                    case 5: domingos.AddRange(new[] { 3, 10 }); break;
                                    case 6: domingos.AddRange(new[] { 2, 9 }); break;
                                    case 7: domingos.AddRange(new[] { 1, 8, 15 }); break;
                                }
                            }
                        }

                        var vacacionesAutorizadas = _context.tblRH_Vacaciones_Vacaciones.Where(x => x.cc == CC && x.estado == 1 && x.registroActivo).ToList();
                        var vacacionesAutorizadasID = vacacionesAutorizadas.Select(x => x.id).ToList();
                        var vacacionesSistema = _context.tblRH_Vacaciones_Fechas.Where(x => x.idIncidencia == incidenciaID && vacacionesAutorizadasID.Contains(x.vacacionID) && x.registroActivo && x.incidenciaAplicada).ToList().Select(x =>
                        {
                            var vacacion = vacacionesAutorizadas.FirstOrDefault(y => y.id == x.vacacionID);
                            return new FechasVacacionesDTO
                            {
                                clave_empleado = vacacion == null ? 0 : vacacion.claveEmpleado.ParseInt(),
                                fecha = vacacion == null ? DateTime.Today : x.fecha ?? DateTime.Today
                            };
                        }).ToList();

                        detalles = incidenciaDet.Select(x =>
                        {
                            var auxDetallesCambio = detallesCambio.FirstOrDefault(y => y.empleadoCve == x.clave_empleado);
                            var listaDescuentosProgramadosEmpleado = listaDescuentosProgramados.Where(y => y.empleadoCve == x.clave_empleado).ToList();

                            decimal totalDiasFinal = x.total_Dias - x.dias_extras - x.dias_extra_concepto;
                            int totalDiasExtraFinal = x.dias_extras;
                            int totalDiasFestivosFinal = 0;
                            decimal hrExtraFinal = x.totalo_Horas;
                            decimal totalDiasVacacionesFinal = vacacionesSistema.Count(y => y.clave_empleado == x.clave_empleado);

                            var diasDoblePaga = new List<int> { 9 };
                            var diasTriplePaga = new List<int> { 17 };

                            if (diasDoblePaga.Contains(x.dia1)) totalDiasExtraFinal++;
                            if (diasTriplePaga.Contains(x.dia1)) totalDiasFestivosFinal++;

                            // Calcular los descuentos
                            decimal descuentosFinal = 0;
                            decimal apoyoColectivoFinal = 0;
                            decimal prestamoFinal = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.Prestamo).Sum(y => y.monto);
                            decimal axaFinal = 0;
                            decimal famsaFinal = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.Famsa).Sum(y => y.monto);
                            decimal pensionFinal = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.PensionAlimenticia).Sum(y => y.monto);
                            decimal fonacotFinal = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.Fonacot).Sum(y => y.monto);
                            decimal infonavitFinal = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.Infonavit).Sum(y => y.monto);
                            decimal otrosFinal = 0;
                            decimal primaVacacionalFinal = 0;

                            if (auxDetallesCambio != null)
                            {
                                totalDiasFinal = auxDetallesCambio.dias;
                                totalDiasVacacionesFinal = auxDetallesCambio.diasVacaciones;
                                totalDiasExtraFinal = auxDetallesCambio.diaHrExtra;
                                totalDiasFestivosFinal = auxDetallesCambio.diaFestivo;
                                hrExtraFinal = auxDetallesCambio.hrExtra;

                                descuentosFinal = auxDetallesCambio.descuento;
                                apoyoColectivoFinal = auxDetallesCambio.apoyoColectivo;
                                prestamoFinal = auxDetallesCambio.prestamo;
                                axaFinal = auxDetallesCambio.axa;
                                famsaFinal = auxDetallesCambio.descuentoFamsa;
                                pensionFinal = auxDetallesCambio.pensionAlimenticia;
                                fonacotFinal = auxDetallesCambio.fonacot;
                                infonavitFinal = auxDetallesCambio.infonavit;
                                otrosFinal = auxDetallesCambio.otros;
                            }

                            var importes = result.FirstOrDefault(y => y.cve_Emp == x.clave_empleado);
                            decimal baseNomina = importes == null ? 0 : importes.base_Emp * ((decimal)totalDiasFinal / (decimal)tipoNominaDias);
                            decimal baseNominaVacaciones = importes == null ? 0 : importes.base_Emp * ((decimal)totalDiasVacacionesFinal / (decimal)tipoNominaDias);
                            decimal fondoAhorroNomina = importes == null ? 0 : (baseNomina + baseNominaVacaciones) * (decimal)0.025;
                            decimal complementoFinal = importes == null ? 0 : importes.complemento_Emp * (((decimal)totalDiasFinal + (decimal)totalDiasVacacionesFinal) / (decimal)tipoNominaDias);
                            decimal fondoAhorroComplemento = importes == null ? 0 : complementoFinal * (decimal)0.025;

                            var fechaAniversario = new DateTime(anio, importes.fechaAlta.Month, importes.fechaAlta.Day);
                            if (importes != null && fechaAniversario >= fechasPeriodo.fecha_inicial && fechaAniversario <= fechasPeriodo.fecha_final)
                            {
                                int numDias = _vacacionesDAO.GetNumDias(x.clave_empleado.ToString(), fechaAniversario) ?? 0;
                                primaVacacionalFinal = (numDias * (importes.base_Emp + importes.complemento_Emp + importes.bono_FC) * 0.25M) / (decimal)tipoNominaDias;
                            }

                            if (auxDetallesCambio != null)
                            {
                                fondoAhorroNomina = auxDetallesCambio.fondoAhorroNomina;
                                fondoAhorroComplemento = auxDetallesCambio.fondoAhorroComplemento;
                                primaVacacionalFinal = auxDetallesCambio.primaVacacional;
                            }

                            List<int> empleadosExcepcion = new List<int> { 0 };

                            if (empleadosExcepcion.Contains(x.clave_empleado) && tipoNomina == tipoNominaPropuestaEnum.Quincenal)
                            {
                                fondoAhorroNomina = 0;
                                fondoAhorroComplemento = 0;
                            }

                            bool aplicaSindicato = aplicaSindicatoCC && _context.tblRH_BN_REGLA_Puestos.Any(y => y.puesto == x.puesto && y.tipo == 1) && tipoNomina == tipoNominaPropuestaEnum.Semanal;
                            bool aplicaPrimaDominical = aplicaPrimaDominicalCC;
                            if (CC == "007" && x.puesto != 93) aplicaPrimaDominical = false;
                            decimal primaDominical = 0;

                            decimal bonoZona = importes == null ? 0 : importes.bono_FC;

                            decimal sueldoSemanal = importes == null ? 0 : importes.base_Emp + importes.complemento_Emp + bonoZona + x.bonoCuadrado;
                            decimal sueldoDia = importes == null ? 0 : (importes.base_Emp + importes.complemento_Emp + bonoZona) / tipoNominaDias;
                            decimal sueldoHora = importes == null ? 0 : ((importes.base_Emp + importes.complemento_Emp + bonoZona) / 55) * 2;

                            bonoZona = bonoZona * (((decimal)totalDiasFinal + (decimal)totalDiasVacacionesFinal) / (decimal)tipoNominaDias);

                            if (aplicaPrimaDominical && x.primaDominical)
                            {
                                decimal auxPrimaDominical = (sueldoSemanal / (tipoNomina == tipoNominaPropuestaEnum.Semanal ? 7 : 15)) * (decimal)0.25;

                                if (domingos.Contains(1) && (x.dia1 == 1 || x.dia1 == 9 || x.dia1 == (vSesiones.sesionEmpresaActual == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                                if (domingos.Contains(2) && (x.dia2 == 1 || x.dia2 == 9 || x.dia2 == (vSesiones.sesionEmpresaActual == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                                if (domingos.Contains(3) && (x.dia3 == 1 || x.dia3 == 9 || x.dia3 == (vSesiones.sesionEmpresaActual == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                                if (domingos.Contains(4) && (x.dia4 == 1 || x.dia4 == 9 || x.dia4 == (vSesiones.sesionEmpresaActual == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                                if (domingos.Contains(5) && (x.dia5 == 1 || x.dia5 == 9 || x.dia5 == (vSesiones.sesionEmpresaActual == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                                if (domingos.Contains(6) && (x.dia6 == 1 || x.dia6 == 9 || x.dia6 == (vSesiones.sesionEmpresaActual == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                                if (domingos.Contains(7) && (x.dia7 == 1 || x.dia7 == 9 || x.dia7 == (vSesiones.sesionEmpresaActual == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                                if (domingos.Contains(8) && (x.dia8 == 1 || x.dia8 == 9 || x.dia8 == (vSesiones.sesionEmpresaActual == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                                if (domingos.Contains(9) && (x.dia9 == 1 || x.dia9 == 9 || x.dia9 == (vSesiones.sesionEmpresaActual == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                                if (domingos.Contains(10) && (x.dia10 == 1 || x.dia10 == 9 || x.dia10 == (vSesiones.sesionEmpresaActual == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                                if (domingos.Contains(11) && (x.dia11 == 1 || x.dia11 == 9 || x.dia11 == (vSesiones.sesionEmpresaActual == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                                if (domingos.Contains(12) && (x.dia12 == 1 || x.dia12 == 9 || x.dia12 == (vSesiones.sesionEmpresaActual == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                                if (domingos.Contains(13) && (x.dia13 == 1 || x.dia13 == 9 || x.dia13 == (vSesiones.sesionEmpresaActual == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                                if (domingos.Contains(14) && (x.dia14 == 1 || x.dia14 == 9 || x.dia14 == (vSesiones.sesionEmpresaActual == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                                if (domingos.Contains(15) && (x.dia15 == 1 || x.dia15 == 9 || x.dia15 == (vSesiones.sesionEmpresaActual == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                                if (domingos.Contains(16) && (x.dia16 == 1 || x.dia16 == 9 || x.dia16 == (vSesiones.sesionEmpresaActual == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                            }

                            decimal sindicato = (importes == null || !aplicaSindicato) ? 0 : (baseNomina + baseNominaVacaciones) * (porcentajeSindicato == 0 ? (decimal)0.02 : (porcentajeSindicato / (decimal)100));
                            decimal bonoProduccion = auxDetallesCambio == null ? x.bono + x.bonoU + x.bonoDM : auxDetallesCambio.bonoProduccion;
                            decimal totalNominaFinal = (baseNomina + baseNominaVacaciones) - sindicato - fondoAhorroNomina - descuentosFinal - apoyoColectivoFinal - prestamoFinal - axaFinal - famsaFinal - pensionFinal - fonacotFinal - infonavitFinal;
                            decimal totalComplementoFinal = complementoFinal - fondoAhorroComplemento + bonoProduccion + bonoZona + otrosFinal + primaVacacionalFinal + primaDominical + (hrExtraFinal * sueldoHora) + ((decimal)totalDiasExtraFinal * sueldoDia) + ((decimal)totalDiasFestivosFinal * sueldoDia * 2);
                            decimal totalPagar = totalNominaFinal + totalComplementoFinal;

                            return new tblC_Nom_PreNomina_Det
                            {
                                empleadoCve = x.clave_empleado,
                                empleadoNombre = x.ape_paterno + ' ' + x.ape_materno + " " + x.nombre,
                                puesto = x.puestoDesc,
                                sueldoSemanal = sueldoSemanal,
                                dias = totalDiasFinal,
                                nominaBase = baseNomina,
                                diasVacaciones = totalDiasVacacionesFinal,
                                nominaBaseVacaciones = baseNominaVacaciones,
                                sindicato = sindicato,
                                fondoAhorroNomina = fondoAhorroNomina,
                                descuento = descuentosFinal,
                                prestamo = prestamoFinal,
                                axa = axaFinal,
                                descuentoFamsa = famsaFinal,
                                pensionAlimenticia = pensionFinal,
                                fonacot = fonacotFinal,
                                infonavit = infonavitFinal,
                                totalNomina = totalNominaFinal,
                                complementoNomina = complementoFinal,
                                fondoAhorroComplemento = fondoAhorroComplemento,
                                bonoProduccion = bonoProduccion,
                                bonoZona = bonoZona,
                                otros = otrosFinal,
                                primaVacacional = primaVacacionalFinal,
                                primaDominical = primaDominical,
                                hrExtra = hrExtraFinal,
                                hrExtraValor = sueldoHora,
                                importeExtra = hrExtraFinal * sueldoHora,
                                diaHrExtra = totalDiasExtraFinal,
                                diaExtraValor = sueldoDia,
                                importeDiaExtra = (decimal)totalDiasExtraFinal * sueldoDia,
                                diaFestivo = totalDiasFestivosFinal,
                                diaFestivoValor = sueldoDia * 2,
                                importeDiaFestivo = (decimal)totalDiasFestivosFinal * sueldoDia * 2,
                                totalComplemento = totalComplementoFinal,
                                totalPagar = totalPagar,
                                porcentajeTotalPagar = 1,
                                totalRealPagar = totalPagar,
                                valesDespensa = Math.Round(((decimal)103.74 * (decimal)0.4 * ((decimal)totalDiasFinal + (decimal)totalDiasVacacionesFinal)), 2),
                                totalDeposito = totalPagar - Math.Round(((decimal)103.74 * (decimal)0.4 * ((decimal)totalDiasFinal + (decimal)totalDiasVacacionesFinal)), 2),
                                observaciones = x.observaciones + (x.observaciones == "" ? "" : Environment.NewLine) + x.bono_Obs,
                                estatus = true,
                                apoyoColectivo = apoyoColectivoFinal,
                                fechaAntiguedad = importes.fechaAlta.ToShortDateString() ?? ""
                            };
                        }).ToList();
                    }

                    // Agregar los detalles calculados para el CC actual a la lista total
                    todosLosDetalles.AddRange(detalles);
                }

                // Devolver la lista combinada de todos los detalles
                return todosLosDetalles.OrderBy(x => x.empleadoNombre).ToList();
            }
            catch (Exception e)
            {
                return new List<tblC_Nom_PreNomina_Det>();
            }
        }

        private List<tblC_Nom_PreNomina_Det> CalcularPrenominaBase_Temp(string CC, int periodo, tipoNominaPropuestaEnum tipoNomina, int anio, List<tblC_Nom_PreNomina_Det> detallesCambio)
        {

            try
            {
                //Ahora saco listado de CC
                List<tblC_Nom_CatalogoCC> ccsCatalogo = new List<tblC_Nom_CatalogoCC>();
                if (tipoNomina == tipoNominaPropuestaEnum.Aguinaldo) ccsCatalogo = _context.tblC_Nom_CatalogoCC.Where(x => (periodo == 1 ? x.semanal : x.quincenal) && x.estatus).Distinct().ToList();
                else ccsCatalogo = _context.tblC_Nom_CatalogoCC.Where(x => (tipoNomina == tipoNominaPropuestaEnum.Semanal ? x.semanal : x.quincenal) && x.estatus).Distinct().ToList();
                //Ahora ocupo que en vez de calcular la prenomina solo para un CC ocupo se calcule para todos los CCs de ccsCatalogo por lo que ocupo se haga todo en un ciclo y al final las unifique como si fuera una sola prenomina
                List<tblC_Nom_PreNomina_Det> detalles = new List<tblC_Nom_PreNomina_Det>();
                tblRH_BN_Incidencia incidenciaPpal = new tblRH_BN_Incidencia();

                incidenciaPpal = _context.tblRH_BN_Incidencia.Where(x => x.cc == CC && x.anio == anio && x.tipo_nomina == (int)tipoNomina && x.periodo == periodo && x.estatus == "A").OrderByDescending(x => x.fecha_auto).FirstOrDefault();
                if (incidenciaPpal != null)
                {
                    int incidenciaID = incidenciaPpal.id;
                    var incidenciaDet = _context.tblRH_BN_Incidencia_det.Where(x => x.incidenciaID == incidenciaID).ToList();

                    List<int> empleados = incidenciaDet.Select(x => x.clave_empleado).ToList();

                    var listaDescuentosProgramados = _context.tblC_Nom_PreNomina_Descuento.Where(x => x.anio == anio && (int)tipoNomina == x.tipoNomina && x.periodoInicial <= periodo && x.periodoFinal >= periodo && empleados.Contains(x.empleadoCve) && x.estatus).ToList();

                    var fechasPeriodo = _context.tblRH_BN_EstatusPeriodos.FirstOrDefault(x => x.anio == anio && x.tipo_nomina == (int)tipoNomina && x.periodo == periodo);
                    DateTime fechaCorte = new DateTime();
                    if (fechasPeriodo == null) fechaCorte = DateTime.Today;
                    else fechaCorte = fechasPeriodo.fecha_limite;

                    var stringEmpleados = "(";
                    for (int i = 0; i < empleados.Count(); i++)
                    {
                        if (i == empleados.Count() - 1) stringEmpleados += empleados[i].ToString() + ")";
                        else stringEmpleados += empleados[i].ToString() + ",";
                    }
                    var result = _context.Select<tblRH_BN_Evaluacion_Det>(new DapperDTO
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = string.Format(@"SELECT 
                              e.clave_empleado AS cve_Emp,
                              e.fecha_antiguedad AS fechaAlta,
                              (SELECT TOP 1 salario_base FROM tblRH_EK_Tabulador_Historial WHERE clave_empleado = e.clave_empleado AND fechaAplicaCambio <= @fecha_cambio ORDER BY fechaAplicaCambio DESC, id DESC) AS base_Emp,
                              (SELECT TOP 1 complemento FROM tblRH_EK_Tabulador_Historial WHERE clave_empleado = e.clave_empleado AND fechaAplicaCambio <= @fecha_cambio ORDER BY fechaAplicaCambio DESC, id DESC) AS complemento_Emp,
                              (SELECT TOP 1 bono_zona FROM tblRH_EK_Tabulador_Historial WHERE clave_empleado = e.clave_empleado AND fechaAplicaCambio <= @fecha_cambio ORDER BY fechaAplicaCambio DESC, id DESC) AS bono_FC,
                              e.sindicato AS aplicaSindicato
                              FROM tblRH_EK_Empleados AS e 
                              INNER JOIN tblRH_EK_Tipos_Nomina AS tn ON e.tipo_nomina = tn.tipo_nomina
                              WHERE tn.tipo_nomina = {0} AND e.clave_empleado IN {1}", (int)tipoNomina, stringEmpleados),
                        parametros = new { fecha_cambio = fechaCorte }
                    }).ToList();

                    var tipoNominaDias = 0;
                    switch (tipoNomina)
                    {
                        case tipoNominaPropuestaEnum.Semanal: tipoNominaDias = 7; break;
                        case tipoNominaPropuestaEnum.Quincenal: tipoNominaDias = 15; break;
                        default: tipoNominaDias = 1; break;
                    }
                    bool aplicaSindicatoCC = _context.tblRH_BN_REGLA_CC.Any(x => x.cc == CC && x.tipo == 1);
                    bool aplicaPrimaDominicalCC = _context.tblRH_BN_REGLA_CC.Any(x => x.cc == CC && x.tipo == 2);
                    tblRH_BN_REGLA_CC reglaSIndicato = _context.tblRH_BN_REGLA_CC.FirstOrDefault(x => x.cc == CC && x.tipo == 1);
                    decimal porcentajeSindicato = reglaSIndicato == null ? 0 : reglaSIndicato.cuota;
                    List<int> domingos = new List<int>();

                    if (aplicaPrimaDominicalCC)
                    {
                        if (tipoNomina == tipoNominaPropuestaEnum.Semanal)
                        {
                            domingos.Add(5);
                        }
                        else if (tipoNomina == tipoNominaPropuestaEnum.Quincenal)
                        {
                            var diaInicial = _context.tblC_Nom_CatPeriodo.FirstOrDefault(x => x.anio == anio && x.periodo == periodo && x.tipoNomina == (int)tipoNomina).fechaInicio;
                            var diaSemana = (int)diaInicial.DayOfWeek;
                            switch (diaSemana)
                            {
                                case 0: domingos.Add(1); domingos.Add(8); domingos.Add(15); break;
                                case 1: domingos.Add(7); domingos.Add(14); break;
                                case 2: domingos.Add(6); domingos.Add(13); break;
                                case 3: domingos.Add(5); domingos.Add(12); break;
                                case 4: domingos.Add(4); domingos.Add(11); break;
                                case 5: domingos.Add(3); domingos.Add(10); break;
                                case 6: domingos.Add(2); domingos.Add(9); break;
                                case 7: domingos.Add(1); domingos.Add(8); domingos.Add(15); break;
                            }
                        }

                    }

                    var vacacionesAutorizadas = _context.tblRH_Vacaciones_Vacaciones.Where(x => x.cc == CC && x.estado == 1 && x.registroActivo).ToList();
                    var vacacionesAutorizadasID = vacacionesAutorizadas.Select(x => x.id).ToList();
                    var vacacionesSistema = _context.tblRH_Vacaciones_Fechas.Where(x => x.idIncidencia == incidenciaID && vacacionesAutorizadasID.Contains(x.vacacionID) && x.registroActivo && x.incidenciaAplicada).ToList().Select(x =>
                    {
                        var vacacion = vacacionesAutorizadas.FirstOrDefault(y => y.id == x.vacacionID);
                        return new FechasVacacionesDTO
                        {
                            clave_empleado = vacacion == null ? 0 : vacacion.claveEmpleado.ParseInt(),
                            fecha = vacacion == null ? DateTime.Today : x.fecha ?? DateTime.Today
                        };
                    }).ToList();

                    detalles = incidenciaDet.Select(x =>
                    {
                        var auxDetallesCambio = detallesCambio.FirstOrDefault(y => y.empleadoCve == x.clave_empleado);
                        var listaDescuentosProgramadosEmpleado = listaDescuentosProgramados.Where(y => y.empleadoCve == x.clave_empleado).ToList();

                        decimal totalDiasFinal = 0;
                        int totalDiasExtraFinal = 0;
                        int totalDiasFestivosFinal = 0;
                        decimal hrExtraFinal = x.totalo_Horas;
                        decimal totalDiasVacacionesFinal = 0;

                        decimal descuentosFinal = 0;
                        decimal apoyoColectiuvoFinal = 0;
                        var listaDescuentosPrestamo = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.Prestamo).ToList();
                        decimal prestamoFinal = listaDescuentosPrestamo == null ? 0 : listaDescuentosPrestamo.Sum(y => y.monto);
                        //var listaDescuentosAxa = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.Axa).ToList();
                        decimal axaFinal = 0;
                        var listaDescuentosFamsa = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.Famsa).ToList();
                        decimal famsaFinal = listaDescuentosFamsa == null ? 0 : listaDescuentosFamsa.Sum(y => y.monto);
                        var listaDescuentosPension = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.PensionAlimenticia).ToList();
                        decimal pensionFinal = listaDescuentosPension == null ? 0 : listaDescuentosPension.Sum(y => y.monto);
                        var listaDescuentosFonacot = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.Fonacot).ToList();
                        decimal fonacotFinal = listaDescuentosFonacot == null ? 0 : listaDescuentosFonacot.Sum(y => y.monto);
                        var listaDescuentosInfonavit = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.Infonavit).ToList();
                        decimal infonavitFinal = listaDescuentosInfonavit == null ? 0 : listaDescuentosInfonavit.Sum(y => y.monto);
                        decimal otrosFinal = 0;
                        decimal primaVacacionalFinal = 0;

                        List<int> diasDoblePaga = new List<int>();
                        List<int> diasTriplePaga = new List<int>();
                        var empresa = vSesiones.sesionEmpresaActual;
                        switch (empresa)
                        {
                            case 1:
                            case 8:
                                diasTriplePaga.Add(9);
                                diasDoblePaga.Add(17);
                                break;
                            default:
                                diasTriplePaga.Add(9);
                                diasDoblePaga.Add(15);
                                break;
                        }

                        int diasExtraDobleTotal = 0;
                        int diasExtraTripleTotal = 0;
                        if (diasDoblePaga.Contains(x.dia1)) diasExtraDobleTotal++;
                        if (diasDoblePaga.Contains(x.dia2)) diasExtraDobleTotal++;
                        if (diasDoblePaga.Contains(x.dia3)) diasExtraDobleTotal++;
                        if (diasDoblePaga.Contains(x.dia4)) diasExtraDobleTotal++;
                        if (diasDoblePaga.Contains(x.dia5)) diasExtraDobleTotal++;
                        if (diasDoblePaga.Contains(x.dia6)) diasExtraDobleTotal++;
                        if (diasDoblePaga.Contains(x.dia7)) diasExtraDobleTotal++;
                        if (diasDoblePaga.Contains(x.dia8)) diasExtraDobleTotal++;
                        if (diasDoblePaga.Contains(x.dia9)) diasExtraDobleTotal++;
                        if (diasDoblePaga.Contains(x.dia10)) diasExtraDobleTotal++;
                        if (diasDoblePaga.Contains(x.dia11)) diasExtraDobleTotal++;
                        if (diasDoblePaga.Contains(x.dia12)) diasExtraDobleTotal++;
                        if (diasDoblePaga.Contains(x.dia13)) diasExtraDobleTotal++;
                        if (diasDoblePaga.Contains(x.dia14)) diasExtraDobleTotal++;
                        if (diasDoblePaga.Contains(x.dia15)) diasExtraDobleTotal++;
                        if (diasDoblePaga.Contains(x.dia16)) diasExtraDobleTotal++;

                        if (diasTriplePaga.Contains(x.dia1)) diasExtraTripleTotal++;
                        if (diasTriplePaga.Contains(x.dia2)) diasExtraTripleTotal++;
                        if (diasTriplePaga.Contains(x.dia3)) diasExtraTripleTotal++;
                        if (diasTriplePaga.Contains(x.dia4)) diasExtraTripleTotal++;
                        if (diasTriplePaga.Contains(x.dia5)) diasExtraTripleTotal++;
                        if (diasTriplePaga.Contains(x.dia6)) diasExtraTripleTotal++;
                        if (diasTriplePaga.Contains(x.dia7)) diasExtraTripleTotal++;
                        if (diasTriplePaga.Contains(x.dia8)) diasExtraTripleTotal++;
                        if (diasTriplePaga.Contains(x.dia9)) diasExtraTripleTotal++;
                        if (diasTriplePaga.Contains(x.dia10)) diasExtraTripleTotal++;
                        if (diasTriplePaga.Contains(x.dia11)) diasExtraTripleTotal++;
                        if (diasTriplePaga.Contains(x.dia12)) diasExtraTripleTotal++;
                        if (diasTriplePaga.Contains(x.dia13)) diasExtraTripleTotal++;
                        if (diasTriplePaga.Contains(x.dia14)) diasExtraTripleTotal++;
                        if (diasTriplePaga.Contains(x.dia15)) diasExtraTripleTotal++;
                        if (diasTriplePaga.Contains(x.dia16)) diasExtraTripleTotal++;

                        var vacacionesIncidencias = vacacionesSistema.Where(y => y.clave_empleado == x.clave_empleado).ToList();
                        totalDiasVacacionesFinal = vacacionesIncidencias.Count();

                        if (x.dia1 == 5) { var vacacionRepetida = vacacionesIncidencias.FirstOrDefault(y => y.fecha.Date == fechasPeriodo.fecha_inicial); if (vacacionRepetida == null) totalDiasVacacionesFinal++; }
                        if (x.dia2 == 5) { var vacacionRepetida = vacacionesIncidencias.FirstOrDefault(y => y.fecha.Date == fechasPeriodo.fecha_inicial.AddDays(1)); if (vacacionRepetida == null) totalDiasVacacionesFinal++; }
                        if (x.dia3 == 5) { var vacacionRepetida = vacacionesIncidencias.FirstOrDefault(y => y.fecha.Date == fechasPeriodo.fecha_inicial.AddDays(2)); if (vacacionRepetida == null) totalDiasVacacionesFinal++; }
                        if (x.dia4 == 5) { var vacacionRepetida = vacacionesIncidencias.FirstOrDefault(y => y.fecha.Date == fechasPeriodo.fecha_inicial.AddDays(3)); if (vacacionRepetida == null) totalDiasVacacionesFinal++; }
                        if (x.dia5 == 5) { var vacacionRepetida = vacacionesIncidencias.FirstOrDefault(y => y.fecha.Date == fechasPeriodo.fecha_inicial.AddDays(4)); if (vacacionRepetida == null) totalDiasVacacionesFinal++; }
                        if (x.dia6 == 5) { var vacacionRepetida = vacacionesIncidencias.FirstOrDefault(y => y.fecha.Date == fechasPeriodo.fecha_inicial.AddDays(5)); if (vacacionRepetida == null) totalDiasVacacionesFinal++; }
                        if (x.dia7 == 5) { var vacacionRepetida = vacacionesIncidencias.FirstOrDefault(y => y.fecha.Date == fechasPeriodo.fecha_inicial.AddDays(6)); if (vacacionRepetida == null) totalDiasVacacionesFinal++; }
                        if (x.dia8 == 5) { var vacacionRepetida = vacacionesIncidencias.FirstOrDefault(y => y.fecha.Date == fechasPeriodo.fecha_inicial.AddDays(7)); if (vacacionRepetida == null) totalDiasVacacionesFinal++; }
                        if (x.dia9 == 5) { var vacacionRepetida = vacacionesIncidencias.FirstOrDefault(y => y.fecha.Date == fechasPeriodo.fecha_inicial.AddDays(8)); if (vacacionRepetida == null) totalDiasVacacionesFinal++; }
                        if (x.dia10 == 5) { var vacacionRepetida = vacacionesIncidencias.FirstOrDefault(y => y.fecha.Date == fechasPeriodo.fecha_inicial.AddDays(9)); if (vacacionRepetida == null) totalDiasVacacionesFinal++; }
                        if (x.dia11 == 5) { var vacacionRepetida = vacacionesIncidencias.FirstOrDefault(y => y.fecha.Date == fechasPeriodo.fecha_inicial.AddDays(10)); if (vacacionRepetida == null) totalDiasVacacionesFinal++; }
                        if (x.dia12 == 5) { var vacacionRepetida = vacacionesIncidencias.FirstOrDefault(y => y.fecha.Date == fechasPeriodo.fecha_inicial.AddDays(11)); if (vacacionRepetida == null) totalDiasVacacionesFinal++; }
                        if (x.dia13 == 5) { var vacacionRepetida = vacacionesIncidencias.FirstOrDefault(y => y.fecha.Date == fechasPeriodo.fecha_inicial.AddDays(12)); if (vacacionRepetida == null) totalDiasVacacionesFinal++; }
                        if (x.dia14 == 5) { var vacacionRepetida = vacacionesIncidencias.FirstOrDefault(y => y.fecha.Date == fechasPeriodo.fecha_inicial.AddDays(13)); if (vacacionRepetida == null) totalDiasVacacionesFinal++; }
                        if (x.dia15 == 5) { var vacacionRepetida = vacacionesIncidencias.FirstOrDefault(y => y.fecha.Date == fechasPeriodo.fecha_inicial.AddDays(14)); if (vacacionRepetida == null) totalDiasVacacionesFinal++; }
                        if (x.dia16 == 5) { var vacacionRepetida = vacacionesIncidencias.FirstOrDefault(y => y.fecha.Date == fechasPeriodo.fecha_inicial.AddDays(15)); if (vacacionRepetida == null) totalDiasVacacionesFinal++; }

                        totalDiasFinal = x.total_Dias - x.dias_extras - x.dias_extra_concepto - totalDiasVacacionesFinal;
                        totalDiasExtraFinal = x.dias_extras + diasExtraDobleTotal;
                        totalDiasFestivosFinal = diasExtraTripleTotal;


                        if (auxDetallesCambio != null)
                        {
                            totalDiasFinal = auxDetallesCambio.dias;
                            totalDiasVacacionesFinal = auxDetallesCambio.diasVacaciones;
                            totalDiasExtraFinal = auxDetallesCambio.diaHrExtra;
                            totalDiasFestivosFinal = auxDetallesCambio.diaFestivo;
                            hrExtraFinal = auxDetallesCambio.hrExtra;

                            descuentosFinal = auxDetallesCambio.descuento;
                            apoyoColectiuvoFinal = auxDetallesCambio.apoyoColectivo;
                            prestamoFinal = auxDetallesCambio.prestamo;
                            axaFinal = auxDetallesCambio.axa;
                            famsaFinal = auxDetallesCambio.descuentoFamsa;
                            pensionFinal = auxDetallesCambio.pensionAlimenticia;
                            fonacotFinal = auxDetallesCambio.fonacot;
                            infonavitFinal = auxDetallesCambio.infonavit;
                            otrosFinal = auxDetallesCambio.otros;
                        }

                        var importes = result.FirstOrDefault(y => y.cve_Emp == x.clave_empleado);
                        decimal baseNomina = importes == null ? 0 : importes.base_Emp * ((decimal)totalDiasFinal / (decimal)tipoNominaDias);
                        decimal baseNominaVacaciones = importes == null ? 0 : importes.base_Emp * ((decimal)totalDiasVacacionesFinal / (decimal)tipoNominaDias);
                        decimal fondoAhorroNomina = importes == null ? 0 : (baseNomina + baseNominaVacaciones) * (decimal)0.025;
                        decimal complementoFinal = importes == null ? 0 : importes.complemento_Emp * (((decimal)totalDiasFinal + (decimal)totalDiasVacacionesFinal) / (decimal)tipoNominaDias);
                        decimal fondoAhorroComplemento = importes == null ? 0 : complementoFinal * (decimal)0.025;

                        var fechaAniversario = new DateTime(anio, importes.fechaAlta.Month, importes.fechaAlta.Day);
                        if (importes != null && fechaAniversario >= fechasPeriodo.fecha_inicial && fechaAniversario <= fechasPeriodo.fecha_final)
                        {
                            int numDias = _vacacionesDAO.GetNumDias(x.clave_empleado.ToString(), fechaAniversario) ?? 0;
                            primaVacacionalFinal = (numDias * (importes.base_Emp + importes.complemento_Emp + importes.bono_FC) * 0.25M) / (decimal)tipoNominaDias;
                        }


                        if (auxDetallesCambio != null)
                        {
                            fondoAhorroNomina = auxDetallesCambio.fondoAhorroNomina;
                            fondoAhorroComplemento = auxDetallesCambio.fondoAhorroComplemento;
                            primaVacacionalFinal = auxDetallesCambio.primaVacacional;
                        }

                        List<int> empleadosExcepcion = new List<int> { 0 };

                        if (empleadosExcepcion.Contains(x.clave_empleado) && tipoNomina == tipoNominaPropuestaEnum.Quincenal)
                        {
                            fondoAhorroNomina = 0;
                            fondoAhorroComplemento = 0;
                        }

                        bool aplicaSindicato = aplicaSindicatoCC && _context.tblRH_BN_REGLA_Puestos.Any(y => y.puesto == x.puesto && y.tipo == 1) && tipoNomina == tipoNominaPropuestaEnum.Semanal;
                        bool aplicaPrimaDominical = aplicaPrimaDominicalCC;
                        if (CC == "007" && x.puesto != 93) aplicaPrimaDominical = false;
                        decimal primaDominical = 0;

                        decimal bonoZona = importes == null ? 0 : importes.bono_FC;

                        decimal sueldoSemanal = importes == null ? 0 : importes.base_Emp + importes.complemento_Emp + bonoZona + x.bonoCuadrado;
                        decimal sueldoDia = importes == null ? 0 : (importes.base_Emp + importes.complemento_Emp + bonoZona) / tipoNominaDias;
                        decimal sueldoHora = importes == null ? 0 : ((importes.base_Emp + importes.complemento_Emp + bonoZona) / 55) * 2;

                        bonoZona = bonoZona * (((decimal)totalDiasFinal + (decimal)totalDiasVacacionesFinal) / (decimal)tipoNominaDias);

                        if (aplicaPrimaDominical && x.primaDominical)
                        {
                            decimal auxPrimaDominical = (sueldoSemanal / (tipoNomina == tipoNominaPropuestaEnum.Semanal ? 7 : 15)) * (decimal)0.25;

                            if (domingos.Contains(1) && (x.dia1 == 1 || x.dia1 == 9 || x.dia1 == (empresa == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(2) && (x.dia2 == 1 || x.dia2 == 9 || x.dia2 == (empresa == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(3) && (x.dia3 == 1 || x.dia3 == 9 || x.dia3 == (empresa == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(4) && (x.dia4 == 1 || x.dia4 == 9 || x.dia4 == (empresa == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(5) && (x.dia5 == 1 || x.dia5 == 9 || x.dia5 == (empresa == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(6) && (x.dia6 == 1 || x.dia6 == 9 || x.dia6 == (empresa == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(7) && (x.dia7 == 1 || x.dia7 == 9 || x.dia7 == (empresa == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(8) && (x.dia8 == 1 || x.dia8 == 9 || x.dia8 == (empresa == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(9) && (x.dia9 == 1 || x.dia9 == 9 || x.dia9 == (empresa == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(10) && (x.dia10 == 1 || x.dia10 == 9 || x.dia10 == (empresa == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(11) && (x.dia11 == 1 || x.dia11 == 9 || x.dia11 == (empresa == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(12) && (x.dia12 == 1 || x.dia12 == 9 || x.dia12 == (empresa == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(13) && (x.dia13 == 1 || x.dia13 == 9 || x.dia13 == (empresa == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(14) && (x.dia14 == 1 || x.dia14 == 9 || x.dia14 == (empresa == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(15) && (x.dia15 == 1 || x.dia15 == 9 || x.dia15 == (empresa == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(16) && (x.dia16 == 1 || x.dia16 == 9 || x.dia16 == (empresa == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                        }

                        decimal sindicato = (importes == null || !aplicaSindicato) ? 0 : (baseNomina + baseNominaVacaciones) * (porcentajeSindicato == 0 ? (decimal)0.02 : (porcentajeSindicato / (decimal)100));
                        decimal bonoProduccion = auxDetallesCambio == null ? x.bono + x.bonoU + x.bonoDM : auxDetallesCambio.bonoProduccion;
                        decimal totalNominaFinal = (baseNomina + baseNominaVacaciones) - sindicato - fondoAhorroNomina - descuentosFinal - apoyoColectiuvoFinal - prestamoFinal - axaFinal - famsaFinal - pensionFinal - fonacotFinal - infonavitFinal;
                        decimal totalComplementoFinal = complementoFinal - fondoAhorroComplemento + bonoProduccion + bonoZona + otrosFinal + primaVacacionalFinal + primaDominical + (hrExtraFinal * sueldoHora) + ((decimal)totalDiasExtraFinal * sueldoDia) + ((decimal)totalDiasFestivosFinal * sueldoDia * 2);
                        decimal totalPagar = totalNominaFinal + totalComplementoFinal;

                        return new tblC_Nom_PreNomina_Det
                        {
                            empleadoCve = x.clave_empleado,
                            empleadoNombre = x.ape_paterno + ' ' + x.ape_materno + " " + x.nombre,
                            puesto = x.puestoDesc,
                            sueldoSemanal = sueldoSemanal,
                            dias = totalDiasFinal,
                            nominaBase = baseNomina,
                            diasVacaciones = totalDiasVacacionesFinal,
                            nominaBaseVacaciones = baseNominaVacaciones,
                            sindicato = sindicato,
                            fondoAhorroNomina = fondoAhorroNomina,
                            descuento = descuentosFinal,
                            prestamo = prestamoFinal,
                            axa = axaFinal,
                            descuentoFamsa = famsaFinal,
                            pensionAlimenticia = pensionFinal,
                            fonacot = fonacotFinal,
                            infonavit = infonavitFinal,
                            totalNomina = totalNominaFinal,
                            complementoNomina = complementoFinal,
                            fondoAhorroComplemento = fondoAhorroComplemento,
                            bonoProduccion = bonoProduccion,
                            bonoZona = bonoZona,
                            otros = otrosFinal,
                            primaVacacional = primaVacacionalFinal,
                            primaDominical = primaDominical,
                            hrExtra = hrExtraFinal,
                            hrExtraValor = sueldoHora,
                            importeExtra = hrExtraFinal * sueldoHora,
                            diaHrExtra = totalDiasExtraFinal,
                            diaExtraValor = sueldoDia,
                            importeDiaExtra = (decimal)totalDiasExtraFinal * sueldoDia,
                            diaFestivo = totalDiasFestivosFinal,
                            diaFestivoValor = sueldoDia * 2,
                            importeDiaFestivo = (decimal)totalDiasFestivosFinal * sueldoDia * 2,
                            totalComplemento = totalComplementoFinal,
                            totalPagar = totalPagar,
                            porcentajeTotalPagar = 1,
                            totalRealPagar = totalPagar,
                            valesDespensa = Math.Round(((decimal)103.74 * (decimal)0.4 * ((decimal)totalDiasFinal + (decimal)totalDiasVacacionesFinal)), 2),
                            totalDeposito = totalPagar - Math.Round(((decimal)103.74 * (decimal)0.4 * ((decimal)totalDiasFinal + (decimal)totalDiasVacacionesFinal)), 2),
                            observaciones = x.observaciones + (x.observaciones == "" ? "" : Environment.NewLine) + x.bono_Obs,
                            estatus = true,
                            apoyoColectivo = apoyoColectiuvoFinal,
                            fechaAntiguedad = importes.fechaAlta.ToShortDateString()
                        };
                    }).ToList();
                }

                return detalles.OrderBy(x => x.empleadoNombre).ToList();
            }
            catch (Exception e)
            {
                return new List<tblC_Nom_PreNomina_Det>();
            }
        }
        private List<tblC_Nom_PreNomina_Det> CalcularPrenominaBase_old(string CC, int periodo, tipoNominaPropuestaEnum tipoNomina, int anio, List<tblC_Nom_PreNomina_Det> detallesCambio)
        {
            if (CC == "--Seleccione--") CC = "";
            try
            {
                List<tblC_Nom_PreNomina_Det> detalles = new List<tblC_Nom_PreNomina_Det>();
                tblRH_BN_Incidencia incidenciaPpal = new tblRH_BN_Incidencia();

                incidenciaPpal = _context.tblRH_BN_Incidencia.Where(x => x.cc == CC && x.anio == anio && x.tipo_nomina == (int)tipoNomina && x.periodo == periodo && x.estatus == "A").OrderByDescending(x => x.fecha_auto).FirstOrDefault();
                if (incidenciaPpal != null)
                {
                    int incidenciaID = incidenciaPpal.id;
                    var incidenciaDet = _context.tblRH_BN_Incidencia_det.Where(x => x.incidenciaID == incidenciaID).ToList();

                    List<int> empleados = incidenciaDet.Select(x => x.clave_empleado).ToList();

                    var listaDescuentosProgramados = _context.tblC_Nom_PreNomina_Descuento.Where(x => x.anio == anio && (int)tipoNomina == x.tipoNomina && x.periodoInicial <= periodo && x.periodoFinal >= periodo && empleados.Contains(x.empleadoCve) && x.estatus).ToList();

                    var fechasPeriodo = _context.tblRH_BN_EstatusPeriodos.FirstOrDefault(x => x.anio == anio && x.tipo_nomina == (int)tipoNomina && x.periodo == periodo);
                    DateTime fechaCorte = new DateTime();
                    if (fechasPeriodo == null) fechaCorte = DateTime.Today;
                    else fechaCorte = fechasPeriodo.fecha_limite;

                    var stringEmpleados = "(";
                    for (int i = 0; i < empleados.Count(); i++)
                    {
                        if (i == empleados.Count() - 1) stringEmpleados += empleados[i].ToString() + ")";
                        else stringEmpleados += empleados[i].ToString() + ",";
                    }
                    var result = _context.Select<tblRH_BN_Evaluacion_Det>(new DapperDTO
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = string.Format(@"SELECT 
                              e.clave_empleado AS cve_Emp,
                              e.fecha_antiguedad AS fechaAlta,
                              (SELECT TOP 1 salario_base FROM tblRH_EK_Tabulador_Historial WHERE clave_empleado = e.clave_empleado AND fechaAplicaCambio <= @fecha_cambio ORDER BY fechaAplicaCambio DESC, id DESC) AS base_Emp,
                              (SELECT TOP 1 complemento FROM tblRH_EK_Tabulador_Historial WHERE clave_empleado = e.clave_empleado AND fechaAplicaCambio <= @fecha_cambio ORDER BY fechaAplicaCambio DESC, id DESC) AS complemento_Emp,
                              (SELECT TOP 1 bono_zona FROM tblRH_EK_Tabulador_Historial WHERE clave_empleado = e.clave_empleado AND fechaAplicaCambio <= @fecha_cambio ORDER BY fechaAplicaCambio DESC, id DESC) AS bono_FC,
                              e.sindicato AS aplicaSindicato
                              FROM tblRH_EK_Empleados AS e 
                              INNER JOIN tblRH_EK_Tipos_Nomina AS tn ON e.tipo_nomina = tn.tipo_nomina
                              WHERE tn.tipo_nomina = {0} AND e.clave_empleado IN {1}", (int)tipoNomina, stringEmpleados),
                        parametros = new { fecha_cambio = fechaCorte }
                    }).ToList();

                    var tipoNominaDias = 0;
                    switch (tipoNomina)
                    {
                        case tipoNominaPropuestaEnum.Semanal: tipoNominaDias = 7; break;
                        case tipoNominaPropuestaEnum.Quincenal: tipoNominaDias = 15; break;
                        default: tipoNominaDias = 1; break;
                    }
                    bool aplicaSindicatoCC = _context.tblRH_BN_REGLA_CC.Any(x => x.cc == CC && x.tipo == 1);
                    bool aplicaPrimaDominicalCC = _context.tblRH_BN_REGLA_CC.Any(x => x.cc == CC && x.tipo == 2);
                    tblRH_BN_REGLA_CC reglaSIndicato = _context.tblRH_BN_REGLA_CC.FirstOrDefault(x => x.cc == CC && x.tipo == 1);
                    decimal porcentajeSindicato = reglaSIndicato == null ? 0 : reglaSIndicato.cuota;
                    List<int> domingos = new List<int>();

                    if (aplicaPrimaDominicalCC)
                    {
                        if (tipoNomina == tipoNominaPropuestaEnum.Semanal)
                        {
                            domingos.Add(5);
                        }
                        else if (tipoNomina == tipoNominaPropuestaEnum.Quincenal)
                        {
                            var diaInicial = _context.tblC_Nom_CatPeriodo.FirstOrDefault(x => x.anio == anio && x.periodo == periodo && x.tipoNomina == (int)tipoNomina).fechaInicio;
                            var diaSemana = (int)diaInicial.DayOfWeek;
                            switch (diaSemana)
                            {
                                case 0: domingos.Add(1); domingos.Add(8); domingos.Add(15); break;
                                case 1: domingos.Add(7); domingos.Add(14); break;
                                case 2: domingos.Add(6); domingos.Add(13); break;
                                case 3: domingos.Add(5); domingos.Add(12); break;
                                case 4: domingos.Add(4); domingos.Add(11); break;
                                case 5: domingos.Add(3); domingos.Add(10); break;
                                case 6: domingos.Add(2); domingos.Add(9); break;
                                case 7: domingos.Add(1); domingos.Add(8); domingos.Add(15); break;
                            }
                        }

                    }

                    var vacacionesAutorizadas = _context.tblRH_Vacaciones_Vacaciones.Where(x => x.cc == CC && x.estado == 1 && x.registroActivo).ToList();
                    var vacacionesAutorizadasID = vacacionesAutorizadas.Select(x => x.id).ToList();
                    var vacacionesSistema = _context.tblRH_Vacaciones_Fechas.Where(x => x.idIncidencia == incidenciaID && vacacionesAutorizadasID.Contains(x.vacacionID) && x.registroActivo && x.incidenciaAplicada).ToList().Select(x =>
                    {
                        var vacacion = vacacionesAutorizadas.FirstOrDefault(y => y.id == x.vacacionID);
                        return new FechasVacacionesDTO
                        {
                            clave_empleado = vacacion == null ? 0 : vacacion.claveEmpleado.ParseInt(),
                            fecha = vacacion == null ? DateTime.Today : x.fecha ?? DateTime.Today
                        };
                    }).ToList();

                    detalles = incidenciaDet.Select(x =>
                    {
                        var auxDetallesCambio = detallesCambio.FirstOrDefault(y => y.empleadoCve == x.clave_empleado);
                        var listaDescuentosProgramadosEmpleado = listaDescuentosProgramados.Where(y => y.empleadoCve == x.clave_empleado).ToList();

                        decimal totalDiasFinal = 0;
                        int totalDiasExtraFinal = 0;
                        int totalDiasFestivosFinal = 0;
                        decimal hrExtraFinal = x.totalo_Horas;
                        decimal totalDiasVacacionesFinal = 0;

                        decimal descuentosFinal = 0;
                        decimal apoyoColectiuvoFinal = 0;
                        var listaDescuentosPrestamo = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.Prestamo).ToList();
                        decimal prestamoFinal = listaDescuentosPrestamo == null ? 0 : listaDescuentosPrestamo.Sum(y => y.monto);
                        //var listaDescuentosAxa = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.Axa).ToList();
                        decimal axaFinal = 0;
                        var listaDescuentosFamsa = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.Famsa).ToList();
                        decimal famsaFinal = listaDescuentosFamsa == null ? 0 : listaDescuentosFamsa.Sum(y => y.monto);
                        var listaDescuentosPension = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.PensionAlimenticia).ToList();
                        decimal pensionFinal = listaDescuentosPension == null ? 0 : listaDescuentosPension.Sum(y => y.monto);
                        var listaDescuentosFonacot = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.Fonacot).ToList();
                        decimal fonacotFinal = listaDescuentosFonacot == null ? 0 : listaDescuentosFonacot.Sum(y => y.monto);
                        var listaDescuentosInfonavit = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.Infonavit).ToList();
                        decimal infonavitFinal = listaDescuentosInfonavit == null ? 0 : listaDescuentosInfonavit.Sum(y => y.monto);
                        decimal otrosFinal = 0;
                        decimal primaVacacionalFinal = 0;

                        List<int> diasDoblePaga = new List<int>();
                        List<int> diasTriplePaga = new List<int>();
                        var empresa = vSesiones.sesionEmpresaActual;
                        switch (empresa)
                        {
                            case 1:
                            case 8:
                                diasTriplePaga.Add(9);
                                diasDoblePaga.Add(17);
                                break;
                            default:
                                diasTriplePaga.Add(9);
                                diasDoblePaga.Add(15);
                                break;
                        }

                        int diasExtraDobleTotal = 0;
                        int diasExtraTripleTotal = 0;
                        if (diasDoblePaga.Contains(x.dia1)) diasExtraDobleTotal++;
                        if (diasDoblePaga.Contains(x.dia2)) diasExtraDobleTotal++;
                        if (diasDoblePaga.Contains(x.dia3)) diasExtraDobleTotal++;
                        if (diasDoblePaga.Contains(x.dia4)) diasExtraDobleTotal++;
                        if (diasDoblePaga.Contains(x.dia5)) diasExtraDobleTotal++;
                        if (diasDoblePaga.Contains(x.dia6)) diasExtraDobleTotal++;
                        if (diasDoblePaga.Contains(x.dia7)) diasExtraDobleTotal++;
                        if (diasDoblePaga.Contains(x.dia8)) diasExtraDobleTotal++;
                        if (diasDoblePaga.Contains(x.dia9)) diasExtraDobleTotal++;
                        if (diasDoblePaga.Contains(x.dia10)) diasExtraDobleTotal++;
                        if (diasDoblePaga.Contains(x.dia11)) diasExtraDobleTotal++;
                        if (diasDoblePaga.Contains(x.dia12)) diasExtraDobleTotal++;
                        if (diasDoblePaga.Contains(x.dia13)) diasExtraDobleTotal++;
                        if (diasDoblePaga.Contains(x.dia14)) diasExtraDobleTotal++;
                        if (diasDoblePaga.Contains(x.dia15)) diasExtraDobleTotal++;
                        if (diasDoblePaga.Contains(x.dia16)) diasExtraDobleTotal++;

                        if (diasTriplePaga.Contains(x.dia1)) diasExtraTripleTotal++;
                        if (diasTriplePaga.Contains(x.dia2)) diasExtraTripleTotal++;
                        if (diasTriplePaga.Contains(x.dia3)) diasExtraTripleTotal++;
                        if (diasTriplePaga.Contains(x.dia4)) diasExtraTripleTotal++;
                        if (diasTriplePaga.Contains(x.dia5)) diasExtraTripleTotal++;
                        if (diasTriplePaga.Contains(x.dia6)) diasExtraTripleTotal++;
                        if (diasTriplePaga.Contains(x.dia7)) diasExtraTripleTotal++;
                        if (diasTriplePaga.Contains(x.dia8)) diasExtraTripleTotal++;
                        if (diasTriplePaga.Contains(x.dia9)) diasExtraTripleTotal++;
                        if (diasTriplePaga.Contains(x.dia10)) diasExtraTripleTotal++;
                        if (diasTriplePaga.Contains(x.dia11)) diasExtraTripleTotal++;
                        if (diasTriplePaga.Contains(x.dia12)) diasExtraTripleTotal++;
                        if (diasTriplePaga.Contains(x.dia13)) diasExtraTripleTotal++;
                        if (diasTriplePaga.Contains(x.dia14)) diasExtraTripleTotal++;
                        if (diasTriplePaga.Contains(x.dia15)) diasExtraTripleTotal++;
                        if (diasTriplePaga.Contains(x.dia16)) diasExtraTripleTotal++;

                        var vacacionesIncidencias = vacacionesSistema.Where(y => y.clave_empleado == x.clave_empleado).ToList();
                        totalDiasVacacionesFinal = vacacionesIncidencias.Count();

                        if (x.dia1 == 5) { var vacacionRepetida = vacacionesIncidencias.FirstOrDefault(y => y.fecha.Date == fechasPeriodo.fecha_inicial); if (vacacionRepetida == null) totalDiasVacacionesFinal++; }
                        if (x.dia2 == 5) { var vacacionRepetida = vacacionesIncidencias.FirstOrDefault(y => y.fecha.Date == fechasPeriodo.fecha_inicial.AddDays(1)); if (vacacionRepetida == null) totalDiasVacacionesFinal++; }
                        if (x.dia3 == 5) { var vacacionRepetida = vacacionesIncidencias.FirstOrDefault(y => y.fecha.Date == fechasPeriodo.fecha_inicial.AddDays(2)); if (vacacionRepetida == null) totalDiasVacacionesFinal++; }
                        if (x.dia4 == 5) { var vacacionRepetida = vacacionesIncidencias.FirstOrDefault(y => y.fecha.Date == fechasPeriodo.fecha_inicial.AddDays(3)); if (vacacionRepetida == null) totalDiasVacacionesFinal++; }
                        if (x.dia5 == 5) { var vacacionRepetida = vacacionesIncidencias.FirstOrDefault(y => y.fecha.Date == fechasPeriodo.fecha_inicial.AddDays(4)); if (vacacionRepetida == null) totalDiasVacacionesFinal++; }
                        if (x.dia6 == 5) { var vacacionRepetida = vacacionesIncidencias.FirstOrDefault(y => y.fecha.Date == fechasPeriodo.fecha_inicial.AddDays(5)); if (vacacionRepetida == null) totalDiasVacacionesFinal++; }
                        if (x.dia7 == 5) { var vacacionRepetida = vacacionesIncidencias.FirstOrDefault(y => y.fecha.Date == fechasPeriodo.fecha_inicial.AddDays(6)); if (vacacionRepetida == null) totalDiasVacacionesFinal++; }
                        if (x.dia8 == 5) { var vacacionRepetida = vacacionesIncidencias.FirstOrDefault(y => y.fecha.Date == fechasPeriodo.fecha_inicial.AddDays(7)); if (vacacionRepetida == null) totalDiasVacacionesFinal++; }
                        if (x.dia9 == 5) { var vacacionRepetida = vacacionesIncidencias.FirstOrDefault(y => y.fecha.Date == fechasPeriodo.fecha_inicial.AddDays(8)); if (vacacionRepetida == null) totalDiasVacacionesFinal++; }
                        if (x.dia10 == 5) { var vacacionRepetida = vacacionesIncidencias.FirstOrDefault(y => y.fecha.Date == fechasPeriodo.fecha_inicial.AddDays(9)); if (vacacionRepetida == null) totalDiasVacacionesFinal++; }
                        if (x.dia11 == 5) { var vacacionRepetida = vacacionesIncidencias.FirstOrDefault(y => y.fecha.Date == fechasPeriodo.fecha_inicial.AddDays(10)); if (vacacionRepetida == null) totalDiasVacacionesFinal++; }
                        if (x.dia12 == 5) { var vacacionRepetida = vacacionesIncidencias.FirstOrDefault(y => y.fecha.Date == fechasPeriodo.fecha_inicial.AddDays(11)); if (vacacionRepetida == null) totalDiasVacacionesFinal++; }
                        if (x.dia13 == 5) { var vacacionRepetida = vacacionesIncidencias.FirstOrDefault(y => y.fecha.Date == fechasPeriodo.fecha_inicial.AddDays(12)); if (vacacionRepetida == null) totalDiasVacacionesFinal++; }
                        if (x.dia14 == 5) { var vacacionRepetida = vacacionesIncidencias.FirstOrDefault(y => y.fecha.Date == fechasPeriodo.fecha_inicial.AddDays(13)); if (vacacionRepetida == null) totalDiasVacacionesFinal++; }
                        if (x.dia15 == 5) { var vacacionRepetida = vacacionesIncidencias.FirstOrDefault(y => y.fecha.Date == fechasPeriodo.fecha_inicial.AddDays(14)); if (vacacionRepetida == null) totalDiasVacacionesFinal++; }
                        if (x.dia16 == 5) { var vacacionRepetida = vacacionesIncidencias.FirstOrDefault(y => y.fecha.Date == fechasPeriodo.fecha_inicial.AddDays(15)); if (vacacionRepetida == null) totalDiasVacacionesFinal++; }

                        totalDiasFinal = x.total_Dias - x.dias_extras - x.dias_extra_concepto - totalDiasVacacionesFinal;
                        totalDiasExtraFinal = x.dias_extras + diasExtraDobleTotal;
                        totalDiasFestivosFinal = diasExtraTripleTotal;


                        if (auxDetallesCambio != null)
                        {
                            totalDiasFinal = auxDetallesCambio.dias;
                            totalDiasVacacionesFinal = auxDetallesCambio.diasVacaciones;
                            totalDiasExtraFinal = auxDetallesCambio.diaHrExtra;
                            totalDiasFestivosFinal = auxDetallesCambio.diaFestivo;
                            hrExtraFinal = auxDetallesCambio.hrExtra;

                            descuentosFinal = auxDetallesCambio.descuento;
                            apoyoColectiuvoFinal = auxDetallesCambio.apoyoColectivo;
                            prestamoFinal = auxDetallesCambio.prestamo;
                            axaFinal = auxDetallesCambio.axa;
                            famsaFinal = auxDetallesCambio.descuentoFamsa;
                            pensionFinal = auxDetallesCambio.pensionAlimenticia;
                            fonacotFinal = auxDetallesCambio.fonacot;
                            infonavitFinal = auxDetallesCambio.infonavit;
                            otrosFinal = auxDetallesCambio.otros;
                        }

                        var importes = result.FirstOrDefault(y => y.cve_Emp == x.clave_empleado);
                        decimal baseNomina = importes == null ? 0 : importes.base_Emp * ((decimal)totalDiasFinal / (decimal)tipoNominaDias);
                        decimal baseNominaVacaciones = importes == null ? 0 : importes.base_Emp * ((decimal)totalDiasVacacionesFinal / (decimal)tipoNominaDias);
                        decimal fondoAhorroNomina = importes == null ? 0 : (baseNomina + baseNominaVacaciones) * (decimal)0.025;
                        decimal complementoFinal = importes == null ? 0 : importes.complemento_Emp * (((decimal)totalDiasFinal + (decimal)totalDiasVacacionesFinal) / (decimal)tipoNominaDias);
                        decimal fondoAhorroComplemento = importes == null ? 0 : complementoFinal * (decimal)0.025;

                        var fechaAniversario = new DateTime(anio, importes.fechaAlta.Month, importes.fechaAlta.Day);
                        if (importes != null && fechaAniversario >= fechasPeriodo.fecha_inicial && fechaAniversario <= fechasPeriodo.fecha_final)
                        {
                            int numDias = _vacacionesDAO.GetNumDias(x.clave_empleado.ToString(), fechaAniversario) ?? 0;
                            primaVacacionalFinal = (numDias * (importes.base_Emp + importes.complemento_Emp + importes.bono_FC) * 0.25M) / (decimal)tipoNominaDias;
                        }


                        if (auxDetallesCambio != null)
                        {
                            fondoAhorroNomina = auxDetallesCambio.fondoAhorroNomina;
                            fondoAhorroComplemento = auxDetallesCambio.fondoAhorroComplemento;
                            primaVacacionalFinal = auxDetallesCambio.primaVacacional;
                        }

                        List<int> empleadosExcepcion = new List<int> { 0 };

                        if (empleadosExcepcion.Contains(x.clave_empleado) && tipoNomina == tipoNominaPropuestaEnum.Quincenal)
                        {
                            fondoAhorroNomina = 0;
                            fondoAhorroComplemento = 0;
                        }

                        bool aplicaSindicato = aplicaSindicatoCC && _context.tblRH_BN_REGLA_Puestos.Any(y => y.puesto == x.puesto && y.tipo == 1) && tipoNomina == tipoNominaPropuestaEnum.Semanal;
                        bool aplicaPrimaDominical = aplicaPrimaDominicalCC;
                        if (CC == "007" && x.puesto != 93) aplicaPrimaDominical = false;
                        decimal primaDominical = 0;

                        decimal bonoZona = importes == null ? 0 : importes.bono_FC;

                        decimal sueldoSemanal = importes == null ? 0 : importes.base_Emp + importes.complemento_Emp + bonoZona + x.bonoCuadrado;
                        decimal sueldoDia = importes == null ? 0 : (importes.base_Emp + importes.complemento_Emp + bonoZona) / tipoNominaDias;
                        decimal sueldoHora = importes == null ? 0 : ((importes.base_Emp + importes.complemento_Emp + bonoZona) / 55) * 2;

                        bonoZona = bonoZona * (((decimal)totalDiasFinal + (decimal)totalDiasVacacionesFinal) / (decimal)tipoNominaDias);

                        if (aplicaPrimaDominical && x.primaDominical)
                        {
                            decimal auxPrimaDominical = (sueldoSemanal / (tipoNomina == tipoNominaPropuestaEnum.Semanal ? 7 : 15)) * (decimal)0.25;

                            if (domingos.Contains(1) && (x.dia1 == 1 || x.dia1 == 9 || x.dia1 == (empresa == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(2) && (x.dia2 == 1 || x.dia2 == 9 || x.dia2 == (empresa == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(3) && (x.dia3 == 1 || x.dia3 == 9 || x.dia3 == (empresa == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(4) && (x.dia4 == 1 || x.dia4 == 9 || x.dia4 == (empresa == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(5) && (x.dia5 == 1 || x.dia5 == 9 || x.dia5 == (empresa == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(6) && (x.dia6 == 1 || x.dia6 == 9 || x.dia6 == (empresa == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(7) && (x.dia7 == 1 || x.dia7 == 9 || x.dia7 == (empresa == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(8) && (x.dia8 == 1 || x.dia8 == 9 || x.dia8 == (empresa == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(9) && (x.dia9 == 1 || x.dia9 == 9 || x.dia9 == (empresa == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(10) && (x.dia10 == 1 || x.dia10 == 9 || x.dia10 == (empresa == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(11) && (x.dia11 == 1 || x.dia11 == 9 || x.dia11 == (empresa == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(12) && (x.dia12 == 1 || x.dia12 == 9 || x.dia12 == (empresa == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(13) && (x.dia13 == 1 || x.dia13 == 9 || x.dia13 == (empresa == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(14) && (x.dia14 == 1 || x.dia14 == 9 || x.dia14 == (empresa == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(15) && (x.dia15 == 1 || x.dia15 == 9 || x.dia15 == (empresa == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(16) && (x.dia16 == 1 || x.dia16 == 9 || x.dia16 == (empresa == 1 ? 17 : 15))) { primaDominical += auxPrimaDominical; }
                        }

                        decimal sindicato = (importes == null || !aplicaSindicato) ? 0 : (baseNomina + baseNominaVacaciones) * (porcentajeSindicato == 0 ? (decimal)0.02 : (porcentajeSindicato / (decimal)100));
                        decimal bonoProduccion = auxDetallesCambio == null ? x.bono + x.bonoU + x.bonoDM : auxDetallesCambio.bonoProduccion;
                        decimal totalNominaFinal = (baseNomina + baseNominaVacaciones) - sindicato - fondoAhorroNomina - descuentosFinal - apoyoColectiuvoFinal - prestamoFinal - axaFinal - famsaFinal - pensionFinal - fonacotFinal - infonavitFinal;
                        decimal totalComplementoFinal = complementoFinal - fondoAhorroComplemento + bonoProduccion + bonoZona + otrosFinal + primaVacacionalFinal + primaDominical + (hrExtraFinal * sueldoHora) + ((decimal)totalDiasExtraFinal * sueldoDia) + ((decimal)totalDiasFestivosFinal * sueldoDia * 2);
                        decimal totalPagar = totalNominaFinal + totalComplementoFinal;

                        return new tblC_Nom_PreNomina_Det
                        {
                            empleadoCve = x.clave_empleado,
                            empleadoNombre = x.ape_paterno + ' ' + x.ape_materno + " " + x.nombre,
                            puesto = x.puestoDesc,
                            sueldoSemanal = sueldoSemanal,
                            dias = totalDiasFinal,
                            nominaBase = baseNomina,
                            diasVacaciones = totalDiasVacacionesFinal,
                            nominaBaseVacaciones = baseNominaVacaciones,
                            sindicato = sindicato,
                            fondoAhorroNomina = fondoAhorroNomina,
                            descuento = descuentosFinal,
                            prestamo = prestamoFinal,
                            axa = axaFinal,
                            descuentoFamsa = famsaFinal,
                            pensionAlimenticia = pensionFinal,
                            fonacot = fonacotFinal,
                            infonavit = infonavitFinal,
                            totalNomina = totalNominaFinal,
                            complementoNomina = complementoFinal,
                            fondoAhorroComplemento = fondoAhorroComplemento,
                            bonoProduccion = bonoProduccion,
                            bonoZona = bonoZona,
                            otros = otrosFinal,
                            primaVacacional = primaVacacionalFinal,
                            primaDominical = primaDominical,
                            hrExtra = hrExtraFinal,
                            hrExtraValor = sueldoHora,
                            importeExtra = hrExtraFinal * sueldoHora,
                            diaHrExtra = totalDiasExtraFinal,
                            diaExtraValor = sueldoDia,
                            importeDiaExtra = (decimal)totalDiasExtraFinal * sueldoDia,
                            diaFestivo = totalDiasFestivosFinal,
                            diaFestivoValor = sueldoDia * 2,
                            importeDiaFestivo = (decimal)totalDiasFestivosFinal * sueldoDia * 2,
                            totalComplemento = totalComplementoFinal,
                            totalPagar = totalPagar,
                            porcentajeTotalPagar = 1,
                            totalRealPagar = totalPagar,
                            valesDespensa = Math.Round(((decimal)103.74 * (decimal)0.4 * ((decimal)totalDiasFinal + (decimal)totalDiasVacacionesFinal)), 2),
                            totalDeposito = totalPagar - Math.Round(((decimal)103.74 * (decimal)0.4 * ((decimal)totalDiasFinal + (decimal)totalDiasVacacionesFinal)), 2),
                            observaciones = x.observaciones + (x.observaciones == "" ? "" : Environment.NewLine) + x.bono_Obs,
                            estatus = true,
                            apoyoColectivo = apoyoColectiuvoFinal,
                            fechaAntiguedad = importes.fechaAlta.ToShortDateString()
                        };
                    }).ToList();
                }

                return detalles.OrderBy(x => x.empleadoNombre).ToList();
            }
            catch (Exception e)
            {
                return new List<tblC_Nom_PreNomina_Det>();
            }
        }

        private List<tblC_Nom_PreNominaPeru_Det> CalcularPrenominaBasePeru(string CC, int periodo, tipoNominaPropuestaEnum tipoNomina, int anio, List<tblC_Nom_PreNominaPeru_Det> detallesCambio)
        {
            #region VERSION ANTERIOR
            //            if (CC == "--Seleccione--") CC = "";
            //            try
            //            {
            //                List<tblC_Nom_PreNominaPeru_Det> detalles = new List<tblC_Nom_PreNominaPeru_Det>();
            //                tblRH_BN_Incidencia incidenciaPpal = new tblRH_BN_Incidencia();
            //                tblRH_BN_Incidencia incidenciaPpalAnterior = new tblRH_BN_Incidencia();
            //                decimal UTI = 4600;
            //                var prenominasAnioActual = _context.tblC_Nom_Prenomina.Where(x => x.estatus == 1 && x.year == anio).Select(x => x.id).ToList();
            //                var prenominaDetAnioActual = _context.tblC_Nom_PreNomina_Det.Where(x => prenominasAnioActual.Contains(x.prenominaID)).ToList();

            //                var prenominaAnterior = _context.tblC_Nom_Prenomina.FirstOrDefault(x => x.year == anio && x.tipoNomina == (int)tipoNomina && x.periodo == (periodo - 1) && x.CC == CC);
            //                List<tblC_Nom_PreNomina_Det> prenominaAnteriorDet = new List<tblC_Nom_PreNomina_Det>();
            //                if (prenominaAnterior != null) prenominaAnteriorDet = _context.tblC_Nom_PreNomina_Det.Where(x => x.prenominaID == prenominaAnterior.id).ToList();

            //                incidenciaPpal = _context.tblRH_BN_Incidencia.Where(x => x.cc == CC && x.anio == anio && x.tipo_nomina == (int)tipoNomina && x.periodo == periodo && x.estatus == "A").OrderByDescending(x => x.fecha_auto).FirstOrDefault();
            //                incidenciaPpalAnterior = _context.tblRH_BN_Incidencia.Where(x => x.cc == CC && x.anio == ((periodo - 1 == 0) ? anio - 1 : anio) && x.tipo_nomina == (int)tipoNomina && x.periodo == ((periodo - 1 == 0) ? (tipoNomina == tipoNominaPropuestaEnum.Semanal ? 52 : 24) : periodo) && x.estatus == "A").OrderByDescending(x => x.fecha_auto).FirstOrDefault();
            //                if (incidenciaPpal != null)
            //                {
            //                    int incidenciaID = incidenciaPpal.id;
            //                    var incidenciaDet = _context.tblRH_BN_Incidencia_det.Where(x => x.incidenciaID == incidenciaID).ToList();
            //                    var incidenciaPeruDet = _context.tblRH_BN_Incidencia_det_Peru.Where(x => x.incidenciaID == incidenciaID).ToList();

            //                    int incidenciaAnteriorID = incidenciaPpalAnterior.id;
            //                    var incidenciaAnteriorDet = _context.tblRH_BN_Incidencia_det.Where(x => x.incidenciaID == incidenciaAnteriorID).ToList();
            //                    List<int> empleados = incidenciaDet.Select(x => x.clave_empleado).ToList();

            //                    var listaDescuentosProgramados = _context.tblC_Nom_PreNomina_Descuento.Where(x => x.anio == anio && (int)tipoNomina == x.tipoNomina && x.periodoInicial <= periodo && x.periodoFinal >= periodo && empleados.Contains(x.empleadoCve) && x.estatus).ToList();

            //                    var fechasPeriodo = _context.tblRH_BN_EstatusPeriodos.FirstOrDefault(x => x.anio == anio && x.tipo_nomina == (int)tipoNomina && x.periodo == periodo);
            //                    DateTime fechaCorte = new DateTime();
            //                    if (fechasPeriodo == null) fechaCorte = DateTime.Today;
            //                    else fechaCorte = fechasPeriodo.fecha_limite;

            //                    var stringEmpleados = "(";
            //                    for (int i = 0; i < empleados.Count(); i++)
            //                    {
            //                        if (i == empleados.Count() - 1) stringEmpleados += empleados[i].ToString() + ")";
            //                        else stringEmpleados += empleados[i].ToString() + ",";
            //                    }
            //                    var result = _context.Select<tblRH_BN_Evaluacion_Det>(new DapperDTO
            //                    {
            //                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
            //                        consulta = string.Format(@"SELECT 
            //                              e.clave_empleado AS cve_Emp,
            //                              (SELECT TOP 1 salario_base FROM tblRH_EK_Tabulador_Historial WHERE clave_empleado = e.clave_empleado AND fechaAplicaCambio <= @fecha_cambio ORDER BY fechaAplicaCambio DESC, hora DESC) AS base_Emp,
            //                              (SELECT TOP 1 complemento FROM tblRH_EK_Tabulador_Historial WHERE clave_empleado = e.clave_empleado AND fechaAplicaCambio <= @fecha_cambio ORDER BY fechaAplicaCambio DESC, hora DESC) AS complemento_Emp,
            //                              (SELECT TOP 1 bono_zona FROM tblRH_EK_Tabulador_Historial WHERE clave_empleado = e.clave_empleado AND fechaAplicaCambio <= @fecha_cambio ORDER BY fechaAplicaCambio DESC, hora DESC) AS bono_FC,
            //                              e.sindicato AS aplicaSindicato,
            //                              e.fecha_antiguedad as fechaAlta
            //                              FROM tblRH_EK_Empleados AS e 
            //                              INNER JOIN tblRH_REC_InfoEmpleadoPeru peru ON peru.claveEmpleado = e.clave_empleado
            //                              INNER JOIN tblRH_EK_Tipos_Nomina AS tn ON peru.tipotrab = tn.tipo_nomina
            //                              WHERE tn.tipo_nomina = {0} AND e.clave_empleado IN {1}", (int)tipoNomina, stringEmpleados),
            //                        parametros = new { fecha_cambio = fechaCorte }
            //                    }).ToList();

            //                    var tipoNominaDias = 0;
            //                    switch (tipoNomina)
            //                    {
            //                        case tipoNominaPropuestaEnum.Semanal: tipoNominaDias = 7; break;
            //                        case tipoNominaPropuestaEnum.Quincenal: tipoNominaDias = 15; break;
            //                        default: tipoNominaDias = 1; break;
            //                    }
            //                    bool aplicaSindicatoCC = _context.tblRH_BN_REGLA_CC.Any(x => x.cc == CC && x.tipo == 1);
            //                    bool aplicaPrimaDominicalCC = _context.tblRH_BN_REGLA_CC.Any(x => x.cc == CC && x.tipo == 2);
            //                    tblRH_BN_REGLA_CC reglaSIndicato = _context.tblRH_BN_REGLA_CC.FirstOrDefault(x => x.cc == CC && x.tipo == 1);
            //                    decimal porcentajeSindicato = reglaSIndicato == null ? 0 : reglaSIndicato.cuota;
            //                    List<int> domingos = new List<int>();

            //                    if (aplicaPrimaDominicalCC)
            //                    {
            //                        if (tipoNomina == tipoNominaPropuestaEnum.Semanal)
            //                        {
            //                            domingos.Add(5);
            //                        }
            //                        else if (tipoNomina == tipoNominaPropuestaEnum.Quincenal)
            //                        {
            //                            var diaInicial = _context.tblC_Nom_CatPeriodo.FirstOrDefault(x => x.anio == anio && x.periodo == periodo && x.tipoNomina == (int)tipoNomina).fechaInicio;
            //                            var diaSemana = (int)diaInicial.DayOfWeek;
            //                            switch (diaSemana)
            //                            {
            //                                case 1: domingos.Add(7); domingos.Add(14); break;
            //                                case 2: domingos.Add(6); domingos.Add(13); break;
            //                                case 3: domingos.Add(5); domingos.Add(12); break;
            //                                case 4: domingos.Add(4); domingos.Add(11); break;
            //                                case 5: domingos.Add(3); domingos.Add(10); break;
            //                                case 6: domingos.Add(2); domingos.Add(9); break;
            //                                case 7: domingos.Add(1); domingos.Add(8); domingos.Add(15); break;
            //                            }
            //                        }

            //                    }

            //                    List<AFPS> AFPS = new List<AFPS>();

            //                    using (var _starsoft = new MainContextPeruStarSoftPLCONSTRU())
            //                    {
            //                        AFPS = _starsoft.AFPS.ToList();
            //                    }

            //                    detalles = incidenciaDet.Select(x =>
            //                    {
            //                        var auxDetallesCambio = detallesCambio.FirstOrDefault(y => y.clave_empleado == x.clave_empleado);
            //                        var listaDescuentosProgramadosEmpleado = listaDescuentosProgramados.Where(y => y.empleadoCve == x.clave_empleado).ToList();
            //                        var infoEmpleadoPeru = _context.tblRH_REC_InfoEmpleadoPeru.FirstOrDefault(y => y.claveEmpleado == x.clave_empleado && y.registroActivo);
            //                        var afpEmpleado = AFPS.FirstOrDefault(y => y.CODAFP == (infoEmpleadoPeru == null ? "0" : infoEmpleadoPeru.codafp));
            //                        var importes = result.FirstOrDefault(y => y.cve_Emp == x.clave_empleado);
            //                        var incidenciaAnterior = incidenciaAnteriorDet.FirstOrDefault(y => y.clave_empleado == x.clave_empleado);
            //                        var detallesCambioEmpleado = detallesCambio == null ? null : detallesCambio.FirstOrDefault(y => y.clave_empleado == x.clave_empleado);
            //                        //var incidenciaPeru = 

            //                        int dias_trabajados = x.total_Dias - x.dias_extras - x.dias_extra_concepto;
            //                        //decimal horas_trabajadas = x.hor
            //                        int dias_extra = x.dias_extras + x.dias_extra_concepto;

            //                        bool ley27252 = false;
            //                        decimal sumaAFP = 0;

            //                        List<int> conceptosTrabajados = new List<int> { 1, 9, 12, 19, 20 };

            //                        int totalDomingos = 0;
            //                        foreach (var domingo in domingos)
            //                        {
            //                            switch (domingo)
            //                            {
            //                                case 1: if (conceptosTrabajados.Contains(x.dia1)) totalDomingos++; break;
            //                                case 2: if (conceptosTrabajados.Contains(x.dia1)) totalDomingos++; break;
            //                                case 3: if (conceptosTrabajados.Contains(x.dia1)) totalDomingos++; break;
            //                                case 4: if (conceptosTrabajados.Contains(x.dia1)) totalDomingos++; break;
            //                                case 5: if (conceptosTrabajados.Contains(x.dia1)) totalDomingos++; break;
            //                                case 6: if (conceptosTrabajados.Contains(x.dia1)) totalDomingos++; break;
            //                                case 7: if (conceptosTrabajados.Contains(x.dia1)) totalDomingos++; break;
            //                                case 8: if (conceptosTrabajados.Contains(x.dia1)) totalDomingos++; break;
            //                                case 9: if (conceptosTrabajados.Contains(x.dia1)) totalDomingos++; break;
            //                                case 10: if (conceptosTrabajados.Contains(x.dia1)) totalDomingos++; break;
            //                                case 11: if (conceptosTrabajados.Contains(x.dia1)) totalDomingos++; break;
            //                                case 12: if (conceptosTrabajados.Contains(x.dia1)) totalDomingos++; break;
            //                                case 13: if (conceptosTrabajados.Contains(x.dia1)) totalDomingos++; break;
            //                                case 14: if (conceptosTrabajados.Contains(x.dia1)) totalDomingos++; break;
            //                                case 15: if (conceptosTrabajados.Contains(x.dia1)) totalDomingos++; break;
            //                                case 16: if (conceptosTrabajados.Contains(x.dia1)) totalDomingos++; break;
            //                            }
            //                        }

            //                        //Incidencia Concepto Descuento Medico --> 19
            //                        int dias_descuento_medico = (x.dia1 == 19 ? 1 : 0) + (x.dia2 == 19 ? 1 : 0) + (x.dia3 == 19 ? 1 : 0) + (x.dia4 == 19 ? 1 : 0) + (x.dia5 == 19 ? 1 : 0) + (x.dia6 == 19 ? 1 : 0) + (x.dia7 == 19 ? 1 : 0) + (x.dia8 == 19 ? 1 : 0) +
            //                            (x.dia9 == 19 ? 1 : 0) + (x.dia10 == 19 ? 1 : 0) + (x.dia11 == 19 ? 1 : 0) + (x.dia12 == 19 ? 1 : 0) + (x.dia13 == 19 ? 1 : 0) + (x.dia14 == 19 ? 1 : 0) + (x.dia15 == 19 ? 1 : 0) + (x.dia16 == 19 ? 1 : 0);
            //                        //Incidencia Concepto Feriados --> 9
            //                        int dias_feriados = (x.dia1 == 9 ? 1 : 0) + (x.dia2 == 9 ? 1 : 0) + (x.dia3 == 9 ? 1 : 0) + (x.dia4 == 9 ? 1 : 0) + (x.dia5 == 9 ? 1 : 0) + (x.dia6 == 9 ? 1 : 0) + (x.dia7 == 9 ? 1 : 0) + (x.dia8 == 9 ? 1 : 0) +
            //                            (x.dia9 == 9 ? 1 : 0) + (x.dia10 == 9 ? 1 : 0) + (x.dia11 == 9 ? 1 : 0) + (x.dia12 == 9 ? 1 : 0) + (x.dia13 == 9 ? 1 : 0) + (x.dia14 == 9 ? 1 : 0) + (x.dia15 == 9 ? 1 : 0) + (x.dia16 == 9 ? 1 : 0);
            //                        //Incidencia Concepto Subsidio --> 20
            //                        int dias_subsidio = (x.dia1 == 20 ? 1 : 0) + (x.dia2 == 20 ? 1 : 0) + (x.dia3 == 20 ? 1 : 0) + (x.dia4 == 20 ? 1 : 0) + (x.dia5 == 20 ? 1 : 0) + (x.dia6 == 20 ? 1 : 0) + (x.dia7 == 20 ? 1 : 0) + (x.dia8 == 20 ? 1 : 0) +
            //                             (x.dia9 == 20 ? 1 : 0) + (x.dia10 == 20 ? 1 : 0) + (x.dia11 == 20 ? 1 : 0) + (x.dia12 == 20 ? 1 : 0) + (x.dia13 == 20 ? 1 : 0) + (x.dia14 == 20 ? 1 : 0) + (x.dia15 == 20 ? 1 : 0) + (x.dia16 == 20 ? 1 : 0);


            //                        #region Semanal
            //                        int clave_empleado = x.clave_empleado;
            //                        string nombre_empleado = x.ape_paterno + ' ' + x.ape_materno + ' ' + x.nombre;
            //                        string puesto = x.puestoDesc;
            //                        decimal basico = importes.base_Emp / 7;
            //                        // --> Remuneraciones
            //                        decimal jornada_semanal = basico * x.total_Dias;
            //                        if (detallesCambioEmpleado != null) { jornada_semanal = detallesCambioEmpleado.jornada_semanal; }
            //                        decimal horas_extra_60 = (basico * x.horas_extra_60 * 1.6M) / 8M;
            //                        if (detallesCambioEmpleado != null) { horas_extra_60 = detallesCambioEmpleado.horas_extra_60; }
            //                        decimal horas_extra_100 = (basico * x.horas_extra_100 * 2M) / 8M;
            //                        if (detallesCambioEmpleado != null) { horas_extra_100 = detallesCambioEmpleado.horas_extra_100; }
            //                        decimal horas_nocturnas = (basico * x.horas_extra_25 * 0.25M) / 8M;
            //                        if (detallesCambioEmpleado != null) { horas_nocturnas = detallesCambioEmpleado.horas_nocturnas; }
            //                        decimal descuento_medico = basico * dias_descuento_medico;
            //                        if (detallesCambioEmpleado != null) { descuento_medico = detallesCambioEmpleado.descuento_medico; }
            //                        decimal feriados = basico * dias_feriados;
            //                        if (detallesCambioEmpleado != null) { feriados = detallesCambioEmpleado.feriados; }
            //                        decimal subsidios = basico * dias_subsidio;
            //                        if (detallesCambioEmpleado != null) { subsidios = detallesCambioEmpleado.subsidios; }
            //                        decimal buc = (infoEmpleadoPeru != null && infoEmpleadoPeru.tipotrab == 27) ? (basico * (dias_trabajados + dias_feriados + dias_descuento_medico) * 0.32M) :
            //                            (basico * (dias_trabajados + dias_feriados + dias_descuento_medico) * 0.30M);
            //                        if (detallesCambioEmpleado != null) { buc = detallesCambioEmpleado.buc; }
            //                        decimal bono_altitud = dias_trabajados * 2.5M;
            //                        if (detallesCambioEmpleado != null) { bono_altitud = detallesCambioEmpleado.bono_altitud; }
            //                        decimal indemnizacion = ((basico / 8M) * ((dias_trabajados * 8M) + x.horas_extra_60 + x.horas_extra_100 + (dias_subsidio * 8M) + (dias_feriados * 8M) + (dias_descuento_medico * 8))) * 0.15M;
            //                        if (detallesCambioEmpleado != null) { indemnizacion = detallesCambioEmpleado.indemnizacion; }
            //                        decimal dominical = basico * (((dias_trabajados * 8M) + (dias_feriados * 8M) + (dias_descuento_medico * 8M)) / 48M);
            //                        if (detallesCambioEmpleado != null) { dominical = detallesCambioEmpleado.dominical; }
            //                        decimal bonificacion_extraordinaria = ((((basico * 0.09M * 40M) / 7M) / 30M) / 8M) * (((dias_trabajados * 8M) + (dias_subsidio * 8M) + (dias_feriados * 8M)
            //                            + (dias_descuento_medico * 8M)) + (((dias_trabajados * 8M) + (dias_subsidio * 8M) + (dias_feriados * 8M) + (dias_descuento_medico * 8M)) / 6M));
            //                        if (detallesCambioEmpleado != null) { bonificacion_extraordinaria = detallesCambioEmpleado.bonificacion_extraordinaria; }
            //                        decimal bonificacion_alta_especial = ((basico / 8M) * ((dias_trabajados * 8M) + (dias_subsidio * 8M) + (dias_feriados * 8M) + (dias_descuento_medico * 8M))) * (infoEmpleadoPeru != null ? infoEmpleadoPeru.tesp : 0);
            //                        if (detallesCambioEmpleado != null) { bonificacion_alta_especial = detallesCambioEmpleado.bonificacion_alta_especial; }
            //                        decimal vacaciones_truncas = ((basico / 8M) * ((dias_trabajados * 8M) + (dias_subsidio * 8M) + (dias_feriados * 8M) + (dias_descuento_medico * 8M))) * 0.1M;
            //                        if (detallesCambioEmpleado != null) { vacaciones_truncas = detallesCambioEmpleado.vacaciones_truncas; }
            //                        decimal asignacion_escolar = (((basico * 30M) / 360M) / 8M) * (((dias_trabajados * 8M) + (dias_subsidio * 8M) + (dias_feriados * 8M)
            //                            + (dias_descuento_medico * 8M)) + (((dias_trabajados * 8M) + (dias_subsidio * 8M) + (dias_feriados * 8M) + (dias_descuento_medico * 8M)) / 6M));
            //                        if (detallesCambioEmpleado != null) { asignacion_escolar = detallesCambioEmpleado.asignacion_escolar; }
            //                        decimal bono_por_altura = (infoEmpleadoPeru != null && infoEmpleadoPeru.tipotrab == 27) ? ((basico * dias_trabajados) * 0.05M) : 0;
            //                        if (detallesCambioEmpleado != null) { bono_por_altura = detallesCambioEmpleado.bono_por_altura; }
            //                        decimal devolucion_5ta = 0;
            //                        if (detallesCambioEmpleado != null) { devolucion_5ta = detallesCambioEmpleado.devolucion_5ta; }
            //                        decimal gratificacion_proporcional = ((((basico * 40M) / 7M) / 30M) / 8M) * (((dias_trabajados * 8M) + (dias_subsidio * 8M) + (dias_feriados * 8M) + (dias_descuento_medico * 8M)) +
            //                            (((dias_trabajados * 8M) + (dias_subsidio * 8M) + (dias_feriados * 8M) + (dias_descuento_medico * 8M)) / 6M));
            //                        if (detallesCambioEmpleado != null) { gratificacion_proporcional = detallesCambioEmpleado.gratificacion_proporcional; }
            //                        // <--
            //                        // --> Deducciones
            //                        decimal AFP_obligatoria = (afpEmpleado == null || afpEmpleado.CODAFP == "SR" || afpEmpleado.CODAFP == "ON") ? 0 : (sumaAFP * afpEmpleado.APOROBLI) / 100M;
            //                        if (detallesCambioEmpleado != null) { AFP_obligatoria = detallesCambioEmpleado.AFP_obligatoria; }
            //                        decimal AFP_voluntaria = (afpEmpleado == null || ley27252 == false || afpEmpleado.CODAFP == "ON") ? 0 : (sumaAFP * (infoEmpleadoPeru != null ? infoEmpleadoPeru.aporobli : 0)) / 100M;
            //                        if (detallesCambioEmpleado != null) { AFP_voluntaria = detallesCambioEmpleado.AFP_voluntaria; }
            //                        decimal AFP_comision = (afpEmpleado == null || afpEmpleado.CODAFP == "SR" || afpEmpleado.CODAFP == "ON") ? 0 : (sumaAFP * (infoEmpleadoPeru != null ? infoEmpleadoPeru.comisionra : 0)) / 100M;
            //                        if (detallesCambioEmpleado != null) { AFP_comision = detallesCambioEmpleado.AFP_comision; }
            //                        decimal AFP_prima = (afpEmpleado == null || afpEmpleado.CODAFP == "SR" || afpEmpleado.CODAFP == "ON") ? 0 : ((sumaAFP > afpEmpleado.TOPESEGURO ? afpEmpleado.TOPESEGURO : sumaAFP) * afpEmpleado.SEGURO) / 100M;
            //                        if (detallesCambioEmpleado != null) { AFP_prima = detallesCambioEmpleado.AFP_prima; }
            //                        decimal conafovicer = (jornada_semanal + dominical + feriados + descuento_medico) * 0.02M;
            //                        if (detallesCambioEmpleado != null) { conafovicer = detallesCambioEmpleado.conafovicer; }
            //                        decimal essalud_vida = (incidenciaAnterior == null || (infoEmpleadoPeru != null && infoEmpleadoPeru.essaludvida == 0)) ? 0M : 5M;
            //                        if (detallesCambioEmpleado != null) { essalud_vida = detallesCambioEmpleado.essalud_vida; }
            //                        decimal onp = afpEmpleado != null && afpEmpleado.CODAFP == "ON" ? ((sumaAFP * afpEmpleado.APOROBLI) / 100M) : 0;
            //                        if (detallesCambioEmpleado != null) { onp = detallesCambioEmpleado.onp; }
            //                        decimal renta_5ta = 0;
            //                        if (detallesCambioEmpleado != null) { renta_5ta = detallesCambioEmpleado.renta_5ta; }
            //                        // <--
            //                        // --> Aportaciones
            //                        decimal essalud_aportes = jornada_semanal == 0 ? 0M : ((infoEmpleadoPeru != null && infoEmpleadoPeru.opciona == "EPS") ? essalud_vida * 0.0675M : essalud_vida * 0.09M);
            //                        if (detallesCambioEmpleado != null) { essalud_aportes = detallesCambioEmpleado.essalud_aportes; }
            //                        decimal AFP_aportes = (afpEmpleado == null || ley27252 == false || afpEmpleado.CODAFP == "ON") ? 0 : (sumaAFP * (infoEmpleadoPeru != null ? infoEmpleadoPeru.aporobli : 0)) / 100M;
            //                        if (detallesCambioEmpleado != null) { AFP_aportes = detallesCambioEmpleado.AFP_aportes; }
            //                        // <--
            //                        #endregion


            //                        return new tblC_Nom_PreNominaPeru_Det
            //                        {
            //                            prenominaID = incidenciaID,
            //                            clave_empleado = clave_empleado,
            //                            nombre_empleado = nombre_empleado,
            //                            puesto = puesto,
            //                            basico = basico,
            //                            jornada_semanal = jornada_semanal,
            //                            horas_extra_60 = horas_extra_60,
            //                            horas_extra_100 = horas_extra_100,
            //                            horas_nocturnas = horas_nocturnas,
            //                            descuento_medico = descuento_medico,
            //                            feriados = feriados,
            //                            subsidios = subsidios,
            //                            buc = buc,
            //                            bono_altitud = bono_altitud,
            //                            indemnizacion = indemnizacion,
            //                            dominical = dominical,
            //                            bonificacion_extraordinaria = bonificacion_extraordinaria,
            //                            bonificacion_alta_especial = bonificacion_alta_especial,
            //                            vacaciones_truncas = vacaciones_truncas,
            //                            asignacion_escolar = asignacion_escolar,
            //                            bono_por_altura = bono_por_altura,
            //                            devolucion_5ta = devolucion_5ta,
            //                            gratificacion_proporcional = gratificacion_proporcional,
            //                            total_percepciones = jornada_semanal + horas_extra_60 + horas_extra_100 + horas_nocturnas + descuento_medico + feriados + subsidios + buc + bono_altitud + indemnizacion + dominical
            //                                + bonificacion_extraordinaria + bonificacion_alta_especial + vacaciones_truncas + asignacion_escolar + bono_por_altura + devolucion_5ta + gratificacion_proporcional,

            //                            AFP_obligatoria = AFP_obligatoria,
            //                            AFP_voluntaria = AFP_voluntaria,
            //                            AFP_comision = AFP_comision,
            //                            AFP_prima = AFP_prima,
            //                            conafovicer = conafovicer,
            //                            essalud_vida = essalud_vida,
            //                            onp = onp,
            //                            renta_5ta = renta_5ta,
            //                            total_deducciones = AFP_obligatoria + AFP_voluntaria + AFP_comision + AFP_prima + conafovicer + essalud_vida + onp + renta_5ta,

            //                            essalud_aportes = essalud_aportes,
            //                            AFP_aportes = AFP_aportes,
            //                            total_aportaciones = essalud_aportes + AFP_aportes,

            //                            total_pagar = jornada_semanal + horas_extra_60 + horas_extra_100 + horas_nocturnas + descuento_medico + feriados + subsidios + buc + bono_altitud + indemnizacion + dominical
            //                                + bonificacion_extraordinaria + bonificacion_alta_especial + vacaciones_truncas + asignacion_escolar + bono_por_altura + devolucion_5ta + gratificacion_proporcional -
            //                                (AFP_obligatoria + AFP_voluntaria + AFP_comision + AFP_prima + conafovicer + essalud_vida + onp + renta_5ta) + (essalud_aportes + AFP_aportes),
            //                            total_deposito = jornada_semanal + horas_extra_60 + horas_extra_100 + horas_nocturnas + descuento_medico + feriados + subsidios + buc + bono_altitud + indemnizacion + dominical
            //                                + bonificacion_extraordinaria + bonificacion_alta_especial + vacaciones_truncas + asignacion_escolar + bono_por_altura + devolucion_5ta + gratificacion_proporcional -
            //                                (AFP_obligatoria + AFP_voluntaria + AFP_comision + AFP_prima + conafovicer + essalud_vida + onp + renta_5ta)
            //                        };
            //                    }).OrderBy(x => x.nombre_empleado).ToList();
            //                }

            //                return detalles;
            //            }
            //            catch (Exception e)
            //            {
            //                return new List<tblC_Nom_PreNominaPeru_Det>();
            //            }
            #endregion

            #region VERSION ACTUAL
            try
            {
                if (CC == "--Seleccione--")
                    CC = string.Empty;

                List<tblC_Nom_PreNominaPeru_Det> detalles = new List<tblC_Nom_PreNominaPeru_Det>();
                tblRH_BN_Incidencia incidenciaPpal = new tblRH_BN_Incidencia();
                tblRH_BN_Incidencia incidenciaPpalAnterior = new tblRH_BN_Incidencia();

                List<int> prenominasAnioActual = _context.tblC_Nom_Prenomina.Where(x => x.estatus == 1 && x.year == anio).Select(x => x.id).ToList();
                List<tblC_Nom_PreNomina_Det> prenominaDetAnioActual = _context.tblC_Nom_PreNomina_Det.Where(x => prenominasAnioActual.Contains(x.prenominaID)).ToList();

                tblC_Nom_Prenomina prenominaAnterior = _context.tblC_Nom_Prenomina.Where(x => x.year == anio && x.tipoNomina == (int)tipoNomina && x.periodo == (periodo - 1) && x.CC == CC).FirstOrDefault();
                List<tblC_Nom_PreNomina_Det> prenominaAnteriorDet = new List<tblC_Nom_PreNomina_Det>();
                if (prenominaAnterior != null)
                    prenominaAnteriorDet = _context.tblC_Nom_PreNomina_Det.Where(x => x.prenominaID == prenominaAnterior.id).ToList();

                incidenciaPpal = _context.tblRH_BN_Incidencia.Where(x => x.cc == CC && x.anio == anio && x.tipo_nomina == (int)tipoNomina && x.periodo == periodo && x.estatus == "A").OrderByDescending(x => x.fecha_auto).FirstOrDefault();
                incidenciaPpalAnterior = _context.tblRH_BN_Incidencia.Where(x => x.cc == CC && x.anio == ((periodo - 1 == 0) ? anio - 1 : anio) && x.tipo_nomina == (int)tipoNomina && x.periodo == ((periodo - 1 == 0) ? (tipoNomina == tipoNominaPropuestaEnum.Semanal ? 52 : 24) : periodo) && x.estatus == "A").OrderByDescending(x => x.fecha_auto).FirstOrDefault();
                if (incidenciaPpal != null)
                {
                    int incidenciaID = incidenciaPpal.id;
                    var incidenciaDet = _context.tblRH_BN_Incidencia_det.Where(x => x.incidenciaID == incidenciaID).ToList();
                    var incidenciaPeruDet = _context.tblRH_BN_Incidencia_det_Peru.Where(x => x.incidenciaID == incidenciaID).ToList();

                    int incidenciaAnteriorID = incidenciaPpalAnterior.id;
                    var incidenciaAnteriorDet = _context.tblRH_BN_Incidencia_det.Where(x => x.incidenciaID == incidenciaAnteriorID).ToList();
                    List<int> empleados = incidenciaDet.Select(x => x.clave_empleado).ToList();

                    List<tblC_Nom_PreNomina_Descuento> listaDescuentosProgramados = _context.tblC_Nom_PreNomina_Descuento.Where(x => x.anio == anio && (int)tipoNomina == x.tipoNomina && x.periodoInicial <= periodo && x.periodoFinal >= periodo && empleados.Contains(x.empleadoCve) && x.estatus).ToList();

                    tblRH_BN_EstatusPeriodos fechasPeriodo = _context.tblRH_BN_EstatusPeriodos.Where(x => x.anio == anio && x.tipo_nomina == (int)tipoNomina && x.periodo == periodo).FirstOrDefault();
                    DateTime fechaCorte = new DateTime();
                    if (fechasPeriodo == null)
                        fechaCorte = DateTime.Today;
                    else
                        fechaCorte = fechasPeriodo.fecha_limite;

                    var stringEmpleados = "(";
                    for (int i = 0; i < empleados.Count(); i++)
                    {
                        if (i == empleados.Count() - 1)
                            stringEmpleados += empleados[i].ToString() + ")";
                        else
                            stringEmpleados += empleados[i].ToString() + ",";
                    }
                    string strQuery = string.Format(@"SELECT e.clave_empleado AS cve_Emp,
                                                          (SELECT TOP 1 salario_base FROM tblRH_EK_Tabulador_Historial WHERE clave_empleado = e.clave_empleado AND fechaAplicaCambio <= @fecha_cambio ORDER BY fechaAplicaCambio DESC, hora DESC) AS base_Emp,
                                                          (SELECT TOP 1 complemento FROM tblRH_EK_Tabulador_Historial WHERE clave_empleado = e.clave_empleado AND fechaAplicaCambio <= @fecha_cambio ORDER BY fechaAplicaCambio DESC, hora DESC) AS complemento_Emp,
                                                          (SELECT TOP 1 bono_zona FROM tblRH_EK_Tabulador_Historial WHERE clave_empleado = e.clave_empleado AND fechaAplicaCambio <= @fecha_cambio ORDER BY fechaAplicaCambio DESC, hora DESC) AS bono_FC,
                                                          e.sindicato AS aplicaSindicato,
                                                          e.fecha_antiguedad as fechaAlta
                                                              FROM tblRH_EK_Empleados AS e 
                                                              INNER JOIN tblRH_REC_InfoEmpleadoPeru peru ON peru.claveEmpleado = e.clave_empleado
                                                              INNER JOIN tblRH_EK_Tipos_Nomina AS tn ON peru.tipotrab = tn.tipo_nomina
                                                                WHERE tn.tipo_nomina = {0} AND e.clave_empleado IN {1}", (int)tipoNomina, stringEmpleados);
                    var result = _context.Select<tblRH_BN_Evaluacion_Det>(new DapperDTO
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = string.Format(@"SELECT e.clave_empleado AS cve_Emp,
                                                          (SELECT TOP 1 salario_base FROM tblRH_EK_Tabulador_Historial WHERE clave_empleado = e.clave_empleado AND fechaAplicaCambio <= @fecha_cambio ORDER BY fechaAplicaCambio DESC, hora DESC) AS base_Emp,
                                                          (SELECT TOP 1 complemento FROM tblRH_EK_Tabulador_Historial WHERE clave_empleado = e.clave_empleado AND fechaAplicaCambio <= @fecha_cambio ORDER BY fechaAplicaCambio DESC, hora DESC) AS complemento_Emp,
                                                          (SELECT TOP 1 bono_zona FROM tblRH_EK_Tabulador_Historial WHERE clave_empleado = e.clave_empleado AND fechaAplicaCambio <= @fecha_cambio ORDER BY fechaAplicaCambio DESC, hora DESC) AS bono_FC,
                                                          e.sindicato AS aplicaSindicato,
                                                          e.fecha_antiguedad as fechaAlta
                                                              FROM tblRH_EK_Empleados AS e 
                                                              INNER JOIN tblRH_REC_InfoEmpleadoPeru peru ON peru.claveEmpleado = e.clave_empleado
                                                              INNER JOIN tblRH_EK_Tipos_Nomina AS tn ON peru.tipotrab = tn.tipo_nomina
                                                                WHERE tn.tipo_nomina = {0} AND e.clave_empleado IN {1}", (int)tipoNomina, stringEmpleados),
                        parametros = new { fecha_cambio = fechaCorte }
                    }).ToList();

                    bool aplicaSindicatoCC = _context.tblRH_BN_REGLA_CC.Any(x => x.cc == CC && x.tipo == 1);
                    bool aplicaPrimaDominicalCC = _context.tblRH_BN_REGLA_CC.Any(x => x.cc == CC && x.tipo == 2);
                    tblRH_BN_REGLA_CC reglaSIndicato = _context.tblRH_BN_REGLA_CC.Where(x => x.cc == CC && x.tipo == 1).FirstOrDefault();
                    decimal porcentajeSindicato = reglaSIndicato == null ? 0 : reglaSIndicato.cuota;
                    List<int> domingos = new List<int>();

                    if (aplicaPrimaDominicalCC)
                    {
                        if (tipoNomina == tipoNominaPropuestaEnum.Semanal)
                            domingos.Add(5);
                        else if (tipoNomina == tipoNominaPropuestaEnum.Quincenal)
                        {
                            DateTime diaInicial = _context.tblC_Nom_CatPeriodo.Where(w => w.anio == anio && w.periodo == periodo && w.tipoNomina == (int)tipoNomina).Select(s => s.fechaInicio).FirstOrDefault();
                            int diaSemana = (int)diaInicial.DayOfWeek;
                            switch (diaSemana)
                            {
                                case 1: domingos.Add(7); domingos.Add(14); break;
                                case 2: domingos.Add(6); domingos.Add(13); break;
                                case 3: domingos.Add(5); domingos.Add(12); break;
                                case 4: domingos.Add(4); domingos.Add(11); break;
                                case 5: domingos.Add(3); domingos.Add(10); break;
                                case 6: domingos.Add(2); domingos.Add(9); break;
                                case 7: domingos.Add(1); domingos.Add(8); domingos.Add(15); break;
                            }
                        }
                    }

                    List<AFPS> AFPS = new List<AFPS>();
                    using (var _starsoft = new MainContextPeruStarSoftPLCONSTRU())
                    {
                        AFPS = _starsoft.AFPS.ToList();
                    }

                    detalles = incidenciaDet.Select(x =>
                    {
                        int clave_empleado = x.clave_empleado;
                        var auxDetallesCambio = detallesCambio.Where(y => y.clave_empleado == x.clave_empleado).FirstOrDefault();
                        var listaDescuentosProgramadosEmpleado = listaDescuentosProgramados.Where(y => y.empleadoCve == x.clave_empleado).ToList();
                        var infoEmpleadoPeru = _context.tblRH_REC_InfoEmpleadoPeru.Where(y => y.claveEmpleado == x.clave_empleado && y.registroActivo).FirstOrDefault();
                        var afpEmpleado = AFPS.Where(y => y.CODAFP == (infoEmpleadoPeru == null ? "0" : infoEmpleadoPeru.codafp)).FirstOrDefault();
                        var importes = result.Where(y => y.cve_Emp == x.clave_empleado).FirstOrDefault();
                        var incidenciaAnterior = incidenciaAnteriorDet.Where(y => y.clave_empleado == x.clave_empleado).FirstOrDefault();
                        var detallesCambioEmpleado = detallesCambio == null ? null : detallesCambio.Where(y => y.clave_empleado == x.clave_empleado).FirstOrDefault();
                        tblRH_BN_Incidencia_det_Peru objIndicidenciaPeruDet = incidenciaPeruDet.Where(w => w.clave_empleado == clave_empleado).FirstOrDefault();

                        int dias_trabajados = x.total_Dias - x.dias_extras - x.dias_extra_concepto;
                        int dias_extra = x.dias_extras + x.dias_extra_concepto;

                        bool ley27252 = false;
                        decimal sumaAFP = 0;

                        List<int> conceptosTrabajados = new List<int> { 1, 9, 12, 19, 20 };

                        int totalDomingos = 0;
                        foreach (var domingo in domingos)
                        {
                            switch (domingo)
                            {
                                case 1: if (conceptosTrabajados.Contains(x.dia1)) totalDomingos++; break;
                                case 2: if (conceptosTrabajados.Contains(x.dia1)) totalDomingos++; break;
                                case 3: if (conceptosTrabajados.Contains(x.dia1)) totalDomingos++; break;
                                case 4: if (conceptosTrabajados.Contains(x.dia1)) totalDomingos++; break;
                                case 5: if (conceptosTrabajados.Contains(x.dia1)) totalDomingos++; break;
                                case 6: if (conceptosTrabajados.Contains(x.dia1)) totalDomingos++; break;
                                case 7: if (conceptosTrabajados.Contains(x.dia1)) totalDomingos++; break;
                                case 8: if (conceptosTrabajados.Contains(x.dia1)) totalDomingos++; break;
                                case 9: if (conceptosTrabajados.Contains(x.dia1)) totalDomingos++; break;
                                case 10: if (conceptosTrabajados.Contains(x.dia1)) totalDomingos++; break;
                                case 11: if (conceptosTrabajados.Contains(x.dia1)) totalDomingos++; break;
                                case 12: if (conceptosTrabajados.Contains(x.dia1)) totalDomingos++; break;
                                case 13: if (conceptosTrabajados.Contains(x.dia1)) totalDomingos++; break;
                                case 14: if (conceptosTrabajados.Contains(x.dia1)) totalDomingos++; break;
                                case 15: if (conceptosTrabajados.Contains(x.dia1)) totalDomingos++; break;
                                case 16: if (conceptosTrabajados.Contains(x.dia1)) totalDomingos++; break;
                            }
                        }

                        #region CANTIDAD DE DÍAS FERIADOS TRABAJADOS
                        int cantDiasFeriadosTrabajados = 0;
                        if (x.dia1 == 9) { cantDiasFeriadosTrabajados++; }
                        if (x.dia2 == 9) { cantDiasFeriadosTrabajados++; }
                        if (x.dia3 == 9) { cantDiasFeriadosTrabajados++; }
                        if (x.dia4 == 9) { cantDiasFeriadosTrabajados++; }
                        if (x.dia5 == 9) { cantDiasFeriadosTrabajados++; }
                        if (x.dia6 == 9) { cantDiasFeriadosTrabajados++; }
                        if (x.dia7 == 9) { cantDiasFeriadosTrabajados++; }
                        #endregion

                        #region CANTIDAD DE HORAS DE DIAS FERIADAS TRABAJADAS
                        int cantHrsFeriadasTrabajadas = cantDiasFeriadosTrabajados * 8;
                        #endregion

                        #region CANTIDAD DE HORAS SUBSIDIO
                        int cantHrsSubsidio = 0;
                        if (x.dia1 == 20)
                            cantHrsSubsidio = incidenciaPeruDet.Select(s => s.dia1).FirstOrDefault();
                        if (x.dia2 == 20)
                            cantHrsSubsidio += incidenciaPeruDet.Select(s => s.dia2).FirstOrDefault();
                        if (x.dia3 == 20)
                            cantHrsSubsidio += incidenciaPeruDet.Select(s => s.dia3).FirstOrDefault();
                        if (x.dia4 == 20)
                            cantHrsSubsidio += incidenciaPeruDet.Select(s => s.dia4).FirstOrDefault();
                        if (x.dia5 == 20)
                            cantHrsSubsidio += incidenciaPeruDet.Select(s => s.dia5).FirstOrDefault();
                        if (x.dia6 == 20)
                            cantHrsSubsidio += incidenciaPeruDet.Select(s => s.dia6).FirstOrDefault();
                        if (x.dia7 == 20)
                            cantHrsSubsidio += incidenciaPeruDet.Select(s => s.dia7).FirstOrDefault();
                        #endregion

                        #region CANTIDAD DE DÍAS SUBSIDIO
                        int cantDiasSubsidio = 0;
                        if (x.dia1 == 20) { cantDiasSubsidio++; }
                        if (x.dia2 == 20) { cantDiasSubsidio++; }
                        if (x.dia3 == 20) { cantDiasSubsidio++; }
                        if (x.dia4 == 20) { cantDiasSubsidio++; }
                        if (x.dia5 == 20) { cantDiasSubsidio++; }
                        if (x.dia6 == 20) { cantDiasSubsidio++; }
                        if (x.dia7 == 20) { cantDiasSubsidio++; }
                        #endregion

                        #region CANTIDAD DE HORAS TRABAJADAS EFECTIVAS TRABAJADAS DE LUNES A SABADO
                        int cantDiasEfectivosTrabajados = 0, cantDiasEfectivosTrabajados_Lunes_a_Sabado = 0; ;
                        if (x.dia1 == 1) { cantDiasEfectivosTrabajados++; cantDiasEfectivosTrabajados_Lunes_a_Sabado++; }
                        if (x.dia2 == 1) { cantDiasEfectivosTrabajados++; cantDiasEfectivosTrabajados_Lunes_a_Sabado++; }
                        if (x.dia3 == 1) { cantDiasEfectivosTrabajados++; cantDiasEfectivosTrabajados_Lunes_a_Sabado++; }
                        if (x.dia4 == 1) { cantDiasEfectivosTrabajados++; cantDiasEfectivosTrabajados_Lunes_a_Sabado++; }
                        if (x.dia5 == 1) { cantDiasEfectivosTrabajados++; cantDiasEfectivosTrabajados_Lunes_a_Sabado++; }
                        if (x.dia6 == 1) { cantDiasEfectivosTrabajados++; cantDiasEfectivosTrabajados_Lunes_a_Sabado++; }
                        if (x.dia7 == 1) { cantDiasEfectivosTrabajados++; }

                        int cantHrsEfectivasTrabajadas = cantDiasEfectivosTrabajados * 8;

                        #endregion

                        #region CANTIDAD DE HORAS POR DESCANSO MEDICO
                        int cantHrsDescansoMedico = 0;
                        if (x.dia1 == 19) { cantHrsDescansoMedico = 8; }
                        if (x.dia2 == 19) { cantHrsDescansoMedico += 8; }
                        if (x.dia3 == 19) { cantHrsDescansoMedico += 8; }
                        if (x.dia4 == 19) { cantHrsDescansoMedico += 8; }
                        if (x.dia5 == 19) { cantHrsDescansoMedico += 8; }
                        if (x.dia6 == 19) { cantHrsDescansoMedico += 8; }
                        #endregion

                        #region CANTIDAD DE HORAS TRABAJADAS, MIENTRAS NO SEA FALTA
                        int cantHorasTrabajadas = 0;
                        if (x.dia1 != 2 && x.dia1 != 0 && x.dia1 != 13)
                            cantHorasTrabajadas += 8;
                        if (x.dia2 != 2 && x.dia2 != 0 && x.dia2 != 13)
                            cantHorasTrabajadas += 8;
                        if (x.dia3 != 2 && x.dia3 != 0 && x.dia3 != 13)
                            cantHorasTrabajadas += 8;
                        if (x.dia4 != 2 && x.dia4 != 0 && x.dia4 != 13)
                            cantHorasTrabajadas += 8;
                        if (x.dia5 != 2 && x.dia5 != 0 && x.dia5 != 13)
                            cantHorasTrabajadas += 8;
                        if (x.dia6 != 2 && x.dia6 != 0 && x.dia6 != 13)
                            cantHorasTrabajadas += 8;
                        #endregion

                        #region Semanal
                        string nombre_empleado = string.Format("{0} {1} {2}", x.ape_paterno, x.ape_materno, x.nombre);
                        string puesto = x.puestoDesc;
                        decimal basico = importes.base_Emp / 7;
                        decimal salarioBase = importes.base_Emp;

                        // --> Remuneraciones
                        decimal jornada_semanal = ((salarioBase / 8) / 7) * (cantHorasTrabajadas);
                        if (detallesCambioEmpleado != null)
                            jornada_semanal = detallesCambioEmpleado.jornada_semanal;

                        decimal horas_extra_60 = (salarioBase / 7) * x.horas_extra_60 * 1.6M / 8;
                        if (detallesCambioEmpleado != null)
                            horas_extra_60 = detallesCambioEmpleado.horas_extra_60;

                        decimal horas_extra_100 = (salarioBase / 7) * x.horas_extra_100 * 2 / 8;
                        if (detallesCambioEmpleado != null)
                            horas_extra_100 = detallesCambioEmpleado.horas_extra_100;

                        decimal horas_nocturnas = ((salarioBase / 7) * x.horas_nocturnas) * 1.25M;
                        if (detallesCambioEmpleado != null)
                            horas_nocturnas = detallesCambioEmpleado.horas_nocturnas;

                        decimal descanso_medico = ((x.dia1 == 19 ? 8 : 0) + (x.dia2 == 19 ? 8 : 0) + (x.dia3 == 19 ? 8 : 0) + (x.dia4 == 19 ? 8 : 0) + (x.dia5 == 19 ? 8 : 0) + (x.dia6 == 19 ? 8 : 0) + (x.dia7 == 19 ? 8 : 0)) * (basico / 8M);
                        if (detallesCambioEmpleado != null)
                            descanso_medico = detallesCambioEmpleado.descuento_medico;

                        decimal feriados = ((salarioBase / 8M) * cantDiasFeriadosTrabajados) * 2;
                        if (detallesCambioEmpleado != null)
                            feriados = detallesCambioEmpleado.feriados;

                        decimal subsidios = (x.subsidio * (basico / 8M));
                        if (detallesCambioEmpleado != null)
                            subsidios = detallesCambioEmpleado.subsidios;

                        tblRH_REC_EmplCompania objCompaniaInfoEmpleado = _context.tblRH_REC_EmplCompania.Where(w => w.clave_empleado == clave_empleado && w.esActivo).FirstOrDefault();
                        decimal buc = 0;
                        if (objCompaniaInfoEmpleado != null)
                        {
                            decimal porcBUC = _context.tblRH_EK_CatTipoEmpleados.Where(w => w.id == objCompaniaInfoEmpleado.tipoEmpleado).Select(s => s.porcentaje).FirstOrDefault();
                            buc = (((salarioBase / 7) / 8) * (cantHorasTrabajadas + cantHrsFeriadasTrabajadas + cantHrsDescansoMedico)) * (porcBUC / 100);
                            if (detallesCambioEmpleado != null)
                                buc = detallesCambioEmpleado.buc;
                        }

                        decimal bono_altitud = cantDiasEfectivosTrabajados * 2.5M;
                        if (detallesCambioEmpleado != null)
                            bono_altitud = detallesCambioEmpleado.bono_altitud;

                        decimal indemnizacion = (((salarioBase / 7) / 8M) * (cantHrsEfectivasTrabajadas + x.horas_extra_60 + x.horas_extra_100 + cantHrsSubsidio + cantHrsFeriadasTrabajadas + cantHrsDescansoMedico)) * 0.15M;
                        string indemnizacionString = indemnizacion.ToString("#.##");
                        decimal CTS = 0, Utilidades = 0;
                        if (!string.IsNullOrEmpty(indemnizacionString))
                        {
                            indemnizacion = Convert.ToDecimal(indemnizacionString);
                            CTS = Convert.ToDecimal(indemnizacionString) * (12M / 100M);
                            Utilidades = Convert.ToDecimal(indemnizacionString) * (3M / 100M);
                            if (detallesCambioEmpleado != null)
                            {
                                indemnizacion = detallesCambioEmpleado.indemnizacion;
                                CTS = detallesCambioEmpleado.CTS;
                                Utilidades = detallesCambioEmpleado.Utilidades;
                            }
                        }

                        decimal dominical = 0;
                        if (cantDiasEfectivosTrabajados_Lunes_a_Sabado == 6)
                        {
                            dominical = (salarioBase / 7) * ((cantDiasEfectivosTrabajados_Lunes_a_Sabado + cantDiasFeriadosTrabajados + cantHrsDescansoMedico) / 6);
                            if (detallesCambioEmpleado != null)
                                dominical = detallesCambioEmpleado.dominical;

                            decimal gratificacion = 0;
                            int mesActual = DateTime.Now.Month;
                            int mes = mesActual >= 7 ? 7 : 5;
                            gratificacion = ((((basico * 40) / mes) / 30) / 8) * ((cantHorasTrabajadas + feriados + descanso_medico + subsidios) +
                                            ((cantHorasTrabajadas + descanso_medico + subsidios + feriados) / 6));
                        }

                        decimal bonificacion_extraordinaria = 0;
                        bonificacion_extraordinaria = (((((salarioBase / 7) * 0.09M * 40M) / 7) / 30 / 8) * ((cantHorasTrabajadas + cantHrsSubsidio + cantHrsFeriadasTrabajadas + cantHrsDescansoMedico) +
                            (cantHorasTrabajadas + cantHrsSubsidio + cantHrsFeriadasTrabajadas + cantHrsDescansoMedico) / 6));
                        if (detallesCambioEmpleado != null)
                            bonificacion_extraordinaria = detallesCambioEmpleado.bonificacion_extraordinaria;

                        decimal bonificacion_alta_especial = ((basico / 8M) * ((dias_trabajados * 8M) + (cantDiasSubsidio * 8M) + (cantDiasFeriadosTrabajados * 8M) + (descanso_medico * 8M))) *
                                                                (infoEmpleadoPeru != null ? infoEmpleadoPeru.tesp : 0);
                        if (detallesCambioEmpleado != null)
                            bonificacion_alta_especial = detallesCambioEmpleado.bonificacion_alta_especial;

                        decimal vacaciones_truncas = (((salarioBase / 7) / 8M) * (cantHorasTrabajadas + cantHrsSubsidio + cantHrsFeriadasTrabajadas + cantHrsDescansoMedico)) * 0.1M;
                        if (detallesCambioEmpleado != null)
                            vacaciones_truncas = detallesCambioEmpleado.vacaciones_truncas;

                        decimal bono_transporte = 0;
                        if (detallesCambioEmpleado != null)
                            bono_transporte = detallesCambioEmpleado.bono_transporte;

                        int cantHijosAsignacionEscolar = _context.tblRH_EK_Empl_Familia.Where(w => w.clave_empleado == clave_empleado && w.esActivo).Count();
                        decimal asignacion_escolar = 0;
                        if (cantHijosAsignacionEscolar > 0)
                        {
                            asignacion_escolar = ((((salarioBase / 7) * 30M) / 360M / 8M) * cantHijosAsignacionEscolar) * ((cantHorasTrabajadas + cantHrsFeriadasTrabajadas + cantHrsDescansoMedico) +
                                                                                                                (cantHorasTrabajadas + cantHrsFeriadasTrabajadas + cantHrsDescansoMedico) / 6);
                            if (asignacion_escolar > 0M)
                            {
                                string[] asignacion_escolarStr = asignacion_escolar.ToString().Split('.');
                                string asignacionEscolarDecimal = asignacion_escolarStr[1].Substring(0, 2);
                                asignacion_escolar = Convert.ToDecimal(string.Format("{0}.{1}", asignacion_escolarStr[0], asignacionEscolarDecimal));
                                if (detallesCambioEmpleado != null)
                                    asignacion_escolar = detallesCambioEmpleado.asignacion_escolar;
                            }
                        }

                        int puestoINT = Convert.ToInt32(x.puesto);
                        decimal porcentajeBAE = _context.tblRH_EK_Puestos.Where(w => w.puesto == puestoINT && w.registroActivo).Select(s => s.BAE).FirstOrDefault();
                        decimal BAE = ((basico / 8) * (cantHorasTrabajadas + feriados + descanso_medico + subsidios)) * (porcentajeBAE / 100M);

                        decimal bono_por_altura = 0;
                        if (detallesCambioEmpleado != null)
                            bono_por_altura = detallesCambioEmpleado.bono_por_altura;

                        decimal devolucion_5ta = 0;
                        if (detallesCambioEmpleado != null)
                            devolucion_5ta = detallesCambioEmpleado.devolucion_5ta;

                        decimal gratificacion_proporcional = (((((salarioBase / 7) * 40) / 7) / 30) / 8) * ((cantHorasTrabajadas + cantHrsSubsidio + cantHrsFeriadasTrabajadas + cantHrsDescansoMedico) +
                                                                ((cantHorasTrabajadas + cantHrsSubsidio + cantHrsFeriadasTrabajadas + cantHrsDescansoMedico) / 6));
                        if (detallesCambioEmpleado != null)
                            gratificacion_proporcional = detallesCambioEmpleado.gratificacion_proporcional;

                        // DEDUCCIONES
                        decimal AFP_obligatoria = (afpEmpleado == null || afpEmpleado.CODAFP == "SR" || afpEmpleado.CODAFP == "ON") ? 0 : (sumaAFP * afpEmpleado.APOROBLI) / 100M;
                        if (detallesCambioEmpleado != null)
                            AFP_obligatoria = detallesCambioEmpleado.AFP_obligatoria;

                        decimal AFP_voluntaria = (afpEmpleado == null || ley27252 == false || afpEmpleado.CODAFP == "ON") ? 0 : (sumaAFP * (infoEmpleadoPeru != null ? infoEmpleadoPeru.aporobli : 0)) / 100M;
                        if (detallesCambioEmpleado != null)
                            AFP_voluntaria = detallesCambioEmpleado.AFP_voluntaria;

                        decimal AFP_comision = (afpEmpleado == null || afpEmpleado.CODAFP == "SR" || afpEmpleado.CODAFP == "ON") ? 0 : (sumaAFP * (infoEmpleadoPeru != null ? infoEmpleadoPeru.comisionra : 0)) / 100M;
                        if (detallesCambioEmpleado != null)
                            AFP_comision = detallesCambioEmpleado.AFP_comision;

                        decimal AFP_prima = (afpEmpleado == null || afpEmpleado.CODAFP == "SR" || afpEmpleado.CODAFP == "ON") ? 0 : ((sumaAFP > afpEmpleado.TOPESEGURO ? afpEmpleado.TOPESEGURO : sumaAFP) * afpEmpleado.SEGURO) / 100M;
                        if (detallesCambioEmpleado != null)
                            AFP_prima = detallesCambioEmpleado.AFP_prima;

                        decimal conafovicer = (jornada_semanal + dominical + feriados + descanso_medico) * 0.02M;
                        if (detallesCambioEmpleado != null)
                            conafovicer = detallesCambioEmpleado.conafovicer;

                        decimal essalud_vida = (incidenciaAnterior == null || (infoEmpleadoPeru != null && infoEmpleadoPeru.essaludvida == 0)) ? 0M : 5M;
                        if (detallesCambioEmpleado != null)
                            essalud_vida = detallesCambioEmpleado.essalud_vida;

                        decimal onp = afpEmpleado != null && afpEmpleado.CODAFP == "ON" ? ((sumaAFP * afpEmpleado.APOROBLI) / 100M) : 0;
                        if (detallesCambioEmpleado != null)
                            onp = detallesCambioEmpleado.onp;

                        decimal renta_5ta = 0;
                        if (detallesCambioEmpleado != null)
                            renta_5ta = detallesCambioEmpleado.renta_5ta;

                        // APORTACIONES
                        decimal essalud_aportes = jornada_semanal == 0 ? 0M : ((infoEmpleadoPeru != null && infoEmpleadoPeru.opciona == "EPS") ? essalud_vida * 0.0675M : essalud_vida * 0.09M);
                        if (detallesCambioEmpleado != null)
                            essalud_aportes = detallesCambioEmpleado.essalud_aportes;

                        decimal AFP_aportes = (afpEmpleado == null || ley27252 == false || afpEmpleado.CODAFP == "ON") ? 0 : (sumaAFP * (infoEmpleadoPeru != null ? infoEmpleadoPeru.aporobli : 0)) / 100M;
                        if (detallesCambioEmpleado != null)
                            AFP_aportes = detallesCambioEmpleado.AFP_aportes;
                        #endregion

                        return new tblC_Nom_PreNominaPeru_Det
                        {
                            prenominaID = incidenciaID,
                            clave_empleado = clave_empleado,
                            nombre_empleado = nombre_empleado,
                            puesto = puesto,
                            basico = basico,
                            jornada_semanal = jornada_semanal,
                            horas_extra_60 = horas_extra_60,
                            horas_extra_100 = horas_extra_100,
                            horas_nocturnas = horas_nocturnas,
                            descuento_medico = descanso_medico,
                            feriados = feriados,
                            subsidios = subsidios,
                            buc = buc,
                            bono_altitud = bono_altitud,
                            indemnizacion = indemnizacion,
                            CTS = CTS,
                            Utilidades = Utilidades,
                            dominical = dominical,
                            bonificacion_extraordinaria = bonificacion_extraordinaria,
                            bonificacion_alta_especial = bonificacion_alta_especial,
                            vacaciones_truncas = vacaciones_truncas,
                            asignacion_escolar = asignacion_escolar,
                            bono_por_altura = bono_por_altura,
                            devolucion_5ta = devolucion_5ta,
                            gratificacion_proporcional = gratificacion_proporcional,
                            total_percepciones = jornada_semanal + horas_extra_60 + horas_extra_100 + horas_nocturnas + descanso_medico + feriados + subsidios + buc + bono_altitud + indemnizacion + dominical
                                + bonificacion_extraordinaria + bonificacion_alta_especial + vacaciones_truncas + asignacion_escolar + bono_por_altura + devolucion_5ta + gratificacion_proporcional,

                            AFP_obligatoria = AFP_obligatoria,
                            AFP_voluntaria = AFP_voluntaria,
                            AFP_comision = AFP_comision,
                            AFP_prima = AFP_prima,
                            conafovicer = conafovicer,
                            essalud_vida = essalud_vida,
                            onp = onp,
                            renta_5ta = renta_5ta,
                            total_deducciones = AFP_obligatoria + AFP_voluntaria + AFP_comision + AFP_prima + conafovicer + essalud_vida + onp + renta_5ta,

                            essalud_aportes = essalud_aportes,
                            AFP_aportes = AFP_aportes,
                            total_aportaciones = essalud_aportes + AFP_aportes,

                            bono_transporte = bono_transporte,
                            BAE = BAE,

                            totalIngresos = (jornada_semanal + horas_extra_60 + horas_extra_100 + horas_nocturnas + descanso_medico + feriados + subsidios + buc + bono_altitud + indemnizacion + dominical +
                                           bonificacion_extraordinaria + bonificacion_alta_especial + vacaciones_truncas + asignacion_escolar + bono_por_altura + gratificacion_proporcional + bono_transporte),

                            totalEgresos = (AFP_obligatoria + AFP_voluntaria + AFP_comision + AFP_prima + conafovicer + essalud_vida + onp + renta_5ta + essalud_aportes + AFP_aportes),

                            total_pagar = (jornada_semanal + horas_extra_60 + horas_extra_100 + horas_nocturnas + descanso_medico + feriados + subsidios + buc + bono_altitud + indemnizacion + dominical +
                                           bonificacion_extraordinaria + bonificacion_alta_especial + vacaciones_truncas + asignacion_escolar + bono_por_altura + gratificacion_proporcional + bono_transporte) -
                                          (AFP_obligatoria + AFP_voluntaria + AFP_comision + AFP_prima + conafovicer + essalud_vida + onp + renta_5ta) + (essalud_aportes + AFP_aportes),

                            total_deposito = jornada_semanal + horas_extra_60 + horas_extra_100 + horas_nocturnas + descanso_medico + feriados + subsidios + buc + bono_altitud + indemnizacion + dominical
                                + bonificacion_extraordinaria + bonificacion_alta_especial + vacaciones_truncas + asignacion_escolar + bono_por_altura + devolucion_5ta + gratificacion_proporcional -
                                (AFP_obligatoria + AFP_voluntaria + AFP_comision + AFP_prima + conafovicer + essalud_vida + onp + renta_5ta)
                        };
                    }).OrderBy(x => x.nombre_empleado).ToList();
                }

                return detalles;
            }
            catch (Exception e)
            {
                return new List<tblC_Nom_PreNominaPeru_Det>();
            }
            #endregion
        }


        private List<tblC_Nom_PreNomina_Det> CalcularPrenominaBaseColombia(string CC, int periodo, tipoNominaPropuestaEnum tipoNomina, int anio, List<tblC_Nom_PreNomina_Det> detallesCambio)
        {
            if (CC == "--Seleccione--") CC = "";
            try
            {
                #region CALCULOS PRENOMINA BASE COLOMBIA
                List<tblC_Nom_PreNomina_Det> detalles = new List<tblC_Nom_PreNomina_Det>();
                tblRH_BN_Incidencia incidenciaPpal = new tblRH_BN_Incidencia();
                if (CC == "180-A") incidenciaPpal = _context.tblRH_BN_Incidencia.Where(x => x.cc == "180" && x.anio == anio && x.tipo_nomina == (int)tipoNomina && x.periodo == periodo && x.estatus == "A").OrderByDescending(x => x.fecha_auto).FirstOrDefault();
                else if (CC == "187-A") incidenciaPpal = _context.tblRH_BN_Incidencia.Where(x => x.cc == "187" && x.anio == anio && x.tipo_nomina == (int)tipoNomina && x.periodo == periodo && x.estatus == "A").OrderByDescending(x => x.fecha_auto).FirstOrDefault();
                else incidenciaPpal = _context.tblRH_BN_Incidencia.Where(x => x.cc == CC && x.anio == anio && x.tipo_nomina == (int)tipoNomina && x.periodo == periodo && x.estatus == "A").OrderByDescending(x => x.fecha_auto).FirstOrDefault();
                if (incidenciaPpal != null)
                {
                    int incidenciaID = incidenciaPpal.id;
                    var incidenciaDet = _context.tblRH_BN_Incidencia_det.Where(x => x.incidenciaID == incidenciaID).ToList();

                    List<int> empleados = incidenciaDet.Select(x => x.clave_empleado).ToList();

                    var listaDescuentosProgramados = _context.tblC_Nom_PreNomina_Descuento.Where(x => x.anio == anio && (int)tipoNomina == x.tipoNomina && x.periodoInicial <= periodo && x.periodoFinal >= periodo && empleados.Contains(x.empleadoCve) && x.estatus).ToList();

                    var fechasPeriodo = _context.tblRH_BN_EstatusPeriodos.FirstOrDefault(x => x.anio == anio && x.tipo_nomina == (int)tipoNomina && x.periodo == periodo);
                    DateTime fechaCorte = new DateTime();
                    if (fechasPeriodo == null) fechaCorte = DateTime.Today;
                    else fechaCorte = fechasPeriodo.fecha_limite;

                    var stringEmpleados = "(";
                    for (int i = 0; i < empleados.Count(); i++)
                    {
                        if (i == empleados.Count() - 1) stringEmpleados += empleados[i].ToString() + ")";
                        else stringEmpleados += empleados[i].ToString() + ",";
                    }
                    var result = _context.Select<tblRH_BN_Evaluacion_Det>(new DapperDTO
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = string.Format(@"SELECT 
                              e.clave_empleado AS cve_Emp,
                              (SELECT TOP 1 salario_base FROM tblRH_EK_Tabulador_Historial WHERE clave_empleado = e.clave_empleado AND fechaAplicaCambio <= @fecha_cambio ORDER BY fechaAplicaCambio DESC, id DESC) AS base_Emp,
                              (SELECT TOP 1 complemento FROM tblRH_EK_Tabulador_Historial WHERE clave_empleado = e.clave_empleado AND fechaAplicaCambio <= @fecha_cambio ORDER BY fechaAplicaCambio DESC, id DESC) AS complemento_Emp,
                              (SELECT TOP 1 bono_zona FROM tblRH_EK_Tabulador_Historial WHERE clave_empleado = e.clave_empleado AND fechaAplicaCambio <= @fecha_cambio ORDER BY fechaAplicaCambio DESC, id DESC) AS bono_FC,
                              e.sindicato AS aplicaSindicato
                              FROM tblRH_EK_Empleados AS e 
                              INNER JOIN tblRH_EK_Tipos_Nomina AS tn ON e.tipo_nomina = tn.tipo_nomina
                              WHERE tn.tipo_nomina = {0} AND e.clave_empleado IN {1}", (int)tipoNomina, stringEmpleados),
                        parametros = new { fecha_cambio = fechaCorte }
                    }).ToList();

                    var tipoNominaDias = 0;
                    switch (tipoNomina)
                    {
                        case tipoNominaPropuestaEnum.Semanal: tipoNominaDias = 7; break;
                        case tipoNominaPropuestaEnum.Quincenal: tipoNominaDias = 15; break;
                        default: tipoNominaDias = 1; break;
                    }
                    bool aplicaSindicatoCC = _context.tblRH_BN_REGLA_CC.Any(x => x.cc == CC && x.tipo == 1);
                    bool aplicaPrimaDominicalCC = _context.tblRH_BN_REGLA_CC.Any(x => x.cc == CC && x.tipo == 2);
                    tblRH_BN_REGLA_CC reglaSIndicato = _context.tblRH_BN_REGLA_CC.FirstOrDefault(x => x.cc == CC && x.tipo == 1);
                    decimal porcentajeSindicato = reglaSIndicato == null ? 0 : reglaSIndicato.cuota;
                    List<int> domingos = new List<int>();

                    if (aplicaPrimaDominicalCC)
                    {
                        if (tipoNomina == tipoNominaPropuestaEnum.Semanal)
                            domingos.Add(5);
                        else if (tipoNomina == tipoNominaPropuestaEnum.Quincenal)
                        {
                            var diaInicial = _context.tblC_Nom_CatPeriodo.FirstOrDefault(x => x.anio == anio && x.periodo == periodo && x.tipoNomina == (int)tipoNomina).fechaInicio;
                            var diaSemana = (int)diaInicial.DayOfWeek;
                            switch (diaSemana)
                            {
                                case 1: domingos.Add(7); domingos.Add(14); break;
                                case 2: domingos.Add(6); domingos.Add(13); break;
                                case 3: domingos.Add(5); domingos.Add(12); break;
                                case 4: domingos.Add(4); domingos.Add(11); break;
                                case 5: domingos.Add(3); domingos.Add(10); break;
                                case 6: domingos.Add(2); domingos.Add(9); break;
                                case 7: domingos.Add(1); domingos.Add(8); domingos.Add(15); break;
                            }
                        }
                    }

                    detalles = incidenciaDet.Select(x =>
                    {
                        int claveEmpleado = x.clave_empleado;
                        var auxDetallesCambio = detallesCambio.FirstOrDefault(y => y.empleadoCve == x.clave_empleado);
                        var listaDescuentosProgramadosEmpleado = listaDescuentosProgramados.Where(y => y.empleadoCve == x.clave_empleado).ToList();

                        decimal totalDiasFinal = 0;
                        int totalDiasExtraFinal = 0;
                        decimal hrExtraFinal = 0;

                        decimal descuentosFinal = 0;
                        decimal apoyoColectiuvoFinal = 0;
                        var listaDescuentosPrestamo = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.Prestamo).ToList();
                        decimal prestamoFinal = listaDescuentosPrestamo == null ? 0 : listaDescuentosPrestamo.Sum(y => y.monto);
                        var listaDescuentosAxa = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.Axa).ToList();
                        decimal axaFinal = listaDescuentosAxa == null ? 0 : listaDescuentosAxa.Sum(y => y.monto);
                        var listaDescuentosFamsa = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.Famsa).ToList();
                        decimal famsaFinal = listaDescuentosFamsa == null ? 0 : listaDescuentosFamsa.Sum(y => y.monto);
                        var listaDescuentosPension = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.PensionAlimenticia).ToList();
                        decimal pensionFinal = listaDescuentosPension == null ? 0 : listaDescuentosPension.Sum(y => y.monto);
                        var listaDescuentosFonacot = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.Fonacot).ToList();
                        decimal fonacotFinal = listaDescuentosFonacot == null ? 0 : listaDescuentosFonacot.Sum(y => y.monto);
                        var listaDescuentosInfonavit = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.Infonavit).ToList();
                        decimal infonavitFinal = listaDescuentosInfonavit == null ? 0 : listaDescuentosInfonavit.Sum(y => y.monto);
                        decimal otrosFinal = 0;
                        decimal primaVacacionalFinal = 0;
                        decimal transporteFinal = 0;
                        decimal comisionesFinal = 0;
                        decimal retencionFinal = 0;
                        decimal fspFinal = 0;
                        decimal afpFinal = 0;
                        decimal esSaludFinal = 0;
                        decimal cesantia = 0;
                        decimal interesCesantia = 0;
                        decimal retroactivo = 0;
                        decimal prima = 0;
                        decimal hrExtraDiurnasDominicales = 0;
                        decimal hrNocturnas = 0;
                        int diasVacaciones = 0;
                        decimal importeDiasVacaciones = 0; 
                        decimal licenciaLuto = 0;
                        int diasIncapacidad = 0;
                        decimal importeIncapacidad = 0;
                        decimal onp = 0;
                        decimal bonoRecreacion = 0;

                        List<int> diasDoblePaga = new List<int>();
                        var empresa = vSesiones.sesionEmpresaActual;
                        totalDiasFinal = x.total_Dias - x.dias_extras - x.dias_extra_concepto;

                        // SE OBTIENE CANTIDAD DE VACACIONES DEL COLABORADOR
                        diasVacaciones = 0;
                        if (x.dia1 == 5) diasVacaciones++;
                        if (x.dia2 == 5) diasVacaciones++;
                        if (x.dia3 == 5) diasVacaciones++;
                        if (x.dia4 == 5) diasVacaciones++;
                        if (x.dia5 == 5) diasVacaciones++;
                        if (x.dia6 == 5) diasVacaciones++;
                        if (x.dia7 == 5) diasVacaciones++;
                        if (x.dia8 == 5) diasVacaciones++;
                        if (x.dia9 == 5) diasVacaciones++;
                        if (x.dia10 == 5) diasVacaciones++;
                        if (x.dia11 == 5) diasVacaciones++;
                        if (x.dia12 == 5) diasVacaciones++;
                        if (x.dia13 == 5) diasVacaciones++;
                        if (x.dia14 == 5) diasVacaciones++;
                        if (x.dia15 == 5) diasVacaciones++;
                        if (x.dia16 == 5) diasVacaciones++;

                        // SE OBTIENE CANTIDAD DE DÍAS DE INCAPACIDAD
                        diasIncapacidad = 0;
                        if (x.dia1 == 10) diasIncapacidad++;
                        if (x.dia2 == 10) diasIncapacidad++;
                        if (x.dia3 == 10) diasIncapacidad++;
                        if (x.dia4 == 10) diasIncapacidad++;
                        if (x.dia5 == 10) diasIncapacidad++;
                        if (x.dia6 == 10) diasIncapacidad++;
                        if (x.dia7 == 10) diasIncapacidad++;
                        if (x.dia8 == 10) diasIncapacidad++;
                        if (x.dia9 == 10) diasIncapacidad++;
                        if (x.dia10 == 10) diasIncapacidad++;
                        if (x.dia11 == 10) diasIncapacidad++;
                        if (x.dia12 == 10) diasIncapacidad++;
                        if (x.dia13 == 10) diasIncapacidad++;
                        if (x.dia14 == 10) diasIncapacidad++;
                        if (x.dia15 == 10) diasIncapacidad++;
                        if (x.dia16 == 10) diasIncapacidad++;

                        totalDiasExtraFinal = x.dias_extras + x.dias_extra_concepto;
                        totalDiasFinal -= (diasVacaciones + diasIncapacidad);

                        if (auxDetallesCambio != null)
                        {
                            totalDiasFinal = auxDetallesCambio.dias;
                            totalDiasExtraFinal = auxDetallesCambio.diaHrExtra;
                            hrExtraFinal = auxDetallesCambio.hrExtra;

                            descuentosFinal = auxDetallesCambio.descuento;
                            apoyoColectiuvoFinal = auxDetallesCambio.apoyoColectivo;
                            prestamoFinal = auxDetallesCambio.prestamo;
                            axaFinal = auxDetallesCambio.axa;
                            famsaFinal = auxDetallesCambio.descuentoFamsa;
                            pensionFinal = auxDetallesCambio.pensionAlimenticia;
                            fonacotFinal = auxDetallesCambio.fonacot;
                            infonavitFinal = auxDetallesCambio.infonavit;
                            otrosFinal = auxDetallesCambio.otros;
                            primaVacacionalFinal = auxDetallesCambio.primaVacacional;

                            transporteFinal = auxDetallesCambio.transporte;
                            comisionesFinal = auxDetallesCambio.comisiones;
                            retencionFinal = auxDetallesCambio.retencion;
                            fspFinal = auxDetallesCambio.fsp;
                            afpFinal = auxDetallesCambio.afp;
                            esSaludFinal = auxDetallesCambio.esSalud;

                            cesantia = auxDetallesCambio.cesantia;
                            interesCesantia = auxDetallesCambio.interesCesantia;
                            retroactivo = auxDetallesCambio.retroactivo;
                            prima = auxDetallesCambio.prima;
                            hrExtraDiurnasDominicales = auxDetallesCambio.hrExtraDiurnasDominicales;
                            hrNocturnas = auxDetallesCambio.hrNocturnas;
                            licenciaLuto = auxDetallesCambio.licenciaLuto;
                            onp = auxDetallesCambio.onp;
                            bonoRecreacion = auxDetallesCambio.bonoRecreacion;
                            diasIncapacidad = auxDetallesCambio.diasIncapacidad;
                        } 

                        var importes = result.FirstOrDefault(y => y.cve_Emp == x.clave_empleado);

                        decimal baseNomina = importes == null ? 0 : importes.base_Emp * ((decimal)totalDiasFinal / (decimal)tipoNominaDias);

                        decimal fondoAhorroNomina = 0; // importes == null ? 0 : (baseNomina) * (decimal)0.025;
                        decimal complementoFinal = 0; // importes == null ? 0 : importes.complemento_Emp * ((decimal)totalDiasFinal / (decimal)tipoNominaDias);
                        decimal fondoAhorroComplemento = 0; // importes == null ? 0 : complementoFinal * (decimal)0.025;

                        bool aplicaPrimaDominical = aplicaPrimaDominicalCC;
                        if (CC == "007" && x.puesto != 93) aplicaPrimaDominical = false;
                        decimal primaDominical = 0;

                        decimal bonoZona = importes == null ? 0 : importes.bono_FC;

                        //decimal sueldoSemanal = importes == null ? 0 : importes.base_Emp + importes.complemento_Emp + bonoZona + transporteFinal;
                        decimal sueldoSemanal = importes == null ? 0 : importes.base_Emp + importes.complemento_Emp + bonoZona;
                        decimal sueldoDia = importes == null ? 0 : (importes.base_Emp + importes.complemento_Emp + bonoZona) / tipoNominaDias;
                        decimal sueldoHora = importes == null ? 0 : ((importes.base_Emp + importes.complemento_Emp + bonoZona) / 55) * 2;

                        importeDiasVacaciones = diasVacaciones * sueldoDia;
                        importeIncapacidad = diasIncapacidad * sueldoDia;

                        #region SE OBTIENE VALOR DE HORA EXTRA DIURNA Y HORA EXTRA DIURNA DOMINICAL
                        decimal valorHoraEmpleado = (sueldoSemanal) * 2 / 235;

                        decimal valorHoraExtraDiurna = (valorHoraEmpleado + (valorHoraEmpleado * (decimal)0.25));
                        decimal importeHoraExtraDiurna = valorHoraExtraDiurna * hrExtraFinal;

                        decimal valorHoraExtraDiurnaDominical = valorHoraEmpleado * 2;
                        decimal importeHoraExtraDiurnaDominical = valorHoraExtraDiurnaDominical * hrExtraDiurnasDominicales;

                        decimal hrNocturnasValor = hrNocturnas > 0 ? (valorHoraEmpleado + (valorHoraEmpleado * (decimal)0.75)) : 0;
                        decimal importeNocturnasExtra = hrNocturnasValor * hrNocturnas;
                        #endregion

                        bonoZona = bonoZona * ((decimal)totalDiasFinal / (decimal)tipoNominaDias);

                        if (aplicaPrimaDominical && x.primaDominical)
                        {
                            decimal auxPrimaDominical = (sueldoSemanal / (tipoNomina == tipoNominaPropuestaEnum.Semanal ? 7 : 15)) * (decimal)0.25;

                            if (domingos.Contains(1) && x.dia1 == 1) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(2) && x.dia2 == 1) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(3) && x.dia3 == 1) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(4) && x.dia4 == 1) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(5) && x.dia5 == 1) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(6) && x.dia6 == 1) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(7) && x.dia7 == 1) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(8) && x.dia8 == 1) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(9) && x.dia9 == 1) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(10) && x.dia10 == 1) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(11) && x.dia11 == 1) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(12) && x.dia12 == 1) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(13) && x.dia13 == 1) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(14) && x.dia14 == 1) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(15) && x.dia15 == 1) { primaDominical += auxPrimaDominical; }
                            if (domingos.Contains(16) && x.dia16 == 1) { primaDominical += auxPrimaDominical; }
                        }
                        decimal bonoProduccion = auxDetallesCambio == null ? x.bono + x.bonoU + x.bonoDM : auxDetallesCambio.bonoProduccion;

                        decimal totalNominaFinal = (baseNomina - fondoAhorroNomina - descuentosFinal - apoyoColectiuvoFinal - prestamoFinal - axaFinal - famsaFinal - fonacotFinal - infonavitFinal - 
                                                    retencionFinal - fspFinal - afpFinal - esSaludFinal) + (cesantia + interesCesantia + retroactivo + prima + onp + bonoRecreacion);

                        decimal totalComplementoFinal = complementoFinal - fondoAhorroComplemento + bonoProduccion + bonoZona + otrosFinal + primaVacacionalFinal + primaDominical + (hrExtraFinal * sueldoHora) + 
                                                        ((decimal)totalDiasExtraFinal * sueldoDia) + transporteFinal + comisionesFinal + pensionFinal;

                        decimal totalDeducciones = esSaludFinal + afpFinal + fspFinal + retencionFinal + descuentosFinal + prestamoFinal;

                        decimal totalDevengado = baseNomina + primaVacacionalFinal + ((decimal)totalDiasExtraFinal * sueldoDia) + importeHoraExtraDiurna + otrosFinal + pensionFinal + cesantia +
                                                    interesCesantia + retroactivo + prima + transporteFinal + importeHoraExtraDiurnaDominical + importeNocturnasExtra + licenciaLuto + onp + bonoRecreacion;

                        decimal totalPagar = totalDevengado - totalDeducciones;

                        return new tblC_Nom_PreNomina_Det
                        {
                            empleadoCve = x.clave_empleado,
                            empleadoNombre = string.Format("{0} {1} {2}", x.ape_paterno, x.ape_materno, x.nombre),
                            puesto = x.puestoDesc,
                            sueldoSemanal = sueldoSemanal,
                            dias = totalDiasFinal,
                            nominaBase = baseNomina,
                            sindicato = 0,
                            fondoAhorroNomina = fondoAhorroNomina,
                            descuento = descuentosFinal,
                            prestamo = prestamoFinal,
                            axa = axaFinal,
                            descuentoFamsa = famsaFinal,
                            pensionAlimenticia = pensionFinal,
                            fonacot = fonacotFinal,
                            infonavit = infonavitFinal,
                            totalNomina = totalNominaFinal,
                            complementoNomina = complementoFinal,
                            fondoAhorroComplemento = fondoAhorroComplemento,
                            bonoProduccion = bonoProduccion,
                            bonoZona = bonoZona,
                            otros = otrosFinal,
                            primaVacacional = primaVacacionalFinal,
                            primaDominical = primaDominical,

                            hrExtra = hrExtraFinal,
                            hrExtraValor = valorHoraExtraDiurna,
                            importeExtra = hrExtraFinal * valorHoraExtraDiurna,

                            diaHrExtra = totalDiasExtraFinal,
                            diaExtraValor = sueldoDia,
                            importeDiaExtra = (decimal)totalDiasExtraFinal * sueldoDia,
                            totalComplemento = totalComplementoFinal,
                            totalPagar = totalPagar,
                            porcentajeTotalPagar = 1,
                            totalRealPagar = totalPagar,
                            valesDespensa = 0, //Math.Round(((decimal)96.22 * (decimal)0.4 * (decimal)totalDiasFinal), 2),
                            totalDeposito = totalPagar, //- Math.Round(((decimal)96.22 * (decimal)0.4 * (decimal)totalDiasFinal), 2),
                            observaciones = x.observaciones + (x.observaciones == "" ? "" : Environment.NewLine) + x.bono_Obs,
                            estatus = true,
                            apoyoColectivo = apoyoColectiuvoFinal,

                            transporte = transporteFinal,
                            comisiones = comisionesFinal,
                            retencion = retencionFinal,
                            fsp = fspFinal,
                            afp = afpFinal,
                            esSalud = esSaludFinal,

                            cesantia = cesantia,
                            interesCesantia = interesCesantia,
                            retroactivo = retroactivo,
                            prima = prima,

                            hrExtraDiurnasDominicales = hrExtraDiurnasDominicales,
                            hrExtraDiurnasDominicalesValor = valorHoraExtraDiurnaDominical,
                            importeExtraDiurnasDominicales = importeHoraExtraDiurnaDominical,

                            hrNocturnas = hrNocturnas,
                            hrNocturnasValor = hrNocturnasValor,
                            importeNocturnasExtra = importeNocturnasExtra,
                            diasVacaciones = diasVacaciones,
                            importeDiasVacaciones = importeDiasVacaciones,
                            vacaciones = importeDiasVacaciones,
                            licenciaLuto = licenciaLuto,
                            diasIncapacidad = diasIncapacidad,
                            importeIncapacidad = importeIncapacidad,
                            onp = onp,
                            bonoRecreacion = bonoRecreacion
                        };
                    }).OrderBy(x => x.empleadoNombre).ToList();
                }

                return detalles;
                #endregion
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                return new List<tblC_Nom_PreNomina_Det>();
            }
        }

        private List<tblC_Nom_PreNomina_Det> CalcularLiquidacionColombia(string CC, int periodo, tipoNominaPropuestaEnum tipoNomina, int anio, List<tblC_Nom_PreNomina_Det> detallesCambio)
        {
            if (CC == "--Seleccione--") CC = "";
            try
            {
                #region CALCULOS PRENOMINA BASE COLOMBIA
                tipoNominaPropuestaEnum _auxTipoNomina = new tipoNominaPropuestaEnum();
                if (tipoNomina == tipoNominaPropuestaEnum.LIQUIDACION_QUINCENAL) _auxTipoNomina = tipoNominaPropuestaEnum.Quincenal;
                else if (tipoNomina == tipoNominaPropuestaEnum.LIQUIDACION_SEMANAL) _auxTipoNomina = tipoNominaPropuestaEnum.Semanal;

                var fechasPeriodo = _context.tblRH_BN_EstatusPeriodos.FirstOrDefault(x => x.anio == anio && x.tipo_nomina == (int)_auxTipoNomina && x.periodo == periodo);
                var bajasRegistradas = _context.tblRH_Baja_Registro.Where(x => x.cc == CC && x.fechaBaja >= fechasPeriodo.fecha_inicial && x.fechaBaja <= fechasPeriodo.fecha_final).ToList();

                List<tblC_Nom_PreNomina_Det> detalles = new List<tblC_Nom_PreNomina_Det>();
                //tblRH_BN_Incidencia incidenciaPpal = new tblRH_BN_Incidencia();
                //incidenciaPpal = _context.tblRH_BN_Incidencia.Where(x => x.cc == CC && x.anio == anio && x.tipo_nomina == (int)tipoNomina && x.periodo == periodo && x.estatus == "A").OrderByDescending(x => x.fecha_auto).FirstOrDefault();
                if (bajasRegistradas != null)
                {
                    //int incidenciaID = incidenciaPpal.id;
                    //var incidenciaDet = _context.tblRH_BN_Incidencia_det.Where(x => x.incidenciaID == incidenciaID).ToList();

                    List<int> empleados = bajasRegistradas.Select(x => x.numeroEmpleado).ToList();

                    var listaDescuentosProgramados = _context.tblC_Nom_PreNomina_Descuento.Where(x => x.anio == anio && (int)tipoNomina == x.tipoNomina && x.periodoInicial <= periodo && x.periodoFinal >= periodo && empleados.Contains(x.empleadoCve) && x.estatus).ToList();
                                        
                    DateTime fechaCorte = new DateTime();
                    if (fechasPeriodo == null) fechaCorte = DateTime.Today;
                    else fechaCorte = fechasPeriodo.fecha_limite;

                    var stringEmpleados = "(";
                    for (int i = 0; i < empleados.Count(); i++)
                    {
                        if (i == empleados.Count() - 1) stringEmpleados += empleados[i].ToString() + ")";
                        else stringEmpleados += empleados[i].ToString() + ",";
                    }
                    var result = _context.Select<tblRH_BN_Evaluacion_Det>(new DapperDTO
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = string.Format(@"SELECT 
                              e.clave_empleado AS cve_Emp,
                              (SELECT TOP 1 salario_base FROM tblRH_EK_Tabulador_Historial WHERE clave_empleado = e.clave_empleado AND fechaAplicaCambio <= @fecha_cambio ORDER BY fechaAplicaCambio DESC, id DESC) AS base_Emp,
                              (SELECT TOP 1 complemento FROM tblRH_EK_Tabulador_Historial WHERE clave_empleado = e.clave_empleado AND fechaAplicaCambio <= @fecha_cambio ORDER BY fechaAplicaCambio DESC, id DESC) AS complemento_Emp,
                              (SELECT TOP 1 bono_zona FROM tblRH_EK_Tabulador_Historial WHERE clave_empleado = e.clave_empleado AND fechaAplicaCambio <= @fecha_cambio ORDER BY fechaAplicaCambio DESC, id DESC) AS bono_FC,
                              e.sindicato AS aplicaSindicato
                              FROM tblRH_EK_Empleados AS e 
                              INNER JOIN tblRH_EK_Tipos_Nomina AS tn ON e.tipo_nomina = tn.tipo_nomina
                              WHERE tn.tipo_nomina = {0} AND e.clave_empleado IN {1}", (int)_auxTipoNomina, stringEmpleados),
                        parametros = new { fecha_cambio = fechaCorte }
                    }).ToList();

                    var tipoNominaDias = 0;
                    switch (tipoNomina)
                    {
                        case tipoNominaPropuestaEnum.Semanal: tipoNominaDias = 7; break;
                        case tipoNominaPropuestaEnum.Quincenal: tipoNominaDias = 15; break;
                        case tipoNominaPropuestaEnum.LIQUIDACION_SEMANAL: tipoNominaDias = 7; break;
                        case tipoNominaPropuestaEnum.LIQUIDACION_QUINCENAL: tipoNominaDias = 15; break;
                        default: tipoNominaDias = 1; break;
                    }
                    bool aplicaSindicatoCC = false;
                    bool aplicaPrimaDominicalCC = false;
                    tblRH_BN_REGLA_CC reglaSIndicato = _context.tblRH_BN_REGLA_CC.FirstOrDefault(x => x.cc == CC && x.tipo == 1);
                    decimal porcentajeSindicato = 0;
                    List<int> domingos = new List<int>();

                    if (aplicaPrimaDominicalCC)
                    {
                        if (tipoNomina == tipoNominaPropuestaEnum.Semanal)
                        {
                            domingos.Add(5);
                        }
                        else if (tipoNomina == tipoNominaPropuestaEnum.Quincenal)
                        {
                            var diaInicial = _context.tblC_Nom_CatPeriodo.FirstOrDefault(x => x.anio == anio && x.periodo == periodo && x.tipoNomina == (int)tipoNomina).fechaInicio;
                            var diaSemana = (int)diaInicial.DayOfWeek;
                            switch (diaSemana)
                            {
                                case 1: domingos.Add(7); domingos.Add(14); break;
                                case 2: domingos.Add(6); domingos.Add(13); break;
                                case 3: domingos.Add(5); domingos.Add(12); break;
                                case 4: domingos.Add(4); domingos.Add(11); break;
                                case 5: domingos.Add(3); domingos.Add(10); break;
                                case 6: domingos.Add(2); domingos.Add(9); break;
                                case 7: domingos.Add(1); domingos.Add(8); domingos.Add(15); break;
                            }
                        }

                    }

                    detalles = bajasRegistradas.Select(x =>
                    {
                        int claveEmpleado = x.numeroEmpleado;
                        var auxDetallesCambio = detallesCambio.FirstOrDefault(y => y.empleadoCve == x.numeroEmpleado);
                        var listaDescuentosProgramadosEmpleado = listaDescuentosProgramados.Where(y => y.empleadoCve == x.numeroEmpleado).ToList();

                        decimal totalDiasFinal = 0;
                        int totalDiasExtraFinal = 0;
                        decimal hrExtraFinal = 0;

                        decimal descuentosFinal = 0;
                        decimal apoyoColectiuvoFinal = 0;
                        var listaDescuentosPrestamo = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.Prestamo).ToList();
                        decimal prestamoFinal = listaDescuentosPrestamo == null ? 0 : listaDescuentosPrestamo.Sum(y => y.monto);
                        var listaDescuentosAxa = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.Axa).ToList();
                        decimal axaFinal = listaDescuentosAxa == null ? 0 : listaDescuentosAxa.Sum(y => y.monto);
                        var listaDescuentosFamsa = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.Famsa).ToList();
                        decimal famsaFinal = listaDescuentosFamsa == null ? 0 : listaDescuentosFamsa.Sum(y => y.monto);
                        var listaDescuentosPension = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.PensionAlimenticia).ToList();
                        decimal pensionFinal = listaDescuentosPension == null ? 0 : listaDescuentosPension.Sum(y => y.monto);
                        var listaDescuentosFonacot = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.Fonacot).ToList();
                        decimal fonacotFinal = listaDescuentosFonacot == null ? 0 : listaDescuentosFonacot.Sum(y => y.monto);
                        var listaDescuentosInfonavit = listaDescuentosProgramadosEmpleado.Where(y => y.tipoDescuento == (int)TipoDescuentoPrenominaEnum.Infonavit).ToList();
                        decimal infonavitFinal = listaDescuentosInfonavit == null ? 0 : listaDescuentosInfonavit.Sum(y => y.monto);
                        decimal otrosFinal = 0;
                        decimal primaVacacionalFinal = 0;
                        decimal transporteFinal = 0;
                        decimal comisionesFinal = 0;
                        decimal retencionFinal = 0;
                        decimal fspFinal = 0;
                        decimal afpFinal = 0;
                        decimal esSaludFinal = 0;
                        decimal cesantia = 0;
                        decimal interesCesantia = 0;
                        decimal retroactivo = 0;
                        decimal prima = 0;
                        decimal hrExtraDiurnasDominicales = 0;
                        decimal hrNocturnas = 0;
                        decimal diasVacaciones = 0;
                        decimal importeDiasVacaciones = 0;
                        decimal licenciaLuto = 0;
                        decimal onp = 0;
                        int diasIncapacidad = 0;
                        decimal importeIncapacidad = 0;

                        List<int> diasDoblePaga = new List<int>();
                        var empresa = vSesiones.sesionEmpresaActual;
                        totalDiasFinal = 0;

                        // SE OBTIENE CANTIDAD DE VACACIONES DEL COLABORADOR
                        diasVacaciones = 0;

                        totalDiasExtraFinal = 0;

                        if (auxDetallesCambio != null)
                        {
                            totalDiasFinal = auxDetallesCambio.dias;
                            totalDiasExtraFinal = auxDetallesCambio.diaHrExtra;
                            hrExtraFinal = auxDetallesCambio.hrExtra;

                            descuentosFinal = auxDetallesCambio.descuento;
                            apoyoColectiuvoFinal = auxDetallesCambio.apoyoColectivo;
                            prestamoFinal = auxDetallesCambio.prestamo;
                            axaFinal = auxDetallesCambio.axa;
                            famsaFinal = auxDetallesCambio.descuentoFamsa;
                            pensionFinal = auxDetallesCambio.pensionAlimenticia;
                            fonacotFinal = auxDetallesCambio.fonacot;
                            infonavitFinal = auxDetallesCambio.infonavit;
                            otrosFinal = auxDetallesCambio.otros;
                            primaVacacionalFinal = auxDetallesCambio.primaVacacional;

                            transporteFinal = auxDetallesCambio.transporte;
                            comisionesFinal = auxDetallesCambio.comisiones;
                            retencionFinal = auxDetallesCambio.retencion;
                            fspFinal = auxDetallesCambio.fsp;
                            afpFinal = auxDetallesCambio.afp;
                            esSaludFinal = auxDetallesCambio.esSalud;

                            cesantia = auxDetallesCambio.cesantia;
                            interesCesantia = auxDetallesCambio.interesCesantia;
                            retroactivo = auxDetallesCambio.retroactivo;
                            prima = auxDetallesCambio.prima;
                            hrExtraDiurnasDominicales = auxDetallesCambio.hrExtraDiurnasDominicales;
                            hrNocturnas = auxDetallesCambio.hrNocturnas;
                            licenciaLuto = auxDetallesCambio.licenciaLuto;
                            onp = auxDetallesCambio.onp;
                            diasVacaciones = auxDetallesCambio.diasVacaciones;
                            diasIncapacidad = auxDetallesCambio.diasIncapacidad;
                        }

                        var importes = result.FirstOrDefault(y => y.cve_Emp == x.numeroEmpleado);

                        decimal baseNomina = importes == null ? 0 : importes.base_Emp * ((decimal)totalDiasFinal / (decimal)tipoNominaDias);

                        decimal fondoAhorroNomina = 0; // importes == null ? 0 : (baseNomina) * (decimal)0.025;
                        decimal complementoFinal = 0; // importes == null ? 0 : importes.complemento_Emp * ((decimal)totalDiasFinal / (decimal)tipoNominaDias);
                        decimal fondoAhorroComplemento = 0; // importes == null ? 0 : complementoFinal * (decimal)0.025;

                        bool aplicaPrimaDominical = aplicaPrimaDominicalCC;
                        if (CC == "007" && x.idPuesto != 93) aplicaPrimaDominical = false;
                        decimal primaDominical = 0;

                        decimal bonoZona = importes == null ? 0 : importes.bono_FC;

                        //decimal sueldoSemanal = importes == null ? 0 : importes.base_Emp + importes.complemento_Emp + bonoZona + transporteFinal;
                        decimal sueldoSemanal = importes == null ? 0 : importes.base_Emp + importes.complemento_Emp + bonoZona;
                        decimal sueldoDia = importes == null ? 0 : (importes.base_Emp + importes.complemento_Emp + bonoZona) / tipoNominaDias;
                        decimal sueldoHora = importes == null ? 0 : ((importes.base_Emp + importes.complemento_Emp + bonoZona) / 55) * 2;

                        importeDiasVacaciones = diasVacaciones * sueldoDia;
                        importeIncapacidad = diasIncapacidad * sueldoDia;

                        #region SE OBTIENE VALOR DE HORA EXTRA DIURNA Y HORA EXTRA DIURNA DOMINICAL
                        decimal valorHoraEmpleado = (sueldoSemanal) * 2 / 235;

                        decimal valorHoraExtraDiurna = (valorHoraEmpleado + (valorHoraEmpleado * (decimal)0.25));
                        decimal importeHoraExtraDiurna = valorHoraExtraDiurna * hrExtraFinal;

                        decimal valorHoraExtraDiurnaDominical = valorHoraEmpleado * 2;
                        decimal importeHoraExtraDiurnaDominical = valorHoraExtraDiurnaDominical * hrExtraDiurnasDominicales;

                        decimal hrNocturnasValor = hrNocturnas > 0 ? (valorHoraEmpleado + (valorHoraEmpleado * (decimal)0.75)) : 0;
                        decimal importeNocturnasExtra = hrNocturnasValor * hrNocturnas;
                        #endregion

                        bonoZona = 0;

                        //if (aplicaPrimaDominical && x.primaDominical)
                        //{
                        //    decimal auxPrimaDominical = (sueldoSemanal / (tipoNomina == tipoNominaPropuestaEnum.Semanal ? 7 : 15)) * (decimal)0.25;

                        //    if (domingos.Contains(1) && x.dia1 == 1) { primaDominical += auxPrimaDominical; }
                        //    if (domingos.Contains(2) && x.dia2 == 1) { primaDominical += auxPrimaDominical; }
                        //    if (domingos.Contains(3) && x.dia3 == 1) { primaDominical += auxPrimaDominical; }
                        //    if (domingos.Contains(4) && x.dia4 == 1) { primaDominical += auxPrimaDominical; }
                        //    if (domingos.Contains(5) && x.dia5 == 1) { primaDominical += auxPrimaDominical; }
                        //    if (domingos.Contains(6) && x.dia6 == 1) { primaDominical += auxPrimaDominical; }
                        //    if (domingos.Contains(7) && x.dia7 == 1) { primaDominical += auxPrimaDominical; }
                        //    if (domingos.Contains(8) && x.dia8 == 1) { primaDominical += auxPrimaDominical; }
                        //    if (domingos.Contains(9) && x.dia9 == 1) { primaDominical += auxPrimaDominical; }
                        //    if (domingos.Contains(10) && x.dia10 == 1) { primaDominical += auxPrimaDominical; }
                        //    if (domingos.Contains(11) && x.dia11 == 1) { primaDominical += auxPrimaDominical; }
                        //    if (domingos.Contains(12) && x.dia12 == 1) { primaDominical += auxPrimaDominical; }
                        //    if (domingos.Contains(13) && x.dia13 == 1) { primaDominical += auxPrimaDominical; }
                        //    if (domingos.Contains(14) && x.dia14 == 1) { primaDominical += auxPrimaDominical; }
                        //    if (domingos.Contains(15) && x.dia15 == 1) { primaDominical += auxPrimaDominical; }
                        //    if (domingos.Contains(16) && x.dia16 == 1) { primaDominical += auxPrimaDominical; }
                        //}
                        decimal bonoProduccion = auxDetallesCambio == null ? 0 : auxDetallesCambio.bonoProduccion;
                        decimal totalNominaFinal = baseNomina - fondoAhorroNomina - descuentosFinal - apoyoColectiuvoFinal - prestamoFinal - axaFinal - famsaFinal - fonacotFinal - infonavitFinal - retencionFinal - fspFinal - afpFinal - esSaludFinal
                                + (cesantia + interesCesantia + retroactivo + prima + onp);
                        decimal totalComplementoFinal = complementoFinal - fondoAhorroComplemento + bonoProduccion + bonoZona + otrosFinal + primaVacacionalFinal + primaDominical + (hrExtraFinal * sueldoHora) + ((decimal)totalDiasExtraFinal * sueldoDia)
                            + transporteFinal + comisionesFinal + pensionFinal;
                        decimal totalDeducciones = esSaludFinal + afpFinal + fspFinal + retencionFinal + descuentosFinal + prestamoFinal;
                        decimal totalDevengado = baseNomina + primaVacacionalFinal + ((decimal)totalDiasExtraFinal * sueldoDia) + importeHoraExtraDiurna + otrosFinal + pensionFinal + cesantia +
                                                    interesCesantia + retroactivo + prima + transporteFinal + importeHoraExtraDiurnaDominical + importeNocturnasExtra + licenciaLuto + onp;
                        decimal totalPagar = totalDevengado - totalDeducciones;

                        return new tblC_Nom_PreNomina_Det
                        {
                            empleadoCve = x.numeroEmpleado,
                            empleadoNombre = x.nombre,
                            puesto = x.nombrePuesto,
                            sueldoSemanal = sueldoSemanal,
                            dias = totalDiasFinal,
                            nominaBase = baseNomina,
                            sindicato = 0,
                            fondoAhorroNomina = fondoAhorroNomina,
                            descuento = descuentosFinal,
                            prestamo = prestamoFinal,
                            axa = axaFinal,
                            descuentoFamsa = famsaFinal,
                            pensionAlimenticia = pensionFinal,
                            fonacot = fonacotFinal,
                            infonavit = infonavitFinal,
                            totalNomina = totalNominaFinal,
                            complementoNomina = complementoFinal,
                            fondoAhorroComplemento = fondoAhorroComplemento,
                            bonoProduccion = bonoProduccion,
                            bonoZona = bonoZona,
                            otros = otrosFinal,
                            primaVacacional = primaVacacionalFinal,
                            primaDominical = primaDominical,

                            hrExtra = hrExtraFinal,
                            hrExtraValor = valorHoraExtraDiurna,
                            importeExtra = hrExtraFinal * valorHoraExtraDiurna,

                            diaHrExtra = totalDiasExtraFinal,
                            diaExtraValor = sueldoDia,
                            importeDiaExtra = (decimal)totalDiasExtraFinal * sueldoDia,
                            totalComplemento = totalComplementoFinal,
                            totalPagar = totalPagar,
                            porcentajeTotalPagar = 1,
                            totalRealPagar = totalPagar,
                            valesDespensa = 0, //Math.Round(((decimal)96.22 * (decimal)0.4 * (decimal)totalDiasFinal), 2),
                            totalDeposito = totalPagar, //- Math.Round(((decimal)96.22 * (decimal)0.4 * (decimal)totalDiasFinal), 2),
                            observaciones = "",
                            estatus = true,
                            apoyoColectivo = apoyoColectiuvoFinal,

                            transporte = transporteFinal,
                            comisiones = comisionesFinal,
                            retencion = retencionFinal,
                            fsp = fspFinal,
                            afp = afpFinal,
                            esSalud = esSaludFinal,

                            cesantia = cesantia,
                            interesCesantia = interesCesantia,
                            retroactivo = retroactivo,
                            prima = prima,

                            hrExtraDiurnasDominicales = hrExtraDiurnasDominicales,
                            hrExtraDiurnasDominicalesValor = valorHoraExtraDiurnaDominical,
                            importeExtraDiurnasDominicales = importeHoraExtraDiurnaDominical,

                            hrNocturnas = hrNocturnas,
                            hrNocturnasValor = hrNocturnasValor,
                            importeNocturnasExtra = importeNocturnasExtra,
                            diasVacaciones = diasVacaciones,
                            importeDiasVacaciones = importeDiasVacaciones,
                            vacaciones = importeDiasVacaciones,
                            licenciaLuto = licenciaLuto,
                            onp = onp,
                            diasIncapacidad = diasIncapacidad,
                            importeIncapacidad = importeIncapacidad
                        };
                    }).OrderBy(x => x.empleadoNombre).ToList();
                }

                return detalles;
                #endregion
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                return new List<tblC_Nom_PreNomina_Det>();
            }
        }


        private List<tblC_Nom_PreNomina_Det> CalcularAguinaldoBase(string CC, int periodo, tipoNominaPropuestaEnum tipoNomina, int anio, List<tblC_Nom_PreNomina_Det> detallesCambio)
        {
            if (CC == "--Seleccione--") CC = "";
            List<tblC_Nom_PreNomina_Det> detalles = new List<tblC_Nom_PreNomina_Det>();
            try
            {
                decimal totalDias = DateTime.IsLeapYear(anio) ? 366 : 365;
                List<tblRH_EK_Empleados> empleadosActivos = new List<tblRH_EK_Empleados>();

                if (CC == "180-A") empleadosActivos = _context.tblRH_EK_Empleados.Where(x => x.estatus_empleado == "A" && x.cc_contable == "180" && (periodo == 1 ? x.tipo_nomina == 1 : x.tipo_nomina == 4)).ToList();
                else empleadosActivos = _context.tblRH_EK_Empleados.Where(x => x.estatus_empleado == "A" && x.cc_contable == CC && (periodo == 1 ? x.tipo_nomina == 1 : x.tipo_nomina == 4)).ToList();

                if (CC == "180") { empleadosActivos = empleadosActivos.Where(x => x.clave_depto != "890").ToList(); }
                else if (CC == "180-A") { empleadosActivos = empleadosActivos.Where(x => x.clave_depto == "890").ToList(); }

                if (CC == "187-A") empleadosActivos = _context.tblRH_EK_Empleados.Where(x => x.estatus_empleado == "A" && x.cc_contable == "187" && (periodo == 1 ? x.tipo_nomina == 1 : x.tipo_nomina == 4)).ToList();
                else empleadosActivos = _context.tblRH_EK_Empleados.Where(x => x.estatus_empleado == "A" && x.cc_contable == CC && (periodo == 1 ? x.tipo_nomina == 1 : x.tipo_nomina == 4)).ToList();

                if (CC == "187") { empleadosActivos = empleadosActivos.Where(x => x.clave_depto != "981").ToList(); }
                else if (CC == "187-A") { empleadosActivos = empleadosActivos.Where(x => x.clave_depto == "981").ToList(); }

                var empleadosActivosID = empleadosActivos.Select(x => x.clave_empleado).ToList();
                var catalogoCC = _context.tblC_Nom_CatalogoCC.ToList();

                var puestosEmpleadosID = empleadosActivos.Select(x => x.puesto).ToList();
                var puestosEmpleados = _context.tblRH_EK_Puestos.Where(x => puestosEmpleadosID.Contains(x.puesto)).ToList();

                var tabuladoresActivos = _context.tblRH_EK_Tabulador_Historial.Where(x => empleadosActivosID.Contains(x.clave_empleado)).ToList();

                foreach (var empleado in empleadosActivos)
                {
                    DateTime zeroTime = new DateTime(1, 1, 1);
                    decimal totalDiasAnio = totalDias;
                    decimal primaVacacionalFinal = 0;
                    int diasPrimaVacacional = 0;
                    var aniosAntiguedad = 0;
                    var auxDetallesCambio = detallesCambio.FirstOrDefault(y => y.empleadoCve == empleado.clave_empleado);
                    var auxCC = catalogoCC.FirstOrDefault(x => x.cc == CC);

                    if (empleado.fecha_antiguedad > new DateTime(anio, 1, 1))
                    {
                        totalDiasAnio = (new DateTime(anio, 12, 31) - (empleado.fecha_antiguedad ?? (new DateTime(anio, 1, 1)))).TotalDays.ParseInt();
                    }
                    if (auxCC.clasificacionCcId == 1 && CC != "010")
                    {
                        TimeSpan auxDiferenciaAnios = (new DateTime(anio, 12, 31) - (empleado.fecha_antiguedad ?? (new DateTime(anio, 1, 1))));
                        aniosAntiguedad = (zeroTime + auxDiferenciaAnios).Year - 1;
                        if (aniosAntiguedad >= 30) diasPrimaVacacional = 24;
                        else if (aniosAntiguedad >= 25) diasPrimaVacacional = 22;
                        else if (aniosAntiguedad >= 20) diasPrimaVacacional = 20;
                        else if (aniosAntiguedad >= 15) diasPrimaVacacional = 18;
                        else if (aniosAntiguedad >= 10) diasPrimaVacacional = 16;
                        else if (aniosAntiguedad >= 5) diasPrimaVacacional = 14;
                        else if (aniosAntiguedad == 4) diasPrimaVacacional = 12;
                        else if (aniosAntiguedad == 3) diasPrimaVacacional = 10;
                        else if (aniosAntiguedad == 2) diasPrimaVacacional = 8;
                        else if (aniosAntiguedad == 1) diasPrimaVacacional = 6;
                    }

                    var totalDiasFinal = (totalDiasAnio / totalDias) * 15;
                    decimal pensionAlimenticiaFinal = 0;

                    if (auxDetallesCambio != null)
                    {
                        totalDiasFinal = auxDetallesCambio.dias;
                        diasPrimaVacacional = auxDetallesCambio.diaFestivo;
                        pensionAlimenticiaFinal = auxDetallesCambio.pensionAlimenticia;
                    }

                    var tabuladorEmpleado = tabuladoresActivos.Where(x => x.clave_empleado == empleado.clave_empleado).OrderByDescending(x => x.fechaAplicaCambio).ThenByDescending(x => x.id).FirstOrDefault();
                    var puestoEmpleado = puestosEmpleados.FirstOrDefault(x => x.puesto == empleado.puesto);
                    decimal bonoZona = tabuladorEmpleado == null ? 0 : tabuladorEmpleado.bono_zona;

                    decimal sueldoSemanal = tabuladorEmpleado == null ? 0 : tabuladorEmpleado.salario_base + tabuladorEmpleado.complemento + bonoZona;
                    decimal sueldoDiario = tabuladorEmpleado == null ? 0 : sueldoSemanal / (periodo == 1 ? 7 : 15);
                    decimal totalAguinaldoEmpleado = tabuladorEmpleado == null ? 0 : (sueldoDiario * totalDiasFinal);
                    primaVacacionalFinal = sueldoDiario * diasPrimaVacacional * 0.25M;

                    tblC_Nom_PreNomina_Det auxDetalles = new tblC_Nom_PreNomina_Det();
                    auxDetalles.empleadoCve = empleado.clave_empleado;
                    auxDetalles.empleadoNombre = empleado.ape_paterno + ' ' + empleado.ape_materno + " " + empleado.nombre;
                    auxDetalles.puesto = puestoEmpleado == null ? "N/A" : puestoEmpleado.descripcion;
                    auxDetalles.sueldoSemanal = sueldoSemanal;
                    auxDetalles.dias = totalDiasFinal;
                    auxDetalles.nominaBase = totalAguinaldoEmpleado;
                    auxDetalles.sindicato = 0;
                    auxDetalles.fondoAhorroNomina = 0;
                    auxDetalles.descuento = 0;
                    auxDetalles.prestamo = 0;
                    auxDetalles.axa = 0;
                    auxDetalles.descuentoFamsa = 0;
                    auxDetalles.pensionAlimenticia = pensionAlimenticiaFinal;
                    auxDetalles.fonacot = 0;
                    auxDetalles.infonavit = 0;
                    auxDetalles.totalNomina = totalAguinaldoEmpleado;
                    auxDetalles.complementoNomina = 0;
                    auxDetalles.fondoAhorroComplemento = 0;
                    auxDetalles.bonoProduccion = 0;
                    auxDetalles.bonoZona = bonoZona;
                    auxDetalles.otros = 0;
                    auxDetalles.primaVacacional = primaVacacionalFinal;
                    auxDetalles.primaDominical = 0;
                    auxDetalles.hrExtra = 0;
                    auxDetalles.hrExtraValor = 0;
                    auxDetalles.importeExtra = 0;
                    auxDetalles.diaHrExtra = aniosAntiguedad;
                    auxDetalles.diaExtraValor = 0;
                    auxDetalles.importeDiaExtra = 0;
                    auxDetalles.diaFestivo = diasPrimaVacacional;
                    auxDetalles.diaFestivoValor = 0;
                    auxDetalles.importeDiaFestivo = 0;
                    auxDetalles.totalComplemento = 0;
                    auxDetalles.totalPagar = totalAguinaldoEmpleado + primaVacacionalFinal - pensionAlimenticiaFinal;
                    auxDetalles.porcentajeTotalPagar = 1;
                    auxDetalles.totalRealPagar = auxDetalles.totalPagar;
                    auxDetalles.valesDespensa = 0;
                    auxDetalles.totalDeposito = auxDetalles.totalPagar;
                    auxDetalles.observaciones = (empleado.fecha_antiguedad ?? DateTime.Today).ToShortDateString();
                    auxDetalles.estatus = true;
                    auxDetalles.apoyoColectivo = 0;
                    detalles.Add(auxDetalles);
                }
            }
            catch (Exception e)
            {
                return new List<tblC_Nom_PreNomina_Det>();
            }
            return detalles;
        }

        public Dictionary<string, object> CargarPrenomina(string CC, int periodo, tipoNominaPropuestaEnum tipoNomina, int anio)
        {
            var resultado = new Dictionary<string, object>();
            if (CC == "--Seleccione--") CC = "TODO";
            try
            {
                List<tblC_Nom_PreNomina_Det> detalles = new List<tblC_Nom_PreNomina_Det>();
                //List<tblC_Nom_PreNomina_Det> detallesCambio = new List<tblC_Nom_PreNomina_Det>();

                tblC_Nom_Prenomina prenomina = _context.tblC_Nom_Prenomina.Where(x => x.CC == CC && x.estatus < 2 && x.periodo == periodo && x.tipoNomina == (int)tipoNomina && x.year == anio).OrderByDescending(x => x.fechaCaptura).FirstOrDefault();

                if (prenomina == null)
                {
                    //switch (vSesiones.sesionEmpresaActual)
                    //{
                    //    case 3:
                    //        if (tipoNomina == tipoNominaPropuestaEnum.Aguinaldo) detalles = CalcularAguinaldoBase(CC, periodo, tipoNomina, anio, detalles);
                    //        else if (tipoNomina == tipoNominaPropuestaEnum.LIQUIDACION_SEMANAL || tipoNomina == tipoNominaPropuestaEnum.LIQUIDACION_QUINCENAL) detalles = CalcularLiquidacionColombia(CC, periodo, tipoNomina, anio, detalles);
                    //        else detalles = CalcularPrenominaBaseColombia(CC, periodo, tipoNomina, anio, detalles);
                    //        break;
                    //    case 6:
                    //        if (tipoNomina == tipoNominaPropuestaEnum.Aguinaldo) detalles = CalcularAguinaldoBase(CC, periodo, tipoNomina, anio, detalles);
                    //        else detalles = CalcularPrenominaBase(CC, periodo, tipoNomina, anio, detalles);
                    //        break;
                    //    default:
                    //        if (tipoNomina == tipoNominaPropuestaEnum.Aguinaldo) detalles = CalcularAguinaldoBase(CC, periodo, tipoNomina, anio, detalles);
                    //        else detalles = CalcularPrenominaBase(CC, periodo, tipoNomina, anio, detalles);
                    //        break;
                    //}
                    if (tipoNomina == tipoNominaPropuestaEnum.Aguinaldo) detalles = CalcularAguinaldoBase(CC, periodo, tipoNomina, anio, detalles);
                    else detalles = CalcularPrenominaBase(CC, periodo, tipoNomina, anio, detalles);
                    var prenominaAnterior = _context.tblC_Nom_Prenomina.Where(x =>/*x.CC == CC &&*/ x.estatus < 2 && (periodo == 1 ? true : x.periodo == periodo - 1) && x.tipoNomina == (int)tipoNomina && (periodo == 1 ? x.year == anio - 1 : x.year == anio)).OrderByDescending(x => x.fechaCaptura).FirstOrDefault();

                    if (prenominaAnterior == null)
                    {
                        var facultamiento = _context.tblFA_Facultamiento.Where(x => x.plantillaID == 118/* && x.paquete.cc.cc == CC*/ && x.aplica).OrderByDescending(x => x.id).FirstOrDefault();
                        List<tblFA_Empleado> autorizantes = new List<tblFA_Empleado>();
                        if (facultamiento != null)
                            autorizantes = _context.tblFA_Empleado.Where(x => x.facultamientoID == facultamiento.id && x.esActivo && x.aplica && x.claveEmpleado != null).ToList();
                        List<tblC_Nom_PreNomina_Aut> autorizantesPrenomina = new List<tblC_Nom_PreNomina_Aut>();
                        var orden = 1;
                        autorizantes.Reverse();
                        var clavesEmpleados = autorizantes.Select(x => x.claveEmpleado.ToString()).ToList();
                        var usuariosSIGOPLAN = _context.tblP_Usuario.Where(x => clavesEmpleados.Contains(x.cveEmpleado)).ToList();

                        foreach (var item in autorizantes)
                        {
                            var usuario = usuariosSIGOPLAN.FirstOrDefault(x => x.cveEmpleado == item.claveEmpleado.ToString());
                            string puestoUsuario = usuario.puesto.descripcion;
                            int clave_empleado = 0;
                            bool exitoParse = Int32.TryParse(usuario.cveEmpleado, out clave_empleado);
                            if (exitoParse)
                            {
                                var empleado = _context.tblRH_EK_Empleados.FirstOrDefault(x => x.clave_empleado == clave_empleado);
                                if (empleado != null)
                                {
                                    var puestoEmpleado = _context.tblRH_EK_Puestos.FirstOrDefault(x => x.puesto == empleado.puesto);
                                    if (puestoEmpleado != null)
                                    {
                                        puestoUsuario = puestoEmpleado.descripcion;
                                    }
                                }
                            }
                            if (usuario != null)
                            {
                                tblC_Nom_PreNomina_Aut auxAutorizante = new tblC_Nom_PreNomina_Aut
                                {
                                    orden = orden,
                                    aprobadorClave = usuario.id,
                                    estatus = 0,
                                    aprobadorPuesto = puestoUsuario,
                                    aprobadorNombre = usuario.nombre + " " + usuario.apellidoPaterno + " " + usuario.apellidoMaterno,
                                    esObra = false
                                };
                                autorizantesPrenomina.Add(auxAutorizante);
                                orden++;
                            }
                        }
                        resultado.Add("autorizantes", autorizantesPrenomina);
                    }
                    else
                    {
                        List<tblC_Nom_PreNomina_Aut> autorizantesPrenomina = new List<tblC_Nom_PreNomina_Aut>();
                        var autorizantesID = _context.tblC_Nom_PreNomina_Aut.Where(x => x.prenominaID == prenominaAnterior.id).OrderBy(x => x.orden).Select(x => x.aprobadorClave).ToList();
                        var usuariosSIGOPLAN = _context.tblP_Usuario.Where(x => autorizantesID.Contains(x.id)).ToList();
                        var orden = 1;
                        foreach (var item in autorizantesID)
                        {
                            var usuario = usuariosSIGOPLAN.FirstOrDefault(x => x.id == item);
                            string puestoUsuario = usuario.puesto.descripcion;
                            int clave_empleado = 0;
                            bool exitoParse = Int32.TryParse(usuario.cveEmpleado, out clave_empleado);
                            if (exitoParse)
                            {
                                var empleado = _context.tblRH_EK_Empleados.FirstOrDefault(x => x.clave_empleado == clave_empleado);
                                if (empleado != null)
                                {
                                    var puestoEmpleado = _context.tblRH_EK_Puestos.FirstOrDefault(x => x.puesto == empleado.puesto);
                                    if (puestoEmpleado != null)
                                    {
                                        puestoUsuario = puestoEmpleado.descripcion;
                                    }
                                }
                            }
                            if (usuario != null)
                            {
                                tblC_Nom_PreNomina_Aut auxAutorizante = new tblC_Nom_PreNomina_Aut
                                {
                                    orden = orden,
                                    aprobadorClave = usuario.id,
                                    estatus = 0,
                                    aprobadorPuesto = puestoUsuario,
                                    aprobadorNombre = usuario.nombre + " " + usuario.apellidoPaterno + " " + usuario.apellidoMaterno,
                                    esObra = false
                                };
                                autorizantesPrenomina.Add(auxAutorizante);
                                orden++;
                            }
                        }
                        resultado.Add("autorizantes", autorizantesPrenomina);
                    }

                    resultado.Add("detalles", detalles);
                    resultado.Add("prenominaID", 0);
                    resultado.Add("validada", false);
                    resultado.Add(SUCCESS, true);
                }
                else
                {
                    var index = prenomina.id;
                    var validada = prenomina.validada;
                    detalles = _context.tblC_Nom_PreNomina_Det.Where(x => x.prenominaID == index && x.estatus).ToList();
                    var empleadosID = detalles.Select(x => x.empleadoCve).ToList();
                    var empleados = _context.tblRH_EK_Empleados.Where(x => empleadosID.Contains(x.clave_empleado)).ToList();

                    foreach (var item in detalles)
                    {
                        var empleado = empleados.FirstOrDefault(x => x.clave_empleado == item.empleadoCve);
                        if (empleado != null) item.fechaAntiguedad = (empleado.fecha_antiguedad ?? DateTime.Today).ToShortDateString();
                    }

                    var autorizantesPrenomina = _context.tblC_Nom_PreNomina_Aut.Where(x => x.prenominaID == index).OrderBy(x => x.orden).ToList();
                    resultado.Add("detalles", detalles);
                    resultado.Add("prenominaID", index);
                    resultado.Add("validada", validada);
                    resultado.Add("autorizantes", autorizantesPrenomina);
                    resultado.Add(SUCCESS, true);
                }
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);

                LogError(_SISTEMA, 0, "NominaController", "CargarPrenomina", ex, AccionEnum.CONSULTA, 0, new { CC, periodo, tipoNomina, anio });
            }

            return resultado;
        }


        public Dictionary<string, object> GuardarPrenomina(int prenominaID, List<tblC_Nom_PreNomina_Det> detalles, List<tblC_Nom_PreNomina_Aut> autorizantes, string CC, int periodo, tipoNominaPropuestaEnum tipoNomina, int anio)
        {
            if (CC == "--Seleccione--") CC = "TODO";
            Dictionary<string, object> resultado = new Dictionary<string, object>();
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    if (detalles == null || detalles.Count() < 1)
                    {
                        throw new Exception("No se encontraron detalles en prenomina para guardar");
                    }
                    if (autorizantes == null || autorizantes.Count() < 1)
                    {
                        throw new Exception("No se encontraron autorizantes relacionados con la prenomina.");
                    }
                    var prenomina = _context.tblC_Nom_Prenomina.FirstOrDefault(x => x.id == prenominaID);
                    //var baseEnkontrolNomina = CalcularPrenominaBase(CC, periodo, tipoNomina, anio);

                    if (prenomina == null)
                    {
                        int usuarioCaptura = vSesiones.sesionUsuarioDTO.id;
                        prenomina = new tblC_Nom_Prenomina
                        {
                            id = 0,
                            CC = CC,
                            estatus = 0,
                            year = anio,
                            periodo = periodo,
                            tipoNomina = (int)tipoNomina,
                            validada = false,
                            fechaCaptura = DateTime.Now,
                            fechaValidacion = null,
                            usuarioCapturaID = usuarioCaptura,
                            notificadoOficina = false
                        };
                        _context.tblC_Nom_Prenomina.Add(prenomina);
                        _context.SaveChanges(); 

                        List<tblC_Nom_PreNomina_Det> detallesActualizados = new List<tblC_Nom_PreNomina_Det>();
                        switch (vSesiones.sesionEmpresaActual)
                        {
                            case 3:
                                if (tipoNomina == tipoNominaPropuestaEnum.Aguinaldo) detallesActualizados = CalcularAguinaldoBase(CC, periodo, tipoNomina, anio, detalles);
                                else if (tipoNomina == tipoNominaPropuestaEnum.LIQUIDACION_SEMANAL || tipoNomina == tipoNominaPropuestaEnum.LIQUIDACION_QUINCENAL) detallesActualizados = CalcularLiquidacionColombia(CC, periodo, tipoNomina, anio, detalles);
                                else detallesActualizados = CalcularPrenominaBaseColombia(CC, periodo, tipoNomina, anio, detalles);
                                break;
                            case 6:
                                if (tipoNomina == tipoNominaPropuestaEnum.Aguinaldo) detallesActualizados = CalcularAguinaldoBase(CC, periodo, tipoNomina, anio, detalles);
                                else detallesActualizados = CalcularPrenominaBase(CC, periodo, tipoNomina, anio, detalles);
                                break;
                            default:
                                if (tipoNomina == tipoNominaPropuestaEnum.Aguinaldo) detallesActualizados = CalcularAguinaldoBase(CC, periodo, tipoNomina, anio, detalles);
                                else detallesActualizados = CalcularPrenominaBase(CC, periodo, tipoNomina, anio, detalles);
                                break;
                        }
                        int orden = 1;
                        foreach (var item in detallesActualizados)
                        {
                            item.orden = orden;
                            item.prenominaID = prenomina.id;
                            orden++;
                        }
                        _context.tblC_Nom_PreNomina_Det.AddRange(detallesActualizados);

                        foreach (var item in autorizantes)
                        {
                            item.prenominaID = prenomina.id;
                            item.autorizando = false;
                        }
                        autorizantes.OrderBy(x => x.orden).FirstOrDefault().autorizando = true;
                        _context.tblC_Nom_PreNomina_Aut.AddRange(autorizantes);

                        _context.SaveChanges();
                        dbContextTransaction.Commit();
                        resultado.Add("prenominaID", prenomina.id);
                        resultado.Add(SUCCESS, true);
                    }
                    else
                    {
                        List<tblC_Nom_PreNomina_Det> detallesActualizados = new List<tblC_Nom_PreNomina_Det>();

                        switch (vSesiones.sesionEmpresaActual)
                        {
                            case 3:
                                if (tipoNomina == tipoNominaPropuestaEnum.Aguinaldo) detallesActualizados = CalcularAguinaldoBase(CC, periodo, tipoNomina, anio, detalles);
                                else if (tipoNomina == tipoNominaPropuestaEnum.LIQUIDACION_SEMANAL || tipoNomina == tipoNominaPropuestaEnum.LIQUIDACION_QUINCENAL) detallesActualizados = CalcularLiquidacionColombia(CC, periodo, tipoNomina, anio, detalles);
                                else detallesActualizados = CalcularPrenominaBaseColombia(CC, periodo, tipoNomina, anio, detalles);
                                break;
                            case 6:
                                if (tipoNomina == tipoNominaPropuestaEnum.Aguinaldo) detallesActualizados = CalcularAguinaldoBase(CC, periodo, tipoNomina, anio, detalles);
                                else detallesActualizados = CalcularPrenominaBase(CC, periodo, tipoNomina, anio, detalles);
                                break;
                            default:
                                if (tipoNomina == tipoNominaPropuestaEnum.Aguinaldo) detallesActualizados = CalcularAguinaldoBase(CC, periodo, tipoNomina, anio, detalles);
                                else detallesActualizados = CalcularPrenominaBase(CC, periodo, tipoNomina, anio, detalles);
                                break;
                        }

                        int orden = 1;
                        foreach (var item in detallesActualizados)
                        {
                            item.orden = orden;
                            item.prenominaID = prenomina.id;
                            orden++;
                        }
                        _context.tblC_Nom_PreNomina_Det.AddRange(detallesActualizados);

                        var detallesEliminados = _context.tblC_Nom_PreNomina_Det.Where(x => x.prenominaID == prenomina.id).ToList();
                        _context.tblC_Nom_PreNomina_Det.RemoveRange(detallesEliminados);

                        var autorizantesEliminados = _context.tblC_Nom_PreNomina_Aut.Where(x => x.prenominaID == prenomina.id).ToList();
                        _context.tblC_Nom_PreNomina_Aut.RemoveRange(autorizantesEliminados);
                        foreach (var item in autorizantes)
                        {
                            item.prenominaID = prenomina.id;
                            item.estatus = 0;
                            item.firma = null;
                        }
                        _context.tblC_Nom_PreNomina_Aut.AddRange(autorizantes);

                        _context.SaveChanges();
                        dbContextTransaction.Commit();
                        resultado.Add("prenominaID", prenomina.id);
                        resultado.Add(SUCCESS, true);
                    }
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                    LogError(_SISTEMA, 0, "NominaController", "GuardarPrenomina", e, AccionEnum.AGREGAR, 0, new { CC = CC, periodo = periodo, anio = anio });
                }
            }
            return resultado;
        }

        public MemoryStream crearExcelAguinaldo(int prenominaID, int tipoReporte)
        {
            try
            {
                var prenomina = _context.tblC_Nom_Prenomina.FirstOrDefault(x => x.id == prenominaID);
                var periodoNomina = _context.tblRH_BN_EstatusPeriodos.FirstOrDefault(x => x.anio == prenomina.year && x.tipo_nomina == prenomina.tipoNomina && x.periodo == prenomina.periodo);
                var detalles = _context.tblC_Nom_PreNomina_Det.Where(x => x.prenominaID == prenominaID).OrderBy(x => x.empleadoNombre).ToList();
                foreach (var item in detalles)
                {
                    var histFormatoCambio = _context.tblRH_FormatoCambio.Where(x => x.Aprobado && x.FechaInicioCambio <= periodoNomina.fecha_limite && x.Clave_Empleado == item.empleadoCve).OrderByDescending(x => x.FechaInicioCambio).FirstOrDefault();
                    if (histFormatoCambio != null) { item.puesto = histFormatoCambio.Puesto; }
                }
                var autorizantes = _context.tblC_Nom_PreNomina_Aut.Where(x => x.prenominaID == prenominaID).OrderBy(x => x.orden).ToList();
                var cc = _context.tblP_CC.Where(x => x.estatus).FirstOrDefault(x => x.cc == (prenomina.CC == "180-A" ? "180" : (prenomina.CC == "187-A" ? "187" : prenomina.CC)));
                var ccCatalogo = _context.tblC_Nom_CatalogoCC.FirstOrDefault(x => x.cc == prenomina.CC);
                var realizo = _context.tblP_Usuario.FirstOrDefault(x => x.id == prenomina.usuarioCapturaID);
                var empleadosID = detalles.Select(x => x.empleadoCve).ToList();
                //var fechaStr = GetPeriodoNomina(prenomina.year, prenomina.periodo, prenomina.tipoNomina);                

                var empresa = vSesiones.sesionEmpresaActual;

                var stringEmpleados = "(";
                for (int i = 0; i < empleadosID.Count(); i++)
                {
                    if (i == empleadosID.Count() - 1) stringEmpleados += empleadosID[i].ToString() + ")";
                    else stringEmpleados += empleadosID[i].ToString() + ",";
                }
                List<DepartamentoEmpleadoDTO> result = new List<DepartamentoEmpleadoDTO>();

                var ultimoPeriodo = _context.tblC_Nom_Prenomina.Where(x => x.CC == prenomina.CC && x.year == prenomina.year && (x.tipoNomina == (prenomina.periodo == 1 ? 1 : 4))).Max(x => x.periodo);
                result = _context.Select<DepartamentoEmpleadoDTO>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = string.Format(
                        @"SELECT 
	                    DET.clave_empleado, 
	                    DET.nombre, 
	                    DET.ape_paterno, 
	                    DET.ape_materno, 
	                    DET.clave_depto, 
	                    ISNULL((SELECT desc_depto FROM tblRH_EK_Departamentos WHERE clave_depto = DET.clave_depto), ' ') AS desc_depto, 
	                    ISNULL((SELECT TOP 1 descripcion FROM tblP_CC WHERE cc = DET.cc_contable), ' ') AS direccion, DET.cc_contable as cc,
	                    ISNULL(DET.sindicato, 'N') AS sindicato
                    FROM 
	                    tblRH_EK_Empleados DET
                    WHERE 
	                    DET.tipo_nomina = {0} AND DET.cc_contable = '{1}' AND clave_empleado IN {2}",
                    (prenomina.periodo == 1 ? "1" : "4"), (prenomina.CC == "180-A" ? "180" : (prenomina.CC == "187-A" ? "187" : prenomina.CC)), stringEmpleados)
                }).ToList();
                foreach (var item in result)
                {
                    int clave_depto = 0;
                    var histFormatoCambio = _context.tblRH_FormatoCambio.Where(x => x.Aprobado && x.FechaInicioCambio <= periodoNomina.fecha_limite && x.Clave_Empleado == item.clave_empleado).OrderByDescending(x => x.FechaInicioCambio).FirstOrDefault();
                    if (histFormatoCambio == null || histFormatoCambio.ClaveDepartamento == null)
                    {
                        var empleado = result.FirstOrDefault(x => x.clave_empleado == item.clave_empleado);
                        clave_depto = empleado.clave_depto;
                    }
                    else
                    {
                        clave_depto = histFormatoCambio.ClaveDepartamento ?? 0;
                    }

                    var departamento = _context.Select<tblRH_EK_Departamentos>(new DapperDTO
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = string.Format(@"SELECT * FROM tblRH_EK_Departamentos WHERE clave_depto = {0}", clave_depto.ToString())
                    }).FirstOrDefault();
                    item.clave_depto = clave_depto;
                    item.desc_depto = departamento.desc_depto;
                }

                var departamentos = result.Select(x => x.desc_depto.ToUpper()).Distinct().OrderBy(x => x).ToList();

                using (ExcelPackage excel = new ExcelPackage())
                {
                    if (ccCatalogo.clasificacionCcId == 1 && prenomina.CC != "010")
                    {
                        for (int j = 0; j < departamentos.Count(); j++)
                        {
                            var hoja1 = excel.Workbook.Worksheets.Add(departamentos[j]);
                            var empleadosDepartamento = result.Where(x => x.desc_depto == departamentos[j]).Select(x => x.clave_empleado).ToList();
                            var detallesDepartamento = detalles.Where(x => empleadosDepartamento.Contains(x.empleadoCve)).ToList();
                            string tipoNominaDesc = prenomina.periodo == 1 ? "SUELDO SEMANAL" : "SUELDO QUINCENAL";

                            List<string[]> headerRow = new List<string[]>() { 
                                new string[] { 
                                    "No.", "CODIGO EMPLEADO", "NOMBRE DEL TRABAJADOR", "PUESTO", "FECHA" + Environment.NewLine + "ALTA", tipoNominaDesc, "DIAS DE" + Environment.NewLine + "AGUINALDO", "MONTO" + Environment.NewLine + "AGUINALDO", "AÑOS" + Environment.NewLine + "LABORADOS", "DIAS" + Environment.NewLine + "VACACIONES", "PRIMA" + Environment.NewLine + "VACACIONAL", "(-) PENSION" + Environment.NewLine + "ALIMENTICIA", "TOTAL A" + Environment.NewLine + "PAGAR"
                                } 
                            };

                            hoja1.Cells["A5:AP5"].LoadFromArrays(headerRow);
                            hoja1.Cells["A5:AP5"].Style.WrapText = true;
                            hoja1.Cells["A5:AP5"].Style.Font.Bold = true;
                            hoja1.Cells["A5:AP5"].Style.Font.Size = 10;
                            hoja1.Cells["A5:AP5"].Style.Font.Name = "Arial";
                            hoja1.Cells["A5:AP5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                            switch (empresa)
                            {
                                case 1: hoja1.Cells[1, 3].Value = "SOLUCIONES INDUSTRIALES SA DE CV"; break;
                                default: hoja1.Cells[1, 3].Value = "SOLUCIONES INDUSTRIALES SA DE CV"; break;
                            }
                            hoja1.Cells[2, 3].Value = "AGUINALDO " + (prenomina.periodo == 1 ? "SEMANAL" : "QUINCENAL") + " " + prenomina.year.ToString();
                            hoja1.Cells[3, 3].Value = departamentos[j].ToUpper().Trim();
                            hoja1.Cells[4, 3].Value = "[" + cc.cc + "] " + cc.descripcion.Trim();

                            hoja1.Cells[1, 3].Style.Font.Bold = true;
                            hoja1.Cells[1, 3].Style.Font.Size = 10;
                            hoja1.Cells[1, 3].Style.Font.Name = "Arial";
                            hoja1.Cells[2, 3].Style.Font.Bold = true;
                            hoja1.Cells[2, 3].Style.Font.Size = 10;
                            hoja1.Cells[2, 3].Style.Font.Name = "Arial";
                            hoja1.Cells[3, 3].Style.Font.Bold = true;
                            hoja1.Cells[3, 3].Style.Font.Size = 10;
                            hoja1.Cells[3, 3].Style.Font.Name = "Arial";
                            hoja1.Cells[4, 3].Style.Font.Bold = true;
                            hoja1.Cells[4, 3].Style.Font.Size = 10;
                            hoja1.Cells[4, 3].Style.Font.Name = "Arial";

                            var cellData = new List<object[]>();

                            int indexOrden = 1;
                            foreach (var item in detallesDepartamento)
                            {
                                cellData.Add(new object[] {
                                indexOrden,
                                item.empleadoCve,
                                item.empleadoNombre,
                                item.puesto,
                                item.observaciones,
                                item.sueldoSemanal,
                                item.dias,
                                item.nominaBase,
                                item.diaHrExtra,
                                item.diaFestivo,
                                item.primaVacacional,
                                item.pensionAlimenticia,
                                item.totalPagar
                            });
                                indexOrden++;
                            }

                            cellData.Add(new object[] {
                                " ",
                                " ",
                                " ",
                                " ",
                                " ",
                                detallesDepartamento.Sum(z => z.sueldoSemanal),
                                "",
                                detallesDepartamento.Sum(z => z.nominaBase),
                                detallesDepartamento.Sum(z => z.diaHrExtra),
                                detallesDepartamento.Sum(z => z.diaFestivo),
                                detallesDepartamento.Sum(z => z.primaVacacional),
                                detallesDepartamento.Sum(z => z.pensionAlimenticia),
                                detallesDepartamento.Sum(z => z.totalPagar),                                
                            });

                            hoja1.Cells[6, 1].LoadFromArrays(cellData);

                            var firmaRealizo = GlobalUtils.CrearFirmaDigital(prenomina.id, DocumentosEnum.Prenomina, realizo.id, TipoFirmaEnum.Autorizacion);

                            hoja1.Cells[5 + detallesDepartamento.Count() + 5, 14].Value = firmaRealizo;
                            hoja1.Cells[6 + detallesDepartamento.Count() + 5, 14].Value = "___________________________";
                            hoja1.Cells[7 + detallesDepartamento.Count() + 5, 14].Value = "ELABORÓ";
                            hoja1.Cells[8 + detallesDepartamento.Count() + 5, 14].Value = realizo.nombre + " " + realizo.apellidoPaterno + " " + realizo.apellidoMaterno;
                            hoja1.Cells[6 + detallesDepartamento.Count() + 5, 14].Style.Font.Bold = true;
                            hoja1.Cells[6 + detallesDepartamento.Count() + 5, 14].Style.Font.Size = 10;
                            hoja1.Cells[6 + detallesDepartamento.Count() + 5, 14].Style.Font.Name = "Arial";
                            hoja1.Cells[7 + detallesDepartamento.Count() + 5, 14].Style.Font.Bold = true;
                            hoja1.Cells[7 + detallesDepartamento.Count() + 5, 14].Style.Font.Size = 10;
                            hoja1.Cells[7 + detallesDepartamento.Count() + 5, 14].Style.Font.Name = "Arial";
                            hoja1.Cells[8 + detallesDepartamento.Count() + 5, 14].Style.Font.Bold = true;
                            hoja1.Cells[8 + detallesDepartamento.Count() + 5, 14].Style.Font.Size = 10;
                            hoja1.Cells[8 + detallesDepartamento.Count() + 5, 14].Style.Font.Name = "Arial";

                            for (int i = 1; i <= autorizantes.Count(); i++)
                            {
                                var cveEmpleado = autorizantes[(i - 1)].aprobadorClave;
                                var usuario = _context.tblP_Usuario.FirstOrDefault(x => x.id == cveEmpleado);
                                var firmaAutorizante = "";
                                if (autorizantes[(i - 1)].firma != null) firmaAutorizante = autorizantes[(i - 1)].firma;
                                hoja1.Cells[5 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 10].Value = firmaAutorizante;
                                hoja1.Cells[6 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 10].Value = "___________________________";
                                hoja1.Cells[7 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 10].Value = "REVISÓ/AUTORIZÓ";
                                hoja1.Cells[8 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 10].Value = usuario.nombre + " " + usuario.apellidoPaterno + " " + usuario.apellidoMaterno;

                                hoja1.Cells[6 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 10].Style.Font.Bold = true;
                                hoja1.Cells[6 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 10].Style.Font.Size = 10;
                                hoja1.Cells[6 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 10].Style.Font.Name = "Arial";
                                hoja1.Cells[7 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 10].Style.Font.Bold = true;
                                hoja1.Cells[7 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 10].Style.Font.Size = 10;
                                hoja1.Cells[7 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 10].Style.Font.Name = "Arial";
                                hoja1.Cells[8 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 10].Style.Font.Bold = true;
                                hoja1.Cells[8 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 10].Style.Font.Size = 10;
                                hoja1.Cells[8 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 10].Style.Font.Name = "Arial";
                            }

                            hoja1.View.ZoomScale = 82;
                            hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 42].Style.Font.Size = 10;
                            hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 42].Style.Font.Name = "Arial";

                            hoja1.Cells[7 + detallesDepartamento.Count(), 1, 7 + detallesDepartamento.Count(), 39].Style.Font.Size = 11;
                            hoja1.Cells[7 + detallesDepartamento.Count(), 1, 7 + detallesDepartamento.Count(), 39].Style.Font.Bold = true;
                            hoja1.Cells[7 + detallesDepartamento.Count(), 1, 7 + detallesDepartamento.Count(), 39].Style.Font.Name = "Arial";

                            hoja1.Cells[6, 6, 6 + detallesDepartamento.Count(), 6].Style.Numberformat.Format = "$###,###,##0.00";
                            hoja1.Cells[6, 8, 6 + detallesDepartamento.Count(), 8].Style.Numberformat.Format = "$###,###,##0.00";
                            hoja1.Cells[6, 11, 6 + detallesDepartamento.Count(), 13].Style.Numberformat.Format = "$###,###,##0.00";

                            hoja1.Cells[4, 3].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            hoja1.Cells[4, 3].Style.Fill.BackgroundColor.SetColor(1, 255, 153, 204);

                            hoja1.Cells[5, 1, 5, 13].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            hoja1.Cells[5, 1, 5, 13].Style.Fill.BackgroundColor.SetColor(1, 192, 192, 192);

                            hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 13].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                            hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 13].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                            hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 13].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                            hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 13].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                            for (int i = 0; i <= detallesDepartamento.Count() + 1; i++) { hoja1.Row(i + 5).Height = 38; }

                            hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 13].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                            hoja1.Cells[5, 4, 5 + detallesDepartamento.Count(), 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                            hoja1.Cells[6 + detallesDepartamento.Count(), 1, 6 + detallesDepartamento.Count(), 13].Style.Font.Bold = true;
                            hoja1.Cells[6 + detallesDepartamento.Count(), 1, 6 + detallesDepartamento.Count(), 13].Style.Font.Size = 12;

                            hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 13].AutoFitColumns();

                            hoja1.View.FreezePanes(6, 5);

                            excel.Compression = CompressionLevel.BestSpeed;
                        }
                    }

                    else
                    {
                        for (int j = 0; j < departamentos.Count(); j++)
                        {
                            var hoja1 = excel.Workbook.Worksheets.Add(departamentos[j]);
                            var empleadosDepartamento = result.Where(x => x.desc_depto == departamentos[j]).Select(x => x.clave_empleado).ToList();
                            var detallesDepartamento = detalles.Where(x => empleadosDepartamento.Contains(x.empleadoCve)).ToList();
                            string tipoNominaDesc = prenomina.periodo == 1 ? "SUELDO SEMANAL" : "SUELDO QUINCENAL";

                            List<string[]> headerRow = new List<string[]>() { 
                            new string[] { 
                                "No.", "CODIGO EMPLEADO", "NOMBRE DEL TRABAJADOR", "PUESTO", "FECHA" + Environment.NewLine + "ALTA", tipoNominaDesc, "DIAS DE" + Environment.NewLine + "AGUINALDO", "MONTO" + Environment.NewLine + "AGUINALDO", "(-) PENSION" + Environment.NewLine + "ALIMENTICIA", "TOTAL A" + Environment.NewLine + "PAGAR"
                            } 
                        };

                            hoja1.Cells["A5:AP5"].LoadFromArrays(headerRow);
                            hoja1.Cells["A5:AP5"].Style.WrapText = true;
                            hoja1.Cells["A5:AP5"].Style.Font.Bold = true;
                            hoja1.Cells["A5:AP5"].Style.Font.Size = 10;
                            hoja1.Cells["A5:AP5"].Style.Font.Name = "Arial";
                            hoja1.Cells["A5:AP5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                            switch (empresa)
                            {
                                case 1: hoja1.Cells[1, 3].Value = "SOLUCIONES INDUSTRIALES SA DE CV"; break;
                                default: hoja1.Cells[1, 3].Value = "SOLUCIONES INDUSTRIALES SA DE CV"; break;
                            }
                            hoja1.Cells[2, 3].Value = "AGUINALDO " + (prenomina.periodo == 1 ? "SEMANAL" : "QUINCENAL") + " " + prenomina.year.ToString();
                            hoja1.Cells[3, 3].Value = departamentos[j].ToUpper().Trim();
                            hoja1.Cells[4, 3].Value = "[" + cc.cc + "] " + cc.descripcion.Trim();

                            hoja1.Cells[1, 3].Style.Font.Bold = true;
                            hoja1.Cells[1, 3].Style.Font.Size = 10;
                            hoja1.Cells[1, 3].Style.Font.Name = "Arial";
                            hoja1.Cells[2, 3].Style.Font.Bold = true;
                            hoja1.Cells[2, 3].Style.Font.Size = 10;
                            hoja1.Cells[2, 3].Style.Font.Name = "Arial";
                            hoja1.Cells[3, 3].Style.Font.Bold = true;
                            hoja1.Cells[3, 3].Style.Font.Size = 10;
                            hoja1.Cells[3, 3].Style.Font.Name = "Arial";
                            hoja1.Cells[4, 3].Style.Font.Bold = true;
                            hoja1.Cells[4, 3].Style.Font.Size = 10;
                            hoja1.Cells[4, 3].Style.Font.Name = "Arial";

                            var cellData = new List<object[]>();

                            int indexOrden = 1;
                            foreach (var item in detallesDepartamento)
                            {
                                cellData.Add(new object[] {
                                indexOrden,
                                item.empleadoCve,
                                item.empleadoNombre,
                                item.puesto,
                                item.observaciones,
                                item.sueldoSemanal,
                                item.dias,
                                item.nominaBase,
                                item.pensionAlimenticia,
                                item.totalPagar
                            });
                                indexOrden++;
                            }

                            cellData.Add(new object[] {
                                " ",
                                " ",
                                " ",
                                " ",
                                " ",
                                detallesDepartamento.Sum(z => z.sueldoSemanal),
                                "",
                                detallesDepartamento.Sum(z => z.nominaBase),
                                detallesDepartamento.Sum(z => z.pensionAlimenticia),
                                detallesDepartamento.Sum(z => z.totalPagar),                                
                            });

                            hoja1.Cells[6, 1].LoadFromArrays(cellData);

                            var firmaRealizo = GlobalUtils.CrearFirmaDigital(prenomina.id, DocumentosEnum.Prenomina, realizo.id, TipoFirmaEnum.Autorizacion);

                            hoja1.Cells[5 + detallesDepartamento.Count() + 5, 11].Value = firmaRealizo;
                            hoja1.Cells[6 + detallesDepartamento.Count() + 5, 11].Value = "___________________________";
                            hoja1.Cells[7 + detallesDepartamento.Count() + 5, 11].Value = "ELABORÓ";
                            hoja1.Cells[8 + detallesDepartamento.Count() + 5, 11].Value = realizo.nombre + " " + realizo.apellidoPaterno + " " + realizo.apellidoMaterno;
                            hoja1.Cells[6 + detallesDepartamento.Count() + 5, 11].Style.Font.Bold = true;
                            hoja1.Cells[6 + detallesDepartamento.Count() + 5, 11].Style.Font.Size = 10;
                            hoja1.Cells[6 + detallesDepartamento.Count() + 5, 11].Style.Font.Name = "Arial";
                            hoja1.Cells[7 + detallesDepartamento.Count() + 5, 11].Style.Font.Bold = true;
                            hoja1.Cells[7 + detallesDepartamento.Count() + 5, 11].Style.Font.Size = 10;
                            hoja1.Cells[7 + detallesDepartamento.Count() + 5, 11].Style.Font.Name = "Arial";
                            hoja1.Cells[8 + detallesDepartamento.Count() + 5, 11].Style.Font.Bold = true;
                            hoja1.Cells[8 + detallesDepartamento.Count() + 5, 11].Style.Font.Size = 10;
                            hoja1.Cells[8 + detallesDepartamento.Count() + 5, 11].Style.Font.Name = "Arial";

                            for (int i = 1; i <= autorizantes.Count(); i++)
                            {
                                var cveEmpleado = autorizantes[(i - 1)].aprobadorClave;
                                var usuario = _context.tblP_Usuario.FirstOrDefault(x => x.id == cveEmpleado);
                                var firmaAutorizante = "";
                                if (autorizantes[(i - 1)].firma != null) firmaAutorizante = autorizantes[(i - 1)].firma;
                                hoja1.Cells[5 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 7].Value = firmaAutorizante;
                                hoja1.Cells[6 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 7].Value = "___________________________";
                                hoja1.Cells[7 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 7].Value = "REVISÓ/AUTORIZÓ";
                                hoja1.Cells[8 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 7].Value = usuario.nombre + " " + usuario.apellidoPaterno + " " + usuario.apellidoMaterno;

                                hoja1.Cells[6 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 7].Style.Font.Bold = true;
                                hoja1.Cells[6 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 7].Style.Font.Size = 10;
                                hoja1.Cells[6 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 7].Style.Font.Name = "Arial";
                                hoja1.Cells[7 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 7].Style.Font.Bold = true;
                                hoja1.Cells[7 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 7].Style.Font.Size = 10;
                                hoja1.Cells[7 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 7].Style.Font.Name = "Arial";
                                hoja1.Cells[8 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 7].Style.Font.Bold = true;
                                hoja1.Cells[8 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 7].Style.Font.Size = 10;
                                hoja1.Cells[8 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 7].Style.Font.Name = "Arial";
                            }

                            hoja1.View.ZoomScale = 82;
                            hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 42].Style.Font.Size = 10;
                            hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 42].Style.Font.Name = "Arial";

                            hoja1.Cells[7 + detallesDepartamento.Count(), 1, 7 + detallesDepartamento.Count(), 39].Style.Font.Size = 11;
                            hoja1.Cells[7 + detallesDepartamento.Count(), 1, 7 + detallesDepartamento.Count(), 39].Style.Font.Bold = true;
                            hoja1.Cells[7 + detallesDepartamento.Count(), 1, 7 + detallesDepartamento.Count(), 39].Style.Font.Name = "Arial";

                            hoja1.Cells[6, 6, 6 + detallesDepartamento.Count(), 6].Style.Numberformat.Format = "$###,###,##0.00";
                            hoja1.Cells[6, 8, 6 + detallesDepartamento.Count(), 10].Style.Numberformat.Format = "$###,###,##0.00";

                            hoja1.Cells[4, 3].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            hoja1.Cells[4, 3].Style.Fill.BackgroundColor.SetColor(1, 255, 153, 204);

                            hoja1.Cells[5, 1, 5, 10].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            hoja1.Cells[5, 1, 5, 10].Style.Fill.BackgroundColor.SetColor(1, 192, 192, 192);

                            hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 10].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                            hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 10].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                            hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 10].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                            hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 10].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                            for (int i = 0; i <= detallesDepartamento.Count() + 1; i++) { hoja1.Row(i + 5).Height = 38; }

                            hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                            hoja1.Cells[5, 4, 5 + detallesDepartamento.Count(), 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                            hoja1.Cells[6 + detallesDepartamento.Count(), 1, 6 + detallesDepartamento.Count(), 10].Style.Font.Bold = true;
                            hoja1.Cells[6 + detallesDepartamento.Count(), 1, 6 + detallesDepartamento.Count(), 10].Style.Font.Size = 12;

                            hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 10].AutoFitColumns();

                            hoja1.View.FreezePanes(6, 5);

                            excel.Compression = CompressionLevel.BestSpeed;
                        }
                    }

                    var bytes = new MemoryStream();
                    using (var exportData = new MemoryStream())
                    {
                        excel.SaveAs(exportData);
                        bytes = exportData;
                    }

                    return bytes;
                }
            }
            catch (Exception e)
            {
                return null;
            }
        }

        public MemoryStream crearExcelPrenomina(int prenominaID, int tipoReporte)
        {
            try
            {
                var prenomina = _context.tblC_Nom_Prenomina.FirstOrDefault(x => x.id == prenominaID);
                var periodoNomina = _context.tblRH_BN_EstatusPeriodos.FirstOrDefault(x => x.anio == prenomina.year && x.tipo_nomina == prenomina.tipoNomina && x.periodo == prenomina.periodo);
                var detalles = _context.tblC_Nom_PreNomina_Det.Where(x => x.prenominaID == prenominaID).OrderBy(x => x.empleadoNombre).ToList();
                foreach (var item in detalles)
                {
                    var histFormatoCambio = _context.tblRH_FormatoCambio.Where(x => x.Aprobado && x.FechaInicioCambio <= periodoNomina.fecha_limite && x.Clave_Empleado == item.empleadoCve).OrderByDescending(x => x.FechaInicioCambio).FirstOrDefault();
                    if (histFormatoCambio != null) { item.puesto = histFormatoCambio.Puesto; }
                }
                var autorizantes = _context.tblC_Nom_PreNomina_Aut.Where(x => x.prenominaID == prenominaID).OrderBy(x => x.orden).ToList();
                var cc = _context.tblP_CC.Where(x => x.estatus).FirstOrDefault(x => x.cc == (prenomina.CC == "180-A" ? "180" : (prenomina.CC == "187-A" ? "187" : prenomina.CC)));
                var realizo = _context.tblP_Usuario.FirstOrDefault(x => x.id == prenomina.usuarioCapturaID);
                var empleadosID = detalles.Select(x => x.empleadoCve).ToList();
                var fechaStr = GetPeriodoNomina(prenomina.year, prenomina.periodo, prenomina.tipoNomina);

                var empresa = vSesiones.sesionEmpresaActual;

                var stringEmpleados = "(";
                for (int i = 0; i < empleadosID.Count(); i++)
                {
                    if (i == empleadosID.Count() - 1) stringEmpleados += empleadosID[i].ToString() + ")";
                    else stringEmpleados += empleadosID[i].ToString() + ",";
                }
                List<DepartamentoEmpleadoDTO> result = new List<DepartamentoEmpleadoDTO>();

                if (prenomina.tipoNomina == 10)
                {
                    var ultimoPeriodo = _context.tblC_Nom_Prenomina.Where(x => x.CC == prenomina.CC && x.year == prenomina.year && (x.tipoNomina == (prenomina.periodo == 1 ? 1 : 4))).Max(x => x.periodo);
                    result = _context.Select<DepartamentoEmpleadoDTO>(new DapperDTO
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = string.Format(
                        @"SELECT 
	                    DET.clave_empleado, 
	                    DET.nombre, 
	                    DET.ape_paterno, 
	                    DET.ape_materno, 
	                    DET.clave_depto, 
	                    ISNULL((SELECT desc_depto FROM tblRH_EK_Departamentos WHERE clave_depto = DET.clave_depto and cc=INC.cc), ' ') AS desc_depto, 
	                    ISNULL((SELECT TOP 1 descripcion FROM tblP_CC WHERE cc = INC.cc), ' ') AS direccion, INC.cc,
	                    ISNULL((SELECT sindicato FROM tblRH_EK_Empleados WHERE clave_empleado = DET.clave_empleado), 'N') AS sindicato
                    FROM 
	                    tblRH_BN_Incidencia_det DET LEFT JOIN tblRH_BN_Incidencia INC ON DET.incidenciaID = INC.id
                    WHERE 
	                    INC.periodo = {0} AND INC.anio = {1} AND INC.tipo_nomina = {2} AND INC.cc = '{3}' AND clave_empleado IN {4}",
                        ultimoPeriodo.ToString(), prenomina.year.ToString(), (prenomina.periodo == 1 ? "1" : "4"), (prenomina.CC == "180-A" ? "180" : (prenomina.CC == "187-A" ? "187" : prenomina.CC)), stringEmpleados)
                    }).ToList();
                }
                else
                {
                    result = _context.Select<DepartamentoEmpleadoDTO>(new DapperDTO
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = string.Format(
                        @"SELECT 
	                    DET.clave_empleado, 
	                    DET.nombre, 
	                    DET.ape_paterno, 
	                    DET.ape_materno, 
	                    DET.clave_depto, 
	                    ISNULL((SELECT desc_depto FROM tblRH_EK_Departamentos WHERE clave_depto = DET.clave_depto and cc=INC.cc), ' ') AS desc_depto, 
	                    ISNULL((SELECT TOP 1 descripcion FROM tblP_CC WHERE cc = INC.cc), ' ') AS direccion, INC.cc,
	                    ISNULL((SELECT sindicato FROM tblRH_EK_Empleados WHERE clave_empleado = DET.clave_empleado), 'N') AS sindicato
                    FROM 
	                    tblRH_BN_Incidencia_det DET LEFT JOIN tblRH_BN_Incidencia INC ON DET.incidenciaID = INC.id
                    WHERE 
	                    INC.periodo = {0} AND INC.anio = {1} AND INC.tipo_nomina = {2} AND clave_empleado IN {3}",
                        prenomina.periodo.ToString(), prenomina.year.ToString(), prenomina.tipoNomina.ToString(), stringEmpleados)
                    }).ToList();
                }
                foreach (var item in result)
                {
                    int clave_depto = 0;
                    //var histFormatoCambio = _context.tblRH_FormatoCambio.Where(x => x.Aprobado && x.FechaInicioCambio <= periodoNomina.fecha_limite && x.Clave_Empleado == item.clave_empleado).OrderByDescending(x => x.FechaInicioCambio).FirstOrDefault();
                    //if (histFormatoCambio == null || histFormatoCambio.ClaveDepartamento == null)
                    //{
                    var empleado = result.FirstOrDefault(x => x.clave_empleado == item.clave_empleado);
                    clave_depto = empleado.clave_depto;
                    //}
                    //else 
                    //{
                    //    clave_depto = histFormatoCambio.ClaveDepartamento ?? 0;
                    //}

                    var departamento = _context.Select<tblRH_EK_Departamentos>(new DapperDTO
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = string.Format(@"SELECT * FROM tblRH_EK_Departamentos WHERE clave_depto = {0}", clave_depto.ToString())
                    }).FirstOrDefault();
                    item.clave_depto = clave_depto;
                    item.desc_depto = departamento.desc_depto;
                }

                var departamentos = result.Select(x => x.desc_depto.ToUpper()).Distinct().OrderBy(x => x).ToList();

                using (ExcelPackage excel = new ExcelPackage())
                {
                    for (int j = 0; j < departamentos.Count(); j++)
                    {
                        var hoja1 = excel.Workbook.Worksheets.Add(departamentos[j]);
                        var empleadosDepartamento = result.Where(x => x.desc_depto.ToUpper() == departamentos[j].ToUpper()).Select(x => x.clave_empleado).ToList();
                        var detallesDepartamento = detalles.Where(x => empleadosDepartamento.Contains(x.empleadoCve)).ToList();
                        string tipoNominaDesc = prenomina.tipoNomina == 1 ? "SUELDO BASE SEMANAL" : "SUELDO BASE QUINCENAL";

                        //List<string[]> headerRow = new List<string[]>() { 
                        //    new string[] { 
                        //        "No.", "CODIGO EMPLEADO", "NOMBRE DEL TRABAJADOR", "PUESTO", tipoNominaDesc, "DIAS", "BASE NOMINA", "DIAS VAC", "BASE VACACIONES", "DESCTOS", "APOYO COLECTIVO", "PRESTAMO", "AXA", "FAMSA", "PENSION", 
                        //        "FONACOT", "INFONAVIT","SINDICATO", "2.5% FONDO AHORRO", "TOTAL BASE NOMINA", " ", "COMPLEMENTO DE NOMINA", "2.5% FONDO AHORRO", " BONO ZONA", 
                        //        "BONO DE PRODUCCION", "OTROS", "PRIMA VACACIONAL", "PRIMA DOMINICAL", "HORAS EXTRAS", "Valor Hrs Extra", "IMPORTE DE HRS EXTRAS", "DIAS EXTRAS", 
                        //        "Valor Dia Extra", "IMPORTE DE DIAS EXTRAS", "DIAS FESTIVOS", "Valor Dia Festivo", "IMPORTE DE DIAS FESTIVOS", "TOTAL DE COMPLEMENTO", " ", "TOTAL A PAGAR", "%", "TOTAL REAL A PAGAR", "VALES DESPENSA", 
                        //        "TOTAL DEPOSITO", "OBSERVACIONES"
                        //    } 
                        //};

                        List<string[]> headerRow = new List<string[]>() { 
                            new string[] { 
                                "No.",
                                "CODIGO EMP",
                                "TRABAJADOR",
                                "PUESTO",
                                tipoNominaDesc,
                                "SUELDO BASE CUADRADO",
                                "DIAS TRABAJO",
                                // "BASE NOMINA",
                                "DIAS VAC",
                                "BASE VACACIONES",
                                "DESCTOS",
                                "APOYO COLECTIVO",
                                "PRESTAMO",
                                "OTRAS PERCEPCIONES",
                                "FAMSA",
                                "PENSION",
                                "FONACOT",
                                "INFONAVIT",
                                "SINDICATO",
                                // "2.5% FONDO AHORRO",
                                "TOTAL BASE NOMINA",
                                " ",
                                "COMPLEMENTO DE NOMINA",
                                // "2.5% FONDO AHORRO",
                                " BONO ZONA",
                                "BONO DE PRODUCCION",
                                "OTROS",
                                "PRIMA VACACIONAL",
                                "PRIMA DOMINICAL",
                                "HORAS EXTRAS",
                                "Valor Hrs Extra",
                                "IMPORTE DE HRS EXTRAS",
                                "DIAS EXTRAS",
                                "Valor Dia Extra",
                                "IMPORTE DE DIAS EXTRAS",
                                "DIAS FESTIVOS",
                                "Valor Dia Festivo",
                                "IMPORTE DE DIAS FESTIVOS",
                                "TOTAL DE COMPLEMENTO",
                                " ",
                                "TOTAL A PAGAR",
                                "%",
                                "TOTAL REAL A PAGAR",
                                "VALES DESPENSA",
                                "TOTAL DEPOSITO",
                                 "OBSERVACIONES"
                            } 
                        };

                        hoja1.Cells["A5:AR5"].LoadFromArrays(headerRow);
                        hoja1.Cells["A5:AR5"].Style.WrapText = true;
                        hoja1.Cells["A5:AR5"].Style.Font.Bold = true;
                        hoja1.Cells["A5:AR5"].Style.Font.Size = 10;
                        hoja1.Cells["A5:AR5"].Style.Font.Name = "Arial";
                        hoja1.Cells["A5:AR5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        switch (empresa)
                        {
                            case 1: hoja1.Cells[1, 3].Value = "SOLUCIONES INDUSTRIALES SA DE CV"; break;
                            default: hoja1.Cells[1, 3].Value = "SOLUCIONES INDUSTRIALES SA DE CV"; break;
                        }
                        hoja1.Cells[2, 3].Value = ((tipoNominaPropuestaEnum)prenomina.tipoNomina).GetDescription() + " " + prenomina.periodo + ": " + fechaStr;
                        hoja1.Cells[3, 3].Value = departamentos[j].ToUpper().Trim();
                        hoja1.Cells[4, 3].Value = "[TODOS] " + "TODOS LOS CCs";
                        //hoja1.Cells[4, 3].Value = "[" + cc.cc + "] " + cc.descripcion.Trim();

                        hoja1.Cells[1, 3].Style.Font.Bold = true;
                        hoja1.Cells[1, 3].Style.Font.Size = 10;
                        hoja1.Cells[1, 3].Style.Font.Name = "Arial";
                        hoja1.Cells[2, 3].Style.Font.Bold = true;
                        hoja1.Cells[2, 3].Style.Font.Size = 10;
                        hoja1.Cells[2, 3].Style.Font.Name = "Arial";
                        hoja1.Cells[3, 3].Style.Font.Bold = true;
                        hoja1.Cells[3, 3].Style.Font.Size = 10;
                        hoja1.Cells[3, 3].Style.Font.Name = "Arial";
                        hoja1.Cells[4, 3].Style.Font.Bold = true;
                        hoja1.Cells[4, 3].Style.Font.Size = 10;
                        hoja1.Cells[4, 3].Style.Font.Name = "Arial";

                        var cellData = new List<object[]>();

                        int indexOrden = 1;
                        foreach (var item in detallesDepartamento)
                        {
                            cellData.Add(new object[] {
                                indexOrden,
                                item.empleadoCve,
                                item.empleadoNombre,
                                item.puesto,
                                item.sueldoSemanal,
                                // item.nominaBase,
                                item.bonoCuadrado,
                                item.dias,
                                item.diasVacaciones,
                                item.nominaBaseVacaciones,
                                item.descuento,
                                item.apoyoColectivo,
                                item.prestamo,
                                item.axa,
                                item.descuentoFamsa,
                                item.pensionAlimenticia,
                                item.fonacot,
                                item.infonavit,
                                item.sindicato,
                                // item.fondoAhorroNomina,
                                //" ",
                                item.totalNomina,
                                " ",
                                item.complementoNomina,
                                // item.fondoAhorroComplemento,
                                item.bonoZona,
                                item.bonoProduccion,
                                item.otros,
                                item.primaVacacional,
                                item.primaDominical,
                                item.hrExtra,
                                item.hrExtraValor,
                                item.importeExtra,
                                item.diaHrExtra,
                                item.diaExtraValor,
                                item.importeDiaExtra,
                                item.diaFestivo,
                                item.diaFestivoValor,
                                item.importeDiaFestivo,
                                item.totalComplemento,
                                " ",
                                item.totalPagar,
                                item.porcentajeTotalPagar * 100,
                                item.totalRealPagar,
                                item.valesDespensa,
                                item.totalDeposito,
                                item.observaciones
                            });
                            indexOrden++;
                        }

                        cellData.Add(new object[] {
                                " ",
                                " ",
                                " ",
                                " ",
                                detallesDepartamento.Sum(z => z.sueldoSemanal),
                                "",
                                // detallesDepartamento.Sum(z => z.nominaBase),
                                detallesDepartamento.Sum(z => z.bonoCuadrado),
                                "",
                                detallesDepartamento.Sum(z => z.nominaBaseVacaciones),
                                detallesDepartamento.Sum(z => z.descuento),
                                detallesDepartamento.Sum(z => z.apoyoColectivo),
                                detallesDepartamento.Sum(z => z.prestamo),
                                detallesDepartamento.Sum(z => z.axa),
                                detallesDepartamento.Sum(z => z.descuentoFamsa),
                                detallesDepartamento.Sum(z => z.pensionAlimenticia),
                                detallesDepartamento.Sum(z => z.fonacot),
                                detallesDepartamento.Sum(z => z.infonavit),
                                detallesDepartamento.Sum(z => z.sindicato),
                                // detallesDepartamento.Sum(z => z.fondoAhorroNomina),
                                //" ",
                                detallesDepartamento.Sum(z => z.totalNomina),
                                " ",
                                detallesDepartamento.Sum(z => z.complementoNomina),
                                // detallesDepartamento.Sum(z => z.fondoAhorroComplemento),
                                detallesDepartamento.Sum(z => z.bonoZona),
                                detallesDepartamento.Sum(z => z.bonoProduccion),
                                detallesDepartamento.Sum(z => z.otros),
                                detallesDepartamento.Sum(z => z.primaVacacional),
                                detallesDepartamento.Sum(z => z.primaDominical),
                                detallesDepartamento.Sum(z => z.hrExtra),
                                " ",
                                detallesDepartamento.Sum(z => z.importeExtra),
                                detallesDepartamento.Sum(z => z.diaHrExtra),
                                " ",
                                detallesDepartamento.Sum(z => z.importeDiaExtra),
                                detallesDepartamento.Sum(z => z.diaFestivo),
                                " ",
                                detallesDepartamento.Sum(z => z.importeDiaFestivo),
                                detallesDepartamento.Sum(z => z.totalComplemento),
                                " ",
                                detallesDepartamento.Sum(z => z.totalPagar),
                                " ",
                                detallesDepartamento.Sum(z => z.totalRealPagar),
                                detallesDepartamento.Sum(z => z.valesDespensa),
                                detallesDepartamento.Sum(z => z.totalDeposito),
                                " ",
                            });

                        hoja1.Cells[6, 1].LoadFromArrays(cellData);

                        var firmaRealizo = GlobalUtils.CrearFirmaDigital(prenomina.id, DocumentosEnum.Prenomina, realizo.id, TipoFirmaEnum.Autorizacion);

                        hoja1.Cells[5 + detallesDepartamento.Count() + 3, 4].Value = firmaRealizo;
                        hoja1.Cells[6 + detallesDepartamento.Count() + 3, 4].Value = "___________________________";
                        hoja1.Cells[7 + detallesDepartamento.Count() + 3, 4].Value = "ELABORÓ";
                        hoja1.Cells[8 + detallesDepartamento.Count() + 3, 4].Value = realizo.nombre + " " + realizo.apellidoPaterno + " " + realizo.apellidoMaterno;
                        hoja1.Cells[6 + detallesDepartamento.Count() + 3, 4].Style.Font.Bold = true;
                        hoja1.Cells[6 + detallesDepartamento.Count() + 3, 4].Style.Font.Size = 10;
                        hoja1.Cells[6 + detallesDepartamento.Count() + 3, 4].Style.Font.Name = "Arial";
                        hoja1.Cells[7 + detallesDepartamento.Count() + 3, 4].Style.Font.Bold = true;
                        hoja1.Cells[7 + detallesDepartamento.Count() + 3, 4].Style.Font.Size = 10;
                        hoja1.Cells[7 + detallesDepartamento.Count() + 3, 4].Style.Font.Name = "Arial";
                        hoja1.Cells[8 + detallesDepartamento.Count() + 3, 4].Style.Font.Bold = true;
                        hoja1.Cells[8 + detallesDepartamento.Count() + 3, 4].Style.Font.Size = 10;
                        hoja1.Cells[8 + detallesDepartamento.Count() + 3, 4].Style.Font.Name = "Arial";

                        for (int i = 1; i <= autorizantes.Count(); i++)
                        {
                            var cveEmpleado = autorizantes[(i - 1)].aprobadorClave;
                            var usuario = _context.tblP_Usuario.FirstOrDefault(x => x.id == cveEmpleado);
                            var firmaAutorizante = "";
                            if (autorizantes[(i - 1)].firma != null) firmaAutorizante = autorizantes[(i - 1)].firma;
                            hoja1.Cells[5 + detallesDepartamento.Count() + 3, (i + 1) * 4].Value = firmaAutorizante;
                            hoja1.Cells[6 + detallesDepartamento.Count() + 3, (i + 1) * 4].Value = "___________________________";
                            hoja1.Cells[7 + detallesDepartamento.Count() + 3, (i + 1) * 4].Value = "REVISÓ/AUTORIZÓ";
                            hoja1.Cells[8 + detallesDepartamento.Count() + 3, (i + 1) * 4].Value = usuario.nombre + " " + usuario.apellidoPaterno + " " + usuario.apellidoMaterno;

                            hoja1.Cells[6 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Bold = true;
                            hoja1.Cells[6 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Size = 10;
                            hoja1.Cells[6 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Name = "Arial";
                            hoja1.Cells[7 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Bold = true;
                            hoja1.Cells[7 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Size = 10;
                            hoja1.Cells[7 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Name = "Arial";
                            hoja1.Cells[8 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Bold = true;
                            hoja1.Cells[8 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Size = 10;
                            hoja1.Cells[8 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Name = "Arial";
                        }

                        hoja1.View.ZoomScale = 82;
                        // Configuración de altura de filas
                        for (int i = 0; i <= detallesDepartamento.Count() + 1; i++)
                        {
                            hoja1.Row(i + 5).Height = 38;
                        }

                        // Estilos de fuente y formato para la fila 5
                        hoja1.Cells[5, 1, 5, 4].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[5, 1, 5, 4].Style.Fill.BackgroundColor.SetColor(1, 92, 155, 214);

                        //hoja1.Cells[5, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        //hoja1.Cells[5, 5].Style.Fill.BackgroundColor.SetColor(1, 154, 87, 205);

                        //hoja1.Cells[5, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        //hoja1.Cells[5, 6].Style.Fill.BackgroundColor.SetColor(1, 192, 192, 192);

                        //hoja1.Cells[5, 7].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        //hoja1.Cells[5, 7].Style.Fill.BackgroundColor.SetColor(1, 255, 217, 102);

                        //hoja1.Cells[5, 8, 5, 9].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        //hoja1.Cells[5, 8, 5, 9].Style.Fill.BackgroundColor.SetColor(1, 146, 208, 80);

                        //hoja1.Cells[5, 10, 5, 17].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        //hoja1.Cells[5, 10, 5, 17].Style.Fill.BackgroundColor.SetColor(1, 192, 192, 192);

                        //hoja1.Cells[5, 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        //hoja1.Cells[5, 20].Style.Fill.BackgroundColor.SetColor(1, 255, 102, 0);

                        //hoja1.Cells[5, 22].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        //hoja1.Cells[5, 22].Style.Fill.BackgroundColor.SetColor(1, 154, 87, 205);

                        //hoja1.Cells[5, 23].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        //hoja1.Cells[5, 23].Style.Fill.BackgroundColor.SetColor(1, 255, 102, 0);

                        //hoja1.Cells[5, 24, 5, 25].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        //hoja1.Cells[5, 24, 5, 25].Style.Fill.BackgroundColor.SetColor(1, 150, 150, 150);

                        //hoja1.Cells[5, 26, 5, 38].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        //hoja1.Cells[5, 26, 5, 38].Style.Fill.BackgroundColor.SetColor(1, 192, 192, 192);

                        //hoja1.Cells[5, 40, 5, 41].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        //hoja1.Cells[5, 40, 5, 41].Style.Fill.BackgroundColor.SetColor(1, 192, 192, 192);

                        //hoja1.Cells[5, 42].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        //hoja1.Cells[5, 42].Style.Fill.BackgroundColor.SetColor(1, 255, 192, 0);

                        //hoja1.Cells[5, 43, 5, 44].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        //hoja1.Cells[5, 43, 5, 44].Style.Fill.BackgroundColor.SetColor(1, 0, 176, 240);

                        //hoja1.Cells[5, 45].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        //hoja1.Cells[5, 45].Style.Fill.BackgroundColor.SetColor(1, 192, 192, 192);

                        // Configuración de fuentes y alineaciones para las filas 5 a 6 + detallesDepartamento.Count()
                        hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 44].Style.Font.Size = 10;
                        hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 44].Style.Font.Name = "Arial";
                        hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 44].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        // Ajuste automático de columnas
                        hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 44].AutoFitColumns();

                        // Configuración de bordes
                        hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 19].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 19].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 19].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 19].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                        hoja1.Cells[5, 21, 5 + detallesDepartamento.Count(), 37].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[5, 21, 5 + detallesDepartamento.Count(), 37].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[5, 21, 5 + detallesDepartamento.Count(), 37].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[5, 21, 5 + detallesDepartamento.Count(), 37].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                        hoja1.Cells[5, 39, 5 + detallesDepartamento.Count(), 44].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[5, 39, 5 + detallesDepartamento.Count(), 44].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[5, 39, 5 + detallesDepartamento.Count(), 44].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[5, 39, 5 + detallesDepartamento.Count(), 44].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                        // Configuración de formato numérico y estilo de fuente para la fila 6 + detallesDepartamento.Count()
                        hoja1.Cells[6, 5, 6 + detallesDepartamento.Count(), 6].Style.Numberformat.Format = "$###,###,##0.00";
                        hoja1.Cells[6, 9, 6 + detallesDepartamento.Count(), 19].Style.Numberformat.Format = "$###,###,##0.00";
                        hoja1.Cells[6, 22, 6 + detallesDepartamento.Count(), 28].Style.Numberformat.Format = "$###,###,##0.00";
                        hoja1.Cells[6, 30, 6 + detallesDepartamento.Count(), 31].Style.Numberformat.Format = "$###,###,##0.00";
                        hoja1.Cells[6, 33, 6 + detallesDepartamento.Count(), 38].Style.Numberformat.Format = "$###,###,##0.00";
                        hoja1.Cells[6, 40, 6 + detallesDepartamento.Count(), 40].Style.Numberformat.Format = "$###,###,##0.00";
                        hoja1.Cells[6, 41, 6 + detallesDepartamento.Count(), 45].Style.Numberformat.Format = "$###,###,##0.00";

                        hoja1.Cells[6, 6, 6 + detallesDepartamento.Count(), 6].Style.Numberformat.Format = "###,###,##0.00";
                        hoja1.Cells[6, 29, 6 + detallesDepartamento.Count(), 29].Style.Numberformat.Format = "###,###,##0.00";
                        hoja1.Cells[6, 41, 6 + detallesDepartamento.Count(), 41].Style.Numberformat.Format = "###,###,##0.00";

                        hoja1.Cells[6 + detallesDepartamento.Count(), 1, 6 + detallesDepartamento.Count(), 45].Style.Font.Bold = true;
                        hoja1.Cells[6 + detallesDepartamento.Count(), 1, 6 + detallesDepartamento.Count(), 45].Style.Font.Size = 12;

                        // Configuración de color de fondo para celda específica
                        hoja1.Cells[4, 3].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[4, 3].Style.Fill.BackgroundColor.SetColor(1, 255, 153, 204);


                        hoja1.Column(45).Style.WrapText = true;
                        hoja1.Column(45).Width = 100;
                        hoja1.View.FreezePanes(6, 7);

                        excel.Compression = CompressionLevel.BestSpeed;
                    }

                    var bytes = new MemoryStream();
                    using (var exportData = new MemoryStream())
                    {
                        excel.SaveAs(exportData);
                        bytes = exportData;
                    }

                    return bytes;
                }
            }
            catch (Exception e)
            {
                return null;
            }
        }

        public MemoryStream crearExcelPrenominaColombia(int prenominaID, int tipoReporte)
        {
            try
            {
                var prenomina = _context.tblC_Nom_Prenomina.FirstOrDefault(x => x.id == prenominaID);
                //var periodoNomina = _context.tblRH_BN_EstatusPeriodos.FirstOrDefault(x => x.anio == prenomina.year && x.tipo_nomina == prenomina.tipoNomina && x.periodo == prenomina.periodo);
                var periodoNomina = _context.tblRH_BN_EstatusPeriodos.FirstOrDefault(x => x.anio == prenomina.year && x.tipo_nomina == ((tipoNominaPropuestaEnum)prenomina.tipoNomina == tipoNominaPropuestaEnum.LIQUIDACION_QUINCENAL ? 4 : prenomina.tipoNomina) && x.periodo == prenomina.periodo);
                var detalles = _context.tblC_Nom_PreNomina_Det.Where(x => x.prenominaID == prenominaID).OrderBy(x => x.empleadoNombre).ToList();

                List<tblC_Nom_PreNomina_DetDTO> listaPrenominaFaltantes = new List<tblC_Nom_PreNomina_DetDTO>();
                foreach (var item2 in detalles)
                {
                    tblC_Nom_PreNomina_DetDTO datosPrenominaFaltantes = new tblC_Nom_PreNomina_DetDTO();
                    var fechaIngreso = _context.tblRH_EK_Empleados.Where(x => x.clave_empleado == item2.empleadoCve).FirstOrDefault().fecha_antiguedad;
                    var ultimoContrato = _context.tblRH_EK_Contratos_Empleados.Where(e => e.esActivo.Value && e.clave_empleado == item2.empleadoCve).OrderByDescending(e => e.id_contrato_empleado).FirstOrDefault().clave_duracion;
                    var nombreContrato = _context.tblRH_EK_Empl_Duracion_Contrato.FirstOrDefault(e => e.esActivo && e.clave_duracion == ultimoContrato);
                    if (nombreContrato != null)
                    {
                        datosPrenominaFaltantes.tipoContrato = nombreContrato.nombre;
                    }
                    else
                    {
                        datosPrenominaFaltantes.tipoContrato = "";
                    }


                    datosPrenominaFaltantes.prenominaID = item2.prenominaID;
                    datosPrenominaFaltantes.empleadoCve = item2.empleadoCve;
                    datosPrenominaFaltantes.fechaIngreso = fechaIngreso ?? null;


                    listaPrenominaFaltantes.Add(datosPrenominaFaltantes);
                }

                foreach (var item in detalles)
                {
                    var prenominaIdParaCC = _context.tblC_Nom_Prenomina.FirstOrDefault(x => x.id == item.prenominaID);
                    var histFormatoCambio = _context.tblRH_FormatoCambio.Where(x => x.Aprobado && x.FechaInicioCambio <= periodoNomina.fecha_limite && x.Clave_Empleado == item.empleadoCve).OrderByDescending(x => x.FechaInicioCambio).FirstOrDefault();
                    if (histFormatoCambio != null) { item.puesto = histFormatoCambio.Puesto; }
                    var tipoNomina = prenomina.tipoNomina;

                    if (tipoNomina == (int)TipoNominaEnum.quincenal)
                        item.sueldoSemanal *= 2;
                    else if (tipoNomina == (int)TipoNominaEnum.semanal)
                    {
                        double sueldo;
                        sueldo = Convert.ToDouble(item.nominaBase);
                        item.sueldoSemanal = Convert.ToDecimal((sueldo / 7) * 30.4);
                    }
                    item.cc = prenominaIdParaCC.CC ?? string.Empty;
                }


                var autorizantes = _context.tblC_Nom_PreNomina_Aut.Where(x => x.prenominaID == prenominaID).OrderBy(x => x.orden).ToList();
                var cc = _context.tblP_CC.Where(x => x.estatus).FirstOrDefault(x => x.cc == (prenomina.CC == "180-A" ? "180" : (prenomina.CC == "187-A" ? "187" : prenomina.CC)));
                var realizo = _context.tblP_Usuario.FirstOrDefault(x => x.id == prenomina.usuarioCapturaID);
                var empleadosID = detalles.Select(x => x.empleadoCve).ToList();
                var fechaStr = GetPeriodoNomina(prenomina.year, prenomina.periodo, prenomina.tipoNomina);

                var empresa = vSesiones.sesionEmpresaActual;

                var stringEmpleados = "(";
                for (int i = 0; i < empleadosID.Count(); i++)
                {
                    if (i == empleadosID.Count() - 1) stringEmpleados += empleadosID[i].ToString() + ")";
                    else stringEmpleados += empleadosID[i].ToString() + ",";
                }

                var result = _context.Select<DepartamentoEmpleadoDTO>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = string.Format(
                    @"SELECT 
	                    DET.clave_empleado, 
	                    DET.nombre, 
	                    DET.ape_paterno, 
	                    DET.ape_materno, 
	                    DET.clave_depto, 
	                    ISNULL((SELECT desc_depto FROM tblRH_EK_Departamentos WHERE clave_depto = DET.clave_depto), ' ') AS desc_depto, 
	                    ISNULL((SELECT TOP 1 descripcion FROM tblP_CC WHERE cc = INC.cc), ' ') AS direccion, INC.cc,
	                    ISNULL((SELECT sindicato FROM tblRH_EK_Empleados WHERE clave_empleado = DET.clave_empleado), 'N') AS sindicato
                    FROM 
	                    tblRH_BN_Incidencia_det DET LEFT JOIN tblRH_BN_Incidencia INC ON DET.incidenciaID = INC.id
                    WHERE 
	                    INC.periodo = {0} AND INC.anio = {1} AND INC.tipo_nomina = {2} AND INC.cc = '{3}' AND clave_empleado IN {4}",
                    prenomina.periodo.ToString(), prenomina.year.ToString(), prenomina.tipoNomina.ToString(), (prenomina.CC == "180-A" ? "180" : (prenomina.CC == "187-A" ? "187" : prenomina.CC)), stringEmpleados)
                }).ToList();

                if (result.Count() == 0) 
                {
                    var _empleados = _context.tblRH_EK_Empleados.Where(x => empleadosID.Contains(x.clave_empleado)).ToList();
                    var clavesDepto = _empleados.Select(x => Int32.Parse(x.clave_depto)).ToList();
                    var _departamentos = _context.tblRH_EK_Departamentos.Where(x => clavesDepto.Contains(x.clave_depto)).ToList();
                    foreach (var item in detalles) 
                    {
                        var _empleado = _empleados.FirstOrDefault(x => x.clave_empleado == item.empleadoCve);
                        var _departamento = _departamentos.FirstOrDefault(x => x.clave_depto.ToString() == _empleado.clave_depto);
                        DepartamentoEmpleadoDTO auxiliar = new DepartamentoEmpleadoDTO();
                        auxiliar.ape_materno = _empleado.ape_materno;
                        auxiliar.ape_paterno = _empleado.ape_paterno;
                        auxiliar.cc = _empleado.cc_contable;
                        auxiliar.clave_depto = Int32.Parse(_empleado.clave_depto);
                        auxiliar.clave_empleado = item.empleadoCve;
                        auxiliar.desc_depto = _departamento.desc_depto;
                        auxiliar.direccion = _departamento.direccion;
                        auxiliar.nombre = _empleado.nombre;
                        auxiliar.sindicato = _empleado.sindicato;
                        result.Add(auxiliar);
                    }
                }

                foreach (var item in result)
                {
                    int clave_depto = 0;
                    var histFormatoCambio = _context.tblRH_FormatoCambio.Where(x => x.Aprobado && x.FechaInicioCambio <= periodoNomina.fecha_limite && x.Clave_Empleado == item.clave_empleado).OrderByDescending(x => x.FechaInicioCambio).FirstOrDefault();
                    if (histFormatoCambio == null || histFormatoCambio.ClaveDepartamento == null)
                    {
                        var empleado = result.FirstOrDefault(x => x.clave_empleado == item.clave_empleado);
                        clave_depto = empleado.clave_depto;
                    }
                    else
                    {
                        clave_depto = histFormatoCambio.ClaveDepartamento ?? 0;
                    }

                    var departamento = _context.Select<tblRH_EK_Departamentos>(new DapperDTO
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = string.Format(@"SELECT * FROM tblRH_EK_Departamentos WHERE clave_depto = {0}", clave_depto.ToString())
                    }).FirstOrDefault();
                    item.clave_depto = clave_depto;
                    item.desc_depto = departamento.desc_depto;
                }

                var departamentos = result.Select(x => x.desc_depto.ToUpper()).Distinct().OrderBy(x => x).ToList();

                using (ExcelPackage excel = new ExcelPackage())
                {
                    for (int j = 0; j < departamentos.Count(); j++)
                    {
                        var hoja1 = excel.Workbook.Worksheets.Add(departamentos[j]);
                        var empleadosDepartamento = result.Where(x => x.desc_depto == departamentos[j]).Select(x => x.clave_empleado).ToList();
                        var detallesDepartamento = detalles.Where(x => empleadosDepartamento.Contains(x.empleadoCve)).ToList();
                        string tipoNominaDesc = prenomina.tipoNomina == 1 ? "SUELDO BÁSICO SEMANAL" : "SUELDO BÁSICO QUICNENAL";

                        //List<string[]> headerRow = new List<string[]>() { 
                        //    new string[] { 
                        //        "No.","CC", "NOMBRE DEL EMPLEADO", "IDENTIFICACION", "CARGO COLABORADOR", tipoNominaDesc, "DIAS LIQUIDADOS", "BASE NOMINA", "VACACIONES", "VIÁTICOS", "IMPORTE DIAS EXTRA",
                        //        "IMPORTE HRS EXTRA", "OTROS DEVENGADOS", "TOTAL DEVENGADOS", "SALUD", "PENSION", "FONDO DE SOLIDARIDAD", "RETENCIÓN EN LA FUENTE", "AUXILIO DE TRANSPORTE", "PRÉSTAMO", 
                        //        "OTRAS DEDUCCIONES", "TOTAL DEDUCCIONES", "PAGO"
                        //    } 
                        //};



                        //List<string[]> headerRow2 = new List<string[]>() { 
                        //    new string[] { 
                        //        "No.","CC", "NOMBRE DEL EMPLEADO", "IDENTIFICACION", "CARGO COLABORADOR", "FECHA DE INGRESO", "TIPO DE CONTRATO", "SALARIO MENSUAL", "DIAS LIQUIDADOS", "BASE", "AUXILIO DE TRANSPORTE", "VIÁTICOS", "TOTAL DEVENGADO",
                        //         "SALUD", "PENSION", "FONDO DE SOLIDARIDAD", "RETENCIÓN EN LA FUENTE",  "OTRAS DEDUCCIONES", "TOTAL DEDUCCIONES", "PAGO",
                        //    } 
                        //};

                        // int rowIndex = 3;  
                        //int colIndex = 3;  
                        //int PixelTop = 88;  
                        //int PixelLeft = 129;  
                        //int Height = 320;  
                        //int Width = 200;
                        //Image img = Image.FromFile(@"~/Content/img/logo/colombia.png");  
                        //ExcelPicture pic = hoja1.Drawings.AddPicture("logo", img);  
                        //pic.SetPosition(rowIndex, 0, colIndex, 0);  
                        ////pic.SetPosition(PixelTop, PixelLeft);  
                        //pic.SetSize(Height, Width);  


                        //hoja1.Cells["A6:T6"].LoadFromArrays(headerRow2);
                        //hoja1.Cells["A5:T5"].Merge = true;
                        hoja1.Cells["A5:AN5"].Style.Font.Size = 10;
                        hoja1.Cells["A5:AN5"].Style.Font.Bold = true;
                        hoja1.Cells["A6:AN6"].Style.Font.Size = 10;
                        hoja1.Cells["A6:AN6"].Style.Font.Bold = true;
                        //hoja1.Cells["A5:T5"].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                        //hoja1.Cells["A5:T5"].Style.Fill.BackgroundColor.SetColor(Color.Gray);
                        hoja1.Cells["A5:AN5"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        hoja1.Cells["A5:AN5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        hoja1.Cells["A6:AN6"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        hoja1.Cells["A6:AN6"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        //hoja1.Cells["A6:T6"].Style.Font.Size = 26;
                        //hoja1.Cells["A6:T6"].Style.Font.Bold = true;
                        hoja1.Cells["A5:AN5"].Style.Font.Color.SetColor(Color.Black);
                        hoja1.Cells["A6:AN6"].Style.Font.Color.SetColor(Color.Black);
                        hoja1.Cells["A5:AN5"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells["A6:AN6"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells["A5:AN5"].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                        hoja1.Cells["A6:AN6"].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                        hoja1.Cells["A5:AN5"].Style.Border.BorderAround(ExcelBorderStyle.Dotted);
                        hoja1.Cells["A6:AN6"].Style.Border.BorderAround(ExcelBorderStyle.Dotted);

                        hoja1.Cells["A5:A6"].Merge = true;
                        hoja1.Cells["A5:A6"].Value = "No.";
                        hoja1.Cells["B5:B6"].Merge = true;
                        hoja1.Cells["B5:B6"].Value = "CC";
                        hoja1.Cells["C5:C6"].Merge = true;
                        hoja1.Cells["C5:C6"].Value = "NOMBRE DEL EMPLEADO";
                        hoja1.Cells["D5:D6"].Merge = true;
                        hoja1.Cells["D5:D6"].Value = "IDENTIFICACION";
                        hoja1.Cells["D5:D6"].AutoFitColumns();
                        hoja1.Cells["E5:E6"].Merge = true;
                        hoja1.Cells["E5:E6"].Value = "CARGO COLABORADOR";
                        hoja1.Cells["F5:F6"].Merge = true;
                        hoja1.Cells["F5:F6"].Value = "FECHA DE INGRESO";
                        hoja1.Cells["G5:G6"].Merge = true;
                        hoja1.Cells["G5:G6"].Value = "TIPO DE CONTRATO";
                        hoja1.Cells["H5:H6"].Merge = true;
                        hoja1.Cells["H5:H6"].Value = "SALARIO MENSUAL";
                        hoja1.Cells["I5:I6"].Merge = true;
                        hoja1.Cells["I5:I6"].Value = "IBC MENSUAL 70%";
                        hoja1.Cells["J5:J6"].Merge = true;
                        hoja1.Cells["J5:J6"].Value = "IBC QUINCENA";
                        hoja1.Cells["K5:K6"].Merge = true;
                        hoja1.Cells["K5:K6"].Value = "DIAS LIQUIDADOS";
                        hoja1.Cells["L5:L6"].Merge = true;
                        hoja1.Cells["L5:L6"].Value = "DIAS VACACIONES";

                        hoja1.Cells["M5:AF5"].Merge = true;
                        hoja1.Cells["M5:AF5"].Value = "DEVENGADO";
                        hoja1.Cells["M6"].Value = "BASE";
                        hoja1.Cells["N6"].Value = "AUXILIO DE TRANSPORTE";
                        hoja1.Cells["O6"].Value = "DIA REMUNERADO";
                        hoja1.Cells["P6"].Value = "BONO";
                        hoja1.Cells["Q6"].Value = "VIÁTICOS";
                        hoja1.Cells["R6"].Value = "CESANTIA";
                        hoja1.Cells["S6"].Value = "INTERES CESANTIA";
                        hoja1.Cells["T6"].Value = "RETROACTIVO";
                        hoja1.Cells["U6"].Value = "PRIMA";
                        hoja1.Cells["V6"].Value = "VACACIONES";
                        hoja1.Cells["W6"].Value = "IMPORTE VACACIONES";
                        hoja1.Cells["X6"].Value = "INCAPACIDADES";
                        hoja1.Cells["Y6"].Value = "IMPORTE INCAPACIDADES";
                        hoja1.Cells["Z6"].Value = "LICENCIA DE LUTO";
                        hoja1.Cells["AA6"].Value = "INDEMNIZACIÓN";
                        hoja1.Cells["AB6"].Value = "HR. EXTRA DIURNA";
                        hoja1.Cells["AC6"].Value = "HR. EXTRA DIURNA DOMINICALES";
                        hoja1.Cells["AD6"].Value = "HR. NOCTURNAS";
                        hoja1.Cells["AE6"].Value = "DÍAS EXTRA";
                        hoja1.Cells["AF6"].Value = "BONO RECREACIÓN";

                        hoja1.Cells["AG5:AG6"].Merge = true;
                        hoja1.Cells["AG5:AG6"].Value = "TOTAL DEVENGADO";

                        hoja1.Cells["AH5:AM5"].Merge = true;
                        hoja1.Cells["AH5:AM5"].Value = "DEDUCCIONES";
                        hoja1.Cells["AH6"].Value = "SALUD";
                        hoja1.Cells["AI6"].Value = "PENSION";
                        hoja1.Cells["AJ6"].Value = "FONDO DE SOLIDARIDAD";
                        hoja1.Cells["AK6"].Value = "RETENCIÓN EN LA FUENTE";
                        hoja1.Cells["AL6"].Value = "OTRAS DEDUCCIONES";
                        hoja1.Cells["AM6"].Value = "TOTAL DEDUCCIONES";

                        hoja1.Cells["AN5:AN6"].Merge = true;
                        hoja1.Cells["AN5:AN6"].Value = "PAGO";

                        switch (empresa)
                        {
                            case 1: hoja1.Cells[1, 8].Value = "SOLUCIONES INDUSTRIALES SA DE CV"; break;
                            default: hoja1.Cells[1, 8].Value = "SOLUCIONES INDUSTRIALES SA DE CV"; break;
                        }
                        hoja1.Cells[2, 8].Value = ((tipoNominaPropuestaEnum)prenomina.tipoNomina).GetDescription() + " " + prenomina.periodo + ": " + fechaStr;
                        hoja1.Cells[3, 8].Value = departamentos[j].ToUpper().Trim();
                        hoja1.Cells[4, 8].Value = "[" + cc.cc + "] " + cc.descripcion.Trim();
                        hoja1.Cells[1, 8].Style.Font.Bold = true;
                        hoja1.Cells[1, 8].Style.Font.Size = 10;
                        hoja1.Cells[1, 8].Style.Font.Name = "Arial";
                        hoja1.Cells[2, 8].Style.Font.Bold = true;
                        hoja1.Cells[2, 8].Style.Font.Size = 10;
                        hoja1.Cells[2, 8].Style.Font.Name = "Arial";
                        hoja1.Cells[3, 8].Style.Font.Bold = true;
                        hoja1.Cells[3, 8].Style.Font.Size = 10;
                        hoja1.Cells[3, 8].Style.Font.Name = "Arial";
                        hoja1.Cells[4, 8].Style.Font.Bold = true;
                        hoja1.Cells[4, 8].Style.Font.Size = 10;
                        hoja1.Cells[4, 8].Style.Font.Name = "Arial";
                        hoja1.Cells["H1:L1"].Merge = true;
                        hoja1.Cells["H1:L1"].Style.Font.Color.SetColor(Color.Black);
                        hoja1.Cells["H1:L1"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells["H1:L1"].Style.Fill.BackgroundColor.SetColor(Color.Yellow);
                        hoja1.Cells["H2:L2"].Merge = true;
                        hoja1.Cells["H2:L2"].Style.Font.Color.SetColor(Color.Black);
                        hoja1.Cells["H2:L2"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells["H2:L2"].Style.Fill.BackgroundColor.SetColor(Color.Yellow);
                        hoja1.Cells["H3:L3"].Merge = true;
                        hoja1.Cells["H3:L3"].Style.Font.Color.SetColor(Color.Black);
                        hoja1.Cells["H3:L3"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells["H3:L3"].Style.Fill.BackgroundColor.SetColor(Color.Yellow);
                        hoja1.Cells["H4:L4"].Merge = true;
                        hoja1.Cells["H4:L4"].Style.Font.Color.SetColor(Color.Black);
                        hoja1.Cells["H4:L4"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells["H4:L4"].Style.Fill.BackgroundColor.SetColor(Color.Yellow);

                        var cellData = new List<object[]>();

                        int indexOrden = 1;
                        foreach (var item in detallesDepartamento)
                        {
                            cellData.Add(new object[] {
                                indexOrden,
                                item.cc,
                                item.empleadoNombre,
                                item.empleadoCve,                                
                                item.puesto,
                                Convert.ToDateTime(listaPrenominaFaltantes.FirstOrDefault(x=>x.empleadoCve == item.empleadoCve).fechaIngreso ?? null).ToShortDateString(),
                                listaPrenominaFaltantes.FirstOrDefault(x=>x.empleadoCve==item.empleadoCve).tipoContrato ?? "",//Tipo contrato
                                item.sueldoSemanal, //Salario Mensual
                                "", //IBC MENSUAL
                                "", //IBC QUINCENAL
                                item.dias,
                                item.diasVacaciones,
                                item.nominaBase,
                                item.transporte,
                                item.dias, //DIA REMUNERADO
                                item.bonoZona, //BONO
                                item.pensionAlimenticia, //VIÁTICOS | ANTES => //item.otros,
                                item.cesantia = item.cesantia,
                                item.interesCesantia = item.interesCesantia,
                                item.retroactivo = item.retroactivo,
                                item.prima = item.prima,
                                item.primaVacacional = item.primaVacacional,
                                item.importeDiasVacaciones = item.importeDiasVacaciones,
                                item.diasIncapacidad = item.diasIncapacidad,
                                item.importeIncapacidad = item.importeIncapacidad,
                                item.licenciaLuto,
                                item.onp,
                                item.hrExtra = item.importeExtra,
                                item.hrExtraDiurnasDominicales = item.importeExtraDiurnasDominicales,
                                item.hrNocturnas = item.importeNocturnasExtra,
                                item.importeDiaExtra,
                                item.bonoRecreacion,
                                item.nominaBase + item.transporte + item.bonoZona + item.pensionAlimenticia + item.cesantia + item.interesCesantia + item.retroactivo + 
                                    item.prima + item.primaVacacional + item.importeDiasVacaciones + item.importeIncapacidad + item.importeExtra + 
                                    item.importeExtraDiurnasDominicales + item.importeNocturnasExtra + item.importeDiaExtra + item.licenciaLuto + item.onp + item.bonoRecreacion,
                                item.esSalud,
                                item.afp,
                                item.fsp,                                
                                item.retencion,                                                    
                                item.descuento,
                                item.esSalud + item.afp + item.fsp + item.retencion + item.descuento + item.prestamo,
                                (item.nominaBase + item.transporte + item.bonoZona + item.pensionAlimenticia + item.cesantia + item.interesCesantia + item.retroactivo + item.prima + item.primaVacacional + 
                                    item.importeDiasVacaciones + item.importeIncapacidad + item.importeExtra + item.importeExtraDiurnasDominicales + item.importeNocturnasExtra + 
                                    item.importeDiaExtra + item.licenciaLuto + item.onp + item.bonoRecreacion) - (item.esSalud + item.afp + item.fsp + item.retencion + item.descuento + item.prestamo)
                            });
                            indexOrden++;
                        }

                        cellData.Add(new object[] {
                                " ",
                                " ",
                                " ",
                                " ",  
                                " ",   
                                " ", //Fecha ingreso
                                " ", //Tipo contrato
                                detallesDepartamento.Sum(z => z.sueldoSemanal),
                                " ", //IBC MENSUAL
                                " ", //IBC QUINCENAL
                                detallesDepartamento.Sum(z => z.dias),
                                detallesDepartamento.Sum(z => z.diasVacaciones),
                                detallesDepartamento.Sum(z => z.nominaBase),
                                detallesDepartamento.Sum(z => z.transporte),
                                detallesDepartamento.Sum(z => z.dias),   //DIA REMUNERADO
                                detallesDepartamento.Sum(z => z.bonoZona),   //BONO
                                detallesDepartamento.Sum(z => z.pensionAlimenticia), // VIATICOS
                                detallesDepartamento.Sum(z => z.cesantia),
                                detallesDepartamento.Sum(z => z.interesCesantia),
                                detallesDepartamento.Sum(z => z.retroactivo),
                                detallesDepartamento.Sum(z => z.prima),
                                detallesDepartamento.Sum(z => z.primaVacacional),
                                detallesDepartamento.Sum(z => z.importeDiasVacaciones),
                                detallesDepartamento.Sum(z => z.diasIncapacidad),
                                detallesDepartamento.Sum(z => z.importeIncapacidad),
                                detallesDepartamento.Sum(z => z.licenciaLuto),
                                detallesDepartamento.Sum(z => z.onp),
                                detallesDepartamento.Sum(z => z.importeExtra),
                                detallesDepartamento.Sum(z => z.importeExtraDiurnasDominicales),
                                detallesDepartamento.Sum(z => z.importeNocturnasExtra),
                                detallesDepartamento.Sum(z => z.importeDiaExtra),
                                detallesDepartamento.Sum(z => z.bonoRecreacion),
                                detallesDepartamento.Sum(z => z.nominaBase) + detallesDepartamento.Sum(z => z.transporte) +
                                    detallesDepartamento.Sum(z => z.bonoZona) + detallesDepartamento.Sum(z => z.pensionAlimenticia) + detallesDepartamento.Sum(z => z.cesantia) + 
                                    detallesDepartamento.Sum(z => z.interesCesantia) + detallesDepartamento.Sum(z => z.retroactivo) + detallesDepartamento.Sum(z => z.prima) + 
                                    detallesDepartamento.Sum(z => z.primaVacacional) + detallesDepartamento.Sum(z => z.importeDiasVacaciones) + detallesDepartamento.Sum(z => z.importeIncapacidad) + 
                                    detallesDepartamento.Sum(z => z.importeExtra) + detallesDepartamento.Sum(z => z.importeExtraDiurnasDominicales) + detallesDepartamento.Sum(z => z.importeNocturnasExtra) + 
                                    detallesDepartamento.Sum(z => z.importeDiaExtra) + detallesDepartamento.Sum(z => z.licenciaLuto) + detallesDepartamento.Sum(z => z.onp) + 
                                    detallesDepartamento.Sum(z => z.bonoRecreacion),
                                detallesDepartamento.Sum(z => z.esSalud),
                                detallesDepartamento.Sum(z => z.afp),
                                detallesDepartamento.Sum(z => z.fsp),                               
                                detallesDepartamento.Sum(z => z.retencion),
                                detallesDepartamento.Sum(z => z.descuento),
                                detallesDepartamento.Sum(z => z.esSalud) + detallesDepartamento.Sum(z => z.afp) + detallesDepartamento.Sum(z => z.fsp) + detallesDepartamento.Sum(z => z.retencion) + 
                                    detallesDepartamento.Sum(z => z.descuento) + detallesDepartamento.Sum(z => z.prestamo),
                                (detallesDepartamento.Sum(z => z.nominaBase) + detallesDepartamento.Sum(z => z.transporte) +
                                    detallesDepartamento.Sum(z => z.bonoZona) + detallesDepartamento.Sum(z => z.pensionAlimenticia) + detallesDepartamento.Sum(z => z.cesantia) + 
                                    detallesDepartamento.Sum(z => z.interesCesantia) + detallesDepartamento.Sum(z => z.retroactivo) + detallesDepartamento.Sum(z => z.prima) + 
                                    detallesDepartamento.Sum(z => z.primaVacacional) + detallesDepartamento.Sum(z => z.importeDiasVacaciones) + 
                                    detallesDepartamento.Sum(z => z.importeIncapacidad) + detallesDepartamento.Sum(z => z.licenciaLuto) + detallesDepartamento.Sum(z => z.importeExtra) + 
                                    detallesDepartamento.Sum(z => z.onp) + detallesDepartamento.Sum(z => z.bonoRecreacion) + 
                                    detallesDepartamento.Sum(z => z.importeExtraDiurnasDominicales) + 
                                    detallesDepartamento.Sum(z => z.importeNocturnasExtra) + detallesDepartamento.Sum(z => z.importeDiaExtra)) -
                                        (detallesDepartamento.Sum(z => z.esSalud) + detallesDepartamento.Sum(z => z.afp) + detallesDepartamento.Sum(z => z.fsp) + detallesDepartamento.Sum(z => z.retencion) + 
                                        detallesDepartamento.Sum(z => z.descuento) + detallesDepartamento.Sum(z => z.prestamo))
                            });

                        hoja1.Cells[7, 1].LoadFromArrays(cellData);

                        var firmaRealizo = GlobalUtils.CrearFirmaDigital(prenomina.id, DocumentosEnum.Prenomina, realizo.id, TipoFirmaEnum.Autorizacion);

                        hoja1.Cells[8 + detallesDepartamento.Count() + 3, 4].Value = firmaRealizo;
                        hoja1.Cells[9 + detallesDepartamento.Count() + 3, 4].Value = "___________________________";
                        hoja1.Cells[10 + detallesDepartamento.Count() + 3, 4].Value = "ELABORÓ";
                        hoja1.Cells[11 + detallesDepartamento.Count() + 3, 4].Value = realizo.nombre + " " + realizo.apellidoPaterno + " " + realizo.apellidoMaterno;
                        hoja1.Cells[9 + detallesDepartamento.Count() + 3, 4].Style.Font.Bold = true;
                        hoja1.Cells[9 + detallesDepartamento.Count() + 3, 4].Style.Font.Size = 10;
                        hoja1.Cells[9 + detallesDepartamento.Count() + 3, 4].Style.Font.Name = "Arial";
                        hoja1.Cells[10 + detallesDepartamento.Count() + 3, 4].Style.Font.Bold = true;
                        hoja1.Cells[10 + detallesDepartamento.Count() + 3, 4].Style.Font.Size = 10;
                        hoja1.Cells[10 + detallesDepartamento.Count() + 3, 4].Style.Font.Name = "Arial";
                        hoja1.Cells[11 + detallesDepartamento.Count() + 3, 4].Style.Font.Bold = true;
                        hoja1.Cells[11 + detallesDepartamento.Count() + 3, 4].Style.Font.Size = 10;
                        hoja1.Cells[11 + detallesDepartamento.Count() + 3, 4].Style.Font.Name = "Arial";

                        for (int i = 1; i <= autorizantes.Count(); i++)
                        {
                            var cveEmpleado = autorizantes[(i - 1)].aprobadorClave;
                            var usuario = _context.tblP_Usuario.FirstOrDefault(x => x.id == cveEmpleado);
                            var firmaAutorizante = "";
                            if (autorizantes[(i - 1)].firma != null) firmaAutorizante = autorizantes[(i - 1)].firma;
                            hoja1.Cells[8 + detallesDepartamento.Count() + 3, (i + 1) * 4].Value = firmaAutorizante;
                            hoja1.Cells[9 + detallesDepartamento.Count() + 3, (i + 1) * 4].Value = "___________________________";
                            hoja1.Cells[10 + detallesDepartamento.Count() + 3, (i + 1) * 4].Value = "REVISÓ/AUTORIZÓ";
                            hoja1.Cells[11 + detallesDepartamento.Count() + 3, (i + 1) * 4].Value = usuario.nombre + " " + usuario.apellidoPaterno + " " + usuario.apellidoMaterno;

                            hoja1.Cells[9 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Bold = true;
                            hoja1.Cells[9 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Size = 10;
                            hoja1.Cells[9 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Name = "Arial";
                            hoja1.Cells[10 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Bold = true;
                            hoja1.Cells[10 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Size = 10;
                            hoja1.Cells[10 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Name = "Arial";
                            hoja1.Cells[11 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Bold = true;
                            hoja1.Cells[11 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Size = 10;
                            hoja1.Cells[11 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Name = "Arial";
                        }

                        hoja1.View.ZoomScale = 82;
                        hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 30].Style.Font.Size = 10;
                        hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 30].Style.Font.Name = "Arial";

                        //hoja1.Cells[6 + detallesDepartamento.Count(), 1, 7 + detallesDepartamento.Count(), 24].Style.Font.Size = 11;
                        //hoja1.Cells[6 + detallesDepartamento.Count(), 1, 7 + detallesDepartamento.Count(), 24].Style.Font.Bold = true;
                        //hoja1.Cells[6 + detallesDepartamento.Count(), 1, 7 + detallesDepartamento.Count(), 24].Style.Font.Name = "Arial";


                        hoja1.Cells[6 + detallesDepartamento.Count(), 1, 6 + detallesDepartamento.Count(), 24].Style.Font.Size = 10;
                        hoja1.Cells[6 + detallesDepartamento.Count(), 1, 6 + detallesDepartamento.Count(), 24].Style.Font.Bold = true;
                        hoja1.Cells[6 + detallesDepartamento.Count(), 1, 6 + detallesDepartamento.Count(), 24].Style.Font.Name = "Arial";


                        //convertirTotalPago = 

                        hoja1.Cells[7 + detallesDepartamento.Count(), 1, 7 + detallesDepartamento.Count(), 4].Merge = true;
                        hoja1.Cells[7 + detallesDepartamento.Count(), 1, 7 + detallesDepartamento.Count(), 4].Value = "Totales";
                        hoja1.Cells[7, 1, 7 + detallesDepartamento.Count(), 40].Style.Font.Size = 10;
                        hoja1.Cells[7, 1, 7 + detallesDepartamento.Count(), 40].Style.Font.Bold = true;
                        hoja1.Cells[7, 1, 7 + detallesDepartamento.Count(), 40].Style.Font.Name = "Arial";
                        hoja1.Cells[7, 1, 7 + detallesDepartamento.Count(), 40].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[7, 1, 7 + detallesDepartamento.Count(), 40].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[7, 1, 7 + detallesDepartamento.Count(), 40].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[7, 1, 7 + detallesDepartamento.Count(), 40].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[7, 1, 6 + detallesDepartamento.Count(), 40].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[7, 1, 6 + detallesDepartamento.Count(), 40].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[7, 1, 6 + detallesDepartamento.Count(), 40].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[7, 1, 6 + detallesDepartamento.Count(), 40].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[7, 1, 6 + detallesDepartamento.Count(), 40].Style.Font.Size = 10;
                        hoja1.Cells[7, 1, 6 + detallesDepartamento.Count(), 40].Style.Font.Bold = false;
                        hoja1.Cells[7, 1, 6 + detallesDepartamento.Count(), 40].Style.Font.Name = "Arial";
                        hoja1.Cells[7, 1, 6 + detallesDepartamento.Count(), 40].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        hoja1.Cells[7, 1, 6 + detallesDepartamento.Count(), 40].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        hoja1.Cells[7, 4, 7 + detallesDepartamento.Count(), 40].Style.Numberformat.Format = "$###,###,##0.00";
                        hoja1.Cells[7, 8, 7 + detallesDepartamento.Count(), 40].Style.Numberformat.Format = "$###,###,##0.00";

                        hoja1.Cells[7 + detallesDepartamento.Count(), 8, 7 + detallesDepartamento.Count(), 40].Style.Font.Color.SetColor(Color.Black);
                        hoja1.Cells[7 + detallesDepartamento.Count(), 8, 7 + detallesDepartamento.Count(), 40].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[7 + detallesDepartamento.Count(), 8, 7 + detallesDepartamento.Count(), 40].Style.Fill.BackgroundColor.SetColor(Color.LightGray);

                        hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 40].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 40].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 40].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 40].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        //hoja1.Cells[5, 8].Style.Font.Bold = true;

                        for (int i = 0; i <= detallesDepartamento.Count() + 1; i++) { hoja1.Row(i + 5).Height = 40; }

                        hoja1.Cells[7, 1, 6 + detallesDepartamento.Count(), 40].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        hoja1.Cells[7, 1, 6 + detallesDepartamento.Count(), 40].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        //hoja1.Cells[7, 1, 5 + detallesDepartamento.Count(), 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        //hoja1.Cells[7, 4, 5 + detallesDepartamento.Count(), 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        //hoja1.Cells[6 + detallesDepartamento.Count(), 1, 6 + detallesDepartamento.Count(), 24].Style.Font.Bold = true;
                        //hoja1.Cells[6 + detallesDepartamento.Count(), 1, 6 + detallesDepartamento.Count(), 24].Style.Font.Size = 12;

                        //hoja1.Column(24).Style.WrapText = true;
                        //hoja1.Column(24).Width = 100;

                        string totalPagoFinal = hoja1.Cells[7 + detallesDepartamento.Count(), 24].Value.ToString();

                        double totalPago = 0;
                        totalPago = Convert.ToDouble(totalPagoFinal);

                        string convertirTotalPago = toText(totalPago);

                        hoja1.Cells[10 + detallesDepartamento.Count(), 5, 10 + detallesDepartamento.Count(), 14].Merge = true;
                        hoja1.Cells[10 + detallesDepartamento.Count(), 5, 10 + detallesDepartamento.Count(), 14].Value = convertirTotalPago + " M/Cte.";
                        hoja1.Cells[10 + detallesDepartamento.Count(), 5, 10 + detallesDepartamento.Count(), 14].Style.Font.Color.SetColor(Color.Black);
                        hoja1.Cells[10 + detallesDepartamento.Count(), 5, 10 + detallesDepartamento.Count(), 14].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[10 + detallesDepartamento.Count(), 5, 10 + detallesDepartamento.Count(), 14].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                        hoja1.Cells[10 + detallesDepartamento.Count(), 5, 10 + detallesDepartamento.Count(), 14].Style.Font.Size = 14;
                        hoja1.Cells[10 + detallesDepartamento.Count(), 5, 10 + detallesDepartamento.Count(), 14].Style.Font.Bold = true;
                        hoja1.Cells[10 + detallesDepartamento.Count(), 5, 10 + detallesDepartamento.Count(), 14].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[10 + detallesDepartamento.Count(), 5, 10 + detallesDepartamento.Count(), 14].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[10 + detallesDepartamento.Count(), 5, 10 + detallesDepartamento.Count(), 14].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[10 + detallesDepartamento.Count(), 5, 10 + detallesDepartamento.Count(), 14].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[10 + detallesDepartamento.Count(), 5, 10 + detallesDepartamento.Count(), 14].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        hoja1.Cells[10 + detallesDepartamento.Count(), 5, 10 + detallesDepartamento.Count(), 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;



                        hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 60].AutoFitColumns();

                        //hoja1.View.FreezePanes(7, 6);

                        excel.Compression = CompressionLevel.BestSpeed;
                    }

                    var bytes = new MemoryStream();
                    using (var exportData = new MemoryStream())
                    {
                        excel.SaveAs(exportData);
                        bytes = exportData;
                    }

                    return bytes;
                }
            }
            catch (Exception e)
            {
                return null;
            }
        }

        private string toText(double value)
        {
            string Num2Text = "";
            value = Math.Truncate(value);
            if (value == 0) Num2Text = "CERO";
            else if (value == 1) Num2Text = "UNO";
            else if (value == 2) Num2Text = "DOS";
            else if (value == 3) Num2Text = "TRES";
            else if (value == 4) Num2Text = "CUATRO";
            else if (value == 5) Num2Text = "CINCO";
            else if (value == 6) Num2Text = "SEIS";
            else if (value == 7) Num2Text = "SIETE";
            else if (value == 8) Num2Text = "OCHO";
            else if (value == 9) Num2Text = "NUEVE";
            else if (value == 10) Num2Text = "DIEZ";
            else if (value == 11) Num2Text = "ONCE";
            else if (value == 12) Num2Text = "DOCE";
            else if (value == 13) Num2Text = "TRECE";
            else if (value == 14) Num2Text = "CATORCE";
            else if (value == 15) Num2Text = "QUINCE";
            else if (value < 20) Num2Text = "DIECI" + toText(value - 10);
            else if (value == 20) Num2Text = "VEINTE";
            else if (value < 30) Num2Text = "VEINTI" + toText(value - 20);
            else if (value == 30) Num2Text = "TREINTA";
            else if (value == 40) Num2Text = "CUARENTA";
            else if (value == 50) Num2Text = "CINCUENTA";
            else if (value == 60) Num2Text = "SESENTA";
            else if (value == 70) Num2Text = "SETENTA";
            else if (value == 80) Num2Text = "OCHENTA";
            else if (value == 90) Num2Text = "NOVENTA";
            else if (value < 100) Num2Text = toText(Math.Truncate(value / 10) * 10) + " Y " + toText(value % 10);
            else if (value == 100) Num2Text = "CIEN";
            else if (value < 200) Num2Text = "CIENTO " + toText(value - 100);
            else if ((value == 200) || (value == 300) || (value == 400) || (value == 600) || (value == 800)) Num2Text = toText(Math.Truncate(value / 100)) + "CIENTOS";
            else if (value == 500) Num2Text = "QUINIENTOS";
            else if (value == 700) Num2Text = "SETECIENTOS";
            else if (value == 900) Num2Text = "NOVECIENTOS";
            else if (value < 1000) Num2Text = toText(Math.Truncate(value / 100) * 100) + " " + toText(value % 100);
            else if (value == 1000) Num2Text = "MIL";
            else if (value < 2000) Num2Text = "MIL " + toText(value % 1000);
            else if (value < 1000000)
            {
                Num2Text = toText(Math.Truncate(value / 1000)) + " MIL";
                if ((value % 1000) > 0) Num2Text = Num2Text + " " + toText(value % 1000);
            }

            else if (value == 1000000) Num2Text = "UN MILLON";
            else if (value < 2000000) Num2Text = "UN MILLON " + toText(value % 1000000);
            else if (value < 1000000000000)
            {
                Num2Text = toText(Math.Truncate(value / 1000000)) + " MILLONES ";
                if ((value - Math.Truncate(value / 1000000) * 1000000) > 0) Num2Text = Num2Text + " " + toText(value - Math.Truncate(value / 1000000) * 1000000);
            }

            else if (value == 1000000000000) Num2Text = "UN BILLON";
            else if (value < 2000000000000) Num2Text = "UN BILLON " + toText(value - Math.Truncate(value / 1000000000000) * 1000000000000);

            else
            {
                Num2Text = toText(Math.Truncate(value / 1000000000000)) + " BILLONES";
                if ((value - Math.Truncate(value / 1000000000000) * 1000000000000) > 0) Num2Text = Num2Text + " " + toText(value - Math.Truncate(value / 1000000000000) * 1000000000000);
            }
            return Num2Text;

        }

        public MemoryStream crearExcelPrenominasPorPeriodo(int anio, tipoNominaPropuestaEnum tipoNomina, int periodo, int banco)
        {
            try
            {
                List<tblC_Nom_Prenomina> prenominas = new List<tblC_Nom_Prenomina>();
                var centrosCostoAplica = _context.tblC_Nom_CatSolicitudCheque.Where(x => x.tipoSolicitudCheque == banco && x.tipoNomina == (int)tipoNomina).Select(x => x.cc).ToList();
                prenominas = _context.tblC_Nom_Prenomina.Where(x => x.year == anio && x.tipoNomina == (int)tipoNomina && x.periodo == periodo && x.estatus == 1 && centrosCostoAplica.Contains(x.CC)).ToList();

                prenominas = _context.tblC_Nom_Prenomina.Where(x => x.year == anio && x.tipoNomina == (int)tipoNomina && x.periodo == periodo && x.estatus == 1).ToList();
                List<int> prenominasIDs = prenominas.Select(x => x.id).ToList();

                var detalles = _context.tblC_Nom_PreNomina_Det.Where(x => prenominasIDs.Contains(x.prenominaID)).OrderBy(x => x.empleadoNombre).ToList();
                var empleadosID = detalles.Select(x => x.empleadoCve).ToList();

                var fechaStr = GetPeriodoNomina(anio, periodo, (int)tipoNomina);

                var empresa = vSesiones.sesionEmpresaActual;

                var stringEmpleados = "(";
                for (int i = 0; i < empleadosID.Count(); i++)
                {
                    if (i == empleadosID.Count() - 1) stringEmpleados += empleadosID[i].ToString() + ")";
                    else stringEmpleados += empleadosID[i].ToString() + ",";
                }

                using (ExcelPackage excel = new ExcelPackage())
                {
                    for (int j = 0; j < prenominas.Count(); j++)
                    {
                        var prenomina = prenominas[j];
                        var autorizantes = _context.tblC_Nom_PreNomina_Aut.Where(x => x.prenominaID == prenomina.id).OrderBy(x => x.orden).ToList();
                        var cc = _context.tblP_CC.Where(x => x.estatus).FirstOrDefault(x => x.cc == (prenomina.CC == "180-A" ? "180" : (prenomina.CC == "187-A" ? "187" : prenomina.CC)));
                        var realizo = _context.tblP_Usuario.FirstOrDefault(x => x.id == prenomina.usuarioCapturaID);
                        var ccCatalogo = _context.tblC_Nom_CatalogoCC.FirstOrDefault(x => x.cc == prenomina.CC);

                        var hoja1 = excel.Workbook.Worksheets.Add(ccCatalogo == null ? cc.descripcion : ccCatalogo.ccDescripcion);
                        var detallesDepartamento = detalles.Where(x => x.prenominaID == prenomina.id).ToList();
                        string tipoNominaDesc = prenomina.tipoNomina == 1 ? "SUELDO SEMANAL" : "SUELDO QUICNENAL";

                        List<string[]> headerRow = new List<string[]>() { 
                            new string[] { 
                                "No.", "CODIGO EMPLEADO", "NOMBRE DEL TRABAJADOR", "PUESTO", tipoNominaDesc, "DIAS", "BASE NOMINA", "DIAS VAC", "BASE VACACIONES", "DESCTOS", "APOYO COLECTIVO", "PRESTAMO", "AXA", "FAMSA", "PENSION", 
                                "FONACOT", "INFONAVIT","SINDICATO", "2.5% FONDO AHORRO", "TOTAL BASE NOMINA", " ", "COMPLEMENTO DE NOMINA", "2.5% FONDO AHORRO", " BONO ZONA", 
                                "BONO DE PRODUCCION", "OTROS", "PRIMA VACACIONAL", "PRIMA DOMINICAL", "HORAS EXTRAS", "Valor Hrs Extra", "IMPORTE DE HRS EXTRAS", "DIAS EXTRAS", 
                                "Valor Dia Extra", "IMPORTE DE DIAS EXTRAS", "DIAS FESTIVOS", "Valor Dia Festivo", "IMPORTE DE DIAS FESTIVOS", "TOTAL DE COMPLEMENTO", " ", "TOTAL A PAGAR", "%", "TOTAL REAL A PAGAR", "VALES DESPENSA", 
                                "TOTAL DEPOSITO", "OBSERVACIONES"
                            } 
                        };

                        hoja1.Cells["A5:AR5"].LoadFromArrays(headerRow);
                        hoja1.Cells["A5:AR5"].Style.WrapText = true;
                        hoja1.Cells["A5:AR5"].Style.Font.Bold = true;
                        hoja1.Cells["A5:AR5"].Style.Font.Size = 10;
                        hoja1.Cells["A5:AR5"].Style.Font.Name = "Arial";
                        hoja1.Cells["A5:AR5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        switch (empresa)
                        {
                            case 1: hoja1.Cells[1, 3].Value = "SOLUCIONES INDUSTRIALES SA DE CV"; break;
                            default: hoja1.Cells[1, 3].Value = "SOLUCIONES INDUSTRIALES SA DE CV"; break;
                        }
                        hoja1.Cells[2, 3].Value = ((tipoNominaPropuestaEnum)prenomina.tipoNomina).GetDescription() + " " + prenomina.periodo + ": " + fechaStr;
                        hoja1.Cells[3, 3].Value = "[" + cc.cc + "] " + (ccCatalogo == null ? cc.descripcion.Trim() : ccCatalogo.ccDescripcion);

                        hoja1.Cells[1, 3].Style.Font.Bold = true;
                        hoja1.Cells[1, 3].Style.Font.Size = 10;
                        hoja1.Cells[1, 3].Style.Font.Name = "Arial";
                        hoja1.Cells[2, 3].Style.Font.Bold = true;
                        hoja1.Cells[2, 3].Style.Font.Size = 10;
                        hoja1.Cells[2, 3].Style.Font.Name = "Arial";
                        hoja1.Cells[3, 3].Style.Font.Bold = true;
                        hoja1.Cells[3, 3].Style.Font.Size = 10;
                        hoja1.Cells[3, 3].Style.Font.Name = "Arial";
                        hoja1.Cells[4, 3].Style.Font.Bold = true;
                        hoja1.Cells[4, 3].Style.Font.Size = 10;
                        hoja1.Cells[4, 3].Style.Font.Name = "Arial";

                        var cellData = new List<object[]>();

                        int indexOrden = 1;
                        foreach (var item in detallesDepartamento)
                        {
                            cellData.Add(new object[] {
                                indexOrden,
                                item.empleadoCve,
                                item.empleadoNombre,
                                item.puesto,
                                item.sueldoSemanal,
                                item.dias,
                                item.nominaBase,
                                item.diasVacaciones,
                                item.nominaBaseVacaciones,
                                item.descuento,
                                item.apoyoColectivo,
                                item.prestamo,
                                item.axa,
                                item.descuentoFamsa,
                                item.pensionAlimenticia,
                                item.fonacot,
                                item.infonavit,
                                item.sindicato,
                                item.fondoAhorroNomina,
                                item.totalNomina,
                                " ",
                                item.complementoNomina,
                                item.fondoAhorroComplemento,
                                item.bonoZona,
                                item.bonoProduccion,
                                item.otros,
                                item.primaVacacional,
                                item.primaDominical,
                                item.hrExtra,
                                item.hrExtraValor,
                                item.importeExtra,
                                item.diaHrExtra,
                                item.diaExtraValor,
                                item.importeDiaExtra,
                                item.diaFestivo,
                                item.diaFestivoValor,
                                item.importeDiaFestivo,
                                item.totalComplemento,
                                " ",
                                item.totalPagar,
                                item.porcentajeTotalPagar * 100,
                                item.totalRealPagar,
                                item.valesDespensa,
                                item.totalDeposito,
                                item.observaciones
                            });
                            indexOrden++;
                        }

                        cellData.Add(new object[] {
                                " ",
                                " ",
                                " ",
                                " ",
                                detallesDepartamento.Sum(z => z.sueldoSemanal),
                                "",
                                detallesDepartamento.Sum(z => z.nominaBase),
                                "",
                                detallesDepartamento.Sum(z => z.nominaBaseVacaciones),
                                detallesDepartamento.Sum(z => z.descuento),
                                detallesDepartamento.Sum(z => z.apoyoColectivo),
                                detallesDepartamento.Sum(z => z.prestamo),
                                detallesDepartamento.Sum(z => z.axa),
                                detallesDepartamento.Sum(z => z.descuentoFamsa),
                                detallesDepartamento.Sum(z => z.pensionAlimenticia),
                                detallesDepartamento.Sum(z => z.fonacot),
                                detallesDepartamento.Sum(z => z.infonavit),
                                detallesDepartamento.Sum(z => z.sindicato),
                                detallesDepartamento.Sum(z => z.fondoAhorroNomina),
                                detallesDepartamento.Sum(z => z.totalNomina),
                                " ",
                                detallesDepartamento.Sum(z => z.complementoNomina),
                                detallesDepartamento.Sum(z => z.fondoAhorroComplemento),
                                detallesDepartamento.Sum(z => z.bonoZona),
                                detallesDepartamento.Sum(z => z.bonoProduccion),
                                detallesDepartamento.Sum(z => z.otros),
                                detallesDepartamento.Sum(z => z.primaVacacional),
                                detallesDepartamento.Sum(z => z.primaDominical),
                                detallesDepartamento.Sum(z => z.hrExtra),
                                " ",
                                detallesDepartamento.Sum(z => z.importeExtra),
                                detallesDepartamento.Sum(z => z.diaHrExtra),
                                " ",
                                detallesDepartamento.Sum(z => z.importeDiaExtra),
                                detallesDepartamento.Sum(z => z.diaFestivo),
                                " ",
                                detallesDepartamento.Sum(z => z.importeDiaFestivo),
                                detallesDepartamento.Sum(z => z.totalComplemento),
                                " ",
                                detallesDepartamento.Sum(z => z.totalPagar),
                                " ",
                                detallesDepartamento.Sum(z => z.totalRealPagar),
                                detallesDepartamento.Sum(z => z.valesDespensa),
                                detallesDepartamento.Sum(z => z.totalDeposito),
                                " ",
                            });

                        hoja1.Cells[6, 1].LoadFromArrays(cellData);

                        var firmaRealizo = GlobalUtils.CrearFirmaDigital(prenomina.id, DocumentosEnum.Prenomina, realizo.id, TipoFirmaEnum.Autorizacion);

                        hoja1.Cells[5 + detallesDepartamento.Count() + 3, 4].Value = firmaRealizo;
                        hoja1.Cells[6 + detallesDepartamento.Count() + 3, 4].Value = "___________________________";
                        hoja1.Cells[7 + detallesDepartamento.Count() + 3, 4].Value = "ELABORÓ";
                        hoja1.Cells[8 + detallesDepartamento.Count() + 3, 4].Value = realizo.nombre + " " + realizo.apellidoPaterno + " " + realizo.apellidoMaterno;
                        hoja1.Cells[6 + detallesDepartamento.Count() + 3, 4].Style.Font.Bold = true;
                        hoja1.Cells[6 + detallesDepartamento.Count() + 3, 4].Style.Font.Size = 10;
                        hoja1.Cells[6 + detallesDepartamento.Count() + 3, 4].Style.Font.Name = "Arial";
                        hoja1.Cells[7 + detallesDepartamento.Count() + 3, 4].Style.Font.Bold = true;
                        hoja1.Cells[7 + detallesDepartamento.Count() + 3, 4].Style.Font.Size = 10;
                        hoja1.Cells[7 + detallesDepartamento.Count() + 3, 4].Style.Font.Name = "Arial";
                        hoja1.Cells[8 + detallesDepartamento.Count() + 3, 4].Style.Font.Bold = true;
                        hoja1.Cells[8 + detallesDepartamento.Count() + 3, 4].Style.Font.Size = 10;
                        hoja1.Cells[8 + detallesDepartamento.Count() + 3, 4].Style.Font.Name = "Arial";

                        for (int i = 1; i <= autorizantes.Count(); i++)
                        {
                            var cveEmpleado = autorizantes[(i - 1)].aprobadorClave;
                            var usuario = _context.tblP_Usuario.FirstOrDefault(x => x.id == cveEmpleado);
                            var firmaAutorizante = "";
                            if (autorizantes[(i - 1)].firma != null) firmaAutorizante = autorizantes[(i - 1)].firma;
                            hoja1.Cells[5 + detallesDepartamento.Count() + 3, (i + 1) * 4].Value = firmaAutorizante;
                            hoja1.Cells[6 + detallesDepartamento.Count() + 3, (i + 1) * 4].Value = "___________________________";
                            hoja1.Cells[7 + detallesDepartamento.Count() + 3, (i + 1) * 4].Value = "REVISÓ/AUTORIZÓ";
                            hoja1.Cells[8 + detallesDepartamento.Count() + 3, (i + 1) * 4].Value = usuario.nombre + " " + usuario.apellidoPaterno + " " + usuario.apellidoMaterno;

                            hoja1.Cells[6 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Bold = true;
                            hoja1.Cells[6 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Size = 10;
                            hoja1.Cells[6 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Name = "Arial";
                            hoja1.Cells[7 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Bold = true;
                            hoja1.Cells[7 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Size = 10;
                            hoja1.Cells[7 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Name = "Arial";
                            hoja1.Cells[8 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Bold = true;
                            hoja1.Cells[8 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Size = 10;
                            hoja1.Cells[8 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Name = "Arial";
                        }

                        hoja1.View.ZoomScale = 82;
                        hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 45].Style.Font.Size = 10;
                        hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 45].Style.Font.Name = "Arial";

                        hoja1.Cells[7 + detallesDepartamento.Count(), 1, 7 + detallesDepartamento.Count(), 41].Style.Font.Size = 11;
                        hoja1.Cells[7 + detallesDepartamento.Count(), 1, 7 + detallesDepartamento.Count(), 41].Style.Font.Bold = true;
                        hoja1.Cells[7 + detallesDepartamento.Count(), 1, 7 + detallesDepartamento.Count(), 41].Style.Font.Name = "Arial";

                        hoja1.Cells[6, 5, 6 + detallesDepartamento.Count(), 5].Style.Numberformat.Format = "$###,###,##0.00";
                        hoja1.Cells[6, 7, 6 + detallesDepartamento.Count(), 7].Style.Numberformat.Format = "$###,###,##0.00";
                        hoja1.Cells[6, 10, 6 + detallesDepartamento.Count(), 20].Style.Numberformat.Format = "$###,###,##0.00";
                        hoja1.Cells[6, 22, 6 + detallesDepartamento.Count(), 28].Style.Numberformat.Format = "$###,###,##0.00";
                        hoja1.Cells[6, 30, 6 + detallesDepartamento.Count(), 31].Style.Numberformat.Format = "$###,###,##0.00";
                        hoja1.Cells[6, 33, 6 + detallesDepartamento.Count(), 38].Style.Numberformat.Format = "$###,###,##0.00";
                        hoja1.Cells[6, 40, 6 + detallesDepartamento.Count(), 40].Style.Numberformat.Format = "$###,###,##0.00";
                        hoja1.Cells[6, 41, 6 + detallesDepartamento.Count(), 45].Style.Numberformat.Format = "$###,###,##0.00";

                        hoja1.Cells[6, 6, 6 + detallesDepartamento.Count(), 6].Style.Numberformat.Format = "###,###,##0.00";
                        hoja1.Cells[6, 29, 6 + detallesDepartamento.Count(), 29].Style.Numberformat.Format = "###,###,##0.00";
                        hoja1.Cells[6, 41, 6 + detallesDepartamento.Count(), 41].Style.Numberformat.Format = "###,###,##0.00";

                        hoja1.Cells[4, 3].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[4, 3].Style.Fill.BackgroundColor.SetColor(1, 255, 153, 204);

                        hoja1.Cells[5, 1, 5, 4].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[5, 1, 5, 4].Style.Fill.BackgroundColor.SetColor(1, 192, 192, 192);
                        hoja1.Cells[5, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[5, 6].Style.Fill.BackgroundColor.SetColor(1, 192, 192, 192);

                        hoja1.Cells[5, 8, 5, 9].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[5, 8, 5, 9].Style.Fill.BackgroundColor.SetColor(1, 146, 208, 80);

                        hoja1.Cells[5, 10, 5, 17].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[5, 10, 5, 17].Style.Fill.BackgroundColor.SetColor(1, 192, 192, 192);
                        hoja1.Cells[5, 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[5, 20].Style.Fill.BackgroundColor.SetColor(1, 192, 192, 192);
                        hoja1.Cells[5, 26, 5, 38].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[5, 26, 5, 38].Style.Fill.BackgroundColor.SetColor(1, 192, 192, 192);
                        hoja1.Cells[5, 40, 5, 41].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[5, 40, 5, 41].Style.Fill.BackgroundColor.SetColor(1, 192, 192, 192);
                        hoja1.Cells[5, 42, 5, 45].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[5, 42, 5, 45].Style.Fill.BackgroundColor.SetColor(1, 192, 192, 192);

                        hoja1.Cells[5, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[5, 5].Style.Fill.BackgroundColor.SetColor(1, 154, 87, 205);
                        hoja1.Cells[5, 22].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[5, 22].Style.Fill.BackgroundColor.SetColor(1, 154, 87, 205);

                        hoja1.Cells[5, 7].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[5, 7].Style.Fill.BackgroundColor.SetColor(1, 255, 217, 102);

                        hoja1.Cells[5, 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[5, 19].Style.Fill.BackgroundColor.SetColor(1, 255, 102, 0);
                        hoja1.Cells[5, 23].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[5, 23].Style.Fill.BackgroundColor.SetColor(1, 255, 102, 0);

                        hoja1.Cells[5, 24, 5, 25].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[5, 24, 5, 25].Style.Fill.BackgroundColor.SetColor(1, 150, 150, 150);

                        hoja1.Cells[5, 42].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[5, 42].Style.Fill.BackgroundColor.SetColor(1, 255, 192, 0);

                        hoja1.Cells[5, 43, 5, 44].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[5, 43, 5, 44].Style.Fill.BackgroundColor.SetColor(1, 0, 176, 240);

                        hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 20].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 20].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 20].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 20].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                        hoja1.Cells[5, 22, 5 + detallesDepartamento.Count(), 38].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[5, 22, 5 + detallesDepartamento.Count(), 38].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[5, 22, 5 + detallesDepartamento.Count(), 38].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[5, 22, 5 + detallesDepartamento.Count(), 38].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                        hoja1.Cells[5, 40, 5 + detallesDepartamento.Count(), 45].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[5, 40, 5 + detallesDepartamento.Count(), 45].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[5, 40, 5 + detallesDepartamento.Count(), 45].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[5, 40, 5 + detallesDepartamento.Count(), 45].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                        for (int i = 0; i <= detallesDepartamento.Count() + 1; i++) { hoja1.Row(i + 5).Height = 38; }

                        hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 44].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        hoja1.Cells[5, 4, 5 + detallesDepartamento.Count(), 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        hoja1.Cells[6 + detallesDepartamento.Count(), 1, 6 + detallesDepartamento.Count(), 45].Style.Font.Bold = true;
                        hoja1.Cells[6 + detallesDepartamento.Count(), 1, 6 + detallesDepartamento.Count(), 45].Style.Font.Size = 12;

                        hoja1.Column(45).Style.WrapText = true;
                        hoja1.Column(45).Width = 100;
                        hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 43].AutoFitColumns();

                        hoja1.View.FreezePanes(6, 7);

                        excel.Compression = CompressionLevel.BestSpeed;
                    }

                    var bytes = new MemoryStream();
                    using (var exportData = new MemoryStream())
                    {
                        excel.SaveAs(exportData);
                        bytes = exportData;
                    }

                    return bytes;
                }
            }
            catch (Exception e)
            {
                return null;
            }
        }

        public byte[] ExcelPrenominasPorPeriodo(int anio, tipoNominaPropuestaEnum tipoNomina, int periodo, int banco)
        {
            try
            {
                List<tblC_Nom_Prenomina> prenominas = new List<tblC_Nom_Prenomina>();

                var centrosCostoAplica = _context.tblC_Nom_CatSolicitudCheque.Where(x => x.tipoSolicitudCheque == banco && x.tipoNomina == (int)tipoNomina).Select(x => x.cc).ToList();
                prenominas = _context.tblC_Nom_Prenomina.Where(x => x.year == anio && x.tipoNomina == (int)tipoNomina && x.periodo == periodo && x.estatus == 1 && centrosCostoAplica.Contains(x.CC)).OrderBy(x => x.CC).ToList();

                List<int> prenominasIDs = prenominas.Select(x => x.id).ToList();

                var detalles = _context.tblC_Nom_PreNomina_Det.Where(x => prenominasIDs.Contains(x.prenominaID)).OrderBy(x => x.empleadoNombre).ToList();
                var empleadosID = detalles.Select(x => x.empleadoCve).ToList();

                if (empleadosID.Count() > 0)
                {

                    var fechaStr = GetPeriodoNomina(anio, periodo, (int)tipoNomina);
                    var empresa = vSesiones.sesionEmpresaActual;
                    var stringEmpleados = "(";
                    for (int i = 0; i < empleadosID.Count(); i++)
                    {
                        if (i == empleadosID.Count() - 1) stringEmpleados += empleadosID[i].ToString() + ")";
                        else stringEmpleados += empleadosID[i].ToString() + ",";
                    }

                    using (ExcelPackage excel = new ExcelPackage())
                    {

                        for (int j = 0; j < prenominas.Count(); j++)
                        {
                            var prenomina = prenominas[j];
                            var autorizantes = _context.tblC_Nom_PreNomina_Aut.Where(x => x.prenominaID == prenomina.id).OrderBy(x => x.orden).ToList();
                            //var cc = _context.tblP_CC.Where(x => x.estatus).FirstOrDefault(x => x.cc == (prenomina.CC == "180-A" ? "180" : (prenomina.CC == "187-A" ? "187" : prenomina.CC)));
                            var realizo = _context.tblP_Usuario.FirstOrDefault(x => x.id == prenomina.usuarioCapturaID);
                            var ccCatalogo = _context.tblC_Nom_CatalogoCC.FirstOrDefault(x => x.cc == prenomina.CC);

                            var hoja1 = excel.Workbook.Worksheets.Add(ccCatalogo == null ? ccCatalogo.ccDescripcion : ccCatalogo.ccDescripcion);
                            var detallesDepartamento = detalles.Where(x => x.prenominaID == prenomina.id).ToList();
                            string tipoNominaDesc = prenomina.tipoNomina == 1 ? "SUELDO SEMANAL" : "SUELDO QUICNENAL";

                            List<string[]> headerRow = new List<string[]>() { 
                            new string[] { 
                                "No.", "CODIGO EMPLEADO", "NOMBRE DEL TRABAJADOR", "PUESTO", tipoNominaDesc, "DIAS", "BASE NOMINA", "DIAS VAC", "BASE VACACIONES", "DESCTOS", "APOYO COLECTIVO", "PRESTAMO", "AXA", "FAMSA", "PENSION", 
                                "FONACOT", "INFONAVIT","SINDICATO", "2.5% FONDO AHORRO", "TOTAL BASE NOMINA", " ", "COMPLEMENTO DE NOMINA", "2.5% FONDO AHORRO", " BONO ZONA", 
                                "BONO DE PRODUCCION", "OTROS", "PRIMA VACACIONAL", "PRIMA DOMINICAL", "HORAS EXTRAS", "Valor Hrs Extra", "IMPORTE DE HRS EXTRAS", "DIAS EXTRAS", 
                                "Valor Dia Extra", "IMPORTE DE DIAS EXTRAS", "DIAS FESTIVOS", "Valor Dia Festivo", "IMPORTE DE DIAS FESTIVOS", "TOTAL DE COMPLEMENTO", " ", "TOTAL A PAGAR", "%", "TOTAL REAL A PAGAR", "VALES DESPENSA", 
                                "TOTAL DEPOSITO", "OBSERVACIONES"
                            } 
                        };

                            hoja1.Cells["A5:AR5"].LoadFromArrays(headerRow);
                            hoja1.Cells["A5:AR5"].Style.WrapText = true;
                            hoja1.Cells["A5:AR5"].Style.Font.Bold = true;
                            hoja1.Cells["A5:AR5"].Style.Font.Size = 10;
                            hoja1.Cells["A5:AR5"].Style.Font.Name = "Arial";
                            hoja1.Cells["A5:AR5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                            switch (empresa)
                            {
                                case 1: hoja1.Cells[1, 3].Value = "SOLUCIONES INDUSTRIALES SA DE CV"; break;
                                default: hoja1.Cells[1, 3].Value = "SOLUCIONES INDUSTRIALES SA DE CV"; break;
                            }
                            hoja1.Cells[2, 3].Value = ((tipoNominaPropuestaEnum)prenomina.tipoNomina).GetDescription() + " " + prenomina.periodo + ": " + fechaStr;
                            hoja1.Cells[3, 3].Value = "[" + ccCatalogo.cc + "] " + (ccCatalogo == null ? ccCatalogo.ccDescripcion.Trim() : ccCatalogo.ccDescripcion);

                            hoja1.Cells[1, 3].Style.Font.Bold = true;
                            hoja1.Cells[1, 3].Style.Font.Size = 10;
                            hoja1.Cells[1, 3].Style.Font.Name = "Arial";
                            hoja1.Cells[2, 3].Style.Font.Bold = true;
                            hoja1.Cells[2, 3].Style.Font.Size = 10;
                            hoja1.Cells[2, 3].Style.Font.Name = "Arial";
                            hoja1.Cells[3, 3].Style.Font.Bold = true;
                            hoja1.Cells[3, 3].Style.Font.Size = 10;
                            hoja1.Cells[3, 3].Style.Font.Name = "Arial";
                            hoja1.Cells[4, 3].Style.Font.Bold = true;
                            hoja1.Cells[4, 3].Style.Font.Size = 10;
                            hoja1.Cells[4, 3].Style.Font.Name = "Arial";

                            var cellData = new List<object[]>();

                            int indexOrden = 1;
                            foreach (var item in detallesDepartamento)
                            {
                                cellData.Add(new object[] {
                                indexOrden,
                                item.empleadoCve,
                                item.empleadoNombre,
                                item.puesto,
                                item.sueldoSemanal,
                                item.dias,
                                item.nominaBase,
                                item.diasVacaciones,
                                item.nominaBaseVacaciones,
                                item.descuento,
                                item.apoyoColectivo,
                                item.prestamo,
                                item.axa,
                                item.descuentoFamsa,
                                item.pensionAlimenticia,
                                item.fonacot,
                                item.infonavit,
                                item.sindicato,
                                item.fondoAhorroNomina,
                                item.totalNomina,
                                " ",
                                item.complementoNomina,
                                item.fondoAhorroComplemento,
                                item.bonoZona,
                                item.bonoProduccion,
                                item.otros,
                                item.primaVacacional,
                                item.primaDominical,
                                item.hrExtra,
                                item.hrExtraValor,
                                item.importeExtra,
                                item.diaHrExtra,
                                item.diaExtraValor,
                                item.importeDiaExtra,
                                item.diaFestivo,
                                item.diaFestivoValor,
                                item.importeDiaFestivo,
                                item.totalComplemento,
                                " ",
                                item.totalPagar,
                                item.porcentajeTotalPagar * 100,
                                item.totalRealPagar,
                                item.valesDespensa,
                                item.totalDeposito,
                                item.observaciones
                            });
                                indexOrden++;
                            }

                            cellData.Add(new object[] {
                                " ",
                                " ",
                                " ",
                                " ",
                                detallesDepartamento.Sum(z => z.sueldoSemanal),
                                "",
                                detallesDepartamento.Sum(z => z.nominaBase),
                                "",
                                detallesDepartamento.Sum(z => z.nominaBaseVacaciones),
                                detallesDepartamento.Sum(z => z.descuento),
                                detallesDepartamento.Sum(z => z.apoyoColectivo),
                                detallesDepartamento.Sum(z => z.prestamo),
                                detallesDepartamento.Sum(z => z.axa),
                                detallesDepartamento.Sum(z => z.descuentoFamsa),
                                detallesDepartamento.Sum(z => z.pensionAlimenticia),
                                detallesDepartamento.Sum(z => z.fonacot),
                                detallesDepartamento.Sum(z => z.infonavit),
                                detallesDepartamento.Sum(z => z.sindicato),
                                detallesDepartamento.Sum(z => z.fondoAhorroNomina),
                                detallesDepartamento.Sum(z => z.totalNomina),
                                " ",
                                detallesDepartamento.Sum(z => z.complementoNomina),
                                detallesDepartamento.Sum(z => z.fondoAhorroComplemento),
                                detallesDepartamento.Sum(z => z.bonoZona),
                                detallesDepartamento.Sum(z => z.bonoProduccion),
                                detallesDepartamento.Sum(z => z.otros),
                                detallesDepartamento.Sum(z => z.primaVacacional),
                                detallesDepartamento.Sum(z => z.primaDominical),
                                detallesDepartamento.Sum(z => z.hrExtra),
                                " ",
                                detallesDepartamento.Sum(z => z.importeExtra),
                                detallesDepartamento.Sum(z => z.diaHrExtra),
                                " ",
                                detallesDepartamento.Sum(z => z.importeDiaExtra),
                                detallesDepartamento.Sum(z => z.diaFestivo),
                                " ",
                                detallesDepartamento.Sum(z => z.importeDiaFestivo),
                                detallesDepartamento.Sum(z => z.totalComplemento),
                                " ",
                                detallesDepartamento.Sum(z => z.totalPagar),
                                " ",
                                detallesDepartamento.Sum(z => z.totalRealPagar),
                                detallesDepartamento.Sum(z => z.valesDespensa),
                                detallesDepartamento.Sum(z => z.totalDeposito),
                                " ",
                            });

                            hoja1.Cells[6, 1].LoadFromArrays(cellData);

                            var firmaRealizo = GlobalUtils.CrearFirmaDigital(prenomina.id, DocumentosEnum.Prenomina, realizo.id, TipoFirmaEnum.Autorizacion);

                            hoja1.Cells[5 + detallesDepartamento.Count() + 3, 4].Value = firmaRealizo;
                            hoja1.Cells[6 + detallesDepartamento.Count() + 3, 4].Value = "___________________________";
                            hoja1.Cells[7 + detallesDepartamento.Count() + 3, 4].Value = "ELABORÓ";
                            hoja1.Cells[8 + detallesDepartamento.Count() + 3, 4].Value = realizo.nombre + " " + realizo.apellidoPaterno + " " + realizo.apellidoMaterno;
                            hoja1.Cells[6 + detallesDepartamento.Count() + 3, 4].Style.Font.Bold = true;
                            hoja1.Cells[6 + detallesDepartamento.Count() + 3, 4].Style.Font.Size = 10;
                            hoja1.Cells[6 + detallesDepartamento.Count() + 3, 4].Style.Font.Name = "Arial";
                            hoja1.Cells[7 + detallesDepartamento.Count() + 3, 4].Style.Font.Bold = true;
                            hoja1.Cells[7 + detallesDepartamento.Count() + 3, 4].Style.Font.Size = 10;
                            hoja1.Cells[7 + detallesDepartamento.Count() + 3, 4].Style.Font.Name = "Arial";
                            hoja1.Cells[8 + detallesDepartamento.Count() + 3, 4].Style.Font.Bold = true;
                            hoja1.Cells[8 + detallesDepartamento.Count() + 3, 4].Style.Font.Size = 10;
                            hoja1.Cells[8 + detallesDepartamento.Count() + 3, 4].Style.Font.Name = "Arial";

                            for (int i = 1; i <= autorizantes.Count(); i++)
                            {
                                var cveEmpleado = autorizantes[(i - 1)].aprobadorClave;
                                var usuario = _context.tblP_Usuario.FirstOrDefault(x => x.id == cveEmpleado);
                                var firmaAutorizante = "";
                                if (autorizantes[(i - 1)].firma != null) firmaAutorizante = autorizantes[(i - 1)].firma;
                                hoja1.Cells[5 + detallesDepartamento.Count() + 3, (i + 1) * 4].Value = firmaAutorizante;
                                hoja1.Cells[6 + detallesDepartamento.Count() + 3, (i + 1) * 4].Value = "___________________________";
                                hoja1.Cells[7 + detallesDepartamento.Count() + 3, (i + 1) * 4].Value = "REVISÓ/AUTORIZÓ";
                                hoja1.Cells[8 + detallesDepartamento.Count() + 3, (i + 1) * 4].Value = usuario.nombre + " " + usuario.apellidoPaterno + " " + usuario.apellidoMaterno;

                                hoja1.Cells[6 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Bold = true;
                                hoja1.Cells[6 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Size = 10;
                                hoja1.Cells[6 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Name = "Arial";
                                hoja1.Cells[7 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Bold = true;
                                hoja1.Cells[7 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Size = 10;
                                hoja1.Cells[7 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Name = "Arial";
                                hoja1.Cells[8 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Bold = true;
                                hoja1.Cells[8 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Size = 10;
                                hoja1.Cells[8 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Name = "Arial";
                            }

                            hoja1.View.ZoomScale = 82;
                            hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 45].Style.Font.Size = 10;
                            hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 45].Style.Font.Name = "Arial";

                            hoja1.Cells[7 + detallesDepartamento.Count(), 1, 7 + detallesDepartamento.Count(), 41].Style.Font.Size = 11;
                            hoja1.Cells[7 + detallesDepartamento.Count(), 1, 7 + detallesDepartamento.Count(), 41].Style.Font.Bold = true;
                            hoja1.Cells[7 + detallesDepartamento.Count(), 1, 7 + detallesDepartamento.Count(), 41].Style.Font.Name = "Arial";

                            hoja1.Cells[6, 5, 6 + detallesDepartamento.Count(), 5].Style.Numberformat.Format = "$###,###,##0.00";
                            hoja1.Cells[6, 7, 6 + detallesDepartamento.Count(), 7].Style.Numberformat.Format = "$###,###,##0.00";
                            hoja1.Cells[6, 10, 6 + detallesDepartamento.Count(), 20].Style.Numberformat.Format = "$###,###,##0.00";
                            hoja1.Cells[6, 22, 6 + detallesDepartamento.Count(), 28].Style.Numberformat.Format = "$###,###,##0.00";
                            hoja1.Cells[6, 30, 6 + detallesDepartamento.Count(), 31].Style.Numberformat.Format = "$###,###,##0.00";
                            hoja1.Cells[6, 33, 6 + detallesDepartamento.Count(), 38].Style.Numberformat.Format = "$###,###,##0.00";
                            hoja1.Cells[6, 40, 6 + detallesDepartamento.Count(), 40].Style.Numberformat.Format = "$###,###,##0.00";
                            hoja1.Cells[6, 41, 6 + detallesDepartamento.Count(), 45].Style.Numberformat.Format = "$###,###,##0.00";

                            hoja1.Cells[6, 6, 6 + detallesDepartamento.Count(), 6].Style.Numberformat.Format = "###,###,##0.00";
                            hoja1.Cells[6, 29, 6 + detallesDepartamento.Count(), 29].Style.Numberformat.Format = "###,###,##0.00";
                            hoja1.Cells[6, 41, 6 + detallesDepartamento.Count(), 41].Style.Numberformat.Format = "###,###,##0.00";

                            hoja1.Cells[4, 3].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            hoja1.Cells[4, 3].Style.Fill.BackgroundColor.SetColor(1, 255, 153, 204);

                            hoja1.Cells[5, 1, 5, 4].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            hoja1.Cells[5, 1, 5, 4].Style.Fill.BackgroundColor.SetColor(1, 192, 192, 192);
                            hoja1.Cells[5, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            hoja1.Cells[5, 6].Style.Fill.BackgroundColor.SetColor(1, 192, 192, 192);

                            hoja1.Cells[5, 8, 5, 9].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            hoja1.Cells[5, 8, 5, 9].Style.Fill.BackgroundColor.SetColor(1, 146, 208, 80);

                            hoja1.Cells[5, 10, 5, 17].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            hoja1.Cells[5, 10, 5, 17].Style.Fill.BackgroundColor.SetColor(1, 192, 192, 192);
                            hoja1.Cells[5, 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            hoja1.Cells[5, 20].Style.Fill.BackgroundColor.SetColor(1, 192, 192, 192);
                            hoja1.Cells[5, 26, 5, 38].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            hoja1.Cells[5, 26, 5, 38].Style.Fill.BackgroundColor.SetColor(1, 192, 192, 192);
                            hoja1.Cells[5, 40, 5, 41].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            hoja1.Cells[5, 40, 5, 41].Style.Fill.BackgroundColor.SetColor(1, 192, 192, 192);
                            hoja1.Cells[5, 42, 5, 45].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            hoja1.Cells[5, 42, 5, 45].Style.Fill.BackgroundColor.SetColor(1, 192, 192, 192);

                            hoja1.Cells[5, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            hoja1.Cells[5, 5].Style.Fill.BackgroundColor.SetColor(1, 154, 87, 205);
                            hoja1.Cells[5, 22].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            hoja1.Cells[5, 22].Style.Fill.BackgroundColor.SetColor(1, 154, 87, 205);

                            hoja1.Cells[5, 7].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            hoja1.Cells[5, 7].Style.Fill.BackgroundColor.SetColor(1, 255, 217, 102);

                            hoja1.Cells[5, 19].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            hoja1.Cells[5, 19].Style.Fill.BackgroundColor.SetColor(1, 255, 102, 0);
                            hoja1.Cells[5, 23].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            hoja1.Cells[5, 23].Style.Fill.BackgroundColor.SetColor(1, 255, 102, 0);

                            hoja1.Cells[5, 24, 5, 25].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            hoja1.Cells[5, 24, 5, 25].Style.Fill.BackgroundColor.SetColor(1, 150, 150, 150);

                            hoja1.Cells[5, 42].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            hoja1.Cells[5, 42].Style.Fill.BackgroundColor.SetColor(1, 255, 192, 0);

                            hoja1.Cells[5, 43, 5, 44].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            hoja1.Cells[5, 43, 5, 44].Style.Fill.BackgroundColor.SetColor(1, 0, 176, 240);

                            hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 20].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                            hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 20].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                            hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 20].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                            hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 20].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                            hoja1.Cells[5, 22, 5 + detallesDepartamento.Count(), 38].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                            hoja1.Cells[5, 22, 5 + detallesDepartamento.Count(), 38].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                            hoja1.Cells[5, 22, 5 + detallesDepartamento.Count(), 38].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                            hoja1.Cells[5, 22, 5 + detallesDepartamento.Count(), 38].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                            hoja1.Cells[5, 40, 5 + detallesDepartamento.Count(), 45].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                            hoja1.Cells[5, 40, 5 + detallesDepartamento.Count(), 45].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                            hoja1.Cells[5, 40, 5 + detallesDepartamento.Count(), 45].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                            hoja1.Cells[5, 40, 5 + detallesDepartamento.Count(), 45].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                            for (int i = 0; i <= detallesDepartamento.Count() + 1; i++) { hoja1.Row(i + 5).Height = 38; }

                            hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 44].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                            hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                            hoja1.Cells[5, 4, 5 + detallesDepartamento.Count(), 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                            hoja1.Cells[6 + detallesDepartamento.Count(), 1, 6 + detallesDepartamento.Count(), 45].Style.Font.Bold = true;
                            hoja1.Cells[6 + detallesDepartamento.Count(), 1, 6 + detallesDepartamento.Count(), 45].Style.Font.Size = 12;

                            hoja1.Column(45).Style.WrapText = true;
                            hoja1.Column(45).Width = 100;
                            hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 43].AutoFitColumns();

                            hoja1.View.FreezePanes(6, 7);

                            excel.Compression = CompressionLevel.BestSpeed;
                        }


                        byte[] binaryData = null;

                        using (var exportData = new MemoryStream())
                        {
                            excel.SaveAs(exportData);
                            binaryData = exportData.ToArray();
                        }

                        return binaryData;

                    }
                }
                else { return null; }
            }
            catch (Exception e) { return null; }
        }

        public byte[] ExcelAguinaldoPorPeriodo(int anio, tipoNominaPropuestaEnum tipoNomina, int periodo, int banco)
        {
            try
            {
                List<tblC_Nom_Prenomina> prenominas = new List<tblC_Nom_Prenomina>();

                var centrosCostoAplica = _context.tblC_Nom_CatSolicitudCheque.Where(x => x.tipoSolicitudCheque == banco && x.tipoNomina == (periodo == 1 ? 1 : 4)).Select(x => x.cc).ToList();
                prenominas = _context.tblC_Nom_Prenomina.Where(x => x.year == anio && x.tipoNomina == (int)tipoNomina && x.periodo == periodo && x.estatus == 1 && centrosCostoAplica.Contains(x.CC)).OrderBy(x => x.CC).ToList();

                List<int> prenominasIDs = prenominas.Select(x => x.id).ToList();

                var detalles = _context.tblC_Nom_PreNomina_Det.Where(x => prenominasIDs.Contains(x.prenominaID)).OrderBy(x => x.empleadoNombre).ToList();
                var empleadosID = detalles.Select(x => x.empleadoCve).ToList();

                if (empleadosID.Count() > 0)
                {

                    var fechaStr = GetPeriodoNomina(anio, periodo, (int)tipoNomina);
                    var empresa = vSesiones.sesionEmpresaActual;
                    var stringEmpleados = "(";
                    for (int i = 0; i < empleadosID.Count(); i++)
                    {
                        if (i == empleadosID.Count() - 1) stringEmpleados += empleadosID[i].ToString() + ")";
                        else stringEmpleados += empleadosID[i].ToString() + ",";
                    }

                    using (ExcelPackage excel = new ExcelPackage())
                    {
                        for (int j = 0; j < prenominas.Count(); j++)
                        {
                            var prenomina = prenominas[j];
                            var autorizantes = _context.tblC_Nom_PreNomina_Aut.Where(x => x.prenominaID == prenomina.id).OrderBy(x => x.orden).ToList();
                            var cc = _context.tblP_CC.Where(x => x.estatus).FirstOrDefault(x => x.cc == (prenomina.CC == "180-A" ? "180" : (prenomina.CC == "187-A" ? "187" : prenomina.CC)));
                            var realizo = _context.tblP_Usuario.FirstOrDefault(x => x.id == prenomina.usuarioCapturaID);
                            var ccCatalogo = _context.tblC_Nom_CatalogoCC.FirstOrDefault(x => x.cc == prenomina.CC);

                            var hoja1 = excel.Workbook.Worksheets.Add(ccCatalogo == null ? cc.descripcion : ccCatalogo.ccDescripcion);
                            var detallesDepartamento = detalles.Where(x => x.prenominaID == prenomina.id).ToList();
                            string tipoNominaDesc = prenomina.tipoNomina == 1 ? "SUELDO SEMANAL" : "SUELDO QUICNENAL";

                            List<string[]> headerRow = new List<string[]>() { 
                                new string[] { 
                                    "No.", "CODIGO EMPLEADO", "NOMBRE DEL TRABAJADOR", "PUESTO", "FECHA" + Environment.NewLine + "ALTA", tipoNominaDesc, "DIAS DE" + Environment.NewLine + "AGUINALDO", "MONTO" + Environment.NewLine + "AGUINALDO", "AÑOS" + Environment.NewLine + "LABORADOS", "DIAS" + Environment.NewLine + "VACACIONES", "PRIMA" + Environment.NewLine + "VACACIONAL", "(-) PENSION" + Environment.NewLine + "ALIMENTICIA", "TOTAL A" + Environment.NewLine + "PAGAR"
                                } 
                            };

                            hoja1.Cells["A5:AP5"].LoadFromArrays(headerRow);
                            hoja1.Cells["A5:AP5"].Style.WrapText = true;
                            hoja1.Cells["A5:AP5"].Style.Font.Bold = true;
                            hoja1.Cells["A5:AP5"].Style.Font.Size = 10;
                            hoja1.Cells["A5:AP5"].Style.Font.Name = "Arial";
                            hoja1.Cells["A5:AP5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                            switch (empresa)
                            {
                                case 1: hoja1.Cells[1, 3].Value = "SOLUCIONES INDUSTRIALES SA DE CV"; break;
                                default: hoja1.Cells[1, 3].Value = "SOLUCIONES INDUSTRIALES SA DE CV"; break;
                            }
                            hoja1.Cells[2, 3].Value = "AGUINALDO " + (prenomina.periodo == 1 ? "SEMANAL" : "QUINCENAL") + " " + prenomina.year.ToString();
                            hoja1.Cells[3, 3].Value = "[" + cc.cc + "] " + (ccCatalogo == null ? cc.descripcion : ccCatalogo.ccDescripcion);

                            hoja1.Cells[1, 3].Style.Font.Bold = true;
                            hoja1.Cells[1, 3].Style.Font.Size = 10;
                            hoja1.Cells[1, 3].Style.Font.Name = "Arial";
                            hoja1.Cells[2, 3].Style.Font.Bold = true;
                            hoja1.Cells[2, 3].Style.Font.Size = 10;
                            hoja1.Cells[2, 3].Style.Font.Name = "Arial";
                            hoja1.Cells[3, 3].Style.Font.Bold = true;
                            hoja1.Cells[3, 3].Style.Font.Size = 10;
                            hoja1.Cells[3, 3].Style.Font.Name = "Arial";
                            hoja1.Cells[4, 3].Style.Font.Bold = true;
                            hoja1.Cells[4, 3].Style.Font.Size = 10;
                            hoja1.Cells[4, 3].Style.Font.Name = "Arial";

                            var cellData = new List<object[]>();

                            int indexOrden = 1;
                            foreach (var item in detallesDepartamento)
                            {
                                cellData.Add(new object[] {
                                indexOrden,
                                item.empleadoCve,
                                item.empleadoNombre,
                                item.puesto,
                                item.observaciones,
                                item.sueldoSemanal,
                                item.dias,
                                item.nominaBase,
                                item.diaHrExtra,
                                item.diaFestivo,
                                item.primaVacacional,
                                item.pensionAlimenticia,
                                item.totalPagar
                            });
                                indexOrden++;
                            }

                            cellData.Add(new object[] {
                                " ",
                                " ",
                                " ",
                                " ",
                                " ",
                                detallesDepartamento.Sum(z => z.sueldoSemanal),
                                "",
                                detallesDepartamento.Sum(z => z.nominaBase),
                                detallesDepartamento.Sum(z => z.diaHrExtra),
                                detallesDepartamento.Sum(z => z.diaFestivo),
                                detallesDepartamento.Sum(z => z.primaVacacional),
                                detallesDepartamento.Sum(z => z.pensionAlimenticia),
                                detallesDepartamento.Sum(z => z.totalPagar),                                
                            });

                            hoja1.Cells[6, 1].LoadFromArrays(cellData);

                            var firmaRealizo = GlobalUtils.CrearFirmaDigital(prenomina.id, DocumentosEnum.Prenomina, realizo.id, TipoFirmaEnum.Autorizacion);

                            hoja1.Cells[5 + detallesDepartamento.Count() + 5, 14].Value = firmaRealizo;
                            hoja1.Cells[6 + detallesDepartamento.Count() + 5, 14].Value = "___________________________";
                            hoja1.Cells[7 + detallesDepartamento.Count() + 5, 14].Value = "ELABORÓ";
                            hoja1.Cells[8 + detallesDepartamento.Count() + 5, 14].Value = realizo.nombre + " " + realizo.apellidoPaterno + " " + realizo.apellidoMaterno;
                            hoja1.Cells[6 + detallesDepartamento.Count() + 5, 14].Style.Font.Bold = true;
                            hoja1.Cells[6 + detallesDepartamento.Count() + 5, 14].Style.Font.Size = 10;
                            hoja1.Cells[6 + detallesDepartamento.Count() + 5, 14].Style.Font.Name = "Arial";
                            hoja1.Cells[7 + detallesDepartamento.Count() + 5, 14].Style.Font.Bold = true;
                            hoja1.Cells[7 + detallesDepartamento.Count() + 5, 14].Style.Font.Size = 10;
                            hoja1.Cells[7 + detallesDepartamento.Count() + 5, 14].Style.Font.Name = "Arial";
                            hoja1.Cells[8 + detallesDepartamento.Count() + 5, 14].Style.Font.Bold = true;
                            hoja1.Cells[8 + detallesDepartamento.Count() + 5, 14].Style.Font.Size = 10;
                            hoja1.Cells[8 + detallesDepartamento.Count() + 5, 14].Style.Font.Name = "Arial";

                            for (int i = 1; i <= autorizantes.Count(); i++)
                            {
                                var cveEmpleado = autorizantes[(i - 1)].aprobadorClave;
                                var usuario = _context.tblP_Usuario.FirstOrDefault(x => x.id == cveEmpleado);
                                var firmaAutorizante = "";
                                if (autorizantes[(i - 1)].firma != null) firmaAutorizante = autorizantes[(i - 1)].firma;
                                hoja1.Cells[5 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 10].Value = firmaAutorizante;
                                hoja1.Cells[6 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 10].Value = "___________________________";
                                hoja1.Cells[7 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 10].Value = "REVISÓ/AUTORIZÓ";
                                hoja1.Cells[8 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 10].Value = usuario.nombre + " " + usuario.apellidoPaterno + " " + usuario.apellidoMaterno;

                                hoja1.Cells[6 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 10].Style.Font.Bold = true;
                                hoja1.Cells[6 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 10].Style.Font.Size = 10;
                                hoja1.Cells[6 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 10].Style.Font.Name = "Arial";
                                hoja1.Cells[7 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 10].Style.Font.Bold = true;
                                hoja1.Cells[7 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 10].Style.Font.Size = 10;
                                hoja1.Cells[7 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 10].Style.Font.Name = "Arial";
                                hoja1.Cells[8 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 10].Style.Font.Bold = true;
                                hoja1.Cells[8 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 10].Style.Font.Size = 10;
                                hoja1.Cells[8 + detallesDepartamento.Count() + 5, ((i + 1) * 4) + 10].Style.Font.Name = "Arial";
                            }

                            hoja1.View.ZoomScale = 82;
                            hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 42].Style.Font.Size = 10;
                            hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 42].Style.Font.Name = "Arial";

                            hoja1.Cells[7 + detallesDepartamento.Count(), 1, 7 + detallesDepartamento.Count(), 39].Style.Font.Size = 11;
                            hoja1.Cells[7 + detallesDepartamento.Count(), 1, 7 + detallesDepartamento.Count(), 39].Style.Font.Bold = true;
                            hoja1.Cells[7 + detallesDepartamento.Count(), 1, 7 + detallesDepartamento.Count(), 39].Style.Font.Name = "Arial";

                            hoja1.Cells[6, 6, 6 + detallesDepartamento.Count(), 6].Style.Numberformat.Format = "$###,###,##0.00";
                            hoja1.Cells[6, 8, 6 + detallesDepartamento.Count(), 8].Style.Numberformat.Format = "$###,###,##0.00";
                            hoja1.Cells[6, 11, 6 + detallesDepartamento.Count(), 13].Style.Numberformat.Format = "$###,###,##0.00";

                            hoja1.Cells[4, 3].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            hoja1.Cells[4, 3].Style.Fill.BackgroundColor.SetColor(1, 255, 153, 204);

                            hoja1.Cells[5, 1, 5, 13].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            hoja1.Cells[5, 1, 5, 13].Style.Fill.BackgroundColor.SetColor(1, 192, 192, 192);

                            hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 13].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                            hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 13].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                            hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 13].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                            hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 13].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                            for (int i = 0; i <= detallesDepartamento.Count() + 1; i++) { hoja1.Row(i + 5).Height = 38; }

                            hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 13].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                            hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                            hoja1.Cells[5, 4, 5 + detallesDepartamento.Count(), 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                            hoja1.Cells[6 + detallesDepartamento.Count(), 1, 6 + detallesDepartamento.Count(), 13].Style.Font.Bold = true;
                            hoja1.Cells[6 + detallesDepartamento.Count(), 1, 6 + detallesDepartamento.Count(), 13].Style.Font.Size = 12;

                            hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 13].AutoFitColumns();

                            hoja1.View.FreezePanes(6, 5);

                            excel.Compression = CompressionLevel.BestSpeed;
                        }

                        byte[] binaryData = null;

                        using (var exportData = new MemoryStream())
                        {
                            excel.SaveAs(exportData);
                            binaryData = exportData.ToArray();
                        }

                        return binaryData;

                    }
                }
                else { return null; }
            }
            catch (Exception e) { return null; }
        }

        public string GetPeriodoNomina(int year, int periodo, int tipoNomina)
        {
            try
            {
                //var odbc = new OdbcConsultaDTO()
                //{
                //    consulta = queryPeriodoNomina(),
                //    parametros = parametrosPeriodoNomina(year, periodo, tipoNomina)
                //};
                //var periodoStr = _contextEnkontrol.Select<PeriodosNominaDTO>(EnkontrolEnum.CplanRh, odbc).FirstOrDefault();
                var periodoStr = _context.tblRH_EK_Periodos.FirstOrDefault(x => x.year == year && x.periodo == periodo && x.tipo_nomina == tipoNomina);
                return periodoStr == null ? "" : "del " + periodoStr.fecha_inicial.ToString("dd MMMM yyyy") + " al " + periodoStr.fecha_final.ToString("dd MMMM yyyy");
            }
            catch (Exception) { return ""; }
        }

        private string queryPeriodoNomina()
        {
            return string.Format(@"SELECT tipo_nomina, periodo, tipo_periodo, fecha_inicial, fecha_final, mes_cc, fecha_pago, year
                FROM sn_periodos 
                WHERE year = ? AND periodo = ? and tipo_nomina = ?");
        }

        private List<OdbcParameterDTO> parametrosPeriodoNomina(int year, int periodo, int tipoNomina)
        {
            var parameters = new List<OdbcParameterDTO>();
            var ahora = DateTime.Now;
            ahora.AddMonths(-1);
            parameters.Add(new OdbcParameterDTO() { nombre = "year", tipo = OdbcType.Numeric, valor = year });
            parameters.Add(new OdbcParameterDTO() { nombre = "periodo", tipo = OdbcType.Numeric, valor = periodo });
            parameters.Add(new OdbcParameterDTO() { nombre = "tipo_nomina", tipo = OdbcType.Numeric, valor = tipoNomina });
            return parameters;
        }

        public Dictionary<string, object> ValidarPrenomina(int prenominaID, List<tblC_Nom_PreNomina_Det> detalles, List<tblC_Nom_PreNomina_Aut> autorizantes)
        {
            Dictionary<string, object> resultado = new Dictionary<string, object>();
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    if (detalles == null || detalles.Count() < 1)
                    {
                        throw new Exception("No se encontraron detalles en prenomina para guardar");
                    }
                    if (autorizantes == null || autorizantes.Count() < 1)
                    {
                        throw new Exception("No se encontraron autorizantes relacionados con la prenomina.");
                    }
                    var prenomina = _context.tblC_Nom_Prenomina.FirstOrDefault(x => x.id == prenominaID);
                    if (prenomina == null)
                    {
                        throw new Exception("No se encuentra la prenomina relacionada");
                    }
                    else
                    {
                        //var detallesActualizados = CalcularPrenominaBase(prenomina.CC, prenomina.periodo, (tipoNominaPropuestaEnum)prenomina.tipoNomina, prenomina.year, detalles);
                        List<tblC_Nom_PreNomina_Det> detallesActualizados = new List<tblC_Nom_PreNomina_Det>();

                        switch (vSesiones.sesionEmpresaActual)
                        {
                            case 3:
                                if ((tipoNominaPropuestaEnum)prenomina.tipoNomina == tipoNominaPropuestaEnum.Aguinaldo) detallesActualizados = CalcularAguinaldoBase(prenomina.CC, prenomina.periodo, (tipoNominaPropuestaEnum)prenomina.tipoNomina, prenomina.year, detalles);
                                else if ((tipoNominaPropuestaEnum)prenomina.tipoNomina == tipoNominaPropuestaEnum.LIQUIDACION_SEMANAL || (tipoNominaPropuestaEnum)prenomina.tipoNomina == tipoNominaPropuestaEnum.LIQUIDACION_QUINCENAL) detallesActualizados = CalcularLiquidacionColombia(prenomina.CC, prenomina.periodo, (tipoNominaPropuestaEnum)prenomina.tipoNomina, prenomina.year, detalles);
                                else detallesActualizados = CalcularPrenominaBaseColombia(prenomina.CC, prenomina.periodo, (tipoNominaPropuestaEnum)prenomina.tipoNomina, prenomina.year, detalles);
                                break;
                            case 6:
                                if ((tipoNominaPropuestaEnum)prenomina.tipoNomina == tipoNominaPropuestaEnum.Aguinaldo) detallesActualizados = CalcularAguinaldoBase(prenomina.CC, prenomina.periodo, (tipoNominaPropuestaEnum)prenomina.tipoNomina, prenomina.year, detalles);
                                else detallesActualizados = CalcularPrenominaBase(prenomina.CC, prenomina.periodo, (tipoNominaPropuestaEnum)prenomina.tipoNomina, prenomina.year, detalles);
                                break;
                            default:
                                if ((tipoNominaPropuestaEnum)prenomina.tipoNomina == tipoNominaPropuestaEnum.Aguinaldo) detallesActualizados = CalcularAguinaldoBase(prenomina.CC, prenomina.periodo, (tipoNominaPropuestaEnum)prenomina.tipoNomina, prenomina.year, detalles);
                                else detallesActualizados = CalcularPrenominaBase(prenomina.CC, prenomina.periodo, (tipoNominaPropuestaEnum)prenomina.tipoNomina, prenomina.year, detalles);
                                break;
                        }

                        int orden = 1;
                        foreach (var item in detallesActualizados)
                        {
                            item.orden = orden;
                            item.prenominaID = prenomina.id;
                            orden++;
                        }
                        _context.tblC_Nom_PreNomina_Det.AddRange(detallesActualizados);

                        var detallesEliminados = _context.tblC_Nom_PreNomina_Det.Where(x => x.prenominaID == prenomina.id).ToList();
                        _context.tblC_Nom_PreNomina_Det.RemoveRange(detallesEliminados);


                        var autorizantesEliminados = _context.tblC_Nom_PreNomina_Aut.Where(x => x.prenominaID == prenomina.id).ToList();
                        _context.tblC_Nom_PreNomina_Aut.RemoveRange(autorizantesEliminados);
                        foreach (var item in autorizantes)
                        {
                            item.prenominaID = prenomina.id;
                            item.autorizando = true;
                        }
                        //var primerAutorizante = autorizantes.OrderBy(x => x.orden).FirstOrDefault();
                        //primerAutorizante.autorizando = true;
                        _context.tblC_Nom_PreNomina_Aut.AddRange(autorizantes);

                        prenomina.validada = true;
                        prenomina.usuarioValidaID = vSesiones.sesionUsuarioDTO.id;
                        prenomina.fechaValidacion = DateTime.Now;

                        _context.SaveChanges();
                        dbContextTransaction.Commit();
                        resultado.Add(SUCCESS, true);
                    }
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                    LogError(_SISTEMA, 0, "NominaController", "ValidarPrenomina", e, AccionEnum.ACTUALIZAR, 0, new { prenominaID = prenominaID });
                }
            }
            return resultado;
        }

        public Dictionary<string, object> DesValidarPrenomina(int prenominaID)
        {
            Dictionary<string, object> resultado = new Dictionary<string, object>();
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    var prenomina = _context.tblC_Nom_Prenomina.FirstOrDefault(x => x.id == prenominaID);
                    if (prenomina == null)
                    {
                        throw new Exception("No se encuentra la prenomina relacionada");
                    }
                    else if (prenomina.estatus == 1)
                    {
                        throw new Exception("Prenómina Autorizada, no es posible eliminar la validación");
                    }
                    else
                    {
                        prenomina.validada = false;
                        prenomina.usuarioValidaID = 0;
                        prenomina.fechaValidacion = null;

                        _context.SaveChanges();
                        dbContextTransaction.Commit();
                        resultado.Add(SUCCESS, true);
                    }
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                    LogError(_SISTEMA, 0, "NominaController", "DesValidarPrenomina", e, AccionEnum.ACTUALIZAR, 0, new { prenominaID = prenominaID });
                }
            }
            return resultado;
        }

        public Dictionary<string, object> GetCCsIncidencias(tipoNominaPropuestaEnum tipoNomina, int periodo, int anio)
        {
            Dictionary<string, object> resultado = new Dictionary<string, object>();
            try
            {
                var prenominasValidadas = _context.tblC_Nom_Prenomina.Where(x => x.tipoNomina == (int)tipoNomina && x.periodo == periodo && x.year == anio && x.validada).ToList();

                List<tblC_Nom_CatalogoCC> ccsCatalogo = new List<tblC_Nom_CatalogoCC>();
                if (tipoNomina == tipoNominaPropuestaEnum.Aguinaldo) ccsCatalogo = _context.tblC_Nom_CatalogoCC.Where(x => (periodo == 1 ? x.semanal : x.quincenal) && x.estatus).Distinct().ToList();
                else ccsCatalogo = _context.tblC_Nom_CatalogoCC.Where(x => (tipoNomina == tipoNominaPropuestaEnum.Semanal ? x.semanal : x.quincenal) && x.estatus).Distinct().ToList();

                var data = ccsCatalogo.Select(m =>
                {
                    var auxPrenomina = prenominasValidadas.FirstOrDefault(x => x.CC == m.cc);
                    var bandera = auxPrenomina != null;
                    return new Core.DTO.Principal.Generales.ComboDTO
                    {
                        Value = m.cc,
                        Text = (bandera ? "✓" : "✖") + " [" + m.cc + "] " + m.ccDescripcion,
                        addClass = bandera ? "validada" : "no-validada"
                    };
                }).ToList();

                resultado.Add(ITEMS, data.OrderBy(x => x.Value));
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
                LogError(_SISTEMA, 0, "NominaController", "GetCCsIncidencias", e, AccionEnum.CONSULTA, 0, new { });
            }
            return resultado;
        }

        public Dictionary<string, object> FillCboBancos(tipoNominaPropuestaEnum tipoNomina, int periodo)
        {
            Dictionary<string, object> resultado = new Dictionary<string, object>();
            try
            {
                List<tblC_Nom_CatSolicitudCheque> bancos = new List<tblC_Nom_CatSolicitudCheque>();
                if (tipoNomina == tipoNominaPropuestaEnum.Aguinaldo) bancos = _context.tblC_Nom_CatSolicitudCheque.Where(x => (periodo == 1 ? x.tipoNomina == 1 : x.tipoNomina == 4)).ToList();
                else bancos = _context.tblC_Nom_CatSolicitudCheque.Where(x => x.tipoNomina == (int)tipoNomina).ToList();

                var data = bancos.GroupBy(x => new { x.bancoDescripcion, x.tipoSolicitudChequeDescripcion, x.tipoSolicitudCheque }).Select(m =>
                {
                    return new Core.DTO.Principal.Generales.ComboDTO
                    {
                        Value = m.Key.tipoSolicitudCheque.ToString(),
                        Text = m.Key.tipoSolicitudChequeDescripcion,
                    };
                }).OrderBy(x => x.Value);
                resultado.Add(ITEMS, data);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
                LogError(_SISTEMA, 0, "NominaController", "GetCCsIncidencias", e, AccionEnum.CONSULTA, 0, new { });
            }
            return resultado;
        }

        public List<tblC_Nom_CatSolicitudCheque> GetBancos(tipoNominaPropuestaEnum tipoNomina)
        {
            Dictionary<string, object> resultado = new Dictionary<string, object>();
            List<tblC_Nom_CatSolicitudCheque> bancos = new List<tblC_Nom_CatSolicitudCheque>();
            try
            {
                bancos = _context.tblC_Nom_CatSolicitudCheque.Where(x => x.tipoNomina == (int)tipoNomina).ToList();
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, "NominaController", "GetBancos", e, AccionEnum.CONSULTA, 0, new { });
            }
            return bancos;
        }

        public Dictionary<string, object> GetUsuariosAutorizantes()
        {
            Dictionary<string, object> resultado = new Dictionary<string, object>();
            try
            {
                var _empleados = _context.tblRH_EK_Empleados.Where(x => x.estatus_empleado == "A" && x.cc_contable != "000" && x.esActivo).ToList();

                var puestoClaves = _empleados.Select(x => x.puesto).ToList();
                var puestos = _context.tblRH_EK_Puestos.Where(x => puestoClaves.Contains(x.puesto)).Select(x => new
                {
                    puesto = x.puesto,
                    descripcion = x.descripcion
                }).ToList();

                foreach (var item in _empleados) 
                {
                    var _puesto = puestos.FirstOrDefault(x => x.puesto == item.puesto);
                    if (_puesto != null) item.desc_puesto = _puesto.descripcion;
                }


                //using (var _gcplan = new MainContext((int)EmpresaEnum.GCPLAN))
                //{
                //    var empleadosGCPLAN = _gcplan.tblRH_EK_Empleados.Where(x => x.estatus_empleado == "A" && x.cc_contable != "000" && x.esActivo).ToList();
                //    var puestoClavesGCPLAN = empleadosGCPLAN.Select(x => x.puesto).ToList();
                //    var puestosGCPLAN = _gcplan.tblRH_EK_Puestos.Where(x => puestoClavesGCPLAN.Contains(x.puesto)).Select(x => new
                //    {
                //        puesto = x.puesto,
                //        descripcion = x.descripcion
                //    }).ToList();
                //    foreach (var item in empleadosGCPLAN)
                //    {
                //        var _puesto = puestosGCPLAN.FirstOrDefault(x => x.puesto == item.puesto);
                //        if (_puesto != null) item.desc_puesto = _puesto.descripcion;
                //    }

                //    _empleados.AddRange(empleadosGCPLAN);
                //}

                //if (vSesiones.sesionEmpresaActual != (int)EmpresaEnum.Construplan)
                //{
                //    using (var _construplan = new MainContext((int)EmpresaEnum.Construplan))
                //    {
                //        var empleadosCPLAN = _construplan.tblRH_EK_Empleados.Where(x => x.estatus_empleado == "A" && x.cc_contable != "000" && x.esActivo).ToList();
                //        var puestoClavesCPLAN = empleadosCPLAN.Select(x => x.puesto).ToList();
                //        var puestosCPLAN = _construplan.tblRH_EK_Puestos.Where(x => puestoClavesCPLAN.Contains(x.puesto)).Select(x => new
                //        {
                //            puesto = x.puesto,
                //            descripcion = x.descripcion
                //        }).ToList();
                //        foreach (var item in empleadosCPLAN)
                //        {
                //            var _puesto = puestosCPLAN.FirstOrDefault(x => x.puesto == item.puesto);
                //            if (_puesto != null) item.desc_puesto = _puesto.descripcion;
                //        }
                //        _empleados.AddRange(empleadosCPLAN);                        
                //    }
                //}

                var empleados = _empleados.Select(x => new
                {
                    claveEmpleado = x.clave_empleado,
                    puesto = x.puesto,
                    puestoDescripcion = x.desc_puesto,
                    nombre = x.nombre,
                    apellidoPaterno = x.ape_paterno,
                    apellidoMaterno = x.ape_materno
                }).ToList();

                var usuarios = _context.tblP_Usuario.Where(x => x.estatus).ToList();

                var data = new List<Infrastructure.DTO.ComboDTO>();

                foreach (var item in usuarios)
                {
                    if (!string.IsNullOrEmpty(item.cveEmpleado))
                    {
                        int cveEmpleadoInt = 0;
                        if (Int32.TryParse(item.cveEmpleado, out cveEmpleadoInt))
                        {
                            var empleado = empleados.FirstOrDefault(x => x.claveEmpleado == cveEmpleadoInt);
                            if (empleado != null)
                            {
                                var combo = new Infrastructure.DTO.ComboDTO();
                                combo.Value = item.id;
                                combo.Text = PersonalUtilities.NombreCompletoMayusculas(empleado.nombre, empleado.apellidoPaterno, empleado.apellidoMaterno);
                                combo.Prefijo = empleado.puestoDescripcion;
                                data.Add(combo);                                
                            }
                        }
                    }
                }

                //var data = usuarios.Select(m => new Infrastructure.DTO.ComboDTO
                //{
                //    Value = m.id,
                //    Text = m.nombre + " " + m.apellidoPaterno + " " + m.apellidoMaterno,
                //    Prefijo = m.puesto.descripcion
                //});
                resultado.Add(ITEMS, data);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
                LogError(_SISTEMA, 0, "NominaController", "GetUsuariosAutorizantes", e, AccionEnum.CONSULTA, 0, new { });
            }
            return resultado;
        }

        public tblC_Nom_Prenomina GetPrenominaByID(int prenominaID)
        {
            tblC_Nom_Prenomina objPrenomina = new tblC_Nom_Prenomina();
            try
            {
                objPrenomina = _context.tblC_Nom_Prenomina.Where(x => x.id == prenominaID).FirstOrDefault();
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, prenominaID, new { prenominaID = prenominaID });
            }
            return objPrenomina;
        }

        public List<tblC_Nom_PreNomina_Det> GetPrenominDetallesaByID(int prenominaID)
        {
            var data = _context.tblC_Nom_PreNomina_Det.Where(x => x.prenominaID == prenominaID).ToList();
            foreach (var item in data)
            {
                tblC_Nom_Prenomina objPrenomina = _context.tblC_Nom_Prenomina.Where(w => w.id == prenominaID).FirstOrDefault();
                if (objPrenomina != null)
                    item.orden = objPrenomina.tipoNomina;
            }
            return data;
        }

        public List<tblC_Nom_PreNomina_Aut> GetPrenominaAutorizantesByID(int prenominaID)
        {
            var data = _context.tblC_Nom_PreNomina_Aut.Where(x => x.prenominaID == prenominaID).ToList();
            return data;
        }
        public List<string> GetCorreosUsuarios(List<int> usuariosIds)
        {
            var correos = _context.tblP_Usuario.Where(x => usuariosIds.Contains(x.id)).Select(x => x.correo).ToList();
            return correos;
        }

        public Dictionary<string, object> GenerarReciboNomina(ReciboNominaDTO objParamsDTO)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region SE OBTIENE EL CORREO PERSONAL DE LOS EMPLEADOS
                if (objParamsDTO.clave_empleado <= 0)
                {
                    objParamsDTO.lstClaveEmpleados = _context.Select<int>(new DapperDTO
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = @"SELECT t2.clave_empleado
	                                        FROM tblC_Nom_Prenomina AS t1 
	                                        INNER JOIN tblC_Nom_PreNominaPeru_Det AS t2 ON t2.prenominaID = t1.id
		                                        WHERE t1.periodo = @periodo AND t1.tipoNomina = @tipoNomina AND t1.cc = @cc",
                        parametros = new { periodo = objParamsDTO.periodo, tipoNomina = objParamsDTO.tipoNomina, cc = objParamsDTO.cc }
                    }).ToList();

                    objParamsDTO.prenominaID = _context.Select<int>(new DapperDTO
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = @"SELECT t1.id
	                                        FROM tblC_Nom_Prenomina AS t1 
	                                        INNER JOIN tblC_Nom_PreNominaPeru_Det AS t2 ON t2.prenominaID = t1.id
		                                        WHERE t1.periodo = @periodo AND t1.tipoNomina = @tipoNomina AND t1.cc = @cc",
                        parametros = new { periodo = objParamsDTO.periodo, tipoNomina = objParamsDTO.tipoNomina, cc = objParamsDTO.cc }
                    }).FirstOrDefault();
                }
                else
                    objParamsDTO.lstClaveEmpleados.Add(objParamsDTO.clave_empleado);

                if (objParamsDTO.lstClaveEmpleados.Count() <= 0) { throw new Exception("Ocurrió un error al generar la boleta de nómina."); }

                string strQuery = string.Format(@"SELECT t2.email
	                                                    FROM tblRH_EK_Empleados AS t1
	                                                    INNER JOIN tblRH_EK_Empl_Grales AS t2 ON t2.clave_empleado = t1.clave_empleado
		                                                    WHERE t1.clave_empleado IN ({0}) AND t1.estatus_empleado = '{1}'", string.Join(",", objParamsDTO.lstClaveEmpleados), "A");
                List<string> lstCorreosNotificar = _context.Select<string>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = strQuery
                    //parametros = new { clave_empleado = string.Join(",", objParamsDTO.lstClaveEmpleados), estatus_empleado = "A" }
                }).ToList();
                if (lstCorreosNotificar.Count() <= 0)
                    throw new Exception(string.Format("El empleado {0} no cuenta con correo electrónico", objParamsDTO.clave_empleado));
#if DEBUG
                lstCorreosNotificar = new List<string> { "omar.nunez@construplan.com.mx" };
#endif
                #endregion

                #region GENERACIÓN DE BOLETA DE NOMINA (REPORTE PDF)
                foreach (var clave_empleado in objParamsDTO.lstClaveEmpleados)
                {
                    tblC_Nom_Prenomina objPrenomina = GetPrenominaByID(objParamsDTO.prenominaID);
                    List<PrenominaDTO> lstDetallePrenomina = GetInformacionBoletaNominaPeru(objParamsDTO.prenominaID);
                    lstDetallePrenomina = lstDetallePrenomina.Where(w => w.clave_empleado == clave_empleado).ToList();

                    DataTable dtPlanillaPeru = new DataTable();

                    // ENCABEZADO
                    dtPlanillaPeru.Columns.Add("clave_empleado", typeof(string));
                    dtPlanillaPeru.Columns.Add("nombre_empleado", typeof(string));
                    dtPlanillaPeru.Columns.Add("tipoNomina", typeof(string));
                    dtPlanillaPeru.Columns.Add("area", typeof(string));
                    dtPlanillaPeru.Columns.Add("cc", typeof(string));
                    dtPlanillaPeru.Columns.Add("puesto", typeof(string));
                    dtPlanillaPeru.Columns.Add("periodoPago", typeof(string));
                    dtPlanillaPeru.Columns.Add("fecha_nac", typeof(string));
                    dtPlanillaPeru.Columns.Add("fecha_alta", typeof(string));
                    dtPlanillaPeru.Columns.Add("fechaPago", typeof(string));

                    // INGRESOS
                    dtPlanillaPeru.Columns.Add("jornada_semanal", typeof(string));
                    dtPlanillaPeru.Columns.Add("horas_extra_60", typeof(string));
                    dtPlanillaPeru.Columns.Add("horas_extra_100", typeof(string));
                    dtPlanillaPeru.Columns.Add("horas_nocturnas", typeof(string));
                    dtPlanillaPeru.Columns.Add("feriados", typeof(string));
                    dtPlanillaPeru.Columns.Add("subsidios", typeof(string));
                    dtPlanillaPeru.Columns.Add("buc", typeof(string));
                    dtPlanillaPeru.Columns.Add("bono_altitud", typeof(string));
                    dtPlanillaPeru.Columns.Add("indemnizacion", typeof(string));
                    dtPlanillaPeru.Columns.Add("CTS", typeof(string));
                    dtPlanillaPeru.Columns.Add("Utilidades", typeof(string));
                    dtPlanillaPeru.Columns.Add("domincal", typeof(string));
                    dtPlanillaPeru.Columns.Add("gratificacion_proporcional", typeof(string));
                    dtPlanillaPeru.Columns.Add("bonificacion_extraordinaria", typeof(string));
                    dtPlanillaPeru.Columns.Add("bonificacion_alta_especial", typeof(string));
                    dtPlanillaPeru.Columns.Add("vacaciones_truncas", typeof(string));
                    dtPlanillaPeru.Columns.Add("bono_transporte", typeof(string));
                    dtPlanillaPeru.Columns.Add("asignacion_escolar", typeof(string));
                    dtPlanillaPeru.Columns.Add("BAE", typeof(string));
                    dtPlanillaPeru.Columns.Add("bono_por_altura", typeof(string));
                    dtPlanillaPeru.Columns.Add("devolucion_5ta", typeof(string));
                    dtPlanillaPeru.Columns.Add("totalIngresos", typeof(string));

                    // DESCUENTOS
                    dtPlanillaPeru.Columns.Add("descuento_medico", typeof(string));
                    dtPlanillaPeru.Columns.Add("AFP_obligatoria", typeof(string));
                    dtPlanillaPeru.Columns.Add("AFP_voluntaria", typeof(string));
                    dtPlanillaPeru.Columns.Add("AFP_comision", typeof(string));
                    dtPlanillaPeru.Columns.Add("AFP_prima", typeof(string));
                    dtPlanillaPeru.Columns.Add("conafovicer", typeof(string));
                    dtPlanillaPeru.Columns.Add("essalud_vida", typeof(string));
                    dtPlanillaPeru.Columns.Add("onp", typeof(string));
                    dtPlanillaPeru.Columns.Add("renta_5ta", typeof(string));
                    dtPlanillaPeru.Columns.Add("totalDeducciones", typeof(string));

                    // APORTACIONES
                    dtPlanillaPeru.Columns.Add("essalud_aportes", typeof(string));
                    dtPlanillaPeru.Columns.Add("AFP_aportes", typeof(string));
                    dtPlanillaPeru.Columns.Add("totalAportaciones", typeof(string));

                    dtPlanillaPeru.Columns.Add("netoPagar", typeof(string));
                    dtPlanillaPeru.Columns.Add("cuentaImporteAbonado", typeof(string));

                    foreach (var item in lstDetallePrenomina)
                    {
                        string fechaNacimiento = string.Format("{0}/{1}/{2}", item.fecha_nac.Day.ToString("00"), item.fecha_nac.Month.ToString("00"), item.fecha_nac.Year);
                        string fechaIngreso = string.Format("{0}/{1}/{2}", item.fecha_alta.Day.ToString("00"), item.fecha_alta.Month.ToString("00"), item.fecha_alta.Year);
                        string fechaPago = string.Format("{0}/{1}/{2}", DateTime.Now.Day.ToString("00"), DateTime.Now.Month.ToString("00"), DateTime.Now.Year);

                        #region SE HACE LA SUMA DE TOTAL DE INGRESOS
                        item.totalIngresos = ((decimal)item.jornada_semanal + (decimal)item.horas_extra_60 + (decimal)item.horas_extra_100 + (decimal)item.horas_nocturnas + (decimal)item.feriados +
                                                    (decimal)item.subsidios + (decimal)item.buc + (decimal)item.bono_altitud + (decimal)item.indemnizacion + (decimal)item.CTS + (decimal)item.Utilidades +
                                                    (decimal)item.dominical + (decimal)item.gratificacion_proporcional + (decimal)item.bonificacion_extraordinaria + (decimal)item.bonificacion_alta_especial +
                                                    (decimal)item.vacaciones_truncas + (decimal)item.bono_transporte + (decimal)item.asignacion_escolar + (decimal)item.BAE + (decimal)item.bono_por_altura +
                                                    (decimal)item.devolucion_5ta);
                        #endregion

                        #region SE HACE LA SUMA DE TOTAL DEDUCCIONES
                        item.totalDeducciones = ((decimal)item.descuento_medico + (decimal)item.AFP_obligatoria + (decimal)item.AFP_voluntaria + (decimal)item.AFP_comision + (decimal)item.AFP_prima +
                                                    (decimal)item.conafovicer + (decimal)item.essalud_vida + (decimal)item.onp + (decimal)item.renta_5ta + (decimal)item.totalDeducciones);
                        #endregion

                        #region SE HACE LA SUMA NETO A PAGAR
                        item.netoPagar = (decimal)item.totalIngresos + (decimal)item.totalDeducciones;
                        #endregion

                        #region SE HACE LA SUMA DE APORTACIONES
                        item.totalAportaciones = ((decimal)item.essalud_aportes + (decimal)item.AFP_aportes);
                        #endregion

                        item.fechaNacimiento = string.Format("{0}/{1}/{2}", item.fecha_nac.Day.ToString("00"), item.fecha_nac.Month.ToString("00"), item.fecha_nac.Year);
                        item.fechaAlta = string.Format("{0}/{1}/{2}", item.fecha_alta.Day.ToString("00"), item.fecha_alta.Month.ToString("00"), item.fecha_alta.Year);

                        dtPlanillaPeru.Rows.Add(
                            // ENCABEZADO
                            item.clave_empleado,
                            item.nombre_empleado,
                            item.tipoNomina == 20 ? "Obrero" : (item.tipoNomina == 21 ? "Empleado" : "Construcción Civil"),
                            item.area,
                            string.Format("[{0}] {1}", item.cc, item.descripcion),
                            item.puesto,
                            item.periodoPago,
                            item.fechaNacimiento = item.fechaNacimiento,
                            item.fechaAlta = item.fechaAlta,
                            item.fechaPago = fechaPago,

                            // INGRESOS
                            item.jornada_semanal.ToString("C"),
                            item.horas_extra_60.ToString("C"),
                            item.horas_extra_100.ToString("C"),
                            item.horas_nocturnas.ToString("C"),
                            item.feriados.ToString("C"),
                            item.subsidios.ToString("C"),
                            item.buc.ToString("C"),
                            item.bono_altitud.ToString("C"),
                            item.indemnizacion.ToString("C"),
                            item.CTS.ToString("C"),
                            item.Utilidades.ToString("C"),
                            item.dominical.ToString("C"),
                            item.gratificacion_proporcional.ToString("C"),
                            item.bonificacion_extraordinaria.ToString("C"),
                            item.bonificacion_alta_especial.ToString("C"),
                            item.vacaciones_truncas.ToString("C"),
                            item.bono_transporte.ToString("C"),
                            item.asignacion_escolar.ToString("C"),
                            item.BAE.ToString("C"),
                            item.bono_por_altura.ToString("C"),
                            item.devolucion_5ta.ToString("C"),
                            item.totalIngresos.ToString("C"),

                            // DESCUENTOS
                            item.descuento_medico.ToString("C"),
                            item.AFP_obligatoria.ToString("C"),
                            item.AFP_voluntaria.ToString("C"),
                            item.AFP_comision.ToString("C"),
                            item.AFP_prima.ToString("C"),
                            item.conafovicer.ToString("C"),
                            item.essalud_vida.ToString("C"),
                            item.onp.ToString("C"),
                            item.renta_5ta.ToString("C"),
                            item.totalDeducciones.ToString("C"),

                            // APORTACIONES
                            item.essalud_aportes.ToString("C"),
                            item.AFP_aportes.ToString("C"),
                            item.totalAportaciones.ToString("C"),

                            item.netoPagar.ToString("C"),
                            item.cuentaImporteAbonado
                        );
                    }

                    ReportDocument rptReciboNomina = new rptReciboNominaPeru();
                    rptReciboNomina.Database.Tables[0].SetDataSource(getInfoEnca("reporte", ""));
                    rptReciboNomina.Database.Tables[1].SetDataSource(dtPlanillaPeru);
                    Stream stream = rptReciboNomina.ExportToStream(ExportFormatType.PortableDocFormat);

                    List<byte[]> downloadPDFs = new List<byte[]>();
                    using (var streamReader = new MemoryStream())
                    {
                        stream.CopyTo(streamReader);
                        downloadPDFs.Add(streamReader.ToArray());

                        GlobalUtils.sendEmailAdjuntoInMemory2(string.Format("{0}: BOLETA NOMINA - {1}", PersonalUtilities.GetNombreEmpresa(), DateTime.Now.ToString("dd/MM/yyyy")),
                                                                string.Empty, lstCorreosNotificar, downloadPDFs, string.Format("{0} - {1}", "BoletaNomina.pdf", DateTime.Now.ToString("dd/MM/yyyy")));
                    }
                }

                string mensajeExito = objParamsDTO.lstClaveEmpleados.Count() == 1 ? "Se ha enviado con éxito la boleta de nomina" : "Se ha enviado con éxito las boletas de nomina.";

                resultado.Add(SUCCESS, true);
                resultado.Add(MESSAGE, mensajeExito);
                #endregion
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, objParamsDTO);
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }
            return resultado;
        }

        public DataTable getInfoEnca(string nombreReporte, string area)
        {
            DataTable tableEncabezado = new DataTable();
            tableEncabezado.Columns.Add("logo", System.Type.GetType("System.Byte[]"));
            tableEncabezado.Columns.Add("nombreEmpresa", System.Type.GetType("System.String"));
            tableEncabezado.Columns.Add("nombreReporte", System.Type.GetType("System.String"));
            tableEncabezado.Columns.Add("area", System.Type.GetType("System.String"));

            var data = encabezadoFactoryServices.getEncabezadoDatos();
            string path = data.logo;
            byte[] imgdata = System.IO.File.ReadAllBytes(HostingEnvironment.MapPath(path));
            string empresa = data.nombreEmpresa;

            tableEncabezado.Rows.Add(imgdata, empresa, nombreReporte, area);

            return tableEncabezado;
        }
        #endregion

        #region Gestión Prenomina
        public Dictionary<string, object> GetLstGestionPrenomina(string CC, int periodo, tipoNominaPropuestaEnum tipoNomina, int anio, string estatus)
        {
            if (CC == "--Seleccione--") CC = "";
            var usuario = vSesiones.sesionUsuarioDTO.id;
            var result = new Dictionary<string, object>();
            try
            {
                var prenominasValidadas = _context.tblC_Nom_Prenomina.Where(x => x.validada).Select(x => x.id).ToList();
                // --> Caso especial Liliana Madrid puede autorizar todas las prenominas.
                var autorizaciones = _context.tblC_Nom_PreNomina_Aut.Where(x => ((usuario == 1041 || usuario == 1097 || usuario == 1096 || usuario == 37184 || usuario == 42209) ? true : x.aprobadorClave == usuario) && prenominasValidadas.Contains(x.prenominaID)).ToList();
                var autorizacionesPrenominaID = autorizaciones.Select(x => x.prenominaID).Distinct().ToList();
                var lst = _context.tblC_Nom_Prenomina.Where(x =>
                    (CC == "" ? true : x.CC.Equals(CC)) &&
                    (estatus == "Todos" ? true : estatus == x.estatus.ToString()) &&
                    x.periodo == periodo &&
                    x.tipoNomina == (int)tipoNomina &&
                    x.year == anio &&
                    autorizacionesPrenominaID.Contains(x.id)
                ).ToList();

                var permisoVisualizacion = _context.tblP_AccionesVistatblP_Usuario.FirstOrDefault(x => x.tblP_Usuario_id == vSesiones.sesionUsuarioDTO.id && x.tblP_AccionesVista_id == 4059);

                if (permisoVisualizacion != null)
                {
                    var ccPermiso = _context.tblRH_BN_Usuario_CC.Where(x => x.usuarioID == vSesiones.sesionUsuarioDTO.id).Select(x => x.cc).ToList();
                    bool permisoTotal = ccPermiso.Contains("*");
                    if (ccPermiso.Count() > 0)
                    {
                        var lstPermiso = _context.tblC_Nom_Prenomina.Where(x =>
                            (permisoTotal ? true : ccPermiso.Contains(x.CC)) &&
                            (estatus == "Todos" ? true : estatus == x.estatus.ToString()) &&
                            x.periodo == periodo &&
                            x.tipoNomina == (int)tipoNomina &&
                            x.year == anio
                        ).ToList();

                        if (lstPermiso.Count() > 0)
                        {
                            lst.AddRange(lstPermiso);
                            lst.Distinct();
                        }
                    }
                }

                var usuariosCapturoID = lst.Select(x => x.usuarioCapturaID).Distinct().ToList();
                var ccs = lst.Select(x => x.CC).Distinct().ToList();
                var usuariosCapturo = _context.tblP_Usuario.Where(x => usuariosCapturoID.Contains(x.id)).ToList();
                var ccsDesc = _context.tblC_Nom_CatalogoCC.Where(x => x.estatus).Where(x => ccs.Contains(x.cc)).ToList();
                var esSucces = true;
                if (esSucces)
                {
                    result.Add("lst", lst.Select(s =>
                    {
                        var auxUsuario = usuariosCapturo.FirstOrDefault(x => x.id == s.usuarioCapturaID);
                        var auxCC = ccsDesc.FirstOrDefault(x => x.cc == s.CC);
                        var autorizacionUsuario = autorizaciones.FirstOrDefault(x => x.prenominaID == s.id);
                        return new
                        {
                            id = s.id,
                            cc = s.CC,
                            ccNombre = auxCC == null ? "" : "[" + auxCC.cc + "] " + auxCC.ccDescripcion,
                            estatus = s.estatus,
                            estatusDesc = ((authEstadoEnum)s.estatus).GetDescription(),
                            fechaCaptura = s.fechaCaptura.ToShortDateString(),
                            tipoNominaDesc = ((tipoNominaPropuestaEnum)s.tipoNomina).GetDescription(),
                            periodo = s.periodo,
                            anio = s.year,
                            usuarioCapturoID = s.usuarioCapturaID,
                            usuarioCapturoNombre = auxUsuario == null ? "" : string.Format("{0} {1} {2}", auxUsuario.nombre, auxUsuario.apellidoPaterno, auxUsuario.apellidoMaterno),
                            estadoUsuario = autorizacionUsuario == null ? 0 : autorizacionUsuario.estatus,
                            estadoUsuarioDesc = ((authEstadoEnum)(autorizacionUsuario == null ? 0 : autorizacionUsuario.estatus)).GetDescription(),
                        };
                    }).OrderBy(x => x.ccNombre).ToList());
                }
                result.Add(SUCCESS, esSucces);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }
            return result;
        }

        public Dictionary<string, object> GetListaAutorizantes(int prenominaID)
        {
            var result = new Dictionary<string, object>();
            try
            {
                var prenomina = _context.tblC_Nom_Prenomina.FirstOrDefault(w => w.id == prenominaID);
                var prenomina_aut = _context.tblC_Nom_PreNomina_Aut.ToList().Where(w => w.prenominaID == prenominaID).ToList();
                var esSucces = prenomina_aut.Count > 0;
                if (esSucces)
                {
                    var clase = string.Empty;
                    var idUsuario = vSesiones.sesionUsuarioDTO.id;
                    var auxUsuario = _context.tblP_Usuario.FirstOrDefault(x => x.id == prenomina.usuarioCapturaID);
                    var lst = prenomina_aut.Select(a => new authDTO()
                    {
                        idRegistro = a.id,
                        idAuth = a.aprobadorClave,
                        idPadre = a.prenominaID,
                        orden = a.orden,
                        comentario = a.comentario ?? string.Empty,
                        descripcion = a.aprobadorPuesto,
                        firma = a.firma ?? string.Empty,
                        nombre = a.aprobadorNombre,
                        //--> Permiso especial de Liliana Madrid para autorizar todas las nominas
                        authEstado = a.autorizando && (a.aprobadorClave == idUsuario || idUsuario == 1096) ? authEstadoEnum.EnTurno : (authEstadoEnum)a.estatus,
                        clase = a.autorizando && (a.aprobadorClave == idUsuario || idUsuario == 1096) ? authEstadoEnum.EnTurno.GetDescription() : ((authEstadoEnum)a.estatus).GetDescription(),
                    }).OrderBy(x => x.orden).ToList();
                    result.Add("autorizantes", lst);
                    result.Add(MESSAGE, auxUsuario == null ? "" : string.Format("Capturó: {0} {1} {2}", auxUsuario.nombre, auxUsuario.apellidoPaterno, auxUsuario.apellidoMaterno));

                    //var resultadoComparacion = bonofs.ObtenerComparativaVersionesPlantilla(plan);
                    //result.Add("comparacion", resultadoComparacion);
                }
                result.Add(SUCCESS, esSucces);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }
            return result;
        }

        public Dictionary<string, object> AutorizarPrenomina(authDTO auth)
        {
            var result = new Dictionary<string, object>();
            using (var dbTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    var stAuth = (int)authEstadoEnum.Autorizado;
                    var prenomina = _context.tblC_Nom_Prenomina.FirstOrDefault(x => x.id == auth.idPadre);
                    var detalles = _context.tblC_Nom_PreNomina_Aut.Where(x => x.prenominaID == auth.idPadre).ToList();
                    var det = detalles.FirstOrDefault(x => x.id == auth.idRegistro);
                    det.autorizando = false;
                    det.estatus = stAuth;
                    det.firma = GlobalUtils.CrearFirmaDigital(auth.idPadre, DocumentosEnum.Prenomina, vSesiones.sesionUsuarioDTO.id);
                    det.fecha = DateTime.Now;
                    var detallesObra = detalles.Where(x => x.esObra).ToList();
                    var detallesOficina = detalles.Where(x => !x.esObra).ToList();
                    if ((detallesObra.Any(a => a.estatus == stAuth) || detallesObra.Count() < 1) && (detallesOficina.All(a => a.estatus == stAuth) || detallesOficina.Count() < 1))
                    {
                        prenomina.estatus = stAuth;
                        prenomina.fechaAutorizacion = det.fecha;
                    }
                    else
                    {
                        var sigOrden = detalles.Where(w => w.estatus == (int)authEstadoEnum.EnEspera).Min(m => m.orden);
                        var sigAuth = detalles.FirstOrDefault(w => w.orden == sigOrden);
                        sigAuth.autorizando = true;
                    }
                    _context.SaveChanges();
                    dbTransaction.Commit();
                    result.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    dbTransaction.Rollback();
                    var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.ACTUALIZAR, 0, auth);
                    result.Add(MESSAGE, e.Message);
                    result.Add(SUCCESS, false);
                }
            }
            return result;
        }
        public Dictionary<string, object> RechazarPrenomina(authDTO auth)
        {
            var result = new Dictionary<string, object>();

            using (var dbTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    if (auth.comentario == null || auth.comentario.Trim().Length < 10)
                    {
                        result.Add(MESSAGE, "No se rechazó la solicitud. El comentario viene vacío.");
                        result.Add(SUCCESS, false);
                        return result;
                    }
                    var prenomina = _context.tblC_Nom_Prenomina.FirstOrDefault(x => x.id == auth.idPadre);
                    var detalles = _context.tblC_Nom_PreNomina_Aut.Where(x => x.prenominaID == auth.idPadre).ToList();
                    var det = detalles.FirstOrDefault(x => x.id == auth.idRegistro);

                    det.comentario = auth.comentario;
                    det.estatus = prenomina.estatus = (int)authEstadoEnum.Rechazado;
                    det.autorizando = false;

                    prenomina.validada = false;
                    _context.SaveChanges();
                    dbTransaction.Commit();
                    result.Add("prenomina", prenomina);
                    result.Add("responsable", (vSesiones.sesionUsuarioDTO.nombre + " " + vSesiones.sesionUsuarioDTO.apellidoPaterno + " " + vSesiones.sesionUsuarioDTO.apellidoMaterno + " ").ToUpper());
                    result.Add("empresa", ((EmpresaEnum)vSesiones.sesionEmpresaActual).GetDescription());
                    result.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    dbTransaction.Rollback();
                    var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.ACTUALIZAR, 0, auth);
                    result.Add(MESSAGE, e.Message);
                    result.Add(SUCCESS, false);
                }
            }

            return result;
        }

        #endregion

        #region Alerta Autorizacion Prenomina

        public Dictionary<string, object> CargarPrenominasValidadas(string CC, int periodo, tipoNominaPropuestaEnum tipoNomina, int anio)
        {
            if (CC == "--Seleccione--") CC = "";
            var result = new Dictionary<string, object>();
            try
            {
                List<tblC_Nom_Prenomina> prenominas = _context.tblC_Nom_Prenomina.Where(x => ((CC == null || CC == "") ? true : x.CC == CC) && x.estatus < 2 && x.periodo == periodo && x.tipoNomina == (int)tipoNomina && x.year == anio && x.validada).OrderByDescending(x => x.fechaCaptura).ToList();

                var CCs = _context.tblP_CC.Where(x => x.estatus).ToList();
                var listaPrenominas = prenominas.Select(x =>
                {
                    var auxCC = CCs.FirstOrDefault(y => y.cc == x.CC);
                    var usuarioValida = _context.tblP_Usuario.FirstOrDefault(y => y.id == x.usuarioValidaID);
                    var usuarioCaptura = _context.tblP_Usuario.FirstOrDefault(y => y.id == x.usuarioCapturaID);
                    var autorizaciones = _context.tblC_Nom_PreNomina_Aut.Where(y => y.prenominaID == x.id).ToList();
                    var autorizacionesObra = autorizaciones.Where(y => y.esObra).ToList();
                    var autorizado = false;
                    var autorizadoObra = false;
                    var fechaAutorizacion = "";
                    var fechaAutorizacionObra = "";
                    if (autorizacionesObra.Count() > 0)
                    {
                        var autorizacionesObraNoRealizadas = autorizacionesObra.Where(y => y.estatus != 1).Count();
                        if (autorizacionesObraNoRealizadas < 1)
                        {
                            autorizadoObra = true;
                            fechaAutorizacionObra = (autorizacionesObra.Max(y => y.fecha) ?? default(DateTime)).ToShortDateString();
                        }
                    }
                    else
                    {
                        autorizadoObra = true;
                        fechaAutorizacionObra = x.fechaCaptura.ToShortDateString();
                    }
                    var autorizacionesNoRealizadas = autorizaciones.Where(y => y.estatus != 1).Count();
                    if (autorizacionesNoRealizadas == 0 && x.estatus == 1)
                    {
                        autorizado = true;
                        fechaAutorizacion = (x.fechaAutorizacion ?? default(DateTime)).ToShortDateString();
                    }

                    return new
                    {
                        id = x.id,
                        CC = x.CC,
                        nombreCC = string.Format("[{0}] {1}", x.CC, (auxCC == null ? x.nombreCC : auxCC.descripcion)),
                        tipoNomina = x.tipoNomina,
                        periodo = x.periodo,
                        year = x.year,
                        usuarioCapturaID = x.usuarioCapturaID,
                        usuarioCaptura = (usuarioCaptura == null ? "" : string.Format("{0} {1} {2}", usuarioCaptura.nombre, usuarioCaptura.apellidoPaterno, usuarioCaptura.apellidoMaterno)),
                        fechaCaptura = x.fechaCaptura.ToShortDateString(),
                        validada = x.validada,
                        usuarioValidaID = x.usuarioValidaID,
                        usuarioValida = (usuarioValida == null ? "" : string.Format("{0} {1} {2}", usuarioValida.nombre, usuarioValida.apellidoPaterno, usuarioValida.apellidoMaterno)),
                        fechaValidacion = (x.fechaValidacion ?? DateTime.Now).ToShortDateString(),
                        estatus = x.estatus,
                        autorizadoObra = autorizadoObra,
                        fechaAutorizacionObra = fechaAutorizacionObra,
                        autorizado = autorizado,
                        fechaAutorizacion = fechaAutorizacion,
                        notificadoOficina = x.notificadoOficina
                    };
                });
                result.Add("listaPrenominas", listaPrenominas);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, new { CC, periodo, tipoNomina, anio });
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return result;
        }

        public List<authDTO> GetListaAutorizantes(List<int> prenominaID)
        {
            try
            {
                List<authDTO> data = new List<authDTO>();
                var prenomina_aut = _context.tblC_Nom_PreNomina_Aut.ToList().Where(w => prenominaID.Contains(w.prenominaID)).ToList();
                var esSucces = prenomina_aut.Count > 0;
                if (esSucces)
                {
                    var clase = string.Empty;
                    var idUsuario = vSesiones.sesionUsuarioDTO.id;
                    data = prenomina_aut.Select(a => new authDTO()
                    {
                        idRegistro = a.id,
                        idAuth = a.aprobadorClave,
                        idPadre = a.prenominaID,
                        orden = a.orden,
                        comentario = a.comentario ?? string.Empty,
                        descripcion = a.aprobadorPuesto,
                        firma = a.firma ?? string.Empty,
                        nombre = a.aprobadorNombre,
                        authEstado = a.autorizando && a.aprobadorClave == idUsuario ? authEstadoEnum.EnTurno : (authEstadoEnum)a.estatus,
                        clase = a.autorizando && a.aprobadorClave == idUsuario ? authEstadoEnum.EnTurno.GetDescription() : ((authEstadoEnum)a.estatus).GetDescription(),
                    }).OrderBy(x => x.orden).ToList();
                }
                return data;
            }
            catch (Exception e)
            {
                return null;
            }
        }

        public List<tblC_Nom_PreNomina_Aut> GetListaAutorizantesOficina(List<int> prenominaIDs)
        {
            var prenomina = _context.tblC_Nom_Prenomina.Where(w => prenominaIDs.Contains(w.id)).ToList();
            var prenomina_aut = _context.tblC_Nom_PreNomina_Aut.ToList().Where(w => prenominaIDs.Contains(w.prenominaID)).ToList();
            return prenomina_aut;
        }

        public bool AplicarPrenominaNotificadaOficina(List<int> prenominasID)
        {
            try
            {
                var prenominas = _context.tblC_Nom_Prenomina.Where(x => prenominasID.Contains(x.id)).ToList();
                foreach (var prenomina in prenominas) { prenomina.notificadoOficina = true; }
                _context.SaveChanges();
                return true;
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.ACTUALIZAR, 0, new { prenominasID });
                return false;
            }
        }

        public List<tblC_Nom_Prenomina> GetPrenominasPeriodo(int periodo, int anio, int tipoNomina)
        {
            var data = _context.tblC_Nom_Prenomina.Where(x => x.periodo == periodo && x.year == anio && x.tipoNomina == tipoNomina && x.fechaAutorizacion != null).ToList();
            return data;
        }

        public tblC_Nom_CatalogoCC GetCatalogoCC(string CC)
        {
            var data = _context.tblC_Nom_CatalogoCC.FirstOrDefault(x => x.cc == CC && x.estatus);
            return data;
        }
        public Dictionary<string, object> VerificarCorreoDespacho(int periodo, tipoNominaPropuestaEnum tipoNomina, int anio)
        {
            var result = new Dictionary<string, object>();
            try
            {
                var ccsAplica = _context.tblC_Nom_CatalogoCC.Where(x => (tipoNomina == tipoNominaPropuestaEnum.Quincenal ? x.quincenal : x.semanal) && x.estatus).ToList();
                var ccNominaAutorizadas = _context.tblC_Nom_Prenomina.Where(x => x.tipoNomina == (int)tipoNomina && x.year == anio && x.periodo == periodo && x.fechaAutorizacion != null).Select(x => x.CC).ToList();
                var faltantes = ccsAplica.Where(x => !ccNominaAutorizadas.Contains(x.cc)).Select(x => new
                {
                    cc = x.cc,
                    ccDescripcion = x.ccDescripcion
                }).ToList();

                result.Add("faltantes", faltantes);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, new { periodo, tipoNomina, anio });
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return result;
        }

        public List<tblC_Nom_Prenomina> GetPrenominasAutorizadas(int periodo, tipoNominaPropuestaEnum tipoNomina, int anio)
        {
            var prenominas = _context.tblC_Nom_Prenomina.Where(x => x.tipoNomina == (int)tipoNomina && x.year == anio && x.periodo == periodo && x.fechaAutorizacion != null).ToList();
            return prenominas;
        }

        public byte[] DataExcelPrenomina(int prenominaID)
        {
            try
            {
                var prenomina = _context.tblC_Nom_Prenomina.FirstOrDefault(x => x.id == prenominaID);
                var detalles = _context.tblC_Nom_PreNomina_Det.Where(x => x.prenominaID == prenominaID).OrderBy(x => x.empleadoNombre).ToList();
                var autorizantes = _context.tblC_Nom_PreNomina_Aut.Where(x => x.prenominaID == prenominaID).OrderBy(x => x.orden).ToList();
                var cc = _context.tblP_CC.Where(x => x.estatus).FirstOrDefault(x => x.cc == (prenomina.CC == "180-A" ? "180" : (prenomina.CC == "187-A" ? "187" : prenomina.CC)));
                var realizo = _context.tblP_Usuario.FirstOrDefault(x => x.id == prenomina.usuarioCapturaID);
                var empleadosID = detalles.Select(x => x.empleadoCve).ToList();
                var fechaStr = GetPeriodoNomina(prenomina.year, prenomina.periodo, prenomina.tipoNomina);

                //                var odbc = new OdbcConsultaDTO()
                //                {
                //                    consulta = string.Format(
                //                        @"SELECT 
                //                            A.clave_empleado, A.nombre, A.ape_paterno, A.ape_materno, A.clave_depto, B.desc_depto, direccion, cc, A.sindicato
                //                        FROM (SELECT * FROM sn_empleados where clave_empleado in {0}) A
                //                        inner join sn_departamentos B
                //                        ON A.clave_depto = B.clave_depto"
                //                        , empleadosID.ToParamInValue()
                //                    ),
                //                    parametros = empleadosID.Select(s => new OdbcParameterDTO() { nombre = "clave_empleado", tipo = OdbcType.Int, valor = s }).ToList()
                //                };

                //                EnkontrolAmbienteEnum nominaBD = EnkontrolAmbienteEnum.Rh;
                var empresa = vSesiones.sesionEmpresaActual;

                //                switch (empresa)
                //                {
                //                    case 1:
                //                        nominaBD = EnkontrolAmbienteEnum.Rh;
                //                        break;
                //                    case 2:
                //                        nominaBD = EnkontrolAmbienteEnum.RhArre;
                //                        break;
                //                }

                //                var result = _contextEnkontrol.Select<DepartamentoEmpleadoDTO>(nominaBD, odbc);
                var stringEmpleados = "(";
                for (int i = 0; i < empleadosID.Count(); i++)
                {
                    if (i == empleadosID.Count() - 1) stringEmpleados += empleadosID[i].ToString() + ")";
                    else stringEmpleados += empleadosID[i].ToString() + ",";
                }

                var result = _context.Select<DepartamentoEmpleadoDTO>(new DapperDTO
                {
                    //baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = string.Format(@"SELECT 
                            A.clave_empleado, A.nombre, A.ape_paterno, A.ape_materno, A.clave_depto, B.desc_depto, direccion, cc, A.sindicato
                        FROM (SELECT * FROM tblRH_EK_Empleados where clave_empleado in {0}) A
                        inner join tblRH_EK_Departamentos B
                        ON A.clave_depto = B.clave_depto", stringEmpleados)
                }).ToList();

                var departamentos = result.Where(x => x.cc == (prenomina.CC == "180-A" ? "180" : (prenomina.CC == "187-A" ? "187" : prenomina.CC))).Select(x => x.desc_depto.ToUpper()).Distinct().OrderBy(x => x).ToList();

                using (ExcelPackage excel = new ExcelPackage())
                {
                    for (int j = 0; j < departamentos.Count(); j++)
                    {
                        var hoja1 = excel.Workbook.Worksheets.Add(departamentos[j]);
                        var empleadosDepartamento = result.Where(x => x.desc_depto.ToUpper() == departamentos[j].ToUpper()).Select(x => x.clave_empleado).ToList();
                        var detallesDepartamento = detalles.Where(x => empleadosDepartamento.Contains(x.empleadoCve)).ToList();
                        string tipoNominaDesc = prenomina.tipoNomina == 1 ? "SUELDO SEMANAL" : "SUELDO QUINCENAL";

                        List<string[]> headerRow = new List<string[]>() { 
                            new string[] { 
                                "No.", "CODIGO EMPLEADO", "NOMBRE DEL TRABAJADOR", "PUESTO", tipoNominaDesc, "DIAS", "BASE NOMINA", "DIAS VAC", "BASE VACACIONES", "DESCTOS", "APOYO COLECTIVO", "PRESTAMO", "AXA", "FAMSA", "PENSION", 
                                "FONACOT", "INFONAVIT","SINDICATO", "2.5% FONDO AHORRO", "TOTAL BASE NOMINA", " ", "COMPLEMENTO DE NOMINA", "2.5% FONDO AHORRO", " BONO ZONA", 
                                "BONO DE PRODUCCION", "OTROS", "PRIMA VACACIONAL", "PRIMA DOMINICAL", "HORAS EXTRAS", "Valor Hrs Extra", "IMPORTE DE HRS EXTRAS", "DIAS EXTRAS", 
                                "Valor Dia Extra", "IMPORTE DE DIAS EXTRAS", "DIAS FESTIVOS", "Valor Dia Festivo", "IMPORTE DE DIAS FESTIVOS", "TOTAL DE COMPLEMENTO", " ", "TOTAL A PAGAR", "%", "TOTAL REAL A PAGAR", "VALES DESPENSA", 
                                "TOTAL DEPOSITO", "OBSERVACIONES"
                            } 
                        };

                        hoja1.Cells["A5:AR5"].LoadFromArrays(headerRow);
                        hoja1.Cells["A5:AR5"].Style.WrapText = true;
                        hoja1.Cells["A5:AR5"].Style.Font.Bold = true;
                        hoja1.Cells["A5:AR5"].Style.Font.Size = 10;
                        hoja1.Cells["A5:AR5"].Style.Font.Name = "Arial";
                        hoja1.Cells["A5:AR5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        switch (empresa)
                        {
                            case 1: hoja1.Cells[1, 3].Value = "SOLUCIONES INDUSTRIALES SA DE CV"; break;
                            default: hoja1.Cells[1, 3].Value = "SOLUCIONES INDUSTRIALES SA DE CV"; break;
                        }
                        hoja1.Cells[2, 3].Value = ((tipoNominaPropuestaEnum)prenomina.tipoNomina).GetDescription() + " " + prenomina.periodo + ": " + fechaStr;
                        hoja1.Cells[3, 3].Value = departamentos[j].ToUpper().Trim();
                        hoja1.Cells[4, 3].Value = "[" + cc.cc + "] " + cc.descripcion.Trim();

                        hoja1.Cells[1, 3].Style.Font.Bold = true;
                        hoja1.Cells[1, 3].Style.Font.Size = 10;
                        hoja1.Cells[1, 3].Style.Font.Name = "Arial";
                        hoja1.Cells[2, 3].Style.Font.Bold = true;
                        hoja1.Cells[2, 3].Style.Font.Size = 10;
                        hoja1.Cells[2, 3].Style.Font.Name = "Arial";
                        hoja1.Cells[3, 3].Style.Font.Bold = true;
                        hoja1.Cells[3, 3].Style.Font.Size = 10;
                        hoja1.Cells[3, 3].Style.Font.Name = "Arial";
                        hoja1.Cells[4, 3].Style.Font.Bold = true;
                        hoja1.Cells[4, 3].Style.Font.Size = 10;
                        hoja1.Cells[4, 3].Style.Font.Name = "Arial";

                        var cellData = new List<object[]>();

                        int indexOrden = 1;
                        foreach (var item in detallesDepartamento)
                        {
                            cellData.Add(new object[] {
                                indexOrden,
                                item.empleadoCve,
                                item.empleadoNombre,
                                item.puesto,
                                item.sueldoSemanal,
                                item.dias,
                                item.nominaBase,
                                item.diasVacaciones,
                                item.nominaBaseVacaciones,
                                item.descuento,
                                item.apoyoColectivo,
                                item.prestamo,
                                item.axa,
                                item.descuentoFamsa,
                                item.pensionAlimenticia,
                                item.fonacot,
                                item.infonavit,
                                item.sindicato,
                                item.fondoAhorroNomina,
                                item.totalNomina,
                                " ",
                                item.complementoNomina,
                                item.fondoAhorroComplemento,
                                item.bonoZona,
                                item.bonoProduccion,
                                item.otros,
                                item.primaVacacional,
                                item.primaDominical,
                                item.hrExtra,
                                item.hrExtraValor,
                                item.importeExtra,
                                item.diaHrExtra,
                                item.diaExtraValor,
                                item.importeDiaExtra,
                                item.diaFestivo,
                                item.diaFestivoValor,
                                item.importeDiaFestivo,
                                item.totalComplemento,
                                " ",
                                item.totalPagar,
                                item.porcentajeTotalPagar * 100,
                                item.totalRealPagar,
                                item.valesDespensa,
                                item.totalDeposito,
                                item.observaciones
                            });
                            indexOrden++;
                        }

                        cellData.Add(new object[] {
                                " ",
                                " ",
                                " ",
                                " ",
                                detallesDepartamento.Sum(z => z.sueldoSemanal),
                                "",
                                detallesDepartamento.Sum(z => z.nominaBase),
                                "",
                                detallesDepartamento.Sum(z => z.nominaBaseVacaciones),
                                detallesDepartamento.Sum(z => z.descuento),
                                detallesDepartamento.Sum(z => z.apoyoColectivo),
                                detallesDepartamento.Sum(z => z.prestamo),
                                detallesDepartamento.Sum(z => z.axa),
                                detallesDepartamento.Sum(z => z.descuentoFamsa),
                                detallesDepartamento.Sum(z => z.pensionAlimenticia),
                                detallesDepartamento.Sum(z => z.fonacot),
                                detallesDepartamento.Sum(z => z.infonavit),
                                detallesDepartamento.Sum(z => z.sindicato),
                                detallesDepartamento.Sum(z => z.fondoAhorroNomina),
                                detallesDepartamento.Sum(z => z.totalNomina),
                                " ",
                                detallesDepartamento.Sum(z => z.complementoNomina),
                                detallesDepartamento.Sum(z => z.fondoAhorroComplemento),
                                detallesDepartamento.Sum(z => z.bonoZona),
                                detallesDepartamento.Sum(z => z.bonoProduccion),
                                detallesDepartamento.Sum(z => z.otros),
                                detallesDepartamento.Sum(z => z.primaVacacional),
                                detallesDepartamento.Sum(z => z.primaDominical),
                                detallesDepartamento.Sum(z => z.hrExtra),
                                " ",
                                detallesDepartamento.Sum(z => z.importeExtra),
                                detallesDepartamento.Sum(z => z.diaHrExtra),
                                " ",
                                detallesDepartamento.Sum(z => z.importeDiaExtra),
                                detallesDepartamento.Sum(z => z.diaFestivo),
                                " ",
                                detallesDepartamento.Sum(z => z.importeDiaFestivo),
                                detallesDepartamento.Sum(z => z.totalComplemento),
                                " ",
                                detallesDepartamento.Sum(z => z.totalPagar),
                                " ",
                                detallesDepartamento.Sum(z => z.totalRealPagar),
                                detallesDepartamento.Sum(z => z.valesDespensa),
                                detallesDepartamento.Sum(z => z.totalDeposito),
                                " ",
                            });

                        hoja1.Cells[6, 1].LoadFromArrays(cellData);

                        var firmaRealizo = GlobalUtils.CrearFirmaDigital(prenomina.id, DocumentosEnum.Prenomina, realizo.id, TipoFirmaEnum.Autorizacion);

                        hoja1.Cells[5 + detallesDepartamento.Count() + 3, 4].Value = firmaRealizo;
                        hoja1.Cells[6 + detallesDepartamento.Count() + 3, 4].Value = "___________________________";
                        hoja1.Cells[7 + detallesDepartamento.Count() + 3, 4].Value = "ELABORÓ";
                        hoja1.Cells[8 + detallesDepartamento.Count() + 3, 4].Value = realizo.nombre + " " + realizo.apellidoPaterno + " " + realizo.apellidoMaterno;
                        hoja1.Cells[6 + detallesDepartamento.Count() + 3, 4].Style.Font.Bold = true;
                        hoja1.Cells[6 + detallesDepartamento.Count() + 3, 4].Style.Font.Size = 10;
                        hoja1.Cells[6 + detallesDepartamento.Count() + 3, 4].Style.Font.Name = "Arial";
                        hoja1.Cells[7 + detallesDepartamento.Count() + 3, 4].Style.Font.Bold = true;
                        hoja1.Cells[7 + detallesDepartamento.Count() + 3, 4].Style.Font.Size = 10;
                        hoja1.Cells[7 + detallesDepartamento.Count() + 3, 4].Style.Font.Name = "Arial";
                        hoja1.Cells[8 + detallesDepartamento.Count() + 3, 4].Style.Font.Bold = true;
                        hoja1.Cells[8 + detallesDepartamento.Count() + 3, 4].Style.Font.Size = 10;
                        hoja1.Cells[8 + detallesDepartamento.Count() + 3, 4].Style.Font.Name = "Arial";

                        for (int i = 1; i <= autorizantes.Count(); i++)
                        {
                            var cveEmpleado = autorizantes[(i - 1)].aprobadorClave;
                            var usuario = _context.tblP_Usuario.FirstOrDefault(x => x.id == cveEmpleado);
                            var firmaAutorizante = "";
                            if (autorizantes[(i - 1)].firma != null) firmaAutorizante = autorizantes[(i - 1)].firma;
                            hoja1.Cells[5 + detallesDepartamento.Count() + 3, (i + 1) * 4].Value = firmaAutorizante;
                            hoja1.Cells[6 + detallesDepartamento.Count() + 3, (i + 1) * 4].Value = "___________________________";
                            hoja1.Cells[7 + detallesDepartamento.Count() + 3, (i + 1) * 4].Value = "REVISÓ/AUTORIZÓ";
                            hoja1.Cells[8 + detallesDepartamento.Count() + 3, (i + 1) * 4].Value = usuario.nombre + " " + usuario.apellidoPaterno + " " + usuario.apellidoMaterno;

                            hoja1.Cells[6 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Bold = true;
                            hoja1.Cells[6 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Size = 10;
                            hoja1.Cells[6 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Name = "Arial";
                            hoja1.Cells[7 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Bold = true;
                            hoja1.Cells[7 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Size = 10;
                            hoja1.Cells[7 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Name = "Arial";
                            hoja1.Cells[8 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Bold = true;
                            hoja1.Cells[8 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Size = 10;
                            hoja1.Cells[8 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Name = "Arial";
                        }

                        hoja1.View.ZoomScale = 82;
                        hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 44].Style.Font.Size = 10;
                        hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 44].Style.Font.Name = "Arial";

                        hoja1.Cells[7 + detallesDepartamento.Count(), 1, 7 + detallesDepartamento.Count(), 41].Style.Font.Size = 11;
                        hoja1.Cells[7 + detallesDepartamento.Count(), 1, 7 + detallesDepartamento.Count(), 41].Style.Font.Bold = true;
                        hoja1.Cells[7 + detallesDepartamento.Count(), 1, 7 + detallesDepartamento.Count(), 41].Style.Font.Name = "Arial";

                        hoja1.Cells[6, 5, 6 + detallesDepartamento.Count(), 5].Style.Numberformat.Format = "$###,###,##0.00";
                        hoja1.Cells[6, 7, 6 + detallesDepartamento.Count(), 20].Style.Numberformat.Format = "$###,###,##0.00";
                        hoja1.Cells[6, 22, 6 + detallesDepartamento.Count(), 28].Style.Numberformat.Format = "$###,###,##0.00";
                        hoja1.Cells[6, 30, 6 + detallesDepartamento.Count(), 31].Style.Numberformat.Format = "$###,###,##0.00";
                        hoja1.Cells[6, 33, 6 + detallesDepartamento.Count(), 38].Style.Numberformat.Format = "$###,###,##0.00";
                        hoja1.Cells[6, 40, 6 + detallesDepartamento.Count(), 40].Style.Numberformat.Format = "$###,###,##0.00";
                        hoja1.Cells[6, 41, 6 + detallesDepartamento.Count(), 45].Style.Numberformat.Format = "$###,###,##0.00";

                        hoja1.Cells[6, 6, 6 + detallesDepartamento.Count(), 6].Style.Numberformat.Format = "###,###,##0.00";
                        hoja1.Cells[6, 29, 6 + detallesDepartamento.Count(), 29].Style.Numberformat.Format = "###,###,##0.00";
                        hoja1.Cells[6, 41, 6 + detallesDepartamento.Count(), 41].Style.Numberformat.Format = "###,###,##0.00";

                        hoja1.Cells[4, 3].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[4, 3].Style.Fill.BackgroundColor.SetColor(1, 255, 153, 204);

                        hoja1.Cells[5, 1, 5, 4].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[5, 1, 5, 4].Style.Fill.BackgroundColor.SetColor(1, 192, 192, 192);
                        hoja1.Cells[5, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[5, 6].Style.Fill.BackgroundColor.SetColor(1, 192, 192, 192);

                        hoja1.Cells[5, 8, 5, 9].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[5, 8, 5, 9].Style.Fill.BackgroundColor.SetColor(1, 146, 208, 80);

                        hoja1.Cells[5, 10, 5, 17].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[5, 10, 5, 17].Style.Fill.BackgroundColor.SetColor(1, 192, 192, 192);
                        hoja1.Cells[5, 20].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[5, 20].Style.Fill.BackgroundColor.SetColor(1, 192, 192, 192);
                        hoja1.Cells[5, 26, 5, 38].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[5, 26, 5, 38].Style.Fill.BackgroundColor.SetColor(1, 192, 192, 192);
                        hoja1.Cells[5, 37, 5, 41].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[5, 37, 5, 41].Style.Fill.BackgroundColor.SetColor(1, 192, 192, 192);
                        hoja1.Cells[5, 42, 5, 45].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[5, 42, 5, 45].Style.Fill.BackgroundColor.SetColor(1, 192, 192, 192);

                        hoja1.Cells[5, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[5, 5].Style.Fill.BackgroundColor.SetColor(1, 154, 87, 205);
                        hoja1.Cells[5, 22].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[5, 22].Style.Fill.BackgroundColor.SetColor(1, 154, 87, 205);

                        hoja1.Cells[5, 7].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[5, 7].Style.Fill.BackgroundColor.SetColor(1, 255, 217, 102);

                        hoja1.Cells[5, 18].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[5, 18].Style.Fill.BackgroundColor.SetColor(1, 255, 102, 0);
                        hoja1.Cells[5, 23].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[5, 23].Style.Fill.BackgroundColor.SetColor(1, 255, 102, 0);

                        hoja1.Cells[5, 24, 5, 25].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[5, 24, 5, 25].Style.Fill.BackgroundColor.SetColor(1, 150, 150, 150);

                        hoja1.Cells[5, 42].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[5, 42].Style.Fill.BackgroundColor.SetColor(1, 255, 192, 0);

                        hoja1.Cells[5, 43, 5, 44].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[5, 43, 5, 44].Style.Fill.BackgroundColor.SetColor(1, 0, 176, 240);

                        hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 18].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 18].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 18].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 18].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                        hoja1.Cells[5, 22, 5 + detallesDepartamento.Count(), 38].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[5, 22, 5 + detallesDepartamento.Count(), 38].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[5, 22, 5 + detallesDepartamento.Count(), 38].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[5, 22, 5 + detallesDepartamento.Count(), 38].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                        hoja1.Cells[5, 40, 5 + detallesDepartamento.Count(), 45].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[5, 40, 5 + detallesDepartamento.Count(), 45].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[5, 40, 5 + detallesDepartamento.Count(), 45].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[5, 40, 5 + detallesDepartamento.Count(), 45].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                        for (int i = 0; i <= detallesDepartamento.Count() + 1; i++) { hoja1.Row(i + 5).Height = 38; }

                        hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 44].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                        hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        hoja1.Cells[5, 4, 5 + detallesDepartamento.Count(), 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        hoja1.Cells[6 + detallesDepartamento.Count(), 1, 6 + detallesDepartamento.Count(), 45].Style.Font.Bold = true;
                        hoja1.Cells[6 + detallesDepartamento.Count(), 1, 6 + detallesDepartamento.Count(), 45].Style.Font.Size = 12;

                        hoja1.Column(45).Style.WrapText = true;
                        hoja1.Column(45).Width = 100;
                        hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 43].AutoFitColumns();

                        hoja1.View.FreezePanes(6, 7);

                        excel.Compression = CompressionLevel.BestSpeed;
                    }

                    byte[] binaryData = null;

                    using (var exportData = new MemoryStream())
                    {
                        excel.SaveAs(exportData);
                        binaryData = exportData.ToArray();
                    }

                    return binaryData;
                }
            }
            catch (Exception e)
            {
                return null;
            }
        }

        #endregion

        #region ReporteNominaAnual

        //Cuentas a no mostrar
        List<string> ctaNulas = new List<string>() { "5000-13", "5000-7", "5280-12" };

        public List<reporteAnualDTO> GetReportes(string bottom, string top)
        {
            var resultado = new Dictionary<string, object>();

            DapperDTO objDapper = new DapperDTO();

            string[] btmDate = bottom.Split('-');
            string[] topDate = top.Split('-');

            var conceptos = _context.tblC_Nom_ResumenRaya.Select(e => new { e.cta, e.concepto }).Distinct().ToList();

            switch (vSesiones.sesionEmpresaActual)
            {
                case (int)MainContextEnum.Construplan:
                    objDapper.baseDatos = MainContextEnum.Construplan;
                    break;
                case (int)MainContextEnum.Arrendadora:
                    objDapper.baseDatos = MainContextEnum.Arrendadora;
                    break;
                case (int)MainContextEnum.EICI:
                    objDapper.baseDatos = MainContextEnum.EICI;
                    break;
                case (int)MainContextEnum.Colombia:
                    objDapper.baseDatos = MainContextEnum.Colombia;
                    break;
                case (int)MainContextEnum.INTEGRADORA:
                    objDapper.baseDatos = MainContextEnum.INTEGRADORA;
                    break;
            }

            #region consulta
            objDapper.consulta = string.Format(@"SELECT 
	                                    aux_fechas.año,
	                                    aux_fechas.mes, 
	                                    resumen.cta,
	                                    SUM(resumen.monto) AS monto,
	                                    SUM(case when aux_fechas.mes  = 1 then resumen.monto else 0 end)
                                    FROM 
	                                    (
	                                    SELECT 
		                                    * 
	                                    FROM 
		                                    tblC_Nom_ResumenRaya
	                                    WHERE
		                                    cta LIKE '5%'
                                            AND estatus = 1
	                                    ) resumen
                                    INNER JOIN
	                                    (
	                                    SELECT 
		                                    nomina.id, MONTH(periodo.fecha_final)as mes, YEAR(periodo.fecha_final) AS año
	                                    FROM
		                                    (
		                                    SELECT 
			                                    * 
		                                    FROM 
			                                    tblC_Nom_Nomina 
		                                    WHERE 
			                                    estatus = 1 
			                                    AND validada = 1
		                                    ) nomina
	                                    INNER JOIN
		                                    (
		                                    SELECT 
			                                    * 
		                                    FROM 
			                                    tblRH_BN_EstatusPeriodos 	
		                                    ) periodo
	                                    ON 
		                                    nomina.tipoNomina = periodo.tipo_nomina
		                                    AND nomina.periodo = periodo.periodo
		                                    AND nomina.year = periodo.anio
	                                    WHERE periodo.fecha_final BETWEEN '{0}' AND '{1}'
	                                    ) aux_fechas
                                    ON 
	                                    resumen.nominaId = aux_fechas.id
                                    GROUP BY 
	                                    aux_fechas.año, aux_fechas.mes, resumen.cta
                                    ORDER BY
	                                    aux_fechas.mes
                                    ", string.Format("{0}-{1}-{2}", btmDate[0], btmDate[1], btmDate[2]), string.Format("{0}-{1}-{2}", topDate[0], topDate[1], topDate[2]));
            #endregion

            //objDapper.baseDatos = MainContextEnum.Construplan;
            var lst = _context.Select<reporteAnualDTO>(objDapper);
            List<reporteAnualDTO> lstFiltro = new List<reporteAnualDTO>();

            var ResultadoDeConstulta = lst.Select(y => new reporteAnualDTO
            {
                //3000-1
                cta = y.cta,
                cta1 = y.cta.Length <= 7 ? "" : y.cta.Substring(0, 4),
                cta2 = y.cta.Length <= 7 ? "" : y.cta.Substring(5, 2),
                cta3 = y.cta.Length <= 7 ? "" : y.cta.Substring(8),
                año = y.año,
                mes = y.mes,
                monto = y.monto,
                nombreDeMes = fncNombreDelMes(y.mes),
                concepto = conceptos.FirstOrDefault(e => e.cta == y.cta).concepto,
                //concepto = y.concepto
            }).ToList();

            lstFiltro = ResultadoDeConstulta.Where(x => !ctaNulas.Contains(x.cta)).Select(x => x).ToList();

            var lstCompe = lstFiltro.Where(e => e.concepto.ToLower() == "compensacion" || e.concepto.ToLower() == "gratificaciones").ToList();

            foreach (var item in lstCompe)
            {
                lstFiltro.FirstOrDefault(e => e.cta == item.cta && e.concepto == item.concepto).concepto = "GRATIFICACIONES";
            }

            return lstFiltro;
        }
        public MemoryStream crearReporte(List<string[]> lstReporte, string tp, string btm)
        {
            try
            {
                using (ExcelPackage excel = new ExcelPackage())
                {

                    var hoja1 = excel.Workbook.Worksheets.Add("Nomina");

                    #region Titulo

                    hoja1.Cells["B1:J1"].Merge = true;

                    switch (vSesiones.sesionEmpresaActual)
                    {
                        case (int)MainContextEnum.Construplan:
                            hoja1.Cells["B1"].Value = "SOLUCIONES INDUSTRIALES SA DE CV";
                            break;
                        default:
                            hoja1.Cells["B1"].Value = "SOLUCIONES INDUSTRIALES SA DE CV";
                            break;
                    }

                    hoja1.Cells["B1"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    hoja1.Cells["B1"].Style.Font.Bold = true;
                    hoja1.Cells["B1"].Style.Font.Size = 14;

                    hoja1.Cells["B2:J2"].Merge = true;
                    hoja1.Cells["B2"].Value = "Reporte de Nomina por Rango(Anual)";
                    hoja1.Cells["B2"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                    hoja1.Cells["B3:J3"].Merge = true;
                    hoja1.Cells["B3"].Value = "Periodo de: " + tp + " A " + btm;
                    hoja1.Cells["B3"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                    hoja1.Cells["B4:J4"].Merge = true;
                    hoja1.Cells["B4"].Value = "Fecha: " + DateTime.Now.Date.ToString("dd MMMM yyyy", new System.Globalization.CultureInfo("es-ES"));
                    hoja1.Cells["B4"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                    #endregion

                    List<string[]> headerRow = new List<string[]>();

                    int tblWidth = lstReporte[0].Length;
                    int tblHeight = lstReporte.Count;
                    tblWidth++;

                    hoja1.Cells[6, 2].LoadFromArrays(lstReporte); // LOAD 

                    for (int i = 2; i < tblWidth; i++)
                    {
                        hoja1.Column(i).Width = 15;

                    }

                    //Ajustar rangos a la posicion de la tabla
                    tblHeight += 5;

                    //Dibujar break lines en la tabla
                    for (int i = 7; i < tblHeight; i++)
                    {
                        if (hoja1.Cells[i, 2].Value.ToString().Trim() == "5000" && hoja1.Cells[i, 3].Value.ToString().Trim() == "13" && hoja1.Cells[i, 4].Value.ToString().Trim() == "17")
                        {
                            hoja1.Cells[i, 2, i, tblWidth].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                        }
                        else if (hoja1.Cells[i, 2].Value.ToString().Trim() == "5000" && hoja1.Cells[i, 3].Value.ToString().Trim() == "14" && hoja1.Cells[i, 4].Value.ToString().Trim() == "17")
                        {
                            hoja1.Cells[i, 2, i, tblWidth].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                        }
                        else if (hoja1.Cells[i, 2].Value.ToString().Trim() == "5280" && hoja1.Cells[i, 3].Value.ToString().Trim() == "12" && hoja1.Cells[i, 4].Value.ToString().Trim() == "17")
                        {
                            hoja1.Cells[i, 2, i, tblWidth].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                        }
                        else if (hoja1.Cells[i, 2].Value.ToString().Trim() == "5280" && hoja1.Cells[i, 3].Value.ToString().Trim() == "14" && hoja1.Cells[i, 4].Value.ToString().Trim() == "17")
                        {
                            hoja1.Cells[i, 2, i, tblWidth].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                        }

                        for (int j = 6; j <= tblWidth; j++)
                        {
                            if (hoja1.Cells[i, j].Value != null)
                            {
                                hoja1.Cells[i, j].Value = Decimal.Parse(hoja1.Cells[i, j].Value.ToString().Split('$')[1].Replace(",", string.Empty));
                                hoja1.Cells[i, j].Style.Numberformat.Format = "_-$* #,##0.00_-;-$* #,##0.00_-;_-$* \"-\"??_-;_-@_-";
                            }
                        }
                    }

                    hoja1.Column(2).Width = 6;
                    hoja1.Column(3).Width = 4;
                    hoja1.Column(4).Width = 4;
                    hoja1.Column(5).Width = 40;
                    hoja1.Column(tblWidth).Width = 20;

                    //hoja1.Cells[7, 6, tblHeight - 1, tblWidth].Style.Numberformat.Format = "_-$* #,##0.00_-;-$* #,##0.00_-;_-$* \"-\"??_-;_-@_-";

                    ExcelRange rangeTable = hoja1.Cells[6, 2, tblHeight - 1, tblWidth];

                    ExcelTable tbl1 = hoja1.Tables.Add(rangeTable, "Table1");

                    tbl1.TableStyle = TableStyles.Medium21;

                    List<byte[]> lista = new List<byte[]>();

                    var bytes = new MemoryStream();

                    using (var exportData = new MemoryStream())
                    {
                        excel.SaveAs(exportData);
                        bytes = exportData;
                    }

                    return bytes;
                }
            }
            catch (Exception e)
            {
                return null;
            }
        }
        public string fncNombreDelMes(int month)
        {
            List<string> months = new List<String> { "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre" };
            string nombredelMes = "";

            nombredelMes = months[month - 1];

            return nombredelMes;
        }

        #endregion

        #region Acomulado Mensual

        public Dictionary<string, object> GetNominaDetalle(string botomDate, string topDate)
        {
            var result = new Dictionary<string, object>();

            try
            {
                string[] botomDateVals = botomDate.Split('-');
                string[] topDateVals = topDate.Split('-');

                DateTime tpDate = new DateTime(Int32.Parse(topDateVals[0]), Int32.Parse(topDateVals[2]), Int32.Parse(topDateVals[1]));
                DateTime btmDate = new DateTime(Int32.Parse(botomDateVals[0]), Int32.Parse(botomDateVals[2]), Int32.Parse(botomDateVals[1]));

                var conceptos = _context.tblC_Nom_ResumenRaya.Select(e => new { e.cta, e.concepto }).Distinct().ToList();

                var cuentas = _context.tblC_Nom_ResumenRaya.Where(e => e.cta.StartsWith("5")).Select(e => new { e.cta, e.concepto }).Distinct().ToList();
                cuentas = cuentas.Where(e => !ctaNulas.Contains(e.cta)).ToList();
                //lstFiltro = ResultadoDeConstulta.Where(x => !ctaNulas.Contains(x.cta)).Select(x => x).ToList();

                List<periodosAcomuladoDTO> periodos = _context.tblRH_BN_EstatusPeriodos.Where(e => e.fecha_final >= btmDate && e.fecha_final <= tpDate).Select(e => new periodosAcomuladoDTO
                {
                    periodo = e.periodo,
                    anio = e.anio,
                    dia1 = e.fecha_inicial.Day,
                    mes1 = e.fecha_inicial.Month,
                    año1 = e.fecha_inicial.Year,
                    dia2 = e.fecha_final.Day,
                    mes2 = e.fecha_final.Month,
                    año2 = e.fecha_final.Year,
                }).ToList();

                //switch (vSesiones.sesionEmpresaActual)
                //{

                //    case (int)MainContextEnum.Construplan:
                //        using (var dbContent = new MainContext(EmpresaEnum.Construplan))
                //        {
                //                periodos = dbContent.tblRH_BN_EstatusPeriodos.Where(e => e.fecha_final >= btmDate && e.fecha_final <= tpDate).Select(e => new periodosAcomuladoDTO
                //                {
                //                    periodo = e.periodo,
                //                    anio = e.anio,
                //                    dia1 = e.fecha_inicial.Day,
                //                    mes1 = e.fecha_inicial.Month,
                //                    año1 = e.fecha_inicial.Year,
                //                    dia2 = e.fecha_final.Day,
                //                    mes2 = e.fecha_final.Month,
                //                    año2 = e.fecha_final.Year,
                //                }).ToList();

                //        }
                //    default:
                //        break;
                //}


                string quintaSemana = "";
                string quintaSemanaTitle = "";

                List<String> reporteData = new List<String>();

                if (periodos.Count == 7)
                {

                    reporteData.Add(periodos[0].periodo.ToString());
                    reporteData.Add(periodos[1].periodo.ToString());
                    reporteData.Add(periodos[2].periodo.ToString());
                    reporteData.Add(periodos[3].periodo.ToString());
                    reporteData.Add(periodos[5].periodo.ToString());
                    reporteData.Add(periodos[6].periodo.ToString());

                    quintaSemana = string.Format("SUM((CASE WHEN periodo = {0} AND tipoRayaId = 1 AND tipoNomina = 1 THEN monto ELSE 0 END)) as semana5,", periodos[4].periodo.ToString());
                    quintaSemanaTitle = "SUM(M.semana5) as semana5,";
                    reporteData.Add(quintaSemana);
                    reporteData.Add(quintaSemanaTitle);


                }
                else
                {

                    reporteData.Add(periodos[0].periodo.ToString());
                    reporteData.Add(periodos[1].periodo.ToString());
                    reporteData.Add(periodos[2].periodo.ToString());
                    reporteData.Add(periodos[3].periodo.ToString());
                    reporteData.Add(periodos[4].periodo.ToString());
                    reporteData.Add(periodos[5].periodo.ToString());
                    reporteData.Add(string.Empty);
                    reporteData.Add(string.Empty);

                }



                DapperDTO objDapper = new DapperDTO();
                switch (vSesiones.sesionEmpresaActual)
                {
                    case (int)MainContextEnum.Construplan:
                        objDapper.baseDatos = MainContextEnum.Construplan;
                        break;
                    case (int)MainContextEnum.Arrendadora:
                        objDapper.baseDatos = MainContextEnum.Arrendadora;
                        break;
                    case (int)MainContextEnum.EICI:
                        objDapper.baseDatos = MainContextEnum.EICI;
                        break;
                    case (int)MainContextEnum.Colombia:
                        objDapper.baseDatos = MainContextEnum.Colombia;
                        break;
                    case (int)MainContextEnum.INTEGRADORA:
                        objDapper.baseDatos = MainContextEnum.INTEGRADORA;
                        break;
                }

                #region consulta
                objDapper.consulta = string.Format(@"SELECT 
                                                   M.cta,
                                                   SUM(M.semana1) as semana1,
                                                   SUM(M.semana2) as semana2,
                                                   SUM(M.semana3) as semana3,
                                                   SUM(M.semana4) as semana4,
                                                   {7}
                                                   SUM(M.finiquitoSemanal) as finiquitoSemanal,
                                                   SUM(M.quincena1) as quincena1,
                                                   SUM(M.quincena2) as quincena2,
                                                   SUM(M.finiquitoQuincenal) as finiquitoQuincenal
                                            FROM (
                                            SELECT 
                                                   cta,
                                                   concepto,
                                                   SUM((CASE WHEN periodo = {0} AND tipoRayaId = 1 AND tipoNomina = 1 THEN monto ELSE 0 END)) as semana1,
                                                   SUM((CASE WHEN periodo = {1} AND tipoRayaId = 1 AND tipoNomina = 1 THEN monto ELSE 0 END)) as semana2,
                                                   SUM((CASE WHEN periodo = {2} AND tipoRayaId = 1 AND tipoNomina = 1 THEN monto ELSE 0 END)) as semana3,
                                                   SUM((CASE WHEN periodo = {3} AND tipoRayaId = 1 AND tipoNomina = 1 THEN monto ELSE 0 END)) as semana4,
                                                   {6}
                                                   SUM((CASE WHEN tipoRayaId = 2 AND tipoNomina = 1 THEN monto ELSE 0 END)) as finiquitoSemanal,  
                                                   SUM((CASE WHEN periodo = {4} AND tipoRayaId = 1 AND tipoNomina = 4 THEN monto ELSE 0 END)) as quincena1,
                                                   SUM((CASE WHEN periodo = {5} AND tipoRayaId = 1 AND tipoNomina = 4 THEN monto ELSE 0 END)) as quincena2,
                                                   SUM((CASE WHEN tipoRayaId = 2 AND tipoNomina = 4 THEN monto ELSE 0 END)) as finiquitoQuincenal 
                                            FROM
                                            (
                                                   SELECT tipoRayaId
			                                             ,tipoNomina
                                                         , periodo    
                                                         , cta
                                                         , MIN(concepto) AS concepto 
                                                         , SUM(monto) AS monto
                                                   FROM
                                                   (
                                                         SELECT 
                                                                cta
                                                                , concepto as concepto
                                                                , monto as monto
                                                                , (SELECT periodo FROM tblC_Nom_Nomina WHERE id = A.nominaId) AS periodo
                                                                , (SELECT tipoNomina FROM tblC_Nom_Nomina WHERE id = A.nominaId) AS tipoNomina
                                                                , (SELECT tipoRayaId FROM tblC_Nom_Nomina WHERE id = A.nominaId) AS tipoRayaId
                                                         FROM tblC_Nom_ResumenRaya A 
                                                         WHERE 
				                                            estatus = 1 
				                                            AND nominaId IN 
					                                            (SELECT id FROM tblC_Nom_Nomina WHERE 
						                                            year = {10}
						                                            AND estatus = 1 
						                                            AND ((tipoNomina = 1 AND periodo IN (SELECT periodo FROM tblRH_BN_EstatusPeriodos Periodos WHERE Periodos.anio = {10} AND MONTH(Periodos.fecha_final) = {8} AND Periodos.tipo_nomina = 1 )) OR 
						                                            (tipoNomina = 4 AND periodo IN (SELECT periodo FROM tblRH_BN_EstatusPeriodos Periodos WHERE Periodos.anio = {10} AND MONTH(Periodos.fecha_final) = {9} AND Periodos.tipo_nomina = 4)))
				                                            AND cta LIKE '5%')
                                                   ) B
                                                   GROUP BY 
                                                         periodo
                                                         , tipoNomina
                                                         , tipoRayaId
                                                         , cta
                                            ) D
                                            GROUP BY D.cta, D.periodo, D.concepto, D.tipoRayaId, D.tipoNomina)M
                                            GROUP BY M.cta
                                            ORDER BY cta",
                                                             reporteData[0],
                                                             reporteData[1],
                                                             reporteData[2],
                                                             reporteData[3],
                                                             reporteData[4],
                                                             reporteData[5],
                                                             reporteData[6],
                                                             reporteData[7],
                                                             btmDate.Month,
                                                             btmDate.Month,
                                                             btmDate.Year);
                #endregion

                //var lstCtaUnq = reporte.Select(y => new { y.cta, y.concepto }).Distinct().OrderBy(x => x.cta).ToList();

                var lst = _context.Select<ReporteAcomuladoMensualDTO>(objDapper);
                List<ReporteAcomuladoMensualDTO> lstFiltro = new List<ReporteAcomuladoMensualDTO>();
                var ResultadoDeConsulta = new List<ReporteAcomuladoMensualDTO>();

                if (periodos.Count == 7)
                {
                    ResultadoDeConsulta = lst.Select(y => new ReporteAcomuladoMensualDTO
                    {
                        cta = y.cta,
                        cta1 = y.cta.Length <= 7 ? "" : y.cta.Substring(0, 4),
                        cta2 = y.cta.Length <= 7 ? "" : y.cta.Substring(5, 2),
                        cta3 = y.cta.Length <= 7 ? "" : y.cta.Substring(8),
                        concepto = conceptos.FirstOrDefault(e => e.cta == y.cta).concepto,
                        semana1 = y.semana1,
                        semana2 = y.semana2,
                        semana3 = y.semana3,
                        semana4 = y.semana4,
                        semana5 = y.semana5,
                        finiquitoSemanal = y.finiquitoSemanal,
                        quincena1 = y.quincena1,
                        quincena2 = y.quincena2,
                        finiquitoQuincenal = y.finiquitoQuincenal,
                        total = (Decimal.Parse(y.semana1) + Decimal.Parse(y.semana2) + Decimal.Parse(y.semana3) + Decimal.Parse(y.semana4) + Decimal.Parse(y.semana5) + Decimal.Parse(y.finiquitoSemanal) + Decimal.Parse(y.quincena1) + Decimal.Parse(y.quincena2) + Decimal.Parse(y.finiquitoQuincenal)).ToString()

                    }).ToList();
                }
                else
                {
                    ResultadoDeConsulta = lst.Select(y => new ReporteAcomuladoMensualDTO
                    {
                        cta = y.cta,
                        cta1 = y.cta.Length <= 7 ? "" : y.cta.Substring(0, 4),
                        cta2 = y.cta.Length <= 7 ? "" : y.cta.Substring(5, 2),
                        cta3 = y.cta.Length <= 7 ? "" : y.cta.Substring(8),
                        concepto = conceptos.FirstOrDefault(e => e.cta == y.cta).concepto,
                        semana1 = y.semana1,
                        semana2 = y.semana2,
                        semana3 = y.semana3,
                        semana4 = y.semana4,
                        finiquitoSemanal = y.finiquitoSemanal,
                        quincena1 = y.quincena1,
                        quincena2 = y.quincena2,
                        finiquitoQuincenal = y.finiquitoQuincenal,
                        total = (Decimal.Parse(y.semana1) + Decimal.Parse(y.semana2) + Decimal.Parse(y.semana3) + Decimal.Parse(y.semana4) + Decimal.Parse(y.finiquitoSemanal) + Decimal.Parse(y.quincena1) + Decimal.Parse(y.quincena2) + Decimal.Parse(y.finiquitoQuincenal)).ToString()

                    }).ToList();
                }

                foreach (var ele in cuentas)
                {
                    ReporteAcomuladoMensualDTO objFind = ResultadoDeConsulta.Where(e => e.cta == ele.cta).FirstOrDefault();
                    if (objFind == null)
                    {
                        ReporteAcomuladoMensualDTO objNew = new ReporteAcomuladoMensualDTO();
                        if (periodos.Count == 7)
                        {
                            objNew.cta = ele.cta;
                            objNew.cta1 = ele.cta.Substring(0, 4);
                            objNew.cta2 = ele.cta.Substring(5, 2);
                            objNew.cta3 = ele.cta.Substring(8);
                            objNew.concepto = conceptos.FirstOrDefault(e => e.cta == ele.cta).concepto;
                            objNew.semana1 = "0";
                            objNew.semana2 = "0";
                            objNew.semana3 = "0";
                            objNew.semana4 = "0";
                            objNew.semana5 = "0";
                            objNew.finiquitoSemanal = "0";
                            objNew.quincena1 = "0";
                            objNew.quincena2 = "0";
                            objNew.finiquitoQuincenal = "0";
                            objNew.total = "0";
                        }
                        else
                        {
                            objNew.cta = ele.cta;
                            objNew.cta1 = ele.cta.Substring(0, 4);
                            objNew.cta2 = ele.cta.Substring(5, 2);
                            objNew.cta3 = ele.cta.Substring(8);
                            objNew.concepto = conceptos.FirstOrDefault(e => e.cta == ele.cta).concepto;
                            objNew.semana1 = "0";
                            objNew.semana2 = "0";
                            objNew.semana3 = "0";
                            objNew.semana4 = "0";
                            objNew.finiquitoSemanal = "0";
                            objNew.quincena1 = "0";
                            objNew.quincena2 = "0";
                            objNew.finiquitoQuincenal = "0";
                            objNew.total = "0";
                        }

                        ResultadoDeConsulta.Add(objNew);
                    }
                }

                //Añadir miembro vacio de la 5ta semana
                if (periodos.Count == 6)
                {
                    periodos.Insert(4, new periodosAcomuladoDTO
                    {
                        periodo = 0,
                        anio = 0,
                        dia1 = 0,
                        mes1 = 0,
                        año1 = 0,
                        dia2 = 0,
                        mes2 = 0,
                        año2 = 0,
                    });
                }

                ResultadoDeConsulta = ResultadoDeConsulta.Where(e => !ctaNulas.Contains(e.cta)).ToList();

                ResultadoDeConsulta = ResultadoDeConsulta.OrderBy(x => Int32.Parse(x.cta1))
                        .ThenBy(x => Int32.Parse(x.cta2)).ThenBy(x => Int32.Parse(x.cta3)).ToList();


                var lstCompe = ResultadoDeConsulta.Where(e => e.concepto.ToLower() == "compensacion").ToList();

                foreach (var item in lstCompe)
                {
                    ResultadoDeConsulta.FirstOrDefault(e => e.cta == item.cta).concepto = "GRATIFICACIONES";
                }

                result.Add(ITEMS, ResultadoDeConsulta);
                result.Add("dataHeaders", periodos);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                if (result[ITEMS] == null)
                {
                    result.Add(MESSAGE, "Rango vacio");
                }
                else
                {
                    result.Add(MESSAGE, e.Message);
                }
                result.Add(SUCCESS, false);

            }
            return result;
        }

        public MemoryStream crearReporteMensual(List<ReporteAcomuladoMensualDTO> lstReporte, ReporteAcomuladoMensualDTO listaRegHead, string numeroEmpleados, string periodoDate)
        {
            try
            {
                using (ExcelPackage excel = new ExcelPackage())
                {
                    var hoja1 = excel.Workbook.Worksheets.Add("Nomina");

                    #region Titulo

                    hoja1.Cells["B1:J1"].Merge = true;

                    switch (vSesiones.sesionEmpresaActual)
                    {
                        case (int)MainContextEnum.Construplan:
                            hoja1.Cells["B1"].Value = "SOLUCIONES INDUSTRIALES SA DE CV";
                            break;
                        default:
                            hoja1.Cells["B1"].Value = "SOLUCIONES INDUSTRIALES SA DE CV";
                            break;
                    }

                    hoja1.Cells["B1"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    hoja1.Cells["B1"].Style.Font.Bold = true;
                    hoja1.Cells["B1"].Style.Font.Size = 14;

                    hoja1.Cells["B2:J2"].Merge = true;
                    hoja1.Cells["B2"].Value = "Reporte Mensual Acumulado";
                    hoja1.Cells["B2"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                    hoja1.Cells["B3:J3"].Merge = true;
                    hoja1.Cells["B3"].Value = "Periodo de: " + periodoDate;
                    hoja1.Cells["B3"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                    hoja1.Cells["B4:J4"].Merge = true;
                    hoja1.Cells["B4"].Value = "Fecha: " + DateTime.Now.Date.ToString("dd MMMM yyyy", new System.Globalization.CultureInfo("es-ES"));
                    hoja1.Cells["B4"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                    #endregion

                    List<string[]> headerRow = new List<string[]>();

                    int tblWidth = 14;
                    int tblHeight = lstReporte.Count;

                    var cellData = new List<object[]>();
                    var cellHeaders = new List<string[]>();
                    var cellEmpleados = new List<string[]>();

                    if (listaRegHead.semana5 != null)
                    {
                        cellHeaders.Add(new string[] { 
                            listaRegHead.cta1,
                            listaRegHead.cta2,
                            listaRegHead.cta3,
                            listaRegHead.concepto,
                            listaRegHead.semana1,
                            listaRegHead.semana2,
                            listaRegHead.semana3,
                            listaRegHead.semana4,
                            listaRegHead.semana5,
                            listaRegHead.finiquitoSemanal,
                            listaRegHead.quincena1,
                            listaRegHead.quincena2,
                            listaRegHead.finiquitoQuincenal,
                            listaRegHead.total,
                        });
                        tblWidth++;
                    }
                    else
                    {
                        cellHeaders.Add(new string[] { 
                            listaRegHead.cta1,
                            listaRegHead.cta2,
                            listaRegHead.cta3,
                            listaRegHead.concepto,
                            listaRegHead.semana1,
                            listaRegHead.semana2,
                            listaRegHead.semana3,
                            listaRegHead.semana4,
                            listaRegHead.finiquitoSemanal,
                            listaRegHead.quincena1,
                            listaRegHead.quincena2,
                            listaRegHead.finiquitoQuincenal,
                            listaRegHead.total,
                        });
                    }



                    hoja1.Cells[6, 2].LoadFromArrays(cellHeaders); // LOAD HEADERS

                    if (lstReporte[0].semana5 != null)
                    {
                        foreach (var reg in lstReporte)
                        {
                            cellData.Add(new object[] {
                            reg.cta1,
                            reg.cta2,
                            reg.cta3,
                            reg.concepto,
                            reg.semana1,
                            reg.semana2,
                            reg.semana3,
                            reg.semana4,
                            reg.semana5,
                            reg.finiquitoSemanal,
                            reg.quincena1,
                            reg.quincena2,
                            reg.finiquitoQuincenal,
                            reg.total,
                        });
                        }
                    }
                    else
                    {
                        foreach (var reg in lstReporte)
                        {
                            cellData.Add(new object[] {
                            reg.cta1,
                            reg.cta2,
                            reg.cta3,
                            reg.concepto,
                            reg.semana1,
                            reg.semana2,
                            reg.semana3,
                            reg.semana4,
                            reg.finiquitoSemanal,
                            reg.quincena1,
                            reg.quincena2,
                            reg.finiquitoQuincenal,
                            reg.total,
                        });
                        }
                    }

                    hoja1.Cells[7, 2].LoadFromArrays(cellData); // LOAD DATA

                    for (int i = 2; i < tblWidth; i++)
                    {
                        hoja1.Column(i).Width = 15;

                    }

                    //Ajustar rangos a la posicion de la tabla
                    tblHeight += 7;

                    cellEmpleados.Add(new string[] {
                    
                        "Numero de Empleados: ",numeroEmpleados,

                    });

                    hoja1.Cells[tblHeight + 5, 3].LoadFromArrays(cellEmpleados); // LOAD NUM EMPLEADOS

                    //Dibujar break lines en la tabla
                    for (int i = 7; i < tblHeight; i++)
                    {

                        if (hoja1.Cells[i, 2].Value != null)
                        {
                            if (hoja1.Cells[i, 2].Value.ToString().Trim() == "5000" && hoja1.Cells[i, 3].Value.ToString().Trim() == "13" && hoja1.Cells[i, 4].Value.ToString().Trim() == "17")
                            {
                                hoja1.Cells[i, 2, i, tblWidth].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                            }
                            else if (hoja1.Cells[i, 2].Value.ToString().Trim() == "5000" && hoja1.Cells[i, 3].Value.ToString().Trim() == "14" && hoja1.Cells[i, 4].Value.ToString().Trim() == "17")
                            {
                                hoja1.Cells[i, 2, i, tblWidth].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                            }
                            else if (hoja1.Cells[i, 2].Value.ToString().Trim() == "5280" && hoja1.Cells[i, 3].Value.ToString().Trim() == "12" && hoja1.Cells[i, 4].Value.ToString().Trim() == "17")
                            {
                                hoja1.Cells[i, 2, i, tblWidth].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                            }
                            else if (hoja1.Cells[i, 2].Value.ToString().Trim() == "5280" && hoja1.Cells[i, 3].Value.ToString().Trim() == "14" && hoja1.Cells[i, 4].Value.ToString().Trim() == "17")
                            {
                                hoja1.Cells[i, 2, i, tblWidth].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                            }

                            for (int j = 6; j <= tblWidth; j++)
                            {
                                //hoja1.Cells[i, j].Value = Decimal.Parse(hoja1.Cells[i, j].Value.ToString().Split('$')[1].Replace(",", string.Empty));
                                //var wea = hoja1.Cells[i, j].Value.ToString();

                                if (hoja1.Cells[i, j].Value.ToString().StartsWith("$"))
                                {

                                    hoja1.Cells[i, j].Value = Decimal.Parse(hoja1.Cells[i, j].Value.ToString().Split('$')[1].Replace(",", string.Empty));
                                    hoja1.Cells[i, j].Style.Numberformat.Format = "_-$* #,##0.00_-;-$* #,##0.00_-;_-$* \"-\"??_-;_-@_-";

                                }
                                else
                                {

                                    hoja1.Cells[i, j].Value = Convert.ToDecimal(hoja1.Cells[i, j].Value);
                                    hoja1.Cells[i, j].Style.Numberformat.Format = "_-$* #,##0.00_-;-$* #,##0.00_-;_-$* \"-\"??_-;_-@_-";

                                }

                            }
                        }
                    }

                    hoja1.Column(2).Width = 6;
                    hoja1.Column(3).Width = 4;
                    hoja1.Column(4).Width = 4;
                    hoja1.Column(5).Width = 40;
                    hoja1.Column(tblWidth).Width = 20;


                    ExcelRange rangeTable = hoja1.Cells[6, 2, tblHeight - 1, tblWidth];

                    ExcelTable tbl1 = hoja1.Tables.Add(rangeTable, "Table1");

                    tbl1.TableStyle = TableStyles.Medium21;

                    List<byte[]> lista = new List<byte[]>();

                    var bytes = new MemoryStream();

                    using (var exportData = new MemoryStream())
                    {
                        excel.SaveAs(exportData);
                        bytes = exportData;
                    }

                    return bytes;
                }
            }
            catch (Exception e)
            {
                return null;
            }
        }
        #endregion

        #region Reporte Rango Centro de Costo

        //Centros a no mostrar
        const string ccNulas = "";

        public List<ReporteRangoCCDTO> GetReportesCC(string bottom, string top)
        {
            var resultado = new Dictionary<string, object>();

            string[] btmDate = bottom.Split('-');
            string[] topDate = top.Split('-');

            DapperDTO objDapper = new DapperDTO();

            var nombreCCs = _context.tblC_Nom_CatalogoCC.Select(e => new { e.cc, nombreCC = e.ccDescripcion, e.area, e.cuenta }).Distinct().ToList();

            switch (vSesiones.sesionEmpresaActual)
            {
                case (int)MainContextEnum.Construplan:
                    objDapper.baseDatos = MainContextEnum.Construplan;
                    break;
                case (int)MainContextEnum.Arrendadora:
                    objDapper.baseDatos = MainContextEnum.Arrendadora;
                    break;
                case (int)MainContextEnum.EICI:
                    objDapper.baseDatos = MainContextEnum.EICI;
                    break;
                case (int)MainContextEnum.Colombia:
                    objDapper.baseDatos = MainContextEnum.Colombia;
                    break;
                case (int)MainContextEnum.INTEGRADORA:
                    objDapper.baseDatos = MainContextEnum.INTEGRADORA;
                    break;
            }

            #region consulta
            objDapper.consulta = string.Format(@"SELECT 
	                                    aux_fechas.año,
	                                    aux_fechas.mes, 
	                                    aux_fechas.CC,
	                                    SUM(resumen.monto) AS monto,
	                                    SUM(case when aux_fechas.mes  = 1 then resumen.monto else 0 end)
                                    FROM 
	                                    (
	                                    SELECT 
		                                    * 
	                                    FROM 
		                                    tblC_Nom_ResumenRaya
	                                    WHERE
		                                    cta LIKE '5%'
	                                    ) resumen
                                    INNER JOIN
	                                    (
	                                    SELECT 
		                                    nomina.id, MONTH(periodo.fecha_final)as mes, YEAR(periodo.fecha_final) AS año, nomina.nombreCC, nomina.CC
	                                    FROM
		                                    (
		                                    SELECT 
			                                    * 
		                                    FROM 
			                                    tblC_Nom_Nomina 
		                                    WHERE 
			                                    estatus = 1 
			                                    AND validada = 1
		                                    ) nomina
	                                    INNER JOIN
		                                    (
		                                    SELECT 
			                                    * 
		                                    FROM 
			                                    tblRH_BN_EstatusPeriodos 		
		                                    ) periodo
	                                    ON 
		                                    nomina.tipoNomina = periodo.tipo_nomina
		                                    AND nomina.periodo = periodo.periodo
		                                    AND nomina.year = periodo.anio
	                                    WHERE periodo.fecha_final BETWEEN '{0}' AND '{1}'
	                                    ) aux_fechas
                                    ON 
	                                    resumen.nominaId = aux_fechas.id
                                    GROUP BY 
	                                    aux_fechas.año, aux_fechas.mes, aux_fechas.CC
                                    ORDER BY
	                                    aux_fechas.mes
                                    ", string.Format("{0}-{1}-{2}", btmDate[0], btmDate[1], btmDate[2]), string.Format("{0}-{1}-{2}", topDate[0], topDate[1], topDate[2]));
            #endregion

            //objDapper.baseDatos = MainContextEnum.Construplan;
            var lst = _context.Select<ReporteRangoCCDTO>(objDapper);
            List<ReporteRangoCCDTO> lstFiltro = new List<ReporteRangoCCDTO>();
            List<ReporteRangoCCDTO> ResultadoDeConsulta = new List<ReporteRangoCCDTO>();

            switch (vSesiones.sesionEmpresaActual)
            {

                case (int)MainContextEnum.Arrendadora:
                    ResultadoDeConsulta = lst.Select(y => new ReporteRangoCCDTO
                    {
                        cc = nombreCCs.FirstOrDefault(e => e.cc == y.cc).area + "-" + nombreCCs.FirstOrDefault(e => e.cc == y.cc).cuenta,
                        //cc = y.cc,
                        año = y.año,
                        mes = y.mes,
                        monto = y.monto,
                        nombreDeMes = fncNombreDelMes(y.mes),
                        nombreCC = nombreCCs.FirstOrDefault(e => e.cc == y.cc).nombreCC,
                    }).ToList();
                    break;

                default:
                    ResultadoDeConsulta = lst.Select(y => new ReporteRangoCCDTO
                    {
                        //cc = nombreCCs.FirstOrDefault(e => e.cc == y.cc).areaCuenta,
                        cc = y.cc,
                        año = y.año,
                        mes = y.mes,
                        monto = y.monto,
                        nombreDeMes = fncNombreDelMes(y.mes),
                        nombreCC = nombreCCs.FirstOrDefault(e => e.cc == y.cc).nombreCC,
                    }).ToList();
                    break;

            }



            lstFiltro = ResultadoDeConsulta.Where(x => x.cc != ccNulas).Select(x => x).ToList();

            return lstFiltro;
        }
        public MemoryStream crearReporteCC(List<string[]> lstReporte, string tp, string btm)
        {
            try
            {
                using (ExcelPackage excel = new ExcelPackage())
                {
                    var hoja1 = excel.Workbook.Worksheets.Add("Nomina");

                    #region Titulo

                    hoja1.Cells["B1:J1"].Merge = true;

                    switch (vSesiones.sesionEmpresaActual)
                    {
                        case (int)MainContextEnum.Construplan:
                            hoja1.Cells["B1"].Value = "SOLUCIONES INDUSTRIALES SA DE CV";
                            break;
                        default:
                            hoja1.Cells["B1"].Value = "SOLUCIONES INDUSTRIALES SA DE CV";
                            break;
                    }

                    hoja1.Cells["B1"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    hoja1.Cells["B1"].Style.Font.Bold = true;
                    hoja1.Cells["B1"].Style.Font.Size = 14;

                    hoja1.Cells["B2:J2"].Merge = true;
                    hoja1.Cells["B2"].Value = "Reporte por rango por Centro de Costo";
                    hoja1.Cells["B2"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                    hoja1.Cells["B3:J3"].Merge = true;
                    hoja1.Cells["B3"].Value = "Periodo de: " + tp + " A " + btm;
                    hoja1.Cells["B3"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                    hoja1.Cells["B4:J4"].Merge = true;
                    hoja1.Cells["B4"].Value = "Fecha: " + DateTime.Now.Date.ToString("dd MMMM yyyy", new System.Globalization.CultureInfo("es-ES"));
                    hoja1.Cells["B4"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                    #endregion

                    List<string[]> headerRow = new List<string[]>();

                    int tblWidth = lstReporte[0].Length;
                    int tblHeight = lstReporte.Count;
                    tblWidth++;

                    hoja1.Cells[6, 2].LoadFromArrays(lstReporte); // LOAD 

                    for (int i = 2; i < tblWidth; i++)
                    {
                        hoja1.Column(i).Width = 15;

                    }

                    //Ajustar rangos a la posicion de la tabla
                    tblHeight += 5;

                    for (int i = 7; i < tblHeight; i++)
                    {

                        for (int j = 4; j <= tblWidth; j++)
                        {
                            //hoja1.Cells[i, j].Value = Decimal.Parse(hoja1.Cells[i, j].Value.ToString().Split('$')[1].Replace(",", string.Empty));
                            //var wea = hoja1.Cells[i, j].Value.ToString();



                            if (hoja1.Cells[i, j].Value.ToString().StartsWith("$"))
                            {

                                hoja1.Cells[i, j].Value = Decimal.Parse(hoja1.Cells[i, j].Value.ToString().Split('$')[1].Replace(",", string.Empty));
                                hoja1.Cells[i, j].Style.Numberformat.Format = "_-$* #,##0.00_-;-$* #,##0.00_-;_-$* \"-\"??_-;_-@_-";

                            }
                            else
                            {

                                hoja1.Cells[i, j].Value = Convert.ToDecimal(hoja1.Cells[i, j].Value);
                                hoja1.Cells[i, j].Style.Numberformat.Format = "_-$* #,##0.00_-;-$* #,##0.00_-;_-$* \"-\"??_-;_-@_-";

                            }

                        }
                    }

                    hoja1.Column(3).Width = 35;
                    hoja1.Column(tblWidth).Width = 20;

                    ExcelRange rangeTable = hoja1.Cells[6, 2, tblHeight - 1, tblWidth];

                    ExcelTable tbl1 = hoja1.Tables.Add(rangeTable, "Table1");

                    tbl1.TableStyle = TableStyles.Medium21;

                    List<byte[]> lista = new List<byte[]>();

                    var bytes = new MemoryStream();

                    using (var exportData = new MemoryStream())
                    {
                        excel.SaveAs(exportData);
                        bytes = exportData;
                    }

                    return bytes;
                }
            }
            catch (Exception e)
            {
                return null;
            }
        }

        public int GetNumEmpleados(string bottom, string top)
        {

            string[] btmDate = bottom.Split('-');
            string[] topDate = top.Split('-');

            DapperDTO objDapper = new DapperDTO();

            #region consulta
            objDapper.consulta = string.Format(@"SELECT 
	                                                count(DISTINCT(numeroEmpleado))
                                                FROM 
	                                                tblC_Nom_Raya 
                                                WHERE 
	                                                nominaID in 
	                                                (
		                                                SELECT 
			                                                id 
		                                                FROM 
			                                                tblC_Nom_Nomina 
		                                                WHERE 
			                                                year = 2021 and periodo in 
		                                                (
			                                                SELECT 
				                                                periodo
			                                                FROM 
				                                                tblRH_BN_EstatusPeriodos 
			                                                WHERE 
				                                                fecha_final BETWEEN '{0}' AND '{1}'
		                                                ) and estatus = 1 and validada = 1
	                                                )
                                    ", string.Format("{0}-{1}-{2}", btmDate[0], btmDate[1], btmDate[2]), string.Format("{0}-{1}-{2}", topDate[0], topDate[1], topDate[2]));
            #endregion

            objDapper.baseDatos = MainContextEnum.Construplan;
            var lst = _context.Select<int>(objDapper);

            return lst.FirstOrDefault();
        }

        #endregion

        #region Reporte Rango por Centro de costo y Cuenta cta
        public Dictionary<string, object> GetReporteCtroCta(string bottom, string top)
        {
            var result = new Dictionary<string, object>();

            try
            {

                DapperDTO objDapper = new DapperDTO();
                DapperDTO objDapper2 = new DapperDTO();

                string[] btmDate = bottom.Split('-');
                string[] topDate = top.Split('-');

                var nombreCCs = _context.tblC_Nom_CatalogoCC.Select(e => new { e.cc, nombreCC = e.ccDescripcion, e.cuenta, e.area }).Distinct().ToList();

                var conceptos = _context.tblC_Nom_ResumenRaya.Select(e => new { e.cta, e.concepto }).Distinct().ToList();


                switch (vSesiones.sesionEmpresaActual)
                {
                    case (int)MainContextEnum.Construplan:
                        objDapper.baseDatos = MainContextEnum.Construplan;
                        objDapper2.baseDatos = MainContextEnum.Construplan;
                        break;
                    case (int)MainContextEnum.Arrendadora:
                        objDapper.baseDatos = MainContextEnum.Arrendadora;
                        objDapper2.baseDatos = MainContextEnum.Arrendadora;
                        break;
                    case (int)MainContextEnum.EICI:
                        objDapper.baseDatos = MainContextEnum.EICI;
                        objDapper2.baseDatos = MainContextEnum.EICI;
                        break;
                    case (int)MainContextEnum.Colombia:
                        objDapper.baseDatos = MainContextEnum.Colombia;
                        objDapper2.baseDatos = MainContextEnum.Colombia;
                        break;
                    case (int)MainContextEnum.INTEGRADORA:
                        objDapper.baseDatos = MainContextEnum.INTEGRADORA;
                        objDapper2.baseDatos = MainContextEnum.INTEGRADORA;
                        break;
                }

                #region consulta
                objDapper.consulta = string.Format(@"SELECT 
	                                                    aux_fechas.CC,
	                                                    resumen.cta,
	                                                    SUM(resumen.monto) AS monto,
	                                                    SUM(case when aux_fechas.mes  = 1 then resumen.monto else 0 end)
                                                    FROM 
	                                                    (
	                                                    SELECT 
		                                                    * 
	                                                    FROM 
		                                                    tblC_Nom_ResumenRaya
	                                                    WHERE
		                                                    cta LIKE '5%'
                                                            AND estatus = 1
	                                                    ) resumen
                                                    INNER JOIN
	                                                    (
	                                                    SELECT 
		                                                    nomina.id, MONTH(periodo.fecha_final)as mes, YEAR(periodo.fecha_final) AS año, nomina.nombreCC, nomina.CC
	                                                    FROM
		                                                    (
		                                                    SELECT 
			                                                    * 
		                                                    FROM 
			                                                    tblC_Nom_Nomina 
		                                                    WHERE 
			                                                    estatus = 1 
			                                                    AND validada = 1
		                                                    ) nomina
	                                                    INNER JOIN
		                                                    (
		                                                    SELECT 
			                                                    * 
		                                                    FROM 
			                                                    tblRH_BN_EstatusPeriodos 		
		                                                    ) periodo
	                                                    ON 
		                                                    nomina.tipoNomina = periodo.tipo_nomina
		                                                    AND nomina.periodo = periodo.periodo
		                                                    AND nomina.year = periodo.anio
	                                                    WHERE periodo.fecha_final BETWEEN '{0}' AND '{1}'
	                                                    ) aux_fechas
                                                    ON 
	                                                    resumen.nominaId = aux_fechas.id
                                                    GROUP BY 
	                                                    resumen.cta, aux_fechas.CC
                                                    ORDER BY
	                                                    resumen.cta

                                    ", string.Format("{0}-{1}-{2}", btmDate[0], btmDate[1], btmDate[2]), string.Format("{0}-{1}-{2}", topDate[0], topDate[1], topDate[2]));

                objDapper2.consulta = string.Format(@"SELECT 
                                                        cta,
	                                                    concepto
                                                    FROM
	                                                    tblC_Nom_ResumenRaya 
                                                    ");
                #endregion

                //objDapper.baseDatos = MainContextEnum.Construplan;
                var lst = _context.Select<ReporteCentroCuentaDTO>(objDapper);

                //objDapper2.baseDatos = MainContextEnum.Construplan;
                var lst2 = _context.Select<ReporteCentroCuentaDTO>(objDapper2);
                List<ReporteCentroCuentaDTO> ResultadoDeConsulta = new List<ReporteCentroCuentaDTO>();

                switch (vSesiones.sesionEmpresaActual)
                {

                    case (int)MainContextEnum.Arrendadora:
                        //ResultadoDeConsulta = lst.Select(y => new ReporteRangoCCDTO
                        //{
                        //    cc = nombreCCs.FirstOrDefault(e => e.cc == y.cc).area + "-" + nombreCCs.FirstOrDefault(e => e.cc == y.cc).cuenta,
                        //    //cc = y.cc,
                        //    año = y.año,
                        //    mes = y.mes,
                        //    monto = y.monto,
                        //    nombreDeMes = fncNombreDelMes(y.mes),
                        //    nombreCC = nombreCCs.FirstOrDefault(e => e.cc == y.cc).nombreCC,
                        //}).ToList();
                        ResultadoDeConsulta = lst.Select(y => new ReporteCentroCuentaDTO
                        {
                            cc = nombreCCs.FirstOrDefault(e => e.cc == y.cc).area + "-" + nombreCCs.FirstOrDefault(e => e.cc == y.cc).cuenta,
                            nombreCC = nombreCCs.FirstOrDefault(e => e.cc == y.cc).nombreCC,
                            cta = y.cta,
                            concepto = conceptos.FirstOrDefault(e => e.cta == y.cta).concepto,
                            monto = y.monto,

                        }).ToList();
                        break;

                    default:
                        //ResultadoDeConsulta = lst.Select(y => new ReporteRangoCCDTO
                        //{
                        //    //cc = nombreCCs.FirstOrDefault(e => e.cc == y.cc).areaCuenta,
                        //    cc = y.cc,
                        //    año = y.año,
                        //    mes = y.mes,
                        //    monto = y.monto,
                        //    nombreDeMes = fncNombreDelMes(y.mes),
                        //    nombreCC = nombreCCs.FirstOrDefault(e => e.cc == y.cc).nombreCC,
                        //}).ToList();
                        ResultadoDeConsulta = lst.Select(y => new ReporteCentroCuentaDTO
                        {
                            cc = y.cc,
                            nombreCC = nombreCCs.FirstOrDefault(e => e.cc == y.cc).nombreCC,
                            cta = y.cta,
                            concepto = conceptos.FirstOrDefault(e => e.cta == y.cta).concepto,
                            monto = y.monto,

                        }).ToList();
                        break;

                }



                var ResultadoDeConstultaNew = new List<ReporteCentroCuentaDTO>();

                var cuentasUnq = ResultadoDeConsulta.Select(e => new { e.cta, e.concepto }).Distinct().ToList();
                var centrosUnq = ResultadoDeConsulta.Select(e => new { e.cc, e.nombreCC }).Distinct().ToList();

                cuentasUnq = cuentasUnq.Where(x => !ctaNulas.Contains(x.cta)).Select(x => x).ToList();
                cuentasUnq = cuentasUnq.OrderBy(x => Int32.Parse(x.cta.Substring(0, 4))).ThenBy(x => Int32.Parse(x.cta.Substring(5, 2)))
                    .ThenBy(x => Int32.Parse(x.cta.Substring(8))).ToList();

                foreach (var cta in cuentasUnq)
                {
                    foreach (var ctro in centrosUnq)
                    {
                        //Buscar si existe un registro de cada cuenta
                        ReporteCentroCuentaDTO objUnico = ResultadoDeConsulta.Where(r => r.cc == ctro.cc && r.cta == cta.cta).FirstOrDefault();
                        ReporteCentroCuentaDTO objUnico2 = ResultadoDeConstultaNew.Where(r => r.cc == ctro.cc && r.cta == cta.cta).FirstOrDefault();
                        if (objUnico == null && objUnico2 == null)
                        {
                            //Si no existe el registro para dicha cuenta se crea uno con el valor de monto de 0
                            ReporteCentroCuentaDTO obj = new ReporteCentroCuentaDTO();
                            obj.cc = ctro.cc;
                            obj.nombreCC = ctro.nombreCC;
                            obj.cta = cta.cta;
                            obj.concepto = cta.concepto;
                            obj.monto = "0";

                            ResultadoDeConstultaNew.Add(obj);

                        }
                    }
                }

                //Agregar los registron con cuentas en 0 y los nuevos registros de cuenta duplicada
                ResultadoDeConsulta.AddRange(ResultadoDeConstultaNew);
                ResultadoDeConsulta = ResultadoDeConsulta.OrderBy(x => x.cc).ToList();


                List<reporteCCCTADTO> lstData = cuentasUnq.Select(e => new reporteCCCTADTO
                {
                    cta = e.cta,
                    concepto = e.concepto,
                    lstCentros = ResultadoDeConsulta.Where(ee => ee.cta == e.cta).ToList(),
                    total = ResultadoDeConsulta.Where(ee => ee.cta == e.cta).Select(x => Decimal.Parse(x.monto)).Sum().ToString("C", CultureInfo.CurrentCulture),
                }).ToList();

                //lstData.Remove(lstData.FirstOrDefault(e => e.concepto.ToLower() == "compensacion"));

                var lstCompe = lstData.Where(e => e.concepto.ToLower() == "compensacion").ToList();

                foreach (var item in lstCompe)
                {
                    lstData.FirstOrDefault(e => e.cta == item.cta && e.concepto == item.concepto).concepto = "GRATIFICACIONES";
                }


                result.Add("tblData", lstData);
                result.Add("tblHeaders", cuentasUnq);

                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                if (result[ITEMS] == null)
                {
                    result.Add(MESSAGE, "Rango vacio");
                }
                else
                {
                    result.Add(MESSAGE, e.Message);
                }
                result.Add(SUCCESS, false);
            }

            return result;

        }

        public MemoryStream crearReporteCentroCuenta(List<string[]> lstReporte, string tp, string btm)
        {
            try
            {
                using (ExcelPackage excel = new ExcelPackage())
                {
                    var hoja1 = excel.Workbook.Worksheets.Add("Nomina");

                    #region Titulo

                    hoja1.Cells["B1:J1"].Merge = true;

                    switch (vSesiones.sesionEmpresaActual)
                    {
                        case (int)MainContextEnum.Construplan:
                            hoja1.Cells["B1"].Value = "SOLUCIONES INDUSTRIALES SA DE CV";

                            break;
                        default:
                            hoja1.Cells["B1"].Value = "SOLUCIONES INDUSTRIALES SA DE CV";

                            break;
                    }

                    hoja1.Cells["B1"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    hoja1.Cells["B1"].Style.Font.Bold = true;
                    hoja1.Cells["B1"].Style.Font.Size = 14;

                    hoja1.Cells["B2:J2"].Merge = true;
                    hoja1.Cells["B2"].Value = "Reporte por rango por Cuenta Contable y Centro de costo";
                    hoja1.Cells["B2"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                    hoja1.Cells["B3:J3"].Merge = true;
                    hoja1.Cells["B3"].Value = "Periodo de: " + tp + " A " + btm;
                    hoja1.Cells["B3"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                    hoja1.Cells["B4:J4"].Merge = true;
                    hoja1.Cells["B4"].Value = "Fecha: " + DateTime.Now.Date.ToString("dd MMMM yyyy", new System.Globalization.CultureInfo("es-ES"));
                    hoja1.Cells["B4"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                    #endregion

                    List<string[]> headerRow = new List<string[]>();

                    int tblWidth = lstReporte[0].Length;
                    int tblHeight = lstReporte.Count;
                    tblWidth++;

                    hoja1.Cells[6, 2].LoadFromArrays(lstReporte); // LOAD 

                    for (int i = 2; i < tblWidth; i++)
                    {
                        hoja1.Column(i).Width = 15;

                    }

                    //Ajustar rangos a la posicion de la tabla
                    tblHeight += 6;

                    //Dibujar break lines en la tabla
                    for (int i = 7; i < tblHeight; i++)
                    {

                        for (int j = 4; j <= tblWidth; j++)
                        {
                            //hoja1.Cells[i, j].Value = Decimal.Parse(hoja1.Cells[i, j].Value.ToString().Split('$')[1].Replace(",", string.Empty));
                            //var wea = hoja1.Cells[i, j].Value.ToString();

                            if (hoja1.Cells[i, j].Value.ToString().StartsWith("$"))
                            {

                                hoja1.Cells[i, j].Value = Decimal.Parse(hoja1.Cells[i, j].Value.ToString().Split('$')[1].Replace(",", string.Empty));
                                hoja1.Cells[i, j].Style.Numberformat.Format = "_-$* #,##0.00_-;-$* #,##0.00_-;_-$* \"-\"??_-;_-@_-";

                            }
                            else
                            {

                                hoja1.Cells[i, j].Value = Convert.ToDecimal(hoja1.Cells[i, j].Value);
                                hoja1.Cells[i, j].Style.Numberformat.Format = "_-$* #,##0.00_-;-$* #,##0.00_-;_-$* \"-\"??_-;_-@_-";

                            }

                        }
                    }

                    hoja1.Column(3).Width = 35;
                    hoja1.Column(4).Width = 25;
                    hoja1.Column(tblWidth).Width = 20;

                    ExcelRange rangeTable = hoja1.Cells[6, 2, tblHeight - 1, tblWidth];

                    ExcelTable tbl1 = hoja1.Tables.Add(rangeTable, "Table1");

                    tbl1.TableStyle = TableStyles.Medium21;

                    List<byte[]> lista = new List<byte[]>();

                    var bytes = new MemoryStream();

                    using (var exportData = new MemoryStream())
                    {
                        excel.SaveAs(exportData);
                        bytes = exportData;
                    }

                    return bytes;
                }
            }
            catch (Exception e)
            {
                return null;
            }
        }

        #endregion

        #region Reporte range por Empleado y centr de costo

        public Dictionary<string, object> GetReporteEmpleadoCC(string bottom, string top, string cc, string empleado, int tipoRaya)
        {
            List<ReporteEmpleadoCCDTO> lst = new List<ReporteEmpleadoCCDTO>();
            List<ReporteEmpleadoCCDTO> lstData = new List<ReporteEmpleadoCCDTO>();
            List<ReporteEmpleadoCCDTO> lstDataSorted = new List<ReporteEmpleadoCCDTO>();
            var result = new Dictionary<string, object>();
            try
            {

                DapperDTO objDapper = new DapperDTO();

                string[] btmDate = bottom.Split('-');
                string[] topDate = top.Split('-');
                string ccStr = "", empleadoStr = "";


                if (cc != null && cc != "")
                {
                    ccStr = string.Format("AND Nomina.CC = '{0}'", cc);
                }

                if (empleado != null && empleado != "")
                {
                    empleadoStr = string.Format("AND Raya.numeroEmpleado = {0}", empleado);
                }

                if (tipoRaya == 0)
                {
                    tipoRaya = 1;
                }

                switch (vSesiones.sesionEmpresaActual)
                {
                    case (int)MainContextEnum.Construplan:
                        objDapper.baseDatos = MainContextEnum.Construplan;
                        break;
                    case (int)MainContextEnum.Arrendadora:
                        objDapper.baseDatos = MainContextEnum.Arrendadora;
                        break;
                    case (int)MainContextEnum.EICI:
                        objDapper.baseDatos = MainContextEnum.EICI;
                        break;
                    case (int)MainContextEnum.Colombia:
                        objDapper.baseDatos = MainContextEnum.Colombia;
                        break;
                    case (int)MainContextEnum.INTEGRADORA:
                        objDapper.baseDatos = MainContextEnum.INTEGRADORA;
                        break;
                }

                #region consulta
                objDapper.consulta = string.Format(@"SELECT
                                                           *
                                                    FROM
                                                           tblC_Nom_Raya Raya
                                                    LEFT JOIN
                                                           (SELECT
                                                                 Nomina.id AS idNom,
                                                                 Nomina.estatus AS estatusNom,
                                                                 Nomina.validada AS validadaNom,
                                                                 Nomina.tipoNomina As tipoNominaNom,
                                                                 Nomina.periodo AS periodoNom,
                                                                 Nomina.year AS anioNom,
 				                                                 Nomina.tipoRayaId,
                                                                 Periodos.fecha_inicial AS fechaInicio,
                                                                 Periodos.fecha_final AS fechaFin,
                                                                 MONTH(Periodos.fecha_final) AS mesNom,
                                                                 Nomina.CC AS ccNom,
                                                                 Nomina.nombreCC AS ccDesc
                                                           FROM
                                                                 tblC_Nom_Nomina Nomina
                                                           LEFT JOIN
                                                                 tblRH_BN_EstatusPeriodos Periodos
                                                           ON
                                                                 Nomina.periodo = Periodos.periodo
                                                                 AND Nomina.year = Periodos.anio
                                                                 AND Nomina.tipoNomina = Periodos.tipo_nomina
                                                                 {2}
                                                           WHERE
                                                                 Periodos.fecha_final between '{0}' and '{1}'
                                                                 AND Nomina.tipoRayaId = {4}
                                                                 ) A
                                                    ON
                                                           Raya.nominaID = A.idNom
                                                    WHERE
                                                           A.estatusNom = 1
                                                           AND A.validadaNom = 1
                                                           AND Raya.estatus = 1
                                                           {3}

                                    ", string.Format("{0}-{1}-{2}", btmDate[0], btmDate[1], btmDate[2]),
                                     string.Format("{0}-{1}-{2}", topDate[0], topDate[1], topDate[2]),
                                     ccStr, empleadoStr, tipoRaya);
                #endregion

                //objDapper.baseDatos = MainContextEnum.Construplan;
                lst = _context.Select<ReporteEmpleadoCCDTO>(objDapper).ToList();

                lstData = lst;

                foreach (var item in lst)
                {
                    if (tipoRaya == 2 && item.fondoAhorroEmpresaImporte == "0.00")
                    {
                        item.fondoAhorroEmpresaImporte = item.fondoAhorroPagado;
                    }
                    item.tipoNominaDesc = item.tipoNominaNom == "1" ? "SEMANAL" : "QUINCENAL";
                    item.fechaFin = Convert.ToDateTime(item.fechaFin).ToString("dd/MM/yyyy");
                    item.fechaInicio = Convert.ToDateTime(item.fechaInicio).ToString("dd/MM/yyyy");
                    item.ccDesc = item.ccDesc.Trim();
                }

                var lstGData = lstData.GroupBy(e => e.numeroEmpleado).ToList();

                var numEmpleados = lstData.Select(e => e.numeroEmpleado).Distinct().Count();

                var lstResultado = lstData.OrderBy(e => e.tipoNominaNom).ThenBy(e => e.numeroEmpleado).ThenBy(s => Convert.ToInt32(s.periodoNom)).ToList();
                lstDataSorted = lstResultado;

                resultado.Add(ITEMS, lstDataSorted);
                resultado.Add("numEmpleados", numEmpleados);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> GetCentroCostos()
        {
            var result = new Dictionary<string, object>();
            try
            {
                var lst = _context.tblC_Nom_CatalogoCC.Select(e => new { Value = e.cc, Text = e.ccDescripcion });

                result.Add(ITEMS, lst);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }
            return result;
        }

        public Dictionary<string, object> GetListaEmpleados()
        {
            var result = new Dictionary<string, object>();
            try
            {
                var lst = _context.tblC_Nom_Raya.Select(e => new { Value = e.numeroEmpleado, Text = e.nombreCompleto }).Distinct();

                result.Add(ITEMS, lst);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }
            return result;
        }

        public MemoryStream crearReporteEmpleadoCC(Dictionary<string, object> lstReporte, string tp, string btm)
        {
            try
            {
                using (ExcelPackage excel = new ExcelPackage())
                {
                    var hoja1 = excel.Workbook.Worksheets.Add("Nomina");
                    var lstDataReporte = lstReporte["items"] as List<ReporteEmpleadoCCDTO>;
                    var numEmpleados = lstReporte["numEmpleados"] as int?;

                    #region Titulo

                    hoja1.Cells["B1:J1"].Merge = true;

                    switch (vSesiones.sesionEmpresaActual)
                    {
                        case (int)MainContextEnum.Construplan:
                            hoja1.Cells["B1"].Value = "SOLUCIONES INDUSTRIALES SA DE CV";

                            break;
                        default:
                            hoja1.Cells["B1"].Value = "SOLUCIONES INDUSTRIALES SA DE CV";

                            break;
                    }

                    hoja1.Cells["B1"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    hoja1.Cells["B1"].Style.Font.Bold = true;
                    hoja1.Cells["B1"].Style.Font.Size = 14;

                    hoja1.Cells["B2:J2"].Merge = true;
                    hoja1.Cells["B2"].Value = "Reporte por rango por Empleado y Centro de Cuenta";
                    hoja1.Cells["B2"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                    hoja1.Cells["B3:J3"].Merge = true;
                    hoja1.Cells["B3"].Value = "Periodo de: " + btm + " A " + tp;
                    hoja1.Cells["B3"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                    hoja1.Cells["B4:J4"].Merge = true;
                    hoja1.Cells["B4"].Value = "Fecha: " + DateTime.Now.Date.ToString("dd MMMM yyyy", new System.Globalization.CultureInfo("es-ES")) + " # de Empleados: " + numEmpleados.Value;
                    hoja1.Cells["B4"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                    #endregion

                    List<string[]> headerRow = new List<string[]>();

                    int tblWidth = 87;
                    int tblHeight = lstDataReporte.Count + 1;
                    tblWidth++;

                    List<object[]> objList = new List<object[]>();

                    #region Headers
                    objList.Add(new object[]{ 
                            "Año",
                            "Mes",
                            "Tipo Nomina",
                            "Periodo",
                            "Fecha Inicio",
                            "Fecha Fin",
                            "CC",
                            "Descripcion CC",
                            "Numero empleado",
                            "Nombre",
                            "Sueldo Unidades",
                            "Sueldo Importe",
                            "Septimo Dia Unidades",
                            "Septimo Día Importe",
                            "Horas Extra Doblres",
                            "Horas Extras Triples",
                            "Prima Dominical",
                            "Anso Festivo Trabajado",
                            "Incapacidad Enfermedad 3 Dias",
                            "Premios Asistencia",
                            "Bono Puntualidad",
                            "Permisos Con Goce",
                            "Despensa 2",
                            "Fondo Ahorro Empresa",
                            "Compensacion Ispt Imss",
                            "Vacacion Trabajada",
                            "Vacacion Finiquito",
                            "Vacacion Disfrutada",
                            "Prima Vacacional",
                            "Prima Vacacional 2",
                            "Aguinaldo Gravado",
                            "Aguinaldo Exento",
                            "Prima Antiguedad",
                            "Indemnizacion 3 Meses",
                            "Indemnizacion 20 Dias",
                            "Indemnizacion Otros",
                            "Reparto Utilidad Gra",
                            "Reparto Utilidad Exe",
                            "Prestamo Ahorro",
                            "Fondo Ahorro Empresa2",
                            "Fondo Ahorro Empleado",
                            "Interes Por Fondo Ahorro",
                            "Diferencia Categoria",
                            "Bonos",
                            "Retroactivo Diverso",
                            "Comisiones Sueldo",
                            "Incentivo Productivo",
                            "Gratificacion Especial",
                            "Prev Social",
                            "Prev Social Alimentos",
                            "Prev Social Habitacion",
                            "Otras Percepciones",
                            "Compensacion Unica Extraordinaria",
                            "Bono Produccion",
                            "Despensa",
                            "Prevision Social",
                            "Alto Costo Vida",
                            "Despensa 3",
                            "Prev Social Alimentos 2",
                            "Alto Costo Vida 2",
                            "Subsidio Empleo",
                            "Total Percepciones",
                            "ISR",
                            "IMSS",
                            "ISPT Comp",
                            "Cuota Sindical",
                            "Cuota Sindical Extra",
                            "Infonavit",
                            "Fonacot",
                            "Pension Alimenticia",
                            "Vejez Sar",
                            "Descuentos Alimentos",
                            "Descuentos Alimentos Pend",
                            "Adeudo Empresa",
                            "Intereses Prestamo",
                            "Fondo Ahorro Empleado 2",
                            "Fondo Ahorro Empresa 3",
                            "Infonavit Mes Anterior",
                            "Anticipos Diversos",
                            "ISPT Saldo Anterior",
                            "Descuentos",
                            "Famsa",
                            "Prestamos",
                            "AXA",
                            "Ajuste Nomina",
                            "Total Deducciones",
                            "Neto a Pagar",
                    });
                    #endregion

                    #region Data

                    foreach (var reg in lstDataReporte)
                    {
                        objList.Add(new object[] { 
                        
                            reg.anioNom,
                            reg.mesNom,
                            reg.tipoNominaDesc,
                            reg.periodoNom,
                            reg.fechaInicio,
                            reg.fechaFin,
                            reg.ccNom,
                            reg.ccDesc,
                            reg.numeroEmpleado,
                            reg.nombreCompleto,
                            reg.sueldoUnidades,
                            reg.sueldoImporte,
                            reg.septimoDiaUnidades,
                            reg.septimoDiaImporte,
                            reg.horasExtraDoblesImporte,
                            reg.horasExtrasTriplesImporte,
                            reg.primaDominicalImporte,
                            reg.ansoFestivoTrabajadoImporte,
                            reg.incapacidadEnfermedad3DiasImporte,
                            reg.premiosAsistenciaImporte,
                            reg.bonoPuntualidadImporte,
                            reg.permisosConGoceImporte,
                            reg.despensa2Importe,
                            reg.fondoAhorroEmpresaImporte,
                            reg.compensacionIsptImssImporte,
                            reg.vacacionTrabajadaImporte,
                            reg.vacacionFiniquitoImporte,
                            reg.vacacionDisfrutadaImporte,
                            reg.primaVacacionalImporte,
                            reg.primaVacacional2Importe,
                            reg.aguinaldoGravadoImporte,
                            reg.aguinaldoExentoImporte,
                            reg.primaAntiguedadImporte,
                            reg.indemnizacion3MesesImporte,
                            reg.indemnizacion20DiasImporte,
                            reg.indemnizacionOtrosImporte,
                            reg.repartoUtilidadGraImporte,
                            reg.repartoUtilidadExeImporte,
                            reg.prestamoAhorroImporte,
                            reg.fondoAhorroEmpresa2Importe,
                            reg.fondoAhorroEmpleadoImporte,
                            reg.interesPorFondoAhorroImporte,
                            reg.diferenciaCategoriaImporte,
                            reg.bonosImporte,
                            reg.retroactivoDiversoImporte,
                            reg.comisionesSueldoImporte,
                            reg.incentivoProductivoImporte,
                            reg.gratificacionEspecialImporte,
                            reg.prevSocialImporte,
                            reg.prevSocialAlimentosImporte,
                            reg.prevSocialHabitacionImporte,
                            reg.otrasPercepcionesImporte,
                            reg.compensacionUnicaExtraordinariaImporte,
                            reg.bonoProduccionImporte,
                            reg.despensaImporte,
                            reg.previsionSocialImporte,
                            reg.altoCostoVidaImporte,
                            reg.despensa3Importe,
                            reg.prevSocialAlimentos2Importe,
                            reg.altoCostoVida2Importe,
                            reg.subsidioEmpleoImporte,
                            reg.totalPercepciones,
                            reg.isrImporte,
                            reg.imssImporte,
                            reg.isptCompImporte,
                            reg.cuotaSindicalImporte,
                            reg.cuotaSindicalExtraImporte,
                            reg.infonavitImporte,
                            reg.fonacotImporte,
                            reg.pensionAlimenticiaImporte,
                            reg.vejezSarImporte,
                            reg.descuentosAlimentosImporte,
                            reg.descuentosAlimentosPendImporte,
                            reg.adeudoEmpresaImporte,
                            reg.interesesPrestamoImporte,
                            reg.fondoAhorroEmpleado2Importe,
                            reg.fondoAhorroEmpresa3Importe,
                            reg.infonavitMesAnteriorImporte,
                            reg.anticiposDiversosImporte,
                            reg.isptSaldoAnteriorImporte,
                            reg.descuentosImporte,
                            reg.famsaImporte,
                            reg.prestamosImporte,
                            reg.axaImporte,
                            reg.ajusteNominaImporte,
                            reg.totalDeducciones,
                            reg.netoPagar,
                        });
                    }
                    #endregion

                    hoja1.Cells[6, 2].LoadFromArrays(objList); // LOAD 

                    for (int i = 2; i < tblWidth; i++)
                    {
                        hoja1.Column(i).Width = 15;

                    }

                    //Ajustar rangos a la posicion de la tabla
                    tblHeight += 6;
                    for (int i = 7; i < tblHeight; i++)
                    {
                        hoja1.Cells[i, 13].Value = Decimal.Parse(hoja1.Cells[i, 13].Value.ToString());
                        hoja1.Cells[i, 13].Style.Numberformat.Format = "_-$* #,##0.00_-;-$* #,##0.00_-;_-$* \"-\"??_-;_-@_-";

                        hoja1.Cells[i, 12].Value = Decimal.Parse(hoja1.Cells[i, 12].Value.ToString());
                        hoja1.Cells[i, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        hoja1.Cells[i, 14].Value = Decimal.Parse(hoja1.Cells[i, 14].Value.ToString());
                        hoja1.Cells[i, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                        for (int j = 15; j <= tblWidth; j++)
                        {

                            hoja1.Cells[i, j].Value = Decimal.Parse(hoja1.Cells[i, j].Value.ToString());
                            hoja1.Cells[i, j].Style.Numberformat.Format = "_-$* #,##0.00_-;-$* #,##0.00_-;_-$* \"-\"??_-;_-@_-";


                            //hoja1.Cells[i, j].Style.Numberformat.Format = "_-$* #,##0.00_-;-$* #,##0.00_-;_-$* \"-\"??_-;_-@_-";

                        }
                    }

                    hoja1.Column(9).Width = 42;
                    hoja1.Column(11).Width = 42;
                    hoja1.Column(tblWidth).Width = 20;
                    hoja1.Row(6).Height = 50;
                    hoja1.Row(6).Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    hoja1.Row(6).Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    hoja1.Row(6).Style.WrapText = true;

                    hoja1.Cells[7, 1, tblHeight - 1, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                    ExcelRange rangeTable = hoja1.Cells[6, 2, tblHeight - 1, tblWidth];

                    ExcelTable tbl11 = hoja1.Tables.Add(rangeTable, "Table11");

                    tbl11.TableStyle = TableStyles.Medium21;

                    List<byte[]> lista = new List<byte[]>();

                    var bytes = new MemoryStream();

                    using (var exportData = new MemoryStream())
                    {
                        excel.SaveAs(exportData);
                        bytes = exportData;
                    }

                    return bytes;
                }
            }
            catch (Exception e)
            {
                return null;
            }
        }

        #endregion

        #region Reporte Range por Periodo (Concentrado)

        public Dictionary<string, object> GetReporteConcentrado(DateTime? fechaInicial, DateTime? fechaFinal, int? tipoRaya, int? tipoNomina)
        {
            resultado.Clear();

            try
            {
                var lstConcetrado = _context.Select<ReporteEmpleadoCCDTO>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = @"
                    SELECT
                            mesNom, periodoNom, COUNT(*) as numEmpleados, SUM (sueldoImporte) as sueldoImporte, SUM(septimoDiaImporte) as septimoDiaImporte,
		                    SUM(horasExtraDoblesImporte) as horasExtraDoblesImporte,SUM(horasExtrasTriplesImporte) as horasExtraTriplesImporte,
		                    SUM(primaDominicalImporte) as primaDominicalImporte ,SUM(ansoFestivoTrabajadoImporte) as ansoFestivoTrabajadoImporte,
		                    SUM(incapacidadEnfermedad3DiasImporte) as incapacidadEnfermedad3DiasImporte,SUM(premiosAsistenciaImporte) as premiosAsistenciaImporte,
		                    SUM(bonoPuntualidadImporte) as bonoPuntualidadImporte,SUM(permisosConGoceImporte) as permisosConGoceImporte,SUM(despensa2Importe) as despensa2Importe,
		                    SUM(fondoAhorroEmpresaImporte) as fondoAhorroEmpresaImporte,SUM(compensacionIsptImssImporte) as compensacionIsptImssImporte,
		                    SUM(vacacionTrabajadaImporte) as vacacionTrabajadaImporte,SUM(vacacionFiniquitoImporte) as vacacionFiniquitoImporte,
		                    SUM(vacacionDisfrutadaImporte) as vacacionDisfrutadaImporte,SUM(primaVacacionalImporte) as primaVacacionalImporte,
		                    SUM(primaVacacional2Importe) as primaVacacional2Importe,SUM(aguinaldoGravadoImporte) as aguinaldoGravadoImporte,
		                    SUM(aguinaldoExentoImporte) as aguinaldoExentoImporte,SUM(primaAntiguedadImporte) as primaAntiguedadImporte,
		                    SUM(indemnizacion3MesesImporte) as indemnizacion3MesesImporte,SUM(indemnizacion20DiasImporte) as indemnizacion20DiasImporte,
		                    SUM(indemnizacionOtrosImporte) as indemnizacionOtrosImporte,SUM(repartoUtilidadGraImporte) as repartoUtilidadGraImporte,
		                    SUM(repartoUtilidadExeImporte) as repartoUtilidadExeImporte,SUM(prestamoAhorroImporte) as prestamoAhorroImporte,
		                    SUM(fondoAhorroEmpresa2Importe) as fondoAhorroEmpresa2Importe,SUM(fondoAhorroEmpleadoImporte) as fondoAhorroEmpleadoImporte,
		                    SUM(interesPorFondoAhorroImporte) as interesPorFondoAhorroImporte,SUM(diferenciaCategoriaImporte) as diferenciaCategoriaImporte,
		                    SUM(bonosImporte) as bonosImporte,SUM(retroactivoDiversoImporte) as retroactivoDiversoImporte,SUM(comisionesSueldoImporte) as comisionesSueldoImporte,
		                    SUM(incentivoProductivoImporte) as incentivoProductivoImporte,SUM(gratificacionEspecialImporte) as gratificacionEspecialImporte,
		                    SUM(prevSocialImporte) as prevSocialImporte,SUM(prevSocialAlimentosImporte) as prevSocialAlimentosImporte,
		                    SUM(prevSocialHabitacionImporte) as prevSocialHabitacionImporte,SUM(otrasPercepcionesImporte) as otrasPercepcionesImporte,
		                    SUM(compensacionUnicaExtraordinariaImporte) as compensacionUnicaExtraordinariaImporte,SUM(bonoProduccionImporte) as bonoProduccionImporte,
		                    SUM(despensaImporte) as despensaImporte,SUM(previsionSocialImporte) as previsionSocialImporte,SUM(altoCostoVidaImporte) as altoCostoVidaImporte,
		                    SUM(despensa3Importe) as despensa3Importe,SUM(prevSocialAlimentos2Importe) as prevSocialAlimentos2Importe,SUM(altoCostoVida2Importe) as altoCostoVida2Importe,
		                    SUM(subsidioEmpleoImporte) as subsidioEmpleoImporte, SUM(totalPercepciones) as totalPercepciones, SUM(isrImporte) as isrImporte,SUM(imssImporte) as imssImporte,
		                    SUM(isptCompImporte) as isptCompImporte,SUM(cuotaSindicalImporte) as cuotaSindicalImporte,SUM(cuotaSindicalExtraImporte) as cuotaSindicalExtraImporte,
		                    SUM(infonavitImporte) as infonavitImporte,SUM(fonacotImporte) as fonacotImporte,SUM(pensionAlimenticiaImporte) as pensionAlimenticiaImporte,
		                    SUM(vejezSarImporte) as vejezSarImporte,SUM(descuentosAlimentosImporte) as descuentosAlimentosImporte,SUM(descuentosAlimentosPendImporte) as descuentosAlimentosPendImporte,
		                    SUM(adeudoEmpresaImporte) as adeudoEmpresaImporte,SUM(interesesPrestamoImporte) as interesesPrestamoImporte,SUM(fondoAhorroEmpleado2Importe) as fondoAhorroEmpleado2Importe,
		                    SUM(fondoAhorroEmpresa3Importe) as fondoAhorroEmpresa3Importe,SUM(infonavitMesAnteriorImporte) as infonavitMesAnteriorImporte,
		                    SUM(anticiposDiversosImporte) as anticiposDiversosImporte,SUM(isptSaldoAnteriorImporte) as isptSaldoAnteriorImporte,SUM(descuentosImporte) as descuentosImporte,
		                    SUM(famsaImporte) as famsaImporte,SUM(prestamosImporte) as prestamosImporte,SUM(axaImporte) as axaImporte,SUM(ajusteNominaImporte) as ajusteNominaImporte, 
		                    SUM(totalDeducciones) as totalDeducciones, SUM(netoPagar) as netoPagar,SUM(pteExeCompSeparacionImporte) as pteExeCompSeparacionImporte,
		                    SUM(parteExentaIsptImporte) as parteExentaIsptImporte,SUM(percGravPatronImporte) as percGravPatronImporte,SUM(isptRetenPatronImporte) as isptRetenPatronImporte,
		                    SUM(basesRepartoImporte) as basesRepartoImporte,SUM(sueldoVariableImssImporte) as sueldoVariableImssImporte,SUM(prevSocialGravableServImporte) as prevSocialGravableServImporte,
		                    SUM(isptSalAnualImporte) as isptSalAnualImporte,SUM(vacacIncapImporte) as vacacIncapImporte,SUM(recalculoIsptMesImporte) as recalculoIsptMesImporte,
		                    SUM(prevSocialGravableImporte) as prevSocialGravableImporte,SUM(credSalTablaImporte) as credSalTablaImporte,SUM(vacacionesAnteriorImporte) as vacacionesAnteriorImporte,
		                    SUM(vacacionesImporte) as vacacionesImporte,SUM(difInfonBimAnteriorImporte) as difInfonBimAnteriorImporte,SUM(difInfonMesAnteriorImporte) as difInfonMesAnteriorImporte,
		                    SUM(sueldoGarantizadoImporte) as sueldoGarantizadoImporte,SUM(infonavitRepetitivosImporte) as infonavitRepetitivosImporte,
		                    SUM(saldoRepetitivoNoCobradoImporte) as saldoRepetitivoNoCobradoImporte,SUM(porcentajeFiniquitoImporte) as porcentajeFiniquitoImporte,
		                    SUM(subsidioEmpleo2Importe) as subsidioEmpleo2Importe,SUM(calculoAnualImporte) as calculoAnualImporte,SUM(isptAcumulablesImporte) as isptAcumulablesImporte,
		                    SUM(repartoUtilidadesImporte) as repartoUtilidadesImporte,SUM(parteExentaImporte) as parteExentaImporte,SUM(parteExentaPrimaDominicalImporte) as parteExentaPrimaDominicalImporte,
		                    SUM(parteExentaFestivoTrabajadoImporte) as parteExentaFestivoTrabajadoImporte,SUM(netoPagar2Importe) as netoPagar2Importe
                    FROM
                            tblC_Nom_Raya Raya
                    LEFT JOIN
                            (SELECT
                                    Nomina.id AS idNom,
                                    Nomina.estatus AS estatusNom,
                                    Nomina.validada AS validadaNom,
                                    Nomina.tipoNomina As tipoNominaNom,
                                    Nomina.periodo AS periodoNom,
                                    Nomina.year AS anioNom,
 				                    Nomina.tipoRayaId,
                                    Periodos.fecha_inicial AS fechaInicio,
                                    Periodos.fecha_final AS fechaFin,
                                    MONTH(Periodos.fecha_final) AS mesNom,
                                    Nomina.CC AS ccNom,
                                    Nomina.nombreCC AS ccDesc
                            FROM
                                    tblC_Nom_Nomina Nomina
                            LEFT JOIN
                                    tblRH_BN_EstatusPeriodos Periodos
                            ON
                                    Nomina.periodo = Periodos.periodo
                                    AND Nomina.year = Periodos.anio
                                    AND Nomina.tipoNomina = Periodos.tipo_nomina
                            WHERE
                                    Periodos.fecha_final BETWEEN @fechaInicial AND @fechaFinal
                                    AND Nomina.tipoRayaId = @tipoRaya
                                    AND Nomina.tipoNomina = @tipoNomina
                                    ) A
                    ON
                            Raya.nominaID = A.idNom
                    WHERE
                            A.estatusNom = 1
                            AND A.validadaNom = 1
                            AND Raya.estatus = 1
                    GROUP BY mesNom, periodoNom
                    ORDER BY mesNom
                    ",
                    parametros = new { fechaInicial, fechaFinal, tipoRaya, tipoNomina }
                });

                var numEmpleados = _context.Select<NumEmpleadosMesDTO>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = @"
                                SELECT mesNom, COUNT (*) numEmpleados
                                FROM 
                                (
                                SELECT 
                                        mesNom, Raya.numeroEmpleado, COUNT(*) as cantidad
                                FROM
                                        tblC_Nom_Raya Raya
                                LEFT JOIN
                                        (SELECT
                                                Nomina.id AS idNom,
                                                Nomina.estatus AS estatusNom,
                                                Nomina.validada AS validadaNom,
                                                Nomina.tipoNomina As tipoNominaNom,
                                                Nomina.periodo AS periodoNom,
                                                Nomina.year AS anioNom,
 				                                Nomina.tipoRayaId,
                                                Periodos.fecha_inicial AS fechaInicio,
                                                Periodos.fecha_final AS fechaFin,
                                                MONTH(Periodos.fecha_final) AS mesNom,
                                                Nomina.CC AS ccNom,
                                                Nomina.nombreCC AS ccDesc
                                        FROM
                                                tblC_Nom_Nomina Nomina
                                        LEFT JOIN
                                                tblRH_BN_EstatusPeriodos Periodos
                                        ON
                                                Nomina.periodo = Periodos.periodo
                                                AND Nomina.year = Periodos.anio
                                                AND Nomina.tipoNomina = Periodos.tipo_nomina
                                        WHERE
                                                Periodos.fecha_final BETWEEN @fechaInicial AND @fechaFinal
                                                AND Nomina.tipoRayaId = @tipoRaya
                                                AND Nomina.tipoNomina = @tipoNomina

                                                ) A
                                ON
                                        Raya.nominaID = A.idNom
                                WHERE
                                        A.estatusNom = 1
                                        AND A.validadaNom = 1
                                        AND Raya.estatus = 1
                                GROUP BY mesNom, Raya.numeroEmpleado
                                )tT
                                GROUP BY mesNom",
                    parametros = new { fechaInicial, fechaFinal, tipoRaya, tipoNomina }

                });

                resultado.Add(SUCCESS, true);
                resultado.Add("lstConcetrado", lstConcetrado);
                resultado.Add("numEmpleados", numEmpleados);
            }
            catch (Exception e)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }

            return resultado;
        }

        #endregion

        public SolicitudChequeReporteDTO GetSolicitudChequeReporte(int year, int periodo, int tipoNomina, int banco)
        {
            var data = new SolicitudChequeReporteDTO();
            decimal totalNomina = 0;
            decimal fondoAhorro = 0;
            decimal depositoOneCard = 0;
            try
            {
                var periodoSIGOPLAN = _context.tblRH_BN_EstatusPeriodos.FirstOrDefault(x => x.estatus && x.anio == year && x.tipo_nomina == tipoNomina && x.periodo == periodo);
                if (periodoSIGOPLAN != null)
                {
                    //var centrosCostosBanamex = new List<string> { "166", "170", "178", "162", "183", "186", "188", "189", "187" };
                    List<string> centrosCostoAplica = new List<string>();
                    centrosCostoAplica = _context.tblC_Nom_CatSolicitudCheque.Where(x => x.tipoSolicitudCheque == banco && x.tipoNomina == (tipoNomina == 10 ? (periodo == 1 ? 1 : 4) : (int)tipoNomina) && x.registroActivo).Select(x => x.cc).ToList();
                    var listaPrenomina = _context.tblC_Nom_Prenomina.Where(x => x.validada && x.estatus == 1 && x.periodo == periodo && x.year == year && x.tipoNomina == tipoNomina).ToList();
                    var listaPrenominaDetAux = new List<tblC_Nom_PreNomina_Det>();
                    var cuentaBanco = "";
                    var cuentaOCSI = "";
                    var empresaActual = vSesiones.sesionEmpresaActual;
                    var bancoStr = _context.tblC_Nom_CatSolicitudCheque.Where(x => x.tipoSolicitudCheque == banco && x.registroActivo).FirstOrDefault();
                    data.tipoBanco = "";

                    switch (empresaActual)
                    {
                        case 1:
                            cuentaBanco = "";
                            cuentaOCSI = "";
                            data.nombreEmpresa = "SOLUCIONES INDUSTRIALES SA DE CV";
                            break;
                        default:
                            cuentaBanco = "";
                            cuentaOCSI = "";
                            data.nombreEmpresa = "SOLUCIONES INDUSTRIALES SA DE CV";
                            break;
                    }

                    var listaPrenomina_id = listaPrenomina.Select(x => x.id).ToList();
                    var listaPrenominaDetalle = _context.tblC_Nom_PreNomina_Det.Where(x => x.estatus && listaPrenomina_id.Contains(x.prenominaID)).ToList();
                    if (listaPrenominaDetAux.Count() > 0) listaPrenominaDetalle.AddRange(listaPrenominaDetAux);
                    //List<dynamic> listaCCEnkontrol = _contextEnkontrol.Select<dynamic>(vSesiones.sesionEmpresaActual == 1 ? EnkontrolEnum.CplanRh : EnkontrolEnum.ArrenRh, new OdbcConsultaDTO()
                    //{
                    //    consulta = @"SELECT * FROM cc"
                    //});
                    List<tblC_Nom_CatalogoCC> listaCCNomina = _context.tblC_Nom_CatalogoCC.ToList();

                    totalNomina = listaPrenominaDetalle.Sum(x => x.totalDeposito) + listaPrenominaDetalle.Sum(x => x.pensionAlimenticia);
                    fondoAhorro = (listaPrenominaDetalle.Sum(x => x.fondoAhorroNomina) + listaPrenominaDetalle.Sum(x => x.fondoAhorroComplemento)) * 2;
                    depositoOneCard = listaPrenominaDetalle.Sum(x => x.valesDespensa);
                    var comisionOCSI = (depositoOneCard * (decimal)0.01) * (decimal)(1.16);
                    depositoOneCard = depositoOneCard + comisionOCSI;

                    data.cuenta = vSesiones.sesionEmpresaActual == 2 ? "2110-1-2793" : vSesiones.sesionEmpresaActual == 8 ? "2110-1-2720" : "2110-1-2720";
                    if (tipoNomina == 10)
                    {
                        data.concepto = string.Format("AGUINALDO {0} {1}", periodoSIGOPLAN.anio, (periodoSIGOPLAN.periodo == 1 ? "SEMANAL" : "QUINCENAL"));
                    }
                    else
                    {
                        data.concepto = string.Format("{0} #{1:00} DEL {2:00} AL {3:00} {4} {5}",
                            EnumExtensions.GetDescription((tipoNominaPropuestaEnum)periodoSIGOPLAN.tipo_nomina),
                            periodoSIGOPLAN.periodo,
                            periodoSIGOPLAN.fecha_inicial.Day,
                            periodoSIGOPLAN.fecha_final.Day,
                            periodoSIGOPLAN.fecha_final.ToString("MMMM").ToUpper(),
                            periodoSIGOPLAN.fecha_final.Year
                        );
                    }

                    data.cuentaBanco = cuentaBanco;
                    data.totalCantidadEmpleados = listaPrenominaDetalle.Count().ToString();
                    data.fondoAhorro = fondoAhorro.ToString("C");
                    data.depositoOneCard = depositoOneCard.ToString("C");


                    var solicita2 = "";

                    switch (tipoNomina)
                    {
                        case 1: //SEMANAL
                            // Solicitante 1 seteado a Luz Armida Rodriguez Leyva id: 1097
                            data.solicita1 = "CP. LUZ ARMIDA RODRIGUEZ LEYVA";
                            data.firmaSolicita1 = GlobalUtils.CrearFirmaDigital(listaPrenomina_id.FirstOrDefault(), DocumentosEnum.AutorizacionSolicitudCheque, 1097, TipoFirmaEnum.Autorizacion);
                            data.cuentaOCSI = cuentaOCSI;
                            solicita2 = "Y/O CP. MELISSA MOLINA TERAN";
                            // Solicitante 2 Semanal seteado para Melisa Molina Teran id: 37184
                            data.firmaSolicita2 = GlobalUtils.CrearFirmaDigital(listaPrenomina_id.FirstOrDefault(), DocumentosEnum.AutorizacionSolicitudCheque, 37184, TipoFirmaEnum.Autorizacion);
                            break;
                        case 4: //QUINCENAL
                            data.solicita1 = "LAE. IVANA GUADALUPE LUCERO NAVARRETE";
                            data.firmaSolicita1 = "";
                            data.cuentaOCSI = cuentaOCSI;
                            solicita2 = "";
                            // Solicitante 2 Quincenal seteado para Ivana Guadalupe Lucero Navarro id: 42209
                            data.firmaSolicita2 = GlobalUtils.CrearFirmaDigital(listaPrenomina_id.FirstOrDefault(), DocumentosEnum.AutorizacionSolicitudCheque, 42209, TipoFirmaEnum.Autorizacion);
                            break;
                        case 10:
                            if (periodo == 1)
                            {
                                //SEMANAL
                                // Solicitante 1 seteado a Luz Armida Rodriguez Leyva id: 1097
                                data.solicita1 = "CP. LUZ ARMIDA RODRIGUEZ LEYVA";
                                data.firmaSolicita1 = GlobalUtils.CrearFirmaDigital(listaPrenomina_id.FirstOrDefault(), DocumentosEnum.AutorizacionSolicitudCheque, 1097, TipoFirmaEnum.Autorizacion);
                                data.cuentaOCSI = cuentaOCSI;
                                solicita2 = "Y/O CP. MELISSA MOLINA TERAN";
                                // Solicitante 2 Semanal seteado para Melisa Molina Teran id: 37184
                                data.firmaSolicita2 = GlobalUtils.CrearFirmaDigital(listaPrenomina_id.FirstOrDefault(), DocumentosEnum.AutorizacionSolicitudCheque, 37184, TipoFirmaEnum.Autorizacion);
                            }
                            else
                            {
                                //QUINCENAL
                                data.solicita1 = "LAE. IVANA GUADALUPE LUCERO NAVARRETE";
                                data.firmaSolicita1 = "";
                                data.cuentaOCSI = cuentaOCSI;
                                solicita2 = "";
                                // Solicitante 2 Quincenal seteado para Ivana Guadalupe Lucero Navarro id: 42209
                                data.firmaSolicita2 = GlobalUtils.CrearFirmaDigital(listaPrenomina_id.FirstOrDefault(), DocumentosEnum.AutorizacionSolicitudCheque, 42209, TipoFirmaEnum.Autorizacion);
                            }
                            break;
                    }

                    data.solicita2 = solicita2;
                    data.autoriza = "ING. MARTIN ALBERTO AZPE FIMBRES";
                    // Autorizante seteado para Martin Alberto Azpe Fimbres id: 6489
                    data.firmaAutoriza = GlobalUtils.CrearFirmaDigital(listaPrenomina_id.FirstOrDefault(), DocumentosEnum.AutorizacionSolicitudCheque, 6489, TipoFirmaEnum.Autorizacion);
                    data.vobo = "CP. LILIANA MADRID GARCIA";
                    // Autorizante seteado para Liliana Madrid Garcia id: 1096
                    data.firmaVobo = GlobalUtils.CrearFirmaDigital(listaPrenomina_id.FirstOrDefault(), DocumentosEnum.AutorizacionSolicitudCheque, 1096, TipoFirmaEnum.Autorizacion);
                    data.tabla = new List<SolicitudChequeReporteDetalleDTO>();

                    foreach (var pre in listaPrenomina)
                    {
                        var prenominaDetalle = listaPrenominaDetalle.Where(x => x.prenominaID == pre.id).ToList();
                        bool banderaSindicato = false;
                        //if (pre.CC == "174")
                        //{
                        //    totalNomina += prenominaDetalle.Sum(y => y.sindicato);
                        //    banderaSindicato = true;
                        //}

                        data.tabla.Add(new SolicitudChequeReporteDetalleDTO
                        {
                            cantidadEmpleados = prenominaDetalle.Count().ToString(),
                            cc = pre.CC,
                            reqGlobal = "",
                            obra = listaCCNomina.Where(x => x.cc == pre.CC).Select(y => y.ccDescripcion).FirstOrDefault(),
                            subtotal = (prenominaDetalle.Sum(x => x.totalDeposito) + prenominaDetalle.Sum(x => x.pensionAlimenticia) + (banderaSindicato ? prenominaDetalle.Sum(x => x.sindicato) : 0)).ToString("C")
                        });
                        data.tabla.ForEach(x => x.obra = x.obra.ToUpper());
                    }
                }
                else
                {
                    throw new Exception("No se encuentra la información del periodo.");
                }
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, "NominaController", "GetSolicitudChequeReporte", e, AccionEnum.CONSULTA, 0, new { year = year, periodo = periodo, tipoNomina = tipoNomina });
            }
            data.importe = (totalNomina + fondoAhorro + depositoOneCard).ToString("C");
            data.totalNomina = totalNomina.ToString("C");
            data.tabla = data.tabla.OrderBy(x => x.cc).ToList();
            return data;
        }

        public CedulaCostosReporteDTO GetCedulaCostos(int year, int periodo, int tipoNomina, int banco)
        {
            var data = new CedulaCostosReporteDTO();
            decimal totalNomina = 0;
            decimal fondoAhorro = 0;
            decimal depositoOneCard = 0;
            try
            {
                var periodoSIGOPLAN = _context.tblRH_BN_EstatusPeriodos.FirstOrDefault(x => x.estatus && x.anio == year && x.tipo_nomina == tipoNomina && x.periodo == periodo);
                if (periodoSIGOPLAN != null)
                {
                    //var centrosCostosBanamex = new List<string> { "166", "170", "178", "162", "183", "186", "188", "189", "187" };
                    var centrosCostoAplica = _context.tblC_Nom_CatSolicitudCheque.Where(x => x.tipoSolicitudCheque == banco && x.tipoNomina == (tipoNomina == 10 ? (periodo == 1 ? 1 : 4) : (int)tipoNomina)).Select(x => x.cc).ToList();

                    var listaPrenomina = _context.tblC_Nom_Prenomina.Where(x => x.validada && x.estatus == 1 && x.periodo == periodo && x.year == year && x.tipoNomina == tipoNomina).ToList();
                    var listaPrenominaDetAux = new List<tblC_Nom_PreNomina_Det>();
                    var empresaActual = vSesiones.sesionEmpresaActual;
                    var bancoStr = _context.tblC_Nom_CatSolicitudCheque.Where(x => x.tipoSolicitudCheque == banco && x.registroActivo).FirstOrDefault();

                    switch (empresaActual)
                    {
                        case 1:
                            data.nombreEmpresa = "SOLUCIONES INDUSTRIALES SA DE CV";
                            data.tipoBanco = "";
                            break;
                        default:
                            data.nombreEmpresa = "SOLUCIONES INDUSTRIALES SA DE CV";
                            data.tipoBanco = "";
                            break;
                    }

                    var listaPrenomina_id = listaPrenomina.Select(x => x.id).ToList();
                    var listaPrenominaDetalle = _context.tblC_Nom_PreNomina_Det.Where(x => x.estatus && listaPrenomina_id.Contains(x.prenominaID)).ToList();
                    if (listaPrenominaDetAux.Count() > 0) listaPrenominaDetalle.AddRange(listaPrenominaDetAux);
                    List<tblC_Nom_CatalogoCC> listaCCNomina = _context.tblC_Nom_CatalogoCC.ToList();

                    totalNomina = listaPrenominaDetalle.Sum(x => x.totalDeposito) + listaPrenominaDetalle.Sum(x => x.pensionAlimenticia);
                    fondoAhorro = (listaPrenominaDetalle.Sum(x => x.fondoAhorroNomina) + listaPrenominaDetalle.Sum(x => x.fondoAhorroComplemento)) * 2;
                    depositoOneCard = listaPrenominaDetalle.Sum(x => x.valesDespensa);
                    var comisionOCSI = (depositoOneCard * (decimal)0.01) * (decimal)(1.16);
                    depositoOneCard = depositoOneCard + comisionOCSI;

                    if (tipoNomina == 10)
                    {
                        data.periodo = string.Format("AGUINALDO {0} {1}", periodoSIGOPLAN.anio, (periodoSIGOPLAN.periodo == 1 ? "SEMANAL" : "QUINCENAL"));
                    }
                    else
                    {
                        data.periodo = string.Format("{0} #{1:00} DEL {2:00} AL {3:00} {4} {5}",
                            EnumExtensions.GetDescription((tipoNominaPropuestaEnum)periodoSIGOPLAN.tipo_nomina),
                            periodoSIGOPLAN.periodo,
                            periodoSIGOPLAN.fecha_inicial.Day,
                            periodoSIGOPLAN.fecha_final.Day,
                            periodoSIGOPLAN.fecha_final.ToString("MMMM").ToUpper(),
                            periodoSIGOPLAN.fecha_final.Year
                        );
                    }

                    data.tabla = new List<CedulaCostosDTO>();

                    foreach (var pre in listaPrenomina)
                    {
                        var prenominaDetalle = listaPrenominaDetalle.Where(x => x.prenominaID == pre.id).ToList();
                        bool banderaSindicato = false;
                        //if (pre.CC == "174")
                        //{
                        //    totalNomina += prenominaDetalle.Sum(y => y.sindicato);
                        //    banderaSindicato = true;
                        //}

                        CedulaCostosDTO auxTabla = new CedulaCostosDTO();
                        if (tipoNomina == 10)
                        {
                            auxTabla.id = pre.id;
                            auxTabla.cc = pre.CC;
                            auxTabla.ccDescripcion = listaCCNomina.Where(x => x.cc == pre.CC).Select(y => y.ccDescripcion).FirstOrDefault();
                            auxTabla.sumaNomina = prenominaDetalle.Sum(x => x.nominaBase);
                            auxTabla.valesDespensa = prenominaDetalle.Sum(x => x.primaVacacional);
                            auxTabla.pensionAlimenticia = prenominaDetalle.Sum(x => x.pensionAlimenticia);
                            auxTabla.sumasNomina = prenominaDetalle.Sum(x => x.totalPagar);
                        }

                        else
                        {
                            auxTabla.id = pre.id;
                            auxTabla.cc = pre.CC;
                            auxTabla.ccDescripcion = listaCCNomina.Where(x => x.cc == pre.CC).Select(y => y.ccDescripcion).FirstOrDefault();
                            auxTabla.sumaNomina = prenominaDetalle.Sum(x => x.totalRealPagar);
                            auxTabla.valesDespensa = prenominaDetalle.Sum(x => x.valesDespensa);
                            auxTabla.depositoBancario = prenominaDetalle.Sum(x => x.totalDeposito);
                            auxTabla.descuentos = prenominaDetalle.Sum(x => x.descuento);
                            auxTabla.prestamos = prenominaDetalle.Sum(x => x.prestamo);
                            auxTabla.famsa = prenominaDetalle.Sum(x => x.descuentoFamsa);
                            auxTabla.fonacot = prenominaDetalle.Sum(x => x.fonacot);
                            auxTabla.sindicato = prenominaDetalle.Sum(x => x.sindicato);
                            auxTabla.pensionAlimenticia = prenominaDetalle.Sum(x => x.pensionAlimenticia);
                            auxTabla.fondoAhorroEmpleado = prenominaDetalle.Sum(x => x.fondoAhorroComplemento + x.fondoAhorroNomina);
                            auxTabla.fondoAhorroEmpresa = prenominaDetalle.Sum(x => x.fondoAhorroComplemento + x.fondoAhorroNomina);
                            auxTabla.infonavit = prenominaDetalle.Sum(x => x.infonavit);
                            auxTabla.sumasNomina = prenominaDetalle.Sum(x => x.totalPagar + x.descuento + x.prestamo + x.descuentoFamsa + x.fonacot + x.sindicato + x.pensionAlimenticia + x.fondoAhorroComplemento + x.fondoAhorroNomina + x.fondoAhorroComplemento + x.fondoAhorroNomina + x.infonavit + x.axa);
                            auxTabla.axa = prenominaDetalle.Sum(x => x.axa);
                            auxTabla.apoyoColectivo = prenominaDetalle.Sum(x => x.apoyoColectivo);
                        }

                        data.tabla.Add(auxTabla);
                        data.tabla.ForEach(x => x.ccDescripcion = x.ccDescripcion.ToUpper());
                    }
                }
                else
                {
                    throw new Exception("No se encuentra la información del periodo.");
                }
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, "NominaController", "GetCedulaCostos", e, AccionEnum.CONSULTA, 0, new { year = year, periodo = periodo, tipoNomina = tipoNomina });
            }

            data.totalSumaNomina = data.tabla.Sum(x => x.sumaNomina);
            data.totalValesDespensa = data.tabla.Sum(x => x.valesDespensa);
            data.totalDepositoBancario = data.tabla.Sum(x => x.depositoBancario);
            data.totalDescuentos = data.tabla.Sum(x => x.descuentos);
            data.totalPrestamos = data.tabla.Sum(x => x.prestamos);
            data.totalFamsa = data.tabla.Sum(x => x.famsa);
            data.totalFonacot = data.tabla.Sum(x => x.fonacot);
            data.totalSindicato = data.tabla.Sum(x => x.sindicato);
            data.totalPensionAlimenticia = data.tabla.Sum(x => x.pensionAlimenticia);
            data.totalFondoAhorroEmpleado = data.tabla.Sum(x => x.fondoAhorroEmpleado);
            data.totalFondoAhorroEmpresa = data.tabla.Sum(x => x.fondoAhorroEmpresa);
            data.totalInfonavit = data.tabla.Sum(x => x.infonavit);
            data.totalSumasNomina = data.tabla.Sum(x => x.sumasNomina);
            data.totalAxa = data.tabla.Sum(x => x.axa);
            data.totalApoyoColectivo = data.tabla.Sum(x => x.apoyoColectivo);

            data.comisionOCSI = (data.tabla.Sum(x => x.valesDespensa)) * 0.01M;
            data.ivaComisionOCSI = data.comisionOCSI * 0.16M;
            data.totalComisionOCSI = data.comisionOCSI * 1.16M;
            data.totalOCSI = (data.comisionOCSI * 1.16M) + (data.tabla.Sum(x => x.valesDespensa));


            data.tabla = data.tabla.OrderBy(x => x.cc).ToList();
            return data;
        }

        public polizaOcsiReporteDTO GetPolizaOCSI(int year, int periodo, int tipoNomina, int banco)
        {
            var data = new polizaOcsiReporteDTO();
            try
            {
                var periodoSIGOPLAN = _context.tblRH_BN_EstatusPeriodos.FirstOrDefault(x => x.estatus && x.anio == year && x.tipo_nomina == tipoNomina && x.periodo == periodo);
                if (periodoSIGOPLAN != null)
                {
                    var listaPrenomina = _context.tblC_Nom_Prenomina.Where(x => x.validada && x.estatus == 1 && x.periodo == periodo && x.year == year && x.tipoNomina == tipoNomina).ToList();
                    var listaPrenominaDetAux = new List<tblC_Nom_PreNomina_Det>();
                    var empresaActual = vSesiones.sesionEmpresaActual;
                    var centrosCostoAplica = _context.tblC_Nom_CatSolicitudCheque.Where(x => x.tipoSolicitudCheque == banco && x.tipoNomina == tipoNomina).Select(x => x.cc).ToList();
                    var bancoStr = _context.tblC_Nom_CatSolicitudCheque.Where(x => x.tipoSolicitudCheque == banco && x.registroActivo).FirstOrDefault();

                    switch (empresaActual)
                    {
                        case 1:
                            data.nombreEmpresa = "SOLUCIONES INDUSTRIALES SA DE CV";
                            data.tipoBanco = "";
                            break;
                        case 8:
                            data.nombreEmpresa = "SOLUCIONES INDUSTRIALES SA DE CV";
                            data.tipoBanco = "";
                            break;
                    }

                    var listaPrenomina_id = listaPrenomina.Select(x => x.id).ToList();
                    var listaPrenominaDetalle = _context.tblC_Nom_PreNomina_Det.Where(x => x.estatus && listaPrenomina_id.Contains(x.prenominaID)).ToList();
                    if (listaPrenominaDetAux.Count() > 0) listaPrenominaDetalle.AddRange(listaPrenominaDetAux);
                    List<tblC_Nom_CatalogoCC> listaCCNomina = _context.tblC_Nom_CatalogoCC.ToList();

                    data.periodo = string.Format("{0} #{1:00} DEL {2:00} AL {3:00} {4} {5}",
                        EnumExtensions.GetDescription((tipoNominaPropuestaEnum)periodoSIGOPLAN.tipo_nomina),
                        periodoSIGOPLAN.periodo,
                        periodoSIGOPLAN.fecha_inicial.Day,
                        periodoSIGOPLAN.fecha_final.Day,
                        periodoSIGOPLAN.fecha_final.ToString("MMMM").ToUpper(),
                        periodoSIGOPLAN.fecha_final.Year
                    );

                    data.tabla = new List<polizaOcsiDTO>();
                    polizaOcsiDTO auxTabla = new polizaOcsiDTO();
                    auxTabla.cargo = listaPrenominaDetalle.Sum(x => x.valesDespensa);
                    auxTabla.abono = 0;
                    auxTabla.cta = 2110;
                    auxTabla.scta = 1;
                    auxTabla.sscta = empresaActual == 2 ? 2793 : empresaActual == 8 ? 2720 : 2720;
                    auxTabla.cc = "";
                    auxTabla.areaCuenta = "";
                    auxTabla.ccDescripcion = EnumExtensions.GetDescription((tipoNominaPropuestaEnum)periodoSIGOPLAN.tipo_nomina) + " #" + periodoSIGOPLAN.periodo;
                    auxTabla.observaciones = "REGISTRO LO HACE TESORERÍA";
                    auxTabla.concepto = "COSTO DE LA NÓMINA";
                    data.tabla.Add(auxTabla);


                    foreach (var pre in listaPrenomina)
                    {
                        var prenominaDetalle = listaPrenominaDetalle.Where(x => x.prenominaID == pre.id).ToList();
                        var centro_costo = listaCCNomina.Where(x => x.cc == pre.CC).FirstOrDefault();

                        auxTabla = new polizaOcsiDTO();
                        auxTabla.cc = pre.CC;
                        auxTabla.areaCuenta = (centro_costo != null && empresaActual == 2) ? (centro_costo.area.ToString() + "-" + centro_costo.cuenta.ToString()) : "";
                        auxTabla.ccDescripcion = centro_costo != null ? centro_costo.ccDescripcion : "";
                        auxTabla.cargo = (prenominaDetalle.Sum(x => x.valesDespensa * 0.01M)) * 1.16M;
                        auxTabla.abono = 0;
                        auxTabla.cta = (centro_costo != null && centro_costo.clasificacionCcId == 1) ? 5280 : 5000;
                        auxTabla.scta = 7;
                        auxTabla.sscta = 0;
                        auxTabla.observaciones = "";
                        auxTabla.concepto = EnumExtensions.GetDescription((tipoNominaPropuestaEnum)periodoSIGOPLAN.tipo_nomina) + " #" + periodoSIGOPLAN.periodo;

                        data.tabla.Add(auxTabla);
                        data.tabla.ForEach(x => x.ccDescripcion = x.ccDescripcion.ToUpper());
                    }

                    foreach (var pre in listaPrenomina)
                    {
                        var prenominaDetalle = listaPrenominaDetalle.Where(x => x.prenominaID == pre.id).ToList();
                        var centro_costo = listaCCNomina.Where(x => x.cc == pre.CC).FirstOrDefault();

                        auxTabla = new polizaOcsiDTO();
                        auxTabla.cc = pre.CC;
                        auxTabla.ccDescripcion = listaCCNomina.Where(x => x.cc == pre.CC).Select(y => y.ccDescripcion).FirstOrDefault();
                        auxTabla.areaCuenta = (centro_costo != null && empresaActual == 2) ? (centro_costo.area.ToString() + "-" + centro_costo.cuenta.ToString()) : "";
                        auxTabla.abono = ((prenominaDetalle.Sum(x => x.valesDespensa * 0.01M)) * 1.16M) + prenominaDetalle.Sum(x => x.valesDespensa);
                        auxTabla.cargo = 0;
                        auxTabla.cta = 1110;
                        auxTabla.scta = 6;
                        auxTabla.sscta = empresaActual == (int)EmpresaEnum.Arrendadora ? 7 : (empresaActual == (int)EmpresaEnum.GCPLAN ? 2 : 5);
                        auxTabla.observaciones = "REGISTRO LO HACE TESORERÍA";
                        auxTabla.concepto = EnumExtensions.GetDescription((tipoNominaPropuestaEnum)periodoSIGOPLAN.tipo_nomina) + " #" + periodoSIGOPLAN.periodo;

                        data.tabla.Add(auxTabla);
                        data.tabla.ForEach(x => x.ccDescripcion = x.ccDescripcion.ToUpper());
                    }

                    auxTabla = new polizaOcsiDTO();
                    auxTabla.cc = "";
                    auxTabla.cargo = (listaPrenominaDetalle.Sum(x => x.valesDespensa * 0.01M)) * 1.16M;
                    auxTabla.abono = 0;
                    auxTabla.cta = 6000;
                    auxTabla.scta = 2;
                    auxTabla.sscta = empresaActual == 2 ? 713 : 744;
                    auxTabla.ccDescripcion = EnumExtensions.GetDescription((tipoNominaPropuestaEnum)periodoSIGOPLAN.tipo_nomina) + " #" + periodoSIGOPLAN.periodo;
                    auxTabla.observaciones = "REGISTRO LO HACE TESORERÍA";
                    auxTabla.concepto = "OCSI SOLUCIONES";
                    data.tabla.Add(auxTabla);

                    auxTabla = new polizaOcsiDTO();
                    auxTabla.cc = "";
                    auxTabla.abono = (listaPrenominaDetalle.Sum(x => x.valesDespensa * 0.01M)) * 1.16M;
                    auxTabla.cargo = 0;
                    auxTabla.cta = 7000;
                    auxTabla.scta = 2;
                    auxTabla.sscta = empresaActual == 2 ? 713 : 744;
                    auxTabla.ccDescripcion = EnumExtensions.GetDescription((tipoNominaPropuestaEnum)periodoSIGOPLAN.tipo_nomina) + " #" + periodoSIGOPLAN.periodo;
                    auxTabla.observaciones = "REGISTRO LO HACE TESORERÍA";
                    auxTabla.concepto = "OCSI SOLUCIONES";
                    data.tabla.Add(auxTabla);

                    data.tabla.ForEach(x => x.ccDescripcion = x.ccDescripcion.ToUpper());
                }
                else
                {
                    throw new Exception("No se encuentra la información del periodo.");
                }
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, "NominaController", "GetSolicitudChequeReporte", e, AccionEnum.CONSULTA, 0, new { year = year, periodo = periodo, tipoNomina = tipoNomina });
            }
            data.totalCargos = data.tabla.Sum(x => x.cargo);
            data.totalAbonos = data.tabla.Sum(x => x.abono);
            return data;
        }

        #region Layout Incidencias
        public Dictionary<string, object> CargarLayoutIncidencias(int anio, int periodo, int tipo_nomina, string estatus)
        {
            var resultado = new Dictionary<string, object>();

            try
            {
                var listaIncidencias = _context.tblRH_BN_Incidencia.Where(x => x.estatus == estatus && x.anio == anio && x.periodo == periodo && x.tipo_nomina == tipo_nomina).ToList();
                List<int> listaIncidencias_id = listaIncidencias.Select(x => x.id).ToList();
                var listaIncidenciasDet = _context.tblRH_BN_Incidencia_det.Where(x => listaIncidencias_id.Contains(x.incidenciaID) && x.estatus).GroupBy(x => x.clave_empleado).ToList();
                var listaCentroCosto = _context.tblC_Nom_CatalogoCC.ToList();

                var data = listaIncidenciasDet.Select(x => new LayoutIncidenciasDTO
                {
                    id = x.OrderByDescending(y => y.incidenciaID).FirstOrDefault().id,
                    clave_empleado = x.Key,
                    nombre_empleado = x.OrderByDescending(y => y.incidenciaID).FirstOrDefault().nombre + " " + x.OrderByDescending(y => y.incidenciaID).FirstOrDefault().ape_paterno + " " + x.OrderByDescending(y => y.incidenciaID).FirstOrDefault().ape_materno,
                    cc = listaIncidencias.First(y => y.id == x.OrderByDescending(z => z.incidenciaID).FirstOrDefault().incidenciaID).cc,
                    ccDesc = listaCentroCosto.Where(y => y.cc == listaIncidencias.First(w => w.id == x.OrderByDescending(z => z.incidenciaID).FirstOrDefault().incidenciaID).cc).Select(z => z.cc + "-" + z.ccDescripcion).FirstOrDefault(),
                    total_Dias = x.OrderByDescending(y => y.incidenciaID).FirstOrDefault().total_Dias,
                    horas_extras = x.OrderByDescending(y => y.incidenciaID).FirstOrDefault().totalo_Horas,
                    bonoTotal = x.OrderByDescending(y => y.incidenciaID).FirstOrDefault().bono + x.OrderByDescending(y => y.incidenciaID).FirstOrDefault().bonoDM + x.OrderByDescending(y => y.incidenciaID).FirstOrDefault().bonoU,
                    id_incidencia = x.OrderByDescending(y => y.incidenciaID).FirstOrDefault().incidenciaID
                }).ToList();

                HttpContext.Current.Session["layoutIncidencias"] = data;
                HttpContext.Current.Session["layoutIncidenciasPadre"] = listaIncidencias;

                resultado.Add("data", data);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(11, 0, "NominaController", "CargarLayoutIncidencias", e, AccionEnum.CONSULTA, 0, new { anio = anio, periodo = periodo, tipo_nomina = tipo_nomina });
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }

            return resultado;
        }

        public Tuple<MemoryStream, string, List<tblRH_BN_Incidencia>> DescargarExcelLayoutIncidencias(int tipo = 0)
        {
            try
            {
                var listaLayoutIncidencias = HttpContext.Current.Session["layoutIncidencias"] as List<LayoutIncidenciasDTO>;
                var listaLayoutIncidenciasPadre = HttpContext.Current.Session["layoutIncidenciasPadre"] as List<tblRH_BN_Incidencia>;

                if (tipo == 1)
                {
                    listaLayoutIncidenciasPadre = listaLayoutIncidenciasPadre.Where(x => x.layoutEnviado != true).ToList();
                    var lstIncidenciasIDs = listaLayoutIncidenciasPadre.Select(x => x.id).ToList();
                    listaLayoutIncidencias = listaLayoutIncidencias.Where(x => lstIncidenciasIDs.Contains(x.id_incidencia)).ToList();
                }

                if (listaLayoutIncidencias == null)
                {
                    throw new Exception("Error al obtener la información del layout cargado.");
                }

                if (listaLayoutIncidencias.Count() == 0)
                {
                    throw new Exception("Todos los centros de costos han sido enviados para el periodo solicitado.");
                }

                using (ExcelPackage excel = new ExcelPackage())
                {
                    var hoja = excel.Workbook.Worksheets.Add("Hoja 1");

                    var cellData = new List<object[]>();

                    //List<string> auxCC = new List<string>{"186", "187"};
                    List<string> auxCC = new List<string> { "183", "189", "174", "C36" };

                    //listaLayoutIncidencias = listaLayoutIncidencias.Where(x => !auxCC.Contains(x.cc)).ToList();

                    foreach (var incidencia in listaLayoutIncidencias)
                    {
                        cellData.Add(new string[1] {
                            incidencia.cc + ";" + incidencia.clave_empleado + ";" + incidencia.nombre_empleado + ";" + incidencia.total_Dias + ";" + Decimal.ToInt32(incidencia.horas_extras) + ";" + incidencia.bonoTotal
                        });
                    }

                    hoja.Cells[1, 1].LoadFromArrays(cellData);

                    excel.Compression = OfficeOpenXml.CompressionLevel.BestSpeed;

                    List<byte[]> lista = new List<byte[]>();

                    var bytes = new MemoryStream();

                    using (var exportData = new MemoryStream())
                    {
                        excel.SaveAs(exportData);
                        bytes = exportData;
                    }

                    return Tuple.Create(bytes, "Layout Incidencias.xlsx", listaLayoutIncidenciasPadre);
                }
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, "NominaController", "DescargarExcelLayoutIncidencias", e, AccionEnum.DESCARGAR, 0, 0);
                return null;
            }
        }

        public Tuple<MemoryStream, string> DescargarExcelReporteIncidencias(int anio, int tipo_nomina, int periodo, bool autorizado)
        {
            try
            {
                var incidencia = _context.tblRH_BN_Incidencia.Where(x => x.anio == anio && x.tipo_nomina == tipo_nomina && x.periodo == periodo && x.estatus == (autorizado ? "A" : "P")).ToList();
                if (incidencia.Count() <= 0)
                {
                    throw new Exception("Error al obtener la información de incidencias.");
                }
                var incidenciaID = incidencia.Select(x => x.id).ToList();
                var incidenciadet = _context.tblRH_BN_Incidencia_det.Where(x => incidenciaID.Contains(x.incidenciaID)).ToList();
                if (incidenciadet.Count() <= 0)
                {
                    throw new Exception("No se encontró información correspondiente a las incidencias consultadas.");
                }
                using (ExcelPackage excel = new ExcelPackage())
                {
                    var hoja = excel.Workbook.Worksheets.Add((tipo_nomina == 1 ? "SEMANA #" : "QUINCENA #") + periodo.ToString() + " " + anio.ToString());
                    List<string[]> headerRow = new List<string[]>() { 
                                new string[] { 
                                    "CC", 
                                    "TIPO" + Environment.NewLine + "NOMINA", 
                                    "PERIODO", 
                                    "CLAVE" + Environment.NewLine + "EMPLEADO", 
                                    "NOMBRE" + Environment.NewLine + "EMPLEADO",
                                    "PUESTO",
                                    "DEPARTAMENTO",
                                    "DIAS" + Environment.NewLine + "TRABAJADOS",
                                    "DIAS" + Environment.NewLine + "VACACIONES",
                                    "DIAS" + Environment.NewLine + "EXTRA",
                                    "HORAS" + Environment.NewLine + "EXTRA",
                                    "TOTAL" + Environment.NewLine + "DIAS",
                                    "BONO" + Environment.NewLine + "INCIDENCIA",
                                    "BONO" + Environment.NewLine + "PRODUCCION",
                                    "BONO" + Environment.NewLine + "TOTAL",
                                    "BONO" + Environment.NewLine + "OBSERVACION",
                                    "OBSERVACIONES"
                                } 
                            };

                    hoja.Cells[5, 1, 5, 17].LoadFromArrays(headerRow);

                    var cellData = new List<object[]>();

                    incidenciadet = incidenciadet.OrderBy(x => x.incidenciaID).ThenBy(x => x.ape_paterno).ThenBy(x => x.ape_materno).ThenBy(x => x.nombre).ToList();

                    foreach (var _incidenciadet in incidenciadet)
                    {
                        var _incidencia = incidencia.FirstOrDefault(x => x.id == _incidenciadet.incidenciaID);
                        cellData.Add(new object[] {
                            _incidencia.cc,
                            _incidencia.tipo_nomina == 1 ? "SEMANAL" : "QUINCENAL",
                            _incidencia.anio.ToString() + " - " + _incidencia.periodo.ToString(),
                            _incidenciadet.clave_empleado.ToString(),
                            _incidenciadet.ape_paterno + " " + _incidenciadet.ape_materno + " " + _incidenciadet.nombre,
                            "[" + _incidenciadet.puesto.ToString() + "] " + _incidenciadet.puestoDesc,
                            "[" + _incidenciadet.clave_depto.ToString() + "] " + _incidenciadet.deptoDesc,
                            (_incidenciadet.total_Dias - _incidenciadet.dias_extras - _incidenciadet.dias_extra_concepto - (
	                            ( _incidenciadet.dia1 == 5 ? 1 : 0 ) + ( _incidenciadet.dia5 == 5 ? 1 : 0 ) + ( _incidenciadet.dia9 == 5 ? 1 : 0 ) + ( _incidenciadet.dia13 == 5 ? 1 : 0 ) + 
	                            ( _incidenciadet.dia2 == 5 ? 1 : 0 ) + ( _incidenciadet.dia6 == 5 ? 1 : 0 ) + ( _incidenciadet.dia10 == 5 ? 1 : 0 ) + ( _incidenciadet.dia14 == 5 ? 1 : 0 ) + 
	                            ( _incidenciadet.dia3 == 5 ? 1 : 0 ) + ( _incidenciadet.dia7 == 5 ? 1 : 0 ) + ( _incidenciadet.dia11 == 5 ? 1 : 0 ) + ( _incidenciadet.dia15 == 5 ? 1 : 0 ) + 
	                            ( _incidenciadet.dia4 == 5 ? 1 : 0 ) + ( _incidenciadet.dia8 == 5 ? 1 : 0 ) + ( _incidenciadet.dia12 == 5 ? 1 : 0 ) + ( _incidenciadet.dia16 == 5 ? 1 : 0 )
	                            )).ToString(),
                            
	                        (( _incidenciadet.dia1 == 5 ? 1 : 0 ) + ( _incidenciadet.dia5 == 5 ? 1 : 0 ) + ( _incidenciadet.dia9 == 5 ? 1 : 0 ) + ( _incidenciadet.dia13 == 5 ? 1 : 0 ) + 
	                            ( _incidenciadet.dia2 == 5 ? 1 : 0 ) + ( _incidenciadet.dia6 == 5 ? 1 : 0 ) + ( _incidenciadet.dia10 == 5 ? 1 : 0 ) + ( _incidenciadet.dia14 == 5 ? 1 : 0 ) + 
	                            ( _incidenciadet.dia3 == 5 ? 1 : 0 ) + ( _incidenciadet.dia7 == 5 ? 1 : 0 ) + ( _incidenciadet.dia11 == 5 ? 1 : 0 ) + ( _incidenciadet.dia15 == 5 ? 1 : 0 ) + 
	                            ( _incidenciadet.dia4 == 5 ? 1 : 0 ) + ( _incidenciadet.dia8 == 5 ? 1 : 0 ) + ( _incidenciadet.dia12 == 5 ? 1 : 0 ) + ( _incidenciadet.dia16 == 5 ? 1 : 0 )
	                            ).ToString(),
                            (_incidenciadet.dias_extras + _incidenciadet.dias_extra_concepto).ToString(),
                            _incidenciadet.totalo_Horas.ToString(),
                            _incidenciadet.total_Dias,
                            _incidenciadet.bono,
                            _incidenciadet.bonoDM,
                            _incidenciadet.bono + _incidenciadet.bonoDM + _incidenciadet.bonoU,
                            _incidenciadet.bono_Obs,
                            _incidenciadet.observaciones

                        });
                    }

                    hoja.Cells[6, 1].LoadFromArrays(cellData);

                    hoja.Cells[5, 1, 5, 17].Style.WrapText = true;
                    hoja.Cells[5, 1, 6 + incidenciadet.Count(), 17].Style.Font.Bold = true;
                    hoja.Cells[5, 1, 6 + incidenciadet.Count(), 17].Style.Font.Size = 10;
                    hoja.Cells[5, 1, 6 + incidenciadet.Count(), 17].Style.Font.Name = "Arial";
                    //hoja.Cells[5, 1, 6 + incidenciadet.Count(), 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    hoja.Cells[5, 1, 6 + incidenciadet.Count(), 17].AutoFitColumns();
                    hoja.View.FreezePanes(6, 6);


                    excel.Compression = OfficeOpenXml.CompressionLevel.BestSpeed;

                    List<byte[]> lista = new List<byte[]>();

                    var bytes = new MemoryStream();

                    using (var exportData = new MemoryStream())
                    {
                        excel.SaveAs(exportData);
                        bytes = exportData;
                    }

                    return Tuple.Create(bytes, "Layout Incidencias.xlsx");
                }
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, "NominaController", "DescargarExcelLayoutIncidencias", e, AccionEnum.DESCARGAR, 0, 0);
                return null;
            }
        }

        public bool ActualizarIncidencias(List<tblRH_BN_Incidencia> incidencias)
        {
            bool exito = false;
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    foreach (var item in incidencias)
                    {
                        var auxIncidencia = _context.tblRH_BN_Incidencia.FirstOrDefault(x => x.id == item.id);
                        if (auxIncidencia != null) auxIncidencia.layoutEnviado = true;
                    }
                    _context.SaveChanges();
                    dbContextTransaction.Commit();
                    exito = true;
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, "NominaController", "ActualizarIncidencias", e, AccionEnum.ACTUALIZAR, 0, new { prenominaID = incidencias.FirstOrDefault().id });
                    exito = false;
                }
            }
            return exito;
        }

        #endregion

        public List<EmpleadoPendienteLiberacionDTO> getEmpleadosPendientesLiberacion()
        {
            var listEmpleados = _context.Select<EmpleadoPendienteLiberacionDTO>(new DapperDTO
            {
                baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                consulta = @"
                    SELECT
	                    a.id as idBaja,
	                    a.numeroEmpleado as clave_empleado,
	                    (emp.nombre + ' ' + emp.ape_paterno + ' ' + emp.ape_materno) AS nombreEmpleado,
	                    emp.rfc,
	                    a.cc AS cc,
	                    a.descripcionCC AS ccDesc,
	                    p.puesto,
	                    p.descripcion AS puestoDesc,
	                    a.fechaBaja
                    FROM tblRH_Baja_Registro a
	                    INNER JOIN
		                    (
			                    SELECT
				                    baj.numeroEmpleado, MAX(baj.fechaBaja) AS fechaBaja
			                    FROM tblRH_Baja_Registro baj
			                    WHERE (baj.est_compras = 'A' AND baj.est_inventario = 'A' AND baj.est_contabilidad = 'P' AND registroActivo = 1 AND baj.est_baja = 'A') 
									OR (registroActivo = 1 AND baj.esAnticipada = 1 AND baj.est_contabilidad = 'P' AND baj.est_compras = 'A' AND baj.est_inventario = 'A')
			                    GROUP BY baj.numeroEmpleado
		                    ) b ON a.numeroEmpleado = b.numeroEmpleado AND a.fechaBaja = b.fechaBaja AND a.registroActivo = 1
	                    INNER JOIN tblRH_EK_Empleados emp ON a.numeroEmpleado = emp.clave_empleado
	                    --INNER JOIN tblP_CC c ON emp.cc_contable = c.cc
	                    LEFT JOIN tblRH_EK_Puestos p ON emp.puesto = p.puesto
                    ORDER BY a.numeroEmpleado DESC",
            });

            var queryAnterior = @"
                            SELECT 
                                baj.id as idBaja,  
                                baj.numeroEmpleado as clave_empleado, 
                                (emp.nombre + ' ' + emp.ape_paterno + ' ' + emp.ape_materno) AS nombreEmpleado, 
                                emp.rfc, 
                                emp.cc_contable AS cc, 
                                c.descripcion AS ccDesc, 
                                p.descripcion AS puestoDesc 
                            FROM tblRH_Baja_Registro baj 
                                INNER JOIN tblRH_EK_Empleados emp ON baj.numeroEmpleado = emp.clave_empleado 
                                INNER JOIN tblP_CC c ON emp.cc_contable = c.cc 
                                LEFT JOIN tblRH_EK_Puestos p ON emp.puesto = p.puesto 
                            WHERE baj.est_baja = 'A' AND baj.est_contabilidad = 'P' AND registroActivo = 1  
                            ORDER BY baj.numeroEmpleado DESC";

            return listEmpleados ?? new List<EmpleadoPendienteLiberacionDTO>();
        }

        private MainContextEnum getContextEmpresa()
        {
            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
            {
                return MainContextEnum.Construplan;
            }
            else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
            {
                return MainContextEnum.Arrendadora;
            }
            else
            {
                throw new Exception("Empresa distinta a Construplan y Arrendadora.");
            }
        }

        public void guardarBajas(List<EmpleadoPendienteLiberacionDTO> empleados)
        {
            using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    string personasLiberadasString = "";
                    List<string> lstCC = new List<string>();

                    foreach (var emp in empleados)
                    {
                        var objBaja = _context.tblRH_Baja_Registro.FirstOrDefault(e => e.registroActivo && e.id == emp.idBaja);

                        if (objBaja != null)
                        {
                            lstCC.Add(objBaja.cc);

                            objBaja.est_contabilidad = "A";
                            objBaja.est_contabilidad_usuario = (vSesiones.sesionUsuarioDTO.cveEmpleado != "" && vSesiones.sesionUsuarioDTO.cveEmpleado != null) ? Int32.Parse(vSesiones.sesionUsuarioDTO.cveEmpleado) : 0;
                            objBaja.est_contabilidad_fecha = DateTime.Now;
                            objBaja.est_contabilidad_comentario = emp.comentario ?? "";
                            objBaja.est_contabilidad_firma = GlobalUtils.CrearFirmaDigital(objBaja.id, DocumentosEnum.LiberacionContabilidad, vSesiones.sesionUsuarioDTO.id);

                            //SET esPendienteNoti
                            //objBaja.esPendienteNoti = true;

                            _context.SaveChanges();

                            string bodyAnticipada = "";

                            if (objBaja.fechaBaja.Value.Date > DateTime.Now.Date)
                            {
                                bodyAnticipada += (" - ( *BAJA ANTICIPADA*.) Baja se aplica el: " + objBaja.fechaBaja.Value.ToString("dd/MM/yyyy"));
                            }

                            if (objBaja.est_compras == "A" && objBaja.est_inventario == "A" && objBaja.est_contabilidad == "A")
                            {
                                personasLiberadasString += objBaja.numeroEmpleado + " " + objBaja.nombre + " - " + objBaja.cc + " " + objBaja.descripcionCC + " - " + objBaja.est_contabilidad_comentario + bodyAnticipada + "<br/>";
                            }

                        }

                    }
                    dbSigoplanTransaction.Commit();

                    #region Enviar Correo a Despacho si se encuentra liberada por las 4 areas
                    if (personasLiberadasString != "")
                    {
                        string asunto = "BAJAS LIBERADAS AL " + DateTime.Now.ToShortDateString() + " PARA GESTION DE CHEQUE FINIQUITO";
                        string mensaje = "Las siguientes personas han sido liberadas por las 3 áreas para gestión de cheque finiquito:<br/><br/>";
                        string cuerpoCorreo = mensaje + personasLiberadasString;
                        //List<string> correo = new List<string> { "despacho@construplan.com.mx" };

                        List<string> correos = new List<string>();

                        List<int> lstNotificantes = _context.tblRH_Notis_RelConceptoUsuario.
                            Where(e => lstCC.Contains(e.cc) && (e.idConcepto == (int)ConceptosNotificantesEnum.Contabilidad || e.idConcepto == (int)ConceptosNotificantesEnum.ResponsableCC)).
                            Select(e => e.idUsuario).ToList();

                        foreach (var usu in lstNotificantes)
                        {
                            correos.Add(_context.tblP_Usuario.FirstOrDefault(x => x.id == usu).correo);
                        }

                        List<string> lstCorreoGenerales = _context.tblRH_Notis_RelConceptoCorreo.
                            Where(e => (e.cc == "*" || lstCC.Contains(e.cc)) && (e.idConcepto == (int)ConceptosNotificantesEnum.Contabilidad || e.idConcepto == (int)ConceptosNotificantesEnum.ResponsableCC)).
                            Select(e => e.correo).ToList();

                        foreach (var correo in lstCorreoGenerales)
                        {
                            correos.Add(correo);
                        }

                        if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan
                            || vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora
                            || vSesiones.sesionEmpresaActual == (int)EmpresaEnum.GCPLAN)
                        {
                            correos.AddRange(new List<string> 
                            { 
                                "despacho@construplan.com.mx",
                            });
                        }

                        correos.Add("l.rodriguez@construplan.com.mx");

#if DEBUG
                        correos = new List<string> { "miguel.buzani@construplan.com.mx" };
                        //correos.Add("omar.nunez@construplan.com.mx");
#endif
                        var correoEnviado = GlobalUtils.sendEmail(string.Format("{0}: {1}", PersonalUtilities.GetNombreEmpresa(), asunto), cuerpoCorreo, correos);

                        if (!correoEnviado)
                            LogError(_SISTEMA, 0, "NominaController", "guardarBajas_enviarCorreo", null, AccionEnum.ACTUALIZAR, 0, empleados);
                    }
                    #endregion
                }
                catch (Exception)
                {
                    dbSigoplanTransaction.Rollback();
                    throw;
                }

            }
        }

        #region Descuentos
        public Dictionary<string, object> GetDescuentos()
        {
            var resultado = new Dictionary<string, object>();

            try
            {
                var listaEmpleados = _context.tblRH_EK_Empleados.Where(x => x.esActivo).ToList();
                var anioActual = DateTime.Today.Year;

                var descuentos = _context.tblC_Nom_PreNomina_Descuento.Where(x => x.estatus && x.anio == anioActual).ToList().Select(x => new
                {
                    id = x.id,
                    empleadoCve = x.empleadoCve,
                    nombreEmpleado = listaEmpleados.Where(y => y.clave_empleado == x.empleadoCve).Select(z => z.nombre + " " + z.ape_paterno + " " + z.ape_materno).FirstOrDefault(),
                    tipoDescuento = x.tipoDescuento,
                    tipoDescuentoDesc = ((TipoDescuentoPrenominaEnum)x.tipoDescuento).GetDescription(),
                    anio = x.anio,
                    tipoNomina = x.tipoNomina,
                    tipoNominaDesc = ((tipoNominaPropuestaEnum)x.tipoNomina).GetDescription(),
                    periodoInicial = x.periodoInicial,
                    periodoFinal = x.periodoFinal,
                    monto = x.monto
                }).ToList();

                resultado.Add("data", descuentos);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, "NominaController", "GetDescuentos", null, AccionEnum.CONSULTA, 0, null);
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }

            return resultado;
        }

        public Dictionary<string, object> GuardarNuevoDescuento(tblC_Nom_PreNomina_Descuento descuento)
        {
            var resultado = new Dictionary<string, object>();

            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    #region Validaciones
                    var registroExistente = _context.tblC_Nom_PreNomina_Descuento.FirstOrDefault(x =>
                        x.estatus && x.empleadoCve == descuento.empleadoCve && x.tipoDescuento == descuento.tipoDescuento && x.anio == descuento.anio &&
                        ((descuento.periodoInicial >= x.periodoInicial && descuento.periodoFinal <= x.periodoFinal) || (descuento.periodoFinal >= x.periodoInicial && descuento.periodoFinal <= x.periodoFinal)
                        && x.tipoNomina == descuento.tipoNomina)
                    );

                    if (registroExistente != null)
                    {
                        throw new Exception("Ya existe un registro capturado para esa información.");
                    }
                    #endregion

                    descuento.estatus = true;

                    _context.tblC_Nom_PreNomina_Descuento.Add(descuento);
                    _context.SaveChanges();

                    dbContextTransaction.Commit();
                    SaveBitacora(0, (int)AccionEnum.AGREGAR, 0, JsonUtils.convertNetObjectToJson(descuento));
                    resultado.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, "NominaController", "GuardarNuevoDescuento", null, AccionEnum.AGREGAR, 0, descuento);
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                }
            }

            return resultado;
        }

        public Dictionary<string, object> EditarDescuento(tblC_Nom_PreNomina_Descuento descuento)
        {
            var resultado = new Dictionary<string, object>();

            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    #region Validaciones
                    var registroExistente = _context.tblC_Nom_PreNomina_Descuento.FirstOrDefault(x =>
                        x.id != descuento.id &&
                        x.estatus && x.empleadoCve == descuento.empleadoCve && x.tipoDescuento == descuento.tipoDescuento && x.anio == descuento.anio &&
                        ((descuento.periodoInicial >= x.periodoInicial && descuento.periodoFinal <= x.periodoFinal) || (descuento.periodoFinal >= x.periodoInicial && descuento.periodoFinal <= x.periodoFinal))
                    );

                    if (registroExistente != null)
                    {
                        throw new Exception("Ya existe un registro capturado para esa información.");
                    }
                    #endregion

                    var descuentoSIGOPLAN = _context.tblC_Nom_PreNomina_Descuento.FirstOrDefault(x => x.id == descuento.id);

                    descuentoSIGOPLAN.empleadoCve = descuento.empleadoCve;
                    descuentoSIGOPLAN.tipoDescuento = descuento.tipoDescuento;
                    descuentoSIGOPLAN.anio = descuento.anio;
                    descuentoSIGOPLAN.tipoNomina = descuento.tipoNomina;
                    descuentoSIGOPLAN.periodoInicial = descuento.periodoInicial;
                    descuentoSIGOPLAN.periodoFinal = descuento.periodoFinal;
                    descuentoSIGOPLAN.monto = descuento.monto;
                    _context.SaveChanges();

                    dbContextTransaction.Commit();
                    SaveBitacora(0, (int)AccionEnum.ACTUALIZAR, 0, JsonUtils.convertNetObjectToJson(descuento));
                    resultado.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, "NominaController", "EditarDescuento", null, AccionEnum.ACTUALIZAR, 0, descuento);
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                }
            }

            return resultado;
        }

        public Dictionary<string, object> EliminarDescuento(tblC_Nom_PreNomina_Descuento descuento)
        {
            var resultado = new Dictionary<string, object>();

            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    var descuentoSIGOPLAN = _context.tblC_Nom_PreNomina_Descuento.FirstOrDefault(x => x.id == descuento.id);

                    descuentoSIGOPLAN.estatus = false;
                    _context.SaveChanges();

                    dbContextTransaction.Commit();
                    SaveBitacora(0, (int)AccionEnum.ELIMINAR, 0, JsonUtils.convertNetObjectToJson(descuento));
                    resultado.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, "NominaController", "EliminarDescuento", null, AccionEnum.ELIMINAR, 0, descuento);
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                }
            }

            return resultado;
        }

        public Dictionary<string, object> CargarExcelDescuentos(HttpFileCollectionBase archivos)
        {
            var result = new Dictionary<string, object>();

            using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    if (archivos.Count == 0)
                    {
                        throw new Exception("No se cargaron archivos.");
                    }

                    for (int i = 0; i < archivos.Count; i++)
                    {
                        HttpPostedFileBase archivo = archivos[i];

                        List<List<string>> tabla = new List<List<string>>();

                        #region Convertir Archivo a Arreglo de bytes.
                        byte[] data;

                        using (Stream inputStream = archivo.InputStream)
                        {
                            MemoryStream memoryStream = inputStream as MemoryStream;

                            if (memoryStream == null)
                            {
                                memoryStream = new MemoryStream();
                                inputStream.CopyTo(memoryStream);
                            }

                            data = memoryStream.ToArray();
                        }
                        #endregion

                        #region Leer Arreglo de bytes.
                        using (MemoryStream stream = new MemoryStream(data))
                        using (ExcelPackage excelPackage = new ExcelPackage(stream))
                        {
                            //loop all worksheets
                            foreach (ExcelWorksheet worksheet in excelPackage.Workbook.Worksheets)
                            {
                                //loop all rows
                                for (int x = worksheet.Dimension.Start.Row; x <= worksheet.Dimension.End.Row; x++)
                                {
                                    List<string> fila = new List<string>();

                                    //loop all columns in a row
                                    for (int y = worksheet.Dimension.Start.Column; y <= worksheet.Dimension.End.Column; y++)
                                    {
                                        //add the cell data to the List
                                        if (worksheet.Cells[x, y].Value != null)
                                        {
                                            fila.Add(worksheet.Cells[x, y].Value.ToString());
                                        }
                                        else
                                        {
                                            fila.Add("");
                                        }
                                    }

                                    if (x > 1 && fila[0] != "")
                                    {
                                        tabla.Add(fila);
                                    }
                                }
                            }
                        }
                        #endregion

                        foreach (var fila in tabla)
                        {
                            var clave_empleado = Int32.Parse(fila[0]);
                            var tipoDescuento = fila[1].ToUpper().Trim();

                            #region Validar que el texto del tipo de descuento sea correcto
                            TipoDescuentoPrenominaEnum tipoDescuentoEnum;
                            try
                            {
                                tipoDescuentoEnum = Enum.GetValues(typeof(TipoDescuentoPrenominaEnum)).Cast<TipoDescuentoPrenominaEnum>().FirstOrDefault(v => v.GetDescription() == tipoDescuento);
                            }
                            catch (Exception)
                            {
                                throw new Exception("No se encuentra la información del tipo de descuento \"" + tipoDescuento + "\".");
                            }
                            #endregion

                            var anio = Int32.Parse(fila[2]);
                            var tipoNomina = Int32.Parse(fila[3]);
                            var periodoInicial = Int32.Parse(fila[4]);
                            var periodoFinal = Int32.Parse(fila[5]);
                            var monto = Convert.ToDecimal(fila[6], CultureInfo.InvariantCulture);

                            var registroExistente = _context.tblC_Nom_PreNomina_Descuento.FirstOrDefault(x =>
                                x.estatus && x.empleadoCve == clave_empleado && x.tipoDescuento == (int)tipoDescuentoEnum && x.anio == anio &&
                                ((periodoInicial >= x.periodoInicial && periodoFinal <= x.periodoFinal) || (periodoFinal >= x.periodoInicial && periodoFinal <= x.periodoFinal))
                            );

                            if (registroExistente == null)
                            {
                                var nuevoRegistro = new tblC_Nom_PreNomina_Descuento();

                                nuevoRegistro.empleadoCve = clave_empleado;
                                nuevoRegistro.tipoDescuento = (int)tipoDescuentoEnum;
                                nuevoRegistro.anio = anio;
                                nuevoRegistro.tipoNomina = tipoNomina;
                                nuevoRegistro.periodoInicial = periodoInicial;
                                nuevoRegistro.periodoFinal = periodoFinal;
                                nuevoRegistro.monto = monto;
                                nuevoRegistro.estatus = true;

                                _context.tblC_Nom_PreNomina_Descuento.Add(nuevoRegistro);
                                _context.SaveChanges();
                            }
                            else
                            {
                                throw new Exception(string.Format(
                                    "Ya existe un registro para el empleado \"{0}\" con el tipo de descuento \"{1}\" en el año \"{2}\" entre el periodo \"{3}\" y \"{4}\".",
                                    clave_empleado, tipoDescuento, anio, periodoInicial, periodoFinal
                                ));
                            }
                        }
                    }

                    dbSigoplanTransaction.Commit();
                    result.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    dbSigoplanTransaction.Rollback();
                    LogError(_SISTEMA, 0, "NominaController", "CargarExcelDescuentos", null, AccionEnum.AGREGAR, 0, null);
                    result.Add(MESSAGE, e.Message);
                    result.Add(SUCCESS, false);
                }
            }

            return result;
        }

        public string GetCCNominas(string cc)
        {
            cc = Regex.Replace(cc, "[^a-zA-Z0-9_.]+", "", RegexOptions.Compiled);
            var registroCC = _context.tblC_Nom_CatalogoCC.FirstOrDefault(x => x.cc == cc);
            if (registroCC == null) return "";
            else return registroCC.ccDescripcion;
        }
        #endregion

        public Dictionary<string, object> GetEstatusPeriodo(int tipo_nomina, int anio)
        {
            Dictionary<string, object> resultado = new Dictionary<string, object>();
            try
            {
                List<tblRH_BN_EstatusPeriodos> lstPeriodos = _context.Select<tblRH_BN_EstatusPeriodos>(new DapperDTO
                {
                    //baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = @"SELECT * FROM tblRH_BN_EstatusPeriodos WHERE tipo_nomina = @tipo_nomina AND anio = @anio AND estatus = @estatus ORDER BY periodo",
                    parametros = new { tipo_nomina = tipo_nomina, anio = anio, estatus = true }
                }).ToList();

                resultado.Add("lstPeriodos", lstPeriodos);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, "NominaController", "GetEstatusPeriodo", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        #region SUA
        public Dictionary<string, object> CargarSUA(HttpPostedFileBase raya, int periodo, int tipoNomina, int year, int tipoDocumento)
        {
            var resultado = new Dictionary<string, object>();

            using (var transaccion = _context.Database.BeginTransaction())
            {
                using (var excel = new ExcelPackage(raya.InputStream))
                {
                    try
                    {
                        #region archivo
                        var folder = year.ToString() + @"\" + Infrastructure.Utils.EnumExtensions.GetDescription((TipoPeriodoEnum)tipoNomina);

                        var fechaArchivo = DateTime.Now.ToString("yyyy-MM-ddTHHmmssfff");
                        var ruta = archivoFS.getUrlDelServidor(1023) + folder + @"\";

                        var extension = System.IO.Path.GetExtension(raya.FileName);
                        var archivoNombreNuevo = (periodo < 10 ? "0" : "") + periodo.ToString() + "_" + fechaArchivo + extension;

#if DEBUG
                        var directorio = new DirectoryInfo(@"c:\NOMINA\" + folder + @"\");
#else
                                var directorio = new DirectoryInfo(ruta);
#endif
                        if (!directorio.Exists)
                        {
                            directorio.Create();
                        }

                        var pathCompleto = System.IO.Path.Combine(directorio.ToString(), archivoNombreNuevo);

                        raya.SaveAs(pathCompleto);
                        #endregion

                        var catalogoCC = _context.tblC_Nom_CatalogoCC.Where(w => w.estatus).ToList();

                        var fechaCaptura = DateTime.Now;

                        var hoja = excel.Workbook.Worksheets[1];


                        var sua = _context.tblC_Nom_SUA.FirstOrDefault(x => x.anio == year && x.periodo == periodo && x.tipoDocumento == tipoDocumento && x.tipoNomina == tipoNomina);

                        if (sua == null)
                        {
                            sua = new tblC_Nom_SUA();
                            sua.id = 0;
                            sua.anio = year;
                            sua.fechaModifica = DateTime.Now;
                            sua.fechaRegistro = DateTime.Now;
                            sua.fechaValida = DateTime.Now;
                            sua.periodo = periodo;
                            sua.polizaGuardada = false;
                            sua.registroActivo = true;
                            sua.tipoDocumento = tipoDocumento;
                            sua.tipoNomina = tipoNomina;
                            sua.usuarioModifica = vSesiones.sesionUsuarioDTO.id;
                            sua.usuarioRegistro = vSesiones.sesionUsuarioDTO.id;
                            sua.validado = false;
                            _context.tblC_Nom_SUA.Add(sua);
                            _context.SaveChanges();
                        }
                        else
                        {
                            if (sua.validado)
                            {
                                throw new Exception("Ya se cargó el documento " + ((ClasificacionDocumentosSUAEnum)tipoDocumento).GetDescription() + " para el periodo " + sua.periodo + " del año " + sua.periodo + " y se encuetra validada");
                            }

                        }
                        var listaSUA = new List<tblC_Nom_SUA_Det>();
                        var listaResumen = new List<tblC_Nom_SUA_Resumen>();
                        int renglonInicial = 1;

                        if ((ClasificacionDocumentosSUAEnum)tipoDocumento == ClasificacionDocumentosSUAEnum.imss)
                        {
                            renglonInicial = 1;
                            for (int i = 1; i <= hoja.Dimension.End.Row; i++)
                            {
                                if (!string.IsNullOrEmpty(hoja.Cells["A" + i].GetValue<string>()) && hoja.Cells["A" + i].GetValue<string>().ToUpper() != "")
                                {
                                    break;
                                }
                            }

                            for (int i = renglonInicial; i <= hoja.Dimension.End.Row; i++)
                            {
                                if (hoja.Cells["A" + i].Value != null && hoja.Cells["A" + i].Style.Font.Bold)
                                {
                                    var infoSUA = new tblC_Nom_SUA_Det();
                                    infoSUA.nss = hoja.Cells["A" + i].GetValue<string>();
                                    infoSUA.nombre = hoja.Cells["F" + i].GetValue<string>();
                                    infoSUA.rfc = hoja.Cells["G" + i].GetValue<string>();
                                    infoSUA.cc = hoja.Cells["H" + i].GetValue<string>();

                                    if (infoSUA.cc.Length != 3)
                                    {
                                        infoSUA.cc = infoSUA.cc.PadLeft(3, '0');
                                    }

                                    i += 2;
                                    infoSUA.dias = hoja.Cells["C" + i].GetValue<int>();
                                    infoSUA.salarioDiario = hoja.Cells["D" + i].GetValue<decimal>();
                                    infoSUA.lic = hoja.Cells["E" + i].GetValue<int>();
                                    infoSUA.incapacidades = hoja.Cells["F" + i].GetValue<int>();
                                    infoSUA.ausentismos = hoja.Cells["G" + i].GetValue<int>();
                                    infoSUA.cuotaFija = hoja.Cells["H" + i].GetValue<decimal>();
                                    infoSUA.excedentePatronal = hoja.Cells["I" + i].GetValue<decimal>();
                                    infoSUA.excedenteObrera = hoja.Cells["J" + i].GetValue<decimal>();
                                    infoSUA.prestacionesPatronal = hoja.Cells["K" + i].GetValue<decimal>();
                                    infoSUA.prestacionesObrera = hoja.Cells["L" + i].GetValue<decimal>();
                                    infoSUA.gastosMedicosPatronal = hoja.Cells["M" + i].GetValue<decimal>();
                                    infoSUA.gastosMedicosObrera = hoja.Cells["N" + i].GetValue<decimal>();
                                    infoSUA.riesgosTrabajo = hoja.Cells["O" + i].GetValue<decimal>();
                                    infoSUA.invalidezVidaPatronal = hoja.Cells["P" + i].GetValue<decimal>();
                                    infoSUA.invalidezVidaObrera = hoja.Cells["Q" + i].GetValue<decimal>();
                                    infoSUA.guarderiasPrestaciones = hoja.Cells["R" + i].GetValue<decimal>();
                                    infoSUA.patronal = hoja.Cells["S" + i].GetValue<decimal>();
                                    infoSUA.obrera = hoja.Cells["T" + i].GetValue<decimal>();
                                    infoSUA.subtotal = hoja.Cells["U" + i].GetValue<decimal>();

                                    i += 2;
                                    while (!hoja.Cells["A" + i].Style.Font.Bold && (hoja.Cells["A" + i].Value != null || hoja.Cells["B" + i].Value != null || hoja.Cells["C" + i].Value != null))
                                    {
                                        if (hoja.Cells["E" + i].Value != null && !hoja.Cells["C" + i].Style.Font.Bold)
                                        {
                                            infoSUA.dias += hoja.Cells["C" + i].GetValue<int>();
                                            infoSUA.salarioDiario += hoja.Cells["D" + i].GetValue<decimal>();
                                            infoSUA.lic += hoja.Cells["E" + i].GetValue<int>();
                                            infoSUA.incapacidades += hoja.Cells["F" + i].GetValue<int>();
                                            infoSUA.ausentismos += hoja.Cells["G" + i].GetValue<int>();
                                            infoSUA.cuotaFija += hoja.Cells["H" + i].GetValue<decimal>();
                                            infoSUA.excedentePatronal += hoja.Cells["I" + i].GetValue<decimal>();
                                            infoSUA.excedenteObrera += hoja.Cells["J" + i].GetValue<decimal>();
                                            infoSUA.prestacionesPatronal += hoja.Cells["K" + i].GetValue<decimal>();
                                            infoSUA.prestacionesObrera += hoja.Cells["L" + i].GetValue<decimal>();
                                            infoSUA.gastosMedicosPatronal += hoja.Cells["M" + i].GetValue<decimal>();
                                            infoSUA.gastosMedicosObrera += hoja.Cells["N" + i].GetValue<decimal>();
                                            infoSUA.riesgosTrabajo += hoja.Cells["O" + i].GetValue<decimal>();
                                            infoSUA.invalidezVidaPatronal += hoja.Cells["P" + i].GetValue<decimal>();
                                            infoSUA.invalidezVidaObrera += hoja.Cells["Q" + i].GetValue<decimal>();
                                            infoSUA.guarderiasPrestaciones += hoja.Cells["R" + i].GetValue<decimal>();
                                            infoSUA.patronal += hoja.Cells["S" + i].GetValue<decimal>();
                                            infoSUA.obrera += hoja.Cells["T" + i].GetValue<decimal>();
                                            infoSUA.subtotal += hoja.Cells["U" + i].GetValue<decimal>();
                                        }
                                        i += 2;
                                    }
                                    i--;
                                    listaSUA.Add(infoSUA);
                                }
                            }
                            var empleados = _context.tblRH_EK_Empleados
                                .Select(x => new
                                {
                                    clave_empleado = x.clave_empleado,
                                    nombre = (x.ape_paterno.Trim() + " " + x.ape_materno.Trim() + " " + x.nombre.Trim()),
                                    nss = x.nss
                                }).ToList();

                            foreach (var item in listaSUA)
                            {
                                item.suaID = sua.id;
                                var empleado = empleados.FirstOrDefault(x => x.nss == item.nss.Replace("-", ""));
                                if (empleado != null) item.clave_empleado = empleado.clave_empleado;
                                else
                                {
                                    empleado = empleados.FirstOrDefault(x => x.nombre == item.nombre);
                                    if (empleado != null) item.clave_empleado = empleado.clave_empleado;
                                }
                            }

                            _context.tblC_Nom_SUA_Det.AddRange(listaSUA);
                        }
                        else if ((ClasificacionDocumentosSUAEnum)tipoDocumento == ClasificacionDocumentosSUAEnum.infonavit)
                        {
                            renglonInicial = 1;
                            for (int i = 1; i <= hoja.Dimension.End.Row; i++)
                            {
                                if (!string.IsNullOrEmpty(hoja.Cells["A" + i].GetValue<string>()) && hoja.Cells["A" + i].GetValue<string>().ToUpper() != "")
                                {
                                    break;
                                }
                            }

                            for (int i = renglonInicial; i <= hoja.Dimension.End.Row; i++)
                            {
                                if (hoja.Cells["A" + i].Value != null && hoja.Cells["A" + i].Style.Font.Bold && hoja.Cells["H" + i].Value != null)
                                {
                                    var infoSUA = new tblC_Nom_SUA_Det();
                                    infoSUA.nss = hoja.Cells["A" + i].GetValue<string>();
                                    infoSUA.nombre = hoja.Cells["F" + i].GetValue<string>();
                                    infoSUA.rfc = hoja.Cells["G" + i].GetValue<string>();
                                    infoSUA.cc = hoja.Cells["H" + i].GetValue<string>();

                                    if (infoSUA.cc.Length != 3)
                                    {
                                        infoSUA.cc = infoSUA.cc.PadLeft(3, '0');
                                    }

                                    i += 2;
                                    infoSUA.dias = hoja.Cells["C" + i].GetValue<int>();
                                    infoSUA.salarioDiario = hoja.Cells["D" + i].GetValue<decimal>();
                                    infoSUA.lic = hoja.Cells["E" + i].GetValue<int>();
                                    infoSUA.incapacidades = hoja.Cells["F" + i].GetValue<int>();
                                    infoSUA.ausentismos = hoja.Cells["G" + i].GetValue<int>();
                                    infoSUA.rcvRetiro = hoja.Cells["H" + i].GetValue<decimal>();
                                    infoSUA.rcvPatronal = hoja.Cells["I" + i].GetValue<decimal>();
                                    infoSUA.rcvObrera = hoja.Cells["J" + i].GetValue<decimal>();
                                    infoSUA.infonavitAportacionPatronal = hoja.Cells["L" + i].GetValue<decimal>();
                                    infoSUA.infonavitAmortizacion = hoja.Cells["P" + i].GetValue<decimal>();
                                    i += 1;

                                    while (!hoja.Cells["A" + i].Style.Font.Bold && (hoja.Cells["A" + (i + 1).ToString()].Value != null || hoja.Cells["B" + (i + 1).ToString()].Value != null || hoja.Cells["C" + (i + 1).ToString()].Value != null))
                                    {
                                        if (hoja.Cells["A" + i].Value == null)
                                        {
                                            i++;
                                            if (hoja.Cells["A" + i].Value != null)
                                            {
                                                infoSUA.dias += hoja.Cells["C" + i].GetValue<int>();
                                                infoSUA.salarioDiario += hoja.Cells["D" + i].GetValue<decimal>();
                                                infoSUA.lic += hoja.Cells["E" + i].GetValue<int>();
                                                infoSUA.incapacidades += hoja.Cells["F" + i].GetValue<int>();
                                                infoSUA.ausentismos += hoja.Cells["G" + i].GetValue<int>();
                                                infoSUA.rcvRetiro += hoja.Cells["H" + i].GetValue<decimal>();
                                                infoSUA.rcvPatronal += hoja.Cells["I" + i].GetValue<decimal>();
                                                infoSUA.rcvObrera += hoja.Cells["J" + i].GetValue<decimal>();
                                                infoSUA.infonavitAportacionPatronal += hoja.Cells["L" + i].GetValue<decimal>();
                                                infoSUA.infonavitAmortizacion += hoja.Cells["P" + i].GetValue<decimal>();
                                            }
                                        }
                                        i++;
                                    }
                                    i--;
                                    infoSUA.registroActivo = true;
                                    listaSUA.Add(infoSUA);
                                }
                            }
                            var empleados = _context.tblRH_EK_Empleados
                                .Select(x => new
                                {
                                    clave_empleado = x.clave_empleado,
                                    nombre = (x.ape_paterno.Trim() + " " + x.ape_materno.Trim() + " " + x.nombre.Trim()),
                                    nss = x.nss
                                }).ToList();

                            foreach (var item in listaSUA)
                            {
                                item.suaID = sua.id;
                                var empleado = empleados.FirstOrDefault(x => x.nss == item.nss.Replace("-", ""));
                                if (empleado != null) item.clave_empleado = empleado.clave_empleado;
                                else
                                {
                                    empleado = empleados.FirstOrDefault(x => x.nombre == item.nombre);
                                    if (empleado != null) item.clave_empleado = empleado.clave_empleado;
                                }
                            }

                            _context.tblC_Nom_SUA_Det.AddRange(listaSUA);
                        }
                        else if ((ClasificacionDocumentosSUAEnum)tipoDocumento == ClasificacionDocumentosSUAEnum.cedulaMensual)
                        {
                            renglonInicial = 2;
                            for (int i = 1; i <= hoja.Dimension.End.Row; i++)
                            {
                                if (!string.IsNullOrEmpty(hoja.Cells["A" + i].GetValue<string>()) && hoja.Cells["A" + i].GetValue<string>().ToUpper() != "")
                                {
                                    break;
                                }
                            }

                            for (int i = renglonInicial; i <= hoja.Dimension.End.Row; i++)
                            {
                                if (hoja.Cells["A" + i].Value != null)
                                {
                                    var infoResumen = new tblC_Nom_SUA_Resumen();
                                    infoResumen.cc = hoja.Cells["A" + i].GetValue<string>();


                                    if (infoResumen.cc.Length != 3)
                                    {
                                        infoResumen.cc = infoResumen.cc.PadLeft(3, '0');
                                    }

                                    if (vSesiones.sesionEmpresaActual == 2)
                                    {
                                        infoResumen.ac = hoja.Cells["B" + i].GetValue<string>();
                                        if (infoResumen.ac.Contains("."))
                                        {
                                            infoResumen.ac = infoResumen.ac.Replace('.', '-');
                                        }
                                        infoResumen.estado = "--";
                                    }
                                    else
                                    {
                                        infoResumen.estado = hoja.Cells["B" + i].GetValue<string>();
                                        infoResumen.ac = "--";
                                    }
                                    infoResumen.registroPatronal = hoja.Cells["C" + i].GetValue<string>();
                                    infoResumen.descripcionCC = hoja.Cells["D" + i].GetValue<string>();
                                    infoResumen.imssPatronal = hoja.Cells["E" + i].GetValue<decimal>();
                                    infoResumen.imssObrero = hoja.Cells["F" + i].GetValue<decimal>();
                                    infoResumen.rcvPatronal = hoja.Cells["G" + i].GetValue<decimal>();
                                    infoResumen.rcvObrero = hoja.Cells["H" + i].GetValue<decimal>();
                                    infoResumen.infonavit = hoja.Cells["I" + i].GetValue<decimal>();
                                    infoResumen.amortizacion = hoja.Cells["J" + i].GetValue<decimal>();
                                    infoResumen.isn = hoja.Cells["L" + i].GetValue<decimal>();
                                    infoResumen.registroActivo = true;
                                    infoResumen.suaID = sua.id;
                                    listaResumen.Add(infoResumen);
                                }
                            }
                            _context.tblC_Nom_SUA_Resumen.AddRange(listaResumen);
                        }

                        else if ((ClasificacionDocumentosSUAEnum)tipoDocumento == ClasificacionDocumentosSUAEnum.cedulaIsnMensual)
                        {
                            renglonInicial = 2;
                            for (int i = 1; i <= hoja.Dimension.End.Row; i++)
                            {
                                if (!string.IsNullOrEmpty(hoja.Cells["A" + i].GetValue<string>()) && hoja.Cells["A" + i].GetValue<string>().ToUpper() != "")
                                {
                                    break;
                                }
                            }

                            for (int i = renglonInicial; i <= hoja.Dimension.End.Row; i++)
                            {
                                if (hoja.Cells["A" + i].Value != null)
                                {
                                    var infoResumen = new tblC_Nom_SUA_Resumen();
                                    infoResumen.cc = hoja.Cells["A" + i].GetValue<string>();


                                    if (infoResumen.cc.Length != 3)
                                    {
                                        infoResumen.cc = infoResumen.cc.PadLeft(3, '0');
                                    }

                                    if (vSesiones.sesionEmpresaActual == 2)
                                    {
                                        infoResumen.ac = hoja.Cells["B" + i].GetValue<string>();
                                        if (infoResumen.ac.Contains("."))
                                        {
                                            infoResumen.ac = infoResumen.ac.Replace('.', '-');
                                        }
                                        infoResumen.estado = "--";
                                    }
                                    else
                                    {
                                        infoResumen.estado = hoja.Cells["B" + i].GetValue<string>();
                                        infoResumen.ac = "--";
                                    }
                                    infoResumen.registroPatronal = hoja.Cells["C" + i].GetValue<string>();
                                    infoResumen.descripcionCC = hoja.Cells["D" + i].GetValue<string>();
                                    infoResumen.imssPatronal = hoja.Cells["E" + i].GetValue<decimal>();
                                    infoResumen.imssObrero = hoja.Cells["F" + i].GetValue<decimal>();
                                    infoResumen.rcvPatronal = hoja.Cells["G" + i].GetValue<decimal>();
                                    infoResumen.rcvObrero = hoja.Cells["H" + i].GetValue<decimal>();
                                    infoResumen.infonavit = hoja.Cells["I" + i].GetValue<decimal>();
                                    infoResumen.amortizacion = hoja.Cells["J" + i].GetValue<decimal>();
                                    infoResumen.isn = hoja.Cells["L" + i].GetValue<decimal>();
                                    infoResumen.registroActivo = true;
                                    infoResumen.suaID = sua.id;
                                    listaResumen.Add(infoResumen);
                                }
                            }
                            _context.tblC_Nom_SUA_Resumen.AddRange(listaResumen);
                        }

                        _context.SaveChanges();

                        transaccion.Commit();
                        List<SuaTotalDetalleDTO> lstResultado = new List<SuaTotalDetalleDTO>();

                        if ((ClasificacionDocumentosSUAEnum)tipoDocumento == ClasificacionDocumentosSUAEnum.cedulaMensual || (ClasificacionDocumentosSUAEnum)tipoDocumento == ClasificacionDocumentosSUAEnum.cedulaIsnMensual)
                        {
                            lstResultado = listaResumen.Select(x => new SuaTotalDetalleDTO
                            {
                                cc = x.cc,
                                estado = x.estado,
                                registroPatronal = x.registroPatronal,
                                descripcionCC = x.descripcionCC,
                                imssPatronal = x.imssPatronal,
                                imssObrero = x.imssObrero,
                                rcvPatronal = x.rcvPatronal,
                                rcvObrero = x.rcvObrero,
                                infonavit = x.infonavit,
                                amortizacion = x.amortizacion,
                                subtotal = x.imssPatronal + x.imssObrero + x.rcvPatronal + x.rcvObrero + x.infonavit + x.amortizacion,
                                isn = x.isn,
                                total = x.imssPatronal + x.imssObrero + x.rcvPatronal + x.rcvObrero + x.infonavit + x.amortizacion + x.isn
                            }).ToList();
                        }
                        else
                        {
                            lstResultado = listaSUA.Select(x => new SuaTotalDetalleDTO
                            {
                                cc = x.cc,
                                estado = "--",
                                registroPatronal = "--",
                                descripcionCC = "--",
                                imssPatronal = x.patronal / 4,
                                imssObrero = x.obrera / 4,
                                rcvPatronal = (x.rcvPatronal + x.rcvRetiro) / 8,
                                rcvObrero = x.rcvObrera / 8,
                                infonavit = x.infonavitAportacionPatronal / 8,
                                amortizacion = x.infonavitAmortizacion / 8,
                                subtotal = (x.patronal / 4) + (x.obrera / 4) + (x.rcvPatronal / 8) + (x.rcvObrera / 8) + (x.infonavitAportacionPatronal / 8) + (x.infonavitAmortizacion / 8),
                                isn = 0,
                                total = (x.patronal / 4) + (x.obrera / 4) + (x.rcvPatronal / 8) + (x.rcvObrera / 8) + (x.infonavitAportacionPatronal / 8) + (x.infonavitAmortizacion / 8),
                            }).ToList();
                        }

                        lstResultado = lstResultado.GroupBy(x => x.cc).Select(x => new SuaTotalDetalleDTO
                        {
                            cc = x.Key,
                            estado = "--",
                            registroPatronal = "--",
                            descripcionCC = "--",
                            imssPatronal = x.Sum(y => y.imssPatronal),
                            imssObrero = x.Sum(y => y.imssObrero),
                            rcvPatronal = x.Sum(y => y.rcvPatronal),
                            rcvObrero = x.Sum(y => y.rcvObrero),
                            infonavit = x.Sum(y => y.infonavit),
                            amortizacion = x.Sum(y => y.amortizacion),
                            subtotal = x.Sum(y => y.subtotal),
                            isn = x.Sum(y => y.isn),
                            total = x.Sum(y => y.total)
                        }).ToList();

                        resultado.Add(SUCCESS, true);
                        resultado.Add(ITEMS, lstResultado);
                    }
                    catch (Exception ex)
                    {
                        transaccion.Rollback();

                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, ex.Message);

                        LogError(_SISTEMA, 0, "NominaController", "CargarSUA", ex, AccionEnum.AGREGAR, 0, new { periodo, tipoNomina, year, tipoDocumento });
                    }
                }
            }

            return resultado;
        }

        public Dictionary<string, object> GetTipoDocumento()
        {
            var resultado = new Dictionary<string, object>();

            try
            {
                var enumTipo = Enum.GetValues(typeof(ClasificacionDocumentosSUAEnum)).Cast<ClasificacionDocumentosSUAEnum>().ToList();

                var tiposDocumento = enumTipo.Select(m => new
                {
                    Value = ((int)m).ToString(),
                    Text = ((ClasificacionDocumentosSUAEnum)m).GetDescription()
                });

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, tiposDocumento);
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);

                LogError(_SISTEMA, 0, "NominaController", "GetTipoRaya", ex, AccionEnum.CONSULTA, 0, null);
            }

            return resultado;
        }

        public Dictionary<string, object> GetSUACargado(int periodo, int tipoPeriodo, int year, int tipoDocumento)
        {
            var resultado = new Dictionary<string, object>();

            try
            {
                var totales = new List<SuaTotalDetalleDTO>();
                if ((ClasificacionDocumentosSUAEnum)tipoDocumento == ClasificacionDocumentosSUAEnum.imss || (ClasificacionDocumentosSUAEnum)tipoDocumento == ClasificacionDocumentosSUAEnum.infonavit)
                {
                    var suaDetalle = _context.tblC_Nom_SUA_Det.Where(w =>
                            w.sua.tipoNomina == tipoPeriodo &&
                            w.sua.periodo == periodo &&
                            w.sua.anio == year &&
                            w.sua.tipoDocumento == tipoDocumento &&
                            w.sua.registroActivo
                        ).GroupBy(x => new { x.cc }).ToList();

                    foreach (var sua in suaDetalle)
                    {
                        var total = new SuaTotalDetalleDTO();
                        total.suaID = sua.FirstOrDefault().id;
                        total.cc = sua.Key.cc;
                        total.ac = "--";
                        total.estado = "--";
                        total.registroPatronal = "--";
                        total.descripcionCC = "--";
                        total.imssPatronal = sua.Sum(y => y.patronal) / 4;
                        total.imssObrero = sua.Sum(y => y.obrera) / 4;
                        total.rcvPatronal = sua.Sum(y => y.rcvPatronal + y.rcvRetiro) / 8;
                        total.rcvObrero = sua.Sum(y => y.rcvObrera) / 8;
                        total.infonavit = sua.Sum(y => y.infonavitAportacionPatronal) / 8;
                        total.amortizacion = sua.Sum(y => y.infonavitAmortizacion) / 8;
                        total.subtotal = total.imssPatronal + total.imssObrero + total.rcvPatronal + total.rcvObrero + total.infonavit + total.amortizacion;
                        total.isn = 0;
                        total.total = total.subtotal + total.isn;
                        totales.Add(total);
                    }
                }
                else
                {
                    var suaDetalle = _context.tblC_Nom_SUA_Resumen.Where(w =>
                            w.sua.tipoNomina == tipoPeriodo &&
                            w.sua.periodo == periodo &&
                            w.sua.anio == year &&
                            w.sua.tipoDocumento == tipoDocumento &&
                            w.sua.registroActivo
                        ).ToList();

                    foreach (var sua in suaDetalle)
                    {
                        var total = new SuaTotalDetalleDTO();
                        total.suaID = sua.id;
                        total.cc = sua.cc;
                        total.ac = sua.ac;
                        total.estado = sua.estado;
                        total.registroPatronal = sua.registroPatronal;
                        total.descripcionCC = sua.descripcionCC;
                        total.imssPatronal = sua.imssPatronal;
                        total.imssObrero = sua.imssObrero;
                        total.rcvPatronal = sua.rcvPatronal;
                        total.rcvObrero = sua.rcvObrero;
                        total.infonavit = sua.infonavit;
                        total.amortizacion = sua.amortizacion;
                        total.subtotal = total.imssPatronal + total.imssObrero + total.rcvPatronal + total.rcvObrero + total.infonavit + total.amortizacion;
                        total.isn = sua.isn;
                        total.total = total.subtotal + total.isn;
                        totales.Add(total);
                    }
                }

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, totales);
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);

                LogError(_SISTEMA, 0, "NominaController", "GetRayaCargada", ex, AccionEnum.CONSULTA, 0, null);
            }

            return resultado;
        }

        #endregion

        #region PERU
        public Dictionary<string, object> CargarPrenominaPeru(string CC, int periodo, tipoNominaPropuestaEnum tipoNomina, int anio)
        {
            var resultado = new Dictionary<string, object>();
            if (CC == "--Seleccione--") CC = "";
            try
            {
                List<tblC_Nom_PreNominaPeru_Det> detalles = new List<tblC_Nom_PreNominaPeru_Det>();
                //List<tblC_Nom_PreNomina_Det> detallesCambio = new List<tblC_Nom_PreNomina_Det>();

                tblC_Nom_Prenomina prenomina = _context.tblC_Nom_Prenomina.Where(x => x.CC == CC && x.estatus < 2 && x.periodo == periodo && x.tipoNomina == (int)tipoNomina && x.year == anio).OrderByDescending(x => x.fechaCaptura).FirstOrDefault();

                if (prenomina == null)
                {

                    detalles = CalcularPrenominaBasePeru(CC, periodo, tipoNomina, anio, detalles);

                    var prenominaAnterior = _context.tblC_Nom_Prenomina.Where(x => x.CC == CC && x.estatus < 2 && (periodo == 1 ? true : x.periodo == periodo - 1) && x.tipoNomina == (int)tipoNomina && (periodo == 1 ? x.year == anio - 1 : x.year == anio)).OrderByDescending(x => x.fechaCaptura).FirstOrDefault();

                    if (prenominaAnterior == null)
                    {
                        var facultamiento = _context.tblFA_Facultamiento.Where(x => x.plantillaID == 118 && x.paquete.cc.cc == CC && x.aplica).OrderByDescending(x => x.id).FirstOrDefault();
                        List<tblFA_Empleado> autorizantes = new List<tblFA_Empleado>();
                        if (facultamiento != null)
                            autorizantes = _context.tblFA_Empleado.Where(x => x.facultamientoID == facultamiento.id && x.esActivo && x.aplica && x.claveEmpleado != null).ToList();
                        List<tblC_Nom_PreNomina_Aut> autorizantesPrenomina = new List<tblC_Nom_PreNomina_Aut>();
                        var orden = 1;
                        autorizantes.Reverse();
                        var clavesEmpleados = autorizantes.Select(x => x.claveEmpleado.ToString()).ToList();
                        var usuariosSIGOPLAN = _context.tblP_Usuario.Where(x => clavesEmpleados.Contains(x.cveEmpleado)).ToList();

                        foreach (var item in autorizantes)
                        {
                            var usuario = usuariosSIGOPLAN.FirstOrDefault(x => x.cveEmpleado == item.claveEmpleado.ToString());
                            string puestoUsuario = usuario.puesto.descripcion;
                            int clave_empleado = 0;
                            bool exitoParse = Int32.TryParse(usuario.cveEmpleado, out clave_empleado);
                            if (exitoParse)
                            {
                                var empleado = _context.tblRH_EK_Empleados.FirstOrDefault(x => x.clave_empleado == clave_empleado);
                                if (empleado != null)
                                {
                                    var puestoEmpleado = _context.tblRH_EK_Puestos.FirstOrDefault(x => x.puesto == empleado.puesto);
                                    if (puestoEmpleado != null)
                                    {
                                        puestoUsuario = puestoEmpleado.descripcion;
                                    }
                                }
                            }
                            if (usuario != null)
                            {
                                tblC_Nom_PreNomina_Aut auxAutorizante = new tblC_Nom_PreNomina_Aut
                                {
                                    orden = orden,
                                    aprobadorClave = usuario.id,
                                    estatus = 0,
                                    aprobadorPuesto = puestoUsuario,
                                    aprobadorNombre = usuario.nombre + " " + usuario.apellidoPaterno + " " + usuario.apellidoMaterno,
                                    esObra = false
                                };
                                autorizantesPrenomina.Add(auxAutorizante);
                                orden++;
                            }
                        }
                        resultado.Add("autorizantes", autorizantesPrenomina);
                    }
                    else
                    {
                        List<tblC_Nom_PreNomina_Aut> autorizantesPrenomina = new List<tblC_Nom_PreNomina_Aut>();
                        var autorizantesID = _context.tblC_Nom_PreNomina_Aut.Where(x => x.prenominaID == prenominaAnterior.id).OrderBy(x => x.orden).Select(x => x.aprobadorClave).ToList();
                        var usuariosSIGOPLAN = _context.tblP_Usuario.Where(x => autorizantesID.Contains(x.id)).ToList();
                        var orden = 1;
                        foreach (var item in autorizantesID)
                        {
                            var usuario = usuariosSIGOPLAN.FirstOrDefault(x => x.id == item);
                            string puestoUsuario = usuario.puesto.descripcion;
                            int clave_empleado = 0;
                            bool exitoParse = Int32.TryParse(usuario.cveEmpleado, out clave_empleado);
                            if (exitoParse)
                            {
                                var empleado = _context.tblRH_EK_Empleados.FirstOrDefault(x => x.clave_empleado == clave_empleado);
                                if (empleado != null)
                                {
                                    var puestoEmpleado = _context.tblRH_EK_Puestos.FirstOrDefault(x => x.puesto == empleado.puesto);
                                    if (puestoEmpleado != null)
                                    {
                                        puestoUsuario = puestoEmpleado.descripcion;
                                    }
                                }
                            }
                            if (usuario != null)
                            {
                                tblC_Nom_PreNomina_Aut auxAutorizante = new tblC_Nom_PreNomina_Aut
                                {
                                    orden = orden,
                                    aprobadorClave = usuario.id,
                                    estatus = 0,
                                    aprobadorPuesto = puestoUsuario,
                                    aprobadorNombre = usuario.nombre + " " + usuario.apellidoPaterno + " " + usuario.apellidoMaterno,
                                    esObra = false
                                };
                                autorizantesPrenomina.Add(auxAutorizante);
                                orden++;
                            }
                        }
                        resultado.Add("autorizantes", autorizantesPrenomina);
                    }
#if DEBUG
                    resultado.Add("detalles", detalles.Where(w => w.clave_empleado == 30179).ToList());
#else
                    resultado.Add("detalles", detalles);
#endif
                    resultado.Add("prenominaID", 0);
                    resultado.Add("validada", false);
                    resultado.Add(SUCCESS, true);
                }
                else
                {
                    var index = prenomina.id;
                    var validada = prenomina.validada;
                    detalles = _context.tblC_Nom_PreNominaPeru_Det.Where(x => x.prenominaID == index).ToList();

                    var autorizantesPrenomina = _context.tblC_Nom_PreNomina_Aut.Where(x => x.prenominaID == index).OrderBy(x => x.orden).ToList();
#if DEBUG
                    resultado.Add("detalles", detalles.Where(w => w.clave_empleado == 30179).ToList());
#else
                    resultado.Add("detalles", detalles);
#endif
                    resultado.Add("prenominaID", index);
                    resultado.Add("validada", validada);
                    resultado.Add("autorizantes", autorizantesPrenomina);
                    resultado.Add(SUCCESS, true);
                }
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);

                LogError(_SISTEMA, 0, "NominaController", "CargarPrenomina", ex, AccionEnum.CONSULTA, 0, new { CC, periodo, tipoNomina, anio });
            }

            return resultado;
        }

        public Dictionary<string, object> GuardarPrenominaPeru(int prenominaID, List<tblC_Nom_PreNominaPeru_Det> detalles, List<tblC_Nom_PreNomina_Aut> autorizantes, string CC, int periodo, tipoNominaPropuestaEnum tipoNomina, int anio)
        {
            if (CC == "--Seleccione--")
                CC = string.Empty;

            Dictionary<string, object> resultado = new Dictionary<string, object>();
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    if (detalles == null || detalles.Count() < 1)
                        throw new Exception("No se encontraron detalles en prenomina para guardar");

                    if (autorizantes == null || autorizantes.Count() < 1)
                        throw new Exception("No se encontraron autorizantes relacionados con la prenomina.");

                    var prenomina = _context.tblC_Nom_Prenomina.FirstOrDefault(x => x.id == prenominaID);
                    if (prenomina == null)
                    {
                        int usuarioCaptura = vSesiones.sesionUsuarioDTO.id;
                        prenomina = new tblC_Nom_Prenomina
                        {
                            id = 0,
                            CC = CC,
                            estatus = 0,
                            year = anio,
                            periodo = periodo,
                            tipoNomina = (int)tipoNomina,
                            validada = false,
                            fechaCaptura = DateTime.Now,
                            fechaValidacion = null,
                            usuarioCapturaID = usuarioCaptura,
                            notificadoOficina = false
                        };
                        _context.tblC_Nom_Prenomina.Add(prenomina);
                        _context.SaveChanges();

                        List<tblC_Nom_PreNominaPeru_Det> detallesActualizados = new List<tblC_Nom_PreNominaPeru_Det>();
                        detallesActualizados = CalcularPrenominaBasePeru(CC, periodo, tipoNomina, anio, detalles);

                        int orden = 1;
                        foreach (var item in detallesActualizados)
                        {
                            item.prenominaID = prenomina.id;
                            orden++;
                        }
                        _context.tblC_Nom_PreNominaPeru_Det.AddRange(detallesActualizados);

                        foreach (var item in autorizantes)
                        {
                            item.prenominaID = prenomina.id;
                            item.autorizando = false;
                        }
                        autorizantes.OrderBy(x => x.orden).FirstOrDefault().autorizando = true;
                        _context.tblC_Nom_PreNomina_Aut.AddRange(autorizantes);

                        _context.SaveChanges();
                        dbContextTransaction.Commit();
                        resultado.Add("prenominaID", prenomina.id);
                        resultado.Add(SUCCESS, true);
                    }
                    else
                    {
                        List<tblC_Nom_PreNominaPeru_Det> detallesActualizados = new List<tblC_Nom_PreNominaPeru_Det>();
                        detallesActualizados = CalcularPrenominaBasePeru(CC, periodo, tipoNomina, anio, detalles);

                        int orden = 1;
                        foreach (var item in detallesActualizados)
                        {
                            item.prenominaID = prenomina.id;
                            orden++;
                        }
                        _context.tblC_Nom_PreNominaPeru_Det.AddRange(detallesActualizados);

                        var detallesEliminados = _context.tblC_Nom_PreNominaPeru_Det.Where(x => x.prenominaID == prenomina.id).ToList();
                        _context.tblC_Nom_PreNominaPeru_Det.RemoveRange(detallesEliminados);

                        var autorizantesEliminados = _context.tblC_Nom_PreNomina_Aut.Where(x => x.prenominaID == prenomina.id).ToList();
                        _context.tblC_Nom_PreNomina_Aut.RemoveRange(autorizantesEliminados);
                        foreach (var item in autorizantes)
                        {
                            item.prenominaID = prenomina.id;
                            item.estatus = 0;
                            item.firma = null;
                        }
                        _context.tblC_Nom_PreNomina_Aut.AddRange(autorizantes);

                        _context.SaveChanges();
                        dbContextTransaction.Commit();
                        resultado.Add("prenominaID", prenomina.id);
                        resultado.Add(SUCCESS, true);
                    }
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.AGREGAR, 0, new { CC = CC, periodo = periodo, anio = anio });
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                }
            }
            return resultado;
        }

        public Dictionary<string, object> ValidarPrenominaPeru(int prenominaID, List<tblC_Nom_PreNominaPeru_Det> detalles, List<tblC_Nom_PreNomina_Aut> autorizantes)
        {
            Dictionary<string, object> resultado = new Dictionary<string, object>();
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    if (detalles == null || detalles.Count() < 1)
                    {
                        throw new Exception("No se encontraron detalles en prenomina para guardar");
                    }
                    if (autorizantes == null || autorizantes.Count() < 1)
                    {
                        throw new Exception("No se encontraron autorizantes relacionados con la prenomina.");
                    }
                    var prenomina = _context.tblC_Nom_Prenomina.FirstOrDefault(x => x.id == prenominaID);
                    if (prenomina == null)
                    {
                        throw new Exception("No se encuentra la prenomina relacionada");
                    }
                    else
                    {
                        //var detallesActualizados = CalcularPrenominaBase(prenomina.CC, prenomina.periodo, (tipoNominaPropuestaEnum)prenomina.tipoNomina, prenomina.year, detalles);
                        List<tblC_Nom_PreNominaPeru_Det> detallesActualizados = new List<tblC_Nom_PreNominaPeru_Det>();
                        detallesActualizados = CalcularPrenominaBasePeru(prenomina.CC, prenomina.periodo, (tipoNominaPropuestaEnum)prenomina.tipoNomina, prenomina.year, detalles);

                        foreach (var item in detallesActualizados)
                        {
                            item.prenominaID = prenomina.id;
                        }
                        _context.tblC_Nom_PreNominaPeru_Det.AddRange(detallesActualizados);

                        var detallesEliminados = _context.tblC_Nom_PreNomina_Det.Where(x => x.prenominaID == prenomina.id).ToList();
                        _context.tblC_Nom_PreNomina_Det.RemoveRange(detallesEliminados);


                        var autorizantesEliminados = _context.tblC_Nom_PreNomina_Aut.Where(x => x.prenominaID == prenomina.id).ToList();
                        _context.tblC_Nom_PreNomina_Aut.RemoveRange(autorizantesEliminados);
                        foreach (var item in autorizantes)
                        {
                            item.prenominaID = prenomina.id;
                            item.autorizando = true;
                        }
                        //var primerAutorizante = autorizantes.OrderBy(x => x.orden).FirstOrDefault();
                        //primerAutorizante.autorizando = true;
                        _context.tblC_Nom_PreNomina_Aut.AddRange(autorizantes);

                        prenomina.validada = true;
                        prenomina.usuarioValidaID = vSesiones.sesionUsuarioDTO.id;
                        prenomina.fechaValidacion = DateTime.Now;

                        _context.SaveChanges();
                        dbContextTransaction.Commit();
                        resultado.Add(SUCCESS, true);
                    }
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                    LogError(_SISTEMA, 0, "NominaController", "ValidarPrenominaPeru", e, AccionEnum.ACTUALIZAR, 0, new { prenominaID = prenominaID });
                }
            }
            return resultado;
        }

        public List<tblC_Nom_PreNominaPeru_Det> GetPrenominDetallesPeruByID(int prenominaID) // TODO
        {
            var data = _context.tblC_Nom_PreNominaPeru_Det.Where(x => x.prenominaID == prenominaID).ToList();
            return data;
        }

        private List<PrenominaDTO> GetInformacionBoletaNominaPeru(int prenominaID)
        {
            List<PrenominaDTO> lstPrenominaDTO = new List<PrenominaDTO>();
            using (var _ctx = new MainContext(vSesiones.sesionEmpresaActual))
            {
                try
                {
                    #region VALIDACIONES
                    if (prenominaID <= 0) { throw new Exception("Ocurrió un error al generar la boleta de nómina."); }
                    #endregion

                    tblC_Nom_CatPeriodo objPeriodo = _ctx.tblC_Nom_CatPeriodo.Where(w => w.periodo == prenominaID && w.tipoNomina == 27 && w.estatus == true && w.anio == DateTime.Now.Year).FirstOrDefault();

                    #region SE OBTIENE INFORMACIÓN DE LOS EMPLEADOS
                    lstPrenominaDTO = _context.Select<PrenominaDTO>(new DapperDTO
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = @"SELECT 
                                            -- ENCABEZADO
	                                        t1.clave_empleado, t1.nombre_empleado, t2.tipoNomina, t3.cc, t3.descripcion, t1.puesto, t4.fecha_nac, t4.fecha_alta,t5.desc_depto AS area,
	                                        t6.clave_banco, t6.desc_banco, t4.num_cta_pago, t4.num_cta_fondo_aho,

	                                        -- INGRESOS
	                                        t1.jornada_semanal,t1.horas_extra_60,t1.horas_extra_100,t1.horas_nocturnas,t1.feriados,t1.subsidios,
	                                        t1.buc,t1.bono_altitud,t1.indemnizacion,t1.CTS,t1.Utilidades,t1.dominical,t1.gratificacion_proporcional,t1.bonificacion_extraordinaria,
	                                        t1.bonificacion_alta_especial,t1.vacaciones_truncas,t1.bono_transporte,t1.asignacion_escolar,t1.BAE,t1.bono_por_altura,t1.devolucion_5ta,

	                                        -- DEDUCCIONES
	                                        t1.descuento_medico,t1.AFP_obligatoria,t1.AFP_voluntaria,t1.AFP_comision,t1.AFP_prima,t1.conafovicer,t1.essalud_vida,t1.onp,t1.renta_5ta,

	                                        -- APORTACIONES
	                                        t1.essalud_aportes, t1.AFP_aportes

	                                        FROM tblC_Nom_PreNominaPeru_Det AS t1
	                                        INNER JOIN tblC_Nom_Prenomina AS t2 ON t2.id = t1.prenominaID
	                                        INNER JOIN tblP_CC AS t3 ON t3.cc = t2.CC
	                                        INNER JOIN tblRH_EK_Empleados AS t4 ON t4.clave_empleado = t1.clave_empleado
                                            INNER JOIN tblRH_EK_Departamentos AS t5 ON t5.clave_depto = t4.clave_depto
	                                        LEFT JOIN tblRH_EK_Bancos AS t6 ON t6.clave_banco = t4.banco
		                                        WHERE t1.prenominaID = @prenominaID AND t4.estatus_empleado = @estatus_empleado",
                        parametros = new { prenominaID = prenominaID, estatus_empleado = "A" }
                    }).ToList();

                    foreach (var item in lstPrenominaDTO)
                    {
                        #region SE OBTIENE LA FECHA DE INICIO Y FIN DEL PERIODO
                        item.periodoPago = string.Format("RCC SEM {0} ATA - NEXA ({1}.{2}.{3} - {4}.{5}.{6})", prenominaID,
                                                                    objPeriodo.fechaInicio.Day, objPeriodo.fechaInicio.Month, objPeriodo.fechaInicio.Year,
                                                                    objPeriodo.fechaFin.Day, objPeriodo.fechaFin.Month, objPeriodo.fechaFin.Year);
                        #endregion

                        #region SE FORMATEA NOMBRE TRABAJADOR
                        item.nombre_empleado += PersonalUtilities.NombreCompletoPrimerLetraMayuscula(item.nombre_empleado);
                        #endregion

                        #region SE FORMATEA TEXTO DESCRIPCION CC
                        item.descripcion += PersonalUtilities.PrimerLetraMayuscula(item.descripcion);
                        #endregion

                        #region SE FORMATEA TEXTO PUESTO
                        item.puesto += PersonalUtilities.PrimerLetraMayuscula(item.puesto);
                        #endregion

                        #region SE FORMATEA TEXTO AREA
                        item.area += PersonalUtilities.PrimerLetraMayuscula(item.area);
                        #endregion

                        #region SE OBTIENE MENSAJE A DONDE FUE ABONADO EL TOTAL A PAGAR
                        // SE EL BANCO ES SCOTIABANK PERU, MOSTRAR "CUENTA" DE LO CONTRARIO MOSTRAR "CLAVE INTERBANCARIA"
                        int CLAVE_BANCO_SCOTIABANK_PERU = 9;
                        item.cuentaImporteAbonado = string.Format("Importe abonado a la cuenta {0} del banco {1}", item.clave_banco == CLAVE_BANCO_SCOTIABANK_PERU ? item.num_cta_pago : item.num_cta_fondo_aho, item.desc_banco);
                        #endregion
                    }
                    #endregion
                }
                catch (Exception e)
                {
                    var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, prenominaID, new { prenominaID = prenominaID });
                }
            }
            return lstPrenominaDTO;
        }

        public MemoryStream crearExcelPrenominaPeru(int prenominaID, int tipoReporte)
        {
            try
            {
                #region VERSION ACTUAL
                var prenomina = _context.tblC_Nom_Prenomina.FirstOrDefault(x => x.id == prenominaID);
                var periodoNomina = _context.tblRH_BN_EstatusPeriodos.FirstOrDefault(x => x.anio == prenomina.year && x.tipo_nomina == prenomina.tipoNomina && x.periodo == prenomina.periodo);
                var detalles = _context.tblC_Nom_PreNominaPeru_Det.Where(x => x.prenominaID == prenominaID).OrderBy(x => x.nombre_empleado).ToList();

                List<tblC_Nom_PreNomina_DetDTO> listaPrenominaFaltantes = new List<tblC_Nom_PreNomina_DetDTO>();
                foreach (var item2 in detalles)
                {
                    tblC_Nom_PreNomina_DetDTO datosPrenominaFaltantes = new tblC_Nom_PreNomina_DetDTO();
                    var fechaIngreso = _context.tblRH_EK_Empleados.Where(x => x.clave_empleado == item2.clave_empleado).FirstOrDefault().fecha_antiguedad;
                    var ultimoContrato = _context.tblRH_EK_Contratos_Empleados.Where(e => e.esActivo.Value && e.clave_empleado == item2.clave_empleado).OrderByDescending(e => e.id_contrato_empleado).FirstOrDefault().clave_duracion;
                    var nombreContrato = _context.tblRH_EK_Empl_Duracion_Contrato.FirstOrDefault(e => e.esActivo && e.clave_duracion == ultimoContrato);
                    if (nombreContrato != null)
                        datosPrenominaFaltantes.tipoContrato = nombreContrato.nombre;
                    else
                        datosPrenominaFaltantes.tipoContrato = string.Empty;

                    datosPrenominaFaltantes.prenominaID = item2.prenominaID;
                    datosPrenominaFaltantes.empleadoCve = item2.clave_empleado;
                    datosPrenominaFaltantes.fechaIngreso = fechaIngreso ?? null;
                    listaPrenominaFaltantes.Add(datosPrenominaFaltantes);
                }

                foreach (var item in detalles)
                {
                    var prenominaIdParaCC = _context.tblC_Nom_Prenomina.FirstOrDefault(x => x.id == item.prenominaID);
                    var histFormatoCambio = _context.tblRH_FormatoCambio.Where(x => x.Aprobado && x.FechaInicioCambio <= periodoNomina.fecha_limite && x.Clave_Empleado == item.clave_empleado).OrderByDescending(x => x.FechaInicioCambio).FirstOrDefault();
                    var tipoNomina = prenomina.tipoNomina;

                    if (histFormatoCambio != null)
                        item.puesto = histFormatoCambio.Puesto;
                }

                var autorizantes = _context.tblC_Nom_PreNomina_Aut.Where(x => x.prenominaID == prenominaID).OrderBy(x => x.orden).ToList();
                var cc = _context.tblP_CC.Where(x => x.estatus).FirstOrDefault(x => x.cc == (prenomina.CC == "180-A" ? "180" : (prenomina.CC == "187-A" ? "187" : prenomina.CC)));
                var realizo = _context.tblP_Usuario.FirstOrDefault(x => x.id == prenomina.usuarioCapturaID);
                var empleadosID = detalles.Select(x => x.clave_empleado).ToList();
                var fechaStr = GetPeriodoNomina(prenomina.year, prenomina.periodo, prenomina.tipoNomina);

                var stringEmpleados = "(";
                for (int i = 0; i < empleadosID.Count(); i++)
                {
                    if (i == empleadosID.Count() - 1)
                        stringEmpleados += empleadosID[i].ToString() + ")";
                    else
                        stringEmpleados += empleadosID[i].ToString() + ",";
                }

                var result = _context.Select<DepartamentoEmpleadoDTO>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = string.Format(
                    @"SELECT    DET.clave_empleado, 
	                            DET.nombre, 
	                            DET.ape_paterno, 
	                            DET.ape_materno, 
	                            DET.clave_depto, 
	                            ISNULL((SELECT desc_depto FROM tblRH_EK_Departamentos WHERE clave_depto = DET.clave_depto), ' ') AS desc_depto, 
	                            ISNULL((SELECT TOP 1 descripcion FROM tblP_CC WHERE cc = INC.cc), ' ') AS direccion, INC.cc,
	                            ISNULL((SELECT sindicato FROM tblRH_EK_Empleados WHERE clave_empleado = DET.clave_empleado), 'N') AS sindicato
                                    FROM tblRH_BN_Incidencia_det DET 
                                    LEFT JOIN tblRH_BN_Incidencia INC ON DET.incidenciaID = INC.id
                                        WHERE INC.periodo = {0} AND INC.anio = {1} AND INC.tipo_nomina = {2} AND INC.cc = '{3}' AND clave_empleado IN {4}",
                    prenomina.periodo.ToString(), prenomina.year.ToString(), prenomina.tipoNomina.ToString(), (prenomina.CC == "180-A" ? "180" : (prenomina.CC == "187-A" ? "187" : prenomina.CC)), stringEmpleados)
                }).ToList();

                foreach (var item in result)
                {
                    int clave_depto = 0;
                    var histFormatoCambio = _context.tblRH_FormatoCambio.Where(x => x.Aprobado && x.FechaInicioCambio <= periodoNomina.fecha_limite && x.Clave_Empleado == item.clave_empleado).OrderByDescending(x => x.FechaInicioCambio).FirstOrDefault();
                    if (histFormatoCambio == null || histFormatoCambio.ClaveDepartamento == null)
                    {
                        var empleado = result.FirstOrDefault(x => x.clave_empleado == item.clave_empleado);
                        clave_depto = empleado.clave_depto;
                    }
                    else
                        clave_depto = histFormatoCambio.ClaveDepartamento ?? 0;

                    var departamento = _context.Select<tblRH_EK_Departamentos>(new DapperDTO
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = string.Format(@"SELECT * FROM tblRH_EK_Departamentos WHERE clave_depto = {0}", clave_depto.ToString())
                    }).FirstOrDefault();

                    item.clave_depto = clave_depto;
                    item.desc_depto = departamento.desc_depto;
                }

                var departamentos = result.Select(x => x.desc_depto.ToUpper()).Distinct().OrderBy(x => x).ToList();

                using (ExcelPackage excel = new ExcelPackage())
                {
                    for (int j = 0; j < departamentos.Count(); j++)
                    {
                        var hoja1 = excel.Workbook.Worksheets.Add(departamentos[j]);
                        var empleadosDepartamento = result.Where(x => x.desc_depto == departamentos[j]).Select(x => x.clave_empleado).ToList();
                        var detallesDepartamento = detalles.Where(x => empleadosDepartamento.Contains(x.clave_empleado)).ToList();
                        string tipoNominaDesc = prenomina.tipoNomina == 1 ? "SUELDO BÁSICO SEMANAL" : "SUELDO BÁSICO QUICNENAL";

                        hoja1.Cells["A5:AK5"].Style.Font.Size = 10;
                        hoja1.Cells["A5:AK5"].Style.Font.Bold = true;
                        hoja1.Cells["A6:AK6"].Style.Font.Size = 10;
                        hoja1.Cells["A6:AK6"].Style.Font.Bold = true;
                        hoja1.Cells["A5:AK5"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        hoja1.Cells["A5:AK5"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        hoja1.Cells["A6:AK6"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        hoja1.Cells["A6:AK6"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        hoja1.Cells["A5:AK5"].Style.Font.Color.SetColor(Color.Black);
                        hoja1.Cells["A6:AK6"].Style.Font.Color.SetColor(Color.Black);
                        hoja1.Cells["A5:AK5"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells["A6:AK6"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells["A5:AK5"].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                        hoja1.Cells["A6:AK6"].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                        hoja1.Cells["A5:AK5"].Style.Border.BorderAround(ExcelBorderStyle.Dotted);
                        hoja1.Cells["A6:AK6"].Style.Border.BorderAround(ExcelBorderStyle.Dotted);

                        hoja1.Cells["A5:A6"].Merge = true;
                        hoja1.Cells["A5:A5"].Value = "No.";
                        hoja1.Cells["B5:B6"].Merge = true;
                        hoja1.Cells["B5:B5"].Value = "CLAVE EMPLEADO";
                        hoja1.Cells["C5:C6"].Merge = true;
                        hoja1.Cells["C5:C5"].Value = "NOMBRE DEL EMPLEADO";
                        hoja1.Cells["D5:D6"].Merge = true;
                        hoja1.Cells["D5:D5"].Value = "PUESTO";
                        hoja1.Cells["E5:E6"].Merge = true;
                        hoja1.Cells["E5:E5"].Value = "BASICO";

                        // INGRESOS
                        hoja1.Cells["F5:X5"].Merge = true;
                        hoja1.Cells["F5:X5"].Value = "INGRESOS";
                        hoja1.Cells["F6:F6"].Value = "JORNADA SEMANAL";
                        hoja1.Cells["G6:G6"].Value = "HORAS EXTRA 60%";
                        hoja1.Cells["H6:H6"].Value = "HORAS EXTRA 100%";
                        hoja1.Cells["I6:I6"].Value = "HORAS NOCTURNAS";
                        hoja1.Cells["J6:J6"].Value = "DESCUENTO MEDICO";
                        hoja1.Cells["K6:K6"].Value = "FERIADOS";
                        hoja1.Cells["L6:L6"].Value = "SUBSIDIOS";
                        hoja1.Cells["M6:M6"].Value = "BUC";
                        hoja1.Cells["N6:N6"].Value = "BONO ALTITUD";
                        hoja1.Cells["O6:O6"].Value = "INDEMNIZACIÓN";
                        hoja1.Cells["P6:P6"].Value = "DOMINICAL";
                        hoja1.Cells["Q6:Q6"].Value = "BONIFICA. EXTRA.";
                        hoja1.Cells["R6:R6"].Value = "BONIFICA. ALTA ESPECIAL";
                        hoja1.Cells["S6:S6"].Value = "VACACIONES TRUNCAS";
                        hoja1.Cells["T6:T6"].Value = "ASIGNACIÓN ESCOLAR";
                        hoja1.Cells["U6:U6"].Value = "BONO POR ALTURA";
                        hoja1.Cells["V6:V6"].Value = "DEVOLUCIÓN 5TA";
                        hoja1.Cells["W6:W6"].Value = "GRATIFICACIÓN PROPORCIONAL";
                        hoja1.Cells["X6:X6"].Value = "BONO TRANSPORTE";
                        hoja1.Cells["Y6:Y6"].Value = "TOTAL INGRESOS";
                        // END: INGRESOS

                        // EGRESOS
                        hoja1.Cells["Z5:AI5"].Merge = true;
                        hoja1.Cells["Z5:AI5"].Value = "EGRESOS";
                        hoja1.Cells["Z6:Z6"].Value = "AFP OBLIGATORIA";
                        hoja1.Cells["AA6:AA6"].Value = "AFP VOLUNTARIA";
                        hoja1.Cells["AB6:AB6"].Value = "AFP COMISIÓN";
                        hoja1.Cells["AC6:AC6"].Value = "AFP PRIMA";
                        hoja1.Cells["AD6:AD6"].Value = "CONAFOVICER";
                        hoja1.Cells["AE6:AE6"].Value = "ESSALUD VIDA";
                        hoja1.Cells["AF6:AF6"].Value = "ONP";
                        hoja1.Cells["AG6:AG6"].Value = "RENTA 5TA";
                        hoja1.Cells["AH6:AH6"].Value = "ESSALUD APORTES";
                        hoja1.Cells["AI6:AI6"].Value = "AFP APORTES";
                        // END: EGRESOS

                        hoja1.Cells["AJ5:AJ6"].Merge = true;
                        hoja1.Cells["AJ5:AJ5"].Value = "TOTAL EGRESOS";
                        hoja1.Cells["AK5:AK6"].Merge = true;
                        hoja1.Cells["AK5:AK5"].Value = "TOTAL PAGAR";

                        switch (vSesiones.sesionEmpresaActual)
                        {
                            case 1: hoja1.Cells[1, 8].Value = "SOLUCIONES INDUSTRIALES SA DE CV"; break;
                            default: hoja1.Cells[1, 8].Value = "SOLUCIONES INDUSTRIALES SA DE CV"; break;
                        }

                        hoja1.Cells[2, 8].Value = string.Format("{0} {1}: {2}", ((tipoNominaPropuestaEnum)prenomina.tipoNomina).GetDescription(), prenomina.periodo, fechaStr);
                        hoja1.Cells[3, 8].Value = departamentos[j].ToUpper().Trim();
                        hoja1.Cells[4, 8].Value = string.Format("[{0}] {1}", cc.cc, cc.descripcion.Trim());
                        hoja1.Cells[1, 8].Style.Font.Bold = true;
                        hoja1.Cells[1, 8].Style.Font.Size = 10;
                        hoja1.Cells[1, 8].Style.Font.Name = "Arial";
                        hoja1.Cells[2, 8].Style.Font.Bold = true;
                        hoja1.Cells[2, 8].Style.Font.Size = 10;
                        hoja1.Cells[2, 8].Style.Font.Name = "Arial";
                        hoja1.Cells[3, 8].Style.Font.Bold = true;
                        hoja1.Cells[3, 8].Style.Font.Size = 10;
                        hoja1.Cells[3, 8].Style.Font.Name = "Arial";
                        hoja1.Cells[4, 8].Style.Font.Bold = true;
                        hoja1.Cells[4, 8].Style.Font.Size = 10;
                        hoja1.Cells[4, 8].Style.Font.Name = "Arial";
                        hoja1.Cells["H1:L1"].Merge = true;
                        hoja1.Cells["H1:L1"].Style.Font.Color.SetColor(Color.Black);
                        hoja1.Cells["H1:L1"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells["H1:L1"].Style.Fill.BackgroundColor.SetColor(Color.Yellow);
                        hoja1.Cells["H2:L2"].Merge = true;
                        hoja1.Cells["H2:L2"].Style.Font.Color.SetColor(Color.Black);
                        hoja1.Cells["H2:L2"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells["H2:L2"].Style.Fill.BackgroundColor.SetColor(Color.Yellow);
                        hoja1.Cells["H3:L3"].Merge = true;
                        hoja1.Cells["H3:L3"].Style.Font.Color.SetColor(Color.Black);
                        hoja1.Cells["H3:L3"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells["H3:L3"].Style.Fill.BackgroundColor.SetColor(Color.Yellow);
                        hoja1.Cells["H4:L4"].Merge = true;
                        hoja1.Cells["H4:L4"].Style.Font.Color.SetColor(Color.Black);
                        hoja1.Cells["H4:L4"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells["H4:L4"].Style.Fill.BackgroundColor.SetColor(Color.Yellow);

                        var cellData = new List<object[]>();

                        int indexOrden = 1;
                        foreach (var item in detallesDepartamento)
                        {
                            cellData.Add(new object[] {
                                indexOrden, //hoja1.Cells["A5:A5"].Value = "No.";
                                item.clave_empleado, //hoja1.Cells["B5:B5"].Value = "CLAVE EMPLEADO";
                                item.nombre_empleado, //hoja1.Cells["C5:C5"].Value = "NOMBRE DEL EMPLEADO";
                                item.puesto, //hoja1.Cells["D5:D5"].Value = "PUESTO";
                                item.basico, //hoja1.Cells["E5:E5"].Value = "BASICO";
                                item.jornada_semanal, //hoja1.Cells["F5:F5"].Value = "JORNADA SEMANAL";
                                item.horas_extra_60, //hoja1.Cells["G5:G5"].Value = "HORAS EXTRA 60%";
                                item.horas_extra_100, //hoja1.Cells["H5:H5"].Value = "HORAS EXTRA 100%";
                                item.horas_nocturnas, //hoja1.Cells["I5:I5"].Value = "HORAS NOCTURNAS";
                                item.descuento_medico, //hoja1.Cells["J5:J5"].Value = "DESCUENTO MEDICO";
                                item.feriados, //hoja1.Cells["K5:K5"].Value = "FERIADOS";
                                item.subsidios,//hoja1.Cells["L5:L5"].Value = "SUBSIDIOS";
                                item.buc,//hoja1.Cells["M5:M5"].Value = "BUC";
                                item.bono_altitud,//hoja1.Cells["N5:N5"].Value = "BONO ALTITUD";
                                item.indemnizacion,//hoja1.Cells["O5:O5"].Value = "INDEMNIZACIÓN";
                                item.dominical,//hoja1.Cells["P5:P5"].Value = "DOMINICAL";
                                item.bonificacion_extraordinaria,//hoja1.Cells["Q5:Q5"].Value = "BONIFICA. EXTRA.";
                                item.bonificacion_alta_especial,//hoja1.Cells["R5:R5"].Value = "BONIFICA. ALTA ESPECIAL";
                                item.vacaciones_truncas,//hoja1.Cells["S5:S5"].Value = "VACACIONES TRUNCAS";
                                item.asignacion_escolar,//hoja1.Cells["T5:T5"].Value = "ASIGNACIÓN ESCOLAR";
                                item.bono_por_altura,//hoja1.Cells["U5:U5"].Value = "BONO POR ALTURA";
                                item.devolucion_5ta,//hoja1.Cells["V5:V5"].Value = "DEVOLUCIÓN 5TA";
                                item.gratificacion_proporcional,//hoja1.Cells["W5:W5"].Value = "GRATIFICACIÓN PROPORCIONAL";
                                item.bono_transporte,//hoja1.Cells["X5:X5"].Value = "BONO TRANSPORTE";
                                item.totalIngresos,//hoja1.Cells["Y5:Y5"].Value = "TOTAL INGRESOS";
                                item.AFP_obligatoria,//hoja1.Cells["Z5:Z5"].Value = "AFP OBLIGATORIA";
                                item.AFP_voluntaria,//hoja1.Cells["AA5:AA5"].Value = "AFP VOLUNTARIA";
                                item.AFP_comision,//hoja1.Cells["AB5:AB5"].Value = "AFP COMISIÓN";
                                item.AFP_prima,//hoja1.Cells["AC5:AC5"].Value = "AFP PRIMA";
                                item.conafovicer,//hoja1.Cells["AD5:AD5"].Value = "CONAFOVICER";
                                item.essalud_vida,//hoja1.Cells["AE5:AE5"].Value = "ESSALUD VIDA";
                                item.onp,//hoja1.Cells["AF5:AF5"].Value = "ONP";
                                item.renta_5ta,//hoja1.Cells["AG5:AG5"].Value = "RENTA 5TA";
                                item.essalud_aportes,//hoja1.Cells["AH5:AH5"].Value = "ESSALUD APORTES";
                                item.AFP_aportes,//hoja1.Cells["AI5:AI5"].Value = "AFP APORTES";
                                item.totalEgresos,//hoja1.Cells["AJ5:AJ5"].Value = "TOTAL EGRESOS";
                                item.total_pagar//hoja1.Cells["AK5:AK5"].Value = "TOTAL PAGAR";
                            });
                            indexOrden++;
                        }

                        cellData.Add(new object[] {
                                " ",
                                " ",
                                " ",
                                " ",
                                detallesDepartamento.Sum(s => s.basico),
                                detallesDepartamento.Sum(s => s.jornada_semanal),
                                detallesDepartamento.Sum(s => s.horas_extra_60),
                                detallesDepartamento.Sum(s => s.horas_extra_100),
                                detallesDepartamento.Sum(s => s.horas_nocturnas),
                                detallesDepartamento.Sum(s => s.descuento_medico),
                                detallesDepartamento.Sum(s => s.feriados),
                                detallesDepartamento.Sum(s => s.subsidios),
                                detallesDepartamento.Sum(s => s.buc),
                                detallesDepartamento.Sum(s => s.bono_altitud),
                                detallesDepartamento.Sum(s => s.indemnizacion),
                                detallesDepartamento.Sum(s => s.dominical),
                                detallesDepartamento.Sum(s => s.bonificacion_extraordinaria),
                                detallesDepartamento.Sum(s => s.bonificacion_alta_especial),
                                detallesDepartamento.Sum(s => s.vacaciones_truncas),
                                detallesDepartamento.Sum(s => s.asignacion_escolar),
                                detallesDepartamento.Sum(s => s.bono_por_altura),
                                detallesDepartamento.Sum(s => s.devolucion_5ta),
                                detallesDepartamento.Sum(s => s.gratificacion_proporcional),
                                detallesDepartamento.Sum(s => s.bono_transporte),
                                detallesDepartamento.Sum(s => s.totalIngresos),
                                detallesDepartamento.Sum(s => s.AFP_obligatoria),
                                detallesDepartamento.Sum(s => s.AFP_voluntaria),
                                detallesDepartamento.Sum(s => s.AFP_comision),
                                detallesDepartamento.Sum(s => s.AFP_prima),
                                detallesDepartamento.Sum(s => s.conafovicer),
                                detallesDepartamento.Sum(s => s.essalud_vida),
                                detallesDepartamento.Sum(s => s.onp),
                                detallesDepartamento.Sum(s => s.renta_5ta),
                                detallesDepartamento.Sum(s => s.essalud_aportes),
                                detallesDepartamento.Sum(s => s.AFP_aportes),
                                detallesDepartamento.Sum(s => s.totalEgresos),
                                detallesDepartamento.Sum(s => s.total_pagar)
                            });

                        hoja1.Cells[7, 1].LoadFromArrays(cellData);

                        /*
                        var firmaRealizo = GlobalUtils.CrearFirmaDigital(prenomina.id, DocumentosEnum.Prenomina, realizo.id, TipoFirmaEnum.Autorizacion);

                        hoja1.Cells[8 + detallesDepartamento.Count() + 3, 4].Value = firmaRealizo;
                        hoja1.Cells[9 + detallesDepartamento.Count() + 3, 4].Value = "___________________________";
                        hoja1.Cells[10 + detallesDepartamento.Count() + 3, 4].Value = "ELABORÓ";
                        hoja1.Cells[11 + detallesDepartamento.Count() + 3, 4].Value = string.Format("{0} {1} {2}", realizo.nombre, realizo.apellidoPaterno, realizo.apellidoMaterno);
                        hoja1.Cells[9 + detallesDepartamento.Count() + 3, 4].Style.Font.Bold = true;
                        hoja1.Cells[9 + detallesDepartamento.Count() + 3, 4].Style.Font.Size = 10;
                        hoja1.Cells[9 + detallesDepartamento.Count() + 3, 4].Style.Font.Name = "Arial";
                        hoja1.Cells[10 + detallesDepartamento.Count() + 3, 4].Style.Font.Bold = true;
                        hoja1.Cells[10 + detallesDepartamento.Count() + 3, 4].Style.Font.Size = 10;
                        hoja1.Cells[10 + detallesDepartamento.Count() + 3, 4].Style.Font.Name = "Arial";
                        hoja1.Cells[11 + detallesDepartamento.Count() + 3, 4].Style.Font.Bold = true;
                        hoja1.Cells[11 + detallesDepartamento.Count() + 3, 4].Style.Font.Size = 10;
                        hoja1.Cells[11 + detallesDepartamento.Count() + 3, 4].Style.Font.Name = "Arial";

                        for (int i = 1; i <= autorizantes.Count(); i++)
                        {
                            var cveEmpleado = autorizantes[(i - 1)].aprobadorClave;
                            var usuario = _context.tblP_Usuario.FirstOrDefault(x => x.id == cveEmpleado);
                            var firmaAutorizante = "";
                            if (autorizantes[(i - 1)].firma != null) firmaAutorizante = autorizantes[(i - 1)].firma;
                            hoja1.Cells[8 + detallesDepartamento.Count() + 3, (i + 1) * 4].Value = firmaAutorizante;
                            hoja1.Cells[9 + detallesDepartamento.Count() + 3, (i + 1) * 4].Value = "___________________________";
                            hoja1.Cells[10 + detallesDepartamento.Count() + 3, (i + 1) * 4].Value = "REVISÓ/AUTORIZÓ";
                            hoja1.Cells[11 + detallesDepartamento.Count() + 3, (i + 1) * 4].Value = string.Format("{0} {1} {2}", usuario.nombre, usuario.apellidoPaterno, usuario.apellidoMaterno);
                            hoja1.Cells[9 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Bold = true;
                            hoja1.Cells[9 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Size = 10;
                            hoja1.Cells[9 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Name = "Arial";
                            hoja1.Cells[10 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Bold = true;
                            hoja1.Cells[10 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Size = 10;
                            hoja1.Cells[10 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Name = "Arial";
                            hoja1.Cells[11 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Bold = true;
                            hoja1.Cells[11 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Size = 10;
                            hoja1.Cells[11 + detallesDepartamento.Count() + 3, (i + 1) * 4].Style.Font.Name = "Arial";
                        }
                        */

                        hoja1.View.ZoomScale = 82;
                        hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 30].Style.Font.Size = 10;
                        hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 30].Style.Font.Name = "Arial";

                        hoja1.Cells[6 + detallesDepartamento.Count(), 1, 6 + detallesDepartamento.Count(), 24].Style.Font.Size = 10;
                        hoja1.Cells[6 + detallesDepartamento.Count(), 1, 6 + detallesDepartamento.Count(), 24].Style.Font.Bold = true;
                        hoja1.Cells[6 + detallesDepartamento.Count(), 1, 6 + detallesDepartamento.Count(), 24].Style.Font.Name = "Arial";

                        hoja1.Cells[7 + detallesDepartamento.Count(), 1, 7 + detallesDepartamento.Count(), 4].Merge = true;
                        hoja1.Cells[7 + detallesDepartamento.Count(), 1, 7 + detallesDepartamento.Count(), 4].Value = "Totales";
                        hoja1.Cells[7, 1, 7 + detallesDepartamento.Count(), 38].Style.Font.Size = 10;
                        hoja1.Cells[7, 1, 7 + detallesDepartamento.Count(), 38].Style.Font.Bold = true;
                        hoja1.Cells[7, 1, 7 + detallesDepartamento.Count(), 38].Style.Font.Name = "Arial";
                        hoja1.Cells[7, 1, 7 + detallesDepartamento.Count(), 38].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[7, 1, 7 + detallesDepartamento.Count(), 38].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[7, 1, 7 + detallesDepartamento.Count(), 38].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[7, 1, 7 + detallesDepartamento.Count(), 38].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[7, 1, 6 + detallesDepartamento.Count(), 38].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[7, 1, 6 + detallesDepartamento.Count(), 38].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[7, 1, 6 + detallesDepartamento.Count(), 38].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[7, 1, 6 + detallesDepartamento.Count(), 38].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[7, 1, 6 + detallesDepartamento.Count(), 38].Style.Font.Size = 10;
                        hoja1.Cells[7, 1, 6 + detallesDepartamento.Count(), 38].Style.Font.Bold = false;
                        hoja1.Cells[7, 1, 6 + detallesDepartamento.Count(), 38].Style.Font.Name = "Arial";
                        hoja1.Cells[7, 1, 6 + detallesDepartamento.Count(), 38].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        hoja1.Cells[7, 1, 6 + detallesDepartamento.Count(), 38].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        hoja1.Cells[7, 4, 7 + detallesDepartamento.Count(), 38].Style.Numberformat.Format = "$###,###,##0.00";
                        hoja1.Cells[7, 8, 7 + detallesDepartamento.Count(), 38].Style.Numberformat.Format = "$###,###,##0.00";

                        hoja1.Cells[7 + detallesDepartamento.Count(), 5, 7 + detallesDepartamento.Count(), 38].Style.Font.Color.SetColor(Color.Black);
                        hoja1.Cells[7 + detallesDepartamento.Count(), 5, 7 + detallesDepartamento.Count(), 38].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[7 + detallesDepartamento.Count(), 5, 7 + detallesDepartamento.Count(), 38].Style.Fill.BackgroundColor.SetColor(Color.LightGray);

                        hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 38].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 38].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 38].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[5, 1, 5 + detallesDepartamento.Count(), 38].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                        for (int i = 0; i <= detallesDepartamento.Count() + 1; i++) { hoja1.Row(i + 5).Height = 40; }

                        hoja1.Cells[7, 1, 6 + detallesDepartamento.Count(), 38].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        hoja1.Cells[7, 1, 6 + detallesDepartamento.Count(), 38].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                        string totalPagoFinal = "0";

                        double totalPago = 0;
                        totalPago = Convert.ToDouble(totalPagoFinal);

                        string convertirTotalPago = toText(totalPago);

                        /*
                        hoja1.Cells[10 + detallesDepartamento.Count(), 5, 10 + detallesDepartamento.Count(), 14].Merge = true;
                        hoja1.Cells[10 + detallesDepartamento.Count(), 5, 10 + detallesDepartamento.Count(), 14].Value = string.Format("{0} {1}", convertirTotalPago, "M/Cte.");
                        hoja1.Cells[10 + detallesDepartamento.Count(), 5, 10 + detallesDepartamento.Count(), 14].Style.Font.Color.SetColor(Color.Black);
                        hoja1.Cells[10 + detallesDepartamento.Count(), 5, 10 + detallesDepartamento.Count(), 14].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        hoja1.Cells[10 + detallesDepartamento.Count(), 5, 10 + detallesDepartamento.Count(), 14].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                        hoja1.Cells[10 + detallesDepartamento.Count(), 5, 10 + detallesDepartamento.Count(), 14].Style.Font.Size = 14;
                        hoja1.Cells[10 + detallesDepartamento.Count(), 5, 10 + detallesDepartamento.Count(), 14].Style.Font.Bold = true;
                        hoja1.Cells[10 + detallesDepartamento.Count(), 5, 10 + detallesDepartamento.Count(), 14].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[10 + detallesDepartamento.Count(), 5, 10 + detallesDepartamento.Count(), 14].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[10 + detallesDepartamento.Count(), 5, 10 + detallesDepartamento.Count(), 14].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[10 + detallesDepartamento.Count(), 5, 10 + detallesDepartamento.Count(), 14].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        hoja1.Cells[10 + detallesDepartamento.Count(), 5, 10 + detallesDepartamento.Count(), 14].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                        hoja1.Cells[10 + detallesDepartamento.Count(), 5, 10 + detallesDepartamento.Count(), 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        hoja1.Cells[5, 1, 6 + detallesDepartamento.Count(), 60].AutoFitColumns();
                        */

                        excel.Compression = CompressionLevel.BestSpeed;
                    }

                    var bytes = new MemoryStream();
                    using (var exportData = new MemoryStream())
                    {
                        excel.SaveAs(exportData);
                        bytes = exportData;
                    }

                    return bytes;
                }
                #endregion
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                return null;
            }
        }

        #region CATALOGO AFP
        public Dictionary<string, object> GetRegistrosPeruAFP()
        {
            using (var _ctx = new MainContext(vSesiones.sesionEmpresaActual))
            {
                resultado = new Dictionary<string, object>();
                try
                {
                    List<PeruAFPDTO> lstRegistrosAFP = _ctx.Select<PeruAFPDTO>(new DapperDTO
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = @"SELECT t1.id, t1.anio, t1.numMes, t2.afp, t1.comisionSobreFlujo, t1.comisionAnualSobreSaldo, t1.primaDeSeguros, 
	                                        t1.aporteObligatorioFondoPensiones, t1.remuneracionMaximaAsegurable
			                                    FROM tblC_Nom_PeruAFP AS t1
				                                    INNER JOIN tblC_Nom_CatPeruAFP AS t2 ON t2.id = t1.FK_AFP
					                                    WHERE t1.registroActivo = @registroActivo AND t2.registroActivo = @registroActivo",
                        parametros = new { registroActivo = true }
                    }).ToList();

                    foreach (var item in lstRegistrosAFP)
                    {
                        item.mes = new DateTime(item.anio, item.numMes, 01).ToString("MMMM");
                    }

                    resultado.Add(SUCCESS, true);
                    resultado.Add(ITEMS, lstRegistrosAFP);
                }
                catch (Exception e)
                {
                    var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                }
                return resultado;
            }
        }

        public Dictionary<string, object> CrearEditarRegistroPeruAFP(PeruAFPDTO objParamsDTO)
        {
            using (var _ctx = new MainContext(vSesiones.sesionEmpresaActual))
            {
                using (var dbContextTransaction = _ctx.Database.BeginTransaction())
                {
                    resultado = new Dictionary<string, object>();
                    try
                    {
                        if (objParamsDTO.numMes <= 0) { throw new Exception("Es necesario seleccionar un mes."); }

                        tblC_Nom_PeruAFP objRegistroAFP = _ctx.tblC_Nom_PeruAFP.Where(w => w.id == objParamsDTO.id && w.registroActivo).FirstOrDefault();
                        if (objRegistroAFP == null)
                        {
                            objRegistroAFP = new tblC_Nom_PeruAFP();
                            objRegistroAFP.FK_AFP = objParamsDTO.FK_AFP;
                            objRegistroAFP.anio = objParamsDTO.anio;
                            objRegistroAFP.numMes = objParamsDTO.numMes;
                            objRegistroAFP.comisionSobreFlujo = objParamsDTO.comisionSobreFlujo;
                            objRegistroAFP.comisionAnualSobreSaldo = objParamsDTO.comisionAnualSobreSaldo;
                            objRegistroAFP.primaDeSeguros = objParamsDTO.primaDeSeguros;
                            objRegistroAFP.aporteObligatorioFondoPensiones = objParamsDTO.aporteObligatorioFondoPensiones;
                            objRegistroAFP.remuneracionMaximaAsegurable = objParamsDTO.remuneracionMaximaAsegurable;
                            objRegistroAFP.FK_UsuarioCreacion = vSesiones.sesionUsuarioDTO.id;
                            objRegistroAFP.fechaCreacion = DateTime.Now;
                            objRegistroAFP.registroActivo = true;
                            _ctx.tblC_Nom_PeruAFP.Add(objRegistroAFP);
                            _ctx.SaveChanges();
                        }
                        else
                        {
                            objRegistroAFP.comisionSobreFlujo = objParamsDTO.comisionSobreFlujo;
                            objRegistroAFP.comisionAnualSobreSaldo = objParamsDTO.comisionAnualSobreSaldo;
                            objRegistroAFP.primaDeSeguros = objParamsDTO.primaDeSeguros;
                            objRegistroAFP.aporteObligatorioFondoPensiones = objParamsDTO.aporteObligatorioFondoPensiones;
                            objRegistroAFP.remuneracionMaximaAsegurable = objParamsDTO.remuneracionMaximaAsegurable;
                            objRegistroAFP.FK_UsuarioModificacion = vSesiones.sesionUsuarioDTO.id;
                            objRegistroAFP.fechaModificacion = DateTime.Now;
                            _ctx.SaveChanges();
                        }

                        resultado.Add(SUCCESS, true);
                        resultado.Add(MESSAGE, string.Format("Se ha {0} con éxito", objParamsDTO.id <= 0 ? "registrado" : "actualizado"));
                        dbContextTransaction.Commit();

                        SaveBitacora(0, objParamsDTO.id <= 0 ? (int)AccionEnum.AGREGAR : (int)AccionEnum.ACTUALIZAR, objParamsDTO.id, JsonUtils.convertNetObjectToJson(objParamsDTO));

                    }
                    catch (Exception e)
                    {
                        dbContextTransaction.Rollback();
                        var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                        LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, objParamsDTO.id <= 0 ? AccionEnum.AGREGAR : AccionEnum.ACTUALIZAR, objParamsDTO.id, objParamsDTO);
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, e.Message);
                    }
                    return resultado;
                }
            }
        }

        public Dictionary<string, object> GetRegistroActualizarPeruAFP(PeruAFPDTO objParamsDTO)
        {
            using (var _ctx = new MainContext(vSesiones.sesionEmpresaActual))
            {
                resultado = new Dictionary<string, object>();
                try
                {
                    if (objParamsDTO.id <= 0) { throw new Exception("Ocurrió un error al obtener la información del registro."); }

                    tblC_Nom_PeruAFP objPeruAFP = _ctx.tblC_Nom_PeruAFP.Where(w => w.id == objParamsDTO.id && w.registroActivo).FirstOrDefault();
                    if (objPeruAFP == null)
                        throw new Exception("Ocurrió un error al obtener la información del registro.");

                    resultado.Add(SUCCESS, true);
                    resultado.Add(ITEMS, objPeruAFP);
                }
                catch (Exception e)
                {
                    var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, objParamsDTO.id, objParamsDTO);
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                }
                return resultado;
            }
        }

        public Dictionary<string, object> EliminarRegistroPeruAFP(PeruAFPDTO objParamsDTO)
        {
            using (var _ctx = new MainContext(vSesiones.sesionEmpresaActual))
            {
                using (var dbContextTransaction = _ctx.Database.BeginTransaction())
                {
                    resultado = new Dictionary<string, object>();
                    try
                    {
                        if (objParamsDTO.id <= 0) { throw new Exception("Ocurrió un error al obtener la información del registro a eliminar."); }

                        tblC_Nom_PeruAFP objRegistroAFP = _ctx.tblC_Nom_PeruAFP.Where(w => w.id == objParamsDTO.id && w.registroActivo).FirstOrDefault();
                        if (objRegistroAFP == null)
                            throw new Exception("Ocurrió un error al obtener la información del registro a eliminar.");

                        objRegistroAFP.FK_UsuarioModificacion = vSesiones.sesionUsuarioDTO.id;
                        objRegistroAFP.fechaModificacion = DateTime.Now;
                        objRegistroAFP.registroActivo = false;
                        _ctx.SaveChanges();

                        resultado.Add(SUCCESS, true);
                        resultado.Add(MESSAGE, "Se ha eliminado con éxito el registro");
                        dbContextTransaction.Commit();

                        SaveBitacora(0, (int)AccionEnum.ELIMINAR, objParamsDTO.id, JsonUtils.convertNetObjectToJson(objParamsDTO));
                    }
                    catch (Exception e)
                    {
                        dbContextTransaction.Rollback();
                        var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                        LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.ELIMINAR, objParamsDTO.id, objParamsDTO);
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, e.Message);
                    }
                    return resultado;
                }
            }
        }

        public Dictionary<string, object> FillCboCatAFP()
        {
            using (var _ctx = new MainContext(vSesiones.sesionEmpresaActual))
            {
                resultado = new Dictionary<string, object>();
                try
                {
                    #region FILL CBO
                    List<ComboDTO> lstCatAFP = _context.Select<ComboDTO>(new DapperDTO
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = @"SELECT id AS VALUE, afp AS TEXT FROM tblC_Nom_CatPeruAFP WHERE registroActivo = @registroActivo",
                        parametros = new { registroActivo = true }
                    }).ToList();

                    resultado.Add(SUCCESS, true);
                    resultado.Add(ITEMS, lstCatAFP);
                    #endregion
                }
                catch (Exception e)
                {
                    var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.FILLCOMBO, 0, null);
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                }
                return resultado;
            }
        }

        public Dictionary<string, object> SetAnioMes()
        {
            resultado = new Dictionary<string, object>();
            try
            {
                resultado.Add(SUCCESS, true);
                resultado.Add("anio", DateTime.Now.Year);
                resultado.Add("mes", DateTime.Now.Month);
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }
            return resultado;
        }
        #endregion

        #endregion

    }
}
