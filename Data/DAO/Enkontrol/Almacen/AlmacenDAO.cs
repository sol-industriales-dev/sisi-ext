using Core.DAO.Enkontrol.Almacen;
using Core.DTO;
using Core.DTO.Almacen;
using Core.DTO.Enkontrol;
using Core.DTO.Enkontrol.Alamcen;
using Core.DTO.Enkontrol.OrdenCompra;
using Core.DTO.Enkontrol.Requisicion;
using Core.DTO.Enkontrol.Tablas;
using Core.DTO.Principal.Generales;
using Core.DTO.Utils.Data;
using Core.Entity.Enkontrol.Compras.OrdenCompra;
using Core.Entity.Enkontrol.Compras.Requisicion;
using Core.Enum.Multiempresa;
using Core.Enum.Principal.Bitacoras;
using Data.EntityFramework;
using Data.EntityFramework.Context;
using Data.EntityFramework.Generic;
using Data.Factory.Principal.Usuarios;
using OfficeOpenXml;
using OfficeOpenXml.Drawing;
using OfficeOpenXml.Style;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Odbc;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using Infrastructure.Utils;
using Core.DTO.Enkontrol.Tablas.Almacen;
using Core.Entity.Administrativo.Almacen;
using Core.Entity.Principal.Multiempresa;
using Core.Enum.Enkontrol.Compras;
using Core.Enum.Enkontrol;
using Core.Enum.Principal;
using Core.DTO.Administracion.Seguridad.Capacitacion;
using Core.Entity.StarSoft.Requisiciones;
using Core.Entity.StarSoft.Almacen;
using Core.Entity.Enkontrol.Compras;
using Core.DTO.Utils.DataTable;
using Newtonsoft.Json;
using Data.Factory.Enkontrol.Compras;
using Core.Entity.Maquinaria.Catalogo;
using Core.Entity.Maquinaria.StandBy;
using Core.Enum.Maquinaria.StandBy;
using System.Net.Mail;
using Core.Enum.RecursosHumanos.CatNotificantes;
using Core.DTO.Maquinaria.StandBy;
//using Core.Entity.StarSoft.Usuario;

namespace Data.DAO.Enkontrol.Almacen
{
    public class AlmacenDAO : GenericDAO<tblAlm_Movimientos>, IAlmacenDAO
    {
        UsuarioFactoryServices ufs = new UsuarioFactoryServices();

        private bool productivo = Convert.ToString(System.Web.Configuration.WebConfigurationManager.AppSettings["enkontrolProductivo"]) == "1";

        private OdbcConnection checkConexionProductivo()
        {
            if (productivo)
            {
                return new Conexion().Connect();
            }
            else
            {
                return new Conexion().ConnectPrueba();
            }
        }

        private OdbcConnection checkConexionProductivoRH()
        {
            if (productivo)
            {
                return new Conexion().ConnectRH();
            }
            else
            {
                return new Conexion().ConnectPruebaRH();
            }
        }
        private OdbcConnection checkConexionProductivoRHConstruplan()
        {
            if (productivo)
            {
                return new Conexion().ConnectRHConstruplan();
            }
            else
            {
                return new Conexion().ConnectPruebaRH();
            }
        }

        private dynamic consultaCheckProductivo(string consulta)
        {
            if (productivo)
            {
                return _contextEnkontrol.WhereComprasOrigen(consulta);
            }
            else
            {
                return _contextEnkontrolPrueba.Where(consulta);
            }
        }

        private dynamic consultaCheckProductivoRH(string consulta)
        {
            if (productivo)
            {
                return ContextEnKontrolNomina.Where(consulta);
            }
            else
            {
                return ContextEnKontrolNominaPrueba.Where(consulta);
            }
        }
        private dynamic consultaCheckProductivoRHConstruplan(string consulta)
        {
            if (productivo)
            {
                return ContextNominaConstruplan.Where(consulta);
            }
            else
            {
                return ContextEnKontrolNominaPrueba.Where(consulta);
            }
        }

        private List<dynamic> consultaListCheckProductivo(List<string> listString)
        {
            if (productivo)
            {
                return _contextEnkontrol.Where(listString);
            }
            else
            {
                return _contextEnkontrolPrueba.Where(listString);
            }
        }

        public List<ComboDTO> FillComboCC()
        {
            try
            {
                return (List<ComboDTO>)consultaCheckProductivo(
                    string.Format(@"SELECT 
                                        cc AS Value, 
                                        cc + '-' + descripcion AS Text 
                                    FROM cc 
                                    WHERE st_ppto != 'T' 
                                    ORDER BY cc")).ToObject<List<ComboDTO>>();
            }
            catch (Exception)
            {
                return new List<ComboDTO>();
            }
        }
        public List<ComboDTO> FillComboCCTodos()
        {
            try
            {
                return (List<ComboDTO>)consultaCheckProductivo(
                    string.Format(@"SELECT 
                                        cc AS Value, 
                                        cc + '-' + descripcion AS Text 
                                    FROM cc 
                                    ORDER BY cc")).ToObject<List<ComboDTO>>();
            }
            catch (Exception)
            {
                return new List<ComboDTO>();
            }
        }

        public List<ValuacionDTO> getInsumos(int almacenID, string cc)
        {
            var existenciasEK = consultaCheckProductivo(
                    string.Format(@"SELECT 
                                        a.insumo, 
                                        i.tipo, 
                                        i.grupo, 
                                        a.almacen, 
                                        i.descripcion AS descInsumo, 
                                        ( 
                                           SELECT 
                                              TOP 1 g.descripcion 
                                           FROM 
                                              grupos_insumo g 
                                           WHERE 
                                              g.grupo_insumo = i.grupo 
                                              AND g.tipo_insumo = i.tipo 
                                        ) 
                                        AS descripcion, 
                                        ( 
                                           SELECT 
                                              TOP 1 Replace(Replace(n.descripcion, 'ALMACEN ', ''), 'DE ', '') 
                                           FROM 
                                              si_almacen n 
                                           WHERE 
                                              n.almacen = a.almacen 
                                        ) 
                                        AS nomAlmacen, 
                                        Sum( 
                                            CASE 
                                                WHEN 
                                                   existencia_ent_ini IS NULL 
                                                THEN 
                                                   0 
                                                ELSE 
                                                   existencia_ent_ini 
                                            END 
                                                + existencia_ent_ene + existencia_ent_feb + existencia_ent_mar + existencia_ent_abr + existencia_ent_may 
                                                + existencia_ent_jun + existencia_ent_jul + existencia_ent_ago + existencia_ent_sep + existencia_ent_oct 
                                                + existencia_ent_nov + existencia_ent_dic 
                                        ) - 
                                        Sum( 
                                            CASE 
                                               WHEN 
                                                  existencia_sal_ini IS NULL 
                                               THEN 
                                                  0 
                                               ELSE 
                                                  existencia_sal_ini 
                                            END 
                                            + existencia_sal_ene + existencia_sal_feb + existencia_sal_mar + existencia_sal_abr + existencia_sal_may 
                                            + existencia_sal_jun + existencia_sal_jul + existencia_sal_ago + existencia_sal_sep + existencia_sal_oct 
                                            + existencia_sal_nov + existencia_sal_dic
                                        ) 
                                        AS cantidad 
                                    FROM 
                                       si_acumula_almacen a 
                                       INNER JOIN 
                                          insumos i 
                                          ON a.insumo = i.insumo 
                                    WHERE 
                                        a.ano = 2019 
                                        AND a.almacen = {0} 
                                        AND a.cc = '{1}' 
                                    GROUP BY 
                                       a.insumo, i.tipo, i.grupo, descripcion, a.almacen, descinsumo 
                                    ORDER BY 
                                        cantidad DESC", almacenID, cc));

            List<ValuacionDTO> resultado = new List<ValuacionDTO>();

            if (existenciasEK != null)
            {
                var stockMinimo = _context.tblAlm_StockMinimo.Where(x => x.estatus && x.almacenID == almacenID).ToList();
                var solicitadoPendiente = _context.tblAlm_Traspaso.Where(x => x.estatusRegistro && x.ccOrigen == cc && x.almacenOrigen == almacenID && !x.autorizado).ToList();

                var existencias = (List<ValuacionDTO>)existenciasEK.ToObject<List<ValuacionDTO>>();

                resultado.AddRange(existencias.Where(w => w.cantidad > 0).Select(x => new ValuacionDTO
                {
                    insumo = x.insumo,
                    descInsumo = x.descInsumo,
                    cantidad = x.cantidad,
                    minimo = stockMinimo.Where(y => y.insumo == x.insumo).Select(z => z.stockMinimo).FirstOrDefault() ?? "",
                    minimoDesc = stockMinimo.Where(y => y.insumo == x.insumo).Select(z => z.stockMinimo).FirstOrDefault() ?? "",
                    solicitadoPendiente = solicitadoPendiente.Where(y => y.insumo == x.insumo).Select(z => z.cantidadTraspasar - z.cantidadCancelada).ToList().Sum()
                }));
            }

            return resultado;
        }

        public bool guardarTraspasos(string ccOrigen, int almacenOrigen, string ccDestino, int almacenDestino, string comentarios, List<ValuacionDTO> insumos)
        {
            using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    var folioInterno = (_context.tblAlm_Traspaso.Where(x => x.ccOrigen == ccOrigen).ToList().Count > 0) ?
                            (_context.tblAlm_Traspaso.Where(x => x.ccOrigen == ccOrigen).Max(x => x.folioInterno) + 1) : 1;

                    foreach (var ins in insumos)
                    {
                        _context.tblAlm_Traspaso.Add(new tblAlm_Traspaso
                        {
                            ccOrigen = ccOrigen,
                            almacenOrigen = almacenOrigen,
                            ccDestino = ccDestino,
                            almacenDestino = almacenDestino,
                            insumo = ins.insumo,
                            cantidadTraspasar = ins.cantidadTraspasar,
                            cantidadCancelada = 0,
                            fecha = DateTime.Now.Date,
                            autorizado = false,
                            rechazado = false,
                            folioInterno = folioInterno,
                            comentarios = comentarios ?? "",
                            comentariosGestion = "",
                            estado = "",
                            area_alm = ins.area_alm ?? "",
                            lado_alm = ins.lado_alm ?? "",
                            estante_alm = ins.estante_alm ?? "",
                            nivel_alm = ins.nivel_alm ?? "",
                            estatusRegistro = true
                        });
                    }

                    _context.SaveChanges();
                    dbSigoplanTransaction.Commit();

                    return true;
                }
                catch (Exception e)
                {
                    dbSigoplanTransaction.Rollback();

                    LogError(12, 0, "AlmacenController", "guardarTraspasos", e, AccionEnum.AGREGAR, 0, new { ccOrigen = ccOrigen, almacenOrigen = almacenOrigen, ccDestino = ccDestino, almacenDestino = almacenDestino, comentarios = comentarios, insumos = insumos });

                    return false;
                }
            }
        }

        public Dictionary<string, object> getTraspasosPendientes(string ccOrigen, int almacenOrigen, string ccDestino, int almacenDestino, int folioInterno)
        {
            var result = new Dictionary<string, object>();

            try
            {
                var centrosCosto = (List<ComboDTO>)consultaCheckProductivo(
                        string.Format(@"SELECT 
                                            cc AS Value, 
                                            descripcion AS Text 
                                        FROM cc 
                                        WHERE st_ppto != 'T' 
                                        ORDER BY Text ASC")).ToObject<List<ComboDTO>>();

                var almacenes = (List<ComboDTO>)consultaCheckProductivo(
                    string.Format(@"SELECT 
                                        alm.almacen AS Value, 
                                        alm.descripcion AS Text 
                                    FROM si_almacen alm 
                                    ORDER BY Text ASC")).ToObject<List<ComboDTO>>();



                var traspasosPendientes = _context.tblAlm_Traspaso.ToList().Where(x =>
                        x.estatusRegistro &&
                        !x.autorizado &&
                        !x.rechazado &&
                        (ccOrigen != "0" ? x.ccOrigen == ccOrigen : true) &&
                        (almacenOrigen != 0 ? x.almacenOrigen == almacenOrigen : true) &&
                        (ccDestino != "0" ? x.ccDestino == ccDestino : true) &&
                        (almacenDestino != 0 ? x.almacenDestino == almacenDestino : true) &&
                        (folioInterno > 0 ? x.folioInterno == folioInterno : true)
                    ).ToList();

                if (traspasosPendientes.Count > 0)
                {
                    var lstInsumos = string.Join(", ", traspasosPendientes.Select(x => x.insumo));
                    var insumosDesc = (List<ComboDTO>)consultaCheckProductivo(
                        string.Format(@"SELECT 
                                        i.insumo AS Value, 
                                        i.descripcion AS Text 
                                    FROM insumos i 
                                    WHERE i.insumo IN ({0})", lstInsumos)).ToObject<List<ComboDTO>>();

                    var data = traspasosPendientes.Select(y => new
                    {
                        folioInterno = y.folioInterno,
                        folioInternoString = fillNo(y.folioInterno.ToString(), 8),
                        ccOrigen = y.ccOrigen,
                        ccOrigenDesc = centrosCosto.Where(z => z.Value == y.ccOrigen).Select(w => w.Value + "-" + w.Text).FirstOrDefault() ?? "",
                        almacenOrigen = y.almacenOrigen,
                        almacenOrigenDesc = almacenes.Where(z => z.Value == y.almacenOrigen.ToString()).Select(w => w.Value + "-" + w.Text).FirstOrDefault() ?? "",
                        ccDestino = y.ccDestino,
                        ccDestinoDesc = centrosCosto.Where(z => z.Value == y.ccDestino).Select(w => w.Value + "-" + w.Text).FirstOrDefault() ?? "",
                        almacenDestino = y.almacenDestino,
                        almacenDestinoDesc = almacenes.Where(z => z.Value == y.almacenDestino.ToString()).Select(w => w.Value + "-" + w.Text).FirstOrDefault() ?? "",
                        fecha = y.fecha,
                        insumo = y.insumo,
                        descInsumo = y.insumo + " - " + insumosDesc.Where(z => z.Value == y.insumo.ToString()).Select(w => w.Text).FirstOrDefault() ?? "",
                        cantidad = y.cantidadTraspasar - y.cantidadCancelada,
                        comentarios = y.comentarios,
                        area_alm = y.area_alm,
                        lado_alm = y.lado_alm,
                        estante_alm = y.estante_alm,
                        nivel_alm = y.nivel_alm
                    }).ToList();

                    result.Add("data", data);
                    result.Add(SUCCESS, true);
                }
                else
                {
                    result.Add("data", null);
                    result.Add(SUCCESS, true);
                }
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return result;
        }

        public Dictionary<string, object> getTraspasosPendientesOrigen(string ccOrigen, int almacenOrigen, string ccDestino, int almacenDestino, int numeroRequisicion)
        {
            var result = new Dictionary<string, object>();

            try
            {
                var centrosCosto = (List<ComboDTO>)consultaCheckProductivo(
                        string.Format(@"SELECT 
                                            cc AS Value, 
                                            descripcion AS Text 
                                        FROM cc 
                                        WHERE st_ppto != 'T' 
                                        ORDER BY Text ASC")).ToObject<List<ComboDTO>>();

                var almacenes = (List<ComboDTO>)consultaCheckProductivo(
                    string.Format(@"SELECT 
                                        alm.almacen AS Value, 
                                        alm.descripcion AS Text 
                                    FROM si_almacen alm 
                                    ORDER BY Text ASC")).ToObject<List<ComboDTO>>();

                var listaSurtidoTraspaso = _context.tblCom_SurtidoDet.Where(x =>
                    x.estatus &&
                    x.estadoSurtido == "R" &&
                    x.tipoSurtidoDetalle == "AE" &&
                    (ccOrigen != "0" ? x.cc == ccOrigen : true) && //Verificar si se ocupa este filtro.
                    (almacenOrigen != 0 ? x.almacenOrigenID == almacenOrigen : true) &&
                    (ccDestino != "0" ? x.cc == ccDestino : true) && //Verificar si se ocupa este filtro.
                    (almacenDestino != 0 ? x.almacenDestinoID == almacenDestino : true) &&
                    (numeroRequisicion != 0 ? x.numero == numeroRequisicion : true)
                ).ToList();

                if (listaSurtidoTraspaso.Count > 0)
                {
                    var lstInsumos = string.Join(", ", listaSurtidoTraspaso.Select(x => x.insumo));
                    var insumosDesc = (List<ComboDTO>)consultaCheckProductivo(
                        string.Format(@"SELECT 
                                        i.insumo AS Value, 
                                        i.descripcion AS Text 
                                    FROM insumos i 
                                    WHERE i.insumo IN ({0})", lstInsumos)).ToObject<List<ComboDTO>>();

                    var data = listaSurtidoTraspaso.Select(y => new
                    {
                        numeroRequisicion = y.numero,
                        cc = y.cc,
                        ccDesc = centrosCosto.Where(z => z.Value == y.cc).Select(w => w.Value + "-" + w.Text).FirstOrDefault() ?? "",
                        almacenOrigen = y.almacenOrigenID,
                        almacenOrigenDesc = almacenes.Where(z => z.Value == y.almacenOrigenID.ToString()).Select(w => w.Value + "-" + w.Text).FirstOrDefault() ?? "",
                        almacenDestino = y.almacenDestinoID,
                        almacenDestinoDesc = almacenes.Where(z => z.Value == y.almacenDestinoID.ToString()).Select(w => w.Value + "-" + w.Text).FirstOrDefault() ?? "",
                        fecha = y.fecha,
                        insumo = y.insumo,
                        insumoDesc = y.insumo + " - " + insumosDesc.Where(z => z.Value == y.insumo.ToString()).Select(w => w.Text).FirstOrDefault() ?? "",
                        cantidad = y.cantidad
                    }).ToList();

                    result.Add("data", data);
                    result.Add(SUCCESS, true);
                }
                else
                {
                    result.Add("data", null);
                    result.Add(SUCCESS, true);
                }
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return result;
        }

        public Dictionary<string, object> getTraspasosRechazados(string ccOrigen, int almacenOrigen, string ccDestino, int almacenDestino, int folioInterno)
        {
            var result = new Dictionary<string, object>();

            try
            {
                var centrosCosto = (List<ComboDTO>)consultaCheckProductivo(
                        string.Format(@"SELECT 
                                            cc AS Value, 
                                            descripcion AS Text 
                                        FROM cc 
                                        WHERE st_ppto != 'T' 
                                        ORDER BY Text ASC")).ToObject<List<ComboDTO>>();

                var almacenes = (List<ComboDTO>)consultaCheckProductivo(
                    string.Format(@"SELECT 
                                        alm.almacen AS Value, 
                                        alm.descripcion AS Text 
                                    FROM si_almacen alm 
                                    ORDER BY Text ASC")).ToObject<List<ComboDTO>>();



                var traspasosRechazados = _context.tblAlm_Traspaso.Where(x =>
                        x.estatusRegistro &&
                            //x.rechazado &&
                        x.cantidadCancelada > 0 &&
                        (ccOrigen != "0" ? x.ccOrigen == ccOrigen : true) &&
                        (almacenOrigen != 0 ? x.almacenOrigen == almacenOrigen : true) &&
                        (ccDestino != "0" ? x.ccDestino == ccDestino : true) &&
                        (almacenDestino != 0 ? x.almacenDestino == almacenDestino : true) &&
                        (folioInterno > 0 ? x.folioInterno == folioInterno : true)
                    ).ToList();

                if (traspasosRechazados.Count > 0)
                {
                    var lstInsumos = string.Join(", ", traspasosRechazados.Select(x => x.insumo));
                    var insumosDesc = (List<ComboDTO>)consultaCheckProductivo(
                        string.Format(@"SELECT 
                                            i.insumo AS Value, 
                                            i.descripcion AS Text 
                                        FROM insumos i 
                                        WHERE i.insumo IN ({0})", lstInsumos)).ToObject<List<ComboDTO>>();

                    var data = traspasosRechazados.Select(y => new
                    {
                        folioInterno = y.folioInterno,
                        folioInternoString = fillNo(y.folioInterno.ToString(), 8),
                        ccOrigen = y.ccOrigen,
                        ccOrigenDesc = centrosCosto.Where(z => z.Value == y.ccOrigen).Select(w => w.Value + "-" + w.Text).FirstOrDefault() ?? "",
                        almacenOrigen = y.almacenOrigen,
                        almacenOrigenDesc = almacenes.Where(z => z.Value == y.almacenOrigen.ToString()).Select(w => w.Value + "-" + w.Text).FirstOrDefault() ?? "",
                        ccDestino = y.ccDestino,
                        ccDestinoDesc = centrosCosto.Where(z => z.Value == y.ccDestino).Select(w => w.Value + "-" + w.Text).FirstOrDefault() ?? "",
                        almacenDestino = y.almacenDestino,
                        almacenDestinoDesc = almacenes.Where(z => z.Value == y.almacenDestino.ToString()).Select(w => w.Value + "-" + w.Text).FirstOrDefault() ?? "",
                        fecha = y.fecha,
                        insumo = y.insumo,
                        descInsumo = y.insumo + " - " + insumosDesc.Where(z => z.Value == y.insumo.ToString()).Select(w => w.Text).FirstOrDefault() ?? "",
                        cantidad = y.cantidadCancelada,
                        comentarios = y.comentarios,
                        comentariosGestion = y.comentariosGestion,
                        area_alm = y.area_alm,
                        lado_alm = y.lado_alm,
                        estante_alm = y.estante_alm,
                        nivel_alm = y.nivel_alm
                    }).ToList();

                    result.Add("data", data);
                    result.Add(SUCCESS, true);
                }
                else
                {
                    result.Add("data", null);
                    result.Add(SUCCESS, true);
                }
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return result;
        }

        public Dictionary<string, object> guardarAutorizacionesTraspasos(List<TraspasoDTO> listaAutorizados, bool excelCargado, bool esDirecto = false)
        {
            var result = new Dictionary<string, object>();

            var empleado = 0;
            var usuarioSigoplan = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

            if (usuarioSigoplan != null)
            {
                empleado = usuarioSigoplan.empleado;
            }

            switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
            {
                case EmpresaEnum.Peru:
                    {
                        #region PERÚ
                        var _orden_ct = 0;

                        using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                        {
                            using (var dbStarsoft = new MainContextPeruStarSoft003BDCOMUN())
                            {
                                using (var dbStarsoftTransaction = dbStarsoft.Database.BeginTransaction())
                                {
                                    try
                                    {
                                        var groupAutorizados = listaAutorizados.GroupBy(x => new
                                        {
                                            x.folioInterno,
                                            x.ccOrigen,
                                            x.almacenOrigen,
                                            x.ccDestino,
                                            x.almacenDestino
                                        })
                                        .Select(grupo => new
                                        {
                                            folioInterno = grupo.Key.folioInterno,
                                            ccOrigen = grupo.Key.ccOrigen,
                                            almacenOrigen = grupo.Key.almacenOrigen,
                                            ccDestino = grupo.Key.ccDestino,
                                            almacenDestino = grupo.Key.almacenDestino,
                                            renglones = grupo.ToList()
                                        });

                                        #region Validaciones Iniciales
                                        if (listaAutorizados.Any(x => x.almacenOrigen == 0) || listaAutorizados.Any(x => x.ccOrigen == null || x.ccOrigen == ""))
                                        {
                                            throw new Exception("Debe capturar el origen correcto.");
                                        }

                                        if (listaAutorizados.Any(x => x.almacenDestino == 0) || listaAutorizados.Any(x => x.ccDestino == null || x.ccDestino == ""))
                                        {
                                            throw new Exception("Debe capturar el destino correcto.");
                                        }

                                        #region USUARIO INVENTARIOS STARSOFT
                                        var objUsrStarsoftInventarios = _context.tblAlm_Almacenistas.FirstOrDefault(e => e.id_usuario_sigoplan == vSesiones.sesionUsuarioDTO.id);

                                        string idAlmacenistaStarsoft = "0";

                                        if (objUsrStarsoftInventarios == null)
                                        {
                                            if (vSesiones.sesionUsuarioDTO.idPerfil == 1)
                                            {
                                                idAlmacenistaStarsoft = "1";
                                            }
                                            else
                                            {
                                                throw new Exception("Esta usuario no es un almacenista en el sistema de PERU");
                                            }
                                        }
                                        else
                                        {
                                            idAlmacenistaStarsoft = objUsrStarsoftInventarios.id_usuario_inventarios;
                                        }
                                        #endregion

                                        #region Validación Almacén Activo STARSOFT
                                        string almacenStarsoftOrigen = listaAutorizados[0].almacenOrigen.ToString("D2");
                                        var registroAlmacenOrigen = dbStarsoft.TABALM.FirstOrDefault(e => e.TAALMA == almacenStarsoftOrigen);

                                        if (registroAlmacenOrigen == null)
                                        {
                                            throw new Exception("No se encuentra la información del almacén origen.");
                                        }

                                        string almacenStarsoftDestino = listaAutorizados[0].almacenDestino.ToString("D2");
                                        var registroAlmacenDestino = dbStarsoft.TABALM.FirstOrDefault(e => e.TAALMA == almacenStarsoftDestino);

                                        if (registroAlmacenDestino == null)
                                        {
                                            throw new Exception("No se encuentra la información del almacén destino.");
                                        }
                                        #endregion

                                        #region Cantidades en cero
                                        if (listaAutorizados.Any(x => x.cantidad <= 0))
                                        {
                                            throw new Exception("No se puede guardar partidas con cantidades en cero o negativos.");
                                        }
                                        #endregion

                                        #region Validación Inventariables STARSOFT
                                        var lstInsumos = new List<MAEART>();
                                        var listaCatalogoInsumos = dbStarsoft.MAEART.ToList();

                                        foreach (var det in listaAutorizados)
                                        {
                                            var objInsumo = listaCatalogoInsumos.FirstOrDefault(e => Int64.Parse(e.ACODIGO) == det.insumo);

                                            if (objInsumo != null)
                                            {
                                                lstInsumos.Add(objInsumo);

                                                if (objInsumo.ACODIGO.Substring(0, 2) == "02")
                                                {
                                                    throw new Exception(string.Format(@"El insumo ""0{0}"" no es inventariable.", det.insumo));
                                                }
                                            }
                                            else
                                            {
                                                throw new Exception(string.Format(@"No se encuentra la información para el insumo ""0{0}"".", det.insumo));
                                            }
                                        }
                                        #endregion

                                        #region Validar Existencias
                                        foreach (var det in listaAutorizados)
                                        {
                                            var registroStock = dbStarsoft.STKART.ToList().FirstOrDefault(x => Int32.Parse(x.STALMA) == det.almacenOrigen && Int32.Parse(x.STCODIGO) == det.insumo);

                                            if (registroStock != null)
                                            {
                                                if (det.cantidad > (decimal)registroStock.STSKDIS)
                                                {
                                                    throw new Exception("La cantidad solicitada del insumo \"" + ("0" + det.insumo) + "\" sobrepasa las existencias (" + (decimal)registroStock.STSKDIS + ").");
                                                }
                                            }
                                            else
                                            {
                                                throw new Exception("No hay existencias para el insumo \"" + ("0" + det.insumo) + "\" en el almacén \"" + det.almacenOrigen + "\".");
                                            }
                                        }
                                        #endregion
                                        #endregion

                                        foreach (var grp in groupAutorizados)
                                        {
                                            int nuevoNumero = dbStarsoft.MOVALMCAB.ToList().Where(x => Int32.Parse(x.CAALMA) == grp.almacenOrigen && x.CATD == "NS").Select(x => Int32.Parse(x.CANUMDOC)).OrderByDescending(x => x).FirstOrDefault() + 1;

                                            #region Calcular el total del movimiento.
                                            decimal total = 0;

                                            foreach (var det in grp.renglones)
                                            {
                                                var registroStock = dbStarsoft.STKART.ToList().FirstOrDefault(x => Int32.Parse(x.STALMA) == det.almacenOrigen && x.STCODIGO == ("0" + det.insumo));
                                                var costoPromedio = 0m;

                                                if (registroStock != null)
                                                {
                                                    costoPromedio = (decimal)registroStock.STKPREPRO;
                                                }

                                                total += det.cantidad * costoPromedio;
                                            }
                                            #endregion

                                            var folioTraspaso = 1;
                                            var ultimoFolioTraspaso = _context.tblAlm_Movimientos.Where(x =>
                                                x.estatusHabilitado && x.tipo_mov == 52 && x.almacen == grp.almacenOrigen && x.cc == grp.ccOrigen
                                            ).OrderByDescending(x => x.orden_ct).FirstOrDefault();

                                            if (ultimoFolioTraspaso != null)
                                            {
                                                folioTraspaso = ultimoFolioTraspaso.orden_ct + 1;
                                            }

                                            _orden_ct = folioTraspaso;

                                            #region Tipo de Cambio
                                            decimal tipoCambioPeru = 0M;

                                            using (var dbStarsoftConta = new MainContextPeruStarSoft003BDCONTABILIDAD())
                                            {
                                                var tipoCambioActual = dbStarsoftConta.TIPO_CAMBIO.ToList().FirstOrDefault(e => e.TIPOCAMB_FECHA.Date == DateTime.Now.Date);
                                                if (tipoCambioActual != null)
                                                {
                                                    tipoCambioPeru = tipoCambioActual.TIPOCAMB_COMPRA;
                                                }
                                                else
                                                {
                                                    tipoCambioPeru = dbStarsoftConta.TIPO_CAMBIO.ToList().FirstOrDefault(e => e.TIPOCAMB_FECHA.Date == DateTime.Now.AddDays(-1).Date).TIPOCAMB_COMPRA;
                                                }

                                            }
                                            #endregion

                                            #region Movimiento SIGOPLAN
                                            tblAlm_Movimientos nuevaSalida = new tblAlm_Movimientos
                                            {
                                                almacen = grp.almacenOrigen,
                                                tipo_mov = 52,
                                                numero = nuevoNumero,
                                                cc = grp.ccOrigen.ToUpper(),
                                                compania = 1,
                                                periodo = DateTime.Now.Month,
                                                ano = DateTime.Now.Year,
                                                orden_ct = folioTraspaso,
                                                frente = 0,
                                                fecha = DateTime.Now.Date,
                                                proveedor = 0,
                                                total = total,
                                                estatus = "A",
                                                transferida = "N",
                                                alm_destino = grp.almacenDestino,
                                                cc_destino = grp.ccDestino.ToUpper(),
                                                comentarios = grp.renglones[0].comentariosGestion, //Se escoge el primer renglón ya que se juntaron para que nomás generen un movimiento.
                                                tipo_trasp = "0",
                                                tipo_cambio = 1,
                                                requisicion = null,
                                                estatusHabilitado = true
                                            };

                                            _context.tblAlm_Movimientos.Add(nuevaSalida);
                                            _context.SaveChanges();
                                            #endregion

                                            #region Movimiento Starsoft
                                            MOVALMCAB objCrearMovCab = new MOVALMCAB();

                                            objCrearMovCab.CAALMA = almacenStarsoftOrigen;
                                            objCrearMovCab.CATD = "NS";
                                            objCrearMovCab.CANUMDOC = nuevoNumero.ToString("D10");
                                            objCrearMovCab.CAFECDOC = DateTime.Now.Date;
                                            objCrearMovCab.CATIPMOV = "S";
                                            objCrearMovCab.CACODMOV = "TD";
                                            objCrearMovCab.CASITUA = null;
                                            objCrearMovCab.CARFTDOC = "NI";
                                            objCrearMovCab.CARFNDOC = null; //Este campo de la salida se debe poblar al hacer la entrada.
                                            objCrearMovCab.CASOLI = null;
                                            objCrearMovCab.CAFECDEV = null;
                                            objCrearMovCab.CACODPRO = null;
                                            objCrearMovCab.CACENCOS = null;
                                            objCrearMovCab.CARFALMA = almacenStarsoftDestino;
                                            objCrearMovCab.CAGLOSA = null;
                                            objCrearMovCab.CAFECACT = DateTime.Now.Date;
                                            objCrearMovCab.CAHORA = DateTime.Now.ToString("HH:mm:ss");
                                            objCrearMovCab.CAUSUARI = objUsrStarsoftInventarios != null ? objUsrStarsoftInventarios.id_usuario_inventarios : "01";
                                            objCrearMovCab.CACODCLI = null;
                                            objCrearMovCab.CARUC = null;
                                            objCrearMovCab.CANOMCLI = null;
                                            objCrearMovCab.CAFORVEN = null;
                                            objCrearMovCab.CACODMON = "MN"; //PENDIENTE TIPO DE MONED;
                                            objCrearMovCab.CAVENDE = null;
                                            objCrearMovCab.CATIPCAM = tipoCambioPeru;
                                            objCrearMovCab.CATIPGUI = null;
                                            objCrearMovCab.CASITGUI = "V";
                                            objCrearMovCab.CAGUIFAC = null;
                                            objCrearMovCab.CADIRENV = null;
                                            objCrearMovCab.CACODTRAN = null;
                                            objCrearMovCab.CANUMORD = null;
                                            objCrearMovCab.CAGUIDEV = null;
                                            objCrearMovCab.CANOMPRO = null;
                                            objCrearMovCab.CANROPED = null;
                                            objCrearMovCab.CACOTIZA = null;
                                            objCrearMovCab.CAPORDESCL = 0M;
                                            objCrearMovCab.CAPORDESES = 0M;
                                            objCrearMovCab.CAIMPORTE = 0M;
                                            objCrearMovCab.CANOMTRA = null;
                                            objCrearMovCab.CADIRTRA = null;
                                            objCrearMovCab.CARUCTRA = null;
                                            objCrearMovCab.CAPLATRA = null;
                                            objCrearMovCab.CANROIMP = null;
                                            objCrearMovCab.CACODLIQ = null;
                                            objCrearMovCab.CAESTIMP = "V";
                                            objCrearMovCab.CACIERRE = false;
                                            objCrearMovCab.CATIPDEP = null;
                                            objCrearMovCab.CAZONAF = null;
                                            objCrearMovCab.FLAGGS = false;
                                            objCrearMovCab.ASIENTO = false;
                                            objCrearMovCab.CAFLETE = 0M;
                                            objCrearMovCab.CAORDFAB = null;
                                            objCrearMovCab.CAPEDREFE = null;
                                            objCrearMovCab.CAIMPORTACION = false;
                                            objCrearMovCab.CANROCAJAS = 0;
                                            objCrearMovCab.CAPESOTOTAL = 0M;
                                            objCrearMovCab.CADESPACHO = false;
                                            objCrearMovCab.LINVCODIGO = null;
                                            objCrearMovCab.COD_DIRECCION = null;
                                            objCrearMovCab.COSTOMIN = 0M;
                                            objCrearMovCab.CAINTERFACE = 0;
                                            objCrearMovCab.CACTACONT = null;
                                            objCrearMovCab.CACONTROLSTOCK = "S";
                                            objCrearMovCab.CANOMRECEP = null;
                                            objCrearMovCab.CADNIRECEP = null;
                                            objCrearMovCab.CFDIREREFE = null;
                                            objCrearMovCab.REG_COMPRA = false;
                                            objCrearMovCab.OC_NI_GUIA = false;
                                            objCrearMovCab.COD_AUDITORIA = "0";
                                            objCrearMovCab.COD_MODULO = "03";
                                            objCrearMovCab.NO_GIRO_NEGOCIO = false;
                                            objCrearMovCab.MOTIVO_ANULACION_DOC_ELECTRONICO = null;
                                            objCrearMovCab.DOCUMENTO_ELECTRONICO = null;
                                            objCrearMovCab.GS_BAJA = null;
                                            objCrearMovCab.CADocumentoImportado = null;
                                            objCrearMovCab.SOLICITANTE = null;
                                            objCrearMovCab.DOCUMENTO_CONTINGENCIA = null;
                                            objCrearMovCab.GE_BAJA = null;

                                            dbStarsoft.MOVALMCAB.Add(objCrearMovCab);
                                            dbStarsoft.SaveChanges();
                                            #endregion

                                            int partidaContador = 1;
                                            string almacenDesc = registroAlmacenOrigen.TADESCRI;

                                            foreach (var renglon in grp.renglones)
                                            {
                                                foreach (var ubi in renglon.listUbicacionMovimiento)
                                                {
                                                    int partida = partidaContador++;
                                                    var registroStock = dbStarsoft.STKART.ToList().FirstOrDefault(x => Int32.Parse(x.STALMA) == grp.almacenOrigen && x.STCODIGO == ("0" + ubi.insumo));
                                                    var costoPromedio = 0m;

                                                    if (registroStock != null)
                                                    {
                                                        costoPromedio = (decimal)registroStock.STKPREPRO;
                                                    }

                                                    if (costoPromedio <= 0)
                                                    {
                                                        throw new Exception("Costo Promedio menor o igual a cero para el insumo " + ("0" + ubi.insumo));
                                                    }

                                                    var objInsumo = lstInsumos.FirstOrDefault(e => Int64.Parse(e.ACODIGO) == ubi.insumo);

                                                    #region Movimiento Detalle SIGOPLAN
                                                    tblAlm_MovimientosDet nuevaSalidaDet = new tblAlm_MovimientosDet
                                                    {
                                                        almacen = grp.almacenOrigen,
                                                        tipo_mov = 52,
                                                        numero = nuevoNumero,
                                                        partida = partida,
                                                        insumo = ubi.insumo,
                                                        comentarios = null,
                                                        area = 0,
                                                        cuenta = 0,
                                                        cantidad = ubi.cantidadMovimiento,
                                                        precio = costoPromedio, //precio = existencias > 0 ? costoPromedio : precioEntrada,
                                                        importe = ubi.cantidadMovimiento * costoPromedio, //importe = ubi.cantidadMovimiento * (existencias > 0 ? costoPromedio : precioEntrada),
                                                        id_resguardo = 0,
                                                        area_alm = ubi.area_alm ?? "",
                                                        lado_alm = ubi.lado_alm ?? "",
                                                        estante_alm = ubi.estante_alm ?? "",
                                                        nivel_alm = ubi.nivel_alm ?? "",
                                                        transporte = "",
                                                        estatusHabilitado = true
                                                    };

                                                    _context.tblAlm_MovimientosDet.Add(nuevaSalidaDet);
                                                    _context.SaveChanges();
                                                    #endregion

                                                    #region Movimiento Detalle Starsoft
                                                    var importe = nuevaSalidaDet.cantidad * costoPromedio;

                                                    #region INSERT MOVALMDET
                                                    dbStarsoft.MovAlmDet.Add(new MovAlmDet()
                                                    {
                                                        DEALMA = almacenStarsoftOrigen,
                                                        DETD = "NS",
                                                        DENUMDOC = nuevoNumero.ToString("D10"),
                                                        DEITEM = partidaContador,
                                                        DECODIGO = ubi.insumo.ToString("D11"),
                                                        DECODREF = null,
                                                        DECANTID = ubi.cantidadMovimiento,
                                                        DECANTENT = 0M,
                                                        DECANREF = 0M,
                                                        DECANFAC = 0M,
                                                        DEORDEN = null,
                                                        DEPREUNI = 0M,
                                                        DEPRECIO = costoPromedio,
                                                        DEPRECI1 = 0M,
                                                        DEDESCTO = 0M,
                                                        DESTOCK = null,
                                                        DEIGV = 0M,
                                                        DEIMPMN = costoPromedio,
                                                        DEIMPUS = costoPromedio * tipoCambioPeru,
                                                        DESERIE = null,
                                                        DESITUA = null,
                                                        DEFECDOC = null,
                                                        DECENCOS = "",
                                                        DERFALMA = null,
                                                        DETR = null,
                                                        DEESTADO = "V",
                                                        DECODMOV = "TD",
                                                        DEVALTOT = 0M,
                                                        DECOMPRO = null,
                                                        DECODMON = "MN",
                                                        DETIPO = null,
                                                        DETIPCAM = tipoCambioPeru,
                                                        DEPREVTA = null,
                                                        DEMONVTA = null,
                                                        DEFECVEN = null,
                                                        DEDEVOL = 0M,
                                                        DESOLI = null,
                                                        DEDESCRI = objInsumo.ADESCRI,
                                                        DEPORDES = 0M,
                                                        DEIGVPOR = 0M,
                                                        DEDESCLI = 0M,
                                                        DEDESESP = 0M,
                                                        DENUMFAC = null,
                                                        DELOTE = null,
                                                        DEUNIDAD = objInsumo.AUNIDAD,
                                                        DECANTBRUTA = 0M,
                                                        DEDSCTCANTBRUTA = 0M,
                                                        DEORDFAB = "",
                                                        DEQUIPO = null,
                                                        DEFLETE = 0M,
                                                        DEITEMI = null, //????????
                                                        DEGLOSA = "",
                                                        DEVALORIZADO = true,
                                                        DESECUENORI = null,
                                                        DEREFERENCIA = null,
                                                        UMREFERENCIA = null,
                                                        CANTREFERENCIA = 0M,
                                                        DECUENTA = null,
                                                        DETEXTO = null,
                                                        CTA_CONSUMO = null,
                                                        CODPARTE = "",
                                                        CODPLANO = "",
                                                        DETPRODUCCION = 0,
                                                        MPMA = "",
                                                        PorcentajeCosto = 0M,
                                                        SALDO_NC = null,
                                                        DEPRECIOREF = 0M,
                                                    });
                                                    dbStarsoft.SaveChanges();
                                                    #endregion

                                                    #region INSERT STKART
                                                    var obkStkart = dbStarsoft.STKART.Where(e => e.STALMA == almacenStarsoftOrigen).ToList().FirstOrDefault(e => Int64.Parse(e.STCODIGO) == ubi.insumo);

                                                    if (obkStkart != null)
                                                    {
                                                        //ACTUALIZAR EXISTENCIAS. PENDIENTE CHECAR OTROS CAMPOS
                                                        obkStkart.STSKDIS -= ubi.cantidadMovimiento;

                                                        if (obkStkart.STSKDIS < 0)
                                                        {
                                                            obkStkart.STSKDIS = 0;
                                                        }

                                                        if (obkStkart.STSKDIS == 0)
                                                        {
                                                            obkStkart.STKPREPRO = 0;
                                                            obkStkart.STKPREPROUS = 0;
                                                        }

                                                        dbStarsoft.SaveChanges();
                                                    }
                                                    #endregion

                                                    #region MORESMES
                                                    var objMoResMes = dbStarsoft.MoResMes.ToList().FirstOrDefault(e => e.SMALMA == almacenStarsoftOrigen && e.SMMESPRO == (DateTime.Now.Year.ToString() + DateTime.Now.ToString("MM")) && Int64.Parse(e.SMCODIGO) == ubi.insumo);

                                                    if (objMoResMes != null)
                                                    {
                                                        objMoResMes.SMCANSAL += ubi.cantidadMovimiento;

                                                        dbStarsoft.SaveChanges();
                                                    }
                                                    #endregion
                                                    #endregion
                                                }
                                            }
                                        }

                                        dbStarsoftTransaction.Commit();
                                        dbSigoplanTransaction.Commit();

                                        result.Add(SUCCESS, true);
                                        result.Add("flagMaquinaStandBy", false);
                                        result.Add("orden_ct", _orden_ct);
                                    }
                                    catch (Exception e)
                                    {
                                        dbStarsoftTransaction.Rollback();
                                        dbSigoplanTransaction.Rollback();

                                        LogError(12, 0, "AlmacenController", "guardarAutorizacionesTraspasos", e, AccionEnum.AGREGAR, 0, listaAutorizados);

                                        result.Add(MESSAGE, e.Message);
                                        result.Add(SUCCESS, false);
                                    }
                                }
                            }
                        }
                        #endregion
                    }
                    break;
                default:
                    {
                        #region DEMÁS EMPRESAS
                        var _orden_ct = 0;

                        using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                        {
                            using (var con = checkConexionProductivo())
                            {
                                using (var trans = con.BeginTransaction())
                                {
                                    try
                                    {
                                        #region Validación Almacén Activo/Centro Costo existente
                                        foreach (var autorizado in listaAutorizados)
                                        {
                                            #region Almacén Activo
                                            var almacenOrigenEK = _contextEnkontrol.Select<dynamic>(getEnkontrolEnumADM(),
                                                new OdbcConsultaDTO()
                                                {
                                                    consulta = @"SELECT * FROM si_almacen WHERE almacen = ?",
                                                    parametros = new List<OdbcParameterDTO>() {
                                                            new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = autorizado.almacenOrigen }
                                                        }
                                                }
                                            );

                                            if (almacenOrigenEK.Count() == 0)
                                            {
                                                throw new Exception("No se encuentra la información del almacén origen.");
                                            }

                                            if ((string)almacenOrigenEK[0].bit_mp != "S")
                                            {
                                                throw new Exception("El almacén origen no está activo.");
                                            }

                                            var almacenDestinoEK = _contextEnkontrol.Select<dynamic>(getEnkontrolEnumADM(),
                                                new OdbcConsultaDTO()
                                                {
                                                    consulta = @"SELECT * FROM si_almacen WHERE almacen = ?",
                                                    parametros = new List<OdbcParameterDTO>() {
                                            new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = autorizado.almacenDestino }
                                        }
                                                }
                                            );

                                            if (almacenDestinoEK.Count() == 0)
                                            {
                                                throw new Exception("No se encuentra la información del almacén destino.");
                                            }

                                            if ((string)almacenDestinoEK[0].bit_mp != "S")
                                            {
                                                throw new Exception("El almacén destino no está activo.");
                                            }
                                            #endregion

                                            #region Centro Costo Existente
                                            var centroCostoOrigenEK = _contextEnkontrol.Select<dynamic>(getEnkontrolEnumADM(), new OdbcConsultaDTO() { consulta = string.Format(@"SELECT * FROM cc WHERE cc = '{0}'", autorizado.ccOrigen) });

                                            if (centroCostoOrigenEK.Count() == 0)
                                            {
                                                throw new Exception("No se encuentra la información del centro de costos \"" + autorizado.ccOrigen + "\".");
                                            }

                                            var centroCostoDestinoEK = _contextEnkontrol.Select<dynamic>(getEnkontrolEnumADM(), new OdbcConsultaDTO() { consulta = string.Format(@"SELECT * FROM cc WHERE cc = '{0}'", autorizado.ccDestino) });

                                            if (centroCostoDestinoEK.Count() == 0)
                                            {
                                                throw new Exception("No se encuentra la información del centro de costos \"" + autorizado.ccDestino + "\".");
                                            }
                                            #endregion
                                        }
                                        #endregion

                                        if (listaAutorizados.Any(x => x.almacenOrigen == 0) || listaAutorizados.Any(x => x.ccOrigen == null || x.ccOrigen == ""))
                                        {
                                            throw new Exception("Debe capturar el origen correcto.");
                                        }

                                        if (listaAutorizados.Any(x => x.almacenDestino == 0) || listaAutorizados.Any(x => x.ccDestino == null || x.ccDestino == ""))
                                        {
                                            throw new Exception("Debe capturar el destino correcto.");
                                        }

                                        var groupAutorizados = listaAutorizados.GroupBy(x => new
                                        {
                                            x.folioInterno,
                                            x.ccOrigen,
                                            x.almacenOrigen,
                                            x.ccDestino,
                                            x.almacenDestino
                                        })
                                        .Select(grupo => new
                                        {
                                            folioInterno = grupo.Key.folioInterno,
                                            ccOrigen = grupo.Key.ccOrigen,
                                            almacenOrigen = grupo.Key.almacenOrigen,
                                            ccDestino = grupo.Key.ccDestino,
                                            almacenDestino = grupo.Key.almacenDestino,
                                            renglones = grupo.ToList()
                                        });

                                        //#region Validación familias 101 y 102
                                        //if (vSesiones.sesionEmpresaActual == 2)
                                        //{
                                        //    List<int> insumosExcepciones = _context.tblAlm_Validacion_101_102_InsumosExcepciones.Where(x => x.estatus).Select(x => x.insumo).ToList();

                                        //    foreach (var grp in groupAutorizados)
                                        //    {
                                        //        if (grp.almacenOrigen < 600 || grp.almacenOrigen > 620)
                                        //        {
                                        //            foreach (var ren in grp.renglones)
                                        //            {
                                        //                foreach (var ubi in ren.listUbicacionMovimiento)
                                        //                {
                                        //                    if (ubi.insumo.ToString().Substring(0, 3) == "101" || ubi.insumo.ToString().Substring(0, 3) == "102")
                                        //                    {
                                        //                        if (insumosExcepciones.Count() > 0)
                                        //                        {
                                        //                            if (!insumosExcepciones.Contains(ubi.insumo))
                                        //                            {
                                        //                                throw new Exception("No se puede dar salida a las familias de insumo 101 y 102. Insumo: \"" + ubi.insumo + "\".");
                                        //                            }
                                        //                        }
                                        //                        else
                                        //                        {
                                        //                            throw new Exception("No se puede dar salida a las familias de insumo 101 y 102.");
                                        //                        }
                                        //                    }
                                        //                }
                                        //            }
                                        //        }
                                        //    }
                                        //}
                                        //#endregion

                                        #region Validación Inventariables
                                        if (!excelCargado)
                                        {
                                            var registrosGrupoInsumo = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM grupos_insumo")).ToObject<List<dynamic>>();

                                            foreach (var grp in groupAutorizados)
                                            {
                                                foreach (var ren in grp.renglones)
                                                {
                                                    if (!ren.checkBoxRechazado)
                                                    {
                                                        foreach (var ubi in ren.listUbicacionMovimiento)
                                                        {
                                                            var tipo_insumo = Int32.Parse(ubi.insumo.ToString().Substring(0, 1));
                                                            var grupo_insumo = Int32.Parse(ubi.insumo.ToString().Substring(1, 2));
                                                            var registroGrupoInsumo = registrosGrupoInsumo.FirstOrDefault(x => (int)x.tipo_insumo == tipo_insumo && (int)x.grupo_insumo == grupo_insumo);

                                                            if (registroGrupoInsumo != null)
                                                            {
                                                                if ((string)registroGrupoInsumo.inventariado != "I")
                                                                {
                                                                    throw new Exception(string.Format(@"El insumo ""{0}"" no es inventariable.", ubi.insumo));
                                                                }
                                                            }
                                                            else
                                                            {
                                                                throw new Exception(string.Format(@"No se encuentra la información del grupo de insumo para el insumo ""{0}"".", ubi.insumo));
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        #endregion

                                        #region Validar Existencias
                                        if (!excelCargado)
                                        {
                                            foreach (var grp in groupAutorizados)
                                            {
                                                foreach (var ren in grp.renglones)
                                                {
                                                    if (!ren.checkBoxRechazado)
                                                    {
                                                        foreach (var ubi in ren.listUbicacionMovimiento)
                                                        {
                                                            var entradasEK = consultaCheckProductivo(
                                                                string.Format(@"SELECT 
                                                                det.insumo, 
                                                                (CAST(det.insumo AS Varchar) + '-' + ins.descripcion) AS insumoDesc, 
                                                                SUM(det.cantidad) AS cantidad, 
                                                                det.area_alm, 
                                                                det.lado_alm, 
                                                                det.estante_alm, 
                                                                det.nivel_alm 
                                                            FROM si_movimientos mov 
                                                                INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                                                                INNER JOIN insumos ins ON det.insumo = ins.insumo 
                                                            WHERE 
                                                                mov.almacen = {0} AND 
                                                                det.insumo = {1} AND 
                                                                det.area_alm = '{2}' AND 
                                                                det.lado_alm = '{3}' AND 
                                                                det.estante_alm = '{4}' AND 
                                                                det.nivel_alm = '{5}' AND 
                                                                det.tipo_mov < 50 
                                                            GROUP BY det.insumo, ins.descripcion, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm",
                                                                                ren.almacenOrigen, ubi.insumo, ubi.area_alm, ubi.lado_alm, ubi.estante_alm, ubi.nivel_alm));

                                                            var salidasEK = consultaCheckProductivo(
                                                                string.Format(@"SELECT 
                                                                det.insumo, 
                                                                (CAST(det.insumo AS Varchar) + '-' + ins.descripcion) AS insumoDesc, 
                                                                SUM(det.cantidad) AS cantidad, 
                                                                det.area_alm, 
                                                                det.lado_alm, 
                                                                det.estante_alm, 
                                                                det.nivel_alm 
                                                            FROM si_movimientos mov 
                                                                INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                                                                INNER JOIN insumos ins ON det.insumo = ins.insumo 
                                                            WHERE 
                                                                mov.almacen = {0} AND 
                                                                det.insumo = {1} AND 
                                                                det.area_alm = '{2}' AND 
                                                                det.lado_alm = '{3}' AND 
                                                                det.estante_alm = '{4}' AND 
                                                                det.nivel_alm = '{5}' AND 
                                                                det.tipo_mov > 50 
                                                            GROUP BY det.insumo, ins.descripcion, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm",
                                                                                ren.almacenOrigen, ubi.insumo, ubi.area_alm, ubi.lado_alm, ubi.estante_alm, ubi.nivel_alm));

                                                            if (entradasEK != null)
                                                            {
                                                                var entradas = (List<UbicacionDetalleDTO>)entradasEK.ToObject<List<UbicacionDetalleDTO>>();

                                                                if (salidasEK != null)
                                                                {
                                                                    var salidas = (List<UbicacionDetalleDTO>)salidasEK.ToObject<List<UbicacionDetalleDTO>>();

                                                                    foreach (var ent in entradas)
                                                                    {
                                                                        var salida = salidas.FirstOrDefault(x =>
                                                                                x.insumoDesc == ent.insumoDesc &&
                                                                                x.area_alm == ent.area_alm &&
                                                                                x.lado_alm == ent.lado_alm &&
                                                                                x.estante_alm == ent.estante_alm &&
                                                                                x.nivel_alm == ent.nivel_alm
                                                                            );

                                                                        if (salida != null)
                                                                        {
                                                                            ent.cantidad = ent.cantidad - Convert.ToDecimal(salida.cantidad, CultureInfo.InvariantCulture);
                                                                        }
                                                                    }
                                                                }

                                                                decimal existenciasInsumo = entradas.Sum(x => x.cantidad);
                                                                decimal totalCantidadPorInsumo = groupAutorizados.Sum(x =>
                                                                    x.renglones.Sum(y =>
                                                                        y.listUbicacionMovimiento.Where(z =>
                                                                            z.insumo == ubi.insumo &&
                                                                            z.area_alm == ubi.area_alm &&
                                                                            z.lado_alm == ubi.lado_alm &&
                                                                            z.estante_alm == ubi.estante_alm &&
                                                                            z.nivel_alm == ubi.nivel_alm
                                                                        ).Sum(w =>
                                                                            w.cantidadMovimiento
                                                                        )
                                                                    )
                                                                );

                                                                if (existenciasInsumo < totalCantidadPorInsumo)
                                                                {
                                                                    var ubicacion = ubi.area_alm + "-" + ubi.lado_alm + "-" + ubi.estante_alm + "-" + ubi.nivel_alm;

                                                                    throw new Exception("No se guardó la información. La cantidad solicitada del insumo \"" + ubi.insumo + "\" sobrepasa las existencias (" + existenciasInsumo + ") en la ubicación \"" + ubicacion + "\".");
                                                                }
                                                            }
                                                            else
                                                            {
                                                                var ubicacion = ubi.area_alm + "-" + ubi.lado_alm + "-" + ubi.estante_alm + "-" + ubi.nivel_alm;

                                                                throw new Exception("No se guardó la información. No hay existencias para el insumo \"" + ubi.insumo + "\" en la ubicación \"" + ubicacion + "\".");
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        #endregion

                                        var count = 0;
                                        var flagMaquinaStandBy = false;

                                        foreach (var grp in groupAutorizados)
                                        {
                                            #region Validación Total Cancelado
                                            List<bool> listaFlagTotalCancelado = new List<bool>();

                                            if (esDirecto)
                                            {
                                                listaFlagTotalCancelado.Add(false);
                                            }
                                            else
                                            {
                                                foreach (var renglon in grp.renglones)
                                                {
                                                    var traspaso = _context.tblAlm_Traspaso.FirstOrDefault(x =>
                                                        x.estatusRegistro &&
                                                        x.ccOrigen == renglon.ccOrigen &&
                                                        x.almacenOrigen == renglon.almacenOrigen &&
                                                        x.ccDestino == renglon.ccDestino &&
                                                        x.almacenDestino == renglon.almacenDestino &&
                                                        x.insumo == renglon.insumo &&
                                                        x.cantidadTraspasar == renglon.cantidad &&
                                                        x.folioInterno == renglon.folioInterno
                                                    );

                                                    if (traspaso != null)
                                                    {
                                                        var cantidadCancelada = renglon.cantidad - renglon.cantidadTraspasar;

                                                        traspaso.cantidadCancelada = !renglon.checkBoxRechazado ? cantidadCancelada : traspaso.cantidadTraspasar;
                                                        traspaso.rechazado = renglon.checkBoxRechazado;
                                                        traspaso.comentariosGestion = renglon.comentariosGestion ?? "";

                                                        if (((traspaso.cantidadTraspasar - traspaso.cantidadCancelada) > 0) && !renglon.checkBoxRechazado)
                                                        {
                                                            listaFlagTotalCancelado.Add(false);
                                                        }
                                                        else
                                                        {
                                                            listaFlagTotalCancelado.Add(true);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        listaFlagTotalCancelado.Add(true);
                                                    }
                                                }
                                            }
                                            #endregion

                                            #region Validación Stand-By
                                            //if (vSesiones.sesionEmpresaActual == 2)
                                            //{
                                            //    flagMaquinaStandBy = checkMaquinaStandBy(grp.ccOrigen);
                                            //}
                                            #endregion

                                            //#region Validación Permisos Familias
                                            //if (vSesiones.sesionEmpresaActual == 2)
                                            //{
                                            //    var permisosFamilias = getPermisosFamilia(grp.ccOrigen);

                                            //    if (permisosFamilias.Count > 0)
                                            //    {
                                            //        if (!permisosFamilias.Any(x => x.familia == "*"))
                                            //        {
                                            //            var familias = grp.renglones.Select(x => x.insumo.ToString().Substring(0, 3)).ToList();

                                            //            foreach (var fam in familias)
                                            //            {
                                            //                if (!permisosFamilias.Select(x => x.familia).Contains(fam))
                                            //                {
                                            //                    throw new Exception(
                                            //                        string.Format(@"Bloqueo de familia de insumo '{0}' para el centro de costo '{1}'. No se puede proceder con la salida.", fam, grp.ccOrigen)
                                            //                    );
                                            //                }
                                            //            }
                                            //        }
                                            //    }
                                            //}
                                            //#endregion

                                            if (listaFlagTotalCancelado.Any(totalCancelado => !totalCancelado))
                                            {
                                                var ultimoMovimientoEK = consultaCheckProductivo(
                                                string.Format(@"SELECT 
                                                    TOP 1 numero, folio_traspaso 
                                                FROM si_movimientos 
                                                WHERE almacen = {0} AND tipo_mov = {1} 
                                                ORDER BY numero DESC", grp.almacenOrigen, 52)
                                                );

                                                var nuevoFolio = 0;

                                                if (ultimoMovimientoEK != null)
                                                {
                                                    var ultimoMovimiento = ((List<SurtidoDetDTO>)ultimoMovimientoEK.ToObject<List<SurtidoDetDTO>>())[0];

                                                    nuevoFolio = ultimoMovimiento.numero;
                                                }

                                                decimal total = 0;

                                                foreach (var ren in grp.renglones)
                                                {
                                                    foreach (var ubi in ren.listUbicacionMovimiento)
                                                    {
                                                        if (ubi != null)
                                                        {
                                                            //                                                #region Checar existencia para el reseteo del precio y costo promedio
                                                            //                                                decimal precioEntrada = 0;
                                                            //                                                decimal costoPromedioEntrada = 0;
                                                            //                                                decimal existencias = 0;

                                                            //                                                var movimientosEK = consultaCheckProductivo(
                                                            //                                                    string.Format(@"SELECT 
                                                            //                                                    	mov.almacen, mov.tipo_mov, mov.numero, mov.fecha, det.partida, det.insumo, det.cantidad, det.precio, det.importe, det.costo_prom 
                                                            //                                                    FROM si_movimientos mov 
                                                            //                                                    	INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                                                            //                                                    WHERE mov.almacen = {0} AND det.insumo = {1} 
                                                            //                                                    ORDER BY mov.fecha DESC", grp.almacenOrigen, ubi.insumo)
                                                            //                                                );

                                                            //                                                if (movimientosEK != null)
                                                            //                                                {
                                                            //                                                    var movimientos = (List<dynamic>)movimientosEK.ToObject<List<dynamic>>();
                                                            //                                                    var entradas = movimientos.Where(x => (int)x.tipo_mov < 50).ToList();
                                                            //                                                    var ultimaEntrada = entradas.OrderByDescending(x => (DateTime)x.fecha).First();
                                                            //                                                    entradas.RemoveAt(0); //Quitar la ultima entrada para calcular las existencias antes de que se realizara ese movimiento.
                                                            //                                                    decimal cantidadEntradas = 0;
                                                            //                                                    foreach (var ent in entradas)
                                                            //                                                    {
                                                            //                                                        cantidadEntradas += Convert.ToDecimal(ent.cantidad, CultureInfo.InvariantCulture);
                                                            //                                                    }
                                                            //                                                    var salidas = movimientos.Where(x => (int)x.tipo_mov > 50).ToList();
                                                            //                                                    decimal cantidadSalidas = 0;
                                                            //                                                    foreach (var sal in salidas)
                                                            //                                                    {
                                                            //                                                        cantidadSalidas += Convert.ToDecimal(sal.cantidad, CultureInfo.InvariantCulture);
                                                            //                                                    }
                                                            //                                                    existencias = cantidadEntradas - cantidadSalidas;

                                                            //                                                    if (existencias <= 0)
                                                            //                                                    {
                                                            //                                                        precioEntrada = Convert.ToDecimal(ultimaEntrada.precio, CultureInfo.InvariantCulture);
                                                            //                                                        costoPromedioEntrada = Convert.ToDecimal(ultimaEntrada.precio, CultureInfo.InvariantCulture);
                                                            //                                                    }
                                                            //                                                }
                                                            //                                                else
                                                            //                                                {
                                                            //                                                    throw new Exception("No existen movimientos para el insumo \"" + ubi.insumo + "\" en el almacén \"" + grp.almacenOrigen + "\".");
                                                            //                                                }
                                                            //                                                #endregion

                                                            //                                                decimal costoPromedio = getCostoPromedioNuevo(grp.almacenOrigen, ubi.insumo);
                                                            //total += ubi.cantidadMovimiento * (existencias > 0 ? costoPromedio : costoPromedioEntrada);

                                                            decimal costoPromedio = getCostoPromedioKardex(grp.almacenOrigen, ubi.insumo);

                                                            total += ubi.cantidadMovimiento * costoPromedio;
                                                        }
                                                    }
                                                }

                                                var folioTraspaso = 1;

                                                var ultimoFolioTraspasoEK = consultaCheckProductivo(
                                                    string.Format(@"SELECT TOP 1 
                                                            almacen, tipo_mov, numero, cc, folio_traspaso 
                                                        FROM si_movimientos 
                                                        WHERE almacen = {0} AND cc = '{1}' 
                                                        ORDER BY folio_traspaso DESC", grp.almacenOrigen, grp.ccOrigen)
                                                );

                                                if (ultimoFolioTraspasoEK != null)
                                                {
                                                    var ultimoFolioTraspaso = ((List<dynamic>)ultimoFolioTraspasoEK.ToObject<List<dynamic>>())[0];

                                                    folioTraspaso = ultimoFolioTraspaso.folio_traspaso != null ? ((int)ultimoFolioTraspaso.folio_traspaso + 1) : 1;
                                                    _orden_ct = folioTraspaso;
                                                }

                                                #region Movimiento SIGOPLAN
                                                tblAlm_Movimientos nuevaSalida = new tblAlm_Movimientos
                                                {
                                                    almacen = grp.almacenOrigen,
                                                    tipo_mov = 52,
                                                    numero = nuevoFolio + 1,
                                                    cc = grp.ccOrigen.ToUpper(),
                                                    compania = 1,
                                                    periodo = DateTime.Now.Month,
                                                    ano = DateTime.Now.Year,
                                                    orden_ct = folioTraspaso,
                                                    frente = 0,
                                                    fecha = DateTime.Now.Date,
                                                    proveedor = 0,
                                                    total = total,
                                                    estatus = "A",
                                                    transferida = "N",
                                                    alm_destino = grp.almacenDestino,
                                                    cc_destino = grp.ccDestino.ToUpper(),
                                                    comentarios = grp.renglones[0].comentariosGestion, //Se escoge el primer renglón ya que se juntaron para que nomás generen un movimiento.
                                                    tipo_trasp = "0",
                                                    tipo_cambio = 1,
                                                    requisicion = null,
                                                    estatusHabilitado = true
                                                };

                                                _context.tblAlm_Movimientos.Add(nuevaSalida);
                                                _context.SaveChanges();
                                                #endregion

                                                #region Movimiento Enkontrol
                                                if (nuevaSalida.total <= 0)
                                                {
                                                    throw new Exception("El total no puede ser igual o menor a cero.");
                                                }

                                                var consultaMovimientos = @"INSERT INTO si_movimientos 
                                         (almacen, tipo_mov, numero, cc, compania, periodo, ano, orden_ct, frente, fecha, proveedor, total, estatus, 
                                         transferida, poliza, empleado, alm_destino, cc_destino, comentarios, tipo_trasp, numero_destino, tp, year_poliza, 
                                         mes_poliza, tipo_cambio, hora, fecha_modifica, empleado_modifica, destajista, obra, id_residente, factura, sector_id, 
                                         tc_cc, paquete, tipo_cargo, cargo_destajista, cargo_id_residente, embarque, orden_prod, folio_traspaso, bit_sin_ubicacion) 
                                         VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                                using (var cmd = new OdbcCommand(consultaMovimientos))
                                                {
                                                    OdbcParameterCollection parameters = cmd.Parameters;

                                                    parameters.Add("@almacen", OdbcType.Numeric).Value = nuevaSalida.almacen;
                                                    parameters.Add("@tipo_mov", OdbcType.Numeric).Value = nuevaSalida.tipo_mov;
                                                    parameters.Add("@numero", OdbcType.Numeric).Value = nuevaSalida.numero;
                                                    parameters.Add("@cc", OdbcType.Char).Value = nuevaSalida.cc;
                                                    parameters.Add("@compania", OdbcType.Numeric).Value = nuevaSalida.compania;
                                                    parameters.Add("@periodo", OdbcType.Numeric).Value = nuevaSalida.periodo;
                                                    parameters.Add("@ano", OdbcType.Numeric).Value = nuevaSalida.ano;
                                                    parameters.Add("@orden_ct", OdbcType.Numeric).Value = nuevaSalida.orden_ct;
                                                    parameters.Add("@frente", OdbcType.Numeric).Value = nuevaSalida.frente;
                                                    parameters.Add("@fecha", OdbcType.Date).Value = nuevaSalida.fecha.Date;
                                                    parameters.Add("@proveedor", OdbcType.Numeric).Value = nuevaSalida.proveedor;
                                                    parameters.Add("@total", OdbcType.Numeric).Value = nuevaSalida.total;
                                                    parameters.Add("@estatus", OdbcType.Char).Value = nuevaSalida.estatus;
                                                    parameters.Add("@transferida", OdbcType.Char).Value = nuevaSalida.transferida;
                                                    parameters.Add("@poliza", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@empleado", OdbcType.Numeric).Value = empleado;
                                                    parameters.Add("@alm_destino", OdbcType.Numeric).Value = nuevaSalida.alm_destino;
                                                    parameters.Add("@cc_destino", OdbcType.Char).Value = nuevaSalida.cc_destino;
                                                    parameters.Add("@comentarios", OdbcType.Char).Value = nuevaSalida.comentarios != null ? nuevaSalida.comentarios : "";
                                                    parameters.Add("@tipo_trasp", OdbcType.Char).Value = nuevaSalida.tipo_trasp;
                                                    parameters.Add("@numero_destino", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@tp", OdbcType.Char).Value = DBNull.Value;
                                                    parameters.Add("@year_poliza", OdbcType.Numeric).Value = DateTime.Now.Year;
                                                    parameters.Add("@mes_poliza", OdbcType.Numeric).Value = DateTime.Now.Month;
                                                    parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = nuevaSalida.tipo_cambio;
                                                    parameters.Add("@hora", OdbcType.Time).Value = DateTime.Now.TimeOfDay;
                                                    parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                                    parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = empleado;
                                                    parameters.Add("@destajista", OdbcType.Numeric).Value = DBNull.Value;
                                                    parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                                    parameters.Add("@id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                                    parameters.Add("@factura", OdbcType.Numeric).Value = DBNull.Value;
                                                    parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                                    parameters.Add("@tc_cc", OdbcType.Numeric).Value = 1;
                                                    parameters.Add("@paquete", OdbcType.Numeric).Value = DBNull.Value;
                                                    parameters.Add("@tipo_cargo", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@cargo_Destajista", OdbcType.Numeric).Value = DBNull.Value;
                                                    parameters.Add("@cargo_id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                                    parameters.Add("@embarque", OdbcType.Numeric).Value = DBNull.Value;
                                                    parameters.Add("@orden_prod", OdbcType.Numeric).Value = DBNull.Value;
                                                    parameters.Add("@folio_traspaso", OdbcType.Numeric).Value = folioTraspaso;
                                                    parameters.Add("@bit_sin_ubicacion", OdbcType.Numeric).Value = 0;

                                                    cmd.Connection = trans.Connection;
                                                    cmd.Transaction = trans;

                                                    count += cmd.ExecuteNonQuery();
                                                }
                                                #endregion

                                                int partidaContador = 1;

                                                foreach (var renglon in grp.renglones)
                                                {
                                                    #region TraspasoDirecto
                                                    if (esDirecto)
                                                    {
                                                        foreach (var ubi in renglon.listUbicacionMovimiento)
                                                        {
                                                            int partida = partidaContador++;
                                                            //                                                decimal costoPromedio = getCostoPromedioNuevo(nuevaSalida.almacen, ubi.insumo);

                                                            //                                                #region Checar existencia para el reseteo del precio y costo promedio
                                                            //                                                decimal precioEntrada = 0;
                                                            //                                                decimal costoPromedioEntrada = 0;
                                                            //                                                decimal existencias = 0;

                                                            //                                                var movimientosEK = consultaCheckProductivo(
                                                            //                                                    string.Format(@"SELECT 
                                                            //                                                    	mov.almacen, mov.tipo_mov, mov.numero, mov.fecha, det.partida, det.insumo, det.cantidad, det.precio, det.importe, det.costo_prom 
                                                            //                                                    FROM si_movimientos mov 
                                                            //                                                    	INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                                                            //                                                    WHERE mov.almacen = {0} AND det.insumo = {1} 
                                                            //                                                    ORDER BY mov.fecha DESC", nuevaSalida.almacen, ubi.insumo)
                                                            //                                                );

                                                            //                                                if (movimientosEK != null)
                                                            //                                                {
                                                            //                                                    var movimientos = (List<dynamic>)movimientosEK.ToObject<List<dynamic>>();
                                                            //                                                    var entradas = movimientos.Where(x => (int)x.tipo_mov < 50).ToList();
                                                            //                                                    var ultimaEntrada = entradas.OrderByDescending(x => (DateTime)x.fecha).First();
                                                            //                                                    entradas.RemoveAt(0); //Quitar la ultima entrada para calcular las existencias antes de que se realizara ese movimiento.
                                                            //                                                    decimal cantidadEntradas = 0;
                                                            //                                                    foreach (var ent in entradas)
                                                            //                                                    {
                                                            //                                                        cantidadEntradas += Convert.ToDecimal(ent.cantidad, CultureInfo.InvariantCulture);
                                                            //                                                    }
                                                            //                                                    var salidas = movimientos.Where(x => (int)x.tipo_mov > 50).ToList();
                                                            //                                                    decimal cantidadSalidas = 0;
                                                            //                                                    foreach (var sal in salidas)
                                                            //                                                    {
                                                            //                                                        cantidadSalidas += Convert.ToDecimal(sal.cantidad, CultureInfo.InvariantCulture);
                                                            //                                                    }
                                                            //                                                    existencias = cantidadEntradas - cantidadSalidas;

                                                            //                                                    if (existencias <= 0)
                                                            //                                                    {
                                                            //                                                        precioEntrada = Convert.ToDecimal(ultimaEntrada.precio, CultureInfo.InvariantCulture);
                                                            //                                                        costoPromedioEntrada = Convert.ToDecimal(ultimaEntrada.precio, CultureInfo.InvariantCulture);
                                                            //                                                    }
                                                            //                                                }
                                                            //                                                else
                                                            //                                                {
                                                            //                                                    throw new Exception("No existen movimientos para el insumo \"" + ubi.insumo + "\" en el almacén \"" + nuevaSalida.almacen + "\".");
                                                            //                                                }
                                                            //                                                #endregion

                                                            decimal costoPromedio = getCostoPromedioKardex(nuevaSalida.almacen, ubi.insumo);

                                                            #region Movimiento Detalle SIGOPLAN
                                                            tblAlm_MovimientosDet nuevaSalidaDet = new tblAlm_MovimientosDet
                                                            {
                                                                almacen = grp.almacenOrigen,
                                                                tipo_mov = 52,
                                                                numero = nuevoFolio + 1,
                                                                partida = partida,
                                                                insumo = ubi.insumo,
                                                                comentarios = null,
                                                                area = 0,
                                                                cuenta = 0,
                                                                cantidad = ubi.cantidadMovimiento,
                                                                precio = costoPromedio, //precio = existencias > 0 ? costoPromedio : precioEntrada,
                                                                importe = ubi.cantidadMovimiento * costoPromedio, //importe = ubi.cantidadMovimiento * (existencias > 0 ? costoPromedio : precioEntrada),
                                                                id_resguardo = 0,
                                                                area_alm = ubi.area_alm ?? "",
                                                                lado_alm = ubi.lado_alm ?? "",
                                                                estante_alm = ubi.estante_alm ?? "",
                                                                nivel_alm = ubi.nivel_alm ?? "",
                                                                transporte = "",
                                                                estatusHabilitado = true
                                                            };

                                                            _context.tblAlm_MovimientosDet.Add(nuevaSalidaDet);
                                                            _context.SaveChanges();
                                                            #endregion

                                                            #region Movimiento Detalle Enkontrol
                                                            var importe = nuevaSalidaDet.cantidad * costoPromedio;

                                                            //if (existencias > 0)
                                                            //{
                                                            //    if (costoPromedio <= 0 || importe <= 0)
                                                            //    {
                                                            //        throw new Exception("El precio, el importe y el costo promedio no pueden ser igual o menor a cero.");
                                                            //    }
                                                            //}
                                                            //else
                                                            //{
                                                            //    if (precioEntrada <= 0 || costoPromedioEntrada <= 0)
                                                            //    {
                                                            //        throw new Exception("El precio, el importe y el costo promedio no pueden ser igual o menor a cero.");
                                                            //    }
                                                            //}

                                                            if (costoPromedio <= 0)
                                                            {
                                                                throw new Exception("El precio, el importe y el costo promedio no pueden ser igual o menor a cero.");
                                                            }

                                                            var consultaMovimientosDetalle = @"INSERT INTO si_movimientos_det 
                                                        (almacen, tipo_mov, numero, partida, insumo, comentarios, area, cuenta, cantidad, precio, importe, 
                                                        partida_oc, costo_prom, obra, manzana_ini, lote_ini, interior_ini, manzana_fin, lote_fin, interior_fin, 
                                                        remision, sector_id, id_resguardo, area_alm, lado_alm, estante_alm, nivel_alm, fecha_fisico) 
                                                        VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                                            using (var cmd = new OdbcCommand(consultaMovimientosDetalle))
                                                            {
                                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                                parameters.Add("@almacen", OdbcType.Numeric).Value = nuevaSalidaDet.almacen;
                                                                parameters.Add("@tipo_mov", OdbcType.Numeric).Value = nuevaSalidaDet.tipo_mov;
                                                                parameters.Add("@numero", OdbcType.Numeric).Value = nuevoFolio + 1;
                                                                parameters.Add("@partida", OdbcType.Numeric).Value = nuevaSalidaDet.partida;
                                                                parameters.Add("@insumo", OdbcType.Numeric).Value = nuevaSalidaDet.insumo;
                                                                parameters.Add("@comentarios", OdbcType.Char).Value = nuevaSalidaDet.comentarios != null ? nuevaSalidaDet.comentarios : "";
                                                                parameters.Add("@area", OdbcType.Numeric).Value = nuevaSalidaDet.area;
                                                                parameters.Add("@cuenta", OdbcType.Numeric).Value = nuevaSalidaDet.cuenta;
                                                                parameters.Add("@cantidad", OdbcType.Numeric).Value = nuevaSalidaDet.cantidad;
                                                                parameters.Add("@precio", OdbcType.Numeric).Value = nuevaSalidaDet.precio; //existencias > 0 ? costoPromedio : costoPromedioEntrada;
                                                                parameters.Add("@importe", OdbcType.Numeric).Value = nuevaSalidaDet.importe; //existencias > 0 ? importe : (nuevaSalidaDet.cantidad * costoPromedioEntrada);
                                                                parameters.Add("@partida_oc", OdbcType.Numeric).Value = DBNull.Value;
                                                                parameters.Add("@costo_prom", OdbcType.Numeric).Value = nuevaSalidaDet.precio; //existencias > 0 ? costoPromedio : costoPromedioEntrada;
                                                                parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                                                parameters.Add("@manzana_ini", OdbcType.Numeric).Value = DBNull.Value;
                                                                parameters.Add("@lote_ini", OdbcType.Numeric).Value = DBNull.Value;
                                                                parameters.Add("@interior_ini", OdbcType.Char).Value = DBNull.Value;
                                                                parameters.Add("@manzana_fin", OdbcType.Numeric).Value = DBNull.Value;
                                                                parameters.Add("@lote_fin", OdbcType.Numeric).Value = DBNull.Value;
                                                                parameters.Add("@interior_fin", OdbcType.Char).Value = DBNull.Value;
                                                                parameters.Add("@remision", OdbcType.Char).Value = DBNull.Value;
                                                                parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                                                parameters.Add("@id_resguardo", OdbcType.Numeric).Value = DBNull.Value;
                                                                parameters.Add("@area_alm", OdbcType.Char).Value = nuevaSalidaDet.area_alm;
                                                                parameters.Add("@lado_alm", OdbcType.Char).Value = nuevaSalidaDet.lado_alm;
                                                                parameters.Add("@estante_alm", OdbcType.Char).Value = nuevaSalidaDet.estante_alm;
                                                                parameters.Add("@nivel_alm", OdbcType.Char).Value = nuevaSalidaDet.nivel_alm;
                                                                parameters.Add("@fecha_fisico", OdbcType.Date).Value = DBNull.Value;

                                                                cmd.Connection = trans.Connection;
                                                                cmd.Transaction = trans;

                                                                count += cmd.ExecuteNonQuery();
                                                            }
                                                            #endregion

                                                            #region Actualizar Tablas Acumula
                                                            var objAcumula = new MovimientoDetalleEnkontrolDTO
                                                            {
                                                                insumo = nuevaSalidaDet.insumo,
                                                                cantidad = nuevaSalidaDet.cantidad,
                                                                precio = costoPromedio, //precio = existencias > 0 ? costoPromedio : precioEntrada,
                                                                tipo_mov = nuevaSalidaDet.tipo_mov,
                                                                costo_prom = costoPromedio, //costo_prom = existencias > 0 ? costoPromedio : costoPromedioEntrada
                                                            };

                                                            actualizarAcumula(nuevaSalidaDet.almacen, nuevaSalida.cc, objAcumula, dbSigoplanTransaction, trans);
                                                            #endregion
                                                        }
                                                    }
                                                    #endregion
                                                    else
                                                    {
                                                        var traspaso = _context.tblAlm_Traspaso.FirstOrDefault(x =>
                                                        x.estatusRegistro &&
                                                        x.ccOrigen == renglon.ccOrigen &&
                                                        x.almacenOrigen == renglon.almacenOrigen &&
                                                        x.ccDestino == renglon.ccDestino &&
                                                        x.almacenDestino == renglon.almacenDestino &&
                                                        x.insumo == renglon.insumo &&
                                                        x.cantidadTraspasar == renglon.cantidad &&
                                                        x.folioInterno == renglon.folioInterno
                                                    );

                                                        if (traspaso != null)
                                                        {
                                                            var cantidadCancelada = renglon.cantidad - renglon.cantidadTraspasar;

                                                            traspaso.cantidadCancelada = !renglon.checkBoxRechazado ? cantidadCancelada : traspaso.cantidadTraspasar;
                                                            traspaso.rechazado = renglon.checkBoxRechazado;
                                                            traspaso.comentariosGestion = renglon.comentariosGestion ?? "";

                                                            if (((traspaso.cantidadTraspasar - traspaso.cantidadCancelada) > 0) && !renglon.checkBoxRechazado)
                                                            {
                                                                foreach (var ubi in renglon.listUbicacionMovimiento)
                                                                {
                                                                    int partida = partidaContador++;
                                                                    //decimal costoPromedio = getCostoPromedioNuevo(nuevaSalida.almacen, ubi.insumo);

                                                                    //                                                        #region Checar existencia para el reseteo del precio y costo promedio
                                                                    //                                                        decimal precioEntrada = 0;
                                                                    //                                                        decimal costoPromedioEntrada = 0;
                                                                    //                                                        decimal existencias = 0;

                                                                    //                                                        var movimientosEK = consultaCheckProductivo(
                                                                    //                                                            string.Format(@"SELECT 
                                                                    //                                                    	mov.almacen, mov.tipo_mov, mov.numero, mov.fecha, det.partida, det.insumo, det.cantidad, det.precio, det.importe, det.costo_prom 
                                                                    //                                                    FROM si_movimientos mov 
                                                                    //                                                    	INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                                                                    //                                                    WHERE mov.almacen = {0} AND det.insumo = {1} 
                                                                    //                                                    ORDER BY mov.fecha DESC", nuevaSalida.almacen, ubi.insumo)
                                                                    //                                                        );

                                                                    //                                                        if (movimientosEK != null)
                                                                    //                                                        {
                                                                    //                                                            var movimientos = (List<dynamic>)movimientosEK.ToObject<List<dynamic>>();
                                                                    //                                                            var entradas = movimientos.Where(x => (int)x.tipo_mov < 50).ToList();
                                                                    //                                                            var ultimaEntrada = entradas.OrderByDescending(x => (DateTime)x.fecha).First();
                                                                    //                                                            entradas.RemoveAt(0); //Quitar la ultima entrada para calcular las existencias antes de que se realizara ese movimiento.
                                                                    //                                                            decimal cantidadEntradas = 0;
                                                                    //                                                            foreach (var ent in entradas)
                                                                    //                                                            {
                                                                    //                                                                cantidadEntradas += Convert.ToDecimal(ent.cantidad, CultureInfo.InvariantCulture);
                                                                    //                                                            }
                                                                    //                                                            var salidas = movimientos.Where(x => (int)x.tipo_mov > 50).ToList();
                                                                    //                                                            decimal cantidadSalidas = 0;
                                                                    //                                                            foreach (var sal in salidas)
                                                                    //                                                            {
                                                                    //                                                                cantidadSalidas += Convert.ToDecimal(sal.cantidad, CultureInfo.InvariantCulture);
                                                                    //                                                            }
                                                                    //                                                            existencias = cantidadEntradas - cantidadSalidas;

                                                                    //                                                            if (existencias <= 0)
                                                                    //                                                            {
                                                                    //                                                                precioEntrada = Convert.ToDecimal(ultimaEntrada.precio, CultureInfo.InvariantCulture);
                                                                    //                                                                costoPromedioEntrada = Convert.ToDecimal(ultimaEntrada.precio, CultureInfo.InvariantCulture);
                                                                    //                                                            }
                                                                    //                                                        }
                                                                    //                                                        else
                                                                    //                                                        {
                                                                    //                                                            throw new Exception("No existen movimientos para el insumo \"" + ubi.insumo + "\" en el almacén \"" + nuevaSalida.almacen + "\".");
                                                                    //                                                        }
                                                                    //                                                        #endregion

                                                                    decimal costoPromedio = getCostoPromedioKardex(nuevaSalida.almacen, ubi.insumo);

                                                                    #region Movimiento Detalle SIGOPLAN
                                                                    tblAlm_MovimientosDet nuevaSalidaDet = new tblAlm_MovimientosDet
                                                                    {
                                                                        almacen = grp.almacenOrigen,
                                                                        tipo_mov = 52,
                                                                        numero = nuevoFolio + 1,
                                                                        partida = partida,
                                                                        insumo = traspaso.insumo,
                                                                        comentarios = traspaso.comentarios,
                                                                        area = 0,
                                                                        cuenta = 0,
                                                                        cantidad = ubi.cantidadMovimiento,
                                                                        precio = costoPromedio, //precio = existencias > 0 ? costoPromedio : precioEntrada,
                                                                        importe = ubi.cantidadMovimiento * costoPromedio, //importe = ubi.cantidadMovimiento * (existencias > 0 ? costoPromedio : precioEntrada),
                                                                        id_resguardo = 0,
                                                                        area_alm = ubi.area_alm ?? "",
                                                                        lado_alm = ubi.lado_alm ?? "",
                                                                        estante_alm = ubi.estante_alm ?? "",
                                                                        nivel_alm = ubi.nivel_alm ?? "",
                                                                        transporte = "",
                                                                        estatusHabilitado = true
                                                                    };

                                                                    _context.tblAlm_MovimientosDet.Add(nuevaSalidaDet);
                                                                    _context.SaveChanges();
                                                                    #endregion

                                                                    #region Movimiento Detalle Enkontrol
                                                                    var importe = nuevaSalidaDet.cantidad * costoPromedio;

                                                                    //if (existencias > 0)
                                                                    //{
                                                                    //    if (costoPromedio <= 0 || importe <= 0)
                                                                    //    {
                                                                    //        throw new Exception("El precio, el importe y el costo promedio no pueden ser igual o menor a cero.");
                                                                    //    }
                                                                    //}
                                                                    //else
                                                                    //{
                                                                    //    if (precioEntrada <= 0 || costoPromedioEntrada <= 0)
                                                                    //    {
                                                                    //        throw new Exception("El precio, el importe y el costo promedio no pueden ser igual o menor a cero.");
                                                                    //    }
                                                                    //}

                                                                    if (costoPromedio <= 0)
                                                                    {
                                                                        throw new Exception("El precio, el importe y el costo promedio no pueden ser igual o menor a cero.");
                                                                    }

                                                                    var consultaMovimientosDetalle = @"INSERT INTO si_movimientos_det 
                                                        (almacen, tipo_mov, numero, partida, insumo, comentarios, area, cuenta, cantidad, precio, importe, 
                                                        partida_oc, costo_prom, obra, manzana_ini, lote_ini, interior_ini, manzana_fin, lote_fin, interior_fin, 
                                                        remision, sector_id, id_resguardo, area_alm, lado_alm, estante_alm, nivel_alm, fecha_fisico) 
                                                        VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                                                    using (var cmd = new OdbcCommand(consultaMovimientosDetalle))
                                                                    {
                                                                        OdbcParameterCollection parameters = cmd.Parameters;

                                                                        parameters.Add("@almacen", OdbcType.Numeric).Value = nuevaSalidaDet.almacen;
                                                                        parameters.Add("@tipo_mov", OdbcType.Numeric).Value = nuevaSalidaDet.tipo_mov;
                                                                        parameters.Add("@numero", OdbcType.Numeric).Value = nuevoFolio + 1;
                                                                        parameters.Add("@partida", OdbcType.Numeric).Value = nuevaSalidaDet.partida;
                                                                        parameters.Add("@insumo", OdbcType.Numeric).Value = nuevaSalidaDet.insumo;
                                                                        parameters.Add("@comentarios", OdbcType.Char).Value = nuevaSalidaDet.comentarios != null ? nuevaSalidaDet.comentarios : "";
                                                                        parameters.Add("@area", OdbcType.Numeric).Value = nuevaSalidaDet.area;
                                                                        parameters.Add("@cuenta", OdbcType.Numeric).Value = nuevaSalidaDet.cuenta;
                                                                        parameters.Add("@cantidad", OdbcType.Numeric).Value = nuevaSalidaDet.cantidad;
                                                                        parameters.Add("@precio", OdbcType.Numeric).Value = nuevaSalidaDet.precio; //existencias > 0 ? costoPromedio : costoPromedioEntrada;
                                                                        parameters.Add("@importe", OdbcType.Numeric).Value = nuevaSalidaDet.importe; //existencias > 0 ? importe : (nuevaSalidaDet.cantidad * costoPromedioEntrada);
                                                                        parameters.Add("@partida_oc", OdbcType.Numeric).Value = DBNull.Value;
                                                                        parameters.Add("@costo_prom", OdbcType.Numeric).Value = nuevaSalidaDet.precio; //existencias > 0 ? costoPromedio : costoPromedioEntrada;
                                                                        parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                                                        parameters.Add("@manzana_ini", OdbcType.Numeric).Value = DBNull.Value;
                                                                        parameters.Add("@lote_ini", OdbcType.Numeric).Value = DBNull.Value;
                                                                        parameters.Add("@interior_ini", OdbcType.Char).Value = DBNull.Value;
                                                                        parameters.Add("@manzana_fin", OdbcType.Numeric).Value = DBNull.Value;
                                                                        parameters.Add("@lote_fin", OdbcType.Numeric).Value = DBNull.Value;
                                                                        parameters.Add("@interior_fin", OdbcType.Char).Value = DBNull.Value;
                                                                        parameters.Add("@remision", OdbcType.Char).Value = DBNull.Value;
                                                                        parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                                                        parameters.Add("@id_resguardo", OdbcType.Numeric).Value = DBNull.Value;
                                                                        parameters.Add("@area_alm", OdbcType.Char).Value = nuevaSalidaDet.area_alm;
                                                                        parameters.Add("@lado_alm", OdbcType.Char).Value = nuevaSalidaDet.lado_alm;
                                                                        parameters.Add("@estante_alm", OdbcType.Char).Value = nuevaSalidaDet.estante_alm;
                                                                        parameters.Add("@nivel_alm", OdbcType.Char).Value = nuevaSalidaDet.nivel_alm;
                                                                        parameters.Add("@fecha_fisico", OdbcType.Date).Value = DBNull.Value;

                                                                        cmd.Connection = trans.Connection;
                                                                        cmd.Transaction = trans;

                                                                        count += cmd.ExecuteNonQuery();
                                                                    }
                                                                    #endregion

                                                                    #region Actualizar Tablas Acumula
                                                                    var objAcumula = new MovimientoDetalleEnkontrolDTO
                                                                    {
                                                                        insumo = nuevaSalidaDet.insumo,
                                                                        cantidad = nuevaSalidaDet.cantidad,
                                                                        precio = costoPromedio, //precio = existencias > 0 ? costoPromedio : precioEntrada,
                                                                        tipo_mov = nuevaSalidaDet.tipo_mov,
                                                                        costo_prom = costoPromedio //costo_prom = existencias > 0 ? costoPromedio : costoPromedioEntrada
                                                                    };

                                                                    actualizarAcumula(nuevaSalidaDet.almacen, nuevaSalida.cc, objAcumula, dbSigoplanTransaction, trans);
                                                                    #endregion
                                                                }

                                                                traspaso.autorizado = true;

                                                                if (renglon.cantidad == traspaso.cantidadTraspasar)
                                                                {
                                                                    traspaso.estado = "T";
                                                                }
                                                            }

                                                            _context.Entry(traspaso).State = System.Data.Entity.EntityState.Modified;
                                                            _context.SaveChanges();
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                var registrosTraspasosSIGOPLAN = _context.tblAlm_Traspaso.Where(x =>
                                                    x.estatusRegistro &&
                                                    x.ccOrigen == grp.ccOrigen &&
                                                    x.almacenOrigen == grp.almacenOrigen &&
                                                    x.ccDestino == grp.ccDestino &&
                                                    x.almacenDestino == grp.almacenDestino &&
                                                    x.folioInterno == grp.folioInterno
                                                ).ToList();

                                                foreach (var registro in registrosTraspasosSIGOPLAN)
                                                {
                                                    registro.rechazado = true;
                                                    _context.SaveChanges();
                                                }
                                            }
                                        }

                                        trans.Commit();
                                        dbSigoplanTransaction.Commit();

                                        result.Add(SUCCESS, true);
                                        result.Add("flagMaquinaStandBy", flagMaquinaStandBy);
                                        result.Add("orden_ct", _orden_ct);
                                    }
                                    catch (Exception e)
                                    {
                                        trans.Rollback();
                                        dbSigoplanTransaction.Rollback();

                                        LogError(12, 0, "AlmacenController", "guardarAutorizacionesTraspasos", e, AccionEnum.AGREGAR, 0, listaAutorizados);

                                        result.Add(MESSAGE, e.Message);
                                        result.Add(SUCCESS, false);
                                    }
                                }
                            }
                        }
                        #endregion
                    }
                    break;
            }

            return result;
        }

        public Dictionary<string, object> guardarAutorizacionesTraspasosOrigen(List<TraspasoDTO> listaAutorizados)
        {
            var result = new Dictionary<string, object>();

            var empleado = 0;
            var usuarioSigoplan = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

            if (usuarioSigoplan != null)
            {
                empleado = usuarioSigoplan.empleado;
            }

            using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
            {
                using (var con = checkConexionProductivo())
                {
                    using (var trans = con.BeginTransaction())
                    {
                        try
                        {
                            var groupAutorizados = listaAutorizados.GroupBy(x => new
                            {
                                x.numeroRequisicion,
                                x.ccOrigen,
                                x.almacenOrigen,
                                x.ccDestino,
                                x.almacenDestino
                            })
                            .Select(grupo => new
                            {
                                numeroRequisicion = grupo.Key.numeroRequisicion,
                                ccOrigen = grupo.Key.ccOrigen,
                                almacenOrigen = grupo.Key.almacenOrigen,
                                ccDestino = grupo.Key.ccDestino,
                                almacenDestino = grupo.Key.almacenDestino,
                                renglones = grupo.ToList()
                            });

                            #region Validación Inventariables
                            var registrosGrupoInsumo = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM grupos_insumo")).ToObject<List<dynamic>>();

                            foreach (var grp in groupAutorizados)
                            {
                                foreach (var ren in grp.renglones)
                                {
                                    if (!ren.checkBoxRechazado)
                                    {
                                        foreach (var ubi in ren.listUbicacionMovimiento)
                                        {
                                            var tipo_insumo = Int32.Parse(ubi.insumo.ToString().Substring(0, 1));
                                            var grupo_insumo = Int32.Parse(ubi.insumo.ToString().Substring(1, 2));
                                            var registroGrupoInsumo = registrosGrupoInsumo.FirstOrDefault(x => (int)x.tipo_insumo == tipo_insumo && (int)x.grupo_insumo == grupo_insumo);

                                            if (registroGrupoInsumo != null)
                                            {
                                                if ((string)registroGrupoInsumo.inventariado != "I")
                                                {
                                                    throw new Exception(string.Format(@"El insumo ""{0}"" no es inventariable.", ubi.insumo));
                                                }
                                            }
                                            else
                                            {
                                                throw new Exception(string.Format(@"No se encuentra la información del grupo de insumo para el insumo ""{0}"".", ubi.insumo));
                                            }
                                        }
                                    }
                                }
                            }
                            #endregion

                            #region Validar Existencias
                            foreach (var grp in groupAutorizados)
                            {
                                foreach (var ren in grp.renglones)
                                {
                                    if (!ren.checkBoxRechazado)
                                    {
                                        foreach (var ubi in ren.listUbicacionMovimiento)
                                        {
                                            var entradasEK = consultaCheckProductivo(
                                                string.Format(@"SELECT 
                                                                det.insumo, 
                                                                (CAST(det.insumo AS Varchar) + '-' + ins.descripcion) AS insumoDesc, 
                                                                SUM(det.cantidad) AS cantidad, 
                                                                det.area_alm, 
                                                                det.lado_alm, 
                                                                det.estante_alm, 
                                                                det.nivel_alm 
                                                            FROM si_movimientos mov 
                                                                INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                                                                INNER JOIN insumos ins ON det.insumo = ins.insumo 
                                                            WHERE 
                                                                mov.almacen = {0} AND 
                                                                det.insumo = {1} AND 
                                                                det.area_alm = '{2}' AND 
                                                                det.lado_alm = '{3}' AND 
                                                                det.estante_alm = '{4}' AND 
                                                                det.nivel_alm = '{5}' AND 
                                                                det.tipo_mov < 50 
                                                            GROUP BY det.insumo, ins.descripcion, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm",
                                                                ren.almacenOrigen, ubi.insumo, ubi.area_alm, ubi.lado_alm, ubi.estante_alm, ubi.nivel_alm));

                                            var salidasEK = consultaCheckProductivo(
                                                string.Format(@"SELECT 
                                                                det.insumo, 
                                                                (CAST(det.insumo AS Varchar) + '-' + ins.descripcion) AS insumoDesc, 
                                                                SUM(det.cantidad) AS cantidad, 
                                                                det.area_alm, 
                                                                det.lado_alm, 
                                                                det.estante_alm, 
                                                                det.nivel_alm 
                                                            FROM si_movimientos mov 
                                                                INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                                                                INNER JOIN insumos ins ON det.insumo = ins.insumo 
                                                            WHERE 
                                                                mov.almacen = {0} AND 
                                                                det.insumo = {1} AND 
                                                                det.area_alm = '{2}' AND 
                                                                det.lado_alm = '{3}' AND 
                                                                det.estante_alm = '{4}' AND 
                                                                det.nivel_alm = '{5}' AND 
                                                                det.tipo_mov > 50 
                                                            GROUP BY det.insumo, ins.descripcion, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm",
                                                                ren.almacenOrigen, ubi.insumo, ubi.area_alm, ubi.lado_alm, ubi.estante_alm, ubi.nivel_alm));

                                            if (entradasEK != null)
                                            {
                                                var entradas = (List<UbicacionDetalleDTO>)entradasEK.ToObject<List<UbicacionDetalleDTO>>();

                                                if (salidasEK != null)
                                                {
                                                    var salidas = (List<UbicacionDetalleDTO>)salidasEK.ToObject<List<UbicacionDetalleDTO>>();

                                                    foreach (var ent in entradas)
                                                    {
                                                        var salida = salidas.FirstOrDefault(x =>
                                                                x.insumoDesc == ent.insumoDesc &&
                                                                x.area_alm == ent.area_alm &&
                                                                x.lado_alm == ent.lado_alm &&
                                                                x.estante_alm == ent.estante_alm &&
                                                                x.nivel_alm == ent.nivel_alm
                                                            );

                                                        if (salida != null)
                                                        {
                                                            ent.cantidad = ent.cantidad - Convert.ToDecimal(salida.cantidad, CultureInfo.InvariantCulture);
                                                        }
                                                    }
                                                }

                                                decimal existenciasInsumo = entradas.Sum(x => x.cantidad);
                                                decimal totalCantidadPorInsumo = groupAutorizados.Sum(x =>
                                                    x.renglones.Sum(y =>
                                                        y.listUbicacionMovimiento.Where(z =>
                                                            z.insumo == ubi.insumo &&
                                                            z.area_alm == ubi.area_alm &&
                                                            z.lado_alm == ubi.lado_alm &&
                                                            z.estante_alm == ubi.estante_alm &&
                                                            z.nivel_alm == ubi.nivel_alm
                                                        ).Sum(w =>
                                                            w.cantidadMovimiento
                                                        )
                                                    )
                                                );

                                                if (existenciasInsumo < totalCantidadPorInsumo)
                                                {
                                                    var ubicacion = ubi.area_alm + "-" + ubi.lado_alm + "-" + ubi.estante_alm + "-" + ubi.nivel_alm;

                                                    throw new Exception("No se guardó la información. La cantidad solicitada del insumo \"" + ubi.insumo + "\" sobrepasa las existencias (" + existenciasInsumo + ") en la ubicación \"" + ubicacion + "\".");
                                                }
                                            }
                                            else
                                            {
                                                var ubicacion = ubi.area_alm + "-" + ubi.lado_alm + "-" + ubi.estante_alm + "-" + ubi.nivel_alm;

                                                throw new Exception("No se guardó la información. No hay existencias para el insumo \"" + ubi.insumo + "\" en la ubicación \"" + ubicacion + "\".");
                                            }
                                        }
                                    }
                                }
                            }
                            #endregion

                            var count = 0;
                            var flagMaquinaStandBy = false;

                            List<int> listaAlmacenesOrigen = new List<int>();
                            List<int> listaNumeros = new List<int>();

                            foreach (var grp in groupAutorizados)
                            {
                                #region Validación Stand-By
                                //if (vSesiones.sesionEmpresaActual == 2)
                                //{
                                //    flagMaquinaStandBy = checkMaquinaStandBy(grp.ccOrigen);
                                //}
                                #endregion

                                var ultimoMovimientoEK = consultaCheckProductivo(
                                string.Format(@"SELECT 
                                                    TOP 1 numero, folio_traspaso 
                                                FROM si_movimientos 
                                                WHERE almacen = {0} AND tipo_mov = {1} 
                                                ORDER BY numero DESC", grp.almacenOrigen, 52)
                                );

                                var nuevoFolio = 0;

                                if (ultimoMovimientoEK != null)
                                {
                                    var ultimoMovimiento = ((List<SurtidoDetDTO>)ultimoMovimientoEK.ToObject<List<SurtidoDetDTO>>())[0];

                                    nuevoFolio = ultimoMovimiento.numero;
                                }

                                decimal total = 0;

                                foreach (var ren in grp.renglones)
                                {
                                    foreach (var ubi in ren.listUbicacionMovimiento)
                                    {
                                        if (ubi != null)
                                        {
                                            //                                            #region Checar existencia para el reseteo del precio y costo promedio
                                            //                                            decimal precioEntrada = 0;
                                            //                                            decimal costoPromedioEntrada = 0;
                                            //                                            decimal existencias = 0;

                                            //                                            var movimientosEK = consultaCheckProductivo(
                                            //                                                string.Format(@"SELECT 
                                            //                                                    	mov.almacen, mov.tipo_mov, mov.numero, mov.fecha, det.partida, det.insumo, det.cantidad, det.precio, det.importe, det.costo_prom 
                                            //                                                    FROM si_movimientos mov 
                                            //                                                    	INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                                            //                                                    WHERE mov.almacen = {0} AND det.insumo = {1} 
                                            //                                                    ORDER BY mov.fecha DESC", grp.almacenOrigen, ubi.insumo)
                                            //                                            );

                                            //                                            if (movimientosEK != null)
                                            //                                            {
                                            //                                                var movimientos = (List<dynamic>)movimientosEK.ToObject<List<dynamic>>();
                                            //                                                var entradas = movimientos.Where(x => (int)x.tipo_mov < 50).ToList();
                                            //                                                var ultimaEntrada = entradas.OrderByDescending(x => (DateTime)x.fecha).First();
                                            //                                                entradas.RemoveAt(0); //Quitar la ultima entrada para calcular las existencias antes de que se realizara ese movimiento.
                                            //                                                decimal cantidadEntradas = 0;
                                            //                                                foreach (var ent in entradas)
                                            //                                                {
                                            //                                                    cantidadEntradas += Convert.ToDecimal(ent.cantidad, CultureInfo.InvariantCulture);
                                            //                                                }
                                            //                                                var salidas = movimientos.Where(x => (int)x.tipo_mov > 50).ToList();
                                            //                                                decimal cantidadSalidas = 0;
                                            //                                                foreach (var sal in salidas)
                                            //                                                {
                                            //                                                    cantidadSalidas += Convert.ToDecimal(sal.cantidad, CultureInfo.InvariantCulture);
                                            //                                                }
                                            //                                                existencias = cantidadEntradas - cantidadSalidas;

                                            //                                                if (existencias <= 0)
                                            //                                                {
                                            //                                                    precioEntrada = Convert.ToDecimal(ultimaEntrada.precio, CultureInfo.InvariantCulture);
                                            //                                                    costoPromedioEntrada = Convert.ToDecimal(ultimaEntrada.precio, CultureInfo.InvariantCulture);
                                            //                                                }
                                            //                                            }
                                            //                                            else
                                            //                                            {
                                            //                                                throw new Exception("No existen movimientos para el insumo \"" + ubi.insumo + "\" en el almacén \"" + grp.almacenOrigen + "\".");
                                            //                                            }
                                            //                                            #endregion

                                            //                                            decimal costoPromedio = getCostoPromedioNuevo(grp.almacenOrigen, ubi.insumo);
                                            //total += ubi.cantidadMovimiento * (existencias > 0 ? costoPromedio : costoPromedioEntrada);

                                            var costoPromedio = getCostoPromedioKardex(grp.almacenOrigen, ubi.insumo);

                                            total += ubi.cantidadMovimiento * costoPromedio;
                                        }
                                    }
                                }

                                var folioTraspaso = 1;

                                var ultimoFolioTraspasoEK = consultaCheckProductivo(
                                    string.Format(@"SELECT TOP 1 
                                                            almacen, tipo_mov, numero, cc, folio_traspaso 
                                                        FROM si_movimientos 
                                                        WHERE almacen = {0} AND cc = '{1}' 
                                                        ORDER BY folio_traspaso DESC", grp.almacenOrigen, grp.ccOrigen)
                                );

                                if (ultimoFolioTraspasoEK != null)
                                {
                                    var ultimoFolioTraspaso = ((List<dynamic>)ultimoFolioTraspasoEK.ToObject<List<dynamic>>())[0];

                                    folioTraspaso = ultimoFolioTraspaso.folio_traspaso != null ? ((int)ultimoFolioTraspaso.folio_traspaso + 1) : 1;
                                }

                                listaAlmacenesOrigen.Add(grp.almacenOrigen);
                                listaNumeros.Add(nuevoFolio + 1);

                                #region Movimiento SIGOPLAN
                                tblAlm_Movimientos nuevaSalida = new tblAlm_Movimientos
                                {
                                    almacen = grp.almacenOrigen,
                                    tipo_mov = 52,
                                    numero = nuevoFolio + 1,
                                    cc = grp.ccOrigen.ToUpper(),
                                    compania = 1,
                                    periodo = DateTime.Now.Month,
                                    ano = DateTime.Now.Year,
                                    orden_ct = folioTraspaso,
                                    frente = 0,
                                    fecha = DateTime.Now.Date,
                                    proveedor = 0,
                                    total = total,
                                    estatus = "A",
                                    transferida = "N",
                                    alm_destino = grp.almacenDestino,
                                    cc_destino = grp.ccDestino.ToUpper(),
                                    comentarios = grp.renglones[0].comentariosGestion, //Se escoge el primer renglón ya que se juntaron para que nomás generen un movimiento.
                                    tipo_trasp = "0",
                                    tipo_cambio = 1,
                                    numeroReq = grp.numeroRequisicion,
                                    estatusHabilitado = true
                                };

                                _context.tblAlm_Movimientos.Add(nuevaSalida);
                                _context.SaveChanges();
                                #endregion

                                #region Movimiento Enkontrol
                                if (nuevaSalida.total <= 0)
                                {
                                    throw new Exception("El total no puede ser igual o menor a cero.");
                                }

                                var consultaMovimientos = @"INSERT INTO si_movimientos 
                                         (almacen, tipo_mov, numero, cc, compania, periodo, ano, orden_ct, frente, fecha, proveedor, total, estatus, 
                                         transferida, poliza, empleado, alm_destino, cc_destino, comentarios, tipo_trasp, numero_destino, tp, year_poliza, 
                                         mes_poliza, tipo_cambio, hora, fecha_modifica, empleado_modifica, destajista, obra, id_residente, factura, sector_id, 
                                         tc_cc, paquete, tipo_cargo, cargo_destajista, cargo_id_residente, embarque, orden_prod, folio_traspaso, bit_sin_ubicacion) 
                                         VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                using (var cmd = new OdbcCommand(consultaMovimientos))
                                {
                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@almacen", OdbcType.Numeric).Value = nuevaSalida.almacen;
                                    parameters.Add("@tipo_mov", OdbcType.Numeric).Value = nuevaSalida.tipo_mov;
                                    parameters.Add("@numero", OdbcType.Numeric).Value = nuevaSalida.numero;
                                    parameters.Add("@cc", OdbcType.Char).Value = nuevaSalida.cc;
                                    parameters.Add("@compania", OdbcType.Numeric).Value = nuevaSalida.compania;
                                    parameters.Add("@periodo", OdbcType.Numeric).Value = nuevaSalida.periodo;
                                    parameters.Add("@ano", OdbcType.Numeric).Value = nuevaSalida.ano;
                                    parameters.Add("@orden_ct", OdbcType.Numeric).Value = nuevaSalida.orden_ct;
                                    parameters.Add("@frente", OdbcType.Numeric).Value = nuevaSalida.frente;
                                    parameters.Add("@fecha", OdbcType.Date).Value = nuevaSalida.fecha.Date;
                                    parameters.Add("@proveedor", OdbcType.Numeric).Value = nuevaSalida.proveedor;
                                    parameters.Add("@total", OdbcType.Numeric).Value = nuevaSalida.total;
                                    parameters.Add("@estatus", OdbcType.Char).Value = nuevaSalida.estatus;
                                    parameters.Add("@transferida", OdbcType.Char).Value = nuevaSalida.transferida;
                                    parameters.Add("@poliza", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@empleado", OdbcType.Numeric).Value = empleado;
                                    parameters.Add("@alm_destino", OdbcType.Numeric).Value = nuevaSalida.alm_destino;
                                    parameters.Add("@cc_destino", OdbcType.Char).Value = nuevaSalida.cc_destino;
                                    parameters.Add("@comentarios", OdbcType.Char).Value = nuevaSalida.comentarios != null ? nuevaSalida.comentarios : "";
                                    parameters.Add("@tipo_trasp", OdbcType.Char).Value = nuevaSalida.tipo_trasp;
                                    parameters.Add("@numero_destino", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@tp", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@year_poliza", OdbcType.Numeric).Value = DateTime.Now.Year;
                                    parameters.Add("@mes_poliza", OdbcType.Numeric).Value = DateTime.Now.Month;
                                    parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = nuevaSalida.tipo_cambio;
                                    parameters.Add("@hora", OdbcType.Time).Value = DateTime.Now.TimeOfDay;
                                    parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                    parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = empleado;
                                    parameters.Add("@destajista", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@factura", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@tc_cc", OdbcType.Numeric).Value = 1;
                                    parameters.Add("@paquete", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@tipo_cargo", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@cargo_Destajista", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@cargo_id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@embarque", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@orden_prod", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@folio_traspaso", OdbcType.Numeric).Value = folioTraspaso;
                                    parameters.Add("@bit_sin_ubicacion", OdbcType.Numeric).Value = 0;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;

                                    count += cmd.ExecuteNonQuery();
                                }
                                #endregion

                                int partidaContador = 1;

                                foreach (var renglon in grp.renglones)
                                {
                                    var cantidadCancelada = renglon.cantidad - renglon.cantidadTraspasar;

                                    #region Actualizar registros de surtido.
                                    var listaSurtido = _context.tblCom_SurtidoDet.Where(x =>
                                        x.estatus &&
                                        x.cc == grp.ccOrigen &&
                                        x.numero == grp.numeroRequisicion &&
                                        x.insumo == renglon.insumo &&
                                        x.almacenOrigenID == grp.almacenOrigen &&
                                        x.almacenDestinoID == grp.almacenDestino &&
                                        x.estadoSurtido == "R" &&
                                        x.tipoSurtidoDetalle == "AE"
                                    ).ToList();

                                    foreach (var sur in listaSurtido)
                                    {
                                        sur.estadoSurtido = "T";
                                        _context.SaveChanges();
                                    }
                                    #endregion

                                    foreach (var ubi in renglon.listUbicacionMovimiento)
                                    {
                                        int partida = partidaContador++;
                                        //                                        decimal costoPromedio = getCostoPromedioNuevo(nuevaSalida.almacen, ubi.insumo);

                                        //                                        #region Checar existencia para el reseteo del precio y costo promedio
                                        //                                        decimal precioEntrada = 0;
                                        //                                        decimal costoPromedioEntrada = 0;
                                        //                                        decimal existencias = 0;

                                        //                                        var movimientosEK = consultaCheckProductivo(
                                        //                                            string.Format(@"SELECT 
                                        //                                                    	mov.almacen, mov.tipo_mov, mov.numero, mov.fecha, det.partida, det.insumo, det.cantidad, det.precio, det.importe, det.costo_prom 
                                        //                                                    FROM si_movimientos mov 
                                        //                                                    	INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                                        //                                                    WHERE mov.almacen = {0} AND det.insumo = {1} 
                                        //                                                    ORDER BY mov.fecha DESC", nuevaSalida.almacen, ubi.insumo)
                                        //                                        );

                                        //                                        if (movimientosEK != null)
                                        //                                        {
                                        //                                            var movimientos = (List<dynamic>)movimientosEK.ToObject<List<dynamic>>();
                                        //                                            var entradas = movimientos.Where(x => (int)x.tipo_mov < 50).ToList();
                                        //                                            var ultimaEntrada = entradas.OrderByDescending(x => (DateTime)x.fecha).First();
                                        //                                            entradas.RemoveAt(0); //Quitar la ultima entrada para calcular las existencias antes de que se realizara ese movimiento.
                                        //                                            decimal cantidadEntradas = 0;
                                        //                                            foreach (var ent in entradas)
                                        //                                            {
                                        //                                                cantidadEntradas += Convert.ToDecimal(ent.cantidad, CultureInfo.InvariantCulture);
                                        //                                            }
                                        //                                            var salidas = movimientos.Where(x => (int)x.tipo_mov > 50).ToList();
                                        //                                            decimal cantidadSalidas = 0;
                                        //                                            foreach (var sal in salidas)
                                        //                                            {
                                        //                                                cantidadSalidas += Convert.ToDecimal(sal.cantidad, CultureInfo.InvariantCulture);
                                        //                                            }
                                        //                                            existencias = cantidadEntradas - cantidadSalidas;

                                        //                                            if (existencias <= 0)
                                        //                                            {
                                        //                                                precioEntrada = Convert.ToDecimal(ultimaEntrada.precio, CultureInfo.InvariantCulture);
                                        //                                                costoPromedioEntrada = Convert.ToDecimal(ultimaEntrada.precio, CultureInfo.InvariantCulture);
                                        //                                            }
                                        //                                        }
                                        //                                        else
                                        //                                        {
                                        //                                            throw new Exception("No existen movimientos para el insumo \"" + ubi.insumo + "\" en el almacén \"" + nuevaSalida.almacen + "\".");
                                        //                                        }
                                        //                                        #endregion

                                        var costoPromedio = getCostoPromedioKardex(nuevaSalida.almacen, ubi.insumo);

                                        #region Movimiento Detalle SIGOPLAN
                                        tblAlm_MovimientosDet nuevaSalidaDet = new tblAlm_MovimientosDet
                                        {
                                            almacen = grp.almacenOrigen,
                                            tipo_mov = 52,
                                            numero = nuevoFolio + 1,
                                            partida = partida,
                                            insumo = renglon.insumo,
                                            comentarios = "", //Agarrar los comentarios del front-end.
                                            area = 0,
                                            cuenta = 0,
                                            cantidad = ubi.cantidadMovimiento,
                                            precio = costoPromedio, //precio = existencias > 0 ? costoPromedio : precioEntrada,
                                            importe = ubi.cantidadMovimiento * costoPromedio, //importe = ubi.cantidadMovimiento * (existencias > 0 ? costoPromedio : precioEntrada),
                                            id_resguardo = 0,
                                            area_alm = ubi.area_alm ?? "",
                                            lado_alm = ubi.lado_alm ?? "",
                                            estante_alm = ubi.estante_alm ?? "",
                                            nivel_alm = ubi.nivel_alm ?? "",
                                            transporte = "",
                                            estatusHabilitado = true
                                        };

                                        _context.tblAlm_MovimientosDet.Add(nuevaSalidaDet);
                                        _context.SaveChanges();
                                        #endregion

                                        #region Movimiento Detalle Enkontrol
                                        var importe = nuevaSalidaDet.cantidad * costoPromedio;

                                        //if (existencias > 0)
                                        //{
                                        //    if (costoPromedio <= 0 || importe <= 0)
                                        //    {
                                        //        throw new Exception("El precio, el importe y el costo promedio no pueden ser igual o menor a cero.");
                                        //    }
                                        //}
                                        //else
                                        //{
                                        //    if (precioEntrada <= 0 || costoPromedioEntrada <= 0)
                                        //    {
                                        //        throw new Exception("El precio, el importe y el costo promedio no pueden ser igual o menor a cero.");
                                        //    }
                                        //}

                                        if (costoPromedio <= 0)
                                        {
                                            throw new Exception("El precio, el importe y el costo promedio no pueden ser igual o menor a cero.");
                                        }

                                        var consultaMovimientosDetalle = @"INSERT INTO si_movimientos_det 
                                                        (almacen, tipo_mov, numero, partida, insumo, comentarios, area, cuenta, cantidad, precio, importe, 
                                                        partida_oc, costo_prom, obra, manzana_ini, lote_ini, interior_ini, manzana_fin, lote_fin, interior_fin, 
                                                        remision, sector_id, id_resguardo, area_alm, lado_alm, estante_alm, nivel_alm, fecha_fisico) 
                                                        VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                        using (var cmd = new OdbcCommand(consultaMovimientosDetalle))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@almacen", OdbcType.Numeric).Value = nuevaSalidaDet.almacen;
                                            parameters.Add("@tipo_mov", OdbcType.Numeric).Value = nuevaSalidaDet.tipo_mov;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = nuevoFolio + 1;
                                            parameters.Add("@partida", OdbcType.Numeric).Value = nuevaSalidaDet.partida;
                                            parameters.Add("@insumo", OdbcType.Numeric).Value = nuevaSalidaDet.insumo;
                                            parameters.Add("@comentarios", OdbcType.Char).Value = nuevaSalidaDet.comentarios != null ? nuevaSalidaDet.comentarios : "";
                                            parameters.Add("@area", OdbcType.Numeric).Value = nuevaSalidaDet.area;
                                            parameters.Add("@cuenta", OdbcType.Numeric).Value = nuevaSalidaDet.cuenta;
                                            parameters.Add("@cantidad", OdbcType.Numeric).Value = nuevaSalidaDet.cantidad;
                                            parameters.Add("@precio", OdbcType.Numeric).Value = nuevaSalidaDet.precio; //existencias > 0 ? costoPromedio : costoPromedioEntrada;
                                            parameters.Add("@importe", OdbcType.Numeric).Value = nuevaSalidaDet.importe; //existencias > 0 ? importe : (nuevaSalidaDet.cantidad * costoPromedioEntrada);
                                            parameters.Add("@partida_oc", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@costo_prom", OdbcType.Numeric).Value = nuevaSalidaDet.precio; //existencias > 0 ? costoPromedio : costoPromedioEntrada;
                                            parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                            parameters.Add("@manzana_ini", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@lote_ini", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@interior_ini", OdbcType.Char).Value = DBNull.Value;
                                            parameters.Add("@manzana_fin", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@lote_fin", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@interior_fin", OdbcType.Char).Value = DBNull.Value;
                                            parameters.Add("@remision", OdbcType.Char).Value = DBNull.Value;
                                            parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@id_resguardo", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@area_alm", OdbcType.Char).Value = nuevaSalidaDet.area_alm;
                                            parameters.Add("@lado_alm", OdbcType.Char).Value = nuevaSalidaDet.lado_alm;
                                            parameters.Add("@estante_alm", OdbcType.Char).Value = nuevaSalidaDet.estante_alm;
                                            parameters.Add("@nivel_alm", OdbcType.Char).Value = nuevaSalidaDet.nivel_alm;
                                            parameters.Add("@fecha_fisico", OdbcType.Date).Value = DBNull.Value;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }
                                        #endregion

                                        #region Actualizar Tablas Acumula
                                        var objAcumula = new MovimientoDetalleEnkontrolDTO
                                        {
                                            insumo = nuevaSalidaDet.insumo,
                                            cantidad = nuevaSalidaDet.cantidad,
                                            precio = costoPromedio, //precio = existencias > 0 ? costoPromedio : precioEntrada,
                                            tipo_mov = nuevaSalidaDet.tipo_mov,
                                            costo_prom = costoPromedio //costo_prom = existencias > 0 ? costoPromedio : costoPromedioEntrada
                                        };

                                        actualizarAcumula(nuevaSalidaDet.almacen, nuevaSalida.cc, objAcumula, dbSigoplanTransaction, trans);
                                        #endregion
                                    }
                                }
                            }

                            //List<string> listaMovimientos = new List<string>();

                            //for (int i = 0; i < listaAlmacenesOrigen.Count(); i++)
                            //{
                            //    listaMovimientos.Add(listaAlmacenesOrigen[i] + "-" + listaNumeros[i]);
                            //}

                            //string listaMovimientosString = string.Join(", ", listaMovimientos);

                            trans.Commit();
                            dbSigoplanTransaction.Commit();

                            result.Add(SUCCESS, true);
                            result.Add("flagMaquinaStandBy", flagMaquinaStandBy);
                            //result.Add("listaMovimientosString", listaMovimientosString);
                            result.Add("listaAlmacenesOrigen", listaAlmacenesOrigen);
                            result.Add("listaNumeros", listaNumeros);
                        }
                        catch (Exception e)
                        {
                            trans.Rollback();
                            dbSigoplanTransaction.Rollback();

                            LogError(12, 0, "AlmacenController", "guardarAutorizacionesTraspasosOrigen", e, AccionEnum.AGREGAR, 0, listaAutorizados);

                            result.Add(MESSAGE, e.Message);
                            result.Add(SUCCESS, false);
                        }
                    }
                }
            }

            return result;
        }

        public Dictionary<string, object> getInformacionInsumo(FiltrosExistenciaInsumoDTO filtros)
        {
            var result = new Dictionary<string, object>();

            try
            {
                var existenciasEK = consultaCheckProductivo(
                    string.Format(@"SELECT 
                                        det.insumo, 
                                        i.tipo, 
                                        i.grupo, 
                                        mov.almacen, 
                                        area_alm, 
                                        lado_alm, 
                                        estante_alm, 
                                        nivel_alm, 
                                        i.descripcion AS descInsumo, 
                                        ( 
                                           SELECT 
                                              TOP 1 g.descripcion 
                                           FROM 
                                              grupos_insumo g 
                                           WHERE g.grupo_insumo = i.grupo AND g.tipo_insumo = i.tipo 
                                        ) 
                                        AS descripcion, 
                                        ( 
                                           SELECT 
                                              TOP 1 Replace(Replace(n.descripcion, 'ALMACEN ', ''), 'DE ', '') 
                                           FROM si_almacen n 
                                           WHERE n.almacen = mov.almacen 
                                        ) 
                                        AS nomAlmacen, 
                                        SUM( 
                                            CASE 
                                                WHEN mov.tipo_mov < 50 THEN det.cantidad 
                                                ELSE det.cantidad * -1 
                                            END 
                                        ) AS cantidad 
                                    FROM si_movimientos mov 
                                        INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                                        INNER JOIN insumos i ON det.insumo = i.insumo 
                                    WHERE mov.almacen = {0} AND det.insumo = {1} 
                                    GROUP BY det.insumo, i.tipo, i.grupo, descripcion, mov.almacen, descInsumo, area_alm, lado_alm, estante_alm, nivel_alm",
                                    filtros.almacen,
                                    filtros.insumo));

                ValuacionDTO resultado = new ValuacionDTO();

                if (existenciasEK != null)
                {
                    var existencias = (List<ValuacionDTO>)existenciasEK.ToObject<List<ValuacionDTO>>();
                    var stockMinimo = _context.tblAlm_StockMinimo.FirstOrDefault(x => x.estatus && x.almacenID == filtros.almacen && x.insumo == filtros.insumo);
                    var listSolicitadoPendiente = _context.tblAlm_Traspaso.Where(x =>
                            x.estatusRegistro &&
                            x.ccOrigen == filtros.cc &&
                            x.almacenOrigen == filtros.almacen &&
                            !x.autorizado &&
                            x.insumo == filtros.insumo).ToList();
                    var solicitadoPendiente = listSolicitadoPendiente.Count > 0 ? listSolicitadoPendiente.Select(z => z.cantidadTraspasar != null ? z.cantidadTraspasar : 0).Sum() : 0;

                    resultado = new ValuacionDTO
                    {
                        insumo = existencias[0].insumo,
                        descInsumo = existencias[0].descInsumo,
                        cantidad = existencias.Where(x => x.cantidad != null).Sum(x => x.cantidad), //cantidad = existencias[0].cantidad,
                        minimo = stockMinimo != null ? stockMinimo.stockMinimo : "",
                        minimoDesc = stockMinimo != null ? stockMinimo.stockMinimo : "",
                        solicitadoPendiente = solicitadoPendiente
                    };
                }

                result.Add("data", resultado);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return result;
        }

        public string fillNo(string e, int no)
        {
            var newe = "";
            var el = e.Length;
            if (e.Length < no)
            {
                for (int i = el; i < no; i++)
                {
                    newe += "0";
                }
                return newe + e;
            }
            else
            {
                return e;
            }
        }

        public Dictionary<string, object> getInsumosCatalogo(DataTablesParam param, InsumoCatalogoDTO filtros)
        {
            var result = new Dictionary<string, object>();

            filtros = JsonConvert.DeserializeObject<InsumoCatalogoDTO>(param.sSearchValues[0]);

            try
            {
                var data = new List<InsumoCatalogoDTO>();

                if ((MainContextEnum)vSesiones.sesionEmpresaActual == MainContextEnum.Construplan || (MainContextEnum)vSesiones.sesionEmpresaActual == MainContextEnum.Arrendadora)
                {
                    #region RESTO EMPRESAS
                    //                    var listaInsumos = _contextEnkontrol.Select<InsumoCatalogoDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO
                    //                    {
                    //                        consulta = @"SELECT 
                    //                                        ins.insumo, 
                    //                                        ins.descripcion AS insumoDesc, 
                    //                                        ins.id_modelo_maquinaria AS modeloMaquinaria, 
                    //                                        modMaqui.modelo_maqui_desc AS modeloMaquinariaDesc, 
                    //                                        ins.unidad AS unidadDesc, 
                    //                                        ins.tipo, 
                    //                                        t.descripcion AS tipoDesc, 
                    //                                        ins.grupo, 
                    //                                        g.descripcion AS grupoDesc, 
                    //                                        ins.tolerancia 
                    //                                    FROM insumos ins 
                    //                                        INNER JOIN tipos_insumo t ON ins.tipo = t.tipo_insumo 
                    //                                        INNER JOIN grupos_insumo g ON ins.tipo = g.tipo_insumo AND ins.grupo = g.grupo_insumo 
                    //                                        LEFT JOIN modelo_maquinaria modMaqui ON ins.id_modelo_maquinaria = modMaqui.id_modelo_maquinaria 
                    //                                    ORDER BY insumo"
                    //                    });

                    var rangoRenglonInicial = param.iDisplayStart + 1;
                    var rangoRenglonFinal = param.iDisplayStart + param.iDisplayLength;
                    var stringVariablesSQL = string.Format(@"
                        DECLARE @insumo int SET @insumo = {0} 
                        DECLARE @insumoDesc varchar(500) SET @insumoDesc = '{1}' 
                        DECLARE @modeloMaquinariaDesc varchar(500) SET @modeloMaquinariaDesc = '{2}' 
                        DECLARE @unidad varchar(500) SET @unidad = '{3}' 
                        DECLARE @tipo int SET @tipo = {4} 
                        DECLARE @tipoDesc varchar(500) SET @tipoDesc = '{5}' 
                        DECLARE @grupo int SET @grupo = {6} 
                        DECLARE @grupoDesc varchar(500) SET @grupoDesc = '{7}' 
                        DECLARE @tolerancia float SET @tolerancia = {8} 
                    ", filtros.insumo, filtros.insumoDesc, filtros.modeloMaquinariaDesc, filtros.unidadDesc, filtros.tipo, filtros.tipoDesc, filtros.grupo, filtros.grupoDesc, filtros.tolerancia);

                    var listaInsumos = _contextEnkontrol.Select<InsumoCatalogoDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO
                    {
                        consulta = string.Format(@"
                            {0} 

                            SELECT * FROM (
                                SELECT 
                                    ROW_NUMBER() OVER(ORDER BY insumo ASC) AS numRow,
                                    ins.insumo, 
                                    ins.descripcion AS insumoDesc, 
                                    ins.id_modelo_maquinaria AS modeloMaquinaria, 
                                    modMaqui.modelo_maqui_desc AS modeloMaquinariaDesc, 
                                    ins.unidad AS unidadDesc, 
                                    ins.tipo, 
                                    t.descripcion AS tipoDesc, 
                                    ins.grupo, 
                                    g.descripcion AS grupoDesc, 
                                    ins.tolerancia 
                                FROM insumos ins 
                                    INNER JOIN tipos_insumo t ON ins.tipo = t.tipo_insumo 
                                    INNER JOIN grupos_insumo g ON ins.tipo = g.tipo_insumo AND ins.grupo = g.grupo_insumo 
                                    LEFT JOIN modelo_maquinaria modMaqui ON ins.id_modelo_maquinaria = modMaqui.id_modelo_maquinaria
                                WHERE
                                    ((@insumo = 0) OR (@insumo != 0 AND CAST(ins.insumo AS varchar) LIKE '%' + CAST(@insumo AS varchar) + '%' )) AND
                                    ((@insumoDesc = '') OR (@insumoDesc != '' AND ins.descripcion LIKE '%' + @insumoDesc + '%')) AND
                                    ((@modeloMaquinariaDesc = '') OR (@modeloMaquinariaDesc != '' AND modMaqui.modelo_maqui_desc LIKE '%' + @modeloMaquinariaDesc + '%')) AND
                                    ((@unidad = '') OR (@unidad != '' AND ins.unidad LIKE '%' + @unidad + '%')) AND
                                    ((@tipo = 0) OR (@tipo != 0 AND ins.tipo = @tipo)) AND
                                    ((@tipoDesc = '') OR (@tipoDesc != '' AND t.descripcion LIKE '%' + @tipoDesc + '%')) AND
                                    ((@grupo = 0) OR (@grupo != 0 AND ins.grupo = @grupo)) AND
                                    ((@grupoDesc = '') OR (@grupoDesc != '' AND g.descripcion LIKE '%' + @grupoDesc + '%')) AND
                                    ((@tolerancia = 0) OR (@tolerancia != 0 AND ins.tolerancia = @tolerancia))
                            ) tablaDatos
                            WHERE numRow BETWEEN {1} AND {2}", stringVariablesSQL, rangoRenglonInicial, rangoRenglonFinal)
                    });

                    var insumosSIGOPLAN = _context.tblAlm_Insumo.Where(x => x.estatus).Select(x => new { insumo = x.insumo, fechaAlta = x.fechaAlta, modeloMaquinariaDesc = x.modeloMaquinariaDesc }).ToList();

                    data = listaInsumos.Select(x => new InsumoCatalogoDTO
                    {
                        insumo = x.insumo,
                        insumoDesc = x.insumoDesc,
                        modeloMaquinariaDesc = insumosSIGOPLAN.Where(y => y.insumo == x.insumo).Select(z => z.modeloMaquinariaDesc).FirstOrDefault(),
                        unidadDesc = x.unidadDesc,
                        tipo = x.tipo,
                        tipoDesc = x.tipoDesc,
                        grupo = x.grupo,
                        grupoDesc = x.grupoDesc,
                        tolerancia = x.tolerancia,
                        fechaAlta = insumosSIGOPLAN.FirstOrDefault(y => y.insumo == x.insumo) != null ?
                            insumosSIGOPLAN.Where(y => y.insumo == x.insumo).Select(z => z.fechaAlta).FirstOrDefault() : (DateTime?)null,
                        fechaAltaString = insumosSIGOPLAN.FirstOrDefault(y => y.insumo == x.insumo) != null ?
                            insumosSIGOPLAN.Where(y => y.insumo == x.insumo).Select(z => z.fechaAlta.ToShortDateString()).FirstOrDefault() : ""
                    }).ToList();

                    int totalCount = _contextEnkontrol.Select<int>(getEnkontrolEnumADM(), new OdbcConsultaDTO
                    {
                        consulta = string.Format(@"
                            {0} 

                            SELECT
                                COUNT(*)
                            FROM insumos ins 
                                INNER JOIN tipos_insumo t ON ins.tipo = t.tipo_insumo 
                                INNER JOIN grupos_insumo g ON ins.tipo = g.tipo_insumo AND ins.grupo = g.grupo_insumo 
                                LEFT JOIN modelo_maquinaria modMaqui ON ins.id_modelo_maquinaria = modMaqui.id_modelo_maquinaria 
                            WHERE
                                ((@insumo = 0) OR (@insumo != 0 AND CAST(ins.insumo AS varchar) LIKE '%' + CAST(@insumo AS varchar) + '%' )) AND
                                ((@insumoDesc = '') OR (@insumoDesc != '' AND ins.descripcion LIKE '%' + @insumoDesc + '%')) AND
                                ((@modeloMaquinariaDesc = '') OR (@modeloMaquinariaDesc != '' AND modMaqui.modelo_maqui_desc LIKE '%' + @modeloMaquinariaDesc + '%')) AND
                                ((@unidad = '') OR (@unidad != '' AND ins.unidad LIKE '%' + @unidad + '%')) AND
                                ((@tipo = 0) OR (@tipo != 0 AND ins.tipo = @tipo)) AND
                                ((@tipoDesc = '') OR (@tipoDesc != '' AND t.descripcion LIKE '%' + @tipoDesc + '%')) AND
                                ((@grupo = 0) OR (@grupo != 0 AND ins.grupo = @grupo)) AND
                                ((@grupoDesc = '') OR (@grupoDesc != '' AND g.descripcion LIKE '%' + @grupoDesc + '%')) AND
                                ((@tolerancia = 0) OR (@tolerancia != 0 AND ins.tolerancia = @tolerancia))", stringVariablesSQL)
                    })[0];
                    //int pageNo = 1;

                    //if (param.iDisplayStart >= param.iDisplayLength)
                    //{
                    //    pageNo = (param.iDisplayStart / param.iDisplayLength) + 1;
                    //}

                    //data = data.Skip((pageNo - 1) * param.iDisplayLength).Take(param.iDisplayLength).Select(x => x).ToList();

                    result.Add("datos", new
                    {
                        aaData = data,
                        sEcho = param.sEcho,
                        iTotalDisplayRecords = totalCount,
                        iTotalRecords = totalCount
                    });

                    //                var insumosEK = consultaCheckProductivo(
                    //                    string.Format(@"SELECT 
                    //                                        ins.insumo, 
                    //                                        ins.descripcion AS insumoDesc, 
                    //                                        ins.id_modelo_maquinaria AS modeloMaquinaria, 
                    //                                        modMaqui.modelo_maqui_desc AS modeloMaquinariaDesc, 
                    //                                        ins.unidad AS unidadDesc, 
                    //                                        ins.tipo, 
                    //                                        t.descripcion AS tipoDesc, 
                    //                                        ins.grupo, 
                    //                                        g.descripcion AS grupoDesc, 
                    //                                        ins.tolerancia 
                    //                                    FROM insumos ins 
                    //                                        INNER JOIN tipos_insumo t ON ins.tipo = t.tipo_insumo 
                    //                                        INNER JOIN grupos_insumo g ON ins.tipo = g.tipo_insumo AND ins.grupo = g.grupo_insumo 
                    //                                        LEFT JOIN modelo_maquinaria modMaqui ON ins.id_modelo_maquinaria = modMaqui.id_modelo_maquinaria 
                    //                                    ORDER BY insumo"
                    //                    )
                    //                );

                    //                List<InsumoCatalogoDTO> data = new List<InsumoCatalogoDTO>();

                    //                if (insumosEK != null)
                    //                {
                    //                    var insumosSIGOPLAN = _context.tblAlm_Insumo.Where(x => x.estatus).Select(x => new
                    //                    {
                    //                        insumo = x.insumo,
                    //                        fechaAlta = x.fechaAlta,
                    //                        modeloMaquinariaDesc = x.modeloMaquinariaDesc
                    //                    }).ToList();

                    //                    data.AddRange(((List<InsumoCatalogoDTO>)insumosEK.ToObject<List<InsumoCatalogoDTO>>()).Select(x => new InsumoCatalogoDTO
                    //                    {
                    //                        insumo = x.insumo,
                    //                        insumoDesc = x.insumoDesc,
                    //                        modeloMaquinariaDesc = insumosSIGOPLAN.Where(y => y.insumo == x.insumo).Select(z => z.modeloMaquinariaDesc).FirstOrDefault(),
                    //                        unidadDesc = x.unidadDesc,
                    //                        tipo = x.tipo,
                    //                        tipoDesc = x.tipoDesc,
                    //                        grupo = x.grupo,
                    //                        grupoDesc = x.grupoDesc,
                    //                        tolerancia = x.tolerancia,
                    //                        fechaAlta = insumosSIGOPLAN.FirstOrDefault(y => y.insumo == x.insumo) != null ?
                    //                            insumosSIGOPLAN.Where(y => y.insumo == x.insumo).Select(z => z.fechaAlta).FirstOrDefault() : (DateTime?)null,
                    //                        fechaAltaString = insumosSIGOPLAN.FirstOrDefault(y => y.insumo == x.insumo) != null ?
                    //                            insumosSIGOPLAN.Where(y => y.insumo == x.insumo).Select(z => z.fechaAlta.ToShortDateString()).FirstOrDefault() : ""
                    //                    }));

                    //                    //foreach (var ins in listInsumos)
                    //                    //{
                    //                    //    var insumoSIGOPLAN = insumosSIGOPLAN.FirstOrDefault(x => x.insumo == ins.insumo);

                    //                    //    if (insumoSIGOPLAN != null)
                    //                    //    {
                    //                    //        ins.fechaAlta = insumoSIGOPLAN.fechaAlta;
                    //                    //        ins.fechaAltaString = insumoSIGOPLAN.fechaAlta.Date.ToShortDateString();
                    //                    //        ins.modeloMaquinariaDesc = insumoSIGOPLAN.modeloMaquinariaDesc;
                    //                    //    }
                    //                    //}

                    //                    //data.AddRange(listInsumos);
                    //                }

                    #endregion
                }
                else if ((MainContextEnum)vSesiones.sesionEmpresaActual == MainContextEnum.Colombia)
                {
                    #region COLOMBIA
                    var rangoRenglonInicial = param.iDisplayStart + 1;
                    var rangoRenglonFinal = param.iDisplayStart + param.iDisplayLength;
                    var stringVariablesSQL = string.Format(@"
                        DECLARE @insumo int SET @insumo = {0} 
                        DECLARE @insumoDesc varchar(500) SET @insumoDesc = '{1}' 
                        DECLARE @unidad varchar(500) SET @unidad = '{3}' 
                        DECLARE @tipo int SET @tipo = {4} 
                        DECLARE @tipoDesc varchar(500) SET @tipoDesc = '{5}' 
                        DECLARE @grupo int SET @grupo = {6} 
                        DECLARE @grupoDesc varchar(500) SET @grupoDesc = '{7}' 
                        DECLARE @tolerancia float SET @tolerancia = {8} 
                    ", filtros.insumo, filtros.insumoDesc, filtros.modeloMaquinariaDesc, filtros.unidadDesc, filtros.tipo, filtros.tipoDesc, filtros.grupo, filtros.grupoDesc, filtros.tolerancia);


                    var listaInsumos = (List<InsumoCatalogoDTO>)consultaCheckProductivo(
                                          string.Format(@"
                                                        {0} 
                                                        SELECT * FROM (
                                                                SELECT 
                                                                ROW_NUMBER() OVER(ORDER BY insumo ASC) AS numRow,
                                                                ins.insumo, 
                                                                ins.descripcion AS insumoDesc, 
                                                                ins.unidad AS unidadDesc, 
                                                                ins.tipo, 
                                                                t.descripcion AS tipoDesc, 
                                                                ins.grupo, 
                                                                g.descripcion AS grupoDesc, 
                                                                ins.tolerancia 
                                                            FROM insumos ins 
                                                                INNER JOIN tipos_insumo t ON ins.tipo = t.tipo_insumo 
                                                                INNER JOIN grupos_insumo g ON ins.tipo = g.tipo_insumo AND ins.grupo = g.grupo_insumo 
                                                            WHERE
                                                                ((@insumo = 0) OR (@insumo != 0 AND CAST(ins.insumo AS varchar) LIKE '%' + CAST(@insumo AS varchar) + '%' )) AND
                                                                ((@insumoDesc = '') OR (@insumoDesc != '' AND ins.descripcion LIKE '%' + @insumoDesc + '%')) AND                                                              
                                                                ((@unidad = '') OR (@unidad != '' AND ins.unidad LIKE '%' + @unidad + '%')) AND
                                                                ((@tipo = 0) OR (@tipo != 0 AND ins.tipo = @tipo)) AND
                                                                ((@tipoDesc = '') OR (@tipoDesc != '' AND t.descripcion LIKE '%' + @tipoDesc + '%')) AND
                                                                ((@grupo = 0) OR (@grupo != 0 AND ins.grupo = @grupo)) AND
                                                                ((@grupoDesc = '') OR (@grupoDesc != '' AND g.descripcion LIKE '%' + @grupoDesc + '%')) AND
                                                                ((@tolerancia = 0) OR (@tolerancia != 0 AND ins.tolerancia = @tolerancia))
                                                        ) tablaDatos
                                                        WHERE numRow BETWEEN {1} AND {2}", stringVariablesSQL, rangoRenglonInicial, rangoRenglonFinal)).ToObject<List<InsumoCatalogoDTO>>();



                    var insumosSIGOPLAN = _context.tblAlm_Insumo.Where(x => x.estatus).Select(x => new { insumo = x.insumo, fechaAlta = x.fechaAlta, modeloMaquinariaDesc = x.modeloMaquinariaDesc }).ToList();

                    data = listaInsumos.Select(x => new InsumoCatalogoDTO
                    {
                        insumo = x.insumo,
                        insumoDesc = x.insumoDesc,
                        //modeloMaquinariaDesc = insumosSIGOPLAN.Where(y => y.insumo == x.insumo).Select(z => z.modeloMaquinariaDesc).FirstOrDefault(),
                        unidadDesc = x.unidadDesc,
                        tipo = x.tipo,
                        tipoDesc = x.tipoDesc,
                        grupo = x.grupo,
                        grupoDesc = x.grupoDesc,
                        tolerancia = x.tolerancia,
                        fechaAlta = insumosSIGOPLAN.FirstOrDefault(y => y.insumo == x.insumo) != null ?
                            insumosSIGOPLAN.Where(y => y.insumo == x.insumo).Select(z => z.fechaAlta).FirstOrDefault() : (DateTime?)null,
                        fechaAltaString = insumosSIGOPLAN.FirstOrDefault(y => y.insumo == x.insumo) != null ?
                            insumosSIGOPLAN.Where(y => y.insumo == x.insumo).Select(z => z.fechaAlta.ToShortDateString()).FirstOrDefault() : ""
                    }).ToList();

                    int totalCount = _contextEnkontrol.Select<int>(getEnkontrolEnumADM(), new OdbcConsultaDTO
                    {
                        consulta = string.Format(@"
                            {0} 

                            SELECT
                                COUNT(*)
                            FROM DBA.insumos ins 
                                INNER JOIN DBA.tipos_insumo t ON ins.tipo = t.tipo_insumo 
                                INNER JOIN DBA.grupos_insumo g ON ins.tipo = g.tipo_insumo AND ins.grupo = g.grupo_insumo 
                            WHERE
                                ((@insumo = 0) OR (@insumo != 0 AND CAST(ins.insumo AS varchar) LIKE '%' + CAST(@insumo AS varchar) + '%' )) AND
                                ((@insumoDesc = '') OR (@insumoDesc != '' AND ins.descripcion LIKE '%' + @insumoDesc + '%')) AND
                                ((@unidad = '') OR (@unidad != '' AND ins.unidad LIKE '%' + @unidad + '%')) AND
                                ((@tipo = 0) OR (@tipo != 0 AND ins.tipo = @tipo)) AND
                                ((@tipoDesc = '') OR (@tipoDesc != '' AND t.descripcion LIKE '%' + @tipoDesc + '%')) AND
                                ((@grupo = 0) OR (@grupo != 0 AND ins.grupo = @grupo)) AND
                                ((@grupoDesc = '') OR (@grupoDesc != '' AND g.descripcion LIKE '%' + @grupoDesc + '%')) AND
                                ((@tolerancia = 0) OR (@tolerancia != 0 AND ins.tolerancia = @tolerancia))", stringVariablesSQL)
                    })[0];

                    result.Add("datos", new
                    {
                        aaData = data,
                        sEcho = param.sEcho,
                        iTotalDisplayRecords = totalCount,
                        iTotalRecords = totalCount
                    });
                    #endregion
                }
                else if ((MainContextEnum)vSesiones.sesionEmpresaActual == MainContextEnum.PERU)
                {
                    #region PERU
                    var listaInsumos = new List<InsumoCatalogoDTO>();

                    using (var dbStartSoft = new MainContextPeruStarSoft003BDCOMUN())
                    {
                        var insumoStarsoft = dbStartSoft.MAEART.ToList().Join(
                            dbStartSoft.TIPO_ARTICULO.ToList(),
                            i => i.ATIPO,
                            t => t.COD_TIPO,
                            (i, t) => new { i, t }
                        ).Join(
                            dbStartSoft.FAMILIA.ToList(),
                            it => it.i.AFAMILIA,
                            f => f.FAM_CODIGO,
                            (it, f) => new { it.i, it.t, f }
                        ).Where(x =>
                            (filtros.insumo > 0 ? x.i.ACODIGO.Contains(filtros.insumo.ToString()) : true) &&
                            (!string.IsNullOrEmpty(filtros.insumoDesc) ? x.i.ADESCRI.Contains(filtros.insumoDesc.ToUpper()) : true) &&
                            (!string.IsNullOrEmpty(filtros.unidadDesc) ? x.i.AUNIDAD.Contains(filtros.unidadDesc.ToUpper()) : true) &&
                            (filtros.tipo > 0 ? Int32.Parse(x.i.ATIPO) == filtros.tipo : true) &&
                            (!string.IsNullOrEmpty(filtros.tipoDesc) ? x.t.DES_TIPO.Contains(filtros.tipoDesc.ToUpper()) : true) &&
                            (filtros.grupo > 0 ? x.i.AFAMILIA.Contains(filtros.grupo.ToString()) : true) &&
                            (!string.IsNullOrEmpty(filtros.grupoDesc) ? x.f.FAM_NOMBRE.Contains(filtros.grupoDesc.ToUpper()) : true)
                        ).ToList();
                        var lstTipoInsumoStarsoft = dbStartSoft.TIPO_ARTICULO.ToList();
                        var lstFamiliaInsumoStarsoft = dbStartSoft.FAMILIA.ToList();

                        foreach (var item in insumoStarsoft)
                        {
                            listaInsumos.Add(new InsumoCatalogoDTO()
                            {
                                PERU_insumo = item.i.ACODIGO,
                                insumoDesc = item.i.ADESCRI,
                                modeloMaquinaria = 0,
                                modeloMaquinariaDesc = "",
                                unidadDesc = item.i.AUNIDAD,
                                tipo = Convert.ToInt32(item.i.ATIPO),
                                tipoDesc = item.t.DES_TIPO,
                                grupo = 0,
                                grupoDesc = item.f.FAM_NOMBRE,
                                tolerancia = 0M,
                                fechaAlta = item.i.AFECHA,
                                PERU_grupo = item.i.AFAMILIA,
                                PERU_estado = item.i.AESTADO
                            });
                        }
                    }

                    data = listaInsumos.Select((x, i) => new InsumoCatalogoDTO
                    {
                        numeroRenglon = i,
                        PERU_insumo = x.PERU_insumo,
                        insumoDesc = x.insumoDesc,
                        modeloMaquinariaDesc = x.modeloMaquinariaDesc,
                        unidadDesc = x.unidadDesc,
                        tipo = x.tipo,
                        tipoDesc = x.tipoDesc,
                        grupo = x.grupo,
                        grupoDesc = x.grupoDesc,
                        tolerancia = x.tolerancia,
                        fechaAlta = x.fechaAlta.Value,
                        fechaAltaString = x.fechaAlta.Value.ToShortDateString(),
                        PERU_grupo = x.PERU_grupo,
                        PERU_estado = x.PERU_estado
                    }).ToList();

                    var totalCountPeru = data.Count();
                    var rangoRenglonInicialPeru = param.iDisplayStart + 1;
                    var rangoRenglonFinalPeru = param.iDisplayStart + param.iDisplayLength;

                    data = data.Where(x => x.numeroRenglon >= rangoRenglonInicialPeru && x.numeroRenglon <= rangoRenglonFinalPeru).ToList();

                    result.Add("datos", new
                    {
                        aaData = data,
                        sEcho = param.sEcho,
                        iTotalDisplayRecords = totalCountPeru,
                        iTotalRecords = totalCountPeru
                    });
                    #endregion
                }

                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
                LogError(0, 0, "AlmacenController", "getInsumosCatalogo", e, AccionEnum.CONSULTA, 0, filtros);
            }

            return result;
        }

        public List<InsumoEnkontrolDTO> getInsumos()
        {
            List<InsumoEnkontrolDTO> data = new List<InsumoEnkontrolDTO>();
            //Se separan las consultas por tipos para que no se pase la memoria (System.OutOfMemoryException).
            if ((MainContextEnum)vSesiones.sesionEmpresaActual == MainContextEnum.Construplan || (MainContextEnum)vSesiones.sesionEmpresaActual == MainContextEnum.Arrendadora)
            {
                var tipos = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT tipo FROM insumos GROUP BY tipo")).ToObject<List<dynamic>>();

                var insumosSIGOPLAN = _context.tblAlm_Insumo.Where(x => x.estatus).ToList();

                foreach (var t in tipos)
                {
                    var insumosEK = consultaCheckProductivo(
                        string.Format(@"SELECT 
                                        ins.*, 
                                        modMaqui.modelo_maqui_desc AS modeloMaquinariaDesc, 
                                        t.descripcion AS tipoDesc, 
                                        g.descripcion AS grupoDesc, 
                                        ins.[reportes internos] AS reportes_internos, 
                                        ins.[default ventas] AS default_ventas 
                                    FROM insumos ins 
                                        INNER JOIN tipos_insumo t ON ins.tipo = t.tipo_insumo 
                                        INNER JOIN grupos_insumo g ON ins.tipo = g.tipo_insumo AND ins.grupo = g.grupo_insumo 
                                        LEFT JOIN modelo_maquinaria modMaqui ON ins.id_modelo_maquinaria = modMaqui.id_modelo_maquinaria 
                                    WHERE ins.tipo = {0} 
                                    ORDER BY insumo", (int)t.tipo)
                    );

                    if (insumosEK != null)
                    {
                        var listInsumos = (List<InsumoEnkontrolDTO>)insumosEK.ToObject<List<InsumoEnkontrolDTO>>();

                        foreach (var ins in listInsumos)
                        {
                            var insumoSIGOPLAN = insumosSIGOPLAN.FirstOrDefault(x => x.insumo == ins.insumo);

                            if (insumoSIGOPLAN != null)
                            {
                                ins.fechaAlta = insumoSIGOPLAN.fechaAlta;
                                ins.fechaAltaString = insumoSIGOPLAN.fechaAlta.Date.ToShortDateString();
                            }
                        }

                        data.AddRange(listInsumos);
                    }
                }
            }
            else if ((MainContextEnum)vSesiones.sesionEmpresaActual == MainContextEnum.Colombia)
            {
                var tipos = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT tipo FROM insumos GROUP BY tipo")).ToObject<List<dynamic>>();



                var insumosSIGOPLAN = _context.tblAlm_Insumo.Where(x => x.estatus).ToList();

                foreach (var t in tipos)
                {
                    var insumosEK = consultaCheckProductivo(
                        string.Format(@"SELECT 
                                        ins.*, 
                                        modMaqui.modelo_maqui_desc AS modeloMaquinariaDesc, 
                                        t.descripcion AS tipoDesc, 
                                        g.descripcion AS grupoDesc, 
                                        ins.[reportes internos] AS reportes_internos, 
                                        ins.[default ventas] AS default_ventas 
                                    FROM insumos ins 
                                        INNER JOIN tipos_insumo t ON ins.tipo = t.tipo_insumo 
                                        INNER JOIN grupos_insumo g ON ins.tipo = g.tipo_insumo AND ins.grupo = g.grupo_insumo 
                                    WHERE ins.tipo = {0} 
                                    ORDER BY insumo", (int)t.tipo)
                    );

                    if (insumosEK != null)
                    {
                        var listInsumos = (List<InsumoEnkontrolDTO>)insumosEK.ToObject<List<InsumoEnkontrolDTO>>();

                        foreach (var ins in listInsumos)
                        {
                            var insumoSIGOPLAN = insumosSIGOPLAN.FirstOrDefault(x => x.insumo == ins.insumo);

                            if (insumoSIGOPLAN != null)
                            {
                                ins.fechaAlta = insumoSIGOPLAN.fechaAlta;
                                ins.fechaAltaString = insumoSIGOPLAN.fechaAlta.Date.ToShortDateString();
                            }
                        }

                        data.AddRange(listInsumos);
                    }
                }
            }
            else
            {
                var tipos = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT tipo FROM insumos GROUP BY tipo")).ToObject<List<dynamic>>();
                var insumosSIGOPLAN = _context.tblAlm_Insumo.Where(x => x.estatus).ToList();

                foreach (var t in tipos)
                {
                    var insumosEK = consultaCheckProductivo(
                        string.Format(@"SELECT 
                                        ins.*, 
                                        t.descripcion AS tipoDesc, 
                                        g.descripcion AS grupoDesc, 
                                        ins.[reportes internos] AS reportes_internos, 
                                        ins.[default ventas] AS default_ventas 
                                    FROM insumos ins 
                                        INNER JOIN tipos_insumo t ON ins.tipo = t.tipo_insumo 
                                        INNER JOIN grupos_insumo g ON ins.tipo = g.tipo_insumo AND ins.grupo = g.grupo_insumo 
                                    WHERE ins.tipo = {0} 
                                    ORDER BY insumo", (int)t.tipo)
                    );

                    if (insumosEK != null)
                    {
                        var listInsumos = (List<InsumoEnkontrolDTO>)insumosEK.ToObject<List<InsumoEnkontrolDTO>>();

                        foreach (var ins in listInsumos)
                        {
                            var insumoSIGOPLAN = insumosSIGOPLAN.FirstOrDefault(x => x.insumo == ins.insumo);

                            if (insumoSIGOPLAN != null)
                            {
                                ins.fechaAlta = insumoSIGOPLAN.fechaAlta;
                                ins.fechaAltaString = insumoSIGOPLAN.fechaAlta.Date.ToShortDateString();
                            }
                        }

                        data.AddRange(listInsumos);
                    }
                }
            }
            return data;
        }

        public Dictionary<string, object> getInformacionInsumoCatalogo(int insumo)
        {
            var result = new Dictionary<string, object>();

            try
            {
                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan || vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                {
                    #region México
                    var insumoDetalleEK = consultaCheckProductivo(
                        string.Format(@"SELECT 
                                        ins.insumo, 
                                        ins.descripcion AS insumoDesc, 
                                        ins.id_modelo_maquinaria AS modeloMaquinaria, 
                                        modMaqui.modelo_maqui_desc AS modeloMaquinariaDesc, 
                                        ins.unidad AS unidadDesc, 
                                        ins.tipo, 
                                        t.descripcion AS tipoDesc, 
                                        ins.grupo, 
                                        g.descripcion AS grupoDesc, 
                                        ins.tolerancia, 
                                        ins.cancelado, 
                                        ins.bit_pt, 
                                        ins.bit_mp, 
                                        ins.bit_factura, 
                                        ins.validar_lista_precios, 
                                        ins.bit_af, 
                                        ins.color_resguardo, 
                                        ins.compras_req 
                                    FROM insumos ins 
                                        INNER JOIN tipos_insumo t ON ins.tipo = t.tipo_insumo 
                                        INNER JOIN grupos_insumo g ON ins.tipo = g.tipo_insumo AND ins.grupo = g.grupo_insumo 
                                        LEFT JOIN modelo_maquinaria modMaqui ON ins.id_modelo_maquinaria = modMaqui.id_modelo_maquinaria 
                                    WHERE ins.insumo = {0} 
                                    ORDER BY insumo", insumo
                        )
                    );

                    if (insumoDetalleEK != null)
                    {
                        var insumoDetalle = (List<dynamic>)insumoDetalleEK.ToObject<List<dynamic>>();
                        var insumoSIGOPLAN = _context.tblAlm_Insumo.FirstOrDefault(x => x.estatus && x.insumo == insumo);

                        var data = new
                        {
                            insumo = (int)insumoDetalle[0].insumo,
                            tipo = (int)insumoDetalle[0].tipo,
                            tipoDesc = (string)insumoDetalle[0].tipoDesc,
                            grupo = (int)insumoDetalle[0].grupo,
                            grupoDesc = (string)insumoDetalle[0].grupoDesc,
                            modeloMaquinaria = insumoDetalle[0].modeloMaquinaria != null ? (int)insumoDetalle[0].modeloMaquinaria : 0,
                            modeloMaquinariaDesc = insumoSIGOPLAN != null ? insumoSIGOPLAN.modeloMaquinariaDesc : "",
                            insumoDesc = (string)insumoDetalle[0].insumoDesc,
                            unidadDesc = (string)insumoDetalle[0].unidadDesc,
                            cancelado = (string)insumoDetalle[0].cancelado,
                            tolerancia = Convert.ToDecimal(insumoDetalle[0].tolerancia, CultureInfo.InvariantCulture),
                            bit_pt = (string)insumoDetalle[0].bit_pt,
                            bit_mp = (string)insumoDetalle[0].bit_mp,
                            bit_factura = (string)insumoDetalle[0].bit_factura,
                            validar_lista_precios = (string)insumoDetalle[0].validar_lista_precios,
                            bit_af = (string)insumoDetalle[0].bit_af,
                            color_resguardo = insumoDetalle[0].color_resguardo != null ? (int)insumoDetalle[0].color_resguardo : 0,
                            compras_req = insumoDetalle[0].compras_req != null ? (int)insumoDetalle[0].compras_req : 0
                        };

                        result.Add("data", data);
                        result.Add(SUCCESS, true);
                    }
                    else
                    {
                        result.Add(SUCCESS, false);
                    }
                    #endregion
                }
                else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
                {
                    #region Colombia
                    var insumoDetalleEK = consultaCheckProductivo(
                        string.Format(@"SELECT 
                                        ins.insumo, 
                                        ins.descripcion AS insumoDesc, 
                                        ins.unidad AS unidadDesc, 
                                        ins.tipo, 
                                        t.descripcion AS tipoDesc, 
                                        ins.grupo, 
                                        g.descripcion AS grupoDesc, 
                                        ins.tolerancia, 
                                        ins.cancelado, 
                                        ins.bit_pt, 
                                        ins.bit_mp, 
                                        ins.bit_factura, 
                                        ins.validar_lista_precios 
                                    FROM DBA.insumos ins 
                                        INNER JOIN DBA.tipos_insumo t ON ins.tipo = t.tipo_insumo 
                                        INNER JOIN DBA.grupos_insumo g ON ins.tipo = g.tipo_insumo AND ins.grupo = g.grupo_insumo
                                    WHERE ins.insumo = {0} 
                                    ORDER BY insumo", insumo
                        )
                    );

                    if (insumoDetalleEK != null)
                    {
                        var insumoDetalle = (List<dynamic>)insumoDetalleEK.ToObject<List<dynamic>>();
                        var insumoSIGOPLAN = _context.tblAlm_Insumo.FirstOrDefault(x => x.estatus && x.insumo == insumo);

                        var data = new
                        {
                            insumo = (int)insumoDetalle[0].insumo,
                            tipo = (int)insumoDetalle[0].tipo,
                            tipoDesc = (string)insumoDetalle[0].tipoDesc,
                            grupo = (int)insumoDetalle[0].grupo,
                            grupoDesc = (string)insumoDetalle[0].grupoDesc,
                            modeloMaquinaria = insumoSIGOPLAN != null ? insumoSIGOPLAN.id_modelo_maquinaria : 0,
                            modeloMaquinariaDesc = insumoSIGOPLAN != null ? insumoSIGOPLAN.modeloMaquinariaDesc : "",
                            insumoDesc = (string)insumoDetalle[0].insumoDesc,
                            unidadDesc = (string)insumoDetalle[0].unidadDesc,
                            cancelado = (string)insumoDetalle[0].cancelado,
                            tolerancia = Convert.ToDecimal(insumoDetalle[0].tolerancia, CultureInfo.InvariantCulture),
                            bit_pt = (string)insumoDetalle[0].bit_pt,
                            bit_mp = (string)insumoDetalle[0].bit_mp,
                            bit_factura = (string)insumoDetalle[0].bit_factura,
                            validar_lista_precios = (string)insumoDetalle[0].validar_lista_precios,
                            bit_af = insumoSIGOPLAN != null ? insumoSIGOPLAN.bit_af : "",
                            color_resguardo = insumoSIGOPLAN != null ? insumoSIGOPLAN.color_resguardo : 0,
                            compras_req = insumoSIGOPLAN != null ? insumoSIGOPLAN.compras_req : 0,
                        };

                        result.Add("data", data);
                        result.Add(SUCCESS, true);
                    }
                    else
                    {
                        result.Add(SUCCESS, false);
                    }
                    #endregion
                }
                else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                {
                    #region Perú
                    using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                    {
                        var registroInsumoStarsoft = _starsoft.MAEART.ToList().FirstOrDefault(x => Int64.Parse(x.ACODIGO) == insumo);
                        var listaTiposStarsoft = _starsoft.TIPO_ARTICULO.ToList();
                        var listaFamiliasStarsoft = _starsoft.FAMILIA.ToList(); //Las familias se van a tomar como grupos en Perú. Esto podría cambiar.

                        var data = new
                        {
                            insumo = registroInsumoStarsoft.ACODIGO,
                            insumoDesc = registroInsumoStarsoft.ADESCRI,
                            tipo = registroInsumoStarsoft.ATIPO,
                            tipoDesc = listaTiposStarsoft.Where(x => x.COD_TIPO == registroInsumoStarsoft.ATIPO).Select(x => x.DES_TIPO).FirstOrDefault(),
                            grupo = registroInsumoStarsoft.AFAMILIA, //Las familias se van a tomar como grupos en Perú. Esto podría cambiar.
                            grupoDesc = listaFamiliasStarsoft.Where(x => x.FAM_CODIGO == registroInsumoStarsoft.AFAMILIA).Select(x => x.FAM_NOMBRE).FirstOrDefault(), //Las familias se van a tomar como grupos en Perú. Esto podría cambiar.
                            unidadDesc = registroInsumoStarsoft.AUNIDAD,
                            estatus = registroInsumoStarsoft.AESTADO,

                            //Campos de México. Quizás no se requieran.
                            modeloMaquinaria = 0,
                            modeloMaquinariaDesc = "",
                            cancelado = "",
                            tolerancia = 0,
                            bit_pt = "",
                            bit_mp = "",
                            bit_factura = "",
                            validar_lista_precios = "",
                            bit_af = "",
                            color_resguardo = 0,
                            compras_req = 0,
                            PERU_estado = registroInsumoStarsoft.AESTADO == "V" ? 1 : 0,
                            PERU_codigo2 = registroInsumoStarsoft.ACODIGO2
                        };

                        result.Add("data", data);
                        result.Add(SUCCESS, true);
                    }
                    #endregion
                }
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }
            return result;
        }

        public Dictionary<string, object> guardarNuevoInsumo(InsumoCatalogoDTO insumo)
        {
            var result = new Dictionary<string, object>();

            var empleado = 0;
            var usuarioSigoplan = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);
            List<entradasAlmacenDTO> movEntradas = new List<entradasAlmacenDTO>();

            if (usuarioSigoplan != null)
            {
                empleado = usuarioSigoplan.empleado;
            }

            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan || vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
            {
                #region México
                using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                {
                    using (var con = checkConexionProductivo())
                    {
                        using (var trans = con.BeginTransaction())
                        {
                            try
                            {
                                #region Validación permiso familia para la alta de insumos
                                if (vSesiones.sesionEmpresaActual == 2)
                                {
                                    var listaPermisoAltaInsumo = _context.tblAlm_PermisoAltaInsumo.Where(x => x.estatus).ToList();

                                    if (listaPermisoAltaInsumo.Count() > 0)
                                    {
                                        var familiaInsumo = insumo.insumo.ToString().Substring(0, 3);
                                        var permisosFamilia = listaPermisoAltaInsumo.Where(x => x.familia == familiaInsumo).ToList();

                                        if (permisosFamilia.Count() > 0)
                                        {
                                            if (!permisosFamilia.Select(x => x.usuarioID).Contains(vSesiones.sesionUsuarioDTO.id))
                                            {
                                                throw new Exception("Su usuario no tiene permiso para dar de alta insumos en la familia \"" + familiaInsumo + "\".");
                                            }
                                        }
                                    }
                                }
                                #endregion

                                var insumoExistente = consultaCheckProductivo(string.Format(@"SELECT * FROM insumos WHERE insumo = {0}", insumo.insumo));

                                var count = 0;

                                if (insumoExistente == null)
                                {
                                    var insumoNuevoSIGOPLAN = new tblAlm_Insumo();

                                    insumoNuevoSIGOPLAN.insumo = insumo.insumo;
                                    insumoNuevoSIGOPLAN.descripcion = insumo.insumoDesc ?? "";
                                    insumoNuevoSIGOPLAN.unidad = insumo.unidadDesc ?? "";
                                    insumoNuevoSIGOPLAN.tipo = insumo.tipo;
                                    insumoNuevoSIGOPLAN.grupo = insumo.grupo;
                                    insumoNuevoSIGOPLAN.fechaAlta = DateTime.Now.Date;
                                    insumoNuevoSIGOPLAN.bloqueado = 0;
                                    insumoNuevoSIGOPLAN.cancelado = "A";
                                    insumoNuevoSIGOPLAN.fijar_precio = "";
                                    insumoNuevoSIGOPLAN.precio_a_fijar = 0;
                                    insumoNuevoSIGOPLAN.validar_lista_precios = insumo.validar_lista_precios ?? "";
                                    insumoNuevoSIGOPLAN.bit_pt = insumo.bit_pt ?? "";
                                    insumoNuevoSIGOPLAN.bit_mp = insumo.bit_mp ?? "";
                                    insumoNuevoSIGOPLAN.bit_factura = insumo.bit_factura ?? "";
                                    insumoNuevoSIGOPLAN.tolerancia = insumo.tolerancia;
                                    insumoNuevoSIGOPLAN.color_resguardo = insumo.color_resguardo ?? 0;
                                    insumoNuevoSIGOPLAN.bit_rotacion = "A";
                                    insumoNuevoSIGOPLAN.bit_area_cta = 0;
                                    insumoNuevoSIGOPLAN.bit_af = "N";
                                    insumoNuevoSIGOPLAN.codigo_barras = "";
                                    //insumoNuevoSIGOPLAN.id_modelo_maquinaria = insumo.modeloMaquinaria ?? 0;
                                    insumoNuevoSIGOPLAN.id_modelo_maquinaria = 0;
                                    insumoNuevoSIGOPLAN.modeloMaquinariaDesc = insumo.modeloMaquinariaDesc;
                                    insumoNuevoSIGOPLAN.compras_req = insumo.compras_req;
                                    insumoNuevoSIGOPLAN.estatus = true;

                                    _context.tblAlm_Insumo.Add(insumoNuevoSIGOPLAN);
                                    _context.SaveChanges();

                                    var consultaInsert = @"
                                            INSERT INTO insumos 
                                            ( 
                                                insumo, descripcion, unidad, almacen, [reportes internos], [default ventas], tipo, grupo, bloqueado, cancelado, fijar_precio, 
                                                precio_a_fijar, bloqueado_por, bloqueado_desde, validar_lista_precios, fecha_mod, hora_mod, bit_pt, bit_mp, bit_factura, 
                                                nivel_calidad, tolerancia, color_resguardo, bit_rotacion, bit_area_cta, bit_af, codigo_barras, bit_devolucion, id_modelo_maquinaria, 
                                                ClaveProdServ, claveunidadsat, codigo_gtin, codigoadenda, imprime_ctapredial, compras_req) 
                                            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 
                                                    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 
                                                    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 
                                                    ?, ?, ?, ?, ?)";

                                    using (var cmd = new OdbcCommand(consultaInsert))
                                    {
                                        OdbcParameterCollection parameters = cmd.Parameters;

                                        parameters.Add("@insumo", OdbcType.Numeric).Value = insumo.insumo;
                                        parameters.Add("@descripcion", OdbcType.VarChar).Value = insumo.insumoDesc ?? "";
                                        parameters.Add("@unidad", OdbcType.Char).Value = insumo.unidadDesc ?? "";
                                        parameters.Add("@almacen", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@reportes internos", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@default ventas", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@tipo", OdbcType.Numeric).Value = insumo.tipo;
                                        parameters.Add("@grupo", OdbcType.Numeric).Value = insumo.grupo;
                                        parameters.Add("@bloqueado", OdbcType.Numeric).Value = 0;
                                        parameters.Add("@cancelado", OdbcType.Char).Value = "A";
                                        parameters.Add("@fijar_precio", OdbcType.Char).Value = "";
                                        parameters.Add("@precio_a_fijar", OdbcType.Numeric).Value = 0;
                                        parameters.Add("@bloqueado_por", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@bloqueado_desde", OdbcType.DateTime).Value = DBNull.Value;
                                        parameters.Add("@validar_lista_precios", OdbcType.Char).Value = insumo.validar_lista_precios ?? "";
                                        parameters.Add("@fecha_mod", OdbcType.Date).Value = DBNull.Value;
                                        parameters.Add("@hora_mod", OdbcType.Time).Value = DBNull.Value;
                                        parameters.Add("@bit_pt", OdbcType.Char).Value = insumo.bit_pt ?? "";
                                        parameters.Add("@bit_mp", OdbcType.Char).Value = insumo.bit_mp ?? "";
                                        parameters.Add("@bit_factura", OdbcType.Char).Value = insumo.bit_factura ?? "";
                                        parameters.Add("@nivel_calidad", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@tolerancia", OdbcType.Numeric).Value = insumo.tolerancia;
                                        parameters.Add("@color_resguardo", OdbcType.Numeric).Value = insumo.color_resguardo ?? (object)DBNull.Value;
                                        parameters.Add("@bit_rotacion", OdbcType.Char).Value = "A";
                                        parameters.Add("@bit_area_cta", OdbcType.Numeric).Value = 0;
                                        parameters.Add("@bit_af", OdbcType.Char).Value = "N";
                                        parameters.Add("@codigo_barras", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@bit_devolucion", OdbcType.Char).Value = "N";
                                        //parameters.Add("@id_modelo_maquinaria", OdbcType.Numeric).Value = insumo.modeloMaquinaria ?? (object)DBNull.Value;
                                        parameters.Add("@id_modelo_maquinaria", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@ClaveProdServ", OdbcType.VarChar).Value = DBNull.Value;
                                        parameters.Add("@claveunidadsat", OdbcType.VarChar).Value = DBNull.Value;
                                        parameters.Add("@codigo_gtin", OdbcType.VarChar).Value = DBNull.Value;
                                        parameters.Add("@codigoadenda", OdbcType.VarChar).Value = DBNull.Value;
                                        parameters.Add("@imprime_ctapredial", OdbcType.Char).Value = "N";
                                        parameters.Add("@compras_req", OdbcType.Numeric).Value = insumo.compras_req;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;

                                        count += cmd.ExecuteNonQuery();
                                    }
                                }
                                else
                                {
                                    var insumoSIGOPLAN = _context.tblAlm_Insumo.FirstOrDefault(x => x.insumo == insumo.insumo);

                                    if (insumoSIGOPLAN != null)
                                    {
                                        //insumoSIGOPLAN.id_modelo_maquinaria = (insumo.modeloMaquinaria == 0 || insumo.modeloMaquinaria == null) ? 0 : (int)insumo.modeloMaquinaria;
                                        insumoSIGOPLAN.descripcion = insumo.insumoDesc ?? "";
                                        insumoSIGOPLAN.unidad = insumo.unidadDesc ?? "";
                                        insumoSIGOPLAN.cancelado = insumo.cancelado;
                                        insumoSIGOPLAN.tolerancia = insumo.tolerancia;
                                        insumoSIGOPLAN.bit_pt = insumo.bit_pt ?? "";
                                        insumoSIGOPLAN.bit_mp = insumo.bit_mp ?? "";
                                        insumoSIGOPLAN.bit_factura = insumo.bit_factura ?? "";
                                        insumoSIGOPLAN.validar_lista_precios = insumo.validar_lista_precios ?? "";
                                        insumoSIGOPLAN.color_resguardo = insumo.color_resguardo ?? 0;
                                        insumoSIGOPLAN.modeloMaquinariaDesc = insumo.modeloMaquinariaDesc;
                                        insumoSIGOPLAN.compras_req = insumo.compras_req;

                                        _context.Entry(insumoSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                        _context.SaveChanges();
                                    }

                                    var consultaUpdate = @"
                                                        UPDATE insumos 
                                                        SET 
                                                            descripcion = ?, 
                                                            unidad = ?, 
                                                            cancelado = ?, 
                                                            tolerancia = ?, 
                                                            bit_pt = ?, 
                                                            bit_mp = ?, 
                                                            bit_factura = ?, 
                                                            validar_lista_precios = ?, 
                                                            color_resguardo = ?, 
                                                            compras_req = ? 
                                                        WHERE insumo = ?";

                                    using (var cmd = new OdbcCommand(consultaUpdate))
                                    {
                                        OdbcParameterCollection parameters = cmd.Parameters;

                                        //parameters.Add("@id_modelo_maquinaria", OdbcType.Numeric).Value =
                                        //    (insumo.modeloMaquinaria == 0 || insumo.modeloMaquinaria == null) ? (object)DBNull.Value : insumo.modeloMaquinaria;
                                        parameters.Add("@descripcion", OdbcType.VarChar).Value = insumo.insumoDesc ?? "";
                                        parameters.Add("@unidad", OdbcType.Char).Value = insumo.unidadDesc ?? "";
                                        parameters.Add("@cancelado", OdbcType.Char).Value = insumo.cancelado;
                                        parameters.Add("@tolerancia", OdbcType.Numeric).Value = insumo.tolerancia;
                                        parameters.Add("@bit_pt", OdbcType.Char).Value = insumo.bit_pt ?? "";
                                        parameters.Add("@bit_mp", OdbcType.Char).Value = insumo.bit_mp ?? "";
                                        parameters.Add("@bit_factura", OdbcType.Char).Value = insumo.bit_factura ?? "";
                                        parameters.Add("@validar_lista_precios", OdbcType.Char).Value = insumo.validar_lista_precios ?? "";
                                        parameters.Add("@color_resguardo", OdbcType.Numeric).Value = insumo.color_resguardo ?? (object)DBNull.Value;
                                        parameters.Add("@compras_req", OdbcType.Numeric).Value = insumo.compras_req;

                                        parameters.Add("@insumo", OdbcType.Numeric).Value = insumo.insumo;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;

                                        count = cmd.ExecuteNonQuery();
                                    }
                                }

                                if (count == 1)
                                {
                                    trans.Commit();
                                    dbSigoplanTransaction.Commit();
                                }
                                else
                                {
                                    trans.Rollback();
                                    dbSigoplanTransaction.Rollback();
                                }

                                result.Add(SUCCESS, true);
                            }
                            catch (Exception e)
                            {
                                trans.Rollback();
                                dbSigoplanTransaction.Rollback();

                                result.Add(MESSAGE, e.Message);
                                result.Add(SUCCESS, false);
                            }
                        }
                    }
                }
                #endregion
            }
            else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
            {
                #region colombia
                using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                {
                    using (var con = checkConexionProductivo())
                    {
                        using (var trans = con.BeginTransaction())
                        {
                            try
                            {
                                #region Validación permiso familia para la alta de insumos
                                if (vSesiones.sesionEmpresaActual == 3)
                                {
                                    var listaPermisoAltaInsumo = _context.tblAlm_PermisoAltaInsumo.Where(x => x.estatus).ToList();

                                    if (listaPermisoAltaInsumo.Count() > 0)
                                    {
                                        var familiaInsumo = insumo.insumo.ToString().Substring(0, 3);
                                        var permisosFamilia = listaPermisoAltaInsumo.Where(x => x.familia == familiaInsumo).ToList();

                                        if (permisosFamilia.Count() > 0)
                                        {
                                            if (!permisosFamilia.Select(x => x.usuarioID).Contains(vSesiones.sesionUsuarioDTO.id))
                                            {
                                                throw new Exception("Su usuario no tiene permiso para dar de alta insumos en la familia \"" + familiaInsumo + "\".");
                                            }
                                        }
                                    }
                                }
                                #endregion

                                var insumoExistente = consultaCheckProductivo(string.Format(@"SELECT * FROM insumos WHERE insumo = {0}", insumo.insumo));
                                var count = 0;

                                if (insumoExistente == null)
                                {
                                    var insumoNuevoSIGOPLAN = new tblAlm_Insumo();

                                    insumoNuevoSIGOPLAN.insumo = insumo.insumo;
                                    insumoNuevoSIGOPLAN.descripcion = insumo.insumoDesc ?? "";
                                    insumoNuevoSIGOPLAN.unidad = insumo.unidadDesc ?? "";
                                    insumoNuevoSIGOPLAN.tipo = insumo.tipo;
                                    insumoNuevoSIGOPLAN.grupo = insumo.grupo;
                                    insumoNuevoSIGOPLAN.fechaAlta = DateTime.Now.Date;
                                    insumoNuevoSIGOPLAN.bloqueado = 0;
                                    insumoNuevoSIGOPLAN.cancelado = "A";
                                    insumoNuevoSIGOPLAN.fijar_precio = "";
                                    insumoNuevoSIGOPLAN.precio_a_fijar = 0;
                                    insumoNuevoSIGOPLAN.validar_lista_precios = insumo.validar_lista_precios ?? "";
                                    insumoNuevoSIGOPLAN.bit_pt = insumo.bit_pt ?? "";
                                    insumoNuevoSIGOPLAN.bit_mp = insumo.bit_mp ?? "";
                                    insumoNuevoSIGOPLAN.bit_factura = insumo.bit_factura ?? "";
                                    insumoNuevoSIGOPLAN.tolerancia = insumo.tolerancia;
                                    insumoNuevoSIGOPLAN.color_resguardo = insumo.color_resguardo ?? 0;
                                    insumoNuevoSIGOPLAN.bit_rotacion = "A";
                                    insumoNuevoSIGOPLAN.bit_area_cta = 0;
                                    insumoNuevoSIGOPLAN.bit_af = "N";
                                    insumoNuevoSIGOPLAN.codigo_barras = "";
                                    insumoNuevoSIGOPLAN.id_modelo_maquinaria = insumo.modeloMaquinaria ?? 0;
                                    insumoNuevoSIGOPLAN.modeloMaquinariaDesc = insumo.modeloMaquinariaDesc;
                                    insumoNuevoSIGOPLAN.compras_req = insumo.compras_req;
                                    insumoNuevoSIGOPLAN.estatus = true;

                                    _context.tblAlm_Insumo.Add(insumoNuevoSIGOPLAN);
                                    _context.SaveChanges();

                                    var consultaInsert = @"
                                            INSERT INTO insumos 
                                            ( 
                                                insumo, descripcion, unidad, almacen, [reportes internos], [default ventas], tipo, grupo, bloqueado, cancelado, fijar_precio, 
                                                precio_a_fijar, bloqueado_por, bloqueado_desde, validar_lista_precios, fecha_mod, hora_mod, bit_pt, bit_mp, bit_factura, 
                                                nivel_calidad, tolerancia, bit_rotacion, bit_area_cta, codigo_barras, bit_devolucion) 
                                            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 
                                                    ?, ?, ?, ?, ?, ?, ?, ?, ?, 
                                                    ?, ?, ?, ?, ?, ?, ?, ?)";

                                    using (var cmd = new OdbcCommand(consultaInsert))
                                    {
                                        OdbcParameterCollection parameters = cmd.Parameters;

                                        parameters.Add("@insumo", OdbcType.Numeric).Value = insumo.insumo;
                                        parameters.Add("@descripcion", OdbcType.VarChar).Value = insumo.insumoDesc ?? "";
                                        parameters.Add("@unidad", OdbcType.Char).Value = insumo.unidadDesc ?? "";
                                        parameters.Add("@almacen", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@reportes internos", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@default ventas", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@tipo", OdbcType.Numeric).Value = insumo.tipo;
                                        parameters.Add("@grupo", OdbcType.Numeric).Value = insumo.grupo;
                                        parameters.Add("@bloqueado", OdbcType.Numeric).Value = 0;
                                        parameters.Add("@cancelado", OdbcType.Char).Value = "A";
                                        parameters.Add("@fijar_precio", OdbcType.Char).Value = "";
                                        parameters.Add("@precio_a_fijar", OdbcType.Numeric).Value = 0;
                                        parameters.Add("@bloqueado_por", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@bloqueado_desde", OdbcType.DateTime).Value = DBNull.Value;
                                        parameters.Add("@validar_lista_precios", OdbcType.Char).Value = insumo.validar_lista_precios ?? "";
                                        parameters.Add("@fecha_mod", OdbcType.Date).Value = DBNull.Value;
                                        parameters.Add("@hora_mod", OdbcType.Time).Value = DBNull.Value;
                                        parameters.Add("@bit_pt", OdbcType.Char).Value = insumo.bit_pt ?? "";
                                        parameters.Add("@bit_mp", OdbcType.Char).Value = insumo.bit_mp ?? "";
                                        parameters.Add("@bit_factura", OdbcType.Char).Value = insumo.bit_factura ?? "";
                                        parameters.Add("@nivel_calidad", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@tolerancia", OdbcType.Numeric).Value = insumo.tolerancia;
                                        //parameters.Add("@color_resguardo", OdbcType.Numeric).Value = insumo.color_resguardo ?? (object)DBNull.Value;
                                        parameters.Add("@bit_rotacion", OdbcType.Char).Value = "A";
                                        parameters.Add("@bit_area_cta", OdbcType.Numeric).Value = 0;
                                        //parameters.Add("@bit_af", OdbcType.Char).Value = "N";
                                        parameters.Add("@codigo_barras", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@bit_devolucion", OdbcType.Char).Value = "N";
                                        //parameters.Add("@id_modelo_maquinaria", OdbcType.Numeric).Value = insumo.modeloMaquinaria ?? (object)DBNull.Value;
                                        //parameters.Add("@id_modelo_maquinaria", OdbcType.Numeric).Value = DBNull.Value;
                                        //parameters.Add("@ClaveProdServ", OdbcType.VarChar).Value = DBNull.Value;
                                        //parameters.Add("@claveunidadsat", OdbcType.VarChar).Value = DBNull.Value;
                                        //parameters.Add("@codigo_gtin", OdbcType.VarChar).Value = DBNull.Value;
                                        //parameters.Add("@codigoadenda", OdbcType.VarChar).Value = DBNull.Value;
                                        //parameters.Add("@imprime_ctapredial", OdbcType.Char).Value = "N";
                                        //parameters.Add("@compras_req", OdbcType.Numeric).Value = insumo.compras_req;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;

                                        count += cmd.ExecuteNonQuery();
                                    }
                                }
                                else
                                {
                                    var insumoSIGOPLAN = _context.tblAlm_Insumo.FirstOrDefault(x => x.insumo == insumo.insumo);

                                    if (insumoSIGOPLAN != null)
                                    {
                                        //insumoSIGOPLAN.id_modelo_maquinaria = (insumo.modeloMaquinaria == 0 || insumo.modeloMaquinaria == null) ? 0 : (int)insumo.modeloMaquinaria;
                                        insumoSIGOPLAN.descripcion = insumo.insumoDesc ?? "";
                                        insumoSIGOPLAN.unidad = insumo.unidadDesc ?? "";
                                        insumoSIGOPLAN.cancelado = insumo.cancelado;
                                        insumoSIGOPLAN.tolerancia = insumo.tolerancia;
                                        insumoSIGOPLAN.bit_pt = insumo.bit_pt ?? "";
                                        insumoSIGOPLAN.bit_mp = insumo.bit_mp ?? "";
                                        insumoSIGOPLAN.bit_factura = insumo.bit_factura ?? "";
                                        insumoSIGOPLAN.validar_lista_precios = insumo.validar_lista_precios ?? "";
                                        insumoSIGOPLAN.color_resguardo = insumo.color_resguardo ?? 0;
                                        insumoSIGOPLAN.modeloMaquinariaDesc = insumo.modeloMaquinariaDesc;
                                        insumoSIGOPLAN.compras_req = insumo.compras_req;

                                        _context.Entry(insumoSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                        _context.SaveChanges();
                                    }

                                    var consultaUpdate = @"
                                                        UPDATE DBA.insumos 
                                                        SET 
                                                            descripcion = ?, 
                                                            unidad = ?, 
                                                            cancelado = ?, 
                                                            tolerancia = ?, 
                                                            bit_pt = ?, 
                                                            bit_mp = ?, 
                                                            bit_factura = ?, 
                                                            validar_lista_precios = ?                                                          
                                                        WHERE insumo = ?";

                                    using (var cmd = new OdbcCommand(consultaUpdate))
                                    {
                                        OdbcParameterCollection parameters = cmd.Parameters;

                                        //parameters.Add("@id_modelo_maquinaria", OdbcType.Numeric).Value =
                                        //    (insumo.modeloMaquinaria == 0 || insumo.modeloMaquinaria == null) ? (object)DBNull.Value : insumo.modeloMaquinaria;
                                        parameters.Add("@descripcion", OdbcType.VarChar).Value = insumo.insumoDesc ?? "";
                                        parameters.Add("@unidad", OdbcType.Char).Value = insumo.unidadDesc ?? "";
                                        parameters.Add("@cancelado", OdbcType.Char).Value = insumo.cancelado;
                                        parameters.Add("@tolerancia", OdbcType.Numeric).Value = insumo.tolerancia;
                                        parameters.Add("@bit_pt", OdbcType.Char).Value = insumo.bit_pt ?? "";
                                        parameters.Add("@bit_mp", OdbcType.Char).Value = insumo.bit_mp ?? "";
                                        parameters.Add("@bit_factura", OdbcType.Char).Value = insumo.bit_factura ?? "";
                                        parameters.Add("@validar_lista_precios", OdbcType.Char).Value = insumo.validar_lista_precios ?? "";
                                        //parameters.Add("@color_resguardo", OdbcType.Numeric).Value = insumo.color_resguardo ?? (object)DBNull.Value;
                                        //parameters.Add("@compras_req", OdbcType.Numeric).Value = insumo.compras_req;

                                        parameters.Add("@insumo", OdbcType.Numeric).Value = insumo.insumo;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;

                                        count = cmd.ExecuteNonQuery();
                                    }

                                }
                                if (count == 1)
                                {
                                    trans.Commit();
                                    dbSigoplanTransaction.Commit();
                                }
                                else
                                {
                                    trans.Rollback();
                                    dbSigoplanTransaction.Rollback();
                                }
                                result.Add(SUCCESS, true);
                            }
                            catch (Exception e)
                            {
                                trans.Rollback();
                                dbSigoplanTransaction.Rollback();

                                result.Add(MESSAGE, e.Message);
                                result.Add(SUCCESS, false);
                            }
                        }
                    }
                }
                #endregion
            }
            else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
            {
                #region Perú
                using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                {
                    using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                    {
                        using (var dbStarsoftTransaction = _starsoft.Database.BeginTransaction())
                        {
                            try
                            {
                                var registroInsumoExistente = _starsoft.MAEART.ToList().FirstOrDefault(x => x.ACODIGO == ("0" + insumo.insumo));

                                if (registroInsumoExistente == null)
                                {
                                    #region SIGOPLAN
                                    var insumoNuevoSIGOPLAN = new tblAlm_Insumo();

                                    insumoNuevoSIGOPLAN.insumo = insumo.insumo;
                                    insumoNuevoSIGOPLAN.descripcion = insumo.insumoDesc ?? "";
                                    insumoNuevoSIGOPLAN.unidad = insumo.unidadDesc ?? "";
                                    insumoNuevoSIGOPLAN.tipo = insumo.tipo;
                                    insumoNuevoSIGOPLAN.grupo = insumo.grupo;
                                    insumoNuevoSIGOPLAN.fechaAlta = DateTime.Now.Date;
                                    insumoNuevoSIGOPLAN.bloqueado = 0;
                                    insumoNuevoSIGOPLAN.cancelado = "A";
                                    insumoNuevoSIGOPLAN.fijar_precio = "";
                                    insumoNuevoSIGOPLAN.precio_a_fijar = 0;
                                    insumoNuevoSIGOPLAN.validar_lista_precios = insumo.validar_lista_precios ?? "";
                                    insumoNuevoSIGOPLAN.bit_pt = insumo.bit_pt ?? "";
                                    insumoNuevoSIGOPLAN.bit_mp = insumo.bit_mp ?? "";
                                    insumoNuevoSIGOPLAN.bit_factura = insumo.bit_factura ?? "";
                                    insumoNuevoSIGOPLAN.tolerancia = insumo.tolerancia;
                                    insumoNuevoSIGOPLAN.color_resguardo = insumo.color_resguardo ?? 0;
                                    insumoNuevoSIGOPLAN.bit_rotacion = "A";
                                    insumoNuevoSIGOPLAN.bit_area_cta = 0;
                                    insumoNuevoSIGOPLAN.bit_af = "N";
                                    insumoNuevoSIGOPLAN.codigo_barras = "";
                                    insumoNuevoSIGOPLAN.id_modelo_maquinaria = 0;
                                    insumoNuevoSIGOPLAN.modeloMaquinariaDesc = insumo.modeloMaquinariaDesc;
                                    insumoNuevoSIGOPLAN.compras_req = insumo.compras_req;
                                    insumoNuevoSIGOPLAN.estatus = true;

                                    _context.tblAlm_Insumo.Add(insumoNuevoSIGOPLAN);
                                    _context.SaveChanges();
                                    #endregion

                                    #region Starsoft
                                    var insumoNuevoStarsoft = new MAEART();

                                    insumoNuevoStarsoft.ACODIGO = "0" + insumo.insumo;
                                    insumoNuevoStarsoft.ACODIGO2 = insumo.PERU_codigo2 ?? "";
                                    insumoNuevoStarsoft.ADESCRI = insumo.insumoDesc;
                                    insumoNuevoStarsoft.ADESCRI2 = "";
                                    insumoNuevoStarsoft.AFAMILIA = insumo.grupo.ToString("D4");
                                    insumoNuevoStarsoft.AMODELO = null;
                                    insumoNuevoStarsoft.AUNIDAD = insumo.unidadDesc;
                                    insumoNuevoStarsoft.AGRUPO = null;
                                    insumoNuevoStarsoft.ACUENTA = "";
                                    insumoNuevoStarsoft.AFSERIE = "N";
                                    insumoNuevoStarsoft.APRECIO = 0;
                                    insumoNuevoStarsoft.ADESCTO = 0;
                                    insumoNuevoStarsoft.APRECOM = 0;
                                    insumoNuevoStarsoft.ACODPRO = "";
                                    insumoNuevoStarsoft.AFECHA = DateTime.Now;
                                    insumoNuevoStarsoft.ACASILLERO = null;
                                    insumoNuevoStarsoft.AFSTOCK = "S";
                                    insumoNuevoStarsoft.AUSER = "1";
                                    insumoNuevoStarsoft.AESTADO = "V";
                                    insumoNuevoStarsoft.AFECVEN = null;
                                    insumoNuevoStarsoft.ACODMON = "MN";
                                    insumoNuevoStarsoft.ATIPO = insumo.tipo.ToString();
                                    insumoNuevoStarsoft.ACOMENTA = "";
                                    insumoNuevoStarsoft.AFLOTE = "N";
                                    insumoNuevoStarsoft.AFDECI = "";
                                    insumoNuevoStarsoft.AUNIART = 0;
                                    insumoNuevoStarsoft.APESO = 0;
                                    insumoNuevoStarsoft.AISCPOR = 0;
                                    insumoNuevoStarsoft.AIGVPOR = 10M;
                                    insumoNuevoStarsoft.AHORA = null;
                                    insumoNuevoStarsoft.AFPRELIB = null;
                                    insumoNuevoStarsoft.AFRESTA = null;
                                    insumoNuevoStarsoft.AFUNIREF = null;
                                    insumoNuevoStarsoft.AUNIREF = null;
                                    insumoNuevoStarsoft.AFACREF = 0;
                                    insumoNuevoStarsoft.APDIS = 0;
                                    insumoNuevoStarsoft.APCOM = 0;
                                    insumoNuevoStarsoft.ACODMONC = null;
                                    insumoNuevoStarsoft.AFLAGIGV = false;
                                    insumoNuevoStarsoft.ACOLOR = "";
                                    insumoNuevoStarsoft.AMARCA = "";
                                    insumoNuevoStarsoft.AFOTO = "";
                                    insumoNuevoStarsoft.ATALLA = "";
                                    insumoNuevoStarsoft.CODAUTO = 0;
                                    insumoNuevoStarsoft.AFLAGPERC = "";
                                    insumoNuevoStarsoft.COD_IMAGEN = "";
                                    insumoNuevoStarsoft.UMREFERENCIA = "";
                                    insumoNuevoStarsoft.AMODELO1 = "";
                                    insumoNuevoStarsoft.AORIGEN = null;
                                    insumoNuevoStarsoft.TERCERO = false;
                                    insumoNuevoStarsoft.MAR_CODIGO = "";
                                    insumoNuevoStarsoft.ZON_CODIGO = null;
                                    insumoNuevoStarsoft.AULTFECCOMP = null;
                                    insumoNuevoStarsoft.AULTPROV = null;
                                    insumoNuevoStarsoft.AULTPAISPROV = null;
                                    insumoNuevoStarsoft.COD_ARANCEL = null;
                                    insumoNuevoStarsoft.APREFOB = 0;
                                    insumoNuevoStarsoft.APRECIF = 0;
                                    insumoNuevoStarsoft.AMONFOB = null;
                                    insumoNuevoStarsoft.AMONCIF = null;
                                    insumoNuevoStarsoft.CODIGO_SUNAT = "";
                                    insumoNuevoStarsoft.COD_AUDITORIA = null;
                                    insumoNuevoStarsoft.FLG_EXONERADO_IGV = null;
                                    insumoNuevoStarsoft.FLG_ECOMMERCE = null;
                                    insumoNuevoStarsoft.FLG_DETRACCION = null;
                                    insumoNuevoStarsoft.COD_DETRACCION = null;

                                    _starsoft.MAEART.Add(insumoNuevoStarsoft);
                                    _starsoft.SaveChanges();
                                    #endregion
                                }
                                else
                                {
                                    #region SIGOPLAN
                                    var insumoSIGOPLAN = _context.tblAlm_Insumo.FirstOrDefault(x => x.insumo == insumo.insumo);

                                    if (insumoSIGOPLAN != null)
                                    {
                                        insumoSIGOPLAN.descripcion = insumo.insumoDesc ?? "";
                                        insumoSIGOPLAN.unidad = insumo.unidadDesc ?? "";

                                        _context.SaveChanges();
                                    }
                                    #endregion

                                    #region Starsoft
                                    registroInsumoExistente.ACODIGO2 = insumo.PERU_codigo2 ?? "";
                                    registroInsumoExistente.ADESCRI = insumo.insumoDesc;
                                    registroInsumoExistente.ATIPO = insumo.tipo.ToString();
                                    registroInsumoExistente.AUNIDAD = insumo.unidadDesc;
                                    registroInsumoExistente.AESTADO = insumo.PERU_estado;

                                    _starsoft.SaveChanges();
                                    #endregion
                                }

                                dbStarsoftTransaction.Commit();
                                dbSigoplanTransaction.Commit();

                                result.Add(SUCCESS, true);
                            }
                            catch (Exception e)
                            {
                                dbStarsoftTransaction.Rollback();
                                dbSigoplanTransaction.Rollback();

                                result.Add(MESSAGE, e.Message);
                                result.Add(SUCCESS, false);
                            }
                        }
                    }
                }
                #endregion
            }

            return result;
        }

        public Dictionary<string, object> getTipoGrupo(int tipo, int grupo)
        {
            var result = new Dictionary<string, object>();

            try
            {
                if (vSesiones.sesionEmpresaActual != (int)EmpresaEnum.Peru)
                {
                    #region México
                    var ultimoInsumoEK = consultaCheckProductivo(string.Format(@"SELECT TOP 1 insumo FROM insumos WHERE tipo = {0} AND grupo = {1} ORDER BY insumo DESC", tipo, grupo));

                    if (ultimoInsumoEK != null)
                    {
                        var ultimoInsumo = ((List<dynamic>)ultimoInsumoEK.ToObject<List<dynamic>>())[0].insumo;
                        var consecutivoIndividual = Int32.Parse(ultimoInsumo.ToString().Substring(3));

                        if (consecutivoIndividual < 9999)
                        {
                            result.Add("flagMostrarInsumoDisponible", true);
                            result.Add("siguienteInsumoDisponible", consecutivoIndividual + 1);
                            result.Add("siguienteInsumoDisponibleFolio", (ultimoInsumo + 1).ToString());
                        }
                        else
                        {
                            while (consecutivoIndividual == 9999)
                            {
                                consecutivoIndividual = 0;

                                var siguienteGrupo = ++grupo;
                                var sigUltimoInsumoEK = consultaCheckProductivo(
                                    string.Format(@"SELECT TOP 1 
                                                    insumo 
                                                FROM insumos 
                                                WHERE tipo = {0} AND grupo = {1} ORDER BY insumo DESC", tipo, siguienteGrupo)
                                );

                                if (sigUltimoInsumoEK != null)
                                {
                                    var sigUltimoInsumo = ((List<dynamic>)ultimoInsumoEK.ToObject<List<dynamic>>())[0].insumo;
                                    consecutivoIndividual = Int32.Parse(sigUltimoInsumo.ToString().Substring(3));

                                    if (consecutivoIndividual < 9999)
                                    {
                                        result.Add("flagMostrarInsumoDisponible", true);
                                        result.Add("siguienteInsumoDisponible", consecutivoIndividual + 1);
                                        result.Add("siguienteInsumoDisponibleFolio", (sigUltimoInsumo + 1).ToString());

                                        grupo = siguienteGrupo;

                                        break;
                                    }
                                }
                                else
                                {
                                    result.Add("flagTipoGrupoLleno", true);
                                }
                            }
                        }
                    }
                    else
                    {
                        result.Add("flagMostrarInsumoDisponible", tipo > 0 && grupo > 0);
                        result.Add("siguienteInsumoDisponible", 1);
                        result.Add("siguienteInsumoDisponibleFolio", tipo + (grupo.ToString().Length > 1 ? grupo.ToString() : 0 + grupo.ToString()) + fillNo("1", 4));
                    }

                    var tipoDescEK = consultaCheckProductivo(string.Format(@"SELECT descripcion FROM tipos_insumo WHERE tipo_insumo = {0}", tipo));

                    if (tipoDescEK != null)
                    {
                        var tipoDesc = (List<dynamic>)tipoDescEK.ToObject<List<dynamic>>();

                        result.Add("tipoDesc", (string)tipoDesc[0].descripcion);
                    }

                    var grupoDescEK = consultaCheckProductivo(string.Format(@"SELECT descripcion FROM grupos_insumo WHERE tipo_insumo = {0} AND grupo_insumo = {1}", tipo, grupo));

                    if (grupoDescEK != null)
                    {
                        var grupoDesc = (List<dynamic>)grupoDescEK.ToObject<List<dynamic>>();

                        result.Add("grupoDesc", (string)grupoDesc[0].descripcion);
                    }

                    result.Add(SUCCESS, true);
                    #endregion
                }
                else
                {
                    #region Perú
                    var insumoPrefijo = grupo.ToString("D6"); //Se devuelve a string con formato para agregar el cero al inicio.
                    var inventariable = insumoPrefijo.Substring(0, 2);
                    var grupoString = insumoPrefijo.Substring(2, 4);

                    using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                    {
                        var ultimoInsumoGrupo = _starsoft.MAEART.ToList().Where(x => x.ACODIGO.StartsWith(insumoPrefijo)).OrderByDescending(x => Int64.Parse(x.ACODIGO)).FirstOrDefault();

                        if (ultimoInsumoGrupo != null)
                        {
                            var consecutivoIndividual = Int32.Parse(ultimoInsumoGrupo.ACODIGO.Substring(6));

                            if (consecutivoIndividual < 99999)
                            {
                                result.Add("flagMostrarInsumoDisponible", true);
                                result.Add("siguienteInsumoDisponible", consecutivoIndividual + 1);
                                result.Add("siguienteInsumoDisponibleFolio", insumoPrefijo + (consecutivoIndividual + 1).ToString("D5"));
                            }
                            else
                            {
                                while (consecutivoIndividual == 99999)
                                {
                                    consecutivoIndividual = 0;

                                    var siguienteGrupo = ++grupo;
                                    var nuevoInsumoPrefijo = inventariable + siguienteGrupo.ToString("D4");

                                    var siguienteUltimoInsumoGrupo = _starsoft.MAEART.ToList().Where(x => x.ACODIGO.StartsWith(nuevoInsumoPrefijo)).OrderByDescending(x => Int64.Parse(x.ACODIGO)).FirstOrDefault();

                                    if (siguienteUltimoInsumoGrupo != null)
                                    {
                                        consecutivoIndividual = Int32.Parse(siguienteUltimoInsumoGrupo.ACODIGO.Substring(6));

                                        if (consecutivoIndividual < 99999)
                                        {
                                            result.Add("flagMostrarInsumoDisponible", true);
                                            result.Add("siguienteInsumoDisponible", consecutivoIndividual + 1);
                                            result.Add("siguienteInsumoDisponibleFolio", nuevoInsumoPrefijo + (consecutivoIndividual + 1).ToString("D5"));

                                            grupo = siguienteGrupo;

                                            break;
                                        }
                                    }
                                    else
                                    {
                                        result.Add("flagGrupoLleno", true);
                                    }
                                }
                            }
                        }
                        else
                        {
                            result.Add("flagMostrarInsumoDisponible", grupo > 0);
                            result.Add("siguienteInsumoDisponible", 1);
                            result.Add("siguienteInsumoDisponibleFolio", insumoPrefijo + fillNo("1", 5));
                        }

                        result.Add("grupoDesc", _starsoft.FAMILIA.Where(x => x.FAM_CODIGO == grupoString).Select(x => x.FAM_NOMBRE).FirstOrDefault());
                        result.Add(SUCCESS, true);
                    }
                    #endregion
                }
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return result;
        }

        public Dictionary<string, object> GetTipoInsumoPeru(int tipo)
        {
            var result = new Dictionary<string, object>();

            try
            {
                using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                {
                    result.Add("tipoDesc", _starsoft.TIPO_ARTICULO.ToList().Where(x => Int32.Parse(x.COD_TIPO) == tipo).Select(x => x.DES_TIPO).FirstOrDefault());
                    result.Add(SUCCESS, true);
                }
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return result;
        }

        public Dictionary<string, object> FillComboTipoInsumoPeru()
        {
            var result = new Dictionary<string, object>();

            try
            {
                var data = new List<ComboDTO>();

                using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                {
                    data = _starsoft.TIPO_ARTICULO.ToList().Select(x => new ComboDTO
                    {
                        Value = x.COD_TIPO,
                        Text = "[" + x.COD_TIPO + "] " + x.DES_TIPO
                    }).OrderBy(x => Int32.Parse(x.Value)).ToList();
                }

                result.Add(ITEMS, data);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return result;
        }

        public Dictionary<string, object> FillComboUnidadPeru()
        {
            var result = new Dictionary<string, object>();

            try
            {
                var data = new List<ComboDTO>();

                using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                {
                    data = _starsoft.TABUNIMED.ToList().Select(x => new ComboDTO
                    {
                        Value = x.UM_ABREV,
                        Text = x.UM_NOMBRE + " (" + x.UM_ABREV + ")"
                    }).OrderBy(x => x.Text).ToList();
                }

                result.Add(ITEMS, data);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return result;
        }


        private decimal getCostoPromedioSalida(int almacen, int insumo)
        {
            var acumulaAlmacenEK = consultaCheckProductivo(
                                    string.Format(@"SELECT 
                                                        TOP 1 * 
                                                    FROM si_acumula_almacen 
                                                    WHERE almacen = {0} AND ano = {1} AND insumo = {2}
                                                    ORDER BY ano DESC", almacen, DateTime.Now.Year, insumo)
                                );

            var contador = 0;
            decimal sumatoriaCostos = 0;
            decimal costoPromedio = 0;

            if (acumulaAlmacenEK != null)
            {
                var acuAlm = ((List<AcumulaAlmacenDTO>)acumulaAlmacenEK.ToObject<List<AcumulaAlmacenDTO>>())[0];

                if (acuAlm.existencia_sal_ini > 0 && acuAlm.importe_sal_ini > 0)
                {
                    contador++;
                    sumatoriaCostos += (decimal)acuAlm.importe_sal_ini / (decimal)acuAlm.existencia_sal_ini;
                }

                if (acuAlm.existencia_sal_ene > 0 && acuAlm.importe_sal_ene > 0)
                {
                    contador++;
                    sumatoriaCostos += (decimal)acuAlm.importe_sal_ene / (decimal)acuAlm.existencia_sal_ene;
                }

                if (acuAlm.existencia_sal_feb > 0 && acuAlm.importe_sal_feb > 0)
                {
                    contador++;
                    sumatoriaCostos += (decimal)acuAlm.importe_sal_feb / (decimal)acuAlm.existencia_sal_feb;
                }

                if (acuAlm.existencia_sal_mar > 0 && acuAlm.importe_sal_mar > 0)
                {
                    contador++;
                    sumatoriaCostos += (decimal)acuAlm.importe_sal_mar / (decimal)acuAlm.existencia_sal_mar;
                }

                if (acuAlm.existencia_sal_abr > 0 && acuAlm.importe_sal_abr > 0)
                {
                    contador++;
                    sumatoriaCostos += (decimal)acuAlm.importe_sal_abr / (decimal)acuAlm.existencia_sal_abr;
                }

                if (acuAlm.existencia_sal_may > 0 && acuAlm.importe_sal_may > 0)
                {
                    contador++;
                    sumatoriaCostos += (decimal)acuAlm.importe_sal_may / (decimal)acuAlm.existencia_sal_may;
                }

                if (acuAlm.existencia_sal_jun > 0 && acuAlm.importe_sal_jun > 0)
                {
                    contador++;
                    sumatoriaCostos += (decimal)acuAlm.importe_sal_jun / (decimal)acuAlm.existencia_sal_jun;
                }

                if (acuAlm.existencia_sal_jul > 0 && acuAlm.importe_sal_jul > 0)
                {
                    contador++;
                    sumatoriaCostos += (decimal)acuAlm.importe_sal_jul / (decimal)acuAlm.existencia_sal_jul;
                }

                if (acuAlm.existencia_sal_ago > 0 && acuAlm.importe_sal_ago > 0)
                {
                    contador++;
                    sumatoriaCostos += (decimal)acuAlm.importe_sal_ago / (decimal)acuAlm.existencia_sal_ago;
                }

                if (acuAlm.existencia_sal_sep > 0 && acuAlm.importe_sal_sep > 0)
                {
                    contador++;
                    sumatoriaCostos += (decimal)acuAlm.importe_sal_sep / (decimal)acuAlm.existencia_sal_sep;
                }

                if (acuAlm.existencia_sal_oct > 0 && acuAlm.importe_sal_oct > 0)
                {
                    contador++;
                    sumatoriaCostos += (decimal)acuAlm.importe_sal_oct / (decimal)acuAlm.existencia_sal_oct;
                }

                if (acuAlm.existencia_sal_nov > 0 && acuAlm.importe_sal_nov > 0)
                {
                    contador++;
                    sumatoriaCostos += (decimal)acuAlm.importe_sal_nov / (decimal)acuAlm.existencia_sal_nov;
                }

                if (acuAlm.existencia_sal_dic > 0 && acuAlm.importe_sal_dic > 0)
                {
                    contador++;
                    sumatoriaCostos += (decimal)acuAlm.importe_sal_dic / (decimal)acuAlm.existencia_sal_dic;
                }

                if (contador > 0)
                {
                    costoPromedio = sumatoriaCostos / contador;
                }
            }

            return costoPromedio;
        }

        public dynamic getUnidades(string term)
        {
            try
            {
                var unidades = _context.tblAlm_Unidad.Where(x => x.unidad.Contains(term)).ToList();

                return unidades.Select(x => new
                {
                    id = x.id,
                    value = x.unidad
                }).ToList();
            }
            catch (Exception) { return 0; }
        }

        public MemoryStream crearExcelInsumos()
        {
            try
            {
                using (ExcelPackage excel = new ExcelPackage())
                {
                    var hoja1 = excel.Workbook.Worksheets.Add("Insumos");
                    var cellData = new List<object[]>();

                    if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan || vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                    {
                        #region México
                        List<string[]> headerRow = new List<string[]>() { new string[] { 
                            "insumo", "descripcion", "unidad", "almacen", "reportes internos",
                            "default ventas", "tipo", "grupo", "bloqueado", "cancelado",
                            "fijar_precio", "precio_a_fijar", "bloqueado_por", "bloqueado_desde", "validar_lista_precios",
                            "fecha_mod", "hora_mod", "bit_pt", "bit_mp", "bit_factura",
                            "nivel_calidad", "tolerancia", "color_resguardo", "bit_rotacion", "bit_area_cta",
                            "bit_af", "codigo_barras", "bit_devolucion", "id_modelo_maquinaria", "claveprodserv",
                            "claveunidadsat", "codigo_gtin", "codigoadenda", "imprime_ctapredial", "compras_req", "fecha_alta"
                        } };
                        string headerRange = "A1:" + Char.ConvertFromUtf32(headerRow[0].Length + 64) + "1";

                        hoja1.Cells[headerRange].LoadFromArrays(headerRow);

                        var insumos = getInsumos();

                        foreach (var ins in insumos)
                        {
                            cellData.Add(new object[]{
                                ins.insumo,
                                ins.descripcion,
                                ins.unidad,
                                ins.almacen,
                                ins.reportes_internos,
                                ins.default_ventas,
                                ins.tipo,
                                ins.grupo,
                                ins.bloqueado,
                                ins.cancelado,
                                ins.fijar_precio,
                                ins.precio_a_fijar,
                                ins.bloqueado_por,
                                ins.bloqueado_desde,
                                ins.validar_lista_precios,
                                ins.fecha_mod,
                                ins.hora_mod,
                                ins.bit_pt,
                                ins.bit_mp,
                                ins.bit_factura,
                                ins.nivel_calidad,
                                ins.tolerancia,
                                ins.color_resguardo,
                                ins.bit_rotacion,
                                ins.bit_area_cta,
                                ins.bit_af,
                                ins.codigo_barras,
                                ins.bit_devolucion,
                                ins.id_modelo_maquinaria,
                                ins.ClaveProdServ,
                                ins.claveunidadsat,
                                ins.codigo_gtin,
                                ins.codigoadenda,
                                ins.imprime_ctapredial,
                                ins.compras_req,
                                ins.fechaAltaString
                            });
                        }
                        #endregion
                    }
                    else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
                    {
                        #region Colombia
                        List<string[]> headerRow = new List<string[]>() { new string[] { 
                            "insumo", "descripcion", "unidad", "almacen", "reportes internos",
                            "default ventas", "tipo", "grupo", "bloqueado", "cancelado",
                            "fijar_precio", "precio_a_fijar", "bloqueado_por", "bloqueado_desde", "validar_lista_precios",
                            "fecha_mod", "hora_mod", "bit_pt", "bit_mp", "bit_factura",
                            "nivel_calidad", "tolerancia", "bit_rotacion", "bit_area_cta",
                            "codigo_barras", "bit_devolucion"

                        } };
                        string headerRange = "A1:" + Char.ConvertFromUtf32(headerRow[0].Length + 64) + "1";

                        hoja1.Cells[headerRange].LoadFromArrays(headerRow);

                        var insumos = getInsumos();

                        foreach (var ins in insumos)
                        {
                            cellData.Add(new object[]{
                                ins.insumo,
                                ins.descripcion,
                                ins.unidad,
                                ins.almacen,
                                ins.reportes_internos,
                                ins.default_ventas,
                                ins.tipo,
                                ins.grupo,
                                ins.bloqueado,
                                ins.cancelado,
                                ins.fijar_precio,
                                ins.precio_a_fijar,
                                ins.bloqueado_por,
                                ins.bloqueado_desde,
                                ins.validar_lista_precios,
                                ins.fecha_mod,
                                ins.hora_mod,
                                ins.bit_pt,
                                ins.bit_mp,
                                ins.bit_factura,
                                ins.nivel_calidad,
                                ins.tolerancia,
                                //ins.color_resguardo,
                                ins.bit_rotacion,
                                ins.bit_area_cta,
                                //ins.bit_af,
                                ins.codigo_barras,
                                ins.bit_devolucion,
                                //ins.id_modelo_maquinaria,
                                //ins.ClaveProdServ,
                                //ins.claveunidadsat,
                                //ins.codigo_gtin,
                                //ins.codigoadenda,
                                //ins.imprime_ctapredial,
                                //ins.compras_req,
                                //ins.fechaAltaString
                            });
                        }
                        #endregion
                    }
                    else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                    {
                        #region Perú
                        List<string[]> headerRow = new List<string[]>() { new string[] { "CODIGO", "CODIGO2", "DESCRIPCION", "FAMILIA", "UNIDAD", "TIPO", "ESTATUS" } };
                        string headerRange = "A1:" + Char.ConvertFromUtf32(headerRow[0].Length + 64) + "1";

                        hoja1.Cells[headerRange].LoadFromArrays(headerRow);

                        using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                        {
                            var listaInsumosStarsoft = _starsoft.MAEART.ToList();

                            foreach (var insumo in listaInsumosStarsoft)
                            {
                                cellData.Add(new object[]{
                                    insumo.ACODIGO,
                                    insumo.ACODIGO2,
                                    insumo.ADESCRI,
                                    insumo.AFAMILIA,
                                    insumo.AUNIDAD,
                                    insumo.ATIPO,
                                    insumo.AESTADO == "V" ? 1 : insumo.AESTADO == "F" ? 0 : 0
                                });
                            }
                        }
                        #endregion
                    }

                    hoja1.Cells[2, 1].LoadFromArrays(cellData);

                    excel.Compression = CompressionLevel.BestSpeed;

                    List<byte[]> lista = new List<byte[]>();

                    var bytes = new MemoryStream();

                    using (var exportData = new MemoryStream())
                    {
                        excel.SaveAs(exportData);
                        bytes = exportData;
                    }

                    return bytes;
                }
            }
            catch (Exception e)
            {
                return null;
            }
        }

        public Dictionary<string, object> cargarExcel(HttpFileCollectionBase archivos)
        {
            var result = new Dictionary<string, object>();

            if ((MainContextEnum)vSesiones.sesionEmpresaActual == MainContextEnum.Construplan || (MainContextEnum)vSesiones.sesionEmpresaActual == MainContextEnum.Arrendadora)
            {
                #region RESTO EMPRESAS
                using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                {
                    using (var con = checkConexionProductivo())
                    {
                        using (var trans = con.BeginTransaction())
                        {
                            try
                            {
                                if (archivos.Count == 0)
                                {
                                    throw new Exception("No se cargaron archivos.");
                                }

                                for (int i = 0; i < archivos.Count; i++)
                                {
                                    HttpPostedFileBase archivo = archivos[i];

                                    List<List<string>> tabla = new List<List<string>>();

                                    #region Convertir Archivo a Arreglo de bytes.
                                    byte[] data;

                                    using (Stream inputStream = archivo.InputStream)
                                    {
                                        MemoryStream memoryStream = inputStream as MemoryStream;

                                        if (memoryStream == null)
                                        {
                                            memoryStream = new MemoryStream();
                                            inputStream.CopyTo(memoryStream);
                                        }

                                        data = memoryStream.ToArray();
                                    }
                                    #endregion

                                    #region Leer Arreglo de bytes.
                                    using (MemoryStream stream = new MemoryStream(data))
                                    using (ExcelPackage excelPackage = new ExcelPackage(stream))
                                    {
                                        //loop all worksheets
                                        foreach (ExcelWorksheet worksheet in excelPackage.Workbook.Worksheets)
                                        {
                                            //loop all rows
                                            for (int x = worksheet.Dimension.Start.Row; x <= worksheet.Dimension.End.Row; x++)
                                            {
                                                List<string> fila = new List<string>();

                                                //loop all columns in a row
                                                for (int y = worksheet.Dimension.Start.Column; y <= worksheet.Dimension.End.Column; y++)
                                                {
                                                    //add the cell data to the List
                                                    if (worksheet.Cells[x, y].Value != null)
                                                    {
                                                        fila.Add(worksheet.Cells[x, y].Value.ToString());
                                                    }
                                                    else
                                                    {
                                                        fila.Add("");
                                                    }
                                                }

                                                if (x > 1 && fila[0] != "")
                                                {
                                                    tabla.Add(fila);
                                                }
                                            }
                                        }
                                    }
                                    #endregion

                                    var count = 0;
                                    var listaPermisoAltaInsumo = _context.tblAlm_PermisoAltaInsumo.Where(x => x.estatus).ToList();
                                    var listaInsumosSIGOPLAN = _context.tblAlm_Insumo.ToList();

                                    foreach (var fila in tabla)
                                    {
                                        #region Validación permiso familia para la alta de insumos
                                        if (vSesiones.sesionEmpresaActual == 2)
                                        {
                                            if (listaPermisoAltaInsumo.Count() > 0)
                                            {
                                                var familiaInsumo = fila[0].Substring(0, 3);
                                                var permisosFamilia = listaPermisoAltaInsumo.Where(x => x.familia == familiaInsumo).ToList();

                                                if (permisosFamilia.Count() > 0)
                                                {
                                                    if (!permisosFamilia.Select(x => x.usuarioID).Contains(vSesiones.sesionUsuarioDTO.id))
                                                    {
                                                        throw new Exception("Su usuario no tiene permiso para dar de alta insumos en la familia \"" + familiaInsumo + "\".");
                                                    }
                                                }
                                            }
                                        }
                                        #endregion

                                        var existeInsumo = consultaCheckProductivo(string.Format(@"SELECT * FROM insumos WHERE insumo = {0}", Int32.Parse(fila[0])));
                                        var consulta = "";

                                        if (existeInsumo == null)
                                        {
                                            #region Agregar insumo nuevo
                                            var insumoNuevoSIGOPLAN = new tblAlm_Insumo();

                                            insumoNuevoSIGOPLAN.insumo = fila[0] != "" ? Int32.Parse(fila[0]) : 0;
                                            insumoNuevoSIGOPLAN.descripcion = fila[1];
                                            insumoNuevoSIGOPLAN.unidad = fila[2];
                                            insumoNuevoSIGOPLAN.tipo = fila[6] != "" ? Int32.Parse(fila[6]) : 0;
                                            insumoNuevoSIGOPLAN.grupo = fila[7] != "" ? Int32.Parse(fila[7]) : 0;
                                            insumoNuevoSIGOPLAN.fechaAlta = DateTime.Now.Date;
                                            insumoNuevoSIGOPLAN.bloqueado = 0;
                                            insumoNuevoSIGOPLAN.cancelado = "A";
                                            insumoNuevoSIGOPLAN.fijar_precio = "";
                                            insumoNuevoSIGOPLAN.precio_a_fijar = 0;
                                            insumoNuevoSIGOPLAN.validar_lista_precios = fila[14];
                                            insumoNuevoSIGOPLAN.bit_pt = fila[17];
                                            insumoNuevoSIGOPLAN.bit_mp = fila[18];
                                            insumoNuevoSIGOPLAN.bit_factura = fila[19];
                                            insumoNuevoSIGOPLAN.tolerancia = fila[21] != "" ? Convert.ToDecimal(fila[21], CultureInfo.InvariantCulture) : 0;
                                            insumoNuevoSIGOPLAN.color_resguardo = fila[22] != "" ? Int32.Parse(fila[22]) : 0;
                                            insumoNuevoSIGOPLAN.bit_rotacion = "A";
                                            insumoNuevoSIGOPLAN.bit_area_cta = 0;
                                            insumoNuevoSIGOPLAN.bit_af = "N";
                                            insumoNuevoSIGOPLAN.codigo_barras = "";
                                            insumoNuevoSIGOPLAN.id_modelo_maquinaria = fila[28] != "" ? Int32.Parse(fila[28]) : 0;
                                            insumoNuevoSIGOPLAN.compras_req = fila[34] != "" ? Int32.Parse(fila[34]) : 0;
                                            insumoNuevoSIGOPLAN.estatus = true;

                                            _context.tblAlm_Insumo.Add(insumoNuevoSIGOPLAN);
                                            _context.SaveChanges();

                                            if (insumoNuevoSIGOPLAN.id > 0)
                                            {
                                                consulta = @"INSERT INTO insumos 
                                                    (insumo, descripcion, unidad, almacen, [reportes internos], [default ventas], tipo, grupo, bloqueado, cancelado, fijar_precio, 
                                                    precio_a_fijar, bloqueado_por, bloqueado_desde, validar_lista_precios, fecha_mod, hora_mod, bit_pt, bit_mp, bit_factura, 
                                                    nivel_calidad, tolerancia, color_resguardo, bit_rotacion, bit_area_cta, bit_af, codigo_barras, bit_devolucion, id_modelo_maquinaria, 
                                                    ClaveProdServ, claveunidadsat, codigo_gtin, codigoadenda, imprime_ctapredial, compras_req) 
                                                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 
                                                            ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 
                                                            ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 
                                                            ?, ?, ?, ?, ?)";

                                                using (var cmd = new OdbcCommand(consulta))
                                                {
                                                    OdbcParameterCollection parameters = cmd.Parameters;

                                                    parameters.Add("@insumo", OdbcType.Numeric).Value = insumoNuevoSIGOPLAN.insumo;
                                                    parameters.Add("@descripcion", OdbcType.VarChar).Value = insumoNuevoSIGOPLAN.descripcion;
                                                    parameters.Add("@unidad", OdbcType.Char).Value = insumoNuevoSIGOPLAN.unidad;
                                                    parameters.Add("@almacen", OdbcType.Numeric).Value = DBNull.Value;
                                                    parameters.Add("@reportes internos", OdbcType.Numeric).Value = DBNull.Value;
                                                    parameters.Add("@default ventas", OdbcType.Numeric).Value = DBNull.Value;
                                                    parameters.Add("@tipo", OdbcType.Numeric).Value = insumoNuevoSIGOPLAN.tipo;
                                                    parameters.Add("@grupo", OdbcType.Numeric).Value = insumoNuevoSIGOPLAN.grupo;
                                                    parameters.Add("@bloqueado", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@cancelado", OdbcType.Char).Value = "A";
                                                    parameters.Add("@fijar_precio", OdbcType.Char).Value = "";
                                                    parameters.Add("@precio_a_fijar", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@bloqueado_por", OdbcType.Numeric).Value = DBNull.Value;
                                                    parameters.Add("@bloqueado_desde", OdbcType.DateTime).Value = DBNull.Value;
                                                    parameters.Add("@validar_lista_precios", OdbcType.Char).Value = insumoNuevoSIGOPLAN.validar_lista_precios ?? "";
                                                    parameters.Add("@fecha_mod", OdbcType.Date).Value = DBNull.Value;
                                                    parameters.Add("@hora_mod", OdbcType.Time).Value = DBNull.Value;
                                                    parameters.Add("@bit_pt", OdbcType.Char).Value = insumoNuevoSIGOPLAN.bit_pt ?? "";
                                                    parameters.Add("@bit_mp", OdbcType.Char).Value = insumoNuevoSIGOPLAN.bit_mp ?? "";
                                                    parameters.Add("@bit_factura", OdbcType.Char).Value = insumoNuevoSIGOPLAN.bit_factura ?? "";
                                                    parameters.Add("@nivel_calidad", OdbcType.Numeric).Value = DBNull.Value;
                                                    parameters.Add("@tolerancia", OdbcType.Numeric).Value = insumoNuevoSIGOPLAN.tolerancia;
                                                    parameters.Add("@color_resguardo", OdbcType.Numeric).Value = insumoNuevoSIGOPLAN.color_resguardo;
                                                    parameters.Add("@bit_rotacion", OdbcType.Char).Value = "A";
                                                    parameters.Add("@bit_area_cta", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@bit_af", OdbcType.Char).Value = "N";
                                                    parameters.Add("@codigo_barras", OdbcType.Char).Value = DBNull.Value;
                                                    parameters.Add("@bit_devolucion", OdbcType.Char).Value = "N";
                                                    parameters.Add("@id_modelo_maquinaria", OdbcType.Numeric).Value = insumoNuevoSIGOPLAN.id_modelo_maquinaria;
                                                    parameters.Add("@ClaveProdServ", OdbcType.VarChar).Value = DBNull.Value;
                                                    parameters.Add("@claveunidadsat", OdbcType.VarChar).Value = DBNull.Value;
                                                    parameters.Add("@codigo_gtin", OdbcType.VarChar).Value = DBNull.Value;
                                                    parameters.Add("@codigoadenda", OdbcType.VarChar).Value = DBNull.Value;
                                                    parameters.Add("@imprime_ctapredial", OdbcType.Char).Value = "N";
                                                    parameters.Add("@compras_req", OdbcType.Numeric).Value = insumoNuevoSIGOPLAN.compras_req;

                                                    cmd.Connection = trans.Connection;
                                                    cmd.Transaction = trans;

                                                    count += cmd.ExecuteNonQuery();
                                                }
                                            }
                                            else
                                            {
                                                throw new Exception("Error al guardar el insumo en SIGOPLAN.");
                                            }
                                            #endregion
                                        }
                                        else
                                        {
                                            #region Actualizar insumo existente
                                            var insumoSIGOPLAN = listaInsumosSIGOPLAN.FirstOrDefault(x => x.insumo == Int32.Parse(fila[0]));

                                            if (insumoSIGOPLAN != null)
                                            {
                                                insumoSIGOPLAN.id_modelo_maquinaria = fila[28] != "" ? Int32.Parse(fila[28]) : 0;
                                                insumoSIGOPLAN.descripcion = fila[1];
                                                insumoSIGOPLAN.unidad = fila[2];
                                                insumoSIGOPLAN.cancelado = fila[9];
                                                insumoSIGOPLAN.tolerancia = fila[21] != "" ? Convert.ToDecimal(fila[21], CultureInfo.InvariantCulture) : 0;
                                                insumoSIGOPLAN.bit_pt = fila[17];
                                                insumoSIGOPLAN.bit_mp = fila[18];
                                                insumoSIGOPLAN.bit_factura = fila[19];
                                                insumoSIGOPLAN.validar_lista_precios = fila[14];
                                                insumoSIGOPLAN.color_resguardo = fila[22] != "" ? Int32.Parse(fila[22]) : 0;
                                                insumoSIGOPLAN.compras_req = fila[34] != "" ? Int32.Parse(fila[34]) : 0;

                                                _context.Entry(insumoSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                                _context.SaveChanges();
                                            }

                                            consulta = @"UPDATE insumos 
                                                        SET 
                                                            id_modelo_maquinaria = ?, 
                                                            descripcion = ?, 
                                                            unidad = ?, 
                                                            cancelado = ?, 
                                                            tolerancia = ?, 
                                                            bit_pt = ?, 
                                                            bit_mp = ?, 
                                                            bit_factura = ?, 
                                                            validar_lista_precios = ?, 
                                                            color_resguardo = ?, 
                                                            compras_req = ? 
                                                        WHERE insumo = ?";

                                            using (var cmd = new OdbcCommand(consulta))
                                            {
                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                parameters.Add("@id_modelo_maquinaria", OdbcType.Numeric).Value = fila[28] != "" ? Int32.Parse(fila[28]) : 0;
                                                parameters.Add("@descripcion", OdbcType.VarChar).Value = fila[1];
                                                parameters.Add("@unidad", OdbcType.Char).Value = fila[2];
                                                parameters.Add("@cancelado", OdbcType.Char).Value = fila[9];
                                                parameters.Add("@tolerancia", OdbcType.Numeric).Value = fila[21] != "" ? Convert.ToDecimal(fila[21], CultureInfo.InvariantCulture) : 0;
                                                parameters.Add("@bit_pt", OdbcType.Char).Value = fila[17];
                                                parameters.Add("@bit_mp", OdbcType.Char).Value = fila[18];
                                                parameters.Add("@bit_factura", OdbcType.Char).Value = fila[19];
                                                parameters.Add("@validar_lista_precios", OdbcType.Char).Value = fila[14];
                                                parameters.Add("@color_resguardo", OdbcType.Numeric).Value = fila[22] != "" ? Int32.Parse(fila[22]) : 0;
                                                parameters.Add("@compras_req", OdbcType.Numeric).Value = fila[34] != "" ? Int32.Parse(fila[34]) : 0;

                                                parameters.Add("@insumo", OdbcType.Numeric).Value = Int32.Parse(fila[0]);

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;

                                                count += cmd.ExecuteNonQuery();
                                            }
                                            #endregion
                                        }
                                    }
                                }

                                trans.Commit();
                                dbSigoplanTransaction.Commit();

                                result.Add(SUCCESS, true);
                            }
                            catch (Exception e)
                            {
                                trans.Rollback();
                                dbSigoplanTransaction.Rollback();

                                LogError(0, 0, "AlmacenController", "cargarExcel", e, AccionEnum.AGREGAR, 0, null);
                                result.Add(MESSAGE, e.Message);
                                result.Add(SUCCESS, false);
                            }
                        }
                    }
                }
                #endregion
            }
            else if ((MainContextEnum)vSesiones.sesionEmpresaActual == MainContextEnum.Colombia)
            {
                #region COLOMBIA
                using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                {
                    using (var con = checkConexionProductivo())
                    {
                        using (var trans = con.BeginTransaction())
                        {
                            try
                            {
                                if (archivos.Count == 0)
                                {
                                    throw new Exception("No se cargaron archivos.");
                                }

                                for (int i = 0; i < archivos.Count; i++)
                                {
                                    HttpPostedFileBase archivo = archivos[i];

                                    List<List<string>> tabla = new List<List<string>>();

                                    #region Convertir Archivo a Arreglo de bytes.
                                    byte[] data;

                                    using (Stream inputStream = archivo.InputStream)
                                    {
                                        MemoryStream memoryStream = inputStream as MemoryStream;

                                        if (memoryStream == null)
                                        {
                                            memoryStream = new MemoryStream();
                                            inputStream.CopyTo(memoryStream);
                                        }

                                        data = memoryStream.ToArray();
                                    }
                                    #endregion

                                    #region Leer Arreglo de bytes.
                                    using (MemoryStream stream = new MemoryStream(data))
                                    using (ExcelPackage excelPackage = new ExcelPackage(stream))
                                    {
                                        //loop all worksheets
                                        foreach (ExcelWorksheet worksheet in excelPackage.Workbook.Worksheets)
                                        {
                                            //loop all rows
                                            for (int x = worksheet.Dimension.Start.Row; x <= worksheet.Dimension.End.Row; x++)
                                            {
                                                List<string> fila = new List<string>();

                                                //loop all columns in a row
                                                for (int y = worksheet.Dimension.Start.Column; y <= worksheet.Dimension.End.Column; y++)
                                                {
                                                    //add the cell data to the List
                                                    if (worksheet.Cells[x, y].Value != null)
                                                    {
                                                        fila.Add(worksheet.Cells[x, y].Value.ToString());
                                                    }
                                                    else
                                                    {
                                                        fila.Add("");
                                                    }
                                                }

                                                if (x > 1 && fila[0] != "")
                                                {
                                                    tabla.Add(fila);
                                                }
                                            }
                                        }
                                    }
                                    #endregion

                                    var count = 0;
                                    var listaPermisoAltaInsumo = _context.tblAlm_PermisoAltaInsumo.Where(x => x.estatus).ToList();
                                    var listaInsumosSIGOPLAN = _context.tblAlm_Insumo.ToList();

                                    foreach (var fila in tabla)
                                    {
                                        #region Validación permiso familia para la alta de insumos
                                        if (vSesiones.sesionEmpresaActual == 3)
                                        {
                                            if (listaPermisoAltaInsumo.Count() > 0)
                                            {
                                                var familiaInsumo = fila[0].Substring(0, 3);
                                                var permisosFamilia = listaPermisoAltaInsumo.Where(x => x.familia == familiaInsumo).ToList();

                                                if (permisosFamilia.Count() > 0)
                                                {
                                                    if (!permisosFamilia.Select(x => x.usuarioID).Contains(vSesiones.sesionUsuarioDTO.id))
                                                    {
                                                        throw new Exception("Su usuario no tiene permiso para dar de alta insumos en la familia \"" + familiaInsumo + "\".");
                                                    }
                                                }
                                            }
                                        }
                                        #endregion

                                        var existeInsumo = consultaCheckProductivo(string.Format(@"SELECT * FROM insumos WHERE insumo = {0}", Int32.Parse(fila[0])));
                                        var consulta = "";

                                        if (existeInsumo == null)
                                        {
                                            #region Agregar insumo nuevo
                                            var insumoNuevoSIGOPLAN = new tblAlm_Insumo();

                                            insumoNuevoSIGOPLAN.insumo = fila[0] != "" ? Int32.Parse(fila[0]) : 0;
                                            insumoNuevoSIGOPLAN.descripcion = fila[1];
                                            insumoNuevoSIGOPLAN.unidad = fila[2];
                                            insumoNuevoSIGOPLAN.tipo = fila[6] != "" ? Int32.Parse(fila[6]) : 0;
                                            insumoNuevoSIGOPLAN.grupo = fila[7] != "" ? Int32.Parse(fila[7]) : 0;
                                            insumoNuevoSIGOPLAN.fechaAlta = DateTime.Now.Date;
                                            insumoNuevoSIGOPLAN.bloqueado = 0;
                                            insumoNuevoSIGOPLAN.cancelado = "A";
                                            insumoNuevoSIGOPLAN.fijar_precio = "";
                                            insumoNuevoSIGOPLAN.precio_a_fijar = 0;
                                            insumoNuevoSIGOPLAN.validar_lista_precios = fila[14];
                                            insumoNuevoSIGOPLAN.bit_pt = fila[17];
                                            insumoNuevoSIGOPLAN.bit_mp = fila[18];
                                            insumoNuevoSIGOPLAN.bit_factura = fila[19];
                                            insumoNuevoSIGOPLAN.tolerancia = fila[21] != "" ? Convert.ToDecimal(fila[21], CultureInfo.InvariantCulture) : 0;
                                            insumoNuevoSIGOPLAN.color_resguardo = fila[22] != "" ? Int32.Parse(fila[22]) : 0;
                                            insumoNuevoSIGOPLAN.bit_rotacion = "A";
                                            insumoNuevoSIGOPLAN.bit_area_cta = 0;
                                            insumoNuevoSIGOPLAN.bit_af = "N";
                                            insumoNuevoSIGOPLAN.codigo_barras = "";
                                            insumoNuevoSIGOPLAN.id_modelo_maquinaria = fila[28] != "" ? Int32.Parse(fila[28]) : 0;
                                            insumoNuevoSIGOPLAN.compras_req = fila[34] != "" ? Int32.Parse(fila[34]) : 0;
                                            insumoNuevoSIGOPLAN.estatus = true;

                                            _context.tblAlm_Insumo.Add(insumoNuevoSIGOPLAN);
                                            _context.SaveChanges();

                                            if (insumoNuevoSIGOPLAN.id > 0)
                                            {
                                                consulta = @"INSERT INTO insumos 
                                                    (insumo, descripcion, unidad, almacen, [reportes internos], [default ventas], tipo, grupo, bloqueado, cancelado, fijar_precio, 
                                                    precio_a_fijar, bloqueado_por, bloqueado_desde, validar_lista_precios, fecha_mod, hora_mod, bit_pt, bit_mp, bit_factura, 
                                                    nivel_calidad, tolerancia, bit_rotacion, bit_area_cta, codigo_barras, bit_devolucion) 
                                                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 
                                                            ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 
                                                            ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 
                                                            ?, ?, ?, ?, ?)";

                                                using (var cmd = new OdbcCommand(consulta))
                                                {
                                                    OdbcParameterCollection parameters = cmd.Parameters;

                                                    parameters.Add("@insumo", OdbcType.Numeric).Value = insumoNuevoSIGOPLAN.insumo;
                                                    parameters.Add("@descripcion", OdbcType.VarChar).Value = insumoNuevoSIGOPLAN.descripcion;
                                                    parameters.Add("@unidad", OdbcType.Char).Value = insumoNuevoSIGOPLAN.unidad;
                                                    parameters.Add("@almacen", OdbcType.Numeric).Value = DBNull.Value;
                                                    parameters.Add("@reportes internos", OdbcType.Numeric).Value = DBNull.Value;
                                                    parameters.Add("@default ventas", OdbcType.Numeric).Value = DBNull.Value;
                                                    parameters.Add("@tipo", OdbcType.Numeric).Value = insumoNuevoSIGOPLAN.tipo;
                                                    parameters.Add("@grupo", OdbcType.Numeric).Value = insumoNuevoSIGOPLAN.grupo;
                                                    parameters.Add("@bloqueado", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@cancelado", OdbcType.Char).Value = "A";
                                                    parameters.Add("@fijar_precio", OdbcType.Char).Value = "";
                                                    parameters.Add("@precio_a_fijar", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@bloqueado_por", OdbcType.Numeric).Value = DBNull.Value;
                                                    parameters.Add("@bloqueado_desde", OdbcType.DateTime).Value = DBNull.Value;
                                                    parameters.Add("@validar_lista_precios", OdbcType.Char).Value = insumoNuevoSIGOPLAN.validar_lista_precios ?? "";
                                                    parameters.Add("@fecha_mod", OdbcType.Date).Value = DBNull.Value;
                                                    parameters.Add("@hora_mod", OdbcType.Time).Value = DBNull.Value;
                                                    parameters.Add("@bit_pt", OdbcType.Char).Value = insumoNuevoSIGOPLAN.bit_pt ?? "";
                                                    parameters.Add("@bit_mp", OdbcType.Char).Value = insumoNuevoSIGOPLAN.bit_mp ?? "";
                                                    parameters.Add("@bit_factura", OdbcType.Char).Value = insumoNuevoSIGOPLAN.bit_factura ?? "";
                                                    parameters.Add("@nivel_calidad", OdbcType.Numeric).Value = DBNull.Value;
                                                    parameters.Add("@tolerancia", OdbcType.Numeric).Value = insumoNuevoSIGOPLAN.tolerancia;
                                                    //parameters.Add("@color_resguardo", OdbcType.Numeric).Value = insumoNuevoSIGOPLAN.color_resguardo;
                                                    parameters.Add("@bit_rotacion", OdbcType.Char).Value = "A";
                                                    parameters.Add("@bit_area_cta", OdbcType.Numeric).Value = 0;
                                                    //parameters.Add("@bit_af", OdbcType.Char).Value = "N";
                                                    parameters.Add("@codigo_barras", OdbcType.Char).Value = DBNull.Value;
                                                    parameters.Add("@bit_devolucion", OdbcType.Char).Value = "N";
                                                    //parameters.Add("@id_modelo_maquinaria", OdbcType.Numeric).Value = insumoNuevoSIGOPLAN.id_modelo_maquinaria;
                                                    //parameters.Add("@ClaveProdServ", OdbcType.VarChar).Value = DBNull.Value;
                                                    //parameters.Add("@claveunidadsat", OdbcType.VarChar).Value = DBNull.Value;
                                                    //parameters.Add("@codigo_gtin", OdbcType.VarChar).Value = DBNull.Value;
                                                    //parameters.Add("@codigoadenda", OdbcType.VarChar).Value = DBNull.Value;
                                                    //parameters.Add("@imprime_ctapredial", OdbcType.Char).Value = "N";
                                                    //parameters.Add("@compras_req", OdbcType.Numeric).Value = insumoNuevoSIGOPLAN.compras_req;

                                                    cmd.Connection = trans.Connection;
                                                    cmd.Transaction = trans;

                                                    count += cmd.ExecuteNonQuery();
                                                }
                                            }
                                            else
                                            {
                                                throw new Exception("Error al guardar el insumo en SIGOPLAN.");
                                            }
                                            #endregion
                                        }
                                        else
                                        {
                                            #region Actualizar insumo existente
                                            var insumoSIGOPLAN = listaInsumosSIGOPLAN.FirstOrDefault(x => x.insumo == Int32.Parse(fila[0]));

                                            if (insumoSIGOPLAN != null)
                                            {
                                                insumoSIGOPLAN.id_modelo_maquinaria = fila[28] != "" ? Int32.Parse(fila[28]) : 0;
                                                insumoSIGOPLAN.descripcion = fila[1];
                                                insumoSIGOPLAN.unidad = fila[2];
                                                insumoSIGOPLAN.cancelado = fila[9];
                                                insumoSIGOPLAN.tolerancia = fila[21] != "" ? Convert.ToDecimal(fila[21], CultureInfo.InvariantCulture) : 0;
                                                insumoSIGOPLAN.bit_pt = fila[17];
                                                insumoSIGOPLAN.bit_mp = fila[18];
                                                insumoSIGOPLAN.bit_factura = fila[19];
                                                insumoSIGOPLAN.validar_lista_precios = fila[14];
                                                insumoSIGOPLAN.color_resguardo = fila[22] != "" ? Int32.Parse(fila[22]) : 0;
                                                insumoSIGOPLAN.compras_req = fila[34] != "" ? Int32.Parse(fila[34]) : 0;

                                                _context.Entry(insumoSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                                _context.SaveChanges();
                                            }

                                            consulta = @"UPDATE insumos 
                                                        SET 
                                                            id_modelo_maquinaria = ?, 
                                                            descripcion = ?, 
                                                            unidad = ?, 
                                                            cancelado = ?, 
                                                            tolerancia = ?, 
                                                            bit_pt = ?, 
                                                            bit_mp = ?, 
                                                            bit_factura = ?, 
                                                            validar_lista_precios = ?
                                                        WHERE insumo = ?";

                                            using (var cmd = new OdbcCommand(consulta))
                                            {
                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                parameters.Add("@id_modelo_maquinaria", OdbcType.Numeric).Value = fila[28] != "" ? Int32.Parse(fila[28]) : 0;
                                                parameters.Add("@descripcion", OdbcType.VarChar).Value = fila[1];
                                                parameters.Add("@unidad", OdbcType.Char).Value = fila[2];
                                                parameters.Add("@cancelado", OdbcType.Char).Value = fila[9];
                                                parameters.Add("@tolerancia", OdbcType.Numeric).Value = fila[21] != "" ? Convert.ToDecimal(fila[21], CultureInfo.InvariantCulture) : 0;
                                                parameters.Add("@bit_pt", OdbcType.Char).Value = fila[17];
                                                parameters.Add("@bit_mp", OdbcType.Char).Value = fila[18];
                                                parameters.Add("@bit_factura", OdbcType.Char).Value = fila[19];
                                                parameters.Add("@validar_lista_precios", OdbcType.Char).Value = fila[14];
                                                //parameters.Add("@color_resguardo", OdbcType.Numeric).Value = fila[22] != "" ? Int32.Parse(fila[22]) : 0;
                                                //parameters.Add("@compras_req", OdbcType.Numeric).Value = fila[34] != "" ? Int32.Parse(fila[34]) : 0;

                                                parameters.Add("@insumo", OdbcType.Numeric).Value = Int32.Parse(fila[0]);

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;

                                                count += cmd.ExecuteNonQuery();
                                            }
                                            #endregion
                                        }
                                    }
                                }

                                trans.Commit();
                                dbSigoplanTransaction.Commit();

                                result.Add(SUCCESS, true);
                            }
                            catch (Exception e)
                            {
                                trans.Rollback();
                                dbSigoplanTransaction.Rollback();

                                LogError(0, 0, "AlmacenController", "cargarExcel", e, AccionEnum.AGREGAR, 0, null);
                                result.Add(MESSAGE, e.Message);
                                result.Add(SUCCESS, false);
                            }
                        }
                    }
                }
                #endregion
            }
            else if ((MainContextEnum)vSesiones.sesionEmpresaActual == MainContextEnum.PERU)
            {
                #region PERU
                using (var dbStartSoft = new MainContextPeruStarSoft003BDCOMUN())
                {
                    using (var dbStarsoftTransaction = dbStartSoft.Database.BeginTransaction())
                    {
                        try
                        {
                            //var objComprador = _context.tblP_Usuario_Starsoft.FirstOrDefault(e => e.sigoplan_usuario_id == vSesiones.sesionUsuarioDTO.id);

                            //if (objComprador == null)
                            //{
                            //    throw new Exception("No existe el usuario en Starsoft.");
                            //}

                            if (archivos.Count == 0)
                            {
                                throw new Exception("No se cargaron archivos.");
                            }

                            for (int i = 0; i < archivos.Count; i++)
                            {
                                HttpPostedFileBase archivo = archivos[i];

                                List<List<string>> tabla = new List<List<string>>();

                                #region Convertir Archivo a Arreglo de bytes.
                                byte[] data;

                                using (Stream inputStream = archivo.InputStream)
                                {
                                    MemoryStream memoryStream = inputStream as MemoryStream;

                                    if (memoryStream == null)
                                    {
                                        memoryStream = new MemoryStream();
                                        inputStream.CopyTo(memoryStream);
                                    }

                                    data = memoryStream.ToArray();
                                }
                                #endregion

                                #region Leer Arreglo de bytes.
                                using (MemoryStream stream = new MemoryStream(data))
                                using (ExcelPackage excelPackage = new ExcelPackage(stream))
                                {
                                    //loop all worksheets
                                    foreach (ExcelWorksheet worksheet in excelPackage.Workbook.Worksheets)
                                    {
                                        //loop all rows
                                        for (int x = worksheet.Dimension.Start.Row; x <= worksheet.Dimension.End.Row; x++)
                                        {
                                            List<string> fila = new List<string>();

                                            //loop all columns in a row
                                            for (int y = worksheet.Dimension.Start.Column; y <= worksheet.Dimension.End.Column; y++)
                                            {
                                                //add the cell data to the List
                                                if (worksheet.Cells[x, y].Value != null)
                                                {
                                                    fila.Add(worksheet.Cells[x, y].Value.ToString());
                                                }
                                                else
                                                {
                                                    fila.Add("");
                                                }
                                            }

                                            if (x > 1 && fila[0] != "")
                                            {
                                                tabla.Add(fila);
                                            }
                                        }
                                    }
                                }
                                #endregion

                                var count = 0;
                                //var listaPermisoAltaInsumo = _context.tblAlm_PermisoAltaInsumo.Where(x => x.estatus).ToList();
                                var listaInsumosSIGOPLAN = _context.tblAlm_Insumo.ToList();

                                foreach (var fila in tabla)
                                {

                                    var objPermiso = _context.tblAlm_Almacenistas.FirstOrDefault(e => e.id_usuario_sigoplan == vSesiones.sesionUsuarioDTO.id);

                                    if (vSesiones.sesionUsuarioDTO.idPerfil != 1 && objPermiso == null)
                                    {
                                        throw new Exception("Su usuario no tiene permiso para dar de alta insumos en Peru.");

                                    }

                                    string idInsumo = fila[0];

                                    var objInsumoStarsoft = dbStartSoft.MAEART.FirstOrDefault(e => e.AESTADO == "V" && e.ACODIGO == idInsumo);

                                    if (objInsumoStarsoft == null)
                                    {
                                        #region Agregar insumo nuevo

                                        dbStartSoft.MAEART.Add(new MAEART()
                                        {
                                            ACODIGO = fila[0] != "" ? fila[0] : "0",
                                            ACODIGO2 = fila[1],
                                            ADESCRI = fila[2],
                                            ADESCRI2 = "",
                                            AFAMILIA = fila[3],
                                            AMODELO = null,
                                            AUNIDAD = fila[4],
                                            AGRUPO = null,
                                            ACUENTA = "",
                                            AFSERIE = "N",
                                            APRECIO = 0,
                                            ADESCTO = 0,
                                            APRECOM = 0,
                                            ACODPRO = "",
                                            AFECHA = DateTime.Now,
                                            ACASILLERO = null,
                                            AFSTOCK = "S",
                                            AUSER = "1",
                                            AESTADO = "V",
                                            AFECVEN = null,
                                            ACODMON = "MN",
                                            ATIPO = fila[5],
                                            ACOMENTA = "",
                                            AFLOTE = "N",
                                            AFDECI = "",
                                            AUNIART = 0,
                                            APESO = 0,
                                            AISCPOR = 0,
                                            AIGVPOR = 10M,
                                            AHORA = null,
                                            AFPRELIB = null,
                                            AFRESTA = null,
                                            AFUNIREF = null,
                                            AUNIREF = null,
                                            AFACREF = 0,
                                            APDIS = 0,
                                            APCOM = 0,
                                            ACODMONC = null,
                                            AFLAGIGV = false,
                                            ACOLOR = "",
                                            AMARCA = "",
                                            AFOTO = "",
                                            ATALLA = "",
                                            CODAUTO = 0,
                                            AFLAGPERC = "",
                                            COD_IMAGEN = "",
                                            UMREFERENCIA = "",
                                            AMODELO1 = "",
                                            AORIGEN = null,
                                            TERCERO = false,
                                            MAR_CODIGO = "",
                                            ZON_CODIGO = null,
                                            AULTFECCOMP = null,
                                            AULTPROV = null,
                                            AULTPAISPROV = null,
                                            COD_ARANCEL = null,
                                            APREFOB = 0,
                                            APRECIF = 0,
                                            AMONFOB = null,
                                            AMONCIF = null,
                                            CODIGO_SUNAT = "",
                                            COD_AUDITORIA = null,
                                            FLG_EXONERADO_IGV = null,
                                            FLG_ECOMMERCE = null,
                                            FLG_DETRACCION = null,
                                            COD_DETRACCION = null,
                                        });

                                        dbStartSoft.SaveChanges();

                                        #endregion
                                    }
                                    else
                                    {
                                        #region Actualizar insumo existente
                                        if (objInsumoStarsoft != null)
                                        {
                                            objInsumoStarsoft.ADESCRI = fila[2];
                                            objInsumoStarsoft.AFAMILIA = fila[3];
                                            objInsumoStarsoft.AUNIDAD = fila[4];
                                            objInsumoStarsoft.ATIPO = fila[5];

                                            dbStartSoft.SaveChanges();
                                        }

                                        #endregion
                                    }
                                }
                            }

                            //trans.Commit();
                            //dbSigoplanTransaction.Commit();
                            dbStarsoftTransaction.Commit();

                            result.Add(SUCCESS, true);
                        }
                        catch (Exception e)
                        {
                            dbStarsoftTransaction.Rollback();
                            LogError(0, 0, "AlmacenController", "cargarExcel", e, AccionEnum.AGREGAR, 0, null);
                            result.Add(MESSAGE, e.Message);
                            result.Add(SUCCESS, false);
                        }
                    }
                }
                #endregion
            }

            return result;
        }

        public RequisicionCompraConciliacionDTO crearRequisicionCompraConciliacion(string cc, string comentario, TipoCentroCostoEnum tipoCC, decimal precio, int tipoMoneda, decimal precioDolar, decimal porcentajeIVA)
        {
            var resultado = new RequisicionCompraConciliacionDTO();

            using (var _contextConstruplan = new MainContext(EmpresaEnum.Construplan))
            {
                using (var dbSigoplanTransaction = _contextConstruplan.Database.BeginTransaction())
                {
                    using (var con = new Conexion().ConnectConstruplanConstruplan())
                    {
                        using (var trans = con.BeginTransaction())
                        {
                            try
                            {
                                var insumo = tipoCC == TipoCentroCostoEnum.ADMINISTRATIVO ? 7110001 : 6110001;

                                #region Guardar Requisición
                                var ultimaRequisicionEK = _contextEnkontrol.Select<RequisicionDTO>(EnkontrolEnum.CplanProd, new OdbcConsultaDTO()
                                {
                                    consulta = string.Format(@"SELECT TOP 1 numero FROM so_requisicion WHERE cc = '{0}' ORDER BY numero DESC", cc)
                                }).ToList();

                                int nuevoNumeroRequisicion = 1;

                                if (ultimaRequisicionEK.Count() > 0)
                                {
                                    nuevoNumeroRequisicion = ultimaRequisicionEK[0].numero + 1;
                                }

                                #region Tabla General
                                using (var cmd = new OdbcCommand())
                                {
                                    cmd.CommandText = @"
                                        INSERT INTO so_requisicion (
                                            cc, numero, fecha, libre_abordo, tipo_req_oc, solicito, vobo, autorizo, comentarios, st_estatus, st_impresa, st_autoriza, emp_autoriza,
                                            empleado_modifica, fecha_modifica, hora_modifica, fecha_autoriza, tmc, autoriza_activos, num_vobo)
                                        VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@cc", OdbcType.Char).Value = cc;
                                    parameters.Add("@numero", OdbcType.Numeric).Value = nuevoNumeroRequisicion;
                                    parameters.Add("@fecha", OdbcType.Date).Value = DateTime.Now;
                                    parameters.Add("@libre_abordo", OdbcType.Numeric).Value = 1; //Se guarda siempre con 1 porque en EnKontrol la tabla de libre abordo no contiene todos los almacenes. En SIGOPLAN se guarda con el número de almacén.
                                    parameters.Add("@tipo_req_oc", OdbcType.Char).Value = 1;
                                    parameters.Add("@solicito", OdbcType.Numeric).Value = 1;
                                    parameters.Add("@vobo", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@autorizo", OdbcType.Numeric).Value = 1;
                                    parameters.Add("@comentarios", OdbcType.Char).Value = comentario ?? "";
                                    parameters.Add("@st_estatus", OdbcType.Char).Value = string.Empty;
                                    parameters.Add("@st_impresa", OdbcType.Char).Value = "T";
                                    parameters.Add("@st_autoriza", OdbcType.Char).Value = "S";
                                    parameters.Add("@emp_autoriza", OdbcType.Numeric).Value = 1;
                                    parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now;
                                    parameters.Add("@hora_modifica", OdbcType.DateTime).Value = DateTime.Now;
                                    parameters.Add("@fecha_autoriza", OdbcType.DateTime).Value = DateTime.Now;
                                    parameters.Add("@tmc", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@autoriza_activos", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@num_vobo", OdbcType.Numeric).Value = 0;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;
                                    cmd.ExecuteNonQuery();
                                }

                                var requisicion = new tblCom_Req
                                {
                                    numero = nuevoNumeroRequisicion,
                                    cc = cc,
                                    fecha = DateTime.Now,
                                    idLibreAbordo = 1,
                                    idTipoReqOc = 1,
                                    solicito = 1,
                                    vobo = 0,
                                    autorizo = 1,
                                    comentarios = comentario,
                                    stEstatus = "",
                                    stImpresa = true,
                                    stAutoriza = true,
                                    empAutoriza = 1,
                                    empModifica = 0,
                                    modifica = DateTime.Now,
                                    autoriza = DateTime.Now,
                                    isTmc = false,
                                    isActivos = false,
                                    folioAsignado = "",
                                    consigna = false,
                                    validadoAlmacen = true,
                                    validadoCompras = true,
                                    validadoRequisitor = true,
                                    fechaValidacionAlmacen = null,
                                    comprador = 0,
                                    usuarioSolicita = 1,
                                    usuarioSolicitaUso = "",
                                    usuarioSolicitaEmpresa = 1,
                                    estatusRegistro = true
                                };

                                _contextConstruplan.tblCom_Req.Add(requisicion);
                                _contextConstruplan.SaveChanges();
                                #endregion

                                #region Tabla Detalle
                                using (var cmd = new OdbcCommand())
                                {
                                    cmd.CommandText = @"
                                        INSERT INTO so_requisicion_det (
                                            cc, numero, partida, insumo, fecha_requerido, cantidad, cant_ordenada, fecha_ordenada, estatus, cant_cancelada,
                                            referencia_1, cantidad_excedida_ppto, area, cuenta)
                                        VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@cc", OdbcType.Char).Value = cc;
                                    parameters.Add("@numero", OdbcType.Numeric).Value = nuevoNumeroRequisicion;
                                    parameters.Add("@partida", OdbcType.Numeric).Value = 1;
                                    parameters.Add("@insumo", OdbcType.Numeric).Value = insumo;
                                    parameters.Add("@fecha_requerido", OdbcType.Date).Value = DateTime.Now;
                                    parameters.Add("@cantidad", OdbcType.Numeric).Value = 1;
                                    parameters.Add("@cant_ordenada", OdbcType.Numeric).Value = 1;
                                    parameters.Add("@fecha_ordenada", OdbcType.Date).Value = DateTime.Now;
                                    parameters.Add("@estatus", OdbcType.Char).Value = " ";
                                    parameters.Add("@cant_cancelada", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@referencia_1", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@cantidad_excedida_ppto", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@area", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@cuenta", OdbcType.Numeric).Value = 0;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;
                                    cmd.ExecuteNonQuery();
                                }

                                var detalleRequisicion = new tblCom_ReqDet
                                {
                                    idReq = requisicion.id,
                                    partida = 1,
                                    insumo = insumo,
                                    requerido = DateTime.Now,
                                    cantidad = 1,
                                    cantOrdenada = 1,
                                    ordenada = DateTime.Now,
                                    estatus = "",
                                    cantCancelada = 0,
                                    referencia = "",
                                    cantExcedida = 0,
                                    area = 0,
                                    cuenta = 0,
                                    descripcion = comentario,
                                    observaciones = "",
                                    comentarioSurtidoQuitar = "",
                                    estatusRegistro = true
                                };

                                _contextConstruplan.tblCom_ReqDet.Add(detalleRequisicion);
                                _contextConstruplan.SaveChanges();
                                #endregion

                                #region Tabla Comentario Partida
                                using (var cmd = new OdbcCommand())
                                {
                                    cmd.CommandText = @"INSERT INTO so_req_det_linea (cc, numero, partida, descripcion) VALUES (?,?,?,?)";

                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@cc", OdbcType.Char).Value = cc;
                                    parameters.Add("@numero", OdbcType.Numeric).Value = nuevoNumeroRequisicion;
                                    parameters.Add("@partida", OdbcType.Numeric).Value = 1;
                                    parameters.Add("@descripcion", OdbcType.VarChar).Value = comentario;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;
                                    cmd.ExecuteNonQuery();
                                }
                                #endregion

                                #region Agregar/Actualizar Registro Explosión
                                var registroExplosionRequisicionEK = _contextEnkontrol.Select<dynamic>(EnkontrolEnum.CplanProd, new OdbcConsultaDTO()
                                {
                                    consulta = string.Format(@"SELECT * FROM so_explos_mat WHERE cc = '{0}' AND insumo = {1} AND year_explos = {2}", cc, insumo, DateTime.Now.Year)
                                }).ToList();

                                if (registroExplosionRequisicionEK.Count() == 0)
                                {
                                    #region Insertar Registro Explosión
                                    using (var cmd = new OdbcCommand())
                                    {
                                        cmd.CommandText = @"
                                            INSERT INTO so_explos_mat (
                                                cc, insumo, cantidad, precio, aditiva_cant, aditiva_imp, deduc_cant, deduc_imp, cant_requerida,
                                                comp_cant, comp_imp, ajuste_cant, ajuste_imp, traspaso_cant, traspaso_imp, cant_recibida, imp_recibido,
                                                aditiva_cant_fecha, deduc_cant_fecha, aditiva_precio_fecha, deduc_precio_fecha, aditiva_precio, deductiva_precio,
                                                traspaso_cant_entrada, traspaso_imp_entrada, importe, year_explos, periodo, bit_auto_presu, cantidad_aditiva_sun,
                                                cantidad_deductiva_sun, cantidad_extra_sun)
                                            VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                        OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                        parametersExplosion.Add("@cc", OdbcType.Char).Value = cc;
                                        parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = insumo;
                                        parametersExplosion.Add("@cantidad", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@precio", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@aditiva_cant", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@aditiva_imp", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@deduc_cant", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@deduc_imp", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@cant_requerida", OdbcType.Numeric).Value = 1;
                                        parametersExplosion.Add("@comp_cant", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@comp_imp", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@ajuste_cant", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@ajuste_imp", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@traspaso_cant", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@traspaso_imp", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@cant_recibida", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@imp_recibido", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@aditiva_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                        parametersExplosion.Add("@deduc_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                        parametersExplosion.Add("@aditiva_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                        parametersExplosion.Add("@deduc_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                        parametersExplosion.Add("@aditiva_precio", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@deductiva_precio", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@traspaso_cant_entrada", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@traspaso_imp_entrada", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@importe", OdbcType.Numeric).Value = DBNull.Value;
                                        parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;
                                        parametersExplosion.Add("@periodo", OdbcType.Char).Value = DBNull.Value;
                                        parametersExplosion.Add("@bit_auto_presu", OdbcType.Char).Value = "N";
                                        parametersExplosion.Add("@cantidad_aditiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                        parametersExplosion.Add("@cantidad_deductiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                        parametersExplosion.Add("@cantidad_extra_sun", OdbcType.Numeric).Value = DBNull.Value;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;
                                        cmd.ExecuteNonQuery();
                                    }
                                    #endregion
                                }
                                else
                                {
                                    #region Actualizar Registro Explosión
                                    var nuevaCantidadRequerida = Convert.ToDecimal(registroExplosionRequisicionEK[0].cant_requerida, CultureInfo.InvariantCulture) + 1;

                                    using (var cmd = new OdbcCommand())
                                    {
                                        cmd.CommandText = @"UPDATE so_explos_mat SET cant_requerida = ? WHERE cc = ? AND insumo = ? AND year_explos = ?";

                                        OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                        parametersExplosion.Add("@cant_requerida", OdbcType.Numeric).Value = nuevaCantidadRequerida;

                                        parametersExplosion.Add("@cc", OdbcType.Char).Value = cc;
                                        parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = insumo;
                                        parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;
                                        cmd.ExecuteNonQuery();
                                    }
                                    #endregion
                                }
                                #endregion
                                #endregion

                                #region Guardar Compra
                                var ultimaCompraEK = _contextEnkontrol.Select<RequisicionDTO>(EnkontrolEnum.CplanProd, new OdbcConsultaDTO()
                                {
                                    consulta = string.Format(@"SELECT TOP 1 numero FROM so_orden_compra WHERE cc = '{0}' ORDER BY numero DESC", cc)
                                }).ToList();
                                var numeroCompraNueva = 1;

                                if (ultimaCompraEK.Count() > 0)
                                {
                                    numeroCompraNueva = ultimaCompraEK[0].numero + 1;
                                }

                                decimal tipoCambio = precioDolar;

                                if (precioDolar == 0)
                                {
                                    var precioDolarEK = _contextEnkontrol.Select<dynamic>(EnkontrolEnum.CplanProd, new OdbcConsultaDTO()
                                    {
                                        consulta = string.Format(@"SELECT TOP 1 tipo_cambio FROM tipo_cambio ORDER BY fecha DESC")
                                    }).ToList();

                                    if (precioDolarEK.Count() > 0)
                                    {
                                        tipoCambio = Convert.ToDecimal(precioDolarEK[0].tipo_cambio, CultureInfo.InvariantCulture);
                                    }
                                    else
                                    {
                                        throw new Exception("No se encuentra el precio del dólar.");
                                    }
                                }

                                #region Tabla General
                                using (var cmd = new OdbcCommand())
                                {
                                    cmd.CommandText = @"
                                        INSERT INTO so_orden_compra (
                                            cc, numero, fecha, libre_abordo, tipo_oc_req, comprador, proveedor, moneda, tipo_cambio, porcent_iva,
                                            sub_total, iva, total, sub_tot_rec, iva_rec, total_rec, sub_tot_ajus, iva_ajus, total_ajus, st_impresa,
                                            estatus, comentarios, solicito, vobo, autorizo, sub_tot_canc, iva_canc, total_canc, total_fac, total_pag,
                                            embarquese, empleado_modifica, fecha_modifica, hora_modifica, tc_cc, anticipo, monto_anticipo, almacen,
                                            bit_autorecepcion, almacen_autorecepcion, empleado_autorecepcion, rentencion_antes_iva, rentencion_despues_iva,
                                            bienes_servicios, concepto_factura, tot_fac_ret, tot_ret_ret, usuario_autoriza, fecha_autoriza, st_autorizada,
                                            imprime_porcentaje, ST_OC, empleado_autoriza, vobo_informa, vobo2, vobo3, vobo4, vobo5, vobo6, cambia_vobo, tmc,
                                            autoriza_activos, fecha_vobo, fecha_vobo2, fecha_vobo3, bit_af, bit_arrenda, estatus_bloqueo, ruta_pdf, ruta_map)
                                        VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@cc", OdbcType.Char).Value = cc;
                                    parameters.Add("@numero", OdbcType.Numeric).Value = numeroCompraNueva;
                                    parameters.Add("@fecha", OdbcType.Date).Value = DateTime.Now;
                                    parameters.Add("@libre_abordo", OdbcType.Numeric).Value = 1; //Se guarda siempre con 1 porque en EnKontrol la tabla de libre abordo no contiene todos los almacenes. En SIGOPLAN se guarda con el número de almacén.
                                    parameters.Add("@tipo_oc_req", OdbcType.Char).Value = "1";
                                    parameters.Add("@comprador", OdbcType.Numeric).Value = 1;
                                    parameters.Add("@proveedor", OdbcType.Numeric).Value = tipoMoneda == 1 ? 4835 : 9867;
                                    parameters.Add("@moneda", OdbcType.Char).Value = tipoMoneda.ToString();
                                    parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = tipoCambio;
                                    parameters.Add("@porcent_iva", OdbcType.Numeric).Value = porcentajeIVA;
                                    parameters.Add("@sub_total", OdbcType.Numeric).Value = precio;
                                    parameters.Add("@iva", OdbcType.Numeric).Value = precio * (porcentajeIVA / 100);
                                    parameters.Add("@total", OdbcType.Numeric).Value = precio + (precio * (porcentajeIVA / 100));
                                    parameters.Add("@sub_tot_rec", OdbcType.Numeric).Value = precio;
                                    parameters.Add("@iva_rec", OdbcType.Numeric).Value = precio * (porcentajeIVA / 100);
                                    parameters.Add("@total_rec", OdbcType.Numeric).Value = precio + (precio * (porcentajeIVA / 100));
                                    parameters.Add("@sub_tot_ajus", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@iva_ajus", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@total_ajus", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@st_impresa", OdbcType.Char).Value = "I";
                                    parameters.Add("@estatus", OdbcType.Char).Value = "T";
                                    parameters.Add("@comentarios", OdbcType.Char).Value = comentario;
                                    parameters.Add("@solicito", OdbcType.Numeric).Value = 1;
                                    parameters.Add("@vobo", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@autorizo", OdbcType.Numeric).Value = 1;
                                    parameters.Add("@sub_tot_canc", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@iva_canc", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@total_canc", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@total_fac", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@total_pag", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@embarquese", OdbcType.Char).Value = "";
                                    parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = 1;
                                    parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                    parameters.Add("@hora_modifica", OdbcType.DateTime).Value = DateTime.Now;
                                    parameters.Add("@tc_cc", OdbcType.Numeric).Value = 1;
                                    parameters.Add("@anticipo", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@monto_anticipo", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@almacen", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@bit_autorecepcion", OdbcType.Char).Value = "S";
                                    parameters.Add("@almacen_autorecepcion", OdbcType.Numeric).Value = 1;
                                    parameters.Add("@empleado_autorecepcion", OdbcType.Numeric).Value = 1;
                                    parameters.Add("@rentencion_antes_iva", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@rentencion_despues_iva", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@bienes_servicios", OdbcType.Char).Value = "S";
                                    parameters.Add("@concepto_factura", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@tot_fac_ret", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@tot_ret_ret", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@usuario_autoriza", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@fecha_autoriza", OdbcType.Date).Value = DBNull.Value;
                                    parameters.Add("@st_autorizada", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@imprime_porcentaje", OdbcType.Char).Value = "N";
                                    parameters.Add("@ST_OC", OdbcType.Char).Value = "A";
                                    parameters.Add("@empleado_autoriza", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@vobo_informa", OdbcType.Char).Value = "N";
                                    parameters.Add("@vobo2", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@vobo3", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@vobo4", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@vobo5", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@vobo6", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@cambia_vobo", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@tmc", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@autoriza_activos", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@fecha_vobo", OdbcType.Date).Value = DBNull.Value;
                                    parameters.Add("@fecha_vobo2", OdbcType.Date).Value = DBNull.Value;
                                    parameters.Add("@fecha_vobo3", OdbcType.Date).Value = DBNull.Value;
                                    parameters.Add("@bit_af", OdbcType.Char).Value = "N";
                                    parameters.Add("@bit_arrenda", OdbcType.Char).Value = "N";
                                    parameters.Add("@estatus_bloqueo", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@ruta_pdf", OdbcType.VarChar).Value = DBNull.Value;
                                    parameters.Add("@ruta_map", OdbcType.VarChar).Value = DBNull.Value;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;
                                    cmd.ExecuteNonQuery();
                                }

                                var compra = new tblCom_OrdenCompra
                                {
                                    cc = cc,
                                    numero = numeroCompraNueva,
                                    fecha = DateTime.Now,
                                    idLibreAbordo = 1,
                                    tipo_oc_req = "1",
                                    compradorSIGOPLAN = 1,
                                    compradorEnkontrol = 1,
                                    moneda = tipoMoneda,
                                    tipo_cambio = tipoCambio,
                                    porcent_iva = porcentajeIVA,
                                    sub_total = precio,
                                    iva = precio * (porcentajeIVA / 100),
                                    total = precio + (precio * (porcentajeIVA / 100)),
                                    estatus = "",
                                    comentarios = comentario,
                                    bienes_servicios = "S",
                                    CFDI = "G03 (Gastos en general)",
                                    tiempoEntregaDias = 1,
                                    tiempoEntregaComentarios = "",
                                    anticipo = false,
                                    totalAnticipo = 0,
                                    estatusRegistro = true,
                                    colocada = true,
                                    colocadaFecha = DateTime.Now,
                                    correoProveedor = "",
                                    proveedor = tipoMoneda == 1 ? 4835 : 9867,
                                    st_impresa = "I",
                                    autorizo = 1,
                                    usuario_autoriza = 1,
                                    fecha_autoriza = DateTime.Now,
                                    ST_OC = "A",
                                    empleado_autoriza = 1,
                                    empleadoUltimaAccion = 1,
                                    fechaUltimaAccion = DateTime.Now,
                                    tipoUltimaAccion = TipoUltimaAccionEnum.Autorizacion
                                };

                                _contextConstruplan.tblCom_OrdenCompra.Add(compra);
                                _contextConstruplan.SaveChanges();
                                #endregion

                                #region Tabla Detalle
                                using (var cmd = new OdbcCommand())
                                {
                                    cmd.CommandText = @"
                                        INSERT INTO so_orden_compra_det (
                                            cc, numero, partida, insumo, fecha_entrega, cantidad, precio, importe, ajuste_cant, ajuste_imp, num_requisicion, part_requisicion, 
                                            cant_recibida, imp_recibido, fecha_recibido, cant_canc, imp_canc, acum_ant, max_orig, max_ppto, area, cuenta, porcent_iva, iva) 
                                        VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@cc", OdbcType.Char).Value = cc;
                                    parameters.Add("@numero", OdbcType.Numeric).Value = numeroCompraNueva;
                                    parameters.Add("@partida", OdbcType.Numeric).Value = 1;
                                    parameters.Add("@insumo", OdbcType.Numeric).Value = insumo;
                                    parameters.Add("@fecha_entrega", OdbcType.Date).Value = DateTime.Now;
                                    parameters.Add("@cantidad", OdbcType.Numeric).Value = 1;
                                    parameters.Add("@precio", OdbcType.Numeric).Value = precio;
                                    parameters.Add("@importe", OdbcType.Numeric).Value = precio;
                                    parameters.Add("@ajuste_cant", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@ajuste_imp", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@num_requisicion", OdbcType.Numeric).Value = requisicion.numero;
                                    parameters.Add("@part_requisicion", OdbcType.Numeric).Value = 1;
                                    parameters.Add("@cant_recibida", OdbcType.Numeric).Value = 1;
                                    parameters.Add("@imp_recibido", OdbcType.Numeric).Value = precio;
                                    parameters.Add("@fecha_recibido", OdbcType.Date).Value = DateTime.Now;
                                    parameters.Add("@cant_canc", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@imp_canc", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@acum_ant", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@max_orig", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@max_ppto", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@area", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@cuenta", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@porcent_iva", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@iva", OdbcType.Numeric).Value = DBNull.Value;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;
                                    cmd.ExecuteNonQuery();
                                }

                                var detalleCompra = new tblCom_OrdenCompraDet
                                {
                                    idOrdenCompra = compra.id,
                                    cc = cc,
                                    numero = numeroCompraNueva,
                                    partida = 1,
                                    insumo = insumo,
                                    fecha_entrega = DateTime.Now,
                                    cantidad = 1,
                                    precio = precio,
                                    importe = precio,
                                    ajuste_cant = 0,
                                    ajuste_imp = 0,
                                    num_requisicion = requisicion.numero,
                                    part_requisicion = 1,
                                    cant_recibida = 1,
                                    imp_recibido = precio,
                                    fecha_recibido = DateTime.Now,
                                    cant_canc = 0,
                                    imp_canc = 0,
                                    acum_ant = 0,
                                    max_orig = 0,
                                    max_ppto = 0,
                                    area = 0,
                                    cuenta = 0,
                                    porcent_iva = porcentajeIVA,
                                    iva = precio * (porcentajeIVA / 100),
                                    partidaDescripcion = comentario,
                                    estatusRegistro = true
                                };

                                _contextConstruplan.tblCom_OrdenCompraDet.Add(detalleCompra);
                                _contextConstruplan.SaveChanges();
                                #endregion

                                #region Tabla Comentario Partida
                                using (var cmd = new OdbcCommand())
                                {
                                    cmd.CommandText = @"INSERT INTO so_orden_det_linea (cc, numero, partida, descripcion) VALUES (?,?,?,?)";

                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@cc", OdbcType.Char).Value = cc;
                                    parameters.Add("@numero", OdbcType.Numeric).Value = numeroCompraNueva;
                                    parameters.Add("@partida", OdbcType.Numeric).Value = 1;
                                    parameters.Add("@descripcion", OdbcType.VarChar).Value = comentario;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;
                                    cmd.ExecuteNonQuery();
                                }
                                #endregion

                                #region Agregar/Actualizar Registro Explosión
                                var registroExplosionCompraEK = _contextEnkontrol.Select<dynamic>(EnkontrolEnum.CplanProd, new OdbcConsultaDTO()
                                {
                                    consulta = string.Format(@"SELECT * FROM so_explos_mat WHERE cc = '{0}' AND insumo = {1} AND year_explos = {2}", cc, insumo, DateTime.Now.Year)
                                }).ToList();

                                if (registroExplosionCompraEK.Count() == 0)
                                {
                                    #region Insertar Registro Explosión
                                    using (var cmd = new OdbcCommand())
                                    {
                                        cmd.CommandText = @"
                                            INSERT INTO so_explos_mat (
                                                cc, insumo, cantidad, precio, aditiva_cant, aditiva_imp, deduc_cant, deduc_imp, cant_requerida, 
                                                comp_cant, comp_imp, ajuste_cant, ajuste_imp, traspaso_cant, traspaso_imp, cant_recibida, imp_recibido, 
                                                aditiva_cant_fecha, deduc_cant_fecha, aditiva_precio_fecha, deduc_precio_fecha, aditiva_precio, deductiva_precio, 
                                                traspaso_cant_entrada, traspaso_imp_entrada, importe, year_explos, periodo, bit_auto_presu, cantidad_aditiva_sun, 
                                                cantidad_deductiva_sun, cantidad_extra_sun) 
                                            VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                        OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                        parametersExplosion.Add("@cc", OdbcType.Char).Value = compra.cc;
                                        parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = insumo;
                                        parametersExplosion.Add("@cantidad", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@precio", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@aditiva_cant", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@aditiva_imp", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@deduc_cant", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@deduc_imp", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@cant_requerida", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@comp_cant", OdbcType.Numeric).Value = 1;
                                        parametersExplosion.Add("@comp_imp", OdbcType.Numeric).Value = precio;
                                        parametersExplosion.Add("@ajuste_cant", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@ajuste_imp", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@traspaso_cant", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@traspaso_imp", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@cant_recibida", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@imp_recibido", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@aditiva_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                        parametersExplosion.Add("@deduc_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                        parametersExplosion.Add("@aditiva_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                        parametersExplosion.Add("@deduc_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                        parametersExplosion.Add("@aditiva_precio", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@deductiva_precio", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@traspaso_cant_entrada", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@traspaso_imp_entrada", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@importe", OdbcType.Numeric).Value = DBNull.Value;
                                        parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;
                                        parametersExplosion.Add("@periodo", OdbcType.Char).Value = DBNull.Value;
                                        parametersExplosion.Add("@bit_auto_presu", OdbcType.Char).Value = "N";
                                        parametersExplosion.Add("@cantidad_aditiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                        parametersExplosion.Add("@cantidad_deductiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                        parametersExplosion.Add("@cantidad_extra_sun", OdbcType.Numeric).Value = DBNull.Value;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;
                                        cmd.ExecuteNonQuery();
                                    }
                                    #endregion
                                }
                                else
                                {
                                    #region Actualizar Registro Explosión
                                    var nuevaCantidadComprada = Convert.ToDecimal(registroExplosionCompraEK[0].comp_cant, CultureInfo.InvariantCulture) + 1;
                                    var nuevoImporteComprado = Convert.ToDecimal(registroExplosionCompraEK[0].comp_imp, CultureInfo.InvariantCulture) + precio;

                                    using (var cmd = new OdbcCommand())
                                    {
                                        cmd.CommandText = @"UPDATE so_explos_mat SET comp_cant = ?, comp_imp = ? WHERE cc = ? AND insumo = ? AND year_explos = ?";

                                        OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                        parametersExplosion.Add("@comp_cant", OdbcType.Numeric).Value = nuevaCantidadComprada;
                                        parametersExplosion.Add("@comp_imp", OdbcType.Numeric).Value = nuevoImporteComprado;

                                        parametersExplosion.Add("@cc", OdbcType.Char).Value = cc;
                                        parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = insumo;
                                        parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;
                                        cmd.ExecuteNonQuery();
                                    }
                                    #endregion
                                }
                                #endregion
                                #endregion

                                #region Guardar Entrada Compra
                                var ultimoMovimiento = _contextEnkontrol.Select<SurtidoDetDTO>(EnkontrolEnum.CplanProd, new OdbcConsultaDTO()
                                {
                                    consulta = string.Format(@"SELECT TOP 1 remision AS numero FROM so_movimientos_noinv WHERE almacen = {0} AND tipo_mov = {1} ORDER BY remision DESC", 999, 1)
                                }).ToList();

                                #region Tabla General
                                using (var cmd = new OdbcCommand())
                                {
                                    cmd.CommandText = @"
                                        INSERT INTO so_movimientos_noinv (
                                            almacen, tipo_mov, remision, cc, compania, periodo, ano, orden_ct, frente, fecha, proveedor, total, estatus, 
                                            transferida, poliza, empleado, alm_destino, cc_destino, comentarios, tipo_trasp, numero_destino, tp, year_poliza, 
                                            mes_poliza, tipo_cambio, hora, fecha_modifica, empleado_modifica, tc_cc, remision_b2b) 
                                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@almacen", OdbcType.Numeric).Value = 999;
                                    parameters.Add("@tipo_mov", OdbcType.Numeric).Value = 1;
                                    parameters.Add("@remision", OdbcType.Numeric).Value = ultimoMovimiento[0].numero + 1;
                                    parameters.Add("@cc", OdbcType.Char).Value = cc;
                                    parameters.Add("@compania", OdbcType.Numeric).Value = 1;
                                    parameters.Add("@periodo", OdbcType.Numeric).Value = DateTime.Now.Month;
                                    parameters.Add("@ano", OdbcType.Numeric).Value = DateTime.Now.Year;
                                    parameters.Add("@orden_ct", OdbcType.Numeric).Value = compra.numero;
                                    parameters.Add("@frente", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@fecha", OdbcType.Date).Value = DateTime.Now.Date;
                                    parameters.Add("@proveedor", OdbcType.Numeric).Value = (int)compra.proveedor;
                                    parameters.Add("@total", OdbcType.Numeric).Value = compra.total * tipoCambio;
                                    parameters.Add("@estatus", OdbcType.Char).Value = "A";
                                    parameters.Add("@transferida", OdbcType.Char).Value = "N";
                                    parameters.Add("@poliza", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@empleado", OdbcType.Numeric).Value = 1;
                                    parameters.Add("@alm_destino", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@cc_destino", OdbcType.Char).Value = " ";
                                    parameters.Add("@comentarios", OdbcType.Char).Value = "";
                                    parameters.Add("@tipo_trasp", OdbcType.Char).Value = "0";
                                    parameters.Add("@numero_destino", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@tp", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@year_poliza", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@mes_poliza", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = tipoCambio;
                                    parameters.Add("@hora", OdbcType.Time).Value = DateTime.Now.TimeOfDay;
                                    parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                    parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = 1;
                                    parameters.Add("@tc_cc", OdbcType.Numeric).Value = 1;
                                    parameters.Add("@remision_b2b", OdbcType.VarChar).Value = DBNull.Value;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;
                                    cmd.ExecuteNonQuery();
                                }
                                #endregion

                                #region Tabla Detalle
                                using (var cmd = new OdbcCommand())
                                {
                                    cmd.CommandText = @"
                                        INSERT INTO so_movimientos_noinv_det (
                                            almacen, tipo_mov, remision, partida, insumo, comentarios, area, cuenta, cantidad, precio, importe, partida_oc, costo_prom, remision2) 
                                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@almacen", OdbcType.Numeric).Value = 999;
                                    parameters.Add("@tipo_mov", OdbcType.Numeric).Value = 1;
                                    parameters.Add("@remision", OdbcType.Numeric).Value = ultimoMovimiento[0].numero + 1;
                                    parameters.Add("@partida", OdbcType.Numeric).Value = 1;
                                    parameters.Add("@insumo", OdbcType.Numeric).Value = insumo;
                                    parameters.Add("@comentarios", OdbcType.Char).Value = comentario;
                                    parameters.Add("@area", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@cuenta", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@cantidad", OdbcType.Numeric).Value = 1;
                                    parameters.Add("@precio", OdbcType.Numeric).Value = precio * tipoCambio;
                                    parameters.Add("@importe", OdbcType.Numeric).Value = precio * tipoCambio;
                                    parameters.Add("@partida_oc", OdbcType.Numeric).Value = 1;
                                    parameters.Add("@costo_prom", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@remision2", OdbcType.Char).Value = ultimoMovimiento[0].numero + 1;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;
                                    cmd.ExecuteNonQuery();
                                }
                                #endregion

                                #region Actualizar Explosión
                                var registroExplosionEK = _contextEnkontrol.Select<dynamic>(EnkontrolEnum.CplanProd, new OdbcConsultaDTO()
                                {
                                    consulta = string.Format(@"SELECT * FROM so_explos_mat WHERE cc = '{0}' AND insumo = {1} AND year_explos = {2}", cc, insumo, DateTime.Now.Year)
                                }).ToList();

                                if (registroExplosionEK.Count() == 0)
                                {
                                    #region Insertar Registro Explosión
                                    using (var cmd = new OdbcCommand())
                                    {
                                        cmd.CommandText = @"
                                            INSERT INTO so_explos_mat (
                                                cc, insumo, cantidad, precio, aditiva_cant, aditiva_imp, deduc_cant, deduc_imp, cant_requerida,
                                                comp_cant, comp_imp, ajuste_cant, ajuste_imp, traspaso_cant, traspaso_imp, cant_recibida, imp_recibido,
                                                aditiva_cant_fecha, deduc_cant_fecha, aditiva_precio_fecha, deduc_precio_fecha, aditiva_precio, deductiva_precio,
                                                traspaso_cant_entrada, traspaso_imp_entrada, importe, year_explos, periodo, bit_auto_presu, cantidad_aditiva_sun,
                                                cantidad_deductiva_sun, cantidad_extra_sun)
                                            VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                        OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                        parametersExplosion.Add("@cc", OdbcType.Char).Value = cc;
                                        parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = insumo;
                                        parametersExplosion.Add("@cantidad", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@precio", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@aditiva_cant", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@aditiva_imp", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@deduc_cant", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@deduc_imp", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@cant_requerida", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@comp_cant", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@comp_imp", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@ajuste_cant", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@ajuste_imp", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@traspaso_cant", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@traspaso_imp", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@cant_recibida", OdbcType.Numeric).Value = 1;
                                        parametersExplosion.Add("@imp_recibido", OdbcType.Numeric).Value = precio;
                                        parametersExplosion.Add("@aditiva_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                        parametersExplosion.Add("@deduc_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                        parametersExplosion.Add("@aditiva_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                        parametersExplosion.Add("@deduc_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                        parametersExplosion.Add("@aditiva_precio", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@deductiva_precio", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@traspaso_cant_entrada", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@traspaso_imp_entrada", OdbcType.Numeric).Value = 0;
                                        parametersExplosion.Add("@importe", OdbcType.Numeric).Value = DBNull.Value;
                                        parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;
                                        parametersExplosion.Add("@periodo", OdbcType.Char).Value = DBNull.Value;
                                        parametersExplosion.Add("@bit_auto_presu", OdbcType.Char).Value = "N";
                                        parametersExplosion.Add("@cantidad_aditiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                        parametersExplosion.Add("@cantidad_deductiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                        parametersExplosion.Add("@cantidad_extra_sun", OdbcType.Numeric).Value = DBNull.Value;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;
                                        cmd.ExecuteNonQuery();
                                    }
                                    #endregion
                                }
                                else
                                {
                                    #region Actualizar Registro Explosión
                                    var nuevaCantidadRecibida = Convert.ToDecimal(registroExplosionEK[0].cant_recibida, CultureInfo.InvariantCulture) + 1;
                                    var nuevoImporteRecibido = Convert.ToDecimal(registroExplosionEK[0].imp_recibido, CultureInfo.InvariantCulture) + precio;

                                    using (var cmd = new OdbcCommand())
                                    {
                                        cmd.CommandText = @"UPDATE so_explos_mat SET cant_recibida = ?, imp_recibido = ? WHERE cc = ? AND insumo = ? AND year_explos = ?";

                                        OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                        parametersExplosion.Add("@cant_recibida", OdbcType.Numeric).Value = nuevaCantidadRecibida;
                                        parametersExplosion.Add("@imp_recibido", OdbcType.Numeric).Value = nuevoImporteRecibido;

                                        parametersExplosion.Add("@cc", OdbcType.Char).Value = cc;
                                        parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = insumo;
                                        parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;
                                        cmd.ExecuteNonQuery();
                                    }
                                    #endregion
                                }
                                #endregion
                                #endregion

                                resultado.cc = cc;
                                resultado.numeroRequisicion = requisicion.numero;
                                resultado.numeroCompra = compra.numero;
                                resultado.almacen = 999;
                                resultado.remision = ultimoMovimiento[0].numero + 1;

                                trans.Commit();
                                dbSigoplanTransaction.Commit();
                            }
                            catch (Exception e)
                            {
                                trans.Rollback();
                                dbSigoplanTransaction.Rollback();

                                LogError(0, 0, "", "crearRequisicionCompraConciliacion", e, AccionEnum.AGREGAR, 0, new { cc = cc, comentario = comentario, tipoCC = tipoCC });
                            }
                        }
                    }
                }
            }

            return resultado;
        }

        public Dictionary<string, object> getCentroCosto(string cc)
        {
            Dictionary<string, object> result = new Dictionary<string, object>();
            try
            {
                var ccDesc = "";
                if (vSesiones.sesionEmpresaActual == (int)MainContextEnum.PERU)
                {
                    #region PERU
                    var objCC = _context.tblC_Nom_CatalogoCC.FirstOrDefault(e => e.cc == cc);

                    if (objCC != null)
                    {
                        ccDesc = objCC.ccDescripcion;
                    }
                    #endregion
                }
                else if (vSesiones.sesionEmpresaActual == (int)MainContextEnum.Colombia)
                {
                    #region COLOMBIA
                    var ccDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM cc WHERE cc = '{0}' AND st_ppto != 'T'", cc));

                    if (ccDescEK != null)
                        ccDesc = (string)(((List<dynamic>)ccDescEK.ToObject<List<dynamic>>())[0].descripcion);
                    #endregion
                }
                else
                {
                    #region DEMAS EMPRESAS
                    var ccDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM cc WHERE cc = '{0}' AND st_ppto != 'T'", cc));

                    if (ccDescEK != null)
                        ccDesc = (string)(((List<dynamic>)ccDescEK.ToObject<List<dynamic>>())[0].descripcion);
                    #endregion
                }


                result.Add("ccDesc", ccDesc);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return result;
        }

        #region Devolución Entrada
        public Dictionary<string, object> getNuevaDevolucionEntrada(int almacenID)
        {
            var result = new Dictionary<string, object>();
            switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
            {
                #region Peru
                case EmpresaEnum.Peru:
                    {
                        using (var dbStartSoft = new MainContextPeruStarSoft003BDCOMUN())
                        {
                            try
                            {
                                string almacenStarsoft = "";
                                if (almacenID > 9)
                                {
                                    almacenStarsoft = almacenID.ToString();
                                }
                                else
                                {
                                    almacenStarsoft = "0" + almacenID;
                                }

                                var almacen = dbStartSoft.TABALM.Where(x => x.TAALMA == almacenStarsoft).FirstOrDefault();

                                int ultimoFolio = 0;

                                if (almacenID >= 90)
                                {
                                    ultimoFolio = _context.tblAlm_Movimientos.Where(x => x.estatusHabilitado && x.almacen == almacenID && x.tipo_mov < 50).Select(x => x.numero).OrderByDescending(x => x).FirstOrDefault();
                                }
                                else
                                {
                                    ultimoFolio = dbStartSoft.MOVALMCAB.ToList().Where(x => Int32.Parse(x.CAALMA) == almacenID && x.CATD == "NI").Select(x => Int32.Parse(x.CANUMDOC)).OrderByDescending(x => x).FirstOrDefault();
                                }

                                var recibioNum = 0;
                                var recibioDesc = "";
                                using (var ctxPeru = new MainContext())
                                {
                                    var relacionUsuarioSIGOPLAN = ctxPeru.tblP_Usuario.FirstOrDefault(x => x.id == vSesiones.sesionUsuarioDTO.id);
                                    if (relacionUsuarioSIGOPLAN != null)
                                    {
                                        recibioNum = relacionUsuarioSIGOPLAN.id;
                                        recibioDesc = (string)relacionUsuarioSIGOPLAN.nombre + " " + relacionUsuarioSIGOPLAN.apellidoPaterno + " " + relacionUsuarioSIGOPLAN.apellidoMaterno;
                                    }
                                }

                                if (ultimoFolio > 0)
                                {
                                    result.Add("almacenDesc", (string)almacen.TADESCRI);
                                    result.Add("numeroDisponible", ultimoFolio + 1);
                                    result.Add("recibioNum", recibioNum);
                                    result.Add("recibioDesc", recibioDesc);
                                    result.Add("fecha", DateTime.Now.Date.ToShortDateString());
                                    result.Add(SUCCESS, true);
                                }
                                else
                                {
                                    result.Add("almacenDesc", (string)almacen.TADESCRI);
                                    result.Add("numeroDisponible", 1);
                                    result.Add("recibioNum", recibioNum);
                                    result.Add("recibioDesc", recibioDesc);
                                    result.Add("fecha", DateTime.Now.Date.ToShortDateString());
                                    result.Add(SUCCESS, true);
                                }
                            }
                            catch (Exception e)
                            {
                                result.Add(MESSAGE, e.Message);
                                result.Add(SUCCESS, false);
                            }
                        }
                    } break;
                #endregion

                #region Colombia
                case EmpresaEnum.Colombia:
                    {
                        try
                        {
                            var almacen = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", almacenID)).ToObject<List<dynamic>>();

                            var ultimaDevolucionEntradaEK = consultaCheckProductivo(
                                string.Format(@"SELECT TOP 1 
                                        * 
                                    FROM si_movimientos 
                                    WHERE almacen = {0} AND tipo_mov = 3 ORDER BY numero DESC", almacenID)
                            );

                            var recibioNum = 0;
                            var recibioDesc = "";
                            var relacionUsuarioSIGOPLANEK = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                            if (relacionUsuarioSIGOPLANEK != null)
                            {
                                var empleado = (List<dynamic>)consultaCheckProductivo(
                                    string.Format(@"SELECT * FROM empleados WHERE empleado = {0}", relacionUsuarioSIGOPLANEK.empleado)
                                ).ToObject<List<dynamic>>();

                                recibioNum = relacionUsuarioSIGOPLANEK.empleado;
                                recibioDesc = (string)empleado[0].descripcion;
                            }

                            if (ultimaDevolucionEntradaEK != null)
                            {
                                var ultimaDevolucionEntrada = (List<dynamic>)ultimaDevolucionEntradaEK.ToObject<List<dynamic>>();

                                result.Add("almacenDesc", (string)almacen[0].descripcion);
                                result.Add("numeroDisponible", (int)ultimaDevolucionEntrada[0].numero + 1);
                                result.Add("recibioNum", recibioNum);
                                result.Add("recibioDesc", recibioDesc);
                                result.Add("fecha", DateTime.Now.Date.ToShortDateString());
                                result.Add(SUCCESS, true);
                            }
                            else
                            {
                                result.Add("almacenDesc", (string)almacen[0].descripcion);
                                result.Add("numeroDisponible", 1);
                                result.Add("entregoNum", recibioNum);
                                result.Add("entregoDesc", recibioDesc);
                                result.Add("fecha", DateTime.Now.Date.ToShortDateString());
                                result.Add(SUCCESS, true);
                            }
                        }
                        catch (Exception e)
                        {
                            result.Add(MESSAGE, e.Message);
                            result.Add(SUCCESS, false);
                        }
                    } break;
                #endregion

                #region otras empresas
                default:
                    {
                        try
                        {
                            var almacen = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", almacenID)).ToObject<List<dynamic>>();

                            var ultimaDevolucionEntradaEK = consultaCheckProductivo(
                                string.Format(@"SELECT TOP 1 
                                        * 
                                    FROM si_movimientos 
                                    WHERE almacen = {0} AND tipo_mov = 3 ORDER BY numero DESC", almacenID)
                            );

                            var recibioNum = 0;
                            var recibioDesc = "";
                            var relacionUsuarioSIGOPLANEK = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                            if (relacionUsuarioSIGOPLANEK != null)
                            {
                                var empleado = (List<dynamic>)consultaCheckProductivo(
                                    string.Format(@"SELECT * FROM empleados WHERE empleado = {0}", relacionUsuarioSIGOPLANEK.empleado)
                                ).ToObject<List<dynamic>>();

                                recibioNum = relacionUsuarioSIGOPLANEK.empleado;
                                recibioDesc = (string)empleado[0].descripcion;
                            }

                            if (ultimaDevolucionEntradaEK != null)
                            {
                                var ultimaDevolucionEntrada = (List<dynamic>)ultimaDevolucionEntradaEK.ToObject<List<dynamic>>();

                                result.Add("almacenDesc", (string)almacen[0].descripcion);
                                result.Add("numeroDisponible", (int)ultimaDevolucionEntrada[0].numero + 1);
                                result.Add("recibioNum", recibioNum);
                                result.Add("recibioDesc", recibioDesc);
                                result.Add("fecha", DateTime.Now.Date.ToShortDateString());
                                result.Add(SUCCESS, true);
                            }
                            else
                            {
                                result.Add("almacenDesc", (string)almacen[0].descripcion);
                                result.Add("numeroDisponible", 1);
                                result.Add("entregoNum", recibioNum);
                                result.Add("entregoDesc", recibioDesc);
                                result.Add("fecha", DateTime.Now.Date.ToShortDateString());
                                result.Add(SUCCESS, true);
                            }
                        }
                        catch (Exception e)
                        {
                            result.Add(MESSAGE, e.Message);
                            result.Add(SUCCESS, false);
                        }
                    } break;
                #endregion
            }
            return result;
        }
        public dynamic getDevolucionEntrada(int almacenID, int numero)
        {
            switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
            {
                #region Peru
                case EmpresaEnum.Peru:
                    {
                        using (var dbStartSoft = new MainContextPeruStarSoft003BDCOMUN())
                        {
                            try
                            {


                                var devolucionEntradaStarsoft = _context.Select<MovimientoEnkontrolDTO>(new DapperDTO()
                                {
                                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                                    consulta = string.Format(@"
                                SELECT 
                                    mov.almacen, 
                                    --alm.descripcion AS almacenDesc, 
                                    mov.tipo_mov, 
                                    mov.numero, 
                                    mov.cc, 
                                    c.ccDescripcion AS ccDesc, 
                                    mov.orden_ct, 
                                    mov.fecha, 
                                    mov.total, 
                                    mov.estatus, 
                                    mov.transferida, 
                                    mov.idUsuarioCreacion as empleado, 
									(tUsr.apellidoPaterno + ' ' + tUsr.apellidoPaterno + ' ' + tUsr.nombre) as empleadoDesc,
                                    mov.comentarios
                                FROM tblAlm_Movimientos mov 
                                    INNER JOIN tblC_Nom_CatalogoCC c ON mov.cc = c.cc 
									LEFT JOIN tblP_Usuario as tUsr ON mov.idUsuarioCreacion = tUsr.id
                                WHERE mov.estatusHabilitado = 1 AND mov.almacen = {0} AND mov.tipo_mov = 3 AND mov.numero = {1}", almacenID, numero),

                                }).FirstOrDefault();
                                if (devolucionEntradaStarsoft != null)
                                {
                                    #region ALMACEN STARSOFT
                                    string almacenStarsoft = "";

                                    if (almacenID > 9)
                                    {
                                        almacenStarsoft = almacenID.ToString();
                                    }
                                    else
                                    {
                                        almacenStarsoft = "0" + almacenID;
                                    }

                                    using (var dbStarsoft = new MainContextPeruStarSoft003BDCOMUN())
                                    {
                                        var objAlmacen = dbStarsoft.TABALM.FirstOrDefault();

                                        if (objAlmacen != null)
                                        {
                                            almacenStarsoft = objAlmacen.TADESCRI;
                                        }
                                    }

                                    devolucionEntradaStarsoft.almacenDesc = almacenStarsoft;
                                    #endregion



                                    var entradaDevolucionDetalle = new List<MovimientoDetalleEnkontrolDTO>();
                                    var entradasDevoluciones = _context.tblAlm_MovimientosDet.Where(e => e.tipo_mov == 3 && e.numero == numero && e.almacen == almacenID).ToList();

                                    foreach (var item in entradasDevoluciones)
                                    {
                                        //var objInsumo = dbStarsoft.MAEART.FirstOrDefault(e => e.ACODIGO == det.PERU_insumo);

                                        string descInsumoPeru = "";
                                        string descUnidad = "";
                                        using (var dbStarsoft = new MainContextPeruStarSoft003BDCOMUN())
                                        {
                                            var objInsumo = dbStarsoft.MAEART.FirstOrDefault(e => e.ACODIGO == item.PERU_insumo);

                                            if (objInsumo != null)
                                            {
                                                descUnidad = objInsumo.AUNIDAD;
                                                descInsumoPeru = objInsumo.ADESCRI;
                                            }
                                        }

                                        entradaDevolucionDetalle.Add(new MovimientoDetalleEnkontrolDTO()
                                        {
                                            almacen = almacenID,
                                            almacenDesc = almacenStarsoft,
                                            tipo_mov = item.tipo_mov,
                                            numero = item.numero,
                                            remision = 0,
                                            partida = item.partida,
                                            PERU_insumo = item.PERU_insumo,
                                            descInsumo = descInsumoPeru,
                                            insumoDesc = descInsumoPeru,
                                            comentarios = item.comentarios,
                                            area = 0,
                                            cuenta = 0,
                                            areaCuenta = "",
                                            cantidad = item.cantidad,
                                            precio = item.precio,
                                            importe = item.importe,
                                            partida_oc = 0,
                                            costo_prom = item.precio,
                                            sector_id = 0,
                                            area_alm = item.area_alm,
                                            lado_alm = item.lado_alm,
                                            estante_alm = item.estante_alm,
                                            nivel_alm = item.nivel_alm,
                                            unidad = descUnidad,
                                            minimo = 0,
                                            existencia = 0,
                                            cantidadPendiente = 0,
                                            cant_recibida = 0,
                                            moneda = 0,
                                            monedaDesc = "",
                                            minimoDesc = "",
                                            solicitadoPendiente = 0,
                                            partidaRequisicion = 0,
                                            numeroRequisicion = 0,

                                        });
                                    }

                                    devolucionEntradaStarsoft.fechaString = ((DateTime)(devolucionEntradaStarsoft.fecha)).ToShortDateString();
                                    devolucionEntradaStarsoft.detalle = entradaDevolucionDetalle;
                                    return devolucionEntradaStarsoft;
                                }

                                else
                                {
                                    return null;

                                }
                            }
                            catch (Exception ex)
                            {
                                throw;
                            }

                        }

                    } break;
                #endregion

                #region COLOMBIA
                case EmpresaEnum.Colombia:
                    {
                        var devolucionEK = consultaCheckProductivo(
                            string.Format(@"SELECT 
                                    mov.almacen, 
                                    alm.descripcion AS almacenDesc, 
                                    mov.tipo_mov, 
                                    mov.numero, 
                                    mov.cc, 
                                    c.descripcion AS ccDesc, 
                                    mov.fecha, 
                                    mov.total, 
                                    mov.estatus, 
                                    mov.transferida, 
                                    mov.empleado, 
                                    emp.descripcion AS empleadoDesc, 
                                    mov.comentarios, 
                                    mov.sector_id 
                                FROM si_movimientos mov 
                                    INNER JOIN si_almacen alm ON mov.almacen = alm.almacen 
                                    INNER JOIN cc c ON mov.cc = c.cc 
                                    LEFT JOIN empleados emp ON mov.empleado = emp.empleado 
                                WHERE mov.almacen = {0} AND mov.tipo_mov = 3 AND mov.numero = {1}", almacenID, numero));

                        if (devolucionEK != null)
                        {
                            var devolucion = (List<MovimientoEnkontrolDTO>)devolucionEK.ToObject<List<MovimientoEnkontrolDTO>>();
                            var devolucionDetalle = (List<MovimientoDetalleEnkontrolDTO>)consultaCheckProductivo(
                                string.Format(@"SELECT 
                                        det.*, 
                                        i.descripcion AS insumoDesc, 
                                        i.unidad 
                                    FROM si_movimientos_det det 
                                        INNER JOIN insumos i ON det.insumo = i.insumo 
                                    WHERE det.almacen = {0} AND det.tipo_mov = 3 AND det.numero = {1}", almacenID, numero)
                            ).ToObject<List<MovimientoDetalleEnkontrolDTO>>();

                            devolucion[0].fechaString = ((DateTime)(devolucion[0].fecha)).ToShortDateString();

                            var lstMovimientosSP = _context.tblAlm_MovimientosDet.Where(e => e.estatusHabilitado && e.almacen == almacenID && e.numero == numero && e.tipo_mov == 3).ToList();

                            foreach (var item in devolucionDetalle)
                            {
                                var objDetSP = lstMovimientosSP.FirstOrDefault(e => e.partida == item.partida);

                                if (objDetSP != null)
                                {
                                    item.area_alm = objDetSP.area_alm;
                                    item.lado_alm = objDetSP.lado_alm;
                                    item.estante_alm = objDetSP.estante_alm;
                                    item.nivel_alm = objDetSP.nivel_alm;
                                }
                            }

                            devolucion[0].detalle = devolucionDetalle;

                            return devolucion[0];
                        }
                        else
                        {
                            return null;
                        }
                    }
                    break;
                #endregion

                #region Otras Empresas
                default:
                    {
                        var devolucionEK = consultaCheckProductivo(
                            string.Format(@"SELECT 
                                    mov.almacen, 
                                    alm.descripcion AS almacenDesc, 
                                    mov.tipo_mov, 
                                    mov.numero, 
                                    mov.cc, 
                                    c.descripcion AS ccDesc, 
                                    mov.fecha, 
                                    mov.total, 
                                    mov.estatus, 
                                    mov.transferida, 
                                    mov.empleado, 
                                    emp.descripcion AS empleadoDesc, 
                                    mov.comentarios, 
                                    mov.sector_id 
                                FROM si_movimientos mov 
                                    INNER JOIN si_almacen alm ON mov.almacen = alm.almacen 
                                    INNER JOIN cc c ON mov.cc = c.cc 
                                    LEFT JOIN empleados emp ON mov.empleado = emp.empleado 
                                WHERE mov.almacen = {0} AND mov.tipo_mov = 3 AND mov.numero = {1}", almacenID, numero));

                        if (devolucionEK != null)
                        {
                            var devolucion = (List<MovimientoEnkontrolDTO>)devolucionEK.ToObject<List<MovimientoEnkontrolDTO>>();
                            var devolucionDetalle = (List<MovimientoDetalleEnkontrolDTO>)consultaCheckProductivo(
                                string.Format(@"SELECT 
                                        det.*, 
                                        i.descripcion AS insumoDesc, 
                                        i.unidad 
                                    FROM si_movimientos_det det 
                                        INNER JOIN insumos i ON det.insumo = i.insumo 
                                    WHERE det.almacen = {0} AND det.tipo_mov = 3 AND det.numero = {1}", almacenID, numero)
                            ).ToObject<List<MovimientoDetalleEnkontrolDTO>>();

                            devolucion[0].fechaString = ((DateTime)(devolucion[0].fecha)).ToShortDateString();
                            devolucion[0].detalle = devolucionDetalle;

                            return devolucion[0];
                        }
                        else
                        {
                            return null;
                        }
                    } break;
                #endregion
            }
        }
        public List<entradasAlmacenDTO> guardarDevolucionEntrada(MovimientoEnkontrolDTO movimiento)
        {
            List<entradasAlmacenDTO> movEntradas = new List<entradasAlmacenDTO>();

            var empleado = 0;
            var usuarioSigoplan = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);
            var usuarioStarsoft = _context.tblP_Usuario_Starsoft.FirstOrDefault(x => x.sigoplan_usuario_id == vSesiones.sesionUsuarioDTO.id);
            if (usuarioSigoplan != null)
            {
                empleado = usuarioSigoplan.empleado;
            }
            switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
            {
                #region Peru
                case EmpresaEnum.Peru:
                    {
                        using (var ctxPeru = new MainContext())
                        {
                            using (var dbSigoplanTransaction = ctxPeru.Database.BeginTransaction())
                            {
                                using (var dbStartSoft = new MainContextPeruStarSoft003BDCOMUN())
                                {
                                    using (var dbStarsoftTransaction = dbStartSoft.Database.BeginTransaction())
                                    {
                                        try
                                        {
                                            var usuarioSigoplanPeru = ctxPeru.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                                            if (usuarioSigoplanPeru != null)
                                            {
                                                empleado = usuarioSigoplanPeru.empleado;
                                            }

                                            #region Validación Inventariables

                                            var lstInsumos = new List<MAEART>();

                                            foreach (var det in movimiento.detalle)
                                            {

                                                var objInsumo = dbStartSoft.MAEART.FirstOrDefault(e => e.ACODIGO == det.PERU_insumo);

                                                if (objInsumo != null)
                                                {
                                                    lstInsumos.Add(objInsumo);

                                                    if (objInsumo.ACODIGO.Substring(0, 2) == "02")
                                                    {
                                                        throw new Exception(string.Format(@"El insumo ""{0}"" no es inventariable.", det.PERU_insumo));
                                                    }
                                                }
                                                else
                                                {
                                                    throw new Exception(string.Format(@"No se encuentra la información para el insumo ""{0}"".", det.PERU_insumo));
                                                }
                                            }

                                            #endregion

                                            #region Validación Permiso Devolución
                                            var permisoDevolucion = ctxPeru.tblAlm_PermisoDevolucion.FirstOrDefault(x => x.estatus && x.empleado == empleado);

                                            if (permisoDevolucion == null && empleado != 1)
                                            {
                                                throw new Exception("No tiene permiso para realizar movimientos de devolución.");
                                            }
                                            #endregion

                                            #region Validación Cantidad Cero
                                            if (movimiento.detalle.Any(x => x.cantidad <= 0))
                                            {
                                                throw new Exception("Debe capturar la cantidad para todas las partidas.");
                                            }
                                            #endregion

                                            tblAlm_Movimientos nuevaEntrada = new tblAlm_Movimientos();
                                            int ultimoFolio = 0;

                                            if (movimiento.almacen >= 90)
                                            {
                                                ultimoFolio = _context.tblAlm_Movimientos.Where(x => x.estatusHabilitado && x.almacen == movimiento.almacen && x.tipo_mov < 50).Select(x => x.numero).OrderByDescending(x => x).FirstOrDefault();
                                            }
                                            else
                                            {
                                                ultimoFolio = dbStartSoft.MOVALMCAB.ToList().Where(x => Int32.Parse(x.CAALMA) == movimiento.almacen && x.CATD == "NI").Select(x => Int32.Parse(x.CANUMDOC)).OrderByDescending(x => x).FirstOrDefault();
                                            }

                                            nuevaEntrada = new tblAlm_Movimientos
                                            {
                                                almacen = movimiento.almacen,
                                                tipo_mov = 3,
                                                numero = ultimoFolio + 1,
                                                cc = movimiento.cc.ToUpper(),
                                                compania = 1,
                                                periodo = DateTime.Now.Month,
                                                ano = DateTime.Now.Year,
                                                orden_ct = 0,
                                                frente = 0,
                                                fecha = DateTime.Now.Date,
                                                proveedor = 0,
                                                total = movimiento.total,
                                                estatus = "A",
                                                transferida = "N",
                                                alm_destino = 0,
                                                cc_destino = "",
                                                comentarios = movimiento.comentarios,
                                                tipo_trasp = "C",
                                                tipo_cambio = 1,
                                                estatusHabilitado = true,
                                                numeroReq = 0,
                                                idUsuarioCreacion = vSesiones.sesionUsuarioDTO.id,
                                                fechaCreacion = DateTime.Now,
                                            };

                                            ctxPeru.tblAlm_Movimientos.Add(nuevaEntrada);
                                            ctxPeru.SaveChanges();

                                            var partidaContador = 1;

                                            var lstCC = ctxPeru.tblP_CC.Where(cc => cc.cc == movimiento.cc).ToList();
                                            var ccDesc = lstCC.FirstOrDefault().descripcion;

                                            string almacenStarsoft = "";
                                            if (movimiento.almacen > 9)
                                            {
                                                almacenStarsoft = movimiento.almacen.ToString();
                                            }
                                            else
                                            {
                                                almacenStarsoft = "0" + movimiento.almacen;
                                            }

                                            var objAlmacen = dbStartSoft.TABALM.FirstOrDefault(e => e.TAALMA == almacenStarsoft);

                                            if (objAlmacen == null)
                                            {
                                                throw new Exception("No se encuentra la información del almacén.");
                                            }

                                            var almacenDesc = objAlmacen.TADESCRI;
                                            var objUsrStarsoftInventarios = _context.tblAlm_Almacenistas.FirstOrDefault(e => e.id_usuario_sigoplan == vSesiones.sesionUsuarioDTO.id);

                                            foreach (var det in movimiento.detalle)
                                            {
                                                var partidaMovimiento = partidaContador++;

                                                if (det.precio <= 0)
                                                {
                                                    throw new Exception("La partida " + partidaMovimiento + " tiene un costo inválido.");
                                                }

                                                var nuevaEntradaDet = new tblAlm_MovimientosDet
                                                {
                                                    almacen = nuevaEntrada.almacen,
                                                    tipo_mov = 3,
                                                    numero = ultimoFolio + 1,
                                                    partida = partidaMovimiento,
                                                    insumo = det.insumo,
                                                    comentarios = movimiento.comentarios,
                                                    area = det.area ?? 0,
                                                    cuenta = det.cuenta ?? 0,
                                                    cantidad = det.cantidad,
                                                    precio = det.precio,
                                                    importe = det.importe,
                                                    id_resguardo = 0,
                                                    area_alm = det.area_alm ?? "",
                                                    lado_alm = det.lado_alm ?? "",
                                                    estante_alm = det.estante_alm ?? "",
                                                    nivel_alm = det.nivel_alm ?? "",
                                                    transporte = "",
                                                    estatusHabilitado = true,
                                                    PERU_insumo = det.PERU_insumo,
                                                    noEconomico = det.noEconomico
                                                };

                                                ctxPeru.tblAlm_MovimientosDet.Add(nuevaEntradaDet);
                                                ctxPeru.SaveChanges();

                                                var insumoDescr = dbStartSoft.MAEART.FirstOrDefault(art => art.ACODIGO == det.PERU_insumo);

                                                movEntradas.Add(new entradasAlmacenDTO
                                                {
                                                    centroCosto = ccDesc,
                                                    folioEntrada = nuevaEntrada.numero.ToString(),
                                                    almacen = almacenDesc,
                                                    fechaEntrada = nuevaEntrada.fecha,
                                                    partida = partidaMovimiento,
                                                    insumo = det.PERU_insumo + "-" + insumoDescr.ADESCRI ?? "",
                                                    areaCuenta = "-",
                                                    referencia = "",
                                                    remision = "",
                                                    cantidad = det.cantidad,
                                                    precio = det.precio,
                                                    importe = det.cantidad * det.precio,
                                                    comentarios = movimiento.comentarios ?? "", //comentarios = entDet.comentarios ?? "",
                                                    ordenCompra = nuevaEntrada.orden_ct.ToString(),
                                                    proveedor = "",
                                                    direccion = "",
                                                    ciudad = "",
                                                    telefonos = "",
                                                    area_alm = det.area_alm ?? "",
                                                    lado_alm = det.lado_alm ?? "",
                                                    estante_alm = det.estante_alm ?? "",
                                                    nivel_alm = det.nivel_alm ?? ""
                                                });
                                            }

                                            //if (nuevaEntrada.total <= 0)
                                            //{
                                            //    throw new Exception("El total no puede ser igual o menor a cero.");
                                            //}

                                            int idProxNI = objAlmacen.TANUMENT.Value + 1;

                                            //ID DE STARSOFT DE LA NOTA
                                            //string idNIStarsoft = "";
                                            //string insumoStr = idProxNI.ToString();
                                            //int lengthId = 10 - insumoStr.Count();

                                            //for (int i = 0; i < lengthId; i++)
                                            //{
                                            //    idNIStarsoft += "0";
                                            //}
                                            //idNIStarsoft += insumoStr;

                                            //decimal tipoCambioPeru = 0M;

                                            //using (var dbStarsoftConta = new MainContextPeruStarSoft003BDCONTABILIDAD())
                                            //{
                                            //    var tipoCambioActual = dbStarsoftConta.TIPO_CAMBIO.ToList().FirstOrDefault(e => e.TIPOCAMB_FECHA.Date == DateTime.Now.Date);
                                            //    if (tipoCambioActual != null)
                                            //    {
                                            //        tipoCambioPeru = tipoCambioActual.TIPOCAMB_COMPRA;
                                            //    }
                                            //    else
                                            //    {
                                            //        tipoCambioPeru = dbStarsoftConta.TIPO_CAMBIO.ToList().FirstOrDefault(e => e.TIPOCAMB_FECHA.Date == DateTime.Now.AddDays(-1).Date).TIPOCAMB_COMPRA;
                                            //    }

                                            //}

                                            bool flagAlmacenVirtual = nuevaEntrada.almacen >= 90;

                                            if (!flagAlmacenVirtual)
                                            {
                                                #region MOVALMCAB
                                                MOVALMCAB objMovimientoStarsoft = new MOVALMCAB();
                                                {
                                                    objMovimientoStarsoft.CAALMA = almacenStarsoft;
                                                    objMovimientoStarsoft.CATD = "NI";
                                                    objMovimientoStarsoft.CANUMDOC = (ultimoFolio + 1).ToString("D10");
                                                    objMovimientoStarsoft.CAFECDOC = DateTime.Now.Date;
                                                    objMovimientoStarsoft.CATIPMOV = "I";
                                                    objMovimientoStarsoft.CACODMOV = "DC";
                                                    objMovimientoStarsoft.CASITUA = "M";
                                                    objMovimientoStarsoft.CARFTDOC = "";
                                                    objMovimientoStarsoft.CARFNDOC = null;
                                                    objMovimientoStarsoft.CASOLI = null;
                                                    objMovimientoStarsoft.CAFECDEV = null;
                                                    objMovimientoStarsoft.CACODPRO = null;
                                                    objMovimientoStarsoft.CACENCOS = movimiento.cc.ToUpper();
                                                    objMovimientoStarsoft.CARFALMA = null;
                                                    objMovimientoStarsoft.CAGLOSA = movimiento.comentarios;
                                                    objMovimientoStarsoft.CAFECACT = DateTime.Now.Date;
                                                    objMovimientoStarsoft.CAHORA = DateTime.Now.ToString("HH:mm:ss");
                                                    objMovimientoStarsoft.CAUSUARI = objUsrStarsoftInventarios.id_usuario_inventarios;
                                                    objMovimientoStarsoft.CACODCLI = null;
                                                    objMovimientoStarsoft.CARUC = null;
                                                    objMovimientoStarsoft.CANOMCLI = null;
                                                    objMovimientoStarsoft.CAFORVEN = null;
                                                    objMovimientoStarsoft.CACODMON = "MN";
                                                    objMovimientoStarsoft.CAVENDE = null;
                                                    objMovimientoStarsoft.CATIPCAM = 0M;
                                                    objMovimientoStarsoft.CATIPGUI = null;
                                                    objMovimientoStarsoft.CASITGUI = "V";
                                                    objMovimientoStarsoft.CAGUIFAC = null;
                                                    objMovimientoStarsoft.CADIRENV = null;
                                                    objMovimientoStarsoft.CACODTRAN = null;
                                                    objMovimientoStarsoft.CANUMORD = null;
                                                    objMovimientoStarsoft.CAGUIDEV = null;
                                                    objMovimientoStarsoft.CANOMPRO = null;
                                                    objMovimientoStarsoft.CANROPED = null;
                                                    objMovimientoStarsoft.CACOTIZA = null;
                                                    objMovimientoStarsoft.CAPORDESCL = 0M;
                                                    objMovimientoStarsoft.CAPORDESES = 0M;
                                                    objMovimientoStarsoft.CAIMPORTE = movimiento.total;
                                                    objMovimientoStarsoft.CANOMTRA = null;
                                                    objMovimientoStarsoft.CADIRTRA = null;
                                                    objMovimientoStarsoft.CARUCTRA = null;
                                                    objMovimientoStarsoft.CAPLATRA = null;
                                                    objMovimientoStarsoft.CANROIMP = null;
                                                    objMovimientoStarsoft.CACODLIQ = null;
                                                    objMovimientoStarsoft.CAESTIMP = null;
                                                    objMovimientoStarsoft.CACIERRE = false;
                                                    objMovimientoStarsoft.CATIPDEP = null;
                                                    objMovimientoStarsoft.CAZONAF = null;
                                                    objMovimientoStarsoft.FLAGGS = false;
                                                    objMovimientoStarsoft.ASIENTO = false;
                                                    objMovimientoStarsoft.CAFLETE = 0M;
                                                    objMovimientoStarsoft.CAORDFAB = "";
                                                    objMovimientoStarsoft.CAPEDREFE = null;
                                                    objMovimientoStarsoft.CAIMPORTACION = false;
                                                    objMovimientoStarsoft.CANROCAJAS = 0;
                                                    objMovimientoStarsoft.CAPESOTOTAL = 0M;
                                                    objMovimientoStarsoft.CADESPACHO = false;
                                                    objMovimientoStarsoft.LINVCODIGO = null;
                                                    objMovimientoStarsoft.COD_DIRECCION = null;
                                                    objMovimientoStarsoft.COSTOMIN = 0M;
                                                    objMovimientoStarsoft.CAINTERFACE = 0;
                                                    objMovimientoStarsoft.CACTACONT = null;
                                                    objMovimientoStarsoft.CACONTROLSTOCK = "N";
                                                    objMovimientoStarsoft.CANOMRECEP = null;
                                                    objMovimientoStarsoft.CADNIRECEP = null;
                                                    objMovimientoStarsoft.CFDIREREFE = null;
                                                    objMovimientoStarsoft.REG_COMPRA = false;
                                                    objMovimientoStarsoft.OC_NI_GUIA = false;
                                                    objMovimientoStarsoft.COD_AUDITORIA = "0";
                                                    objMovimientoStarsoft.COD_MODULO = "03";
                                                    objMovimientoStarsoft.NO_GIRO_NEGOCIO = false;
                                                    objMovimientoStarsoft.MOTIVO_ANULACION_DOC_ELECTRONICO = null;
                                                    objMovimientoStarsoft.DOCUMENTO_ELECTRONICO = null;
                                                    objMovimientoStarsoft.GS_BAJA = null;
                                                    objMovimientoStarsoft.CADocumentoImportado = null;
                                                    objMovimientoStarsoft.SOLICITANTE = null;
                                                    objMovimientoStarsoft.DOCUMENTO_CONTINGENCIA = null;
                                                    objMovimientoStarsoft.GE_BAJA = null;
                                                };

                                                dbStartSoft.MOVALMCAB.Add(objMovimientoStarsoft);
                                                dbStartSoft.SaveChanges();
                                                #endregion

                                                objAlmacen.TANUMENT = idProxNI;
                                                dbStartSoft.SaveChanges();

                                                foreach (var entDet in movimiento.detalle)
                                                {
                                                    #region MOVALMDET
                                                    var insumoDescr = dbStartSoft.MAEART.FirstOrDefault(art => art.ACODIGO == entDet.PERU_insumo);
                                                    var nuevoMovimientoDetStarsoft = new MovAlmDet
                                                    {
                                                        DEALMA = almacenStarsoft,
                                                        DETD = "NI",
                                                        DENUMDOC = (ultimoFolio + 1).ToString("D10"),
                                                        DEITEM = entDet.partida,
                                                        DECODIGO = entDet.PERU_insumo,
                                                        DECODREF = null,
                                                        DECANTID = entDet.cantidad,
                                                        DECANTENT = 0M,
                                                        DECANREF = 0M,
                                                        DECANFAC = 0M,
                                                        DEORDEN = null,
                                                        DEPREUNI = 0M,
                                                        DEPRECIO = entDet.precio,
                                                        DEPRECI1 = 0M,
                                                        DEDESCTO = 0M,
                                                        DESTOCK = null,
                                                        DEIGV = 0M,
                                                        DEIMPMN = entDet.precio,
                                                        DEIMPUS = entDet.precio,
                                                        DESERIE = null,
                                                        DESITUA = null,
                                                        DEFECDOC = null,
                                                        DECENCOS = movimiento.cc,
                                                        DERFALMA = null,
                                                        DETR = null,
                                                        DEESTADO = "V",
                                                        DECODMOV = "DC",
                                                        DEVALTOT = entDet.precio * entDet.cantidad,
                                                        DECOMPRO = null,
                                                        DECODMON = "MN",
                                                        DETIPO = null,
                                                        DETIPCAM = 0M,
                                                        DEPREVTA = null,
                                                        DEMONVTA = null,
                                                        DEFECVEN = null,
                                                        DEDEVOL = 0M,
                                                        DESOLI = null,
                                                        DEDESCRI = insumoDescr.ADESCRI,
                                                        DEPORDES = 0M,
                                                        DEIGVPOR = 0M,
                                                        DEDESCLI = 0M,
                                                        DEDESESP = 0M,
                                                        DENUMFAC = null,
                                                        DELOTE = null,
                                                        DEUNIDAD = entDet.unidad,
                                                        DECANTBRUTA = 0M,
                                                        DEDSCTCANTBRUTA = 0M,
                                                        DEORDFAB = "",
                                                        DEQUIPO = null,
                                                        DEFLETE = 0M,
                                                        DEITEMI = null, //????????
                                                        DEGLOSA = "",
                                                        DEVALORIZADO = true,
                                                        DESECUENORI = null,
                                                        DEREFERENCIA = null,
                                                        UMREFERENCIA = null,
                                                        CANTREFERENCIA = 0M,
                                                        DECUENTA = null,
                                                        DETEXTO = null,
                                                        CTA_CONSUMO = null,
                                                        CODPARTE = "",
                                                        CODPLANO = "",
                                                        DETPRODUCCION = 0,
                                                        MPMA = "",
                                                        PorcentajeCosto = 0M,
                                                        SALDO_NC = null,
                                                        DEPRECIOREF = 0M
                                                    };

                                                    dbStartSoft.MovAlmDet.Add(nuevoMovimientoDetStarsoft);
                                                    dbStartSoft.SaveChanges();
                                                    #endregion

                                                    #region STKART
                                                    var obkStkart = dbStartSoft.STKART.FirstOrDefault(e => e.STALMA == almacenStarsoft && e.STCODIGO == entDet.PERU_insumo);

                                                    if (obkStkart == null)
                                                    {
                                                        dbStartSoft.STKART.Add(new STKART()
                                                        {
                                                            STALMA = almacenStarsoft,
                                                            STCODIGO = entDet.PERU_insumo,
                                                            STSKDIS = entDet.cantidad,
                                                            STSKREF = 0M,
                                                            STSKMIN = 0M,
                                                            STSKMAX = 0M,
                                                            STPUNREP = 0M,
                                                            STSEMREP = 0M,
                                                            STTIPREP = null,
                                                            STUBIALM = null,
                                                            STLOTCOM = 0M,
                                                            STTIPCOM = null,
                                                            STSKCOM = 0M,
                                                            STKPREPRO = 0M,
                                                            STKPREULT = 0M,
                                                            STKFECULT = DateTime.Now.Date,
                                                            STKPREPROUS = 0M,
                                                            CANTREFERENCIA = 0M,
                                                        });
                                                        dbStartSoft.SaveChanges();
                                                    }
                                                    else
                                                    {
                                                        obkStkart.STSKDIS += entDet.cantidad;

                                                        if (obkStkart.STSKDIS == 0)
                                                        {
                                                            obkStkart.STKPREPRO = 0;
                                                            obkStkart.STKPREPROUS = 0;
                                                        }

                                                        dbStartSoft.SaveChanges();
                                                    }
                                                    #endregion

                                                    #region MORESMES
                                                    var objMoResMes = dbStartSoft.MoResMes.ToList().FirstOrDefault(e =>
                                                        e.SMALMA == almacenStarsoft && e.SMMESPRO == (DateTime.Now.Year.ToString() + DateTime.Now.ToString("MM")) && e.SMCODIGO == entDet.PERU_insumo
                                                    );

                                                    if (objMoResMes == null)
                                                    {
                                                        var objCrearMoResMes = new MoResMes();
                                                        objCrearMoResMes.SMALMA = almacenStarsoft;
                                                        objCrearMoResMes.SMCODIGO = entDet.PERU_insumo;
                                                        objCrearMoResMes.SMMESPRO = (DateTime.Now.Year.ToString() + DateTime.Now.ToString("MM"));
                                                        objCrearMoResMes.SMUSPREUNI = 0M; //CAMBIAR POR EL PRESIO ADECUEDO DEPENDE EL TIPO DE MONEDA CHECAR EN OTRAS TABLAS
                                                        objCrearMoResMes.SMMNPREUNI = 0M; //CAMBIAR POR EL PRESIO ADECUEDO DEPENDE EL TIPO DE MONEDA
                                                        objCrearMoResMes.SMUSPREANT = 0M;
                                                        objCrearMoResMes.SMULTMOV = null;
                                                        objCrearMoResMes.SMCANENT = entDet.cantidad; //SUPONIENDO QUE ES NUEVO
                                                        objCrearMoResMes.SMCANSAL = 0M;
                                                        objCrearMoResMes.SMANTCAN = 0M;
                                                        objCrearMoResMes.SMMNANTVAL = 0M;
                                                        objCrearMoResMes.SMMNACTVAL = 0M;
                                                        objCrearMoResMes.SMUSANTVAL = 0M;
                                                        objCrearMoResMes.SMUSACTVAL = 0M;
                                                        objCrearMoResMes.SMUSENT = 0M;
                                                        objCrearMoResMes.SMMNENT = 0M;
                                                        objCrearMoResMes.SMUSSAL = 0;
                                                        objCrearMoResMes.SMMNSAL = 0M;
                                                        objCrearMoResMes.SMCUENTA = null;
                                                        objCrearMoResMes.SMGRUPO = null;
                                                        objCrearMoResMes.SMFAMILIA = null;
                                                        objCrearMoResMes.SMLINEA = null;
                                                        objCrearMoResMes.SMTIPO = null;
                                                        objCrearMoResMes.SMSALDOINI = 0M;
                                                        objCrearMoResMes.COD_MODULO = "03";
                                                        objCrearMoResMes.COD_OPCION = "Men_TraRegEnt"; //??

                                                        dbStartSoft.MoResMes.Add(objCrearMoResMes);
                                                        dbStartSoft.SaveChanges();
                                                    }
                                                    else
                                                    {
                                                        objMoResMes.SMCANENT += entDet.cantidad;
                                                        dbStartSoft.SaveChanges();
                                                    }
                                                    #endregion
                                                }
                                            }

                                            dbSigoplanTransaction.Commit();
                                            dbStarsoftTransaction.Commit();
                                        }
                                        catch (Exception e)
                                        {
                                            dbSigoplanTransaction.Rollback();
                                            dbStarsoftTransaction.Rollback();
                                            LogError(12, 0, "AlmacenController", "guardarDevolucionEntrada", e, AccionEnum.AGREGAR, 0, movimiento);

                                            throw new Exception(e.Message);

                                        }
                                    }

                                }
                            }
                        }
                    } break;
                #endregion

                #region COLOMBIA
                case EmpresaEnum.Colombia:
                    {
                        using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                        {
                            using (var con = checkConexionProductivo())
                            {
                                using (var trans = con.BeginTransaction())
                                {
                                    try
                                    {
                                        #region Validación Inventariables
                                        var registrosGrupoInsumo = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM grupos_insumo")).ToObject<List<dynamic>>();

                                        foreach (var det in movimiento.detalle)
                                        {
                                            var tipo_insumo = Int32.Parse(det.insumo.ToString().Substring(0, 1));
                                            var grupo_insumo = Int32.Parse(det.insumo.ToString().Substring(1, 2));
                                            var registroGrupoInsumo = registrosGrupoInsumo.FirstOrDefault(x => (int)x.tipo_insumo == tipo_insumo && (int)x.grupo_insumo == grupo_insumo);

                                            if (registroGrupoInsumo != null)
                                            {
                                                if ((string)registroGrupoInsumo.inventariado != "I")
                                                {
                                                    throw new Exception(string.Format(@"El insumo ""{0}"" no es inventariable.", det.insumo));
                                                }
                                            }
                                            else
                                            {
                                                throw new Exception(string.Format(@"No se encuentra la información del grupo de insumo para el insumo ""{0}"".", det.insumo));
                                            }
                                        }
                                        #endregion

                                        #region Válida Área-Cuenta
                                        if (vSesiones.sesionEmpresaActual == 2)
                                        {
                                            if (movimiento.detalle.Any(x => x.area == 0 || x.cuenta == 0))
                                            {
                                                throw new Exception("Debe capturar el Área-Cuenta.");
                                            }
                                        }
                                        #endregion

                                        #region Validación Permiso Devolución
                                        if (empleado != 1)
                                        {
                                            var permisoDevolucion = _context.tblAlm_PermisoDevolucion.FirstOrDefault(x => x.estatus && x.empleado == empleado);

                                            if (permisoDevolucion == null)
                                            {
                                                throw new Exception("No tiene permiso para realizar movimientos de devolución.");
                                            }
                                        }
                                        #endregion

                                        #region Validación Almacén Activo
                                        var almacenEK = _contextEnkontrol.Select<dynamic>(getEnkontrolEnumADM(),
                                            new OdbcConsultaDTO()
                                            {
                                                consulta = @"SELECT * FROM si_almacen WHERE almacen = ?",
                                                parametros = new List<OdbcParameterDTO>() {
                                        new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = movimiento.almacen }
                                    }
                                            }
                                        );

                                        if (almacenEK.Count() == 0)
                                        {
                                            throw new Exception("No se encuentra la información del almacén.");
                                        }

                                        if ((string)almacenEK[0].bit_mp != "S")
                                        {
                                            throw new Exception("El almacén no está activo.");
                                        }
                                        #endregion

                                        tblAlm_Movimientos nuevaEntrada = new tblAlm_Movimientos();

                                        var ultimoMovimientoEK = consultaCheckProductivo(
                                            string.Format(@"SELECT 
                                                    TOP 1 numero 
                                                FROM si_movimientos 
                                                WHERE almacen = {0} AND tipo_mov = {1} 
                                                ORDER BY numero DESC", movimiento.almacen, 3)
                                        );

                                        var nuevoNumero = 0;

                                        if (ultimoMovimientoEK != null)
                                        {
                                            nuevoNumero = ((List<SurtidoDetDTO>)ultimoMovimientoEK.ToObject<List<SurtidoDetDTO>>())[0].numero;
                                        }

                                        nuevaEntrada = new tblAlm_Movimientos
                                        {
                                            almacen = movimiento.almacen,
                                            tipo_mov = 3,
                                            numero = nuevoNumero + 1,
                                            cc = movimiento.cc.ToUpper(),
                                            compania = 1,
                                            periodo = DateTime.Now.Month,
                                            ano = DateTime.Now.Year,
                                            orden_ct = 0,
                                            frente = 0,
                                            fecha = DateTime.Now.Date,
                                            proveedor = 0,
                                            total = movimiento.total,
                                            estatus = "A",
                                            transferida = "N",
                                            alm_destino = 0,
                                            cc_destino = "",
                                            comentarios = movimiento.comentarios,
                                            tipo_trasp = "C",
                                            tipo_cambio = 1,
                                            estatusHabilitado = true,
                                            numeroReq = 0
                                        };

                                        _context.tblAlm_Movimientos.Add(nuevaEntrada);
                                        _context.SaveChanges();

                                        var partidaContador = 1;

                                        var ccDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM cc WHERE cc = '{0}' AND st_ppto != 'T'", movimiento.cc));
                                        var ccDesc = (string)(((List<dynamic>)ccDescEK.ToObject<List<dynamic>>())[0].descripcion);
                                        var almacenDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", movimiento.almacen));
                                        var almacenDesc = (string)(((List<dynamic>)almacenDescEK.ToObject<List<dynamic>>())[0].descripcion);

                                        foreach (var det in movimiento.detalle)
                                        {
                                            var partidaMovimiento = partidaContador++;

                                            var nuevaEntradaDet = new tblAlm_MovimientosDet
                                            {
                                                almacen = nuevaEntrada.almacen,
                                                tipo_mov = 3,
                                                numero = nuevoNumero + 1,
                                                partida = partidaMovimiento,
                                                insumo = det.insumo,
                                                comentarios = det.comentarios,
                                                area = det.area ?? 0,
                                                cuenta = det.cuenta ?? 0,
                                                cantidad = det.cantidad,
                                                precio = det.precio,
                                                importe = det.importe,
                                                id_resguardo = 0,
                                                area_alm = det.area_alm ?? "",
                                                lado_alm = det.lado_alm ?? "",
                                                estante_alm = det.estante_alm ?? "",
                                                nivel_alm = det.nivel_alm ?? "",
                                                transporte = "",
                                                noEconomico = det.noEconomico,
                                                estatusHabilitado = true
                                            };

                                            _context.tblAlm_MovimientosDet.Add(nuevaEntradaDet);
                                            _context.SaveChanges();
                                        }

                                        if (nuevaEntrada.total <= 0)
                                        {
                                            throw new Exception("El total no puede ser igual o menor a cero.");
                                        }

                                        var count = 0;

                                        var consulta = @"INSERT INTO DBA.si_movimientos 
                                                (almacen, tipo_mov, numero, cc, compania, periodo, ano, orden_ct, frente, fecha, proveedor, total, estatus, 
                                                transferida, poliza, empleado, alm_destino, cc_destino, comentarios, tipo_trasp, numero_destino, tp, year_poliza, 
                                                mes_poliza, tipo_cambio, hora, fecha_modifica, empleado_modifica, destajista, obra, id_residente, factura, sector_id, 
                                                tc_cc, paquete, tipo_cargo, cargo_destajista, cargo_id_residente, embarque, orden_prod, numero_prevale, obra_destino, indica_prov) 
                                                VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                        using (var cmd = new OdbcCommand(consulta))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@almacen", OdbcType.Numeric).Value = nuevaEntrada.almacen;
                                            parameters.Add("@tipo_mov", OdbcType.Numeric).Value = nuevaEntrada.tipo_mov;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = nuevaEntrada.numero;
                                            parameters.Add("@cc", OdbcType.Char).Value = nuevaEntrada.cc ?? "";
                                            parameters.Add("@compania", OdbcType.Numeric).Value = nuevaEntrada.compania;
                                            parameters.Add("@periodo", OdbcType.Numeric).Value = nuevaEntrada.periodo;
                                            parameters.Add("@ano", OdbcType.Numeric).Value = nuevaEntrada.ano;
                                            parameters.Add("@orden_ct", OdbcType.Numeric).Value = nuevaEntrada.orden_ct;
                                            parameters.Add("@frente", OdbcType.Numeric).Value = nuevaEntrada.frente;
                                            parameters.Add("@fecha", OdbcType.Date).Value = nuevaEntrada.fecha.Date;
                                            parameters.Add("@proveedor", OdbcType.Numeric).Value = nuevaEntrada.proveedor;
                                            parameters.Add("@total", OdbcType.Numeric).Value = nuevaEntrada.total;
                                            parameters.Add("@estatus", OdbcType.Char).Value = nuevaEntrada.estatus ?? "";
                                            parameters.Add("@transferida", OdbcType.Char).Value = nuevaEntrada.transferida ?? "";
                                            parameters.Add("@poliza", OdbcType.Numeric).Value = 0;
                                            parameters.Add("@empleado", OdbcType.Numeric).Value = empleado;
                                            parameters.Add("@alm_destino", OdbcType.Numeric).Value = nuevaEntrada.alm_destino;
                                            parameters.Add("@cc_destino", OdbcType.Char).Value = nuevaEntrada.cc_destino ?? "";
                                            parameters.Add("@comentarios", OdbcType.Char).Value = nuevaEntrada.comentarios ?? "";
                                            parameters.Add("@tipo_trasp", OdbcType.Char).Value = nuevaEntrada.tipo_trasp ?? "";
                                            parameters.Add("@numero_destino", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@tp", OdbcType.Char).Value = DBNull.Value;
                                            parameters.Add("@year_poliza", OdbcType.Numeric).Value = DateTime.Now.Year;
                                            parameters.Add("@mes_poliza", OdbcType.Numeric).Value = DateTime.Now.Month;
                                            parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = nuevaEntrada.tipo_cambio;
                                            parameters.Add("@hora", OdbcType.Time).Value = DateTime.Now.TimeOfDay;
                                            parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                            parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = empleado;
                                            parameters.Add("@destajista", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                            parameters.Add("@id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@factura", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@tc_cc", OdbcType.Numeric).Value = 1;
                                            parameters.Add("@paquete", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@tipo_cargo", OdbcType.Numeric).Value = 0;
                                            parameters.Add("@cargo_Destajista", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@cargo_id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@embarque", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@orden_prod", OdbcType.Numeric).Value = DBNull.Value;
                                            //parameters.Add("@folio_traspaso", OdbcType.Numeric).Value = DBNull.Value; CAMPOS NO EXISTEN
                                            //parameters.Add("@bit_sin_ubicacion", OdbcType.Numeric).Value = 0;
                                            parameters.Add("@numero_prevale", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@obra_destino", OdbcType.Char).Value = DBNull.Value;
                                            parameters.Add("@indica_prov", OdbcType.Numeric).Value = DBNull.Value;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }

                                        foreach (var entDet in movimiento.detalle)
                                        {
                                            var insumoDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM insumos WHERE insumo = {0}", entDet.insumo));
                                            var insumoDesc = (string)(((List<dynamic>)insumoDescEK.ToObject<List<dynamic>>())[0].descripcion);
                                            var importe = entDet.cantidad * entDet.precio;

                                            if (entDet.precio <= 0 || importe <= 0 || entDet.costo_prom == null || entDet.costo_prom <= 0)
                                            {
                                                throw new Exception("El precio, el importe y el costo promedio no pueden ser igual o menor a cero.");
                                            }

                                            var consultaDet = @"INSERT INTO DBA.si_movimientos_det 
                                         (almacen, tipo_mov, numero, partida, insumo, comentarios, area, cuenta, cantidad, precio, importe, 
                                         partida_oc, costo_prom, obra, manzana_ini, lote_ini, interior_ini, manzana_fin, lote_fin, interior_fin, 
                                         remision, sector_id, lote_id, folio_oc, numero_prevale, frente_ppto, partida_ppto, numero_economico,iva,
                                         porcent_iva, folio, kit, tarjeta, secuencia) 
                                         VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                            using (var cmd = new OdbcCommand(consultaDet))
                                            {
                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                parameters.Add("@almacen", OdbcType.Numeric).Value = entDet.almacen;
                                                parameters.Add("@tipo_mov", OdbcType.Numeric).Value = entDet.tipo_mov;
                                                parameters.Add("@numero", OdbcType.Numeric).Value = nuevoNumero + 1;
                                                parameters.Add("@partida", OdbcType.Numeric).Value = entDet.partida;
                                                parameters.Add("@insumo", OdbcType.Numeric).Value = entDet.insumo;
                                                parameters.Add("@comentarios", OdbcType.Char).Value = entDet.comentarios ?? "";
                                                parameters.Add("@area", OdbcType.Numeric).Value = entDet.area ?? 0;
                                                parameters.Add("@cuenta", OdbcType.Numeric).Value = entDet.cuenta ?? 0;
                                                parameters.Add("@cantidad", OdbcType.Numeric).Value = entDet.cantidad;
                                                parameters.Add("@precio", OdbcType.Numeric).Value = entDet.precio;
                                                parameters.Add("@importe", OdbcType.Numeric).Value = importe;
                                                parameters.Add("@partida_oc", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@costo_prom", OdbcType.Numeric).Value = entDet.costo_prom ?? (object)DBNull.Value;
                                                parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@manzana_ini", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@lote_ini", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@interior_ini", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@manzana_fin", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@lote_fin", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@interior_fin", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@remision", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@lote_id", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@folio_oc", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@numero_prevale", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@frente_ppto", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@partida_ppto", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@numero_economico", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@iva", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@porcent_iva", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@folio", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@kit", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@tarjeta", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@secuencia", OdbcType.Numeric).Value = DBNull.Value;
                                                //parameters.Add("@id_resguardo", OdbcType.Numeric).Value = DBNull.Value; NO EXISTEN EN COLOMBIA
                                                //parameters.Add("@area_alm", OdbcType.Char).Value = entDet.area_alm ?? "";
                                                //parameters.Add("@lado_alm", OdbcType.Char).Value = entDet.lado_alm ?? "";
                                                //parameters.Add("@estante_alm", OdbcType.Char).Value = entDet.estante_alm ?? "";
                                                //parameters.Add("@nivel_alm", OdbcType.Char).Value = entDet.nivel_alm ?? "";
                                                //parameters.Add("@fecha_fisico", OdbcType.Date).Value = DBNull.Value;

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;

                                                count += cmd.ExecuteNonQuery();

                                                movEntradas.Add(new entradasAlmacenDTO
                                                {
                                                    centroCosto = ccDesc,
                                                    folioEntrada = (nuevoNumero + 1).ToString(),
                                                    almacen = almacenDesc,
                                                    fechaEntrada = nuevaEntrada.fecha,
                                                    partida = entDet.partida,
                                                    insumo = entDet.insumo + "-" + insumoDesc ?? "",
                                                    areaCuenta = entDet.area + "-" + entDet.cuenta,
                                                    referencia = "",
                                                    remision = "",
                                                    cantidad = entDet.cantidad,
                                                    precio = entDet.costo_prom ?? 0,
                                                    importe = entDet.cantidad * entDet.precio,
                                                    comentarios = movimiento.comentarios ?? "", //comentarios = entDet.comentarios ?? "",
                                                    ordenCompra = nuevaEntrada.orden_ct.ToString(),
                                                    proveedor = "",
                                                    direccion = "",
                                                    ciudad = "",
                                                    telefonos = "",

                                                    area_alm = entDet.area_alm ?? "",
                                                    lado_alm = entDet.lado_alm ?? "",
                                                    estante_alm = entDet.estante_alm ?? "",
                                                    nivel_alm = entDet.nivel_alm ?? ""
                                                });
                                            }

                                            #region Actualizar Tablas Acumula
                                            var objAcumula = new MovimientoDetalleEnkontrolDTO
                                            {
                                                insumo = entDet.insumo,
                                                cantidad = entDet.cantidad,
                                                precio = entDet.precio,
                                                tipo_mov = entDet.tipo_mov,
                                                costo_prom = entDet.costo_prom ?? 0
                                            };

                                            actualizarAcumula(nuevaEntrada.almacen, nuevaEntrada.cc, objAcumula, dbSigoplanTransaction, trans);
                                            #endregion
                                        }

                                        trans.Commit();
                                        dbSigoplanTransaction.Commit();
                                    }
                                    catch (Exception e)
                                    {
                                        trans.Rollback();
                                        dbSigoplanTransaction.Rollback();

                                        LogError(12, 0, "AlmacenController", "guardarDevolucionEntrada", e, AccionEnum.AGREGAR, 0, movimiento);

                                        throw new Exception(e.Message);
                                    }
                                }
                            }
                        }
                    }
                    break;

                #endregion

                #region Otras Empresas
                default:
                    {

                        using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                        {
                            using (var con = checkConexionProductivo())
                            {
                                using (var trans = con.BeginTransaction())
                                {
                                    try
                                    {
                                        #region Validación Inventariables
                                        var registrosGrupoInsumo = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM grupos_insumo")).ToObject<List<dynamic>>();

                                        foreach (var det in movimiento.detalle)
                                        {
                                            var tipo_insumo = Int32.Parse(det.insumo.ToString().Substring(0, 1));
                                            var grupo_insumo = Int32.Parse(det.insumo.ToString().Substring(1, 2));
                                            var registroGrupoInsumo = registrosGrupoInsumo.FirstOrDefault(x => (int)x.tipo_insumo == tipo_insumo && (int)x.grupo_insumo == grupo_insumo);

                                            if (registroGrupoInsumo != null)
                                            {
                                                if ((string)registroGrupoInsumo.inventariado != "I")
                                                {
                                                    throw new Exception(string.Format(@"El insumo ""{0}"" no es inventariable.", det.insumo));
                                                }
                                            }
                                            else
                                            {
                                                throw new Exception(string.Format(@"No se encuentra la información del grupo de insumo para el insumo ""{0}"".", det.insumo));
                                            }
                                        }
                                        #endregion

                                        #region Válida Área-Cuenta
                                        if (vSesiones.sesionEmpresaActual == 2)
                                        {
                                            if (movimiento.detalle.Any(x => x.area == 0 || x.cuenta == 0))
                                            {
                                                throw new Exception("Debe capturar el Área-Cuenta.");
                                            }
                                        }
                                        #endregion

                                        #region Validación Permiso Devolución
                                        if (empleado != 1)
                                        {
                                            var permisoDevolucion = _context.tblAlm_PermisoDevolucion.FirstOrDefault(x => x.estatus && x.empleado == empleado);

                                            if (permisoDevolucion == null)
                                            {
                                                throw new Exception("No tiene permiso para realizar movimientos de devolución.");
                                            }
                                        }
                                        #endregion

                                        #region Validación Almacén Activo
                                        var almacenEK = _contextEnkontrol.Select<dynamic>(getEnkontrolEnumADM(),
                                            new OdbcConsultaDTO()
                                            {
                                                consulta = @"SELECT * FROM si_almacen WHERE almacen = ?",
                                                parametros = new List<OdbcParameterDTO>() {
                                        new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = movimiento.almacen }
                                    }
                                            }
                                        );

                                        if (almacenEK.Count() == 0)
                                        {
                                            throw new Exception("No se encuentra la información del almacén.");
                                        }

                                        if ((string)almacenEK[0].bit_mp != "S")
                                        {
                                            throw new Exception("El almacén no está activo.");
                                        }
                                        #endregion

                                        tblAlm_Movimientos nuevaEntrada = new tblAlm_Movimientos();

                                        var ultimoMovimientoEK = consultaCheckProductivo(
                                            string.Format(@"SELECT 
                                                    TOP 1 numero 
                                                FROM si_movimientos 
                                                WHERE almacen = {0} AND tipo_mov = {1} 
                                                ORDER BY numero DESC", movimiento.almacen, 3)
                                        );

                                        var nuevoNumero = 0;

                                        if (ultimoMovimientoEK != null)
                                        {
                                            nuevoNumero = ((List<SurtidoDetDTO>)ultimoMovimientoEK.ToObject<List<SurtidoDetDTO>>())[0].numero;
                                        }

                                        nuevaEntrada = new tblAlm_Movimientos
                                        {
                                            almacen = movimiento.almacen,
                                            tipo_mov = 3,
                                            numero = nuevoNumero + 1,
                                            cc = movimiento.cc.ToUpper(),
                                            compania = 1,
                                            periodo = DateTime.Now.Month,
                                            ano = DateTime.Now.Year,
                                            orden_ct = 0,
                                            frente = 0,
                                            fecha = DateTime.Now.Date,
                                            proveedor = 0,
                                            total = movimiento.total,
                                            estatus = "A",
                                            transferida = "N",
                                            alm_destino = 0,
                                            cc_destino = "",
                                            comentarios = movimiento.comentarios,
                                            tipo_trasp = "C",
                                            tipo_cambio = 1,
                                            estatusHabilitado = true,
                                            numeroReq = 0
                                        };

                                        _context.tblAlm_Movimientos.Add(nuevaEntrada);
                                        _context.SaveChanges();

                                        var partidaContador = 1;

                                        var ccDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM cc WHERE cc = '{0}' AND st_ppto != 'T'", movimiento.cc));
                                        var ccDesc = (string)(((List<dynamic>)ccDescEK.ToObject<List<dynamic>>())[0].descripcion);
                                        var almacenDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", movimiento.almacen));
                                        var almacenDesc = (string)(((List<dynamic>)almacenDescEK.ToObject<List<dynamic>>())[0].descripcion);

                                        foreach (var det in movimiento.detalle)
                                        {
                                            var partidaMovimiento = partidaContador++;

                                            var nuevaEntradaDet = new tblAlm_MovimientosDet
                                            {
                                                almacen = nuevaEntrada.almacen,
                                                tipo_mov = 3,
                                                numero = nuevoNumero + 1,
                                                partida = partidaMovimiento,
                                                insumo = det.insumo,
                                                comentarios = det.comentarios,
                                                area = det.area ?? 0,
                                                cuenta = det.cuenta ?? 0,
                                                cantidad = det.cantidad,
                                                precio = det.precio,
                                                importe = det.importe,
                                                id_resguardo = 0,
                                                area_alm = det.area_alm ?? "",
                                                lado_alm = det.lado_alm ?? "",
                                                estante_alm = det.estante_alm ?? "",
                                                nivel_alm = det.nivel_alm ?? "",
                                                transporte = "",
                                                estatusHabilitado = true
                                            };

                                            _context.tblAlm_MovimientosDet.Add(nuevaEntradaDet);
                                            _context.SaveChanges();
                                        }

                                        if (nuevaEntrada.total <= 0)
                                        {
                                            throw new Exception("El total no puede ser igual o menor a cero.");
                                        }

                                        var count = 0;

                                        var consulta = @"INSERT INTO si_movimientos 
                                                (almacen, tipo_mov, numero, cc, compania, periodo, ano, orden_ct, frente, fecha, proveedor, total, estatus, 
                                                transferida, poliza, empleado, alm_destino, cc_destino, comentarios, tipo_trasp, numero_destino, tp, year_poliza, 
                                                mes_poliza, tipo_cambio, hora, fecha_modifica, empleado_modifica, destajista, obra, id_residente, factura, sector_id, 
                                                tc_cc, paquete, tipo_cargo, cargo_destajista, cargo_id_residente, embarque, orden_prod, folio_traspaso, bit_sin_ubicacion) 
                                                VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                        using (var cmd = new OdbcCommand(consulta))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@almacen", OdbcType.Numeric).Value = nuevaEntrada.almacen;
                                            parameters.Add("@tipo_mov", OdbcType.Numeric).Value = nuevaEntrada.tipo_mov;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = nuevaEntrada.numero;
                                            parameters.Add("@cc", OdbcType.Char).Value = nuevaEntrada.cc ?? "";
                                            parameters.Add("@compania", OdbcType.Numeric).Value = nuevaEntrada.compania;
                                            parameters.Add("@periodo", OdbcType.Numeric).Value = nuevaEntrada.periodo;
                                            parameters.Add("@ano", OdbcType.Numeric).Value = nuevaEntrada.ano;
                                            parameters.Add("@orden_ct", OdbcType.Numeric).Value = nuevaEntrada.orden_ct;
                                            parameters.Add("@frente", OdbcType.Numeric).Value = nuevaEntrada.frente;
                                            parameters.Add("@fecha", OdbcType.Date).Value = nuevaEntrada.fecha.Date;
                                            parameters.Add("@proveedor", OdbcType.Numeric).Value = nuevaEntrada.proveedor;
                                            parameters.Add("@total", OdbcType.Numeric).Value = nuevaEntrada.total;
                                            parameters.Add("@estatus", OdbcType.Char).Value = nuevaEntrada.estatus ?? "";
                                            parameters.Add("@transferida", OdbcType.Char).Value = nuevaEntrada.transferida ?? "";
                                            parameters.Add("@poliza", OdbcType.Numeric).Value = 0;
                                            parameters.Add("@empleado", OdbcType.Numeric).Value = empleado;
                                            parameters.Add("@alm_destino", OdbcType.Numeric).Value = nuevaEntrada.alm_destino;
                                            parameters.Add("@cc_destino", OdbcType.Char).Value = nuevaEntrada.cc_destino ?? "";
                                            parameters.Add("@comentarios", OdbcType.Char).Value = nuevaEntrada.comentarios ?? "";
                                            parameters.Add("@tipo_trasp", OdbcType.Char).Value = nuevaEntrada.tipo_trasp ?? "";
                                            parameters.Add("@numero_destino", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@tp", OdbcType.Char).Value = DBNull.Value;
                                            parameters.Add("@year_poliza", OdbcType.Numeric).Value = DateTime.Now.Year;
                                            parameters.Add("@mes_poliza", OdbcType.Numeric).Value = DateTime.Now.Month;
                                            parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = nuevaEntrada.tipo_cambio;
                                            parameters.Add("@hora", OdbcType.Time).Value = DateTime.Now.TimeOfDay;
                                            parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                            parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = empleado;
                                            parameters.Add("@destajista", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                            parameters.Add("@id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@factura", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@tc_cc", OdbcType.Numeric).Value = 1;
                                            parameters.Add("@paquete", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@tipo_cargo", OdbcType.Numeric).Value = 0;
                                            parameters.Add("@cargo_Destajista", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@cargo_id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@embarque", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@orden_prod", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@folio_traspaso", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@bit_sin_ubicacion", OdbcType.Numeric).Value = 0;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }

                                        foreach (var entDet in movimiento.detalle)
                                        {
                                            var insumoDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM insumos WHERE insumo = {0}", entDet.insumo));
                                            var insumoDesc = (string)(((List<dynamic>)insumoDescEK.ToObject<List<dynamic>>())[0].descripcion);
                                            var importe = entDet.cantidad * entDet.precio;

                                            if (entDet.precio <= 0 || importe <= 0 || entDet.costo_prom == null || entDet.costo_prom <= 0)
                                            {
                                                throw new Exception("El precio, el importe y el costo promedio no pueden ser igual o menor a cero.");
                                            }

                                            var consultaDet = @"INSERT INTO si_movimientos_det 
                                         (almacen, tipo_mov, numero, partida, insumo, comentarios, area, cuenta, cantidad, precio, importe, 
                                         partida_oc, costo_prom, obra, manzana_ini, lote_ini, interior_ini, manzana_fin, lote_fin, interior_fin, 
                                         remision, sector_id, id_resguardo, area_alm, lado_alm, estante_alm, nivel_alm, fecha_fisico) 
                                         VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                            using (var cmd = new OdbcCommand(consultaDet))
                                            {
                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                parameters.Add("@almacen", OdbcType.Numeric).Value = entDet.almacen;
                                                parameters.Add("@tipo_mov", OdbcType.Numeric).Value = entDet.tipo_mov;
                                                parameters.Add("@numero", OdbcType.Numeric).Value = nuevoNumero + 1;
                                                parameters.Add("@partida", OdbcType.Numeric).Value = entDet.partida;
                                                parameters.Add("@insumo", OdbcType.Numeric).Value = entDet.insumo;
                                                parameters.Add("@comentarios", OdbcType.Char).Value = entDet.comentarios ?? "";
                                                parameters.Add("@area", OdbcType.Numeric).Value = entDet.area ?? 0;
                                                parameters.Add("@cuenta", OdbcType.Numeric).Value = entDet.cuenta ?? 0;
                                                parameters.Add("@cantidad", OdbcType.Numeric).Value = entDet.cantidad;
                                                parameters.Add("@precio", OdbcType.Numeric).Value = entDet.precio;
                                                parameters.Add("@importe", OdbcType.Numeric).Value = importe;
                                                parameters.Add("@partida_oc", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@costo_prom", OdbcType.Numeric).Value = entDet.costo_prom ?? (object)DBNull.Value;
                                                parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@manzana_ini", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@lote_ini", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@interior_ini", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@manzana_fin", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@lote_fin", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@interior_fin", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@remision", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@id_resguardo", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@area_alm", OdbcType.Char).Value = entDet.area_alm ?? "";
                                                parameters.Add("@lado_alm", OdbcType.Char).Value = entDet.lado_alm ?? "";
                                                parameters.Add("@estante_alm", OdbcType.Char).Value = entDet.estante_alm ?? "";
                                                parameters.Add("@nivel_alm", OdbcType.Char).Value = entDet.nivel_alm ?? "";
                                                parameters.Add("@fecha_fisico", OdbcType.Date).Value = DBNull.Value;

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;

                                                count += cmd.ExecuteNonQuery();

                                                movEntradas.Add(new entradasAlmacenDTO
                                                {
                                                    centroCosto = ccDesc,
                                                    folioEntrada = (nuevoNumero + 1).ToString(),
                                                    almacen = almacenDesc,
                                                    fechaEntrada = nuevaEntrada.fecha,
                                                    partida = entDet.partida,
                                                    insumo = entDet.insumo + "-" + insumoDesc ?? "",
                                                    areaCuenta = entDet.area + "-" + entDet.cuenta,
                                                    referencia = "",
                                                    remision = "",
                                                    cantidad = entDet.cantidad,
                                                    precio = entDet.costo_prom ?? 0,
                                                    importe = entDet.cantidad * entDet.precio,
                                                    comentarios = movimiento.comentarios ?? "", //comentarios = entDet.comentarios ?? "",
                                                    ordenCompra = nuevaEntrada.orden_ct.ToString(),
                                                    proveedor = "",
                                                    direccion = "",
                                                    ciudad = "",
                                                    telefonos = "",

                                                    area_alm = entDet.area_alm ?? "",
                                                    lado_alm = entDet.lado_alm ?? "",
                                                    estante_alm = entDet.estante_alm ?? "",
                                                    nivel_alm = entDet.nivel_alm ?? ""
                                                });
                                            }

                                            #region Actualizar Tablas Acumula
                                            var objAcumula = new MovimientoDetalleEnkontrolDTO
                                            {
                                                insumo = entDet.insumo,
                                                cantidad = entDet.cantidad,
                                                precio = entDet.precio,
                                                tipo_mov = entDet.tipo_mov,
                                                costo_prom = entDet.costo_prom ?? 0
                                            };

                                            actualizarAcumula(nuevaEntrada.almacen, nuevaEntrada.cc, objAcumula, dbSigoplanTransaction, trans);
                                            #endregion
                                        }

                                        trans.Commit();
                                        dbSigoplanTransaction.Commit();
                                    }
                                    catch (Exception e)
                                    {
                                        trans.Rollback();
                                        dbSigoplanTransaction.Rollback();

                                        LogError(12, 0, "AlmacenController", "guardarDevolucionEntrada", e, AccionEnum.AGREGAR, 0, movimiento);

                                        throw new Exception(e.Message);
                                    }
                                }
                            }
                        }
                    } break;
                #endregion
            }

            return movEntradas;
        }
        #endregion

        #region Devolución Salida
        public Dictionary<string, object> getNuevaDevolucionSalida(int almacenID)
        {
            var result = new Dictionary<string, object>();

            try
            {
                if (vSesiones.sesionEmpresaActual != (int)EmpresaEnum.Peru)
                {
                    var almacen = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", almacenID)).ToObject<List<dynamic>>();

                    var ultimaDevolucionSalidaEK = consultaCheckProductivo(
                        string.Format(@"SELECT TOP 1 
                                        * 
                                    FROM si_movimientos 
                                    WHERE almacen = {0} AND tipo_mov = 53 ORDER BY numero DESC", almacenID)
                    );

                    var entregoNum = 0;
                    var entregoDesc = "";
                    var relacionUsuarioSIGOPLANEK = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                    if (relacionUsuarioSIGOPLANEK != null)
                    {
                        var empleado = (List<dynamic>)consultaCheckProductivo(
                            string.Format(@"SELECT * FROM empleados WHERE empleado = {0}", relacionUsuarioSIGOPLANEK.empleado)
                        ).ToObject<List<dynamic>>();

                        entregoNum = relacionUsuarioSIGOPLANEK.empleado;
                        entregoDesc = (string)empleado[0].descripcion;
                    }

                    if (ultimaDevolucionSalidaEK != null)
                    {
                        var ultimaDevolucionSalida = (List<dynamic>)ultimaDevolucionSalidaEK.ToObject<List<dynamic>>();

                        result.Add("almacenDesc", (string)almacen[0].descripcion);
                        result.Add("numeroDisponible", (int)ultimaDevolucionSalida[0].numero + 1);
                        result.Add("entregoNum", entregoNum);
                        result.Add("entregoDesc", entregoDesc);
                        result.Add("fecha", DateTime.Now.Date.ToShortDateString());
                        result.Add(SUCCESS, true);
                    }
                    else
                    {
                        result.Add("almacenDesc", (string)almacen[0].descripcion);
                        result.Add("numeroDisponible", 1);
                        result.Add("entregoNum", entregoNum);
                        result.Add("entregoDesc", entregoDesc);
                        result.Add("fecha", DateTime.Now.Date.ToShortDateString());
                        result.Add(SUCCESS, true);
                    }
                }
                else
                {
                    int ultimoFolio = 0;

                    using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                    {
                        var registroAlmacen = _starsoft.TABALM.ToList().FirstOrDefault(x => Int32.Parse(x.TAALMA) == almacenID);

                        result.Add("almacenDesc", registroAlmacen.TADESCRI);

                        if (almacenID >= 90)
                        {
                            ultimoFolio = _context.tblAlm_Movimientos.Where(x => x.estatusHabilitado && x.almacen == almacenID && x.tipo_mov > 50).Select(x => x.numero).OrderByDescending(x => x).FirstOrDefault();
                        }
                        else
                        {
                            ultimoFolio = _starsoft.MOVALMCAB.ToList().Where(x => Int32.Parse(x.CAALMA) == almacenID && x.CATD == "NS").Select(x => Int32.Parse(x.CANUMDOC)).OrderByDescending(x => x).FirstOrDefault();
                        }
                    }

                    //var salidasAlmacen = _context.tblAlm_Movimientos.Where(x => x.almacen == almacenID && x.tipo_mov > 50).ToList();

                    result.Add("numeroDisponible", ultimoFolio + 1);
                    result.Add("entregoNum", vSesiones.sesionUsuarioDTO.id);
                    result.Add("entregoDesc", _context.tblP_Usuario.Where(x => x.id == vSesiones.sesionUsuarioDTO.id).Select(x => x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno).FirstOrDefault());
                    result.Add("fecha", DateTime.Now.Date.ToShortDateString());
                    result.Add(SUCCESS, true);
                }
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return result;
        }

        public dynamic getDevolucionSalida(int almacenID, int numero)
        {
            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
            {
                var registroMovimiento = _context.tblAlm_Movimientos.FirstOrDefault(x => x.estatusHabilitado && x.almacen == almacenID && x.tipo_mov == 53 && x.numero == numero);

                if (registroMovimiento != null)
                {
                    var listaAlmacenesStarsoft = new List<TABALM>();
                    var listaInsumosStarsoft = new List<MAEART>();

                    using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                    {
                        listaAlmacenesStarsoft = _starsoft.TABALM.ToList();
                        listaInsumosStarsoft = _starsoft.MAEART.ToList();
                    }

                    var listaCC = _context.tblP_CC.ToList();

                    var devolucion = new MovimientoEnkontrolDTO
                    {
                        almacen = registroMovimiento.almacen,
                        almacenDesc = listaAlmacenesStarsoft.Where(x => Int32.Parse(x.TAALMA) == registroMovimiento.almacen).Select(x => x.TADESCRI).FirstOrDefault(),
                        tipo_mov = registroMovimiento.tipo_mov,
                        numero = registroMovimiento.numero,
                        cc = registroMovimiento.cc,
                        ccDesc = listaCC.Where(x => x.cc == registroMovimiento.cc && x.estatus).Select(x => x.descripcion).FirstOrDefault(),
                        orden_ct = registroMovimiento.orden_ct,
                        fecha = registroMovimiento.fecha,
                        total = registroMovimiento.total,
                        estatus = registroMovimiento.estatus,
                        transferida = registroMovimiento.transferida,
                        empleado = 0,
                        empleadoDesc = "",
                        comentarios = registroMovimiento.comentarios,
                        sector_id = 0,
                        proveedor = 0,
                        proveedorDesc = ""
                    };

                    var listaRegistrosDetalle = _context.tblAlm_MovimientosDet.Where(x => x.estatusHabilitado && x.almacen == almacenID && x.tipo_mov == 53 && x.numero == numero).ToList().Select(x => new MovimientoDetalleEnkontrolDTO
                    {
                        almacen = x.almacen,
                        tipo_mov = x.tipo_mov,
                        numero = x.numero,
                        remision = 0,
                        partida = x.partida,
                        insumo = x.insumo,
                        insumoDesc = listaInsumosStarsoft.Where(y => Int32.Parse(y.ACODIGO) == x.insumo).Select(z => z.ADESCRI).FirstOrDefault(),
                        comentarios = x.comentarios,
                        area = 0,
                        cuenta = 0,
                        areaCuenta = "0-0",
                        cantidad = x.cantidad,
                        precio = x.precio,
                        importe = x.importe,
                        partida_oc = 0,
                        costo_prom = 0,
                        sector_id = 0,
                        area_alm = x.area_alm,
                        lado_alm = x.lado_alm,
                        estante_alm = x.estante_alm,
                        nivel_alm = x.nivel_alm
                    }).ToList();

                    devolucion.fechaString = ((DateTime)(devolucion.fecha)).ToShortDateString();
                    devolucion.detalle = listaRegistrosDetalle;

                    return devolucion;
                }
                else
                {
                    return null;
                }
            }
            else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
            {
                #region COLOMBIA
                var devolucionEK = consultaCheckProductivo(
                           string.Format(@"SELECT 
                                    mov.almacen, 
                                    alm.descripcion AS almacenDesc, 
                                    mov.tipo_mov, 
                                    mov.numero, 
                                    mov.cc, 
                                    c.descripcion AS ccDesc, 
                                    mov.orden_ct, 
                                    mov.fecha, 
                                    mov.total, 
                                    mov.estatus, 
                                    mov.transferida, 
                                    mov.empleado, 
                                    emp.descripcion AS empleadoDesc, 
                                    mov.comentarios, 
                                    mov.sector_id, 
                                    mov.proveedor, 
                                    prov.nombre AS proveedorDesc 
                                FROM si_movimientos mov 
                                    INNER JOIN si_almacen alm ON mov.almacen = alm.almacen 
                                    INNER JOIN cc c ON mov.cc = c.cc 
                                    LEFT JOIN empleados emp ON mov.empleado = emp.empleado 
                                    LEFT JOIN sp_proveedores prov ON mov.proveedor = prov.numpro 
                                WHERE mov.almacen = {0} AND mov.tipo_mov = 53 AND mov.numero = {1}", almacenID, numero));

                if (devolucionEK != null)
                {
                    var devolucion = (List<MovimientoEnkontrolDTO>)devolucionEK.ToObject<List<MovimientoEnkontrolDTO>>();
                    var devolucionDetalle = (List<MovimientoDetalleEnkontrolDTO>)consultaCheckProductivo(
                        string.Format(@"SELECT 
                                        det.*, 
                                        i.descripcion AS insumoDesc, 
                                        i.unidad 
                                    FROM si_movimientos_det det 
                                        INNER JOIN insumos i ON det.insumo = i.insumo 
                                    WHERE det.almacen = {0} AND det.tipo_mov = 53 AND det.numero = {1}", almacenID, numero)
                    ).ToObject<List<MovimientoDetalleEnkontrolDTO>>();

                    devolucion[0].fechaString = ((DateTime)(devolucion[0].fecha)).ToShortDateString();

                    var lstMovimientosSP = _context.tblAlm_MovimientosDet.Where(e => e.estatusHabilitado && e.almacen == almacenID && e.numero == numero && e.tipo_mov == 53).ToList();

                    foreach (var item in devolucionDetalle)
                    {
                        var objDetSP = lstMovimientosSP.FirstOrDefault(e => e.partida == item.partida);

                        if (objDetSP != null)
                        {
                            item.area_alm = objDetSP.area_alm;
                            item.lado_alm = objDetSP.lado_alm;
                            item.estante_alm = objDetSP.estante_alm;
                            item.nivel_alm = objDetSP.nivel_alm;
                        }
                    }

                    devolucion[0].detalle = devolucionDetalle;

                    return devolucion[0];
                }
                else
                {
                    return null;
                }
                #endregion
            }
            else
            {
                #region RESTO EMPRESA
                var devolucionEK = consultaCheckProductivo(
                    string.Format(@"SELECT 
                                    mov.almacen, 
                                    alm.descripcion AS almacenDesc, 
                                    mov.tipo_mov, 
                                    mov.numero, 
                                    mov.cc, 
                                    c.descripcion AS ccDesc, 
                                    mov.orden_ct, 
                                    mov.fecha, 
                                    mov.total, 
                                    mov.estatus, 
                                    mov.transferida, 
                                    mov.empleado, 
                                    emp.descripcion AS empleadoDesc, 
                                    mov.comentarios, 
                                    mov.sector_id, 
                                    mov.proveedor, 
                                    prov.nombre AS proveedorDesc 
                                FROM si_movimientos mov 
                                    INNER JOIN si_almacen alm ON mov.almacen = alm.almacen 
                                    INNER JOIN cc c ON mov.cc = c.cc 
                                    LEFT JOIN empleados emp ON mov.empleado = emp.empleado 
                                    LEFT JOIN sp_proveedores prov ON mov.proveedor = prov.numpro 
                                WHERE mov.almacen = {0} AND mov.tipo_mov = 53 AND mov.numero = {1}", almacenID, numero));

                if (devolucionEK != null)
                {
                    var devolucion = (List<MovimientoEnkontrolDTO>)devolucionEK.ToObject<List<MovimientoEnkontrolDTO>>();
                    var devolucionDetalle = (List<MovimientoDetalleEnkontrolDTO>)consultaCheckProductivo(
                        string.Format(@"SELECT 
                                        det.*, 
                                        i.descripcion AS insumoDesc, 
                                        i.unidad 
                                    FROM si_movimientos_det det 
                                        INNER JOIN insumos i ON det.insumo = i.insumo 
                                    WHERE det.almacen = {0} AND det.tipo_mov = 53 AND det.numero = {1}", almacenID, numero)
                    ).ToObject<List<MovimientoDetalleEnkontrolDTO>>();

                    devolucion[0].fechaString = ((DateTime)(devolucion[0].fecha)).ToShortDateString();
                    devolucion[0].detalle = devolucionDetalle;

                    return devolucion[0];
                }
                else
                {
                    return null;
                }
                #endregion
            }
        }

        public List<salidasAlmacenDTO> guardarDevolucionSalida(MovimientoEnkontrolDTO movimiento)
        {
            List<salidasAlmacenDTO> movSalidas = new List<salidasAlmacenDTO>();

            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
            {
                #region Perú
                var empleado = 0;
                var usuarioSigoplan = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                if (usuarioSigoplan != null)
                {
                    empleado = usuarioSigoplan.empleado;
                }

                var registroCompra = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.estatusRegistro && x.cc == movimiento.cc && x.numero == movimiento.orden_ct && x.PERU_tipoCompra == "RQ");
                var listaRegistrosCompraDetalle = _context.tblCom_OrdenCompraDet.Where(x => x.estatusRegistro && x.idOrdenCompra == registroCompra.id).ToList().Select(x => new OrdenCompraDetDTO
                {
                    cc = x.cc,
                    numero = x.numero,
                    num_requisicion = x.num_requisicion,
                    part_requisicion = x.part_requisicion,
                    insumo = x.insumo,
                    fecha_entrega = x.fecha_entrega,
                    cantidad = x.cantidad,
                    fecha_recibido = x.fecha_recibido,
                    cant_canc = x.cant_canc,
                    area = x.area,
                    cuenta = x.cuenta,
                    partida = x.partida,
                    precio = x.precio,
                    importe = x.importe,
                    ajuste_cant = x.ajuste_cant,
                    ajuste_imp = x.ajuste_imp,
                    cant_recibida = x.cant_recibida,
                    imp_recibido = x.imp_recibido,
                    imp_canc = x.imp_canc,
                    acum_ant = x.acum_ant,
                    max_orig = x.max_orig,
                    max_ppto = x.max_ppto,
                    porcent_iva = x.porcent_iva,
                    iva = x.iva,
                    descripcion = x.partidaDescripcion
                }).ToList();

                using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                {
                    using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                    {
                        using (var dbStarsoftTransaction = _starsoft.Database.BeginTransaction())
                        {
                            try
                            {
                                #region Validación Inventariables
                                var lstInsumos = new List<MAEART>();

                                foreach (var det in movimiento.detalle)
                                {
                                    var objInsumo = _starsoft.MAEART.ToList().FirstOrDefault(e => Int32.Parse(e.ACODIGO) == det.insumo);

                                    if (objInsumo != null)
                                    {
                                        lstInsumos.Add(objInsumo);

                                        if (objInsumo.ACODIGO.Substring(0, 2) == "02")
                                        {
                                            throw new Exception(string.Format(@"El insumo ""{0}"" no es inventariable.", det.insumo));
                                        }
                                    }
                                    else
                                    {
                                        throw new Exception(string.Format(@"No se encuentra la información para el insumo ""{0}"".", det.insumo));
                                    }
                                }
                                #endregion

                                #region Validar Existencias
                                foreach (var det in movimiento.detalle)
                                {
                                    if (movimiento.almacen < 90)
                                    {
                                        var registroStock = _starsoft.STKART.ToList().FirstOrDefault(x => Int32.Parse(x.STALMA) == movimiento.almacen && Int32.Parse(x.STCODIGO) == det.insumo);

                                        if (registroStock != null)
                                        {
                                            if (det.cantidad > (decimal)registroStock.STSKDIS)
                                            {
                                                throw new Exception("La cantidad solicitada del insumo \"" + ("0" + det.insumo) + "\" sobrepasa las existencias (" + (decimal)registroStock.STSKDIS + ").");
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("No hay existencias para el insumo \"" + ("0" + det.insumo) + "\" en el almacén \"" + movimiento.almacen + "\".");
                                        }
                                    }
                                    else
                                    {
                                        var existenciasUbicacion = _context.tblAlm_MovimientosDet.Where(x =>
                                            x.estatusHabilitado &&
                                            x.almacen == movimiento.almacen &&
                                            x.insumo == det.insumo &&
                                            x.area_alm == det.area_alm &&
                                            x.lado_alm == det.lado_alm &&
                                            x.estante_alm == det.estante_alm &&
                                            x.nivel_alm == det.nivel_alm
                                        ).ToList().GroupBy(x => new { x.almacen, x.insumo, x.area_alm, x.lado_alm, x.estante_alm, x.nivel_alm }).Select(x => new
                                        {
                                            almacen = x.Key.almacen,
                                            insumo = x.Key.insumo,
                                            area_alm = x.Key.area_alm,
                                            lado_alm = x.Key.lado_alm,
                                            estante_alm = x.Key.estante_alm,
                                            nivel_alm = x.Key.nivel_alm,
                                            cantidad = x.Sum(y => y.tipo_mov < 50 ? y.cantidad : (y.cantidad * -1))
                                        }).FirstOrDefault();

                                        if (existenciasUbicacion != null)
                                        {
                                            if (det.cantidad > existenciasUbicacion.cantidad)
                                            {
                                                throw new Exception("La cantidad solicitada del insumo \"" + ("0" + det.insumo) + "\" sobrepasa las existencias (" + existenciasUbicacion.cantidad + ").");
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("No hay existencias para el insumo \"" + ("0" + det.insumo) + "\" en el almacén \"" + movimiento.almacen + "\".");
                                        }
                                    }
                                }
                                #endregion

                                #region Validación Sobrepaso de Devolución
                                foreach (var det in movimiento.detalle)
                                {
                                    var partidaCompra = listaRegistrosCompraDetalle.FirstOrDefault(x => x.partida == det.partida_oc);

                                    if (partidaCompra != null)
                                    {
                                        if (det.cantidad > partidaCompra.cant_recibida)
                                        {
                                            throw new Exception(string.Format(@"No se puede realizar la devolución. La cantidad recibida para la partida {0} es de {1}.", det.partida_oc, partidaCompra.cant_recibida));
                                        }
                                    }
                                    else
                                    {
                                        throw new Exception(string.Format(@"Error al consulta la información. No se encuentra la partida '{0}' de la compra.", det.partida_oc));
                                    }
                                }
                                #endregion

                                #region Validación Permiso Devolución
                                var permisoDevolucion = _context.tblAlm_PermisoDevolucion.FirstOrDefault(x => x.estatus && x.empleado == empleado);

                                if (permisoDevolucion == null && empleado != 1)
                                {
                                    throw new Exception("No tiene permiso para realizar movimientos de devolución.");
                                }
                                #endregion

                                #region Validación Almacén Activo
                                string almacenStarsoft = "";
                                if (movimiento.almacen > 9)
                                {
                                    almacenStarsoft = movimiento.almacen.ToString();
                                }
                                else
                                {
                                    almacenStarsoft = "0" + movimiento.almacen;
                                }

                                var objAlmacen = _starsoft.TABALM.FirstOrDefault(e => e.TAALMA == almacenStarsoft);

                                if (objAlmacen == null)
                                {
                                    throw new Exception("No se encuentra la información del almacén.");
                                }
                                #endregion

                                #region Validación Usuario Inventarios Starsoft
                                var objUsrStarsoftInventarios = _context.tblAlm_Almacenistas.FirstOrDefault(e => e.id_usuario_sigoplan == vSesiones.sesionUsuarioDTO.id);

                                string idAlmacenistaStarsoft = "0";

                                if (objUsrStarsoftInventarios == null)
                                {
                                    if (vSesiones.sesionUsuarioDTO.idPerfil == 1)
                                    {
                                        idAlmacenistaStarsoft = "1";
                                    }
                                    else
                                    {
                                        throw new Exception("Esta usuario no es un almacenista en el sistema");
                                    }
                                }
                                else
                                {
                                    idAlmacenistaStarsoft = objUsrStarsoftInventarios.id_usuario_inventarios;
                                }
                                #endregion

                                var nuevoFolio = 1;
                                int ultimoFolio = 0;

                                if (movimiento.almacen >= 90)
                                {
                                    ultimoFolio = _context.tblAlm_Movimientos.Where(x => x.estatusHabilitado && x.almacen == movimiento.almacen && x.tipo_mov > 50).Select(x => x.numero).OrderByDescending(x => x).FirstOrDefault();
                                }
                                else
                                {
                                    ultimoFolio = _starsoft.MOVALMCAB.ToList().Where(x => Int32.Parse(x.CAALMA) == movimiento.almacen && x.CATD == "NS").Select(x => Int32.Parse(x.CANUMDOC)).OrderByDescending(x => x).FirstOrDefault();
                                }

                                nuevoFolio = ultimoFolio + 1;

                                decimal tipoCambioPeru = 0M;

                                using (var dbStarsoftConta = new MainContextPeruStarSoft003BDCONTABILIDAD())
                                {
                                    var tipoCambioActual = dbStarsoftConta.TIPO_CAMBIO.ToList().FirstOrDefault(e => e.TIPOCAMB_FECHA.Date == DateTime.Now.Date);

                                    if (tipoCambioActual != null)
                                    {
                                        tipoCambioPeru = tipoCambioActual.TIPOCAMB_COMPRA;
                                    }
                                    else
                                    {
                                        tipoCambioPeru = dbStarsoftConta.TIPO_CAMBIO.ToList().FirstOrDefault(e => e.TIPOCAMB_FECHA.Date == DateTime.Now.AddDays(-1).Date).TIPOCAMB_COMPRA;
                                    }
                                }

                                bool flagAlmacenVirtual = movimiento.almacen >= 90;

                                if (!flagAlmacenVirtual)
                                {
                                    #region Guardar Encabezado SIGOPLAN
                                    tblAlm_Movimientos nuevaSalida = new tblAlm_Movimientos
                                    {
                                        almacen = movimiento.almacen,
                                        tipo_mov = 53,
                                        numero = nuevoFolio,
                                        cc = movimiento.cc.ToUpper(),
                                        compania = 1,
                                        periodo = DateTime.Now.Month,
                                        ano = DateTime.Now.Year,
                                        orden_ct = movimiento.orden_ct,
                                        frente = 0,
                                        fecha = DateTime.Now.Date,
                                        proveedor = 0,
                                        total = movimiento.total,
                                        estatus = "A",
                                        transferida = "N",
                                        alm_destino = 0,
                                        cc_destino = "",
                                        comentarios = movimiento.comentarios,
                                        tipo_trasp = "C",
                                        tipo_cambio = 1,
                                        estatusHabilitado = true,
                                        numeroReq = 0
                                    };

                                    _context.tblAlm_Movimientos.Add(nuevaSalida);
                                    _context.SaveChanges();
                                    #endregion

                                    #region Guardar Encabezado Starsoft
                                    MOVALMCAB nuevaSalidaStarsoft = new MOVALMCAB();

                                    nuevaSalidaStarsoft.CAALMA = almacenStarsoft;
                                    nuevaSalidaStarsoft.CATD = "NS";
                                    nuevaSalidaStarsoft.CANUMDOC = nuevoFolio.ToString("D10");
                                    nuevaSalidaStarsoft.CAFECDOC = DateTime.Now.Date;
                                    nuevaSalidaStarsoft.CATIPMOV = "S";
                                    nuevaSalidaStarsoft.CACODMOV = "DV";
                                    nuevaSalidaStarsoft.CASITUA = "M";
                                    nuevaSalidaStarsoft.CARFTDOC = ""; //PENDIENTE CHECAR CUANDO DEJA VER EL STOCK DE LOS INSUMOS EN EL ALMACEN (ASI SI DEJA AGREGARLOS;
                                    nuevaSalidaStarsoft.CARFNDOC = null;
                                    nuevaSalidaStarsoft.CASOLI = null;
                                    nuevaSalidaStarsoft.CAFECDEV = null;
                                    nuevaSalidaStarsoft.CACODPRO = null;
                                    nuevaSalidaStarsoft.CACENCOS = movimiento.cc;
                                    nuevaSalidaStarsoft.CARFALMA = null;
                                    nuevaSalidaStarsoft.CAGLOSA = "";
                                    nuevaSalidaStarsoft.CAFECACT = DateTime.Now.Date;
                                    nuevaSalidaStarsoft.CAHORA = DateTime.Now.ToString("HH:mm:ss");
                                    nuevaSalidaStarsoft.CAUSUARI = idAlmacenistaStarsoft;
                                    nuevaSalidaStarsoft.CACODCLI = null;
                                    nuevaSalidaStarsoft.CARUC = null;
                                    nuevaSalidaStarsoft.CANOMCLI = null;
                                    nuevaSalidaStarsoft.CAFORVEN = null;
                                    nuevaSalidaStarsoft.CACODMON = "MN"; //PENDIENTE TIPO DE MONED;
                                    nuevaSalidaStarsoft.CAVENDE = null;
                                    nuevaSalidaStarsoft.CATIPCAM = tipoCambioPeru;
                                    nuevaSalidaStarsoft.CATIPGUI = null;
                                    nuevaSalidaStarsoft.CASITGUI = "V";
                                    nuevaSalidaStarsoft.CAGUIFAC = null;
                                    nuevaSalidaStarsoft.CADIRENV = null;
                                    nuevaSalidaStarsoft.CACODTRAN = null;
                                    nuevaSalidaStarsoft.CANUMORD = null;
                                    nuevaSalidaStarsoft.CAGUIDEV = null;
                                    nuevaSalidaStarsoft.CANOMPRO = null;
                                    nuevaSalidaStarsoft.CANROPED = null;
                                    nuevaSalidaStarsoft.CACOTIZA = null;
                                    nuevaSalidaStarsoft.CAPORDESCL = 0M;
                                    nuevaSalidaStarsoft.CAPORDESES = 0M;
                                    nuevaSalidaStarsoft.CAIMPORTE = movimiento.detalle.Select(x => x.cantidad).Sum();
                                    nuevaSalidaStarsoft.CANOMTRA = null;
                                    nuevaSalidaStarsoft.CADIRTRA = null;
                                    nuevaSalidaStarsoft.CARUCTRA = null;
                                    nuevaSalidaStarsoft.CAPLATRA = null;
                                    nuevaSalidaStarsoft.CANROIMP = null;
                                    nuevaSalidaStarsoft.CACODLIQ = null;
                                    nuevaSalidaStarsoft.CAESTIMP = null;
                                    nuevaSalidaStarsoft.CACIERRE = false;
                                    nuevaSalidaStarsoft.CATIPDEP = null;
                                    nuevaSalidaStarsoft.CAZONAF = null;
                                    nuevaSalidaStarsoft.FLAGGS = false;
                                    nuevaSalidaStarsoft.ASIENTO = false;
                                    nuevaSalidaStarsoft.CAFLETE = 0M;
                                    nuevaSalidaStarsoft.CAORDFAB = "";
                                    nuevaSalidaStarsoft.CAPEDREFE = null;
                                    nuevaSalidaStarsoft.CAIMPORTACION = false;
                                    nuevaSalidaStarsoft.CANROCAJAS = 0;
                                    nuevaSalidaStarsoft.CAPESOTOTAL = 0M;
                                    nuevaSalidaStarsoft.CADESPACHO = false;
                                    nuevaSalidaStarsoft.LINVCODIGO = null;
                                    nuevaSalidaStarsoft.COD_DIRECCION = null;
                                    nuevaSalidaStarsoft.COSTOMIN = 0M;
                                    nuevaSalidaStarsoft.CAINTERFACE = 0;
                                    nuevaSalidaStarsoft.CACTACONT = null;
                                    nuevaSalidaStarsoft.CACONTROLSTOCK = "N";
                                    nuevaSalidaStarsoft.CANOMRECEP = null;
                                    nuevaSalidaStarsoft.CADNIRECEP = null;
                                    nuevaSalidaStarsoft.CFDIREREFE = null;
                                    nuevaSalidaStarsoft.REG_COMPRA = false;
                                    nuevaSalidaStarsoft.OC_NI_GUIA = false;
                                    nuevaSalidaStarsoft.COD_AUDITORIA = "0";
                                    nuevaSalidaStarsoft.COD_MODULO = "03";
                                    nuevaSalidaStarsoft.NO_GIRO_NEGOCIO = false;
                                    nuevaSalidaStarsoft.MOTIVO_ANULACION_DOC_ELECTRONICO = null;
                                    nuevaSalidaStarsoft.DOCUMENTO_ELECTRONICO = null;
                                    nuevaSalidaStarsoft.GS_BAJA = null;
                                    nuevaSalidaStarsoft.CADocumentoImportado = null;
                                    nuevaSalidaStarsoft.SOLICITANTE = null;
                                    nuevaSalidaStarsoft.DOCUMENTO_CONTINGENCIA = null;
                                    nuevaSalidaStarsoft.GE_BAJA = null;

                                    _starsoft.MOVALMCAB.Add(nuevaSalidaStarsoft);
                                    _starsoft.SaveChanges();
                                    #endregion

                                    #region Actualizar Registro Almacén Starsoft
                                    var registroAlmacenStarsoft = _starsoft.TABALM.ToList().FirstOrDefault(x => Int32.Parse(x.TAALMA) == movimiento.almacen);

                                    if (registroAlmacenStarsoft != null)
                                    {
                                        registroAlmacenStarsoft.TANUMSAL = nuevoFolio;
                                        _starsoft.SaveChanges();
                                    }
                                    #endregion

                                    var partidaContador = 1;
                                    var listaInsumosStarsoft = _starsoft.MAEART.ToList();
                                    var listaAlmacenesStarsoft = _starsoft.TABALM.ToList();
                                    var listaCC = _context.tblP_CC.ToList();

                                    foreach (var det in movimiento.detalle)
                                    {
                                        if (det.precio <= 0)
                                        {
                                            throw new Exception("La partida " + partidaContador + " tiene un costo inválido.");
                                        }

                                        #region Guardar Detalle SIGOPLAN
                                        var nuevaSalidaDet = new tblAlm_MovimientosDet
                                        {
                                            almacen = nuevaSalida.almacen,
                                            tipo_mov = 53,
                                            numero = nuevoFolio,
                                            partida = partidaContador,
                                            insumo = det.insumo,
                                            comentarios = det.comentarios,
                                            area = det.area ?? 0,
                                            cuenta = det.cuenta ?? 0,
                                            cantidad = det.cantidad,
                                            precio = det.precio,
                                            importe = det.importe,
                                            id_resguardo = 0,
                                            area_alm = det.area_alm ?? "",
                                            lado_alm = det.lado_alm ?? "",
                                            estante_alm = det.estante_alm ?? "",
                                            nivel_alm = det.nivel_alm ?? "",
                                            transporte = "",
                                            estatusHabilitado = true
                                        };

                                        _context.tblAlm_MovimientosDet.Add(nuevaSalidaDet);
                                        _context.SaveChanges();
                                        #endregion

                                        var objInsumo = listaInsumosStarsoft.FirstOrDefault(e => e.ACODIGO == ("0" + det.insumo.ToString()));

                                        #region Guardar Detalle Starsoft
                                        _starsoft.MovAlmDet.Add(new MovAlmDet()
                                        {
                                            DEALMA = almacenStarsoft,
                                            DETD = "NS",
                                            DENUMDOC = nuevoFolio.ToString("D10"),
                                            DEITEM = partidaContador,
                                            DECODIGO = "0" + det.insumo.ToString(),
                                            DECODREF = null,
                                            DECANTID = det.cantidad,
                                            DECANTENT = 0M,
                                            DECANREF = 0M,
                                            DECANFAC = 0M,
                                            DEORDEN = null,
                                            DEPREUNI = det.precio,
                                            DEPRECIO = 0M,
                                            DEPRECI1 = 0M,
                                            DEDESCTO = 0M,
                                            DESTOCK = null,
                                            DEIGV = 0M,
                                            DEIMPMN = 1,
                                            DEIMPUS = 0,
                                            DESERIE = null,
                                            DESITUA = null,
                                            DEFECDOC = null,
                                            DECENCOS = movimiento.cc,
                                            DERFALMA = null,
                                            DETR = null,
                                            DEESTADO = "V",
                                            DECODMOV = "TD",
                                            DEVALTOT = 0,
                                            DECOMPRO = null,
                                            DECODMON = "MN",
                                            DETIPO = null,
                                            DETIPCAM = tipoCambioPeru,
                                            DEPREVTA = null,
                                            DEMONVTA = null,
                                            DEFECVEN = null,
                                            DEDEVOL = 0M,
                                            DESOLI = null,
                                            DEDESCRI = objInsumo.ADESCRI,
                                            DEPORDES = 0M,
                                            DEIGVPOR = 0M,
                                            DEDESCLI = 0M,
                                            DEDESESP = 0M,
                                            DENUMFAC = null,
                                            DELOTE = null,
                                            DEUNIDAD = objInsumo.AUNIDAD,
                                            DECANTBRUTA = 0M,
                                            DEDSCTCANTBRUTA = 0M,
                                            DEORDFAB = "",
                                            DEQUIPO = null,
                                            DEFLETE = 0M,
                                            DEITEMI = null, //????????
                                            DEGLOSA = "",
                                            DEVALORIZADO = true,
                                            DESECUENORI = null,
                                            DEREFERENCIA = null,
                                            UMREFERENCIA = null,
                                            CANTREFERENCIA = 0M,
                                            DECUENTA = null,
                                            DETEXTO = null,
                                            CTA_CONSUMO = null,
                                            CODPARTE = "",
                                            CODPLANO = "",
                                            DETPRODUCCION = 0,
                                            MPMA = "",
                                            PorcentajeCosto = 0M,
                                            SALDO_NC = null,
                                            DEPRECIOREF = 0M,
                                        });
                                        _starsoft.SaveChanges();
                                        #endregion

                                        #region Insert/Update STKART
                                        var registroSTKART = _starsoft.STKART.ToList().FirstOrDefault(e => e.STALMA == almacenStarsoft && e.STCODIGO == ("0" + det.insumo.ToString()));

                                        if (registroSTKART != null)
                                        {
                                            registroSTKART.STSKDIS -= det.cantidad;
                                            registroSTKART.STKPREPRO = calcularCostoPromedioStarsoft(53, nuevaSalida.almacen, "0" + det.insumo, det.cantidad, det.precio, _starsoft);
                                            _starsoft.SaveChanges();
                                        }
                                        else
                                        {
                                            _starsoft.STKART.Add(new STKART()
                                            {
                                                STALMA = almacenStarsoft,
                                                STCODIGO = ("0" + det.insumo.ToString()),
                                                STSKDIS = det.cantidad,
                                                STSKREF = 0M,
                                                STSKMIN = 0M,
                                                STSKMAX = 0M,
                                                STPUNREP = 0M,
                                                STSEMREP = 0M,
                                                STTIPREP = null,
                                                STUBIALM = null,
                                                STLOTCOM = 0M,
                                                STTIPCOM = null,
                                                STSKCOM = 0M,
                                                STKPREPRO = 0M,
                                                STKPREULT = 0M,
                                                STKFECULT = DateTime.Now.Date,
                                                STKPREPROUS = 0M,
                                                CANTREFERENCIA = 0M,
                                            });
                                            _starsoft.SaveChanges();
                                        }
                                        #endregion

                                        #region Insert/Update MORESMES
                                        var registroMoResMes = _starsoft.MoResMes.ToList().FirstOrDefault(e =>
                                            e.SMALMA == almacenStarsoft &&
                                            e.SMMESPRO == (DateTime.Now.Year.ToString() + DateTime.Now.ToString("MM")) &&
                                            e.SMCODIGO == ("0" + det.insumo.ToString())
                                        );

                                        if (registroMoResMes != null)
                                        {
                                            registroMoResMes.SMCANSAL += det.cantidad;
                                            _starsoft.SaveChanges();
                                        }
                                        else
                                        {
                                            var objCrearMoResMes = new MoResMes();
                                            objCrearMoResMes.SMALMA = almacenStarsoft;
                                            objCrearMoResMes.SMCODIGO = ("0" + det.insumo.ToString());
                                            objCrearMoResMes.SMMESPRO = (DateTime.Now.Year.ToString() + DateTime.Now.ToString("MM"));
                                            objCrearMoResMes.SMUSPREUNI = 0M; //CAMBIAR POR EL PRESIO ADECUEDO DEPENDE EL TIPO DE MONEDA CHECAR EN OTRAS TABLAS
                                            objCrearMoResMes.SMMNPREUNI = 0M; //CAMBIAR POR EL PRESIO ADECUEDO DEPENDE EL TIPO DE MONEDA
                                            objCrearMoResMes.SMUSPREANT = 0M;
                                            objCrearMoResMes.SMULTMOV = null;
                                            objCrearMoResMes.SMCANENT = 0M;
                                            objCrearMoResMes.SMCANSAL = det.cantidad;
                                            objCrearMoResMes.SMANTCAN = 0M;
                                            objCrearMoResMes.SMMNANTVAL = 0M;
                                            objCrearMoResMes.SMMNACTVAL = 0M;
                                            objCrearMoResMes.SMUSANTVAL = 0M;
                                            objCrearMoResMes.SMUSACTVAL = 0M;
                                            objCrearMoResMes.SMUSENT = 0M;
                                            objCrearMoResMes.SMMNENT = 0M;
                                            objCrearMoResMes.SMUSSAL = 0;
                                            objCrearMoResMes.SMMNSAL = 0M;
                                            objCrearMoResMes.SMCUENTA = null;
                                            objCrearMoResMes.SMGRUPO = null;
                                            objCrearMoResMes.SMFAMILIA = null;
                                            objCrearMoResMes.SMLINEA = null;
                                            objCrearMoResMes.SMTIPO = null;
                                            objCrearMoResMes.SMSALDOINI = 0M;
                                            objCrearMoResMes.COD_MODULO = "03";
                                            objCrearMoResMes.COD_OPCION = "Men_TraRegEnt"; //??

                                            _starsoft.MoResMes.Add(objCrearMoResMes);
                                            _starsoft.SaveChanges();
                                        }
                                        #endregion

                                        #region Información Reporte
                                        movSalidas.Add(new salidasAlmacenDTO
                                        {
                                            centroCosto = listaCC.Where(x => x.cc == movimiento.cc && x.estatus).Select(x => x.descripcion).FirstOrDefault(),
                                            folioSalida = nuevoFolio.ToString(),
                                            almacen = listaAlmacenesStarsoft.Where(x => Int32.Parse(x.TAALMA) == movimiento.almacen).Select(x => x.TADESCRI).FirstOrDefault(),
                                            fechaSalida = nuevaSalida.fecha.Date,
                                            partida = partidaContador,
                                            insumo = det.insumo + "-" + objInsumo.ADESCRI ?? "",
                                            areaCuenta = "-",
                                            referencia = "",
                                            remision = "",
                                            cantidad = det.cantidad,
                                            precio = det.precio,
                                            importe = det.cantidad * det.precio,
                                            comentarios = movimiento.comentarios ?? "", //comentarios = salDet.comentarios ?? "",
                                            ordenCompra = nuevaSalida.orden_ct.ToString(),
                                            proveedor = "",
                                            direccion = "",
                                            ciudad = "",
                                            telefonos = "",

                                            area_alm = det.area_alm ?? "",
                                            lado_alm = det.lado_alm ?? "",
                                            estante_alm = det.estante_alm ?? "",
                                            nivel_alm = det.nivel_alm ?? ""
                                        });
                                        #endregion

                                        #region Restar cantidad recibida al detalle SIGOPLAN
                                        var partidaOrdenCompraSIGOPLAN = _context.tblCom_OrdenCompraDet.FirstOrDefault(x =>
                                            x.cc == movimiento.cc &&
                                            x.numero == movimiento.orden_ct &&
                                            x.partida == det.partida_oc &&
                                            x.insumo == det.insumo
                                        );

                                        if (partidaOrdenCompraSIGOPLAN != null)
                                        {
                                            partidaOrdenCompraSIGOPLAN.cant_recibida = partidaOrdenCompraSIGOPLAN.cant_recibida - det.cantidad;
                                            _context.SaveChanges();
                                        }
                                        #endregion

                                        #region Restar cantidad recibida al detalle Starsoft
                                        var registroDetalleStarsoft = _starsoft.COMOVD.ToList().FirstOrDefault(x => Int32.Parse(x.OC_CNUMORD) == movimiento.orden_ct && Int32.Parse(x.OC_CITEM) == det.partida_oc);

                                        if (registroDetalleStarsoft != null)
                                        {
                                            registroDetalleStarsoft.OC_NCANTEN -= det.cantidad;
                                            registroDetalleStarsoft.OC_NCANSAL += det.cantidad;
                                            registroDetalleStarsoft.OC_CESTADO = det.cantidad == registroDetalleStarsoft.OC_NCANTID ? "01" : "03";
                                            _starsoft.SaveChanges();
                                        }
                                        #endregion

                                        partidaContador++;
                                    }

                                    if (nuevaSalida.total <= 0)
                                    {
                                        throw new Exception("El total no puede ser igual o menor a cero.");
                                    }

                                    var cantidadRecibida = listaRegistrosCompraDetalle.Sum(x => x.cant_recibida);
                                    var cantidadDevuelta = movimiento.detalle.Sum(x => x.cantidad);

                                    var flagParcial = (cantidadRecibida - cantidadDevuelta) > 0;

                                    #region Update Compra SIGOPLAN
                                    registroCompra.estatus = flagParcial ? "P" : " ";
                                    _context.SaveChanges();
                                    #endregion

                                    #region Update Compra Starsoft
                                    var registroCompraStarsoft = _starsoft.COMOVC.ToList().FirstOrDefault(x => Int32.Parse(x.OC_CNUMORD) == registroCompra.numero);

                                    registroCompraStarsoft.OC_CSOLICT = flagParcial ? "03" : "01";
                                    _starsoft.SaveChanges();
                                    #endregion
                                }
                                else
                                {
                                    #region Guardar Encabezado SIGOPLAN
                                    tblAlm_Movimientos nuevaSalida = new tblAlm_Movimientos
                                    {
                                        almacen = movimiento.almacen,
                                        tipo_mov = 53,
                                        numero = nuevoFolio,
                                        cc = movimiento.cc.ToUpper(),
                                        compania = 1,
                                        periodo = DateTime.Now.Month,
                                        ano = DateTime.Now.Year,
                                        orden_ct = movimiento.orden_ct,
                                        frente = 0,
                                        fecha = DateTime.Now.Date,
                                        proveedor = 0,
                                        total = movimiento.total,
                                        estatus = "A",
                                        transferida = "N",
                                        alm_destino = 0,
                                        cc_destino = "",
                                        comentarios = movimiento.comentarios,
                                        tipo_trasp = "C",
                                        tipo_cambio = 1,
                                        estatusHabilitado = true,
                                        numeroReq = 0
                                    };

                                    _context.tblAlm_Movimientos.Add(nuevaSalida);
                                    _context.SaveChanges();
                                    #endregion

                                    var partidaContador = 1;
                                    var listaInsumosStarsoft = _starsoft.MAEART.ToList();
                                    var listaAlmacenesStarsoft = _starsoft.TABALM.ToList();
                                    var listaCC = _context.tblP_CC.ToList();

                                    foreach (var det in movimiento.detalle)
                                    {
                                        #region Guardar Detalle SIGOPLAN
                                        var nuevaSalidaDet = new tblAlm_MovimientosDet
                                        {
                                            almacen = nuevaSalida.almacen,
                                            tipo_mov = 53,
                                            numero = nuevoFolio,
                                            partida = partidaContador,
                                            insumo = det.insumo,
                                            comentarios = det.comentarios,
                                            area = det.area ?? 0,
                                            cuenta = det.cuenta ?? 0,
                                            cantidad = det.cantidad,
                                            precio = det.precio,
                                            importe = det.importe,
                                            id_resguardo = 0,
                                            area_alm = det.area_alm ?? "",
                                            lado_alm = det.lado_alm ?? "",
                                            estante_alm = det.estante_alm ?? "",
                                            nivel_alm = det.nivel_alm ?? "",
                                            transporte = "",
                                            estatusHabilitado = true
                                        };

                                        _context.tblAlm_MovimientosDet.Add(nuevaSalidaDet);
                                        _context.SaveChanges();
                                        #endregion

                                        var objInsumo = listaInsumosStarsoft.FirstOrDefault(e => e.ACODIGO == ("0" + det.insumo.ToString()));

                                        #region Información Reporte
                                        movSalidas.Add(new salidasAlmacenDTO
                                        {
                                            centroCosto = listaCC.Where(x => x.cc == movimiento.cc && x.estatus).Select(x => x.descripcion).FirstOrDefault(),
                                            folioSalida = nuevoFolio.ToString(),
                                            almacen = listaAlmacenesStarsoft.Where(x => Int32.Parse(x.TAALMA) == movimiento.almacen).Select(x => x.TADESCRI).FirstOrDefault(),
                                            fechaSalida = nuevaSalida.fecha.Date,
                                            partida = partidaContador,
                                            insumo = det.insumo + "-" + objInsumo.ADESCRI ?? "",
                                            areaCuenta = "-",
                                            referencia = "",
                                            remision = "",
                                            cantidad = det.cantidad,
                                            precio = det.precio,
                                            importe = det.cantidad * det.precio,
                                            comentarios = movimiento.comentarios ?? "", //comentarios = salDet.comentarios ?? "",
                                            ordenCompra = nuevaSalida.orden_ct.ToString(),
                                            proveedor = "",
                                            direccion = "",
                                            ciudad = "",
                                            telefonos = "",

                                            area_alm = det.area_alm ?? "",
                                            lado_alm = det.lado_alm ?? "",
                                            estante_alm = det.estante_alm ?? "",
                                            nivel_alm = det.nivel_alm ?? ""
                                        });
                                        #endregion

                                        #region Restar cantidad recibida al detalle SIGOPLAN
                                        var partidaOrdenCompraSIGOPLAN = _context.tblCom_OrdenCompraDet.FirstOrDefault(x =>
                                            x.cc == movimiento.cc &&
                                            x.numero == movimiento.orden_ct &&
                                            x.partida == det.partida_oc &&
                                            x.insumo == det.insumo
                                        );

                                        if (partidaOrdenCompraSIGOPLAN != null)
                                        {
                                            partidaOrdenCompraSIGOPLAN.cant_recibida = partidaOrdenCompraSIGOPLAN.cant_recibida - det.cantidad;
                                            _context.SaveChanges();
                                        }
                                        #endregion

                                        partidaContador++;
                                    }

                                    if (nuevaSalida.total <= 0)
                                    {
                                        throw new Exception("El total no puede ser igual o menor a cero.");
                                    }

                                    var cantidadRecibida = listaRegistrosCompraDetalle.Sum(x => x.cant_recibida);
                                    var cantidadDevuelta = movimiento.detalle.Sum(x => x.cantidad);

                                    var flagParcial = (cantidadRecibida - cantidadDevuelta) > 0;

                                    #region Update Compra SIGOPLAN
                                    registroCompra.estatus = flagParcial ? "P" : " ";
                                    _context.SaveChanges();
                                    #endregion
                                }

                                dbStarsoftTransaction.Commit();
                                dbSigoplanTransaction.Commit();
                            }
                            catch (Exception e)
                            {
                                dbStarsoftTransaction.Rollback();
                                dbSigoplanTransaction.Rollback();

                                LogError(12, 0, "AlmacenController", "guardarDevolucionSalidaPeru", e, AccionEnum.AGREGAR, 0, movimiento);

                                throw new Exception(e.Message);
                            }
                        }
                    }
                }
                #endregion
            }
            else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
            {
                #region COLOMBIA
                var empleado = 0;
                var usuarioSigoplan = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                if (usuarioSigoplan != null)
                {
                    empleado = usuarioSigoplan.empleado;
                }

                var compraENKONTROL = ((List<dynamic>)consultaCheckProductivo(
                    string.Format(@"SELECT * FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", movimiento.cc, movimiento.orden_ct)
                ).ToObject<List<dynamic>>())[0];
                var compraDetalleENKONTROL = (List<OrdenCompraDetDTO>)consultaCheckProductivo(
                    string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", movimiento.cc, movimiento.orden_ct)
                ).ToObject<List<OrdenCompraDetDTO>>();

                //#region Validación familias 101 y 102
                //if (vSesiones.sesionEmpresaActual == 2)
                //{
                //    if (movimiento.almacen < 600 || movimiento.almacen > 620)
                //    {
                //        if (movimiento.detalle.Select(x => x.insumo.ToString().Substring(0, 3)).Any(x => x == "101") || movimiento.detalle.Select(x => x.insumo.ToString().Substring(0, 3)).Any(x => x == "102"))
                //        {
                //            List<int> insumosExcepciones = _context.tblAlm_Validacion_101_102_InsumosExcepciones.Where(x => x.estatus).Select(x => x.insumo).ToList();
                //            List<int> insumosMovimiento = movimiento.detalle.Select(x => x.insumo).ToList();

                //            if (insumosExcepciones.Count() > 0)
                //            {
                //                foreach (int insMov in insumosMovimiento)
                //                {
                //                    if (!insumosExcepciones.Contains(insMov))
                //                    {
                //                        throw new Exception("No se puede dar salida a las familias de insumo 101 y 102. Insumo: \"" + insMov + "\".");
                //                    }
                //                }
                //            }
                //            else
                //            {
                //                throw new Exception("No se puede dar salida a las familias de insumo 101 y 102.");
                //            }
                //        }
                //    }
                //}
                //#endregion

                #region Validación Inventariables
                var registrosGrupoInsumo = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM grupos_insumo")).ToObject<List<dynamic>>();

                foreach (var det in movimiento.detalle)
                {
                    var tipo_insumo = Int32.Parse(det.insumo.ToString().Substring(0, 1));
                    var grupo_insumo = Int32.Parse(det.insumo.ToString().Substring(1, 2));
                    var registroGrupoInsumo = registrosGrupoInsumo.FirstOrDefault(x => (int)x.tipo_insumo == tipo_insumo && (int)x.grupo_insumo == grupo_insumo);

                    if (registroGrupoInsumo != null)
                    {
                        if ((string)registroGrupoInsumo.inventariado != "I")
                        {
                            throw new Exception(string.Format(@"El insumo ""{0}"" no es inventariable.", det.insumo));
                        }
                    }
                    else
                    {
                        throw new Exception(string.Format(@"No se encuentra la información del grupo de insumo para el insumo ""{0}"".", det.insumo));
                    }
                }
                #endregion

                #region Validar Existencias
                foreach (var det in movimiento.detalle)
                {
                    var entradasEK = consultaCheckProductivo(
                        string.Format(@"SELECT 
                                        det.insumo, 
                                        (CAST(det.insumo AS Varchar) + '-' + ins.descripcion) AS insumoDesc, 
                                        SUM(det.cantidad) AS cantidad
                                    FROM si_movimientos mov 
                                        INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                                        INNER JOIN insumos ins ON det.insumo = ins.insumo 
                                    WHERE 
                                        mov.almacen = {0} AND 
                                        det.insumo = {1} AND 
                                        det.tipo_mov < 50 
                                    GROUP BY det.insumo, ins.descripcion",
                                        det.almacen, det.insumo));

                    var salidasEK = consultaCheckProductivo(
                        string.Format(@"SELECT 
                                        det.insumo, 
                                        (CAST(det.insumo AS Varchar) + '-' + ins.descripcion) AS insumoDesc, 
                                        SUM(det.cantidad) AS cantidad
                                    FROM si_movimientos mov 
                                        INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                                        INNER JOIN insumos ins ON det.insumo = ins.insumo 
                                    WHERE 
                                        mov.almacen = {0} AND 
                                        det.insumo = {1} AND 
                                        det.tipo_mov > 50 
                                    GROUP BY det.insumo, ins.descripcion",
                                        det.almacen, det.insumo));

                    if (entradasEK != null)
                    {
                        var entradas = (List<UbicacionDetalleDTO>)entradasEK.ToObject<List<UbicacionDetalleDTO>>();

                        if (salidasEK != null)
                        {
                            var salidas = (List<UbicacionDetalleDTO>)salidasEK.ToObject<List<UbicacionDetalleDTO>>();

                            foreach (var ent in entradas)
                            {
                                var salida = salidas.FirstOrDefault(x =>
                                        x.insumoDesc == ent.insumoDesc

                                    );

                                if (salida != null)
                                {
                                    ent.cantidad = ent.cantidad - Convert.ToDecimal(salida.cantidad, CultureInfo.InvariantCulture);
                                }
                            }
                        }

                        var existenciasInsumo = entradas.Sum(x => x.cantidad);
                        var salidaTotalPorInsumo = movimiento.detalle.Where(x =>
                            x.insumo == det.insumo).Sum(x => x.cantidad);

                        if (existenciasInsumo < salidaTotalPorInsumo)
                        {
                            //var ubicacion = det.area_alm + "-" + det.lado_alm + "-" + det.estante_alm + "-" + det.nivel_alm;
                            var ubicacion = "";

                            throw new Exception("No se guardó la información. La cantidad solicitada del insumo \"" + det.insumo + "\" sobrepasa las existencias (" + existenciasInsumo + ") en la ubicación \"" + ubicacion + "\".");
                        }
                    }
                    else
                    {
                        //var ubicacion = det.area_alm + "-" + det.lado_alm + "-" + det.estante_alm + "-" + det.nivel_alm;
                        var ubicacion = "";

                        throw new Exception("No se guardó la información. No hay existencias para el insumo \"" + det.insumo + "\" en la ubicación \"" + ubicacion + "\".");
                    }
                }
                #endregion

                //#region Validación Permisos Familias
                //if (vSesiones.sesionEmpresaActual == 2)
                //{
                //    var permisosFamilias = getPermisosFamilia(movimiento.cc);

                //    if (permisosFamilias.Count > 0)
                //    {
                //        if (!permisosFamilias.Any(x => x.familia == "*"))
                //        {
                //            var familias = movimiento.detalle.Select(x => x.insumo.ToString().Substring(0, 3)).ToList();

                //            foreach (var fam in familias)
                //            {
                //                if (!permisosFamilias.Select(x => x.familia).Contains(fam))
                //                {
                //                    throw new Exception(
                //                        string.Format(@"Bloqueo de familia de insumo '{0}' para el centro de costo '{1}'. No se puede proceder con la salida.", fam, movimiento.cc)
                //                    );
                //                }
                //            }
                //        }
                //    }
                //}
                //#endregion

                #region Validación Sobrepaso de Devolución
                foreach (var det in movimiento.detalle)
                {
                    var partidaCompra = compraDetalleENKONTROL.FirstOrDefault(x => x.partida == det.partida_oc);

                    if (partidaCompra != null)
                    {
                        if (det.cantidad > partidaCompra.cant_recibida)
                        {
                            throw new Exception(
                                string.Format(@"No se puede realizar la devolución. La cantidad recibida para la partida {0} es de {1}.", det.partida_oc, partidaCompra.cant_recibida)
                            );
                        }
                    }
                    else
                    {
                        throw new Exception(string.Format(@"Error al consulta la información. No se encuentra la partida '{0}' de la compra.", det.partida_oc));
                    }
                }
                #endregion

                #region Validación Permiso Devolución
                if (vSesiones.sesionUsuarioDTO.id != 3807)
                {
                    var permisoDevolucion = _context.tblAlm_PermisoDevolucion.FirstOrDefault(x => x.estatus && x.empleado == empleado);

                    if (permisoDevolucion == null)
                    {
                        throw new Exception("No tiene permiso para realizar movimientos de devolución.");
                    }
                }
                #endregion

                #region Validación Factura
                if (Convert.ToDecimal(compraENKONTROL.total_fac, CultureInfo.InvariantCulture) > 0)
                {
                    throw new Exception("La compra ya tiene factura.");
                }
                #endregion

                #region Validación Almacén Activo
                var almacenEK = _contextEnkontrol.Select<dynamic>(getEnkontrolEnumADM(),
                    new OdbcConsultaDTO()
                    {
                        consulta = @"SELECT * FROM si_almacen WHERE almacen = ?",
                        parametros = new List<OdbcParameterDTO>() {
                                        new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = movimiento.almacen }
                                    }
                    }
                );

                if (almacenEK.Count() == 0)
                {
                    throw new Exception("No se encuentra la información del almacén.");
                }

                if ((string)almacenEK[0].bit_mp != "S")
                {
                    throw new Exception("El almacén no está activo.");
                }
                #endregion

                using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                {
                    using (var con = checkConexionProductivo())
                    {
                        using (var trans = con.BeginTransaction())
                        {
                            try
                            {
                                tblAlm_Movimientos nuevaSalida = new tblAlm_Movimientos();

                                var ultimoMovimientoEK = consultaCheckProductivo(
                                    string.Format(@"SELECT 
                                                    TOP 1 numero 
                                                FROM si_movimientos 
                                                WHERE almacen = {0} AND tipo_mov = {1} 
                                                ORDER BY numero DESC", movimiento.almacen, 53)
                                );

                                var nuevoNumero = 0;

                                if (ultimoMovimientoEK != null)
                                {
                                    nuevoNumero = ((List<SurtidoDetDTO>)ultimoMovimientoEK.ToObject<List<SurtidoDetDTO>>())[0].numero;
                                }

                                nuevaSalida = new tblAlm_Movimientos
                                {
                                    almacen = movimiento.almacen,
                                    tipo_mov = 53,
                                    numero = nuevoNumero + 1,
                                    cc = movimiento.cc.ToUpper(),
                                    compania = 1,
                                    periodo = DateTime.Now.Month,
                                    ano = DateTime.Now.Year,
                                    orden_ct = movimiento.orden_ct,
                                    frente = 0,
                                    fecha = DateTime.Now.Date,
                                    proveedor = compraENKONTROL.proveedor,
                                    total = movimiento.total,
                                    estatus = "A",
                                    transferida = "N",
                                    alm_destino = 0,
                                    cc_destino = "",
                                    comentarios = movimiento.comentarios,
                                    tipo_trasp = "C",
                                    tipo_cambio = 1,
                                    estatusHabilitado = true,
                                    numeroReq = 0
                                };

                                _context.tblAlm_Movimientos.Add(nuevaSalida);
                                _context.SaveChanges();

                                var partidaContador = 1;

                                foreach (var det in movimiento.detalle)
                                {
                                    var partidaMovimiento = partidaContador++;

                                    var nuevaSalidaDet = new tblAlm_MovimientosDet
                                    {
                                        almacen = nuevaSalida.almacen,
                                        tipo_mov = 53,
                                        numero = nuevoNumero + 1,
                                        partida = partidaMovimiento,
                                        insumo = det.insumo,
                                        comentarios = det.comentarios,
                                        area = det.area ?? 0,
                                        cuenta = det.cuenta ?? 0,
                                        cantidad = det.cantidad,
                                        precio = det.precio,
                                        importe = det.importe,
                                        id_resguardo = 0,
                                        area_alm = det.area_alm ?? "",
                                        lado_alm = det.lado_alm ?? "",
                                        estante_alm = det.estante_alm ?? "",
                                        nivel_alm = det.nivel_alm ?? "",
                                        transporte = "",
                                        estatusHabilitado = true
                                    };

                                    _context.tblAlm_MovimientosDet.Add(nuevaSalidaDet);
                                    _context.SaveChanges();
                                }

                                if (nuevaSalida.total <= 0)
                                {
                                    throw new Exception("El total no puede ser igual o menor a cero.");
                                }

                                var count = 0;

                                var consulta = @"INSERT INTO DBA.si_movimientos 
                                                (almacen, tipo_mov, numero, cc, compania, periodo, ano, orden_ct, frente, fecha, proveedor, total, estatus, 
                                                transferida, poliza, empleado, alm_destino, cc_destino, comentarios, tipo_trasp, numero_destino, tp, year_poliza, 
                                                mes_poliza, tipo_cambio, hora, fecha_modifica, empleado_modifica, destajista, obra, id_residente, factura, sector_id, 
                                                tc_cc, paquete, tipo_cargo, cargo_destajista, cargo_id_residente, embarque, orden_prod, numero_prevale, obra_destino, indica_prov) 
                                                VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                using (var cmd = new OdbcCommand(consulta))
                                {
                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@almacen", OdbcType.Numeric).Value = nuevaSalida.almacen;
                                    parameters.Add("@tipo_mov", OdbcType.Numeric).Value = nuevaSalida.tipo_mov;
                                    parameters.Add("@numero", OdbcType.Numeric).Value = nuevaSalida.numero;
                                    parameters.Add("@cc", OdbcType.Char).Value = nuevaSalida.cc ?? "";
                                    parameters.Add("@compania", OdbcType.Numeric).Value = nuevaSalida.compania;
                                    parameters.Add("@periodo", OdbcType.Numeric).Value = nuevaSalida.periodo;
                                    parameters.Add("@ano", OdbcType.Numeric).Value = nuevaSalida.ano;
                                    parameters.Add("@orden_ct", OdbcType.Numeric).Value = nuevaSalida.orden_ct;
                                    parameters.Add("@frente", OdbcType.Numeric).Value = nuevaSalida.frente;
                                    parameters.Add("@fecha", OdbcType.Date).Value = nuevaSalida.fecha.Date;
                                    parameters.Add("@proveedor", OdbcType.Numeric).Value = nuevaSalida.proveedor;
                                    parameters.Add("@total", OdbcType.Numeric).Value = nuevaSalida.total;
                                    parameters.Add("@estatus", OdbcType.Char).Value = nuevaSalida.estatus ?? "";
                                    parameters.Add("@transferida", OdbcType.Char).Value = nuevaSalida.transferida ?? "";
                                    parameters.Add("@poliza", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@empleado", OdbcType.Numeric).Value = empleado;
                                    parameters.Add("@alm_destino", OdbcType.Numeric).Value = nuevaSalida.alm_destino;
                                    parameters.Add("@cc_destino", OdbcType.Char).Value = nuevaSalida.cc_destino ?? "";
                                    parameters.Add("@comentarios", OdbcType.Char).Value = nuevaSalida.comentarios ?? "";
                                    parameters.Add("@tipo_trasp", OdbcType.Char).Value = nuevaSalida.tipo_trasp ?? "";
                                    parameters.Add("@numero_destino", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@tp", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@year_poliza", OdbcType.Numeric).Value = DateTime.Now.Year;
                                    parameters.Add("@mes_poliza", OdbcType.Numeric).Value = DateTime.Now.Month;
                                    parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = nuevaSalida.tipo_cambio;
                                    parameters.Add("@hora", OdbcType.Time).Value = DateTime.Now.TimeOfDay;
                                    parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                    parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = empleado;
                                    parameters.Add("@destajista", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@factura", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@tc_cc", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@paquete", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@tipo_cargo", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@cargo_Destajista", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@cargo_id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@embarque", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@orden_prod", OdbcType.Numeric).Value = DBNull.Value;
                                    //parameters.Add("@folio_traspaso", OdbcType.Numeric).Value = DBNull.Value;
                                    //parameters.Add("@bit_sin_ubicacion", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@numero_prevale", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@obra_destino", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@indica_prov", OdbcType.Numeric).Value = DBNull.Value;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;

                                    count += cmd.ExecuteNonQuery();
                                }

                                var cantidadRecibida = compraDetalleENKONTROL.Sum(x => x.cantidad);
                                var cantidadDevuelta = movimiento.detalle.Sum(x => x.cantidad);

                                var flagParcial = (cantidadRecibida - cantidadDevuelta) > 0;

                                #region Update Compra SIGOPLAN
                                var compraSIGOPLAN = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.cc == movimiento.cc && x.numero == movimiento.orden_ct && x.estatusRegistro);

                                if (compraSIGOPLAN != null)
                                {
                                    compraSIGOPLAN.estatus = flagParcial ? "P" : " ";

                                    _context.Entry(compraSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                    _context.SaveChanges();
                                }
                                #endregion

                                var ccDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM cc WHERE cc = '{0}' AND st_ppto != 'T'", movimiento.cc));
                                var ccDesc = (string)(((List<dynamic>)ccDescEK.ToObject<List<dynamic>>())[0].descripcion);
                                var almacenDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", nuevaSalida.almacen));
                                var almacenDesc = (string)(((List<dynamic>)almacenDescEK.ToObject<List<dynamic>>())[0].descripcion);

                                var partidaContadorEK = 1;

                                decimal subTotalDevuelto = 0;

                                foreach (var salDet in movimiento.detalle)
                                {
                                    var insumoDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM insumos WHERE insumo = {0}", salDet.insumo));
                                    var insumoDesc = (string)(((List<dynamic>)insumoDescEK.ToObject<List<dynamic>>())[0].descripcion);
                                    var importe = salDet.cantidad * salDet.precio;
                                    var partidaMovimientoEK = partidaContadorEK++;
                                    decimal costoPromedio = getCostoPromedioKardex(salDet.almacen, salDet.insumo); //decimal costoPromedio = getCostoPromedioNuevo(salDet.almacen, salDet.insumo);

                                    if (salDet.precio <= 0 || importe <= 0)
                                    {
                                        throw new Exception("El precio y el importe no pueden ser igual o menor a cero.");
                                    }

                                    var consultaDet = @"INSERT INTO DBA.si_movimientos_det 
                                         (almacen, tipo_mov, numero, partida, insumo, comentarios, area, cuenta, cantidad, precio, importe, 
                                         partida_oc, costo_prom, obra, manzana_ini, lote_ini, interior_ini, manzana_fin, lote_fin, interior_fin, 
                                         remision, sector_id, lote_id, folio_oc, numero_prevale, frente_ppto, partida_ppto, numero_economico, iva,
                                         porcent_iva, folio, kit, tarjeta, secuencia) 
                                         VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                    using (var cmd = new OdbcCommand(consultaDet))
                                    {
                                        OdbcParameterCollection parameters = cmd.Parameters;

                                        parameters.Add("@almacen", OdbcType.Numeric).Value = salDet.almacen;
                                        parameters.Add("@tipo_mov", OdbcType.Numeric).Value = salDet.tipo_mov;
                                        parameters.Add("@numero", OdbcType.Numeric).Value = nuevoNumero + 1;
                                        parameters.Add("@partida", OdbcType.Numeric).Value = partidaMovimientoEK;
                                        parameters.Add("@insumo", OdbcType.Numeric).Value = salDet.insumo;
                                        parameters.Add("@comentarios", OdbcType.Char).Value = salDet.comentarios ?? "";
                                        parameters.Add("@area", OdbcType.Numeric).Value = salDet.area ?? 0;
                                        parameters.Add("@cuenta", OdbcType.Numeric).Value = salDet.cuenta ?? 0;
                                        parameters.Add("@cantidad", OdbcType.Numeric).Value = salDet.cantidad;
                                        parameters.Add("@precio", OdbcType.Numeric).Value = salDet.precio;
                                        parameters.Add("@importe", OdbcType.Numeric).Value = importe;
                                        parameters.Add("@partida_oc", OdbcType.Numeric).Value = salDet.partida_oc;
                                        parameters.Add("@costo_prom", OdbcType.Numeric).Value = costoPromedio;
                                        parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@manzana_ini", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@lote_ini", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@interior_ini", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@manzana_fin", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@lote_fin", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@interior_fin", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@remision", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@lote_id", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@folio_oc", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@numero_prevale", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@frente_ppto", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@partida_ppto", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@numero_economico", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@iva", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@porcent_iva", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@folio", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@kit", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@tarjeta", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@secuencia", OdbcType.Numeric).Value = DBNull.Value;
                                        //parameters.Add("@id_resguardo", OdbcType.Numeric).Value = DBNull.Value;
                                        //parameters.Add("@area_alm", OdbcType.Char).Value = salDet.area_alm ?? "";
                                        //parameters.Add("@lado_alm", OdbcType.Char).Value = salDet.lado_alm ?? "";
                                        //parameters.Add("@estante_alm", OdbcType.Char).Value = salDet.estante_alm ?? "";
                                        //parameters.Add("@nivel_alm", OdbcType.Char).Value = salDet.nivel_alm ?? "";
                                        //parameters.Add("@fecha_fisico", OdbcType.Date).Value = DBNull.Value;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;

                                        count += cmd.ExecuteNonQuery();

                                        movSalidas.Add(new salidasAlmacenDTO
                                        {
                                            centroCosto = ccDesc,
                                            folioSalida = (nuevoNumero + 1).ToString(),
                                            almacen = almacenDesc,
                                            fechaSalida = nuevaSalida.fecha.Date,
                                            partida = salDet.partida,
                                            insumo = salDet.insumo + "-" + insumoDesc ?? "",
                                            areaCuenta = (salDet.area ?? 0) + "-" + (salDet.cuenta ?? 0),
                                            referencia = "",
                                            remision = "",
                                            cantidad = salDet.cantidad,
                                            precio = salDet.precio,
                                            importe = (salDet.cantidad * salDet.precio),
                                            comentarios = movimiento.comentarios ?? "", //comentarios = salDet.comentarios ?? "",
                                            ordenCompra = nuevaSalida.orden_ct.ToString(),
                                            proveedor = "",
                                            direccion = "",
                                            ciudad = "",
                                            telefonos = "",
                                            area_alm = salDet.area_alm ?? "",
                                            lado_alm = salDet.lado_alm ?? "",
                                            estante_alm = salDet.estante_alm ?? "",
                                            nivel_alm = salDet.nivel_alm ?? "",
                                        });
                                    }

                                    #region Actualizar Tablas Acumula
                                    var objAcumula = new MovimientoDetalleEnkontrolDTO
                                    {
                                        insumo = salDet.insumo,
                                        cantidad = salDet.cantidad,
                                        precio = salDet.precio,
                                        tipo_mov = salDet.tipo_mov,
                                        costo_prom = costoPromedio
                                    };

                                    actualizarAcumula(nuevaSalida.almacen, nuevaSalida.cc, objAcumula, dbSigoplanTransaction, trans);
                                    #endregion

                                    if (movimiento.orden_ct > 0 && salDet.partida > 0)
                                    {
                                        #region Restar cantidad recibida SIGOPLAN
                                        var partidaOrdenCompraSIGOPLAN = _context.tblCom_OrdenCompraDet.FirstOrDefault(x =>
                                            x.cc == movimiento.cc &&
                                            x.numero == movimiento.orden_ct &&
                                            x.partida == salDet.partida &&
                                            x.insumo == salDet.insumo);

                                        if (partidaOrdenCompraSIGOPLAN != null)
                                        {
                                            partidaOrdenCompraSIGOPLAN.cant_recibida = partidaOrdenCompraSIGOPLAN.cant_recibida - salDet.cantidad;

                                            _context.Entry(partidaOrdenCompraSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                            _context.SaveChanges();
                                        }
                                        #endregion

                                        #region Restar cantidad recibida Enkontrol
                                        var partidaOrdenCompraEK = consultaCheckProductivo(
                                            string.Format(@"SELECT 
                                                            * 
                                                        FROM so_orden_compra_det 
                                                        WHERE cc = '{0}' AND numero = {1} AND partida = {2} AND insumo = {3}",
                                            movimiento.cc,
                                            movimiento.orden_ct,
                                            salDet.partida_oc,
                                            salDet.insumo)
                                        );

                                        if (partidaOrdenCompraEK != null)
                                        {
                                            var partidaOrdenCompra = ((List<dynamic>)partidaOrdenCompraEK.ToObject<List<dynamic>>())[0];
                                            var cantidadResultado = Convert.ToDecimal(partidaOrdenCompra.cant_recibida, CultureInfo.InvariantCulture) - salDet.cantidad;
                                            var importeDevuelto = salDet.cantidad * Convert.ToDecimal(partidaOrdenCompra.precio, CultureInfo.InvariantCulture);
                                            var importeResultado = Convert.ToDecimal(partidaOrdenCompra.imp_recibido, CultureInfo.InvariantCulture) - importeDevuelto;

                                            if (cantidadResultado < 0 || importeResultado < 0)
                                            {
                                                throw new Exception("Cantidad/Importe recibido con valor negativo para la partida \"" + salDet.partida + "\" con el insumo \"" + salDet.insumo + "\" en la compra.");
                                            }

                                            subTotalDevuelto += importeDevuelto;

                                            var consultaUpdateRecibido = @"
                                            UPDATE DBA.so_orden_compra_det 
                                            SET cant_recibida = ?, imp_recibido = ?, fecha_recibido = ?  
                                            WHERE cc = ? AND numero = ? AND partida = ? AND insumo = ?";

                                            using (var cmd = new OdbcCommand(consultaUpdateRecibido))
                                            {
                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                parameters.Add("@cant_recibida", OdbcType.Numeric).Value = cantidadResultado;
                                                parameters.Add("@imp_recibido", OdbcType.Numeric).Value = importeResultado;
                                                parameters.Add("@fecha_recibido", OdbcType.Date).Value =
                                                    cantidadResultado == 0 ? DBNull.Value :
                                                    partidaOrdenCompra.fecha_recibido.Value != null ? (DateTime)partidaOrdenCompra.fecha_recibido : (object)DBNull.Value;

                                                parameters.Add("@cc", OdbcType.Char).Value = movimiento.cc;
                                                parameters.Add("@numero", OdbcType.Numeric).Value = movimiento.orden_ct;
                                                parameters.Add("@partida", OdbcType.Numeric).Value = salDet.partida;
                                                parameters.Add("@insumo", OdbcType.Numeric).Value = salDet.insumo;

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;

                                                count += cmd.ExecuteNonQuery();
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("No se encuentra la información de la partida " + salDet.partida_oc + " con el insumo " + salDet.insumo + " de la compra.");
                                        }
                                        #endregion
                                    }
                                    else
                                    {
                                        LogError(0, 0, "AlmacenController", "guardarDevolucionSalida (No se actualizó el registro detalle de la compra)", null, AccionEnum.ACTUALIZAR, 0, movimiento);
                                    }
                                }

                                decimal ivaDevuelto = subTotalDevuelto * (Convert.ToDecimal(compraENKONTROL.porcent_iva, CultureInfo.InvariantCulture) / 100);
                                decimal subTotalRecibido = Convert.ToDecimal(compraENKONTROL.sub_tot_rec, CultureInfo.InvariantCulture) - subTotalDevuelto;
                                decimal ivaRecibido = Convert.ToDecimal(compraENKONTROL.iva_rec, CultureInfo.InvariantCulture) - ivaDevuelto;
                                decimal totalRecibido = subTotalRecibido + ivaRecibido;

                                #region Update Compra Enkontrol
                                var consultaUpdateCompra = @"
                                UPDATE DBA.so_orden_compra 
                                SET 
                                    estatus = ?, 
                                    sub_tot_rec = ?, 
                                    iva_rec = ?, 
                                    total_rec = ? 
                                WHERE cc = ? AND numero = ?";

                                using (var cmd = new OdbcCommand(consultaUpdateCompra))
                                {
                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@estatus", OdbcType.Char).Value = flagParcial ? "P" : " ";
                                    parameters.Add("@sub_tot_rec", OdbcType.Numeric).Value = subTotalRecibido;
                                    parameters.Add("@iva_rec", OdbcType.Numeric).Value = ivaRecibido;
                                    parameters.Add("@total_rec", OdbcType.Numeric).Value = totalRecibido;

                                    parameters.Add("@cc", OdbcType.Char).Value = movimiento.cc;
                                    parameters.Add("@numero", OdbcType.Numeric).Value = movimiento.orden_ct;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;

                                    count += cmd.ExecuteNonQuery();
                                }
                                #endregion

                                trans.Commit();
                                dbSigoplanTransaction.Commit();
                            }
                            catch (Exception e)
                            {
                                trans.Rollback();
                                dbSigoplanTransaction.Rollback();

                                LogError(12, 0, "AlmacenController", "guardarDevolucionSalida", e, AccionEnum.AGREGAR, 0, movimiento);

                                throw new Exception(e.Message);
                            }
                        }
                    }
                }
                #endregion
            }
            else
            {
                #region México
                var empleado = 0;
                var usuarioSigoplan = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                if (usuarioSigoplan != null)
                {
                    empleado = usuarioSigoplan.empleado;
                }

                var compraENKONTROL = ((List<dynamic>)consultaCheckProductivo(
                    string.Format(@"SELECT * FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", movimiento.cc, movimiento.orden_ct)
                ).ToObject<List<dynamic>>())[0];
                var compraDetalleENKONTROL = (List<OrdenCompraDetDTO>)consultaCheckProductivo(
                    string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", movimiento.cc, movimiento.orden_ct)
                ).ToObject<List<OrdenCompraDetDTO>>();

                //#region Validación familias 101 y 102
                //if (vSesiones.sesionEmpresaActual == 2)
                //{
                //    if (movimiento.almacen < 600 || movimiento.almacen > 620)
                //    {
                //        if (movimiento.detalle.Select(x => x.insumo.ToString().Substring(0, 3)).Any(x => x == "101") || movimiento.detalle.Select(x => x.insumo.ToString().Substring(0, 3)).Any(x => x == "102"))
                //        {
                //            List<int> insumosExcepciones = _context.tblAlm_Validacion_101_102_InsumosExcepciones.Where(x => x.estatus).Select(x => x.insumo).ToList();
                //            List<int> insumosMovimiento = movimiento.detalle.Select(x => x.insumo).ToList();

                //            if (insumosExcepciones.Count() > 0)
                //            {
                //                foreach (int insMov in insumosMovimiento)
                //                {
                //                    if (!insumosExcepciones.Contains(insMov))
                //                    {
                //                        throw new Exception("No se puede dar salida a las familias de insumo 101 y 102. Insumo: \"" + insMov + "\".");
                //                    }
                //                }
                //            }
                //            else
                //            {
                //                throw new Exception("No se puede dar salida a las familias de insumo 101 y 102.");
                //            }
                //        }
                //    }
                //}
                //#endregion

                #region Validación Inventariables
                var registrosGrupoInsumo = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM grupos_insumo")).ToObject<List<dynamic>>();

                foreach (var det in movimiento.detalle)
                {
                    var tipo_insumo = Int32.Parse(det.insumo.ToString().Substring(0, 1));
                    var grupo_insumo = Int32.Parse(det.insumo.ToString().Substring(1, 2));
                    var registroGrupoInsumo = registrosGrupoInsumo.FirstOrDefault(x => (int)x.tipo_insumo == tipo_insumo && (int)x.grupo_insumo == grupo_insumo);

                    if (registroGrupoInsumo != null)
                    {
                        if ((string)registroGrupoInsumo.inventariado != "I")
                        {
                            throw new Exception(string.Format(@"El insumo ""{0}"" no es inventariable.", det.insumo));
                        }
                    }
                    else
                    {
                        throw new Exception(string.Format(@"No se encuentra la información del grupo de insumo para el insumo ""{0}"".", det.insumo));
                    }
                }
                #endregion

                #region Validar Existencias
                foreach (var det in movimiento.detalle)
                {
                    var entradasEK = consultaCheckProductivo(
                        string.Format(@"SELECT 
                                        det.insumo, 
                                        (CAST(det.insumo AS Varchar) + '-' + ins.descripcion) AS insumoDesc, 
                                        SUM(det.cantidad) AS cantidad, 
                                        det.area_alm, 
                                        det.lado_alm, 
                                        det.estante_alm, 
                                        det.nivel_alm 
                                    FROM si_movimientos mov 
                                        INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                                        INNER JOIN insumos ins ON det.insumo = ins.insumo 
                                    WHERE 
                                        mov.almacen = {0} AND 
                                        det.insumo = {1} AND 
                                        det.area_alm = '{2}' AND 
                                        det.lado_alm = '{3}' AND 
                                        det.estante_alm = '{4}' AND 
                                        det.nivel_alm = '{5}' AND 
                                        det.tipo_mov < 50 
                                    GROUP BY det.insumo, ins.descripcion, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm",
                                        det.almacen, det.insumo, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm));

                    var salidasEK = consultaCheckProductivo(
                        string.Format(@"SELECT 
                                        det.insumo, 
                                        (CAST(det.insumo AS Varchar) + '-' + ins.descripcion) AS insumoDesc, 
                                        SUM(det.cantidad) AS cantidad, 
                                        det.area_alm, 
                                        det.lado_alm, 
                                        det.estante_alm, 
                                        det.nivel_alm 
                                    FROM si_movimientos mov 
                                        INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                                        INNER JOIN insumos ins ON det.insumo = ins.insumo 
                                    WHERE 
                                        mov.almacen = {0} AND 
                                        det.insumo = {1} AND 
                                        det.area_alm = '{2}' AND 
                                        det.lado_alm = '{3}' AND 
                                        det.estante_alm = '{4}' AND 
                                        det.nivel_alm = '{5}' AND 
                                        det.tipo_mov > 50 
                                    GROUP BY det.insumo, ins.descripcion, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm",
                                        det.almacen, det.insumo, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm));

                    if (entradasEK != null)
                    {
                        var entradas = (List<UbicacionDetalleDTO>)entradasEK.ToObject<List<UbicacionDetalleDTO>>();

                        if (salidasEK != null)
                        {
                            var salidas = (List<UbicacionDetalleDTO>)salidasEK.ToObject<List<UbicacionDetalleDTO>>();

                            foreach (var ent in entradas)
                            {
                                var salida = salidas.FirstOrDefault(x =>
                                        x.insumoDesc == ent.insumoDesc &&
                                        x.area_alm == ent.area_alm &&
                                        x.lado_alm == ent.lado_alm &&
                                        x.estante_alm == ent.estante_alm &&
                                        x.nivel_alm == ent.nivel_alm
                                    );

                                if (salida != null)
                                {
                                    ent.cantidad = ent.cantidad - Convert.ToDecimal(salida.cantidad, CultureInfo.InvariantCulture);
                                }
                            }
                        }

                        var existenciasInsumo = entradas.Sum(x => x.cantidad);
                        var salidaTotalPorInsumo = movimiento.detalle.Where(x =>
                            x.insumo == det.insumo &&
                            x.area_alm == det.area_alm &&
                            x.lado_alm == det.lado_alm &&
                            x.estante_alm == det.estante_alm &&
                            x.nivel_alm == det.nivel_alm).Sum(x => x.cantidad);

                        if (existenciasInsumo < salidaTotalPorInsumo)
                        {
                            var ubicacion = det.area_alm + "-" + det.lado_alm + "-" + det.estante_alm + "-" + det.nivel_alm;

                            throw new Exception("No se guardó la información. La cantidad solicitada del insumo \"" + det.insumo + "\" sobrepasa las existencias (" + existenciasInsumo + ") en la ubicación \"" + ubicacion + "\".");
                        }
                    }
                    else
                    {
                        var ubicacion = det.area_alm + "-" + det.lado_alm + "-" + det.estante_alm + "-" + det.nivel_alm;

                        throw new Exception("No se guardó la información. No hay existencias para el insumo \"" + det.insumo + "\" en la ubicación \"" + ubicacion + "\".");
                    }
                }
                #endregion

                //#region Validación Permisos Familias
                //if (vSesiones.sesionEmpresaActual == 2)
                //{
                //    var permisosFamilias = getPermisosFamilia(movimiento.cc);

                //    if (permisosFamilias.Count > 0)
                //    {
                //        if (!permisosFamilias.Any(x => x.familia == "*"))
                //        {
                //            var familias = movimiento.detalle.Select(x => x.insumo.ToString().Substring(0, 3)).ToList();

                //            foreach (var fam in familias)
                //            {
                //                if (!permisosFamilias.Select(x => x.familia).Contains(fam))
                //                {
                //                    throw new Exception(
                //                        string.Format(@"Bloqueo de familia de insumo '{0}' para el centro de costo '{1}'. No se puede proceder con la salida.", fam, movimiento.cc)
                //                    );
                //                }
                //            }
                //        }
                //    }
                //}
                //#endregion

                #region Validación Sobrepaso de Devolución
                foreach (var det in movimiento.detalle)
                {
                    var partidaCompra = compraDetalleENKONTROL.FirstOrDefault(x => x.partida == det.partida_oc);

                    if (partidaCompra != null)
                    {
                        if (det.cantidad > partidaCompra.cant_recibida)
                        {
                            throw new Exception(
                                string.Format(@"No se puede realizar la devolución. La cantidad recibida para la partida {0} es de {1}.", det.partida_oc, partidaCompra.cant_recibida)
                            );
                        }
                    }
                    else
                    {
                        throw new Exception(string.Format(@"Error al consulta la información. No se encuentra la partida '{0}' de la compra.", det.partida_oc));
                    }
                }
                #endregion

                #region Validación Permiso Devolución
                if (vSesiones.sesionUsuarioDTO.id != 3807)
                {
                    var permisoDevolucion = _context.tblAlm_PermisoDevolucion.FirstOrDefault(x => x.estatus && x.empleado == empleado);

                    if (permisoDevolucion == null)
                    {
                        throw new Exception("No tiene permiso para realizar movimientos de devolución.");
                    }
                }
                #endregion

                #region Validación Factura
                if (Convert.ToDecimal(compraENKONTROL.total_fac, CultureInfo.InvariantCulture) > 0)
                {
                    throw new Exception("La compra ya tiene factura.");
                }
                #endregion

                #region Validación Almacén Activo
                var almacenEK = _contextEnkontrol.Select<dynamic>(getEnkontrolEnumADM(),
                    new OdbcConsultaDTO()
                    {
                        consulta = @"SELECT * FROM si_almacen WHERE almacen = ?",
                        parametros = new List<OdbcParameterDTO>() {
                                        new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = movimiento.almacen }
                                    }
                    }
                );

                if (almacenEK.Count() == 0)
                {
                    throw new Exception("No se encuentra la información del almacén.");
                }

                if ((string)almacenEK[0].bit_mp != "S")
                {
                    throw new Exception("El almacén no está activo.");
                }
                #endregion

                using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                {
                    using (var con = checkConexionProductivo())
                    {
                        using (var trans = con.BeginTransaction())
                        {
                            try
                            {
                                tblAlm_Movimientos nuevaSalida = new tblAlm_Movimientos();

                                var ultimoMovimientoEK = consultaCheckProductivo(
                                    string.Format(@"SELECT 
                                                    TOP 1 numero 
                                                FROM si_movimientos 
                                                WHERE almacen = {0} AND tipo_mov = {1} 
                                                ORDER BY numero DESC", movimiento.almacen, 53)
                                );

                                var nuevoNumero = 0;

                                if (ultimoMovimientoEK != null)
                                {
                                    nuevoNumero = ((List<SurtidoDetDTO>)ultimoMovimientoEK.ToObject<List<SurtidoDetDTO>>())[0].numero;
                                }

                                nuevaSalida = new tblAlm_Movimientos
                                {
                                    almacen = movimiento.almacen,
                                    tipo_mov = 53,
                                    numero = nuevoNumero + 1,
                                    cc = movimiento.cc.ToUpper(),
                                    compania = 1,
                                    periodo = DateTime.Now.Month,
                                    ano = DateTime.Now.Year,
                                    orden_ct = movimiento.orden_ct,
                                    frente = 0,
                                    fecha = DateTime.Now.Date,
                                    proveedor = compraENKONTROL.proveedor,
                                    total = movimiento.total,
                                    estatus = "A",
                                    transferida = "N",
                                    alm_destino = 0,
                                    cc_destino = "",
                                    comentarios = movimiento.comentarios,
                                    tipo_trasp = "C",
                                    tipo_cambio = 1,
                                    estatusHabilitado = true,
                                    numeroReq = 0
                                };

                                _context.tblAlm_Movimientos.Add(nuevaSalida);
                                _context.SaveChanges();

                                var partidaContador = 1;

                                foreach (var det in movimiento.detalle)
                                {
                                    var partidaMovimiento = partidaContador++;

                                    var nuevaSalidaDet = new tblAlm_MovimientosDet
                                    {
                                        almacen = nuevaSalida.almacen,
                                        tipo_mov = 53,
                                        numero = nuevoNumero + 1,
                                        partida = partidaMovimiento,
                                        insumo = det.insumo,
                                        comentarios = det.comentarios,
                                        area = det.area ?? 0,
                                        cuenta = det.cuenta ?? 0,
                                        cantidad = det.cantidad,
                                        precio = det.precio,
                                        importe = det.importe,
                                        id_resguardo = 0,
                                        area_alm = det.area_alm ?? "",
                                        lado_alm = det.lado_alm ?? "",
                                        estante_alm = det.estante_alm ?? "",
                                        nivel_alm = det.nivel_alm ?? "",
                                        transporte = "",
                                        estatusHabilitado = true
                                    };

                                    _context.tblAlm_MovimientosDet.Add(nuevaSalidaDet);
                                    _context.SaveChanges();
                                }

                                if (nuevaSalida.total <= 0)
                                {
                                    throw new Exception("El total no puede ser igual o menor a cero.");
                                }

                                var count = 0;

                                var consulta = @"INSERT INTO si_movimientos 
                                                (almacen, tipo_mov, numero, cc, compania, periodo, ano, orden_ct, frente, fecha, proveedor, total, estatus, 
                                                transferida, poliza, empleado, alm_destino, cc_destino, comentarios, tipo_trasp, numero_destino, tp, year_poliza, 
                                                mes_poliza, tipo_cambio, hora, fecha_modifica, empleado_modifica, destajista, obra, id_residente, factura, sector_id, 
                                                tc_cc, paquete, tipo_cargo, cargo_destajista, cargo_id_residente, embarque, orden_prod, folio_traspaso, bit_sin_ubicacion) 
                                                VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                using (var cmd = new OdbcCommand(consulta))
                                {
                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@almacen", OdbcType.Numeric).Value = nuevaSalida.almacen;
                                    parameters.Add("@tipo_mov", OdbcType.Numeric).Value = nuevaSalida.tipo_mov;
                                    parameters.Add("@numero", OdbcType.Numeric).Value = nuevaSalida.numero;
                                    parameters.Add("@cc", OdbcType.Char).Value = nuevaSalida.cc ?? "";
                                    parameters.Add("@compania", OdbcType.Numeric).Value = nuevaSalida.compania;
                                    parameters.Add("@periodo", OdbcType.Numeric).Value = nuevaSalida.periodo;
                                    parameters.Add("@ano", OdbcType.Numeric).Value = nuevaSalida.ano;
                                    parameters.Add("@orden_ct", OdbcType.Numeric).Value = nuevaSalida.orden_ct;
                                    parameters.Add("@frente", OdbcType.Numeric).Value = nuevaSalida.frente;
                                    parameters.Add("@fecha", OdbcType.Date).Value = nuevaSalida.fecha.Date;
                                    parameters.Add("@proveedor", OdbcType.Numeric).Value = nuevaSalida.proveedor;
                                    parameters.Add("@total", OdbcType.Numeric).Value = nuevaSalida.total;
                                    parameters.Add("@estatus", OdbcType.Char).Value = nuevaSalida.estatus ?? "";
                                    parameters.Add("@transferida", OdbcType.Char).Value = nuevaSalida.transferida ?? "";
                                    parameters.Add("@poliza", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@empleado", OdbcType.Numeric).Value = empleado;
                                    parameters.Add("@alm_destino", OdbcType.Numeric).Value = nuevaSalida.alm_destino;
                                    parameters.Add("@cc_destino", OdbcType.Char).Value = nuevaSalida.cc_destino ?? "";
                                    parameters.Add("@comentarios", OdbcType.Char).Value = nuevaSalida.comentarios ?? "";
                                    parameters.Add("@tipo_trasp", OdbcType.Char).Value = nuevaSalida.tipo_trasp ?? "";
                                    parameters.Add("@numero_destino", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@tp", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@year_poliza", OdbcType.Numeric).Value = DateTime.Now.Year;
                                    parameters.Add("@mes_poliza", OdbcType.Numeric).Value = DateTime.Now.Month;
                                    parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = nuevaSalida.tipo_cambio;
                                    parameters.Add("@hora", OdbcType.Time).Value = DateTime.Now.TimeOfDay;
                                    parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                    parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = empleado;
                                    parameters.Add("@destajista", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@factura", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@tc_cc", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@paquete", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@tipo_cargo", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@cargo_Destajista", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@cargo_id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@embarque", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@orden_prod", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@folio_traspaso", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@bit_sin_ubicacion", OdbcType.Numeric).Value = 0;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;

                                    count += cmd.ExecuteNonQuery();
                                }

                                var cantidadRecibida = compraDetalleENKONTROL.Sum(x => x.cantidad);
                                var cantidadDevuelta = movimiento.detalle.Sum(x => x.cantidad);

                                var flagParcial = (cantidadRecibida - cantidadDevuelta) > 0;

                                #region Update Compra SIGOPLAN
                                var compraSIGOPLAN = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.cc == movimiento.cc && x.numero == movimiento.orden_ct && x.estatusRegistro);

                                if (compraSIGOPLAN != null)
                                {
                                    compraSIGOPLAN.estatus = flagParcial ? "P" : " ";

                                    _context.Entry(compraSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                    _context.SaveChanges();
                                }
                                #endregion

                                var ccDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM cc WHERE cc = '{0}' AND st_ppto != 'T'", movimiento.cc));
                                var ccDesc = (string)(((List<dynamic>)ccDescEK.ToObject<List<dynamic>>())[0].descripcion);
                                var almacenDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", nuevaSalida.almacen));
                                var almacenDesc = (string)(((List<dynamic>)almacenDescEK.ToObject<List<dynamic>>())[0].descripcion);

                                var partidaContadorEK = 1;

                                decimal subTotalDevuelto = 0;

                                foreach (var salDet in movimiento.detalle)
                                {
                                    var insumoDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM insumos WHERE insumo = {0}", salDet.insumo));
                                    var insumoDesc = (string)(((List<dynamic>)insumoDescEK.ToObject<List<dynamic>>())[0].descripcion);
                                    var importe = salDet.cantidad * salDet.precio;
                                    var partidaMovimientoEK = partidaContadorEK++;
                                    decimal costoPromedio = getCostoPromedioKardex(salDet.almacen, salDet.insumo); //decimal costoPromedio = getCostoPromedioNuevo(salDet.almacen, salDet.insumo);

                                    if (salDet.precio <= 0 || importe <= 0)
                                    {
                                        throw new Exception("El precio y el importe no pueden ser igual o menor a cero.");
                                    }

                                    var consultaDet = @"INSERT INTO si_movimientos_det 
                                         (almacen, tipo_mov, numero, partida, insumo, comentarios, area, cuenta, cantidad, precio, importe, 
                                         partida_oc, costo_prom, obra, manzana_ini, lote_ini, interior_ini, manzana_fin, lote_fin, interior_fin, 
                                         remision, sector_id, id_resguardo, area_alm, lado_alm, estante_alm, nivel_alm, fecha_fisico) 
                                         VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                    using (var cmd = new OdbcCommand(consultaDet))
                                    {
                                        OdbcParameterCollection parameters = cmd.Parameters;

                                        parameters.Add("@almacen", OdbcType.Numeric).Value = salDet.almacen;
                                        parameters.Add("@tipo_mov", OdbcType.Numeric).Value = salDet.tipo_mov;
                                        parameters.Add("@numero", OdbcType.Numeric).Value = nuevoNumero + 1;
                                        parameters.Add("@partida", OdbcType.Numeric).Value = partidaMovimientoEK;
                                        parameters.Add("@insumo", OdbcType.Numeric).Value = salDet.insumo;
                                        parameters.Add("@comentarios", OdbcType.Char).Value = salDet.comentarios ?? "";
                                        parameters.Add("@area", OdbcType.Numeric).Value = salDet.area ?? 0;
                                        parameters.Add("@cuenta", OdbcType.Numeric).Value = salDet.cuenta ?? 0;
                                        parameters.Add("@cantidad", OdbcType.Numeric).Value = salDet.cantidad;
                                        parameters.Add("@precio", OdbcType.Numeric).Value = salDet.precio;
                                        parameters.Add("@importe", OdbcType.Numeric).Value = importe;
                                        parameters.Add("@partida_oc", OdbcType.Numeric).Value = salDet.partida_oc;
                                        parameters.Add("@costo_prom", OdbcType.Numeric).Value = costoPromedio;
                                        parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@manzana_ini", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@lote_ini", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@interior_ini", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@manzana_fin", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@lote_fin", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@interior_fin", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@remision", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@id_resguardo", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@area_alm", OdbcType.Char).Value = salDet.area_alm ?? "";
                                        parameters.Add("@lado_alm", OdbcType.Char).Value = salDet.lado_alm ?? "";
                                        parameters.Add("@estante_alm", OdbcType.Char).Value = salDet.estante_alm ?? "";
                                        parameters.Add("@nivel_alm", OdbcType.Char).Value = salDet.nivel_alm ?? "";
                                        parameters.Add("@fecha_fisico", OdbcType.Date).Value = DBNull.Value;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;

                                        count += cmd.ExecuteNonQuery();

                                        movSalidas.Add(new salidasAlmacenDTO
                                        {
                                            centroCosto = ccDesc,
                                            folioSalida = (nuevoNumero + 1).ToString(),
                                            almacen = almacenDesc,
                                            fechaSalida = nuevaSalida.fecha.Date,
                                            partida = salDet.partida,
                                            insumo = salDet.insumo + "-" + insumoDesc ?? "",
                                            areaCuenta = (salDet.area ?? 0) + "-" + (salDet.cuenta ?? 0),
                                            referencia = "",
                                            remision = "",
                                            cantidad = salDet.cantidad,
                                            precio = salDet.precio,
                                            importe = (salDet.cantidad * salDet.precio),
                                            comentarios = movimiento.comentarios ?? "", //comentarios = salDet.comentarios ?? "",
                                            ordenCompra = nuevaSalida.orden_ct.ToString(),
                                            proveedor = "",
                                            direccion = "",
                                            ciudad = "",
                                            telefonos = "",

                                            area_alm = salDet.area_alm ?? "",
                                            lado_alm = salDet.lado_alm ?? "",
                                            estante_alm = salDet.estante_alm ?? "",
                                            nivel_alm = salDet.nivel_alm ?? ""
                                        });
                                    }

                                    #region Actualizar Tablas Acumula
                                    var objAcumula = new MovimientoDetalleEnkontrolDTO
                                    {
                                        insumo = salDet.insumo,
                                        cantidad = salDet.cantidad,
                                        precio = salDet.precio,
                                        tipo_mov = salDet.tipo_mov,
                                        costo_prom = costoPromedio
                                    };

                                    actualizarAcumula(nuevaSalida.almacen, nuevaSalida.cc, objAcumula, dbSigoplanTransaction, trans);
                                    #endregion

                                    if (movimiento.orden_ct > 0 && salDet.partida > 0)
                                    {
                                        #region Restar cantidad recibida SIGOPLAN
                                        var partidaOrdenCompraSIGOPLAN = _context.tblCom_OrdenCompraDet.FirstOrDefault(x =>
                                            x.cc == movimiento.cc &&
                                            x.numero == movimiento.orden_ct &&
                                            x.partida == salDet.partida &&
                                            x.insumo == salDet.insumo);

                                        if (partidaOrdenCompraSIGOPLAN != null)
                                        {
                                            partidaOrdenCompraSIGOPLAN.cant_recibida = partidaOrdenCompraSIGOPLAN.cant_recibida - salDet.cantidad;

                                            _context.Entry(partidaOrdenCompraSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                            _context.SaveChanges();
                                        }
                                        #endregion

                                        #region Restar cantidad recibida Enkontrol
                                        var partidaOrdenCompraEK = consultaCheckProductivo(
                                            string.Format(@"SELECT 
                                                            * 
                                                        FROM so_orden_compra_det 
                                                        WHERE cc = '{0}' AND numero = {1} AND partida = {2} AND insumo = {3}",
                                            movimiento.cc,
                                            movimiento.orden_ct,
                                            salDet.partida_oc,
                                            salDet.insumo)
                                        );

                                        if (partidaOrdenCompraEK != null)
                                        {
                                            var partidaOrdenCompra = ((List<dynamic>)partidaOrdenCompraEK.ToObject<List<dynamic>>())[0];
                                            var cantidadResultado = Convert.ToDecimal(partidaOrdenCompra.cant_recibida, CultureInfo.InvariantCulture) - salDet.cantidad;
                                            var importeDevuelto = Math.Round(Math.Round((100 * (salDet.cantidad * Convert.ToDecimal(partidaOrdenCompra.precio, CultureInfo.InvariantCulture))), 4) / 100, 4);
                                            var importeResultado = Convert.ToDecimal(partidaOrdenCompra.imp_recibido, CultureInfo.InvariantCulture) - importeDevuelto;

                                            if (cantidadResultado < 0 || importeResultado < 0)
                                            {
                                                throw new Exception("Cantidad/Importe recibido con valor negativo para la partida \"" + salDet.partida + "\" con el insumo \"" + salDet.insumo + "\" en la compra.");
                                            }

                                            subTotalDevuelto += importeDevuelto;

                                            var consultaUpdateRecibido = @"
                                            UPDATE so_orden_compra_det 
                                            SET cant_recibida = ?, imp_recibido = ?, fecha_recibido = ?  
                                            WHERE cc = ? AND numero = ? AND partida = ? AND insumo = ?";

                                            using (var cmd = new OdbcCommand(consultaUpdateRecibido))
                                            {
                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                parameters.Add("@cant_recibida", OdbcType.Numeric).Value = cantidadResultado;
                                                parameters.Add("@imp_recibido", OdbcType.Numeric).Value = importeResultado;
                                                parameters.Add("@fecha_recibido", OdbcType.Date).Value =
                                                    cantidadResultado == 0 ? DBNull.Value :
                                                    partidaOrdenCompra.fecha_recibido.Value != null ? (DateTime)partidaOrdenCompra.fecha_recibido : (object)DBNull.Value;

                                                parameters.Add("@cc", OdbcType.Char).Value = movimiento.cc;
                                                parameters.Add("@numero", OdbcType.Numeric).Value = movimiento.orden_ct;
                                                parameters.Add("@partida", OdbcType.Numeric).Value = salDet.partida;
                                                parameters.Add("@insumo", OdbcType.Numeric).Value = salDet.insumo;

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;

                                                count += cmd.ExecuteNonQuery();
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("No se encuentra la información de la partida " + salDet.partida_oc + " con el insumo " + salDet.insumo + " de la compra.");
                                        }
                                        #endregion
                                    }
                                    else
                                    {
                                        LogError(0, 0, "AlmacenController", "guardarDevolucionSalida (No se actualizó el registro detalle de la compra)", null, AccionEnum.ACTUALIZAR, 0, movimiento);
                                    }
                                }

                                decimal ivaDevuelto = subTotalDevuelto * (Convert.ToDecimal(compraENKONTROL.porcent_iva, CultureInfo.InvariantCulture) / 100);
                                decimal subTotalRecibido = Convert.ToDecimal(compraENKONTROL.sub_tot_rec, CultureInfo.InvariantCulture) - subTotalDevuelto;
                                decimal ivaRecibido = Convert.ToDecimal(compraENKONTROL.iva_rec, CultureInfo.InvariantCulture) - ivaDevuelto;
                                decimal totalRecibido = subTotalRecibido + ivaRecibido;

                                #region Update Compra Enkontrol
                                var consultaUpdateCompra = @"
                                UPDATE so_orden_compra 
                                SET 
                                    estatus = ?, 
                                    sub_tot_rec = ?, 
                                    iva_rec = ?, 
                                    total_rec = ? 
                                WHERE cc = ? AND numero = ?";

                                using (var cmd = new OdbcCommand(consultaUpdateCompra))
                                {
                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@estatus", OdbcType.Char).Value = flagParcial ? "P" : " ";
                                    parameters.Add("@sub_tot_rec", OdbcType.Numeric).Value = subTotalRecibido;
                                    parameters.Add("@iva_rec", OdbcType.Numeric).Value = ivaRecibido;
                                    parameters.Add("@total_rec", OdbcType.Numeric).Value = totalRecibido;

                                    parameters.Add("@cc", OdbcType.Char).Value = movimiento.cc;
                                    parameters.Add("@numero", OdbcType.Numeric).Value = movimiento.orden_ct;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;

                                    count += cmd.ExecuteNonQuery();
                                }
                                #endregion

                                trans.Commit();
                                dbSigoplanTransaction.Commit();
                            }
                            catch (Exception e)
                            {
                                trans.Rollback();
                                dbSigoplanTransaction.Rollback();

                                LogError(12, 0, "AlmacenController", "guardarDevolucionSalida", e, AccionEnum.AGREGAR, 0, movimiento);

                                throw new Exception(e.Message);
                            }
                        }
                    }
                }
                #endregion
            }

            return movSalidas;
        }

        public dynamic getEntradasCompra(int almacen, string cc, int numeroOrdenCompra)
        {
            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
            {
                #region Compras Perú
                var listaMovimientosCompra = _context.tblAlm_Movimientos.Where(x =>
                    x.estatusHabilitado &&
                    x.almacen == almacen &&
                    x.cc == cc &&
                    x.orden_ct == numeroOrdenCompra &&
                    (x.tipo_mov == 1 || x.tipo_mov == 53)
                ).ToList().Select(x => new MovimientoEnkontrolDTO
                {
                    almacen = x.almacen,
                    tipo_mov = x.tipo_mov,
                    numero = x.numero,
                    cc = x.cc,
                    orden_ct = x.orden_ct,
                    fecha = x.fecha,
                    total = x.total,
                    estatus = x.estatus,
                    transferida = x.transferida,
                    empleado = 0,
                    comentarios = x.comentarios,
                    sector_id = 0,
                    recibioID = 0,
                    proveedor = x.proveedor,
                    detalle = new List<MovimientoDetalleEnkontrolDTO>()
                }).ToList();

                if (listaMovimientosCompra.Count() == 0)
                {
                    return null;
                }

                var listaDetalleMovimientosCompra = new List<MovimientoDetalleEnkontrolDTO>();
                var listaInsumosStarsoft = new List<MAEART>();
                var listaAlmacenesStarsoft = new List<TABALM>();

                using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                {
                    listaInsumosStarsoft = _starsoft.MAEART.ToList();
                    listaAlmacenesStarsoft = _starsoft.TABALM.ToList();
                }

                foreach (var mov in listaMovimientosCompra)
                {
                    var listaDetalleMovimiento = _context.tblAlm_MovimientosDet.Where(x => x.almacen == mov.almacen && x.tipo_mov == mov.tipo_mov && x.numero == mov.numero).ToList().Select(x => new MovimientoDetalleEnkontrolDTO
                    {
                        almacen = x.almacen,
                        almacenDesc = listaAlmacenesStarsoft.Where(y => Int32.Parse(y.TAALMA) == mov.almacen).Select(z => z.TADESCRI).FirstOrDefault(),
                        tipo_mov = x.tipo_mov,
                        numero = x.numero,
                        remision = 0,
                        partida = x.partida,
                        insumo = x.insumo,
                        descInsumo = listaInsumosStarsoft.Where(y => y.ACODIGO == ("0" + x.insumo.ToString())).Select(z => z.ADESCRI).FirstOrDefault(),
                        comentarios = x.comentarios,
                        area = 0,
                        cuenta = 0,
                        areaCuenta = "0-0",
                        cantidad = x.cantidad,
                        precio = x.precio,
                        importe = x.importe,
                        partida_oc = x.partida_oc != null ? (int)x.partida_oc : 0,
                        costo_prom = 0,
                        sector_id = 0,

                        insumoDesc = listaInsumosStarsoft.Where(y => y.ACODIGO == ("0" + x.insumo.ToString())).Select(z => z.ADESCRI).FirstOrDefault(),
                        unidad = listaInsumosStarsoft.Where(y => y.ACODIGO == ("0" + x.insumo.ToString())).Select(z => z.AUNIDAD).FirstOrDefault()
                    }).ToList();

                    listaDetalleMovimientosCompra.AddRange(listaDetalleMovimiento);
                }

                var listaDetalleEntradas = new List<MovimientoDetalleEnkontrolDTO>();

                foreach (var d in listaDetalleMovimientosCompra)
                {
                    if (d.tipo_mov == 1)
                    {
                        listaDetalleEntradas.Add(d);
                    }
                    else if (d.tipo_mov == 53)
                    {
                        var insumoAcumulado = listaDetalleEntradas.FirstOrDefault(x => x.cantidad > 0 && x.insumo == d.insumo);

                        if (insumoAcumulado != null)
                        {
                            insumoAcumulado.cantidad -= d.cantidad;
                        }
                    }
                }

                var listaDetalleResultado = listaDetalleEntradas.Where(x => x.cantidad > 0).ToList();

                if (listaDetalleResultado.Count() > 0)
                {
                    var movimientoResultado = listaMovimientosCompra.Where(x =>
                        x.almacen == listaDetalleResultado[0].almacen &&
                        x.tipo_mov == listaDetalleResultado[0].tipo_mov &&
                        x.numero == listaDetalleResultado[0].numero
                    ).ToList();

                    movimientoResultado[0].detalle = listaDetalleResultado;

                    return movimientoResultado;
                }
                else
                {
                    return null;
                }
                #endregion
            }
            else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
            {
                #region COLOMBIA
                var listaMovimientosCompra = _contextEnkontrol.Select<MovimientoEnkontrolDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                {
                    consulta = string.Format(@"SELECT * FROM si_movimientos WHERE (tipo_mov = 1 OR tipo_mov = 53) AND almacen = {0} AND cc = '{1}' AND orden_ct = {2}", almacen, cc, numeroOrdenCompra)
                });

                if (listaMovimientosCompra.Count() > 0)
                {
                    var listaDetalleMovimientosCompra = new List<MovimientoDetalleEnkontrolDTO>();

                    foreach (var mov in listaMovimientosCompra)
                    {
                        var listaDetalleMovimiento = _contextEnkontrol.Select<MovimientoDetalleEnkontrolDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                        {
                            consulta = string.Format(@"
                            SELECT 
                                det.*, 
                                i.descripcion AS insumoDesc, 
                                i.unidad 
                            FROM si_movimientos_det det 
                                INNER JOIN insumos i ON det.insumo = i.insumo 
                            WHERE det.almacen = {0} AND det.tipo_mov = {1} AND det.numero = {2}", mov.almacen, mov.tipo_mov, mov.numero)
                        });

                        listaDetalleMovimientosCompra.AddRange(listaDetalleMovimiento);
                    }

                    var listaDetalleEntradas = new List<MovimientoDetalleEnkontrolDTO>();

                    var lstMovimientosSP = _context.tblAlm_MovimientosDet.Where(e => e.estatusHabilitado && e.almacen == almacen).ToList();

                    foreach (var d in listaDetalleMovimientosCompra)
                    {
                        if (d.tipo_mov == 1)
                        {
                            listaDetalleEntradas.Add(d);
                        }
                        else if (d.tipo_mov == 53)
                        {
                            var insumoAcumulado = listaDetalleEntradas.FirstOrDefault(x => x.cantidad > 0 && x.insumo == d.insumo && x.numero == d.numero && x.tipo_mov == d.tipo_mov);

                            if (insumoAcumulado != null)
                            {
                                insumoAcumulado.cantidad -= d.cantidad;
                            }
                        }

                        var objDetSP = lstMovimientosSP.FirstOrDefault(e => e.partida == d.partida);

                        if (objDetSP != null)
                        {
                            d.area_alm = objDetSP.area_alm;
                            d.lado_alm = objDetSP.lado_alm;
                            d.estante_alm = objDetSP.estante_alm;
                            d.nivel_alm = objDetSP.nivel_alm;
                        }
                    }

                    var listaDetalleResultado = listaDetalleEntradas.Where(x => x.cantidad > 0).ToList();

                    if (listaDetalleResultado.Count() > 0)
                    {
                        var movimientoResultado = listaMovimientosCompra.Where(x =>
                            x.almacen == listaDetalleResultado[0].almacen &&
                            x.tipo_mov == listaDetalleResultado[0].tipo_mov &&
                            x.numero == listaDetalleResultado[0].numero
                        ).ToList();

                        movimientoResultado[0].detalle = listaDetalleResultado;

                        return movimientoResultado;
                    }
                    else
                    {
                        return null;
                    }
                }
                else
                {
                    return null;
                }

                //            var entradasCompraEK = consultaCheckProductivo(
                //                string.Format(@"SELECT 
                //                                    mov.*, 
                //                                    alm.descripcion AS almacenDesc, 
                //                                    c.descripcion AS ccDesc, 
                //                                    emp.descripcion AS empleadoDesc, 
                //                                    prov.nombre AS proveedorDesc 
                //                                FROM si_movimientos mov 
                //                                    INNER JOIN si_almacen alm ON mov.almacen = alm.almacen 
                //                                    INNER JOIN cc c ON mov.cc = c.cc 
                //                                    LEFT JOIN empleados emp ON mov.empleado = emp.empleado 
                //                                    LEFT JOIN sp_proveedores prov ON mov.proveedor = prov.numpro 
                //                                WHERE mov.almacen = {0} AND mov.tipo_mov = 1 AND mov.cc = '{1}' AND mov.orden_ct = {2}", almacen, cc, numeroOrdenCompra)
                //            );

                //            if (entradasCompraEK != null)
                //            {
                //                var entradasCompra = (List<MovimientoEnkontrolDTO>)entradasCompraEK.ToObject<List<MovimientoEnkontrolDTO>>();

                //                foreach (var ent in entradasCompra)
                //                {
                //                    var detalleEntradaCompra = (List<MovimientoDetalleEnkontrolDTO>)consultaCheckProductivo(
                //                        string.Format(@"SELECT 
                //                                            det.*, 
                //                                            i.descripcion AS insumoDesc, 
                //                                            i.unidad 
                //                                        FROM si_movimientos_det det 
                //                                            INNER JOIN insumos i ON det.insumo = i.insumo 
                //                                        WHERE det.almacen = {0} AND det.tipo_mov = 1 AND det.numero = {1}", ent.almacen, ent.numero)
                //                    ).ToObject<List<MovimientoDetalleEnkontrolDTO>>();

                //                    ent.detalle = detalleEntradaCompra;
                //                }

                //                return entradasCompra;
                //            }
                //            else
                //            {
                //                return null;
                //            }
                #endregion
            }
            else
            {
                #region Compras México
                var listaMovimientosCompra = _contextEnkontrol.Select<MovimientoEnkontrolDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                {
                    consulta = string.Format(@"SELECT * FROM si_movimientos WHERE (tipo_mov = 1 OR tipo_mov = 53) AND almacen = {0} AND cc = '{1}' AND orden_ct = {2}", almacen, cc, numeroOrdenCompra)
                });

                if (listaMovimientosCompra.Count() > 0)
                {
                    var listaDetalleMovimientosCompra = new List<MovimientoDetalleEnkontrolDTO>();

                    foreach (var mov in listaMovimientosCompra)
                    {
                        var listaDetalleMovimiento = _contextEnkontrol.Select<MovimientoDetalleEnkontrolDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                        {
                            consulta = string.Format(@"
                            SELECT 
                                det.*, 
                                i.descripcion AS insumoDesc, 
                                i.unidad 
                            FROM si_movimientos_det det 
                                INNER JOIN insumos i ON det.insumo = i.insumo 
                            WHERE det.almacen = {0} AND det.tipo_mov = {1} AND det.numero = {2}", mov.almacen, mov.tipo_mov, mov.numero)
                        });

                        listaDetalleMovimientosCompra.AddRange(listaDetalleMovimiento);
                    }

                    var listaDetalleEntradas = new List<MovimientoDetalleEnkontrolDTO>();

                    foreach (var d in listaDetalleMovimientosCompra)
                    {
                        if (d.tipo_mov == 1)
                        {
                            listaDetalleEntradas.Add(d);
                        }
                        else if (d.tipo_mov == 53)
                        {
                            var insumoAcumulado = listaDetalleEntradas.FirstOrDefault(x => x.cantidad > 0 && x.insumo == d.insumo);

                            if (insumoAcumulado != null)
                            {
                                insumoAcumulado.cantidad -= d.cantidad;
                            }
                        }
                    }

                    var listaDetalleResultado = listaDetalleEntradas.Where(x => x.cantidad > 0).ToList();

                    if (listaDetalleResultado.Count() > 0)
                    {
                        var movimientoResultado = listaMovimientosCompra.Where(x =>
                            x.almacen == listaDetalleResultado[0].almacen &&
                            x.tipo_mov == listaDetalleResultado[0].tipo_mov &&
                            x.numero == listaDetalleResultado[0].numero
                        ).ToList();

                        movimientoResultado[0].detalle = listaDetalleResultado;

                        return movimientoResultado;
                    }
                    else
                    {
                        return null;
                    }
                }
                else
                {
                    return null;
                }

                //            var entradasCompraEK = consultaCheckProductivo(
                //                string.Format(@"SELECT 
                //                                    mov.*, 
                //                                    alm.descripcion AS almacenDesc, 
                //                                    c.descripcion AS ccDesc, 
                //                                    emp.descripcion AS empleadoDesc, 
                //                                    prov.nombre AS proveedorDesc 
                //                                FROM si_movimientos mov 
                //                                    INNER JOIN si_almacen alm ON mov.almacen = alm.almacen 
                //                                    INNER JOIN cc c ON mov.cc = c.cc 
                //                                    LEFT JOIN empleados emp ON mov.empleado = emp.empleado 
                //                                    LEFT JOIN sp_proveedores prov ON mov.proveedor = prov.numpro 
                //                                WHERE mov.almacen = {0} AND mov.tipo_mov = 1 AND mov.cc = '{1}' AND mov.orden_ct = {2}", almacen, cc, numeroOrdenCompra)
                //            );

                //            if (entradasCompraEK != null)
                //            {
                //                var entradasCompra = (List<MovimientoEnkontrolDTO>)entradasCompraEK.ToObject<List<MovimientoEnkontrolDTO>>();

                //                foreach (var ent in entradasCompra)
                //                {
                //                    var detalleEntradaCompra = (List<MovimientoDetalleEnkontrolDTO>)consultaCheckProductivo(
                //                        string.Format(@"SELECT 
                //                                            det.*, 
                //                                            i.descripcion AS insumoDesc, 
                //                                            i.unidad 
                //                                        FROM si_movimientos_det det 
                //                                            INNER JOIN insumos i ON det.insumo = i.insumo 
                //                                        WHERE det.almacen = {0} AND det.tipo_mov = 1 AND det.numero = {1}", ent.almacen, ent.numero)
                //                    ).ToObject<List<MovimientoDetalleEnkontrolDTO>>();

                //                    ent.detalle = detalleEntradaCompra;
                //                }

                //                return entradasCompra;
                //            }
                //            else
                //            {
                //                return null;
                //            }
                #endregion
            }
        }

        public List<salidasAlmacenDTO> imprimirMovimientoSalidaDevolucion(int almacen, int numero)
        {
            List<salidasAlmacenDTO> movSalidas = new List<salidasAlmacenDTO>();

            if (vSesiones.sesionEmpresaActual != (int)EmpresaEnum.Peru)
            {
                var movimientoEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_movimientos WHERE almacen = {0} AND tipo_mov = 53 AND numero = {1}", almacen, numero));

                if (movimientoEK != null)
                {
                    var movimiento = ((List<dynamic>)movimientoEK.ToObject<List<dynamic>>())[0];
                    var movimientoDetalleEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_movimientos_det WHERE almacen = {0} AND tipo_mov = 53 AND numero = {1}", almacen, numero));

                    if (movimientoDetalleEK != null)
                    {
                        var movimientoDetalle = (List<dynamic>)movimientoDetalleEK.ToObject<List<dynamic>>();

                        var ccDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM cc WHERE cc = '{0}' AND st_ppto != 'T'", (string)movimiento.cc));
                        var ccDesc = (string)(((List<dynamic>)ccDescEK.ToObject<List<dynamic>>())[0].descripcion);
                        var almacenDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", (int)movimiento.almacen));
                        var almacenDesc = (string)(((List<dynamic>)almacenDescEK.ToObject<List<dynamic>>())[0].descripcion);

                        foreach (var salDet in movimientoDetalle)
                        {
                            var insumoDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM insumos WHERE insumo = {0}", (int)salDet.insumo));
                            var insumoDesc = (string)(((List<dynamic>)insumoDescEK.ToObject<List<dynamic>>())[0].descripcion);
                            var area = salDet.area != null ? (int)salDet.area : 0;
                            var cuenta = salDet.cuenta != null ? (int)salDet.cuenta : 0;
                            var cantidad = Convert.ToDecimal(salDet.cantidad, CultureInfo.InvariantCulture);
                            var precio = Convert.ToDecimal(salDet.precio, CultureInfo.InvariantCulture);
                            var area_alm = salDet.area_alm != null ? (string)salDet.area_alm : "";
                            var lado_alm = salDet.lado_alm != null ? (string)salDet.lado_alm : ""; ;
                            var estante_alm = salDet.estante_alm != null ? (string)salDet.estante_alm : ""; ;
                            var nivel_alm = salDet.nivel_alm != null ? (string)salDet.nivel_alm : ""; ;

                            movSalidas.Add(new salidasAlmacenDTO
                            {
                                centroCosto = ccDesc,
                                folioSalida = ((int)salDet.numero).ToString(),
                                almacen = almacenDesc,
                                fechaSalida = movimiento.fecha,
                                partida = (int)salDet.partida,
                                insumo = (int)salDet.insumo + "-" + insumoDesc ?? "",
                                areaCuenta = area + "-" + cuenta,
                                referencia = "",
                                remision = "",
                                cantidad = cantidad,
                                precio = precio,
                                importe = cantidad * precio,
                                comentarios = salDet.comentarios != null ? (string)salDet.comentarios : "",
                                ordenCompra = "0",
                                proveedor = "",
                                direccion = "",
                                ciudad = "",
                                telefonos = "",

                                area_alm = area_alm,
                                lado_alm = lado_alm,
                                estante_alm = estante_alm,
                                nivel_alm = nivel_alm
                            });
                        }
                    }
                    else
                    {
                        throw new Exception("No se encuentra el detalle del movimiento.");
                    }
                }
                else
                {
                    throw new Exception("No se encuentra el movimiento.");
                }
            }
            else
            {
                var registroMovimiento = _context.tblAlm_Movimientos.FirstOrDefault(x => x.estatusHabilitado && x.almacen == almacen && x.tipo_mov == 53 && x.numero == numero);

                if (registroMovimiento == null)
                {
                    throw new Exception("No se encuentra el movimiento");
                }

                var listaRegistrosMovimientoDetalle = _context.tblAlm_MovimientosDet.Where(x => x.estatusHabilitado && x.almacen == almacen && x.tipo_mov == 53 && x.numero == numero).ToList();
                var listaInsumosStarsoft = new List<MAEART>();
                var listaAlmacenesStarsoft = new List<TABALM>();
                var listaCC = _context.tblP_CC.Where(x => x.estatus).ToList();

                using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                {
                    listaInsumosStarsoft = _starsoft.MAEART.ToList();
                    listaAlmacenesStarsoft = _starsoft.TABALM.ToList();
                }

                foreach (var det in listaRegistrosMovimientoDetalle)
                {
                    var insumoDesc = listaInsumosStarsoft.Where(x => Int64.Parse(x.ACODIGO) == det.insumo).Select(x => x.ADESCRI).FirstOrDefault();
                    var ccDesc = listaCC.Where(x => x.cc == registroMovimiento.cc).Select(x => x.descripcion).FirstOrDefault();
                    var almacenDesc = listaAlmacenesStarsoft.Where(x => Int32.Parse(x.TAALMA) == registroMovimiento.almacen).Select(x => x.TADESCRI).FirstOrDefault();

                    movSalidas.Add(new salidasAlmacenDTO
                    {
                        centroCosto = ccDesc,
                        folioSalida = det.numero.ToString(),
                        almacen = almacenDesc,
                        fechaSalida = registroMovimiento.fecha,
                        partida = det.partida,
                        insumo = det.insumo + "-" + insumoDesc ?? "",
                        areaCuenta = "-",
                        referencia = "",
                        remision = "",
                        cantidad = det.cantidad,
                        precio = det.precio,
                        importe = det.cantidad * det.precio,
                        comentarios = det.comentarios ?? "",
                        ordenCompra = registroMovimiento.orden_ct.ToString(),
                        proveedor = "",
                        direccion = "",
                        ciudad = "",
                        telefonos = "",
                        area_alm = det.area_alm,
                        lado_alm = det.lado_alm,
                        estante_alm = det.estante_alm,
                        nivel_alm = det.nivel_alm
                    });
                }
            }

            return movSalidas;
        }
        #endregion

        #region Inventario Físico Entrada
        public Dictionary<string, object> getNuevaEntradaInventarioFisico(int almacenID)
        {
            var result = new Dictionary<string, object>();

            try
            {

                if ((MainContextEnum)vSesiones.sesionEmpresaActual != MainContextEnum.PERU)
                {
                    #region RESTO EMPRESAS
                    //var flagPermisoMovimientoAdministrador = true;

                    //if (almacenID < 900)
                    //{
                    //    var permiso = _context.tblAlm_PermisoMovimientoAdministrador.FirstOrDefault(x => x.estatus && x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                    //    if (permiso == null)
                    //    {
                    //        flagPermisoMovimientoAdministrador = false;
                    //    }
                    //}

                    var almacen = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", almacenID)).ToObject<List<dynamic>>();

                    var ultimaEntradaInventarioFisicoEK = consultaCheckProductivo(
                        string.Format(@"SELECT TOP 1 
                                        * 
                                    FROM si_movimientos 
                                    WHERE almacen = {0} AND tipo_mov = 5 ORDER BY numero DESC", almacenID)
                    );

                    var entregoNum = 0;
                    var entregoDesc = "";
                    var relacionUsuarioSIGOPLANEK = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                    if (relacionUsuarioSIGOPLANEK != null)
                    {
                        var empleado = (List<dynamic>)consultaCheckProductivo(
                            string.Format(@"SELECT * FROM empleados WHERE empleado = {0}", relacionUsuarioSIGOPLANEK.empleado)
                        ).ToObject<List<dynamic>>();

                        entregoNum = relacionUsuarioSIGOPLANEK.empleado;
                        entregoDesc = (string)empleado[0].descripcion;
                    }

                    if (ultimaEntradaInventarioFisicoEK != null)
                    {
                        var ultimaEntradaInventarioFisico = (List<dynamic>)ultimaEntradaInventarioFisicoEK.ToObject<List<dynamic>>();

                        result.Add("almacenDesc", (string)almacen[0].descripcion);
                        result.Add("numeroDisponible", (int)ultimaEntradaInventarioFisico[0].numero + 1);
                        result.Add("entregoNum", entregoNum);
                        result.Add("entregoDesc", entregoDesc);
                        result.Add("fecha", DateTime.Now.Date.ToShortDateString());
                        result.Add(SUCCESS, true);
                    }
                    else
                    {
                        result.Add("almacenDesc", (string)almacen[0].descripcion);
                        result.Add("numeroDisponible", 1);
                        result.Add("entregoNum", entregoNum);
                        result.Add("entregoDesc", entregoDesc);
                        result.Add("fecha", DateTime.Now.Date.ToShortDateString());
                        result.Add(SUCCESS, true);
                    }

                    result.Add("flagPermisoMovimientoAdministrador", true); //flagPermisoMovimientoAdministrador
                    #endregion
                }
                else
                {
                    var flagPermisoMovimientoAdministrador = true;

                    if (almacenID < 900)
                    {
                        var permiso = _context.tblAlm_PermisoMovimientoAdministrador.FirstOrDefault(x => x.estatus && x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                        if (permiso == null)
                        {
                            flagPermisoMovimientoAdministrador = false;
                        }
                    }

                    #region PERU

                    var almacen = new TABALM();
                    int ultimoFolio = 0;

                    using (var dbStarsoft = new MainContextPeruStarSoft003BDCOMUN())
                    {
                        string almacenStarsoft = "";
                        if (almacenID > 9)
                        {
                            almacenStarsoft = almacenID.ToString();
                        }
                        else
                        {
                            almacenStarsoft = "0" + almacenID;
                        }

                        almacen = dbStarsoft.TABALM.FirstOrDefault(e => e.TAALMA == almacenStarsoft);

                        if (almacenID >= 90)
                        {
                            ultimoFolio = _context.tblAlm_Movimientos.Where(x => x.estatusHabilitado && x.almacen == almacenID && x.tipo_mov < 50).Select(x => x.numero).OrderByDescending(x => x).FirstOrDefault();
                        }
                        else
                        {
                            ultimoFolio = dbStarsoft.MOVALMCAB.ToList().Where(x => Int32.Parse(x.CAALMA) == almacenID && x.CATD == "NI").Select(x => Int32.Parse(x.CANUMDOC)).OrderByDescending(x => x).FirstOrDefault();
                        }
                    }

                    //var ultimaEntradaInventarioFisicoEK = _context.tblAlm_Movimientos.Where(e => e.almacen == almacenID && e.tipo_mov < 50).OrderByDescending(e => e.id).FirstOrDefault();

                    var entregoNum = 0;
                    var entregoDesc = "";
                    var relacionUsuarioSIGOPLANEK = _context.tblP_Usuario.FirstOrDefault(x => x.id == vSesiones.sesionUsuarioDTO.id);

                    if (relacionUsuarioSIGOPLANEK != null)
                    {

                        entregoNum = relacionUsuarioSIGOPLANEK.id;
                        entregoDesc = relacionUsuarioSIGOPLANEK.apellidoPaterno + " " + relacionUsuarioSIGOPLANEK.apellidoMaterno + " " + relacionUsuarioSIGOPLANEK.nombre;
                    }

                    if (ultimoFolio > 0)
                    {
                        result.Add("almacenDesc", (string)almacen.TADESCRI);
                        result.Add("numeroDisponible", ultimoFolio + 1);
                        result.Add("entregoNum", entregoNum);
                        result.Add("entregoDesc", entregoDesc);
                        result.Add("fecha", DateTime.Now.Date.ToShortDateString());
                        result.Add(SUCCESS, true);
                    }
                    else
                    {
                        result.Add("almacenDesc", (string)almacen.TADESCRI);
                        result.Add("numeroDisponible", 1);
                        result.Add("entregoNum", entregoNum);
                        result.Add("entregoDesc", entregoDesc);
                        result.Add("fecha", DateTime.Now.Date.ToShortDateString());
                        result.Add(SUCCESS, true);
                    }

                    result.Add("flagPermisoMovimientoAdministrador", true); //flagPermisoMovimientoAdministrador
                    #endregion
                }

            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return result;
        }

        public dynamic getEntradaInventarioFisico(int almacenID, int numero)
        {
            if ((MainContextEnum)vSesiones.sesionEmpresaActual != MainContextEnum.PERU)
            {
                #region RESTO EMPRESAS

                var entradaInventarioFisicoEK = consultaCheckProductivo(
                string.Format(@"SELECT 
                                    mov.almacen, 
                                    alm.descripcion AS almacenDesc, 
                                    mov.tipo_mov, 
                                    mov.numero, 
                                    mov.cc, 
                                    c.descripcion AS ccDesc, 
                                    mov.orden_ct, 
                                    mov.fecha, 
                                    mov.total, 
                                    mov.estatus, 
                                    mov.transferida, 
                                    mov.empleado, 
                                    emp.descripcion AS empleadoDesc, 
                                    mov.comentarios, 
                                    mov.sector_id, 
                                    mov.proveedor, 
                                    prov.nombre AS proveedorDesc 
                                FROM si_movimientos mov 
                                    INNER JOIN si_almacen alm ON mov.almacen = alm.almacen 
                                    INNER JOIN cc c ON mov.cc = c.cc 
                                    LEFT JOIN empleados emp ON mov.empleado = emp.empleado 
                                    LEFT JOIN sp_proveedores prov ON mov.proveedor = prov.numpro 
                                WHERE mov.almacen = {0} AND mov.tipo_mov = 5 AND mov.numero = {1}", almacenID, numero));

                if (entradaInventarioFisicoEK != null)
                {
                    var entradaInventarioFisico = (List<MovimientoEnkontrolDTO>)entradaInventarioFisicoEK.ToObject<List<MovimientoEnkontrolDTO>>();
                    var entradaInventarioFisicoDetalle = (List<MovimientoDetalleEnkontrolDTO>)consultaCheckProductivo(
                        string.Format(@"SELECT 
                                        det.*, 
                                        i.descripcion AS insumoDesc, 
                                        i.unidad 
                                    FROM si_movimientos_det det 
                                        INNER JOIN insumos i ON det.insumo = i.insumo 
                                    WHERE det.almacen = {0} AND det.tipo_mov = 5 AND det.numero = {1}", almacenID, numero)
                    ).ToObject<List<MovimientoDetalleEnkontrolDTO>>();

                    entradaInventarioFisico[0].fechaString = ((DateTime)(entradaInventarioFisico[0].fecha)).ToShortDateString();
                    entradaInventarioFisico[0].detalle = entradaInventarioFisicoDetalle;

                    return entradaInventarioFisico[0];
                }
                else
                {
                    return null;
                }
                #endregion
            }
            else
            {
                #region PERU
                //                var entradaInventarioFisicoEK = consultaCheckProductivo(
                //                string.Format(@"SELECT 
                //                                    mov.almacen, 
                //                                    alm.descripcion AS almacenDesc, 
                //                                    mov.tipo_mov, 
                //                                    mov.numero, 
                //                                    mov.cc, 
                //                                    c.descripcion AS ccDesc, 
                //                                    mov.orden_ct, 
                //                                    mov.fecha, 
                //                                    mov.total, 
                //                                    mov.estatus, 
                //                                    mov.transferida, 
                //                                    mov.empleado, 
                //                                    emp.descripcion AS empleadoDesc, 
                //                                    mov.comentarios, 
                //                                    mov.sector_id, 
                //                                    mov.proveedor, 
                //                                    prov.nombre AS proveedorDesc 
                //                                FROM si_movimientos mov 
                //                                    INNER JOIN si_almacen alm ON mov.almacen = alm.almacen 
                //                                    INNER JOIN cc c ON mov.cc = c.cc 
                //                                    LEFT JOIN empleados emp ON mov.empleado = emp.empleado 
                //                                    LEFT JOIN sp_proveedores prov ON mov.proveedor = prov.numpro 
                //                                WHERE mov.almacen = {0} AND mov.tipo_mov = 5 AND mov.numero = {1}", almacenID, numero));

                var entradaInventarioFisico = _context.Select<MovimientoEnkontrolDTO>(new DapperDTO()
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = string.Format(@"
                                SELECT 
                                    mov.almacen, 
                                    --alm.descripcion AS almacenDesc, 
                                    mov.tipo_mov, 
                                    mov.numero, 
                                    mov.cc, 
                                    c.ccDescripcion AS ccDesc, 
                                    mov.orden_ct, 
                                    mov.fecha, 
                                    mov.total, 
                                    mov.estatus, 
                                    mov.transferida, 
                                    mov.idUsuarioCreacion as empleado, 
									(tUsr.apellidoPaterno + ' ' + tUsr.apellidoPaterno + ' ' + tUsr.nombre) as empleadoDesc,
                                    mov.comentarios
                                FROM tblAlm_Movimientos mov 
                                    INNER JOIN tblC_Nom_CatalogoCC c ON mov.cc = c.cc 
									LEFT JOIN tblP_Usuario as tUsr ON mov.idUsuarioCreacion = tUsr.id
                                WHERE mov.estatusHabilitado = 1 AND mov.almacen = {0} AND mov.tipo_mov = 5 AND mov.numero = {1}", almacenID, numero),

                }).FirstOrDefault();

                if (entradaInventarioFisico != null)
                {
                    #region ALMACEN STARSOFT
                    string almacenStarsoft = "";

                    if (almacenID > 9)
                    {
                        almacenStarsoft = almacenID.ToString();
                    }
                    else
                    {
                        almacenStarsoft = "0" + almacenID;
                    }

                    using (var dbStarsoft = new MainContextPeruStarSoft003BDCOMUN())
                    {
                        var objAlmacen = dbStarsoft.TABALM.FirstOrDefault();

                        if (objAlmacen != null)
                        {
                            almacenStarsoft = objAlmacen.TADESCRI;
                        }
                    }

                    entradaInventarioFisico.almacenDesc = almacenStarsoft;
                    #endregion

                    //                    var entradaInventarioFisicoDetalle = (List<MovimientoDetalleEnkontrolDTO>)consultaCheckProductivo(
                    //                        string.Format(@"SELECT 
                    //                                        det.*, 
                    //                                        i.descripcion AS insumoDesc, 
                    //                                        i.unidad 
                    //                                    FROM si_movimientos_det det 
                    //                                        INNER JOIN insumos i ON det.insumo = i.insumo 
                    //                                    WHERE det.almacen = {0} AND det.tipo_mov = 5 AND det.numero = {1}", almacenID, numero)
                    //                    ).ToObject<List<MovimientoDetalleEnkontrolDTO>>();

                    var entradaInventarioFisicoDetalle = new List<MovimientoDetalleEnkontrolDTO>();
                    var entradasInventario = _context.tblAlm_MovimientosDet.Where(e => e.tipo_mov == 5 && e.numero == numero && e.almacen == almacenID);

                    foreach (var item in entradasInventario)
                    {
                        //var objInsumo = dbStarsoft.MAEART.FirstOrDefault(e => e.ACODIGO == det.PERU_insumo);

                        string descInsumoPeru = "";
                        string descUnidad = "";
                        using (var dbStarsoft = new MainContextPeruStarSoft003BDCOMUN())
                        {
                            var objInsumo = dbStarsoft.MAEART.FirstOrDefault(e => e.ACODIGO == item.PERU_insumo);

                            if (objInsumo != null)
                            {
                                descUnidad = objInsumo.AUNIDAD;
                                descInsumoPeru = objInsumo.ADESCRI;
                            }
                        }

                        entradaInventarioFisicoDetalle.Add(new MovimientoDetalleEnkontrolDTO()
                        {
                            almacen = almacenID,
                            almacenDesc = almacenStarsoft,
                            tipo_mov = item.tipo_mov,
                            numero = item.numero,
                            remision = 0,
                            partida = item.partida,
                            PERU_insumo = item.PERU_insumo,
                            descInsumo = descInsumoPeru,
                            insumoDesc = descInsumoPeru,
                            comentarios = item.comentarios,
                            area = 0,
                            cuenta = 0,
                            areaCuenta = "",
                            cantidad = item.cantidad,
                            precio = item.precio,
                            importe = item.importe,
                            partida_oc = 0,
                            costo_prom = item.precio,
                            sector_id = 0,
                            area_alm = item.area_alm,
                            lado_alm = item.lado_alm,
                            estante_alm = item.estante_alm,
                            nivel_alm = item.nivel_alm,
                            unidad = descUnidad,
                            minimo = 0,
                            existencia = 0,
                            cantidadPendiente = 0,
                            cant_recibida = 0,
                            moneda = 0,
                            monedaDesc = "",
                            minimoDesc = "",
                            solicitadoPendiente = 0,
                            partidaRequisicion = 0,
                            numeroRequisicion = 0,
                        });
                    }

                    entradaInventarioFisico.fechaString = ((DateTime)(entradaInventarioFisico.fecha)).ToShortDateString();
                    entradaInventarioFisico.detalle = entradaInventarioFisicoDetalle;

                    return entradaInventarioFisico;
                }
                else
                {
                    return null;
                }
                #endregion
            }
        }

        public List<entradasAlmacenDTO> guardarEntradaInventarioFisico(MovimientoEnkontrolDTO movimiento)
        {
            List<entradasAlmacenDTO> movEntradas = new List<entradasAlmacenDTO>();

            var empleado = 0;
            var usuarioSigoplan = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

            if (usuarioSigoplan != null)
            {
                empleado = usuarioSigoplan.empleado;
            }

            if ((MainContextEnum)vSesiones.sesionEmpresaActual == MainContextEnum.Construplan || (MainContextEnum)vSesiones.sesionEmpresaActual == MainContextEnum.Arrendadora)
            {
                #region MEXICO
                using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                {
                    using (var con = checkConexionProductivo())
                    {
                        using (var trans = con.BeginTransaction())
                        {
                            try
                            {
                                //#region Validación Permiso Movimiento Administrador
                                //var permisoAdministrador = _context.tblAlm_PermisoMovimientoAdministrador.FirstOrDefault(x => x.estatus && x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                                //if (permisoAdministrador == null)
                                //{
                                //    if (movimiento.almacen < 900)
                                //    {
                                //        throw new Exception("El usuario no tiene permiso para generar este movimiento.");
                                //    }
                                //}
                                //#endregion

                                #region Validación Inventariables
                                var registrosGrupoInsumo = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM grupos_insumo")).ToObject<List<dynamic>>();

                                foreach (var det in movimiento.detalle)
                                {
                                    var tipo_insumo = Int32.Parse(det.insumo.ToString().Substring(0, 1));
                                    var grupo_insumo = Int32.Parse(det.insumo.ToString().Substring(1, 2));
                                    var registroGrupoInsumo = registrosGrupoInsumo.FirstOrDefault(x => (int)x.tipo_insumo == tipo_insumo && (int)x.grupo_insumo == grupo_insumo);

                                    if (registroGrupoInsumo != null)
                                    {
                                        if ((string)registroGrupoInsumo.inventariado != "I")
                                        {
                                            throw new Exception(string.Format(@"El insumo ""{0}"" no es inventariable.", det.insumo));
                                        }
                                    }
                                    else
                                    {
                                        throw new Exception(string.Format(@"No se encuentra la información del grupo de insumo para el insumo ""{0}"".", det.insumo));
                                    }
                                }
                                #endregion

                                #region Validación Almacén Activo
                                var almacenEK = _contextEnkontrol.Select<dynamic>(getEnkontrolEnumADM(),
                                    new OdbcConsultaDTO()
                                    {
                                        consulta = @"SELECT * FROM si_almacen WHERE almacen = ?",
                                        parametros = new List<OdbcParameterDTO>() {
                                        new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = movimiento.almacen }
                                    }
                                    }
                                );

                                if (almacenEK.Count() == 0)
                                {
                                    throw new Exception("No se encuentra la información del almacén.");
                                }

                                if ((string)almacenEK[0].bit_mp != "S")
                                {
                                    throw new Exception("El almacén no está activo.");
                                }
                                #endregion

                                tblAlm_Movimientos nuevaEntrada = new tblAlm_Movimientos();

                                var ultimoMovimientoEK = consultaCheckProductivo(
                                    string.Format(@"SELECT 
                                                    TOP 1 numero 
                                                FROM si_movimientos 
                                                WHERE almacen = {0} AND tipo_mov = {1} 
                                                ORDER BY numero DESC", movimiento.almacen, 5)
                                );

                                var nuevoNumero = 0;

                                if (ultimoMovimientoEK != null)
                                {
                                    nuevoNumero = ((List<SurtidoDetDTO>)ultimoMovimientoEK.ToObject<List<SurtidoDetDTO>>())[0].numero;
                                }

                                nuevaEntrada = new tblAlm_Movimientos
                                {
                                    almacen = movimiento.almacen,
                                    tipo_mov = 5,
                                    numero = nuevoNumero + 1,
                                    cc = movimiento.cc.ToUpper(),
                                    compania = 1,
                                    periodo = DateTime.Now.Month,
                                    ano = DateTime.Now.Year,
                                    orden_ct = 0,
                                    frente = 0,
                                    fecha = DateTime.Now.Date,
                                    proveedor = 0,
                                    total = movimiento.total,
                                    estatus = "A",
                                    transferida = "N",
                                    alm_destino = 0,
                                    cc_destino = "",
                                    comentarios = movimiento.comentarios,
                                    tipo_trasp = "C",
                                    tipo_cambio = 1,
                                    estatusHabilitado = true,
                                    numeroReq = 0
                                };

                                _context.tblAlm_Movimientos.Add(nuevaEntrada);
                                _context.SaveChanges();

                                var partidaContador = 1;

                                foreach (var det in movimiento.detalle)
                                {
                                    var partidaMovimiento = partidaContador++;

                                    var nuevaSalidaDet = new tblAlm_MovimientosDet
                                    {
                                        almacen = nuevaEntrada.almacen,
                                        tipo_mov = 5,
                                        numero = nuevoNumero + 1,
                                        partida = partidaMovimiento,
                                        insumo = det.insumo,
                                        comentarios = det.comentarios,
                                        area = det.area ?? 0,
                                        cuenta = det.cuenta ?? 0,
                                        cantidad = det.cantidad,
                                        precio = det.precio,
                                        importe = det.importe,
                                        id_resguardo = 0,
                                        area_alm = det.area_alm ?? "",
                                        lado_alm = det.lado_alm ?? "",
                                        estante_alm = det.estante_alm ?? "",
                                        nivel_alm = det.nivel_alm ?? "",
                                        transporte = "",
                                        estatusHabilitado = true
                                    };

                                    _context.tblAlm_MovimientosDet.Add(nuevaSalidaDet);
                                    _context.SaveChanges();
                                }

                                if (nuevaEntrada.total <= 0)
                                {
                                    throw new Exception("El total no puede ser igual o menor a cero.");
                                }

                                var count = 0;

                                var consulta = @"INSERT INTO si_movimientos 
                                                (almacen, tipo_mov, numero, cc, compania, periodo, ano, orden_ct, frente, fecha, proveedor, total, estatus, 
                                                transferida, poliza, empleado, alm_destino, cc_destino, comentarios, tipo_trasp, numero_destino, tp, year_poliza, 
                                                mes_poliza, tipo_cambio, hora, fecha_modifica, empleado_modifica, destajista, obra, id_residente, factura, sector_id, 
                                                tc_cc, paquete, tipo_cargo, cargo_destajista, cargo_id_residente, embarque, orden_prod, folio_traspaso, bit_sin_ubicacion) 
                                                VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                using (var cmd = new OdbcCommand(consulta))
                                {
                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@almacen", OdbcType.Numeric).Value = nuevaEntrada.almacen;
                                    parameters.Add("@tipo_mov", OdbcType.Numeric).Value = nuevaEntrada.tipo_mov;
                                    parameters.Add("@numero", OdbcType.Numeric).Value = nuevaEntrada.numero;
                                    parameters.Add("@cc", OdbcType.Char).Value = nuevaEntrada.cc ?? "";
                                    parameters.Add("@compania", OdbcType.Numeric).Value = nuevaEntrada.compania;
                                    parameters.Add("@periodo", OdbcType.Numeric).Value = nuevaEntrada.periodo;
                                    parameters.Add("@ano", OdbcType.Numeric).Value = nuevaEntrada.ano;
                                    parameters.Add("@orden_ct", OdbcType.Numeric).Value = nuevaEntrada.orden_ct;
                                    parameters.Add("@frente", OdbcType.Numeric).Value = nuevaEntrada.frente;
                                    parameters.Add("@fecha", OdbcType.Date).Value = nuevaEntrada.fecha.Date;
                                    parameters.Add("@proveedor", OdbcType.Numeric).Value = nuevaEntrada.proveedor;
                                    parameters.Add("@total", OdbcType.Numeric).Value = nuevaEntrada.total;
                                    parameters.Add("@estatus", OdbcType.Char).Value = nuevaEntrada.estatus ?? "";
                                    parameters.Add("@transferida", OdbcType.Char).Value = nuevaEntrada.transferida ?? "";
                                    parameters.Add("@poliza", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@empleado", OdbcType.Numeric).Value = empleado;
                                    parameters.Add("@alm_destino", OdbcType.Numeric).Value = nuevaEntrada.alm_destino;
                                    parameters.Add("@cc_destino", OdbcType.Char).Value = nuevaEntrada.cc_destino ?? "";
                                    parameters.Add("@comentarios", OdbcType.Char).Value = nuevaEntrada.comentarios ?? "";
                                    parameters.Add("@tipo_trasp", OdbcType.Char).Value = nuevaEntrada.tipo_trasp ?? "";
                                    parameters.Add("@numero_destino", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@tp", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@year_poliza", OdbcType.Numeric).Value = DateTime.Now.Year;
                                    parameters.Add("@mes_poliza", OdbcType.Numeric).Value = DateTime.Now.Month;
                                    parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = nuevaEntrada.tipo_cambio;
                                    parameters.Add("@hora", OdbcType.Time).Value = DateTime.Now.TimeOfDay;
                                    parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                    parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = empleado;
                                    parameters.Add("@destajista", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@factura", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@tc_cc", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@paquete", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@tipo_cargo", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@cargo_Destajista", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@cargo_id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@embarque", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@orden_prod", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@folio_traspaso", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@bit_sin_ubicacion", OdbcType.Numeric).Value = 0;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;

                                    count += cmd.ExecuteNonQuery();
                                }

                                var ccDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM cc WHERE cc = '{0}' AND st_ppto != 'T'", movimiento.cc));
                                var ccDesc = (string)(((List<dynamic>)ccDescEK.ToObject<List<dynamic>>())[0].descripcion);
                                var almacenDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", movimiento.almacen));
                                var almacenDesc = (string)(((List<dynamic>)almacenDescEK.ToObject<List<dynamic>>())[0].descripcion);

                                foreach (var entDet in movimiento.detalle)
                                {
                                    var insumoDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM insumos WHERE insumo = {0}", entDet.insumo));
                                    var insumoDesc = (string)(((List<dynamic>)insumoDescEK.ToObject<List<dynamic>>())[0].descripcion);
                                    var importe = entDet.cantidad * entDet.precio;
                                    decimal costoPromedio = getCostoPromedioKardex(entDet.almacen, entDet.insumo); //decimal costoPromedio = getCostoPromedioNuevo(entDet.almacen, entDet.insumo);

                                    if (entDet.precio <= 0 || importe <= 0)
                                    {
                                        throw new Exception("El precio y el importe no pueden ser igual o menor a cero.");
                                    }

                                    var consultaDet = @"INSERT INTO si_movimientos_det 
                                         (almacen, tipo_mov, numero, partida, insumo, comentarios, area, cuenta, cantidad, precio, importe, 
                                         partida_oc, costo_prom, obra, manzana_ini, lote_ini, interior_ini, manzana_fin, lote_fin, interior_fin, 
                                         remision, sector_id, id_resguardo, area_alm, lado_alm, estante_alm, nivel_alm, fecha_fisico) 
                                         VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                    using (var cmd = new OdbcCommand(consultaDet))
                                    {
                                        OdbcParameterCollection parameters = cmd.Parameters;

                                        parameters.Add("@almacen", OdbcType.Numeric).Value = entDet.almacen;
                                        parameters.Add("@tipo_mov", OdbcType.Numeric).Value = entDet.tipo_mov;
                                        parameters.Add("@numero", OdbcType.Numeric).Value = nuevoNumero + 1;
                                        parameters.Add("@partida", OdbcType.Numeric).Value = entDet.partida;
                                        parameters.Add("@insumo", OdbcType.Numeric).Value = entDet.insumo;
                                        parameters.Add("@comentarios", OdbcType.Char).Value = entDet.comentarios ?? "";
                                        parameters.Add("@area", OdbcType.Numeric).Value = entDet.area ?? 0;
                                        parameters.Add("@cuenta", OdbcType.Numeric).Value = entDet.cuenta ?? 0;
                                        parameters.Add("@cantidad", OdbcType.Numeric).Value = entDet.cantidad;
                                        parameters.Add("@precio", OdbcType.Numeric).Value = entDet.precio;
                                        parameters.Add("@importe", OdbcType.Numeric).Value = importe;
                                        parameters.Add("@partida_oc", OdbcType.Numeric).Value = entDet.partida_oc ?? 0;
                                        parameters.Add("@costo_prom", OdbcType.Numeric).Value = costoPromedio;
                                        parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@manzana_ini", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@lote_ini", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@interior_ini", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@manzana_fin", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@lote_fin", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@interior_fin", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@remision", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@id_resguardo", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@area_alm", OdbcType.Char).Value = entDet.area_alm ?? "";
                                        parameters.Add("@lado_alm", OdbcType.Char).Value = entDet.lado_alm ?? "";
                                        parameters.Add("@estante_alm", OdbcType.Char).Value = entDet.estante_alm ?? "";
                                        parameters.Add("@nivel_alm", OdbcType.Char).Value = entDet.nivel_alm ?? "";
                                        parameters.Add("@fecha_fisico", OdbcType.Date).Value = DBNull.Value;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;

                                        count += cmd.ExecuteNonQuery();

                                        movEntradas.Add(new entradasAlmacenDTO
                                        {
                                            centroCosto = movimiento.cc + "-" + ccDesc,
                                            folioEntrada = (nuevoNumero + 1).ToString(),
                                            almacen = movimiento.almacen + "-" + almacenDesc,
                                            fechaEntrada = nuevaEntrada.fecha,
                                            partida = entDet.partida,
                                            insumo = entDet.insumo + "-" + insumoDesc ?? "",
                                            areaCuenta = entDet.area + "-" + entDet.cuenta,
                                            referencia = "",
                                            remision = "",
                                            cantidad = entDet.cantidad,
                                            precio = entDet.precio,
                                            importe = entDet.cantidad * entDet.precio,
                                            comentarios = movimiento.comentarios != null ? (string)movimiento.comentarios : "",
                                            ordenCompra = nuevaEntrada.orden_ct.ToString(),
                                            proveedor = "",
                                            direccion = "",
                                            ciudad = "",
                                            telefonos = "",

                                            area_alm = entDet.area_alm ?? "",
                                            lado_alm = entDet.lado_alm ?? "",
                                            estante_alm = entDet.estante_alm ?? "",
                                            nivel_alm = entDet.nivel_alm ?? ""
                                        });
                                    }

                                    #region Actualizar Tablas Acumula
                                    var objAcumula = new MovimientoDetalleEnkontrolDTO
                                    {
                                        insumo = entDet.insumo,
                                        cantidad = entDet.cantidad,
                                        precio = entDet.precio,
                                        tipo_mov = entDet.tipo_mov,
                                        costo_prom = costoPromedio
                                    };

                                    actualizarAcumula(nuevaEntrada.almacen, nuevaEntrada.cc, objAcumula, dbSigoplanTransaction, trans);
                                    #endregion
                                }

                                trans.Commit();
                                dbSigoplanTransaction.Commit();
                            }
                            catch (Exception e)
                            {
                                trans.Rollback();
                                dbSigoplanTransaction.Rollback();

                                LogError(12, 0, "AlmacenController", "guardarEntradaInventarioFisico", e, AccionEnum.AGREGAR, 0, movimiento);

                                throw new Exception(e.Message);
                            }
                        }
                    }
                }
                #endregion
            }
            else if ((MainContextEnum)vSesiones.sesionEmpresaActual == MainContextEnum.Colombia)
            {
                #region COLOMBIA
                using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                {
                    using (var con = checkConexionProductivo())
                    {
                        using (var trans = con.BeginTransaction())
                        {
                            try
                            {
                                //#region Validación Permiso Movimiento Administrador
                                //var permisoAdministrador = _context.tblAlm_PermisoMovimientoAdministrador.FirstOrDefault(x => x.estatus && x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                                //if (permisoAdministrador == null)
                                //{
                                //    if (movimiento.almacen < 900)
                                //    {
                                //        throw new Exception("El usuario no tiene permiso para generar este movimiento.");
                                //    }
                                //}
                                //#endregion

                                #region Validación Inventariables
                                var registrosGrupoInsumo = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM grupos_insumo")).ToObject<List<dynamic>>();

                                foreach (var det in movimiento.detalle)
                                {
                                    var tipo_insumo = Int32.Parse(det.insumo.ToString().Substring(0, 1));
                                    var grupo_insumo = Int32.Parse(det.insumo.ToString().Substring(1, 2));
                                    var registroGrupoInsumo = registrosGrupoInsumo.FirstOrDefault(x => (int)x.tipo_insumo == tipo_insumo && (int)x.grupo_insumo == grupo_insumo);

                                    if (registroGrupoInsumo != null)
                                    {
                                        if ((string)registroGrupoInsumo.inventariado != "I")
                                        {
                                            throw new Exception(string.Format(@"El insumo ""{0}"" no es inventariable.", det.insumo));
                                        }
                                    }
                                    else
                                    {
                                        throw new Exception(string.Format(@"No se encuentra la información del grupo de insumo para el insumo ""{0}"".", det.insumo));
                                    }
                                }
                                #endregion

                                #region Validación Almacén Activo
                                var almacenEK = _contextEnkontrol.Select<dynamic>(getEnkontrolEnumADM(),
                                    new OdbcConsultaDTO()
                                    {
                                        consulta = @"SELECT * FROM DBA.si_almacen WHERE almacen = ?",
                                        parametros = new List<OdbcParameterDTO>() {
                                        new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = movimiento.almacen }
                                    }
                                    }
                                );

                                if (almacenEK.Count() == 0)
                                {
                                    throw new Exception("No se encuentra la información del almacén.");
                                }

                                if ((string)almacenEK[0].bit_mp != "S")
                                {
                                    throw new Exception("El almacén no está activo.");
                                }
                                #endregion

                                tblAlm_Movimientos nuevaEntrada = new tblAlm_Movimientos();

                                var ultimoMovimientoEK = consultaCheckProductivo(
                                    string.Format(@"SELECT 
                                                    TOP 1 numero 
                                                FROM si_movimientos 
                                                WHERE almacen = {0} AND tipo_mov = {1} 
                                                ORDER BY numero DESC", movimiento.almacen, 5)
                                );

                                var nuevoNumero = 0;

                                if (ultimoMovimientoEK != null)
                                {
                                    nuevoNumero = ((List<SurtidoDetDTO>)ultimoMovimientoEK.ToObject<List<SurtidoDetDTO>>())[0].numero;
                                }

                                nuevaEntrada = new tblAlm_Movimientos
                                {
                                    almacen = movimiento.almacen,
                                    tipo_mov = 5,
                                    numero = nuevoNumero + 1,
                                    cc = movimiento.cc.ToUpper(),
                                    compania = 1,
                                    periodo = DateTime.Now.Month,
                                    ano = DateTime.Now.Year,
                                    orden_ct = 0,
                                    frente = 0,
                                    fecha = DateTime.Now.Date,
                                    proveedor = 0,
                                    total = movimiento.total,
                                    estatus = "A",
                                    transferida = "N",
                                    alm_destino = 0,
                                    cc_destino = "",
                                    comentarios = movimiento.comentarios,
                                    tipo_trasp = "C",
                                    tipo_cambio = 1,
                                    estatusHabilitado = true,
                                    numeroReq = 0
                                };

                                _context.tblAlm_Movimientos.Add(nuevaEntrada);
                                _context.SaveChanges();

                                var partidaContador = 1;

                                foreach (var det in movimiento.detalle)
                                {
                                    var partidaMovimiento = partidaContador++;

                                    var nuevaSalidaDet = new tblAlm_MovimientosDet
                                    {
                                        almacen = nuevaEntrada.almacen,
                                        tipo_mov = 5,
                                        numero = nuevoNumero + 1,
                                        partida = partidaMovimiento,
                                        insumo = det.insumo,
                                        comentarios = det.comentarios,
                                        area = det.area ?? 0,
                                        cuenta = det.cuenta ?? 0,
                                        cantidad = det.cantidad,
                                        precio = det.precio,
                                        importe = det.importe,
                                        id_resguardo = 0,
                                        area_alm = det.area_alm ?? "",
                                        lado_alm = det.lado_alm ?? "",
                                        estante_alm = det.estante_alm ?? "",
                                        nivel_alm = det.nivel_alm ?? "",
                                        transporte = "",
                                        estatusHabilitado = true
                                    };

                                    _context.tblAlm_MovimientosDet.Add(nuevaSalidaDet);
                                    _context.SaveChanges();
                                }

                                if (nuevaEntrada.total <= 0)
                                {
                                    throw new Exception("El total no puede ser igual o menor a cero.");
                                }

                                var count = 0;

                                var consulta = @"INSERT INTO DBA.si_movimientos 
                                                (almacen, tipo_mov, numero, cc, compania, periodo, ano, orden_ct, frente, fecha, proveedor, total, estatus, 
                                                transferida, poliza, empleado, alm_destino, cc_destino, comentarios, tipo_trasp, numero_destino, tp, year_poliza, 
                                                mes_poliza, tipo_cambio, hora, fecha_modifica, empleado_modifica, destajista, obra, id_residente, factura, sector_id, 
                                                tc_cc, paquete, tipo_cargo, cargo_destajista, cargo_id_residente, embarque, orden_prod, numero_prevale, obra_destino, indica_prov) 
                                                VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                using (var cmd = new OdbcCommand(consulta))
                                {
                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@almacen", OdbcType.Numeric).Value = nuevaEntrada.almacen;
                                    parameters.Add("@tipo_mov", OdbcType.Numeric).Value = nuevaEntrada.tipo_mov;
                                    parameters.Add("@numero", OdbcType.Numeric).Value = nuevaEntrada.numero;
                                    parameters.Add("@cc", OdbcType.Char).Value = nuevaEntrada.cc ?? "";
                                    parameters.Add("@compania", OdbcType.Numeric).Value = nuevaEntrada.compania;
                                    parameters.Add("@periodo", OdbcType.Numeric).Value = nuevaEntrada.periodo;
                                    parameters.Add("@ano", OdbcType.Numeric).Value = nuevaEntrada.ano;
                                    parameters.Add("@orden_ct", OdbcType.Numeric).Value = nuevaEntrada.orden_ct;
                                    parameters.Add("@frente", OdbcType.Numeric).Value = nuevaEntrada.frente;
                                    parameters.Add("@fecha", OdbcType.Date).Value = nuevaEntrada.fecha.Date;
                                    parameters.Add("@proveedor", OdbcType.Numeric).Value = nuevaEntrada.proveedor;
                                    parameters.Add("@total", OdbcType.Numeric).Value = nuevaEntrada.total;
                                    parameters.Add("@estatus", OdbcType.Char).Value = nuevaEntrada.estatus ?? "";
                                    parameters.Add("@transferida", OdbcType.Char).Value = nuevaEntrada.transferida ?? "";
                                    parameters.Add("@poliza", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@empleado", OdbcType.Numeric).Value = empleado;
                                    parameters.Add("@alm_destino", OdbcType.Numeric).Value = nuevaEntrada.alm_destino;
                                    parameters.Add("@cc_destino", OdbcType.Char).Value = nuevaEntrada.cc_destino ?? "";
                                    parameters.Add("@comentarios", OdbcType.Char).Value = nuevaEntrada.comentarios ?? "";
                                    parameters.Add("@tipo_trasp", OdbcType.Char).Value = nuevaEntrada.tipo_trasp ?? "";
                                    parameters.Add("@numero_destino", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@tp", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@year_poliza", OdbcType.Numeric).Value = DateTime.Now.Year;
                                    parameters.Add("@mes_poliza", OdbcType.Numeric).Value = DateTime.Now.Month;
                                    parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = nuevaEntrada.tipo_cambio;
                                    parameters.Add("@hora", OdbcType.Time).Value = DateTime.Now.TimeOfDay;
                                    parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                    parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = empleado;
                                    parameters.Add("@destajista", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@factura", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@tc_cc", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@paquete", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@tipo_cargo", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@cargo_Destajista", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@cargo_id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@embarque", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@orden_prod", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@numero_prevale", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@obra_destino", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@indica_prov", OdbcType.Char).Value = DBNull.Value;

                                    //parameters.Add("@folio_traspaso", OdbcType.Numeric).Value = DBNull.Value;
                                    //parameters.Add("@bit_sin_ubicacion", OdbcType.Numeric).Value = 0;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;

                                    count += cmd.ExecuteNonQuery();
                                }

                                var ccDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM cc WHERE cc = '{0}' AND st_ppto != 'T'", movimiento.cc));
                                var ccDesc = (string)(((List<dynamic>)ccDescEK.ToObject<List<dynamic>>())[0].descripcion);
                                var almacenDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", movimiento.almacen));
                                var almacenDesc = (string)(((List<dynamic>)almacenDescEK.ToObject<List<dynamic>>())[0].descripcion);

                                foreach (var entDet in movimiento.detalle)
                                {
                                    var insumoDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM insumos WHERE insumo = {0}", entDet.insumo));
                                    var insumoDesc = (string)(((List<dynamic>)insumoDescEK.ToObject<List<dynamic>>())[0].descripcion);
                                    var importe = entDet.cantidad * entDet.precio;
                                    decimal costoPromedio = getCostoPromedioKardex(entDet.almacen, entDet.insumo); //decimal costoPromedio = getCostoPromedioNuevo(entDet.almacen, entDet.insumo);

                                    if (entDet.precio <= 0 || importe <= 0)
                                    {
                                        throw new Exception("El precio y el importe no pueden ser igual o menor a cero.");
                                    }

                                    var consultaDet = @"INSERT INTO DBA.si_movimientos_det 
                                         (almacen, tipo_mov, numero, partida, insumo, comentarios, area, cuenta, cantidad, precio, importe, 
                                         partida_oc, costo_prom, obra, manzana_ini, lote_ini, interior_ini, manzana_fin, lote_fin, interior_fin, 
                                         remision, sector_id, lote_id, folio_oc, numero_prevale, frente_ppto, partida_ppto, numero_economico, iva, porcent_iva, folio, kit, tarjeta, secuencia) 
                                         VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                    using (var cmd = new OdbcCommand(consultaDet))
                                    {
                                        OdbcParameterCollection parameters = cmd.Parameters;

                                        parameters.Add("@almacen", OdbcType.Numeric).Value = entDet.almacen;
                                        parameters.Add("@tipo_mov", OdbcType.Numeric).Value = entDet.tipo_mov;
                                        parameters.Add("@numero", OdbcType.Numeric).Value = nuevoNumero + 1;
                                        parameters.Add("@partida", OdbcType.Numeric).Value = entDet.partida;
                                        parameters.Add("@insumo", OdbcType.Numeric).Value = entDet.insumo;
                                        parameters.Add("@comentarios", OdbcType.Char).Value = entDet.comentarios ?? "";
                                        parameters.Add("@area", OdbcType.Numeric).Value = entDet.area ?? 0;
                                        parameters.Add("@cuenta", OdbcType.Numeric).Value = entDet.cuenta ?? 0;
                                        parameters.Add("@cantidad", OdbcType.Numeric).Value = entDet.cantidad;
                                        parameters.Add("@precio", OdbcType.Numeric).Value = entDet.precio;
                                        parameters.Add("@importe", OdbcType.Numeric).Value = importe;
                                        parameters.Add("@partida_oc", OdbcType.Numeric).Value = entDet.partida_oc ?? 0;
                                        parameters.Add("@costo_prom", OdbcType.Numeric).Value = costoPromedio;
                                        parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@manzana_ini", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@lote_ini", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@interior_ini", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@manzana_fin", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@lote_fin", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@interior_fin", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@remision", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@lote_id", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@folio_oc", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@numero_prevale", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@frente_ppto", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@partida_ppto", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@numero_economico", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@iva", OdbcType.Decimal).Value = DBNull.Value;
                                        parameters.Add("@porcent_iva", OdbcType.Decimal).Value = DBNull.Value;
                                        parameters.Add("@folio", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@kit", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@tarjeta", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@secuencia", OdbcType.Char).Value = DBNull.Value;
                                        //parameters.Add("@id_resguardo", OdbcType.Numeric).Value = DBNull.Value;
                                        //parameters.Add("@area_alm", OdbcType.Char).Value = entDet.area_alm ?? "";
                                        //parameters.Add("@lado_alm", OdbcType.Char).Value = entDet.lado_alm ?? "";
                                        //parameters.Add("@estante_alm", OdbcType.Char).Value = entDet.estante_alm ?? "";
                                        //parameters.Add("@nivel_alm", OdbcType.Char).Value = entDet.nivel_alm ?? "";
                                        //parameters.Add("@fecha_fisico", OdbcType.Date).Value = DBNull.Value;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;

                                        count += cmd.ExecuteNonQuery();

                                        movEntradas.Add(new entradasAlmacenDTO
                                        {
                                            centroCosto = movimiento.cc + "-" + ccDesc,
                                            folioEntrada = (nuevoNumero + 1).ToString(),
                                            almacen = movimiento.almacen + "-" + almacenDesc,
                                            fechaEntrada = nuevaEntrada.fecha,
                                            partida = entDet.partida,
                                            insumo = entDet.insumo + "-" + insumoDesc ?? "",
                                            areaCuenta = entDet.area + "-" + entDet.cuenta,
                                            referencia = "",
                                            remision = "",
                                            cantidad = entDet.cantidad,
                                            precio = entDet.precio,
                                            importe = entDet.cantidad * entDet.precio,
                                            comentarios = movimiento.comentarios != null ? (string)movimiento.comentarios : "",
                                            ordenCompra = nuevaEntrada.orden_ct.ToString(),
                                            proveedor = "",
                                            direccion = "",
                                            ciudad = "",
                                            telefonos = "",

                                            area_alm = entDet.area_alm ?? "",
                                            lado_alm = entDet.lado_alm ?? "",
                                            estante_alm = entDet.estante_alm ?? "",
                                            nivel_alm = entDet.nivel_alm ?? ""
                                        });
                                    }

                                    #region Actualizar Tablas Acumula
                                    var objAcumula = new MovimientoDetalleEnkontrolDTO
                                    {
                                        insumo = entDet.insumo,
                                        cantidad = entDet.cantidad,
                                        precio = entDet.precio,
                                        tipo_mov = entDet.tipo_mov,
                                        costo_prom = costoPromedio
                                    };

                                    actualizarAcumula(nuevaEntrada.almacen, nuevaEntrada.cc, objAcumula, dbSigoplanTransaction, trans);
                                    #endregion
                                }

                                trans.Commit();
                                dbSigoplanTransaction.Commit();
                            }
                            catch (Exception e)
                            {
                                trans.Rollback();
                                dbSigoplanTransaction.Rollback();

                                LogError(12, 0, "AlmacenController", "guardarEntradaInventarioFisico", e, AccionEnum.AGREGAR, 0, movimiento);

                                throw new Exception(e.Message);
                            }
                        }
                    }
                }
                #endregion
            }
            else
            {
                #region PERU
                var usuarioStarsoft = _context.tblP_Usuario_Starsoft.FirstOrDefault(x => x.sigoplan_usuario_id == vSesiones.sesionUsuarioDTO.id);

                using (var dbStarsoft = new MainContextPeruStarSoft003BDCOMUN())
                {
                    using (var dbStarsoftTransaction = dbStarsoft.Database.BeginTransaction())
                    {
                        using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                        {
                            try
                            {
                                #region USUARIO INVENTARIOS STARSOFT

                                var objUsrStarsoftInventarios = _context.tblAlm_Almacenistas.FirstOrDefault(e => e.id_usuario_sigoplan == vSesiones.sesionUsuarioDTO.id);

                                string idAlmacenistaStarsoft = "0";

                                if (objUsrStarsoftInventarios == null)
                                {
                                    if (vSesiones.sesionUsuarioDTO.idPerfil == 1)
                                    {
                                        idAlmacenistaStarsoft = "1";
                                    }
                                    else
                                    {
                                        throw new Exception("Esta usuario no es un almacenista en el sistema de PERU");
                                    }
                                }
                                else
                                {
                                    idAlmacenistaStarsoft = objUsrStarsoftInventarios.id_usuario_inventarios;
                                }
                                #endregion

                                #region Validación Inventariables STARSOFT

                                var lstInsumos = new List<MAEART>();

                                foreach (var det in movimiento.detalle)
                                {

                                    var objInsumo = dbStarsoft.MAEART.FirstOrDefault(e => e.ACODIGO == det.PERU_insumo);

                                    if (objInsumo != null)
                                    {
                                        lstInsumos.Add(objInsumo);

                                        if (objInsumo.ACODIGO.Substring(0, 2) == "02")
                                        {
                                            throw new Exception(string.Format(@"El insumo ""{0}"" no es inventariable.", det.PERU_insumo));
                                        }
                                    }
                                    else
                                    {
                                        throw new Exception(string.Format(@"No se encuentra la información para el insumo ""{0}"".", det.PERU_insumo));
                                    }
                                }
                                #endregion

                                #region Validación Almacén Activo STARSOFT

                                string almacenStarsoft = "";
                                if (movimiento.almacen > 9)
                                {
                                    almacenStarsoft = movimiento.almacen.ToString();
                                }
                                else
                                {
                                    almacenStarsoft = "0" + movimiento.almacen;
                                }

                                var objAlmacen = dbStarsoft.TABALM.FirstOrDefault(e => e.TAALMA == almacenStarsoft);

                                if (objAlmacen == null)
                                {
                                    throw new Exception("No se encuentra la información del almacén.");
                                }

                                #endregion

                                bool flagAlmacenVirtual = movimiento.almacen >= 90;

                                if (!flagAlmacenVirtual)
                                {
                                    #region SIGOPLAN HEADER
                                    tblAlm_Movimientos nuevaEntrada = new tblAlm_Movimientos();

                                    //var ultimoMovimientoSigoplan = _context.tblAlm_Movimientos.Where(e => e.almacen == movimiento.almacen && e.tipo_mov < 50).OrderByDescending(e => e.id).FirstOrDefault();

                                    //var nuevoNumero = 0;

                                    //if (ultimoMovimientoSigoplan != null)
                                    //{
                                    //    nuevoNumero = ultimoMovimientoSigoplan.numero;
                                    //}

                                    int ultimoFolio = dbStarsoft.MOVALMCAB.ToList().Where(x => Int32.Parse(x.CAALMA) == movimiento.almacen && x.CATD == "NI").Select(x => Int32.Parse(x.CANUMDOC)).OrderByDescending(x => x).FirstOrDefault();

                                    nuevaEntrada = new tblAlm_Movimientos
                                    {
                                        almacen = movimiento.almacen,
                                        tipo_mov = 5,
                                        numero = ultimoFolio + 1,
                                        cc = movimiento.cc.ToUpper(),
                                        compania = 1,
                                        periodo = DateTime.Now.Month,
                                        ano = DateTime.Now.Year,
                                        orden_ct = 0,
                                        frente = 0,
                                        fecha = DateTime.Now.Date,
                                        proveedor = 0,
                                        total = movimiento.total,
                                        estatus = "A",
                                        transferida = "N",
                                        alm_destino = 0,
                                        cc_destino = "",
                                        comentarios = movimiento.comentarios,
                                        tipo_trasp = "C",
                                        tipo_cambio = 1,
                                        estatusHabilitado = true,
                                        numeroReq = 0,
                                        idUsuarioCreacion = vSesiones.sesionUsuarioDTO.id,
                                        fechaCreacion = DateTime.Now,
                                    };

                                    _context.tblAlm_Movimientos.Add(nuevaEntrada);
                                    _context.SaveChanges();
                                    #endregion

                                    #region STARSOFT HEADER
                                    string numeroMovimientoStarsoft = (ultimoFolio + 1).ToString("D10");

                                    //TIPO DE CAMBIO DEL DIA O ANTERIOR
                                    decimal tipoCambioPeru = 0M;

                                    using (var dbStarsoftConta = new MainContextPeruStarSoft003BDCONTABILIDAD())
                                    {
                                        var tipoCambioActual = dbStarsoftConta.TIPO_CAMBIO.ToList().FirstOrDefault(e => e.TIPOCAMB_FECHA.Date == DateTime.Now.Date);
                                        if (tipoCambioActual != null)
                                        {
                                            tipoCambioPeru = tipoCambioActual.TIPOCAMB_COMPRA;
                                        }
                                        else
                                        {
                                            tipoCambioPeru = dbStarsoftConta.TIPO_CAMBIO.ToList().FirstOrDefault(e => e.TIPOCAMB_FECHA.Date == DateTime.Now.AddDays(-1).Date).TIPOCAMB_COMPRA;
                                        }

                                    }

                                    #region INSERT MOVALMCAB

                                    MOVALMCAB objCrearMovCab = new MOVALMCAB();

                                    objCrearMovCab.CAALMA = almacenStarsoft;
                                    objCrearMovCab.CATD = "NI";
                                    objCrearMovCab.CANUMDOC = numeroMovimientoStarsoft;
                                    objCrearMovCab.CAFECDOC = DateTime.Now.Date;
                                    objCrearMovCab.CATIPMOV = "I";
                                    objCrearMovCab.CACODMOV = "AJ";
                                    objCrearMovCab.CASITUA = "M";
                                    objCrearMovCab.CARFTDOC = ""; //PENDIENTE CHECAR CUANDO DEJA VER EL STOCK DE LOS INSUMOS EN EL ALMACEN (ASI SI DEJA AGREGARLOS;
                                    objCrearMovCab.CARFNDOC = null;
                                    objCrearMovCab.CASOLI = null;
                                    objCrearMovCab.CAFECDEV = null;
                                    objCrearMovCab.CACODPRO = null;
                                    objCrearMovCab.CACENCOS = movimiento.cc;
                                    objCrearMovCab.CARFALMA = null;
                                    objCrearMovCab.CAGLOSA = movimiento.comentarios;
                                    objCrearMovCab.CAFECACT = DateTime.Now.Date;
                                    objCrearMovCab.CAHORA = DateTime.Now.ToString("HH:mm:ss");
                                    objCrearMovCab.CAUSUARI = idAlmacenistaStarsoft;
                                    objCrearMovCab.CACODCLI = null;
                                    objCrearMovCab.CARUC = null;
                                    objCrearMovCab.CANOMCLI = null;
                                    objCrearMovCab.CAFORVEN = null;
                                    objCrearMovCab.CACODMON = "MN"; //PENDIENTE TIPO DE MONED;
                                    objCrearMovCab.CAVENDE = null;
                                    objCrearMovCab.CATIPCAM = tipoCambioPeru;
                                    objCrearMovCab.CATIPGUI = null;
                                    objCrearMovCab.CASITGUI = "V";
                                    objCrearMovCab.CAGUIFAC = null;
                                    objCrearMovCab.CADIRENV = null;
                                    objCrearMovCab.CACODTRAN = null;
                                    objCrearMovCab.CANUMORD = null;
                                    objCrearMovCab.CAGUIDEV = null;
                                    objCrearMovCab.CANOMPRO = null;
                                    objCrearMovCab.CANROPED = null;
                                    objCrearMovCab.CACOTIZA = null;
                                    objCrearMovCab.CAPORDESCL = 0M;
                                    objCrearMovCab.CAPORDESES = 0M;
                                    objCrearMovCab.CAIMPORTE = movimiento.total;
                                    objCrearMovCab.CANOMTRA = null;
                                    objCrearMovCab.CADIRTRA = null;
                                    objCrearMovCab.CARUCTRA = null;
                                    objCrearMovCab.CAPLATRA = null;
                                    objCrearMovCab.CANROIMP = null;
                                    objCrearMovCab.CACODLIQ = null;
                                    objCrearMovCab.CAESTIMP = null;
                                    objCrearMovCab.CACIERRE = false;
                                    objCrearMovCab.CATIPDEP = null;
                                    objCrearMovCab.CAZONAF = null;
                                    objCrearMovCab.FLAGGS = false;
                                    objCrearMovCab.ASIENTO = false;
                                    objCrearMovCab.CAFLETE = 0M;
                                    objCrearMovCab.CAORDFAB = "";
                                    objCrearMovCab.CAPEDREFE = null;
                                    objCrearMovCab.CAIMPORTACION = false;
                                    objCrearMovCab.CANROCAJAS = 0;
                                    objCrearMovCab.CAPESOTOTAL = 0M;
                                    objCrearMovCab.CADESPACHO = false;
                                    objCrearMovCab.LINVCODIGO = null;
                                    objCrearMovCab.COD_DIRECCION = null;
                                    objCrearMovCab.COSTOMIN = 0M;
                                    objCrearMovCab.CAINTERFACE = 0;
                                    objCrearMovCab.CACTACONT = null;
                                    objCrearMovCab.CACONTROLSTOCK = "N";
                                    objCrearMovCab.CANOMRECEP = null;
                                    objCrearMovCab.CADNIRECEP = null;
                                    objCrearMovCab.CFDIREREFE = null;
                                    objCrearMovCab.REG_COMPRA = false;
                                    objCrearMovCab.OC_NI_GUIA = false;
                                    objCrearMovCab.COD_AUDITORIA = "0";
                                    objCrearMovCab.COD_MODULO = "03";
                                    objCrearMovCab.NO_GIRO_NEGOCIO = false;
                                    objCrearMovCab.MOTIVO_ANULACION_DOC_ELECTRONICO = null;
                                    objCrearMovCab.DOCUMENTO_ELECTRONICO = null;
                                    objCrearMovCab.GS_BAJA = null;
                                    objCrearMovCab.CADocumentoImportado = null;
                                    objCrearMovCab.SOLICITANTE = null;
                                    objCrearMovCab.DOCUMENTO_CONTINGENCIA = null;
                                    objCrearMovCab.GE_BAJA = null;

                                    dbStarsoft.MOVALMCAB.Add(objCrearMovCab);

                                    dbStarsoft.SaveChanges();

                                    #endregion

                                    #endregion

                                    #region STARSOFT CONSECUTIVOS
                                    objAlmacen.TANUMENT = Int32.Parse(numeroMovimientoStarsoft);
                                    dbStarsoft.SaveChanges();
                                    #endregion

                                    var partidaContador = 1;
                                    string ccDesc = _context.tblC_Nom_CatalogoCC.FirstOrDefault(e => e.cc == movimiento.cc).ccDescripcion;
                                    string almacenDesc = objAlmacen.TADESCRI;

                                    foreach (var det in movimiento.detalle)
                                    {
                                        var objInsumo = lstInsumos.FirstOrDefault(e => e.ACODIGO == det.PERU_insumo);

                                        #region SIGOPLAN DET

                                        var nuevaSalidaDet = new tblAlm_MovimientosDet
                                        {
                                            almacen = nuevaEntrada.almacen,
                                            tipo_mov = 5,
                                            numero = ultimoFolio + 1,
                                            partida = partidaContador,
                                            insumo = det.insumo,
                                            comentarios = det.comentarios,
                                            area = det.area ?? 0,
                                            cuenta = det.cuenta ?? 0,
                                            cantidad = det.cantidad,
                                            precio = det.precio,
                                            importe = det.importe,
                                            id_resguardo = 0,
                                            area_alm = det.area_alm ?? "",
                                            lado_alm = det.lado_alm ?? "",
                                            estante_alm = det.estante_alm ?? "",
                                            nivel_alm = det.nivel_alm ?? "",
                                            transporte = "",
                                            estatusHabilitado = true,
                                            PERU_insumo = det.PERU_insumo,
                                        };

                                        _context.tblAlm_MovimientosDet.Add(nuevaSalidaDet);
                                        _context.SaveChanges();
                                        #endregion

                                        #region STARSOFT DET

                                        #region INSERT MOVALMDET
                                        dbStarsoft.MovAlmDet.Add(new MovAlmDet()
                                        {
                                            DEALMA = almacenStarsoft,
                                            DETD = "NI",
                                            DENUMDOC = numeroMovimientoStarsoft,
                                            DEITEM = partidaContador,
                                            DECODIGO = det.PERU_insumo,
                                            DECODREF = null,
                                            DECANTID = det.cantidad,
                                            DECANTENT = 0M,
                                            DECANREF = 0M,
                                            DECANFAC = 0M,
                                            DEORDEN = null,
                                            DEPREUNI = 0M,
                                            DEPRECIO = det.precio,
                                            DEPRECI1 = 0M,
                                            DEDESCTO = 0M,
                                            DESTOCK = null,
                                            DEIGV = 0M,
                                            DEIMPMN = det.precio,
                                            DEIMPUS = det.precio * tipoCambioPeru,
                                            DESERIE = null,
                                            DESITUA = null,
                                            DEFECDOC = null,
                                            DECENCOS = movimiento.cc,
                                            DERFALMA = null,
                                            DETR = null,
                                            DEESTADO = "V",
                                            DECODMOV = "AJ",
                                            DEVALTOT = det.precio * det.cantidad,
                                            DECOMPRO = null,
                                            DECODMON = "MN",
                                            DETIPO = null,
                                            DETIPCAM = tipoCambioPeru,
                                            DEPREVTA = null,
                                            DEMONVTA = null,
                                            DEFECVEN = null,
                                            DEDEVOL = 0M,
                                            DESOLI = null,
                                            DEDESCRI = objInsumo.ADESCRI,
                                            DEPORDES = 0M,
                                            DEIGVPOR = 0M,
                                            DEDESCLI = 0M,
                                            DEDESESP = 0M,
                                            DENUMFAC = null,
                                            DELOTE = null,
                                            DEUNIDAD = objInsumo.AUNIDAD,
                                            DECANTBRUTA = 0M,
                                            DEDSCTCANTBRUTA = 0M,
                                            DEORDFAB = "",
                                            DEQUIPO = null,
                                            DEFLETE = 0M,
                                            DEITEMI = null, //????????
                                            DEGLOSA = "",
                                            DEVALORIZADO = true,
                                            DESECUENORI = null,
                                            DEREFERENCIA = null,
                                            UMREFERENCIA = null,
                                            CANTREFERENCIA = 0M,
                                            DECUENTA = null,
                                            DETEXTO = null,
                                            CTA_CONSUMO = null,
                                            CODPARTE = "",
                                            CODPLANO = "",
                                            DETPRODUCCION = 0,
                                            MPMA = "",
                                            PorcentajeCosto = 0M,
                                            SALDO_NC = null,
                                            DEPRECIOREF = 0M,
                                        });
                                        dbStarsoft.SaveChanges();

                                        #endregion

                                        #region INSERT STKART

                                        var obkStkart = dbStarsoft.STKART.FirstOrDefault(e => e.STALMA == almacenStarsoft && e.STCODIGO == det.PERU_insumo);

                                        if (obkStkart == null)
                                        {
                                            //NUEVO
                                            dbStarsoft.STKART.Add(new STKART()
                                            {
                                                STALMA = almacenStarsoft,
                                                STCODIGO = det.PERU_insumo,
                                                STSKDIS = det.cantidad,
                                                STSKREF = 0M,
                                                STSKMIN = 0M,
                                                STSKMAX = 0M,
                                                STPUNREP = 0M,
                                                STSEMREP = 0M,
                                                STTIPREP = null,
                                                STUBIALM = null,
                                                STLOTCOM = 0M,
                                                STTIPCOM = null,
                                                STSKCOM = 0M,
                                                STKPREPRO = det.precio,
                                                STKPREULT = 0M,
                                                STKFECULT = DateTime.Now.Date,
                                                STKPREPROUS = 0M,
                                                CANTREFERENCIA = 0M,
                                            });

                                            dbStarsoft.SaveChanges();
                                        }
                                        else
                                        {
                                            //ACTUALIZAR EXISTENCIAS. PENDIENTE CHECAR OTROS CAMPOS
                                            obkStkart.STSKDIS += det.cantidad;
                                            obkStkart.STKPREPRO = calcularCostoPromedioStarsoft(5, movimiento.almacen, "0" + det.insumo, det.cantidad, det.precio, dbStarsoft);
                                            dbStarsoft.SaveChanges();
                                        }

                                        #endregion

                                        #region INSERT MORESMES

                                        var objMoResMes = dbStarsoft.MoResMes.ToList().FirstOrDefault(e => e.SMALMA == almacenStarsoft && e.SMMESPRO == (DateTime.Now.Year.ToString() + DateTime.Now.ToString("MM"))
                                                                                                && e.SMCODIGO == det.PERU_insumo);

                                        if (objMoResMes == null)
                                        {
                                            //NUEVO
                                            var objCrearMoResMes = new MoResMes();
                                            objCrearMoResMes.SMALMA = almacenStarsoft;
                                            objCrearMoResMes.SMCODIGO = det.PERU_insumo;
                                            objCrearMoResMes.SMMESPRO = (DateTime.Now.Year.ToString() + DateTime.Now.ToString("MM"));
                                            objCrearMoResMes.SMUSPREUNI = 0M; //CAMBIAR POR EL PRESIO ADECUEDO DEPENDE EL TIPO DE MONEDA CHECAR EN OTRAS TABLAS
                                            objCrearMoResMes.SMMNPREUNI = 0M; //CAMBIAR POR EL PRESIO ADECUEDO DEPENDE EL TIPO DE MONEDA
                                            objCrearMoResMes.SMUSPREANT = 0M;
                                            objCrearMoResMes.SMULTMOV = null;
                                            objCrearMoResMes.SMCANENT = det.cantidad; //SUPONIENDO QUE ES NUEVO
                                            objCrearMoResMes.SMCANSAL = 0M;
                                            objCrearMoResMes.SMANTCAN = 0M;
                                            objCrearMoResMes.SMMNANTVAL = 0M;
                                            objCrearMoResMes.SMMNACTVAL = 0M;
                                            objCrearMoResMes.SMUSANTVAL = 0M;
                                            objCrearMoResMes.SMUSACTVAL = 0M;
                                            objCrearMoResMes.SMUSENT = 0M;
                                            objCrearMoResMes.SMMNENT = 0M;
                                            objCrearMoResMes.SMUSSAL = 0;
                                            objCrearMoResMes.SMMNSAL = 0M;
                                            objCrearMoResMes.SMCUENTA = null;
                                            objCrearMoResMes.SMGRUPO = null;
                                            objCrearMoResMes.SMFAMILIA = null;
                                            objCrearMoResMes.SMLINEA = null;
                                            objCrearMoResMes.SMTIPO = null;
                                            objCrearMoResMes.SMSALDOINI = 0M;
                                            objCrearMoResMes.COD_MODULO = "03";
                                            objCrearMoResMes.COD_OPCION = "Men_TraRegEnt"; //??

                                            dbStarsoft.MoResMes.Add(objCrearMoResMes);
                                            dbStarsoft.SaveChanges();
                                        }
                                        else
                                        {
                                            objMoResMes.SMCANENT += det.cantidad;
                                            dbStarsoft.SaveChanges();
                                        }

                                        #endregion

                                        #endregion

                                        #region REPORTE
                                        movEntradas.Add(new entradasAlmacenDTO
                                        {
                                            centroCosto = movimiento.cc + "-" + ccDesc,
                                            folioEntrada = (ultimoFolio + 1).ToString(),
                                            almacen = movimiento.almacen + "-" + almacenDesc,
                                            fechaEntrada = nuevaEntrada.fecha,
                                            partida = det.partida,
                                            insumo = det.PERU_insumo + "-" + objInsumo.ADESCRI ?? "",
                                            areaCuenta = det.area + "-" + det.cuenta,
                                            referencia = "",
                                            remision = "",
                                            cantidad = det.cantidad,
                                            precio = det.precio,
                                            importe = det.cantidad * det.precio,
                                            comentarios = movimiento.comentarios != null ? (string)movimiento.comentarios : "",
                                            ordenCompra = nuevaEntrada.orden_ct.ToString(),
                                            proveedor = "",
                                            direccion = "",
                                            ciudad = "",
                                            telefonos = "",
                                            PERU_insumo = det.PERU_insumo,

                                            area_alm = det.area_alm ?? "",
                                            lado_alm = det.lado_alm ?? "",
                                            estante_alm = det.estante_alm ?? "",
                                            nivel_alm = det.nivel_alm ?? ""
                                        });
                                        partidaContador++;
                                        #endregion
                                    }

                                    if (nuevaEntrada.total <= 0)
                                    {
                                        throw new Exception("El total no puede ser igual o menor a cero.");
                                    }
                                }
                                else
                                {
                                    #region SIGOPLAN HEADER
                                    tblAlm_Movimientos nuevaEntrada = new tblAlm_Movimientos();

                                    //var ultimoMovimientoSigoplan = _context.tblAlm_Movimientos.Where(e => e.almacen == movimiento.almacen && e.tipo_mov < 50).OrderByDescending(e => e.id).FirstOrDefault();

                                    //var nuevoNumero = 0;

                                    //if (ultimoMovimientoSigoplan != null)
                                    //{
                                    //    nuevoNumero = ultimoMovimientoSigoplan.numero;
                                    //}

                                    int ultimoFolio = _context.tblAlm_Movimientos.Where(x => x.estatusHabilitado && x.almacen == movimiento.almacen && x.tipo_mov < 50).Select(x => x.numero).OrderByDescending(x => x).FirstOrDefault();

                                    nuevaEntrada = new tblAlm_Movimientos
                                    {
                                        almacen = movimiento.almacen,
                                        tipo_mov = 5,
                                        numero = ultimoFolio + 1,
                                        cc = movimiento.cc.ToUpper(),
                                        compania = 1,
                                        periodo = DateTime.Now.Month,
                                        ano = DateTime.Now.Year,
                                        orden_ct = 0,
                                        frente = 0,
                                        fecha = DateTime.Now.Date,
                                        proveedor = 0,
                                        total = movimiento.total,
                                        estatus = "A",
                                        transferida = "N",
                                        alm_destino = 0,
                                        cc_destino = "",
                                        comentarios = movimiento.comentarios,
                                        tipo_trasp = "C",
                                        tipo_cambio = 1,
                                        estatusHabilitado = true,
                                        numeroReq = 0,
                                        idUsuarioCreacion = vSesiones.sesionUsuarioDTO.id,
                                        fechaCreacion = DateTime.Now,
                                    };

                                    _context.tblAlm_Movimientos.Add(nuevaEntrada);
                                    _context.SaveChanges();
                                    #endregion

                                    var partidaContador = 1;
                                    string ccDesc = _context.tblC_Nom_CatalogoCC.FirstOrDefault(e => e.cc == movimiento.cc).ccDescripcion;
                                    string almacenDesc = objAlmacen.TADESCRI;

                                    foreach (var det in movimiento.detalle)
                                    {
                                        var objInsumo = lstInsumos.FirstOrDefault(e => e.ACODIGO == det.PERU_insumo);

                                        #region SIGOPLAN DET

                                        var nuevaSalidaDet = new tblAlm_MovimientosDet
                                        {
                                            almacen = nuevaEntrada.almacen,
                                            tipo_mov = 5,
                                            numero = ultimoFolio + 1,
                                            partida = partidaContador,
                                            insumo = det.insumo,
                                            comentarios = det.comentarios,
                                            area = det.area ?? 0,
                                            cuenta = det.cuenta ?? 0,
                                            cantidad = det.cantidad,
                                            precio = det.precio,
                                            importe = det.importe,
                                            id_resguardo = 0,
                                            area_alm = det.area_alm ?? "",
                                            lado_alm = det.lado_alm ?? "",
                                            estante_alm = det.estante_alm ?? "",
                                            nivel_alm = det.nivel_alm ?? "",
                                            transporte = "",
                                            estatusHabilitado = true,
                                            PERU_insumo = det.PERU_insumo,
                                        };

                                        _context.tblAlm_MovimientosDet.Add(nuevaSalidaDet);
                                        _context.SaveChanges();
                                        #endregion

                                        #region REPORTE
                                        movEntradas.Add(new entradasAlmacenDTO
                                        {
                                            centroCosto = movimiento.cc + "-" + ccDesc,
                                            folioEntrada = (ultimoFolio + 1).ToString(),
                                            almacen = movimiento.almacen + "-" + almacenDesc,
                                            fechaEntrada = nuevaEntrada.fecha,
                                            partida = det.partida,
                                            insumo = det.PERU_insumo + "-" + objInsumo.ADESCRI ?? "",
                                            areaCuenta = det.area + "-" + det.cuenta,
                                            referencia = "",
                                            remision = "",
                                            cantidad = det.cantidad,
                                            precio = det.precio,
                                            importe = det.cantidad * det.precio,
                                            comentarios = movimiento.comentarios != null ? (string)movimiento.comentarios : "",
                                            ordenCompra = nuevaEntrada.orden_ct.ToString(),
                                            proveedor = "",
                                            direccion = "",
                                            ciudad = "",
                                            telefonos = "",
                                            PERU_insumo = det.PERU_insumo,

                                            area_alm = det.area_alm ?? "",
                                            lado_alm = det.lado_alm ?? "",
                                            estante_alm = det.estante_alm ?? "",
                                            nivel_alm = det.nivel_alm ?? ""
                                        });
                                        partidaContador++;
                                        #endregion
                                    }

                                    if (nuevaEntrada.total <= 0)
                                    {
                                        throw new Exception("El total no puede ser igual o menor a cero.");
                                    }
                                }

                                //trans.Commit();
                                dbSigoplanTransaction.Commit();
                                dbStarsoftTransaction.Commit();
                            }
                            catch (Exception e)
                            {
                                //trans.Rollback();
                                dbSigoplanTransaction.Rollback();//SIGOPLAN
                                dbStarsoftTransaction.Rollback();//STARSOFT

                                LogError(12, 0, "AlmacenController", "guardarEntradaInventarioFisico", e, AccionEnum.AGREGAR, 0, movimiento);

                                throw new Exception(e.Message);
                            }
                        }
                    }

                }
                #endregion
            }

            return movEntradas;
        }

        public List<entradasAlmacenDTO> getReporteEntradaFisico(int almacen, int numero)
        {
            if ((MainContextEnum)vSesiones.sesionEmpresaActual == MainContextEnum.Construplan || (MainContextEnum)vSesiones.sesionEmpresaActual == MainContextEnum.Arrendadora)
            {
                #region MEXICO
                var movimientoEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_movimientos WHERE almacen = {0} AND tipo_mov = 5 AND numero = {1}", almacen, numero));

                if (movimientoEK != null)
                {
                    var movimiento = ((List<dynamic>)movimientoEK.ToObject<List<dynamic>>())[0];

                    var movimientoDetalle = (List<dynamic>)consultaCheckProductivo(
                        string.Format(@"SELECT * FROM si_movimientos_det WHERE almacen = {0} AND tipo_mov = 5 AND numero = {1}", almacen, numero)
                    ).ToObject<List<dynamic>>();

                    var ccDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM cc WHERE cc = '{0}' AND st_ppto != 'T'", (string)movimiento.cc));
                    var ccDesc = (string)(((List<dynamic>)ccDescEK.ToObject<List<dynamic>>())[0].descripcion);
                    var almacenDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", (int)movimiento.almacen));
                    var almacenDesc = (string)(((List<dynamic>)almacenDescEK.ToObject<List<dynamic>>())[0].descripcion);
                    var recibioDesc = ((List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM empleados WHERE empleado = {0}", (int)movimiento.empleado)).ToObject<List<dynamic>>())[0];

                    var entradas = new List<entradasAlmacenDTO>();

                    foreach (var det in movimientoDetalle)
                    {
                        var insumoDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM insumos WHERE insumo = {0}", (int)det.insumo));
                        var insumoDesc = (string)(((List<dynamic>)insumoDescEK.ToObject<List<dynamic>>())[0].descripcion);

                        var area = det.area != null ? (int)det.area : 0;
                        var cuenta = det.cuenta != null ? (int)det.cuenta : 0;

                        entradas.Add(new entradasAlmacenDTO
                        {
                            centroCosto = (string)movimiento.cc + "-" + ccDesc,
                            folioEntrada = numero.ToString(),
                            almacen = (int)movimiento.almacen + "-" + almacenDesc,
                            fechaEntrada = (DateTime)movimiento.fecha,
                            partida = (int)det.partida,
                            insumo = (int)det.insumo + "-" + insumoDesc ?? "",
                            areaCuenta = area + "-" + cuenta,
                            referencia = "",
                            remision = "",
                            cantidad = Convert.ToDecimal(det.cantidad, CultureInfo.InvariantCulture),
                            precio = Convert.ToDecimal(det.precio, CultureInfo.InvariantCulture),
                            importe = Convert.ToDecimal(det.cantidad, CultureInfo.InvariantCulture) * Convert.ToDecimal(det.precio, CultureInfo.InvariantCulture),
                            comentarios = movimiento.comentarios != null ? (string)movimiento.comentarios : "",
                            ordenCompra = ((int)movimiento.orden_ct).ToString(),
                            proveedor = "",
                            direccion = "",
                            ciudad = "",
                            telefonos = "",

                            area_alm = det.area_alm != null ? (string)det.area_alm : "",
                            lado_alm = det.lado_alm != null ? (string)det.lado_alm : "",
                            estante_alm = det.estante_alm != null ? (string)det.estante_alm : "",
                            nivel_alm = det.nivel_alm != null ? (string)det.nivel_alm : "",
                            recibio = (string)recibioDesc.descripcion
                        });
                    }

                    return entradas;
                }
                else
                {
                    return null;
                }
                #endregion
            }
            else if ((MainContextEnum)vSesiones.sesionEmpresaActual == MainContextEnum.Colombia)
            {
                #region COLOMBIA
                var movimiento = _context.Select<MovimientoEnkontrolDTO>(new DapperDTO()
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = string.Format(@"
                                SELECT 
                                    mov.almacen, 
                                    --alm.descripcion AS almacenDesc, 
                                    mov.tipo_mov, 
                                    mov.numero, 
                                    mov.cc, 
                                    c.ccDescripcion AS ccDesc, 
                                    mov.orden_ct, 
                                    mov.fecha, 
                                    mov.total, 
                                    mov.estatus, 
                                    mov.transferida, 
                                    mov.idUsuarioCreacion as empleado, 
									(tUsr.apellidoPaterno + ' ' + tUsr.apellidoPaterno + ' ' + tUsr.nombre) as empleadoDesc,
                                    mov.comentarios
                                FROM tblAlm_Movimientos mov 
                                    INNER JOIN tblC_Nom_CatalogoCC c ON mov.cc = c.cc 
									LEFT JOIN tblP_Usuario as tUsr ON mov.idUsuarioCreacion = tUsr.id
                                WHERE mov.almacen = {0} AND mov.tipo_mov = 5 AND mov.numero = {1}", almacen, numero),

                }).FirstOrDefault();

                if (movimiento != null)
                {

                    var entradaInventarioFisicoDetalle = new List<MovimientoDetalleEnkontrolDTO>();
                    var entradasInventario = _context.tblAlm_MovimientosDet.Where(e => e.tipo_mov == 5 && e.numero == numero && e.almacen == almacen);

                    var entradas = new List<entradasAlmacenDTO>();

                    foreach (var det in entradasInventario)
                    {


                        var insumoDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM insumos WHERE insumo = {0}", (int)det.insumo));
                        var insumoDesc = (string)(((List<dynamic>)insumoDescEK.ToObject<List<dynamic>>())[0].descripcion);
                        var almacenDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", (int)det.almacen));
                        var almacenDesc = (string)(((List<dynamic>)almacenDescEK.ToObject<List<dynamic>>())[0].descripcion);

                        var area = det.area != null ? (int)det.area : 0;
                        var cuenta = det.cuenta != null ? (int)det.cuenta : 0;

                        entradas.Add(new entradasAlmacenDTO
                        {
                            centroCosto = (string)movimiento.cc + "-" + movimiento.ccDesc,
                            folioEntrada = numero.ToString(),
                            almacen = (int)movimiento.almacen + "-" + almacenDesc,
                            fechaEntrada = (DateTime)movimiento.fecha,
                            partida = (int)det.partida,
                            insumo = det.insumo + "-" + insumoDesc ?? "",
                            areaCuenta = "-",
                            referencia = "",
                            remision = "",
                            cantidad = Convert.ToDecimal(det.cantidad, CultureInfo.InvariantCulture),
                            precio = Convert.ToDecimal(det.precio, CultureInfo.InvariantCulture),
                            importe = Convert.ToDecimal(det.cantidad, CultureInfo.InvariantCulture) * Convert.ToDecimal(det.precio, CultureInfo.InvariantCulture),
                            comentarios = movimiento.comentarios != null ? (string)movimiento.comentarios : "",
                            ordenCompra = ((int)movimiento.orden_ct).ToString(),
                            proveedor = "",
                            direccion = "",
                            ciudad = "",
                            telefonos = "",

                            area_alm = det.area_alm != null ? (string)det.area_alm : "",
                            lado_alm = det.lado_alm != null ? (string)det.lado_alm : "",
                            estante_alm = det.estante_alm != null ? (string)det.estante_alm : "",
                            nivel_alm = det.nivel_alm != null ? (string)det.nivel_alm : "",
                            recibio = ""
                        });
                    }

                    return entradas;
                }
                else
                {
                    return null;
                }
                #endregion
            }
            else
            {
                #region PERU
                var movimiento = _context.Select<MovimientoEnkontrolDTO>(new DapperDTO()
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = string.Format(@"
                                SELECT 
                                    mov.almacen, 
                                    --alm.descripcion AS almacenDesc, 
                                    mov.tipo_mov, 
                                    mov.numero, 
                                    mov.cc, 
                                    c.ccDescripcion AS ccDesc, 
                                    mov.orden_ct, 
                                    mov.fecha, 
                                    mov.total, 
                                    mov.estatus, 
                                    mov.transferida, 
                                    mov.idUsuarioCreacion as empleado, 
									(tUsr.apellidoPaterno + ' ' + tUsr.apellidoPaterno + ' ' + tUsr.nombre) as empleadoDesc,
                                    mov.comentarios
                                FROM tblAlm_Movimientos mov 
                                    INNER JOIN tblC_Nom_CatalogoCC c ON mov.cc = c.cc 
									LEFT JOIN tblP_Usuario as tUsr ON mov.idUsuarioCreacion = tUsr.id
                                WHERE mov.almacen = {0} AND mov.tipo_mov = 5 AND mov.numero = {1}", almacen, numero),

                }).FirstOrDefault();

                if (movimiento != null)
                {
                    #region ALMACEN STARSOFT
                    string almacenStarsoft = "";

                    if (almacen > 9)
                    {
                        almacenStarsoft = almacen.ToString();
                    }
                    else
                    {
                        almacenStarsoft = "0" + almacen;
                    }

                    using (var dbStarsoft = new MainContextPeruStarSoft003BDCOMUN())
                    {
                        var objAlmacen = dbStarsoft.TABALM.FirstOrDefault();

                        if (objAlmacen != null)
                        {
                            almacenStarsoft = objAlmacen.TADESCRI;
                        }
                    }

                    movimiento.almacenDesc = almacenStarsoft;
                    #endregion


                    //                    var entradaInventarioFisicoDetalle = (List<MovimientoDetalleEnkontrolDTO>)consultaCheckProductivo(
                    //                        string.Format(@"SELECT 
                    //                                        det.*, 
                    //                                        i.descripcion AS insumoDesc, 
                    //                                        i.unidad 
                    //                                    FROM si_movimientos_det det 
                    //                                        INNER JOIN insumos i ON det.insumo = i.insumo 
                    //                                    WHERE det.almacen = {0} AND det.tipo_mov = 5 AND det.numero = {1}", almacenID, numero)
                    //                    ).ToObject<List<MovimientoDetalleEnkontrolDTO>>();

                    var entradaInventarioFisicoDetalle = new List<MovimientoDetalleEnkontrolDTO>();
                    var entradasInventario = _context.tblAlm_MovimientosDet.Where(e => e.tipo_mov == 5 && e.numero == numero && e.almacen == almacen);

                    var entradas = new List<entradasAlmacenDTO>();

                    foreach (var det in entradasInventario)
                    {

                        string descInsumoPeru = "";
                        string descUnidad = "";
                        using (var dbStarsoft = new MainContextPeruStarSoft003BDCOMUN())
                        {
                            var objInsumo = dbStarsoft.MAEART.FirstOrDefault(e => e.ACODIGO == det.PERU_insumo);

                            if (objInsumo != null)
                            {
                                descUnidad = objInsumo.AUNIDAD;
                                descInsumoPeru = objInsumo.ADESCRI;
                            }
                        }

                        var area = det.area != null ? (int)det.area : 0;
                        var cuenta = det.cuenta != null ? (int)det.cuenta : 0;

                        entradas.Add(new entradasAlmacenDTO
                        {
                            centroCosto = (string)movimiento.cc + "-" + movimiento.ccDesc,
                            folioEntrada = numero.ToString(),
                            almacen = (int)movimiento.almacen + "-" + movimiento.almacenDesc,
                            fechaEntrada = (DateTime)movimiento.fecha,
                            partida = (int)det.partida,
                            insumo = det.PERU_insumo + "-" + descInsumoPeru ?? "",
                            areaCuenta = "-",
                            referencia = "",
                            remision = "",
                            cantidad = Convert.ToDecimal(det.cantidad, CultureInfo.InvariantCulture),
                            precio = Convert.ToDecimal(det.precio, CultureInfo.InvariantCulture),
                            importe = Convert.ToDecimal(det.cantidad, CultureInfo.InvariantCulture) * Convert.ToDecimal(det.precio, CultureInfo.InvariantCulture),
                            comentarios = movimiento.comentarios != null ? (string)movimiento.comentarios : "",
                            ordenCompra = ((int)movimiento.orden_ct).ToString(),
                            proveedor = "",
                            direccion = "",
                            ciudad = "",
                            telefonos = "",

                            area_alm = det.area_alm != null ? (string)det.area_alm : "",
                            lado_alm = det.lado_alm != null ? (string)det.lado_alm : "",
                            estante_alm = det.estante_alm != null ? (string)det.estante_alm : "",
                            nivel_alm = det.nivel_alm != null ? (string)det.nivel_alm : "",
                            recibio = ""
                        });
                    }

                    return entradas;
                }
                else
                {
                    return null;
                }
                #endregion
            }

        }
        #endregion

        #region Inventario Físico Salida
        public Dictionary<string, object> getNuevaSalidaInventarioFisico(int almacenID)
        {
            var result = new Dictionary<string, object>();

            try
            {
                if ((MainContextEnum)vSesiones.sesionEmpresaActual == MainContextEnum.PERU)
                {
                    #region PERU
                    var flagPermisoMovimientoAdministrador = true;

                    if (almacenID < 900)
                    {
                        var permiso = _context.tblAlm_PermisoMovimientoAdministrador.FirstOrDefault(x => x.estatus && x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                        if (permiso == null)
                        {
                            flagPermisoMovimientoAdministrador = false;
                        }
                    }

                    //                    var almacen = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", almacenID)).ToObject<List<dynamic>>();

                    //                    var ultimaSalidaInventarioFisicoEK = consultaCheckProductivo(
                    //                        string.Format(@"SELECT TOP 1 
                    //                                        * 
                    //                                    FROM si_movimientos 
                    //                                    WHERE almacen = {0} AND tipo_mov = 55 ORDER BY numero DESC", almacenID)
                    //                    );

                    var almacen = new TABALM();
                    int ultimoFolio = 0;

                    using (var dbStarsoft = new MainContextPeruStarSoft003BDCOMUN())
                    {
                        string almacenStarsoft = "";
                        if (almacenID > 9)
                        {
                            almacenStarsoft = almacenID.ToString();
                        }
                        else
                        {
                            almacenStarsoft = "0" + almacenID;
                        }

                        almacen = dbStarsoft.TABALM.FirstOrDefault(e => e.TAALMA == almacenStarsoft);

                        if (almacenID >= 90)
                        {
                            ultimoFolio = _context.tblAlm_Movimientos.Where(x => x.estatusHabilitado && x.almacen == almacenID && x.tipo_mov > 50).Select(x => x.numero).OrderByDescending(x => x).FirstOrDefault();
                        }
                        else
                        {
                            ultimoFolio = dbStarsoft.MOVALMCAB.ToList().Where(x => Int32.Parse(x.CAALMA) == almacenID && x.CATD == "NS").Select(x => Int32.Parse(x.CANUMDOC)).OrderByDescending(x => x).FirstOrDefault();
                        }
                    }

                    //var ultimaSalidaInventarioFisicoStarsoft = _context.tblAlm_Movimientos.Where(e => e.almacen == almacenID && e.tipo_mov >= 50).OrderByDescending(e => e.id).FirstOrDefault();

                    var entregoNum = 0;
                    var entregoDesc = "";
                    var relacionUsuarioSIGOPLANEK = _context.tblP_Usuario.FirstOrDefault(x => x.id == vSesiones.sesionUsuarioDTO.id);

                    if (relacionUsuarioSIGOPLANEK != null)
                    {
                        //var empleado = (List<dynamic>)consultaCheckProductivo(
                        //    string.Format(@"SELECT * FROM empleados WHERE empleado = {0}", relacionUsuarioSIGOPLANEK.empleado)
                        //).ToObject<List<dynamic>>();

                        //entregoNum = relacionUsuarioSIGOPLANEK.empleado;
                        //entregoDesc = (string)empleado[0].descripcion;
                        //var objUsuario = _context.tblP_Usuario.FirstOrDefault(e => e.id == relacionUsuarioSIGOPLANEK.idUsuario);

                        entregoNum = relacionUsuarioSIGOPLANEK.id;
                        entregoDesc = relacionUsuarioSIGOPLANEK.apellidoPaterno + " " + relacionUsuarioSIGOPLANEK.apellidoMaterno + " " + relacionUsuarioSIGOPLANEK.nombre;
                    }

                    if (ultimoFolio > 0)
                    {
                        result.Add("almacenDesc", almacen.TADESCRI);
                        result.Add("numeroDisponible", ultimoFolio + 1);
                        result.Add("entregoNum", entregoNum);
                        result.Add("entregoDesc", entregoDesc);
                        result.Add("fecha", DateTime.Now.Date.ToShortDateString());
                        result.Add(SUCCESS, true);
                    }
                    else
                    {
                        result.Add("almacenDesc", almacen.TADESCRI);
                        result.Add("numeroDisponible", 1);
                        result.Add("entregoNum", entregoNum);
                        result.Add("entregoDesc", entregoDesc);
                        result.Add("fecha", DateTime.Now.Date.ToShortDateString());
                        result.Add(SUCCESS, true);
                    }

                    result.Add("flagPermisoMovimientoAdministrador", flagPermisoMovimientoAdministrador);
                    #endregion
                }
                else if (vSesiones.sesionEmpresaActual == (int)MainContextEnum.Colombia)
                {
                    #region COLOMBIA
                    var flagPermisoMovimientoAdministrador = true;
                    if (almacenID < 900)
                    {
                        var permiso = _context.tblAlm_PermisoMovimientoAdministrador.FirstOrDefault(x => x.estatus && x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                        if (permiso == null)
                            flagPermisoMovimientoAdministrador = false;
                    }

                    var almacen = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", almacenID)).ToObject<List<dynamic>>();

                    var ultimaSalidaInventarioFisicoEK = consultaCheckProductivo(
                        string.Format(@"SELECT TOP 1 * 
                                                FROM si_movimientos 
                                                    WHERE almacen = {0} AND tipo_mov = 55 ORDER BY numero DESC", almacenID)
                    );

                    var entregoNum = 0;
                    var entregoDesc = "";
                    var relacionUsuarioSIGOPLANEK = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                    if (relacionUsuarioSIGOPLANEK != null)
                    {
                        var empleado = (List<dynamic>)consultaCheckProductivo(
                            string.Format(@"SELECT * FROM empleados WHERE empleado = {0}", relacionUsuarioSIGOPLANEK.empleado)
                        ).ToObject<List<dynamic>>();

                        entregoNum = relacionUsuarioSIGOPLANEK.empleado;
                        entregoDesc = (string)empleado[0].descripcion;
                    }

                    if (ultimaSalidaInventarioFisicoEK != null)
                    {
                        var ultimaSalidaInventarioFisico = (List<dynamic>)ultimaSalidaInventarioFisicoEK.ToObject<List<dynamic>>();

                        result.Add("almacenDesc", (string)almacen[0].descripcion);
                        result.Add("numeroDisponible", (int)ultimaSalidaInventarioFisico[0].numero + 1);
                        result.Add("entregoNum", entregoNum);
                        result.Add("entregoDesc", entregoDesc);
                        result.Add("fecha", DateTime.Now.Date.ToShortDateString());
                        result.Add(SUCCESS, true);
                    }
                    else
                    {
                        result.Add("almacenDesc", (string)almacen[0].descripcion);
                        result.Add("numeroDisponible", 1);
                        result.Add("entregoNum", entregoNum);
                        result.Add("entregoDesc", entregoDesc);
                        result.Add("fecha", DateTime.Now.Date.ToShortDateString());
                        result.Add(SUCCESS, true);
                    }

                    result.Add("flagPermisoMovimientoAdministrador", flagPermisoMovimientoAdministrador);
                    #endregion
                }
                else
                {
                    #region DEMAS EMPRESAS
                    var flagPermisoMovimientoAdministrador = true;

                    if (almacenID < 900)
                    {
                        var permiso = _context.tblAlm_PermisoMovimientoAdministrador.FirstOrDefault(x => x.estatus && x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                        if (permiso == null)
                        {
                            flagPermisoMovimientoAdministrador = false;
                        }
                    }

                    var almacen = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", almacenID)).ToObject<List<dynamic>>();

                    var ultimaSalidaInventarioFisicoEK = consultaCheckProductivo(
                        string.Format(@"SELECT TOP 1 
                                        * 
                                    FROM si_movimientos 
                                    WHERE almacen = {0} AND tipo_mov = 55 ORDER BY numero DESC", almacenID)
                    );

                    var entregoNum = 0;
                    var entregoDesc = "";
                    var relacionUsuarioSIGOPLANEK = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                    if (relacionUsuarioSIGOPLANEK != null)
                    {
                        var empleado = (List<dynamic>)consultaCheckProductivo(
                            string.Format(@"SELECT * FROM empleados WHERE empleado = {0}", relacionUsuarioSIGOPLANEK.empleado)
                        ).ToObject<List<dynamic>>();

                        entregoNum = relacionUsuarioSIGOPLANEK.empleado;
                        entregoDesc = (string)empleado[0].descripcion;
                    }

                    if (ultimaSalidaInventarioFisicoEK != null)
                    {
                        var ultimaSalidaInventarioFisico = (List<dynamic>)ultimaSalidaInventarioFisicoEK.ToObject<List<dynamic>>();

                        result.Add("almacenDesc", (string)almacen[0].descripcion);
                        result.Add("numeroDisponible", (int)ultimaSalidaInventarioFisico[0].numero + 1);
                        result.Add("entregoNum", entregoNum);
                        result.Add("entregoDesc", entregoDesc);
                        result.Add("fecha", DateTime.Now.Date.ToShortDateString());
                        result.Add(SUCCESS, true);
                    }
                    else
                    {
                        result.Add("almacenDesc", (string)almacen[0].descripcion);
                        result.Add("numeroDisponible", 1);
                        result.Add("entregoNum", entregoNum);
                        result.Add("entregoDesc", entregoDesc);
                        result.Add("fecha", DateTime.Now.Date.ToShortDateString());
                        result.Add(SUCCESS, true);
                    }

                    result.Add("flagPermisoMovimientoAdministrador", flagPermisoMovimientoAdministrador);
                    #endregion
                }

            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return result;
        }

        public dynamic getSalidaInventarioFisico(int almacenID, int numero)
        {

            if (vSesiones.sesionEmpresaActual == (int)MainContextEnum.Colombia)
            {
                #region COLOMBIA
                var salidaInventarioFisicoEK = consultaCheckProductivo(
                string.Format(@"SELECT 
                                    mov.almacen, 
                                    alm.descripcion AS almacenDesc, 
                                    mov.tipo_mov, 
                                    mov.numero, 
                                    mov.cc, 
                                    c.descripcion AS ccDesc, 
                                    mov.orden_ct, 
                                    mov.fecha, 
                                    mov.total, 
                                    mov.estatus, 
                                    mov.transferida, 
                                    mov.empleado, 
                                    emp.descripcion AS empleadoDesc, 
                                    mov.comentarios, 
                                    mov.sector_id, 
                                    mov.proveedor, 
                                    prov.nombre AS proveedorDesc 
                                        FROM si_movimientos mov 
                                            INNER JOIN si_almacen alm ON mov.almacen = alm.almacen 
                                            INNER JOIN cc c ON mov.cc = c.cc 
                                            LEFT JOIN empleados emp ON mov.empleado = emp.empleado 
                                            LEFT JOIN sp_proveedores prov ON mov.proveedor = prov.numpro 
                                                WHERE mov.almacen = {0} AND mov.tipo_mov = 55 AND mov.numero = {1}", almacenID, numero));

                if (salidaInventarioFisicoEK != null)
                {
                    var salidaInventarioFisico = (List<MovimientoEnkontrolDTO>)salidaInventarioFisicoEK.ToObject<List<MovimientoEnkontrolDTO>>();
                    var salidaInventarioFisicoDetalle = (List<MovimientoDetalleEnkontrolDTO>)consultaCheckProductivo(
                        string.Format(@"SELECT det.*, i.descripcion AS insumoDesc, i.unidad 
                                            FROM si_movimientos_det det 
                                            INNER JOIN insumos i ON det.insumo = i.insumo 
                                                WHERE det.almacen = {0} AND det.tipo_mov = 55 AND det.numero = {1}", almacenID, numero)
                    ).ToObject<List<MovimientoDetalleEnkontrolDTO>>();

                    salidaInventarioFisico[0].fechaString = ((DateTime)(salidaInventarioFisico[0].fecha)).ToShortDateString();
                    salidaInventarioFisico[0].detalle = salidaInventarioFisicoDetalle;

                    return salidaInventarioFisico[0];
                }
                else
                    return null;
                #endregion
            }
            else if (vSesiones.sesionEmpresaActual == (int)MainContextEnum.PERU)
            {
                #region PERU
                var salidaInventarioFisico = _context.Select<MovimientoEnkontrolDTO>(new DapperDTO()
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = string.Format(@"
                                SELECT 
                                    mov.almacen, 
                                    --alm.descripcion AS almacenDesc, 
                                    mov.tipo_mov, 
                                    mov.numero, 
                                    mov.cc, 
                                    c.ccDescripcion AS ccDesc, 
                                    mov.orden_ct, 
                                    mov.fecha, 
                                    mov.total, 
                                    mov.estatus, 
                                    mov.transferida, 
                                    mov.idUsuarioCreacion as empleado, 
									(tUsr.apellidoPaterno + ' ' + tUsr.apellidoPaterno + ' ' + tUsr.nombre) as empleadoDesc,
                                    mov.comentarios
                                FROM tblAlm_Movimientos mov 
                                    INNER JOIN tblC_Nom_CatalogoCC c ON mov.cc = c.cc 
									LEFT JOIN tblP_Usuario as tUsr ON mov.idUsuarioCreacion = tUsr.id
                                WHERE mov.estatusHabilitado = 1 AND mov.almacen = {0} AND mov.tipo_mov = 55 AND mov.numero = {1}", almacenID, numero),

                }).FirstOrDefault();

                if (salidaInventarioFisico != null)
                {
                    #region ALMACEN STARSOFT
                    string almacenStarsoft = "";

                    if (almacenID > 9)
                    {
                        almacenStarsoft = almacenID.ToString();
                    }
                    else
                    {
                        almacenStarsoft = "0" + almacenID;
                    }

                    using (var dbStarsoft = new MainContextPeruStarSoft003BDCOMUN())
                    {
                        var objAlmacen = dbStarsoft.TABALM.FirstOrDefault();

                        if (objAlmacen != null)
                        {
                            almacenStarsoft = objAlmacen.TADESCRI;
                        }
                    }

                    salidaInventarioFisico.almacenDesc = almacenStarsoft;
                    #endregion

                    //                    var entradaInventarioFisicoDetalle = (List<MovimientoDetalleEnkontrolDTO>)consultaCheckProductivo(
                    //                        string.Format(@"SELECT 
                    //                                        det.*, 
                    //                                        i.descripcion AS insumoDesc, 
                    //                                        i.unidad 
                    //                                    FROM si_movimientos_det det 
                    //                                        INNER JOIN insumos i ON det.insumo = i.insumo 
                    //                                    WHERE det.almacen = {0} AND det.tipo_mov = 5 AND det.numero = {1}", almacenID, numero)
                    //                    ).ToObject<List<MovimientoDetalleEnkontrolDTO>>();

                    var salidaInventarioFisicoDetalle = new List<MovimientoDetalleEnkontrolDTO>();
                    var salidasInventario = _context.tblAlm_MovimientosDet.Where(e => e.tipo_mov == 55 && e.numero == numero && e.almacen == almacenID);

                    foreach (var item in salidasInventario)
                    {
                        //var objInsumo = dbStarsoft.MAEART.FirstOrDefault(e => e.ACODIGO == det.PERU_insumo);

                        string descInsumoPeru = "";
                        string descUnidad = "";
                        using (var dbStarsoft = new MainContextPeruStarSoft003BDCOMUN())
                        {
                            var objInsumo = dbStarsoft.MAEART.FirstOrDefault(e => e.ACODIGO == item.PERU_insumo);

                            if (objInsumo != null)
                            {
                                descUnidad = objInsumo.AUNIDAD;
                                descInsumoPeru = objInsumo.ADESCRI;
                            }
                        }

                        salidaInventarioFisicoDetalle.Add(new MovimientoDetalleEnkontrolDTO()
                        {
                            almacen = almacenID,
                            almacenDesc = almacenStarsoft,
                            tipo_mov = item.tipo_mov,
                            numero = item.numero,
                            remision = 0,
                            partida = item.partida,
                            PERU_insumo = item.PERU_insumo,
                            descInsumo = descInsumoPeru,
                            insumoDesc = descInsumoPeru,
                            comentarios = item.comentarios,
                            area = 0,
                            cuenta = 0,
                            areaCuenta = "",
                            cantidad = item.cantidad,
                            precio = item.precio,
                            importe = item.importe,
                            partida_oc = 0,
                            costo_prom = item.precio,
                            sector_id = 0,
                            area_alm = item.area_alm,
                            lado_alm = item.lado_alm,
                            estante_alm = item.estante_alm,
                            nivel_alm = item.nivel_alm,
                            unidad = descUnidad,
                            minimo = 0,
                            existencia = 0,
                            cantidadPendiente = 0,
                            cant_recibida = 0,
                            moneda = 0,
                            monedaDesc = "",
                            minimoDesc = "",
                            solicitadoPendiente = 0,
                            partidaRequisicion = 0,
                            numeroRequisicion = 0,
                        });
                    }

                    salidaInventarioFisico.fechaString = ((DateTime)(salidaInventarioFisico.fecha)).ToShortDateString();
                    salidaInventarioFisico.detalle = salidaInventarioFisicoDetalle;

                    return salidaInventarioFisico;
                }
                else
                {
                    return null;
                }
                #endregion
            }
            else
            {
                #region RESTO EMPRESAS
                var salidaInventarioFisicoEK = consultaCheckProductivo(
                string.Format(@"SELECT 
                                    mov.almacen, 
                                    alm.descripcion AS almacenDesc, 
                                    mov.tipo_mov, 
                                    mov.numero, 
                                    mov.cc, 
                                    c.descripcion AS ccDesc, 
                                    mov.orden_ct, 
                                    mov.fecha, 
                                    mov.total, 
                                    mov.estatus, 
                                    mov.transferida, 
                                    mov.empleado, 
                                    emp.descripcion AS empleadoDesc, 
                                    mov.comentarios, 
                                    mov.sector_id, 
                                    mov.proveedor, 
                                    prov.nombre AS proveedorDesc 
                                FROM si_movimientos mov 
                                    INNER JOIN si_almacen alm ON mov.almacen = alm.almacen 
                                    INNER JOIN cc c ON mov.cc = c.cc 
                                    LEFT JOIN empleados emp ON mov.empleado = emp.empleado 
                                    LEFT JOIN sp_proveedores prov ON mov.proveedor = prov.numpro 
                                WHERE mov.almacen = {0} AND mov.tipo_mov = 55 AND mov.numero = {1}", almacenID, numero));

                if (salidaInventarioFisicoEK != null)
                {
                    var salidaInventarioFisico = (List<MovimientoEnkontrolDTO>)salidaInventarioFisicoEK.ToObject<List<MovimientoEnkontrolDTO>>();
                    var salidaInventarioFisicoDetalle = (List<MovimientoDetalleEnkontrolDTO>)consultaCheckProductivo(
                        string.Format(@"SELECT 
                                        det.*, 
                                        i.descripcion AS insumoDesc, 
                                        i.unidad 
                                    FROM si_movimientos_det det 
                                        INNER JOIN insumos i ON det.insumo = i.insumo 
                                    WHERE det.almacen = {0} AND det.tipo_mov = 55 AND det.numero = {1}", almacenID, numero)
                    ).ToObject<List<MovimientoDetalleEnkontrolDTO>>();

                    salidaInventarioFisico[0].fechaString = ((DateTime)(salidaInventarioFisico[0].fecha)).ToShortDateString();
                    salidaInventarioFisico[0].detalle = salidaInventarioFisicoDetalle;

                    return salidaInventarioFisico[0];
                }
                else
                {
                    return null;
                }
                #endregion
            }

        }

        public List<salidasAlmacenDTO> guardarSalidaInventarioFisico(MovimientoEnkontrolDTO movimiento, bool movimientoMasivo)
        {
            List<salidasAlmacenDTO> movSalidas = new List<salidasAlmacenDTO>();

            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
            {
                #region COLOMBIA
                var empleado = 0;
                var usuarioSigoplan = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                if (usuarioSigoplan != null)
                    empleado = usuarioSigoplan.empleado;

                #region Validación Permiso Movimiento Administrador
                var permisoAdministrador = _context.tblAlm_PermisoMovimientoAdministrador.FirstOrDefault(x => x.estatus && x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                if (permisoAdministrador == null)
                {
                    if (movimiento.almacen < 900)
                        throw new Exception("El usuario no tiene permiso para generar este movimiento.");
                }
                #endregion

                #region Validación Inventariables
                var registrosGrupoInsumo = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM DBA.grupos_insumo")).ToObject<List<dynamic>>();

                foreach (var det in movimiento.detalle)
                {
                    var tipo_insumo = Int32.Parse(det.insumo.ToString().Substring(0, 1));
                    var grupo_insumo = Int32.Parse(det.insumo.ToString().Substring(1, 2));
                    var registroGrupoInsumo = registrosGrupoInsumo.FirstOrDefault(x => (int)x.tipo_insumo == tipo_insumo && (int)x.grupo_insumo == grupo_insumo);

                    if (registroGrupoInsumo != null)
                    {
                        if ((string)registroGrupoInsumo.inventariado != "I")
                            throw new Exception(string.Format(@"El insumo ""{0}"" no es inventariable.", det.insumo));
                    }
                    else
                        throw new Exception(string.Format(@"No se encuentra la información del grupo de insumo para el insumo ""{0}"".", det.insumo));
                }
                #endregion

                if (!movimientoMasivo)
                {
                    #region Validar Existencias
                    foreach (var det in movimiento.detalle)
                    {
                        string strQuery = string.Format(@"SELECT 
                                            det.insumo, 
                                            (CAST(det.insumo AS NVARCHAR) + '-' + ins.descripcion) AS insumoDesc, 
                                            SUM(det.cantidad) AS cantidad, 
                                            det.area_alm, 
                                            det.lado_alm, 
                                            det.estante_alm, 
                                            det.nivel_alm 
		                                    FROM tblAlm_Movimientos AS mov 
                                            INNER JOIN tblAlm_MovimientosDet AS det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                                            INNER JOIN tblAlm_Insumo AS ins ON det.insumo = ins.insumo 
		                                    WHERE 
			                                    mov.almacen = {0} AND 
			                                    det.insumo = {1} AND 
			                                    det.area_alm = '{2}' AND 
			                                    det.lado_alm = '{3}' AND 
			                                    det.estante_alm = '{4}' AND 
			                                    det.nivel_alm = '{5}' AND 
			                                    det.tipo_mov < 50 
				                                    GROUP BY det.insumo, ins.descripcion, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm",
                                                    det.almacen, det.insumo, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm);
                        List<UbicacionDetalleDTO> entradasEK = _context.Select<UbicacionDetalleDTO>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Colombia,
                            consulta = strQuery
                        }).ToList();

                        strQuery = string.Format(@"SELECT det.insumo, 
                                                (CAST(det.insumo AS NVARCHAR) + '-' + ins.descripcion) AS insumoDesc, 
                                                SUM(det.cantidad) AS cantidad, 
                                                det.area_alm, 
                                                det.lado_alm, 
                                                det.estante_alm, 
                                                det.nivel_alm 
		                                        FROM tblAlm_Movimientos AS mov 
                                                INNER JOIN tblAlm_MovimientosDet AS det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                                                INNER JOIN tblAlm_Insumo AS ins ON det.insumo = ins.insumo 
		                                        WHERE 
			                                        mov.almacen = {0} AND 
			                                        det.insumo = {1} AND 
			                                        det.area_alm = '{2}' AND 
			                                        det.lado_alm = '{3}' AND 
			                                        det.estante_alm = '{4}' AND 
			                                        det.nivel_alm = '{5}' AND 
			                                        det.tipo_mov > 50 
				                                        GROUP BY det.insumo, ins.descripcion, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm",
                                                        det.almacen, det.insumo, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm);
                        List<UbicacionDetalleDTO> salidasEK = _context.Select<UbicacionDetalleDTO>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Colombia,
                            consulta = strQuery
                        }).ToList();

                        if (entradasEK != null && entradasEK.Count() > 0)
                        {
                            List<UbicacionDetalleDTO> entradas = entradasEK.ToList();

                            if (salidasEK != null && salidasEK.Count() > 0)
                            {
                                List<UbicacionDetalleDTO> salidas = salidasEK.ToList();
                                foreach (var ent in entradas)
                                {
                                    var salida = salidas.FirstOrDefault(x =>
                                            x.insumoDesc == ent.insumoDesc &&
                                            x.area_alm == ent.area_alm &&
                                            x.lado_alm == ent.lado_alm &&
                                            x.estante_alm == ent.estante_alm &&
                                            x.nivel_alm == ent.nivel_alm
                                        );

                                    if (salida != null)
                                        ent.cantidad = ent.cantidad - Convert.ToDecimal(salida.cantidad, CultureInfo.InvariantCulture);
                                }
                            }

                            var existenciasInsumo = entradas.Sum(x => x.cantidad);
                            var salidaTotalPorInsumo = movimiento.detalle.Where(x =>
                                x.insumo == det.insumo &&
                                x.area_alm == det.area_alm &&
                                x.lado_alm == det.lado_alm &&
                                x.estante_alm == det.estante_alm &&
                                x.nivel_alm == det.nivel_alm).Sum(x => x.cantidad);

                            if (existenciasInsumo < salidaTotalPorInsumo)
                            {
                                var ubicacion = det.area_alm + "-" + det.lado_alm + "-" + det.estante_alm + "-" + det.nivel_alm;
                                throw new Exception("No se guardó la información. La cantidad solicitada del insumo \"" + det.insumo + "\" sobrepasa las existencias (" + existenciasInsumo + ") en la ubicación \"" + ubicacion + "\".");
                            }
                        }
                        else
                        {
                            var ubicacion = det.area_alm + "-" + det.lado_alm + "-" + det.estante_alm + "-" + det.nivel_alm;
                            throw new Exception("No se guardó la información. No hay existencias para el insumo \"" + det.insumo + "\" en la ubicación \"" + ubicacion + "\".");
                        }
                    }
                    #endregion
                }

                #region Validación Almacén Activo
                var almacenEK = _contextEnkontrol.Select<dynamic>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                {
                    consulta = @"SELECT * FROM DBA.si_almacen WHERE almacen = ?",
                    parametros = new List<OdbcParameterDTO>() {
                        new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = movimiento.almacen }
                    }
                });

                if (almacenEK.Count() == 0)
                    throw new Exception("No se encuentra la información del almacén.");

                if ((string)almacenEK[0].bit_mp != "S")
                    throw new Exception("El almacén no está activo.");
                #endregion

                using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                {
                    using (var con = checkConexionProductivo())
                    {
                        using (var trans = con.BeginTransaction())
                        {
                            try
                            {
                                tblAlm_Movimientos nuevaSalida = new tblAlm_Movimientos();

                                var ultimoMovimientoEK = consultaCheckProductivo(
                                    string.Format(@"SELECT TOP 1 numero FROM DBA.si_movimientos WHERE almacen = {0} AND tipo_mov = {1} ORDER BY numero DESC", movimiento.almacen, 55)
                                );

                                var nuevoNumero = 0;

                                if (ultimoMovimientoEK != null)
                                    nuevoNumero = ((List<SurtidoDetDTO>)ultimoMovimientoEK.ToObject<List<SurtidoDetDTO>>())[0].numero;

                                nuevaSalida = new tblAlm_Movimientos
                                {
                                    almacen = movimiento.almacen,
                                    tipo_mov = 55,
                                    numero = nuevoNumero + 1,
                                    cc = movimiento.cc.ToUpper(),
                                    compania = 1,
                                    periodo = DateTime.Now.Month,
                                    ano = DateTime.Now.Year,
                                    orden_ct = 0,
                                    frente = 0,
                                    fecha = DateTime.Now.Date,
                                    proveedor = 0,
                                    total = movimiento.total,
                                    estatus = "A",
                                    transferida = "N",
                                    alm_destino = 0,
                                    cc_destino = "",
                                    comentarios = movimiento.comentarios,
                                    tipo_trasp = "C",
                                    tipo_cambio = 1,
                                    estatusHabilitado = true,
                                    numeroReq = 0
                                };
                                _context.tblAlm_Movimientos.Add(nuevaSalida);
                                _context.SaveChanges();

                                var partidaContador = 1;
                                foreach (var det in movimiento.detalle)
                                {
                                    var partidaMovimiento = partidaContador++;

                                    var nuevaSalidaDet = new tblAlm_MovimientosDet
                                    {
                                        almacen = nuevaSalida.almacen,
                                        tipo_mov = 55,
                                        numero = nuevoNumero + 1,
                                        partida = partidaMovimiento,
                                        insumo = det.insumo,
                                        comentarios = det.comentarios,
                                        area = det.area ?? 0,
                                        cuenta = det.cuenta ?? 0,
                                        cantidad = det.cantidad,
                                        precio = det.precio,
                                        importe = det.importe,
                                        id_resguardo = 0,
                                        area_alm = det.area_alm ?? "",
                                        lado_alm = det.lado_alm ?? "",
                                        estante_alm = det.estante_alm ?? "",
                                        nivel_alm = det.nivel_alm ?? "",
                                        transporte = "",
                                        estatusHabilitado = true
                                    };
                                    _context.tblAlm_MovimientosDet.Add(nuevaSalidaDet);
                                    _context.SaveChanges();
                                }

                                if (nuevaSalida.total <= 0)
                                    throw new Exception("El total no puede ser igual o menor a cero.");

                                var count = 0;
                                //                                var consulta = @"INSERT INTO DBA.si_movimientos 
                                //                                                (almacen, tipo_mov, numero, cc, compania, periodo, ano, orden_ct, frente, fecha, proveedor, total, estatus, 
                                //                                                transferida, poliza, empleado, alm_destino, cc_destino, comentarios, tipo_trasp, numero_destino, tp, year_poliza, 
                                //                                                mes_poliza, tipo_cambio, hora, fecha_modifica, empleado_modifica, destajista, obra, id_residente, factura, sector_id, 
                                //                                                tc_cc, paquete, tipo_cargo, cargo_destajista, cargo_id_residente, embarque, orden_prod, folio_traspaso, bit_sin_ubicacion) 
                                //                                                VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                                var consulta = @"INSERT INTO DBA.si_movimientos 
                                                (almacen, tipo_mov, numero, cc, compania, periodo, ano, orden_ct, frente, fecha, proveedor, total, estatus, 
                                                transferida, poliza, empleado, alm_destino, cc_destino, comentarios, tipo_trasp, numero_destino, tp, year_poliza, 
                                                mes_poliza, tipo_cambio, hora, fecha_modifica, empleado_modifica, destajista, obra, id_residente, factura, sector_id, 
                                                tc_cc, paquete, tipo_cargo, cargo_destajista, cargo_id_residente, embarque, orden_prod)
                                                VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                using (var cmd = new OdbcCommand(consulta))
                                {
                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@almacen", OdbcType.Numeric).Value = nuevaSalida.almacen;
                                    parameters.Add("@tipo_mov", OdbcType.Numeric).Value = nuevaSalida.tipo_mov;
                                    parameters.Add("@numero", OdbcType.Numeric).Value = nuevaSalida.numero;
                                    parameters.Add("@cc", OdbcType.Char).Value = nuevaSalida.cc ?? "";
                                    parameters.Add("@compania", OdbcType.Numeric).Value = nuevaSalida.compania;
                                    parameters.Add("@periodo", OdbcType.Numeric).Value = nuevaSalida.periodo;
                                    parameters.Add("@ano", OdbcType.Numeric).Value = nuevaSalida.ano;
                                    parameters.Add("@orden_ct", OdbcType.Numeric).Value = nuevaSalida.orden_ct;
                                    parameters.Add("@frente", OdbcType.Numeric).Value = nuevaSalida.frente;
                                    parameters.Add("@fecha", OdbcType.Date).Value = nuevaSalida.fecha.Date;
                                    parameters.Add("@proveedor", OdbcType.Numeric).Value = nuevaSalida.proveedor;
                                    parameters.Add("@total", OdbcType.Numeric).Value = nuevaSalida.total;
                                    parameters.Add("@estatus", OdbcType.Char).Value = nuevaSalida.estatus ?? "";
                                    parameters.Add("@transferida", OdbcType.Char).Value = nuevaSalida.transferida ?? "";
                                    parameters.Add("@poliza", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@empleado", OdbcType.Numeric).Value = empleado;
                                    parameters.Add("@alm_destino", OdbcType.Numeric).Value = nuevaSalida.alm_destino;
                                    parameters.Add("@cc_destino", OdbcType.Char).Value = nuevaSalida.cc_destino ?? "";
                                    parameters.Add("@comentarios", OdbcType.Char).Value = nuevaSalida.comentarios ?? "";
                                    parameters.Add("@tipo_trasp", OdbcType.Char).Value = nuevaSalida.tipo_trasp ?? "";
                                    parameters.Add("@numero_destino", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@tp", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@year_poliza", OdbcType.Numeric).Value = DateTime.Now.Year;
                                    parameters.Add("@mes_poliza", OdbcType.Numeric).Value = DateTime.Now.Month;
                                    parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = nuevaSalida.tipo_cambio;
                                    parameters.Add("@hora", OdbcType.Time).Value = DateTime.Now.TimeOfDay;
                                    parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                    parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = empleado;
                                    parameters.Add("@destajista", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@factura", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@tc_cc", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@paquete", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@tipo_cargo", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@cargo_Destajista", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@cargo_id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@embarque", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@orden_prod", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@folio_traspaso", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@bit_sin_ubicacion", OdbcType.Numeric).Value = 0;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;
                                    count += cmd.ExecuteNonQuery();
                                }

                                var ccDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM DBA.cc WHERE cc = '{0}' AND st_ppto != 'T'", movimiento.cc));
                                var ccDesc = (string)(((List<dynamic>)ccDescEK.ToObject<List<dynamic>>())[0].descripcion);
                                var almacenDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM DBA.si_almacen WHERE almacen = {0}", nuevaSalida.almacen));
                                var almacenDesc = (string)(((List<dynamic>)almacenDescEK.ToObject<List<dynamic>>())[0].descripcion);

                                foreach (var salDet in movimiento.detalle)
                                {
                                    var insumoDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM DBA.insumos WHERE insumo = {0}", salDet.insumo));
                                    var insumoDesc = (string)(((List<dynamic>)insumoDescEK.ToObject<List<dynamic>>())[0].descripcion);
                                    var importe = salDet.cantidad * salDet.precio;

                                    if (salDet.precio <= 0 || importe <= 0)
                                    {
                                        if (!movimientoMasivo)
                                            throw new Exception("El precio y el importe no pueden ser igual o menor a cero.");
                                        else
                                            continue;
                                    }

                                    //                                    var consultaDet = @"INSERT INTO DBA.si_movimientos_det 
                                    //                                         (almacen, tipo_mov, numero, partida, insumo, comentarios, area, cuenta, cantidad, precio, importe, 
                                    //                                         partida_oc, costo_prom, obra, manzana_ini, lote_ini, interior_ini, manzana_fin, lote_fin, interior_fin, 
                                    //                                         remision, sector_id, id_resguardo, area_alm, lado_alm, estante_alm, nivel_alm, fecha_fisico) 
                                    //                                         VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                                    var consultaDet = @"INSERT INTO DBA.si_movimientos_det 
                                         (almacen, tipo_mov, numero, partida, insumo, comentarios, area, cuenta, cantidad, precio, importe, 
                                         partida_oc, costo_prom, obra, manzana_ini, lote_ini, interior_ini, manzana_fin, lote_fin, interior_fin, remision, sector_id) 
                                         VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                    using (var cmd = new OdbcCommand(consultaDet))
                                    {
                                        OdbcParameterCollection parameters = cmd.Parameters;

                                        parameters.Add("@almacen", OdbcType.Numeric).Value = salDet.almacen;
                                        parameters.Add("@tipo_mov", OdbcType.Numeric).Value = salDet.tipo_mov;
                                        parameters.Add("@numero", OdbcType.Numeric).Value = nuevoNumero + 1;
                                        parameters.Add("@partida", OdbcType.Numeric).Value = salDet.partida;
                                        parameters.Add("@insumo", OdbcType.Numeric).Value = salDet.insumo;
                                        parameters.Add("@comentarios", OdbcType.Char).Value = salDet.comentarios ?? "";
                                        parameters.Add("@area", OdbcType.Numeric).Value = salDet.area ?? 0;
                                        parameters.Add("@cuenta", OdbcType.Numeric).Value = salDet.cuenta ?? 0;
                                        parameters.Add("@cantidad", OdbcType.Numeric).Value = salDet.cantidad;
                                        parameters.Add("@precio", OdbcType.Numeric).Value = salDet.precio;
                                        parameters.Add("@importe", OdbcType.Numeric).Value = importe;
                                        parameters.Add("@partida_oc", OdbcType.Numeric).Value = salDet.partida_oc ?? 0;
                                        parameters.Add("@costo_prom", OdbcType.Numeric).Value = salDet.precio;
                                        parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@manzana_ini", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@lote_ini", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@interior_ini", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@manzana_fin", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@lote_fin", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@interior_fin", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@remision", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@id_resguardo", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@area_alm", OdbcType.Char).Value = salDet.area_alm ?? "";
                                        parameters.Add("@lado_alm", OdbcType.Char).Value = salDet.lado_alm ?? "";
                                        parameters.Add("@estante_alm", OdbcType.Char).Value = salDet.estante_alm ?? "";
                                        parameters.Add("@nivel_alm", OdbcType.Char).Value = salDet.nivel_alm ?? "";
                                        parameters.Add("@fecha_fisico", OdbcType.Date).Value = DBNull.Value;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;
                                        count += cmd.ExecuteNonQuery();

                                        movSalidas.Add(new salidasAlmacenDTO
                                        {
                                            centroCosto = ccDesc,
                                            folioSalida = (nuevoNumero + 1).ToString(),
                                            almacen = almacenDesc,
                                            fechaSalida = nuevaSalida.fecha.Date,
                                            partida = salDet.partida,
                                            insumo = salDet.insumo + "-" + insumoDesc ?? "",
                                            areaCuenta = (salDet.area ?? 0) + "-" + (salDet.cuenta ?? 0),
                                            referencia = "",
                                            remision = "",
                                            cantidad = salDet.cantidad,
                                            precio = salDet.precio,
                                            importe = salDet.cantidad * salDet.precio,
                                            comentarios = salDet.comentarios != null ? (string)salDet.comentarios : "",
                                            comentariosGenerales = movimiento.comentarios != null ? (string)movimiento.comentarios : "",
                                            ordenCompra = nuevaSalida.orden_ct.ToString(),
                                            proveedor = "",
                                            direccion = "",
                                            ciudad = "",
                                            telefonos = "",

                                            area_alm = salDet.area_alm ?? "",
                                            lado_alm = salDet.lado_alm ?? "",
                                            estante_alm = salDet.estante_alm ?? "",
                                            nivel_alm = salDet.nivel_alm ?? ""
                                        });
                                    }

                                    #region Actualizar Tablas Acumula
                                    var objAcumula = new MovimientoDetalleEnkontrolDTO
                                    {
                                        insumo = salDet.insumo,
                                        cantidad = salDet.cantidad,
                                        precio = salDet.precio,
                                        tipo_mov = salDet.tipo_mov,
                                        costo_prom = 0
                                    };

                                    actualizarAcumula(nuevaSalida.almacen, nuevaSalida.cc, objAcumula, dbSigoplanTransaction, trans);
                                    #endregion
                                }

                                trans.Commit();
                                dbSigoplanTransaction.Commit();
                            }
                            catch (Exception e)
                            {
                                trans.Rollback();
                                dbSigoplanTransaction.Rollback();

                                LogError(12, 0, "AlmacenController", "guardarSalidaInventarioFisico", e, AccionEnum.AGREGAR, 0, movimiento);

                                throw new Exception(e.Message);
                            }
                        }
                    }
                }
                #endregion
            }
            else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
            {
                #region PERU
                using (var dbStarsoft = new MainContextPeruStarSoft003BDCOMUN())
                {
                    using (var dbStarsoftTransaction = dbStarsoft.Database.BeginTransaction())
                    {
                        using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                        {
                            try
                            {
                                #region USUARIO INVENTARIOS STARSOFT
                                var objUsrStarsoftInventarios = _context.tblAlm_Almacenistas.FirstOrDefault(e => e.id_usuario_sigoplan == vSesiones.sesionUsuarioDTO.id);

                                string idAlmacenistaStarsoft = "0";

                                if (objUsrStarsoftInventarios == null)
                                {
                                    if (vSesiones.sesionUsuarioDTO.idPerfil == 1)
                                    {
                                        idAlmacenistaStarsoft = "1";
                                    }
                                    else
                                    {
                                        throw new Exception("Esta usuario no es un almacenista en el sistema de PERU");
                                    }
                                }
                                else
                                {
                                    idAlmacenistaStarsoft = objUsrStarsoftInventarios.id_usuario_inventarios;
                                }
                                #endregion

                                #region Validación Inventariables STARSOFT

                                var lstInsumos = new List<MAEART>();

                                foreach (var det in movimiento.detalle)
                                {

                                    var objInsumo = dbStarsoft.MAEART.FirstOrDefault(e => e.ACODIGO == det.PERU_insumo);

                                    if (objInsumo != null)
                                    {
                                        lstInsumos.Add(objInsumo);

                                        if (objInsumo.ACODIGO.Substring(0, 2) == "02")
                                        {
                                            throw new Exception(string.Format(@"El insumo ""{0}"" no es inventariable.", det.PERU_insumo));
                                        }
                                    }
                                    else
                                    {
                                        throw new Exception(string.Format(@"No se encuentra la información para el insumo ""{0}"".", det.PERU_insumo));
                                    }
                                }
                                #endregion

                                #region Validación Almacén Activo STARSOFT

                                string almacenStarsoft = "";
                                if (movimiento.almacen > 9)
                                {
                                    almacenStarsoft = movimiento.almacen.ToString();
                                }
                                else
                                {
                                    almacenStarsoft = "0" + movimiento.almacen;
                                }

                                var objAlmacen = dbStarsoft.TABALM.FirstOrDefault(e => e.TAALMA == almacenStarsoft);

                                if (objAlmacen == null)
                                {
                                    throw new Exception("No se encuentra la información del almacén.");
                                }

                                #endregion

                                #region Validar Existencias
                                foreach (var det in movimiento.detalle)
                                {
                                    if (movimiento.almacen < 90)
                                    {
                                        var registroStock = dbStarsoft.STKART.ToList().FirstOrDefault(x => Int32.Parse(x.STALMA) == movimiento.almacen && Int32.Parse(x.STCODIGO) == det.insumo);

                                        if (registroStock != null)
                                        {
                                            if (det.cantidad > (decimal)registroStock.STSKDIS)
                                            {
                                                throw new Exception("La cantidad solicitada del insumo \"" + ("0" + det.insumo) + "\" sobrepasa las existencias (" + (decimal)registroStock.STSKDIS + ").");
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("No hay existencias para el insumo \"" + ("0" + det.insumo) + "\" en el almacén \"" + movimiento.almacen + "\".");
                                        }
                                    }
                                    else
                                    {
                                        var existenciasUbicacion = _context.tblAlm_MovimientosDet.Where(x =>
                                            x.estatusHabilitado &&
                                            x.almacen == movimiento.almacen &&
                                            x.insumo == det.insumo &&
                                            x.area_alm == det.area_alm &&
                                            x.lado_alm == det.lado_alm &&
                                            x.estante_alm == det.estante_alm &&
                                            x.nivel_alm == det.nivel_alm
                                        ).ToList().GroupBy(x => new { x.almacen, x.insumo, x.area_alm, x.lado_alm, x.estante_alm, x.nivel_alm }).Select(x => new
                                        {
                                            almacen = x.Key.almacen,
                                            insumo = x.Key.insumo,
                                            area_alm = x.Key.area_alm,
                                            lado_alm = x.Key.lado_alm,
                                            estante_alm = x.Key.estante_alm,
                                            nivel_alm = x.Key.nivel_alm,
                                            cantidad = x.Sum(y => y.tipo_mov < 50 ? y.cantidad : (y.cantidad * -1))
                                        }).FirstOrDefault();

                                        if (existenciasUbicacion != null)
                                        {
                                            if (det.cantidad > existenciasUbicacion.cantidad)
                                            {
                                                throw new Exception("La cantidad solicitada del insumo \"" + ("0" + det.insumo) + "\" sobrepasa las existencias (" + existenciasUbicacion.cantidad + ").");
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("No hay existencias para el insumo \"" + ("0" + det.insumo) + "\" en el almacén \"" + movimiento.almacen + "\".");
                                        }
                                    }
                                }
                                #endregion

                                bool flagAlmacenVirtual = movimiento.almacen >= 90;

                                if (!flagAlmacenVirtual)
                                {
                                    #region SIGOPLAN HEADER
                                    tblAlm_Movimientos nuevaSalida = new tblAlm_Movimientos();

                                    //var ultimoMovimientoSigoplan = _context.tblAlm_Movimientos.OrderByDescending(e => e.id).FirstOrDefault();
                                    //var ultimoMovimientoSigoplan = _context.tblAlm_Movimientos.Where(e => e.almacen == movimiento.almacen && e.tipo_mov >= 50).OrderByDescending(e => e.id).FirstOrDefault();
                                    int ultimoFolio = dbStarsoft.MOVALMCAB.ToList().Where(x => Int32.Parse(x.CAALMA) == movimiento.almacen && x.CATD == "NS").Select(x => Int32.Parse(x.CANUMDOC)).OrderByDescending(x => x).FirstOrDefault();

                                    var nuevoNumero = 0;

                                    //if (ultimoMovimientoSigoplan != null)
                                    //{
                                    nuevoNumero = ultimoFolio;
                                    //}

                                    nuevaSalida = new tblAlm_Movimientos
                                    {
                                        almacen = movimiento.almacen,
                                        tipo_mov = 55,
                                        numero = nuevoNumero + 1,
                                        cc = movimiento.cc.ToUpper(),
                                        compania = 1,
                                        periodo = DateTime.Now.Month,
                                        ano = DateTime.Now.Year,
                                        orden_ct = 0,
                                        frente = 0,
                                        fecha = DateTime.Now.Date,
                                        proveedor = 0,
                                        total = movimiento.total,
                                        estatus = "A",
                                        transferida = "N",
                                        alm_destino = 0,
                                        cc_destino = "",
                                        comentarios = movimiento.comentarios,
                                        tipo_trasp = "C",
                                        tipo_cambio = 1,
                                        estatusHabilitado = true,
                                        numeroReq = 0,
                                        idUsuarioCreacion = vSesiones.sesionUsuarioDTO.id,
                                        fechaCreacion = DateTime.Now,
                                    };

                                    _context.tblAlm_Movimientos.Add(nuevaSalida);
                                    _context.SaveChanges();
                                    #endregion

                                    #region STARSOFT HEADER
                                    //SE CONSIGUE EL PROXIMO CONSECUTIVO DE *ENTRADA* DE ALMACEN FISICO 
                                    int idProxNI = objAlmacen.TANUMSAL.Value + 1;

                                    //ID DE STARSOFT DE LA NOTA
                                    string numeroMovimientoStarsoft = (ultimoFolio + 1).ToString("D10");

                                    //TIPO DE CAMBIO DEL DIA O ANTERIOR
                                    decimal tipoCambioPeru = 0M;

                                    using (var dbStarsoftConta = new MainContextPeruStarSoft003BDCONTABILIDAD())
                                    {
                                        var tipoCambioActual = dbStarsoftConta.TIPO_CAMBIO.ToList().FirstOrDefault(e => e.TIPOCAMB_FECHA.Date == DateTime.Now.Date);
                                        if (tipoCambioActual != null)
                                        {
                                            tipoCambioPeru = tipoCambioActual.TIPOCAMB_COMPRA;
                                        }
                                        else
                                        {
                                            tipoCambioPeru = dbStarsoftConta.TIPO_CAMBIO.ToList().FirstOrDefault(e => e.TIPOCAMB_FECHA.Date == DateTime.Now.AddDays(-1).Date).TIPOCAMB_COMPRA;
                                        }

                                    }

                                    #region INSERT MOVALMCAB

                                    MOVALMCAB objCrearMovCab = new MOVALMCAB();

                                    objCrearMovCab.CAALMA = almacenStarsoft;
                                    objCrearMovCab.CATD = "NS";
                                    objCrearMovCab.CANUMDOC = numeroMovimientoStarsoft;
                                    objCrearMovCab.CAFECDOC = DateTime.Now.Date;
                                    objCrearMovCab.CATIPMOV = "S";
                                    objCrearMovCab.CACODMOV = "AJ";
                                    objCrearMovCab.CASITUA = null;
                                    objCrearMovCab.CARFTDOC = ""; //PENDIENTE CHECAR CUANDO DEJA VER EL STOCK DE LOS INSUMOS EN EL ALMACEN (ASI SI DEJA AGREGARLOS;
                                    objCrearMovCab.CARFNDOC = null;
                                    objCrearMovCab.CASOLI = null;
                                    objCrearMovCab.CAFECDEV = null;
                                    objCrearMovCab.CACODPRO = null;
                                    objCrearMovCab.CACENCOS = movimiento.cc;
                                    objCrearMovCab.CARFALMA = null;
                                    objCrearMovCab.CAGLOSA = movimiento.comentarios;
                                    objCrearMovCab.CAFECACT = DateTime.Now.Date;
                                    objCrearMovCab.CAHORA = DateTime.Now.ToString("HH:mm:ss");
                                    objCrearMovCab.CAUSUARI = objUsrStarsoftInventarios.id_usuario_inventarios;
                                    objCrearMovCab.CACODCLI = null;
                                    objCrearMovCab.CARUC = null;
                                    objCrearMovCab.CANOMCLI = null;
                                    objCrearMovCab.CAFORVEN = null;
                                    objCrearMovCab.CACODMON = "MN"; //PENDIENTE TIPO DE MONED;
                                    objCrearMovCab.CAVENDE = null;
                                    objCrearMovCab.CATIPCAM = tipoCambioPeru;
                                    objCrearMovCab.CATIPGUI = null;
                                    objCrearMovCab.CASITGUI = "V";
                                    objCrearMovCab.CAGUIFAC = null;
                                    objCrearMovCab.CADIRENV = null;
                                    objCrearMovCab.CACODTRAN = null;
                                    objCrearMovCab.CANUMORD = null;
                                    objCrearMovCab.CAGUIDEV = null;
                                    objCrearMovCab.CANOMPRO = null;
                                    objCrearMovCab.CANROPED = null;
                                    objCrearMovCab.CACOTIZA = null;
                                    objCrearMovCab.CAPORDESCL = 0M;
                                    objCrearMovCab.CAPORDESES = 0M;
                                    objCrearMovCab.CAIMPORTE = movimiento.total;
                                    objCrearMovCab.CANOMTRA = null;
                                    objCrearMovCab.CADIRTRA = null;
                                    objCrearMovCab.CARUCTRA = null;
                                    objCrearMovCab.CAPLATRA = null;
                                    objCrearMovCab.CANROIMP = "V";
                                    objCrearMovCab.CACODLIQ = null;
                                    objCrearMovCab.CAESTIMP = null;
                                    objCrearMovCab.CACIERRE = false;
                                    objCrearMovCab.CATIPDEP = null;
                                    objCrearMovCab.CAZONAF = null;
                                    objCrearMovCab.FLAGGS = false;
                                    objCrearMovCab.ASIENTO = false;
                                    objCrearMovCab.CAFLETE = 0M;
                                    objCrearMovCab.CAORDFAB = "";
                                    objCrearMovCab.CAPEDREFE = null;
                                    objCrearMovCab.CAIMPORTACION = false;
                                    objCrearMovCab.CANROCAJAS = 0;
                                    objCrearMovCab.CAPESOTOTAL = 0M;
                                    objCrearMovCab.CADESPACHO = false;
                                    objCrearMovCab.LINVCODIGO = null;
                                    objCrearMovCab.COD_DIRECCION = null;
                                    objCrearMovCab.COSTOMIN = 0M;
                                    objCrearMovCab.CAINTERFACE = 0;
                                    objCrearMovCab.CACTACONT = null;
                                    objCrearMovCab.CACONTROLSTOCK = "S";
                                    objCrearMovCab.CANOMRECEP = null;
                                    objCrearMovCab.CADNIRECEP = null;
                                    objCrearMovCab.CFDIREREFE = null;
                                    objCrearMovCab.REG_COMPRA = false;
                                    objCrearMovCab.OC_NI_GUIA = false;
                                    objCrearMovCab.COD_AUDITORIA = "0";
                                    objCrearMovCab.COD_MODULO = "03";
                                    objCrearMovCab.NO_GIRO_NEGOCIO = false;
                                    objCrearMovCab.MOTIVO_ANULACION_DOC_ELECTRONICO = null;
                                    objCrearMovCab.DOCUMENTO_ELECTRONICO = null;
                                    objCrearMovCab.GS_BAJA = null;
                                    objCrearMovCab.CADocumentoImportado = null;
                                    objCrearMovCab.SOLICITANTE = null;
                                    objCrearMovCab.DOCUMENTO_CONTINGENCIA = null;
                                    objCrearMovCab.GE_BAJA = null;

                                    dbStarsoft.MOVALMCAB.Add(objCrearMovCab);

                                    dbStarsoft.SaveChanges();

                                    #endregion

                                    #endregion

                                    #region STARSOFT CONSECUTIVOS
                                    objAlmacen.TANUMSAL = idProxNI;
                                    dbStarsoft.SaveChanges();

                                    #endregion

                                    var partidaContador = 1;
                                    string ccDesc = _context.tblC_Nom_CatalogoCC.FirstOrDefault(e => e.cc == movimiento.cc).ccDescripcion;
                                    string almacenDesc = objAlmacen.TADESCRI;

                                    foreach (var det in movimiento.detalle)
                                    {
                                        var objInsumo = lstInsumos.FirstOrDefault(e => e.ACODIGO == det.PERU_insumo);

                                        #region SIGOPLAN DET

                                        var nuevaSalidaDet = new tblAlm_MovimientosDet
                                        {
                                            almacen = nuevaSalida.almacen,
                                            tipo_mov = 55,
                                            numero = nuevoNumero + 1,
                                            partida = partidaContador,
                                            insumo = det.insumo,
                                            comentarios = det.comentarios,
                                            area = det.area ?? 0,
                                            cuenta = det.cuenta ?? 0,
                                            cantidad = det.cantidad,
                                            precio = det.precio,
                                            importe = det.importe,
                                            id_resguardo = 0,
                                            area_alm = det.area_alm ?? "",
                                            lado_alm = det.lado_alm ?? "",
                                            estante_alm = det.estante_alm ?? "",
                                            nivel_alm = det.nivel_alm ?? "",
                                            transporte = "",
                                            estatusHabilitado = true,
                                            PERU_insumo = det.PERU_insumo,
                                        };

                                        _context.tblAlm_MovimientosDet.Add(nuevaSalidaDet);
                                        _context.SaveChanges();
                                        #endregion

                                        #region STARSOFT DET

                                        #region INSERT MOVALMDET
                                        dbStarsoft.MovAlmDet.Add(new MovAlmDet()
                                        {
                                            DEALMA = almacenStarsoft,
                                            DETD = "NS",
                                            DENUMDOC = numeroMovimientoStarsoft,
                                            DEITEM = partidaContador,
                                            DECODIGO = det.PERU_insumo,
                                            DECODREF = null,
                                            DECANTID = det.cantidad,
                                            DECANTENT = 0M,
                                            DECANREF = 0M,
                                            DECANFAC = 0M,
                                            DEORDEN = null,
                                            DEPREUNI = 0M,
                                            DEPRECIO = det.precio,
                                            DEPRECI1 = 0M,
                                            DEDESCTO = 0M,
                                            DESTOCK = null,
                                            DEIGV = 0M,
                                            DEIMPMN = det.precio,
                                            DEIMPUS = det.precio * tipoCambioPeru,
                                            DESERIE = null,
                                            DESITUA = null,
                                            DEFECDOC = null,
                                            DECENCOS = movimiento.cc,
                                            DERFALMA = null,
                                            DETR = null,
                                            DEESTADO = "V",
                                            DECODMOV = "AJ",
                                            DEVALTOT = det.precio * det.cantidad,
                                            DECOMPRO = null,
                                            DECODMON = "MN",
                                            DETIPO = null,
                                            DETIPCAM = tipoCambioPeru,
                                            DEPREVTA = null,
                                            DEMONVTA = null,
                                            DEFECVEN = null,
                                            DEDEVOL = 0M,
                                            DESOLI = null,
                                            DEDESCRI = objInsumo.ADESCRI,
                                            DEPORDES = 0M,
                                            DEIGVPOR = 0M,
                                            DEDESCLI = 0M,
                                            DEDESESP = 0M,
                                            DENUMFAC = null,
                                            DELOTE = null,
                                            DEUNIDAD = objInsumo.AUNIDAD,
                                            DECANTBRUTA = 0M,
                                            DEDSCTCANTBRUTA = 0M,
                                            DEORDFAB = "",
                                            DEQUIPO = null,
                                            DEFLETE = 0M,
                                            DEITEMI = null, //????????
                                            DEGLOSA = "",
                                            DEVALORIZADO = true,
                                            DESECUENORI = null,
                                            DEREFERENCIA = null,
                                            UMREFERENCIA = null,
                                            CANTREFERENCIA = 0M,
                                            DECUENTA = null,
                                            DETEXTO = null,
                                            CTA_CONSUMO = null,
                                            CODPARTE = "",
                                            CODPLANO = "",
                                            DETPRODUCCION = 0,
                                            MPMA = "",
                                            PorcentajeCosto = 0M,
                                            SALDO_NC = null,
                                            DEPRECIOREF = 0M,
                                        });
                                        dbStarsoft.SaveChanges();

                                        #endregion

                                        #region INSERT STKART

                                        var obkStkart = dbStarsoft.STKART.FirstOrDefault(e => e.STALMA == almacenStarsoft && e.STCODIGO == det.PERU_insumo);

                                        if (obkStkart != null)
                                        {
                                            //ACTUALIZAR EXISTENCIAS. PENDIENTE CHECAR OTROS CAMPOS
                                            obkStkart.STSKDIS -= det.cantidad;

                                            if (obkStkart.STSKDIS < 0)
                                            {
                                                obkStkart.STSKDIS = 0;
                                            }

                                            if (obkStkart.STSKDIS == 0)
                                            {
                                                obkStkart.STKPREPRO = 0;
                                                obkStkart.STKPREPROUS = 0;
                                            }

                                            dbStarsoft.SaveChanges();
                                        }
                                        else
                                        {
                                            //NUEVO
                                            dbStarsoft.STKART.Add(new STKART()
                                            {
                                                STALMA = almacenStarsoft,
                                                STCODIGO = det.PERU_insumo,
                                                STSKDIS = -det.cantidad,
                                                STSKREF = 0M,
                                                STSKMIN = 0M,
                                                STSKMAX = 0M,
                                                STPUNREP = 0M,
                                                STSEMREP = 0M,
                                                STTIPREP = null,
                                                STUBIALM = null,
                                                STLOTCOM = 0M,
                                                STTIPCOM = null,
                                                STSKCOM = 0M,
                                                STKPREPRO = 0M,
                                                STKPREULT = 0M,
                                                STKFECULT = DateTime.Now.Date,
                                                STKPREPROUS = 0M,
                                                CANTREFERENCIA = 0M,
                                            });

                                            dbStarsoft.SaveChanges();
                                        }

                                        #endregion

                                        #region INSERT MORESMES

                                        var objMoResMes = dbStarsoft.MoResMes.ToList().FirstOrDefault(e => e.SMALMA == almacenStarsoft && e.SMMESPRO == (DateTime.Now.Year.ToString() + DateTime.Now.ToString("MM"))
                                                                                                && e.SMCODIGO == det.PERU_insumo);

                                        if (objMoResMes != null)
                                        {
                                            objMoResMes.SMCANSAL += det.cantidad;

                                            dbStarsoft.SaveChanges();
                                        }
                                        else
                                        {
                                            //NUEVO
                                            var objCrearMoResMes = new MoResMes();
                                            objCrearMoResMes.SMALMA = almacenStarsoft;
                                            objCrearMoResMes.SMCODIGO = det.PERU_insumo;
                                            objCrearMoResMes.SMMESPRO = (DateTime.Now.Year.ToString() + DateTime.Now.ToString("MM"));
                                            objCrearMoResMes.SMUSPREUNI = 0M; //CAMBIAR POR EL PRESIO ADECUEDO DEPENDE EL TIPO DE MONEDA CHECAR EN OTRAS TABLAS
                                            objCrearMoResMes.SMMNPREUNI = 0M; //CAMBIAR POR EL PRESIO ADECUEDO DEPENDE EL TIPO DE MONEDA
                                            objCrearMoResMes.SMUSPREANT = 0M;
                                            objCrearMoResMes.SMULTMOV = null;
                                            objCrearMoResMes.SMCANENT = 0M; //SUPONIENDO QUE ES NUEVO
                                            objCrearMoResMes.SMCANSAL = det.cantidad;
                                            objCrearMoResMes.SMANTCAN = 0M;
                                            objCrearMoResMes.SMMNANTVAL = 0M;
                                            objCrearMoResMes.SMMNACTVAL = 0M;
                                            objCrearMoResMes.SMUSANTVAL = 0M;
                                            objCrearMoResMes.SMUSACTVAL = 0M;
                                            objCrearMoResMes.SMUSENT = 0M;
                                            objCrearMoResMes.SMMNENT = 0M;
                                            objCrearMoResMes.SMUSSAL = 0;
                                            objCrearMoResMes.SMMNSAL = 0M;
                                            objCrearMoResMes.SMCUENTA = null;
                                            objCrearMoResMes.SMGRUPO = null;
                                            objCrearMoResMes.SMFAMILIA = null;
                                            objCrearMoResMes.SMLINEA = null;
                                            objCrearMoResMes.SMTIPO = null;
                                            objCrearMoResMes.SMSALDOINI = 0M;
                                            objCrearMoResMes.COD_MODULO = "03";
                                            objCrearMoResMes.COD_OPCION = "Men_TraRegEnt"; //??

                                            dbStarsoft.MoResMes.Add(objCrearMoResMes);
                                            dbStarsoft.SaveChanges();
                                        }

                                        #endregion

                                        #endregion

                                        #region REPORTE
                                        movSalidas.Add(new salidasAlmacenDTO
                                        {
                                            centroCosto = movimiento.cc + "-" + ccDesc,
                                            folioSalida = (nuevoNumero + 1).ToString(),
                                            almacen = movimiento.almacen + "-" + almacenDesc,
                                            fechaEntrada = nuevaSalida.fecha,
                                            partida = det.partida,
                                            insumo = det.PERU_insumo + "-" + objInsumo.ADESCRI ?? "",
                                            areaCuenta = det.area + "-" + det.cuenta,
                                            referencia = "",
                                            remision = "",
                                            cantidad = det.cantidad,
                                            precio = det.precio,
                                            importe = det.cantidad * det.precio,
                                            comentarios = movimiento.comentarios != null ? (string)movimiento.comentarios : "",
                                            ordenCompra = nuevaSalida.orden_ct.ToString(),
                                            proveedor = "",
                                            direccion = "",
                                            ciudad = "",
                                            telefonos = "",
                                            PERU_insumo = det.PERU_insumo,

                                            area_alm = det.area_alm ?? "",
                                            lado_alm = det.lado_alm ?? "",
                                            estante_alm = det.estante_alm ?? "",
                                            nivel_alm = det.nivel_alm ?? ""
                                        });
                                        partidaContador++;
                                        #endregion
                                    }

                                    if (nuevaSalida.total <= 0)
                                    {
                                        throw new Exception("El total no puede ser igual o menor a cero.");
                                    }
                                }
                                else
                                {
                                    #region SIGOPLAN HEADER
                                    tblAlm_Movimientos nuevaSalida = new tblAlm_Movimientos();

                                    //var ultimoMovimientoSigoplan = _context.tblAlm_Movimientos.OrderByDescending(e => e.id).FirstOrDefault();
                                    //var ultimoMovimientoSigoplan = _context.tblAlm_Movimientos.Where(e => e.almacen == movimiento.almacen && e.tipo_mov >= 50).OrderByDescending(e => e.id).FirstOrDefault();
                                    int ultimoFolio = _context.tblAlm_Movimientos.Where(x => x.estatusHabilitado && x.almacen == movimiento.almacen && x.tipo_mov > 50).Select(x => x.numero).OrderByDescending(x => x).FirstOrDefault();

                                    var nuevoNumero = 0;

                                    //if (ultimoMovimientoSigoplan != null)
                                    //{
                                    nuevoNumero = ultimoFolio;
                                    //}

                                    nuevaSalida = new tblAlm_Movimientos
                                    {
                                        almacen = movimiento.almacen,
                                        tipo_mov = 55,
                                        numero = nuevoNumero + 1,
                                        cc = movimiento.cc.ToUpper(),
                                        compania = 1,
                                        periodo = DateTime.Now.Month,
                                        ano = DateTime.Now.Year,
                                        orden_ct = 0,
                                        frente = 0,
                                        fecha = DateTime.Now.Date,
                                        proveedor = 0,
                                        total = movimiento.total,
                                        estatus = "A",
                                        transferida = "N",
                                        alm_destino = 0,
                                        cc_destino = "",
                                        comentarios = movimiento.comentarios,
                                        tipo_trasp = "C",
                                        tipo_cambio = 1,
                                        estatusHabilitado = true,
                                        numeroReq = 0,
                                        idUsuarioCreacion = vSesiones.sesionUsuarioDTO.id,
                                        fechaCreacion = DateTime.Now,
                                    };

                                    _context.tblAlm_Movimientos.Add(nuevaSalida);
                                    _context.SaveChanges();
                                    #endregion

                                    var partidaContador = 1;
                                    string ccDesc = _context.tblC_Nom_CatalogoCC.FirstOrDefault(e => e.cc == movimiento.cc).ccDescripcion;
                                    string almacenDesc = objAlmacen.TADESCRI;

                                    foreach (var det in movimiento.detalle)
                                    {
                                        var objInsumo = lstInsumos.FirstOrDefault(e => e.ACODIGO == det.PERU_insumo);

                                        #region SIGOPLAN DET

                                        var nuevaSalidaDet = new tblAlm_MovimientosDet
                                        {
                                            almacen = nuevaSalida.almacen,
                                            tipo_mov = 55,
                                            numero = nuevoNumero + 1,
                                            partida = partidaContador,
                                            insumo = det.insumo,
                                            comentarios = det.comentarios,
                                            area = det.area ?? 0,
                                            cuenta = det.cuenta ?? 0,
                                            cantidad = det.cantidad,
                                            precio = det.precio,
                                            importe = det.importe,
                                            id_resguardo = 0,
                                            area_alm = det.area_alm ?? "",
                                            lado_alm = det.lado_alm ?? "",
                                            estante_alm = det.estante_alm ?? "",
                                            nivel_alm = det.nivel_alm ?? "",
                                            transporte = "",
                                            estatusHabilitado = true,
                                            PERU_insumo = det.PERU_insumo,
                                        };

                                        _context.tblAlm_MovimientosDet.Add(nuevaSalidaDet);
                                        _context.SaveChanges();
                                        #endregion

                                        #region REPORTE
                                        movSalidas.Add(new salidasAlmacenDTO
                                        {
                                            centroCosto = movimiento.cc + "-" + ccDesc,
                                            folioSalida = (nuevoNumero + 1).ToString(),
                                            almacen = movimiento.almacen + "-" + almacenDesc,
                                            fechaEntrada = nuevaSalida.fecha,
                                            partida = det.partida,
                                            insumo = det.PERU_insumo + "-" + objInsumo.ADESCRI ?? "",
                                            areaCuenta = det.area + "-" + det.cuenta,
                                            referencia = "",
                                            remision = "",
                                            cantidad = det.cantidad,
                                            precio = det.precio,
                                            importe = det.cantidad * det.precio,
                                            comentarios = movimiento.comentarios != null ? (string)movimiento.comentarios : "",
                                            ordenCompra = nuevaSalida.orden_ct.ToString(),
                                            proveedor = "",
                                            direccion = "",
                                            ciudad = "",
                                            telefonos = "",
                                            PERU_insumo = det.PERU_insumo,

                                            area_alm = det.area_alm ?? "",
                                            lado_alm = det.lado_alm ?? "",
                                            estante_alm = det.estante_alm ?? "",
                                            nivel_alm = det.nivel_alm ?? ""
                                        });
                                        partidaContador++;
                                        #endregion
                                    }

                                    if (nuevaSalida.total <= 0)
                                    {
                                        throw new Exception("El total no puede ser igual o menor a cero.");
                                    }
                                }

                                //trans.Commit();
                                dbSigoplanTransaction.Commit();
                                dbStarsoftTransaction.Commit();
                            }
                            catch (Exception e)
                            {
                                //trans.Rollback();
                                dbSigoplanTransaction.Rollback();//SIGOPLAN
                                dbStarsoftTransaction.Rollback();//STARSOFT

                                LogError(12, 0, "AlmacenController", "guardarSalidaInventarioFisico", e, AccionEnum.AGREGAR, 0, movimiento);

                                throw new Exception(e.Message);
                            }
                        }
                    }
                }
                #endregion
            }
            else
            {
                #region RESTO EMPRESAS
                var empleado = 0;
                var usuarioSigoplan = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                if (usuarioSigoplan != null)
                {
                    empleado = usuarioSigoplan.empleado;
                }

                #region Validación Permiso Movimiento Administrador
                var permisoAdministrador = _context.tblAlm_PermisoMovimientoAdministrador.FirstOrDefault(x => x.estatus && x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                if (permisoAdministrador == null)
                {
                    if (movimiento.almacen < 900)
                    {
                        throw new Exception("El usuario no tiene permiso para generar este movimiento.");
                    }
                }
                #endregion

                //#region Validación familias 101 y 102
                //if (vSesiones.sesionEmpresaActual == 2)
                //{
                //    if (movimiento.almacen < 600 || movimiento.almacen > 620)
                //    {
                //        if (movimiento.detalle.Select(x => x.insumo.ToString().Substring(0, 3)).Any(x => x == "101") || movimiento.detalle.Select(x => x.insumo.ToString().Substring(0, 3)).Any(x => x == "102"))
                //        {
                //            List<int> insumosExcepciones = _context.tblAlm_Validacion_101_102_InsumosExcepciones.Where(x => x.estatus).Select(x => x.insumo).ToList();
                //            List<int> insumosMovimiento = movimiento.detalle.Select(x => x.insumo).ToList();

                //            if (insumosExcepciones.Count() > 0)
                //            {
                //                foreach (int insMov in insumosMovimiento)
                //                {
                //                    if (!insumosExcepciones.Contains(insMov))
                //                    {
                //                        throw new Exception("No se puede dar salida a las familias de insumo 101 y 102. Insumo: \"" + insMov + "\".");
                //                    }
                //                }
                //            }
                //            else
                //            {
                //                throw new Exception("No se puede dar salida a las familias de insumo 101 y 102.");
                //            }
                //        }
                //    }
                //}
                //#endregion

                #region Validación Inventariables
                var registrosGrupoInsumo = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM grupos_insumo")).ToObject<List<dynamic>>();

                foreach (var det in movimiento.detalle)
                {
                    var tipo_insumo = Int32.Parse(det.insumo.ToString().Substring(0, 1));
                    var grupo_insumo = Int32.Parse(det.insumo.ToString().Substring(1, 2));
                    var registroGrupoInsumo = registrosGrupoInsumo.FirstOrDefault(x => (int)x.tipo_insumo == tipo_insumo && (int)x.grupo_insumo == grupo_insumo);

                    if (registroGrupoInsumo != null)
                    {
                        if ((string)registroGrupoInsumo.inventariado != "I")
                        {
                            throw new Exception(string.Format(@"El insumo ""{0}"" no es inventariable.", det.insumo));
                        }
                    }
                    else
                    {
                        throw new Exception(string.Format(@"No se encuentra la información del grupo de insumo para el insumo ""{0}"".", det.insumo));
                    }
                }
                #endregion

                if (!movimientoMasivo)
                {
                    #region Validar Existencias
                    foreach (var det in movimiento.detalle)
                    {
                        var entradasEK = consultaCheckProductivo(
                            string.Format(@"SELECT 
                                        det.insumo, 
                                        (CAST(det.insumo AS Varchar) + '-' + ins.descripcion) AS insumoDesc, 
                                        SUM(det.cantidad) AS cantidad, 
                                        det.area_alm, 
                                        det.lado_alm, 
                                        det.estante_alm, 
                                        det.nivel_alm 
                                    FROM si_movimientos mov 
                                        INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                                        INNER JOIN insumos ins ON det.insumo = ins.insumo 
                                    WHERE 
                                        mov.almacen = {0} AND 
                                        det.insumo = {1} AND 
                                        det.area_alm = '{2}' AND 
                                        det.lado_alm = '{3}' AND 
                                        det.estante_alm = '{4}' AND 
                                        det.nivel_alm = '{5}' AND 
                                        det.tipo_mov < 50 
                                    GROUP BY det.insumo, ins.descripcion, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm",
                                            det.almacen, det.insumo, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm));

                        var salidasEK = consultaCheckProductivo(
                            string.Format(@"SELECT 
                                        det.insumo, 
                                        (CAST(det.insumo AS Varchar) + '-' + ins.descripcion) AS insumoDesc, 
                                        SUM(det.cantidad) AS cantidad, 
                                        det.area_alm, 
                                        det.lado_alm, 
                                        det.estante_alm, 
                                        det.nivel_alm 
                                    FROM si_movimientos mov 
                                        INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                                        INNER JOIN insumos ins ON det.insumo = ins.insumo 
                                    WHERE 
                                        mov.almacen = {0} AND 
                                        det.insumo = {1} AND 
                                        det.area_alm = '{2}' AND 
                                        det.lado_alm = '{3}' AND 
                                        det.estante_alm = '{4}' AND 
                                        det.nivel_alm = '{5}' AND 
                                        det.tipo_mov > 50 
                                    GROUP BY det.insumo, ins.descripcion, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm",
                                            det.almacen, det.insumo, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm));

                        if (entradasEK != null)
                        {
                            var entradas = (List<UbicacionDetalleDTO>)entradasEK.ToObject<List<UbicacionDetalleDTO>>();

                            if (salidasEK != null)
                            {
                                var salidas = (List<UbicacionDetalleDTO>)salidasEK.ToObject<List<UbicacionDetalleDTO>>();

                                foreach (var ent in entradas)
                                {
                                    var salida = salidas.FirstOrDefault(x =>
                                            x.insumoDesc == ent.insumoDesc &&
                                            x.area_alm == ent.area_alm &&
                                            x.lado_alm == ent.lado_alm &&
                                            x.estante_alm == ent.estante_alm &&
                                            x.nivel_alm == ent.nivel_alm
                                        );

                                    if (salida != null)
                                    {
                                        ent.cantidad = ent.cantidad - Convert.ToDecimal(salida.cantidad, CultureInfo.InvariantCulture);
                                    }
                                }
                            }

                            var existenciasInsumo = entradas.Sum(x => x.cantidad);
                            var salidaTotalPorInsumo = movimiento.detalle.Where(x =>
                                x.insumo == det.insumo &&
                                x.area_alm == det.area_alm &&
                                x.lado_alm == det.lado_alm &&
                                x.estante_alm == det.estante_alm &&
                                x.nivel_alm == det.nivel_alm).Sum(x => x.cantidad);

                            if (existenciasInsumo < salidaTotalPorInsumo)
                            {
                                var ubicacion = det.area_alm + "-" + det.lado_alm + "-" + det.estante_alm + "-" + det.nivel_alm;

                                throw new Exception("No se guardó la información. La cantidad solicitada del insumo \"" + det.insumo + "\" sobrepasa las existencias (" + existenciasInsumo + ") en la ubicación \"" + ubicacion + "\".");
                            }
                        }
                        else
                        {
                            var ubicacion = det.area_alm + "-" + det.lado_alm + "-" + det.estante_alm + "-" + det.nivel_alm;

                            throw new Exception("No se guardó la información. No hay existencias para el insumo \"" + det.insumo + "\" en la ubicación \"" + ubicacion + "\".");
                        }
                    }
                    #endregion
                }

                #region Validación Almacén Activo
                var almacenEK = _contextEnkontrol.Select<dynamic>(getEnkontrolEnumADM(),
                    new OdbcConsultaDTO()
                    {
                        consulta = @"SELECT * FROM si_almacen WHERE almacen = ?",
                        parametros = new List<OdbcParameterDTO>() {
                                        new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = movimiento.almacen }
                                    }
                    }
                );

                if (almacenEK.Count() == 0)
                {
                    throw new Exception("No se encuentra la información del almacén.");
                }

                if ((string)almacenEK[0].bit_mp != "S")
                {
                    throw new Exception("El almacén no está activo.");
                }
                #endregion

                //#region Validación Permisos Familias
                //if (vSesiones.sesionEmpresaActual == 2)
                //{
                //    var permisosFamilias = getPermisosFamilia(movimiento.cc);

                //    if (permisosFamilias.Count > 0)
                //    {
                //        if (!permisosFamilias.Any(x => x.familia == "*"))
                //        {
                //            var familias = movimiento.detalle.Select(x => x.insumo.ToString().Substring(0, 3)).ToList();

                //            foreach (var fam in familias)
                //            {
                //                if (!permisosFamilias.Select(x => x.familia).Contains(fam))
                //                {
                //                    throw new Exception(
                //                        string.Format(@"Bloqueo de familia de insumo '{0}' para el centro de costo '{1}'. No se puede proceder con la salida.", fam, movimiento.cc)
                //                    );
                //                }
                //            }
                //        }
                //    }
                //}
                //#endregion

                using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                {
                    using (var con = checkConexionProductivo())
                    {
                        using (var trans = con.BeginTransaction())
                        {
                            try
                            {
                                tblAlm_Movimientos nuevaSalida = new tblAlm_Movimientos();

                                var ultimoMovimientoEK = consultaCheckProductivo(
                                    string.Format(@"SELECT 
                                                    TOP 1 numero 
                                                FROM si_movimientos 
                                                WHERE almacen = {0} AND tipo_mov = {1} 
                                                ORDER BY numero DESC", movimiento.almacen, 55)
                                );

                                var nuevoNumero = 0;

                                if (ultimoMovimientoEK != null)
                                {
                                    nuevoNumero = ((List<SurtidoDetDTO>)ultimoMovimientoEK.ToObject<List<SurtidoDetDTO>>())[0].numero;
                                }

                                nuevaSalida = new tblAlm_Movimientos
                                {
                                    almacen = movimiento.almacen,
                                    tipo_mov = 55,
                                    numero = nuevoNumero + 1,
                                    cc = movimiento.cc.ToUpper(),
                                    compania = 1,
                                    periodo = DateTime.Now.Month,
                                    ano = DateTime.Now.Year,
                                    orden_ct = 0,
                                    frente = 0,
                                    fecha = DateTime.Now.Date,
                                    proveedor = 0,
                                    total = movimiento.total,
                                    estatus = "A",
                                    transferida = "N",
                                    alm_destino = 0,
                                    cc_destino = "",
                                    comentarios = movimiento.comentarios,
                                    tipo_trasp = "C",
                                    tipo_cambio = 1,
                                    estatusHabilitado = true,
                                    numeroReq = 0
                                };

                                _context.tblAlm_Movimientos.Add(nuevaSalida);
                                _context.SaveChanges();

                                var partidaContador = 1;

                                foreach (var det in movimiento.detalle)
                                {
                                    var partidaMovimiento = partidaContador++;

                                    var nuevaSalidaDet = new tblAlm_MovimientosDet
                                    {
                                        almacen = nuevaSalida.almacen,
                                        tipo_mov = 55,
                                        numero = nuevoNumero + 1,
                                        partida = partidaMovimiento,
                                        insumo = det.insumo,
                                        comentarios = det.comentarios,
                                        area = det.area ?? 0,
                                        cuenta = det.cuenta ?? 0,
                                        cantidad = det.cantidad,
                                        precio = det.precio,
                                        importe = det.importe,
                                        id_resguardo = 0,
                                        area_alm = det.area_alm ?? "",
                                        lado_alm = det.lado_alm ?? "",
                                        estante_alm = det.estante_alm ?? "",
                                        nivel_alm = det.nivel_alm ?? "",
                                        transporte = "",
                                        estatusHabilitado = true
                                    };

                                    _context.tblAlm_MovimientosDet.Add(nuevaSalidaDet);
                                    _context.SaveChanges();
                                }

                                if (nuevaSalida.total <= 0)
                                {
                                    throw new Exception("El total no puede ser igual o menor a cero.");
                                }

                                var count = 0;

                                var consulta = @"INSERT INTO si_movimientos 
                                                (almacen, tipo_mov, numero, cc, compania, periodo, ano, orden_ct, frente, fecha, proveedor, total, estatus, 
                                                transferida, poliza, empleado, alm_destino, cc_destino, comentarios, tipo_trasp, numero_destino, tp, year_poliza, 
                                                mes_poliza, tipo_cambio, hora, fecha_modifica, empleado_modifica, destajista, obra, id_residente, factura, sector_id, 
                                                tc_cc, paquete, tipo_cargo, cargo_destajista, cargo_id_residente, embarque, orden_prod, folio_traspaso, bit_sin_ubicacion) 
                                                VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                using (var cmd = new OdbcCommand(consulta))
                                {
                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@almacen", OdbcType.Numeric).Value = nuevaSalida.almacen;
                                    parameters.Add("@tipo_mov", OdbcType.Numeric).Value = nuevaSalida.tipo_mov;
                                    parameters.Add("@numero", OdbcType.Numeric).Value = nuevaSalida.numero;
                                    parameters.Add("@cc", OdbcType.Char).Value = nuevaSalida.cc ?? "";
                                    parameters.Add("@compania", OdbcType.Numeric).Value = nuevaSalida.compania;
                                    parameters.Add("@periodo", OdbcType.Numeric).Value = nuevaSalida.periodo;
                                    parameters.Add("@ano", OdbcType.Numeric).Value = nuevaSalida.ano;
                                    parameters.Add("@orden_ct", OdbcType.Numeric).Value = nuevaSalida.orden_ct;
                                    parameters.Add("@frente", OdbcType.Numeric).Value = nuevaSalida.frente;
                                    parameters.Add("@fecha", OdbcType.Date).Value = nuevaSalida.fecha.Date;
                                    parameters.Add("@proveedor", OdbcType.Numeric).Value = nuevaSalida.proveedor;
                                    parameters.Add("@total", OdbcType.Numeric).Value = nuevaSalida.total;
                                    parameters.Add("@estatus", OdbcType.Char).Value = nuevaSalida.estatus ?? "";
                                    parameters.Add("@transferida", OdbcType.Char).Value = nuevaSalida.transferida ?? "";
                                    parameters.Add("@poliza", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@empleado", OdbcType.Numeric).Value = empleado;
                                    parameters.Add("@alm_destino", OdbcType.Numeric).Value = nuevaSalida.alm_destino;
                                    parameters.Add("@cc_destino", OdbcType.Char).Value = nuevaSalida.cc_destino ?? "";
                                    parameters.Add("@comentarios", OdbcType.Char).Value = nuevaSalida.comentarios ?? "";
                                    parameters.Add("@tipo_trasp", OdbcType.Char).Value = nuevaSalida.tipo_trasp ?? "";
                                    parameters.Add("@numero_destino", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@tp", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@year_poliza", OdbcType.Numeric).Value = DateTime.Now.Year;
                                    parameters.Add("@mes_poliza", OdbcType.Numeric).Value = DateTime.Now.Month;
                                    parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = nuevaSalida.tipo_cambio;
                                    parameters.Add("@hora", OdbcType.Time).Value = DateTime.Now.TimeOfDay;
                                    parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                    parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = empleado;
                                    parameters.Add("@destajista", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@factura", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@tc_cc", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@paquete", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@tipo_cargo", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@cargo_Destajista", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@cargo_id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@embarque", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@orden_prod", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@folio_traspaso", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@bit_sin_ubicacion", OdbcType.Numeric).Value = 0;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;

                                    count += cmd.ExecuteNonQuery();
                                }

                                var ccDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM cc WHERE cc = '{0}' AND st_ppto != 'T'", movimiento.cc));
                                var ccDesc = (string)(((List<dynamic>)ccDescEK.ToObject<List<dynamic>>())[0].descripcion);
                                var almacenDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", nuevaSalida.almacen));
                                var almacenDesc = (string)(((List<dynamic>)almacenDescEK.ToObject<List<dynamic>>())[0].descripcion);

                                foreach (var salDet in movimiento.detalle)
                                {
                                    var insumoDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM insumos WHERE insumo = {0}", salDet.insumo));
                                    var insumoDesc = (string)(((List<dynamic>)insumoDescEK.ToObject<List<dynamic>>())[0].descripcion);
                                    var importe = salDet.cantidad * salDet.precio;

                                    if (salDet.precio <= 0 || importe <= 0)
                                    {
                                        if (!movimientoMasivo)
                                        {
                                            throw new Exception("El precio y el importe no pueden ser igual o menor a cero.");
                                        }
                                        else
                                        {
                                            continue;
                                        }
                                    }

                                    var consultaDet = @"INSERT INTO si_movimientos_det 
                                         (almacen, tipo_mov, numero, partida, insumo, comentarios, area, cuenta, cantidad, precio, importe, 
                                         partida_oc, costo_prom, obra, manzana_ini, lote_ini, interior_ini, manzana_fin, lote_fin, interior_fin, 
                                         remision, sector_id, id_resguardo, area_alm, lado_alm, estante_alm, nivel_alm, fecha_fisico) 
                                         VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                    using (var cmd = new OdbcCommand(consultaDet))
                                    {
                                        OdbcParameterCollection parameters = cmd.Parameters;

                                        parameters.Add("@almacen", OdbcType.Numeric).Value = salDet.almacen;
                                        parameters.Add("@tipo_mov", OdbcType.Numeric).Value = salDet.tipo_mov;
                                        parameters.Add("@numero", OdbcType.Numeric).Value = nuevoNumero + 1;
                                        parameters.Add("@partida", OdbcType.Numeric).Value = salDet.partida;
                                        parameters.Add("@insumo", OdbcType.Numeric).Value = salDet.insumo;
                                        parameters.Add("@comentarios", OdbcType.Char).Value = salDet.comentarios ?? "";
                                        parameters.Add("@area", OdbcType.Numeric).Value = salDet.area ?? 0;
                                        parameters.Add("@cuenta", OdbcType.Numeric).Value = salDet.cuenta ?? 0;
                                        parameters.Add("@cantidad", OdbcType.Numeric).Value = salDet.cantidad;
                                        parameters.Add("@precio", OdbcType.Numeric).Value = salDet.precio;
                                        parameters.Add("@importe", OdbcType.Numeric).Value = importe;
                                        parameters.Add("@partida_oc", OdbcType.Numeric).Value = salDet.partida_oc ?? 0;
                                        parameters.Add("@costo_prom", OdbcType.Numeric).Value = salDet.precio;
                                        parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@manzana_ini", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@lote_ini", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@interior_ini", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@manzana_fin", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@lote_fin", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@interior_fin", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@remision", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@id_resguardo", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@area_alm", OdbcType.Char).Value = salDet.area_alm ?? "";
                                        parameters.Add("@lado_alm", OdbcType.Char).Value = salDet.lado_alm ?? "";
                                        parameters.Add("@estante_alm", OdbcType.Char).Value = salDet.estante_alm ?? "";
                                        parameters.Add("@nivel_alm", OdbcType.Char).Value = salDet.nivel_alm ?? "";
                                        parameters.Add("@fecha_fisico", OdbcType.Date).Value = DBNull.Value;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;

                                        count += cmd.ExecuteNonQuery();

                                        movSalidas.Add(new salidasAlmacenDTO
                                        {
                                            centroCosto = ccDesc,
                                            folioSalida = (nuevoNumero + 1).ToString(),
                                            almacen = almacenDesc,
                                            fechaSalida = nuevaSalida.fecha.Date,
                                            partida = salDet.partida,
                                            insumo = salDet.insumo + "-" + insumoDesc ?? "",
                                            areaCuenta = (salDet.area ?? 0) + "-" + (salDet.cuenta ?? 0),
                                            referencia = "",
                                            remision = "",
                                            cantidad = salDet.cantidad,
                                            precio = salDet.precio,
                                            importe = salDet.cantidad * salDet.precio,
                                            comentarios = salDet.comentarios != null ? (string)salDet.comentarios : "",
                                            comentariosGenerales = movimiento.comentarios != null ? (string)movimiento.comentarios : "",
                                            ordenCompra = nuevaSalida.orden_ct.ToString(),
                                            proveedor = "",
                                            direccion = "",
                                            ciudad = "",
                                            telefonos = "",

                                            area_alm = salDet.area_alm ?? "",
                                            lado_alm = salDet.lado_alm ?? "",
                                            estante_alm = salDet.estante_alm ?? "",
                                            nivel_alm = salDet.nivel_alm ?? ""
                                        });
                                    }

                                    #region Actualizar Tablas Acumula
                                    var objAcumula = new MovimientoDetalleEnkontrolDTO
                                    {
                                        insumo = salDet.insumo,
                                        cantidad = salDet.cantidad,
                                        precio = salDet.precio,
                                        tipo_mov = salDet.tipo_mov,
                                        costo_prom = 0
                                    };

                                    actualizarAcumula(nuevaSalida.almacen, nuevaSalida.cc, objAcumula, dbSigoplanTransaction, trans);
                                    #endregion
                                }

                                trans.Commit();
                                dbSigoplanTransaction.Commit();
                            }
                            catch (Exception e)
                            {
                                trans.Rollback();
                                dbSigoplanTransaction.Rollback();

                                LogError(12, 0, "AlmacenController", "guardarSalidaInventarioFisico", e, AccionEnum.AGREGAR, 0, movimiento);

                                throw new Exception(e.Message);
                            }
                        }
                    }
                }
                #endregion
            }

            return movSalidas;
        }

        public List<salidasAlmacenDTO> ImprimirMovimientoSalidaInventarioFisico(int almacen, int numero)
        {
            List<salidasAlmacenDTO> movSalidas = new List<salidasAlmacenDTO>();
            if ((MainContextEnum)vSesiones.sesionEmpresaActual != MainContextEnum.PERU)
            {
                #region RESTO EMPRESAS

                var movimientoEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_movimientos WHERE almacen = {0} AND tipo_mov = 55 AND numero = {1}", almacen, numero));

                if (movimientoEK != null)
                {
                    var movimiento = ((List<dynamic>)movimientoEK.ToObject<List<dynamic>>())[0];
                    var movimientoDetalleEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_movimientos_det WHERE almacen = {0} AND tipo_mov = 55 AND numero = {1}", almacen, numero));

                    if (movimientoDetalleEK != null)
                    {
                        var movimientoDetalle = (List<dynamic>)movimientoDetalleEK.ToObject<List<dynamic>>();

                        var ccDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM cc WHERE cc = '{0}' AND st_ppto != 'T'", (string)movimiento.cc));
                        var ccDesc = (string)(((List<dynamic>)ccDescEK.ToObject<List<dynamic>>())[0].descripcion);
                        var almacenDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", (int)movimiento.almacen));
                        var almacenDesc = (string)(((List<dynamic>)almacenDescEK.ToObject<List<dynamic>>())[0].descripcion);

                        foreach (var salDet in movimientoDetalle)
                        {
                            var insumoDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM insumos WHERE insumo = {0}", (int)salDet.insumo));
                            var insumoDesc = (string)(((List<dynamic>)insumoDescEK.ToObject<List<dynamic>>())[0].descripcion);
                            var area = salDet.area != null ? (int)salDet.area : 0;
                            var cuenta = salDet.cuenta != null ? (int)salDet.cuenta : 0;
                            var cantidad = Convert.ToDecimal(salDet.cantidad, CultureInfo.InvariantCulture);
                            var precio = Convert.ToDecimal(salDet.precio, CultureInfo.InvariantCulture);
                            var area_alm = salDet.area_alm != null ? (string)salDet.area_alm : "";
                            var lado_alm = salDet.lado_alm != null ? (string)salDet.lado_alm : ""; ;
                            var estante_alm = salDet.estante_alm != null ? (string)salDet.estante_alm : ""; ;
                            var nivel_alm = salDet.nivel_alm != null ? (string)salDet.nivel_alm : ""; ;

                            movSalidas.Add(new salidasAlmacenDTO
                            {
                                centroCosto = ccDesc,
                                folioSalida = ((int)salDet.numero).ToString(),
                                almacen = almacenDesc,
                                fechaSalida = movimiento.fecha,
                                partida = (int)salDet.partida,
                                insumo = (int)salDet.insumo + "-" + insumoDesc ?? "",
                                areaCuenta = area + "-" + cuenta,
                                referencia = "",
                                remision = "",
                                cantidad = cantidad,
                                precio = precio,
                                importe = cantidad * precio,
                                comentarios = salDet.comentarios != null ? (string)salDet.comentarios : "",
                                comentariosGenerales = movimiento.comentarios != null ? (string)movimiento.comentarios : "",
                                ordenCompra = "0",
                                proveedor = "",
                                direccion = "",
                                ciudad = "",
                                telefonos = "",

                                area_alm = area_alm,
                                lado_alm = lado_alm,
                                estante_alm = estante_alm,
                                nivel_alm = nivel_alm
                            });
                        }
                    }
                    else
                    {
                        throw new Exception("No se encuentra el detalle del movimiento.");
                    }
                }
                else
                {
                    throw new Exception("No se encuentra el movimiento.");
                }
                #endregion
            }
            else
            {
                #region PERU
                var movimiento = _context.Select<MovimientoEnkontrolDTO>(new DapperDTO()
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = string.Format(@"
                                SELECT 
                                    mov.almacen, 
                                    --alm.descripcion AS almacenDesc, 
                                    mov.tipo_mov, 
                                    mov.numero, 
                                    mov.cc, 
                                    c.ccDescripcion AS ccDesc, 
                                    mov.orden_ct, 
                                    mov.fecha, 
                                    mov.total, 
                                    mov.estatus, 
                                    mov.transferida, 
                                    mov.idUsuarioCreacion as empleado, 
									(tUsr.apellidoPaterno + ' ' + tUsr.apellidoPaterno + ' ' + tUsr.nombre) as empleadoDesc,
                                    mov.comentarios
                                FROM tblAlm_Movimientos mov 
                                    INNER JOIN tblC_Nom_CatalogoCC c ON mov.cc = c.cc 
									LEFT JOIN tblP_Usuario as tUsr ON mov.idUsuarioCreacion = tUsr.id
                                WHERE mov.almacen = {0} AND mov.tipo_mov = 55 AND mov.numero = {1}", almacen, numero),

                }).FirstOrDefault();

                if (movimiento != null)
                {
                    #region ALMACEN STARSOFT
                    string almacenStarsoft = "";

                    if (almacen > 9)
                    {
                        almacenStarsoft = almacen.ToString();
                    }
                    else
                    {
                        almacenStarsoft = "0" + almacen;
                    }

                    using (var dbStarsoft = new MainContextPeruStarSoft003BDCOMUN())
                    {
                        var objAlmacen = dbStarsoft.TABALM.FirstOrDefault();

                        if (objAlmacen != null)
                        {
                            almacenStarsoft = objAlmacen.TADESCRI;
                        }
                    }

                    movimiento.almacenDesc = almacenStarsoft;
                    #endregion

                    //var salidasInventarioFisicoDetalle = new List<MovimientoDetalleEnkontrolDTO>();
                    var salidasInventario = _context.tblAlm_MovimientosDet.Where(e => e.tipo_mov == 55 && e.numero == numero && e.almacen == almacen);

                    //var entradas = new List<entradasAlmacenDTO>();

                    foreach (var det in salidasInventario)
                    {

                        string descInsumoPeru = "";
                        string descUnidad = "";
                        using (var dbStarsoft = new MainContextPeruStarSoft003BDCOMUN())
                        {
                            var objInsumo = dbStarsoft.MAEART.FirstOrDefault(e => e.ACODIGO == det.PERU_insumo);

                            if (objInsumo != null)
                            {
                                descUnidad = objInsumo.AUNIDAD;
                                descInsumoPeru = objInsumo.ADESCRI;
                            }
                        }

                        var area = det.area != null ? (int)det.area : 0;
                        var cuenta = det.cuenta != null ? (int)det.cuenta : 0;

                        movSalidas.Add(new salidasAlmacenDTO
                        {
                            centroCosto = (string)movimiento.cc + "-" + movimiento.ccDesc,
                            folioSalida = numero.ToString(),
                            almacen = (int)movimiento.almacen + "-" + movimiento.almacenDesc,
                            fechaEntrada = (DateTime)movimiento.fecha,
                            partida = (int)det.partida,
                            insumo = det.PERU_insumo + "-" + descInsumoPeru ?? "",
                            areaCuenta = "-",
                            referencia = "",
                            remision = "",
                            cantidad = Convert.ToDecimal(det.cantidad, CultureInfo.InvariantCulture),
                            precio = Convert.ToDecimal(det.precio, CultureInfo.InvariantCulture),
                            importe = Convert.ToDecimal(det.cantidad, CultureInfo.InvariantCulture) * Convert.ToDecimal(det.precio, CultureInfo.InvariantCulture),
                            comentarios = movimiento.comentarios != null ? (string)movimiento.comentarios : "",
                            ordenCompra = ((int)movimiento.orden_ct).ToString(),
                            proveedor = "",
                            direccion = "",
                            ciudad = "",
                            telefonos = "",
                            fechaSalida = (DateTime)movimiento.fecha,
                            area_alm = det.area_alm != null ? (string)det.area_alm : "",
                            lado_alm = det.lado_alm != null ? (string)det.lado_alm : "",
                            estante_alm = det.estante_alm != null ? (string)det.estante_alm : "",
                            nivel_alm = det.nivel_alm != null ? (string)det.nivel_alm : "",
                            recibio = "",
                            PERU_insumo = det.PERU_insumo
                        });
                    }

                    return movSalidas;
                }
                else
                {
                    return null;
                }
                #endregion
            }

            return movSalidas;
        }

        public Dictionary<string, object> CargarExcelSalidaFisico(HttpFileCollectionBase archivos)
        {
            Dictionary<string, object> result = new Dictionary<string, object>();
            List<string> listaFolios = new List<string>();

            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
            {
                #region PERU
                //using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                //{
                //    using (var con = checkConexionProductivo())
                //    {
                //        using (var trans = con.BeginTransaction())
                //        {
                try
                {
                    if (archivos.Count == 0)
                    {
                        throw new Exception("No se cargaron archivos.");
                    }

                    for (int i = 0; i < archivos.Count; i++)
                    {
                        HttpPostedFileBase archivo = archivos[i];

                        List<List<string>> tabla = new List<List<string>>();

                        #region Convertir Archivo a Arreglo de bytes.
                        byte[] data;

                        using (Stream inputStream = archivo.InputStream)
                        {
                            MemoryStream memoryStream = inputStream as MemoryStream;

                            if (memoryStream == null)
                            {
                                memoryStream = new MemoryStream();
                                inputStream.CopyTo(memoryStream);
                            }

                            data = memoryStream.ToArray();
                        }
                        #endregion

                        #region Leer Arreglo de bytes.
                        using (MemoryStream stream = new MemoryStream(data))
                        using (ExcelPackage excelPackage = new ExcelPackage(stream))
                        {
                            //loop all worksheets
                            foreach (ExcelWorksheet worksheet in excelPackage.Workbook.Worksheets)
                            {
                                //loop all rows
                                for (int x = worksheet.Dimension.Start.Row; x <= worksheet.Dimension.End.Row; x++)
                                {
                                    List<string> fila = new List<string>();

                                    //loop all columns in a row
                                    for (int y = worksheet.Dimension.Start.Column; y <= worksheet.Dimension.End.Column; y++)
                                    {
                                        //add the cell data to the List
                                        if (worksheet.Cells[x, y].Value != null)
                                        {
                                            fila.Add(worksheet.Cells[x, y].Value.ToString());
                                        }
                                        else
                                        {
                                            fila.Add("");
                                        }
                                    }

                                    if (x > 1 && fila[0] != "")
                                    {
                                        tabla.Add(fila);
                                    }
                                }
                            }
                        }
                        #endregion

                        var listaTablasSeparadas = tabla.ChunkBy<List<string>>(200);

                        foreach (var tablaChunk in listaTablasSeparadas)
                        {
                            List<MovimientoDetalleEnkontrolDTO> detalle = new List<MovimientoDetalleEnkontrolDTO>();

                            var contadorPartida = 1;
                            var total = 0m;

                            foreach (var fila in tablaChunk)
                            {
                                int almacen = Int32.Parse(fila[0]);
                                string comentarios = fila[2];
                                int insumo = Int32.Parse(fila[3]);
                                //decimal costoPromedio = getCostoPromedioKardex(almacen, insumo); //PENDIENTE COSTO PROMEDIO
                                decimal costoPromedio = 1M;
                                decimal cantidad = Convert.ToDecimal(fila[4], CultureInfo.InvariantCulture);
                                decimal importe = cantidad * costoPromedio;
                                string[] ubicacion = fila[5].Split(' ');
                                string area_alm = ubicacion[0];
                                string lado_alm = ubicacion[1];
                                string estante_alm = ubicacion[2];
                                string nivel_alm = ubicacion[3];
                                string PERU_insumo = fila[3];

                                detalle.Add(new MovimientoDetalleEnkontrolDTO
                                {
                                    almacen = almacen,
                                    tipo_mov = 55,
                                    partida = contadorPartida,
                                    insumo = insumo,
                                    comentarios = comentarios,
                                    area = 0,
                                    cuenta = 0,
                                    cantidad = cantidad,
                                    precio = costoPromedio,
                                    importe = importe,
                                    area_alm = area_alm,
                                    lado_alm = lado_alm,
                                    estante_alm = estante_alm,
                                    nivel_alm = nivel_alm,
                                    PERU_insumo = PERU_insumo
                                });

                                contadorPartida++;

                                total += importe;
                            }

                            MovimientoEnkontrolDTO movimiento = new MovimientoEnkontrolDTO
                            {
                                almacen = Int32.Parse(tablaChunk[0][0]),
                                tipo_mov = 55,
                                cc = tablaChunk[0][1],
                                total = total,
                                comentarios = tablaChunk[0][2],
                                detalle = detalle
                            };

                            var resultado = guardarSalidaInventarioFisico(movimiento, true);

                            listaFolios.Add(resultado[0].folioSalida);
                        }
                    }

                    //trans.Commit();
                    //dbSigoplanTransaction.Commit();

                    result.Add("listaFolios", listaFolios);
                    result.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    //trans.Rollback();
                    //dbSigoplanTransaction.Rollback();

                    LogError(0, 0, "AlmacenController", "CargarExcelSalidaFisico", e, AccionEnum.AGREGAR, 0, null);
                    result.Add(MESSAGE, e.Message);
                    result.Add(SUCCESS, false);
                }
                #endregion
            }
            else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
            {
                #region COLOMBIA
                try
                {
                    if (archivos.Count == 0)
                        throw new Exception("No se cargaron archivos.");

                    for (int i = 0; i < archivos.Count; i++)
                    {
                        HttpPostedFileBase archivo = archivos[i];
                        List<List<string>> tabla = new List<List<string>>();

                        #region Convertir Archivo a Arreglo de bytes.
                        byte[] data;

                        using (Stream inputStream = archivo.InputStream)
                        {
                            MemoryStream memoryStream = inputStream as MemoryStream;
                            if (memoryStream == null)
                            {
                                memoryStream = new MemoryStream();
                                inputStream.CopyTo(memoryStream);
                            }
                            data = memoryStream.ToArray();
                        }
                        #endregion

                        #region Leer Arreglo de bytes.
                        using (MemoryStream stream = new MemoryStream(data))
                        using (ExcelPackage excelPackage = new ExcelPackage(stream))
                        {
                            //loop all worksheets
                            foreach (ExcelWorksheet worksheet in excelPackage.Workbook.Worksheets)
                            {
                                //loop all rows
                                for (int x = worksheet.Dimension.Start.Row; x <= worksheet.Dimension.End.Row; x++)
                                {
                                    List<string> fila = new List<string>();

                                    //loop all columns in a row
                                    for (int y = worksheet.Dimension.Start.Column; y <= worksheet.Dimension.End.Column; y++)
                                    {
                                        //add the cell data to the List
                                        if (worksheet.Cells[x, y].Value != null)
                                            fila.Add(worksheet.Cells[x, y].Value.ToString());
                                        else
                                            fila.Add("");
                                    }

                                    if (x > 1 && fila[0] != "")
                                        tabla.Add(fila);
                                }
                            }
                        }
                        #endregion

                        var listaTablasSeparadas = tabla.ChunkBy<List<string>>(200);

                        foreach (var tablaChunk in listaTablasSeparadas)
                        {
                            List<MovimientoDetalleEnkontrolDTO> detalle = new List<MovimientoDetalleEnkontrolDTO>();

                            var contadorPartida = 1;
                            var total = 0m;

                            foreach (var fila in tablaChunk)
                            {
                                int almacen = Int32.Parse(fila[0]);
                                string comentarios = fila[2];
                                int insumo = Int32.Parse(fila[3]);
                                decimal costoPromedio = getCostoPromedioKardex(almacen, insumo);
#if DEBUG
                                costoPromedio = costoPromedio == 0 ? 1 : costoPromedio;
#endif
                                decimal cantidad = Convert.ToDecimal(fila[4], CultureInfo.InvariantCulture);
                                decimal importe = cantidad * costoPromedio;
                                string[] ubicacion = fila[5].Split(' ');
                                string area_alm = ubicacion[0];
                                string lado_alm = ubicacion[1];
                                string estante_alm = ubicacion[2];
                                string nivel_alm = ubicacion[3];

                                detalle.Add(new MovimientoDetalleEnkontrolDTO
                                {
                                    almacen = almacen,
                                    tipo_mov = 55,
                                    partida = contadorPartida,
                                    insumo = insumo,
                                    comentarios = comentarios,
                                    area = 0,
                                    cuenta = 0,
                                    cantidad = cantidad,
                                    precio = costoPromedio,
                                    importe = importe,
                                    area_alm = area_alm,
                                    lado_alm = lado_alm,
                                    estante_alm = estante_alm,
                                    nivel_alm = nivel_alm
                                });
                                contadorPartida++;
                                total += importe;
                            }

                            MovimientoEnkontrolDTO movimiento = new MovimientoEnkontrolDTO
                            {
                                almacen = Int32.Parse(tablaChunk[0][0]),
                                tipo_mov = 55,
                                cc = tablaChunk[0][1],
                                total = total,
                                comentarios = tablaChunk[0][2],
                                detalle = detalle
                            };

                            var resultado = guardarSalidaInventarioFisico(movimiento, true);

                            listaFolios.Add(resultado[0].folioSalida);
                        }
                    }

                    //trans.Commit();
                    //dbSigoplanTransaction.Commit();

                    result.Add("listaFolios", listaFolios);
                    result.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    //trans.Rollback();
                    //dbSigoplanTransaction.Rollback();

                    LogError(0, 0, "AlmacenController", "CargarExcelSalidaFisico", e, AccionEnum.AGREGAR, 0, null);
                    result.Add(MESSAGE, e.Message);
                    result.Add(SUCCESS, false);
                }
                #endregion
            }
            else
            {
                #region RESTO EMPRESAS
                //using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                //{
                //    using (var con = checkConexionProductivo())
                //    {
                //        using (var trans = con.BeginTransaction())
                //        {
                try
                {
                    if (archivos.Count == 0)
                    {
                        throw new Exception("No se cargaron archivos.");
                    }

                    for (int i = 0; i < archivos.Count; i++)
                    {
                        HttpPostedFileBase archivo = archivos[i];

                        List<List<string>> tabla = new List<List<string>>();

                        #region Convertir Archivo a Arreglo de bytes.
                        byte[] data;

                        using (Stream inputStream = archivo.InputStream)
                        {
                            MemoryStream memoryStream = inputStream as MemoryStream;

                            if (memoryStream == null)
                            {
                                memoryStream = new MemoryStream();
                                inputStream.CopyTo(memoryStream);
                            }

                            data = memoryStream.ToArray();
                        }
                        #endregion

                        #region Leer Arreglo de bytes.
                        using (MemoryStream stream = new MemoryStream(data))
                        using (ExcelPackage excelPackage = new ExcelPackage(stream))
                        {
                            //loop all worksheets
                            foreach (ExcelWorksheet worksheet in excelPackage.Workbook.Worksheets)
                            {
                                //loop all rows
                                for (int x = worksheet.Dimension.Start.Row; x <= worksheet.Dimension.End.Row; x++)
                                {
                                    List<string> fila = new List<string>();

                                    //loop all columns in a row
                                    for (int y = worksheet.Dimension.Start.Column; y <= worksheet.Dimension.End.Column; y++)
                                    {
                                        //add the cell data to the List
                                        if (worksheet.Cells[x, y].Value != null)
                                        {
                                            fila.Add(worksheet.Cells[x, y].Value.ToString());
                                        }
                                        else
                                        {
                                            fila.Add("");
                                        }
                                    }

                                    if (x > 1 && fila[0] != "")
                                    {
                                        tabla.Add(fila);
                                    }
                                }
                            }
                        }
                        #endregion

                        var listaTablasSeparadas = tabla.ChunkBy<List<string>>(200);

                        foreach (var tablaChunk in listaTablasSeparadas)
                        {
                            List<MovimientoDetalleEnkontrolDTO> detalle = new List<MovimientoDetalleEnkontrolDTO>();

                            var contadorPartida = 1;
                            var total = 0m;

                            foreach (var fila in tablaChunk)
                            {
                                int almacen = Int32.Parse(fila[0]);
                                string comentarios = fila[2];
                                int insumo = Int32.Parse(fila[3]);
                                decimal costoPromedio = getCostoPromedioKardex(almacen, insumo);
                                decimal cantidad = Convert.ToDecimal(fila[4], CultureInfo.InvariantCulture);
                                decimal importe = cantidad * costoPromedio;
                                string[] ubicacion = fila[5].Split(' ');
                                string area_alm = ubicacion[0];
                                string lado_alm = ubicacion[1];
                                string estante_alm = ubicacion[2];
                                string nivel_alm = ubicacion[3];

                                detalle.Add(new MovimientoDetalleEnkontrolDTO
                                {
                                    almacen = almacen,
                                    tipo_mov = 55,
                                    partida = contadorPartida,
                                    insumo = insumo,
                                    comentarios = comentarios,
                                    area = 0,
                                    cuenta = 0,
                                    cantidad = cantidad,
                                    precio = costoPromedio,
                                    importe = importe,
                                    area_alm = area_alm,
                                    lado_alm = lado_alm,
                                    estante_alm = estante_alm,
                                    nivel_alm = nivel_alm
                                });

                                contadorPartida++;

                                total += importe;
                            }

                            MovimientoEnkontrolDTO movimiento = new MovimientoEnkontrolDTO
                            {
                                almacen = Int32.Parse(tablaChunk[0][0]),
                                tipo_mov = 55,
                                cc = tablaChunk[0][1],
                                total = total,
                                comentarios = tablaChunk[0][2],
                                detalle = detalle
                            };

                            var resultado = guardarSalidaInventarioFisico(movimiento, true);

                            listaFolios.Add(resultado[0].folioSalida);
                        }
                    }

                    //trans.Commit();
                    //dbSigoplanTransaction.Commit();

                    result.Add("listaFolios", listaFolios);
                    result.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    //trans.Rollback();
                    //dbSigoplanTransaction.Rollback();

                    LogError(0, 0, "AlmacenController", "CargarExcelSalidaFisico", e, AccionEnum.AGREGAR, 0, null);
                    result.Add(MESSAGE, e.Message);
                    result.Add(SUCCESS, false);
                }
                #endregion
            }

            return result;
        }
        #endregion

        #region Salida Por Consumo Sin Origen
        public Dictionary<string, object> getNuevaSalidaConsumo(int almacenID)
        {
            var result = new Dictionary<string, object>();

            try
            {
                if ((MainContextEnum)vSesiones.sesionEmpresaActual != MainContextEnum.PERU)
                {
                    #region RESTO EMPRESAS
                    var almacen = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", almacenID)).ToObject<List<dynamic>>();

                    var ultimaSalidaConsumoEK = consultaCheckProductivo(
                        string.Format(@"SELECT TOP 1 
                                        * 
                                    FROM si_movimientos 
                                    WHERE almacen = {0} AND tipo_mov = 51 ORDER BY numero DESC", almacenID)
                    );

                    var entregoNum = 0;
                    var entregoDesc = "";
                    var relacionUsuarioSIGOPLANEK = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                    if (relacionUsuarioSIGOPLANEK != null)
                    {
                        var empleado = (List<dynamic>)consultaCheckProductivo(
                            string.Format(@"SELECT * FROM empleados WHERE empleado = {0}", relacionUsuarioSIGOPLANEK.empleado)
                        ).ToObject<List<dynamic>>();

                        entregoNum = relacionUsuarioSIGOPLANEK.empleado;
                        entregoDesc = (string)empleado[0].descripcion;
                    }

                    if (ultimaSalidaConsumoEK != null)
                    {
                        var ultimaSalidaConsumo = (List<dynamic>)ultimaSalidaConsumoEK.ToObject<List<dynamic>>();

                        result.Add("almacenDesc", (string)almacen[0].descripcion);
                        result.Add("numeroDisponible", (int)ultimaSalidaConsumo[0].numero + 1);
                        result.Add("entregoNum", entregoNum);
                        result.Add("entregoDesc", entregoDesc);
                        result.Add("fecha", DateTime.Now.Date.ToShortDateString());
                        result.Add(SUCCESS, true);
                    }
                    else
                    {
                        result.Add("almacenDesc", (string)almacen[0].descripcion);
                        result.Add("numeroDisponible", 1);
                        result.Add("entregoNum", entregoNum);
                        result.Add("entregoDesc", entregoDesc);
                        result.Add("fecha", DateTime.Now.Date.ToShortDateString());
                        result.Add(SUCCESS, true);
                    }
                    #endregion
                }
                else
                {
                    #region PERU

                    var almacen = new TABALM();
                    int ultimoFolio = 0;

                    using (var dbStarsoft = new MainContextPeruStarSoft003BDCOMUN())
                    {
                        string almacenStarsoft = "";
                        if (almacenID > 9)
                        {
                            almacenStarsoft = almacenID.ToString();
                        }
                        else
                        {
                            almacenStarsoft = "0" + almacenID;
                        }

                        almacen = dbStarsoft.TABALM.FirstOrDefault(e => e.TAALMA == almacenStarsoft);

                        if (almacenID >= 90)
                        {
                            ultimoFolio = _context.tblAlm_Movimientos.Where(x => x.estatusHabilitado && x.almacen == almacenID && x.tipo_mov > 50).Select(x => x.numero).OrderByDescending(x => x).FirstOrDefault();
                        }
                        else
                        {
                            ultimoFolio = dbStarsoft.MOVALMCAB.ToList().Where(x => Int32.Parse(x.CAALMA) == almacenID && x.CATD == "NS").Select(x => Int32.Parse(x.CANUMDOC)).OrderByDescending(x => x).FirstOrDefault();
                        }
                    }

                    //var ultimaSalidaConsumo = _context.tblAlm_Movimientos.Where(e => e.almacen == almacenID && e.tipo_mov >= 50).OrderByDescending(e => e.id).FirstOrDefault();

                    var entregoNum = 0;
                    var entregoDesc = "";
                    var relacionUsuarioSIGOPLANEK = _context.tblP_Usuario.FirstOrDefault(x => x.id == vSesiones.sesionUsuarioDTO.id);

                    if (relacionUsuarioSIGOPLANEK != null)
                    {
                        entregoNum = relacionUsuarioSIGOPLANEK.id;
                        entregoDesc = relacionUsuarioSIGOPLANEK.apellidoPaterno + " " + relacionUsuarioSIGOPLANEK.apellidoMaterno + " " + relacionUsuarioSIGOPLANEK.nombre;
                    }

                    if (ultimoFolio > 0)
                    {

                        result.Add("almacenDesc", almacen.TADESCRI);
                        result.Add("numeroDisponible", ultimoFolio + 1);
                        result.Add("entregoNum", entregoNum);
                        result.Add("entregoDesc", entregoDesc);
                        result.Add("fecha", DateTime.Now.Date.ToShortDateString());
                        result.Add(SUCCESS, true);
                    }
                    else
                    {
                        result.Add("almacenDesc", almacen.TADESCRI);
                        result.Add("numeroDisponible", 1);
                        result.Add("entregoNum", entregoNum);
                        result.Add("entregoDesc", entregoDesc);
                        result.Add("fecha", DateTime.Now.Date.ToShortDateString());
                        result.Add(SUCCESS, true);
                    }
                    #endregion
                }

            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return result;
        }

        public dynamic getSalidaConsumo(int almacenID, int numero)
        {
            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
            {
                #region COLOMBIA
                var salidaConsumoEK = consultaCheckProductivo(
                string.Format(@"SELECT 
                                    mov.almacen, 
                                    alm.descripcion AS almacenDesc, 
                                    mov.tipo_mov, 
                                    mov.numero, 
                                    mov.cc, 
                                    c.descripcion AS ccDesc, 
                                    mov.orden_ct, 
                                    mov.fecha, 
                                    mov.total, 
                                    mov.estatus, 
                                    mov.transferida, 
                                    mov.empleado, 
                                    emp.descripcion AS empleadoDesc, 
                                    mov.comentarios, 
                                    mov.sector_id, 
                                    mov.proveedor, 
                                    prov.nombre AS proveedorDesc 
                                    FROM DBA.si_movimientos mov 
                                        INNER JOIN DBA.si_almacen alm ON mov.almacen = alm.almacen 
                                        INNER JOIN DBA.cc c ON mov.cc = c.cc 
                                        LEFT JOIN DBA.empleados emp ON mov.empleado = emp.empleado 
                                        LEFT JOIN DBA.sp_proveedores prov ON mov.proveedor = prov.numpro 
                                            WHERE mov.almacen = {0} AND mov.tipo_mov = 51 AND mov.numero = {1}", almacenID, numero));

                if (salidaConsumoEK != null)
                {
                    var salidaConsumo = (List<MovimientoEnkontrolDTO>)salidaConsumoEK.ToObject<List<MovimientoEnkontrolDTO>>();
                    var salidaConsumoDetalle = (List<MovimientoDetalleEnkontrolDTO>)consultaCheckProductivo(
                        string.Format(@"SELECT det.*, i.descripcion AS insumoDesc, i.unidad 
                                                FROM DBA.si_movimientos_det det 
                                                INNER JOIN DBA.insumos i ON det.insumo = i.insumo 
                                                    WHERE det.almacen = {0} AND det.tipo_mov = 51 AND det.numero = {1}", almacenID, numero)
                    ).ToObject<List<MovimientoDetalleEnkontrolDTO>>();

                    salidaConsumo[0].fechaString = ((DateTime)(salidaConsumo[0].fecha)).ToShortDateString();
                    salidaConsumo[0].detalle = salidaConsumoDetalle;

                    foreach (var det in salidaConsumo[0].detalle)
                    {
                        var registroDetalleSIGOPLAN = _context.tblAlm_MovimientosDet.FirstOrDefault(e => e.tipo_mov == 51 && e.numero == numero && e.almacen == almacenID);

                        if (registroDetalleSIGOPLAN != null)
                        {
                            det.noEconomico = registroDetalleSIGOPLAN.noEconomico;
                        }
                    }

                    return salidaConsumo[0];
                }
                else
                    return null;
                #endregion
            }
            else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
            {
                #region PERU
                var salidaConsumo = _context.Select<MovimientoEnkontrolDTO>(new DapperDTO()
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = string.Format(@"
                                SELECT 
                                    mov.almacen, 
                                    --alm.descripcion AS almacenDesc, 
                                    mov.tipo_mov, 
                                    mov.numero, 
                                    mov.cc, 
                                    c.ccDescripcion AS ccDesc, 
                                    mov.orden_ct, 
                                    mov.fecha, 
                                    mov.total, 
                                    mov.estatus, 
                                    mov.transferida, 
                                    mov.idUsuarioCreacion as empleado, 
									(tUsr.apellidoPaterno + ' ' + tUsr.apellidoPaterno + ' ' + tUsr.nombre) as empleadoDesc,
                                    mov.comentarios
                                FROM tblAlm_Movimientos mov 
                                    INNER JOIN tblC_Nom_CatalogoCC c ON mov.cc = c.cc 
									LEFT JOIN tblP_Usuario as tUsr ON mov.idUsuarioCreacion = tUsr.id
                                WHERE mov.estatusHabilitado = 1 AND mov.almacen = {0} AND mov.tipo_mov = 51 AND mov.numero = {1}", almacenID, numero),

                }).FirstOrDefault();

                if (salidaConsumo != null)
                {
                    #region ALMACEN STARSOFT
                    string almacenStarsoft = "";

                    if (almacenID > 9)
                    {
                        almacenStarsoft = almacenID.ToString();
                    }
                    else
                    {
                        almacenStarsoft = "0" + almacenID;
                    }

                    using (var dbStarsoft = new MainContextPeruStarSoft003BDCOMUN())
                    {
                        var objAlmacen = dbStarsoft.TABALM.FirstOrDefault();

                        if (objAlmacen != null)
                        {
                            almacenStarsoft = objAlmacen.TADESCRI;
                        }
                    }

                    salidaConsumo.almacenDesc = almacenStarsoft;
                    #endregion

                    //                    var entradaInventarioFisicoDetalle = (List<MovimientoDetalleEnkontrolDTO>)consultaCheckProductivo(
                    //                        string.Format(@"SELECT 
                    //                                        det.*, 
                    //                                        i.descripcion AS insumoDesc, 
                    //                                        i.unidad 
                    //                                    FROM si_movimientos_det det 
                    //                                        INNER JOIN insumos i ON det.insumo = i.insumo 
                    //                                    WHERE det.almacen = {0} AND det.tipo_mov = 5 AND det.numero = {1}", almacenID, numero)
                    //                    ).ToObject<List<MovimientoDetalleEnkontrolDTO>>();

                    var salidaConsumoDetalle = new List<MovimientoDetalleEnkontrolDTO>();
                    var salidasInventario = _context.tblAlm_MovimientosDet.Where(e => e.tipo_mov == 51 && e.numero == numero && e.almacen == almacenID);

                    foreach (var item in salidasInventario)
                    {
                        //var objInsumo = dbStarsoft.MAEART.FirstOrDefault(e => e.ACODIGO == det.PERU_insumo);

                        string descInsumoPeru = "";
                        string descUnidad = "";
                        using (var dbStarsoft = new MainContextPeruStarSoft003BDCOMUN())
                        {
                            var objInsumo = dbStarsoft.MAEART.FirstOrDefault(e => e.ACODIGO == item.PERU_insumo);

                            if (objInsumo != null)
                            {
                                descUnidad = objInsumo.AUNIDAD;
                                descInsumoPeru = objInsumo.ADESCRI;
                            }
                        }

                        salidaConsumoDetalle.Add(new MovimientoDetalleEnkontrolDTO()
                        {
                            almacen = almacenID,
                            almacenDesc = almacenStarsoft,
                            tipo_mov = item.tipo_mov,
                            numero = item.numero,
                            remision = 0,
                            partida = item.partida,
                            PERU_insumo = item.PERU_insumo,
                            descInsumo = descInsumoPeru,
                            insumoDesc = descInsumoPeru,
                            comentarios = item.comentarios,
                            area = 0,
                            cuenta = 0,
                            areaCuenta = "",
                            cantidad = item.cantidad,
                            precio = item.precio,
                            importe = item.importe,
                            partida_oc = 0,
                            costo_prom = item.precio,
                            sector_id = 0,
                            area_alm = item.area_alm,
                            lado_alm = item.lado_alm,
                            estante_alm = item.estante_alm,
                            nivel_alm = item.nivel_alm,
                            unidad = descUnidad,
                            minimo = 0,
                            existencia = 0,
                            cantidadPendiente = 0,
                            cant_recibida = 0,
                            moneda = 0,
                            monedaDesc = "",
                            minimoDesc = "",
                            solicitadoPendiente = 0,
                            partidaRequisicion = 0,
                            numeroRequisicion = 0,
                            noEconomico = item.noEconomico
                        });
                    }

                    salidaConsumo.fechaString = ((DateTime)(salidaConsumo.fecha)).ToShortDateString();
                    salidaConsumo.detalle = salidaConsumoDetalle;

                    return salidaConsumo;
                }
                else
                {
                    return null;
                }
                #endregion
            }
            else
            {
                #region DEMAS EMPRESAS
                var salidaConsumoEK = consultaCheckProductivo(
                string.Format(@"SELECT 
                                    mov.almacen, 
                                    alm.descripcion AS almacenDesc, 
                                    mov.tipo_mov, 
                                    mov.numero, 
                                    mov.cc, 
                                    c.descripcion AS ccDesc, 
                                    mov.orden_ct, 
                                    mov.fecha, 
                                    mov.total, 
                                    mov.estatus, 
                                    mov.transferida, 
                                    mov.empleado, 
                                    emp.descripcion AS empleadoDesc, 
                                    mov.comentarios, 
                                    mov.sector_id, 
                                    mov.proveedor, 
                                    prov.nombre AS proveedorDesc 
                                FROM si_movimientos mov 
                                    INNER JOIN si_almacen alm ON mov.almacen = alm.almacen 
                                    INNER JOIN cc c ON mov.cc = c.cc 
                                    LEFT JOIN empleados emp ON mov.empleado = emp.empleado 
                                    LEFT JOIN sp_proveedores prov ON mov.proveedor = prov.numpro 
                                WHERE mov.almacen = {0} AND mov.tipo_mov = 51 AND mov.numero = {1}", almacenID, numero));

                if (salidaConsumoEK != null)
                {
                    var salidaConsumo = (List<MovimientoEnkontrolDTO>)salidaConsumoEK.ToObject<List<MovimientoEnkontrolDTO>>();
                    var salidaConsumoDetalle = (List<MovimientoDetalleEnkontrolDTO>)consultaCheckProductivo(
                        string.Format(@"SELECT 
                                        det.*, 
                                        i.descripcion AS insumoDesc, 
                                        i.unidad 
                                    FROM si_movimientos_det det 
                                        INNER JOIN insumos i ON det.insumo = i.insumo 
                                    WHERE det.almacen = {0} AND det.tipo_mov = 51 AND det.numero = {1}", almacenID, numero)
                    ).ToObject<List<MovimientoDetalleEnkontrolDTO>>();

                    salidaConsumo[0].fechaString = ((DateTime)(salidaConsumo[0].fecha)).ToShortDateString();
                    salidaConsumo[0].detalle = salidaConsumoDetalle;

                    return salidaConsumo[0];
                }
                else
                {
                    return null;
                }
                #endregion
            }
        }

        public Dictionary<string, object> guardarSalidaConsumo(MovimientoEnkontrolDTO movimiento)
        {
            Dictionary<string, object> result = new Dictionary<string, object>();
            List<salidasAlmacenDTO> movSalidas = new List<salidasAlmacenDTO>();

            var empleado = 0;
            var usuarioSigoplan = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

            if (usuarioSigoplan != null)
                empleado = usuarioSigoplan.empleado;

            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
            {
                #region COLOMBIA
                using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                {
                    using (var con = checkConexionProductivo())
                    {
                        using (var trans = con.BeginTransaction())
                        {
                            try
                            {
                                #region Validaciones Iniciales
                                #region Validación Almacén Activo
                                var almacenEK = _contextEnkontrol.Select<dynamic>(getEnkontrolEnumADM(),
                                    new OdbcConsultaDTO()
                                    {
                                        consulta = @"SELECT * FROM DBA.si_almacen WHERE almacen = ?",
                                        parametros = new List<OdbcParameterDTO>() {
                                        new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = movimiento.almacen }
                                    }
                                    }
                                );

                                if (almacenEK.Count() == 0)
                                    throw new Exception("No se encuentra la información del almacén.");

                                if ((string)almacenEK[0].bit_mp != "S")
                                    throw new Exception("El almacén no está activo.");
                                #endregion

                                #region Cantidades en cero
                                if (movimiento.detalle.Any(x => x.cantidad <= 0))
                                    throw new Exception("No se puede guardar partidas con cantidades en cero o negativos.");
                                #endregion

                                #region Inventariables
                                var registrosGrupoInsumo = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM DBA.grupos_insumo")).ToObject<List<dynamic>>();

                                foreach (var det in movimiento.detalle)
                                {
                                    var tipo_insumo = Int32.Parse(det.insumo.ToString().Substring(0, 1));
                                    var grupo_insumo = Int32.Parse(det.insumo.ToString().Substring(1, 2));
                                    var registroGrupoInsumo = registrosGrupoInsumo.FirstOrDefault(x => (int)x.tipo_insumo == tipo_insumo && (int)x.grupo_insumo == grupo_insumo);

                                    if (registroGrupoInsumo != null)
                                    {
                                        if ((string)registroGrupoInsumo.inventariado != "I")
                                            throw new Exception(string.Format(@"El insumo ""{0}"" no es inventariable.", det.insumo));
                                    }
                                    else
                                        throw new Exception(string.Format(@"No se encuentra la información del grupo de insumo para el insumo ""{0}"".", det.insumo));
                                }
                                #endregion

                                #region Existencias Colombia
                                foreach (var det in movimiento.detalle)
                                {
                                    #region ENTRADAS EK
                                    var entradasEK = consultaCheckProductivo(string.Format(@"
                                        SELECT
                                            *, (CAST(det.insumo AS Varchar) + '-' + ins.descripcion) AS insumoDesc
                                        FROM DBA.si_movimientos mov 
                                            INNER JOIN DBA.si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                                            INNER JOIN DBA.insumos ins ON det.insumo = ins.insumo 
                                        WHERE mov.almacen = {0} AND det.insumo = {1} AND det.tipo_mov < 50", det.almacen, det.insumo
                                    ));

                                    var listaEntradasSIGOPLAN = _context.tblAlm_MovimientosDet.Where(x => x.estatusHabilitado && x.almacen == det.almacen && x.tipo_mov < 50 && x.insumo == det.insumo).ToList();

                                    if (entradasEK != null)
                                    {
                                        foreach (var ent in entradasEK)
                                        {
                                            var tipo_mov = (int)ent.tipo_mov;
                                            var numero = (int)ent.numero;
                                            var partida = (int)ent.partida;
                                            var registroEntradaSIGOPLAN = listaEntradasSIGOPLAN.FirstOrDefault(x => x.tipo_mov == tipo_mov && x.numero == numero && x.partida == partida);

                                            if (registroEntradaSIGOPLAN == null)
                                            {
                                                throw new Exception("No se encuentra la información en SIGOPLAN para la entrada: [Número: " + numero + " Partida: " + partida + "]");
                                            }

                                            ent.area_alm = registroEntradaSIGOPLAN.area_alm;
                                            ent.lado_alm = registroEntradaSIGOPLAN.lado_alm;
                                            ent.estante_alm = registroEntradaSIGOPLAN.estante_alm;
                                            ent.nivel_alm = registroEntradaSIGOPLAN.nivel_alm;
                                        }
                                    }
                                    #endregion

                                    #region SALIDAS EK
                                    var salidasEK = consultaCheckProductivo(string.Format(@"
                                        SELECT
                                            *, (CAST(det.insumo AS Varchar) + '-' + ins.descripcion) AS insumoDesc
                                        FROM DBA.si_movimientos mov 
                                            INNER JOIN DBA.si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                                            INNER JOIN DBA.insumos ins ON det.insumo = ins.insumo 
                                        WHERE mov.almacen = {0} AND det.insumo = {1} AND det.tipo_mov > 50", det.almacen, det.insumo
                                    ));

                                    var listaSalidasSIGOPLAN = _context.tblAlm_MovimientosDet.Where(x => x.estatusHabilitado && x.almacen == det.almacen && x.tipo_mov > 50 && x.insumo == det.insumo).ToList();

                                    if (salidasEK != null)
                                    {
                                        foreach (var sal in salidasEK)
                                        {
                                            var tipo_mov = (int)sal.tipo_mov;
                                            var numero = (int)sal.numero;
                                            var partida = (int)sal.partida;
                                            var registroSalidaSIGOPLAN = listaSalidasSIGOPLAN.FirstOrDefault(x => x.tipo_mov == tipo_mov && x.numero == numero && x.partida == partida);

                                            if (registroSalidaSIGOPLAN == null)
                                            {
                                                throw new Exception("No se encuentra la información en SIGOPLAN para la salida: [Número: " + numero + " Partida: " + partida + "]");
                                            }

                                            sal.area_alm = registroSalidaSIGOPLAN.area_alm;
                                            sal.lado_alm = registroSalidaSIGOPLAN.lado_alm;
                                            sal.estante_alm = registroSalidaSIGOPLAN.estante_alm;
                                            sal.nivel_alm = registroSalidaSIGOPLAN.nivel_alm;
                                        }
                                    }
                                    #endregion

                                    if (entradasEK != null)
                                    {
                                        var entradas = (List<UbicacionDetalleDTO>)entradasEK.ToObject<List<UbicacionDetalleDTO>>();

                                        entradas = entradas.GroupBy(x => new { x.insumoDesc, x.area_alm, x.lado_alm, x.estante_alm, x.nivel_alm }).Select(x => new UbicacionDetalleDTO
                                        {
                                            insumoDesc = x.Key.insumoDesc,
                                            cantidad = x.Sum(y => y.cantidad),
                                            area_alm = x.Key.area_alm,
                                            lado_alm = x.Key.lado_alm,
                                            estante_alm = x.Key.estante_alm,
                                            nivel_alm = x.Key.nivel_alm
                                        }).ToList();

                                        if (salidasEK != null)
                                        {
                                            var salidas = (List<UbicacionDetalleDTO>)salidasEK.ToObject<List<UbicacionDetalleDTO>>();

                                            salidas = salidas.GroupBy(x => new { x.insumoDesc, x.area_alm, x.lado_alm, x.estante_alm, x.nivel_alm }).Select(x => new UbicacionDetalleDTO
                                            {
                                                insumoDesc = x.Key.insumoDesc,
                                                cantidad = x.Sum(y => y.cantidad),
                                                area_alm = x.Key.area_alm,
                                                lado_alm = x.Key.lado_alm,
                                                estante_alm = x.Key.estante_alm,
                                                nivel_alm = x.Key.nivel_alm
                                            }).ToList();

                                            foreach (var ent in entradas)
                                            {
                                                var salida = salidas.FirstOrDefault(x =>
                                                    x.insumoDesc == ent.insumoDesc &&
                                                    x.area_alm == ent.area_alm &&
                                                    x.lado_alm == ent.lado_alm &&
                                                    x.estante_alm == ent.estante_alm &&
                                                    x.nivel_alm == ent.nivel_alm
                                                );

                                                if (salida != null)
                                                {
                                                    ent.cantidad = ent.cantidad - Convert.ToDecimal(salida.cantidad, CultureInfo.InvariantCulture);
                                                }
                                            }
                                        }

                                        var existenciasInsumo = entradas.Sum(x => x.cantidad);
                                        var salidaTotalPorInsumo = movimiento.detalle.Where(x =>
                                            x.insumo == det.insumo &&
                                            x.area_alm == det.area_alm &&
                                            x.lado_alm == det.lado_alm &&
                                            x.estante_alm == det.estante_alm &&
                                            x.nivel_alm == det.nivel_alm).Sum(x => x.cantidad);

                                        if (existenciasInsumo < salidaTotalPorInsumo)
                                        {
                                            var ubicacion = det.area_alm + "-" + det.lado_alm + "-" + det.estante_alm + "-" + det.nivel_alm;
                                            throw new Exception("No se guardó la información. La cantidad solicitada del insumo \"" + det.insumo + "\" sobrepasa las existencias (" + existenciasInsumo + ") en la ubicación \"" + ubicacion + "\".");
                                        }
                                    }
                                    else
                                    {
                                        var ubicacion = det.area_alm + "-" + det.lado_alm + "-" + det.estante_alm + "-" + det.nivel_alm;
                                        throw new Exception("No se guardó la información. No hay existencias para el insumo \"" + det.insumo + "\" en la ubicación \"" + ubicacion + "\".");
                                    }
                                }
                                #endregion

                                #region Centro de Costo con presupuesto terminado
                                var centroCosto = ((List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM DBA.cc WHERE cc = '{0}'", movimiento.cc)).ToObject<List<dynamic>>())[0];
                                if ((string)centroCosto.st_ppto == "T")
                                    throw new Exception("El centro de costo tiene presupuesto terminado.");
                                #endregion

                                #region Área-Cuenta 14-1 y 14-2 para Gerardo Hernández, Alán Palomera y Kasia Miranda
                                if (movimiento.detalle.Any(x => x.area == 14 && x.cuenta == 1) || movimiento.detalle.Any(x => x.area == 14 && x.cuenta == 2))
                                {
                                    if (usuarioSigoplan.sn_empleado != 30)
                                        throw new Exception("No se guardó la información. Su usuario no puede dar salida por consumo para las áreas cuenta 14-1 y 14-2.");
                                }
                                #endregion
                                #endregion

                                #region Guardar Salida
                                #region Sacar el número del movimiento.
                                var ultimoMovimientoEK = consultaCheckProductivo(
                                    string.Format(@"SELECT TOP 1 numero FROM DBA.si_movimientos WHERE almacen = {0} AND tipo_mov = {1} ORDER BY numero DESC", movimiento.almacen, 51)
                                );

                                var nuevoNumero = 0;
                                if (ultimoMovimientoEK != null)
                                    nuevoNumero = ((List<SurtidoDetDTO>)ultimoMovimientoEK.ToObject<List<SurtidoDetDTO>>())[0].numero;
                                #endregion

                                #region Calcular el total del movimiento.
                                decimal total = 0;
                                foreach (var det in movimiento.detalle)
                                {
                                    var costoPromedio = getCostoPromedioKardex(movimiento.almacen, det.insumo);
                                    total += det.cantidad * costoPromedio;
                                }
                                #endregion

                                #region Guardar Salida SIGOPLAN
                                tblAlm_Movimientos nuevaSalida = new tblAlm_Movimientos();
                                nuevaSalida = new tblAlm_Movimientos
                                {
                                    almacen = movimiento.almacen,
                                    tipo_mov = 51,
                                    numero = nuevoNumero + 1,
                                    cc = movimiento.cc.ToUpper(),
                                    compania = 1,
                                    periodo = DateTime.Now.Month,
                                    ano = DateTime.Now.Year,
                                    orden_ct = 0,
                                    frente = 0,
                                    fecha = DateTime.Now.Date,
                                    proveedor = 0,
                                    total = total,
                                    estatus = "A",
                                    transferida = "N",
                                    alm_destino = 0,
                                    cc_destino = "",
                                    comentarios = movimiento.comentarios,
                                    tipo_trasp = "C",
                                    tipo_cambio = 1,
                                    estatusHabilitado = true,
                                    numeroReq = 0
                                };
                                _context.tblAlm_Movimientos.Add(nuevaSalida);
                                _context.SaveChanges();
                                #endregion

                                #region Guardar Salida Enkontrol
                                if (total <= 0)
                                    throw new Exception("El total no puede ser igual o menor a cero.");

                                var count = 0;
                                // folio_traspaso, bit_sin_ubicacion
                                var consulta = @"INSERT INTO DBA.si_movimientos 
                                                (almacen, tipo_mov, numero, cc, compania, periodo, ano, orden_ct, frente, fecha, proveedor, total, estatus, 
                                                transferida, poliza, empleado, alm_destino, cc_destino, comentarios, tipo_trasp, numero_destino, tp, year_poliza, 
                                                mes_poliza, tipo_cambio, hora, fecha_modifica, empleado_modifica, destajista, obra, id_residente, factura, sector_id, 
                                                tc_cc, paquete, tipo_cargo, cargo_destajista, cargo_id_residente, embarque, orden_prod) 
                                                VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                using (var cmd = new OdbcCommand(consulta))
                                {
                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@almacen", OdbcType.Numeric).Value = nuevaSalida.almacen;
                                    parameters.Add("@tipo_mov", OdbcType.Numeric).Value = nuevaSalida.tipo_mov;
                                    parameters.Add("@numero", OdbcType.Numeric).Value = nuevaSalida.numero;
                                    parameters.Add("@cc", OdbcType.Char).Value = nuevaSalida.cc ?? "";
                                    parameters.Add("@compania", OdbcType.Numeric).Value = nuevaSalida.compania;
                                    parameters.Add("@periodo", OdbcType.Numeric).Value = nuevaSalida.periodo;
                                    parameters.Add("@ano", OdbcType.Numeric).Value = nuevaSalida.ano;
                                    parameters.Add("@orden_ct", OdbcType.Numeric).Value = nuevaSalida.orden_ct;
                                    parameters.Add("@frente", OdbcType.Numeric).Value = nuevaSalida.frente;
                                    parameters.Add("@fecha", OdbcType.Date).Value = nuevaSalida.fecha.Date;
                                    parameters.Add("@proveedor", OdbcType.Numeric).Value = nuevaSalida.proveedor;
                                    parameters.Add("@total", OdbcType.Numeric).Value = total;
                                    parameters.Add("@estatus", OdbcType.Char).Value = nuevaSalida.estatus ?? "";
                                    parameters.Add("@transferida", OdbcType.Char).Value = nuevaSalida.transferida ?? "";
                                    parameters.Add("@poliza", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@empleado", OdbcType.Numeric).Value = empleado;
                                    parameters.Add("@alm_destino", OdbcType.Numeric).Value = nuevaSalida.alm_destino;
                                    parameters.Add("@cc_destino", OdbcType.Char).Value = nuevaSalida.cc_destino ?? "";
                                    parameters.Add("@comentarios", OdbcType.Char).Value = nuevaSalida.comentarios ?? "";
                                    parameters.Add("@tipo_trasp", OdbcType.Char).Value = nuevaSalida.tipo_trasp ?? "";
                                    parameters.Add("@numero_destino", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@tp", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@year_poliza", OdbcType.Numeric).Value = DateTime.Now.Year;
                                    parameters.Add("@mes_poliza", OdbcType.Numeric).Value = DateTime.Now.Month;
                                    parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = nuevaSalida.tipo_cambio;
                                    parameters.Add("@hora", OdbcType.Time).Value = DateTime.Now.TimeOfDay;
                                    parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                    parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = empleado;
                                    parameters.Add("@destajista", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@factura", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@tc_cc", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@paquete", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@tipo_cargo", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@cargo_Destajista", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@cargo_id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@embarque", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@orden_prod", OdbcType.Numeric).Value = DBNull.Value;
                                    //parameters.Add("@folio_traspaso", OdbcType.Numeric).Value = DBNull.Value;
                                    //parameters.Add("@bit_sin_ubicacion", OdbcType.Numeric).Value = 0;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;

                                    count += cmd.ExecuteNonQuery();
                                }
                                #endregion

                                var ccDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM DBA.cc WHERE cc = '{0}' AND st_ppto != 'T'", movimiento.cc));
                                var ccDesc = (string)(((List<dynamic>)ccDescEK.ToObject<List<dynamic>>())[0].descripcion);
                                var almacenDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM DBA.si_almacen WHERE almacen = {0}", nuevaSalida.almacen));
                                var almacenDesc = (string)(((List<dynamic>)almacenDescEK.ToObject<List<dynamic>>())[0].descripcion);

                                var partidaContador = 1;
                                var partidaContadorEK = 1;

                                foreach (var det in movimiento.detalle)
                                {
                                    var costoPromedio = getCostoPromedioKardex(nuevaSalida.almacen, det.insumo);

                                    #region Guardar Salida Detalle SIGOPLAN
                                    var partidaMovimientoSIGOPLAN = partidaContador++;
                                    var nuevaSalidaDet = new tblAlm_MovimientosDet
                                    {
                                        almacen = nuevaSalida.almacen,
                                        tipo_mov = 51,
                                        numero = nuevoNumero + 1,
                                        partida = partidaMovimientoSIGOPLAN,
                                        insumo = det.insumo,
                                        comentarios = det.comentarios,
                                        area = det.area ?? 0,
                                        cuenta = det.cuenta ?? 0,
                                        cantidad = det.cantidad,
                                        precio = costoPromedio, //precio = existencias > 0 ? det.precio : precioEntrada,
                                        importe = det.cantidad * costoPromedio, //importe = existencias > 0 ? det.importe : (det.cantidad * precioEntrada),
                                        id_resguardo = 0,
                                        area_alm = det.area_alm ?? "",
                                        lado_alm = det.lado_alm ?? "",
                                        estante_alm = det.estante_alm ?? "",
                                        nivel_alm = det.nivel_alm ?? "",
                                        transporte = "",
                                        estatusHabilitado = true
                                    };
                                    _context.tblAlm_MovimientosDet.Add(nuevaSalidaDet);
                                    _context.SaveChanges();
                                    #endregion

                                    #region Guardar Salida Detalle Enkontrol
                                    var partidaMovimientoEnkontrol = partidaContadorEK++;
                                    var insumoDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM DBA.insumos WHERE insumo = {0}", det.insumo));
                                    var insumoDesc = (string)(((List<dynamic>)insumoDescEK.ToObject<List<dynamic>>())[0].descripcion);

                                    if (costoPromedio <= 0)
                                        throw new Exception("El precio, el importe y el costo promedio no pueden ser igual o menor a cero.");

                                    // id_resguardo, area_alm, lado_alm, estante_alm, nivel_alm
                                    var consultaDet = @"INSERT INTO DBA.si_movimientos_det 
                                         (almacen, tipo_mov, numero, partida, insumo, comentarios, area, cuenta, cantidad, precio, importe, 
                                         partida_oc, costo_prom, obra, manzana_ini, lote_ini, interior_ini, manzana_fin, lote_fin, interior_fin, 
                                         remision, sector_id) 
                                         VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                    using (var cmd = new OdbcCommand(consultaDet))
                                    {
                                        OdbcParameterCollection parameters = cmd.Parameters;

                                        parameters.Add("@almacen", OdbcType.Numeric).Value = det.almacen;
                                        parameters.Add("@tipo_mov", OdbcType.Numeric).Value = det.tipo_mov;
                                        parameters.Add("@numero", OdbcType.Numeric).Value = nuevoNumero + 1;
                                        parameters.Add("@partida", OdbcType.Numeric).Value = partidaMovimientoEnkontrol;
                                        parameters.Add("@insumo", OdbcType.Numeric).Value = det.insumo;
                                        parameters.Add("@comentarios", OdbcType.Char).Value = det.comentarios ?? "";
                                        parameters.Add("@area", OdbcType.Numeric).Value = det.area ?? 0;
                                        parameters.Add("@cuenta", OdbcType.Numeric).Value = det.cuenta ?? 0;
                                        parameters.Add("@cantidad", OdbcType.Numeric).Value = det.cantidad;
                                        parameters.Add("@precio", OdbcType.Numeric).Value = costoPromedio; //parameters.Add("@precio", OdbcType.Numeric).Value = existencias > 0 ? det.precio : precioEntrada;
                                        parameters.Add("@importe", OdbcType.Numeric).Value = det.cantidad * costoPromedio; //parameters.Add("@importe", OdbcType.Numeric).Value = existencias > 0 ? det.importe : det.cantidad * precioEntrada;
                                        parameters.Add("@partida_oc", OdbcType.Numeric).Value = det.partida_oc ?? 0;
                                        parameters.Add("@costo_prom", OdbcType.Numeric).Value = costoPromedio; //parameters.Add("@costo_prom", OdbcType.Numeric).Value = existencias > 0 ? det.costo_prom : costoPromedioEntrada;
                                        parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@manzana_ini", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@lote_ini", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@interior_ini", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@manzana_fin", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@lote_fin", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@interior_fin", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@remision", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                        //parameters.Add("@id_resguardo", OdbcType.Numeric).Value = DBNull.Value;
                                        //parameters.Add("@area_alm", OdbcType.Char).Value = det.area_alm ?? "";
                                        //parameters.Add("@lado_alm", OdbcType.Char).Value = det.lado_alm ?? "";
                                        //parameters.Add("@estante_alm", OdbcType.Char).Value = det.estante_alm ?? "";
                                        //parameters.Add("@nivel_alm", OdbcType.Char).Value = det.nivel_alm ?? "";
                                        //parameters.Add("@fecha_fisico", OdbcType.Date).Value = DBNull.Value;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;

                                        count += cmd.ExecuteNonQuery();

                                        movSalidas.Add(new salidasAlmacenDTO
                                        {
                                            centroCosto = movimiento.cc + "-" + ccDesc,
                                            folioSalida = (nuevoNumero + 1).ToString(),
                                            almacen = nuevaSalida.almacen + "-" + almacenDesc,
                                            fechaSalida = nuevaSalida.fecha.Date,
                                            partida = det.partida,
                                            insumo = det.insumo + "-" + insumoDesc ?? "",
                                            areaCuenta = (det.area ?? 0) + "-" + (det.cuenta ?? 0),
                                            referencia = "",
                                            remision = "",
                                            cantidad = det.cantidad,
                                            precio = costoPromedio, //precio = existencias > 0 ? det.precio : precioEntrada,
                                            importe = det.cantidad * costoPromedio, //importe = existencias > 0 ? det.cantidad * det.precio : det.cantidad * precioEntrada,
                                            //comentarios = salDet.comentarios != null ? (string)salDet.comentarios : "",
                                            comentarios = movimiento.comentarios ?? "", //Se coloca el comentario general del movimiento porque en el reporte no toma el comentario por partida.
                                            ordenCompra = nuevaSalida.orden_ct.ToString(),
                                            proveedor = "",
                                            direccion = "",
                                            ciudad = "",
                                            telefonos = "",

                                            area_alm = det.area_alm ?? "",
                                            lado_alm = det.lado_alm ?? "",
                                            estante_alm = det.estante_alm ?? "",
                                            nivel_alm = det.nivel_alm ?? ""
                                        });
                                    }

                                    #region Actualizar Tablas Acumula
                                    var objAcumula = new MovimientoDetalleEnkontrolDTO
                                    {
                                        insumo = det.insumo,
                                        cantidad = det.cantidad,
                                        precio = costoPromedio, //precio = existencias > 0 ? det.precio : precioEntrada,
                                        tipo_mov = det.tipo_mov,
                                        costo_prom = costoPromedio, //costo_prom = existencias > 0 ? det.costo_prom : costoPromedioEntrada
                                    };

                                    actualizarAcumula(nuevaSalida.almacen, nuevaSalida.cc, objAcumula, dbSigoplanTransaction, trans);
                                    #endregion
                                    #endregion
                                }
                                #endregion

                                #region Checar salida de insumos resguardables para su entrada por inventario físico
                                bool flagEntradaInvFisico = false;
                                List<int> listaAlmacenesPrincipales = _context.tblAlm_RelacionAlmacenPrincipalVirtual.Where(x => x.estatus).Select(x => x.almacenPrincipal).ToList(); //Lista de almacenes donde aplica la regla de entrada para los insumos resguardables.
                                int almacenVirtual = 0;
                                List<MovimientoDetalleEnkontrolDTO> listaPartidasEntrada = new List<MovimientoDetalleEnkontrolDTO>();

                                if (listaAlmacenesPrincipales.Contains(movimiento.almacen))
                                {
                                    almacenVirtual = _context.tblAlm_RelacionAlmacenPrincipalVirtual.FirstOrDefault(x => x.estatus && x.almacenPrincipal == movimiento.almacen).almacenVirtual;
                                    List<string> listaFamiliasResguardables = _context.tblAlm_FamiliasResguardables.Where(x => x.estatus).Select(x => x.familia).ToList();
                                    int partidaEntrada = 1;

                                    foreach (var det in movimiento.detalle)
                                    {
                                        string familia = det.insumo.ToString().Substring(0, 3);
                                        if (listaFamiliasResguardables.Contains(familia))
                                        {
                                            flagEntradaInvFisico = true; //Con que coincida una partida ya se toma como true el proceso de cargar su entrada por inventario físico en el frontend.
                                            det.partida = partidaEntrada;
                                            det.precio = 1; //Precio en 1 por ser una entrada por inventario físico.
                                            listaPartidasEntrada.Add(det);
                                            partidaEntrada++;
                                        }
                                    }

                                    var ultimaEntradaInventarioFisicoEK = consultaCheckProductivo(
                                        string.Format(@"SELECT TOP 1 * FROM DBA.si_movimientos WHERE almacen = {0} AND tipo_mov = 5 ORDER BY numero DESC", almacenVirtual)
                                    );

                                    if (ultimaEntradaInventarioFisicoEK != null)
                                    {
                                        var ultimaEntradaInventarioFisico = (List<dynamic>)ultimaEntradaInventarioFisicoEK.ToObject<List<dynamic>>();
                                        result.Add("numeroEntradaInvFisico", (int)ultimaEntradaInventarioFisico[0].numero + 1);
                                    }
                                    else
                                        result.Add("numeroEntradaInvFisico", 1);
                                }

                                result.Add("flagEntradaInvFisico", flagEntradaInvFisico);
                                result.Add("almacenEntradaInvFisico", almacenVirtual);
                                result.Add("centroCostoEntradaInvFisico", movimiento.cc);
                                result.Add("listaPartidasEntradaInvFisico", listaPartidasEntrada);
                                #endregion

                                trans.Commit();
                                dbSigoplanTransaction.Commit();

                                result.Add("salidas", movSalidas);
                                //result.Add("flagMaquinaStandBy", flagMaquinaStandBy);
                                result.Add(SUCCESS, true);
                            }
                            catch (Exception e)
                            {
                                trans.Rollback();
                                dbSigoplanTransaction.Rollback();
                                LogError(12, 0, "AlmacenController", "guardarSalidaConsumo", e, AccionEnum.AGREGAR, 0, movimiento);
                                result.Add("salidas", null);
                                result.Add(MESSAGE, e.Message);
                                result.Add(SUCCESS, false);
                            }
                        }
                    }
                }
                #endregion
            }
            else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
            {
                #region PERU
                using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                {
                    using (var dbStarsoft = new MainContextPeruStarSoft003BDCOMUN())
                    {
                        using (var dbStarsoftTransaction = dbStarsoft.Database.BeginTransaction())
                        {
                            try
                            {
                                #region Validaciones Iniciales
                                #region USUARIO INVENTARIOS STARSOFT
                                var objUsrStarsoftInventarios = _context.tblAlm_Almacenistas.FirstOrDefault(e => e.id_usuario_sigoplan == vSesiones.sesionUsuarioDTO.id);

                                string idAlmacenistaStarsoft = "0";

                                if (objUsrStarsoftInventarios == null)
                                {
                                    if (vSesiones.sesionUsuarioDTO.idPerfil == 1)
                                    {
                                        idAlmacenistaStarsoft = "1";
                                    }
                                    else
                                    {
                                        throw new Exception("Esta usuario no es un almacenista en el sistema de PERU");
                                    }
                                }
                                else
                                {
                                    idAlmacenistaStarsoft = objUsrStarsoftInventarios.id_usuario_inventarios;
                                }
                                #endregion

                                #region Validación Almacén Activo STARSOFT

                                string almacenStarsoft = "";
                                if (movimiento.almacen > 9)
                                {
                                    almacenStarsoft = movimiento.almacen.ToString();
                                }
                                else
                                {
                                    almacenStarsoft = "0" + movimiento.almacen;
                                }

                                var objAlmacen = dbStarsoft.TABALM.FirstOrDefault(e => e.TAALMA == almacenStarsoft);

                                if (objAlmacen == null)
                                {
                                    throw new Exception("No se encuentra la información del almacén.");
                                }

                                #endregion

                                #region Cantidades en cero
                                if (movimiento.detalle.Any(x => x.cantidad <= 0))
                                {
                                    throw new Exception("No se puede guardar partidas con cantidades en cero o negativos.");
                                }
                                #endregion

                                #region Validación Inventariables STARSOFT

                                var lstInsumos = new List<MAEART>();

                                foreach (var det in movimiento.detalle)
                                {

                                    var objInsumo = dbStarsoft.MAEART.FirstOrDefault(e => e.ACODIGO == det.PERU_insumo);

                                    if (objInsumo != null)
                                    {
                                        lstInsumos.Add(objInsumo);

                                        if (objInsumo.ACODIGO.Substring(0, 2) == "02")
                                        {
                                            throw new Exception(string.Format(@"El insumo ""{0}"" no es inventariable.", det.PERU_insumo));
                                        }
                                    }
                                    else
                                    {
                                        throw new Exception(string.Format(@"No se encuentra la información para el insumo ""{0}"".", det.PERU_insumo));
                                    }
                                }
                                #endregion

                                #region Validar Existencias
                                foreach (var det in movimiento.detalle)
                                {
                                    if (movimiento.almacen < 90)
                                    {
                                        var registroStock = dbStarsoft.STKART.ToList().FirstOrDefault(x => Int32.Parse(x.STALMA) == movimiento.almacen && Int32.Parse(x.STCODIGO) == det.insumo);

                                        if (registroStock != null)
                                        {
                                            if (det.cantidad > (decimal)registroStock.STSKDIS)
                                            {
                                                throw new Exception("La cantidad solicitada del insumo \"" + ("0" + det.insumo) + "\" sobrepasa las existencias (" + (decimal)registroStock.STSKDIS + ").");
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("No hay existencias para el insumo \"" + ("0" + det.insumo) + "\" en el almacén \"" + movimiento.almacen + "\".");
                                        }
                                    }
                                    else
                                    {
                                        var existenciasUbicacion = _context.tblAlm_MovimientosDet.Where(x =>
                                            x.estatusHabilitado &&
                                            x.almacen == movimiento.almacen &&
                                            x.insumo == det.insumo &&
                                            x.area_alm == det.area_alm &&
                                            x.lado_alm == det.lado_alm &&
                                            x.estante_alm == det.estante_alm &&
                                            x.nivel_alm == det.nivel_alm
                                        ).ToList().GroupBy(x => new { x.almacen, x.insumo, x.area_alm, x.lado_alm, x.estante_alm, x.nivel_alm }).Select(x => new
                                        {
                                            almacen = x.Key.almacen,
                                            insumo = x.Key.insumo,
                                            area_alm = x.Key.area_alm,
                                            lado_alm = x.Key.lado_alm,
                                            estante_alm = x.Key.estante_alm,
                                            nivel_alm = x.Key.nivel_alm,
                                            cantidad = x.Sum(y => y.tipo_mov < 50 ? y.cantidad : (y.cantidad * -1))
                                        }).FirstOrDefault();

                                        if (existenciasUbicacion != null)
                                        {
                                            if (det.cantidad > existenciasUbicacion.cantidad)
                                            {
                                                throw new Exception("La cantidad solicitada del insumo \"" + ("0" + det.insumo) + "\" sobrepasa las existencias (" + existenciasUbicacion.cantidad + ").");
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("No hay existencias para el insumo \"" + ("0" + det.insumo) + "\" en el almacén \"" + movimiento.almacen + "\".");
                                        }
                                    }
                                }
                                #endregion
                                #endregion

                                bool flagAlmacenVirtual = movimiento.almacen >= 90;

                                if (!flagAlmacenVirtual)
                                {
                                    #region Guardar Salida SIGOPLAN y Starsoft
                                    #region Sacar el número del movimiento.
                                    //var ultimoMovimientoSigoplan = _context.tblAlm_Movimientos.Where(e => e.almacen == movimiento.almacen && e.tipo_mov >= 50).OrderByDescending(e => e.id).FirstOrDefault();
                                    //var nuevoNumero = 0;

                                    //if (ultimoMovimientoSigoplan != null)
                                    //{
                                    //    nuevoNumero = ultimoMovimientoSigoplan.numero;
                                    //}

                                    int nuevoNumero = dbStarsoft.MOVALMCAB.ToList().Where(x => Int32.Parse(x.CAALMA) == movimiento.almacen && x.CATD == "NS").Select(x => Int32.Parse(x.CANUMDOC)).OrderByDescending(x => x).FirstOrDefault() + 1;
                                    #endregion

                                    #region Calcular el total del movimiento.
                                    decimal total = 0;

                                    foreach (var det in movimiento.detalle)
                                    {
                                        var registroStock = dbStarsoft.STKART.ToList().FirstOrDefault(x => Int32.Parse(x.STALMA) == movimiento.almacen && x.STCODIGO == ("0" + det.insumo));
                                        var costoPromedio = 0m;

                                        if (registroStock != null)
                                        {
                                            costoPromedio = (decimal)registroStock.STKPREPRO;
                                        }

                                        total += det.cantidad * costoPromedio;
                                    }
                                    #endregion

                                    #region Guardar Salida SIGOPLAN
                                    tblAlm_Movimientos nuevaSalida = new tblAlm_Movimientos();

                                    nuevaSalida = new tblAlm_Movimientos
                                    {
                                        almacen = movimiento.almacen,
                                        tipo_mov = 51,
                                        numero = nuevoNumero,
                                        cc = movimiento.cc.ToUpper(),
                                        compania = 1,
                                        periodo = DateTime.Now.Month,
                                        ano = DateTime.Now.Year,
                                        orden_ct = 0,
                                        frente = 0,
                                        fecha = DateTime.Now.Date,
                                        proveedor = 0,
                                        total = total,
                                        estatus = "A",
                                        transferida = "N",
                                        alm_destino = 0,
                                        cc_destino = "",
                                        comentarios = movimiento.comentarios,
                                        tipo_trasp = "C",
                                        tipo_cambio = 1,
                                        estatusHabilitado = true,
                                        numeroReq = 0,
                                        idUsuarioCreacion = vSesiones.sesionUsuarioDTO.id,
                                        fechaCreacion = DateTime.Now,
                                    };

                                    _context.tblAlm_Movimientos.Add(nuevaSalida);
                                    _context.SaveChanges();
                                    #endregion

                                    #region Guardar Salida Starsoft
                                    //TIPO DE CAMBIO DEL DIA O ANTERIOR
                                    decimal tipoCambioPeru = 0M;

                                    using (var dbStarsoftConta = new MainContextPeruStarSoft003BDCONTABILIDAD())
                                    {
                                        var tipoCambioActual = dbStarsoftConta.TIPO_CAMBIO.ToList().FirstOrDefault(e => e.TIPOCAMB_FECHA.Date == DateTime.Now.Date);
                                        if (tipoCambioActual != null)
                                        {
                                            tipoCambioPeru = tipoCambioActual.TIPOCAMB_COMPRA;
                                        }
                                        else
                                        {
                                            tipoCambioPeru = dbStarsoftConta.TIPO_CAMBIO.ToList().FirstOrDefault(e => e.TIPOCAMB_FECHA.Date == DateTime.Now.AddDays(-1).Date).TIPOCAMB_COMPRA;
                                        }

                                    }

                                    #region INSERT MOVALMCAB

                                    MOVALMCAB objCrearMovCab = new MOVALMCAB();

                                    objCrearMovCab.CAALMA = almacenStarsoft;
                                    objCrearMovCab.CATD = "NS";
                                    objCrearMovCab.CANUMDOC = nuevoNumero.ToString("D10");
                                    objCrearMovCab.CAFECDOC = DateTime.Now.Date;
                                    objCrearMovCab.CATIPMOV = "S";
                                    objCrearMovCab.CACODMOV = "SC";
                                    objCrearMovCab.CASITUA = null;
                                    objCrearMovCab.CARFTDOC = ""; //PENDIENTE CHECAR CUANDO DEJA VER EL STOCK DE LOS INSUMOS EN EL ALMACEN (ASI SI DEJA AGREGARLOS;
                                    objCrearMovCab.CARFNDOC = null;
                                    objCrearMovCab.CASOLI = null;
                                    objCrearMovCab.CAFECDEV = null;
                                    objCrearMovCab.CACODPRO = null;
                                    objCrearMovCab.CACENCOS = movimiento.cc;
                                    objCrearMovCab.CARFALMA = null;
                                    objCrearMovCab.CAGLOSA = movimiento.comentarios;
                                    objCrearMovCab.CAFECACT = DateTime.Now.Date;
                                    objCrearMovCab.CAHORA = DateTime.Now.ToString("HH:mm:ss");
                                    objCrearMovCab.CAUSUARI = objUsrStarsoftInventarios != null ? objUsrStarsoftInventarios.id_usuario_inventarios : "01";
                                    objCrearMovCab.CACODCLI = null;
                                    objCrearMovCab.CARUC = null;
                                    objCrearMovCab.CANOMCLI = null;
                                    objCrearMovCab.CAFORVEN = null;
                                    objCrearMovCab.CACODMON = "MN"; //PENDIENTE TIPO DE MONED;
                                    objCrearMovCab.CAVENDE = null;
                                    objCrearMovCab.CATIPCAM = tipoCambioPeru;
                                    objCrearMovCab.CATIPGUI = null;
                                    objCrearMovCab.CASITGUI = "V";
                                    objCrearMovCab.CAGUIFAC = null;
                                    objCrearMovCab.CADIRENV = null;
                                    objCrearMovCab.CACODTRAN = null;
                                    objCrearMovCab.CANUMORD = null;
                                    objCrearMovCab.CAGUIDEV = null;
                                    objCrearMovCab.CANOMPRO = null;
                                    objCrearMovCab.CANROPED = null;
                                    objCrearMovCab.CACOTIZA = null;
                                    objCrearMovCab.CAPORDESCL = 0M;
                                    objCrearMovCab.CAPORDESES = 0M;
                                    objCrearMovCab.CAIMPORTE = movimiento.total;
                                    objCrearMovCab.CANOMTRA = null;
                                    objCrearMovCab.CADIRTRA = null;
                                    objCrearMovCab.CARUCTRA = null;
                                    objCrearMovCab.CAPLATRA = null;
                                    objCrearMovCab.CANROIMP = "V";
                                    objCrearMovCab.CACODLIQ = null;
                                    objCrearMovCab.CAESTIMP = null;
                                    objCrearMovCab.CACIERRE = false;
                                    objCrearMovCab.CATIPDEP = null;
                                    objCrearMovCab.CAZONAF = null;
                                    objCrearMovCab.FLAGGS = false;
                                    objCrearMovCab.ASIENTO = false;
                                    objCrearMovCab.CAFLETE = 0M;
                                    objCrearMovCab.CAORDFAB = "";
                                    objCrearMovCab.CAPEDREFE = null;
                                    objCrearMovCab.CAIMPORTACION = false;
                                    objCrearMovCab.CANROCAJAS = 0;
                                    objCrearMovCab.CAPESOTOTAL = 0M;
                                    objCrearMovCab.CADESPACHO = false;
                                    objCrearMovCab.LINVCODIGO = null;
                                    objCrearMovCab.COD_DIRECCION = null;
                                    objCrearMovCab.COSTOMIN = 0M;
                                    objCrearMovCab.CAINTERFACE = 0;
                                    objCrearMovCab.CACTACONT = null;
                                    objCrearMovCab.CACONTROLSTOCK = "S";
                                    objCrearMovCab.CANOMRECEP = null;
                                    objCrearMovCab.CADNIRECEP = null;
                                    objCrearMovCab.CFDIREREFE = null;
                                    objCrearMovCab.REG_COMPRA = false;
                                    objCrearMovCab.OC_NI_GUIA = false;
                                    objCrearMovCab.COD_AUDITORIA = "0";
                                    objCrearMovCab.COD_MODULO = "03";
                                    objCrearMovCab.NO_GIRO_NEGOCIO = false;
                                    objCrearMovCab.MOTIVO_ANULACION_DOC_ELECTRONICO = null;
                                    objCrearMovCab.DOCUMENTO_ELECTRONICO = null;
                                    objCrearMovCab.GS_BAJA = null;
                                    objCrearMovCab.CADocumentoImportado = null;
                                    objCrearMovCab.SOLICITANTE = null;
                                    objCrearMovCab.DOCUMENTO_CONTINGENCIA = null;
                                    objCrearMovCab.GE_BAJA = null;

                                    dbStarsoft.MOVALMCAB.Add(objCrearMovCab);

                                    dbStarsoft.SaveChanges();

                                    #endregion

                                    #endregion

                                    var partidaContador = 1;
                                    string ccDesc = _context.tblC_Nom_CatalogoCC.FirstOrDefault(e => e.cc == movimiento.cc).ccDescripcion;
                                    string almacenDesc = objAlmacen.TADESCRI;

                                    foreach (var det in movimiento.detalle)
                                    {
                                        var registroStock = dbStarsoft.STKART.ToList().FirstOrDefault(x => Int32.Parse(x.STALMA) == movimiento.almacen && x.STCODIGO == ("0" + det.insumo));
                                        var costoPromedio = 0m;

                                        if (registroStock != null)
                                        {
                                            costoPromedio = (decimal)registroStock.STKPREPRO;
                                        }

                                        if (costoPromedio == 0)
                                        {
                                            throw new Exception("Costo Promedio en cero para el insumo " + ("0" + det.insumo));
                                        }

                                        var objInsumo = lstInsumos.FirstOrDefault(e => e.ACODIGO == det.PERU_insumo);

                                        #region Guardar Salida Detalle SIGOPLAN

                                        var nuevaSalidaDet = new tblAlm_MovimientosDet
                                        {
                                            almacen = nuevaSalida.almacen,
                                            tipo_mov = 51,
                                            numero = nuevoNumero,
                                            partida = partidaContador,
                                            insumo = det.insumo,
                                            comentarios = det.comentarios,
                                            area = det.area ?? 0,
                                            cuenta = det.cuenta ?? 0,
                                            cantidad = det.cantidad,
                                            precio = costoPromedio, //precio = existencias > 0 ? det.precio : precioEntrada,
                                            importe = det.cantidad * costoPromedio, //importe = existencias > 0 ? det.importe : (det.cantidad * precioEntrada),
                                            id_resguardo = 0,
                                            area_alm = det.area_alm ?? "",
                                            lado_alm = det.lado_alm ?? "",
                                            estante_alm = det.estante_alm ?? "",
                                            nivel_alm = det.nivel_alm ?? "",
                                            transporte = "",
                                            estatusHabilitado = true,
                                            PERU_insumo = det.PERU_insumo,
                                            noEconomico = det.noEconomico
                                        };

                                        _context.tblAlm_MovimientosDet.Add(nuevaSalidaDet);
                                        _context.SaveChanges();
                                        #endregion

                                        #region Guardar Salida Detalle Starsoft

                                        #region INSERT MOVALMDET
                                        dbStarsoft.MovAlmDet.Add(new MovAlmDet()
                                        {
                                            DEALMA = almacenStarsoft,
                                            DETD = "NS",
                                            DENUMDOC = nuevoNumero.ToString("D10"),
                                            DEITEM = partidaContador,
                                            DECODIGO = det.PERU_insumo,
                                            DECODREF = null,
                                            DECANTID = det.cantidad,
                                            DECANTENT = 0M,
                                            DECANREF = 0M,
                                            DECANFAC = 0M,
                                            DEORDEN = null,
                                            DEPREUNI = 0M,
                                            DEPRECIO = costoPromedio,
                                            DEPRECI1 = 0M,
                                            DEDESCTO = 0M,
                                            DESTOCK = null,
                                            DEIGV = 0M,
                                            DEIMPMN = costoPromedio,
                                            DEIMPUS = costoPromedio * tipoCambioPeru,
                                            DESERIE = null,
                                            DESITUA = null,
                                            DEFECDOC = null,
                                            DECENCOS = movimiento.cc,
                                            DERFALMA = null,
                                            DETR = null,
                                            DEESTADO = "V",
                                            DECODMOV = "SC",
                                            DEVALTOT = costoPromedio * det.cantidad,
                                            DECOMPRO = null,
                                            DECODMON = "MN",
                                            DETIPO = null,
                                            DETIPCAM = tipoCambioPeru,
                                            DEPREVTA = null,
                                            DEMONVTA = null,
                                            DEFECVEN = null,
                                            DEDEVOL = 0M,
                                            DESOLI = null,
                                            DEDESCRI = objInsumo.ADESCRI,
                                            DEPORDES = 0M,
                                            DEIGVPOR = 0M,
                                            DEDESCLI = 0M,
                                            DEDESESP = 0M,
                                            DENUMFAC = null,
                                            DELOTE = null,
                                            DEUNIDAD = objInsumo.AUNIDAD,
                                            DECANTBRUTA = 0M,
                                            DEDSCTCANTBRUTA = 0M,
                                            DEORDFAB = "",
                                            DEQUIPO = null,
                                            DEFLETE = 0M,
                                            DEITEMI = null, //????????
                                            DEGLOSA = "",
                                            DEVALORIZADO = true,
                                            DESECUENORI = null,
                                            DEREFERENCIA = null,
                                            UMREFERENCIA = null,
                                            CANTREFERENCIA = 0M,
                                            DECUENTA = null,
                                            DETEXTO = null,
                                            CTA_CONSUMO = null,
                                            CODPARTE = "",
                                            CODPLANO = "",
                                            DETPRODUCCION = 0,
                                            MPMA = "",
                                            PorcentajeCosto = 0M,
                                            SALDO_NC = null,
                                            DEPRECIOREF = 0M,
                                        });
                                        dbStarsoft.SaveChanges();

                                        #endregion

                                        #region INSERT STKART

                                        var obkStkart = dbStarsoft.STKART.FirstOrDefault(e => e.STALMA == almacenStarsoft && e.STCODIGO == det.PERU_insumo);

                                        if (obkStkart != null)
                                        {
                                            //ACTUALIZAR EXISTENCIAS. PENDIENTE CHECAR OTROS CAMPOS
                                            obkStkart.STSKDIS -= det.cantidad;

                                            if (obkStkart.STSKDIS < 0)
                                            {
                                                obkStkart.STSKDIS = 0;
                                            }

                                            if (obkStkart.STSKDIS == 0)
                                            {
                                                obkStkart.STKPREPRO = 0;
                                                obkStkart.STKPREPROUS = 0;
                                            }

                                            dbStarsoft.SaveChanges();
                                        }

                                        #endregion

                                        #region INSERT MORESMES

                                        var objMoResMes = dbStarsoft.MoResMes.ToList().FirstOrDefault(e => e.SMALMA == almacenStarsoft && e.SMMESPRO == (DateTime.Now.Year.ToString() + DateTime.Now.ToString("MM"))
                                                                                                && e.SMCODIGO == det.PERU_insumo);

                                        if (objMoResMes != null)
                                        {
                                            objMoResMes.SMCANSAL += det.cantidad;

                                            dbStarsoft.SaveChanges();
                                        }

                                        #endregion

                                        #endregion

                                        #region Reporte

                                        movSalidas.Add(new salidasAlmacenDTO
                                        {
                                            centroCosto = movimiento.cc + "-" + ccDesc,
                                            folioSalida = (nuevoNumero).ToString(),
                                            almacen = nuevaSalida.almacen + "-" + almacenDesc,
                                            fechaSalida = nuevaSalida.fecha.Date,
                                            partida = det.partida,
                                            insumo = det.insumo + "-" + objInsumo.ADESCRI ?? "",
                                            areaCuenta = (det.area ?? 0) + "-" + (det.cuenta ?? 0),
                                            noEconomico = det.noEconomico,
                                            referencia = "",
                                            remision = "",
                                            cantidad = det.cantidad,
                                            precio = costoPromedio, //precio = existencias > 0 ? det.precio : precioEntrada,
                                            importe = det.cantidad * costoPromedio, //importe = existencias > 0 ? det.cantidad * det.precio : det.cantidad * precioEntrada,
                                            //comentarios = salDet.comentarios != null ? (string)salDet.comentarios : "",
                                            comentarios = movimiento.comentarios ?? "", //Se coloca el comentario general del movimiento porque en el reporte no toma el comentario por partida.
                                            ordenCompra = nuevaSalida.orden_ct.ToString(),
                                            proveedor = "",
                                            direccion = "",
                                            ciudad = "",
                                            telefonos = "",

                                            area_alm = det.area_alm ?? "",
                                            lado_alm = det.lado_alm ?? "",
                                            estante_alm = det.estante_alm ?? "",
                                            nivel_alm = det.nivel_alm ?? ""
                                        });


                                        //#region Actualizar Tablas Acumula
                                        //var objAcumula = new MovimientoDetalleEnkontrolDTO
                                        //{
                                        //    insumo = det.insumo,
                                        //    cantidad = det.cantidad,
                                        //    precio = costoPromedio, //precio = existencias > 0 ? det.precio : precioEntrada,
                                        //    tipo_mov = det.tipo_mov,
                                        //    costo_prom = costoPromedio, //costo_prom = existencias > 0 ? det.costo_prom : costoPromedioEntrada
                                        //};

                                        //actualizarAcumula(nuevaSalida.almacen, nuevaSalida.cc, objAcumula, dbSigoplanTransaction, trans);
                                        //#endregion
                                        #endregion

                                        partidaContador += 1;
                                    }
                                    #endregion
                                }
                                else
                                {
                                    #region Guardar Salida SIGOPLAN
                                    int nuevoNumero = _context.tblAlm_Movimientos.Where(x => x.estatusHabilitado && x.almacen == movimiento.almacen && x.tipo_mov > 50).Select(x => x.numero).OrderByDescending(x => x).FirstOrDefault() + 1;

                                    #region Calcular el total del movimiento.
                                    decimal total = 0;

                                    foreach (var det in movimiento.detalle)
                                    {
                                        var registroStock = dbStarsoft.STKART.ToList().FirstOrDefault(x => Int32.Parse(x.STALMA) == movimiento.almacen && x.STCODIGO == ("0" + det.insumo));
                                        var costoPromedio = 0m;

                                        if (registroStock != null)
                                        {
                                            costoPromedio = (decimal)registroStock.STKPREPRO;
                                        }

                                        total += det.cantidad * costoPromedio;
                                    }
                                    #endregion

                                    #region Guardar Salida SIGOPLAN
                                    tblAlm_Movimientos nuevaSalida = new tblAlm_Movimientos();

                                    nuevaSalida = new tblAlm_Movimientos
                                    {
                                        almacen = movimiento.almacen,
                                        tipo_mov = 51,
                                        numero = nuevoNumero,
                                        cc = movimiento.cc.ToUpper(),
                                        compania = 1,
                                        periodo = DateTime.Now.Month,
                                        ano = DateTime.Now.Year,
                                        orden_ct = 0,
                                        frente = 0,
                                        fecha = DateTime.Now.Date,
                                        proveedor = 0,
                                        total = total,
                                        estatus = "A",
                                        transferida = "N",
                                        alm_destino = 0,
                                        cc_destino = "",
                                        comentarios = movimiento.comentarios,
                                        tipo_trasp = "C",
                                        tipo_cambio = 1,
                                        estatusHabilitado = true,
                                        numeroReq = 0,
                                        idUsuarioCreacion = vSesiones.sesionUsuarioDTO.id,
                                        fechaCreacion = DateTime.Now,
                                    };

                                    _context.tblAlm_Movimientos.Add(nuevaSalida);
                                    _context.SaveChanges();
                                    #endregion

                                    //TIPO DE CAMBIO DEL DIA O ANTERIOR
                                    decimal tipoCambioPeru = 0M;

                                    using (var dbStarsoftConta = new MainContextPeruStarSoft003BDCONTABILIDAD())
                                    {
                                        var tipoCambioActual = dbStarsoftConta.TIPO_CAMBIO.ToList().FirstOrDefault(e => e.TIPOCAMB_FECHA.Date == DateTime.Now.Date);
                                        if (tipoCambioActual != null)
                                        {
                                            tipoCambioPeru = tipoCambioActual.TIPOCAMB_COMPRA;
                                        }
                                        else
                                        {
                                            tipoCambioPeru = dbStarsoftConta.TIPO_CAMBIO.ToList().FirstOrDefault(e => e.TIPOCAMB_FECHA.Date == DateTime.Now.AddDays(-1).Date).TIPOCAMB_COMPRA;
                                        }

                                    }

                                    var partidaContador = 1;
                                    string ccDesc = _context.tblC_Nom_CatalogoCC.FirstOrDefault(e => e.cc == movimiento.cc).ccDescripcion;
                                    string almacenDesc = objAlmacen.TADESCRI;

                                    foreach (var det in movimiento.detalle)
                                    {
                                        var registroStock = dbStarsoft.STKART.ToList().FirstOrDefault(x => Int32.Parse(x.STALMA) == movimiento.almacen && x.STCODIGO == ("0" + det.insumo));
                                        var costoPromedio = 0m;

                                        if (registroStock != null)
                                        {
                                            costoPromedio = (decimal)registroStock.STKPREPRO;
                                        }

                                        if (costoPromedio == 0)
                                        {
                                            throw new Exception("Costo Promedio en cero para el insumo " + ("0" + det.insumo));
                                        }

                                        var objInsumo = lstInsumos.FirstOrDefault(e => e.ACODIGO == det.PERU_insumo);

                                        #region Guardar Salida Detalle SIGOPLAN

                                        var nuevaSalidaDet = new tblAlm_MovimientosDet
                                        {
                                            almacen = nuevaSalida.almacen,
                                            tipo_mov = 51,
                                            numero = nuevoNumero,
                                            partida = partidaContador,
                                            insumo = det.insumo,
                                            comentarios = det.comentarios,
                                            area = det.area ?? 0,
                                            cuenta = det.cuenta ?? 0,
                                            cantidad = det.cantidad,
                                            precio = costoPromedio, //precio = existencias > 0 ? det.precio : precioEntrada,
                                            importe = det.cantidad * costoPromedio, //importe = existencias > 0 ? det.importe : (det.cantidad * precioEntrada),
                                            id_resguardo = 0,
                                            area_alm = det.area_alm ?? "",
                                            lado_alm = det.lado_alm ?? "",
                                            estante_alm = det.estante_alm ?? "",
                                            nivel_alm = det.nivel_alm ?? "",
                                            transporte = "",
                                            estatusHabilitado = true,
                                            PERU_insumo = det.PERU_insumo,
                                            noEconomico = det.noEconomico
                                        };

                                        _context.tblAlm_MovimientosDet.Add(nuevaSalidaDet);
                                        _context.SaveChanges();
                                        #endregion

                                        #region Reporte
                                        movSalidas.Add(new salidasAlmacenDTO
                                        {
                                            centroCosto = movimiento.cc + "-" + ccDesc,
                                            folioSalida = (nuevoNumero).ToString(),
                                            almacen = nuevaSalida.almacen + "-" + almacenDesc,
                                            fechaSalida = nuevaSalida.fecha.Date,
                                            partida = det.partida,
                                            insumo = det.insumo + "-" + objInsumo.ADESCRI ?? "",
                                            areaCuenta = (det.area ?? 0) + "-" + (det.cuenta ?? 0),
                                            noEconomico = det.noEconomico,
                                            referencia = "",
                                            remision = "",
                                            cantidad = det.cantidad,
                                            precio = costoPromedio, //precio = existencias > 0 ? det.precio : precioEntrada,
                                            importe = det.cantidad * costoPromedio, //importe = existencias > 0 ? det.cantidad * det.precio : det.cantidad * precioEntrada,
                                            //comentarios = salDet.comentarios != null ? (string)salDet.comentarios : "",
                                            comentarios = movimiento.comentarios ?? "", //Se coloca el comentario general del movimiento porque en el reporte no toma el comentario por partida.
                                            ordenCompra = nuevaSalida.orden_ct.ToString(),
                                            proveedor = "",
                                            direccion = "",
                                            ciudad = "",
                                            telefonos = "",

                                            area_alm = det.area_alm ?? "",
                                            lado_alm = det.lado_alm ?? "",
                                            estante_alm = det.estante_alm ?? "",
                                            nivel_alm = det.nivel_alm ?? ""
                                        });
                                        #endregion

                                        partidaContador += 1;
                                    }
                                    #endregion
                                }

                                result.Add("flagEntradaInvFisico", false);
                                result.Add("almacenEntradaInvFisico", 0);
                                result.Add("centroCostoEntradaInvFisico", movimiento.cc);
                                result.Add("listaPartidasEntradaInvFisico", null);

                                dbStarsoftTransaction.Commit();
                                dbSigoplanTransaction.Commit();

                                result.Add("salidas", movSalidas);
                                result.Add("flagMaquinaStandBy", false);
                                result.Add(SUCCESS, true);
                            }
                            catch (Exception e)
                            {
                                dbStarsoftTransaction.Rollback();
                                dbSigoplanTransaction.Rollback();

                                LogError(12, 0, "AlmacenController", "guardarSalidaConsumo", e, AccionEnum.AGREGAR, 0, movimiento);

                                result.Add("salidas", null);
                                result.Add(MESSAGE, e.Message);
                                result.Add(SUCCESS, false);
                            }
                        }
                    }
                }
                #endregion
            }
            else
            {
                #region DEMAS EMPRESAS
                using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                {
                    using (var con = checkConexionProductivo())
                    {
                        using (var trans = con.BeginTransaction())
                        {
                            try
                            {
                                #region Validaciones Iniciales
                                #region Validación Almacén Activo
                                var almacenEK = _contextEnkontrol.Select<dynamic>(getEnkontrolEnumADM(),
                                    new OdbcConsultaDTO()
                                    {
                                        consulta = @"SELECT * FROM si_almacen WHERE almacen = ?",
                                        parametros = new List<OdbcParameterDTO>() {
                                        new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = movimiento.almacen }
                                    }
                                    }
                                );

                                if (almacenEK.Count() == 0)
                                {
                                    throw new Exception("No se encuentra la información del almacén.");
                                }

                                if ((string)almacenEK[0].bit_mp != "S")
                                {
                                    throw new Exception("El almacén no está activo.");
                                }
                                #endregion

                                #region Cantidades en cero
                                if (movimiento.detalle.Any(x => x.cantidad <= 0))
                                {
                                    throw new Exception("No se puede guardar partidas con cantidades en cero o negativos.");
                                }
                                #endregion

                                #region Familias 101 y 102
                                if (vSesiones.sesionEmpresaActual == 2)
                                {
                                    var listaAlmacenesExcepciones = _context.tblAlm_Validacion_101_102_AlmacenesExcepciones.Where(x => x.estatus).Select(x => x.almacen).ToList();

                                    if (!listaAlmacenesExcepciones.Contains(movimiento.almacen))
                                    {
                                        if (movimiento.almacen > 620)
                                        {
                                            if (movimiento.detalle.Select(x => x.insumo.ToString().Substring(0, 3)).Any(x => x == "101") || movimiento.detalle.Select(x => x.insumo.ToString().Substring(0, 3)).Any(x => x == "102"))
                                            {
                                                List<int> insumosExcepciones = _context.tblAlm_Validacion_101_102_InsumosExcepciones.Where(x => x.estatus).Select(x => x.insumo).ToList();
                                                List<int> insumosMovimiento = movimiento.detalle.Where(x =>
                                                    x.insumo.ToString().Substring(0, 3) == "101" || x.insumo.ToString().Substring(0, 3) == "102"
                                                ).Select(x => x.insumo).ToList();

                                                if (insumosExcepciones.Count() > 0)
                                                {
                                                    foreach (int insMov in insumosMovimiento)
                                                    {
                                                        if (!insumosExcepciones.Contains(insMov))
                                                        {
                                                            throw new Exception("No se puede dar salida a las familias de insumo 101 y 102. Insumo: \"" + insMov + "\".");
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    throw new Exception("No se puede dar salida a las familias de insumo 101 y 102.");
                                                }
                                            }
                                        }
                                    }
                                }
                                #endregion

                                #region Inventariables
                                var registrosGrupoInsumo = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM grupos_insumo")).ToObject<List<dynamic>>();

                                foreach (var det in movimiento.detalle)
                                {
                                    var tipo_insumo = Int32.Parse(det.insumo.ToString().Substring(0, 1));
                                    var grupo_insumo = Int32.Parse(det.insumo.ToString().Substring(1, 2));
                                    var registroGrupoInsumo = registrosGrupoInsumo.FirstOrDefault(x => (int)x.tipo_insumo == tipo_insumo && (int)x.grupo_insumo == grupo_insumo);

                                    if (registroGrupoInsumo != null)
                                    {
                                        if ((string)registroGrupoInsumo.inventariado != "I")
                                        {
                                            throw new Exception(string.Format(@"El insumo ""{0}"" no es inventariable.", det.insumo));
                                        }
                                    }
                                    else
                                    {
                                        throw new Exception(string.Format(@"No se encuentra la información del grupo de insumo para el insumo ""{0}"".", det.insumo));
                                    }
                                }
                                #endregion

                                #region Existencias
                                foreach (var det in movimiento.detalle)
                                {
                                    var entradasEK = consultaCheckProductivo(
                                        string.Format(@"SELECT 
                                        det.insumo, 
                                        (CAST(det.insumo AS Varchar) + '-' + ins.descripcion) AS insumoDesc, 
                                        SUM(det.cantidad) AS cantidad, 
                                        det.area_alm, 
                                        det.lado_alm, 
                                        det.estante_alm, 
                                        det.nivel_alm 
                                    FROM si_movimientos mov 
                                        INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                                        INNER JOIN insumos ins ON det.insumo = ins.insumo 
                                    WHERE 
                                        mov.almacen = {0} AND 
                                        det.insumo = {1} AND 
                                        det.area_alm = '{2}' AND 
                                        det.lado_alm = '{3}' AND 
                                        det.estante_alm = '{4}' AND 
                                        det.nivel_alm = '{5}' AND 
                                        det.tipo_mov < 50 
                                    GROUP BY det.insumo, ins.descripcion, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm",
                                                        det.almacen, det.insumo, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm));

                                    var salidasEK = consultaCheckProductivo(
                                        string.Format(@"SELECT 
                                        det.insumo, 
                                        (CAST(det.insumo AS Varchar) + '-' + ins.descripcion) AS insumoDesc, 
                                        SUM(det.cantidad) AS cantidad, 
                                        det.area_alm, 
                                        det.lado_alm, 
                                        det.estante_alm, 
                                        det.nivel_alm 
                                    FROM si_movimientos mov 
                                        INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                                        INNER JOIN insumos ins ON det.insumo = ins.insumo 
                                    WHERE 
                                        mov.almacen = {0} AND 
                                        det.insumo = {1} AND 
                                        det.area_alm = '{2}' AND 
                                        det.lado_alm = '{3}' AND 
                                        det.estante_alm = '{4}' AND 
                                        det.nivel_alm = '{5}' AND 
                                        det.tipo_mov > 50 
                                    GROUP BY det.insumo, ins.descripcion, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm",
                                                        det.almacen, det.insumo, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm));

                                    if (entradasEK != null)
                                    {
                                        var entradas = (List<UbicacionDetalleDTO>)entradasEK.ToObject<List<UbicacionDetalleDTO>>();

                                        if (salidasEK != null)
                                        {
                                            var salidas = (List<UbicacionDetalleDTO>)salidasEK.ToObject<List<UbicacionDetalleDTO>>();

                                            foreach (var ent in entradas)
                                            {
                                                var salida = salidas.FirstOrDefault(x =>
                                                        x.insumoDesc == ent.insumoDesc &&
                                                        x.area_alm == ent.area_alm &&
                                                        x.lado_alm == ent.lado_alm &&
                                                        x.estante_alm == ent.estante_alm &&
                                                        x.nivel_alm == ent.nivel_alm
                                                    );

                                                if (salida != null)
                                                {
                                                    ent.cantidad = ent.cantidad - Convert.ToDecimal(salida.cantidad, CultureInfo.InvariantCulture);
                                                }
                                            }
                                        }

                                        var existenciasInsumo = entradas.Sum(x => x.cantidad);
                                        var salidaTotalPorInsumo = movimiento.detalle.Where(x =>
                                            x.insumo == det.insumo &&
                                            x.area_alm == det.area_alm &&
                                            x.lado_alm == det.lado_alm &&
                                            x.estante_alm == det.estante_alm &&
                                            x.nivel_alm == det.nivel_alm).Sum(x => x.cantidad);

                                        if (existenciasInsumo < salidaTotalPorInsumo)
                                        {
                                            var ubicacion = det.area_alm + "-" + det.lado_alm + "-" + det.estante_alm + "-" + det.nivel_alm;

                                            throw new Exception("No se guardó la información. La cantidad solicitada del insumo \"" + det.insumo + "\" sobrepasa las existencias (" + existenciasInsumo + ") en la ubicación \"" + ubicacion + "\".");
                                        }
                                    }
                                    else
                                    {
                                        var ubicacion = det.area_alm + "-" + det.lado_alm + "-" + det.estante_alm + "-" + det.nivel_alm;

                                        throw new Exception("No se guardó la información. No hay existencias para el insumo \"" + det.insumo + "\" en la ubicación \"" + ubicacion + "\".");
                                    }
                                }
                                #endregion

                                #region Permisos Familias
                                if (vSesiones.sesionEmpresaActual == 2)
                                {
                                    var permisosFamilias = getPermisosFamilia(movimiento.cc);

                                    if (permisosFamilias.Count > 0)
                                    {
                                        if (!permisosFamilias.Any(x => x.familia == "*"))
                                        {
                                            var familias = movimiento.detalle.Select(x => x.insumo.ToString().Substring(0, 3)).ToList();

                                            foreach (var fam in familias)
                                            {
                                                if (!permisosFamilias.Select(x => x.familia).Contains(fam))
                                                {
                                                    throw new Exception(
                                                        string.Format(@"Bloqueo de familia de insumo '{0}' para el centro de costo '{1}'. No se puede proceder con la salida.", fam, movimiento.cc)
                                                    );
                                                }
                                            }
                                        }
                                    }
                                }
                                #endregion

                                #region Centro de Costo con presupuesto terminado
                                var centroCosto = ((List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM cc WHERE cc = '{0}'", movimiento.cc)).ToObject<List<dynamic>>())[0];

                                if ((string)centroCosto.st_ppto == "T")
                                {
                                    throw new Exception("El centro de costo tiene presupuesto terminado.");
                                }
                                #endregion

                                #region Stand-By
                                //var flagMaquinaStandBy = false;
                                //if (vSesiones.sesionEmpresaActual == 2)
                                //{
                                //    flagMaquinaStandBy = checkMaquinaStandBy(movimiento.cc);
                                //}
                                #endregion

                                #region Área-Cuenta en cero
                                if (vSesiones.sesionEmpresaActual == 2)
                                {
                                    if (movimiento.detalle.Any(x => x.area == null || x.cuenta == null || x.area == 0 || x.cuenta == 0))
                                    {
                                        throw new Exception("Debe capturar el Área-Cuenta.");
                                    }
                                }
                                #endregion

                                #region Área-Cuenta 14-1 y 14-2 para Gerardo Hernández, Alán Palomera y Kasia Miranda
                                if (movimiento.detalle.Any(x => x.area == 14 && x.cuenta == 1) || movimiento.detalle.Any(x => x.area == 14 && x.cuenta == 2))
                                {
                                    if (usuarioSigoplan.sn_empleado != 30)
                                    {
                                        throw new Exception("No se guardó la información. Su usuario no puede dar salida por consumo para las áreas cuenta 14-1 y 14-2.");
                                    }
                                }
                                #endregion

                                #region Bloqueo CC-Movimiento
                                if (vSesiones.sesionEmpresaActual == 1)
                                {
                                    var bloqueoMovimiento = _context.tblAlm_BloqueoCCMovimiento.FirstOrDefault(x => x.estatus && x.cc == movimiento.cc && x.tipo_mov == 51);

                                    if (bloqueoMovimiento != null)
                                    {
                                        //Excepción para Alán Palomera, Diego Gonzalez y Jesús Alcantar.
                                        if (empleado != 412 && empleado != 744 && empleado != 726)
                                        {
                                            throw new Exception("No se puede realizar salidas por consumo en el centro de costo \"" + movimiento.cc + "\".");
                                        }
                                    }
                                }
                                else if (vSesiones.sesionEmpresaActual == 2)
                                {
                                    var bloqueoMovimiento = _context.tblAlm_BloqueoCCMovimiento.FirstOrDefault(x => x.estatus && x.cc == movimiento.cc && x.tipo_mov == 51);

                                    if (bloqueoMovimiento != null)
                                    {
                                        throw new Exception("No se puede realizar salidas por consumo en un centro de costo genérico, debe realizarse la salida con cargo a un equipo.");
                                    }
                                }
                                #endregion
                                #endregion

                                #region Guardar Salida
                                #region Sacar el número del movimiento.
                                var ultimoMovimientoEK = consultaCheckProductivo(
                                    string.Format(@"SELECT 
                                                    TOP 1 numero 
                                                FROM si_movimientos 
                                                WHERE almacen = {0} AND tipo_mov = {1} 
                                                ORDER BY numero DESC", movimiento.almacen, 51)
                                );

                                var nuevoNumero = 0;

                                if (ultimoMovimientoEK != null)
                                {
                                    nuevoNumero = ((List<SurtidoDetDTO>)ultimoMovimientoEK.ToObject<List<SurtidoDetDTO>>())[0].numero;
                                }
                                #endregion

                                #region Calcular el total del movimiento.
                                decimal total = 0;

                                foreach (var det in movimiento.detalle)
                                {
                                    //                                #region Checar existencia para el reseteo del precio y costo promedio
                                    //                                decimal precioEntrada = 0;
                                    //                                decimal costoPromedioEntrada = 0;
                                    //                                decimal existencias = 0;

                                    //                                var movimientosEK = consultaCheckProductivo(
                                    //                                    string.Format(@"SELECT 
                                    //                                                    	mov.tipo_mov, mov.fecha, det.cantidad, det.precio 
                                    //                                                    FROM si_movimientos mov 
                                    //                                                    	INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                                    //                                                    WHERE mov.almacen = {0} AND det.insumo = {1} 
                                    //                                                    ORDER BY mov.fecha DESC", movimiento.almacen, det.insumo)
                                    //                                );

                                    //                                if (movimientosEK != null)
                                    //                                {
                                    //                                    var movimientos = (List<ExistenciaResetDTO>)movimientosEK.ToObject<List<ExistenciaResetDTO>>();
                                    //                                    var entradas = movimientos.Where(x => x.tipo_mov < 50).ToList();
                                    //                                    var ultimaEntrada = entradas.OrderByDescending(x => x.fecha).First();
                                    //                                    entradas.RemoveAt(0); //Quitar la ultima entrada para calcular las existencias antes de que se realizara ese movimiento.
                                    //                                    decimal cantidadEntradas = 0;
                                    //                                    foreach (var ent in entradas)
                                    //                                    {
                                    //                                        cantidadEntradas += ent.cantidad;
                                    //                                    }
                                    //                                    var salidas = movimientos.Where(x => x.tipo_mov > 50).ToList();
                                    //                                    decimal cantidadSalidas = 0;
                                    //                                    foreach (var sal in salidas)
                                    //                                    {
                                    //                                        cantidadSalidas += sal.cantidad;
                                    //                                    }
                                    //                                    existencias = cantidadEntradas - cantidadSalidas;

                                    //                                    if (existencias <= 0)
                                    //                                    {
                                    //                                        precioEntrada = ultimaEntrada.precio;
                                    //                                        costoPromedioEntrada = ultimaEntrada.precio;
                                    //                                    }
                                    //                                }
                                    //                                else
                                    //                                {
                                    //                                    throw new Exception("No existen movimientos para el insumo \"" + det.insumo + "\" en el almacén \"" + movimiento.almacen + "\".");
                                    //                                }
                                    //                                #endregion

                                    //                                total += det.cantidad * (existencias > 0 ? det.precio : costoPromedioEntrada);
                                    var costoPromedio = getCostoPromedioKardex(movimiento.almacen, det.insumo);

                                    total += det.cantidad * costoPromedio;
                                }
                                #endregion

                                #region Guardar Salida SIGOPLAN
                                tblAlm_Movimientos nuevaSalida = new tblAlm_Movimientos();

                                nuevaSalida = new tblAlm_Movimientos
                                {
                                    almacen = movimiento.almacen,
                                    tipo_mov = 51,
                                    numero = nuevoNumero + 1,
                                    cc = movimiento.cc.ToUpper(),
                                    compania = 1,
                                    periodo = DateTime.Now.Month,
                                    ano = DateTime.Now.Year,
                                    orden_ct = 0,
                                    frente = 0,
                                    fecha = DateTime.Now.Date,
                                    proveedor = 0,
                                    total = total,
                                    estatus = "A",
                                    transferida = "N",
                                    alm_destino = 0,
                                    cc_destino = "",
                                    comentarios = movimiento.comentarios,
                                    tipo_trasp = "C",
                                    tipo_cambio = 1,
                                    estatusHabilitado = true,
                                    numeroReq = 0
                                };

                                _context.tblAlm_Movimientos.Add(nuevaSalida);
                                _context.SaveChanges();
                                #endregion

                                #region Guardar Salida Enkontrol
                                if (total <= 0)
                                {
                                    throw new Exception("El total no puede ser igual o menor a cero.");
                                }

                                var count = 0;

                                var consulta = @"INSERT INTO si_movimientos 
                                                (almacen, tipo_mov, numero, cc, compania, periodo, ano, orden_ct, frente, fecha, proveedor, total, estatus, 
                                                transferida, poliza, empleado, alm_destino, cc_destino, comentarios, tipo_trasp, numero_destino, tp, year_poliza, 
                                                mes_poliza, tipo_cambio, hora, fecha_modifica, empleado_modifica, destajista, obra, id_residente, factura, sector_id, 
                                                tc_cc, paquete, tipo_cargo, cargo_destajista, cargo_id_residente, embarque, orden_prod, folio_traspaso, bit_sin_ubicacion) 
                                                VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                using (var cmd = new OdbcCommand(consulta))
                                {
                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@almacen", OdbcType.Numeric).Value = nuevaSalida.almacen;
                                    parameters.Add("@tipo_mov", OdbcType.Numeric).Value = nuevaSalida.tipo_mov;
                                    parameters.Add("@numero", OdbcType.Numeric).Value = nuevaSalida.numero;
                                    parameters.Add("@cc", OdbcType.Char).Value = nuevaSalida.cc ?? "";
                                    parameters.Add("@compania", OdbcType.Numeric).Value = nuevaSalida.compania;
                                    parameters.Add("@periodo", OdbcType.Numeric).Value = nuevaSalida.periodo;
                                    parameters.Add("@ano", OdbcType.Numeric).Value = nuevaSalida.ano;
                                    parameters.Add("@orden_ct", OdbcType.Numeric).Value = nuevaSalida.orden_ct;
                                    parameters.Add("@frente", OdbcType.Numeric).Value = nuevaSalida.frente;
                                    parameters.Add("@fecha", OdbcType.Date).Value = nuevaSalida.fecha.Date;
                                    parameters.Add("@proveedor", OdbcType.Numeric).Value = nuevaSalida.proveedor;
                                    parameters.Add("@total", OdbcType.Numeric).Value = total;
                                    parameters.Add("@estatus", OdbcType.Char).Value = nuevaSalida.estatus ?? "";
                                    parameters.Add("@transferida", OdbcType.Char).Value = nuevaSalida.transferida ?? "";
                                    parameters.Add("@poliza", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@empleado", OdbcType.Numeric).Value = empleado;
                                    parameters.Add("@alm_destino", OdbcType.Numeric).Value = nuevaSalida.alm_destino;
                                    parameters.Add("@cc_destino", OdbcType.Char).Value = nuevaSalida.cc_destino ?? "";
                                    parameters.Add("@comentarios", OdbcType.Char).Value = nuevaSalida.comentarios ?? "";
                                    parameters.Add("@tipo_trasp", OdbcType.Char).Value = nuevaSalida.tipo_trasp ?? "";
                                    parameters.Add("@numero_destino", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@tp", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@year_poliza", OdbcType.Numeric).Value = DateTime.Now.Year;
                                    parameters.Add("@mes_poliza", OdbcType.Numeric).Value = DateTime.Now.Month;
                                    parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = nuevaSalida.tipo_cambio;
                                    parameters.Add("@hora", OdbcType.Time).Value = DateTime.Now.TimeOfDay;
                                    parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                    parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = empleado;
                                    parameters.Add("@destajista", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@factura", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@tc_cc", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@paquete", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@tipo_cargo", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@cargo_Destajista", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@cargo_id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@embarque", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@orden_prod", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@folio_traspaso", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@bit_sin_ubicacion", OdbcType.Numeric).Value = 0;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;

                                    count += cmd.ExecuteNonQuery();
                                }
                                #endregion

                                var ccDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM cc WHERE cc = '{0}' AND st_ppto != 'T'", movimiento.cc));
                                var ccDesc = (string)(((List<dynamic>)ccDescEK.ToObject<List<dynamic>>())[0].descripcion);
                                var almacenDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", nuevaSalida.almacen));
                                var almacenDesc = (string)(((List<dynamic>)almacenDescEK.ToObject<List<dynamic>>())[0].descripcion);

                                var partidaContador = 1;
                                var partidaContadorEK = 1;

                                foreach (var det in movimiento.detalle)
                                {
                                    //                                #region Checar existencia para el reseteo del precio y costo promedio
                                    //                                decimal precioEntrada = 0;
                                    //                                decimal costoPromedioEntrada = 0;
                                    //                                decimal existencias = 0;

                                    //                                var movimientosEK = consultaCheckProductivo(
                                    //                                    string.Format(@"SELECT 
                                    //                                                    	mov.tipo_mov, mov.fecha, det.cantidad, det.precio 
                                    //                                                    FROM si_movimientos mov 
                                    //                                                    	INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                                    //                                                    WHERE mov.almacen = {0} AND det.insumo = {1} 
                                    //                                                    ORDER BY mov.fecha DESC", nuevaSalida.almacen, det.insumo)
                                    //                                );

                                    //                                if (movimientosEK != null)
                                    //                                {
                                    //                                    var movimientos = (List<ExistenciaResetDTO>)movimientosEK.ToObject<List<ExistenciaResetDTO>>();
                                    //                                    var entradas = movimientos.Where(x => x.tipo_mov < 50).ToList();
                                    //                                    var ultimaEntrada = entradas.OrderByDescending(x => x.fecha).First();
                                    //                                    entradas.RemoveAt(0); //Quitar la ultima entrada para calcular las existencias antes de que se realizara ese movimiento.
                                    //                                    decimal cantidadEntradas = 0;
                                    //                                    foreach (var ent in entradas)
                                    //                                    {
                                    //                                        cantidadEntradas += ent.cantidad;
                                    //                                    }
                                    //                                    //entradas = null;
                                    //                                    var salidas = movimientos.Where(x => (int)x.tipo_mov > 50).ToList();
                                    //                                    //movimientos = null;
                                    //                                    decimal cantidadSalidas = 0;
                                    //                                    foreach (var sal in salidas)
                                    //                                    {
                                    //                                        cantidadSalidas += sal.cantidad;
                                    //                                    }
                                    //                                    //salidas = null;
                                    //                                    existencias = cantidadEntradas - cantidadSalidas;

                                    //                                    if (existencias <= 0)
                                    //                                    {
                                    //                                        precioEntrada = ultimaEntrada.precio;
                                    //                                        costoPromedioEntrada = ultimaEntrada.precio;
                                    //                                    }
                                    //                                }
                                    //                                else
                                    //                                {
                                    //                                    throw new Exception("No existen movimientos para el insumo \"" + det.insumo + "\" en el almacén \"" + nuevaSalida.almacen + "\".");
                                    //                                }
                                    //                                #endregion

                                    var costoPromedio = getCostoPromedioKardex(nuevaSalida.almacen, det.insumo);

                                    #region Guardar Salida Detalle SIGOPLAN
                                    var partidaMovimientoSIGOPLAN = partidaContador++;

                                    var nuevaSalidaDet = new tblAlm_MovimientosDet
                                    {
                                        almacen = nuevaSalida.almacen,
                                        tipo_mov = 51,
                                        numero = nuevoNumero + 1,
                                        partida = partidaMovimientoSIGOPLAN,
                                        insumo = det.insumo,
                                        comentarios = det.comentarios,
                                        area = det.area ?? 0,
                                        cuenta = det.cuenta ?? 0,
                                        cantidad = det.cantidad,
                                        precio = costoPromedio, //precio = existencias > 0 ? det.precio : precioEntrada,
                                        importe = det.cantidad * costoPromedio, //importe = existencias > 0 ? det.importe : (det.cantidad * precioEntrada),
                                        id_resguardo = 0,
                                        area_alm = det.area_alm ?? "",
                                        lado_alm = det.lado_alm ?? "",
                                        estante_alm = det.estante_alm ?? "",
                                        nivel_alm = det.nivel_alm ?? "",
                                        transporte = "",
                                        estatusHabilitado = true
                                    };

                                    _context.tblAlm_MovimientosDet.Add(nuevaSalidaDet);
                                    _context.SaveChanges();
                                    #endregion

                                    #region Guardar Salida Detalle Enkontrol
                                    var partidaMovimientoEnkontrol = partidaContadorEK++;

                                    var insumoDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM insumos WHERE insumo = {0}", det.insumo));
                                    var insumoDesc = (string)(((List<dynamic>)insumoDescEK.ToObject<List<dynamic>>())[0].descripcion);

                                    //if (existencias > 0)
                                    //{
                                    //    if (det.precio <= 0 || det.importe <= 0 || det.costo_prom <= 0)
                                    //    {
                                    //        throw new Exception("El precio, el importe y el costo promedio no pueden ser igual o menor a cero.");
                                    //    }
                                    //}
                                    //else
                                    //{
                                    //    if (precioEntrada <= 0 || costoPromedioEntrada <= 0)
                                    //    {
                                    //        throw new Exception("El precio, el importe y el costo promedio no pueden ser igual o menor a cero.");
                                    //    }
                                    //}

                                    if (costoPromedio <= 0)
                                    {
                                        throw new Exception("El precio, el importe y el costo promedio no pueden ser igual o menor a cero.");
                                    }

                                    var consultaDet = @"INSERT INTO si_movimientos_det 
                                         (almacen, tipo_mov, numero, partida, insumo, comentarios, area, cuenta, cantidad, precio, importe, 
                                         partida_oc, costo_prom, obra, manzana_ini, lote_ini, interior_ini, manzana_fin, lote_fin, interior_fin, 
                                         remision, sector_id, id_resguardo, area_alm, lado_alm, estante_alm, nivel_alm, fecha_fisico) 
                                         VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                    using (var cmd = new OdbcCommand(consultaDet))
                                    {
                                        OdbcParameterCollection parameters = cmd.Parameters;

                                        parameters.Add("@almacen", OdbcType.Numeric).Value = det.almacen;
                                        parameters.Add("@tipo_mov", OdbcType.Numeric).Value = det.tipo_mov;
                                        parameters.Add("@numero", OdbcType.Numeric).Value = nuevoNumero + 1;
                                        parameters.Add("@partida", OdbcType.Numeric).Value = partidaMovimientoEnkontrol;
                                        parameters.Add("@insumo", OdbcType.Numeric).Value = det.insumo;
                                        parameters.Add("@comentarios", OdbcType.Char).Value = det.comentarios ?? "";
                                        parameters.Add("@area", OdbcType.Numeric).Value = det.area ?? 0;
                                        parameters.Add("@cuenta", OdbcType.Numeric).Value = det.cuenta ?? 0;
                                        parameters.Add("@cantidad", OdbcType.Numeric).Value = det.cantidad;
                                        parameters.Add("@precio", OdbcType.Numeric).Value = costoPromedio; //parameters.Add("@precio", OdbcType.Numeric).Value = existencias > 0 ? det.precio : precioEntrada;
                                        parameters.Add("@importe", OdbcType.Numeric).Value = det.cantidad * costoPromedio; //parameters.Add("@importe", OdbcType.Numeric).Value = existencias > 0 ? det.importe : det.cantidad * precioEntrada;
                                        parameters.Add("@partida_oc", OdbcType.Numeric).Value = det.partida_oc ?? 0;
                                        parameters.Add("@costo_prom", OdbcType.Numeric).Value = costoPromedio; //parameters.Add("@costo_prom", OdbcType.Numeric).Value = existencias > 0 ? det.costo_prom : costoPromedioEntrada;
                                        parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@manzana_ini", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@lote_ini", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@interior_ini", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@manzana_fin", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@lote_fin", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@interior_fin", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@remision", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@id_resguardo", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@area_alm", OdbcType.Char).Value = det.area_alm ?? "";
                                        parameters.Add("@lado_alm", OdbcType.Char).Value = det.lado_alm ?? "";
                                        parameters.Add("@estante_alm", OdbcType.Char).Value = det.estante_alm ?? "";
                                        parameters.Add("@nivel_alm", OdbcType.Char).Value = det.nivel_alm ?? "";
                                        parameters.Add("@fecha_fisico", OdbcType.Date).Value = DBNull.Value;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;

                                        count += cmd.ExecuteNonQuery();

                                        movSalidas.Add(new salidasAlmacenDTO
                                        {
                                            centroCosto = movimiento.cc + "-" + ccDesc,
                                            folioSalida = (nuevoNumero + 1).ToString(),
                                            almacen = nuevaSalida.almacen + "-" + almacenDesc,
                                            fechaSalida = nuevaSalida.fecha.Date,
                                            partida = det.partida,
                                            insumo = det.insumo + "-" + insumoDesc ?? "",
                                            areaCuenta = (det.area ?? 0) + "-" + (det.cuenta ?? 0),
                                            referencia = "",
                                            remision = "",
                                            cantidad = det.cantidad,
                                            precio = costoPromedio, //precio = existencias > 0 ? det.precio : precioEntrada,
                                            importe = det.cantidad * costoPromedio, //importe = existencias > 0 ? det.cantidad * det.precio : det.cantidad * precioEntrada,
                                            //comentarios = salDet.comentarios != null ? (string)salDet.comentarios : "",
                                            comentarios = movimiento.comentarios ?? "", //Se coloca el comentario general del movimiento porque en el reporte no toma el comentario por partida.
                                            ordenCompra = nuevaSalida.orden_ct.ToString(),
                                            proveedor = "",
                                            direccion = "",
                                            ciudad = "",
                                            telefonos = "",

                                            area_alm = det.area_alm ?? "",
                                            lado_alm = det.lado_alm ?? "",
                                            estante_alm = det.estante_alm ?? "",
                                            nivel_alm = det.nivel_alm ?? ""
                                        });
                                    }

                                    #region Actualizar Tablas Acumula
                                    var objAcumula = new MovimientoDetalleEnkontrolDTO
                                    {
                                        insumo = det.insumo,
                                        cantidad = det.cantidad,
                                        precio = costoPromedio, //precio = existencias > 0 ? det.precio : precioEntrada,
                                        tipo_mov = det.tipo_mov,
                                        costo_prom = costoPromedio, //costo_prom = existencias > 0 ? det.costo_prom : costoPromedioEntrada
                                    };

                                    actualizarAcumula(nuevaSalida.almacen, nuevaSalida.cc, objAcumula, dbSigoplanTransaction, trans);
                                    #endregion
                                    #endregion
                                }
                                #endregion

                                #region Checar salida de insumos resguardables para su entrada por inventario físico
                                bool flagEntradaInvFisico = false;
                                List<int> listaAlmacenesPrincipales = _context.tblAlm_RelacionAlmacenPrincipalVirtual.Where(x => x.estatus).Select(x => x.almacenPrincipal).ToList(); //Lista de almacenes donde aplica la regla de entrada para los insumos resguardables.
                                int almacenVirtual = 0;
                                List<MovimientoDetalleEnkontrolDTO> listaPartidasEntrada = new List<MovimientoDetalleEnkontrolDTO>();

                                if (listaAlmacenesPrincipales.Contains(movimiento.almacen))
                                {
                                    almacenVirtual = _context.tblAlm_RelacionAlmacenPrincipalVirtual.FirstOrDefault(x => x.estatus && x.almacenPrincipal == movimiento.almacen).almacenVirtual;
                                    List<string> listaFamiliasResguardables = _context.tblAlm_FamiliasResguardables.Where(x => x.estatus).Select(x => x.familia).ToList();
                                    int partidaEntrada = 1;

                                    foreach (var det in movimiento.detalle)
                                    {
                                        string familia = det.insumo.ToString().Substring(0, 3);

                                        if (listaFamiliasResguardables.Contains(familia))
                                        {
                                            flagEntradaInvFisico = true; //Con que coincida una partida ya se toma como true el proceso de cargar su entrada por inventario físico en el frontend.

                                            det.partida = partidaEntrada;
                                            det.precio = 1; //Precio en 1 por ser una entrada por inventario físico.

                                            listaPartidasEntrada.Add(det);
                                            partidaEntrada++;
                                        }
                                    }

                                    var ultimaEntradaInventarioFisicoEK = consultaCheckProductivo(
                                        string.Format(@"SELECT TOP 1 * FROM si_movimientos WHERE almacen = {0} AND tipo_mov = 5 ORDER BY numero DESC", almacenVirtual)
                                    );

                                    if (ultimaEntradaInventarioFisicoEK != null)
                                    {
                                        var ultimaEntradaInventarioFisico = (List<dynamic>)ultimaEntradaInventarioFisicoEK.ToObject<List<dynamic>>();

                                        result.Add("numeroEntradaInvFisico", (int)ultimaEntradaInventarioFisico[0].numero + 1);
                                    }
                                    else
                                    {
                                        result.Add("numeroEntradaInvFisico", 1);
                                    }
                                }

                                result.Add("flagEntradaInvFisico", flagEntradaInvFisico);
                                result.Add("almacenEntradaInvFisico", almacenVirtual);
                                result.Add("centroCostoEntradaInvFisico", movimiento.cc);
                                result.Add("listaPartidasEntradaInvFisico", listaPartidasEntrada);
                                #endregion

                                #region ACTIVACION DE EQUIPO DE STANDBY
                                var flagMaquinaStandBy = false;
                                flagMaquinaStandBy = ActivarEconomicoPorAccionRealizada
                                    (
                                        movimiento.cc,
                                        null,
                                        AccionActivacionEconomicoEnum.SALIDA_ALMACEN,
                                        new { cc = movimiento.cc, almacen = movimiento.almacen, numero = movimiento.numero }, true);
                                #endregion

                                trans.Commit();
                                dbSigoplanTransaction.Commit();

                                result.Add("salidas", movSalidas);
                                result.Add("flagMaquinaStandBy", flagMaquinaStandBy);
                                result.Add(SUCCESS, true);
                            }
                            catch (Exception e)
                            {
                                trans.Rollback();
                                dbSigoplanTransaction.Rollback();

                                LogError(12, 0, "AlmacenController", "guardarSalidaConsumo", e, AccionEnum.AGREGAR, 0, movimiento);

                                result.Add("salidas", null);
                                result.Add(MESSAGE, e.Message);
                                result.Add(SUCCESS, false);
                            }
                        }
                    }
                }
                #endregion
            }

            return result;
        }

        public List<salidasAlmacenDTO> imprimirMovimientoSalidaConsumo(int almacen, int numero)
        {
            List<salidasAlmacenDTO> movSalidas = new List<salidasAlmacenDTO>();

            if ((MainContextEnum)vSesiones.sesionEmpresaActual != MainContextEnum.PERU)
            {
                #region RESTO EMPRESAS
                var movimientoEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_movimientos WHERE almacen = {0} AND tipo_mov = 51 AND numero = {1}", almacen, numero));

                if (movimientoEK != null)
                {
                    var movimiento = ((List<dynamic>)movimientoEK.ToObject<List<dynamic>>())[0];
                    var movimientoDetalleEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_movimientos_det WHERE almacen = {0} AND tipo_mov = 51 AND numero = {1}", almacen, numero));

                    if (movimientoDetalleEK != null)
                    {
                        var movimientoDetalle = (List<dynamic>)movimientoDetalleEK.ToObject<List<dynamic>>();

                        var ccDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM cc WHERE cc = '{0}' AND st_ppto != 'T'", (string)movimiento.cc));
                        var ccDesc = (string)(((List<dynamic>)ccDescEK.ToObject<List<dynamic>>())[0].descripcion);
                        var almacenDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", (int)movimiento.almacen));
                        var almacenDesc = (string)(((List<dynamic>)almacenDescEK.ToObject<List<dynamic>>())[0].descripcion);

                        foreach (var salDet in movimientoDetalle)
                        {
                            var insumoDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM insumos WHERE insumo = {0}", (int)salDet.insumo));
                            var insumoDesc = (string)(((List<dynamic>)insumoDescEK.ToObject<List<dynamic>>())[0].descripcion);
                            var area = salDet.area != null ? (int)salDet.area : 0;
                            var cuenta = salDet.cuenta != null ? (int)salDet.cuenta : 0;
                            var cantidad = Convert.ToDecimal(salDet.cantidad, CultureInfo.InvariantCulture);
                            var precio = Convert.ToDecimal(salDet.precio, CultureInfo.InvariantCulture);
                            var area_alm = salDet.area_alm != null ? (string)salDet.area_alm : "";
                            var lado_alm = salDet.lado_alm != null ? (string)salDet.lado_alm : ""; ;
                            var estante_alm = salDet.estante_alm != null ? (string)salDet.estante_alm : ""; ;
                            var nivel_alm = salDet.nivel_alm != null ? (string)salDet.nivel_alm : ""; ;

                            movSalidas.Add(new salidasAlmacenDTO
                            {
                                centroCosto = ccDesc,
                                folioSalida = ((int)salDet.numero).ToString(),
                                almacen = almacenDesc,
                                fechaSalida = movimiento.fecha,
                                partida = (int)salDet.partida,
                                insumo = (int)salDet.insumo + "-" + insumoDesc ?? "",
                                areaCuenta = area + "-" + cuenta,
                                referencia = "",
                                remision = "",
                                cantidad = cantidad,
                                precio = precio,
                                importe = cantidad * precio,
                                //comentarios = salDet.comentarios != null ? (string)salDet.comentarios : "",
                                comentarios = (string)movimiento.comentarios, //Se coloca el comentario general del movimiento porque en el reporte no toma el comentario por partida.
                                ordenCompra = "0",
                                proveedor = "",
                                direccion = "",
                                ciudad = "",
                                telefonos = "",

                                area_alm = area_alm,
                                lado_alm = lado_alm,
                                estante_alm = estante_alm,
                                nivel_alm = nivel_alm
                            });
                        }
                    }
                    else
                    {
                        throw new Exception("No se encuentra el detalle del movimiento.");
                    }
                }
                else
                {
                    throw new Exception("No se encuentra el movimiento.");
                }
                #endregion
            }
            else
            {
                #region PERU
                var movimientoPeru = _context.tblAlm_Movimientos.Where(e => e.tipo_mov == 51 && e.numero == numero && e.almacen == almacen).ToList();

                if (movimientoPeru != null)
                {
                    var movimiento = movimientoPeru.FirstOrDefault();
                    var movimientoDetalle = _context.tblAlm_MovimientosDet.Where(e => e.tipo_mov == 51 && e.numero == numero && e.almacen == almacen).ToList();

                    if (movimientoDetalle != null)
                    {
                        var ccDescPeru = _context.tblC_Nom_CatalogoCC.FirstOrDefault(cc => cc.cc == movimiento.cc);

                        #region ALMACEN STARSOFT
                        string almacenStarsoft = "";

                        if (almacen > 9)
                        {
                            almacenStarsoft = almacen.ToString();
                        }
                        else
                        {
                            almacenStarsoft = "0" + almacen;
                        }

                        using (var dbStarsoft = new MainContextPeruStarSoft003BDCOMUN())
                        {
                            var objAlmacen = dbStarsoft.TABALM.FirstOrDefault();

                            if (objAlmacen != null)
                            {
                                almacenStarsoft = objAlmacen.TADESCRI;
                            }
                        }
                        #endregion

                        foreach (var salDet in movimientoDetalle)
                        {
                            //var insumoDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM insumos WHERE insumo = {0}", (int)salDet.insumo));
                            //var insumoDesc = (string)(((List<dynamic>)insumoDescEK.ToObject<List<dynamic>>())[0].descripcion);
                            string descInsumoPeru = "";
                            string descUnidad = "";

                            using (var dbStarsoft = new MainContextPeruStarSoft003BDCOMUN())
                            {
                                var objInsumo = dbStarsoft.MAEART.FirstOrDefault(e => e.ACODIGO == salDet.PERU_insumo);

                                if (objInsumo != null)
                                {
                                    descUnidad = objInsumo.AUNIDAD;
                                    descInsumoPeru = objInsumo.ADESCRI;
                                }
                            }
                            var area = salDet.area != null ? (int)salDet.area : 0;
                            var cuenta = salDet.cuenta != null ? (int)salDet.cuenta : 0;
                            var cantidad = Convert.ToDecimal(salDet.cantidad, CultureInfo.InvariantCulture);
                            var precio = Convert.ToDecimal(salDet.precio, CultureInfo.InvariantCulture);
                            var area_alm = salDet.area_alm != null ? (string)salDet.area_alm : "";
                            var lado_alm = salDet.lado_alm != null ? (string)salDet.lado_alm : ""; ;
                            var estante_alm = salDet.estante_alm != null ? (string)salDet.estante_alm : ""; ;
                            var nivel_alm = salDet.nivel_alm != null ? (string)salDet.nivel_alm : ""; ;

                            movSalidas.Add(new salidasAlmacenDTO
                            {
                                centroCosto = ccDescPeru.ccDescripcion,
                                folioSalida = ((int)salDet.numero).ToString(),
                                almacen = almacenStarsoft,
                                fechaSalida = movimiento.fecha,
                                partida = (int)salDet.partida,
                                insumo = (int)salDet.insumo + "-" + descInsumoPeru ?? "",
                                areaCuenta = area + "-" + cuenta,
                                referencia = "",
                                remision = "",
                                cantidad = cantidad,
                                precio = precio,
                                importe = cantidad * precio,
                                //comentarios = salDet.comentarios != null ? (string)salDet.comentarios : "",
                                comentarios = (string)movimiento.comentarios, //Se coloca el comentario general del movimiento porque en el reporte no toma el comentario por partida.
                                ordenCompra = "0",
                                proveedor = "",
                                direccion = "",
                                ciudad = "",
                                telefonos = "",

                                area_alm = area_alm,
                                lado_alm = lado_alm,
                                estante_alm = estante_alm,
                                nivel_alm = nivel_alm,
                                noEconomico = salDet.noEconomico
                            });
                        }
                    }
                    else
                    {
                        throw new Exception("No se encuentra el detalle del movimiento.");
                    }
                }
                else
                {
                    throw new Exception("No se encuentra el movimiento.");
                }

                #endregion
            }

            return movSalidas;
        }
        #endregion

        #region Salida Por Consumo Con Origen
        public Dictionary<string, object> guardarSalidaConsumoOrigen(MovimientoEnkontrolDTO movimiento)
        {
            var result = new Dictionary<string, object>();
            List<salidasAlmacenDTO> movSalidas = new List<salidasAlmacenDTO>();

            var empleado = 0;
            var usuarioSigoplan = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

            if (usuarioSigoplan != null)
            {
                empleado = usuarioSigoplan.empleado;
            }

            using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
            {
                using (var con = checkConexionProductivo())
                {
                    using (var trans = con.BeginTransaction())
                    {
                        try
                        {
                            #region Validaciones Iniciales
                            #region Validación Almacén Activo
                            var almacenEK = _contextEnkontrol.Select<dynamic>(getEnkontrolEnumADM(),
                                new OdbcConsultaDTO()
                                {
                                    consulta = @"SELECT * FROM si_almacen WHERE almacen = ?",
                                    parametros = new List<OdbcParameterDTO>() {
                                        new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = movimiento.almacen }
                                    }
                                }
                            );

                            if (almacenEK.Count() == 0)
                            {
                                throw new Exception("No se encuentra la información del almacén.");
                            }

                            if ((string)almacenEK[0].bit_mp != "S")
                            {
                                throw new Exception("El almacén no está activo.");
                            }
                            #endregion

                            #region Cantidades en cero
                            if (movimiento.detalle.Any(x => x.cantidad <= 0))
                            {
                                throw new Exception("No se puede guardar partidas con cantidades en cero o negativos.");
                            }
                            #endregion

                            #region Familias 101 y 102
                            if (vSesiones.sesionEmpresaActual == 2)
                            {
                                var listaAlmacenesExcepciones = _context.tblAlm_Validacion_101_102_AlmacenesExcepciones.Where(x => x.estatus).Select(x => x.almacen).ToList();

                                if (!listaAlmacenesExcepciones.Contains(movimiento.almacen))
                                {
                                    if (movimiento.almacen > 620)
                                    {
                                        if (movimiento.detalle.Select(x => x.insumo.ToString().Substring(0, 3)).Any(x => x == "101") || movimiento.detalle.Select(x => x.insumo.ToString().Substring(0, 3)).Any(x => x == "102"))
                                        {
                                            List<int> insumosExcepciones = _context.tblAlm_Validacion_101_102_InsumosExcepciones.Where(x => x.estatus).Select(x => x.insumo).ToList();
                                            List<int> insumosMovimiento = movimiento.detalle.Where(x =>
                                                x.insumo.ToString().Substring(0, 3) == "101" || x.insumo.ToString().Substring(0, 3) == "102"
                                            ).Select(x => x.insumo).ToList();

                                            if (insumosExcepciones.Count() > 0)
                                            {
                                                foreach (int insMov in insumosMovimiento)
                                                {
                                                    if (!insumosExcepciones.Contains(insMov))
                                                    {
                                                        throw new Exception("No se puede dar salida a las familias de insumo 101 y 102. Insumo: \"" + insMov + "\".");
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                throw new Exception("No se puede dar salida a las familias de insumo 101 y 102.");
                                            }
                                        }
                                    }
                                }
                            }
                            #endregion

                            #region Inventariables
                            var registrosGrupoInsumo = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM grupos_insumo")).ToObject<List<dynamic>>();

                            foreach (var det in movimiento.detalle)
                            {
                                var tipo_insumo = Int32.Parse(det.insumo.ToString().Substring(0, 1));
                                var grupo_insumo = Int32.Parse(det.insumo.ToString().Substring(1, 2));
                                var registroGrupoInsumo = registrosGrupoInsumo.FirstOrDefault(x => (int)x.tipo_insumo == tipo_insumo && (int)x.grupo_insumo == grupo_insumo);

                                if (registroGrupoInsumo != null)
                                {
                                    if ((string)registroGrupoInsumo.inventariado != "I")
                                    {
                                        throw new Exception(string.Format(@"El insumo ""{0}"" no es inventariable.", det.insumo));
                                    }
                                }
                                else
                                {
                                    throw new Exception(string.Format(@"No se encuentra la información del grupo de insumo para el insumo ""{0}"".", det.insumo));
                                }
                            }
                            #endregion

                            #region Existencias
                            foreach (var det in movimiento.detalle)
                            {
                                var entradasEK = consultaCheckProductivo(
                                    string.Format(@"SELECT 
                                        det.insumo, 
                                        (CAST(det.insumo AS Varchar) + '-' + ins.descripcion) AS insumoDesc, 
                                        SUM(det.cantidad) AS cantidad, 
                                        det.area_alm, 
                                        det.lado_alm, 
                                        det.estante_alm, 
                                        det.nivel_alm 
                                    FROM si_movimientos mov 
                                        INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                                        INNER JOIN insumos ins ON det.insumo = ins.insumo 
                                    WHERE 
                                        mov.almacen = {0} AND 
                                        det.insumo = {1} AND 
                                        det.area_alm = '{2}' AND 
                                        det.lado_alm = '{3}' AND 
                                        det.estante_alm = '{4}' AND 
                                        det.nivel_alm = '{5}' AND 
                                        det.tipo_mov < 50 
                                    GROUP BY det.insumo, ins.descripcion, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm",
                                                    det.almacen, det.insumo, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm));

                                var salidasEK = consultaCheckProductivo(
                                    string.Format(@"SELECT 
                                        det.insumo, 
                                        (CAST(det.insumo AS Varchar) + '-' + ins.descripcion) AS insumoDesc, 
                                        SUM(det.cantidad) AS cantidad, 
                                        det.area_alm, 
                                        det.lado_alm, 
                                        det.estante_alm, 
                                        det.nivel_alm 
                                    FROM si_movimientos mov 
                                        INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                                        INNER JOIN insumos ins ON det.insumo = ins.insumo 
                                    WHERE 
                                        mov.almacen = {0} AND 
                                        det.insumo = {1} AND 
                                        det.area_alm = '{2}' AND 
                                        det.lado_alm = '{3}' AND 
                                        det.estante_alm = '{4}' AND 
                                        det.nivel_alm = '{5}' AND 
                                        det.tipo_mov > 50 
                                    GROUP BY det.insumo, ins.descripcion, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm",
                                                    det.almacen, det.insumo, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm));

                                if (entradasEK != null)
                                {
                                    var entradas = (List<UbicacionDetalleDTO>)entradasEK.ToObject<List<UbicacionDetalleDTO>>();

                                    if (salidasEK != null)
                                    {
                                        var salidas = (List<UbicacionDetalleDTO>)salidasEK.ToObject<List<UbicacionDetalleDTO>>();

                                        foreach (var ent in entradas)
                                        {
                                            var salida = salidas.FirstOrDefault(x =>
                                                    x.insumoDesc == ent.insumoDesc &&
                                                    x.area_alm == ent.area_alm &&
                                                    x.lado_alm == ent.lado_alm &&
                                                    x.estante_alm == ent.estante_alm &&
                                                    x.nivel_alm == ent.nivel_alm
                                                );

                                            if (salida != null)
                                            {
                                                ent.cantidad = ent.cantidad - Convert.ToDecimal(salida.cantidad, CultureInfo.InvariantCulture);
                                            }
                                        }
                                    }

                                    var existenciasInsumo = entradas.Sum(x => x.cantidad);
                                    var salidaTotalPorInsumo = movimiento.detalle.Where(x =>
                                        x.insumo == det.insumo &&
                                        x.area_alm == det.area_alm &&
                                        x.lado_alm == det.lado_alm &&
                                        x.estante_alm == det.estante_alm &&
                                        x.nivel_alm == det.nivel_alm).Sum(x => x.cantidad);

                                    if (existenciasInsumo < salidaTotalPorInsumo)
                                    {
                                        var ubicacion = det.area_alm + "-" + det.lado_alm + "-" + det.estante_alm + "-" + det.nivel_alm;

                                        throw new Exception("No se guardó la información. La cantidad solicitada del insumo \"" + det.insumo + "\" sobrepasa las existencias (" + existenciasInsumo + ") en la ubicación \"" + ubicacion + "\".");
                                    }
                                }
                                else
                                {
                                    var ubicacion = det.area_alm + "-" + det.lado_alm + "-" + det.estante_alm + "-" + det.nivel_alm;

                                    throw new Exception("No se guardó la información. No hay existencias para el insumo \"" + det.insumo + "\" en la ubicación \"" + ubicacion + "\".");
                                }
                            }
                            #endregion

                            #region Permisos Familias
                            if (vSesiones.sesionEmpresaActual == 2)
                            {
                                var permisosFamilias = getPermisosFamilia(movimiento.cc);

                                if (permisosFamilias.Count > 0)
                                {
                                    if (!permisosFamilias.Any(x => x.familia == "*"))
                                    {
                                        var familias = movimiento.detalle.Select(x => x.insumo.ToString().Substring(0, 3)).ToList();

                                        foreach (var fam in familias)
                                        {
                                            if (!permisosFamilias.Select(x => x.familia).Contains(fam))
                                            {
                                                throw new Exception(
                                                    string.Format(@"Bloqueo de familia de insumo '{0}' para el centro de costo '{1}'. No se puede proceder con la salida.", fam, movimiento.cc)
                                                );
                                            }
                                        }
                                    }
                                }
                            }
                            #endregion

                            #region Centro de Costo con presupuesto terminado
                            var centroCosto = ((List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM cc WHERE cc = '{0}'", movimiento.cc)).ToObject<List<dynamic>>())[0];

                            if ((string)centroCosto.st_ppto == "T")
                            {
                                throw new Exception("El centro de costo tiene presupuesto terminado.");
                            }
                            #endregion

                            #region Stand-By
                            var flagMaquinaStandBy = false;
                            //if (vSesiones.sesionEmpresaActual == 2)
                            //{
                            //    flagMaquinaStandBy = checkMaquinaStandBy(movimiento.cc);
                            //}
                            #endregion

                            #region Área-Cuenta en cero
                            if (vSesiones.sesionEmpresaActual == 2)
                            {
                                if (movimiento.detalle.Any(x => x.area == null || x.cuenta == null || x.area == 0 || x.cuenta == 0))
                                {
                                    throw new Exception("Debe capturar el Área-Cuenta.");
                                }
                            }
                            #endregion

                            #region Área-Cuenta 14-1 y 14-2 para Gerardo Hernández, Alán Palomera y Kasia Miranda
                            if (movimiento.detalle.Any(x => x.area == 14 && x.cuenta == 1) || movimiento.detalle.Any(x => x.area == 14 && x.cuenta == 2))
                            {
                                if (usuarioSigoplan.sn_empleado != 30)
                                {
                                    throw new Exception("No se guardó la información. Su usuario no puede dar salida por consumo para las áreas cuenta 14-1 y 14-2.");
                                }
                            }
                            #endregion

                            #region Bloqueo CC-Movimiento
                            if (vSesiones.sesionEmpresaActual == 2)
                            {
                                var bloqueoMovimiento = _context.tblAlm_BloqueoCCMovimiento.FirstOrDefault(x => x.estatus && x.cc == movimiento.cc && x.tipo_mov == 51);

                                if (bloqueoMovimiento != null)
                                {
                                    throw new Exception("No se puede realizar salidas por consumo en un centro de costo genérico, debe realizarse la salida con cargo a un equipo.");
                                }
                            }
                            #endregion
                            #endregion

                            #region Asignación de precios, costos promedio e importes
                            foreach (var det in movimiento.detalle)
                            {
                                var costoPromedio = default(decimal);
                                var costoPromedioEK = consultaCheckProductivo(
                                    string.Format(@"SELECT 
                                                        ROUND(AVG(det.precio), 1) AS costo_promedio 
                                                    FROM si_movimientos_det det 
                                                    WHERE det.almacen = {0} AND det.insumo = {1}", movimiento.almacen, det.insumo)
                                );

                                if (costoPromedioEK != null)
                                {
                                    var costo_promedio = ((List<dynamic>)costoPromedioEK.ToObject<List<dynamic>>())[0].costo_promedio;

                                    if (costo_promedio != null)
                                    {
                                        costoPromedio = Convert.ToDecimal(costo_promedio, CultureInfo.InvariantCulture);
                                    }
                                }

                                det.precio = costoPromedio;
                                det.costo_prom = costoPromedio;
                                det.importe = det.cantidad * det.precio;
                            }
                            #endregion

                            #region Guardar Salida
                            #region Sacar el número del movimiento.
                            var ultimoMovimientoEK = consultaCheckProductivo(
                                string.Format(@"SELECT 
                                                    TOP 1 numero 
                                                FROM si_movimientos 
                                                WHERE almacen = {0} AND tipo_mov = {1} 
                                                ORDER BY numero DESC", movimiento.almacen, 51)
                            );

                            var nuevoNumero = 0;

                            if (ultimoMovimientoEK != null)
                            {
                                nuevoNumero = ((List<SurtidoDetDTO>)ultimoMovimientoEK.ToObject<List<SurtidoDetDTO>>())[0].numero;
                            }
                            #endregion

                            #region Calcular el total del movimiento.
                            decimal total = 0;

                            foreach (var det in movimiento.detalle)
                            {
                                //                                #region Checar existencia para el reseteo del precio y costo promedio
                                //                                decimal precioEntrada = 0;
                                //                                decimal costoPromedioEntrada = 0;
                                //                                decimal existencias = 0;

                                //                                var movimientosEK = consultaCheckProductivo(
                                //                                    string.Format(@"SELECT 
                                //                                                    	mov.tipo_mov, mov.fecha, det.cantidad, det.precio 
                                //                                                    FROM si_movimientos mov 
                                //                                                    	INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                                //                                                    WHERE mov.almacen = {0} AND det.insumo = {1} 
                                //                                                    ORDER BY mov.fecha DESC", movimiento.almacen, det.insumo)
                                //                                );

                                //                                if (movimientosEK != null)
                                //                                {
                                //                                    var movimientos = (List<ExistenciaResetDTO>)movimientosEK.ToObject<List<ExistenciaResetDTO>>();
                                //                                    var entradas = movimientos.Where(x => x.tipo_mov < 50).ToList();
                                //                                    var ultimaEntrada = entradas.OrderByDescending(x => x.fecha).First();
                                //                                    entradas.RemoveAt(0); //Quitar la ultima entrada para calcular las existencias antes de que se realizara ese movimiento.
                                //                                    decimal cantidadEntradas = 0;
                                //                                    foreach (var ent in entradas)
                                //                                    {
                                //                                        cantidadEntradas += ent.cantidad;
                                //                                    }
                                //                                    var salidas = movimientos.Where(x => x.tipo_mov > 50).ToList();
                                //                                    decimal cantidadSalidas = 0;
                                //                                    foreach (var sal in salidas)
                                //                                    {
                                //                                        cantidadSalidas += sal.cantidad;
                                //                                    }
                                //                                    existencias = cantidadEntradas - cantidadSalidas;

                                //                                    if (existencias <= 0)
                                //                                    {
                                //                                        precioEntrada = ultimaEntrada.precio;
                                //                                        costoPromedioEntrada = ultimaEntrada.precio;
                                //                                    }
                                //                                }
                                //                                else
                                //                                {
                                //                                    throw new Exception("No existen movimientos para el insumo \"" + det.insumo + "\" en el almacén \"" + movimiento.almacen + "\".");
                                //                                }
                                //                                #endregion

                                //                                total += det.cantidad * (existencias > 0 ? det.precio : costoPromedioEntrada);

                                var costoPromedio = getCostoPromedioKardex(movimiento.almacen, det.insumo);
                                total += det.cantidad * costoPromedio;
                            }
                            #endregion

                            #region Guardar Salida SIGOPLAN
                            tblAlm_Movimientos nuevaSalida = new tblAlm_Movimientos();

                            nuevaSalida = new tblAlm_Movimientos
                            {
                                almacen = movimiento.almacen,
                                tipo_mov = 51,
                                numero = nuevoNumero + 1,
                                cc = movimiento.cc.ToUpper(),
                                compania = 1,
                                periodo = DateTime.Now.Month,
                                ano = DateTime.Now.Year,
                                orden_ct = 0,
                                frente = 0,
                                fecha = DateTime.Now.Date,
                                proveedor = 0,
                                total = total,
                                estatus = "A",
                                transferida = "N",
                                alm_destino = 0,
                                cc_destino = "",
                                comentarios = movimiento.comentarios,
                                tipo_trasp = "C",
                                tipo_cambio = 1,
                                estatusHabilitado = true,
                                numeroReq = movimiento.numeroRequisicion
                            };

                            _context.tblAlm_Movimientos.Add(nuevaSalida);
                            _context.SaveChanges();
                            #endregion

                            #region Guardar Salida Enkontrol
                            if (total <= 0)
                            {
                                throw new Exception("El total no puede ser igual o menor a cero.");
                            }

                            var count = 0;

                            var consulta = @"INSERT INTO si_movimientos 
                                                (almacen, tipo_mov, numero, cc, compania, periodo, ano, orden_ct, frente, fecha, proveedor, total, estatus, 
                                                transferida, poliza, empleado, alm_destino, cc_destino, comentarios, tipo_trasp, numero_destino, tp, year_poliza, 
                                                mes_poliza, tipo_cambio, hora, fecha_modifica, empleado_modifica, destajista, obra, id_residente, factura, sector_id, 
                                                tc_cc, paquete, tipo_cargo, cargo_destajista, cargo_id_residente, embarque, orden_prod, folio_traspaso, bit_sin_ubicacion) 
                                                VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                            using (var cmd = new OdbcCommand(consulta))
                            {
                                OdbcParameterCollection parameters = cmd.Parameters;

                                parameters.Add("@almacen", OdbcType.Numeric).Value = nuevaSalida.almacen;
                                parameters.Add("@tipo_mov", OdbcType.Numeric).Value = nuevaSalida.tipo_mov;
                                parameters.Add("@numero", OdbcType.Numeric).Value = nuevaSalida.numero;
                                parameters.Add("@cc", OdbcType.Char).Value = nuevaSalida.cc ?? "";
                                parameters.Add("@compania", OdbcType.Numeric).Value = nuevaSalida.compania;
                                parameters.Add("@periodo", OdbcType.Numeric).Value = nuevaSalida.periodo;
                                parameters.Add("@ano", OdbcType.Numeric).Value = nuevaSalida.ano;
                                parameters.Add("@orden_ct", OdbcType.Numeric).Value = nuevaSalida.orden_ct;
                                parameters.Add("@frente", OdbcType.Numeric).Value = nuevaSalida.frente;
                                parameters.Add("@fecha", OdbcType.Date).Value = nuevaSalida.fecha.Date;
                                parameters.Add("@proveedor", OdbcType.Numeric).Value = nuevaSalida.proveedor;
                                parameters.Add("@total", OdbcType.Numeric).Value = total;
                                parameters.Add("@estatus", OdbcType.Char).Value = nuevaSalida.estatus ?? "";
                                parameters.Add("@transferida", OdbcType.Char).Value = nuevaSalida.transferida ?? "";
                                parameters.Add("@poliza", OdbcType.Numeric).Value = 0;
                                parameters.Add("@empleado", OdbcType.Numeric).Value = empleado;
                                parameters.Add("@alm_destino", OdbcType.Numeric).Value = nuevaSalida.alm_destino;
                                parameters.Add("@cc_destino", OdbcType.Char).Value = nuevaSalida.cc_destino ?? "";
                                parameters.Add("@comentarios", OdbcType.Char).Value = nuevaSalida.comentarios ?? "";
                                parameters.Add("@tipo_trasp", OdbcType.Char).Value = nuevaSalida.tipo_trasp ?? "";
                                parameters.Add("@numero_destino", OdbcType.Numeric).Value = DBNull.Value;
                                parameters.Add("@tp", OdbcType.Char).Value = DBNull.Value;
                                parameters.Add("@year_poliza", OdbcType.Numeric).Value = DateTime.Now.Year;
                                parameters.Add("@mes_poliza", OdbcType.Numeric).Value = DateTime.Now.Month;
                                parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = nuevaSalida.tipo_cambio;
                                parameters.Add("@hora", OdbcType.Time).Value = DateTime.Now.TimeOfDay;
                                parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = empleado;
                                parameters.Add("@destajista", OdbcType.Numeric).Value = DBNull.Value;
                                parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                parameters.Add("@id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                parameters.Add("@factura", OdbcType.Numeric).Value = DBNull.Value;
                                parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                parameters.Add("@tc_cc", OdbcType.Numeric).Value = DBNull.Value;
                                parameters.Add("@paquete", OdbcType.Numeric).Value = DBNull.Value;
                                parameters.Add("@tipo_cargo", OdbcType.Numeric).Value = 0;
                                parameters.Add("@cargo_Destajista", OdbcType.Numeric).Value = DBNull.Value;
                                parameters.Add("@cargo_id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                parameters.Add("@embarque", OdbcType.Numeric).Value = DBNull.Value;
                                parameters.Add("@orden_prod", OdbcType.Numeric).Value = DBNull.Value;
                                parameters.Add("@folio_traspaso", OdbcType.Numeric).Value = DBNull.Value;
                                parameters.Add("@bit_sin_ubicacion", OdbcType.Numeric).Value = 0;

                                cmd.Connection = trans.Connection;
                                cmd.Transaction = trans;

                                count += cmd.ExecuteNonQuery();
                            }
                            #endregion

                            var ccDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM cc WHERE cc = '{0}' AND st_ppto != 'T'", movimiento.cc));
                            var ccDesc = (string)(((List<dynamic>)ccDescEK.ToObject<List<dynamic>>())[0].descripcion);
                            var almacenDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", nuevaSalida.almacen));
                            var almacenDesc = (string)(((List<dynamic>)almacenDescEK.ToObject<List<dynamic>>())[0].descripcion);

                            var partidaContador = 1;
                            var partidaContadorEK = 1;

                            foreach (var det in movimiento.detalle)
                            {
                                //                                #region Checar existencia para el reseteo del precio y costo promedio
                                //                                decimal precioEntrada = 0;
                                //                                decimal costoPromedioEntrada = 0;
                                //                                decimal existencias = 0;

                                //                                var movimientosEK = consultaCheckProductivo(
                                //                                    string.Format(@"SELECT 
                                //                                                    	mov.tipo_mov, mov.fecha, det.cantidad, det.precio 
                                //                                                    FROM si_movimientos mov 
                                //                                                    	INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                                //                                                    WHERE mov.almacen = {0} AND det.insumo = {1} 
                                //                                                    ORDER BY mov.fecha DESC", nuevaSalida.almacen, det.insumo)
                                //                                );

                                //                                if (movimientosEK != null)
                                //                                {
                                //                                    var movimientos = (List<ExistenciaResetDTO>)movimientosEK.ToObject<List<ExistenciaResetDTO>>();
                                //                                    var entradas = movimientos.Where(x => x.tipo_mov < 50).ToList();
                                //                                    var ultimaEntrada = entradas.OrderByDescending(x => x.fecha).First();
                                //                                    entradas.RemoveAt(0); //Quitar la ultima entrada para calcular las existencias antes de que se realizara ese movimiento.
                                //                                    decimal cantidadEntradas = 0;
                                //                                    foreach (var ent in entradas)
                                //                                    {
                                //                                        cantidadEntradas += ent.cantidad;
                                //                                    }
                                //                                    //entradas = null;
                                //                                    var salidas = movimientos.Where(x => (int)x.tipo_mov > 50).ToList();
                                //                                    //movimientos = null;
                                //                                    decimal cantidadSalidas = 0;
                                //                                    foreach (var sal in salidas)
                                //                                    {
                                //                                        cantidadSalidas += sal.cantidad;
                                //                                    }
                                //                                    //salidas = null;
                                //                                    existencias = cantidadEntradas - cantidadSalidas;

                                //                                    if (existencias <= 0)
                                //                                    {
                                //                                        precioEntrada = ultimaEntrada.precio;
                                //                                        costoPromedioEntrada = ultimaEntrada.precio;
                                //                                    }
                                //                                }
                                //                                else
                                //                                {
                                //                                    throw new Exception("No existen movimientos para el insumo \"" + det.insumo + "\" en el almacén \"" + nuevaSalida.almacen + "\".");
                                //                                }
                                //                                #endregion

                                var costoPromedio = getCostoPromedioKardex(nuevaSalida.almacen, det.insumo);

                                #region Guardar Salida Detalle SIGOPLAN
                                var partidaMovimientoSIGOPLAN = partidaContador++;

                                var nuevaSalidaDet = new tblAlm_MovimientosDet
                                {
                                    almacen = nuevaSalida.almacen,
                                    tipo_mov = 51,
                                    numero = nuevoNumero + 1,
                                    partida = partidaMovimientoSIGOPLAN,
                                    insumo = det.insumo,
                                    comentarios = det.comentarios,
                                    area = det.area ?? 0,
                                    cuenta = det.cuenta ?? 0,
                                    cantidad = det.cantidad,
                                    precio = costoPromedio, //precio = existencias > 0 ? det.precio : precioEntrada,
                                    importe = det.cantidad * costoPromedio, //importe = existencias > 0 ? det.importe : (det.cantidad * precioEntrada),
                                    id_resguardo = 0,
                                    area_alm = det.area_alm ?? "",
                                    lado_alm = det.lado_alm ?? "",
                                    estante_alm = det.estante_alm ?? "",
                                    nivel_alm = det.nivel_alm ?? "",
                                    transporte = "",
                                    estatusHabilitado = true
                                };

                                _context.tblAlm_MovimientosDet.Add(nuevaSalidaDet);
                                _context.SaveChanges();
                                #endregion

                                #region Guardar Salida Detalle Enkontrol
                                var partidaMovimientoEnkontrol = partidaContadorEK++;

                                var insumoDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM insumos WHERE insumo = {0}", det.insumo));
                                var insumoDesc = (string)(((List<dynamic>)insumoDescEK.ToObject<List<dynamic>>())[0].descripcion);

                                //if (existencias > 0)
                                //{
                                //    if (det.precio <= 0 || det.importe <= 0 || det.costo_prom <= 0)
                                //    {
                                //        throw new Exception("El precio, el importe y el costo promedio no pueden ser igual o menor a cero.");
                                //    }
                                //}
                                //else
                                //{
                                //    if (precioEntrada <= 0 || costoPromedioEntrada <= 0)
                                //    {
                                //        throw new Exception("El precio, el importe y el costo promedio no pueden ser igual o menor a cero.");
                                //    }
                                //}

                                if (costoPromedio <= 0)
                                {
                                    throw new Exception("El precio, el importe y el costo promedio no pueden ser igual o menor a cero.");
                                }

                                var consultaDet = @"INSERT INTO si_movimientos_det 
                                         (almacen, tipo_mov, numero, partida, insumo, comentarios, area, cuenta, cantidad, precio, importe, 
                                         partida_oc, costo_prom, obra, manzana_ini, lote_ini, interior_ini, manzana_fin, lote_fin, interior_fin, 
                                         remision, sector_id, id_resguardo, area_alm, lado_alm, estante_alm, nivel_alm, fecha_fisico) 
                                         VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                using (var cmd = new OdbcCommand(consultaDet))
                                {
                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@almacen", OdbcType.Numeric).Value = det.almacen;
                                    parameters.Add("@tipo_mov", OdbcType.Numeric).Value = det.tipo_mov;
                                    parameters.Add("@numero", OdbcType.Numeric).Value = nuevoNumero + 1;
                                    parameters.Add("@partida", OdbcType.Numeric).Value = partidaMovimientoEnkontrol;
                                    parameters.Add("@insumo", OdbcType.Numeric).Value = det.insumo;
                                    parameters.Add("@comentarios", OdbcType.Char).Value = det.comentarios ?? "";
                                    parameters.Add("@area", OdbcType.Numeric).Value = det.area ?? 0;
                                    parameters.Add("@cuenta", OdbcType.Numeric).Value = det.cuenta ?? 0;
                                    parameters.Add("@cantidad", OdbcType.Numeric).Value = det.cantidad;
                                    parameters.Add("@precio", OdbcType.Numeric).Value = costoPromedio; //parameters.Add("@precio", OdbcType.Numeric).Value = existencias > 0 ? det.precio : precioEntrada;
                                    parameters.Add("@importe", OdbcType.Numeric).Value = det.cantidad * costoPromedio; //parameters.Add("@importe", OdbcType.Numeric).Value = existencias > 0 ? det.importe : det.cantidad * precioEntrada;
                                    parameters.Add("@partida_oc", OdbcType.Numeric).Value = det.partida_oc ?? 0;
                                    parameters.Add("@costo_prom", OdbcType.Numeric).Value = costoPromedio; //parameters.Add("@costo_prom", OdbcType.Numeric).Value = existencias > 0 ? det.costo_prom : costoPromedioEntrada;
                                    parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@manzana_ini", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@lote_ini", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@interior_ini", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@manzana_fin", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@lote_fin", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@interior_fin", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@remision", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@id_resguardo", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@area_alm", OdbcType.Char).Value = det.area_alm ?? "";
                                    parameters.Add("@lado_alm", OdbcType.Char).Value = det.lado_alm ?? "";
                                    parameters.Add("@estante_alm", OdbcType.Char).Value = det.estante_alm ?? "";
                                    parameters.Add("@nivel_alm", OdbcType.Char).Value = det.nivel_alm ?? "";
                                    parameters.Add("@fecha_fisico", OdbcType.Date).Value = DBNull.Value;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;

                                    count += cmd.ExecuteNonQuery();

                                    movSalidas.Add(new salidasAlmacenDTO
                                    {
                                        centroCosto = movimiento.cc + "-" + ccDesc,
                                        folioSalida = (nuevoNumero + 1).ToString(),
                                        almacen = nuevaSalida.almacen + "-" + almacenDesc,
                                        fechaSalida = nuevaSalida.fecha.Date,
                                        partida = det.partida,
                                        insumo = det.insumo + "-" + insumoDesc ?? "",
                                        areaCuenta = (det.area ?? 0) + "-" + (det.cuenta ?? 0),
                                        referencia = "",
                                        remision = "",
                                        cantidad = det.cantidad,
                                        precio = costoPromedio, //precio = existencias > 0 ? det.precio : precioEntrada,
                                        importe = det.cantidad * costoPromedio, //importe = existencias > 0 ? det.cantidad * det.precio : det.cantidad * precioEntrada,
                                        //comentarios = salDet.comentarios != null ? (string)salDet.comentarios : "",
                                        comentarios = movimiento.comentarios ?? "", //Se coloca el comentario general del movimiento porque en el reporte no toma el comentario por partida.
                                        ordenCompra = nuevaSalida.orden_ct.ToString(),
                                        proveedor = "",
                                        direccion = "",
                                        ciudad = "",
                                        telefonos = "",

                                        area_alm = det.area_alm ?? "",
                                        lado_alm = det.lado_alm ?? "",
                                        estante_alm = det.estante_alm ?? "",
                                        nivel_alm = det.nivel_alm ?? ""
                                    });
                                }

                                #region Actualizar Tablas Acumula
                                var objAcumula = new MovimientoDetalleEnkontrolDTO
                                {
                                    insumo = det.insumo,
                                    cantidad = det.cantidad,
                                    precio = costoPromedio, //precio = existencias > 0 ? det.precio : precioEntrada,
                                    tipo_mov = det.tipo_mov,
                                    costo_prom = costoPromedio, //costo_prom = existencias > 0 ? det.costo_prom : costoPromedioEntrada
                                };

                                actualizarAcumula(nuevaSalida.almacen, nuevaSalida.cc, objAcumula, dbSigoplanTransaction, trans);
                                #endregion
                                #endregion
                            }
                            #endregion

                            #region Actualizar consumido de requisición por partida
                            var partidasAgrupadas = movimiento.detalle.GroupBy(x => x.partidaRequisicion).Select(grupo => new
                            {
                                partidaRequisicion = grupo.Key,
                                partidasMovimiento = grupo.ToList()
                            }).ToList();
                            var partidasRequisicion = (List<dynamic>)consultaCheckProductivo(
                                string.Format(@"SELECT * FROM so_requisicion_det WHERE cc = '{0}' AND numero = {1}", movimiento.cc, movimiento.numeroRequisicion)
                            ).ToObject<List<dynamic>>();

                            foreach (var part in partidasAgrupadas)
                            {
                                var partidaRequisicion = partidasRequisicion.FirstOrDefault(x => (int)x.partida == part.partidaRequisicion);
                                var surtidoPartida = _context.tblCom_SurtidoDet.Where(x =>
                                    x.cc == movimiento.cc && x.numero == movimiento.numeroRequisicion && x.partidaRequisicion == part.partidaRequisicion
                                ).ToList();
                                var cantidadMovimiento = part.partidasMovimiento.Sum(x => x.cantidad);
                                var cantidadSurtido = surtidoPartida.Sum(x => x.cantidad);

                                if (cantidadMovimiento >= cantidadSurtido)
                                {
                                    foreach (var sur in surtidoPartida)
                                    {
                                        sur.estadoSurtido = "CONSUMIDO"; //Surtido
                                        _context.SaveChanges();
                                    }
                                }
                                else if (cantidadSurtido > cantidadMovimiento)
                                {
                                    foreach (var sur in surtidoPartida)
                                    {
                                        sur.estadoSurtido = "PARCIAL CONSUMIDO"; //Parcial
                                        _context.SaveChanges();
                                    }
                                }
                            }
                            #endregion

                            #region Checar salida de insumos resguardables para su entrada por inventario físico
                            bool flagEntradaInvFisico = false;
                            List<int> listaAlmacenesPrincipales = _context.tblAlm_RelacionAlmacenPrincipalVirtual.Where(x => x.estatus).Select(x => x.almacenPrincipal).ToList(); //Lista de almacenes donde aplica la regla de entrada para los insumos resguardables.
                            int almacenVirtual = 0;
                            List<MovimientoDetalleEnkontrolDTO> listaPartidasEntrada = new List<MovimientoDetalleEnkontrolDTO>();

                            if (listaAlmacenesPrincipales.Contains(movimiento.almacen))
                            {
                                almacenVirtual = _context.tblAlm_RelacionAlmacenPrincipalVirtual.FirstOrDefault(x => x.estatus && x.almacenPrincipal == movimiento.almacen).almacenVirtual;
                                List<string> listaFamiliasResguardables = _context.tblAlm_FamiliasResguardables.Where(x => x.estatus).Select(x => x.familia).ToList();
                                int partidaEntrada = 1;

                                foreach (var det in movimiento.detalle)
                                {
                                    string familia = det.insumo.ToString().Substring(0, 3);

                                    if (listaFamiliasResguardables.Contains(familia))
                                    {
                                        flagEntradaInvFisico = true; //Con que coincida una partida ya se toma como true el proceso de cargar su entrada por inventario físico en el frontend.

                                        det.partida = partidaEntrada;
                                        det.precio = 1; //Precio en 1 por ser una entrada por inventario físico.

                                        listaPartidasEntrada.Add(det);
                                        partidaEntrada++;
                                    }
                                }

                                var ultimaEntradaInventarioFisicoEK = consultaCheckProductivo(
                                    string.Format(@"SELECT TOP 1 * FROM si_movimientos WHERE almacen = {0} AND tipo_mov = 5 ORDER BY numero DESC", almacenVirtual)
                                );

                                if (ultimaEntradaInventarioFisicoEK != null)
                                {
                                    var ultimaEntradaInventarioFisico = (List<dynamic>)ultimaEntradaInventarioFisicoEK.ToObject<List<dynamic>>();

                                    result.Add("numeroEntradaInvFisico", (int)ultimaEntradaInventarioFisico[0].numero + 1);
                                }
                                else
                                {
                                    result.Add("numeroEntradaInvFisico", 1);
                                }
                            }

                            result.Add("flagEntradaInvFisico", flagEntradaInvFisico);
                            result.Add("almacenEntradaInvFisico", almacenVirtual);
                            result.Add("centroCostoEntradaInvFisico", movimiento.cc);
                            result.Add("listaPartidasEntradaInvFisico", listaPartidasEntrada);
                            #endregion

                            #region ACTIVACION DE EQUIPO DE STANDBY
                            ActivarEconomicoPorAccionRealizada
                                (
                                    movimiento.cc,
                                    null,
                                    AccionActivacionEconomicoEnum.SALIDA_ALMACEN,
                                    new { cc = movimiento.cc, almacen = movimiento.almacen, numero = movimiento.numero }, true);
                            #endregion

                            trans.Commit();
                            dbSigoplanTransaction.Commit();

                            result.Add("salidas", movSalidas);
                            result.Add("flagMaquinaStandBy", flagMaquinaStandBy);
                            result.Add(SUCCESS, true);
                        }
                        catch (Exception e)
                        {
                            trans.Rollback();
                            dbSigoplanTransaction.Rollback();

                            LogError(12, 0, "AlmacenController", "guardarSalidaConsumoOrigen", e, AccionEnum.AGREGAR, 0, movimiento);

                            result.Add("salidas", null);
                            result.Add(MESSAGE, e.Message);
                            result.Add(SUCCESS, false);
                        }
                    }
                }
            }

            return result;
        }
        #endregion

        private bool ActivarEconomicoPorAccionRealizada(string numeroEconomico, int? idEconomico, AccionActivacionEconomicoEnum accion, object objeto, bool buscarEnEnkontrol = false)
        {
            if (vSesiones.sesionEmpresaActual != (int)EmpresaEnum.Arrendadora)
            {
                return false;
            }

            tblM_CatMaquina maquina = null;

            if (buscarEnEnkontrol)
            {
                if (!string.IsNullOrEmpty(numeroEconomico))
                {
                    var queryEk = new OdbcConsultaDTO();
                    queryEk.consulta = "SELECT * FROM cc WHERE cc = ?";
                    queryEk.parametros.Add(new OdbcParameterDTO
                    {
                        nombre = "cc",
                        tipo = OdbcType.NVarChar,
                        valor = numeroEconomico
                    });
                    var ccDescripcion = _contextEnkontrol.Select<dynamic>(vSesiones.sesionAmbienteEnkontrolAdm, queryEk).FirstOrDefault();

                    if (ccDescripcion != null)
                    {
                        numeroEconomico = (string)ccDescripcion.descripcion;
                    }
                }
                else
                {
                    throw new Exception("Se tiene que indicar un CC");
                }
            }

            if (!string.IsNullOrEmpty(numeroEconomico))
            {
                maquina = _context.tblM_CatMaquina.FirstOrDefault(x => x.noEconomico == numeroEconomico && x.estatus == 2); //x.estatus == 2 significa que esta en StandBy
            }
            else if (idEconomico.HasValue)
            {
                maquina = _context.tblM_CatMaquina.FirstOrDefault(x => x.id == idEconomico.Value && x.estatus == 2); //x.estatus == 2 significa que esta en StandBy
            }

            if (maquina != null)
            {
                if (_context.tblM_STB_EconomicoBloqueado.Any(x => x.noEconomico == maquina.noEconomico && x.registroActivo))
                {
                    throw new Exception("No es posible realizar la acción puesto que el equipo referenciado se encuentra bloqueado por estatus StandBy");
                }

                var standBy = _context.tblM_STB_CapturaStandBy
                    .FirstOrDefault(x =>
                        x.noEconomicoID == maquina.id &&
                        x.estatus == 2 //Autorizado
                    );

                if (standBy != null)
                {
                    string motivoLiberacion = "";
                    maquina.estatus = 1;
                    standBy.estatus = 4; //Liberado
                    standBy.usuarioLiberaID = vSesiones.sesionUsuarioDTO.id;
                    standBy.fechaLibera = DateTime.Now;
                    standBy.comentarioLiberacion = "Se liberó por sistema - ";
                    switch (accion)
                    {
                        case AccionActivacionEconomicoEnum.ELABORACION_REQUISICION:
                            standBy.comentarioLiberacion += "Se realizó una requisición";
                            motivoLiberacion = "elaboración de requisición";
                            break;
                        case AccionActivacionEconomicoEnum.ELABORACION_ORDEN_COMPRA:
                            standBy.comentarioLiberacion += "Se realizó una orden de compra";
                            motivoLiberacion = "elaboración de orden de compra";
                            break;
                        case AccionActivacionEconomicoEnum.CAPTURA_HOROMETROS:
                            standBy.comentarioLiberacion += "Se capturó horómetros";
                            motivoLiberacion = "captura de horómetros";
                            break;
                        case AccionActivacionEconomicoEnum.CAPTURA_COMBUSTIBLE:
                            standBy.comentarioLiberacion += "Se capturó combustible";
                            motivoLiberacion = "captura de combustible";
                            break;
                        case AccionActivacionEconomicoEnum.CAPTURA_ACEITE:
                            standBy.comentarioLiberacion += "Se capturó aceite";
                            motivoLiberacion = "captura de aceite";
                            break;
                        case AccionActivacionEconomicoEnum.RECEPCION_FACTURA:
                            standBy.comentarioLiberacion += "Por recepción de factura";
                            motivoLiberacion = "recepción de factura";
                            break;
                        case AccionActivacionEconomicoEnum.SALIDA_ALMACEN:
                            standBy.comentarioLiberacion += "Por salida de almacén";
                            motivoLiberacion = "salida de almacén";
                            break;
                    }

                    var bitacora = new tblM_STB_BitacoraActivacionEconomico();
                    bitacora.economicoId = maquina.id;
                    bitacora.fechaAccion = DateTime.Now;
                    bitacora.motivoActivacionId = (int)accion;
                    bitacora.usuarioAccionId = vSesiones.sesionUsuarioDTO.id;
                    bitacora.objeto = JsonUtils.convertNetObjectToJson(objeto);
                    _context.tblM_STB_BitacoraActivacionEconomico.Add(bitacora);
                    _context.SaveChanges();

                    var correos = new List<string>();
                    var correosCC = new List<string>();

                    var adminsGerentes = _context.Select<AutorizanteDTO>(new DapperDTO
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = @"SELECT
                                                u.id,
                                                u.nombre,
                                                u.apellidoPaterno,
                                                u.apellidoMaterno,
                                                u.correo,
                                                c.cc as ac,
                                                a.perfilAutorizaID
                                            FROM
                                                tblP_Autoriza AS a
                                            INNER JOIN
                                                tblP_Usuario AS u ON u.id = a.usuarioID
                                            INNER JOIN
                                                tblP_CC_Usuario AS c ON c.id = a.cc_usuario_ID
                                            WHERE
                                                u.estatus = 1 AND
                                                a.perfilAutorizaID in (5, 1) AND /*5 == Admin, 1 == Gerente*/
                                                c.cc = @paramCC",
                        parametros = new { paramCC = standBy.ccActual }
                    });

                    correosCC.AddRange(adminsGerentes.Select(x => x.correo).Distinct().ToList());

                    correos.Add("oscar.roman@construplan.com.mx");
                    correosCC.Add("g.reina@construplan.com.mx");
                    correosCC.Add("e.encinas@construplan.com.mx");
                    correosCC.Add("luis.fortino@construplan.com.mx");
                    correosCC.Add("martin.valle@construplan.com.mx");
                    correosCC.Add("alan.palomera@construplan.com.mx");
                    correosCC.Add("diego.gonzalez@construplan.com.mx");
#if DEBUG
                    correos = new List<string> { "martin.zayas@construplan.com.mx" };
                    correosCC = new List<string> { "martin.zayas@construplan.com.mx" };
#endif
                    var cc = _context.tblP_CC.FirstOrDefault(x => x.areaCuenta == maquina.centro_costos);
                    var ccDescripcion = cc != null ? cc.descripcion.Trim() : maquina.centro_costos;
                    string asunto = "El equipo " + maquina.noEconomico + " ha sido liberado de StandBy por " + motivoLiberacion;
                    string contenido = string.Format(@"
                        <p>Buen día.</p>
                        <p>El equipo <strong>{0}</strong> ha sido liberado de StandBy por {1} </p>
                        <p>El equipo se encuentra en <strong>{2}.</strong>", maquina.noEconomico, motivoLiberacion, ccDescripcion);

                    var envioCorrecto = EnviarCorreo(new Infrastructure.DTO.CorreoDTO
                    {
                        asunto = asunto,
                        cuerpo = contenido,
                        correos = correos,
                        correosCC = correosCC
                    });

                    if (!envioCorrecto)
                    {
                        throw new Exception("Error al enviar correo de liberación de StandBy");
                    }

                    return true;
                }
                else
                {
                    throw new Exception("El económico esta en StandBy pero no se encuentra su registro autorizado");
                }
            }

            return false;
        }

        private bool EnviarCorreo(Infrastructure.DTO.CorreoDTO correo)
        {
            if (correo.correos == null || correo.correos.Count == 0 || string.IsNullOrEmpty(correo.asunto) || string.IsNullOrEmpty(correo.cuerpo))
            {
                return false;
            }

            MailMessage mailMessage = new MailMessage();

            correo.correos.ForEach(c => mailMessage.To.Add(new MailAddress(c)));
            correo.correosCC.ForEach(c => mailMessage.CC.Add(new MailAddress(c)));
            correo.archivos.ForEach(archivo => mailMessage.Attachments.Add(archivo));

            mailMessage.IsBodyHtml = true;
            mailMessage.From = new MailAddress("alertas.sigoplan@construplan.com.mx");
            mailMessage.Subject = correo.asunto;
            mailMessage.Body = string.Format(@"
                {0} 
                <p><o:p>&nbsp;</o:p></p>
                <p><o:p>&nbsp;</o:p></p>
                <p>Se informa que esta es un correo autogenerado por el sistema SIGOPLAN (<a href='http://sigoplan.construplan.com.mx/'>http://sigoplan.construplan.com.mx</a>). No es necesario dar una respuesta. Gracias.</p>
            ", correo.cuerpo);

            SmtpClient smptConfig = new SmtpClient();
            smptConfig.Send(mailMessage);
            smptConfig.Dispose();

            return true;
        }

        public bool checarUbicacionesValidas(List<MovimientoDetalleEnkontrolDTO> entradas)
        {
            if ((MainContextEnum)vSesiones.sesionEmpresaActual == MainContextEnum.Construplan || (MainContextEnum)vSesiones.sesionEmpresaActual == MainContextEnum.Arrendadora)
            {
                foreach (var ent in entradas)
                {
                    var checkUbicacionValida = consultaCheckProductivo(
                        string.Format(@"SELECT 
                                            * 
                                        FROM si_matriz_ubicaciones 
                                        WHERE 
                                            almacen = {0} AND 
                                            area_alm = '{1}' AND 
                                            lado_alm = '{2}' AND 
                                            estante_alm = '{3}' AND 
                                            nivel_alm = '{4}'", ent.almacen, ent.area_alm, ent.lado_alm, ent.estante_alm, ent.nivel_alm)
                    );

                    if (checkUbicacionValida == null)
                    {
                        throw new Exception("Debe capturar ubicaciones válidas para el almacén.");
                    }
                }
            }
            else if ((MainContextEnum)vSesiones.sesionEmpresaActual == MainContextEnum.Colombia)
            {
                foreach (var ent in entradas)
                {
                    var checkUbicacionValida = _context.tblAlm_Ubicacion.Where(x => x.registroActivo && x.almacen == ent.almacen).ToList().Select(x => new HistorialInsumoDTO
                {
                    almacen = x.almacen,
                    area_alm = x.area_alm,
                    lado_alm = x.lado_alm,
                    estante_alm = x.estante_alm,
                    nivel_alm = x.nivel_alm
                }).ToList();

                    if (checkUbicacionValida == null)
                    {
                        throw new Exception("Debe capturar ubicaciones válidas para el almacén.");
                    }
                }
            }
            else
            {
                //PERU
            }


            return true;
        }

        public List<HistorialInsumoDTO> getHistorialInsumo(int almacen, int insumo)
        {
            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan || vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
            {
                var historialEK = consultaCheckProductivo(
                    string.Format(@"SELECT 
                                    det.almacen, 
                                    alm.descripcion AS almacenDesc, 
                                    det.insumo, 
                                    ins.descripcion AS insumoDesc, 
                                    det.area_alm, 
                                    det.lado_alm, 
                                    det.estante_alm, 
                                    det.nivel_alm 
                                FROM si_movimientos mov 
                                    INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                                    INNER JOIN si_almacen alm ON det.almacen = alm.almacen 
                                    INNER JOIN insumos ins ON det.insumo = ins.insumo 
                                    INNER JOIN si_matriz_ubicaciones mat ON 
                                        det.almacen = mat.almacen AND 
                                        det.area_alm = mat.area_alm AND 
                                        det.lado_alm = mat.lado_alm AND 
                                        det.estante_alm = mat.estante_alm AND 
                                        det.nivel_alm = mat.nivel_alm 
                                WHERE mov.almacen = {0} AND det.insumo = {1} 
                                GROUP BY det.almacen, alm.descripcion, det.insumo, ins.descripcion, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm", almacen, insumo)
                );

                if (historialEK != null)
                {
                    var historial = (List<HistorialInsumoDTO>)historialEK.ToObject<List<HistorialInsumoDTO>>();

                    return historial;
                }
                else
                {
                    return new List<HistorialInsumoDTO>();
                }
            }
            else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
            {
                var historialEK = _contextEnkontrol.Select<MovimientoDetalleEnkontrolDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                {
                    consulta = string.Format(@"SELECT 
                                    det.almacen, 
                                    det.insumo, 
                                    alm.descripcion AS almacenDesc, 
                                    ins.descripcion AS insumoDesc
                                FROM si_movimientos mov 
                                    INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                                    INNER JOIN si_almacen alm ON det.almacen = alm.almacen 
                                    INNER JOIN insumos ins ON det.insumo = ins.insumo 
                                WHERE mov.almacen = {0} AND det.insumo = {1} 
                                GROUP BY det.almacen, alm.descripcion, det.insumo, ins.descripcion", almacen, insumo)
                });

                if (historialEK != null && historialEK.Count() > 0)
                {
                    //var historial = (List<HistorialInsumoDTO>)historialEK.ToObject<List<HistorialInsumoDTO>>();
                    string descInsumo = historialEK[0].insumoDesc;
                    string descAlmacen = historialEK[0].almacenDesc;

                    var lstMovDetSP = _context.tblAlm_MovimientosDet.Where(e => e.almacen == almacen && e.insumo == insumo).GroupBy(x => new { x.almacen, x.insumo, x.area_alm, x.lado_alm, x.estante_alm, x.nivel_alm }).Select(x => new HistorialInsumoDTO
                    {
                        almacen = x.Key.almacen,
                        insumo = x.Key.insumo,
                        area_alm = x.Key.area_alm,
                        lado_alm = x.Key.lado_alm,
                        estante_alm = x.Key.estante_alm,
                        nivel_alm = x.Key.nivel_alm,
                        almacenDesc = descAlmacen,
                        insumoDesc = descInsumo,
                    }).ToList();

                    return lstMovDetSP;
                }
                else
                {
                    return new List<HistorialInsumoDTO>();
                }
            }
            else
            {
                var listaUbicaciones = new List<HistorialInsumoDTO>();

                using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                {
                    var listaInsumosStarsoft = _starsoft.MAEART.ToList();

                    listaUbicaciones = _context.tblAlm_MovimientosDet.Where(x => x.estatusHabilitado && x.almacen == almacen && x.insumo == insumo).ToList().Select(x => new HistorialInsumoDTO
                    {
                        almacen = x.almacen,
                        insumo = x.insumo,
                        insumoDesc = listaInsumosStarsoft.Where(y => y.ACODIGO == ("0" + x.insumo)).Select(z => z.ADESCRI).FirstOrDefault(),
                        area_alm = x.area_alm,
                        lado_alm = x.lado_alm,
                        estante_alm = x.estante_alm,
                        nivel_alm = x.nivel_alm
                    }).GroupBy(x => new { x.almacen, x.insumo, x.insumoDesc, x.area_alm, x.lado_alm, x.estante_alm, x.nivel_alm }).Select(x => new HistorialInsumoDTO
                    {
                        almacen = x.Key.almacen,
                        insumo = x.Key.insumo,
                        insumoDesc = x.Key.insumoDesc,
                        area_alm = x.Key.area_alm,
                        lado_alm = x.Key.lado_alm,
                        estante_alm = x.Key.estante_alm,
                        nivel_alm = x.Key.nivel_alm
                    }).ToList();
                }

                return listaUbicaciones;
            }

        }

        public List<EmpleadoPendienteLiberacionDTO> getEmpleadosPendientesLiberacion()
        {
            //            var empleadosEK = consultaCheckProductivoRHConstruplan(
            //                string.Format(@"SELECT 
            //                                    baj.clave_empleado, 
            //                                    (emp.nombre + ' ' + emp.ape_paterno + ' ' + emp.ape_materno) AS nombreEmpleado, 
            //                                    emp.rfc, 
            //                                    emp.cc_contable AS cc, 
            //                                    c.descripcion AS ccDesc, 
            //                                    p.descripcion AS puestoDesc 
            //                                FROM sn_empl_baja baj 
            //                                    INNER JOIN sn_empleados emp ON baj.clave_empleado = emp.clave_empleado 
            //                                    INNER JOIN cc c ON emp.cc_contable = c.cc 
            //                                    LEFT JOIN si_puestos p ON emp.puesto = p.puesto 
            //                                WHERE baj.estatus = 'A' AND baj.estatus_inventario = 'A' 
            //                                ORDER BY baj.clave_empleado DESC"));

            //            if (empleadosEK != null)
            //            {
            //                var empleados = (List<EmpleadoPendienteLiberacionDTO>)empleadosEK.ToObject<List<EmpleadoPendienteLiberacionDTO>>();

            //                return empleados;
            //            }
            //            else
            //            {
            //                return new List<EmpleadoPendienteLiberacionDTO>();
            //            }

            var listEmpleados = _context.Select<EmpleadoPendienteLiberacionDTO>(new DapperDTO
            {
                baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                consulta = @"
                    SELECT
	                    a.id as idBaja,
	                    a.numeroEmpleado as clave_empleado,
	                    (emp.nombre + ' ' + emp.ape_paterno + ' ' + emp.ape_materno) AS nombreEmpleado,
	                    emp.rfc,
	                    a.cc AS cc,
	                    a.descripcionCC AS ccDesc,
	                    p.puesto,
	                    p.descripcion AS puestoDesc,
	                    a.fechaBaja
                    FROM tblRH_Baja_Registro a
	                    INNER JOIN
		                    (
			                    SELECT
				                    baj.numeroEmpleado, MAX(baj.fechaBaja) AS fechaBaja
			                    FROM tblRH_Baja_Registro baj
			                    WHERE (baj.est_inventario = 'P' AND registroActivo = 1 AND baj.est_baja = 'A') OR (baj.est_inventario = 'P' AND registroActivo = 1 AND baj.esAnticipada = 1)
			                    GROUP BY baj.numeroEmpleado
		                    ) b ON a.numeroEmpleado = b.numeroEmpleado AND a.fechaBaja = b.fechaBaja AND a.registroActivo = 1
	                    INNER JOIN tblRH_EK_Empleados emp ON a.numeroEmpleado = emp.clave_empleado
	                    INNER JOIN tblP_CC c ON emp.cc_contable = c.cc
	                    LEFT JOIN tblRH_EK_Puestos p ON emp.puesto = p.puesto
                    ORDER BY a.numeroEmpleado DESC",
            });

            var queryAnterior = @"SELECT 
                                baj.id as idBaja,  
                                baj.numeroEmpleado as clave_empleado, 
                                (emp.nombre + ' ' + emp.ape_paterno + ' ' + emp.ape_materno) AS nombreEmpleado, 
                                emp.rfc, 
                                emp.cc_contable AS cc, 
                                c.descripcion AS ccDesc, 
                                p.descripcion AS puestoDesc 
                            FROM tblRH_Baja_Registro baj 
                                INNER JOIN tblRH_EK_Empleados emp ON baj.numeroEmpleado = emp.clave_empleado 
                                INNER JOIN tblP_CC c ON emp.cc_contable = c.cc 
                                LEFT JOIN tblRH_EK_Puestos p ON emp.puesto = p.puesto 
                            WHERE baj.est_baja = 'A' AND baj.est_inventario = 'P' AND registroActivo = 1  
                            ORDER BY baj.numeroEmpleado DESC";

            return listEmpleados ?? new List<EmpleadoPendienteLiberacionDTO>();
        }

        private MainContextEnum getContextEmpresa()
        {
            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
            {
                return MainContextEnum.Construplan;
            }
            else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
            {
                return MainContextEnum.Arrendadora;
            }
            else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
            {
                return MainContextEnum.PERU;
            }
            else
            {
                throw new Exception("Empresa distinta a Construplan, Arrendadora y Perú.");
            }
        }

        public void guardarBajas(List<EmpleadoPendienteLiberacionDTO> empleados)
        {
            using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
            {
                #region MIGRADO

                //                using (var con = checkConexionProductivoRHConstruplan())
                //                {
                //                    using (var trans = con.BeginTransaction())
                //                    {
                //                        try
                //                        {
                //                            var count = 0;

                //                            foreach (var emp in empleados)
                //                            {
                //                                var ultimaBaja = ((List<dynamic>)ContextNominaConstruplan.Where(
                //                                    string.Format(@"SELECT TOP 1 * FROM sn_empl_baja WHERE clave_empleado = {0} ORDER BY fecha_baja DESC", emp.clave_empleado)
                //                                ).ToObject<List<dynamic>>())[0];

                //                                var consulta = @"
                //                                    UPDATE sn_empl_baja 
                //                                    SET estatus_inventario = ? 
                //                                    WHERE clave_empleado = ? AND fecha_baja = ?";

                //                                using (var cmd = new OdbcCommand(consulta))
                //                                {
                //                                    OdbcParameterCollection parameters = cmd.Parameters;

                //                                    parameters.Add("@estatus_inventario", OdbcType.Char).Value = "P";

                //                                    parameters.Add("@clave_empleado", OdbcType.Decimal).Value = emp.clave_empleado;
                //                                    parameters.Add("@fecha_baja", OdbcType.Date).Value = (DateTime)ultimaBaja.fecha_baja;

                //                                    cmd.Connection = trans.Connection;
                //                                    cmd.Transaction = trans;

                //                                    count += cmd.ExecuteNonQuery();
                //                                }
                //                            }

                //                            if (count == empleados.Count)
                //                            {
                //                                trans.Commit();
                //                                dbSigoplanTransaction.Commit();
                //                            }
                //                            else
                //                            {
                //                                throw new Exception();
                //                            }
                //                        }
                //                        catch (Exception)
                //                        {
                //                            trans.Rollback();
                //                            dbSigoplanTransaction.Rollback();
                //                        }
                //                    }
                //                }
                #endregion

                try
                {
                    string personasLiberadasString = "";
                    List<string> lstCC = new List<string>();

                    foreach (var emp in empleados)
                    {
                        var objBaja = _context.tblRH_Baja_Registro.FirstOrDefault(e => e.registroActivo && e.id == emp.idBaja);

                        if (objBaja != null)
                        {
                            lstCC.Add(objBaja.cc);

                            objBaja.est_inventario = "A";
                            objBaja.est_inventario_usuario = (vSesiones.sesionUsuarioDTO.cveEmpleado != "" && vSesiones.sesionUsuarioDTO.cveEmpleado != null) ? Int32.Parse(vSesiones.sesionUsuarioDTO.cveEmpleado) : 0;
                            objBaja.est_inventario_fecha = DateTime.Now;
                            objBaja.est_inventario_comentario = emp.comentario ?? "";
                            objBaja.est_inventario_firma = GlobalUtils.CrearFirmaDigital(objBaja.id, DocumentosEnum.LiberacionContabilidad, vSesiones.sesionUsuarioDTO.id);
                            _context.SaveChanges();

                            string bodyAnticipada = "";

                            if (objBaja.esAnticipada)
                            {
                                bodyAnticipada = " - ( *BAJA ANTICIPADA*. <b>Esperar a la autorizacion de responsable del CC</b> )";
                            }

                            if (objBaja.est_compras == "A" && objBaja.est_inventario == "A" && objBaja.est_contabilidad == "A")
                            {
                                personasLiberadasString += objBaja.numeroEmpleado + " " + objBaja.nombre + " - " + objBaja.cc + " " + objBaja.descripcionCC + " - " + objBaja.est_contabilidad_comentario + bodyAnticipada + "<br/>";
                            }
                        }
                    }
                    dbSigoplanTransaction.Commit();

                    #region Enviar Correo a Despacho si se encuentra liberada por las 4 areas
                    if (personasLiberadasString != "")
                    {
                        string asunto = "BAJAS LIBERADAS AL " + DateTime.Now.ToShortDateString();
                        string mensaje = "Las siguientes personas han sido liberadas por las 3 áreas:<br/><br/>";
                        string cuerpoCorreo = mensaje + personasLiberadasString;
                        //List<string> correo = new List<string> { "despacho@construplan.com.mx" };

                        List<string> correos = new List<string>();

                        List<int> lstNotificantes = _context.tblRH_Notis_RelConceptoUsuario.
                            Where(e => lstCC.Contains(e.cc) && (e.idConcepto == (int)ConceptosNotificantesEnum.Almacen || e.idConcepto == (int)ConceptosNotificantesEnum.ResponsableCC)).
                            Select(e => e.idUsuario).ToList();

                        foreach (var usu in lstNotificantes)
                        {
                            correos.Add(_context.tblP_Usuario.FirstOrDefault(x => x.id == usu).correo);
                        }

                        List<string> lstCorreoGenerales = _context.tblRH_Notis_RelConceptoCorreo.
                            Where(e => (e.cc == "*" || lstCC.Contains(e.cc)) && (e.idConcepto == (int)ConceptosNotificantesEnum.Almacen || e.idConcepto == (int)ConceptosNotificantesEnum.ResponsableCC)).
                            Select(e => e.correo).ToList();

                        foreach (var correo in lstCorreoGenerales)
                        {
                            correos.Add(correo);
                        }

                        if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan
                            || vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora
                            || vSesiones.sesionEmpresaActual == (int)EmpresaEnum.GCPLAN)
                        {
                            correos.AddRange(new List<string> 
                            { 
                                "despacho@construplan.com.mx",
                            });
                        }

#if DEBUG
                        //correos = new List<string> { "oscar.valencia@construplan.com.mx" };
                        correos = new List<string> { "miguel.buzani@construplan.com.mx" };
#endif

                        //var correoEnviado = GlobalUtils.sendEmail(asunto, cuerpoCorreo, correos);

                        //if (!correoEnviado)
                        //{
                        //    LogError(0, 0, "NominaController", "guardarBajas_enviarCorreo", null, AccionEnum.ACTUALIZAR, 0, empleados);
                        //}
                    }
                    #endregion
                }
                catch (Exception)
                {
                    dbSigoplanTransaction.Rollback();
                    throw;
                }

            }
        }

        public List<HistorialInsumoDTO> getCatalogoUbicaciones(int almacenID)
        {
            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan || vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
            {
                var catalogoEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_matriz_ubicaciones WHERE almacen = {0}", almacenID));

                if (catalogoEK != null)
                {
                    var catalogo = (List<HistorialInsumoDTO>)catalogoEK.ToObject<List<HistorialInsumoDTO>>();

                    return catalogo;
                }
                else
                {
                    return new List<HistorialInsumoDTO>();
                }
            }
            else
            {
                return _context.tblAlm_Ubicacion.Where(x => x.registroActivo && x.almacen == almacenID).ToList().Select(x => new HistorialInsumoDTO
                {
                    almacen = x.almacen,
                    area_alm = x.area_alm,
                    lado_alm = x.lado_alm,
                    estante_alm = x.estante_alm,
                    nivel_alm = x.nivel_alm
                }).ToList();
            }
        }

        public List<ComboDTO> FillComboTipoMovimiento()
        {
            try
            {
                return (List<ComboDTO>)consultaCheckProductivo(
                    string.Format(@"SELECT 
                                        tm_inventario AS Value, 
                                        (CAST(tm_inventario AS varchar) + ' - ' + descripcion) AS Text 
                                    FROM si_tm")
                ).ToObject<List<ComboDTO>>();
            }
            catch (Exception)
            {
                return new List<ComboDTO>();
            }
        }

        public MovimientoEnkontrolDTO cargarMovimiento(int almacen, int tipo_mov, int numero)
        {
            var movimientoEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_movimientos WHERE almacen = {0} AND tipo_mov = {1} AND numero = {2}", almacen, tipo_mov, numero));

            if (movimientoEK != null)
            {
                var movimiento = ((List<MovimientoEnkontrolDTO>)movimientoEK.ToObject<List<MovimientoEnkontrolDTO>>())[0];

                movimiento.detalle = (List<MovimientoDetalleEnkontrolDTO>)consultaCheckProductivo(
                    string.Format(@"SELECT * FROM si_movimientos_det WHERE almacen = {0} AND tipo_mov = {1} AND numero = {2}", almacen, tipo_mov, numero)
                ).ToObject<List<MovimientoDetalleEnkontrolDTO>>();

                foreach (var det in movimiento.detalle)
                {
                    det.cantidad = 0; //Se asigna cero porque la cantidad aquí es la existencia.

                    var existenciasEK = consultaCheckProductivo(
                    string.Format(@"SELECT 
                                        det.insumo, 
                                        i.tipo, 
                                        i.grupo, 
                                        mov.almacen, 
                                        area_alm, 
                                        lado_alm, 
                                        estante_alm, 
                                        nivel_alm, 
                                        i.descripcion AS descInsumo, 
                                        ( 
                                           SELECT 
                                              TOP 1 g.descripcion 
                                           FROM 
                                              grupos_insumo g 
                                           WHERE g.grupo_insumo = i.grupo AND g.tipo_insumo = i.tipo 
                                        ) 
                                        AS descripcion, 
                                        ( 
                                           SELECT 
                                              TOP 1 Replace(Replace(n.descripcion, 'ALMACEN ', ''), 'DE ', '') 
                                           FROM si_almacen n 
                                           WHERE n.almacen = mov.almacen 
                                        ) 
                                        AS nomAlmacen, 
                                        SUM( 
                                            CASE 
                                                WHEN mov.tipo_mov < 50 THEN det.cantidad 
                                                ELSE det.cantidad * -1 
                                            END 
                                        ) AS cantidad 
                                    FROM si_movimientos mov 
                                        INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                                        INNER JOIN insumos i ON det.insumo = i.insumo 
                                    WHERE mov.almacen = {0} AND det.insumo = {1} 
                                    GROUP BY det.insumo, i.tipo, i.grupo, descripcion, mov.almacen, descInsumo, area_alm, lado_alm, estante_alm, nivel_alm",
                                    almacen,
                                    det.insumo));

                    ValuacionDTO resultado = new ValuacionDTO();

                    if (existenciasEK != null)
                    {
                        var existencias = (List<ValuacionDTO>)existenciasEK.ToObject<List<ValuacionDTO>>();
                        var stockMinimo = _context.tblAlm_StockMinimo.FirstOrDefault(x => x.estatus && x.almacenID == almacen && x.insumo == det.insumo);
                        var listSolicitadoPendiente = _context.tblAlm_Traspaso.Where(x =>
                                x.estatusRegistro &&
                                    //x.ccOrigen == filtros.cc &&
                                x.almacenOrigen == almacen &&
                                !x.autorizado &&
                                x.insumo == det.insumo).ToList();
                        var solicitadoPendiente = listSolicitadoPendiente.Count > 0 ? listSolicitadoPendiente.Select(z => z.cantidadTraspasar != null ? z.cantidadTraspasar : 0).Sum() : 0;

                        det.insumo = existencias[0].insumo;
                        det.descInsumo = existencias[0].descInsumo;
                        det.cantidad = Convert.ToDecimal(existencias[0].cantidad, CultureInfo.InvariantCulture);
                        det.minimoDesc = stockMinimo != null ? stockMinimo.stockMinimo : "";
                        det.solicitadoPendiente = solicitadoPendiente;
                    }
                }

                return movimiento;
            }
            else
            {
                return null;
            }
        }

        public dynamic checarAccesoAlmacenista(int almacen)
        {
            var usuario = vSesiones.sesionUsuarioDTO;
            var relUser = ufs.getUsuarioService().getUserEk(usuario.id);

            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
            {
                #region COLOMBIA
                if (relUser.empleado == 1)
                {
                    List<dynamic> accesoAdmin = new List<dynamic>();

                    accesoAdmin.Add(new
                    {
                        empleado = relUser.empleado,
                        almacen = almacen,
                        traspasos = 0
                    });
                    return accesoAdmin;
                }
                else
                {
                    var accesosAlmacenesEK = consultaCheckProductivo(string.Format(@"SELECT * FROM DBA.si_emp_almacen WHERE empleado = {0} AND almacen = {1}", relUser.empleado, almacen));

                    if (accesosAlmacenesEK != null)
                    {
                        var accesosAlmacenes = (List<dynamic>)accesosAlmacenesEK.ToObject<List<dynamic>>();
                        return accesosAlmacenes.Select(x => new
                        {
                            empleado = (int)x.empleado,
                            almacen = (int)x.almacen
                        }).ToList();
                    }
                    else
                        return null;
                }
                #endregion
            }
            else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
            {
                #region PERU
                var accesoAdmin = new List<dynamic>();

                accesoAdmin.Add(new
                {
                    empleado = relUser.empleado,
                    almacen = almacen,
                    traspasos = 0
                });

                return accesoAdmin;
                #endregion
            }
            else
            {
                #region DEMAS EMPRESAS
                if (relUser.empleado == 1)
                {
                    var accesoAdmin = new List<dynamic>();

                    accesoAdmin.Add(new
                    {
                        empleado = relUser.empleado,
                        almacen = almacen,
                        traspasos = 0
                    });

                    return accesoAdmin;
                }
                else
                {
                    var accesosAlmacenesEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_emp_almacen WHERE empleado = {0} AND almacen = {1}", relUser.empleado, almacen));

                    if (accesosAlmacenesEK != null)
                    {
                        var accesosAlmacenes = (List<dynamic>)accesosAlmacenesEK.ToObject<List<dynamic>>();

                        return accesosAlmacenes.Select(x => new
                        {
                            empleado = (int)x.empleado,
                            almacen = (int)x.almacen,
                            traspasos = (int)x.traspasos
                        }).ToList();
                    }
                    else
                    {
                        return null;
                    }
                }
                #endregion
            }
        }

        public void insertTraspasosPendientes()
        {
            //using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
            //{
            //    try
            //    {
            //        var traspasosPendientes = _context.tbl_TraspasosPendientesTEMP.ToList();

            //        foreach (var tras in traspasosPendientes)
            //        {
            //            var movimientoEK = ((List<dynamic>)consultaCheckProductivo(
            //                string.Format(@"SELECT * FROM si_movimientos WHERE almacen = {0} AND tipo_mov = 52 AND numero = {1}", tras.almacenOrigen, tras.numeroSalida)
            //            ).ToObject<List<dynamic>>())[0];

            //            var detalleEK = ((List<dynamic>)consultaCheckProductivo(
            //                string.Format(@"SELECT * FROM si_movimientos_det WHERE almacen = {0} AND tipo_mov = 52 AND numero = {1}", tras.almacenOrigen, tras.numeroSalida)
            //            ).ToObject<List<dynamic>>());

            //            var folioInterno = (_context.tblAlm_Traspaso.ToList().Where(x => x.ccOrigen == (string)movimientoEK.cc).ToList().Count > 0) ?
            //                (_context.tblAlm_Traspaso.ToList().Where(x => x.ccOrigen == (string)movimientoEK.cc).Max(x => x.folioInterno) + 1) : 1;

            //            foreach (var det in detalleEK)
            //            {
            //                _context.tblAlm_Traspaso.Add(new tblAlm_Traspaso
            //                {
            //                    ccOrigen = (string)movimientoEK.cc,
            //                    almacenOrigen = (int)movimientoEK.almacen,
            //                    ccDestino = movimientoEK.cc_destino != null ? (string)movimientoEK.cc_destino : "",
            //                    almacenDestino = movimientoEK.alm_destino != null ? (int)movimientoEK.alm_destino : 0,
            //                    insumo = (int)det.insumo,
            //                    cantidadTraspasar = Convert.ToDecimal(det.cantidad, CultureInfo.InvariantCulture),
            //                    cantidadCancelada = 0,
            //                    fecha = (DateTime)movimientoEK.fecha,
            //                    autorizado = true,
            //                    rechazado = false,
            //                    folioInterno = folioInterno,
            //                    comentarios = movimientoEK.comentarios != null ? (string)movimientoEK.comentarios : "",
            //                    comentariosGestion = "",
            //                    estado = "T",
            //                    area_alm = det.area_alm != null ? (string)det.area_alm : "",
            //                    lado_alm = det.lado_alm != null ? (string)det.lado_alm : "",
            //                    estante_alm = det.estante_alm != null ? (string)det.estante_alm : "",
            //                    nivel_alm = det.nivel_alm != null ? (string)det.nivel_alm : "",
            //                    estatusRegistro = true
            //                });
            //            }
            //        }

            //        _context.SaveChanges();
            //        dbSigoplanTransaction.Commit();
            //    }
            //    catch (Exception)
            //    {
            //        dbSigoplanTransaction.Rollback();
            //    }
            //}
        }

        public bool actualizarAcumula(int almacen, string cc, MovimientoDetalleEnkontrolDTO det, DbContextTransaction dbSigoplanTransaction, OdbcTransaction trans)
        {
            if (vSesiones.sesionEmpresaActual == (int)MainContextEnum.Colombia)
            {
                #region COLOMBIA
                var anio = DateTime.Now.Year;
                var insumo = det.insumo;
                var cantidad = det.cantidad;
                var precio = det.precio;
                var importe = cantidad * precio;
                var tipoMovimiento = det.tipo_mov;

                var mes = DateTime.Now.Month;
                var columnaExistencia = "existencia_" + (tipoMovimiento < 50 ? "ent_" : "sal_");
                var columnaImporte = "importe_" + (tipoMovimiento < 50 ? "ent_" : "sal_");

                #region Localizar Columnas Afectadas
                switch (mes)
                {
                    case 1:
                        columnaExistencia = string.Concat(columnaExistencia, "ene");
                        columnaImporte = string.Concat(columnaImporte, "ene");
                        break;
                    case 2:
                        columnaExistencia = string.Concat(columnaExistencia, "feb");
                        columnaImporte = string.Concat(columnaImporte, "feb");
                        break;
                    case 3:
                        columnaExistencia = string.Concat(columnaExistencia, "mar");
                        columnaImporte = string.Concat(columnaImporte, "mar");
                        break;
                    case 4:
                        columnaExistencia = string.Concat(columnaExistencia, "abr");
                        columnaImporte = string.Concat(columnaImporte, "abr");
                        break;
                    case 5:
                        columnaExistencia = string.Concat(columnaExistencia, "may");
                        columnaImporte = string.Concat(columnaImporte, "may");
                        break;
                    case 6:
                        columnaExistencia = string.Concat(columnaExistencia, "jun");
                        columnaImporte = string.Concat(columnaImporte, "jun");
                        break;
                    case 7:
                        columnaExistencia = string.Concat(columnaExistencia, "jul");
                        columnaImporte = string.Concat(columnaImporte, "jul");
                        break;
                    case 8:
                        columnaExistencia = string.Concat(columnaExistencia, "ago");
                        columnaImporte = string.Concat(columnaImporte, "ago");
                        break;
                    case 9:
                        columnaExistencia = string.Concat(columnaExistencia, "sep");
                        columnaImporte = string.Concat(columnaImporte, "sep");
                        break;
                    case 10:
                        columnaExistencia = string.Concat(columnaExistencia, "oct");
                        columnaImporte = string.Concat(columnaImporte, "oct");
                        break;
                    case 11:
                        columnaExistencia = string.Concat(columnaExistencia, "nov");
                        columnaImporte = string.Concat(columnaImporte, "nov");
                        break;
                    case 12:
                        columnaExistencia = string.Concat(columnaExistencia, "dic");
                        columnaImporte = string.Concat(columnaImporte, "dic");
                        break;
                }
                #endregion

                var count = 0;

                #region Update Registro Acumula Almacén
                var registroAcumulaAlmacenEK = consultaCheckProductivo(
                    string.Format(@"SELECT * FROM DBA.si_acumula_almacen WHERE almacen = {0} AND cc = '{1}' AND ano = {2} AND insumo = {3}", almacen, cc, anio, insumo)
                );

                if (registroAcumulaAlmacenEK != null)
                {
                    var registroAcumulaAlmacen = ((List<AcumulaEnkontrolDTO>)registroAcumulaAlmacenEK.ToObject<List<AcumulaEnkontrolDTO>>())[0];

                    var existenciaAnteriorAlmacen = Convert.ToDecimal(registroAcumulaAlmacen.GetType().GetProperty(columnaExistencia).GetValue(registroAcumulaAlmacen), CultureInfo.InvariantCulture);
                    var importeAnteriorAlmacen = Convert.ToDecimal(registroAcumulaAlmacen.GetType().GetProperty(columnaImporte).GetValue(registroAcumulaAlmacen), CultureInfo.InvariantCulture);

                    var consultaUpdateAlmacen =
                        string.Format(@"UPDATE DBA.si_acumula_almacen SET {0} = ?, {1} = ? WHERE almacen = ? AND cc = ? AND ano = ? AND insumo = ?", columnaExistencia, columnaImporte);

                    using (var cmd = new OdbcCommand(consultaUpdateAlmacen))
                    {
                        OdbcParameterCollection parameters = cmd.Parameters;

                        parameters.Add(string.Concat("@", columnaExistencia), OdbcType.Numeric).Value = existenciaAnteriorAlmacen + cantidad;
                        parameters.Add(string.Concat("@", columnaImporte), OdbcType.Numeric).Value = importeAnteriorAlmacen + importe;

                        parameters.Add("@almacen", OdbcType.Numeric).Value = almacen;
                        parameters.Add("@cc", OdbcType.Char).Value = cc;
                        parameters.Add("@ano", OdbcType.Numeric).Value = anio;
                        parameters.Add("@insumo", OdbcType.Numeric).Value = insumo;

                        cmd.Connection = trans.Connection;
                        cmd.Transaction = trans;

                        count += cmd.ExecuteNonQuery();
                    }
                }
                else
                {
                    #region Insert Registro en la tabla "si_acumula_almacen"
                    var consultaInsertAcumulaAlmacen = @"INSERT INTO DBA.si_acumula_almacen 
                                                        (almacen, cc, ano, 
                                                        existencia_ent_ini, importe_ent_ini, existencia_sal_ini, importe_sal_ini, 
                                                        existencia_ent_ene, importe_ent_ene, existencia_sal_ene, importe_sal_ene, 
                                                        existencia_ent_feb, importe_ent_feb, existencia_sal_feb, importe_sal_feb, 
                                                        existencia_ent_mar, importe_ent_mar, existencia_sal_mar, importe_sal_mar, 
                                                        existencia_ent_abr, importe_ent_abr, existencia_sal_abr, importe_sal_abr, 
                                                        existencia_ent_may, importe_ent_may, existencia_sal_may, importe_sal_may, 
                                                        existencia_ent_jun, importe_ent_jun, existencia_sal_jun, importe_sal_jun, 
                                                        existencia_ent_jul, importe_ent_jul, existencia_sal_jul, importe_sal_jul, 
                                                        existencia_ent_ago, importe_ent_ago, existencia_sal_ago, importe_sal_ago, 
                                                        existencia_ent_sep, importe_ent_sep, existencia_sal_sep, importe_sal_sep, 
                                                        existencia_ent_oct, importe_ent_oct, existencia_sal_oct, importe_sal_oct, 
                                                        existencia_ent_nov, importe_ent_nov, existencia_sal_nov, importe_sal_nov, 
                                                        existencia_ent_dic, importe_ent_dic, existencia_sal_dic, importe_sal_dic, 
                                                        insumo) 
                                                        VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                    using (var cmd = new OdbcCommand(consultaInsertAcumulaAlmacen))
                    {
                        OdbcParameterCollection parameters = cmd.Parameters;

                        parameters.Add("@almacen", OdbcType.Numeric).Value = almacen;
                        parameters.Add("@cc", OdbcType.Char).Value = cc;
                        parameters.Add("@ano", OdbcType.Numeric).Value = DateTime.Now.Year;

                        parameters.Add("@existencia_ent_ini", OdbcType.Numeric).Value = 0;
                        parameters.Add("@importe_ent_ini", OdbcType.Numeric).Value = 0;
                        parameters.Add("@existencia_sal_ini", OdbcType.Numeric).Value = 0;
                        parameters.Add("@importe_sal_ini", OdbcType.Numeric).Value = 0;

                        parameters.Add("@existencia_ent_ene", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_ene" ? cantidad : 0;
                        parameters.Add("@importe_ent_ene", OdbcType.Numeric).Value = columnaImporte == "importe_ent_ene" ? importe : 0;
                        parameters.Add("@existencia_sal_ene", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_ene" ? cantidad : 0;
                        parameters.Add("@importe_sal_ene", OdbcType.Numeric).Value = columnaImporte == "importe_sal_ene" ? importe : 0;

                        parameters.Add("@existencia_ent_feb", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_feb" ? cantidad : 0;
                        parameters.Add("@importe_ent_feb", OdbcType.Numeric).Value = columnaImporte == "importe_ent_feb" ? importe : 0;
                        parameters.Add("@existencia_sal_feb", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_feb" ? cantidad : 0;
                        parameters.Add("@importe_sal_feb", OdbcType.Numeric).Value = columnaImporte == "importe_sal_feb" ? importe : 0;

                        parameters.Add("@existencia_ent_mar", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_mar" ? cantidad : 0;
                        parameters.Add("@importe_ent_mar", OdbcType.Numeric).Value = columnaImporte == "importe_ent_mar" ? importe : 0;
                        parameters.Add("@existencia_sal_mar", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_mar" ? cantidad : 0;
                        parameters.Add("@importe_sal_mar", OdbcType.Numeric).Value = columnaImporte == "importe_sal_mar" ? importe : 0;

                        parameters.Add("@existencia_ent_abr", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_abr" ? cantidad : 0;
                        parameters.Add("@importe_ent_abr", OdbcType.Numeric).Value = columnaImporte == "importe_ent_abr" ? importe : 0;
                        parameters.Add("@existencia_sal_abr", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_abr" ? cantidad : 0;
                        parameters.Add("@importe_sal_abr", OdbcType.Numeric).Value = columnaImporte == "importe_sal_abr" ? importe : 0;

                        parameters.Add("@existencia_ent_may", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_may" ? cantidad : 0;
                        parameters.Add("@importe_ent_may", OdbcType.Numeric).Value = columnaImporte == "importe_ent_may" ? importe : 0;
                        parameters.Add("@existencia_sal_may", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_may" ? cantidad : 0;
                        parameters.Add("@importe_sal_may", OdbcType.Numeric).Value = columnaImporte == "importe_sal_may" ? importe : 0;

                        parameters.Add("@existencia_ent_jun", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_jun" ? cantidad : 0;
                        parameters.Add("@importe_ent_jun", OdbcType.Numeric).Value = columnaImporte == "importe_ent_jun" ? importe : 0;
                        parameters.Add("@existencia_sal_jun", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_jun" ? cantidad : 0;
                        parameters.Add("@importe_sal_jun", OdbcType.Numeric).Value = columnaImporte == "importe_sal_jun" ? importe : 0;

                        parameters.Add("@existencia_ent_jul", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_jul" ? cantidad : 0;
                        parameters.Add("@importe_ent_jul", OdbcType.Numeric).Value = columnaImporte == "importe_ent_jul" ? importe : 0;
                        parameters.Add("@existencia_sal_jul", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_jul" ? cantidad : 0;
                        parameters.Add("@importe_sal_jul", OdbcType.Numeric).Value = columnaImporte == "importe_sal_jul" ? importe : 0;

                        parameters.Add("@existencia_ent_ago", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_ago" ? cantidad : 0;
                        parameters.Add("@importe_ent_ago", OdbcType.Numeric).Value = columnaImporte == "importe_ent_ago" ? importe : 0;
                        parameters.Add("@existencia_sal_ago", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_ago" ? cantidad : 0;
                        parameters.Add("@importe_sal_ago", OdbcType.Numeric).Value = columnaImporte == "importe_sal_ago" ? importe : 0;

                        parameters.Add("@existencia_ent_sep", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_sep" ? cantidad : 0;
                        parameters.Add("@importe_ent_sep", OdbcType.Numeric).Value = columnaImporte == "importe_ent_sep" ? importe : 0;
                        parameters.Add("@existencia_sal_sep", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_sep" ? cantidad : 0;
                        parameters.Add("@importe_sal_sep", OdbcType.Numeric).Value = columnaImporte == "importe_sal_sep" ? importe : 0;

                        parameters.Add("@existencia_ent_oct", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_oct" ? cantidad : 0;
                        parameters.Add("@importe_ent_oct", OdbcType.Numeric).Value = columnaImporte == "importe_ent_oct" ? importe : 0;
                        parameters.Add("@existencia_sal_oct", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_oct" ? cantidad : 0;
                        parameters.Add("@importe_sal_oct", OdbcType.Numeric).Value = columnaImporte == "importe_sal_oct" ? importe : 0;

                        parameters.Add("@existencia_ent_nov", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_nov" ? cantidad : 0;
                        parameters.Add("@importe_ent_nov", OdbcType.Numeric).Value = columnaImporte == "importe_ent_nov" ? importe : 0;
                        parameters.Add("@existencia_sal_nov", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_nov" ? cantidad : 0;
                        parameters.Add("@importe_sal_nov", OdbcType.Numeric).Value = columnaImporte == "importe_sal_nov" ? importe : 0;

                        parameters.Add("@existencia_ent_dic", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_dic" ? cantidad : 0;
                        parameters.Add("@importe_ent_dic", OdbcType.Numeric).Value = columnaImporte == "importe_ent_dic" ? importe : 0;
                        parameters.Add("@existencia_sal_dic", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_dic" ? cantidad : 0;
                        parameters.Add("@importe_sal_dic", OdbcType.Numeric).Value = columnaImporte == "importe_sal_dic" ? importe : 0;

                        parameters.Add("@insumo", OdbcType.Numeric).Value = insumo;

                        cmd.Connection = trans.Connection;
                        cmd.Transaction = trans;

                        count += cmd.ExecuteNonQuery();
                    }
                    #endregion
                }
                #endregion

                #region Update Registro Acumula CC
                var registroAcumulaCCEK = consultaCheckProductivo(
                    string.Format(@"SELECT * FROM DBA.si_acumula_cc WHERE cc = '{0}' AND ano = {1} AND insumo = {2}", cc, anio, insumo)
                );

                if (registroAcumulaCCEK != null)
                {
                    var registroAcumulaCC = ((List<AcumulaEnkontrolDTO>)registroAcumulaCCEK.ToObject<List<AcumulaEnkontrolDTO>>())[0];

                    var existenciaAnteriorCC = Convert.ToDecimal(registroAcumulaCC.GetType().GetProperty(columnaExistencia).GetValue(registroAcumulaCC), CultureInfo.InvariantCulture);
                    var importeAnteriorCC = Convert.ToDecimal(registroAcumulaCC.GetType().GetProperty(columnaImporte).GetValue(registroAcumulaCC), CultureInfo.InvariantCulture);

                    var consultaUpdateCC =
                        string.Format(@"UPDATE DBA.si_acumula_cc SET {0} = ?, {1} = ?, ultimo_cp = ?, fecha_cp = ? WHERE cc = ? AND ano = ? AND insumo = ?", columnaExistencia, columnaImporte);

                    using (var cmd = new OdbcCommand(consultaUpdateCC))
                    {
                        OdbcParameterCollection parameters = cmd.Parameters;

                        parameters.Add(string.Concat("@", columnaExistencia), OdbcType.Numeric).Value = existenciaAnteriorCC + cantidad;
                        parameters.Add(string.Concat("@", columnaImporte), OdbcType.Numeric).Value = importeAnteriorCC + importe;

                        if (det.costo_prom > 0)
                        {
                            parameters.Add("@ultimo_cp", OdbcType.Numeric).Value = det.costo_prom ?? 0;
                            parameters.Add("@fecha_cp", OdbcType.Date).Value = DateTime.Now.Date;
                        }
                        else
                        {
                            parameters.Add("@ultimo_cp", OdbcType.Numeric).Value = registroAcumulaCC.ultimo_cp ?? (object)DBNull.Value;
                            parameters.Add("@fecha_cp", OdbcType.Date).Value = registroAcumulaCC.fecha_cp ?? (object)DBNull.Value;
                        }

                        parameters.Add("@cc", OdbcType.Char).Value = cc;
                        parameters.Add("@ano", OdbcType.Numeric).Value = anio;
                        parameters.Add("@insumo", OdbcType.Numeric).Value = insumo;

                        cmd.Connection = trans.Connection;
                        cmd.Transaction = trans;

                        count += cmd.ExecuteNonQuery();
                    }
                }
                else
                {
                    #region Insert Registro en la tabla "si_acumula_cc"
                    var consultaInsertAcumulaCC = @"INSERT INTO DBA.si_acumula_cc 
                                                    (cc, ano, 
                                                    existencia_ent_ini, importe_ent_ini, existencia_sal_ini, importe_sal_ini, 
                                                    existencia_ent_ene, importe_ent_ene, existencia_sal_ene, importe_sal_ene, 
                                                    existencia_ent_feb, importe_ent_feb, existencia_sal_feb, importe_sal_feb, 
                                                    existencia_ent_mar, importe_ent_mar, existencia_sal_mar, importe_sal_mar, 
                                                    existencia_ent_abr, importe_ent_abr, existencia_sal_abr, importe_sal_abr, 
                                                    existencia_ent_may, importe_ent_may, existencia_sal_may, importe_sal_may, 
                                                    existencia_ent_jun, importe_ent_jun, existencia_sal_jun, importe_sal_jun, 
                                                    existencia_ent_jul, importe_ent_jul, existencia_sal_jul, importe_sal_jul, 
                                                    existencia_ent_ago, importe_ent_ago, existencia_sal_ago, importe_sal_ago, 
                                                    existencia_ent_sep, importe_ent_sep, existencia_sal_sep, importe_sal_sep, 
                                                    existencia_ent_oct, importe_ent_oct, existencia_sal_oct, importe_sal_oct, 
                                                    existencia_ent_nov, importe_ent_nov, existencia_sal_nov, importe_sal_nov, 
                                                    existencia_ent_dic, importe_ent_dic, existencia_sal_dic, importe_sal_dic, 
                                                    insumo, ultimo_cp, fecha_cp) 
                                                VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                    using (var cmd = new OdbcCommand(consultaInsertAcumulaCC))
                    {
                        OdbcParameterCollection parameters = cmd.Parameters;

                        parameters.Add("@cc", OdbcType.Char).Value = cc;
                        parameters.Add("@ano", OdbcType.Numeric).Value = DateTime.Now.Year;

                        parameters.Add("@existencia_ent_ini", OdbcType.Numeric).Value = 0;
                        parameters.Add("@importe_ent_ini", OdbcType.Numeric).Value = 0;
                        parameters.Add("@existencia_sal_ini", OdbcType.Numeric).Value = 0;
                        parameters.Add("@importe_sal_ini", OdbcType.Numeric).Value = 0;

                        parameters.Add("@existencia_ent_ene", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_ene" ? cantidad : 0;
                        parameters.Add("@importe_ent_ene", OdbcType.Numeric).Value = columnaImporte == "importe_ent_ene" ? importe : 0;
                        parameters.Add("@existencia_sal_ene", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_ene" ? cantidad : 0;
                        parameters.Add("@importe_sal_ene", OdbcType.Numeric).Value = columnaImporte == "importe_sal_ene" ? importe : 0;

                        parameters.Add("@existencia_ent_feb", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_feb" ? cantidad : 0;
                        parameters.Add("@importe_ent_feb", OdbcType.Numeric).Value = columnaImporte == "importe_ent_feb" ? importe : 0;
                        parameters.Add("@existencia_sal_feb", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_feb" ? cantidad : 0;
                        parameters.Add("@importe_sal_feb", OdbcType.Numeric).Value = columnaImporte == "importe_sal_feb" ? importe : 0;

                        parameters.Add("@existencia_ent_mar", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_mar" ? cantidad : 0;
                        parameters.Add("@importe_ent_mar", OdbcType.Numeric).Value = columnaImporte == "importe_ent_mar" ? importe : 0;
                        parameters.Add("@existencia_sal_mar", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_mar" ? cantidad : 0;
                        parameters.Add("@importe_sal_mar", OdbcType.Numeric).Value = columnaImporte == "importe_sal_mar" ? importe : 0;

                        parameters.Add("@existencia_ent_abr", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_abr" ? cantidad : 0;
                        parameters.Add("@importe_ent_abr", OdbcType.Numeric).Value = columnaImporte == "importe_ent_abr" ? importe : 0;
                        parameters.Add("@existencia_sal_abr", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_abr" ? cantidad : 0;
                        parameters.Add("@importe_sal_abr", OdbcType.Numeric).Value = columnaImporte == "importe_sal_abr" ? importe : 0;

                        parameters.Add("@existencia_ent_may", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_may" ? cantidad : 0;
                        parameters.Add("@importe_ent_may", OdbcType.Numeric).Value = columnaImporte == "importe_ent_may" ? importe : 0;
                        parameters.Add("@existencia_sal_may", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_may" ? cantidad : 0;
                        parameters.Add("@importe_sal_may", OdbcType.Numeric).Value = columnaImporte == "importe_sal_may" ? importe : 0;

                        parameters.Add("@existencia_ent_jun", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_jun" ? cantidad : 0;
                        parameters.Add("@importe_ent_jun", OdbcType.Numeric).Value = columnaImporte == "importe_ent_jun" ? importe : 0;
                        parameters.Add("@existencia_sal_jun", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_jun" ? cantidad : 0;
                        parameters.Add("@importe_sal_jun", OdbcType.Numeric).Value = columnaImporte == "importe_sal_jun" ? importe : 0;

                        parameters.Add("@existencia_ent_jul", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_jul" ? cantidad : 0;
                        parameters.Add("@importe_ent_jul", OdbcType.Numeric).Value = columnaImporte == "importe_ent_jul" ? importe : 0;
                        parameters.Add("@existencia_sal_jul", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_jul" ? cantidad : 0;
                        parameters.Add("@importe_sal_jul", OdbcType.Numeric).Value = columnaImporte == "importe_sal_jul" ? importe : 0;

                        parameters.Add("@existencia_ent_ago", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_ago" ? cantidad : 0;
                        parameters.Add("@importe_ent_ago", OdbcType.Numeric).Value = columnaImporte == "importe_ent_ago" ? importe : 0;
                        parameters.Add("@existencia_sal_ago", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_ago" ? cantidad : 0;
                        parameters.Add("@importe_sal_ago", OdbcType.Numeric).Value = columnaImporte == "importe_sal_ago" ? importe : 0;

                        parameters.Add("@existencia_ent_sep", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_sep" ? cantidad : 0;
                        parameters.Add("@importe_ent_sep", OdbcType.Numeric).Value = columnaImporte == "importe_ent_sep" ? importe : 0;
                        parameters.Add("@existencia_sal_sep", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_sep" ? cantidad : 0;
                        parameters.Add("@importe_sal_sep", OdbcType.Numeric).Value = columnaImporte == "importe_sal_sep" ? importe : 0;

                        parameters.Add("@existencia_ent_oct", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_oct" ? cantidad : 0;
                        parameters.Add("@importe_ent_oct", OdbcType.Numeric).Value = columnaImporte == "importe_ent_oct" ? importe : 0;
                        parameters.Add("@existencia_sal_oct", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_oct" ? cantidad : 0;
                        parameters.Add("@importe_sal_oct", OdbcType.Numeric).Value = columnaImporte == "importe_sal_oct" ? importe : 0;

                        parameters.Add("@existencia_ent_nov", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_nov" ? cantidad : 0;
                        parameters.Add("@importe_ent_nov", OdbcType.Numeric).Value = columnaImporte == "importe_ent_nov" ? importe : 0;
                        parameters.Add("@existencia_sal_nov", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_nov" ? cantidad : 0;
                        parameters.Add("@importe_sal_nov", OdbcType.Numeric).Value = columnaImporte == "importe_sal_nov" ? importe : 0;

                        parameters.Add("@existencia_ent_dic", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_dic" ? cantidad : 0;
                        parameters.Add("@importe_ent_dic", OdbcType.Numeric).Value = columnaImporte == "importe_ent_dic" ? importe : 0;
                        parameters.Add("@existencia_sal_dic", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_dic" ? cantidad : 0;
                        parameters.Add("@importe_sal_dic", OdbcType.Numeric).Value = columnaImporte == "importe_sal_dic" ? importe : 0;

                        parameters.Add("@insumo", OdbcType.Numeric).Value = insumo;
                        parameters.Add("@ultimo_cp", OdbcType.Numeric).Value = importe;
                        parameters.Add("@fecha_cp", OdbcType.Date).Value = DateTime.Now.Date;

                        cmd.Connection = trans.Connection;
                        cmd.Transaction = trans;

                        count += cmd.ExecuteNonQuery();
                    }
                    #endregion
                }
                #endregion

                return true;
                #endregion
            }
            else
            {
                #region DEMAS EMPRESAS
                var anio = DateTime.Now.Year;
                var insumo = det.insumo;
                var cantidad = det.cantidad;
                var precio = det.precio;
                var importe = cantidad * precio;
                var tipoMovimiento = det.tipo_mov;

                var mes = DateTime.Now.Month;
                var columnaExistencia = "existencia_" + (tipoMovimiento < 50 ? "ent_" : "sal_");
                var columnaImporte = "importe_" + (tipoMovimiento < 50 ? "ent_" : "sal_");

                #region Localizar Columnas Afectadas
                switch (mes)
                {
                    case 1:
                        columnaExistencia = string.Concat(columnaExistencia, "ene");
                        columnaImporte = string.Concat(columnaImporte, "ene");
                        break;
                    case 2:
                        columnaExistencia = string.Concat(columnaExistencia, "feb");
                        columnaImporte = string.Concat(columnaImporte, "feb");
                        break;
                    case 3:
                        columnaExistencia = string.Concat(columnaExistencia, "mar");
                        columnaImporte = string.Concat(columnaImporte, "mar");
                        break;
                    case 4:
                        columnaExistencia = string.Concat(columnaExistencia, "abr");
                        columnaImporte = string.Concat(columnaImporte, "abr");
                        break;
                    case 5:
                        columnaExistencia = string.Concat(columnaExistencia, "may");
                        columnaImporte = string.Concat(columnaImporte, "may");
                        break;
                    case 6:
                        columnaExistencia = string.Concat(columnaExistencia, "jun");
                        columnaImporte = string.Concat(columnaImporte, "jun");
                        break;
                    case 7:
                        columnaExistencia = string.Concat(columnaExistencia, "jul");
                        columnaImporte = string.Concat(columnaImporte, "jul");
                        break;
                    case 8:
                        columnaExistencia = string.Concat(columnaExistencia, "ago");
                        columnaImporte = string.Concat(columnaImporte, "ago");
                        break;
                    case 9:
                        columnaExistencia = string.Concat(columnaExistencia, "sep");
                        columnaImporte = string.Concat(columnaImporte, "sep");
                        break;
                    case 10:
                        columnaExistencia = string.Concat(columnaExistencia, "oct");
                        columnaImporte = string.Concat(columnaImporte, "oct");
                        break;
                    case 11:
                        columnaExistencia = string.Concat(columnaExistencia, "nov");
                        columnaImporte = string.Concat(columnaImporte, "nov");
                        break;
                    case 12:
                        columnaExistencia = string.Concat(columnaExistencia, "dic");
                        columnaImporte = string.Concat(columnaImporte, "dic");
                        break;
                }
                #endregion

                var count = 0;

                #region Update Registro Acumula Almacén
                var registroAcumulaAlmacenEK = consultaCheckProductivo(
                    string.Format(@"SELECT * FROM si_acumula_almacen WHERE almacen = {0} AND cc = '{1}' AND ano = {2} AND insumo = {3}", almacen, cc, anio, insumo)
                );

                if (registroAcumulaAlmacenEK != null)
                {
                    var registroAcumulaAlmacen = ((List<AcumulaEnkontrolDTO>)registroAcumulaAlmacenEK.ToObject<List<AcumulaEnkontrolDTO>>())[0];

                    var existenciaAnteriorAlmacen = Convert.ToDecimal(registroAcumulaAlmacen.GetType().GetProperty(columnaExistencia).GetValue(registroAcumulaAlmacen), CultureInfo.InvariantCulture);
                    var importeAnteriorAlmacen = Convert.ToDecimal(registroAcumulaAlmacen.GetType().GetProperty(columnaImporte).GetValue(registroAcumulaAlmacen), CultureInfo.InvariantCulture);

                    var consultaUpdateAlmacen =
                        string.Format(@"UPDATE DBA.si_acumula_almacen 
                                    SET {0} = ?, {1} = ? 
                                        WHERE almacen = ? AND cc = ? AND ano = ? AND insumo = ?", columnaExistencia, columnaImporte);

                    using (var cmd = new OdbcCommand(consultaUpdateAlmacen))
                    {
                        OdbcParameterCollection parameters = cmd.Parameters;

                        parameters.Add(string.Concat("@", columnaExistencia), OdbcType.Numeric).Value = existenciaAnteriorAlmacen + cantidad;
                        parameters.Add(string.Concat("@", columnaImporte), OdbcType.Numeric).Value = importeAnteriorAlmacen + importe;

                        parameters.Add("@almacen", OdbcType.Numeric).Value = almacen;
                        parameters.Add("@cc", OdbcType.Char).Value = cc;
                        parameters.Add("@ano", OdbcType.Numeric).Value = anio;
                        parameters.Add("@insumo", OdbcType.Numeric).Value = insumo;

                        cmd.Connection = trans.Connection;
                        cmd.Transaction = trans;

                        count += cmd.ExecuteNonQuery();
                    }
                }
                else
                {
                    #region Insert Registro en la tabla "si_acumula_almacen"
                    var consultaInsertAcumulaAlmacen = @"INSERT INTO si_acumula_almacen 
                                                        (almacen, cc, ano, 
                                                        existencia_ent_ini, importe_ent_ini, existencia_sal_ini, importe_sal_ini, 
                                                        existencia_ent_ene, importe_ent_ene, existencia_sal_ene, importe_sal_ene, 
                                                        existencia_ent_feb, importe_ent_feb, existencia_sal_feb, importe_sal_feb, 
                                                        existencia_ent_mar, importe_ent_mar, existencia_sal_mar, importe_sal_mar, 
                                                        existencia_ent_abr, importe_ent_abr, existencia_sal_abr, importe_sal_abr, 
                                                        existencia_ent_may, importe_ent_may, existencia_sal_may, importe_sal_may, 
                                                        existencia_ent_jun, importe_ent_jun, existencia_sal_jun, importe_sal_jun, 
                                                        existencia_ent_jul, importe_ent_jul, existencia_sal_jul, importe_sal_jul, 
                                                        existencia_ent_ago, importe_ent_ago, existencia_sal_ago, importe_sal_ago, 
                                                        existencia_ent_sep, importe_ent_sep, existencia_sal_sep, importe_sal_sep, 
                                                        existencia_ent_oct, importe_ent_oct, existencia_sal_oct, importe_sal_oct, 
                                                        existencia_ent_nov, importe_ent_nov, existencia_sal_nov, importe_sal_nov, 
                                                        existencia_ent_dic, importe_ent_dic, existencia_sal_dic, importe_sal_dic, 
                                                        insumo) 
                                                        VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                    using (var cmd = new OdbcCommand(consultaInsertAcumulaAlmacen))
                    {
                        OdbcParameterCollection parameters = cmd.Parameters;

                        parameters.Add("@almacen", OdbcType.Numeric).Value = almacen;
                        parameters.Add("@cc", OdbcType.Char).Value = cc;
                        parameters.Add("@ano", OdbcType.Numeric).Value = DateTime.Now.Year;

                        parameters.Add("@existencia_ent_ini", OdbcType.Numeric).Value = 0;
                        parameters.Add("@importe_ent_ini", OdbcType.Numeric).Value = 0;
                        parameters.Add("@existencia_sal_ini", OdbcType.Numeric).Value = 0;
                        parameters.Add("@importe_sal_ini", OdbcType.Numeric).Value = 0;

                        parameters.Add("@existencia_ent_ene", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_ene" ? cantidad : 0;
                        parameters.Add("@importe_ent_ene", OdbcType.Numeric).Value = columnaImporte == "importe_ent_ene" ? importe : 0;
                        parameters.Add("@existencia_sal_ene", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_ene" ? cantidad : 0;
                        parameters.Add("@importe_sal_ene", OdbcType.Numeric).Value = columnaImporte == "importe_sal_ene" ? importe : 0;

                        parameters.Add("@existencia_ent_feb", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_feb" ? cantidad : 0;
                        parameters.Add("@importe_ent_feb", OdbcType.Numeric).Value = columnaImporte == "importe_ent_feb" ? importe : 0;
                        parameters.Add("@existencia_sal_feb", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_feb" ? cantidad : 0;
                        parameters.Add("@importe_sal_feb", OdbcType.Numeric).Value = columnaImporte == "importe_sal_feb" ? importe : 0;

                        parameters.Add("@existencia_ent_mar", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_mar" ? cantidad : 0;
                        parameters.Add("@importe_ent_mar", OdbcType.Numeric).Value = columnaImporte == "importe_ent_mar" ? importe : 0;
                        parameters.Add("@existencia_sal_mar", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_mar" ? cantidad : 0;
                        parameters.Add("@importe_sal_mar", OdbcType.Numeric).Value = columnaImporte == "importe_sal_mar" ? importe : 0;

                        parameters.Add("@existencia_ent_abr", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_abr" ? cantidad : 0;
                        parameters.Add("@importe_ent_abr", OdbcType.Numeric).Value = columnaImporte == "importe_ent_abr" ? importe : 0;
                        parameters.Add("@existencia_sal_abr", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_abr" ? cantidad : 0;
                        parameters.Add("@importe_sal_abr", OdbcType.Numeric).Value = columnaImporte == "importe_sal_abr" ? importe : 0;

                        parameters.Add("@existencia_ent_may", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_may" ? cantidad : 0;
                        parameters.Add("@importe_ent_may", OdbcType.Numeric).Value = columnaImporte == "importe_ent_may" ? importe : 0;
                        parameters.Add("@existencia_sal_may", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_may" ? cantidad : 0;
                        parameters.Add("@importe_sal_may", OdbcType.Numeric).Value = columnaImporte == "importe_sal_may" ? importe : 0;

                        parameters.Add("@existencia_ent_jun", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_jun" ? cantidad : 0;
                        parameters.Add("@importe_ent_jun", OdbcType.Numeric).Value = columnaImporte == "importe_ent_jun" ? importe : 0;
                        parameters.Add("@existencia_sal_jun", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_jun" ? cantidad : 0;
                        parameters.Add("@importe_sal_jun", OdbcType.Numeric).Value = columnaImporte == "importe_sal_jun" ? importe : 0;

                        parameters.Add("@existencia_ent_jul", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_jul" ? cantidad : 0;
                        parameters.Add("@importe_ent_jul", OdbcType.Numeric).Value = columnaImporte == "importe_ent_jul" ? importe : 0;
                        parameters.Add("@existencia_sal_jul", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_jul" ? cantidad : 0;
                        parameters.Add("@importe_sal_jul", OdbcType.Numeric).Value = columnaImporte == "importe_sal_jul" ? importe : 0;

                        parameters.Add("@existencia_ent_ago", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_ago" ? cantidad : 0;
                        parameters.Add("@importe_ent_ago", OdbcType.Numeric).Value = columnaImporte == "importe_ent_ago" ? importe : 0;
                        parameters.Add("@existencia_sal_ago", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_ago" ? cantidad : 0;
                        parameters.Add("@importe_sal_ago", OdbcType.Numeric).Value = columnaImporte == "importe_sal_ago" ? importe : 0;

                        parameters.Add("@existencia_ent_sep", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_sep" ? cantidad : 0;
                        parameters.Add("@importe_ent_sep", OdbcType.Numeric).Value = columnaImporte == "importe_ent_sep" ? importe : 0;
                        parameters.Add("@existencia_sal_sep", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_sep" ? cantidad : 0;
                        parameters.Add("@importe_sal_sep", OdbcType.Numeric).Value = columnaImporte == "importe_sal_sep" ? importe : 0;

                        parameters.Add("@existencia_ent_oct", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_oct" ? cantidad : 0;
                        parameters.Add("@importe_ent_oct", OdbcType.Numeric).Value = columnaImporte == "importe_ent_oct" ? importe : 0;
                        parameters.Add("@existencia_sal_oct", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_oct" ? cantidad : 0;
                        parameters.Add("@importe_sal_oct", OdbcType.Numeric).Value = columnaImporte == "importe_sal_oct" ? importe : 0;

                        parameters.Add("@existencia_ent_nov", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_nov" ? cantidad : 0;
                        parameters.Add("@importe_ent_nov", OdbcType.Numeric).Value = columnaImporte == "importe_ent_nov" ? importe : 0;
                        parameters.Add("@existencia_sal_nov", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_nov" ? cantidad : 0;
                        parameters.Add("@importe_sal_nov", OdbcType.Numeric).Value = columnaImporte == "importe_sal_nov" ? importe : 0;

                        parameters.Add("@existencia_ent_dic", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_dic" ? cantidad : 0;
                        parameters.Add("@importe_ent_dic", OdbcType.Numeric).Value = columnaImporte == "importe_ent_dic" ? importe : 0;
                        parameters.Add("@existencia_sal_dic", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_dic" ? cantidad : 0;
                        parameters.Add("@importe_sal_dic", OdbcType.Numeric).Value = columnaImporte == "importe_sal_dic" ? importe : 0;

                        parameters.Add("@insumo", OdbcType.Numeric).Value = insumo;

                        cmd.Connection = trans.Connection;
                        cmd.Transaction = trans;

                        count += cmd.ExecuteNonQuery();
                    }
                    #endregion
                }
                #endregion

                #region Update Registro Acumula CC
                var registroAcumulaCCEK = consultaCheckProductivo(
                    string.Format(@"SELECT * FROM si_acumula_cc WHERE cc = '{0}' AND ano = {1} AND insumo = {2}", cc, anio, insumo)
                );

                if (registroAcumulaCCEK != null)
                {
                    var registroAcumulaCC = ((List<AcumulaEnkontrolDTO>)registroAcumulaCCEK.ToObject<List<AcumulaEnkontrolDTO>>())[0];

                    var existenciaAnteriorCC = Convert.ToDecimal(registroAcumulaCC.GetType().GetProperty(columnaExistencia).GetValue(registroAcumulaCC), CultureInfo.InvariantCulture);
                    var importeAnteriorCC = Convert.ToDecimal(registroAcumulaCC.GetType().GetProperty(columnaImporte).GetValue(registroAcumulaCC), CultureInfo.InvariantCulture);

                    var consultaUpdateCC =
                        string.Format(@"UPDATE DBA.si_acumula_cc 
                                    SET {0} = ?, {1} = ?, ultimo_cp = ?, fecha_cp = ? 
                                        WHERE cc = ? AND ano = ? AND insumo = ?", columnaExistencia, columnaImporte);

                    using (var cmd = new OdbcCommand(consultaUpdateCC))
                    {
                        OdbcParameterCollection parameters = cmd.Parameters;

                        parameters.Add(string.Concat("@", columnaExistencia), OdbcType.Numeric).Value = existenciaAnteriorCC + cantidad;
                        parameters.Add(string.Concat("@", columnaImporte), OdbcType.Numeric).Value = importeAnteriorCC + importe;

                        if (det.costo_prom > 0)
                        {
                            parameters.Add("@ultimo_cp", OdbcType.Numeric).Value = det.costo_prom ?? 0;
                            parameters.Add("@fecha_cp", OdbcType.Date).Value = DateTime.Now.Date;
                        }
                        else
                        {
                            parameters.Add("@ultimo_cp", OdbcType.Numeric).Value = registroAcumulaCC.ultimo_cp ?? (object)DBNull.Value;
                            parameters.Add("@fecha_cp", OdbcType.Date).Value = registroAcumulaCC.fecha_cp ?? (object)DBNull.Value;
                        }

                        parameters.Add("@cc", OdbcType.Char).Value = cc;
                        parameters.Add("@ano", OdbcType.Numeric).Value = anio;
                        parameters.Add("@insumo", OdbcType.Numeric).Value = insumo;

                        cmd.Connection = trans.Connection;
                        cmd.Transaction = trans;

                        count += cmd.ExecuteNonQuery();
                    }
                }
                else
                {
                    #region Insert Registro en la tabla "si_acumula_cc"
                    var consultaInsertAcumulaCC = @"INSERT INTO si_acumula_cc 
                                                    (cc, ano, 
                                                    existencia_ent_ini, importe_ent_ini, existencia_sal_ini, importe_sal_ini, 
                                                    existencia_ent_ene, importe_ent_ene, existencia_sal_ene, importe_sal_ene, 
                                                    existencia_ent_feb, importe_ent_feb, existencia_sal_feb, importe_sal_feb, 
                                                    existencia_ent_mar, importe_ent_mar, existencia_sal_mar, importe_sal_mar, 
                                                    existencia_ent_abr, importe_ent_abr, existencia_sal_abr, importe_sal_abr, 
                                                    existencia_ent_may, importe_ent_may, existencia_sal_may, importe_sal_may, 
                                                    existencia_ent_jun, importe_ent_jun, existencia_sal_jun, importe_sal_jun, 
                                                    existencia_ent_jul, importe_ent_jul, existencia_sal_jul, importe_sal_jul, 
                                                    existencia_ent_ago, importe_ent_ago, existencia_sal_ago, importe_sal_ago, 
                                                    existencia_ent_sep, importe_ent_sep, existencia_sal_sep, importe_sal_sep, 
                                                    existencia_ent_oct, importe_ent_oct, existencia_sal_oct, importe_sal_oct, 
                                                    existencia_ent_nov, importe_ent_nov, existencia_sal_nov, importe_sal_nov, 
                                                    existencia_ent_dic, importe_ent_dic, existencia_sal_dic, importe_sal_dic, 
                                                    insumo, ultimo_cp, fecha_cp) 
                                                VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                    using (var cmd = new OdbcCommand(consultaInsertAcumulaCC))
                    {
                        OdbcParameterCollection parameters = cmd.Parameters;

                        parameters.Add("@cc", OdbcType.Char).Value = cc;
                        parameters.Add("@ano", OdbcType.Numeric).Value = DateTime.Now.Year;

                        parameters.Add("@existencia_ent_ini", OdbcType.Numeric).Value = 0;
                        parameters.Add("@importe_ent_ini", OdbcType.Numeric).Value = 0;
                        parameters.Add("@existencia_sal_ini", OdbcType.Numeric).Value = 0;
                        parameters.Add("@importe_sal_ini", OdbcType.Numeric).Value = 0;

                        parameters.Add("@existencia_ent_ene", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_ene" ? cantidad : 0;
                        parameters.Add("@importe_ent_ene", OdbcType.Numeric).Value = columnaImporte == "importe_ent_ene" ? importe : 0;
                        parameters.Add("@existencia_sal_ene", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_ene" ? cantidad : 0;
                        parameters.Add("@importe_sal_ene", OdbcType.Numeric).Value = columnaImporte == "importe_sal_ene" ? importe : 0;

                        parameters.Add("@existencia_ent_feb", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_feb" ? cantidad : 0;
                        parameters.Add("@importe_ent_feb", OdbcType.Numeric).Value = columnaImporte == "importe_ent_feb" ? importe : 0;
                        parameters.Add("@existencia_sal_feb", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_feb" ? cantidad : 0;
                        parameters.Add("@importe_sal_feb", OdbcType.Numeric).Value = columnaImporte == "importe_sal_feb" ? importe : 0;

                        parameters.Add("@existencia_ent_mar", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_mar" ? cantidad : 0;
                        parameters.Add("@importe_ent_mar", OdbcType.Numeric).Value = columnaImporte == "importe_ent_mar" ? importe : 0;
                        parameters.Add("@existencia_sal_mar", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_mar" ? cantidad : 0;
                        parameters.Add("@importe_sal_mar", OdbcType.Numeric).Value = columnaImporte == "importe_sal_mar" ? importe : 0;

                        parameters.Add("@existencia_ent_abr", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_abr" ? cantidad : 0;
                        parameters.Add("@importe_ent_abr", OdbcType.Numeric).Value = columnaImporte == "importe_ent_abr" ? importe : 0;
                        parameters.Add("@existencia_sal_abr", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_abr" ? cantidad : 0;
                        parameters.Add("@importe_sal_abr", OdbcType.Numeric).Value = columnaImporte == "importe_sal_abr" ? importe : 0;

                        parameters.Add("@existencia_ent_may", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_may" ? cantidad : 0;
                        parameters.Add("@importe_ent_may", OdbcType.Numeric).Value = columnaImporte == "importe_ent_may" ? importe : 0;
                        parameters.Add("@existencia_sal_may", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_may" ? cantidad : 0;
                        parameters.Add("@importe_sal_may", OdbcType.Numeric).Value = columnaImporte == "importe_sal_may" ? importe : 0;

                        parameters.Add("@existencia_ent_jun", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_jun" ? cantidad : 0;
                        parameters.Add("@importe_ent_jun", OdbcType.Numeric).Value = columnaImporte == "importe_ent_jun" ? importe : 0;
                        parameters.Add("@existencia_sal_jun", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_jun" ? cantidad : 0;
                        parameters.Add("@importe_sal_jun", OdbcType.Numeric).Value = columnaImporte == "importe_sal_jun" ? importe : 0;

                        parameters.Add("@existencia_ent_jul", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_jul" ? cantidad : 0;
                        parameters.Add("@importe_ent_jul", OdbcType.Numeric).Value = columnaImporte == "importe_ent_jul" ? importe : 0;
                        parameters.Add("@existencia_sal_jul", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_jul" ? cantidad : 0;
                        parameters.Add("@importe_sal_jul", OdbcType.Numeric).Value = columnaImporte == "importe_sal_jul" ? importe : 0;

                        parameters.Add("@existencia_ent_ago", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_ago" ? cantidad : 0;
                        parameters.Add("@importe_ent_ago", OdbcType.Numeric).Value = columnaImporte == "importe_ent_ago" ? importe : 0;
                        parameters.Add("@existencia_sal_ago", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_ago" ? cantidad : 0;
                        parameters.Add("@importe_sal_ago", OdbcType.Numeric).Value = columnaImporte == "importe_sal_ago" ? importe : 0;

                        parameters.Add("@existencia_ent_sep", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_sep" ? cantidad : 0;
                        parameters.Add("@importe_ent_sep", OdbcType.Numeric).Value = columnaImporte == "importe_ent_sep" ? importe : 0;
                        parameters.Add("@existencia_sal_sep", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_sep" ? cantidad : 0;
                        parameters.Add("@importe_sal_sep", OdbcType.Numeric).Value = columnaImporte == "importe_sal_sep" ? importe : 0;

                        parameters.Add("@existencia_ent_oct", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_oct" ? cantidad : 0;
                        parameters.Add("@importe_ent_oct", OdbcType.Numeric).Value = columnaImporte == "importe_ent_oct" ? importe : 0;
                        parameters.Add("@existencia_sal_oct", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_oct" ? cantidad : 0;
                        parameters.Add("@importe_sal_oct", OdbcType.Numeric).Value = columnaImporte == "importe_sal_oct" ? importe : 0;

                        parameters.Add("@existencia_ent_nov", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_nov" ? cantidad : 0;
                        parameters.Add("@importe_ent_nov", OdbcType.Numeric).Value = columnaImporte == "importe_ent_nov" ? importe : 0;
                        parameters.Add("@existencia_sal_nov", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_nov" ? cantidad : 0;
                        parameters.Add("@importe_sal_nov", OdbcType.Numeric).Value = columnaImporte == "importe_sal_nov" ? importe : 0;

                        parameters.Add("@existencia_ent_dic", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_dic" ? cantidad : 0;
                        parameters.Add("@importe_ent_dic", OdbcType.Numeric).Value = columnaImporte == "importe_ent_dic" ? importe : 0;
                        parameters.Add("@existencia_sal_dic", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_dic" ? cantidad : 0;
                        parameters.Add("@importe_sal_dic", OdbcType.Numeric).Value = columnaImporte == "importe_sal_dic" ? importe : 0;

                        parameters.Add("@insumo", OdbcType.Numeric).Value = insumo;
                        parameters.Add("@ultimo_cp", OdbcType.Numeric).Value = importe;
                        parameters.Add("@fecha_cp", OdbcType.Date).Value = DateTime.Now.Date;

                        cmd.Connection = trans.Connection;
                        cmd.Transaction = trans;

                        count += cmd.ExecuteNonQuery();
                    }
                    #endregion
                }
                #endregion

                return true;
                #endregion
            }
        }

        public List<CentroCostoDTO> getCentrosCosto()
        {
            if ((MainContextEnum)vSesiones.sesionEmpresaActual != MainContextEnum.PERU)
            {
                return (List<CentroCostoDTO>)consultaCheckProductivo(string.Format(@"SELECT * FROM cc WHERE st_ppto != 'T' ORDER BY cc")).ToObject<List<CentroCostoDTO>>();

            }
            else
            {
                return _context.tblC_Nom_CatalogoCC.Select(e => new CentroCostoDTO()
                {
                    cc = e.cc,
                    descripcion = e.ccDescripcion,
                    corto = e.ccDescripcion,
                    desc = e.ccDescripcion,
                    st_ppto = "",
                    tipo_iva = "",
                    ppto_global = 0M,
                    fecha_registro = DateTime.Now,
                }).ToList();
            }
        }

        public List<tblAlm_PermisoFamilias> getPermisosFamilia(string cc)
        {
            return _context.tblAlm_PermisoFamilias.Where(x => x.estatus && x.cc == cc).ToList();
        }

        public List<UbicacionDetalleDTO> getExistencias(int empresa, int insumo, int almacen)
        {
            var ubicacionDetalle = new List<UbicacionDetalleDTO>();

            switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
            {
                case EmpresaEnum.Peru:
                    {
                        #region PERÚ
                        using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                        {
                            var listaInsumos = _starsoft.MAEART.ToList();

                            ubicacionDetalle.AddRange(_context.tblAlm_MovimientosDet.Where(x => x.estatusHabilitado && x.insumo == insumo && x.almacen == almacen).ToList().GroupBy(x => new
                            {
                                x.insumo,
                                x.area_alm,
                                x.lado_alm,
                                x.estante_alm,
                                x.nivel_alm
                            }).Select(x => new UbicacionDetalleDTO
                            {
                                insumo = x.Key.insumo,
                                insumoDesc = x.Key.insumo.ToString() + "-" + listaInsumos.Where(y => Int32.Parse(y.ACODIGO) == x.Key.insumo).Select(z => z.ADESCRI).FirstOrDefault(),
                                cantidad = x.Sum(y => y.tipo_mov < 50 ? y.cantidad : (y.cantidad * -1)),
                                area_alm = x.Key.area_alm,
                                lado_alm = x.Key.lado_alm,
                                estante_alm = x.Key.estante_alm,
                                nivel_alm = x.Key.nivel_alm
                            }).ToList());

                            foreach (var ubi in ubicacionDetalle)
                            {
                                var ultimoConsumo = _context.tblAlm_Movimientos.Where(x => x.estatusHabilitado && x.almacen == almacen && x.tipo_mov == 51).Join(
                                    _context.tblAlm_MovimientosDet.Where(x => x.estatusHabilitado && x.almacen == almacen && x.insumo == insumo &&
                                        x.area_alm == ubi.area_alm && x.lado_alm == ubi.lado_alm && x.estante_alm == ubi.estante_alm && x.nivel_alm == ubi.nivel_alm
                                    ),
                                    g => new { g.almacen, g.tipo_mov, g.numero },
                                    d => new { d.almacen, d.tipo_mov, d.numero },
                                    (g, d) => new { g, d }
                                ).ToList().OrderByDescending(x => x.g.fecha).FirstOrDefault();

                                if (ultimoConsumo != null)
                                {
                                    ubi.ultimoConsumoString = ultimoConsumo.g.fecha.ToShortDateString();
                                }

                                var ultimaCompra = _context.tblAlm_Movimientos.Where(x => x.estatusHabilitado && x.almacen == almacen && x.tipo_mov == 1).Join(
                                    _context.tblAlm_MovimientosDet.Where(x => x.estatusHabilitado && x.almacen == almacen && x.insumo == insumo &&
                                        x.area_alm == ubi.area_alm && x.lado_alm == ubi.lado_alm && x.estante_alm == ubi.estante_alm && x.nivel_alm == ubi.nivel_alm
                                    ),
                                    g => new { g.almacen, g.tipo_mov, g.numero },
                                    d => new { d.almacen, d.tipo_mov, d.numero },
                                    (g, d) => new { g, d }
                                ).ToList().OrderByDescending(x => x.g.fecha).FirstOrDefault();

                                if (ultimaCompra != null)
                                {
                                    ubi.ultimaCompraString = ultimaCompra.g.fecha.ToShortDateString();
                                }
                            }
                        }
                        break;
                        #endregion
                    }
                default:
                    {
                        #region DEMÁS EMPRESAS
                        dynamic entradasEK = null;
                        dynamic salidasEK = null;

                        var consultaEntradas =
                            string.Format(@"SELECT 
                                    det.insumo, 
                                    (CAST(det.insumo AS Varchar) + '-' + ins.descripcion) AS insumoDesc, 
                                    SUM(det.cantidad) AS cantidad, 
                                    det.area_alm, 
                                    det.lado_alm, 
                                    det.estante_alm, 
                                    det.nivel_alm 
                                FROM si_movimientos mov 
                                    INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                                    INNER JOIN insumos ins ON det.insumo = ins.insumo 
                                WHERE mov.almacen = {0} AND det.insumo = {1} AND det.tipo_mov < 50 
                                GROUP BY det.insumo, ins.descripcion, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm", almacen, insumo);

                        var consultaSalidas =
                            string.Format(@"SELECT 
                                    det.insumo, 
                                    (CAST(det.insumo AS Varchar) + '-' + ins.descripcion) AS insumoDesc, 
                                    SUM(det.cantidad) AS cantidad, 
                                    det.area_alm, 
                                    det.lado_alm, 
                                    det.estante_alm, 
                                    det.nivel_alm 
                                FROM si_movimientos mov 
                                    INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                                    INNER JOIN insumos ins ON det.insumo = ins.insumo 
                                WHERE mov.almacen = {0} AND det.insumo = {1} AND det.tipo_mov > 50 
                                GROUP BY det.insumo, ins.descripcion, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm", almacen, insumo);

                        #region Conexión dependiendo de la empresa y si es productivo o no
                        if (productivo)
                        {
                            if (empresa == 1)
                            {
                                entradasEK = _contextEnkontrol.WhereComprasOrigen(consultaEntradas);
                                salidasEK = _contextEnkontrol.WhereComprasOrigen(consultaSalidas);
                            }
                            else
                            {
                                entradasEK = ContextArrendadora.Where(consultaEntradas);
                                salidasEK = ContextArrendadora.Where(consultaSalidas);
                            }
                        }
                        else
                        {
                            if (empresa == 1)
                            {
                                entradasEK = _contextEnkontrolPrueba.Where(consultaEntradas);
                                salidasEK = _contextEnkontrolPrueba.Where(consultaSalidas);
                            }
                            else
                            {
                                entradasEK = ContextArrendadora.WherePrueba(consultaEntradas);
                                salidasEK = ContextArrendadora.WherePrueba(consultaSalidas);
                            }
                        }
                        #endregion

                        if (entradasEK != null)
                        {
                            var entradas = (List<UbicacionDetalleDTO>)entradasEK.ToObject<List<UbicacionDetalleDTO>>();

                            if (salidasEK != null)
                            {
                                var salidas = (List<UbicacionDetalleDTO>)salidasEK.ToObject<List<UbicacionDetalleDTO>>();

                                foreach (var ent in entradas)
                                {
                                    var salida = salidas.FirstOrDefault(x =>
                                            x.insumoDesc == ent.insumoDesc &&
                                            x.area_alm == ent.area_alm &&
                                            x.lado_alm == ent.lado_alm &&
                                            x.estante_alm == ent.estante_alm &&
                                            x.nivel_alm == ent.nivel_alm
                                        );

                                    if (salida != null)
                                    {
                                        ent.cantidad = ent.cantidad - Convert.ToDecimal(salida.cantidad, CultureInfo.InvariantCulture);
                                    }
                                }

                                ubicacionDetalle.AddRange(entradas.Where(x => x.cantidad > 0).ToList());
                            }
                            else
                            {
                                ubicacionDetalle.AddRange(entradas.Where(x => x.cantidad > 0).ToList());
                            }
                        }

                        foreach (var ubi in ubicacionDetalle)
                        {
                            ubi.ultimoConsumoString = getUltimoConsumoUbicacion(insumo, almacen, ubi.area_alm, ubi.lado_alm, ubi.estante_alm, ubi.nivel_alm);
                            ubi.ultimaCompraString = getUltimaCompraUbicacion(insumo, almacen, ubi.area_alm, ubi.lado_alm, ubi.estante_alm, ubi.nivel_alm);
                        }

                        break;
                        #endregion
                    }
            }

            return ubicacionDetalle;
        }

        string getUltimoConsumoUbicacion(int insumo, int almacenID, string area_alm, string lado_alm, string estante_alm, string nivel_alm)
        {
            var res = consultaCheckProductivo(
                        string.Format(@"SELECT 
                                            TOP 1 mov.fecha 
                                        FROM si_movimientos mov 
                                            INNER JOIN si_almacen alm ON alm.almacen = mov.almacen 
                                            INNER JOIN si_movimientos_det det ON det.almacen = mov.almacen AND det.tipo_mov = mov.tipo_mov AND det.numero = mov.numero 
                                        WHERE 
                                            det.insumo = {0} AND alm.almacen = {1} AND mov.tipo_mov = 51 AND 
                                            det.area_alm = '{2}' AND 
                                            det.lado_alm = '{3}' AND 
                                            det.estante_alm = '{4}' AND 
                                            det.nivel_alm = '{5}' 
                                        ORDER BY mov.fecha DESC", insumo, almacenID, area_alm, lado_alm, estante_alm, nivel_alm));

            List<dynamic> ultimoConsumo = new List<dynamic>();

            if (res != null)
            {
                ultimoConsumo = (List<dynamic>)res.ToObject<List<dynamic>>();
            }

            return res != null ? ((DateTime)ultimoConsumo[0].fecha).Date.ToShortDateString() : "";
        }

        string getUltimaCompraUbicacion(int insumo, int almacenID, string area_alm, string lado_alm, string estante_alm, string nivel_alm)
        {
            var res = consultaCheckProductivo(
                        string.Format(@"SELECT 
                                            TOP 1 mov.fecha 
                                        FROM si_movimientos mov 
                                            INNER JOIN si_almacen alm ON alm.almacen = mov.almacen 
                                            INNER JOIN si_movimientos_det det ON det.almacen = mov.almacen AND det.tipo_mov = mov.tipo_mov AND det.numero = mov.numero 
                                        WHERE 
                                            det.insumo = {0} AND 
                                            alm.almacen = {1} AND 
                                            mov.tipo_mov = 1 AND 
                                            det.area_alm = '{2}' AND 
                                            det.lado_alm = '{3}' AND 
                                            det.estante_alm = '{4}' AND 
                                            det.nivel_alm = '{5}' 
                                        ORDER BY mov.fecha DESC", insumo, almacenID, area_alm, lado_alm, estante_alm, nivel_alm));

            List<dynamic> ultimaCompra = new List<dynamic>();

            if (res != null)
            {
                ultimaCompra = (List<dynamic>)res.ToObject<List<dynamic>>();
            }

            return res != null ? ((DateTime)ultimaCompra[0].fecha).Date.ToShortDateString() : "";
        }

        private decimal getCostoPromedioNuevo(int almacen, int insumo)
        {
            decimal costoPromedio = 0;

            var costoPromedioEK = consultaCheckProductivo(
                string.Format(@"SELECT 
                                    ROUND(AVG(precio), 1) AS costo_prom 
                                FROM si_movimientos_det 
                                WHERE almacen = {0} AND insumo = {1}", almacen, insumo)
            );

            if (costoPromedioEK != null)
            {
                var costoPromedioENKONTROL = ((List<dynamic>)costoPromedioEK.ToObject<List<dynamic>>())[0];

                if (costoPromedioENKONTROL.costo_prom != null)
                {
                    costoPromedio = Convert.ToDecimal(costoPromedioENKONTROL.costo_prom, CultureInfo.InvariantCulture);
                }
            }

            return costoPromedio;
        }

        public bool cargarExcelTraspasoMasivo(HttpPostedFileBase archivo)
        {
            List<List<string>> tabla = new List<List<string>>();

            #region Convertir Archivo a Arreglo de bytes.
            byte[] data;

            using (Stream inputStream = archivo.InputStream)
            {
                MemoryStream memoryStream = inputStream as MemoryStream;

                if (memoryStream == null)
                {
                    memoryStream = new MemoryStream();
                    inputStream.CopyTo(memoryStream);
                }

                data = memoryStream.ToArray();
            }
            #endregion

            #region Leer Arreglo de bytes.
            using (MemoryStream stream = new MemoryStream(data))
            using (ExcelPackage excelPackage = new ExcelPackage(stream))
            {
                //loop all worksheets
                foreach (ExcelWorksheet worksheet in excelPackage.Workbook.Worksheets)
                {
                    //loop all rows
                    for (int i = worksheet.Dimension.Start.Row; i <= worksheet.Dimension.End.Row; i++)
                    {
                        List<string> fila = new List<string>();

                        //loop all columns in a row
                        for (int j = worksheet.Dimension.Start.Column; j <= worksheet.Dimension.End.Column; j++)
                        {
                            //add the cell data to the List
                            if (worksheet.Cells[i, j].Value != null)
                            {
                                fila.Add(worksheet.Cells[i, j].Value.ToString());
                            }
                            else
                            {
                                fila.Add("");
                            }
                        }

                        if (i > 1 && fila[0] != "")
                        {
                            tabla.Add(fila);
                        }
                    }
                }
            }
            #endregion

            using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
            {
                using (var con = checkConexionProductivo())
                {
                    using (var trans = con.BeginTransaction())
                    {
                        try
                        {
                            var empleado = 0;
                            var usuarioSigoplan = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                            if (usuarioSigoplan != null)
                            {
                                empleado = usuarioSigoplan.empleado;
                            }

                            if (empleado == 0)
                            {
                                throw new Exception("No se encuentra el usuario logeado.");
                            }
                            else if (empleado != 1 && empleado != 412)
                            {
                                throw new Exception("El usuario no tiene permiso para realizar un traspaso masivo.");
                            }

                            decimal total = 0;
                            Dictionary<int, decimal> dictCostosPromedio = new Dictionary<int, decimal>();

                            foreach (var fila in tabla)
                            {
                                var almacen = Int32.Parse(fila[0]);
                                var insumo = Int32.Parse(fila[3]);
                                var cantidad = Convert.ToDecimal(fila[5], CultureInfo.InvariantCulture);

                                var costoPromedioEK = ((List<dynamic>)consultaCheckProductivo(
                                    string.Format(@"SELECT AVG(precio) AS costo_promedio FROM si_movimientos_det WHERE almacen = {0} AND insumo = {1}", almacen, insumo)
                                ).ToObject<List<dynamic>>())[0];
                                var costoPromedio = Convert.ToDecimal(costoPromedioEK.costo_promedio, CultureInfo.InvariantCulture);

                                if (!dictCostosPromedio.ContainsKey(insumo))
                                {
                                    dictCostosPromedio.Add(insumo, costoPromedio);
                                }

                                var importe = cantidad * costoPromedio;

                                total += importe;
                            }

                            var count = 0;

                            #region Salida
                            var almacenOrigen = Int32.Parse(tabla[0][0]);
                            var ccOrigen = tabla[0][1];
                            var almacenDestino = Int32.Parse(tabla[0][6]);
                            var ccDestino = tabla[0][7];
                            var comentarios = tabla[0][9];
                            var nuevoFolioSalida = 0;

                            var ultimoMovimientoSalidaEK = consultaCheckProductivo(
                                string.Format(@"SELECT 
                                                    TOP 1 numero, folio_traspaso 
                                                FROM si_movimientos 
                                                WHERE almacen = {0} AND tipo_mov = {1} 
                                                ORDER BY numero DESC", almacenOrigen, 52)
                            );

                            if (ultimoMovimientoSalidaEK != null)
                            {
                                var ultimoMovimientoSalida = ((List<SurtidoDetDTO>)ultimoMovimientoSalidaEK.ToObject<List<SurtidoDetDTO>>())[0];

                                nuevoFolioSalida = ultimoMovimientoSalida.numero;
                            }

                            #region Movimiento SIGOPLAN
                            var movimientoSalidaSIGOPLAN = new tblAlm_Movimientos();

                            movimientoSalidaSIGOPLAN.almacen = almacenOrigen;
                            movimientoSalidaSIGOPLAN.tipo_mov = 52;
                            movimientoSalidaSIGOPLAN.numero = nuevoFolioSalida + 1;
                            movimientoSalidaSIGOPLAN.cc = ccOrigen.ToUpper();
                            movimientoSalidaSIGOPLAN.compania = 1;
                            movimientoSalidaSIGOPLAN.periodo = DateTime.Now.Month;
                            movimientoSalidaSIGOPLAN.ano = DateTime.Now.Year;
                            movimientoSalidaSIGOPLAN.orden_ct = 0;
                            movimientoSalidaSIGOPLAN.frente = 0;
                            movimientoSalidaSIGOPLAN.fecha = DateTime.Now.Date;
                            movimientoSalidaSIGOPLAN.proveedor = 0;
                            movimientoSalidaSIGOPLAN.total = total;
                            movimientoSalidaSIGOPLAN.estatus = "A";
                            movimientoSalidaSIGOPLAN.transferida = "S";
                            movimientoSalidaSIGOPLAN.alm_destino = almacenDestino;
                            movimientoSalidaSIGOPLAN.cc_destino = ccDestino.ToUpper();
                            movimientoSalidaSIGOPLAN.comentarios = comentarios;
                            movimientoSalidaSIGOPLAN.tipo_trasp = "C";
                            movimientoSalidaSIGOPLAN.tipo_cambio = 1;
                            movimientoSalidaSIGOPLAN.estatusHabilitado = true;
                            movimientoSalidaSIGOPLAN.numeroOC = null;
                            movimientoSalidaSIGOPLAN.numeroReq = null;
                            movimientoSalidaSIGOPLAN.ccReq = null;

                            _context.tblAlm_Movimientos.Add(movimientoSalidaSIGOPLAN);
                            _context.SaveChanges();
                            #endregion

                            #region Movimiento Enkontrol
                            var consultaMovimientoSalida = @"INSERT INTO si_movimientos 
                                         (almacen, tipo_mov, numero, cc, compania, periodo, ano, orden_ct, frente, fecha, proveedor, total, estatus, 
                                         transferida, poliza, empleado, alm_destino, cc_destino, comentarios, tipo_trasp, numero_destino, tp, year_poliza, 
                                         mes_poliza, tipo_cambio, hora, fecha_modifica, empleado_modifica, destajista, obra, id_residente, factura, sector_id, 
                                         tc_cc, paquete, tipo_cargo, cargo_destajista, cargo_id_residente, embarque, orden_prod, folio_traspaso, bit_sin_ubicacion) 
                                         VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                            using (var cmd = new OdbcCommand(consultaMovimientoSalida))
                            {
                                OdbcParameterCollection parameters = cmd.Parameters;

                                parameters.Add("@almacen", OdbcType.Numeric).Value = movimientoSalidaSIGOPLAN.almacen;
                                parameters.Add("@tipo_mov", OdbcType.Numeric).Value = movimientoSalidaSIGOPLAN.tipo_mov;
                                parameters.Add("@numero", OdbcType.Numeric).Value = movimientoSalidaSIGOPLAN.numero;
                                parameters.Add("@cc", OdbcType.Char).Value = movimientoSalidaSIGOPLAN.cc;
                                parameters.Add("@compania", OdbcType.Numeric).Value = movimientoSalidaSIGOPLAN.compania;
                                parameters.Add("@periodo", OdbcType.Numeric).Value = movimientoSalidaSIGOPLAN.periodo;
                                parameters.Add("@ano", OdbcType.Numeric).Value = movimientoSalidaSIGOPLAN.ano;
                                parameters.Add("@orden_ct", OdbcType.Numeric).Value = movimientoSalidaSIGOPLAN.orden_ct;
                                parameters.Add("@frente", OdbcType.Numeric).Value = movimientoSalidaSIGOPLAN.frente;
                                parameters.Add("@fecha", OdbcType.Date).Value = movimientoSalidaSIGOPLAN.fecha.Date;
                                parameters.Add("@proveedor", OdbcType.Numeric).Value = movimientoSalidaSIGOPLAN.proveedor;
                                parameters.Add("@total", OdbcType.Numeric).Value = movimientoSalidaSIGOPLAN.total;
                                parameters.Add("@estatus", OdbcType.Char).Value = movimientoSalidaSIGOPLAN.estatus;
                                parameters.Add("@transferida", OdbcType.Char).Value = movimientoSalidaSIGOPLAN.transferida;
                                parameters.Add("@poliza", OdbcType.Numeric).Value = 0;
                                parameters.Add("@empleado", OdbcType.Numeric).Value = empleado;
                                parameters.Add("@alm_destino", OdbcType.Numeric).Value = movimientoSalidaSIGOPLAN.alm_destino;
                                parameters.Add("@cc_destino", OdbcType.Char).Value = movimientoSalidaSIGOPLAN.cc_destino;
                                parameters.Add("@comentarios", OdbcType.Char).Value = movimientoSalidaSIGOPLAN.comentarios != null ? movimientoSalidaSIGOPLAN.comentarios : "";
                                parameters.Add("@tipo_trasp", OdbcType.Char).Value = movimientoSalidaSIGOPLAN.tipo_trasp;
                                parameters.Add("@numero_destino", OdbcType.Numeric).Value = 0;
                                parameters.Add("@tp", OdbcType.Char).Value = DBNull.Value;
                                parameters.Add("@year_poliza", OdbcType.Numeric).Value = DateTime.Now.Year;
                                parameters.Add("@mes_poliza", OdbcType.Numeric).Value = DateTime.Now.Month;
                                parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = movimientoSalidaSIGOPLAN.tipo_cambio;
                                parameters.Add("@hora", OdbcType.Time).Value = DateTime.Now.TimeOfDay;
                                parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = empleado;
                                parameters.Add("@destajista", OdbcType.Numeric).Value = DBNull.Value;
                                parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                parameters.Add("@id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                parameters.Add("@factura", OdbcType.Numeric).Value = DBNull.Value;
                                parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                parameters.Add("@tc_cc", OdbcType.Numeric).Value = 1;
                                parameters.Add("@paquete", OdbcType.Numeric).Value = DBNull.Value;
                                parameters.Add("@tipo_cargo", OdbcType.Numeric).Value = 0;
                                parameters.Add("@cargo_Destajista", OdbcType.Numeric).Value = DBNull.Value;
                                parameters.Add("@cargo_id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                parameters.Add("@embarque", OdbcType.Numeric).Value = DBNull.Value;
                                parameters.Add("@orden_prod", OdbcType.Numeric).Value = DBNull.Value;
                                parameters.Add("@folio_traspaso", OdbcType.Numeric).Value = DBNull.Value;
                                parameters.Add("@bit_sin_ubicacion", OdbcType.Numeric).Value = 0;

                                cmd.Connection = trans.Connection;
                                cmd.Transaction = trans;

                                count += cmd.ExecuteNonQuery();
                            }
                            #endregion

                            int partidaContadorSalida = 1;

                            foreach (var fila in tabla)
                            {
                                int partida = partidaContadorSalida++;
                                var listUbicacion = fila[2].Split(new char[0]);
                                var insumo = Int32.Parse(fila[3]);
                                var cantidad = Convert.ToDecimal(fila[5], CultureInfo.InvariantCulture);
                                var precio = dictCostosPromedio.First(x => x.Key == insumo).Value;
                                var importe = cantidad * precio;

                                #region Movimiento Detalle SIGOPLAN
                                tblAlm_MovimientosDet nuevaSalidaDet = new tblAlm_MovimientosDet
                                {
                                    almacen = almacenOrigen,
                                    tipo_mov = 52,
                                    numero = nuevoFolioSalida + 1,
                                    partida = partida,
                                    insumo = insumo,
                                    comentarios = fila[9],
                                    area = 0,
                                    cuenta = 0,
                                    cantidad = cantidad,
                                    precio = precio,
                                    importe = importe,
                                    id_resguardo = 0,
                                    area_alm = listUbicacion[0],
                                    lado_alm = listUbicacion[1],
                                    estante_alm = listUbicacion[2],
                                    nivel_alm = listUbicacion[3],
                                    transporte = "",
                                    estatusHabilitado = true
                                };

                                _context.tblAlm_MovimientosDet.Add(nuevaSalidaDet);
                                _context.SaveChanges();
                                #endregion

                                #region Movimiento Detalle Enkontrol
                                var consultaMovimientosDetalle = @"INSERT INTO si_movimientos_det 
                                                        (almacen, tipo_mov, numero, partida, insumo, comentarios, area, cuenta, cantidad, precio, importe, 
                                                        partida_oc, costo_prom, obra, manzana_ini, lote_ini, interior_ini, manzana_fin, lote_fin, interior_fin, 
                                                        remision, sector_id, id_resguardo, area_alm, lado_alm, estante_alm, nivel_alm, fecha_fisico) 
                                                        VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                using (var cmd = new OdbcCommand(consultaMovimientosDetalle))
                                {
                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@almacen", OdbcType.Numeric).Value = nuevaSalidaDet.almacen;
                                    parameters.Add("@tipo_mov", OdbcType.Numeric).Value = nuevaSalidaDet.tipo_mov;
                                    parameters.Add("@numero", OdbcType.Numeric).Value = nuevoFolioSalida + 1;
                                    parameters.Add("@partida", OdbcType.Numeric).Value = nuevaSalidaDet.partida;
                                    parameters.Add("@insumo", OdbcType.Numeric).Value = nuevaSalidaDet.insumo;
                                    parameters.Add("@comentarios", OdbcType.Char).Value = nuevaSalidaDet.comentarios != null ? nuevaSalidaDet.comentarios : "";
                                    parameters.Add("@area", OdbcType.Numeric).Value = nuevaSalidaDet.area;
                                    parameters.Add("@cuenta", OdbcType.Numeric).Value = nuevaSalidaDet.cuenta;
                                    parameters.Add("@cantidad", OdbcType.Numeric).Value = nuevaSalidaDet.cantidad;
                                    parameters.Add("@precio", OdbcType.Numeric).Value = precio;
                                    parameters.Add("@importe", OdbcType.Numeric).Value = importe;
                                    parameters.Add("@partida_oc", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@costo_prom", OdbcType.Numeric).Value = precio;
                                    parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@manzana_ini", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@lote_ini", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@interior_ini", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@manzana_fin", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@lote_fin", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@interior_fin", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@remision", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@id_resguardo", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@area_alm", OdbcType.Char).Value = nuevaSalidaDet.area_alm;
                                    parameters.Add("@lado_alm", OdbcType.Char).Value = nuevaSalidaDet.lado_alm;
                                    parameters.Add("@estante_alm", OdbcType.Char).Value = nuevaSalidaDet.estante_alm;
                                    parameters.Add("@nivel_alm", OdbcType.Char).Value = nuevaSalidaDet.nivel_alm;
                                    parameters.Add("@fecha_fisico", OdbcType.Date).Value = DBNull.Value;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;

                                    count += cmd.ExecuteNonQuery();
                                }
                                #endregion

                                #region Actualizar Tablas Acumula
                                var objAcumula = new MovimientoDetalleEnkontrolDTO
                                {
                                    insumo = nuevaSalidaDet.insumo,
                                    cantidad = nuevaSalidaDet.cantidad,
                                    precio = precio,
                                    tipo_mov = nuevaSalidaDet.tipo_mov,
                                    costo_prom = precio
                                };

                                actualizarAcumula(nuevaSalidaDet.almacen, movimientoSalidaSIGOPLAN.cc, objAcumula, dbSigoplanTransaction, trans);
                                #endregion
                            }
                            #endregion

                            #region Entrada
                            var nuevoFolioEntrada = 0;

                            var ultimoMovimientoEntradaEK = consultaCheckProductivo(
                                string.Format(@"SELECT 
                                                    TOP 1 numero, folio_traspaso 
                                                FROM si_movimientos 
                                                WHERE almacen = {0} AND tipo_mov = {1} 
                                                ORDER BY numero DESC", almacenDestino, 2)
                            );

                            if (ultimoMovimientoEntradaEK != null)
                            {
                                var ultimoMovimientoEntrada = ((List<SurtidoDetDTO>)ultimoMovimientoEntradaEK.ToObject<List<SurtidoDetDTO>>())[0];

                                nuevoFolioEntrada = ultimoMovimientoEntrada.numero;
                            }

                            #region Movimiento SIGOPLAN
                            var movimientoEntradaSIGOPLAN = new tblAlm_Movimientos();

                            movimientoEntradaSIGOPLAN.almacen = almacenDestino;
                            movimientoEntradaSIGOPLAN.tipo_mov = 2;
                            movimientoEntradaSIGOPLAN.numero = nuevoFolioEntrada + 1;
                            movimientoEntradaSIGOPLAN.cc = ccDestino.ToUpper();
                            movimientoEntradaSIGOPLAN.compania = 1;
                            movimientoEntradaSIGOPLAN.periodo = DateTime.Now.Month;
                            movimientoEntradaSIGOPLAN.ano = DateTime.Now.Year;
                            movimientoEntradaSIGOPLAN.orden_ct = 0;
                            movimientoEntradaSIGOPLAN.frente = 0;
                            movimientoEntradaSIGOPLAN.fecha = DateTime.Now.Date;
                            movimientoEntradaSIGOPLAN.proveedor = 0;
                            movimientoEntradaSIGOPLAN.total = total;
                            movimientoEntradaSIGOPLAN.estatus = "A";
                            movimientoEntradaSIGOPLAN.transferida = "S";
                            movimientoEntradaSIGOPLAN.alm_destino = almacenOrigen;
                            movimientoEntradaSIGOPLAN.cc_destino = ccOrigen.ToUpper();
                            movimientoEntradaSIGOPLAN.comentarios = comentarios;
                            movimientoEntradaSIGOPLAN.tipo_trasp = "C";
                            movimientoEntradaSIGOPLAN.tipo_cambio = 1;
                            movimientoEntradaSIGOPLAN.estatusHabilitado = true;
                            movimientoEntradaSIGOPLAN.numeroOC = null;
                            movimientoEntradaSIGOPLAN.numeroReq = null;
                            movimientoEntradaSIGOPLAN.ccReq = null;

                            _context.tblAlm_Movimientos.Add(movimientoEntradaSIGOPLAN);
                            _context.SaveChanges();
                            #endregion

                            #region Movimiento Enkontrol
                            var consultaMovimientoEntrada = @"INSERT INTO si_movimientos 
                                         (almacen, tipo_mov, numero, cc, compania, periodo, ano, orden_ct, frente, fecha, proveedor, total, estatus, 
                                         transferida, poliza, empleado, alm_destino, cc_destino, comentarios, tipo_trasp, numero_destino, tp, year_poliza, 
                                         mes_poliza, tipo_cambio, hora, fecha_modifica, empleado_modifica, destajista, obra, id_residente, factura, sector_id, 
                                         tc_cc, paquete, tipo_cargo, cargo_destajista, cargo_id_residente, embarque, orden_prod, folio_traspaso, bit_sin_ubicacion) 
                                         VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                            using (var cmd = new OdbcCommand(consultaMovimientoEntrada))
                            {
                                OdbcParameterCollection parameters = cmd.Parameters;

                                parameters.Add("@almacen", OdbcType.Numeric).Value = movimientoEntradaSIGOPLAN.almacen;
                                parameters.Add("@tipo_mov", OdbcType.Numeric).Value = movimientoEntradaSIGOPLAN.tipo_mov;
                                parameters.Add("@numero", OdbcType.Numeric).Value = movimientoEntradaSIGOPLAN.numero;
                                parameters.Add("@cc", OdbcType.Char).Value = movimientoEntradaSIGOPLAN.cc;
                                parameters.Add("@compania", OdbcType.Numeric).Value = movimientoEntradaSIGOPLAN.compania;
                                parameters.Add("@periodo", OdbcType.Numeric).Value = movimientoEntradaSIGOPLAN.periodo;
                                parameters.Add("@ano", OdbcType.Numeric).Value = movimientoEntradaSIGOPLAN.ano;
                                parameters.Add("@orden_ct", OdbcType.Numeric).Value = movimientoEntradaSIGOPLAN.orden_ct;
                                parameters.Add("@frente", OdbcType.Numeric).Value = movimientoEntradaSIGOPLAN.frente;
                                parameters.Add("@fecha", OdbcType.Date).Value = movimientoEntradaSIGOPLAN.fecha.Date;
                                parameters.Add("@proveedor", OdbcType.Numeric).Value = movimientoEntradaSIGOPLAN.proveedor;
                                parameters.Add("@total", OdbcType.Numeric).Value = movimientoEntradaSIGOPLAN.total;
                                parameters.Add("@estatus", OdbcType.Char).Value = movimientoEntradaSIGOPLAN.estatus;
                                parameters.Add("@transferida", OdbcType.Char).Value = movimientoEntradaSIGOPLAN.transferida;
                                parameters.Add("@poliza", OdbcType.Numeric).Value = 0;
                                parameters.Add("@empleado", OdbcType.Numeric).Value = empleado;
                                parameters.Add("@alm_destino", OdbcType.Numeric).Value = movimientoEntradaSIGOPLAN.alm_destino;
                                parameters.Add("@cc_destino", OdbcType.Char).Value = movimientoEntradaSIGOPLAN.cc_destino;
                                parameters.Add("@comentarios", OdbcType.Char).Value = movimientoEntradaSIGOPLAN.comentarios != null ? movimientoEntradaSIGOPLAN.comentarios : "";
                                parameters.Add("@tipo_trasp", OdbcType.Char).Value = movimientoEntradaSIGOPLAN.tipo_trasp;
                                parameters.Add("@numero_destino", OdbcType.Numeric).Value = 0;
                                parameters.Add("@tp", OdbcType.Char).Value = DBNull.Value;
                                parameters.Add("@year_poliza", OdbcType.Numeric).Value = DateTime.Now.Year;
                                parameters.Add("@mes_poliza", OdbcType.Numeric).Value = DateTime.Now.Month;
                                parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = movimientoEntradaSIGOPLAN.tipo_cambio;
                                parameters.Add("@hora", OdbcType.Time).Value = DateTime.Now.TimeOfDay;
                                parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = empleado;
                                parameters.Add("@destajista", OdbcType.Numeric).Value = DBNull.Value;
                                parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                parameters.Add("@id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                parameters.Add("@factura", OdbcType.Numeric).Value = DBNull.Value;
                                parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                parameters.Add("@tc_cc", OdbcType.Numeric).Value = 1;
                                parameters.Add("@paquete", OdbcType.Numeric).Value = DBNull.Value;
                                parameters.Add("@tipo_cargo", OdbcType.Numeric).Value = 0;
                                parameters.Add("@cargo_Destajista", OdbcType.Numeric).Value = DBNull.Value;
                                parameters.Add("@cargo_id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                parameters.Add("@embarque", OdbcType.Numeric).Value = DBNull.Value;
                                parameters.Add("@orden_prod", OdbcType.Numeric).Value = DBNull.Value;
                                parameters.Add("@folio_traspaso", OdbcType.Numeric).Value = DBNull.Value;
                                parameters.Add("@bit_sin_ubicacion", OdbcType.Numeric).Value = 0;

                                cmd.Connection = trans.Connection;
                                cmd.Transaction = trans;

                                count += cmd.ExecuteNonQuery();
                            }
                            #endregion

                            int partidaContadorEntrada = 1;

                            foreach (var fila in tabla)
                            {
                                int partida = partidaContadorEntrada++;
                                var listUbicacion = fila[8].Split(new char[0]);
                                var insumo = Int32.Parse(fila[3]);
                                var cantidad = Convert.ToDecimal(fila[5], CultureInfo.InvariantCulture);
                                var precio = dictCostosPromedio.First(x => x.Key == insumo).Value;
                                var importe = cantidad * precio;

                                #region Movimiento Detalle SIGOPLAN
                                tblAlm_MovimientosDet nuevaEntradaDet = new tblAlm_MovimientosDet
                                {
                                    almacen = almacenDestino,
                                    tipo_mov = 2,
                                    numero = nuevoFolioEntrada + 1,
                                    partida = partida,
                                    insumo = insumo,
                                    comentarios = fila[9],
                                    area = 0,
                                    cuenta = 0,
                                    cantidad = cantidad,
                                    precio = precio,
                                    importe = importe,
                                    id_resguardo = 0,
                                    area_alm = listUbicacion[0],
                                    lado_alm = listUbicacion[1],
                                    estante_alm = listUbicacion[2],
                                    nivel_alm = listUbicacion[3],
                                    transporte = "",
                                    estatusHabilitado = true
                                };

                                _context.tblAlm_MovimientosDet.Add(nuevaEntradaDet);
                                _context.SaveChanges();
                                #endregion

                                #region Movimiento Detalle Enkontrol
                                var consultaMovimientosDetalle = @"INSERT INTO si_movimientos_det 
                                                        (almacen, tipo_mov, numero, partida, insumo, comentarios, area, cuenta, cantidad, precio, importe, 
                                                        partida_oc, costo_prom, obra, manzana_ini, lote_ini, interior_ini, manzana_fin, lote_fin, interior_fin, 
                                                        remision, sector_id, id_resguardo, area_alm, lado_alm, estante_alm, nivel_alm, fecha_fisico) 
                                                        VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                using (var cmd = new OdbcCommand(consultaMovimientosDetalle))
                                {
                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@almacen", OdbcType.Numeric).Value = nuevaEntradaDet.almacen;
                                    parameters.Add("@tipo_mov", OdbcType.Numeric).Value = nuevaEntradaDet.tipo_mov;
                                    parameters.Add("@numero", OdbcType.Numeric).Value = nuevoFolioEntrada + 1;
                                    parameters.Add("@partida", OdbcType.Numeric).Value = nuevaEntradaDet.partida;
                                    parameters.Add("@insumo", OdbcType.Numeric).Value = nuevaEntradaDet.insumo;
                                    parameters.Add("@comentarios", OdbcType.Char).Value = nuevaEntradaDet.comentarios != null ? nuevaEntradaDet.comentarios : "";
                                    parameters.Add("@area", OdbcType.Numeric).Value = nuevaEntradaDet.area;
                                    parameters.Add("@cuenta", OdbcType.Numeric).Value = nuevaEntradaDet.cuenta;
                                    parameters.Add("@cantidad", OdbcType.Numeric).Value = nuevaEntradaDet.cantidad;
                                    parameters.Add("@precio", OdbcType.Numeric).Value = precio;
                                    parameters.Add("@importe", OdbcType.Numeric).Value = importe;
                                    parameters.Add("@partida_oc", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@costo_prom", OdbcType.Numeric).Value = precio;
                                    parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@manzana_ini", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@lote_ini", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@interior_ini", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@manzana_fin", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@lote_fin", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@interior_fin", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@remision", OdbcType.Char).Value = DBNull.Value;
                                    parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@id_resguardo", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@area_alm", OdbcType.Char).Value = nuevaEntradaDet.area_alm;
                                    parameters.Add("@lado_alm", OdbcType.Char).Value = nuevaEntradaDet.lado_alm;
                                    parameters.Add("@estante_alm", OdbcType.Char).Value = nuevaEntradaDet.estante_alm;
                                    parameters.Add("@nivel_alm", OdbcType.Char).Value = nuevaEntradaDet.nivel_alm;
                                    parameters.Add("@fecha_fisico", OdbcType.Date).Value = DBNull.Value;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;

                                    count += cmd.ExecuteNonQuery();
                                }
                                #endregion

                                #region Actualizar Tablas Acumula
                                var objAcumula = new MovimientoDetalleEnkontrolDTO
                                {
                                    insumo = nuevaEntradaDet.insumo,
                                    cantidad = nuevaEntradaDet.cantidad,
                                    precio = precio,
                                    tipo_mov = nuevaEntradaDet.tipo_mov,
                                    costo_prom = precio
                                };

                                actualizarAcumula(movimientoEntradaSIGOPLAN.almacen, movimientoEntradaSIGOPLAN.cc, objAcumula, dbSigoplanTransaction, trans);
                                #endregion
                            }
                            #endregion

                            trans.Commit();
                            dbSigoplanTransaction.Commit();
                        }
                        catch (Exception e)
                        {
                            trans.Rollback();
                            dbSigoplanTransaction.Rollback();

                            throw new Exception(e.Message);
                        }
                    }
                }
            }

            return true;
        }

        public dynamic checkPermisoTraspasoMasivo()
        {
            var usuario = vSesiones.sesionUsuarioDTO;
            var relUser = ufs.getUsuarioService().getUserEk(usuario.id);

            if (relUser.empleado == 1 || relUser.empleado == 412)
            {
                var accesoAdmin = new List<dynamic>();

                accesoAdmin.Add(new { empleado = relUser.empleado });

                return accesoAdmin;
            }
            else
            {
                return null;
            }
        }

        #region Re-impresión de Traspasos
        public List<salidasAlmacenDTO> imprimirMovimientoEntradaTraspaso(int almacen, int numero)
        {
            List<salidasAlmacenDTO> movEntradas = new List<salidasAlmacenDTO>();

            var movimientoEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_movimientos WHERE almacen = {0} AND tipo_mov = 2 AND numero = {1}", almacen, numero));

            if (movimientoEK != null)
            {
                var movimiento = ((List<dynamic>)movimientoEK.ToObject<List<dynamic>>())[0];
                var movimientoDetalleEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_movimientos_det WHERE almacen = {0} AND tipo_mov = 2 AND numero = {1}", almacen, numero));

                if (movimientoDetalleEK != null)
                {
                    var movimientoDetalle = (List<dynamic>)movimientoDetalleEK.ToObject<List<dynamic>>();

                    var centroCostoOrigenEK = consultaCheckProductivo(string.Format(@"SELECT * FROM cc WHERE cc = '{0}'", (string)movimiento.cc));
                    var centroCostoOrigen = (string)movimiento.cc + " - " + ((string)(((List<dynamic>)centroCostoOrigenEK.ToObject<List<dynamic>>())[0].descripcion));
                    var almacenOrigenEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", (int)movimiento.almacen));
                    var almacenOrigen = (int)movimiento.almacen + " - " + ((string)(((List<dynamic>)almacenOrigenEK.ToObject<List<dynamic>>())[0].descripcion));

                    var centroCostoDestinoEK = consultaCheckProductivo(string.Format(@"SELECT * FROM cc WHERE cc = '{0}'", (string)movimiento.cc_destino));
                    var centroCostoDestino = (string)movimiento.cc_destino + " - " + ((string)(((List<dynamic>)centroCostoDestinoEK.ToObject<List<dynamic>>())[0].descripcion));
                    var almacenDestinoEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", (int)movimiento.alm_destino));
                    var almacenDestino = (int)movimiento.alm_destino + " - " + ((string)(((List<dynamic>)almacenDestinoEK.ToObject<List<dynamic>>())[0].descripcion));

                    var recibio = (string)(((List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM empleados WHERE empleado = {0}", (int)movimiento.empleado)).ToObject<List<dynamic>>())[0].descripcion);

                    foreach (var entDet in movimientoDetalle)
                    {
                        var insumoDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM insumos WHERE insumo = {0}", (int)entDet.insumo));
                        var insumoDesc = (string)(((List<dynamic>)insumoDescEK.ToObject<List<dynamic>>())[0].descripcion);
                        var area = entDet.area != null ? (int)entDet.area : 0;
                        var cuenta = entDet.cuenta != null ? (int)entDet.cuenta : 0;
                        var cantidad = Convert.ToDecimal(entDet.cantidad, CultureInfo.InvariantCulture);
                        var precio = Convert.ToDecimal(entDet.precio, CultureInfo.InvariantCulture);
                        var area_alm = entDet.area_alm != null ? (string)entDet.area_alm : "";
                        var lado_alm = entDet.lado_alm != null ? (string)entDet.lado_alm : ""; ;
                        var estante_alm = entDet.estante_alm != null ? (string)entDet.estante_alm : "";
                        var nivel_alm = entDet.nivel_alm != null ? (string)entDet.nivel_alm : "";

                        movEntradas.Add(new salidasAlmacenDTO
                        {
                            centroCostoOrigen = centroCostoOrigen,
                            almacenOrigen = almacenOrigen,
                            centroCostoDestino = centroCostoDestino,
                            almacenDestino = almacenDestino,
                            ordenTraspaso = (movimiento.orden_ct != null ? (int)movimiento.orden_ct : 0).ToString(),
                            numero = ((int)movimiento.numero).ToString(),
                            recibio = recibio,

                            fechaEntrada = (DateTime)movimiento.fecha,
                            partida = (int)entDet.partida,
                            insumo = (int)entDet.insumo + "-" + insumoDesc ?? "",
                            areaCuenta = area + "-" + cuenta,
                            cantidad = cantidad,
                            precio = precio,
                            costoPromedio = precio,
                            importe = cantidad * precio,
                            comentarios = movimiento.comentarios != null ? (string)movimiento.comentarios : "",
                            area_alm = area_alm,
                            lado_alm = lado_alm,
                            estante_alm = estante_alm,
                            nivel_alm = nivel_alm
                        });
                    }
                }
                else
                {
                    throw new Exception("No se encuentra el detalle del movimiento.");
                }
            }
            else
            {
                throw new Exception("No se encuentra el movimiento.");
            }

            return movEntradas;
        }

        public List<salidasAlmacenDTO> imprimirMovimientoSalidaTraspaso(int almacen, int numero)
        {
            List<salidasAlmacenDTO> movSalidas = new List<salidasAlmacenDTO>();

            var movimientoEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_movimientos WHERE almacen = {0} AND tipo_mov = 52 AND numero = {1}", almacen, numero));

            if (movimientoEK != null)
            {
                var movimiento = ((List<dynamic>)movimientoEK.ToObject<List<dynamic>>())[0];
                var movimientoDetalleEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_movimientos_det WHERE almacen = {0} AND tipo_mov = 52 AND numero = {1}", almacen, numero));

                if (movimientoDetalleEK != null)
                {
                    var movimientoDetalle = (List<dynamic>)movimientoDetalleEK.ToObject<List<dynamic>>();

                    var ccDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM cc WHERE cc = '{0}' AND st_ppto != 'T'", (string)movimiento.cc));
                    var ccDesc = (string)movimiento.cc + " - " + ((string)(((List<dynamic>)ccDescEK.ToObject<List<dynamic>>())[0].descripcion));
                    var almacenDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", (int)movimiento.almacen));
                    var almacenDesc = (int)movimiento.almacen + " - " + ((string)(((List<dynamic>)almacenDescEK.ToObject<List<dynamic>>())[0].descripcion));

                    foreach (var salDet in movimientoDetalle)
                    {
                        var insumoDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM insumos WHERE insumo = {0}", (int)salDet.insumo));
                        var insumoDesc = (string)(((List<dynamic>)insumoDescEK.ToObject<List<dynamic>>())[0].descripcion);
                        var area = salDet.area != null ? (int)salDet.area : 0;
                        var cuenta = salDet.cuenta != null ? (int)salDet.cuenta : 0;
                        var cantidad = Convert.ToDecimal(salDet.cantidad, CultureInfo.InvariantCulture);
                        var precio = Convert.ToDecimal(salDet.precio, CultureInfo.InvariantCulture);
                        var area_alm = salDet.area_alm != null ? (string)salDet.area_alm : "";
                        var lado_alm = salDet.lado_alm != null ? (string)salDet.lado_alm : ""; ;
                        var estante_alm = salDet.estante_alm != null ? (string)salDet.estante_alm : ""; ;
                        var nivel_alm = salDet.nivel_alm != null ? (string)salDet.nivel_alm : ""; ;

                        movSalidas.Add(new salidasAlmacenDTO
                        {
                            centroCosto = ccDesc,
                            folioSalida = ((int)salDet.numero).ToString(),
                            almacen = almacenDesc,
                            fechaSalida = movimiento.fecha,
                            partida = (int)salDet.partida,
                            insumo = (int)salDet.insumo + "-" + insumoDesc ?? "",
                            areaCuenta = area + "-" + cuenta,
                            referencia = "",
                            remision = "",
                            cantidad = cantidad,
                            precio = precio,
                            costoPromedio = precio,
                            importe = cantidad * precio,
                            comentarios = salDet.comentarios != null ? (string)salDet.comentarios : "",
                            ordenCompra = "",
                            proveedor = "",
                            direccion = "",
                            ciudad = "",
                            telefonos = "",

                            area_alm = area_alm,
                            lado_alm = lado_alm,
                            estante_alm = estante_alm,
                            nivel_alm = nivel_alm
                        });
                    }
                }
                else
                {
                    throw new Exception("No se encuentra el detalle del movimiento.");
                }
            }
            else
            {
                throw new Exception("No se encuentra el movimiento.");
            }

            return movSalidas;
        }
        #endregion

        public Dictionary<string, object> getNuevaSalidaConsultaTraspaso(int almacenID)
        {
            var result = new Dictionary<string, object>();

            try
            {
                switch ((MainContextEnum)vSesiones.sesionEmpresaActual)
                {
                    case MainContextEnum.PERU:
                        {
                            #region PERU
                            var almacen = new TABALM();
                            int ultimoFolio = 0;

                            using (var dbStarsoft = new MainContextPeruStarSoft003BDCOMUN())
                            {
                                string almacenStarsoft = "";
                                if (almacenID > 9)
                                {
                                    almacenStarsoft = almacenID.ToString();
                                }
                                else
                                {
                                    almacenStarsoft = "0" + almacenID;
                                }

                                almacen = dbStarsoft.TABALM.FirstOrDefault(e => e.TAALMA == almacenStarsoft);
                                ultimoFolio = dbStarsoft.MOVALMCAB.ToList().Where(x => Int32.Parse(x.CAALMA) == almacenID && x.CATD == "NS").Select(x => Int32.Parse(x.CANUMDOC)).OrderByDescending(x => x).FirstOrDefault();
                            }

                            var entregoNum = 0;
                            var entregoDesc = "";
                            var relacionUsuarioSIGOPLANEK = _context.tblP_Usuario.FirstOrDefault(x => x.id == vSesiones.sesionUsuarioDTO.id);

                            if (relacionUsuarioSIGOPLANEK != null)
                            {
                                entregoNum = relacionUsuarioSIGOPLANEK.id;
                                entregoDesc = relacionUsuarioSIGOPLANEK.apellidoPaterno + " " + relacionUsuarioSIGOPLANEK.apellidoMaterno + " " + relacionUsuarioSIGOPLANEK.nombre;
                            }

                            if (ultimoFolio > 0)
                            {
                                result.Add("almacenDesc", almacen.TADESCRI);
                                result.Add("numeroDisponible", ultimoFolio + 1);
                                result.Add("entregoNum", entregoNum);
                                result.Add("entregoDesc", entregoDesc);
                                result.Add("fecha", DateTime.Now.Date.ToShortDateString());
                                result.Add(SUCCESS, true);
                            }
                            else
                            {
                                result.Add("almacenDesc", almacen.TADESCRI);
                                result.Add("numeroDisponible", 1);
                                result.Add("entregoNum", entregoNum);
                                result.Add("entregoDesc", entregoDesc);
                                result.Add("fecha", DateTime.Now.Date.ToShortDateString());
                                result.Add(SUCCESS, true);
                            }
                            #endregion
                        }
                        break;
                    default:
                        {
                            #region DEMÁS EMPRESAS
                            var almacenEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", almacenID));

                            if (almacenEK == null)
                            {
                                throw new Exception("No se encuentra el almacén.");
                            }

                            var almacen = ((List<dynamic>)almacenEK.ToObject<List<dynamic>>())[0];

                            var ultimaSalidaTraspasoEK = consultaCheckProductivo(
                                string.Format(@"SELECT TOP 1 
                                                * 
                                            FROM si_movimientos 
                                            WHERE almacen = {0} AND tipo_mov = 52 ORDER BY numero DESC", almacenID)
                            );

                            var entregoNum = 0;
                            var entregoDesc = "";
                            var relacionUsuarioSIGOPLANEK = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                            if (relacionUsuarioSIGOPLANEK != null)
                            {
                                var empleado = ((List<dynamic>)consultaCheckProductivo(
                                    string.Format(@"SELECT * FROM empleados WHERE empleado = {0}", relacionUsuarioSIGOPLANEK.empleado)
                                ).ToObject<List<dynamic>>())[0];

                                entregoNum = relacionUsuarioSIGOPLANEK.empleado;
                                entregoDesc = (string)empleado.descripcion;
                            }

                            if (ultimaSalidaTraspasoEK != null)
                            {
                                var ultimaSalidaTraspaso = ((List<dynamic>)ultimaSalidaTraspasoEK.ToObject<List<dynamic>>())[0];

                                result.Add("almacenDesc", (string)almacen.descripcion);
                                result.Add("numeroDisponible", (int)ultimaSalidaTraspaso.numero + 1);
                                result.Add("entregoNum", entregoNum);
                                result.Add("entregoDesc", entregoDesc);
                                result.Add("fecha", DateTime.Now.Date.ToShortDateString());
                                result.Add(SUCCESS, true);
                            }
                            else
                            {
                                result.Add("almacenDesc", (string)almacen.descripcion);
                                result.Add("numeroDisponible", 1);
                                result.Add("entregoNum", entregoNum);
                                result.Add("entregoDesc", entregoDesc);
                                result.Add("fecha", DateTime.Now.Date.ToShortDateString());
                                result.Add(SUCCESS, true);
                            }
                            #endregion
                        }
                        break;
                }
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return result;
        }

        public Dictionary<string, object> getNuevaEntradaConsultaTraspaso(int almacenID)
        {
            var result = new Dictionary<string, object>();

            try
            {
                switch ((MainContextEnum)vSesiones.sesionEmpresaActual)
                {
                    case MainContextEnum.PERU:
                        {
                            #region PERU
                            var almacen = new TABALM();
                            int ultimoFolio = 0;

                            using (var dbStarsoft = new MainContextPeruStarSoft003BDCOMUN())
                            {
                                string almacenStarsoft = "";
                                if (almacenID > 9)
                                {
                                    almacenStarsoft = almacenID.ToString();
                                }
                                else
                                {
                                    almacenStarsoft = "0" + almacenID;
                                }

                                almacen = dbStarsoft.TABALM.FirstOrDefault(e => e.TAALMA == almacenStarsoft);
                                ultimoFolio = dbStarsoft.MOVALMCAB.ToList().Where(x => Int32.Parse(x.CAALMA) == almacenID && x.CATD == "NI").Select(x => Int32.Parse(x.CANUMDOC)).OrderByDescending(x => x).FirstOrDefault();
                            }

                            var entregoNum = 0;
                            var entregoDesc = "";
                            var relacionUsuarioSIGOPLANEK = _context.tblP_Usuario.FirstOrDefault(x => x.id == vSesiones.sesionUsuarioDTO.id);

                            if (relacionUsuarioSIGOPLANEK != null)
                            {
                                entregoNum = relacionUsuarioSIGOPLANEK.id;
                                entregoDesc = relacionUsuarioSIGOPLANEK.apellidoPaterno + " " + relacionUsuarioSIGOPLANEK.apellidoMaterno + " " + relacionUsuarioSIGOPLANEK.nombre;
                            }

                            if (ultimoFolio > 0)
                            {
                                result.Add("almacenDesc", almacen.TADESCRI);
                                result.Add("numeroDisponible", ultimoFolio + 1);
                                result.Add("entregoNum", entregoNum);
                                result.Add("entregoDesc", entregoDesc);
                                result.Add("fecha", DateTime.Now.Date.ToShortDateString());
                                result.Add(SUCCESS, true);
                            }
                            else
                            {
                                result.Add("almacenDesc", almacen.TADESCRI);
                                result.Add("numeroDisponible", 1);
                                result.Add("entregoNum", entregoNum);
                                result.Add("entregoDesc", entregoDesc);
                                result.Add("fecha", DateTime.Now.Date.ToShortDateString());
                                result.Add(SUCCESS, true);
                            }
                            #endregion
                        }
                        break;
                    default:
                        {
                            #region DEMÁS EMPRESAS
                            var almacenEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", almacenID));

                            if (almacenEK == null)
                            {
                                throw new Exception("No se encuentra el almacén.");
                            }

                            var almacen = ((List<dynamic>)almacenEK.ToObject<List<dynamic>>())[0];

                            var ultimaEntradaTraspasoEK = consultaCheckProductivo(
                                string.Format(@"SELECT TOP 1 
                                        * 
                                    FROM si_movimientos 
                                    WHERE almacen = {0} AND tipo_mov = 2 ORDER BY numero DESC", almacenID)
                            );

                            var recibioNum = 0;
                            var recibioDesc = "";
                            var relacionUsuarioSIGOPLANEK = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                            if (relacionUsuarioSIGOPLANEK != null)
                            {
                                var empleado = ((List<dynamic>)consultaCheckProductivo(
                                    string.Format(@"SELECT * FROM empleados WHERE empleado = {0}", relacionUsuarioSIGOPLANEK.empleado)
                                ).ToObject<List<dynamic>>())[0];

                                recibioNum = relacionUsuarioSIGOPLANEK.empleado;
                                recibioDesc = (string)empleado.descripcion;
                            }

                            if (ultimaEntradaTraspasoEK != null)
                            {
                                var ultimaEntradaTraspaso = ((List<dynamic>)ultimaEntradaTraspasoEK.ToObject<List<dynamic>>())[0];

                                result.Add("almacenDesc", (string)almacen.descripcion);
                                result.Add("numeroDisponible", (int)ultimaEntradaTraspaso.numero + 1);
                                result.Add("recibioNum", recibioNum);
                                result.Add("recibioDesc", recibioDesc);
                                result.Add("fecha", DateTime.Now.Date.ToShortDateString());
                                result.Add(SUCCESS, true);
                            }
                            else
                            {
                                result.Add("almacenDesc", (string)almacen.descripcion);
                                result.Add("numeroDisponible", 1);
                                result.Add("recibioNum", recibioNum);
                                result.Add("recibioDesc", recibioDesc);
                                result.Add("fecha", DateTime.Now.Date.ToShortDateString());
                                result.Add(SUCCESS, true);
                            }
                            #endregion
                        }
                        break;
                }
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return result;
        }

        public Tuple<dynamic, List<salidasAlmacenDTO>> getSalidaConsultaTraspaso(int almacenID, int numero)
        {
            switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
            {
                case EmpresaEnum.Peru:
                    {
                        #region PERÚ
                        using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                        {
                            var salidaTraspasoSIGOPLAN = _context.tblAlm_Movimientos.FirstOrDefault(x => x.estatusHabilitado && x.almacen == almacenID && x.tipo_mov == 52 && x.numero == numero);

                            if (salidaTraspasoSIGOPLAN == null)
                            {
                                throw new Exception("No se encuentra la información de la salida en SIGOPLAN.");
                            }

                            var salidaTraspasoDetalleSIGOPLAN = _context.tblAlm_MovimientosDet.Where(x => x.estatusHabilitado && x.almacen == almacenID && x.tipo_mov == 52 && x.numero == numero).ToList();

                            var listaInsumosStarsoft = _starsoft.MAEART.ToList();
                            var centroCostoOrigenDesc = _context.tblC_Nom_CatalogoCC.Where(x => x.cc == salidaTraspasoSIGOPLAN.cc).Select(x => x.cc + " - " + x.ccDescripcion).FirstOrDefault();
                            var centroCostoDestinoDesc = _context.tblC_Nom_CatalogoCC.Where(x => x.cc == salidaTraspasoSIGOPLAN.cc_destino).Select(x => x.cc + " - " + x.ccDescripcion).FirstOrDefault();
                            var almacenOrigenDesc = _starsoft.TABALM.ToList().Where(x => Int32.Parse(x.TAALMA) == salidaTraspasoSIGOPLAN.almacen).Select(x => x.TADESCRI).FirstOrDefault();
                            var almacenDestinoDesc = _starsoft.TABALM.ToList().Where(x => Int32.Parse(x.TAALMA) == salidaTraspasoSIGOPLAN.alm_destino).Select(x => x.TADESCRI).FirstOrDefault();
                            var almacenStarsoft = salidaTraspasoSIGOPLAN.almacen.ToString("D2");
                            var numeroStarsoft = salidaTraspasoSIGOPLAN.numero.ToString("D10");
                            var salidaTraspasoStarsoft = _starsoft.MOVALMCAB.FirstOrDefault(x => x.CAALMA == almacenStarsoft && x.CATD == "NS" && x.CANUMDOC == numeroStarsoft);

                            if (salidaTraspasoStarsoft == null)
                            {
                                throw new Exception("No se encuentra la información de la salida en Starsoft.");
                            }

                            var usuarioInventariosStarsoft = _context.tblAlm_Almacenistas.ToList().FirstOrDefault(e => Int32.Parse(e.id_usuario_inventarios) == Int32.Parse(salidaTraspasoStarsoft.CAUSUARI));
                            var surtio = usuarioInventariosStarsoft != null ?
                                _context.tblP_Usuario.Where(x => x.id == usuarioInventariosStarsoft.id_usuario_sigoplan).Select(x => x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno).FirstOrDefault() : "";

                            var salidaTraspasoDetalle = salidaTraspasoDetalleSIGOPLAN.Select(x => new MovimientoDetalleEnkontrolDTO
                            {
                                almacen = x.almacen,
                                almacenDesc = almacenOrigenDesc,
                                tipo_mov = x.tipo_mov,
                                numero = x.numero,
                                partida = x.partida,
                                insumo = x.insumo,
                                insumoDesc = listaInsumosStarsoft.Where(y => Int32.Parse(y.ACODIGO) == x.insumo).Select(z => z.ADESCRI).FirstOrDefault(),
                                comentarios = x.comentarios ?? "",
                                area = x.area,
                                cuenta = x.cuenta,
                                cantidad = x.cantidad,
                                precio = x.precio,
                                importe = x.importe,
                                costo_prom = x.precio,
                                area_alm = x.area_alm ?? "",
                                lado_alm = x.lado_alm ?? "",
                                estante_alm = x.estante_alm ?? "",
                                nivel_alm = x.nivel_alm ?? "",
                                unidad = listaInsumosStarsoft.Where(y => Int32.Parse(y.ACODIGO) == x.insumo).Select(z => z.AUNIDAD).FirstOrDefault()
                            }).ToList();

                            #region Datos del reporte
                            List<salidasAlmacenDTO> movSalidas = new List<salidasAlmacenDTO>();

                            foreach (var salDet in salidaTraspasoDetalleSIGOPLAN)
                            {
                                var area = salDet.area != null ? (int)salDet.area : 0;
                                var cuenta = salDet.cuenta != null ? (int)salDet.cuenta : 0;
                                var cantidad = Convert.ToDecimal(salDet.cantidad, CultureInfo.InvariantCulture);
                                var precio = Convert.ToDecimal(salDet.precio, CultureInfo.InvariantCulture);
                                var area_alm = salDet.area_alm != null ? (string)salDet.area_alm : "";
                                var lado_alm = salDet.lado_alm != null ? (string)salDet.lado_alm : ""; ;
                                var estante_alm = salDet.estante_alm != null ? (string)salDet.estante_alm : ""; ;
                                var nivel_alm = salDet.nivel_alm != null ? (string)salDet.nivel_alm : ""; ;

                                movSalidas.Add(new salidasAlmacenDTO
                                {
                                    centroCostoOrigen = centroCostoOrigenDesc,
                                    almacenOrigen = almacenOrigenDesc,
                                    centroCostoDestino = centroCostoDestinoDesc,
                                    almacenDestino = almacenDestinoDesc,
                                    ordenTraspaso = salidaTraspasoSIGOPLAN.orden_ct.ToString(),
                                    numero = salidaTraspasoSIGOPLAN.numero.ToString(),
                                    surtio = surtio,

                                    fechaSalida = salidaTraspasoSIGOPLAN.fecha,
                                    partida = (int)salDet.partida,
                                    insumo = (int)salDet.insumo + "-" + (listaInsumosStarsoft.Where(x => Int32.Parse(x.ACODIGO) == salDet.insumo).Select(x => x.ADESCRI).FirstOrDefault()) ?? "",
                                    areaCuenta = area + "-" + cuenta,
                                    cantidad = cantidad,
                                    precio = precio,
                                    costoPromedio = precio,
                                    importe = cantidad * precio,
                                    comentarios = salidaTraspasoSIGOPLAN.comentarios ?? "",
                                    area_alm = area_alm,
                                    lado_alm = lado_alm,
                                    estante_alm = estante_alm,
                                    nivel_alm = nivel_alm
                                });
                            }
                            #endregion

                            var data = new
                            {
                                almacen = salidaTraspasoSIGOPLAN.almacen,
                                almacenDesc = almacenOrigenDesc,
                                numero = salidaTraspasoSIGOPLAN.numero,
                                cc = salidaTraspasoSIGOPLAN.cc,
                                ccDesc = centroCostoOrigenDesc,
                                fechaString = salidaTraspasoSIGOPLAN.fecha.ToShortDateString(),
                                empleado = usuarioInventariosStarsoft.id_usuario_starsoft,
                                empleadoDesc = surtio,
                                comentarios = salidaTraspasoSIGOPLAN.comentarios ?? "",
                                alm_destino = salidaTraspasoSIGOPLAN.alm_destino,
                                alm_destinoDesc = almacenDestinoDesc,
                                cc_destino = salidaTraspasoSIGOPLAN.cc_destino,
                                cc_destinoDesc = centroCostoDestinoDesc,
                                orden_ct = salidaTraspasoSIGOPLAN.orden_ct,
                                folio_traspaso = salidaTraspasoSIGOPLAN.orden_ct,
                                total = salidaTraspasoSIGOPLAN.total,

                                detalle = salidaTraspasoDetalle,

                                detalleReporte = movSalidas
                            };

                            return new Tuple<dynamic, List<salidasAlmacenDTO>>(data, movSalidas);
                        }
                        #endregion
                    }
                default:
                    {
                        #region DEMÁS EMPRESAS
                        var salidaTraspasoEK = consultaCheckProductivo(
                string.Format(@"SELECT 
                                    mov.*, 
                                    alm.descripcion AS almacenDesc, 
                                    almDest.descripcion AS alm_destinoDesc, 
                                    c.descripcion AS ccDesc, 
                                    cDest.descripcion AS cc_destinoDesc, 
                                    emp.descripcion AS empleadoDesc 
                                FROM si_movimientos mov 
                                    INNER JOIN si_almacen alm ON mov.almacen = alm.almacen 
                                    INNER JOIN si_almacen almDest ON mov.alm_destino = almDest.almacen 
                                    INNER JOIN cc c ON mov.cc = c.cc 
                                    INNER JOIN cc cDest ON mov.cc_destino = cDest.cc 
                                    LEFT JOIN empleados emp ON mov.empleado = emp.empleado 
                                WHERE mov.almacen = {0} AND mov.tipo_mov = 52 AND mov.numero = {1}", almacenID, numero));

                        if (salidaTraspasoEK != null)
                        {
                            var salidaTraspaso = ((List<dynamic>)salidaTraspasoEK.ToObject<List<dynamic>>())[0];
                            var salidaTraspasoDetalle = (List<MovimientoDetalleEnkontrolDTO>)consultaCheckProductivo(
                                string.Format(@"SELECT 
                                        det.*, 
                                        i.descripcion AS insumoDesc, 
                                        i.unidad 
                                    FROM si_movimientos_det det 
                                        INNER JOIN insumos i ON det.insumo = i.insumo 
                                    WHERE det.almacen = {0} AND det.tipo_mov = 52 AND det.numero = {1}", almacenID, numero)
                            ).ToObject<List<MovimientoDetalleEnkontrolDTO>>();

                            #region Datos del reporte
                            List<salidasAlmacenDTO> movSalidas = new List<salidasAlmacenDTO>();

                            var centroCostoOrigenEK = consultaCheckProductivo(string.Format(@"SELECT * FROM cc WHERE cc = '{0}'", (string)salidaTraspaso.cc));
                            var centroCostoOrigen = (string)salidaTraspaso.cc + " - " + ((string)(((List<dynamic>)centroCostoOrigenEK.ToObject<List<dynamic>>())[0].descripcion));
                            var almacenOrigenEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", (int)salidaTraspaso.almacen));
                            var almacenOrigen = (int)salidaTraspaso.almacen + " - " + ((string)(((List<dynamic>)almacenOrigenEK.ToObject<List<dynamic>>())[0].descripcion));

                            var centroCostoDestinoEK = consultaCheckProductivo(string.Format(@"SELECT * FROM cc WHERE cc = '{0}'", (string)salidaTraspaso.cc_destino));
                            var centroCostoDestino = (string)salidaTraspaso.cc_destino + " - " + ((string)(((List<dynamic>)centroCostoDestinoEK.ToObject<List<dynamic>>())[0].descripcion));
                            var almacenDestinoEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", (int)salidaTraspaso.alm_destino));
                            var almacenDestino = (int)salidaTraspaso.alm_destino + " - " + ((string)(((List<dynamic>)almacenDestinoEK.ToObject<List<dynamic>>())[0].descripcion));

                            var surtio = (string)(((List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM empleados WHERE empleado = {0}", (int)salidaTraspaso.empleado)).ToObject<List<dynamic>>())[0].descripcion);

                            foreach (var salDet in salidaTraspasoDetalle)
                            {
                                var insumoDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM insumos WHERE insumo = {0}", (int)salDet.insumo));
                                var insumoDesc = (string)(((List<dynamic>)insumoDescEK.ToObject<List<dynamic>>())[0].descripcion);
                                var area = salDet.area != null ? (int)salDet.area : 0;
                                var cuenta = salDet.cuenta != null ? (int)salDet.cuenta : 0;
                                var cantidad = Convert.ToDecimal(salDet.cantidad, CultureInfo.InvariantCulture);
                                var precio = Convert.ToDecimal(salDet.precio, CultureInfo.InvariantCulture);
                                var area_alm = salDet.area_alm != null ? (string)salDet.area_alm : "";
                                var lado_alm = salDet.lado_alm != null ? (string)salDet.lado_alm : ""; ;
                                var estante_alm = salDet.estante_alm != null ? (string)salDet.estante_alm : ""; ;
                                var nivel_alm = salDet.nivel_alm != null ? (string)salDet.nivel_alm : ""; ;

                                movSalidas.Add(new salidasAlmacenDTO
                                {
                                    centroCostoOrigen = centroCostoOrigen,
                                    almacenOrigen = almacenOrigen,
                                    centroCostoDestino = centroCostoDestino,
                                    almacenDestino = almacenDestino,
                                    ordenTraspaso = (salidaTraspaso.orden_ct != null ? (int)salidaTraspaso.orden_ct : 0).ToString(),
                                    numero = ((int)salidaTraspaso.numero).ToString(),
                                    surtio = surtio,

                                    fechaSalida = (DateTime)salidaTraspaso.fecha,
                                    partida = (int)salDet.partida,
                                    insumo = (int)salDet.insumo + "-" + insumoDesc ?? "",
                                    areaCuenta = area + "-" + cuenta,
                                    cantidad = cantidad,
                                    precio = precio,
                                    costoPromedio = precio,
                                    importe = cantidad * precio,
                                    comentarios = salidaTraspaso.comentarios != null ? (string)salidaTraspaso.comentarios : "",
                                    area_alm = area_alm,
                                    lado_alm = lado_alm,
                                    estante_alm = estante_alm,
                                    nivel_alm = nivel_alm
                                });
                            }
                            #endregion

                            var data = new
                            {
                                almacen = (int)salidaTraspaso.almacen,
                                almacenDesc = (string)salidaTraspaso.almacenDesc,
                                numero = (int)salidaTraspaso.numero,
                                cc = (string)salidaTraspaso.cc,
                                ccDesc = (string)salidaTraspaso.ccDesc,
                                fechaString = ((DateTime)salidaTraspaso.fecha).ToShortDateString(),
                                empleado = (int)salidaTraspaso.empleado,
                                empleadoDesc = (string)salidaTraspaso.empleadoDesc,
                                comentarios = (string)salidaTraspaso.comentarios,
                                alm_destino = (int)salidaTraspaso.alm_destino,
                                alm_destinoDesc = (string)salidaTraspaso.alm_destinoDesc,
                                cc_destino = (string)salidaTraspaso.cc_destino,
                                cc_destinoDesc = (string)salidaTraspaso.cc_destinoDesc,
                                orden_ct = salidaTraspaso.orden_ct != null ? (int)salidaTraspaso.orden_ct : 0,
                                folio_traspaso = salidaTraspaso.folio_traspaso != null ? (int)salidaTraspaso.folio_traspaso : 0,
                                total = Convert.ToDecimal(salidaTraspaso.total, CultureInfo.InvariantCulture),

                                detalle = salidaTraspasoDetalle,

                                detalleReporte = movSalidas
                            };

                            return new Tuple<dynamic, List<salidasAlmacenDTO>>(data, movSalidas);
                        }
                        else
                        {
                            return null;
                        }
                        #endregion
                    }
            }
        }

        public Tuple<dynamic, List<salidasAlmacenDTO>> getEntradaConsultaTraspaso(int almacenID, int numero)
        {
            switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
            {
                case EmpresaEnum.Peru:
                    {
                        #region PERÚ
                        using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                        {
                            var entradaTraspasoSIGOPLAN = _context.tblAlm_Movimientos.FirstOrDefault(x => x.estatusHabilitado && x.almacen == almacenID && x.tipo_mov == 2 && x.numero == numero);

                            if (entradaTraspasoSIGOPLAN == null)
                            {
                                throw new Exception("No se encuentra la información de la entrada en SIGOPLAN.");
                            }

                            var entradaTraspasoDetalleSIGOPLAN = _context.tblAlm_MovimientosDet.Where(x => x.estatusHabilitado && x.almacen == almacenID && x.tipo_mov == 2 && x.numero == numero).ToList();

                            var listaInsumosStarsoft = _starsoft.MAEART.ToList();
                            var centroCostoOrigenDesc = _context.tblC_Nom_CatalogoCC.Where(x => x.cc == entradaTraspasoSIGOPLAN.cc).Select(x => x.cc + " - " + x.ccDescripcion).FirstOrDefault();
                            var centroCostoDestinoDesc = _context.tblC_Nom_CatalogoCC.Where(x => x.cc == entradaTraspasoSIGOPLAN.cc_destino).Select(x => x.cc + " - " + x.ccDescripcion).FirstOrDefault();
                            var almacenOrigenDesc = _starsoft.TABALM.ToList().Where(x => Int32.Parse(x.TAALMA) == entradaTraspasoSIGOPLAN.almacen).Select(x => x.TADESCRI).FirstOrDefault();
                            var almacenDestinoDesc = _starsoft.TABALM.ToList().Where(x => Int32.Parse(x.TAALMA) == entradaTraspasoSIGOPLAN.alm_destino).Select(x => x.TADESCRI).FirstOrDefault();
                            var almacenStarsoft = entradaTraspasoSIGOPLAN.almacen.ToString("D2");
                            var numeroStarsoft = entradaTraspasoSIGOPLAN.numero.ToString("D10");
                            var entradaTraspasoStarsoft = _starsoft.MOVALMCAB.FirstOrDefault(x => x.CAALMA == almacenStarsoft && x.CATD == "NI" && x.CANUMDOC == numeroStarsoft);

                            if (entradaTraspasoStarsoft == null)
                            {
                                throw new Exception("No se encuentra la información de la entrada en Starsoft.");
                            }

                            var usuarioInventariosStarsoft = _context.tblAlm_Almacenistas.ToList().FirstOrDefault(e => Int32.Parse(e.id_usuario_inventarios) == Int32.Parse(entradaTraspasoStarsoft.CAUSUARI));
                            var surtio = usuarioInventariosStarsoft != null ?
                                _context.tblP_Usuario.Where(x => x.id == usuarioInventariosStarsoft.id_usuario_sigoplan).Select(x => x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno).FirstOrDefault() : "";

                            var entradaTraspasoDetalle = entradaTraspasoDetalleSIGOPLAN.Select(x => new MovimientoDetalleEnkontrolDTO
                            {
                                almacen = x.almacen,
                                almacenDesc = almacenOrigenDesc,
                                tipo_mov = x.tipo_mov,
                                numero = x.numero,
                                partida = x.partida,
                                insumo = x.insumo,
                                insumoDesc = listaInsumosStarsoft.Where(y => Int32.Parse(y.ACODIGO) == x.insumo).Select(z => z.ADESCRI).FirstOrDefault(),
                                comentarios = x.comentarios ?? "",
                                area = x.area,
                                cuenta = x.cuenta,
                                cantidad = x.cantidad,
                                precio = x.precio,
                                importe = x.importe,
                                costo_prom = x.precio,
                                area_alm = x.area_alm ?? "",
                                lado_alm = x.lado_alm ?? "",
                                estante_alm = x.estante_alm ?? "",
                                nivel_alm = x.nivel_alm ?? "",
                                unidad = listaInsumosStarsoft.Where(y => Int32.Parse(y.ACODIGO) == x.insumo).Select(z => z.AUNIDAD).FirstOrDefault()
                            }).ToList();

                            #region Datos del reporte
                            List<salidasAlmacenDTO> movEntradas = new List<salidasAlmacenDTO>();

                            foreach (var entDet in entradaTraspasoDetalleSIGOPLAN)
                            {
                                var area = entDet.area != null ? (int)entDet.area : 0;
                                var cuenta = entDet.cuenta != null ? (int)entDet.cuenta : 0;
                                var cantidad = Convert.ToDecimal(entDet.cantidad, CultureInfo.InvariantCulture);
                                var precio = Convert.ToDecimal(entDet.precio, CultureInfo.InvariantCulture);
                                var area_alm = entDet.area_alm != null ? (string)entDet.area_alm : "";
                                var lado_alm = entDet.lado_alm != null ? (string)entDet.lado_alm : ""; ;
                                var estante_alm = entDet.estante_alm != null ? (string)entDet.estante_alm : ""; ;
                                var nivel_alm = entDet.nivel_alm != null ? (string)entDet.nivel_alm : ""; ;

                                movEntradas.Add(new salidasAlmacenDTO
                                {
                                    centroCostoOrigen = centroCostoOrigenDesc,
                                    almacenOrigen = almacenOrigenDesc,
                                    centroCostoDestino = centroCostoDestinoDesc,
                                    almacenDestino = almacenDestinoDesc,
                                    ordenTraspaso = entradaTraspasoSIGOPLAN.orden_ct.ToString(),
                                    numero = entradaTraspasoSIGOPLAN.numero.ToString(),
                                    surtio = surtio,

                                    fechaSalida = entradaTraspasoSIGOPLAN.fecha,
                                    partida = (int)entDet.partida,
                                    insumo = (int)entDet.insumo + "-" + (listaInsumosStarsoft.Where(x => Int32.Parse(x.ACODIGO) == entDet.insumo).Select(x => x.ADESCRI).FirstOrDefault()) ?? "",
                                    areaCuenta = area + "-" + cuenta,
                                    cantidad = cantidad,
                                    precio = precio,
                                    costoPromedio = precio,
                                    importe = cantidad * precio,
                                    comentarios = entradaTraspasoSIGOPLAN.comentarios ?? "",
                                    area_alm = area_alm,
                                    lado_alm = lado_alm,
                                    estante_alm = estante_alm,
                                    nivel_alm = nivel_alm
                                });
                            }
                            #endregion

                            var data = new
                            {
                                almacen = entradaTraspasoSIGOPLAN.almacen,
                                almacenDesc = almacenOrigenDesc,
                                numero = entradaTraspasoSIGOPLAN.numero,
                                cc = entradaTraspasoSIGOPLAN.cc,
                                ccDesc = centroCostoOrigenDesc,
                                fechaString = entradaTraspasoSIGOPLAN.fecha.ToShortDateString(),
                                empleado = usuarioInventariosStarsoft.id_usuario_starsoft,
                                empleadoDesc = surtio,
                                comentarios = entradaTraspasoSIGOPLAN.comentarios ?? "",
                                alm_destino = entradaTraspasoSIGOPLAN.alm_destino,
                                alm_destinoDesc = almacenDestinoDesc,
                                cc_destino = entradaTraspasoSIGOPLAN.cc_destino,
                                cc_destinoDesc = centroCostoDestinoDesc,
                                orden_ct = entradaTraspasoSIGOPLAN.orden_ct,
                                folio_traspaso = entradaTraspasoSIGOPLAN.orden_ct,
                                total = entradaTraspasoSIGOPLAN.total,

                                detalle = entradaTraspasoDetalle,

                                detalleReporte = movEntradas
                            };

                            return new Tuple<dynamic, List<salidasAlmacenDTO>>(data, movEntradas);
                        }
                        #endregion
                    }
                default:
                    {
                        #region DEMÁS EMPRESAS
                        var entradaTraspasoEK = consultaCheckProductivo(
                string.Format(@"SELECT 
                                    mov.*, 
                                    alm.descripcion AS almacenDesc, 
                                    almDest.descripcion AS alm_destinoDesc, 
                                    c.descripcion AS ccDesc, 
                                    cDest.descripcion AS cc_destinoDesc, 
                                    emp.descripcion AS empleadoDesc 
                                FROM si_movimientos mov 
                                    INNER JOIN si_almacen alm ON mov.almacen = alm.almacen 
                                    INNER JOIN si_almacen almDest ON mov.alm_destino = almDest.almacen 
                                    INNER JOIN cc c ON mov.cc = c.cc 
                                    INNER JOIN cc cDest ON mov.cc_destino = cDest.cc 
                                    LEFT JOIN empleados emp ON mov.empleado = emp.empleado 
                                WHERE mov.almacen = {0} AND mov.tipo_mov = 2 AND mov.numero = {1}", almacenID, numero));

                        if (entradaTraspasoEK != null)
                        {
                            var entradaTraspaso = ((List<dynamic>)entradaTraspasoEK.ToObject<List<dynamic>>())[0];
                            var entradaTraspasoDetalle = (List<MovimientoDetalleEnkontrolDTO>)consultaCheckProductivo(
                                string.Format(@"SELECT 
                                        det.*, 
                                        i.descripcion AS insumoDesc, 
                                        i.unidad 
                                    FROM si_movimientos_det det 
                                        INNER JOIN insumos i ON det.insumo = i.insumo 
                                    WHERE det.almacen = {0} AND det.tipo_mov = 2 AND det.numero = {1}", almacenID, numero)
                            ).ToObject<List<MovimientoDetalleEnkontrolDTO>>();

                            #region Datos del reporte
                            List<salidasAlmacenDTO> movEntradas = new List<salidasAlmacenDTO>();

                            var centroCostoOrigenEK = consultaCheckProductivo(string.Format(@"SELECT * FROM cc WHERE cc = '{0}'", (string)entradaTraspaso.cc));
                            var centroCostoOrigen = (string)entradaTraspaso.cc + " - " + ((string)(((List<dynamic>)centroCostoOrigenEK.ToObject<List<dynamic>>())[0].descripcion));
                            var almacenOrigenEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", (int)entradaTraspaso.almacen));
                            var almacenOrigen = (int)entradaTraspaso.almacen + " - " + ((string)(((List<dynamic>)almacenOrigenEK.ToObject<List<dynamic>>())[0].descripcion));

                            var centroCostoDestinoEK = consultaCheckProductivo(string.Format(@"SELECT * FROM cc WHERE cc = '{0}'", (string)entradaTraspaso.cc_destino));
                            var centroCostoDestino = (string)entradaTraspaso.cc_destino + " - " + ((string)(((List<dynamic>)centroCostoDestinoEK.ToObject<List<dynamic>>())[0].descripcion));
                            var almacenDestinoEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", (int)entradaTraspaso.alm_destino));
                            var almacenDestino = (int)entradaTraspaso.alm_destino + " - " + ((string)(((List<dynamic>)almacenDestinoEK.ToObject<List<dynamic>>())[0].descripcion));

                            var recibio = (string)(((List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM empleados WHERE empleado = {0}", (int)entradaTraspaso.empleado)).ToObject<List<dynamic>>())[0].descripcion);

                            foreach (var entDet in entradaTraspasoDetalle)
                            {
                                var insumoDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM insumos WHERE insumo = {0}", (int)entDet.insumo));
                                var insumoDesc = (string)(((List<dynamic>)insumoDescEK.ToObject<List<dynamic>>())[0].descripcion);
                                var area = entDet.area != null ? (int)entDet.area : 0;
                                var cuenta = entDet.cuenta != null ? (int)entDet.cuenta : 0;
                                var cantidad = Convert.ToDecimal(entDet.cantidad, CultureInfo.InvariantCulture);
                                var precio = Convert.ToDecimal(entDet.precio, CultureInfo.InvariantCulture);
                                var area_alm = entDet.area_alm != null ? (string)entDet.area_alm : "";
                                var lado_alm = entDet.lado_alm != null ? (string)entDet.lado_alm : ""; ;
                                var estante_alm = entDet.estante_alm != null ? (string)entDet.estante_alm : ""; ;
                                var nivel_alm = entDet.nivel_alm != null ? (string)entDet.nivel_alm : ""; ;

                                movEntradas.Add(new salidasAlmacenDTO
                                {
                                    centroCostoOrigen = centroCostoOrigen,
                                    almacenOrigen = almacenOrigen,
                                    centroCostoDestino = centroCostoDestino,
                                    almacenDestino = almacenDestino,
                                    ordenTraspaso = (entradaTraspaso.orden_ct != null ? (int)entradaTraspaso.orden_ct : 0).ToString(),
                                    numero = ((int)entradaTraspaso.numero).ToString(),
                                    recibio = recibio,

                                    fechaEntrada = (DateTime)entradaTraspaso.fecha,
                                    partida = (int)entDet.partida,
                                    insumo = (int)entDet.insumo + "-" + insumoDesc ?? "",
                                    areaCuenta = area + "-" + cuenta,
                                    cantidad = cantidad,
                                    precio = precio,
                                    costoPromedio = precio,
                                    importe = cantidad * precio,
                                    comentarios = entradaTraspaso.comentarios != null ? (string)entradaTraspaso.comentarios : "",
                                    area_alm = area_alm,
                                    lado_alm = lado_alm,
                                    estante_alm = estante_alm,
                                    nivel_alm = nivel_alm
                                });
                            }
                            #endregion

                            var data = new
                            {
                                almacen = (int)entradaTraspaso.almacen,
                                almacenDesc = (string)entradaTraspaso.almacenDesc,
                                numero = (int)entradaTraspaso.numero,
                                cc = (string)entradaTraspaso.cc,
                                ccDesc = (string)entradaTraspaso.ccDesc,
                                fechaString = ((DateTime)entradaTraspaso.fecha).ToShortDateString(),
                                empleado = (int)entradaTraspaso.empleado,
                                empleadoDesc = (string)entradaTraspaso.empleadoDesc,
                                comentarios = (string)entradaTraspaso.comentarios,
                                alm_destino = (int)entradaTraspaso.alm_destino,
                                alm_destinoDesc = (string)entradaTraspaso.alm_destinoDesc,
                                cc_destino = (string)entradaTraspaso.cc_destino,
                                cc_destinoDesc = (string)entradaTraspaso.cc_destinoDesc,
                                orden_ct = entradaTraspaso.orden_ct != null ? (int)entradaTraspaso.orden_ct : 0,
                                folio_traspaso = entradaTraspaso.folio_traspaso != null ? (int)entradaTraspaso.folio_traspaso : 0,
                                total = Convert.ToDecimal(entradaTraspaso.total, CultureInfo.InvariantCulture),

                                detalle = entradaTraspasoDetalle,

                                detalleReporte = movEntradas
                            };

                            return new Tuple<dynamic, List<salidasAlmacenDTO>>(data, movEntradas);
                        }
                        else
                        {
                            return null;
                        }
                        #endregion
                    }
            }
        }

        public bool checkMaquinaStandBy(string cc)
        {
            var flagMaquinaStandBy = false;
            var ccEK = ((List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM cc WHERE cc = '{0}'", cc)).ToObject<List<dynamic>>())[0];
            var catMaquina = _context.tblM_CatMaquina.ToList().FirstOrDefault(x => x.noEconomico == (string)ccEK.descripcion);

            if (catMaquina != null)
            {
                if (catMaquina.estatus == 2) //Estatus en Stand-By.
                {
                    var listaMaquinasBloqueoStandby = _context.tblM_STB_EconomicoBloqueado.Where(x => x.registroActivo).Select(x => x.noEconomico).ToList();
                    if (listaMaquinasBloqueoStandby.Contains(catMaquina.noEconomico)) throw new Exception("No es posible realizar la acción puesto que el equipo referenciado se encuentra en estatus StandBy");

                    flagMaquinaStandBy = true;

                    catMaquina.estatus = 1; //Se quita el estado Stand-By de la máquina.
                    _context.SaveChanges();

                    #region Modificar la tabla "tblM_STB_CapturaStandBy"
                    try
                    {
                        string economico = (string)ccEK.descripcion;
                        var registroCapturaStandBy = _context.tblM_STB_CapturaStandBy.FirstOrDefault(x => x.Economico == economico && x.estatus == 2);

                        if (registroCapturaStandBy != null)
                        {
                            registroCapturaStandBy.estatus = 4;
                            registroCapturaStandBy.usuarioLiberaID = vSesiones.sesionUsuarioDTO.id;
                            registroCapturaStandBy.fechaLibera = DateTime.Now;
                            registroCapturaStandBy.comentarioLiberacion = "Se quitó el Stand-By por movimiento de almacén.";

                            _context.SaveChanges();
                        }
                    }
                    catch (Exception ep) { }
                    #endregion
                }
            }

            return flagMaquinaStandBy;
        }

        public bool checarPermisosFamilias(int almacen, List<int> insumos)
        {
            var flagPermiso = true;

            if (vSesiones.sesionEmpresaActual == 2)
            {
                var listaAlmacenesExcepciones = _context.tblAlm_Validacion_101_102_AlmacenesExcepciones.Where(x => x.estatus).Select(x => x.almacen).ToList();

                if (!listaAlmacenesExcepciones.Contains(almacen))
                {
                    if (almacen > 620)
                    {
                        if (insumos.Select(x => x.ToString().Substring(0, 3)).Any(x => x == "101") || insumos.Select(x => x.ToString().Substring(0, 3)).Any(x => x == "102"))
                        {
                            List<int> insumosExcepciones = _context.tblAlm_Validacion_101_102_InsumosExcepciones.Where(x => x.estatus).Select(x => x.insumo).ToList();

                            if (insumosExcepciones.Count() > 0)
                            {
                                List<int> insumosFiltrados = insumos.Where(x =>
                                    x.ToString().Substring(0, 3) == "101" || x.ToString().Substring(0, 3) == "102"
                                ).Select(x => x).ToList();

                                foreach (int ins in insumosFiltrados)
                                {
                                    if (!insumosExcepciones.Contains(ins))
                                    {
                                        flagPermiso = false;
                                        throw new Exception("No se puede dar salida a las familias de insumo 101 y 102. Insumo: \"" + ins + "\".");
                                    }
                                }
                            }
                            else
                            {
                                flagPermiso = false;
                                throw new Exception("No se puede dar salida a las familias de insumo 101 y 102.");
                            }
                        }
                    }
                }
            }

            return flagPermiso;
        }

        public bool checarPermisoAreaCuenta()
        {
            var flagPermiso = false;

            var usuarioSigoplan = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

            if (usuarioSigoplan != null)
            {
                if (usuarioSigoplan.sn_empleado == 30) //Empleado de Gerardo Hernández y Alán Palomera.
                {
                    flagPermiso = true;
                }
            }

            return flagPermiso;
        }

        public List<RequisicionDTO> ObtenerComprasPendientes(List<string> listaCC, int estatus, List<int> listaAlmacenes, DateTime fechaInicio, DateTime fechaFin)
        {
            var listaCompras = new List<RequisicionDTO>();
            fechaFin = fechaFin.AddHours(23).AddMinutes(59).AddSeconds(59);
            var usuario = vSesiones.sesionUsuarioDTO;
            var relUser = ufs.getUsuarioService().getUserEk(usuario.id);

            var listCompradorAdmin = _context.tblCom_Comprador_Admin.Select(x => x.empleado).ToList();
            var puedeCancelar = relUser.empleado == 1 || listCompradorAdmin.Contains(relUser.empleado);

            var centrosCosto = (List<Core.DTO.Principal.Generales.ComboDTO>)consultaCheckProductivo(
                    string.Format(@"SELECT 
                                        cc AS Value, 
                                        descripcion AS Text 
                                    FROM cc 
                                    WHERE st_ppto != 'T'
                                    ORDER BY Text ASC")).ToObject<List<Core.DTO.Principal.Generales.ComboDTO>>();

            var almacenes = (List<Core.DTO.Principal.Generales.ComboDTO>)consultaCheckProductivo(
                string.Format(@"SELECT 
                                    alm.almacen AS Value, 
                                    alm.descripcion AS Text 
                                FROM si_almacen alm                
                                ORDER BY Text ASC")).ToObject<List<Core.DTO.Principal.Generales.ComboDTO>>();
            var queryEstatus = estatus == 1 ? "HAVING SUM(det.cant_recibida) > 0" : estatus == 2 ? "HAVING SUM(det.cant_recibida) = 0" : "";
            var comprasEK = consultaCheckProductivo(
                string.Format(@"SELECT 
                                    com.cc, 
                                    com.numero, 
                                    com.fecha, 
                                    com.st_impresa, 
                                    com.proveedor, 
                                    com.libre_abordo, 
                                    com.estatus, 
                                    com.ST_OC, 
                                    SUM(det.cant_recibida) AS cantidadRecibida, 
                                    com.comprador
                                FROM so_orden_compra com 
                                    INNER JOIN so_orden_compra_det det ON com.cc = det.cc AND com.numero = det.numero 
                                WHERE com.ST_OC = 'A' AND det.cantidad > det.cant_recibida {0} AND (com.fecha >= {1} AND com.fecha <= {2}) 
                                GROUP BY com.cc, com.numero, com.fecha , com.st_impresa, com.proveedor, com.libre_abordo, com.estatus, com.ST_OC, com.comprador  
                                " + queryEstatus + @" 
                                ORDER BY com.fecha DESC", (listaCC != null && listaCC.Count() > 0) ? ("AND com.cc IN (" + string.Join(", ", listaCC.Select(x => "'" + x + "'")) + ")") : "", fechaInicio.ToString("yyyyMMdd"), fechaFin.ToString("yyyyMMdd"))
            );

            if (comprasEK != null)
            {
                var compras = (List<dynamic>)comprasEK.ToObject<List<dynamic>>();

                //switch (estatus)
                //{
                //    case 1: //Parciales
                //        compras = compras.Where(x => (decimal)x.cantidadRecibida > 0).ToList();
                //        break;
                //    case 2: //Sin Surtir
                //        compras = compras.Where(x => (decimal)x.cantidadRecibida == 0).ToList();
                //        break;
                //    default: //Todas
                //        break;
                //}
                IQueryable<tblCom_OrdenCompra> comprasSIGOPLAN;
                if (listaCC != null && listaCC.Count() > 0)
                {
                    comprasSIGOPLAN = _context.tblCom_OrdenCompra.Where(x =>
                       x.estatusRegistro && (x.fecha >= fechaInicio && x.fecha <= fechaFin) &&
                       listaCC.Contains(x.cc)
                   );
                }
                else
                {
                    comprasSIGOPLAN = _context.tblCom_OrdenCompra.Where(x =>
                       x.estatusRegistro && (x.fecha >= fechaInicio && x.fecha <= fechaFin)
                   );
                }

                var listaProveedores = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM sp_proveedores")).ToObject<List<dynamic>>();
                var listaUsuariosEnkontrol = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM empleados")).ToObject<List<dynamic>>();

                foreach (var com in compras)
                {
                    string tcc = (string)com.cc;
                    int tnumero = (int)com.numero;
                    var compraSIGOPLAN = comprasSIGOPLAN.FirstOrDefault(x => x.cc == tcc && x.numero == tnumero);

                    var almacenCompra = 0;
                    var almacenLAB = "";
                    var consigna = false;
                    var crc = false;

                    if (compraSIGOPLAN != null)
                    {
                        almacenCompra = compraSIGOPLAN.idLibreAbordo ?? 0;

                        if (almacenes.FirstOrDefault(y => y.Value == compraSIGOPLAN.idLibreAbordo.ToString()) != null)
                        {
                            almacenLAB = almacenes.FirstOrDefault(y => y.Value == compraSIGOPLAN.idLibreAbordo.ToString()).Text;
                        }

                        var primerPartidaCompra = _context.tblCom_OrdenCompraDet.FirstOrDefault(x => x.estatusRegistro && x.cc == compraSIGOPLAN.cc && x.numero == compraSIGOPLAN.numero);

                        if (primerPartidaCompra != null)
                        {
                            var requisicionSIGOPLAN = _context.tblCom_Req.FirstOrDefault(x =>
                                x.estatusRegistro && x.cc == primerPartidaCompra.cc && x.numero == primerPartidaCompra.num_requisicion
                            );

                            if (requisicionSIGOPLAN != null)
                            {
                                consigna = requisicionSIGOPLAN.consigna ?? false;
                                crc = requisicionSIGOPLAN.crc;
                            }
                        }
                    }
                    else
                    {
                        almacenCompra = 1;
                        almacenLAB = almacenes.FirstOrDefault(y => y.Value == "1").Text;
                    }

                    bool flagCancelar = (puedeCancelar && com.st_impresa.Value == "I") ? true : false;

                    listaCompras.Add(new RequisicionDTO
                    {
                        ccDescripcion = centrosCosto.FirstOrDefault(y => y.Value == (string)com.cc).Text,
                        numero = (int)com.numero,
                        fecha = (DateTime)com.fecha,
                        almacen = almacenCompra,
                        almacenLAB = almacenLAB,
                        cc = (string)com.cc,
                        libre_abordo = (int)com.libre_abordo,
                        estatusSurtido = (string)com.estatus,
                        flagCancelar = flagCancelar,
                        proveedor = (int)com.proveedor,
                        proveedorDesc = (string)listaProveedores.FirstOrDefault(x => (int)x.numpro == (int)com.proveedor).nombre,
                        flagTieneEntrada = ((string)com.estatus == "T" || (string)com.estatus == "P"),
                        consigna = consigna,
                        crc = crc,
                        estatus = com.ST_OC != null ? (string)com.ST_OC == "A" ? "AUTORIZADO" : "NO AUTORIZADO" : "NO AUTORIZADO",
                        compradorDesc = (string)listaUsuariosEnkontrol.FirstOrDefault(x => (int)x.empleado == (int)com.comprador).descripcion
                    });
                }
            }
            else
            {
                listaCompras = new List<RequisicionDTO>();
            }

            if (listaAlmacenes != null)
            {
                listaCompras = listaCompras.Where(x => listaAlmacenes.Contains(x.almacen)).ToList();
            }

            return listaCompras;
        }

        public bool corregirUbicacionesSalidas()
        {
            using (var con = checkConexionProductivo())
            {
                using (var trans = con.BeginTransaction())
                {
                    try
                    {
                        //                        var insumos = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT insumo FROM insumos")).ToObject<List<dynamic>>();

                        //                        foreach (var ins in insumos)
                        //                        {
                        //                            var almacenesMovimientosEK = consultaCheckProductivo(
                        //                                string.Format(@"SELECT almacen FROM si_movimientos_det WHERE tipo_mov < 50 AND insumo = {0} GROUP BY almacen ORDER BY almacen", (int)ins.insumo)
                        //                            );

                        //                            if (almacenesMovimientosEK != null)
                        //                            {
                        //                                var almacenesMovimientos = (List<dynamic>)almacenesMovimientosEK.ToObject<List<dynamic>>();

                        //                                foreach (var alm in almacenesMovimientos)
                        //                                {
                        //                                    var existenciaEK = consultaCheckProductivo(
                        //                                        string.Format(@"SELECT 
                        //                                                            --SUM(IF det.tipo_mov IN (1,2,3,4,5) THEN det.Cantidad ELSE 0 ENDIF) AS Entradas, 
                        //                                                            --SUM(IF det.tipo_mov IN (51,52,53,54,55) THEN det.Cantidad ELSE 0 ENDIF) AS Salidas, 
                        //                                                            SUM(det.Cantidad * IF det.tipo_mov IN (1,2,3,4,5) THEN 1 ELSE -1 ENDIF) AS Existencia 
                        //                                                        FROM si_movimientos_det det
                        //                                                        WHERE det.almacen = {0} AND det.insumo = {1}", (int)alm.almacen, (int)ins.insumo)
                        //                                    );

                        //                                    if (existenciaEK != null)
                        //                                    {
                        //                                        var existencia = ((List<dynamic>)existenciaEK.ToObject<List<dynamic>>())[0];

                        //                                        if (existencia.Existencia.Value != null)
                        //                                        {
                        //                                            if ((decimal)existencia.Existencia == 0)
                        //                                            {
                        //                                                var salidasUbicacionInvalidasEK = consultaCheckProductivo(
                        //                                                    string.Format(@"SELECT 
                        //                                            	                        det.almacen, det.tipo_mov, det.numero, det.partida, det.cantidad 
                        //                                                                    FROM si_movimientos mov 
                        //                                            	                        INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                        //                                                                    WHERE 
                        //                                                                        mov.almacen = {0} AND 
                        //                                                                        det.insumo = {1} AND 
                        //                                                                        mov.tipo_mov > 50 AND 
                        //                                                                        (det.area_alm IS NULL AND det.lado_alm IS NULL AND estante_alm IS NULL AND det.nivel_alm IS NULL) OR 
                        //                                                                        (det.area_alm = '' AND det.lado_alm = '' AND estante_alm = '' AND nivel_alm = '') 
                        //                                                                    ORDER BY mov.fecha", (int)alm.almacen, (int)ins.insumo)
                        //                                                );

                        //                                                if (salidasUbicacionInvalidasEK != null)
                        //                                                {
                        //                                                    var salidasUbicacionInvalidas = (List<dynamic>)salidasUbicacionInvalidasEK.ToObject<List<dynamic>>();

                        //                                                    foreach (var sal in salidasUbicacionInvalidas)
                        //                                                    {
                        //                                                        var entradaValidaEK = consultaCheckProductivo(
                        //                                                            string.Format(@"SELECT TOP 1 
                        //                                                                                det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm 
                        //                                                                            FROM si_movimientos mov 
                        //                                                                                INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero 
                        //                                                                            WHERE 
                        //                                                                                mov.almacen = {0} AND 
                        //                                                                                det.insumo = {1} AND 
                        //                                                                                mov.tipo_mov < 50 AND 
                        //                                                                                det.cantidad >= {2} AND 
                        //                                                                                det.area_alm IS NOT NULL AND det.lado_alm IS NOT NULL AND estante_alm IS NOT NULL AND det.nivel_alm IS NOT NULL AND 
                        //                                                                                det.area_alm != '' AND det.lado_alm != '' AND det.estante_alm != '' AND det.nivel_alm != '' 
                        //                                                                            ORDER BY mov.fecha", (int)alm.almacen, (int)ins.insumo, (decimal)sal.cantidad)
                        //                                                        );

                        //                                                        if (entradaValidaEK != null)
                        //                                                        {
                        //                                                            var entradaValida = ((List<dynamic>)entradaValidaEK.ToObject<List<dynamic>>())[0];

                        //                                                            var consultaUpdateSalidaDet = @"UPDATE si_movimientos_det 
                        //                                                                                            SET 
                        //                                                                                                area_alm = ?, 
                        //                                                                                                lado_alm = ?, 
                        //                                                                                                estante_alm = ?, 
                        //                                                                                                nivel_alm = ? 
                        //                                                                                            WHERE almacen = ? AND tipo_mov = ? AND numero = ? AND partida = ?";

                        //                                                            using (var cmd = new OdbcCommand(consultaUpdateSalidaDet))
                        //                                                            {
                        //                                                                OdbcParameterCollection parameters = cmd.Parameters;

                        //                                                                parameters.Add("@area_alm", OdbcType.Char).Value = (string)entradaValida.area_alm;
                        //                                                                parameters.Add("@lado_alm", OdbcType.Char).Value = (string)entradaValida.lado_alm;
                        //                                                                parameters.Add("@estante_alm", OdbcType.Char).Value = (string)entradaValida.estante_alm;
                        //                                                                parameters.Add("@nivel_alm", OdbcType.Char).Value = (string)entradaValida.nivel_alm;

                        //                                                                parameters.Add("@almacen", OdbcType.Numeric).Value = (int)sal.almacen;
                        //                                                                parameters.Add("@tipo_mov", OdbcType.Numeric).Value = (int)sal.tipo_mov;
                        //                                                                parameters.Add("@numero", OdbcType.Numeric).Value = (int)sal.numero;
                        //                                                                parameters.Add("@partida", OdbcType.Numeric).Value = (int)sal.partida;

                        //                                                                cmd.Connection = trans.Connection;
                        //                                                                cmd.Transaction = trans;
                        //                                                                cmd.ExecuteNonQuery();
                        //                                                            }
                        //                                                        }
                        //                                                    }
                        //                                                }
                        //                                            }
                        //                                        }
                        //                                    }
                        //                                }
                        //                            }
                        //                        }

                        trans.Commit();
                        return true;
                    }
                    catch (Exception e)
                    {
                        trans.Rollback();
                        return false;
                    }
                }
            }
        }

        private decimal getCostoPromedioKardex(int almacen, int insumo)
        {
            try
            {
                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
                {
                    #region COLOMBIA
                    var promedioEnkontrol = _contextEnkontrol.Select<dynamic>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                    {
                        consulta = @"
                            SELECT
                                SUM((CASE WHEN existencia_ent_ini IS NOT NULL THEN existencia_ent_ini ELSE 0 END) + existencia_ent_ene + existencia_ent_feb + existencia_ent_mar + existencia_ent_abr + existencia_ent_may + existencia_ent_jun + existencia_ent_jul + existencia_ent_ago + existencia_ent_sep + existencia_ent_oct + existencia_ent_nov + existencia_ent_dic) AS entradas,
                                SUM((CASE WHEN existencia_sal_ini IS NOT NULL THEN existencia_sal_ini ELSE 0 END) + existencia_sal_ene + existencia_sal_feb + existencia_sal_mar + existencia_sal_abr + existencia_sal_may + existencia_sal_jun + existencia_sal_jul + existencia_sal_ago + existencia_sal_sep + existencia_sal_oct + existencia_sal_nov + existencia_sal_dic) AS salidas,
                                SUM((CASE WHEN importe_ent_ini IS NOT NULL THEN importe_ent_ini ELSE 0 END) + importe_ent_ene + importe_ent_feb + importe_ent_mar + importe_ent_abr + importe_ent_may + importe_ent_jun + importe_ent_jul + importe_ent_ago + importe_ent_sep + importe_ent_oct + importe_ent_nov + importe_ent_dic) AS montoEntradas,
                                SUM((CASE WHEN importe_sal_ini IS NOT NULL THEN importe_sal_ini ELSE 0 END) + importe_sal_ene + importe_sal_feb + importe_sal_mar + importe_sal_abr + importe_sal_may + importe_sal_jun + importe_sal_jul + importe_sal_ago + importe_sal_sep + importe_sal_oct + importe_sal_nov + importe_sal_dic) AS montoSalidas,
                                entradas - salidas AS existencias,
                                montoEntradas - montoSalidas AS montoResultado,
                                CASE WHEN existencias > 0 THEN (montoResultado / existencias) ELSE 0 END AS costoPromedio
                            FROM DBA.si_acumula_almacen
                            WHERE almacen = ? AND insumo = ? AND ano >= ?",
                        parametros = new List<OdbcParameterDTO>() {
                            new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = almacen },
                            new OdbcParameterDTO() { nombre = "insumo", tipo = OdbcType.Numeric, valor = insumo },
                            new OdbcParameterDTO() { nombre = "ano", tipo = OdbcType.Numeric, valor = DateTime.Now.Year }
                        }
                    });
                    return Convert.ToDecimal(promedioEnkontrol[0].costoPromedio);
                    #endregion
                }
                else
                {
                    #region DEMAS EMPRESAS
                    var promedioEnkontrol = _contextEnkontrol.Select<dynamic>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                    {
                        consulta = @"
                            SELECT
                                SUM((CASE WHEN existencia_ent_ini IS NOT NULL THEN existencia_ent_ini ELSE 0 END) + existencia_ent_ene + existencia_ent_feb + existencia_ent_mar + existencia_ent_abr + existencia_ent_may + existencia_ent_jun + existencia_ent_jul + existencia_ent_ago + existencia_ent_sep + existencia_ent_oct + existencia_ent_nov + existencia_ent_dic) AS entradas,
                                SUM((CASE WHEN existencia_sal_ini IS NOT NULL THEN existencia_sal_ini ELSE 0 END) + existencia_sal_ene + existencia_sal_feb + existencia_sal_mar + existencia_sal_abr + existencia_sal_may + existencia_sal_jun + existencia_sal_jul + existencia_sal_ago + existencia_sal_sep + existencia_sal_oct + existencia_sal_nov + existencia_sal_dic) AS salidas,
                                SUM((CASE WHEN importe_ent_ini IS NOT NULL THEN importe_ent_ini ELSE 0 END) + importe_ent_ene + importe_ent_feb + importe_ent_mar + importe_ent_abr + importe_ent_may + importe_ent_jun + importe_ent_jul + importe_ent_ago + importe_ent_sep + importe_ent_oct + importe_ent_nov + importe_ent_dic) AS montoEntradas,
                                SUM((CASE WHEN importe_sal_ini IS NOT NULL THEN importe_sal_ini ELSE 0 END) + importe_sal_ene + importe_sal_feb + importe_sal_mar + importe_sal_abr + importe_sal_may + importe_sal_jun + importe_sal_jul + importe_sal_ago + importe_sal_sep + importe_sal_oct + importe_sal_nov + importe_sal_dic) AS montoSalidas,
                                entradas - salidas AS existencias,
                                montoEntradas - montoSalidas AS montoResultado,
                                CASE WHEN existencias > 0 THEN (montoResultado / existencias) ELSE 0 END AS costoPromedio
                            FROM si_acumula_almacen
                            WHERE almacen = ? AND insumo = ? AND ano >= ?",
                        parametros = new List<OdbcParameterDTO>() {
                            new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = almacen },
                            new OdbcParameterDTO() { nombre = "insumo", tipo = OdbcType.Numeric, valor = insumo },
                            new OdbcParameterDTO() { nombre = "ano", tipo = OdbcType.Numeric, valor = DateTime.Now.Year }
                        }
                    });
                    return Convert.ToDecimal(promedioEnkontrol[0].costoPromedio);
                    #endregion
                }
            }
            catch (Exception e)
            {
                LogError(0, 0, "AlmacenController", "getCostoPromedioKardex", e, AccionEnum.CONSULTA, 0, new { almacen = almacen, insumo = insumo });
                return 0;
            }
        }

        private List<CostoPromedioInventarioDTO> getCostoPromedioKardex(int almacen, List<int> insumos)
        {
            var lstParametros = new List<OdbcParameterDTO>();
            lstParametros.Add(new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = almacen });
            lstParametros.AddRange(insumos.Select(s => new OdbcParameterDTO() { nombre = "insumo", tipo = OdbcType.Numeric, valor = s }));
            lstParametros.Add(new OdbcParameterDTO() { nombre = "ano", tipo = OdbcType.Numeric, valor = DateTime.Now.Year });

            var promedioEnkontrol = _contextEnkontrol.Select<dynamic>(vSesiones.sesionEmpresaActual == 1 ? EnkontrolEnum.CplanProd : EnkontrolEnum.ArrenProd,
                new OdbcConsultaDTO()
                {
                    consulta = string.Format(@"
                        SELECT
                            insumo,
                            SUM((CASE WHEN existencia_ent_ini IS NOT NULL THEN existencia_ent_ini ELSE 0 END) + existencia_ent_ene + existencia_ent_feb + existencia_ent_mar + existencia_ent_abr + existencia_ent_may + existencia_ent_jun + existencia_ent_jul + existencia_ent_ago + existencia_ent_sep + existencia_ent_oct + existencia_ent_nov + existencia_ent_dic) AS entradas,
                            SUM((CASE WHEN existencia_sal_ini IS NOT NULL THEN existencia_sal_ini ELSE 0 END) + existencia_sal_ene + existencia_sal_feb + existencia_sal_mar + existencia_sal_abr + existencia_sal_may + existencia_sal_jun + existencia_sal_jul + existencia_sal_ago + existencia_sal_sep + existencia_sal_oct + existencia_sal_nov + existencia_sal_dic) AS salidas,
                            SUM((CASE WHEN importe_ent_ini IS NOT NULL THEN importe_ent_ini ELSE 0 END) + importe_ent_ene + importe_ent_feb + importe_ent_mar + importe_ent_abr + importe_ent_may + importe_ent_jun + importe_ent_jul + importe_ent_ago + importe_ent_sep + importe_ent_oct + importe_ent_nov + importe_ent_dic) AS montoEntradas,
                            SUM((CASE WHEN importe_sal_ini IS NOT NULL THEN importe_sal_ini ELSE 0 END) + importe_sal_ene + importe_sal_feb + importe_sal_mar + importe_sal_abr + importe_sal_may + importe_sal_jun + importe_sal_jul + importe_sal_ago + importe_sal_sep + importe_sal_oct + importe_sal_nov + importe_sal_dic) AS montoSalidas,
                            entradas - salidas AS existencias,
                            montoEntradas - montoSalidas AS montoResultado,
                            CASE WHEN existencias > 0 THEN (montoResultado / existencias) ELSE 0 END AS costoPromedio
                        FROM si_acumula_almacen                        
                        WHERE almacen = ? AND insumo in {0} AND ano >= ?
                        GROUP BY insumo",
                        insumos.ToParamInValue()),
                    parametros = lstParametros
                }
            );

            var data = promedioEnkontrol.Select(x => new CostoPromedioInventarioDTO
            {
                insumo = Convert.ToInt32(x.insumo),
                costoPromedio = Convert.ToDecimal(x.costoPromedio)
            }).ToList();

            return data;
        }


        #region ABC de Almacén
        public List<si_almacenDTO> GetAlmacenes()
        {
            var listaAlmacenes = new List<si_almacenDTO>();

            try
            {
                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {
                    case EmpresaEnum.Peru:
                        {
                            using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                            {
                                listaAlmacenes = _starsoft.TABALM.ToList().Select(x => new si_almacenDTO
                                {
                                    almacen = Int32.Parse(x.TAALMA),
                                    descripcion = x.TADESCRI,
                                    direccion = x.TADIRECC ?? "",
                                    responsable = "",
                                    telefono = "",
                                    valida_almacen_cc = "N",
                                    bit_pt = "S",
                                    bit_mp = "S",
                                    cc = null,
                                    almacen_virtual = Int32.Parse(x.TAALMA) >= 90 ? 1 : 0
                                }).ToList();
                            }
                            break;
                        }
                    default:
                        {
                            listaAlmacenes = _contextEnkontrol.Select<si_almacenDTO>(productivo ? EnkontrolAmbienteEnum.Prod : EnkontrolAmbienteEnum.Prueba, new OdbcConsultaDTO() { consulta = "SELECT * FROM si_almacen" });
                            break;
                        }
                }
            }
            catch (Exception ex)
            {
                LogError(0, 0, "AlmacenController", "GetAlmacenes", ex, AccionEnum.CONSULTA, 0, 0);
            }

            return listaAlmacenes;
        }


        public Dictionary<string, object> GuardarAlmacen(si_almacenDTO datos)
        {
            var r = new Dictionary<string, object>();

            try
            {
                //ToDo
                //Validar que no exista el # de almacen
                var query_si_almacen = new OdbcConsultaDTO();
                query_si_almacen.consulta = "SELECT * FROM si_almacen WHERE almacen='" + datos.almacen + "'";
                var listaAlmacen = _contextEnkontrol.Select<si_almacenDTO>(productivo ? EnkontrolAmbienteEnum.Prod : EnkontrolAmbienteEnum.Prueba, query_si_almacen);

                var insertAlmacen =
                    @"INSERT INTO
                        si_almacen
                        (
                            almacen,
                            descripcion,
                            direccion,
                            responsable,
                            telefono,
                            valida_almacen_cc,
                            bit_pt,
                            bit_mp,
                            cc,
                            almacen_virtual
                        )
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

                using (var cmd = new OdbcCommand(insertAlmacen))
                {
                    OdbcParameterCollection parameters = cmd.Parameters;
                    parameters.Clear();

                    parameters.Add("@almacen", OdbcType.Numeric).Value = datos.almacen;
                    parameters.Add("@descripcion", OdbcType.NVarChar).Value = datos.descripcion;
                    parameters.Add("@direccion", OdbcType.NVarChar).Value = datos.direccion;
                    parameters.Add("@responsable", OdbcType.NVarChar).Value = datos.responsable;
                    parameters.Add("@telefono", OdbcType.NVarChar).Value = datos.telefono;
                    parameters.Add("@valida_almacen_cc", OdbcType.Char).Value = datos.valida_almacen_cc;
                    parameters.Add("@bit_pt", OdbcType.Char).Value = datos.bit_pt;
                    parameters.Add("@bit_mp", OdbcType.Char).Value = datos.bit_mp;
                    parameters.Add("@cc", OdbcType.NVarChar).Value = datos.cc;
                    parameters.Add("@almacen_virtual", OdbcType.Char).Value = datos.almacen_virtual;

                    cmd.Connection = checkConexionProductivo();
                    cmd.ExecuteNonQuery();
                }

                r.Add(SUCCESS, true);
            }
            catch (Exception ex)
            {
                r.Add(SUCCESS, false);
                r.Add(MESSAGE, ex.Message);

                LogError(0, 0, "AlmacenController", "GetAlmacenes", ex, AccionEnum.CONSULTA, 0, 0);
            }

            return r;
        }
        #endregion

        public Dictionary<string, object> getUsuarioEnkontrolByID(int empleado)
        {
            var result = new Dictionary<string, object>();

            try
            {
                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {
                    case EmpresaEnum.Peru:
                        {
                            var empleadoResguardoPeru = _context.tblAlm_EmpleadoResguardo.FirstOrDefault(x => x.registroActivo && x.folio == empleado);

                            if (empleadoResguardoPeru != null)
                            {
                                result.Add("empleadoDesc", empleadoResguardoPeru.nombre + " " + empleadoResguardoPeru.apellidoPaterno + " " + empleadoResguardoPeru.apellidoMaterno);
                                result.Add(SUCCESS, true);
                            }
                            break;
                        }
                    default:
                        {
                            List<dynamic> empleadoEnkontrol = _contextEnkontrol.Select<dynamic>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                            {
                                consulta = @"SELECT * FROM empleados WHERE empleado = ?",
                                parametros = new List<OdbcParameterDTO> {
                                    new OdbcParameterDTO { nombre = "empleado", tipo = OdbcType.Numeric, valor = empleado }
                                }
                            });

                            var empleadoDesc = "";

                            if (empleadoEnkontrol.Count() > 0)
                            {
                                empleadoDesc = (string)empleadoEnkontrol[0].descripcion;
                            }

                            result.Add("empleadoDesc", empleadoDesc);
                            result.Add(SUCCESS, true);
                            break;
                        }
                }
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return result;
        }

        #region Inventario Físico
        public Dictionary<string, object> cargarExistenciasAlmacen(int almacen, DateTime fecha, bool existentes)
        {
            var result = new Dictionary<string, object>();

            try
            {
                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {
                    case EmpresaEnum.Construplan:
                        {
                            #region CONSTRUPLAN
                            var listaInsumos = _contextEnkontrol.Select<dynamic>(EnkontrolEnum.CplanProd, new OdbcConsultaDTO()
                            {
                                consulta = @"
                                    SELECT
	                                    det.insumo,
                                        ins.descripcion,
                                        ins.unidad,
                                        det.area_alm,
                                        det.lado_alm,
                                        det.estante_alm,
                                        det.nivel_alm,
                                        SUM(CASE WHEN det.tipo_mov < 50 THEN det.cantidad ELSE -det.cantidad END) AS existencia
                                    FROM si_movimientos mov
	                                    INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero
                                        INNER JOIN insumos ins ON det.insumo = ins.insumo
                                    WHERE mov.almacen = ? AND mov.fecha <= ?
                                    GROUP BY det.insumo, ins.descripcion, ins.unidad, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm",
                                parametros = new List<OdbcParameterDTO> {
                                    new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = almacen },
                                    new OdbcParameterDTO() { nombre = "fecha", tipo = OdbcType.Date, valor = fecha }
                                }
                            });

                            var datos = listaInsumos.Where(x => (existentes ? Convert.ToDecimal(x.existencia) > 0 : true)).Select(x => new
                            {
                                insumo = Convert.ToInt32(x.insumo),
                                insumoDesc = (string)x.descripcion,
                                cantidad = Convert.ToDecimal(x.existencia),
                                unidad = (string)x.unidad,
                                ubicacion = (string)x.area_alm + " " + (string)x.lado_alm + " " + (string)x.estante_alm + " " + (string)x.nivel_alm
                            }).OrderBy(x => x.ubicacion).ToList();

                            result.Add("datos", datos);
                            #endregion
                            break;
                        }
                    case EmpresaEnum.Arrendadora:
                        {
                            #region ARRENDADORA
                            var listaInsumos = _contextEnkontrol.Select<dynamic>(EnkontrolEnum.ArrenProd, new OdbcConsultaDTO()
                            {
                                consulta = @"
                                    SELECT
	                                    det.insumo,
                                        ins.descripcion,
                                        ins.unidad,
                                        det.area_alm,
                                        det.lado_alm,
                                        det.estante_alm,
                                        det.nivel_alm,
                                        SUM(CASE WHEN det.tipo_mov < 50 THEN det.cantidad ELSE -det.cantidad END) AS existencia
                                    FROM si_movimientos mov
	                                    INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero
                                        INNER JOIN insumos ins ON det.insumo = ins.insumo
                                    WHERE mov.almacen = ? AND mov.fecha <= ?
                                    GROUP BY det.insumo, ins.descripcion, ins.unidad, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm",
                                parametros = new List<OdbcParameterDTO> {
                                    new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = almacen },
                                    new OdbcParameterDTO() { nombre = "fecha", tipo = OdbcType.Date, valor = fecha }
                                }
                            });

                            var datos = listaInsumos.Where(x => (existentes ? Convert.ToDecimal(x.existencia) > 0 : true)).Select(x => new
                            {
                                insumo = Convert.ToInt32(x.insumo),
                                insumoDesc = (string)x.descripcion,
                                cantidad = Convert.ToDecimal(x.existencia),
                                unidad = (string)x.unidad,
                                ubicacion = (string)x.area_alm + " " + (string)x.lado_alm + " " + (string)x.estante_alm + " " + (string)x.nivel_alm
                            }).OrderBy(x => x.ubicacion).ToList();

                            result.Add("datos", datos);
                            #endregion
                            break;
                        }
                    case EmpresaEnum.Colombia:
                        {
                            #region COLOMBIA
                            var listaRegistrosGeneral = _context.tblAlm_Movimientos.Where(x => x.estatusHabilitado && x.almacen == almacen && DbFunctions.TruncateTime(x.fecha) <= DbFunctions.TruncateTime(fecha) && x.fecha.Year == fecha.Year).ToList();
                            var listaMovimientosAlmacen = listaRegistrosGeneral.Join(
                                _context.tblAlm_MovimientosDet.Where(x => x.estatusHabilitado),
                                m => new { m.almacen, m.tipo_mov, m.numero },
                                d => new { d.almacen, d.tipo_mov, d.numero },
                                (m, d) => new { m, d }
                            ).ToList();

                            var listaInsumosEK = _contextEnkontrol.Select<dynamic>(EnkontrolEnum.ColombiaProductivo, new OdbcConsultaDTO() { consulta = @"SELECT * FROM DBA.insumos" });

                            var datos = listaMovimientosAlmacen.GroupBy(x => new { x.d.insumo, x.d.area_alm, x.d.lado_alm, x.d.estante_alm, x.d.nivel_alm }).Select(x => new
                            {
                                insumo = x.Key.insumo,
                                insumoDesc = listaInsumosEK.Where(y => (int)y.insumo == x.Key.insumo).Select(z => (string)z.descripcion).FirstOrDefault(),
                                cantidad = x.Sum(y => (y.d.tipo_mov < 50) ? y.d.cantidad : (y.d.cantidad * -1)),
                                unidad = listaInsumosEK.Where(y => (int)y.insumo == x.Key.insumo).Select(z => (string)z.unidad).FirstOrDefault(),
                                ubicacion = string.Format(@"{0} {1} {2} {3}", x.Key.area_alm, x.Key.lado_alm, x.Key.estante_alm, x.Key.nivel_alm)
                            }).OrderBy(x => x.ubicacion).ToList();

                            datos = datos.Where(x => (existentes ? Convert.ToDecimal(x.cantidad) > 0 : true)).ToList();

                            result.Add("datos", datos);
                            #endregion
                            break;
                        }
                    case EmpresaEnum.Peru:
                        {
                            #region PERÚ
                            var listaInsumos = _context.tblAlm_Movimientos.Where(x => x.estatusHabilitado && x.almacen == almacen).ToList().Where(x => x.fecha.Date <= fecha.Date).Join(
                                _context.tblAlm_MovimientosDet.Where(x => x.estatusHabilitado),
                                g => new { g.almacen, g.tipo_mov, g.numero },
                                d => new { d.almacen, d.tipo_mov, d.numero },
                                (g, d) => new { g, d }
                            ).ToList().GroupBy(x => new { x.d.insumo, x.d.area_alm, x.d.lado_alm, x.d.estante_alm, x.d.nivel_alm }).Select(x => new
                            {
                                insumo = x.Key.insumo,
                                area_alm = x.Key.area_alm,
                                lado_alm = x.Key.lado_alm,
                                estante_alm = x.Key.estante_alm,
                                nivel_alm = x.Key.nivel_alm,
                                existencia = x.Sum(y => y.d.tipo_mov < 50 ? y.d.cantidad : (y.d.cantidad * -1))
                            }).ToList();

                            using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                            {
                                var listaCatalogoInsumos = _starsoft.MAEART.ToList();

                                var datos = listaInsumos.Where(x => (existentes ? Convert.ToDecimal(x.existencia) > 0 : true)).Select(x => new
                                {
                                    insumo = x.insumo,
                                    insumoDesc = listaCatalogoInsumos.Where(y => Int32.Parse(y.ACODIGO) == x.insumo).Select(z => z.ADESCRI).FirstOrDefault(),
                                    cantidad = x.existencia,
                                    unidad = listaCatalogoInsumos.Where(y => Int32.Parse(y.ACODIGO) == x.insumo).Select(z => z.AUNIDAD).FirstOrDefault(),
                                    ubicacion = x.area_alm + " " + x.lado_alm + " " + x.estante_alm + " " + x.nivel_alm
                                }).OrderBy(x => x.ubicacion).ToList();

                                result.Add("datos", datos);
                            }
                            #endregion
                            break;
                        }
                }

                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(SUCCESS, false);
                result.Add(MESSAGE, e.Message);
                LogError(0, 0, "AlmacenController", "cargarExistenciasAlmacen", e, AccionEnum.CONSULTA, 0, new { almacen = almacen, fecha = fecha });
            }
            return result;
        }

        public Dictionary<string, object> cargarExistenciasAlmacen(int almacen, int insumo, bool existentes)
        {
            var result = new Dictionary<string, object>();

            try
            {
                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {
                    case EmpresaEnum.Peru:
                        {
                            using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                            {
                                var listaInsumosStarsoft = _starsoft.MAEART.ToList();

                                var datosPrueba = _context.tblAlm_Movimientos.Where(x => x.estatusHabilitado).Join(
                                    _context.tblAlm_MovimientosDet.Where(x => x.estatusHabilitado),
                                    m => new { m.almacen, m.tipo_mov, m.numero },
                                    d => new { d.almacen, d.tipo_mov, d.numero },
                                    (m, d) => new { m, d }
                                ).Where(x => x.m.almacen == almacen && x.d.insumo == insumo).ToList();

                                var datos = _context.tblAlm_Movimientos.Where(x => x.estatusHabilitado).Join(
                                    _context.tblAlm_MovimientosDet.Where(x => x.estatusHabilitado),
                                    m => new { m.almacen, m.tipo_mov, m.numero },
                                    d => new { d.almacen, d.tipo_mov, d.numero },
                                    (m, d) => new { m, d }
                                ).Where(x => x.m.almacen == almacen && x.d.insumo == insumo).ToList().GroupBy(x => new { x.d.insumo, x.d.area_alm, x.d.lado_alm, x.d.estante_alm, x.d.nivel_alm }).Select(x => new
                                {
                                    almacen = almacen,
                                    insumo = x.Key.insumo,
                                    areaAlmacen = x.Key.area_alm,
                                    ladoAlmacen = x.Key.lado_alm,
                                    estanteAlmacen = x.Key.estante_alm,
                                    nivelAlmacen = x.Key.nivel_alm,
                                    cantidad = x.Sum(y => y.d.tipo_mov < 50 ? y.d.cantidad : (y.d.cantidad * -1)),
                                    unidad = listaInsumosStarsoft.Where(y => Int32.Parse(y.ACODIGO) == x.Key.insumo).Select(z => z.AUNIDAD).FirstOrDefault()
                                }).Where(x => existentes ? x.cantidad > 0 : true).ToList();

                                result.Add("datos", datos);
                                result.Add(SUCCESS, true);
                            }
                            break;
                        }
                    case EmpresaEnum.Colombia:
                        {
                            List<dynamic> listaInsumos = _contextEnkontrol.Select<dynamic>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                            {
                                consulta = @"
                                    SELECT
	                                    det.*,
                                        ins.descripcion as descInsumo,
                                        ins.unidad
                                    FROM si_movimientos mov
	                                    INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero
                                        INNER JOIN insumos ins ON det.insumo = ins.insumo
                                    WHERE mov.almacen = ? and det.insumo = ?
                                    ",

                                //SUM(CASE WHEN det.tipo_mov < 50 THEN det.cantidad ELSE -det.cantidad END) AS existencia
                                //GROUP BY det.insumo, ins.descripcion, ins.unidad
                                parametros = new List<OdbcParameterDTO> {
                                    new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = almacen },
                                    new OdbcParameterDTO() { nombre = "insumo", tipo = OdbcType.Numeric, valor = insumo }
                                }
                            });

                            if (listaInsumos != null && listaInsumos.Count() > 0)
                            {
                                string unidadDesc = listaInsumos[0].unidad;

                                var datos = _context.tblAlm_MovimientosDet.Where(x => x.estatusHabilitado && x.almacen == almacen && x.insumo == insumo && (existentes ? x.cantidad > 0 : true)).ToList()
                                .GroupBy(x => new { x.insumo, x.area_alm, x.lado_alm, x.estante_alm, x.nivel_alm })
                                .Select(x => new
                                {
                                    almacen = almacen,
                                    insumo = x.Key.insumo,
                                    areaAlmacen = x.Key.area_alm,
                                    ladoAlmacen = x.Key.lado_alm,
                                    estanteAlmacen = x.Key.estante_alm,
                                    nivelAlmacen = x.Key.nivel_alm,
                                    cantidad = x.Sum(y => y.tipo_mov < 50 ? y.cantidad : (y.cantidad * -1)),
                                    unidad = unidadDesc
                                }).ToList();
                                result.Add("datos", datos);

                            }
                            else
                            {
                                result.Add("datos", new List<dynamic>());

                            }

                            //var datos = listaInsumos.Where(x => (existentes ? Convert.ToDecimal(x.existencia) > 0 : true)).Select(x => new
                            //{
                            //    almacen = almacen,
                            //    insumo = Convert.ToInt32(x.insumo),
                            //    areaAlmacen = (string)x.area_alm,
                            //    ladoAlmacen = (string)x.lado_alm,
                            //    estanteAlmacen = (string)x.estante_alm,
                            //    nivelAlmacen = (string)x.nivel_alm,
                            //    cantidad = Convert.ToDecimal(x.existencia),
                            //    unidad = (string)x.unidad
                            //}).OrderBy(x => x.insumo).ToList();

                            result.Add(SUCCESS, true);
                        }
                        break;
                    default:
                        {
                            List<dynamic> listaInsumos = _contextEnkontrol.Select<dynamic>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                            {
                                consulta = @"
                                    SELECT
	                                    det.insumo,
                                        ins.descripcion,
                                        ins.unidad,
                                        det.area_alm,
                                        det.lado_alm,
                                        det.estante_alm,
                                        det.nivel_alm,
                                        SUM(CASE WHEN det.tipo_mov < 50 THEN det.cantidad ELSE -det.cantidad END) AS existencia
                                    FROM si_movimientos mov
	                                    INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero
                                        INNER JOIN insumos ins ON det.insumo = ins.insumo
                                    WHERE mov.almacen = ? and det.insumo = ?
                                    GROUP BY det.insumo, ins.descripcion, ins.unidad, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm",
                                parametros = new List<OdbcParameterDTO> {
                                    new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = almacen },
                                    new OdbcParameterDTO() { nombre = "insumo", tipo = OdbcType.Numeric, valor = insumo }
                                }
                            });

                            var datos = listaInsumos.Where(x => (existentes ? Convert.ToDecimal(x.existencia) > 0 : true)).Select(x => new
                            {
                                almacen = almacen,
                                insumo = Convert.ToInt32(x.insumo),
                                areaAlmacen = (string)x.area_alm,
                                ladoAlmacen = (string)x.lado_alm,
                                estanteAlmacen = (string)x.estante_alm,
                                nivelAlmacen = (string)x.nivel_alm,
                                cantidad = Convert.ToDecimal(x.existencia),
                                unidad = (string)x.unidad
                            }).OrderBy(x => x.insumo).ToList();

                            result.Add("datos", datos);
                            result.Add(SUCCESS, true);
                            break;
                        }
                }
            }
            catch (Exception e)
            {
                result.Add(SUCCESS, false);
                result.Add(MESSAGE, e.Message);
                LogError(0, 0, "AlmacenController", "cargarExistenciasAlmacen", e, AccionEnum.CONSULTA, 0, new { almacen = almacen, insumo = insumo });
            }
            return result;
        }

        public Dictionary<string, object> cargarInventarioFisico(int almacen, DateTime fecha)
        {
            var result = new Dictionary<string, object>();

            try
            {
                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {
                    case EmpresaEnum.Peru:
                        {
                            #region PERÚ
                            var listaFisico = _context.tblAlm_Fisico.Where(x => x.registroActivo && x.almacen == almacen).ToList().Where(x => x.fecha.Date == fecha.Date).ToList();

                            if (listaFisico.Count() > 0)
                            {
                                using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                                {
                                    int n;
                                    var listaFisicoDetalle = _context.tblAlm_FisicoDet.Where(x => x.registroActivo && x.almacen == almacen).ToList().Where(x => x.fecha.Date == fecha.Date).Join(
                                        _starsoft.MAEART.ToList().Where(x => int.TryParse(x.ACODIGO, out n)),
                                        d => d.insumo,
                                        i => Int32.Parse(i.ACODIGO),
                                        (d, i) => new { d, i }
                                    ).Select(x => new FisicoDetalleDTO
                                    {
                                        centro_costo = x.d.centro_costo,
                                        almacen = x.d.almacen,
                                        fecha = x.d.fecha,
                                        fechaString = x.d.fecha.ToShortDateString(),
                                        insumo = x.d.insumo,
                                        insumoDesc = x.i.ADESCRI,
                                        cantidad = x.d.cantidad,
                                        precio = x.d.precio,
                                        importe = x.d.importe,
                                        partida = x.d.partida,
                                        area_alm = x.d.area_alm,
                                        lado_alm = x.d.lado_alm,
                                        estante_alm = x.d.estante_alm,
                                        nivel_alm = x.d.nivel_alm,
                                        origen = x.d.origen
                                    }).ToList();

                                    var inventarioCerrado = _context.tblAlm_CierreInventarioFisico.FirstOrDefault(x =>
                                        x.estatus && x.almacen == almacen && DbFunctions.TruncateTime(x.fecha) == DbFunctions.TruncateTime(fecha)
                                    );

                                    foreach (var fis in listaFisicoDetalle)
                                    {
                                        fis.flagInventarioCerrado = inventarioCerrado != null;
                                    }

                                    result.Add("datos", listaFisicoDetalle);
                                    result.Add("flagInventarioCerrado", inventarioCerrado != null);
                                }
                            }
                            else
                            {
                                result.Add("datos", new List<FisicoDetalleDTO>());
                            }
                            #endregion
                            break;
                        }
                    default:
                        {
                            #region DEMÁS EMPRESAS
                            //Verificar si se requiere aplicar alguna otra condición para comprobar si existe y está pendiente (como el estatus por ejemplo)
                            List<dynamic> fisicoEnkontrol = _contextEnkontrol.Select<dynamic>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                            {
                                consulta = string.Format(@"SELECT * FROM {0}si_fisico WHERE almacen = ? AND fecha = ?", (EmpresaEnum)vSesiones.sesionEmpresaActual != EmpresaEnum.Colombia ? "" : "DBA."),
                                parametros = new List<OdbcParameterDTO> {
                                    new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = almacen },
                                    new OdbcParameterDTO() { nombre = "fecha", tipo = OdbcType.Date, valor = fecha }
                                }
                            });

                            if (fisicoEnkontrol.Count() > 0)
                            {
                                List<FisicoDetalleDTO> fisicoDetalleEnkontrol = _contextEnkontrol.Select<FisicoDetalleDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                {
                                    consulta = string.Format(@"
                                        SELECT
                                            det.*,
                                            ins.descripcion AS insumoDesc,
                                            CONVERT(varchar, det.fecha, 103) AS fechaString
                                        FROM {0}si_fisico_det det
                                            INNER JOIN {0}insumos ins ON det.insumo = ins.insumo
                                        WHERE det.almacen = ? AND det.fecha = ?
                                        ORDER BY det.partida", (EmpresaEnum)vSesiones.sesionEmpresaActual != EmpresaEnum.Colombia ? "" : "DBA."),
                                    parametros = new List<OdbcParameterDTO> {
                                        new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = almacen },
                                        new OdbcParameterDTO() { nombre = "fecha", tipo = OdbcType.Date, valor = fecha }
                                    }
                                });

                                var inventarioCerrado = _context.tblAlm_CierreInventarioFisico.FirstOrDefault(x =>
                                    x.estatus && x.almacen == almacen && DbFunctions.TruncateTime(x.fecha) == DbFunctions.TruncateTime(fecha)
                                );

                                foreach (var fis in fisicoDetalleEnkontrol)
                                {
                                    fis.flagInventarioCerrado = inventarioCerrado != null;
                                }

                                result.Add("datos", fisicoDetalleEnkontrol);
                                result.Add("flagInventarioCerrado", inventarioCerrado != null);
                            }
                            else
                            {
                                result.Add("datos", new List<FisicoDetalleDTO>());
                            }
                            #endregion
                            break;
                        }
                }

                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(SUCCESS, false);
                result.Add(MESSAGE, e.Message);
                LogError(0, 0, "AlmacenController", "cargarInventarioFisico", e, AccionEnum.CONSULTA, 0, new { almacen = almacen, fecha = fecha });
            }

            return result;
        }

        public Dictionary<string, object> cargarInventarioFisico(string cc, int almacen, DateTime fecha, int insumoInicial, int insumoFin, bool soloConDiferencia)
        {
            var result = new Dictionary<string, object>();

            try
            {
                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {
                    case EmpresaEnum.Peru:
                        {
                            #region PERÚ
                            var listaFisico = _context.tblAlm_Fisico.Where(x => x.registroActivo && x.almacen == almacen).ToList().Where(x => x.fecha.Date == fecha.Date).ToList();

                            if (listaFisico.Count() > 0)
                            {
                                using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                                {
                                    var listaFisicoDetalle = _context.tblAlm_FisicoDet.Where(x => x.registroActivo && x.almacen == almacen).ToList().Where(x => x.fecha.Date == fecha.Date).Join(
                                        _starsoft.MAEART.ToList(),
                                        d => d.insumo,
                                        i => Int32.Parse(i.ACODIGO),
                                        (d, i) => new { d, i }
                                    ).Select(x => new ValuacionInventarioFisicoDTO
                                    {
                                        insumo = x.d.insumo,
                                        insumoDesc = x.i.ADESCRI,
                                        cantidad = x.d.cantidad,
                                        partida = x.d.partida
                                    }).ToList();

                                    if (listaFisicoDetalle.Count() > 0)
                                    {
                                        var insumos = listaFisicoDetalle.Select(x => x.insumo).ToList();
                                        var costosPromedio = getCostoPromedioKardex(almacen, insumos);

                                        foreach (var item in listaFisicoDetalle)
                                        {
                                            var costoPromedioItem = costosPromedio.FirstOrDefault(x => x.insumo == item.insumo);
                                            item.costoPromedio = costoPromedioItem == null ? 0 : costoPromedioItem.costoPromedio;
                                            item.total = item.costoPromedio * item.cantidad;
                                        }

                                        if (soloConDiferencia)
                                        {
                                            var listaExistencias = _context.tblAlm_Movimientos.Where(x => x.estatusHabilitado && x.almacen == almacen).ToList().Where(x => x.fecha.Date == fecha.Date).Join(
                                                _context.tblAlm_MovimientosDet.Where(x => x.estatusHabilitado),
                                                g => new { g.almacen, g.tipo_mov, g.numero },
                                                d => new { d.almacen, d.tipo_mov, d.numero },
                                                (g, d) => new { g, d }
                                            ).ToList().GroupBy(x => new { x.d.insumo, x.d.area_alm, x.d.lado_alm, x.d.estante_alm, x.d.nivel_alm }).Select(x => new
                                            {
                                                insumo = x.Key.insumo,
                                                area_alm = x.Key.area_alm,
                                                lado_alm = x.Key.lado_alm,
                                                estante_alm = x.Key.estante_alm,
                                                nivel_alm = x.Key.nivel_alm,
                                                existencia = x.Sum(y => y.d.tipo_mov < 50 ? y.d.cantidad : (y.d.cantidad * -1))
                                            }).ToList();

                                            listaFisicoDetalle = listaFisicoDetalle.Where(x =>
                                                (x.cantidad - (listaExistencias.Where(r => r.insumo == x.insumo).FirstOrDefault() != null ?
                                                        listaExistencias.Where(r => r.insumo == x.insumo).FirstOrDefault().existencia : 0)
                                                ) != 0
                                            ).ToList();
                                        }

                                        result.Add("datos", listaFisicoDetalle.OrderBy(x => x.insumo).ToList());
                                    }
                                    else
                                    {
                                        result.Add("datos", new List<ValuacionInventarioFisicoDTO>());
                                    }
                                }
                            }
                            else
                            {
                                result.Add("datos", new List<ValuacionInventarioFisicoDTO>());
                            }

                            result.Add("cc", cc);
                            result.Add("almacen", almacen);
                            result.Add("fecha", fecha);
                            result.Add("insumoInicio", insumoInicial);
                            result.Add("insumoFin", insumoFin);
                            #endregion
                            break;
                        }
                    default:
                        {
                            #region DEMÁS EMPRESAS
                            //Verificar si se requiere aplicar alguna otra condición para comprobar si existe y está pendiente (como el estatus por ejemplo)
                            List<dynamic> fisicoEnkontrol = _contextEnkontrol.Select<dynamic>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                            {
                                consulta = @"SELECT * FROM si_fisico WHERE centro_costo = ? AND almacen = ? AND fecha = ?",
                                parametros = new List<OdbcParameterDTO> {
                                    new OdbcParameterDTO() { nombre = "centro_costo", tipo = OdbcType.Char, valor = cc },
                                    new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = almacen },
                                    new OdbcParameterDTO() { nombre = "fecha", tipo = OdbcType.Date, valor = fecha }
                                }
                            });

                            if (fisicoEnkontrol.Count() > 0)
                            {
                                List<ValuacionInventarioFisicoDTO> fisicoDetalleEnkontrol = _contextEnkontrol.Select<ValuacionInventarioFisicoDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                {
                                    consulta = @"
                                        SELECT
                                            det.partida, 
                                            det.insumo,
                                            ins.descripcion AS insumoDesc,
                                            det.cantidad,
                                            ins.unidad
                                        FROM si_fisico_det det
                                            INNER JOIN insumos ins ON det.insumo = ins.insumo
                                        WHERE det.centro_costo = ? AND det.almacen = ? AND det.fecha = ? AND det.insumo between ? AND ?
                                        ORDER BY det.partida",
                                    parametros = new List<OdbcParameterDTO> {
                                        new OdbcParameterDTO() { nombre = "centro_costo", tipo = OdbcType.Char, valor = cc },
                                        new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = almacen },
                                        new OdbcParameterDTO() { nombre = "fecha", tipo = OdbcType.Date, valor = fecha },
                                        new OdbcParameterDTO() { nombre = "insumo", tipo = OdbcType.Numeric, valor = insumoInicial },
                                        new OdbcParameterDTO() { nombre = "insumo", tipo = OdbcType.Numeric, valor = insumoFin }
                                    }
                                });

                                if (fisicoDetalleEnkontrol.Count() > 0)
                                {
                                    var insumos = fisicoDetalleEnkontrol.Select(x => x.insumo).ToList();
                                    var costosPromedio = getCostoPromedioKardex(almacen, insumos);

                                    foreach (var item in fisicoDetalleEnkontrol)
                                    {
                                        var costoPromedioItem = costosPromedio.FirstOrDefault(x => x.insumo == item.insumo);
                                        item.costoPromedio = costoPromedioItem == null ? 0 : costoPromedioItem.costoPromedio;
                                        item.total = item.costoPromedio * item.cantidad;
                                    }

                                    if (soloConDiferencia)
                                    {
                                        var obtenerExistenciaAlmacen = _contextEnkontrol.Select<obtenerExistenciasExistenciasDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                        {
                                            consulta = @"SELECT det.insumo, ins.descripcion,ins.unidad,det.area_alm,det.lado_alm,det.estante_alm,det.nivel_alm,
                                                    SUM(CASE WHEN det.tipo_mov < 50 THEN det.cantidad ELSE -det.cantidad END) AS existencia
                                                FROM si_movimientos mov
                                                INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero
                                                INNER JOIN insumos ins ON det.insumo = ins.insumo
                                                WHERE mov.almacen = ? AND mov.fecha <= ?  AND ins.insumo >= ? AND ins.insumo <= ?
                                                GROUP BY det.insumo, ins.descripcion, ins.unidad, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm",
                                            parametros = new List<OdbcParameterDTO> {
                                                new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = almacen },
                                                new OdbcParameterDTO() { nombre = "fecha", tipo = OdbcType.Date, valor = fecha },
                                                new OdbcParameterDTO() { nombre = "insumo", tipo = OdbcType.Numeric, valor = insumoInicial },
                                                new OdbcParameterDTO() { nombre = "insumo", tipo = OdbcType.Numeric, valor = insumoFin }
                                            }
                                        });

                                        fisicoDetalleEnkontrol = fisicoDetalleEnkontrol.Where(x =>
                                            (x.cantidad - (obtenerExistenciaAlmacen.Where(r => r.insumo == x.insumo).FirstOrDefault() != null ?
                                                    obtenerExistenciaAlmacen.Where(r => r.insumo == x.insumo).FirstOrDefault().existencia : 0)
                                            ) != 0).ToList();
                                    }

                                    result.Add("datos", fisicoDetalleEnkontrol.OrderBy(x => x.insumo).ToList());
                                }
                                else
                                {
                                    result.Add("datos", new List<ValuacionInventarioFisicoDTO>());
                                }
                            }
                            else
                            {
                                result.Add("datos", new List<ValuacionInventarioFisicoDTO>());
                            }

                            result.Add("cc", cc);
                            result.Add("almacen", almacen);
                            result.Add("fecha", fecha);
                            result.Add("insumoInicio", insumoInicial);
                            result.Add("insumoFin", insumoFin);
                            #endregion
                            break;
                        }
                }

                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(SUCCESS, false);
                result.Add(MESSAGE, e.Message);
                LogError(0, 0, "AlmacenController", "cargarInventarioFisico", e, AccionEnum.CONSULTA, 0, new { almacen = almacen, fecha = fecha });
            }

            return result;
        }

        public Dictionary<string, object> cargarIntervaloInsumos()
        {
            var result = new Dictionary<string, object>();

            try
            {
                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {
                    case EmpresaEnum.Peru:
                        {
                            #region PERÚ
                            using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                            {
                                var primerInsumo = _starsoft.MAEART.Select(x => Int32.Parse(x.ACODIGO)).OrderBy(x => x).FirstOrDefault();
                                var ultimoInsumo = _starsoft.MAEART.Select(x => Int32.Parse(x.ACODIGO)).OrderByDescending(x => x).FirstOrDefault();

                                result.Add("primerInsumo", primerInsumo);
                                result.Add("ultimoInsumo", ultimoInsumo);
                            }
                            #endregion
                            break;
                        }
                    default:
                        {
                            #region DEMÁS EMPRESAS
                            var primerInsumo = _contextEnkontrol.Select<Core.DTO.Administracion.detInsumoDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                            {
                                consulta = @"SELECT TOP 1 insumo FROM insumos ORDER BY insumo",
                            }).FirstOrDefault();
                            var ultimoInsumo = _contextEnkontrol.Select<Core.DTO.Administracion.detInsumoDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                            {
                                consulta = @"SELECT TOP 1 insumo FROM insumos ORDER BY insumo desc",
                            }).FirstOrDefault();

                            result.Add("primerInsumo", primerInsumo);
                            result.Add("ultimoInsumo", ultimoInsumo);
                            #endregion
                            break;
                        }
                }

                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(SUCCESS, false);
                result.Add(MESSAGE, e.Message);
            }

            return result;
        }

        public Dictionary<string, object> guardarInventarioFisico(List<FisicoDetalleDTO> partidas)
        {
            var result = new Dictionary<string, object>();

            //Se escoge la primer partida para sacar el almacén y la fecha del inventario físico en general.
            var almacen = partidas[0].almacen;
            var fecha = partidas[0].fecha;

            switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
            {
                case EmpresaEnum.Peru:
                    {
                        #region PERÚ
                        using (var dbContextTransaction = _context.Database.BeginTransaction())
                        {
                            try
                            {
                                //Se saca la lista de detalle desde Enkontrol para obtener la última partida real desde la base de datos.
                                var fisicoDetalleEnkontrol = _context.tblAlm_FisicoDet.Where(x =>
                                    x.registroActivo && x.almacen == almacen
                                ).ToList().Where(x => x.fecha.Date == fecha.Date).OrderByDescending(x => x.partida).Select(x => x.partida).FirstOrDefault();
                                var partidaNueva = fisicoDetalleEnkontrol + 1;

                                foreach (var part in partidas)
                                {
                                    if (part.nuevo)
                                    {
                                        #region REGISTRO NUEVO
                                        _context.tblAlm_FisicoDet.Add(new tblAlm_FisicoDet
                                        {
                                            centro_costo = "020102",
                                            almacen = almacen,
                                            fecha = fecha,
                                            insumo = part.insumo,
                                            cantidad = part.cantidad,
                                            precio = 0,
                                            importe = 0,
                                            partida = partidaNueva++,
                                            area_alm = part.area_alm ?? "",
                                            lado_alm = part.lado_alm ?? "",
                                            estante_alm = part.estante_alm ?? "",
                                            nivel_alm = part.nivel_alm ?? "",
                                            origen = 0,
                                            registroActivo = true
                                        });
                                        _context.SaveChanges();
                                        #endregion
                                    }
                                    else
                                    {
                                        #region ACTUALIZAR REGISTRO
                                        var registroDetalle = _context.tblAlm_FisicoDet.Where(x => x.almacen == almacen && x.insumo == part.insumo && x.partida == part.partida).ToList().FirstOrDefault(x => x.fecha.Date == fecha.Date);

                                        if (registroDetalle != null)
                                        {
                                            registroDetalle.cantidad = part.cantidad;
                                            registroDetalle.precio = part.precio;
                                            registroDetalle.importe = part.cantidad * part.precio;

                                            _context.SaveChanges();
                                        }
                                        #endregion
                                    }
                                }

                                dbContextTransaction.Commit();
                                result.Add(SUCCESS, true);
                            }
                            catch (Exception e)
                            {
                                dbContextTransaction.Rollback();

                                result.Add(SUCCESS, false);
                                result.Add(MESSAGE, e.Message);

                                LogError(0, 0, "AlmacenController", "guardarInventarioFisico", e, AccionEnum.AGREGAR, 0, new { partidas = partidas });
                            }
                        }
                        #endregion
                        break;
                    }
                default:
                    {
                        #region DEMÁS EMPRESAS
                        using (var con = checkConexionProductivo())
                        {
                            using (var trans = con.BeginTransaction())
                            {
                                try
                                {
                                    //Se saca la lista de detalle desde Enkontrol para obtener la última partida real desde la base de datos.
                                    List<FisicoDetalleDTO> fisicoDetalleEnkontrol = _contextEnkontrol.Select<FisicoDetalleDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                    {
                                        consulta = string.Format(@"
                                            SELECT
                                                det.*,
                                                ins.descripcion AS insumoDesc,
                                                CONVERT(varchar, det.fecha, 103) AS fechaString
                                            FROM {0}si_fisico_det det
                                                INNER JOIN {0}insumos ins ON det.insumo = ins.insumo
                                            WHERE det.almacen = ? AND det.fecha = ?
                                            ORDER BY det.partida", (EmpresaEnum)vSesiones.sesionEmpresaActual != EmpresaEnum.Colombia ? "" : "DBA."),
                                        parametros = new List<OdbcParameterDTO> {
                                            new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = almacen },
                                            new OdbcParameterDTO() { nombre = "fecha", tipo = OdbcType.Date, valor = fecha }
                                        }
                                    });

                                    var partidaNueva = fisicoDetalleEnkontrol.Max(x => x.partida) + 1;

                                    foreach (var part in partidas)
                                    {
                                        if (part.nuevo)
                                        {
                                            var consulta = @"";

                                            if ((EmpresaEnum)vSesiones.sesionEmpresaActual != EmpresaEnum.Colombia)
                                            {
                                                consulta = @"
                                                    INSERT INTO si_fisico_det (centro_costo, almacen, fecha, insumo, cantidad, precio, importe, partida, area_alm, lado_alm, estante_alm, nivel_alm, origen) 
                                                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                                                ";
                                            }
                                            else
                                            {
                                                consulta = @"INSERT INTO DBA.si_fisico_det (centro_costo, almacen, fecha, insumo, cantidad, precio, importe, partida) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
                                            }

                                            using (var cmd = new OdbcCommand(consulta))
                                            {
                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                parameters.Add("@centro_costo", OdbcType.Char).Value = (EmpresaEnum)vSesiones.sesionEmpresaActual != EmpresaEnum.Colombia ? "998" : "001"; //Siempre se coloca el centro de costo 998 cuando se guarda desde SIGOPLAN.
                                                parameters.Add("@almacen", OdbcType.Numeric).Value = almacen;
                                                parameters.Add("@fecha", OdbcType.Date).Value = fecha;
                                                parameters.Add("@insumo", OdbcType.Numeric).Value = part.insumo;
                                                parameters.Add("@cantidad", OdbcType.Numeric).Value = part.cantidad;
                                                parameters.Add("@precio", OdbcType.Numeric).Value = 0;
                                                parameters.Add("@importe", OdbcType.Numeric).Value = 0;
                                                parameters.Add("@partida", OdbcType.Numeric).Value = partidaNueva++;

                                                if ((EmpresaEnum)vSesiones.sesionEmpresaActual != EmpresaEnum.Colombia)
                                                {
                                                    parameters.Add("@area_alm", OdbcType.Char).Value = part.area_alm ?? "";
                                                    parameters.Add("@lado_alm", OdbcType.Char).Value = part.lado_alm ?? "";
                                                    parameters.Add("@estante_alm", OdbcType.Char).Value = part.estante_alm ?? "";
                                                    parameters.Add("@nivel_alm", OdbcType.Char).Value = part.nivel_alm ?? "";
                                                    parameters.Add("@origen", OdbcType.Numeric).Value = 0;
                                                }

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;
                                                cmd.ExecuteNonQuery();
                                            }
                                        }
                                        else
                                        {
                                            var consulta = string.Format(@"
                                                UPDATE {0}si_fisico_det 
                                                SET cantidad = ?, precio = ?, importe = ? 
                                                WHERE almacen = ? AND fecha = ? AND insumo = ? AND partida = ?", (EmpresaEnum)vSesiones.sesionEmpresaActual != EmpresaEnum.Colombia ? "" : "DBA.");

                                            using (var cmd = new OdbcCommand(consulta))
                                            {
                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                parameters.Add("@cantidad", OdbcType.Char).Value = part.cantidad;
                                                parameters.Add("@precio", OdbcType.Char).Value = part.precio;
                                                parameters.Add("@importe", OdbcType.Char).Value = part.cantidad * part.precio;

                                                parameters.Add("@almacen", OdbcType.Numeric).Value = part.almacen;
                                                parameters.Add("@fecha", OdbcType.Date).Value = part.fecha;
                                                parameters.Add("@insumo", OdbcType.Numeric).Value = part.insumo;
                                                parameters.Add("@partida", OdbcType.Numeric).Value = part.partida;

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;
                                                cmd.ExecuteNonQuery();
                                            }
                                        }
                                    }

                                    trans.Commit();

                                    result.Add(SUCCESS, true);
                                }
                                catch (Exception e)
                                {
                                    trans.Rollback();

                                    result.Add(MESSAGE, e.Message);
                                    result.Add(SUCCESS, false);

                                    LogError(0, 0, "AlmacenController", "guardarInventarioFisico", e, AccionEnum.AGREGAR, 0, new { partidas = partidas });
                                }
                            }
                        }
                        #endregion
                        break;
                    }
            }

            return result;
        }

        public Dictionary<string, object> CargarDescripcionAlmacen(int almacen)
        {
            var result = new Dictionary<string, object>();

            try
            {
                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {
                    case EmpresaEnum.Peru:
                        {
                            using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                            {
                                var registroAlmacen = _starsoft.TABALM.ToList().FirstOrDefault(x => Int32.Parse(x.TAALMA) == almacen);

                                if (registroAlmacen != null)
                                {
                                    result.Add("descripcion", registroAlmacen.TADESCRI);
                                }
                                else
                                {
                                    result.Add("descripcion", "N/A");
                                }
                            }
                            break;
                        }
                    default:
                        {
                            List<si_almacenDTO> almacenes = _contextEnkontrol.Select<si_almacenDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                            {
                                consulta = @"SELECT * FROM si_almacen WHERE almacen = ?",
                                parametros = new List<OdbcParameterDTO> {
                                    new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = almacen }
                                }
                            });

                            if (almacenes.Count() > 0)
                            {
                                result.Add("descripcion", almacenes.FirstOrDefault().descripcion);
                            }
                            else
                            {
                                result.Add("descripcion", "N/A");
                            }
                            break;
                        }
                }

                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(SUCCESS, false);
                result.Add(MESSAGE, e.Message);
                LogError(0, 0, "AlmacenController", "cargarInventarioFisico", e, AccionEnum.CONSULTA, 0, new { almacen = almacen });
            }

            return result;
        }

        public Dictionary<string, object> CargarDescripcionCC(string cc)
        {
            var result = new Dictionary<string, object>();

            try
            {
                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {
                    case EmpresaEnum.Peru:
                        {
                            var registroCentroCosto = _context.tblP_CC.FirstOrDefault(x => x.cc == cc);

                            if (registroCentroCosto != null)
                            {
                                result.Add("descripcion", registroCentroCosto.descripcion);
                            }
                            else
                            {
                                result.Add("descripcion", "N/A");
                            }
                            break;
                        }
                    default:
                        {
                            List<CentroCostoDTO> centroCosto = _contextEnkontrol.Select<CentroCostoDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                            {
                                consulta = @"SELECT * FROM cc WHERE cc = ?",
                                parametros = new List<OdbcParameterDTO> {
                                    new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Char, valor = cc }
                                }
                            });

                            if (centroCosto.Count() > 0)
                            {
                                result.Add("descripcion", centroCosto.FirstOrDefault().descripcion);
                            }
                            else
                            {
                                result.Add("descripcion", "N/A");
                            }
                            break;
                        }
                }

                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(SUCCESS, false);
                result.Add(MESSAGE, e.Message);
                LogError(0, 0, "AlmacenController", "CargarDescripcionCC", e, AccionEnum.CONSULTA, 0, new { cc = cc });
            }

            return result;
        }

        public Tuple<string, List<ReporteInventarioFisicoDTO>> cargarExistenciasAlmacenReporte(int almacen, DateTime fecha, bool existentes)
        {
            List<ReporteInventarioFisicoDTO> datos = new List<ReporteInventarioFisicoDTO>();
            var almacenDesc = "";

            try
            {
                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {
                    case EmpresaEnum.Construplan:
                        {
                            #region CONSTRUPLAN
                            almacenDesc = (string)(_contextEnkontrol.Select<dynamic>(EnkontrolEnum.CplanProd, new OdbcConsultaDTO()
                            {
                                consulta = @"SELECT descripcion FROM si_almacen WHERE almacen = ?",
                                parametros = new List<OdbcParameterDTO> { new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = almacen } }
                            }))[0].descripcion;

                            List<dynamic> listaInsumos = _contextEnkontrol.Select<dynamic>(EnkontrolEnum.CplanProd, new OdbcConsultaDTO()
                            {
                                consulta = @"
                                    SELECT
	                                    det.insumo,
                                        ins.descripcion,
                                        ins.unidad,
                                        det.area_alm,
                                        det.lado_alm,
                                        det.estante_alm,
                                        det.nivel_alm,
                                        SUM(CASE WHEN det.tipo_mov < 50 THEN det.cantidad ELSE -det.cantidad END) AS existencia
                                    FROM si_movimientos mov
	                                    INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero
                                        INNER JOIN insumos ins ON det.insumo = ins.insumo
                                    WHERE mov.almacen = ? AND mov.fecha <= ?
                                    GROUP BY det.insumo, ins.descripcion, ins.unidad, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm",
                                parametros = new List<OdbcParameterDTO> {
                                    new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = almacen },
                                    new OdbcParameterDTO() { nombre = "fecha", tipo = OdbcType.Date, valor = fecha }
                                }
                            });

                            datos = listaInsumos.Where(x => (existentes ? Convert.ToDecimal(x.existencia) > 0 : true)).Select(x => new ReporteInventarioFisicoDTO
                            {
                                insumo = (Convert.ToInt32(x.insumo)).ToString(),
                                insumoDesc = (string)x.descripcion,
                                cantidad = (Convert.ToDecimal(x.existencia)).ToString(),
                                unidad = (string)x.unidad,
                                ubicacion = (string)x.area_alm + " " + (string)x.lado_alm + " " + (string)x.estante_alm + " " + (string)x.nivel_alm
                            }).OrderBy(x => x.ubicacion).ToList();
                            #endregion
                            break;
                        }
                    case EmpresaEnum.Arrendadora:
                        {
                            #region ARRENDADORA
                            almacenDesc = (string)(_contextEnkontrol.Select<dynamic>(EnkontrolEnum.ArrenProd, new OdbcConsultaDTO()
                            {
                                consulta = @"SELECT descripcion FROM si_almacen WHERE almacen = ?",
                                parametros = new List<OdbcParameterDTO> { new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = almacen } }
                            }))[0].descripcion;

                            List<dynamic> listaInsumos = _contextEnkontrol.Select<dynamic>(EnkontrolEnum.ArrenProd, new OdbcConsultaDTO()
                            {
                                consulta = @"
                                    SELECT
	                                    det.insumo,
                                        ins.descripcion,
                                        ins.unidad,
                                        det.area_alm,
                                        det.lado_alm,
                                        det.estante_alm,
                                        det.nivel_alm,
                                        SUM(CASE WHEN det.tipo_mov < 50 THEN det.cantidad ELSE -det.cantidad END) AS existencia
                                    FROM si_movimientos mov
	                                    INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero
                                        INNER JOIN insumos ins ON det.insumo = ins.insumo
                                    WHERE mov.almacen = ? AND mov.fecha <= ?
                                    GROUP BY det.insumo, ins.descripcion, ins.unidad, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm",
                                parametros = new List<OdbcParameterDTO> {
                                    new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = almacen },
                                    new OdbcParameterDTO() { nombre = "fecha", tipo = OdbcType.Date, valor = fecha }
                                }
                            });

                            datos = listaInsumos.Where(x => (existentes ? Convert.ToDecimal(x.existencia) > 0 : true)).Select(x => new ReporteInventarioFisicoDTO
                            {
                                insumo = (Convert.ToInt32(x.insumo)).ToString(),
                                insumoDesc = (string)x.descripcion,
                                cantidad = (Convert.ToDecimal(x.existencia)).ToString(),
                                unidad = (string)x.unidad,
                                ubicacion = (string)x.area_alm + " " + (string)x.lado_alm + " " + (string)x.estante_alm + " " + (string)x.nivel_alm
                            }).OrderBy(x => x.ubicacion).ToList();
                            #endregion
                            break;
                        }
                    case EmpresaEnum.Colombia:
                        {
                            #region COLOMBIA
                            var listaRegistrosGeneral = _context.tblAlm_Movimientos.Where(x => x.estatusHabilitado && x.almacen == almacen && DbFunctions.TruncateTime(x.fecha) <= DbFunctions.TruncateTime(fecha)).ToList();
                            var listaMovimientosAlmacen = listaRegistrosGeneral.Join(
                                _context.tblAlm_MovimientosDet.Where(x => x.estatusHabilitado),
                                m => new { m.almacen, m.tipo_mov, m.numero },
                                d => new { d.almacen, d.tipo_mov, d.numero },
                                (m, d) => new { m, d }
                            ).ToList();

                            var listaInsumosEK = _contextEnkontrol.Select<dynamic>(EnkontrolEnum.ColombiaProductivo, new OdbcConsultaDTO() { consulta = @"SELECT * FROM DBA.insumos" });

                            var data = listaMovimientosAlmacen.GroupBy(x => new { x.d.insumo, x.d.area_alm, x.d.lado_alm, x.d.estante_alm, x.d.nivel_alm }).Select(x => new
                            {
                                insumo = x.Key.insumo,
                                insumoDesc = listaInsumosEK.Where(y => (int)y.insumo == x.Key.insumo).Select(z => (string)z.descripcion).FirstOrDefault(),
                                cantidad = x.Sum(y => (y.d.tipo_mov < 50) ? y.d.cantidad : (y.d.cantidad * -1)),
                                unidad = listaInsumosEK.Where(y => (int)y.insumo == x.Key.insumo).Select(z => (string)z.unidad).FirstOrDefault(),
                                ubicacion = string.Format(@"{0} {1} {2} {3}", x.Key.area_alm, x.Key.lado_alm, x.Key.estante_alm, x.Key.nivel_alm)
                            }).OrderBy(x => x.ubicacion).ToList();

                            datos = data.Where(x => (existentes ? Convert.ToDecimal(x.cantidad) > 0 : true)).Select(x => new ReporteInventarioFisicoDTO
                            {
                                insumo = x.insumo.ToString(),
                                insumoDesc = x.insumoDesc,
                                cantidad = x.cantidad.ToString(),
                                unidad = x.unidad,
                                ubicacion = x.ubicacion
                            }).OrderBy(x => x.ubicacion).ToList();
                            #endregion
                            break;
                        }
                    case EmpresaEnum.Peru:
                        {
                            #region PERÚ
                            var listaExistencias = _context.tblAlm_Movimientos.Where(x => x.estatusHabilitado && x.almacen == almacen).ToList().Where(x => x.fecha.Date <= fecha.Date).Join(
                                _context.tblAlm_MovimientosDet.Where(x => x.estatusHabilitado),
                                g => new { g.almacen, g.tipo_mov, g.numero },
                                d => new { d.almacen, d.tipo_mov, d.numero },
                                (g, d) => new { g, d }
                            ).ToList().GroupBy(x => new { x.d.insumo, x.d.area_alm, x.d.lado_alm, x.d.estante_alm, x.d.nivel_alm }).Select(x => new
                            {
                                insumo = x.Key.insumo,
                                area_alm = x.Key.area_alm,
                                lado_alm = x.Key.lado_alm,
                                estante_alm = x.Key.estante_alm,
                                nivel_alm = x.Key.nivel_alm,
                                existencia = x.Sum(y => y.d.tipo_mov < 50 ? y.d.cantidad : (y.d.cantidad * -1))
                            }).ToList();

                            using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                            {
                                almacenDesc = _starsoft.TABALM.ToList().Where(x => Int32.Parse(x.TAALMA) == almacen).Select(x => x.TADESCRI).FirstOrDefault();

                                var listaCatalogoInsumos = _starsoft.MAEART.ToList();

                                datos = listaExistencias.Where(x => (existentes ? Convert.ToDecimal(x.existencia) > 0 : true)).Select(x => new ReporteInventarioFisicoDTO
                                {
                                    insumo = x.insumo.ToString(),
                                    insumoDesc = listaCatalogoInsumos.Where(y => Int32.Parse(y.ACODIGO) == x.insumo).Select(z => z.ADESCRI).FirstOrDefault(),
                                    cantidad = x.existencia.ToString(),
                                    unidad = listaCatalogoInsumos.Where(y => Int32.Parse(y.ACODIGO) == x.insumo).Select(z => z.AUNIDAD).FirstOrDefault(),
                                    ubicacion = x.area_alm + " " + x.lado_alm + " " + x.estante_alm + " " + x.nivel_alm
                                }).OrderBy(x => x.ubicacion).ToList();
                            }
                            #endregion
                            break;
                        }
                }
            }
            catch (Exception e)
            {
                LogError(0, 0, "AlmacenController", "cargarExistenciasAlmacenReporte", e, AccionEnum.CONSULTA, 0, new { almacen = almacen, fecha = fecha });
            }

            return new Tuple<string, List<ReporteInventarioFisicoDTO>>(almacenDesc, datos);
        }

        public Dictionary<string, object> eliminarPartidaInventarioFisico(FisicoDetalleDTO partida)
        {
            var result = new Dictionary<string, object>();

            switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
            {
                case EmpresaEnum.Peru:
                    {
                        #region PERÚ
                        using (var dbContextTransaction = _context.Database.BeginTransaction())
                        {
                            try
                            {
                                var registroDetalle = _context.tblAlm_FisicoDet.Where(x => x.registroActivo && x.almacen == partida.almacen && x.insumo == partida.insumo && x.partida == partida.partida).ToList().FirstOrDefault(x =>
                                    x.fecha.Date == Convert.ToDateTime(partida.fechaString).Date
                                );

                                if (registroDetalle != null)
                                {
                                    registroDetalle.registroActivo = false;
                                    _context.SaveChanges();
                                }

                                dbContextTransaction.Commit();
                                result.Add(SUCCESS, true);
                            }
                            catch (Exception e)
                            {
                                dbContextTransaction.Rollback();

                                result.Add(SUCCESS, false);
                                result.Add(MESSAGE, e.Message);

                                LogError(0, 0, "AlmacenController", "eliminarPartidaInventarioFisico", e, AccionEnum.ELIMINAR, 0, new { partida = partida });
                            }
                        }
                        #endregion
                        break;
                    }
                default:
                    {
                        #region DEMÁS EMPRESAS
                        using (var con = checkConexionProductivo())
                        {
                            using (var trans = con.BeginTransaction())
                            {
                                try
                                {
                                    var count = 0;

                                    using (var cmd = new OdbcCommand(string.Format(@"DELETE FROM {0}si_fisico_det WHERE almacen = ? AND fecha = ? AND insumo = ? AND partida = ?", (EmpresaEnum)vSesiones.sesionEmpresaActual != EmpresaEnum.Colombia ? "" : "DBA.")))
                                    {
                                        OdbcParameterCollection parameters = cmd.Parameters;

                                        parameters.Add("@almacen", OdbcType.Numeric).Value = partida.almacen;
                                        parameters.Add("@fecha", OdbcType.Date).Value = partida.fechaString;
                                        parameters.Add("@insumo", OdbcType.Numeric).Value = partida.insumo;
                                        parameters.Add("@partida", OdbcType.Numeric).Value = partida.partida;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;

                                        count += cmd.ExecuteNonQuery();
                                    }

                                    trans.Commit();

                                    result.Add(SUCCESS, true);
                                }
                                catch (Exception e)
                                {
                                    trans.Rollback();

                                    result.Add(MESSAGE, e.Message);
                                    result.Add(SUCCESS, false);

                                    LogError(0, 0, "AlmacenController", "eliminarPartidaInventarioFisico", e, AccionEnum.ELIMINAR, 0, new { partida = partida });
                                }
                            }
                        }
                        #endregion
                        break;
                    }
            }

            return result;
        }

        public Dictionary<string, object> congelarAlmacenInventarioFisico(int almacen, DateTime fecha)
        {
            var result = new Dictionary<string, object>();

            switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
            {
                case EmpresaEnum.Peru:
                    {
                        #region PERÚ
                        using (var dbContextTransaction = _context.Database.BeginTransaction())
                        {
                            try
                            {
                                #region Tabla General
                                _context.tblAlm_Fisico.Add(new tblAlm_Fisico
                                {
                                    centro_costo = "020102",
                                    almacen = almacen,
                                    fecha = fecha,
                                    total = 0,
                                    estatus = "C",
                                    total_entrada = 0,
                                    total_salida = 0,
                                    empleado = vSesiones.sesionUsuarioDTO.id,
                                    origen = 1,
                                    registroActivo = true
                                });
                                _context.SaveChanges();
                                #endregion

                                #region Tabla Detalle
                                var listaInsumos = _context.tblAlm_Movimientos.Where(x => x.estatusHabilitado && x.almacen == almacen).ToList().Where(x => x.fecha.Date <= fecha.Date).Join(
                                    _context.tblAlm_MovimientosDet.Where(x => x.estatusHabilitado),
                                    g => new { g.almacen, g.tipo_mov, g.numero },
                                    d => new { d.almacen, d.tipo_mov, d.numero },
                                    (g, d) => new { g, d }
                                ).ToList().GroupBy(x => new { x.d.insumo, x.d.area_alm, x.d.lado_alm, x.d.estante_alm, x.d.nivel_alm }).Select(x => new
                                {
                                    insumo = x.Key.insumo,
                                    area_alm = x.Key.area_alm,
                                    lado_alm = x.Key.lado_alm,
                                    estante_alm = x.Key.estante_alm,
                                    nivel_alm = x.Key.nivel_alm,
                                    existencia = x.Sum(y => y.d.tipo_mov < 50 ? y.d.cantidad : (y.d.cantidad * -1))
                                }).Where(x => x.existencia > 0).ToList();

                                var partida = 1;

                                foreach (var insumo in listaInsumos)
                                {
                                    _context.tblAlm_FisicoDet.Add(new tblAlm_FisicoDet
                                    {
                                        centro_costo = "020102",
                                        almacen = almacen,
                                        fecha = fecha,
                                        insumo = insumo.insumo,
                                        cantidad = 0,
                                        precio = 0,
                                        importe = 0,
                                        partida = partida++,
                                        area_alm = insumo.area_alm ?? "",
                                        lado_alm = insumo.lado_alm ?? "",
                                        estante_alm = insumo.estante_alm ?? "",
                                        nivel_alm = insumo.nivel_alm ?? "",
                                        origen = 0,
                                        registroActivo = true
                                    });
                                    _context.SaveChanges();
                                }
                                #endregion

                                dbContextTransaction.Commit();
                                result.Add(SUCCESS, true);
                            }
                            catch (Exception e)
                            {
                                dbContextTransaction.Rollback();
                                result.Add(SUCCESS, false);
                                result.Add(MESSAGE, e.Message);
                                LogError(0, 0, "AlmacenController", "congelarAlmacenInventarioFisico", e, AccionEnum.ACTUALIZAR, 0, new { almacen = almacen, fecha = fecha });
                            }
                        }
                        #endregion
                        break;
                    }
                default:
                    {
                        #region DEMÁS EMPRESAS
                        using (var con = checkConexionProductivo())
                        {
                            using (var trans = con.BeginTransaction())
                            {
                                try
                                {
                                    var empleado = 0;
                                    var usuarioSigoplan = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                                    if (usuarioSigoplan != null)
                                    {
                                        empleado = usuarioSigoplan.empleado;
                                    }

                                    switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                                    {
                                        case EmpresaEnum.Construplan:
                                            {
                                                #region CONSTRUPLAN
                                                #region Tabla General
                                                var consultaGeneral = @"
                                INSERT INTO si_fisico 
                                    (centro_costo, almacen, fecha, total, estatus, total_entrada, total_salida, empleado, origen) 
                                VALUES 
                                    (?, ?, ?, ?, ?, ?, ?, ?, ?)";

                                                using (var cmd = new OdbcCommand(consultaGeneral))
                                                {
                                                    OdbcParameterCollection parameters = cmd.Parameters;

                                                    parameters.Add("@centro_costo", OdbcType.Char).Value = "998"; //Siempre se coloca el centro de costo "998" (Construplan) o "001" (Arrendadora) cuando se guarda desde SIGOPLAN.
                                                    parameters.Add("@almacen", OdbcType.Numeric).Value = almacen;
                                                    parameters.Add("@fecha", OdbcType.Date).Value = fecha;
                                                    parameters.Add("@total", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@estatus", OdbcType.Char).Value = "C";
                                                    parameters.Add("@total_entrada", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@total_salida", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@empleado", OdbcType.Numeric).Value = empleado;
                                                    parameters.Add("@origen", OdbcType.Numeric).Value = 1;

                                                    cmd.Connection = trans.Connection;
                                                    cmd.Transaction = trans;
                                                    cmd.ExecuteNonQuery();
                                                }
                                                #endregion

                                                List<dynamic> listaInsumos = (_contextEnkontrol.Select<dynamic>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                                {
                                                    consulta = @"
                                            SELECT
	                                            det.insumo,
                                                ins.descripcion,
                                                ins.unidad,
                                                det.area_alm,
                                                det.lado_alm,
                                                det.estante_alm,
                                                det.nivel_alm,
                                                SUM(CASE WHEN det.tipo_mov < 50 THEN det.cantidad ELSE -det.cantidad END) AS existencia
                                            FROM si_movimientos mov
	                                            INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero
                                                INNER JOIN insumos ins ON det.insumo = ins.insumo
                                            WHERE mov.almacen = ? AND mov.fecha <= ?
                                            GROUP BY det.insumo, ins.descripcion, ins.unidad, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm
                                            ORDER BY det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm",
                                                    parametros = new List<OdbcParameterDTO> {
                                            new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = almacen },
                                            new OdbcParameterDTO() { nombre = "fecha", tipo = OdbcType.Date, valor = fecha }
                                        }
                                                })).Where(x => Convert.ToDecimal(x.existencia) > 0).ToList();

                                                #region Tabla Detalle
                                                var partida = 1;

                                                foreach (var insumo in listaInsumos)
                                                {
                                                    var consultaDetalle = @"
                                            INSERT INTO si_fisico_det 
                                                (centro_costo, almacen, fecha, insumo, cantidad, precio, importe, partida, area_alm, lado_alm, estante_alm, nivel_alm, origen) 
                                            VALUES 
                                                (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

                                                    using (var cmd = new OdbcCommand(consultaDetalle))
                                                    {
                                                        OdbcParameterCollection parameters = cmd.Parameters;

                                                        parameters.Add("@centro_costo", OdbcType.Char).Value = "998"; //Siempre se coloca el centro de costo "998" (Construplan) o "001" (Arrendadora) cuando se guarda desde SIGOPLAN.
                                                        parameters.Add("@almacen", OdbcType.Numeric).Value = almacen;
                                                        parameters.Add("@fecha", OdbcType.Date).Value = fecha;
                                                        parameters.Add("@insumo", OdbcType.Numeric).Value = insumo.insumo;
                                                        parameters.Add("@cantidad", OdbcType.Numeric).Value = 0; //insumo.existencia;
                                                        parameters.Add("@precio", OdbcType.Numeric).Value = 0;
                                                        parameters.Add("@importe", OdbcType.Numeric).Value = 0;
                                                        parameters.Add("@partida", OdbcType.Numeric).Value = partida++;
                                                        parameters.Add("@area_alm", OdbcType.Char).Value = insumo.area_alm ?? "";
                                                        parameters.Add("@lado_alm", OdbcType.Char).Value = insumo.lado_alm ?? "";
                                                        parameters.Add("@estante_alm", OdbcType.Char).Value = insumo.estante_alm ?? "";
                                                        parameters.Add("@nivel_alm", OdbcType.Char).Value = insumo.nivel_alm ?? "";
                                                        parameters.Add("@origen", OdbcType.Numeric).Value = 0;

                                                        cmd.Connection = trans.Connection;
                                                        cmd.Transaction = trans;
                                                        cmd.ExecuteNonQuery();
                                                    }
                                                }
                                                #endregion
                                                #endregion
                                                break;
                                            }
                                        case EmpresaEnum.Arrendadora:
                                            {
                                                #region ARRENDADORA
                                                #region Tabla General
                                                var consultaGeneral = @"
                                INSERT INTO si_fisico 
                                    (centro_costo, almacen, fecha, total, estatus, total_entrada, total_salida, empleado, origen) 
                                VALUES 
                                    (?, ?, ?, ?, ?, ?, ?, ?, ?)";

                                                using (var cmd = new OdbcCommand(consultaGeneral))
                                                {
                                                    OdbcParameterCollection parameters = cmd.Parameters;

                                                    parameters.Add("@centro_costo", OdbcType.Char).Value = "001"; //Siempre se coloca el centro de costo "998" (Construplan) o "001" (Arrendadora) cuando se guarda desde SIGOPLAN.
                                                    parameters.Add("@almacen", OdbcType.Numeric).Value = almacen;
                                                    parameters.Add("@fecha", OdbcType.Date).Value = fecha;
                                                    parameters.Add("@total", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@estatus", OdbcType.Char).Value = "C";
                                                    parameters.Add("@total_entrada", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@total_salida", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@empleado", OdbcType.Numeric).Value = empleado;
                                                    parameters.Add("@origen", OdbcType.Numeric).Value = 1;

                                                    cmd.Connection = trans.Connection;
                                                    cmd.Transaction = trans;
                                                    cmd.ExecuteNonQuery();
                                                }
                                                #endregion

                                                List<dynamic> listaInsumos = (_contextEnkontrol.Select<dynamic>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                                {
                                                    consulta = @"
                                SELECT
	                                det.insumo,
                                    ins.descripcion,
                                    ins.unidad,
                                    det.area_alm,
                                    det.lado_alm,
                                    det.estante_alm,
                                    det.nivel_alm,
                                    SUM(CASE WHEN det.tipo_mov < 50 THEN det.cantidad ELSE -det.cantidad END) AS existencia
                                FROM si_movimientos mov
	                                INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero
                                    INNER JOIN insumos ins ON det.insumo = ins.insumo
                                WHERE mov.almacen = ? AND mov.fecha <= ?
                                GROUP BY det.insumo, ins.descripcion, ins.unidad, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm
                                ORDER BY det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm",
                                                    parametros = new List<OdbcParameterDTO> {
                                new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = almacen },
                                new OdbcParameterDTO() { nombre = "fecha", tipo = OdbcType.Date, valor = fecha }
                            }
                                                })).Where(x => Convert.ToDecimal(x.existencia) > 0).ToList();

                                                #region Tabla Detalle
                                                var partida = 1;

                                                foreach (var insumo in listaInsumos)
                                                {
                                                    var consultaDetalle = @"
                                INSERT INTO si_fisico_det 
                                    (centro_costo, almacen, fecha, insumo, cantidad, precio, importe, partida, area_alm, lado_alm, estante_alm, nivel_alm, origen) 
                                VALUES 
                                    (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

                                                    using (var cmd = new OdbcCommand(consultaDetalle))
                                                    {
                                                        OdbcParameterCollection parameters = cmd.Parameters;

                                                        parameters.Add("@centro_costo", OdbcType.Char).Value = "001"; //Siempre se coloca el centro de costo "998" (Construplan) o "001" (Arrendadora) cuando se guarda desde SIGOPLAN.
                                                        parameters.Add("@almacen", OdbcType.Numeric).Value = almacen;
                                                        parameters.Add("@fecha", OdbcType.Date).Value = fecha;
                                                        parameters.Add("@insumo", OdbcType.Numeric).Value = insumo.insumo;
                                                        parameters.Add("@cantidad", OdbcType.Numeric).Value = 0; //insumo.existencia;
                                                        parameters.Add("@precio", OdbcType.Numeric).Value = 0;
                                                        parameters.Add("@importe", OdbcType.Numeric).Value = 0;
                                                        parameters.Add("@partida", OdbcType.Numeric).Value = partida++;
                                                        parameters.Add("@area_alm", OdbcType.Char).Value = insumo.area_alm ?? "";
                                                        parameters.Add("@lado_alm", OdbcType.Char).Value = insumo.lado_alm ?? "";
                                                        parameters.Add("@estante_alm", OdbcType.Char).Value = insumo.estante_alm ?? "";
                                                        parameters.Add("@nivel_alm", OdbcType.Char).Value = insumo.nivel_alm ?? "";
                                                        parameters.Add("@origen", OdbcType.Numeric).Value = 0;

                                                        cmd.Connection = trans.Connection;
                                                        cmd.Transaction = trans;
                                                        cmd.ExecuteNonQuery();
                                                    }
                                                }
                                                #endregion
                                                #endregion
                                                break;
                                            }
                                        case EmpresaEnum.Colombia:
                                            {
                                                #region COLOMBIA
                                                #region Tabla General
                                                var consultaGeneral = @"
                                INSERT INTO DBA.si_fisico 
                                    (centro_costo, almacen, fecha, total, estatus, total_entrada, total_salida, empleado) 
                                VALUES 
                                    (?, ?, ?, ?, ?, ?, ?, ?)";

                                                using (var cmd = new OdbcCommand(consultaGeneral))
                                                {
                                                    OdbcParameterCollection parameters = cmd.Parameters;

                                                    parameters.Add("@centro_costo", OdbcType.Char).Value = "001";
                                                    parameters.Add("@almacen", OdbcType.Numeric).Value = almacen;
                                                    parameters.Add("@fecha", OdbcType.Date).Value = fecha;
                                                    parameters.Add("@total", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@estatus", OdbcType.Char).Value = "C";
                                                    parameters.Add("@total_entrada", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@total_salida", OdbcType.Numeric).Value = 0;
                                                    parameters.Add("@empleado", OdbcType.Numeric).Value = empleado;

                                                    cmd.Connection = trans.Connection;
                                                    cmd.Transaction = trans;
                                                    cmd.ExecuteNonQuery();
                                                }
                                                #endregion

                                                var listaRegistrosGeneral = _context.tblAlm_Movimientos.Where(x => x.estatusHabilitado && x.almacen == almacen && DbFunctions.TruncateTime(x.fecha) <= DbFunctions.TruncateTime(fecha)).ToList();
                                                var listaMovimientosAlmacen = listaRegistrosGeneral.Join(
                                                    _context.tblAlm_MovimientosDet.Where(x => x.estatusHabilitado),
                                                    m => new { m.almacen, m.tipo_mov, m.numero },
                                                    d => new { d.almacen, d.tipo_mov, d.numero },
                                                    (m, d) => new { m, d }
                                                ).ToList();

                                                var listaInsumosEK = _contextEnkontrol.Select<dynamic>(EnkontrolEnum.ColombiaProductivo, new OdbcConsultaDTO() { consulta = @"SELECT * FROM DBA.insumos" });

                                                var datos = listaMovimientosAlmacen.GroupBy(x => new { x.d.insumo, x.d.area_alm, x.d.lado_alm, x.d.estante_alm, x.d.nivel_alm }).Select(x => new
                                                {
                                                    insumo = x.Key.insumo,
                                                    insumoDesc = listaInsumosEK.Where(y => (int)y.insumo == x.Key.insumo).Select(z => (string)z.descripcion).FirstOrDefault(),
                                                    cantidad = x.Sum(y => (y.d.tipo_mov < 50) ? y.d.cantidad : (y.d.cantidad * -1)),
                                                    unidad = listaInsumosEK.Where(y => (int)y.insumo == x.Key.insumo).Select(z => (string)z.unidad).FirstOrDefault(),
                                                    ubicacion = string.Format(@"{0} {1} {2} {3}", x.Key.area_alm, x.Key.lado_alm, x.Key.estante_alm, x.Key.nivel_alm)
                                                }).OrderBy(x => x.ubicacion).ToList();

                                                #region Tabla Detalle
                                                var partida = 1;

                                                foreach (var insumo in datos)
                                                {
                                                    var consultaDetalle = @"
                                INSERT INTO DBA.si_fisico_det 
                                    (centro_costo, almacen, fecha, insumo, cantidad, precio, importe, partida) 
                                VALUES 
                                    (?, ?, ?, ?, ?, ?, ?, ?)";

                                                    using (var cmd = new OdbcCommand(consultaDetalle))
                                                    {
                                                        OdbcParameterCollection parameters = cmd.Parameters;

                                                        parameters.Add("@centro_costo", OdbcType.Char).Value = "001"; //Siempre se coloca el centro de costo "998" (Construplan) o "001" (Arrendadora) cuando se guarda desde SIGOPLAN.
                                                        parameters.Add("@almacen", OdbcType.Numeric).Value = almacen;
                                                        parameters.Add("@fecha", OdbcType.Date).Value = fecha;
                                                        parameters.Add("@insumo", OdbcType.Numeric).Value = insumo.insumo;
                                                        parameters.Add("@cantidad", OdbcType.Numeric).Value = 0; //insumo.existencia;
                                                        parameters.Add("@precio", OdbcType.Numeric).Value = 0;
                                                        parameters.Add("@importe", OdbcType.Numeric).Value = 0;
                                                        parameters.Add("@partida", OdbcType.Numeric).Value = partida++;

                                                        cmd.Connection = trans.Connection;
                                                        cmd.Transaction = trans;
                                                        cmd.ExecuteNonQuery();
                                                    }
                                                }
                                                #endregion
                                                #endregion
                                                break;
                                            }
                                    }

                                    trans.Commit();

                                    result.Add(SUCCESS, true);
                                }
                                catch (Exception e)
                                {
                                    trans.Rollback();

                                    result.Add(MESSAGE, e.Message);
                                    result.Add(SUCCESS, false);

                                    LogError(0, 0, "AlmacenController", "congelarAlmacenInventarioFisico", e, AccionEnum.AGREGAR, 0, new { almacen = almacen, fecha = fecha });
                                }
                            }
                        }
                        #endregion
                        break;
                    }
            }

            return result;
        }

        public Dictionary<string, object> cerrarInventarioFisico(int almacen, DateTime fecha)
        {
            var result = new Dictionary<string, object>();

            switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
            {
                case EmpresaEnum.Peru:
                    {
                        #region PERÚ
                        using (var dbContextTransaction = _context.Database.BeginTransaction())
                        {
                            try
                            {
                                var registroFisico = _context.tblAlm_Fisico.Where(x => x.registroActivo && x.almacen == almacen).ToList().Where(x => x.fecha.Date == fecha.Date).FirstOrDefault();

                                if (registroFisico != null)
                                {
                                    var registroExistente = _context.tblAlm_CierreInventarioFisico.FirstOrDefault(x =>
                                        x.estatus && x.almacen == almacen && DbFunctions.TruncateTime(x.fecha) == DbFunctions.TruncateTime(fecha)
                                    );

                                    if (registroExistente == null)
                                    {
                                        _context.tblAlm_CierreInventarioFisico.Add(new tblAlm_CierreInventarioFisico
                                        {
                                            almacen = almacen,
                                            fecha = fecha,
                                            usuarioCaptura = vSesiones.sesionUsuarioDTO.id,
                                            fechaCaptura = DateTime.Now,
                                            estatus = true
                                        });
                                        _context.SaveChanges();
                                    }
                                    else
                                    {
                                        throw new Exception("Ya está cerrado ese inventario.");
                                    }
                                }
                                else
                                {
                                    throw new Exception("No se encuentra la información del inventario físico.");
                                }

                                dbContextTransaction.Commit();
                                result.Add(SUCCESS, true);
                            }
                            catch (Exception e)
                            {
                                dbContextTransaction.Rollback();
                                result.Add(SUCCESS, false);
                                result.Add(MESSAGE, e.Message);
                                LogError(0, 0, "AlmacenController", "cerrarInventarioFisico", e, AccionEnum.AGREGAR, 0, new { almacen = almacen, fecha = fecha });
                            }
                        }
                        #endregion
                        break;
                    }
                default:
                    {
                        #region DEMÁS EMPRESAS
                        using (var dbContextTransaction = _context.Database.BeginTransaction())
                        {
                            try
                            {
                                List<dynamic> inventarioFisico = _contextEnkontrol.Select<dynamic>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                {
                                    consulta = @"SELECT * FROM si_fisico WHERE almacen = ? AND fecha = ?",
                                    parametros = new List<OdbcParameterDTO> {
                                        new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = almacen },
                                        new OdbcParameterDTO() { nombre = "fecha", tipo = OdbcType.Date, valor = fecha }
                                    }
                                });

                                if (inventarioFisico.Count() > 0)
                                {
                                    var registroExistente = _context.tblAlm_CierreInventarioFisico.FirstOrDefault(x =>
                                        x.estatus && x.almacen == almacen && DbFunctions.TruncateTime(x.fecha) == DbFunctions.TruncateTime(fecha)
                                    );

                                    if (registroExistente == null)
                                    {
                                        _context.tblAlm_CierreInventarioFisico.Add(new tblAlm_CierreInventarioFisico
                                        {
                                            almacen = almacen,
                                            fecha = fecha,
                                            usuarioCaptura = vSesiones.sesionUsuarioDTO.id,
                                            fechaCaptura = DateTime.Now,
                                            estatus = true
                                        });
                                        _context.SaveChanges();
                                    }
                                    else
                                    {
                                        throw new Exception("Ya está cerrado ese inventario.");
                                    }
                                }
                                else
                                {
                                    throw new Exception("No se encuentra la información del inventario físico.");
                                }

                                dbContextTransaction.Commit();
                                result.Add(SUCCESS, true);
                            }
                            catch (Exception e)
                            {
                                dbContextTransaction.Rollback();
                                result.Add(SUCCESS, false);
                                result.Add(MESSAGE, e.Message);
                                LogError(0, 0, "AlmacenController", "cerrarInventarioFisico", e, AccionEnum.AGREGAR, 0, new { almacen = almacen, fecha = fecha });
                            }
                        }
                        #endregion
                        break;
                    }
            }

            return result;
        }

        public tblAlm_PermisoCierreInventario getPermisoCierreInventario()
        {
            return _context.tblAlm_PermisoCierreInventario.FirstOrDefault(x => x.estatus && x.idUsuario == vSesiones.sesionUsuarioDTO.id);
        }
        #endregion

        public List<MovimientosDTO> ObtenerMovimientos()
        {
            var result = new List<MovimientosDTO>();
            try
            {
                result = _contextEnkontrol.Select<MovimientosDTO>(vSesiones.sesionEmpresaActual == 1 ? EnkontrolEnum.CplanProd : EnkontrolEnum.ArrenProd, new OdbcConsultaDTO()
                {
                    consulta = @"SELECT almacen FROM si_movimientos group by almacen",
                });


            }
            catch (Exception)
            {
                throw;
            }
            return result;
        }

        public bool EliminarAlmacen(int almacen)
        {
            bool rotornar = false;

            try
            {
                //ToDo
                //Validar que no exista el # de almacen

                var deleteAlmacen =
                    @"DELETE FROM si_almacen WHERE almacen = ?";

                using (var cmd = new OdbcCommand(deleteAlmacen))
                {
                    OdbcParameterCollection parameters = cmd.Parameters;
                    parameters.Clear();

                    parameters.Add("@almacen", OdbcType.Numeric).Value = almacen;

                    cmd.Connection = checkConexionProductivo();
                    cmd.ExecuteNonQuery();
                }

                rotornar = true;
            }
            catch (Exception ex)
            {
                rotornar = false;

                LogError(0, 0, "AlmacenController", "GetAlmacenes", ex, AccionEnum.CONSULTA, 0, 0);
            }

            return rotornar;
        }
        public Dictionary<string, object> ObtenerAlmacenEditaroAgregar(int almacen)
        {
            var result = new Dictionary<string, object>();
            try
            {
                //ToDo
                //Validar que no exista el # de almacen

                var r = _contextEnkontrol.Select<si_almacenDTO>(vSesiones.sesionEmpresaActual == 1 ? EnkontrolEnum.CplanProd : EnkontrolEnum.ArrenProd, new OdbcConsultaDTO()
                {
                    consulta = @"SELECT * FROM si_almacen WHERE almacen = ?",
                    parametros = new List<OdbcParameterDTO>() {
                        new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = almacen }
                            }
                });

                if (r.Count() != 0)
                {
                    result.Add(ITEMS, r);
                    result.Add(SUCCESS, true);
                }
                else
                {
                    result.Add(ITEMS, r);
                    result.Add(SUCCESS, false);
                }
            }
            catch (Exception ex)
            {
                result.Add(ITEMS, null);
                result.Add(SUCCESS, false);
                LogError(0, 0, "AlmacenController", "GetAlmacenes", ex, AccionEnum.CONSULTA, 0, 0);
            }

            return result;
        }


        public bool EditarAlmacen(si_almacenDTO datos)
        {
            bool rotornar = false;

            try
            {
                //ToDo
                //Validar que no exista el # de almacen

                var consultaUpdate = @"
                                                        UPDATE si_almacen 
                                                        SET 
                                                        descripcion = ?,
                                                        direccion = ?,
                                                        responsable = ?,
                                                        telefono = ?,
                                                        valida_almacen_cc = ?,
                                                        bit_pt = ?,
                                                        bit_mp = ?,
                                                        cc = ?,
                                                        almacen_virtual = ?
                                                        WHERE almacen = ?";

                using (var cmd = new OdbcCommand(consultaUpdate))
                {
                    OdbcParameterCollection parameters = cmd.Parameters;
                    parameters.Add("@descripcion", OdbcType.Char).Value = datos.descripcion ?? "";
                    parameters.Add("@direccion", OdbcType.Char).Value = datos.direccion;
                    parameters.Add("@responsable", OdbcType.Char).Value = datos.responsable;
                    parameters.Add("@telefono", OdbcType.Char).Value = datos.telefono ?? "";
                    parameters.Add("@valida_almacen_cc", OdbcType.Char).Value = datos.valida_almacen_cc ?? "";
                    parameters.Add("@bit_pt", OdbcType.Char).Value = datos.bit_pt ?? "";
                    parameters.Add("@bit_mp", OdbcType.Char).Value = datos.bit_mp ?? "";
                    parameters.Add("@cc", OdbcType.VarChar).Value = datos.cc ?? (object)DBNull.Value;
                    parameters.Add("@almacen_virtual", OdbcType.Numeric).Value = datos.almacen_virtual;

                    parameters.Add("@almacen", OdbcType.Numeric).Value = datos.almacen;


                    cmd.Connection = checkConexionProductivo();
                    cmd.ExecuteNonQuery();
                }

                rotornar = true;
            }
            catch (Exception ex)
            {
                rotornar = false;

                LogError(0, 0, "AlmacenController", "editAlamacenes", ex, AccionEnum.CONSULTA, 0, 0);
            }

            return rotornar;
        }

        private EnkontrolEnum getEnkontrolEnumADM()
        {
            var baseDatos = new EnkontrolEnum();

            if (productivo)
            {
                if (vSesiones.sesionEmpresaActual == 1)
                {
                    baseDatos = EnkontrolEnum.CplanProd;
                }
                else if (vSesiones.sesionEmpresaActual == 2)
                {
                    baseDatos = EnkontrolEnum.ArrenProd;
                }
                else if (vSesiones.sesionEmpresaActual == 3)
                {
                    baseDatos = EnkontrolEnum.ColombiaProductivo;
                }
                else
                {
                    throw new Exception("Empresa distinta a Construplan, Arrendadora y Colombia");
                }
            }
            else
            {
                if (vSesiones.sesionEmpresaActual == 1)
                {
                    baseDatos = EnkontrolEnum.PruebaCplanProd;
                }
                else if (vSesiones.sesionEmpresaActual == 2)
                {
                    baseDatos = EnkontrolEnum.PruebaArrenADM;
                }
                else
                {
                    throw new Exception("Empresa distinta a Construplan, Arrendadora y Colombia");
                }
            }

            return baseDatos;
        }


        public List<obtenerExistenciasDTO> obtenerExistenciasvsInventario(int almacen, DateTime fecha, bool existentes, bool ultimoPrecio, int insumoInicio, int insumoFin, bool soloConDiferencia)
        {
            List<obtenerExistenciasDTO> lstObtener = new List<obtenerExistenciasDTO>();

            try
            {
                var promedioEnkontrol = _contextEnkontrol.Select<promedioKardexEnkontrolDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                {
                    consulta = @"
                        SELECT
                            SUM((CASE WHEN existencia_ent_ini IS NOT NULL THEN existencia_ent_ini ELSE 0 END) + existencia_ent_ene + existencia_ent_feb + existencia_ent_mar + existencia_ent_abr + existencia_ent_may + existencia_ent_jun + existencia_ent_jul + existencia_ent_ago + existencia_ent_sep + existencia_ent_oct + existencia_ent_nov + existencia_ent_dic) AS entradas,
                            SUM((CASE WHEN existencia_sal_ini IS NOT NULL THEN existencia_sal_ini ELSE 0 END) + existencia_sal_ene + existencia_sal_feb + existencia_sal_mar + existencia_sal_abr + existencia_sal_may + existencia_sal_jun + existencia_sal_jul + existencia_sal_ago + existencia_sal_sep + existencia_sal_oct + existencia_sal_nov + existencia_sal_dic) AS salidas,
                            SUM((CASE WHEN importe_ent_ini IS NOT NULL THEN importe_ent_ini ELSE 0 END) + importe_ent_ene + importe_ent_feb + importe_ent_mar + importe_ent_abr + importe_ent_may + importe_ent_jun + importe_ent_jul + importe_ent_ago + importe_ent_sep + importe_ent_oct + importe_ent_nov + importe_ent_dic) AS montoEntradas,
                            SUM((CASE WHEN importe_sal_ini IS NOT NULL THEN importe_sal_ini ELSE 0 END) + importe_sal_ene + importe_sal_feb + importe_sal_mar + importe_sal_abr + importe_sal_may + importe_sal_jun + importe_sal_jul + importe_sal_ago + importe_sal_sep + importe_sal_oct + importe_sal_nov + importe_sal_dic) AS montoSalidas,
                            entradas - salidas AS existencias,
                            montoEntradas - montoSalidas AS montoResultado,
                            CASE WHEN existencias > 0 THEN (montoResultado / existencias) ELSE 0 END AS costoPromedio,
                            almacen,
                            insumo    
                        FROM si_acumula_almacen 
                        WHERE almacen = ? AND ano >= ?
                        GROUP BY almacen, insumo
                        ORDER BY almacen ASC",
                    parametros = new List<OdbcParameterDTO>() {
                        new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = almacen },
                        new OdbcParameterDTO() { nombre = "ano", tipo = OdbcType.Numeric, valor = DateTime.Now.Year }
                    }
                });

                var obtenerInventarioFisico = _contextEnkontrol.Select<obtenerExistenciasInventarioDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                {
                    consulta = @"
                        SELECT det.*, ins.descripcion AS insumoDesc
                        FROM si_fisico_det det
                            INNER JOIN insumos ins ON det.insumo = ins.insumo
                        WHERE det.almacen = ? AND det.fecha = ? AND ins.insumo >= ? AND ins.insumo <= ?
                        ORDER BY det.partida",
                    parametros = new List<OdbcParameterDTO> {
                        new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = almacen },
                        new OdbcParameterDTO() { nombre = "fecha", tipo = OdbcType.Date, valor = fecha },
                        new OdbcParameterDTO() { nombre = "insumo", tipo = OdbcType.Numeric, valor = insumoInicio },
                        new OdbcParameterDTO() { nombre = "insumo", tipo = OdbcType.Numeric, valor = insumoFin }
                    }
                });

                var obtenerExistenciaAlmacen = _contextEnkontrol.Select<obtenerExistenciasExistenciasDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                {
                    consulta = @"
                        SELECT det.insumo, ins.descripcion,ins.unidad,det.area_alm,det.lado_alm,det.estante_alm,det.nivel_alm,SUM(CASE WHEN det.tipo_mov < 50 THEN det.cantidad ELSE -det.cantidad END) AS existencia
                        FROM si_movimientos mov
                            INNER JOIN si_movimientos_det det ON mov.almacen = det.almacen AND mov.tipo_mov = det.tipo_mov AND mov.numero = det.numero
                            INNER JOIN insumos ins ON det.insumo = ins.insumo
                        WHERE mov.almacen = ? AND mov.fecha <= ?  AND ins.insumo >= ? AND ins.insumo <= ?
                        GROUP BY det.insumo, ins.descripcion, ins.unidad, det.area_alm, det.lado_alm, det.estante_alm, det.nivel_alm",
                    parametros = new List<OdbcParameterDTO> {
                        new OdbcParameterDTO() { nombre = "almacen", tipo = OdbcType.Numeric, valor = almacen },
                        new OdbcParameterDTO() { nombre = "fecha", tipo = OdbcType.Date, valor = fecha },
                        new OdbcParameterDTO() { nombre = "insumo", tipo = OdbcType.Numeric, valor = insumoInicio },
                        new OdbcParameterDTO() { nombre = "insumo", tipo = OdbcType.Numeric, valor = insumoFin }
                    }
                });

                var lstObtenerExistencias = obtenerInventarioFisico.ToList().Select(y => new obtenerExistenciasDTO
                {
                    insumo = y.insumo + " - " + y.insumoDesc,
                    ubicacion = y.area_alm + "-" + y.lado_alm + "-" + y.estante_alm + "-" + y.nivel_alm,
                    categoria = obtenerExistenciaAlmacen.Where(r => r.insumo == y.insumo).FirstOrDefault() != null ? obtenerExistenciaAlmacen.Where(r => r.insumo == y.insumo).FirstOrDefault().unidad : " ",
                    fisica = y.cantidad,
                    teorica = obtenerExistenciaAlmacen.Where(r => r.insumo == y.insumo && r.area_alm == y.area_alm && r.lado_alm == y.lado_alm && r.estante_alm == y.estante_alm && r.nivel_alm == y.nivel_alm).Select(z => z.existencia).FirstOrDefault(),
                    diferencia = y.cantidad - (obtenerExistenciaAlmacen.Where(r => r.insumo == y.insumo && r.area_alm == y.area_alm && r.lado_alm == y.lado_alm && r.estante_alm == y.estante_alm && r.nivel_alm == y.nivel_alm).Select(z => z.existencia).FirstOrDefault()),
                    promedioOPrecio = promedioEnkontrol.Where(x => x.insumo == y.insumo).FirstOrDefault() != null ? promedioEnkontrol.Where(x => x.insumo == y.insumo).FirstOrDefault().costoPromedio : 0,
                }).ToList();

                if (soloConDiferencia == true)
                {
                    lstObtener = lstObtenerExistencias.Where(r => r.diferencia != 0).ToList().Select(y => new obtenerExistenciasDTO
                    {
                        insumo = y.insumo,
                        ubicacion = y.ubicacion,
                        categoria = y.categoria,
                        fisica = Math.Round(y.fisica, 6),
                        teorica = Math.Round(y.teorica, 6),
                        diferencia = Math.Round(y.diferencia, 6),
                        promedioOPrecio = Math.Round(y.promedioOPrecio, 6),
                        cargos = extraerCargoAbono(y.diferencia, y.promedioOPrecio, true),
                        abono = extraerCargoAbono(y.diferencia, y.promedioOPrecio, false),
                    }).ToList();
                }
                else
                {
                    lstObtener = lstObtenerExistencias.ToList().Select(y => new obtenerExistenciasDTO
                    {
                        insumo = y.insumo,
                        ubicacion = y.ubicacion,
                        categoria = y.categoria,
                        fisica = Math.Round(y.fisica, 6),
                        teorica = Math.Round(y.teorica, 6),
                        diferencia = Math.Round(y.diferencia, 6),
                        promedioOPrecio = Math.Round(y.promedioOPrecio, 6),
                        cargos = extraerCargoAbono(y.diferencia, y.promedioOPrecio, true),
                        abono = extraerCargoAbono(y.diferencia, y.promedioOPrecio, false),
                    }).ToList();
                }
            }
            catch (Exception ex)
            {
                LogError(2, 0, "AlmacenController", "obtenerExistenciasvsInventario", ex, AccionEnum.CONSULTA, 0, new { almacen = almacen, fecha = fecha, existentes = existentes, ultimoPrecio = ultimoPrecio, insumoInicio = insumoInicio, insumoFin = insumoFin, soloConDiferencia = soloConDiferencia });
                return null;
            }

            return lstObtener;
        }

        public string extraerCargoAbono(decimal diferencia, decimal costoPromedio, bool CargoAbono)
        {
            string re = "";
            decimal total = 0;
            total = diferencia * costoPromedio;
            if (total >= 0 && CargoAbono == true)
            {
                re = Math.Round(total, 6).ToString("F6");
            }
            else if (total < 0 && CargoAbono == false)
            {
                re = Math.Round(total, 6).ToString("F6");
            }
            else
            {
                re = "0.000000";
            }
            return re;
        }

        public si_almacenDTO ObtenerAlmacenID(int almacen)
        {
            var registroAlmacen = new si_almacenDTO();

            try
            {
                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {
                    case EmpresaEnum.Peru:
                        {
                            using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                            {
                                var registroAlmacenStarsoft = _starsoft.TABALM.ToList().FirstOrDefault(x => Int32.Parse(x.TAALMA) == almacen);

                                if (registroAlmacenStarsoft != null)
                                {
                                    registroAlmacen.almacen = Int32.Parse(registroAlmacenStarsoft.TAALMA);
                                    registroAlmacen.descripcion = registroAlmacenStarsoft.TADESCRI;
                                    registroAlmacen.direccion = registroAlmacenStarsoft.TADIRECC ?? "";
                                    registroAlmacen.responsable = "";
                                    registroAlmacen.telefono = "";
                                    registroAlmacen.valida_almacen_cc = "N";
                                    registroAlmacen.bit_pt = "S";
                                    registroAlmacen.bit_mp = "S";
                                    registroAlmacen.cc = null;
                                    registroAlmacen.almacen_virtual = Int32.Parse(registroAlmacenStarsoft.TAALMA) >= 90 ? 1 : 0;
                                }
                            }
                            break;
                        }
                    case EmpresaEnum.Colombia:
                        {
                            registroAlmacen = _contextEnkontrol.Select<si_almacenDTO>(getEnkontrolEnumADM(), "SELECT * FROM DBA.si_almacen WHERE almacen = '" + almacen + "'").FirstOrDefault();
                            break;
                        }
                    default:
                        {
                            registroAlmacen = _contextEnkontrol.Select<si_almacenDTO>(getEnkontrolEnumADM(), "SELECT * FROM si_almacen WHERE almacen = '" + almacen + "'").FirstOrDefault();
                            break;
                        }
                }
            }
            catch (Exception ex)
            {
                LogError(0, 0, "AlmacenController", "GetAlmacenes", ex, AccionEnum.CONSULTA, 0, 0);
            }

            return registroAlmacen;
        }

        public Core.DTO.Almacen.InsumoDTO consultarPrimerInsumo(int insumo)
        {
            var registroInsumo = new Core.DTO.Almacen.InsumoDTO();

            try
            {
                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {
                    case EmpresaEnum.Peru:
                        {
                            using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                            {
                                var registroInsumoStarsoft = _starsoft.MAEART.ToList().FirstOrDefault(x => Int32.Parse(x.ACODIGO) == insumo);

                                if (registroInsumoStarsoft != null)
                                {
                                    registroInsumo.insumoNumero = registroInsumoStarsoft.ACODIGO;
                                    registroInsumo.insumoDescripcion = registroInsumoStarsoft.ADESCRI;
                                }
                            }
                            break;
                        }
                    default:
                        {
                            var query_si_almacen = new OdbcConsultaDTO();

                            if (insumo == 0)
                            {
                                query_si_almacen.consulta = "SELECT TOP 1 insumo as insumoNumero,descripcion as insumoDescripcion FROM insumos ORDER BY insumo ASC";
                            }
                            else
                            {
                                query_si_almacen.consulta = "SELECT TOP 1 insumo as insumoNumero,descripcion as insumoDescripcion FROM insumos WHERE insumo='" + insumo + "'";
                            }

                            registroInsumo = _contextEnkontrol.Select<Core.DTO.Almacen.InsumoDTO>(getEnkontrolEnumADM(), query_si_almacen).FirstOrDefault();
                            break;
                        }
                }
            }
            catch (Exception ex)
            {
                LogError(0, 0, "AlmacenController", "consultarPrimerInsumo", ex, AccionEnum.CONSULTA, 0, 0);
            }

            return registroInsumo;
        }
        public Core.DTO.Almacen.InsumoDTO consultarUltimoInsumo(int insumo)
        {
            var r = new Core.DTO.Almacen.InsumoDTO();
            try
            {
                var query_si_almacen = new OdbcConsultaDTO();
                if (insumo == 0)
                {
                    query_si_almacen.consulta = "SELECT TOP 1 insumo as insumoNumero,descripcion as insumoDescripcion FROM insumos ORDER BY insumo DESC";
                }
                else
                {
                    query_si_almacen.consulta = "SELECT TOP 1 insumo as insumoNumero,descripcion as insumoDescripcion FROM insumos WHERE insumo='" + insumo + "'";
                }
                r = _contextEnkontrol.Select<Core.DTO.Almacen.InsumoDTO>(getEnkontrolEnumADM(), query_si_almacen).FirstOrDefault();
            }
            catch (Exception ex)
            {
                LogError(0, 0, "AlmacenController", "GetAlmacenes", ex, AccionEnum.CONSULTA, 0, 0);
            }
            return r;
        }
        public List<Core.DTO.Almacen.InsumoDTO> Obtenerinsumos(int Almacen, int pagina, int registros)
        {
            var listaInsumos = new List<Core.DTO.Almacen.InsumoDTO>();

            try
            {
                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {
                    case EmpresaEnum.Peru:
                        {
                            using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                            {
                                listaInsumos = _starsoft.MAEART.ToList().Select(x => new Core.DTO.Almacen.InsumoDTO
                                {
                                    insumoNumero = x.ACODIGO,
                                    insumoDescripcion = x.ADESCRI
                                }).ToList();
                            }
                            break;
                        }
                    default:
                        {
                            listaInsumos = _contextEnkontrol.Select<Core.DTO.Almacen.InsumoDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                            {
                                consulta = @"
                                    SELECT
                                        d.*
                                    FROM (
	                                    SELECT
                                            ROW_NUMBER() OVER(ORDER BY ins.insumo ASC) AS ROWid,
			                                ins.insumo AS insumoNumero,
                                            ins.descripcion AS insumoDescripcion 
	                                    FROM insumos AS ins
                                        ORDER BY ins.insumo
                                    ) d
                                    WHERE ROWid <= (" + pagina + "*" + registros + ") AND ROWid >=(1+(" + pagina + "-1)*" + registros + ")"
                            }).ToList();
                            break;
                        }
                }
            }
            catch (Exception ex)
            {
                LogError(0, 0, "AlmacenController", "GetAlmacenes", ex, AccionEnum.CONSULTA, 0, 0);
            }

            return listaInsumos;
        }

        #region Actualización de Ubicaciones
        public Dictionary<string, object> ActualizacionUbicacionInsumo(int almacen, int insumo, string cc, tblAlm_Movimientos movimiento, List<tblAlm_MovimientosDet> detallesMovimientoSalida, List<tblAlm_MovimientosDet> detallesMovimientoEntrada)
        {
            var result = new Dictionary<string, object>();

            switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
            {
                case EmpresaEnum.Peru:
                    {
                        //Se coloca el centro de costo default.
                        cc = "020101";
                        movimiento.cc = "020101";
                        movimiento.cc_destino = "020101";

                        using (var dbStarsoft = new MainContextPeruStarSoft003BDCOMUN())
                        {
                            using (var dbStarsoftTransaction = dbStarsoft.Database.BeginTransaction())
                            {
                                using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                                {
                                    try
                                    {
                                        #region Verificar Ubicaciones
                                        var listaUbicacionesAlmacen = _context.tblAlm_Ubicacion.Where(x => x.registroActivo && x.almacen == almacen).ToList();

                                        foreach (var detalleSalida in detallesMovimientoSalida)
                                        {
                                            if (!string.IsNullOrEmpty(detalleSalida.area_alm) && !string.IsNullOrEmpty(detalleSalida.lado_alm) && !string.IsNullOrEmpty(detalleSalida.estante_alm) && !string.IsNullOrEmpty(detalleSalida.nivel_alm))
                                            {
                                                #region Validar longitud ubicación
                                                var stringUbicacion = detalleSalida.area_alm + detalleSalida.lado_alm + detalleSalida.estante_alm + detalleSalida.nivel_alm;

                                                if (stringUbicacion.Count() != 8)
                                                {
                                                    throw new Exception("Las ubicaciones deben tener 8 caracteres.");
                                                }
                                                #endregion

                                                var coincidencia = listaUbicacionesAlmacen.FirstOrDefault(x =>
                                                    x.area_alm == detalleSalida.area_alm &&
                                                    x.lado_alm == detalleSalida.lado_alm &&
                                                    x.estante_alm == detalleSalida.estante_alm &&
                                                    x.nivel_alm == detalleSalida.nivel_alm
                                                );

                                                if (coincidencia == null)
                                                {
                                                    throw new Exception("Algunas de las ubicaciones no existen en el almacén " + almacen.ToString() + ".");
                                                }
                                            }
                                            else
                                            {
                                                throw new Exception("Ubicación inválida de salida.");
                                            }
                                        }

                                        foreach (var detalleEntrada in detallesMovimientoEntrada)
                                        {
                                            if (!string.IsNullOrEmpty(detalleEntrada.area_alm) && !string.IsNullOrEmpty(detalleEntrada.lado_alm) && !string.IsNullOrEmpty(detalleEntrada.estante_alm) && !string.IsNullOrEmpty(detalleEntrada.nivel_alm))
                                            {
                                                #region Validar longitud ubicación
                                                var stringUbicacion = detalleEntrada.area_alm + detalleEntrada.lado_alm + detalleEntrada.estante_alm + detalleEntrada.nivel_alm;

                                                if (stringUbicacion.Count() != 8)
                                                {
                                                    throw new Exception("Las ubicaciones deben tener 8 caracteres.");
                                                }
                                                #endregion

                                                var coincidencia = listaUbicacionesAlmacen.FirstOrDefault(x =>
                                                    x.area_alm == detalleEntrada.area_alm &&
                                                    x.lado_alm == detalleEntrada.lado_alm &&
                                                    x.estante_alm == detalleEntrada.estante_alm &&
                                                    x.nivel_alm == detalleEntrada.nivel_alm
                                                );

                                                if (coincidencia == null)
                                                {
                                                    throw new Exception("Algunas de las ubicaciones no existen en el almacén " + almacen.ToString() + ".");
                                                }
                                            }
                                            else
                                            {
                                                throw new Exception("Ubicación inválida de entrada.");
                                            }
                                        }
                                        #endregion

                                        var objAlmacen = dbStarsoft.TABALM.ToList().FirstOrDefault(e => Int32.Parse(e.TAALMA) == almacen);
                                        var listaInsumos = dbStarsoft.MAEART.ToList();
                                        string ccDesc = _context.tblC_Nom_CatalogoCC.FirstOrDefault(e => e.cc == movimiento.cc).ccDescripcion;
                                        string almacenDesc = objAlmacen.TADESCRI;

                                        //TIPO DE CAMBIO DEL DIA O ANTERIOR
                                        decimal tipoCambioPeru = 0M;

                                        using (var dbStarsoftConta = new MainContextPeruStarSoft003BDCONTABILIDAD())
                                        {
                                            var tipoCambioActual = dbStarsoftConta.TIPO_CAMBIO.ToList().FirstOrDefault(e => e.TIPOCAMB_FECHA.Date == DateTime.Now.Date);
                                            if (tipoCambioActual != null)
                                            {
                                                tipoCambioPeru = tipoCambioActual.TIPOCAMB_COMPRA;
                                            }
                                            else
                                            {
                                                tipoCambioPeru = dbStarsoftConta.TIPO_CAMBIO.ToList().FirstOrDefault(e => e.TIPOCAMB_FECHA.Date == DateTime.Now.AddDays(-1).Date).TIPOCAMB_COMPRA;
                                            }
                                        }

                                        #region USUARIO INVENTARIOS STARSOFT
                                        var objUsrStarsoftInventarios = _context.tblAlm_Almacenistas.FirstOrDefault(e => e.id_usuario_sigoplan == vSesiones.sesionUsuarioDTO.id);

                                        string idAlmacenistaStarsoft = "0";

                                        if (objUsrStarsoftInventarios == null)
                                        {
                                            if (vSesiones.sesionUsuarioDTO.idPerfil == 1)
                                            {
                                                idAlmacenistaStarsoft = "1";
                                            }
                                            else
                                            {
                                                throw new Exception("Esta usuario no es un almacenista en el sistema de PERU");
                                            }
                                        }
                                        else
                                        {
                                            idAlmacenistaStarsoft = objUsrStarsoftInventarios.id_usuario_inventarios;
                                        }
                                        #endregion

                                        #region Traspaso Salida Insumo
                                        #region SIGOPLAN HEADER
                                        tblAlm_Movimientos nuevaSalida = new tblAlm_Movimientos();

                                        int ultimoFolioSalida = dbStarsoft.MOVALMCAB.ToList().Where(x => Int32.Parse(x.CAALMA) == movimiento.almacen && x.CATD == "NS").Select(x => Int32.Parse(x.CANUMDOC)).OrderByDescending(x => x).FirstOrDefault();
                                        var nuevoNumeroSalida = ultimoFolioSalida;

                                        nuevaSalida = new tblAlm_Movimientos
                                        {
                                            almacen = movimiento.almacen,
                                            tipo_mov = 55,
                                            numero = nuevoNumeroSalida + 1,
                                            cc = movimiento.cc.ToUpper(),
                                            compania = 1,
                                            periodo = DateTime.Now.Month,
                                            ano = DateTime.Now.Year,
                                            orden_ct = 0,
                                            frente = 0,
                                            fecha = DateTime.Now.Date,
                                            proveedor = 0,
                                            total = movimiento.total,
                                            estatus = "A",
                                            transferida = "N",
                                            alm_destino = 0,
                                            cc_destino = "",
                                            comentarios = movimiento.comentarios,
                                            tipo_trasp = "C",
                                            tipo_cambio = 1,
                                            estatusHabilitado = true,
                                            numeroReq = 0,
                                            idUsuarioCreacion = vSesiones.sesionUsuarioDTO.id,
                                            fechaCreacion = DateTime.Now,
                                        };

                                        _context.tblAlm_Movimientos.Add(nuevaSalida);
                                        _context.SaveChanges();
                                        #endregion

                                        #region STARSOFT HEADER
                                        string idNSStarsoft = (nuevoNumeroSalida + 1).ToString("D10");

                                        #region INSERT MOVALMCAB
                                        MOVALMCAB objCrearMovCab = new MOVALMCAB();

                                        objCrearMovCab.CAALMA = almacen.ToString("D2");
                                        objCrearMovCab.CATD = "NS";
                                        objCrearMovCab.CANUMDOC = idNSStarsoft;
                                        objCrearMovCab.CAFECDOC = DateTime.Now.Date;
                                        objCrearMovCab.CATIPMOV = "S";
                                        objCrearMovCab.CACODMOV = "AJ";
                                        objCrearMovCab.CASITUA = null;
                                        objCrearMovCab.CARFTDOC = ""; //PENDIENTE CHECAR CUANDO DEJA VER EL STOCK DE LOS INSUMOS EN EL ALMACEN (ASI SI DEJA AGREGARLOS;
                                        objCrearMovCab.CARFNDOC = null;
                                        objCrearMovCab.CASOLI = null;
                                        objCrearMovCab.CAFECDEV = null;
                                        objCrearMovCab.CACODPRO = null;
                                        objCrearMovCab.CACENCOS = movimiento.cc;
                                        objCrearMovCab.CARFALMA = null;
                                        objCrearMovCab.CAGLOSA = movimiento.comentarios;
                                        objCrearMovCab.CAFECACT = DateTime.Now.Date;
                                        objCrearMovCab.CAHORA = DateTime.Now.ToString("HH:mm:ss");
                                        objCrearMovCab.CAUSUARI = objUsrStarsoftInventarios.id_usuario_inventarios;
                                        objCrearMovCab.CACODCLI = null;
                                        objCrearMovCab.CARUC = null;
                                        objCrearMovCab.CANOMCLI = null;
                                        objCrearMovCab.CAFORVEN = null;
                                        objCrearMovCab.CACODMON = "MN"; //PENDIENTE TIPO DE MONED;
                                        objCrearMovCab.CAVENDE = null;
                                        objCrearMovCab.CATIPCAM = tipoCambioPeru;
                                        objCrearMovCab.CATIPGUI = null;
                                        objCrearMovCab.CASITGUI = "V";
                                        objCrearMovCab.CAGUIFAC = null;
                                        objCrearMovCab.CADIRENV = null;
                                        objCrearMovCab.CACODTRAN = null;
                                        objCrearMovCab.CANUMORD = null;
                                        objCrearMovCab.CAGUIDEV = null;
                                        objCrearMovCab.CANOMPRO = null;
                                        objCrearMovCab.CANROPED = null;
                                        objCrearMovCab.CACOTIZA = null;
                                        objCrearMovCab.CAPORDESCL = 0M;
                                        objCrearMovCab.CAPORDESES = 0M;
                                        objCrearMovCab.CAIMPORTE = movimiento.total;
                                        objCrearMovCab.CANOMTRA = null;
                                        objCrearMovCab.CADIRTRA = null;
                                        objCrearMovCab.CARUCTRA = null;
                                        objCrearMovCab.CAPLATRA = null;
                                        objCrearMovCab.CANROIMP = "V";
                                        objCrearMovCab.CACODLIQ = null;
                                        objCrearMovCab.CAESTIMP = null;
                                        objCrearMovCab.CACIERRE = false;
                                        objCrearMovCab.CATIPDEP = null;
                                        objCrearMovCab.CAZONAF = null;
                                        objCrearMovCab.FLAGGS = false;
                                        objCrearMovCab.ASIENTO = false;
                                        objCrearMovCab.CAFLETE = 0M;
                                        objCrearMovCab.CAORDFAB = "";
                                        objCrearMovCab.CAPEDREFE = null;
                                        objCrearMovCab.CAIMPORTACION = false;
                                        objCrearMovCab.CANROCAJAS = 0;
                                        objCrearMovCab.CAPESOTOTAL = 0M;
                                        objCrearMovCab.CADESPACHO = false;
                                        objCrearMovCab.LINVCODIGO = null;
                                        objCrearMovCab.COD_DIRECCION = null;
                                        objCrearMovCab.COSTOMIN = 0M;
                                        objCrearMovCab.CAINTERFACE = 0;
                                        objCrearMovCab.CACTACONT = null;
                                        objCrearMovCab.CACONTROLSTOCK = "S";
                                        objCrearMovCab.CANOMRECEP = null;
                                        objCrearMovCab.CADNIRECEP = null;
                                        objCrearMovCab.CFDIREREFE = null;
                                        objCrearMovCab.REG_COMPRA = false;
                                        objCrearMovCab.OC_NI_GUIA = false;
                                        objCrearMovCab.COD_AUDITORIA = "0";
                                        objCrearMovCab.COD_MODULO = "03";
                                        objCrearMovCab.NO_GIRO_NEGOCIO = false;
                                        objCrearMovCab.MOTIVO_ANULACION_DOC_ELECTRONICO = null;
                                        objCrearMovCab.DOCUMENTO_ELECTRONICO = null;
                                        objCrearMovCab.GS_BAJA = null;
                                        objCrearMovCab.CADocumentoImportado = null;
                                        objCrearMovCab.SOLICITANTE = null;
                                        objCrearMovCab.DOCUMENTO_CONTINGENCIA = null;
                                        objCrearMovCab.GE_BAJA = null;

                                        dbStarsoft.MOVALMCAB.Add(objCrearMovCab);
                                        dbStarsoft.SaveChanges();

                                        #endregion
                                        #endregion

                                        objAlmacen.TANUMSAL = nuevoNumeroSalida + 1;
                                        dbStarsoft.SaveChanges();

                                        var partidaContadorSalida = 1;

                                        foreach (var det in detallesMovimientoSalida)
                                        {
                                            var objInsumo = listaInsumos.FirstOrDefault(e => e.ACODIGO == ("0" + det.insumo));
                                            var registroStock = dbStarsoft.STKART.ToList().FirstOrDefault(x => Int32.Parse(x.STALMA) == almacen && x.STCODIGO == ("0" + det.insumo));
                                            var costoPromedio = 0m;

                                            if (registroStock != null)
                                            {
                                                costoPromedio = (decimal)registroStock.STKPREPRO;
                                            }

                                            if (costoPromedio == 0)
                                            {
                                                throw new Exception("Costo Promedio en cero para el insumo " + ("0" + det.insumo));
                                            }

                                            #region SIGOPLAN DET
                                            var nuevaSalidaDet = new tblAlm_MovimientosDet
                                            {
                                                almacen = nuevaSalida.almacen,
                                                tipo_mov = 55,
                                                numero = nuevoNumeroSalida + 1,
                                                partida = partidaContadorSalida,
                                                insumo = det.insumo,
                                                comentarios = det.comentarios,
                                                area = 99,
                                                cuenta = 99,
                                                cantidad = det.cantidad,
                                                precio = costoPromedio,
                                                importe = det.cantidad * costoPromedio,
                                                id_resguardo = 0,
                                                area_alm = det.area_alm ?? "",
                                                lado_alm = det.lado_alm ?? "",
                                                estante_alm = det.estante_alm ?? "",
                                                nivel_alm = det.nivel_alm ?? "",
                                                transporte = "",
                                                estatusHabilitado = true,
                                                PERU_insumo = det.PERU_insumo,
                                            };

                                            _context.tblAlm_MovimientosDet.Add(nuevaSalidaDet);
                                            _context.SaveChanges();
                                            #endregion

                                            #region INSERT MOVALMDET
                                            dbStarsoft.MovAlmDet.Add(new MovAlmDet()
                                            {
                                                DEALMA = almacen.ToString("D2"),
                                                DETD = "NS",
                                                DENUMDOC = idNSStarsoft,
                                                DEITEM = partidaContadorSalida,
                                                DECODIGO = "0" + det.insumo.ToString(),
                                                DECODREF = null,
                                                DECANTID = det.cantidad,
                                                DECANTENT = 0M,
                                                DECANREF = 0M,
                                                DECANFAC = 0M,
                                                DEORDEN = null,
                                                DEPREUNI = 0M,
                                                DEPRECIO = costoPromedio,
                                                DEPRECI1 = 0M,
                                                DEDESCTO = 0M,
                                                DESTOCK = null,
                                                DEIGV = 0M,
                                                DEIMPMN = costoPromedio,
                                                DEIMPUS = costoPromedio * tipoCambioPeru,
                                                DESERIE = null,
                                                DESITUA = null,
                                                DEFECDOC = null,
                                                DECENCOS = movimiento.cc,
                                                DERFALMA = null,
                                                DETR = null,
                                                DEESTADO = "V",
                                                DECODMOV = "AJ",
                                                DEVALTOT = costoPromedio * det.cantidad,
                                                DECOMPRO = null,
                                                DECODMON = "MN",
                                                DETIPO = null,
                                                DETIPCAM = tipoCambioPeru,
                                                DEPREVTA = null,
                                                DEMONVTA = null,
                                                DEFECVEN = null,
                                                DEDEVOL = 0M,
                                                DESOLI = null,
                                                DEDESCRI = objInsumo.ADESCRI,
                                                DEPORDES = 0M,
                                                DEIGVPOR = 0M,
                                                DEDESCLI = 0M,
                                                DEDESESP = 0M,
                                                DENUMFAC = null,
                                                DELOTE = null,
                                                DEUNIDAD = objInsumo.AUNIDAD,
                                                DECANTBRUTA = 0M,
                                                DEDSCTCANTBRUTA = 0M,
                                                DEORDFAB = "",
                                                DEQUIPO = null,
                                                DEFLETE = 0M,
                                                DEITEMI = null, //????????
                                                DEGLOSA = "",
                                                DEVALORIZADO = true,
                                                DESECUENORI = null,
                                                DEREFERENCIA = null,
                                                UMREFERENCIA = null,
                                                CANTREFERENCIA = 0M,
                                                DECUENTA = null,
                                                DETEXTO = null,
                                                CTA_CONSUMO = null,
                                                CODPARTE = "",
                                                CODPLANO = "",
                                                DETPRODUCCION = 0,
                                                MPMA = "",
                                                PorcentajeCosto = 0M,
                                                SALDO_NC = null,
                                                DEPRECIOREF = 0M,
                                            });
                                            dbStarsoft.SaveChanges();
                                            #endregion

                                            partidaContadorSalida++;
                                        }
                                        #endregion

                                        #region Traspaso Entrada Insumo
                                        #region SIGOPLAN HEADER
                                        tblAlm_Movimientos nuevaEntrada = new tblAlm_Movimientos();

                                        int ultimoFolioEntrada = dbStarsoft.MOVALMCAB.ToList().Where(x => Int32.Parse(x.CAALMA) == movimiento.almacen && x.CATD == "NI").Select(x => Int32.Parse(x.CANUMDOC)).OrderByDescending(x => x).FirstOrDefault();

                                        nuevaEntrada = new tblAlm_Movimientos
                                        {
                                            almacen = movimiento.almacen,
                                            tipo_mov = 5,
                                            numero = ultimoFolioEntrada + 1,
                                            cc = movimiento.cc.ToUpper(),
                                            compania = 1,
                                            periodo = DateTime.Now.Month,
                                            ano = DateTime.Now.Year,
                                            orden_ct = 0,
                                            frente = 0,
                                            fecha = DateTime.Now.Date,
                                            proveedor = 0,
                                            total = movimiento.total,
                                            estatus = "A",
                                            transferida = "N",
                                            alm_destino = 0,
                                            cc_destino = "",
                                            comentarios = movimiento.comentarios,
                                            tipo_trasp = "C",
                                            tipo_cambio = 1,
                                            estatusHabilitado = true,
                                            numeroReq = 0,
                                            idUsuarioCreacion = vSesiones.sesionUsuarioDTO.id,
                                            fechaCreacion = DateTime.Now,
                                        };

                                        _context.tblAlm_Movimientos.Add(nuevaEntrada);
                                        _context.SaveChanges();
                                        #endregion

                                        #region STARSOFT HEADER
                                        string idNIStarsoft = (ultimoFolioEntrada + 1).ToString("D10");

                                        #region INSERT MOVALMCAB
                                        MOVALMCAB registroMovimientoStarsoft = new MOVALMCAB();

                                        registroMovimientoStarsoft.CAALMA = almacen.ToString("D2");
                                        registroMovimientoStarsoft.CATD = "NI";
                                        registroMovimientoStarsoft.CANUMDOC = idNIStarsoft;
                                        registroMovimientoStarsoft.CAFECDOC = DateTime.Now.Date;
                                        registroMovimientoStarsoft.CATIPMOV = "I";
                                        registroMovimientoStarsoft.CACODMOV = "AJ";
                                        registroMovimientoStarsoft.CASITUA = "M";
                                        registroMovimientoStarsoft.CARFTDOC = ""; //PENDIENTE CHECAR CUANDO DEJA VER EL STOCK DE LOS INSUMOS EN EL ALMACEN (ASI SI DEJA AGREGARLOS;
                                        registroMovimientoStarsoft.CARFNDOC = null;
                                        registroMovimientoStarsoft.CASOLI = null;
                                        registroMovimientoStarsoft.CAFECDEV = null;
                                        registroMovimientoStarsoft.CACODPRO = null;
                                        registroMovimientoStarsoft.CACENCOS = movimiento.cc;
                                        registroMovimientoStarsoft.CARFALMA = null;
                                        registroMovimientoStarsoft.CAGLOSA = movimiento.comentarios;
                                        registroMovimientoStarsoft.CAFECACT = DateTime.Now.Date;
                                        registroMovimientoStarsoft.CAHORA = DateTime.Now.ToString("HH:mm:ss");
                                        registroMovimientoStarsoft.CAUSUARI = idAlmacenistaStarsoft;
                                        registroMovimientoStarsoft.CACODCLI = null;
                                        registroMovimientoStarsoft.CARUC = null;
                                        registroMovimientoStarsoft.CANOMCLI = null;
                                        registroMovimientoStarsoft.CAFORVEN = null;
                                        registroMovimientoStarsoft.CACODMON = "MN"; //PENDIENTE TIPO DE MONED;
                                        registroMovimientoStarsoft.CAVENDE = null;
                                        registroMovimientoStarsoft.CATIPCAM = tipoCambioPeru;
                                        registroMovimientoStarsoft.CATIPGUI = null;
                                        registroMovimientoStarsoft.CASITGUI = "V";
                                        registroMovimientoStarsoft.CAGUIFAC = null;
                                        registroMovimientoStarsoft.CADIRENV = null;
                                        registroMovimientoStarsoft.CACODTRAN = null;
                                        registroMovimientoStarsoft.CANUMORD = null;
                                        registroMovimientoStarsoft.CAGUIDEV = null;
                                        registroMovimientoStarsoft.CANOMPRO = null;
                                        registroMovimientoStarsoft.CANROPED = null;
                                        registroMovimientoStarsoft.CACOTIZA = null;
                                        registroMovimientoStarsoft.CAPORDESCL = 0M;
                                        registroMovimientoStarsoft.CAPORDESES = 0M;
                                        registroMovimientoStarsoft.CAIMPORTE = movimiento.total;
                                        registroMovimientoStarsoft.CANOMTRA = null;
                                        registroMovimientoStarsoft.CADIRTRA = null;
                                        registroMovimientoStarsoft.CARUCTRA = null;
                                        registroMovimientoStarsoft.CAPLATRA = null;
                                        registroMovimientoStarsoft.CANROIMP = null;
                                        registroMovimientoStarsoft.CACODLIQ = null;
                                        registroMovimientoStarsoft.CAESTIMP = null;
                                        registroMovimientoStarsoft.CACIERRE = false;
                                        registroMovimientoStarsoft.CATIPDEP = null;
                                        registroMovimientoStarsoft.CAZONAF = null;
                                        registroMovimientoStarsoft.FLAGGS = false;
                                        registroMovimientoStarsoft.ASIENTO = false;
                                        registroMovimientoStarsoft.CAFLETE = 0M;
                                        registroMovimientoStarsoft.CAORDFAB = "";
                                        registroMovimientoStarsoft.CAPEDREFE = null;
                                        registroMovimientoStarsoft.CAIMPORTACION = false;
                                        registroMovimientoStarsoft.CANROCAJAS = 0;
                                        registroMovimientoStarsoft.CAPESOTOTAL = 0M;
                                        registroMovimientoStarsoft.CADESPACHO = false;
                                        registroMovimientoStarsoft.LINVCODIGO = null;
                                        registroMovimientoStarsoft.COD_DIRECCION = null;
                                        registroMovimientoStarsoft.COSTOMIN = 0M;
                                        registroMovimientoStarsoft.CAINTERFACE = 0;
                                        registroMovimientoStarsoft.CACTACONT = null;
                                        registroMovimientoStarsoft.CACONTROLSTOCK = "N";
                                        registroMovimientoStarsoft.CANOMRECEP = null;
                                        registroMovimientoStarsoft.CADNIRECEP = null;
                                        registroMovimientoStarsoft.CFDIREREFE = null;
                                        registroMovimientoStarsoft.REG_COMPRA = false;
                                        registroMovimientoStarsoft.OC_NI_GUIA = false;
                                        registroMovimientoStarsoft.COD_AUDITORIA = "0";
                                        registroMovimientoStarsoft.COD_MODULO = "03";
                                        registroMovimientoStarsoft.NO_GIRO_NEGOCIO = false;
                                        registroMovimientoStarsoft.MOTIVO_ANULACION_DOC_ELECTRONICO = null;
                                        registroMovimientoStarsoft.DOCUMENTO_ELECTRONICO = null;
                                        registroMovimientoStarsoft.GS_BAJA = null;
                                        registroMovimientoStarsoft.CADocumentoImportado = null;
                                        registroMovimientoStarsoft.SOLICITANTE = null;
                                        registroMovimientoStarsoft.DOCUMENTO_CONTINGENCIA = null;
                                        registroMovimientoStarsoft.GE_BAJA = null;

                                        dbStarsoft.MOVALMCAB.Add(registroMovimientoStarsoft);
                                        dbStarsoft.SaveChanges();
                                        #endregion
                                        #endregion

                                        objAlmacen.TANUMENT = ultimoFolioEntrada + 1;
                                        dbStarsoft.SaveChanges();

                                        var partidaContadorEntrada = 1;

                                        foreach (var det in detallesMovimientoEntrada)
                                        {
                                            var objInsumo = listaInsumos.FirstOrDefault(e => e.ACODIGO == ("0" + det.insumo));
                                            var registroStock = dbStarsoft.STKART.ToList().FirstOrDefault(x => Int32.Parse(x.STALMA) == almacen && x.STCODIGO == ("0" + det.insumo));
                                            var costoPromedio = 0m;

                                            if (registroStock != null)
                                            {
                                                costoPromedio = (decimal)registroStock.STKPREPRO;
                                            }

                                            if (costoPromedio == 0)
                                            {
                                                throw new Exception("Costo Promedio en cero para el insumo " + ("0" + det.insumo));
                                            }

                                            #region SIGOPLAN DET
                                            var nuevaSalidaDet = new tblAlm_MovimientosDet
                                            {
                                                almacen = nuevaEntrada.almacen,
                                                tipo_mov = 5,
                                                numero = ultimoFolioEntrada + 1,
                                                partida = partidaContadorEntrada,
                                                insumo = det.insumo,
                                                comentarios = det.comentarios,
                                                area = 99,
                                                cuenta = 99,
                                                cantidad = det.cantidad,
                                                precio = costoPromedio,
                                                importe = det.cantidad * costoPromedio,
                                                id_resguardo = 0,
                                                area_alm = det.area_alm ?? "",
                                                lado_alm = det.lado_alm ?? "",
                                                estante_alm = det.estante_alm ?? "",
                                                nivel_alm = det.nivel_alm ?? "",
                                                transporte = "",
                                                estatusHabilitado = true,
                                                PERU_insumo = det.PERU_insumo,
                                            };

                                            _context.tblAlm_MovimientosDet.Add(nuevaSalidaDet);
                                            _context.SaveChanges();
                                            #endregion

                                            #region INSERT MOVALMDET
                                            dbStarsoft.MovAlmDet.Add(new MovAlmDet()
                                            {
                                                DEALMA = almacen.ToString("D2"),
                                                DETD = "NI",
                                                DENUMDOC = idNIStarsoft,
                                                DEITEM = partidaContadorEntrada,
                                                DECODIGO = "0" + det.insumo.ToString(),
                                                DECODREF = null,
                                                DECANTID = det.cantidad,
                                                DECANTENT = 0M,
                                                DECANREF = 0M,
                                                DECANFAC = 0M,
                                                DEORDEN = null,
                                                DEPREUNI = 0M,
                                                DEPRECIO = costoPromedio,
                                                DEPRECI1 = 0M,
                                                DEDESCTO = 0M,
                                                DESTOCK = null,
                                                DEIGV = 0M,
                                                DEIMPMN = costoPromedio,
                                                DEIMPUS = costoPromedio * tipoCambioPeru,
                                                DESERIE = null,
                                                DESITUA = null,
                                                DEFECDOC = null,
                                                DECENCOS = movimiento.cc,
                                                DERFALMA = null,
                                                DETR = null,
                                                DEESTADO = "V",
                                                DECODMOV = "AJ",
                                                DEVALTOT = costoPromedio * det.cantidad,
                                                DECOMPRO = null,
                                                DECODMON = "MN",
                                                DETIPO = null,
                                                DETIPCAM = tipoCambioPeru,
                                                DEPREVTA = null,
                                                DEMONVTA = null,
                                                DEFECVEN = null,
                                                DEDEVOL = 0M,
                                                DESOLI = null,
                                                DEDESCRI = objInsumo.ADESCRI,
                                                DEPORDES = 0M,
                                                DEIGVPOR = 0M,
                                                DEDESCLI = 0M,
                                                DEDESESP = 0M,
                                                DENUMFAC = null,
                                                DELOTE = null,
                                                DEUNIDAD = objInsumo.AUNIDAD,
                                                DECANTBRUTA = 0M,
                                                DEDSCTCANTBRUTA = 0M,
                                                DEORDFAB = "",
                                                DEQUIPO = null,
                                                DEFLETE = 0M,
                                                DEITEMI = null, //????????
                                                DEGLOSA = "",
                                                DEVALORIZADO = true,
                                                DESECUENORI = null,
                                                DEREFERENCIA = null,
                                                UMREFERENCIA = null,
                                                CANTREFERENCIA = 0M,
                                                DECUENTA = null,
                                                DETEXTO = null,
                                                CTA_CONSUMO = null,
                                                CODPARTE = "",
                                                CODPLANO = "",
                                                DETPRODUCCION = 0,
                                                MPMA = "",
                                                PorcentajeCosto = 0M,
                                                SALDO_NC = null,
                                                DEPRECIOREF = 0M,
                                            });
                                            dbStarsoft.SaveChanges();

                                            #endregion

                                            partidaContadorEntrada++;
                                        }
                                        #endregion

                                        dbSigoplanTransaction.Commit();
                                        dbStarsoftTransaction.Commit();

                                        result.Add(SUCCESS, true);
                                    }
                                    catch (Exception e)
                                    {
                                        dbSigoplanTransaction.Rollback();
                                        dbStarsoftTransaction.Rollback();

                                        result.Add(MESSAGE, e.Message);
                                        result.Add(SUCCESS, false);
                                    }
                                }
                            }

                        }
                    }
                    break;
                case EmpresaEnum.Colombia:
                    {
                        #region COLOMBIA
                        //Se coloca el centro de costo default por empresa.
                        cc = "003";
                        movimiento.cc = "003";
                        movimiento.cc_destino = "003";

                        var empleado = 0;
                        var folioTraspaso = 0;
                        var usuarioSigoplan = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                        if (usuarioSigoplan != null)
                        {
                            empleado = usuarioSigoplan.empleado;
                        }

                        using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                        {
                            using (var con = checkConexionProductivo())
                            {
                                using (var trans = con.BeginTransaction())
                                {
                                    try
                                    {
                                        #region Verificar Ubicaciones
                                        //var ubicaciones = consultaCheckProductivo(string.Format(@"SELECT * FROM si_matriz_ubicaciones WHERE almacen = {0}", almacen));
                                        //List<si_matriz_ubicacionesDTO> ubicacionesAlmacen = ubicaciones.ToObject<List<si_matriz_ubicacionesDTO>>();
                                        var ubicacionesAlmacen = _context.tblAlm_Ubicacion.Where(e => e.registroActivo && e.almacen == almacen).ToList();

                                        foreach (var detalleSalida in detallesMovimientoSalida)
                                        {
                                            if (detalleSalida != null)
                                            {
                                                if (detalleSalida.area_alm != "" && detalleSalida.area_alm != null
                                                && detalleSalida.lado_alm != "" && detalleSalida.lado_alm != null
                                                && detalleSalida.estante_alm != "" && detalleSalida.estante_alm != null
                                                && detalleSalida.nivel_alm != "" && detalleSalida.nivel_alm != null)
                                                {
                                                    var coincidencia = ubicacionesAlmacen.Where(x =>
                                                            x.area_alm == detalleSalida.area_alm
                                                            && x.lado_alm == detalleSalida.lado_alm
                                                            && x.estante_alm == detalleSalida.estante_alm
                                                            && x.nivel_alm == detalleSalida.nivel_alm).ToList();
                                                    if (coincidencia.Count() <= 0)
                                                    {
                                                        throw new Exception("Algunas de las ubicaciones no existen en el almacén " + almacen.ToString() + ".");
                                                    }
                                                }
                                            }

                                        }
                                        foreach (var detalleSalida in detallesMovimientoEntrada)
                                        {
                                            if (detalleSalida != null)
                                            {
                                                if (detalleSalida.area_alm != "" && detalleSalida.area_alm != null
                                                    && detalleSalida.lado_alm != "" && detalleSalida.lado_alm != null
                                                    && detalleSalida.estante_alm != "" && detalleSalida.estante_alm != null
                                                    && detalleSalida.nivel_alm != "" && detalleSalida.nivel_alm != null)
                                                {
                                                    var coincidencia = ubicacionesAlmacen.Where(x =>
                                                            x.area_alm == detalleSalida.area_alm
                                                            && x.lado_alm == detalleSalida.lado_alm
                                                            && x.estante_alm == detalleSalida.estante_alm
                                                            && x.nivel_alm == detalleSalida.nivel_alm).ToList();
                                                    if (coincidencia.Count() <= 0)
                                                    {
                                                        throw new Exception("Algunas de las ubicaciones no existen en el almacén " + almacen.ToString() + ".");
                                                    }
                                                }
                                            }

                                        }
                                        #endregion

                                        #region Traspaso Salida Insumo
                                        int count = 0;

                                        #region Calcular Ultimos Folios Salida
                                        var ultimoMovimientoEK = consultaCheckProductivo(
                                            string.Format(@"SELECT 
                                                    TOP 1 numero 
                                                FROM si_movimientos 
                                                WHERE almacen = {0} AND tipo_mov = {1} 
                                                ORDER BY numero DESC", almacen, 52)
                                            );

                                        var nuevoFolio = 0;

                                        if (ultimoMovimientoEK != null)
                                        {
                                            var ultimoMovimiento = ((List<SurtidoDetDTO>)ultimoMovimientoEK.ToObject<List<SurtidoDetDTO>>())[0];
                                            nuevoFolio = ultimoMovimiento.numero;
                                        }

                                        decimal total = 0;
                                        var costoPromedio = getCostoPromedioKardex(almacen, insumo);

                                        foreach (var item in detallesMovimientoSalida) total += costoPromedio * item.cantidad;

                                        //                                        var ultimoFolioTraspasoEK = consultaCheckProductivo(
                                        //                                            string.Format(@"SELECT TOP 1 
                                        //                                                            almacen, tipo_mov, numero, cc, orden_ct 
                                        //                                                        FROM si_movimientos 
                                        //                                                        WHERE almacen = {0} AND cc = '{1}' 
                                        //                                                        ORDER BY orden_ct DESC", almacen, cc)
                                        //                                        );

                                        //                                        if (ultimoFolioTraspasoEK != null)
                                        //                                        {
                                        //                                            var ultimoFolioTraspaso = ((List<dynamic>)ultimoFolioTraspasoEK.ToObject<List<dynamic>>())[0];

                                        //                                            folioTraspaso = ultimoFolioTraspaso.orden_ct != null ? ((int)ultimoFolioTraspaso.orden_ct + 1) : 1;
                                        //                                        }
                                        #endregion

                                        #region Salida SIGOPLAN
                                        movimiento.tipo_mov = 52;
                                        movimiento.numero = nuevoFolio + 1;
                                        movimiento.periodo = DateTime.Now.Month;
                                        movimiento.ano = DateTime.Now.Year;
                                        movimiento.orden_ct = 0;
                                        movimiento.fecha = DateTime.Now.Date;
                                        movimiento.total = total;
                                        movimiento.requisicion = null;

                                        _context.tblAlm_Movimientos.Add(movimiento);
                                        _context.SaveChanges();

                                        if (movimiento.total <= 0)
                                        {
                                            throw new Exception("El total no puede ser igual o menor a cero.");
                                        }
                                        #endregion

                                        #region SalidaEnkontrol
                                        var consultaMovimientos = @"INSERT INTO DBA.si_movimientos 
                                         (almacen, tipo_mov, numero, cc, compania, periodo, ano, orden_ct, frente, fecha, proveedor, total, estatus, 
                                         transferida, poliza, empleado, alm_destino, cc_destino, comentarios, tipo_trasp, numero_destino, tp, year_poliza, 
                                         mes_poliza, tipo_cambio, hora, fecha_modifica, empleado_modifica, destajista, obra, id_residente, factura, sector_id, 
                                         tc_cc, paquete, tipo_cargo, cargo_destajista, cargo_id_residente, embarque, orden_prod, numero_prevale, obra_destino, indica_prov) 
                                         VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                        using (var cmd = new OdbcCommand(consultaMovimientos))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@almacen", OdbcType.Numeric).Value = movimiento.almacen;
                                            parameters.Add("@tipo_mov", OdbcType.Numeric).Value = movimiento.tipo_mov;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = movimiento.numero;
                                            parameters.Add("@cc", OdbcType.Char).Value = movimiento.cc;
                                            parameters.Add("@compania", OdbcType.Numeric).Value = movimiento.compania;
                                            parameters.Add("@periodo", OdbcType.Numeric).Value = movimiento.periodo;
                                            parameters.Add("@ano", OdbcType.Numeric).Value = movimiento.ano;
                                            parameters.Add("@orden_ct", OdbcType.Numeric).Value = movimiento.orden_ct;
                                            parameters.Add("@frente", OdbcType.Numeric).Value = movimiento.frente;
                                            parameters.Add("@fecha", OdbcType.Date).Value = movimiento.fecha.Date;
                                            parameters.Add("@proveedor", OdbcType.Numeric).Value = movimiento.proveedor;
                                            parameters.Add("@total", OdbcType.Numeric).Value = movimiento.total;
                                            parameters.Add("@estatus", OdbcType.Char).Value = movimiento.estatus;
                                            parameters.Add("@transferida", OdbcType.Char).Value = movimiento.transferida;
                                            parameters.Add("@poliza", OdbcType.Numeric).Value = 0;
                                            parameters.Add("@empleado", OdbcType.Numeric).Value = empleado;
                                            parameters.Add("@alm_destino", OdbcType.Numeric).Value = movimiento.alm_destino;
                                            parameters.Add("@cc_destino", OdbcType.Char).Value = movimiento.cc_destino;
                                            parameters.Add("@comentarios", OdbcType.Char).Value = movimiento.comentarios != null ? movimiento.comentarios : "";
                                            parameters.Add("@tipo_trasp", OdbcType.Char).Value = movimiento.tipo_trasp;
                                            parameters.Add("@numero_destino", OdbcType.Numeric).Value = 0;
                                            parameters.Add("@tp", OdbcType.Char).Value = DBNull.Value;
                                            parameters.Add("@year_poliza", OdbcType.Numeric).Value = DateTime.Now.Year;
                                            parameters.Add("@mes_poliza", OdbcType.Numeric).Value = DateTime.Now.Month;
                                            parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = movimiento.tipo_cambio;
                                            parameters.Add("@hora", OdbcType.Time).Value = DateTime.Now.TimeOfDay;
                                            parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                            parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = empleado;
                                            parameters.Add("@destajista", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                            parameters.Add("@id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@factura", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@tc_cc", OdbcType.Numeric).Value = 1;
                                            parameters.Add("@paquete", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@tipo_cargo", OdbcType.Numeric).Value = 0;
                                            parameters.Add("@cargo_Destajista", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@cargo_id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@embarque", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@orden_prod", OdbcType.Numeric).Value = DBNull.Value;
                                            //parameters.Add("@folio_traspaso", OdbcType.Numeric).Value = folioTraspaso;
                                            //parameters.Add("@bit_sin_ubicacion", OdbcType.Numeric).Value = 0;
                                            parameters.Add("@numero_prevale", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@obra_destino", OdbcType.Char).Value = DBNull.Value;
                                            parameters.Add("@indica_prov", OdbcType.Numeric).Value = DBNull.Value;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }
                                        #endregion


                                        int partidaContador = 1;
                                        foreach (var ubi in detallesMovimientoSalida)
                                        {
                                            int partida = partidaContador++;

                                            #region Salida SIGOPLAN Detalle
                                            tblAlm_MovimientosDet nuevaSalidaDet = new tblAlm_MovimientosDet
                                            {
                                                almacen = almacen,
                                                tipo_mov = 52,
                                                numero = nuevoFolio + 1,
                                                partida = partida,
                                                insumo = insumo,
                                                comentarios = "", //Agarrar los comentarios del front-end.
                                                area = 99,
                                                cuenta = 99,
                                                cantidad = ubi.cantidad,
                                                precio = costoPromedio, //precio = existencias > 0 ? costoPromedio : precioEntrada,
                                                importe = ubi.cantidad * costoPromedio, //importe = ubi.cantidadMovimiento * (existencias > 0 ? costoPromedio : precioEntrada),
                                                id_resguardo = 0,
                                                area_alm = ubi.area_alm ?? "",
                                                lado_alm = ubi.lado_alm ?? "",
                                                estante_alm = ubi.estante_alm ?? "",
                                                nivel_alm = ubi.nivel_alm ?? "",
                                                transporte = "",
                                                estatusHabilitado = true
                                            };

                                            _context.tblAlm_MovimientosDet.Add(nuevaSalidaDet);
                                            _context.SaveChanges();
                                            #endregion

                                            if (costoPromedio <= 0)
                                            {
                                                throw new Exception("El precio, el importe y el costo promedio no pueden ser igual o menor a cero.");
                                            }

                                            #region Salida Enkontrol Detalle
                                            var consultaMovimientosDetalle = @"INSERT INTO DBA.si_movimientos_det 
                                                        (almacen, tipo_mov, numero, partida, insumo, comentarios, area, cuenta, cantidad, precio, importe, 
                                                        partida_oc, costo_prom, obra, manzana_ini, lote_ini, interior_ini, manzana_fin, lote_fin, interior_fin, 
                                                        remision, sector_id, lote_id, folio_oc, numero_prevale, frente_ppto, partida_ppto, numero_economico,iva,
                                                        porcent_iva, folio, kit, tarjeta, secuencia) 
                                                        VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                            using (var cmd = new OdbcCommand(consultaMovimientosDetalle))
                                            {
                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                parameters.Add("@almacen", OdbcType.Numeric).Value = nuevaSalidaDet.almacen;
                                                parameters.Add("@tipo_mov", OdbcType.Numeric).Value = nuevaSalidaDet.tipo_mov;
                                                parameters.Add("@numero", OdbcType.Numeric).Value = nuevoFolio + 1;
                                                parameters.Add("@partida", OdbcType.Numeric).Value = nuevaSalidaDet.partida;
                                                parameters.Add("@insumo", OdbcType.Numeric).Value = nuevaSalidaDet.insumo;
                                                parameters.Add("@comentarios", OdbcType.Char).Value = nuevaSalidaDet.comentarios != null ? nuevaSalidaDet.comentarios : "";
                                                parameters.Add("@area", OdbcType.Numeric).Value = nuevaSalidaDet.area;
                                                parameters.Add("@cuenta", OdbcType.Numeric).Value = nuevaSalidaDet.cuenta;
                                                parameters.Add("@cantidad", OdbcType.Numeric).Value = nuevaSalidaDet.cantidad;
                                                parameters.Add("@precio", OdbcType.Numeric).Value = nuevaSalidaDet.precio; //existencias > 0 ? costoPromedio : costoPromedioEntrada;
                                                parameters.Add("@importe", OdbcType.Numeric).Value = nuevaSalidaDet.importe; //existencias > 0 ? importe : (nuevaSalidaDet.cantidad * costoPromedioEntrada);
                                                parameters.Add("@partida_oc", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@costo_prom", OdbcType.Numeric).Value = nuevaSalidaDet.precio; //existencias > 0 ? costoPromedio : costoPromedioEntrada;
                                                parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@manzana_ini", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@lote_ini", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@interior_ini", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@manzana_fin", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@lote_fin", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@interior_fin", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@remision", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                                //parameters.Add("@id_resguardo", OdbcType.Numeric).Value = DBNull.Value;
                                                //parameters.Add("@area_alm", OdbcType.Char).Value = nuevaSalidaDet.area_alm;
                                                //parameters.Add("@lado_alm", OdbcType.Char).Value = nuevaSalidaDet.lado_alm;
                                                //parameters.Add("@estante_alm", OdbcType.Char).Value = nuevaSalidaDet.estante_alm;
                                                //parameters.Add("@nivel_alm", OdbcType.Char).Value = nuevaSalidaDet.nivel_alm;
                                                //parameters.Add("@fecha_fisico", OdbcType.Date).Value = DBNull.Value;
                                                parameters.Add("@lote_id", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@folio_oc", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@numero_prevale", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@frente_ppto", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@partida_ppto", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@numero_economico", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@iva", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@porcent_iva", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@folio", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@kit", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@tarjeta", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@secuencia", OdbcType.Numeric).Value = DBNull.Value;

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;

                                                count += cmd.ExecuteNonQuery();
                                            }
                                            #endregion
                                        }

                                        #endregion

                                        #region Traspaso Entrada Insumo

                                        #region Calcular Ultimos Folios Entrada
                                        ultimoMovimientoEK = consultaCheckProductivo(
                                            string.Format(@"SELECT 
                                                    TOP 1 numero, orden_ct 
                                                FROM si_movimientos 
                                                WHERE almacen = {0} AND tipo_mov = {1} 
                                                ORDER BY numero DESC", almacen, 2)
                                            );

                                        nuevoFolio = 0;

                                        if (ultimoMovimientoEK != null)
                                        {
                                            var ultimoMovimiento = ((List<SurtidoDetDTO>)ultimoMovimientoEK.ToObject<List<SurtidoDetDTO>>())[0];
                                            nuevoFolio = ultimoMovimiento.numero;
                                        }

                                        total = 0;

                                        foreach (var item in detallesMovimientoEntrada) total += costoPromedio * item.cantidad;
                                        #endregion

                                        #region Entrada SIGOPLAN
                                        movimiento.tipo_mov = 2;
                                        movimiento.numero = nuevoFolio + 1;
                                        movimiento.periodo = DateTime.Now.Month;
                                        movimiento.ano = DateTime.Now.Year;
                                        movimiento.orden_ct = 0;
                                        movimiento.fecha = DateTime.Now.Date;
                                        movimiento.total = total;
                                        movimiento.requisicion = null;

                                        _context.tblAlm_Movimientos.Add(movimiento);
                                        _context.SaveChanges();

                                        if (movimiento.total <= 0)
                                        {
                                            throw new Exception("El total no puede ser igual o menor a cero.");
                                        }
                                        #endregion

                                        #region Entrada Enkontrol
                                        consultaMovimientos = @"INSERT INTO DBA.si_movimientos 
                                         (almacen, tipo_mov, numero, cc, compania, periodo, ano, orden_ct, frente, fecha, proveedor, total, estatus, 
                                         transferida, poliza, empleado, alm_destino, cc_destino, comentarios, tipo_trasp, numero_destino, tp, year_poliza, 
                                         mes_poliza, tipo_cambio, hora, fecha_modifica, empleado_modifica, destajista, obra, id_residente, factura, sector_id, 
                                         tc_cc, paquete, tipo_cargo, cargo_destajista, cargo_id_residente, embarque, orden_prod, numero_prevale, obra_destino, indica_prov) 
                                         VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                        using (var cmd = new OdbcCommand(consultaMovimientos))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@almacen", OdbcType.Numeric).Value = movimiento.almacen;
                                            parameters.Add("@tipo_mov", OdbcType.Numeric).Value = movimiento.tipo_mov;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = movimiento.numero;
                                            parameters.Add("@cc", OdbcType.Char).Value = movimiento.cc;
                                            parameters.Add("@compania", OdbcType.Numeric).Value = movimiento.compania;
                                            parameters.Add("@periodo", OdbcType.Numeric).Value = movimiento.periodo;
                                            parameters.Add("@ano", OdbcType.Numeric).Value = movimiento.ano;
                                            parameters.Add("@orden_ct", OdbcType.Numeric).Value = movimiento.orden_ct;
                                            parameters.Add("@frente", OdbcType.Numeric).Value = movimiento.frente;
                                            parameters.Add("@fecha", OdbcType.Date).Value = movimiento.fecha.Date;
                                            parameters.Add("@proveedor", OdbcType.Numeric).Value = movimiento.proveedor;
                                            parameters.Add("@total", OdbcType.Numeric).Value = movimiento.total;
                                            parameters.Add("@estatus", OdbcType.Char).Value = movimiento.estatus;
                                            parameters.Add("@transferida", OdbcType.Char).Value = movimiento.transferida;
                                            parameters.Add("@poliza", OdbcType.Numeric).Value = 0;
                                            parameters.Add("@empleado", OdbcType.Numeric).Value = empleado;
                                            parameters.Add("@alm_destino", OdbcType.Numeric).Value = movimiento.alm_destino;
                                            parameters.Add("@cc_destino", OdbcType.Char).Value = movimiento.cc_destino;
                                            parameters.Add("@comentarios", OdbcType.Char).Value = movimiento.comentarios != null ? movimiento.comentarios : "";
                                            parameters.Add("@tipo_trasp", OdbcType.Char).Value = movimiento.tipo_trasp;
                                            parameters.Add("@numero_destino", OdbcType.Numeric).Value = 0;
                                            parameters.Add("@tp", OdbcType.Char).Value = DBNull.Value;
                                            parameters.Add("@year_poliza", OdbcType.Numeric).Value = DateTime.Now.Year;
                                            parameters.Add("@mes_poliza", OdbcType.Numeric).Value = DateTime.Now.Month;
                                            parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = movimiento.tipo_cambio;
                                            parameters.Add("@hora", OdbcType.Time).Value = DateTime.Now.TimeOfDay;
                                            parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                            parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = empleado;
                                            parameters.Add("@destajista", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                            parameters.Add("@id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@factura", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@tc_cc", OdbcType.Numeric).Value = 1;
                                            parameters.Add("@paquete", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@tipo_cargo", OdbcType.Numeric).Value = 0;
                                            parameters.Add("@cargo_Destajista", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@cargo_id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@embarque", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@orden_prod", OdbcType.Numeric).Value = DBNull.Value;
                                            //parameters.Add("@folio_traspaso", OdbcType.Numeric).Value = folioTraspaso;
                                            //parameters.Add("@bit_sin_ubicacion", OdbcType.Numeric).Value = 0;
                                            parameters.Add("@numero_prevale", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@obra_destino", OdbcType.Char).Value = DBNull.Value;
                                            parameters.Add("@indica_prov", OdbcType.Numeric).Value = DBNull.Value;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }
                                        #endregion

                                        partidaContador = 1;
                                        foreach (var ubi in detallesMovimientoEntrada)
                                        {
                                            int partida = partidaContador++;

                                            #region Entrada SIGOPLAN Detalle
                                            tblAlm_MovimientosDet nuevaEntradaDet = new tblAlm_MovimientosDet
                                            {
                                                almacen = almacen,
                                                tipo_mov = 2,
                                                numero = nuevoFolio + 1,
                                                partida = partida,
                                                insumo = insumo,
                                                comentarios = "", //Agarrar los comentarios del front-end.
                                                area = 99,
                                                cuenta = 99,
                                                cantidad = ubi.cantidad,
                                                precio = costoPromedio, //precio = existencias > 0 ? costoPromedio : precioEntrada,
                                                importe = ubi.cantidad * costoPromedio, //importe = ubi.cantidadMovimiento * (existencias > 0 ? costoPromedio : precioEntrada),
                                                id_resguardo = 0,
                                                area_alm = ubi.area_alm ?? "",
                                                lado_alm = ubi.lado_alm ?? "",
                                                estante_alm = ubi.estante_alm ?? "",
                                                nivel_alm = ubi.nivel_alm ?? "",
                                                transporte = "",
                                                estatusHabilitado = true
                                            };

                                            _context.tblAlm_MovimientosDet.Add(nuevaEntradaDet);
                                            _context.SaveChanges();
                                            #endregion

                                            if (costoPromedio <= 0)
                                            {
                                                throw new Exception("El precio, el importe y el costo promedio no pueden ser igual o menor a cero.");
                                            }

                                            #region Salida Enkontrol Detalle
                                            var consultaMovimientosDetalle = @"INSERT INTO DBA.si_movimientos_det 
                                                        (almacen, tipo_mov, numero, partida, insumo, comentarios, area, cuenta, cantidad, precio, importe, 
                                                        partida_oc, costo_prom, obra, manzana_ini, lote_ini, interior_ini, manzana_fin, lote_fin, interior_fin, 
                                                        remision, sector_id, lote_id, folio_oc, numero_prevale, frente_ppto, partida_ppto, numero_economico,iva,
                                                        porcent_iva, folio, kit, tarjeta, secuencia) 
                                                        VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                            using (var cmd = new OdbcCommand(consultaMovimientosDetalle))
                                            {
                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                parameters.Add("@almacen", OdbcType.Numeric).Value = nuevaEntradaDet.almacen;
                                                parameters.Add("@tipo_mov", OdbcType.Numeric).Value = nuevaEntradaDet.tipo_mov;
                                                parameters.Add("@numero", OdbcType.Numeric).Value = nuevoFolio + 1;
                                                parameters.Add("@partida", OdbcType.Numeric).Value = nuevaEntradaDet.partida;
                                                parameters.Add("@insumo", OdbcType.Numeric).Value = nuevaEntradaDet.insumo;
                                                parameters.Add("@comentarios", OdbcType.Char).Value = nuevaEntradaDet.comentarios != null ? nuevaEntradaDet.comentarios : "";
                                                parameters.Add("@area", OdbcType.Numeric).Value = nuevaEntradaDet.area;
                                                parameters.Add("@cuenta", OdbcType.Numeric).Value = nuevaEntradaDet.cuenta;
                                                parameters.Add("@cantidad", OdbcType.Numeric).Value = nuevaEntradaDet.cantidad;
                                                parameters.Add("@precio", OdbcType.Numeric).Value = nuevaEntradaDet.precio; //existencias > 0 ? costoPromedio : costoPromedioEntrada;
                                                parameters.Add("@importe", OdbcType.Numeric).Value = nuevaEntradaDet.importe; //existencias > 0 ? importe : (nuevaEntradaDet.cantidad * costoPromedioEntrada);
                                                parameters.Add("@partida_oc", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@costo_prom", OdbcType.Numeric).Value = nuevaEntradaDet.precio; //existencias > 0 ? costoPromedio : costoPromedioEntrada;
                                                parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@manzana_ini", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@lote_ini", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@interior_ini", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@manzana_fin", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@lote_fin", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@interior_fin", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@remision", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                                //parameters.Add("@id_resguardo", OdbcType.Numeric).Value = DBNull.Value;
                                                //parameters.Add("@area_alm", OdbcType.Char).Value = nuevaEntradaDet.area_alm;
                                                //parameters.Add("@lado_alm", OdbcType.Char).Value = nuevaEntradaDet.lado_alm;
                                                //parameters.Add("@estante_alm", OdbcType.Char).Value = nuevaEntradaDet.estante_alm;
                                                //parameters.Add("@nivel_alm", OdbcType.Char).Value = nuevaEntradaDet.nivel_alm;
                                                //parameters.Add("@fecha_fisico", OdbcType.Date).Value = DBNull.Value;
                                                parameters.Add("@lote_id", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@folio_oc", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@numero_prevale", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@frente_ppto", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@partida_ppto", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@numero_economico", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@iva", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@porcent_iva", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@folio", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@kit", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@tarjeta", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@secuencia", OdbcType.Numeric).Value = DBNull.Value;

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;

                                                count += cmd.ExecuteNonQuery();
                                            }
                                            #endregion
                                        }

                                        #endregion

                                        trans.Commit();
                                        dbSigoplanTransaction.Commit();

                                        result.Add(SUCCESS, true);
                                    }
                                    catch (Exception e)
                                    {
                                        trans.Rollback();
                                        dbSigoplanTransaction.Rollback();

                                        result.Add(MESSAGE, e.Message);
                                        result.Add(SUCCESS, false);
                                    }
                                }
                            }
                        }
                        #endregion
                    }
                    break;
                default:
                    {
                        //Se coloca el centro de costo default por empresa.
                        if (vSesiones.sesionEmpresaActual == 1)
                        {
                            cc = "998";
                            movimiento.cc = "998";
                            movimiento.cc_destino = "998";
                        }
                        else if (vSesiones.sesionEmpresaActual == 2)
                        {
                            cc = "001";
                            movimiento.cc = "001";
                            movimiento.cc_destino = "001";
                        }


                        var empleado = 0;
                        var folioTraspaso = 1;
                        var usuarioSigoplan = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                        if (usuarioSigoplan != null)
                        {
                            empleado = usuarioSigoplan.empleado;
                        }

                        using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                        {
                            using (var con = checkConexionProductivo())
                            {
                                using (var trans = con.BeginTransaction())
                                {
                                    try
                                    {
                                        #region Verificar Ubicaciones
                                        var ubicaciones = consultaCheckProductivo(string.Format(@"SELECT * FROM si_matriz_ubicaciones WHERE almacen = {0}", almacen));
                                        List<si_matriz_ubicacionesDTO> ubicacionesAlmacen = ubicaciones.ToObject<List<si_matriz_ubicacionesDTO>>();

                                        foreach (var detalleSalida in detallesMovimientoSalida)
                                        {
                                            if (detalleSalida.area_alm != "" && detalleSalida.area_alm != null
                                                && detalleSalida.lado_alm != "" && detalleSalida.lado_alm != null
                                                && detalleSalida.estante_alm != "" && detalleSalida.estante_alm != null
                                                && detalleSalida.nivel_alm != "" && detalleSalida.nivel_alm != null)
                                            {
                                                var coincidencia = ubicacionesAlmacen.Where(x =>
                                                        x.area_alm == detalleSalida.area_alm
                                                        && x.lado_alm == detalleSalida.lado_alm
                                                        && x.estante_alm == detalleSalida.estante_alm
                                                        && x.nivel_alm == detalleSalida.nivel_alm).ToList();
                                                if (coincidencia.Count() <= 0)
                                                {
                                                    throw new Exception("Algunas de las ubicaciones no existen en el almacén " + almacen.ToString() + ".");
                                                }
                                            }
                                        }
                                        foreach (var detalleSalida in detallesMovimientoEntrada)
                                        {
                                            if (detalleSalida.area_alm != "" && detalleSalida.area_alm != null
                                                && detalleSalida.lado_alm != "" && detalleSalida.lado_alm != null
                                                && detalleSalida.estante_alm != "" && detalleSalida.estante_alm != null
                                                && detalleSalida.nivel_alm != "" && detalleSalida.nivel_alm != null)
                                            {
                                                var coincidencia = ubicacionesAlmacen.Where(x =>
                                                        x.area_alm == detalleSalida.area_alm
                                                        && x.lado_alm == detalleSalida.lado_alm
                                                        && x.estante_alm == detalleSalida.estante_alm
                                                        && x.nivel_alm == detalleSalida.nivel_alm).ToList();
                                                if (coincidencia.Count() <= 0)
                                                {
                                                    throw new Exception("Algunas de las ubicaciones no existen en el almacén " + almacen.ToString() + ".");
                                                }
                                            }
                                        }
                                        #endregion

                                        #region Traspaso Salida Insumo
                                        int count = 0;

                                        #region Calcular Ultimos Folios Salida
                                        var ultimoMovimientoEK = consultaCheckProductivo(
                                            string.Format(@"SELECT 
                                                    TOP 1 numero, folio_traspaso 
                                                FROM si_movimientos 
                                                WHERE almacen = {0} AND tipo_mov = {1} 
                                                ORDER BY numero DESC", almacen, 52)
                                            );

                                        var nuevoFolio = 0;

                                        if (ultimoMovimientoEK != null)
                                        {
                                            var ultimoMovimiento = ((List<SurtidoDetDTO>)ultimoMovimientoEK.ToObject<List<SurtidoDetDTO>>())[0];
                                            nuevoFolio = ultimoMovimiento.numero;
                                        }

                                        decimal total = 0;
                                        var costoPromedio = getCostoPromedioKardex(almacen, insumo);

                                        foreach (var item in detallesMovimientoSalida) total += costoPromedio * item.cantidad;

                                        var ultimoFolioTraspasoEK = consultaCheckProductivo(
                                            string.Format(@"SELECT TOP 1 
                                                            almacen, tipo_mov, numero, cc, folio_traspaso 
                                                        FROM si_movimientos 
                                                        WHERE almacen = {0} AND cc = '{1}' 
                                                        ORDER BY folio_traspaso DESC", almacen, cc)
                                        );

                                        if (ultimoFolioTraspasoEK != null)
                                        {
                                            var ultimoFolioTraspaso = ((List<dynamic>)ultimoFolioTraspasoEK.ToObject<List<dynamic>>())[0];

                                            folioTraspaso = ultimoFolioTraspaso.folio_traspaso != null ? ((int)ultimoFolioTraspaso.folio_traspaso + 1) : 1;
                                        }
                                        #endregion

                                        #region Salida SIGOPLAN
                                        movimiento.tipo_mov = 52;
                                        movimiento.numero = nuevoFolio + 1;
                                        movimiento.periodo = DateTime.Now.Month;
                                        movimiento.ano = DateTime.Now.Year;
                                        movimiento.orden_ct = folioTraspaso;
                                        movimiento.fecha = DateTime.Now.Date;
                                        movimiento.total = total;
                                        movimiento.requisicion = null;

                                        _context.tblAlm_Movimientos.Add(movimiento);
                                        _context.SaveChanges();

                                        if (movimiento.total <= 0)
                                        {
                                            throw new Exception("El total no puede ser igual o menor a cero.");
                                        }
                                        #endregion

                                        #region SalidaEnkontrol
                                        var consultaMovimientos = @"INSERT INTO si_movimientos 
                                         (almacen, tipo_mov, numero, cc, compania, periodo, ano, orden_ct, frente, fecha, proveedor, total, estatus, 
                                         transferida, poliza, empleado, alm_destino, cc_destino, comentarios, tipo_trasp, numero_destino, tp, year_poliza, 
                                         mes_poliza, tipo_cambio, hora, fecha_modifica, empleado_modifica, destajista, obra, id_residente, factura, sector_id, 
                                         tc_cc, paquete, tipo_cargo, cargo_destajista, cargo_id_residente, embarque, orden_prod, folio_traspaso, bit_sin_ubicacion) 
                                         VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                        using (var cmd = new OdbcCommand(consultaMovimientos))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@almacen", OdbcType.Numeric).Value = movimiento.almacen;
                                            parameters.Add("@tipo_mov", OdbcType.Numeric).Value = movimiento.tipo_mov;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = movimiento.numero;
                                            parameters.Add("@cc", OdbcType.Char).Value = movimiento.cc;
                                            parameters.Add("@compania", OdbcType.Numeric).Value = movimiento.compania;
                                            parameters.Add("@periodo", OdbcType.Numeric).Value = movimiento.periodo;
                                            parameters.Add("@ano", OdbcType.Numeric).Value = movimiento.ano;
                                            parameters.Add("@orden_ct", OdbcType.Numeric).Value = movimiento.orden_ct;
                                            parameters.Add("@frente", OdbcType.Numeric).Value = movimiento.frente;
                                            parameters.Add("@fecha", OdbcType.Date).Value = movimiento.fecha.Date;
                                            parameters.Add("@proveedor", OdbcType.Numeric).Value = movimiento.proveedor;
                                            parameters.Add("@total", OdbcType.Numeric).Value = movimiento.total;
                                            parameters.Add("@estatus", OdbcType.Char).Value = movimiento.estatus;
                                            parameters.Add("@transferida", OdbcType.Char).Value = movimiento.transferida;
                                            parameters.Add("@poliza", OdbcType.Numeric).Value = 0;
                                            parameters.Add("@empleado", OdbcType.Numeric).Value = empleado;
                                            parameters.Add("@alm_destino", OdbcType.Numeric).Value = movimiento.alm_destino;
                                            parameters.Add("@cc_destino", OdbcType.Char).Value = movimiento.cc_destino;
                                            parameters.Add("@comentarios", OdbcType.Char).Value = movimiento.comentarios != null ? movimiento.comentarios : "";
                                            parameters.Add("@tipo_trasp", OdbcType.Char).Value = movimiento.tipo_trasp;
                                            parameters.Add("@numero_destino", OdbcType.Numeric).Value = 0;
                                            parameters.Add("@tp", OdbcType.Char).Value = DBNull.Value;
                                            parameters.Add("@year_poliza", OdbcType.Numeric).Value = DateTime.Now.Year;
                                            parameters.Add("@mes_poliza", OdbcType.Numeric).Value = DateTime.Now.Month;
                                            parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = movimiento.tipo_cambio;
                                            parameters.Add("@hora", OdbcType.Time).Value = DateTime.Now.TimeOfDay;
                                            parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                            parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = empleado;
                                            parameters.Add("@destajista", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                            parameters.Add("@id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@factura", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@tc_cc", OdbcType.Numeric).Value = 1;
                                            parameters.Add("@paquete", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@tipo_cargo", OdbcType.Numeric).Value = 0;
                                            parameters.Add("@cargo_Destajista", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@cargo_id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@embarque", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@orden_prod", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@folio_traspaso", OdbcType.Numeric).Value = folioTraspaso;
                                            parameters.Add("@bit_sin_ubicacion", OdbcType.Numeric).Value = 0;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }
                                        #endregion

                                        int partidaContador = 1;
                                        foreach (var ubi in detallesMovimientoSalida)
                                        {
                                            int partida = partidaContador++;

                                            #region Salida SIGOPLAN Detalle
                                            tblAlm_MovimientosDet nuevaSalidaDet = new tblAlm_MovimientosDet
                                            {
                                                almacen = almacen,
                                                tipo_mov = 52,
                                                numero = nuevoFolio + 1,
                                                partida = partida,
                                                insumo = insumo,
                                                comentarios = "", //Agarrar los comentarios del front-end.
                                                area = 99,
                                                cuenta = 99,
                                                cantidad = ubi.cantidad,
                                                precio = costoPromedio, //precio = existencias > 0 ? costoPromedio : precioEntrada,
                                                importe = ubi.cantidad * costoPromedio, //importe = ubi.cantidadMovimiento * (existencias > 0 ? costoPromedio : precioEntrada),
                                                id_resguardo = 0,
                                                area_alm = ubi.area_alm ?? "",
                                                lado_alm = ubi.lado_alm ?? "",
                                                estante_alm = ubi.estante_alm ?? "",
                                                nivel_alm = ubi.nivel_alm ?? "",
                                                transporte = "",
                                                estatusHabilitado = true
                                            };

                                            _context.tblAlm_MovimientosDet.Add(nuevaSalidaDet);
                                            _context.SaveChanges();
                                            #endregion

                                            if (costoPromedio <= 0)
                                            {
                                                throw new Exception("El precio, el importe y el costo promedio no pueden ser igual o menor a cero.");
                                            }

                                            #region Salida Enkontrol Detalle
                                            var consultaMovimientosDetalle = @"INSERT INTO si_movimientos_det 
                                                        (almacen, tipo_mov, numero, partida, insumo, comentarios, area, cuenta, cantidad, precio, importe, 
                                                        partida_oc, costo_prom, obra, manzana_ini, lote_ini, interior_ini, manzana_fin, lote_fin, interior_fin, 
                                                        remision, sector_id, id_resguardo, area_alm, lado_alm, estante_alm, nivel_alm, fecha_fisico) 
                                                        VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                            using (var cmd = new OdbcCommand(consultaMovimientosDetalle))
                                            {
                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                parameters.Add("@almacen", OdbcType.Numeric).Value = nuevaSalidaDet.almacen;
                                                parameters.Add("@tipo_mov", OdbcType.Numeric).Value = nuevaSalidaDet.tipo_mov;
                                                parameters.Add("@numero", OdbcType.Numeric).Value = nuevoFolio + 1;
                                                parameters.Add("@partida", OdbcType.Numeric).Value = nuevaSalidaDet.partida;
                                                parameters.Add("@insumo", OdbcType.Numeric).Value = nuevaSalidaDet.insumo;
                                                parameters.Add("@comentarios", OdbcType.Char).Value = nuevaSalidaDet.comentarios != null ? nuevaSalidaDet.comentarios : "";
                                                parameters.Add("@area", OdbcType.Numeric).Value = nuevaSalidaDet.area;
                                                parameters.Add("@cuenta", OdbcType.Numeric).Value = nuevaSalidaDet.cuenta;
                                                parameters.Add("@cantidad", OdbcType.Numeric).Value = nuevaSalidaDet.cantidad;
                                                parameters.Add("@precio", OdbcType.Numeric).Value = nuevaSalidaDet.precio; //existencias > 0 ? costoPromedio : costoPromedioEntrada;
                                                parameters.Add("@importe", OdbcType.Numeric).Value = nuevaSalidaDet.importe; //existencias > 0 ? importe : (nuevaSalidaDet.cantidad * costoPromedioEntrada);
                                                parameters.Add("@partida_oc", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@costo_prom", OdbcType.Numeric).Value = nuevaSalidaDet.precio; //existencias > 0 ? costoPromedio : costoPromedioEntrada;
                                                parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@manzana_ini", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@lote_ini", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@interior_ini", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@manzana_fin", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@lote_fin", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@interior_fin", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@remision", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@id_resguardo", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@area_alm", OdbcType.Char).Value = nuevaSalidaDet.area_alm;
                                                parameters.Add("@lado_alm", OdbcType.Char).Value = nuevaSalidaDet.lado_alm;
                                                parameters.Add("@estante_alm", OdbcType.Char).Value = nuevaSalidaDet.estante_alm;
                                                parameters.Add("@nivel_alm", OdbcType.Char).Value = nuevaSalidaDet.nivel_alm;
                                                parameters.Add("@fecha_fisico", OdbcType.Date).Value = DBNull.Value;

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;

                                                count += cmd.ExecuteNonQuery();
                                            }
                                            #endregion
                                        }

                                        #endregion

                                        #region Traspaso Entrada Insumo

                                        #region Calcular Ultimos Folios Entrada
                                        ultimoMovimientoEK = consultaCheckProductivo(
                                            string.Format(@"SELECT 
                                                    TOP 1 numero, folio_traspaso 
                                                FROM si_movimientos 
                                                WHERE almacen = {0} AND tipo_mov = {1} 
                                                ORDER BY numero DESC", almacen, 2)
                                            );

                                        nuevoFolio = 0;

                                        if (ultimoMovimientoEK != null)
                                        {
                                            var ultimoMovimiento = ((List<SurtidoDetDTO>)ultimoMovimientoEK.ToObject<List<SurtidoDetDTO>>())[0];
                                            nuevoFolio = ultimoMovimiento.numero;
                                        }

                                        total = 0;

                                        foreach (var item in detallesMovimientoEntrada) total += costoPromedio * item.cantidad;
                                        #endregion

                                        #region Entrada SIGOPLAN
                                        movimiento.tipo_mov = 2;
                                        movimiento.numero = nuevoFolio + 1;
                                        movimiento.periodo = DateTime.Now.Month;
                                        movimiento.ano = DateTime.Now.Year;
                                        movimiento.orden_ct = folioTraspaso;
                                        movimiento.fecha = DateTime.Now.Date;
                                        movimiento.total = total;
                                        movimiento.requisicion = null;

                                        _context.tblAlm_Movimientos.Add(movimiento);
                                        _context.SaveChanges();

                                        if (movimiento.total <= 0)
                                        {
                                            throw new Exception("El total no puede ser igual o menor a cero.");
                                        }
                                        #endregion

                                        #region Entrada Enkontrol
                                        consultaMovimientos = @"INSERT INTO si_movimientos 
                                         (almacen, tipo_mov, numero, cc, compania, periodo, ano, orden_ct, frente, fecha, proveedor, total, estatus, 
                                         transferida, poliza, empleado, alm_destino, cc_destino, comentarios, tipo_trasp, numero_destino, tp, year_poliza, 
                                         mes_poliza, tipo_cambio, hora, fecha_modifica, empleado_modifica, destajista, obra, id_residente, factura, sector_id, 
                                         tc_cc, paquete, tipo_cargo, cargo_destajista, cargo_id_residente, embarque, orden_prod, folio_traspaso, bit_sin_ubicacion) 
                                         VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                        using (var cmd = new OdbcCommand(consultaMovimientos))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@almacen", OdbcType.Numeric).Value = movimiento.almacen;
                                            parameters.Add("@tipo_mov", OdbcType.Numeric).Value = movimiento.tipo_mov;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = movimiento.numero;
                                            parameters.Add("@cc", OdbcType.Char).Value = movimiento.cc;
                                            parameters.Add("@compania", OdbcType.Numeric).Value = movimiento.compania;
                                            parameters.Add("@periodo", OdbcType.Numeric).Value = movimiento.periodo;
                                            parameters.Add("@ano", OdbcType.Numeric).Value = movimiento.ano;
                                            parameters.Add("@orden_ct", OdbcType.Numeric).Value = movimiento.orden_ct;
                                            parameters.Add("@frente", OdbcType.Numeric).Value = movimiento.frente;
                                            parameters.Add("@fecha", OdbcType.Date).Value = movimiento.fecha.Date;
                                            parameters.Add("@proveedor", OdbcType.Numeric).Value = movimiento.proveedor;
                                            parameters.Add("@total", OdbcType.Numeric).Value = movimiento.total;
                                            parameters.Add("@estatus", OdbcType.Char).Value = movimiento.estatus;
                                            parameters.Add("@transferida", OdbcType.Char).Value = movimiento.transferida;
                                            parameters.Add("@poliza", OdbcType.Numeric).Value = 0;
                                            parameters.Add("@empleado", OdbcType.Numeric).Value = empleado;
                                            parameters.Add("@alm_destino", OdbcType.Numeric).Value = movimiento.alm_destino;
                                            parameters.Add("@cc_destino", OdbcType.Char).Value = movimiento.cc_destino;
                                            parameters.Add("@comentarios", OdbcType.Char).Value = movimiento.comentarios != null ? movimiento.comentarios : "";
                                            parameters.Add("@tipo_trasp", OdbcType.Char).Value = movimiento.tipo_trasp;
                                            parameters.Add("@numero_destino", OdbcType.Numeric).Value = 0;
                                            parameters.Add("@tp", OdbcType.Char).Value = DBNull.Value;
                                            parameters.Add("@year_poliza", OdbcType.Numeric).Value = DateTime.Now.Year;
                                            parameters.Add("@mes_poliza", OdbcType.Numeric).Value = DateTime.Now.Month;
                                            parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = movimiento.tipo_cambio;
                                            parameters.Add("@hora", OdbcType.Time).Value = DateTime.Now.TimeOfDay;
                                            parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                            parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = empleado;
                                            parameters.Add("@destajista", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                            parameters.Add("@id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@factura", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@tc_cc", OdbcType.Numeric).Value = 1;
                                            parameters.Add("@paquete", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@tipo_cargo", OdbcType.Numeric).Value = 0;
                                            parameters.Add("@cargo_Destajista", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@cargo_id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@embarque", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@orden_prod", OdbcType.Numeric).Value = DBNull.Value;
                                            parameters.Add("@folio_traspaso", OdbcType.Numeric).Value = folioTraspaso;
                                            parameters.Add("@bit_sin_ubicacion", OdbcType.Numeric).Value = 0;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }
                                        #endregion

                                        partidaContador = 1;
                                        foreach (var ubi in detallesMovimientoEntrada)
                                        {
                                            int partida = partidaContador++;

                                            #region Entrada SIGOPLAN Detalle
                                            tblAlm_MovimientosDet nuevaEntradaDet = new tblAlm_MovimientosDet
                                            {
                                                almacen = almacen,
                                                tipo_mov = 2,
                                                numero = nuevoFolio + 1,
                                                partida = partida,
                                                insumo = insumo,
                                                comentarios = "", //Agarrar los comentarios del front-end.
                                                area = 99,
                                                cuenta = 99,
                                                cantidad = ubi.cantidad,
                                                precio = costoPromedio, //precio = existencias > 0 ? costoPromedio : precioEntrada,
                                                importe = ubi.cantidad * costoPromedio, //importe = ubi.cantidadMovimiento * (existencias > 0 ? costoPromedio : precioEntrada),
                                                id_resguardo = 0,
                                                area_alm = ubi.area_alm ?? "",
                                                lado_alm = ubi.lado_alm ?? "",
                                                estante_alm = ubi.estante_alm ?? "",
                                                nivel_alm = ubi.nivel_alm ?? "",
                                                transporte = "",
                                                estatusHabilitado = true
                                            };

                                            _context.tblAlm_MovimientosDet.Add(nuevaEntradaDet);
                                            _context.SaveChanges();
                                            #endregion

                                            if (costoPromedio <= 0)
                                            {
                                                throw new Exception("El precio, el importe y el costo promedio no pueden ser igual o menor a cero.");
                                            }

                                            #region Salida Enkontrol Detalle
                                            var consultaMovimientosDetalle = @"INSERT INTO si_movimientos_det 
                                                        (almacen, tipo_mov, numero, partida, insumo, comentarios, area, cuenta, cantidad, precio, importe, 
                                                        partida_oc, costo_prom, obra, manzana_ini, lote_ini, interior_ini, manzana_fin, lote_fin, interior_fin, 
                                                        remision, sector_id, id_resguardo, area_alm, lado_alm, estante_alm, nivel_alm, fecha_fisico) 
                                                        VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                            using (var cmd = new OdbcCommand(consultaMovimientosDetalle))
                                            {
                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                parameters.Add("@almacen", OdbcType.Numeric).Value = nuevaEntradaDet.almacen;
                                                parameters.Add("@tipo_mov", OdbcType.Numeric).Value = nuevaEntradaDet.tipo_mov;
                                                parameters.Add("@numero", OdbcType.Numeric).Value = nuevoFolio + 1;
                                                parameters.Add("@partida", OdbcType.Numeric).Value = nuevaEntradaDet.partida;
                                                parameters.Add("@insumo", OdbcType.Numeric).Value = nuevaEntradaDet.insumo;
                                                parameters.Add("@comentarios", OdbcType.Char).Value = nuevaEntradaDet.comentarios != null ? nuevaEntradaDet.comentarios : "";
                                                parameters.Add("@area", OdbcType.Numeric).Value = nuevaEntradaDet.area;
                                                parameters.Add("@cuenta", OdbcType.Numeric).Value = nuevaEntradaDet.cuenta;
                                                parameters.Add("@cantidad", OdbcType.Numeric).Value = nuevaEntradaDet.cantidad;
                                                parameters.Add("@precio", OdbcType.Numeric).Value = nuevaEntradaDet.precio; //existencias > 0 ? costoPromedio : costoPromedioEntrada;
                                                parameters.Add("@importe", OdbcType.Numeric).Value = nuevaEntradaDet.importe; //existencias > 0 ? importe : (nuevaEntradaDet.cantidad * costoPromedioEntrada);
                                                parameters.Add("@partida_oc", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@costo_prom", OdbcType.Numeric).Value = nuevaEntradaDet.precio; //existencias > 0 ? costoPromedio : costoPromedioEntrada;
                                                parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@manzana_ini", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@lote_ini", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@interior_ini", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@manzana_fin", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@lote_fin", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@interior_fin", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@remision", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@id_resguardo", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@area_alm", OdbcType.Char).Value = nuevaEntradaDet.area_alm;
                                                parameters.Add("@lado_alm", OdbcType.Char).Value = nuevaEntradaDet.lado_alm;
                                                parameters.Add("@estante_alm", OdbcType.Char).Value = nuevaEntradaDet.estante_alm;
                                                parameters.Add("@nivel_alm", OdbcType.Char).Value = nuevaEntradaDet.nivel_alm;
                                                parameters.Add("@fecha_fisico", OdbcType.Date).Value = DBNull.Value;

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;

                                                count += cmd.ExecuteNonQuery();
                                            }
                                            #endregion
                                        }

                                        #endregion

                                        trans.Commit();
                                        dbSigoplanTransaction.Commit();

                                        result.Add(SUCCESS, true);
                                    }
                                    catch (Exception e)
                                    {
                                        trans.Rollback();
                                        dbSigoplanTransaction.Rollback();

                                        result.Add(MESSAGE, e.Message);
                                        result.Add(SUCCESS, false);
                                    }
                                }
                            }
                        }
                    }
                    break;
            }

            return result;
        }
        #endregion

        public List<AreaAlmacenDTO> getAreaAlmacen(string AreaCuenta)
        {
            List<AreaAlmacenDTO> lst = new List<AreaAlmacenDTO>();

            try
            {
                if (AreaCuenta == null)
                {
                    AreaCuenta = "";
                }
                var lstAlmacenes = getAlmacenesArea();
                List<tblAlm_RelAreaCuentaXAlmacen> lstAreCuenta = _context.tblAlm_RelAreaCuentaXAlmacen.ToList();
                List<AlmacenesDTO> lstAreCuentaDet = _context.tblAlm_RelAreaCuentaXAlmacenDet.ToList().Select(y => new AlmacenesDTO
                {
                    almacen = y.Almacen,
                    descripcion = y.Almacen + " - " + lstAlmacenes.Where(n => n.almacen == y.Almacen).Select(n => n.descripcion).FirstOrDefault(),
                    idRelacion = y.idRelacion,
                }).ToList();

                if (AreaCuenta != "")
                {

                    lst = lstAreCuenta.Where(x => x.AreaCuenta == AreaCuenta).Select(y => new AreaAlmacenDTO
                    {
                        id = y.id,
                        Asignacion = y.Asignacion,
                        AreaCuenta = y.AreaCuenta,
                        Descripcion = y.AreaCuenta + " - " + _context.tblP_CC.Where(x => x.areaCuenta == y.AreaCuenta).Select(n => n.descripcion).FirstOrDefault(),
                        lstAlmacen = lstAreCuentaDet.Where(n => n.idRelacion == y.id).ToList()
                    }).ToList();
                }
                else
                {

                    lst = lstAreCuenta.Select(y => new AreaAlmacenDTO
                    {
                        id = y.id,
                        Asignacion = y.Asignacion,
                        AreaCuenta = y.AreaCuenta,
                        Descripcion = y.AreaCuenta + " - " + _context.tblP_CC.Where(x => x.areaCuenta == y.AreaCuenta).Select(n => n.descripcion).FirstOrDefault(),
                        lstAlmacen = lstAreCuentaDet.Where(n => n.idRelacion == y.id).ToList()
                    }).ToList();
                }


            }
            catch (Exception ex)
            {

                throw;
            }
            return lst;
        }
        public AreaAlmacenDTO GuardarEditarAreaAlmacen(AreaAlmacenDTO parametros)
        {
            AreaAlmacenDTO Guardado = new AreaAlmacenDTO();
            try
            {

                List<tblAlm_RelAreaCuentaXAlmacenDet> lstAlmacenes = new List<tblAlm_RelAreaCuentaXAlmacenDet>();
                tblAlm_RelAreaCuentaXAlmacen objAreaAlmacen = _context.tblAlm_RelAreaCuentaXAlmacen.Where(x => x.id == parametros.id).FirstOrDefault();
                if (objAreaAlmacen == null)
                {

                    objAreaAlmacen = new tblAlm_RelAreaCuentaXAlmacen();
                    objAreaAlmacen.Asignacion = parametros.Asignacion;
                    objAreaAlmacen.AreaCuenta = parametros.AreaCuenta;
                    _context.tblAlm_RelAreaCuentaXAlmacen.Add(objAreaAlmacen);
                    _context.SaveChanges();
                    int idRelacion = _context.tblAlm_RelAreaCuentaXAlmacen.OrderByDescending(x => x.id).Select(y => y.id).FirstOrDefault();

                    tblAlm_RelAreaCuentaXAlmacenDet detalle;
                    foreach (var item in parametros.lstAlmacen)
                    {
                        var ob = _context.tblAlm_RelAreaCuentaXAlmacenDet.Where(r => r.idRelacion == idRelacion && r.Almacen == item.almacen).FirstOrDefault();
                        if (ob == null)
                        {
                            detalle = new tblAlm_RelAreaCuentaXAlmacenDet();
                            int objID = _context.tblAlm_RelAreaCuentaXAlmacenDet.Where(r => r.idRelacion == idRelacion).OrderByDescending(n => n.Prioridad).Select(y => y.Prioridad).FirstOrDefault();
                            objID += 1;
                            detalle.idRelacion = idRelacion;
                            detalle.Almacen = item.almacen;
                            detalle.Prioridad = objID;
                            detalle.TipoAlmacen = item.TipoAlmacen;
                            _context.tblAlm_RelAreaCuentaXAlmacenDet.Add(detalle);
                            _context.SaveChanges();
                        }
                    }
                    Guardado.mensaje = "Guardado Exitoso!";

                }
                else
                {
                    objAreaAlmacen.Asignacion = parametros.Asignacion;
                    objAreaAlmacen.AreaCuenta = parametros.AreaCuenta;
                    _context.SaveChanges();

                    List<tblAlm_RelAreaCuentaXAlmacenDet> detalle = _context.tblAlm_RelAreaCuentaXAlmacenDet.Where(x => x.idRelacion == parametros.id).ToList();
                    _context.tblAlm_RelAreaCuentaXAlmacenDet.RemoveRange(detalle);
                    _context.SaveChanges();

                    tblAlm_RelAreaCuentaXAlmacenDet detalles;
                    foreach (var item in parametros.lstAlmacen)
                    {
                        var ob = _context.tblAlm_RelAreaCuentaXAlmacenDet.Where(r => r.idRelacion == parametros.id && r.Almacen == item.almacen).FirstOrDefault();
                        if (ob == null)
                        {
                            detalles = new tblAlm_RelAreaCuentaXAlmacenDet();
                            int objID = _context.tblAlm_RelAreaCuentaXAlmacenDet.Where(r => r.idRelacion == parametros.id).OrderByDescending(n => n.Prioridad).Select(y => y.Prioridad).FirstOrDefault();
                            objID += 1;
                            detalles.idRelacion = objAreaAlmacen.id;
                            detalles.Almacen = item.almacen;
                            detalles.Prioridad = objID;
                            detalles.TipoAlmacen = item.TipoAlmacen;

                            _context.tblAlm_RelAreaCuentaXAlmacenDet.Add(detalles);
                            _context.SaveChanges();
                        }
                    }

                    Guardado.mensaje = "Editado Exitoso!";
                }


            }
            catch (Exception ex)
            {
                Guardado.mensaje = "Ocurrio algun problema comuniquese con el departamento de ti.";
                throw;
            }
            return Guardado;
        }
        public AreaAlmacenDTO EliminarAreaAlmacen(int id)
        {
            AreaAlmacenDTO Eliminado = new AreaAlmacenDTO();
            try
            {
                tblAlm_RelAreaCuentaXAlmacen objAreaAlmacen = _context.tblAlm_RelAreaCuentaXAlmacen.Where(x => x.id == id).FirstOrDefault();
                if (objAreaAlmacen != null)
                {
                    List<tblAlm_RelAreaCuentaXAlmacenDet> lst = _context.tblAlm_RelAreaCuentaXAlmacenDet.Where(x => x.idRelacion == objAreaAlmacen.id).ToList();
                    _context.tblAlm_RelAreaCuentaXAlmacenDet.RemoveRange(lst);
                    _context.tblAlm_RelAreaCuentaXAlmacen.Remove(objAreaAlmacen);
                    _context.SaveChanges();
                    Eliminado.mensaje = "Eliminado Exitoso!";
                }
            }
            catch (Exception)
            {
                Eliminado.mensaje = "Ocurrio algun problema comuniquese con el departamento de ti.";
                throw;
            }
            return Eliminado;
        }
        public List<ComboDTO> getAlmacenesAreaDisponibles(int idRelacion)
        {
            var r = new List<si_almacenDTO>();
            List<ComboDTO> lstResultado = new List<ComboDTO>();
            try
            {
                //var tengoAlmacenes = _context.tblAlm_RelAreaCuentaXAlmacenDet.Where(x => x.idRelacion != idRelacion).ToList().Select(y => y.Almacen).ToList();
                //if (tengoAlmacenes.Count() != 0)
                //{
                //    r = getAlmacenesArea();
                //    lstResultado = r.Where(x => !tengoAlmacenes.Contains(x.almacen)).ToList().Select(y => new ComboDTO
                //    {
                //        Value = y.almacen.ToString(),
                //        Text = y.almacen.ToString() + " - " + y.descripcion,
                //    }).ToList();
                //}
                //else
                //{
                r = getAlmacenesArea();
                lstResultado = r.ToList().Select(y => new ComboDTO
                {
                    Value = y.almacen.ToString(),
                    Text = y.almacen.ToString() + " - " + y.descripcion,
                }).ToList();
                //}

            }
            catch (Exception ex)
            {
                LogError(0, 0, "AlmacenController", "GetAlmacenes", ex, AccionEnum.CONSULTA, 0, 0);
            }

            return lstResultado;
        }
        public List<ComboDTO> getAreaCuentas(int idRelacion)
        {
            List<ComboDTO> lstResultado = new List<ComboDTO>();
            try
            {
                var getAreasAsginadas = _context.tblAlm_RelAreaCuentaXAlmacen.Where(x => x.id != idRelacion).ToList().Select(y => y.AreaCuenta).ToList();
                if (getAreasAsginadas.Count() != 0)
                {
                    lstResultado = _context.tblP_CC.Where(x => x.estatus && !getAreasAsginadas.Contains(x.areaCuenta)).ToList().Select(y => new ComboDTO
                    {
                        Value = y.areaCuenta,
                        Text = y.areaCuenta + " - " + y.descripcion
                    }).ToList();
                }
                else
                {
                    lstResultado = _context.tblP_CC.Where(x => x.estatus).ToList().Select(y => new ComboDTO
                    {
                        Value = y.areaCuenta,
                        Text = y.areaCuenta + " - " + y.descripcion
                    }).ToList();
                }
            }
            catch (Exception ex)
            {
                LogError(0, 0, "AlmacenController", "GetAlmacenes", ex, AccionEnum.CONSULTA, 0, 0);
            }

            return lstResultado;
        }

        public List<ComboDTO> getTodasAreaCuentas()
        {
            List<ComboDTO> lstResultado = new List<ComboDTO>();
            try
            {
                lstResultado = _context.tblP_CC.Where(x => x.estatus).ToList().Select(y => new ComboDTO
                {
                    Value = y.areaCuenta,
                    Text = y.areaCuenta + " - " + y.descripcion
                }).ToList();
            }
            catch (Exception ex)
            {
                LogError(0, 0, "AlmacenController", "GetAlmacenes", ex, AccionEnum.CONSULTA, 0, 0);
            }

            return lstResultado;
        }

        private decimal calcularCostoPromedioStarsoft(int tipo_mov, int almacen, string insumoPeru, decimal cantidad, decimal precio, MainContextPeruStarSoft003BDCOMUN _starsoft)
        {
            decimal costoPromedio = 0;

            var registroStock = _starsoft.STKART.ToList().FirstOrDefault(x => Int32.Parse(x.STALMA) == almacen && x.STCODIGO == insumoPeru);

            var montoActual = (decimal)registroStock.STSKDIS * (decimal)registroStock.STKPREPRO;

            if (tipo_mov < 50)
            {
                var montoFinal = montoActual + (cantidad * precio);
                var existenciasFinal = (decimal)registroStock.STSKDIS + cantidad;

                costoPromedio = montoFinal / existenciasFinal;
            }
            else if (tipo_mov > 50)
            {
                var montoFinal = montoActual - (cantidad * precio);
                var existenciasFinal = (decimal)registroStock.STSKDIS - cantidad;

                costoPromedio = existenciasFinal > 0 ? (montoFinal / existenciasFinal) : 0;
            }

            return costoPromedio;
        }

        public List<si_almacenDTO> getAlmacenesArea()
        {
            var r = new List<si_almacenDTO>();
            try
            {
                var query_si_almacen = new OdbcConsultaDTO();

                query_si_almacen.consulta = "SELECT * FROM si_almacen";

                r = _contextEnkontrol.Select<si_almacenDTO>(getEnkontrolEnumADM(), query_si_almacen).ToList();

            }
            catch (Exception ex)
            {
                LogError(0, 0, "AlmacenController", "GetAlmacenes", ex, AccionEnum.CONSULTA, 0, 0);
            }

            return r;
        }

        public Dictionary<string, object> getDetalleAreaAlmacen(int idRelacion)
        {
            var objTabla = new tblAlm_RelAreaCuentaXAlmacen();
            var lstTabla = new List<tblAlm_RelAreaCuentaXAlmacenDet>();
            Dictionary<string, object> restult = new Dictionary<string, object>();
            try
            {
                var lstAlmacenes = getAlmacenesArea();
                objTabla = _context.tblAlm_RelAreaCuentaXAlmacen.Where(r => r.id == idRelacion).FirstOrDefault();
                lstTabla = _context.tblAlm_RelAreaCuentaXAlmacenDet.Where(r => r.idRelacion == idRelacion).ToList();
                var lst = lstTabla.Select(y => new
                {
                    id = y.id,
                    AreaCuenta = objTabla.AreaCuenta,
                    idAlmacen = y.Almacen,
                    Descripcion = y.Almacen + " - " + lstAlmacenes.Where(x => x.almacen == y.Almacen).Select(n => n.descripcion).FirstOrDefault(),
                    Prioridad = y.Prioridad,
                    TipoAlmacen = y.TipoAlmacen
                }).ToList();

                restult.Add(ITEMS, lst);

            }
            catch (Exception ex)
            {
                throw;
            }
            return restult;
        }

        public Dictionary<string, object> CargarExcelSalidaTraspaso(HttpFileCollectionBase archivos)
        {
            var result = new Dictionary<string, object>();

            try
            {
                if (archivos.Count == 0)
                {
                    throw new Exception("No se cargaron archivos.");
                }

                for (int i = 0; i < archivos.Count; i++)
                {
                    HttpPostedFileBase archivo = archivos[i];

                    List<List<string>> tabla = new List<List<string>>();

                    #region Convertir Archivo a Arreglo de bytes.
                    byte[] data;

                    using (Stream inputStream = archivo.InputStream)
                    {
                        MemoryStream memoryStream = inputStream as MemoryStream;

                        if (memoryStream == null)
                        {
                            memoryStream = new MemoryStream();
                            inputStream.CopyTo(memoryStream);
                        }

                        data = memoryStream.ToArray();
                    }
                    #endregion

                    #region Leer Arreglo de bytes.
                    using (MemoryStream stream = new MemoryStream(data))
                    using (ExcelPackage excelPackage = new ExcelPackage(stream))
                    {
                        //loop all worksheets
                        foreach (ExcelWorksheet worksheet in excelPackage.Workbook.Worksheets)
                        {
                            //loop all rows
                            for (int x = worksheet.Dimension.Start.Row; x <= worksheet.Dimension.End.Row; x++)
                            {
                                List<string> fila = new List<string>();

                                //loop all columns in a row
                                for (int y = worksheet.Dimension.Start.Column; y <= worksheet.Dimension.End.Column; y++)
                                {
                                    //add the cell data to the List
                                    if (worksheet.Cells[x, y].Value != null)
                                    {
                                        fila.Add(worksheet.Cells[x, y].Value.ToString());
                                    }
                                    else
                                    {
                                        fila.Add("");
                                    }
                                }

                                if (x > 1 && fila[0] != "")
                                {
                                    tabla.Add(fila);
                                }
                            }
                        }
                    }
                    #endregion

                    var listaTablasSeparadas = tabla.ChunkBy<List<string>>(200);

                    foreach (var tablaChunk in listaTablasSeparadas)
                    {
                        List<TraspasoDTO> listaTraspaso = new List<TraspasoDTO>();

                        foreach (var fila in tablaChunk)
                        {
                            int almacenOrigen = Int32.Parse(fila[0]);
                            string ccOrigen = fila[1];
                            int almacenDestino = Int32.Parse(fila[2]);
                            string ccDestino = fila[3];
                            string comentarios = fila[4];
                            int insumo = Int32.Parse(fila[5]);
                            decimal costoPromedio = getCostoPromedioKardex(almacenOrigen, insumo);
                            decimal cantidad = Convert.ToDecimal(fila[6], CultureInfo.InvariantCulture);
                            decimal importe = cantidad * costoPromedio;
                            string[] ubicacion = fila[7].Split(' ');
                            string area_alm = ubicacion[0];
                            string lado_alm = ubicacion[1];
                            string estante_alm = ubicacion[2];
                            string nivel_alm = ubicacion[3];

                            //Se hace una lista de ubicaciones aunque solo tenga un elemento ya que así se hace en la vista de traspasos directos para ajustarse al código de la función "guardarAutorizacionesTraspasos".
                            List<UbicacionDetalleDTO> listaUbicacion = new List<UbicacionDetalleDTO> {
                                new UbicacionDetalleDTO{ insumo = insumo, cantidad = cantidad, area_alm = area_alm, lado_alm = lado_alm, estante_alm = estante_alm, nivel_alm = nivel_alm, cantidadMovimiento = cantidad }
                            };

                            listaTraspaso.Add(new TraspasoDTO
                            {
                                folioInterno = 1,
                                folioInternoString = "1",
                                ccOrigen = ccOrigen,
                                almacenOrigen = almacenOrigen,
                                ccDestino = ccDestino,
                                almacenDestino = almacenDestino,
                                insumo = insumo,
                                comentariosGestion = comentarios,
                                cantidad = cantidad,
                                cantidadTraspasar = cantidad,
                                checkBoxAutorizado = true,
                                checkBoxRechazado = false,
                                listUbicacionMovimiento = listaUbicacion
                            });
                        }

                        var resultadoSalida = guardarAutorizacionesTraspasos(listaTraspaso, true, true);

#if DEBUG
                        int partida = 1;
                        List<SurtidoDetDTO> listaInformacionFormatoEntrada = new List<SurtidoDetDTO>();

                        foreach (var x in listaTraspaso)
                        {
                            listaInformacionFormatoEntrada.Add(new SurtidoDetDTO
                            {
                                almacenID = x.almacenOrigen,
                                aSurtir = x.cantidad,
                                cc = x.ccOrigen,
                                insumo = x.insumo,
                                partida = partida,
                                almacenOrigenID = x.almacenOrigen,
                                almacenDestinoID = x.almacenDestino,
                                cantidad = x.cantidad,
                                ordenTraspaso = (int)resultadoSalida["orden_ct"],
                                comentarios = x.comentariosGestion,
                                ccDestino = x.ccDestino,
                                traspasoSinOrigen = true,
                                area_alm = x.listUbicacionMovimiento[0].area_alm,
                                lado_alm = x.listUbicacionMovimiento[0].lado_alm,
                                estante_alm = x.listUbicacionMovimiento[0].estante_alm,
                                nivel_alm = x.listUbicacionMovimiento[0].nivel_alm,
                                folio_traspaso = (int)resultadoSalida["orden_ct"],
                                listUbicacionMovimiento = x.listUbicacionMovimiento.Select(y => new UbicacionDetalleDTO
                                {
                                    insumo = x.insumo,
                                    cantidad = x.cantidad,
                                    area_alm = y.area_alm,
                                    lado_alm = y.lado_alm,
                                    estante_alm = y.estante_alm,
                                    nivel_alm = y.nivel_alm,
                                    cantidadMovimiento = x.cantidad
                                }).ToList()
                            });

                            partida++;
                        }

                        RequisicionFactoryServices RequisicionFactory = new RequisicionFactoryServices();

                        RequisicionFactory.getReqService().GuardarEntradas(listaInformacionFormatoEntrada, (int)resultadoSalida["orden_ct"], listaTraspaso[0].almacenDestino);
#endif
                    }
                }

                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(0, 0, "AlmacenController", "CargarExcelSalidaTraspaso", e, AccionEnum.AGREGAR, 0, null);
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return result;
        }

        #region Remanentes
        public Dictionary<string, object> CargarRemanentes(List<int> listaAlmacenes, DateTime fechaInicio, DateTime fechaFin, int solicitante)
        {
            Dictionary<string, object> resultado = new Dictionary<string, object>();

            try
            {
                var listaRemanentes = _context.tblAlm_Remanente.Where(x => x.registroActivo && x.determinante).ToList().Where(x =>
                    x.fechaCompra.Date >= fechaInicio.Date &&
                    x.fechaCompra.Date <= fechaFin.Date &&
                    (listaAlmacenes != null && listaAlmacenes.Count() > 0 ? listaAlmacenes.Contains(x.almacen) : true) &&
                    (solicitante > 0 ? x.solicitante == solicitante : true)
                );

                resultado.Add("data", listaRemanentes);
                resultado.Add("importeTotal", listaRemanentes.Sum(x => x.diferenciaImporte));
                resultado.Add("flagPuedeEliminar", vSesiones.sesionUsuarioDTO.idPerfil == 1 || (vSesiones.sesionUsuarioDTO.id == 6068 || vSesiones.sesionUsuarioDTO.id == 46234)); //Permiso para eliminar registros de remanentes para administradores, Alán Palomera y Carlos Huerta.

                #region Tabla Resumen
                var listaResumen = listaRemanentes.GroupBy(x => new { x.insumo, x.insumoDesc, x.fechaCompraString, x.ccDesc, x.almacenDesc, x.solicitanteNombre }).Select(x => new
                {
                    insumo = x.Key.insumo,
                    insumoDesc = x.Key.insumoDesc,
                    fechaCompraString = x.Key.fechaCompraString,
                    ccDesc = x.Key.ccDesc,
                    almacenDesc = x.Key.almacenDesc,
                    solicitanteNombre = x.Key.solicitanteNombre,
                    importe = x.Sum(y => y.diferenciaImporte)
                }).OrderByDescending(x => x.importe).ToList();

                resultado.Add("resumen", listaResumen);
                #endregion

                #region Gráfica Meses
                var chartMeses = new GraficaDTO()
                {
                    serie1Descripcion = "Importe"
                };

                var listaMeses = MonthsBetween(fechaInicio, fechaFin);

                foreach (var mes in listaMeses)
                {
                    chartMeses.categorias.Add(mes.Item3 + " " + mes.Item2);

                    var fechaPrimerDiaMes = new DateTime(mes.Item2, mes.Item1, 1);
                    var ultimoDiaMes = DateTime.DaysInMonth(mes.Item2, mes.Item1);
                    var fechaUltimoDiaMes = new DateTime(mes.Item2, mes.Item1, ultimoDiaMes);
                    var listaComprasMes = listaRemanentes.Where(x => x.fechaCompra.Date >= fechaPrimerDiaMes.Date && x.fechaCompra.Date <= fechaUltimoDiaMes.Date).ToList();

                    chartMeses.serie1.Add(Math.Truncate(100 * listaComprasMes.Sum(x => x.diferenciaImporte)) / 100);
                }

                resultado.Add("chartMeses", chartMeses);
                #endregion

                #region Gráfica Almacenes
                var chartAlmacenes = new GraficaDTO()
                {
                    serie1Descripcion = "Importe"
                };

                var listaAlmacenesCompras = listaRemanentes.GroupBy(x => new { x.almacen, x.almacenDesc }).Select(x => new { alm = x.Key, importe = x.Sum(y => y.diferenciaImporte) }).OrderByDescending(x => x.importe).ToList();

                foreach (var almacen in listaAlmacenesCompras)
                {
                    chartAlmacenes.categorias.Add(almacen.alm.almacen > 0 ? almacen.alm.almacenDesc : "N/A");
                    chartAlmacenes.serie1.Add(Math.Truncate(100 * almacen.importe) / 100);
                }

                resultado.Add("chartAlmacenes", chartAlmacenes);
                #endregion

                #region Gráfica Requisitores TOP
                var chartRequisitoresTOP = new GraficaDTO()
                {
                    serie1Descripcion = "Importe"
                };

                var listaRequisitoresCompras = listaRemanentes.GroupBy(x => x.solicitanteNombre).Select(x => new { solicitante = x.Key, importe = x.Sum(y => y.diferenciaImporte) }).OrderByDescending(x => x.importe).Take(20).ToList();

                foreach (var requisitor in listaRequisitoresCompras)
                {
                    chartRequisitoresTOP.categorias.Add(requisitor.solicitante);
                    chartRequisitoresTOP.serie1.Add(Math.Truncate(100 * requisitor.importe) / 100);
                }

                resultado.Add("chartRequisitoresTOP", chartRequisitoresTOP);
                #endregion

                #region Gráfica Autorizador Compra TOP
                var chartAutorizadoresCompraTOP = new GraficaDTO()
                {
                    serie1Descripcion = "Importe"
                };

                var listaAutorizadorCompras = listaRemanentes.GroupBy(x => x.autorizaCompraNombre).Select(x => new { autorizador = x.Key, importe = x.Sum(y => y.diferenciaImporte) }).OrderByDescending(x => x.importe).Take(20).ToList();

                foreach (var autorizador in listaAutorizadorCompras)
                {
                    chartAutorizadoresCompraTOP.categorias.Add(autorizador.autorizador);
                    chartAutorizadoresCompraTOP.serie1.Add(Math.Truncate(100 * autorizador.importe) / 100);
                }

                resultado.Add("chartAutorizadoresCompraTOP", chartAutorizadoresCompraTOP);
                #endregion

                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                resultado.Add(SUCCESS, false);
                LogError(0, 0, "AlmacenController", "CargarRemanentes", e, AccionEnum.CONSULTA, 0, new { listaAlmacenes = listaAlmacenes, fechaInicio = fechaInicio, fechaFin = fechaFin, solicitante = solicitante });
            }

            return resultado;
        }

        public static IEnumerable<Tuple<int, int, string>> MonthsBetween(DateTime startDate, DateTime endDate)
        {
            DateTime iterator;
            DateTime limit;

            if (endDate > startDate)
            {
                iterator = new DateTime(startDate.Year, startDate.Month, 1);
                limit = endDate;
            }
            else
            {
                iterator = new DateTime(endDate.Year, endDate.Month, 1);
                limit = startDate;
            }

            var dateTimeFormat = CultureInfo.CurrentCulture.DateTimeFormat;

            while (iterator <= limit)
            {
                yield return new Tuple<int, int, string>(iterator.Month, iterator.Year, dateTimeFormat.GetMonthName(iterator.Month).Substring(0, 3).ToUpper());

                iterator = iterator.AddMonths(1);
            }
        }

        public List<ComboDTO> FillComboAlmacenesFisicos()
        {
            try
            {
                return (List<ComboDTO>)consultaCheckProductivo(string.Format(@"
                    SELECT 
                        alm.almacen AS Value, 
                        (CONVERT(varchar(12), alm.almacen) + ' - ' + alm.descripcion) AS Text 
                    FROM si_almacen alm 
                    WHERE (alm.almacen_virtual != 1 or alm.almacen_virtual IS null) AND alm.bit_mp = 'S' AND alm.almacen < 900
                    ORDER BY Value"
                )).ToObject<List<ComboDTO>>();
            }
            catch (Exception)
            {
                return new List<ComboDTO>();
            }
        }

        public Dictionary<string, object> EliminarRegistroRemanente(int remanente_id)
        {
            var resultado = new Dictionary<string, object>();

            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    var registroRemanente = _context.tblAlm_Remanente.FirstOrDefault(x => x.id == remanente_id);

                    registroRemanente.registroActivo = false;
                    _context.SaveChanges();

                    dbContextTransaction.Commit();
                    resultado.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                }
            }

            return resultado;
        }
        #endregion

        #region Catálogo Ubicaciones
        public Dictionary<string, object> GetUbicaciones()
        {
            var resultado = new Dictionary<string, object>();

            try
            {
                if (vSesiones.sesionEmpresaActual != (int)EmpresaEnum.Peru)
                {
                    var listaUbicaciones = _context.tblAlm_Ubicacion.Where(x => x.registroActivo).ToList().Select(x => new
                    {
                        id = x.id,
                        almacen = x.almacen,
                        almacenDesc = consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", x.almacen))[0].descripcion.Value,
                        area_alm = x.area_alm,
                        lado_alm = x.lado_alm,
                        estante_alm = x.estante_alm,
                        nivel_alm = x.nivel_alm
                    }).ToList();

                    resultado.Add("data", listaUbicaciones);
                }
                else
                {
                    using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                    {
                        var listaAlmacenesStarsoft = _starsoft.TABALM.ToList();

                        var listaUbicaciones = _context.tblAlm_Ubicacion.Where(x => x.registroActivo).ToList().Select(x => new
                        {
                            id = x.id,
                            almacen = x.almacen,
                            almacenDesc = listaAlmacenesStarsoft.Where(y => Int32.Parse(y.TAALMA) == x.almacen).Select(z => z.TADESCRI).FirstOrDefault(),
                            area_alm = x.area_alm,
                            lado_alm = x.lado_alm,
                            estante_alm = x.estante_alm,
                            nivel_alm = x.nivel_alm
                        });

                        resultado.Add("data", listaUbicaciones);
                    }
                }

                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }

            return resultado;
        }

        public Dictionary<string, object> GuardarNuevaUbicacion(tblAlm_Ubicacion ubicacion)
        {
            var resultado = new Dictionary<string, object>();

            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    ubicacion.registroActivo = true;

                    _context.tblAlm_Ubicacion.Add(ubicacion);
                    _context.SaveChanges();

                    dbContextTransaction.Commit();
                    resultado.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                }
            }

            return resultado;
        }

        public Dictionary<string, object> EditarUbicacion(tblAlm_Ubicacion ubicacion)
        {
            var resultado = new Dictionary<string, object>();

            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    var registroUbicacion = _context.tblAlm_Ubicacion.FirstOrDefault(x => x.id == ubicacion.id);

                    registroUbicacion.almacen = ubicacion.almacen;
                    registroUbicacion.area_alm = ubicacion.area_alm;
                    registroUbicacion.lado_alm = ubicacion.lado_alm;
                    registroUbicacion.estante_alm = ubicacion.estante_alm;
                    registroUbicacion.nivel_alm = ubicacion.nivel_alm;

                    _context.SaveChanges();

                    dbContextTransaction.Commit();
                    resultado.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                }
            }

            return resultado;
        }

        public Dictionary<string, object> EliminarUbicacion(tblAlm_Ubicacion ubicacion)
        {
            var resultado = new Dictionary<string, object>();

            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    var registroUbicacion = _context.tblAlm_Ubicacion.FirstOrDefault(x => x.id == ubicacion.id);

                    registroUbicacion.registroActivo = false;
                    _context.SaveChanges();

                    dbContextTransaction.Commit();
                    resultado.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                }
            }

            return resultado;
        }
        #endregion

        public List<tblAlm_Insumo_Tipo> FillGrid_InsumoTipo(tblAlm_Insumo_Tipo obj)
        {
            var result = (from t in _context.tblAlm_Insumo_Tipo
                          where (string.IsNullOrEmpty(obj.descripcion) == true ? true : t.descripcion.Contains(obj.descripcion)) && t.estatus == obj.estatus && obj.tipo == 0 ? true : t.tipo == obj.tipo 
                          select t).ToList();
            return result;
        }
        public void SaveOrUpdate_InsumoTipo(tblAlm_Insumo_Tipo obj)
        {
            if (!Exists_InsumoTipo(obj))
            {
                if (obj.id == 0){
                    var data = new tblAlm_Insumo_Tipo();
                    data.tipo = obj.tipo;
                    data.descripcion = obj.descripcion;
                    data.estatus = obj.estatus;

                    _context.tblAlm_Insumo_Tipo.Add(data);
                    _context.SaveChanges();
                }
                else
                {
                    var data = _context.tblAlm_Insumo_Tipo.FirstOrDefault(x => x.id == obj.id);
                    data.tipo = obj.tipo;
                    data.descripcion = obj.descripcion;
                    data.estatus = obj.estatus;
                    _context.SaveChanges();
                }
            }
            else
            {
                throw new Exception("Ya existe un tipo de insumo con esa descripción seleccionado");
            }
        }

        public bool Exists_InsumoTipo(tblAlm_Insumo_Tipo obj)
        {
            return _context.tblAlm_Insumo_Tipo.Where(x => x.descripcion == obj.descripcion &&
                                        x.tipo == obj.tipo).ToList().Count > 0 ? true : false;
        }

        public List<tblAlm_Insumo_Grupo> FillGrid_InsumoGrupo(tblAlm_Insumo_Grupo obj)
        {
            var result = (from t in _context.tblAlm_Insumo_Grupo
                          where (string.IsNullOrEmpty(obj.descripcion) == true ? true : t.descripcion.Contains(obj.descripcion)) && t.estatus == obj.estatus && obj.grupo == 0 ? true : t.grupo == obj.grupo
                          select t).ToList();
            return result;
        }
        public void SaveOrUpdate_InsumoGrupo(tblAlm_Insumo_Grupo obj)
        {
            if (!Exists_InsumoGrupo(obj))
            {
                if (obj.id == 0)
                {
                    var data = new tblAlm_Insumo_Grupo();
                    data.grupo = obj.grupo;
                    data.descripcion = obj.descripcion;
                    data.estatus = obj.estatus;

                    _context.tblAlm_Insumo_Grupo.Add(data);
                    _context.SaveChanges();
                }
                else
                {
                    var data = _context.tblAlm_Insumo_Grupo.FirstOrDefault(x => x.id == obj.id);
                    data.grupo = obj.grupo;
                    data.descripcion = obj.descripcion;
                    data.estatus = obj.estatus;
                    _context.SaveChanges();
                }
            }
            else
            {
                throw new Exception("Ya existe un grupo de insumo con esa descripción seleccionado");
            }
        }

        public bool Exists_InsumoGrupo(tblAlm_Insumo_Grupo obj)
        {
            return _context.tblAlm_Insumo_Grupo.Where(x => x.descripcion == obj.descripcion &&
                                        x.grupo == obj.grupo).ToList().Count > 0 ? true : false;
        }

        public List<tblAlm_Grupos_Insumo> FillGrid_InsumoFamilia(tblAlm_Grupos_Insumo obj)
        {
            var result = (from t in _context.tblAlm_Grupos_Insumo
                          where t.estatus == obj.estatus && obj.tipo_insumo == 0 ? true : t.tipo_insumo == obj.tipo_insumo && obj.grupo_insumo == 0 ? true : t.grupo_insumo == obj.grupo_insumo
                          select t).ToList();
            return result;
        }
        public void SaveOrUpdate_InsumoFamilia(tblAlm_Grupos_Insumo obj)
        {
            if (!Exists_InsumoFamilia(obj))
            {
                var tipo = _context.tblAlm_Insumo_Tipo.FirstOrDefault(x => x.tipo == obj.tipo_insumo);
                var grupo = _context.tblAlm_Insumo_Grupo.FirstOrDefault(x => x.grupo == obj.grupo_insumo);
                if (obj.id == 0)
                {
                    string familia = string.Concat(obj.tipo_insumo.ToString(), obj.grupo_insumo.ToString());
                    var data = new tblAlm_Grupos_Insumo();
                    data.familia = int.Parse(familia);
                    data.tipo_insumo = obj.tipo_insumo;
                    data.grupo_insumo = obj.grupo_insumo;
                    data.descripcion = tipo.descripcion + " " + grupo.descripcion;
                    data.estatus = obj.estatus;
                    data.inventariado = "I";
                    data.valida_area_cta = "S";

                    _context.tblAlm_Grupos_Insumo.Add(data);
                    _context.SaveChanges();
                }
                else
                {
                    var data = _context.tblAlm_Grupos_Insumo.FirstOrDefault(x => x.id == obj.id);
                    data.tipo_insumo = obj.tipo_insumo;
                    data.grupo_insumo = obj.grupo_insumo;
                    data.descripcion = tipo.descripcion + " " + grupo.descripcion;
                    data.estatus = obj.estatus;
                    _context.SaveChanges();
                }
            }
            else
            {
                throw new Exception("Ya existe un grupo de insumo con esa descripción seleccionado");
            }
        }

        public bool Exists_InsumoFamilia(tblAlm_Grupos_Insumo obj)
        {
            return _context.tblAlm_Grupos_Insumo.Where(x => x.tipo_insumo == obj.tipo_insumo &&
                                        x.grupo_insumo == obj.grupo_insumo).ToList().Count > 0 ? true : false;
        }

        public List<tblAlm_Insumo_Tipo> FillCboInsumoTipo(bool estatus)
        {
            return _context.tblAlm_Insumo_Tipo.Where(x => x.estatus == estatus).OrderBy(x => x.descripcion).ToList(); ///item;
        }

        public List<tblAlm_Insumo_Grupo> FillCboInsumoGrupo(bool estatus)
        {
            return _context.tblAlm_Insumo_Grupo.Where(x => x.estatus == estatus).OrderBy(x => x.descripcion).ToList(); ///item;
        }

        public List<tblAlm_Insumo> FillGrid_Insumo(tblAlm_Insumo obj)
        {
            var result = (from t in _context.tblAlm_Insumo
                          where t.estatus == obj.estatus && obj.tipo == 0 ? true : t.tipo == obj.tipo && obj.grupo == 0 || t.grupo == obj.grupo
                          select t).ToList();
            return result;
        }
        public void SaveOrUpdate_Insumo(tblAlm_Insumo obj)
        {
            if (!Exists_Insumo(obj))
            {
                var tipo = _context.tblAlm_Insumo_Tipo.FirstOrDefault(x => x.tipo == obj.tipo);
                var grupo = _context.tblAlm_Insumo_Grupo.FirstOrDefault(x => x.grupo == obj.grupo);
                int count = _context.tblAlm_Insumo.Count(x => x.tipo == obj.tipo && x.grupo == obj.grupo);
                int nuevoInsumo = count + 1;
                if (obj.id == 0)
                {
                    var data = new tblAlm_Insumo();
                    //insumo is the family number plus the number of existing families with the same tipo and grupo with 4 digits
                    string tipoFormatted = obj.tipo.ToString(); // Asegúrate de que es un solo dígito
                    string grupoFormatted = obj.grupo.ToString("D2"); // Formatear el grupo como 2 dígitos
                    string countFormatted = nuevoInsumo.ToString("D4"); // Formatear el número de insumo como 4 dígitos
                    string insumoFormatted = string.Concat(tipoFormatted, grupoFormatted, countFormatted);
                    data.insumo = int.Parse(insumoFormatted);
                    data.tipo = obj.tipo;
                    data.grupo = obj.grupo;
                    data.descripcion = obj.descripcion;
                    data.fechaAlta = DateTime.Now;
                    data.estatus = obj.estatus;
                    //Valores por defecto
                    data.bloqueado = 0;
                    data.cancelado = "A";
                    data.fijar_precio = "";
                    data.precio_a_fijar = 0;
                    data.validar_lista_precios = "N";
                    data.bit_pt = "S";
                    data.bit_mp = "S";
                    data.bit_factura = "N";
                    data.tolerancia = 0;
                    data.color_resguardo = 1;
                    data.bit_rotacion = "A";
                    data.bit_area_cta = 0;
                    data.bit_af = "N";
                    data.codigo_barras = "";
                    data.id_modelo_maquinaria = 0;
                    data.modeloMaquinariaDesc = "";
                    data.compras_req = 1;

                    _context.tblAlm_Insumo.Add(data);
                    _context.SaveChanges();
                }
                else
                {
                    var data = _context.tblAlm_Insumo.FirstOrDefault(x => x.id == obj.id);
                    data.descripcion = tipo.descripcion + " " + grupo.descripcion;
                    data.estatus = obj.estatus;
                    _context.SaveChanges();
                }
            }
            else
            {
                throw new Exception("Ya existe un grupo de insumo con esa descripción seleccionado");
            }
        }

        public bool Exists_Insumo(tblAlm_Insumo obj)
        {
            return _context.tblAlm_Insumo.Where(x => x.tipo == obj.tipo &&
                                        x.grupo == obj.grupo).ToList().Count > 0 ? true : false;
        }
    }
}
