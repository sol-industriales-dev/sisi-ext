using Core.DAO.Enkontrol.Compras;
using Core.DTO;
using Core.DTO.COMPRAS;
using Core.DTO.Enkontrol.Alamcen;
using Core.DTO.Enkontrol.OrdenCompra;
using Core.DTO.Enkontrol.Requisicion;
using Core.DTO.Enkontrol.Tablas.Proveedor;
using Core.DTO.Principal.Generales;
using Core.DTO.RecursosHumanos;
using Core.DTO.Utils.Data;
using Core.Entity.Enkontrol.Compras.OrdenCompra;
using Core.Entity.Enkontrol.Compras.OrdenCompra.CuadroComparativo;
using Core.Entity.Enkontrol.Compras.Requisicion;
using Core.Entity.Maquinaria.BackLogs;
using Core.Entity.Principal.Multiempresa;
using Core.Entity.Principal.Usuarios;
using Core.Entity.StarSoft.OrdenCompra;
using Core.Entity.StarSoft.Requisiciones;
using Core.Entity.StarSoft;
using Core.Enum;
using Core.Enum.Enkontrol;
using Core.Enum.Enkontrol.Compras;
using Core.Enum.Enkontrol.Requisicion;
using Core.Enum.Maquinaria.BackLogs;
using Core.Enum.Multiempresa;
using Core.Enum.Principal;
using Core.Enum.Principal.Bitacoras;
using Core.Enum.Principal.Usuario;
using Dapper;
using Data.EntityFramework;
using Data.EntityFramework.Context;
using Data.EntityFramework.Generic;
using Data.Factory.Enkontrol.Compras;
using Data.Factory.Enkontrol.Principal;
using Data.Factory.Principal.Usuarios;
using Infrastructure.Utils;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.Odbc;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using Core.Entity.StarSoft.Almacen;
using Core.DTO.Enkontrol.Proveedor;
using Core.DTO.Enkontrol.OrdenCompra.ComprasPendientes;
using Data.Factory.Maquinaria;
using Core.Enum.Maquinaria.StandBy;
using Core.Entity.Maquinaria.Catalogo;
using Core.Entity.Maquinaria.StandBy;
using System.Net.Mail;
using Core.Enum.RecursosHumanos.CatNotificantes;

namespace Data.DAO.Enkontrol.Compras
{
    public class OrdenCompraDAO : GenericDAO<tblCom_Req>, IOrdenCompraDAO
    {
        UsuarioFactoryServices ufs = new UsuarioFactoryServices();
        MonedaFactoryService mfs = new MonedaFactoryService();
        ICuadroComparativoDAO cuadroComparativoFS = new CuadroComparativoFactoryService().getCCService();
        private string _NOMBRE_CONTROLADOR = "OrdenCompraController";
        private const int _SISTEMA = (int)SistemasEnum.ENKONTROL;

        private bool productivo = Convert.ToString(System.Web.Configuration.WebConfigurationManager.AppSettings["enkontrolProductivo"]) == "1";

        private OdbcConnection checkConexionProductivo()
        {
            if (productivo)
            {
                return new Conexion().Connect();
            }
            else
            {
                return new Conexion().ConnectPrueba();
            }
        }

        private dynamic consultaCheckProductivo(string consulta)
        {
            if (productivo)
            {
                return _contextEnkontrol.WhereComprasOrigen(consulta);
            }
            else
            {
                return _contextEnkontrolPrueba.Where(consulta);
            }
        }

        private dynamic consultaCheckProductivoConstruplan(string consulta)
        {
            //if (productivo)
            //{
            return _contextEnkontrol.WhereComprasOrigenConstruplan(consulta);
            //}
            //else
            //{
            //    return _contextEnkontrolPrueba.Where(consulta);
            //}
        }

        private List<dynamic> consultaListCheckProductivo(List<string> listString)
        {
            if (productivo)
            {
                return _contextEnkontrol.Where(listString);
            }
            else
            {
                return _contextEnkontrolPrueba.Where(listString);
            }
        }

        #region Guardar
        public List<int> generaNuevaOC(List<GenOrdenCompraDTO> lstOC)
        {
            using (var con = checkConexionProductivo())
            using (var trans = con.BeginTransaction())
            {
                var lstEk = generarPrimerOC(trans, lstOC);
                var lstOc = guardarOrdenesCompra(trans, lstEk);
                if (lstOc.Count > 0)
                    trans.Commit();
                return lstOc;
            }
        }
        List<int> guardarOrdenesCompra(OdbcTransaction trans, List<OrdenCompraDTO> lstOC)
        {
            var lstOcGenerada = new List<int>();

            lstOC.ForEach(r =>
            {
                var lstReqTerminada = new List<bool>();
                var num_requisicion = 0;

                r.lstPartidas.ForEach(p =>
                {
                    num_requisicion = p.num_requisicion;
                    lstReqTerminada.Add(upCantidadOrdenada(trans, p.cc, num_requisicion, p.partida, p.cantidad));
                });

                if (lstReqTerminada.All(p => p))
                {
                    r.estatus = "T";
                    upReqEstatus(trans, r.cc, num_requisicion, r.estatus);
                }

                var oc = guardarOrdenCompra(trans, r);

                lstOcGenerada.Add(oc);

                if (oc > 0)
                {
                    var idOrdenCompraSIGOPLAN = guardarOrdenCompraSIGOPLAN(r);

                    r.lstPartidas.ForEach(p =>
                    {
                        guardarOrdenCompraDet(trans, p);
                        guardarOrdenCompraDetSIGOPLAN(idOrdenCompraSIGOPLAN, p);
                    });
                }
            });
            return lstOcGenerada.Where(o => o > 0).ToList();
        }
        bool upCantidadOrdenada(OdbcTransaction trans, string cc, int numero, int partida, decimal colocada)
        {
            var reqDet = getReqDet(trans, cc, numero, partida);
            var isTerminada = reqDet.cantidad - reqDet.cant_ordenada == 0;
            reqDet.estatus = isTerminada ? "T" : "P";
            upReqDetCantidad(trans, cc, numero, partida, reqDet.cant_ordenada, reqDet.estatus);
            return isTerminada;
        }
        int guardarOrdenCompra(OdbcTransaction trans, OrdenCompraDTO oc)
        {
            var consulta = @"INSERT INTO so_orden_compra
                                            (cc
                                            ,numero
                                            ,fecha
                                            ,libre_abordo
                                            ,tipo_oc_req
                                            ,comprador
                                            ,proveedor
                                            ,moneda
                                            ,tipo_cambio
                                            ,porcent_iva
                                            ,sub_total
                                            ,iva
                                            ,total
                                            ,sub_tot_rec
                                            ,iva_rec
                                            ,total_rec
                                            ,sub_tot_ajus
                                            ,iva_ajus
                                            ,total_ajus
                                            ,st_impresa
                                            ,estatus
                                            ,comentarios
                                            ,solicito
                                            ,vobo
                                            ,autorizo
                                            ,sub_tot_canc
                                            ,iva_canc
                                            ,total_canc
                                            ,total_fac
                                            ,total_pag
                                            ,embarquese
                                            ,empleado_modifica
                                            ,fecha_modifica
                                            ,hora_modifica
                                            ,tc_cc
                                            ,anticipo
                                            ,monto_anticipo
                                            ,almacen
                                            ,bit_autorecepcion
                                            ,almacen_autorecepcion
                                            ,empleado_autorecepcion
                                            ,rentencion_antes_iva
                                            ,rentencion_despues_iva
                                            ,bienes_servicios
                                            ,concepto_factura
                                            ,tot_fac_ret
                                            ,tot_ret_ret
                                            ,usuario_autoriza
                                            ,fecha_autoriza
                                            ,st_autorizada
                                            ,imprime_porcentaje
                                            ,ST_OC
                                            ,empleado_autoriza
                                            ,vobo_informa
                                            ,vobo2
                                            ,vobo3
                                            ,vobo4
                                            ,vobo5
                                            ,vobo6
                                            ,cambia_vobo
                                            ,tmc
                                            ,autoriza_activos
                                            ,fecha_vobo
                                            ,fecha_vobo2
                                            ,fecha_vobo3
                                            ,bit_af
                                            ,bit_arrenda
                                            ,estatus_bloqueo
                                            ,ruta_pdf
                                            ,ruta_map)
                                    VALUES (?,?,?,?,?,?,?,?,?,?, ?,?,?,?,?,?,?,?,?,?, 
                                            ?,?,?,?,?,?,?,?,?,?, ?,?,?,?,?,?,?,?,?,?, 
                                            ?,?,?,?,?,?,?,?,?,?, ?,?,?,?,?,?,?,?,?,?,
                                            ?,?,?,?,?,?,?,?,?,?)";
            using (var cmd = new OdbcCommand(consulta))
            {
                OdbcParameterCollection parameters = cmd.Parameters;
                parameters.Add("@cc", OdbcType.Char).Value = oc.cc;
                parameters.Add("@numero", OdbcType.Numeric).Value = oc.numero;
                parameters.Add("@fecha", OdbcType.Date).Value = oc.fecha;
                parameters.Add("@libre_abordo", OdbcType.Numeric).Value = oc.libre_abordo;
                parameters.Add("@tipo_oc_req", OdbcType.Char).Value = oc.tipo_oc_req;
                parameters.Add("@comprador", OdbcType.Numeric).Value = oc.comprador;
                parameters.Add("@proveedor", OdbcType.Numeric).Value = oc.proveedor;
                parameters.Add("@moneda", OdbcType.Char).Value = oc.moneda.ToString();
                parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = oc.tipo_cambio;
                parameters.Add("@porcent_iva", OdbcType.Numeric).Value = oc.porcent_iva;
                parameters.Add("@sub_total", OdbcType.Numeric).Value = oc.sub_total;
                parameters.Add("@iva", OdbcType.Numeric).Value = oc.iva;
                parameters.Add("@total", OdbcType.Numeric).Value = oc.total;
                parameters.Add("@sub_tot_rec", OdbcType.Numeric).Value = oc.sub_tot_rec;
                parameters.Add("@iva_rec", OdbcType.Numeric).Value = oc.iva_rec;
                parameters.Add("@total_rec", OdbcType.Numeric).Value = oc.total_rec;
                parameters.Add("@sub_tot_ajus", OdbcType.Numeric).Value = oc.sub_tot_ajus;
                parameters.Add("@iva_ajus", OdbcType.Numeric).Value = oc.iva_ajus;
                parameters.Add("@total_ajus", OdbcType.Numeric).Value = oc.total_ajus;
                parameters.Add("@st_impresa", OdbcType.Char).Value = oc.st_impresa;
                parameters.Add("@estatus", OdbcType.Char).Value = oc.estatus;
                parameters.Add("@comentarios", OdbcType.Char).Value = oc.comentarios;
                parameters.Add("@solicito", OdbcType.Numeric).Value = oc.solicito;
                parameters.Add("@vobo", OdbcType.Numeric).Value = oc.vobo;
                parameters.Add("@autorizo", OdbcType.Numeric).Value = oc.autorizo;
                parameters.Add("@sub_tot_canc", OdbcType.Numeric).Value = oc.sub_tot_canc;
                parameters.Add("@iva_canc", OdbcType.Numeric).Value = oc.iva_canc;
                parameters.Add("@total_canc", OdbcType.Numeric).Value = oc.total_canc;
                parameters.Add("@total_fac", OdbcType.Numeric).Value = oc.total_fac;
                parameters.Add("@total_pag", OdbcType.Numeric).Value = oc.total_pag;
                parameters.Add("@embarquese", OdbcType.Char).Value = oc.embarquese;
                parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = oc.empleado_modifica;
                parameters.Add("@fecha_modifica", OdbcType.Date).Value = oc.fecha_modifica;
                parameters.Add("@hora_modifica", OdbcType.Date).Value = oc.hora_modifica;
                parameters.Add("@tc_cc", OdbcType.Numeric).Value = oc.tc_cc;
                parameters.Add("@anticipo", OdbcType.Char).Value = oc.anticipo;
                parameters.Add("@monto_anticipo", OdbcType.Numeric).Value = oc.monto_anticipo;
                parameters.Add("@almacen", OdbcType.Numeric).Value = oc.almacen;
                parameters.Add("@bit_autorecepcion", OdbcType.Char).Value = oc.bit_autorecepcion;
                parameters.Add("@almacen_autorecepcion", OdbcType.Numeric).Value = oc.almacen_autorecepcion;
                parameters.Add("@empleado_autorecepcion", OdbcType.Numeric).Value = oc.empleado_autorecepcion;
                parameters.Add("@rentencion_antes_iva", OdbcType.Numeric).Value = oc.rentencion_antes_iva;
                parameters.Add("@rentencion_despues_iva", OdbcType.Numeric).Value = oc.rentencion_despues_iva;
                parameters.Add("@bienes_servicios", OdbcType.Char).Value = oc.bienes_servicios;
                parameters.Add("@concepto_factura", OdbcType.Char).Value = oc.concepto_factura;
                parameters.Add("@tot_fac_ret", OdbcType.Numeric).Value = oc.tot_fac_ret;
                parameters.Add("@tot_ret_ret", OdbcType.Numeric).Value = oc.tot_ret_ret;
                parameters.Add("@usuario_autoriza", OdbcType.Numeric).Value = oc.usuario_autoriza;
                parameters.Add("@fecha_autoriza", OdbcType.Date).Value = oc.fecha_autoriza;
                parameters.Add("@st_autorizada", OdbcType.Char).Value = oc.st_autorizada;
                parameters.Add("@imprime_porcentaje", OdbcType.Char).Value = oc.imprime_porcentaje;
                parameters.Add("@ST_OC", OdbcType.Char).Value = oc.ST_OC;
                parameters.Add("@empleado_autoriza", OdbcType.Numeric).Value = oc.empleado_autoriza;
                parameters.Add("@vobo_informa", OdbcType.Char).Value = oc.vobo_informa;
                parameters.Add("@vobo2", OdbcType.Numeric).Value = oc.vobo2;
                parameters.Add("@vobo3", OdbcType.Numeric).Value = oc.vobo3;
                parameters.Add("@vobo4", OdbcType.Numeric).Value = oc.vobo4;
                parameters.Add("@vobo5", OdbcType.Numeric).Value = oc.vobo5;
                parameters.Add("@vobo6", OdbcType.Numeric).Value = oc.vobo6;
                parameters.Add("@cambia_vobo", OdbcType.Numeric).Value = oc.cambia_vobo;
                parameters.Add("@tmc", OdbcType.Numeric).Value = oc.tmc;
                parameters.Add("@autoriza_activos", OdbcType.Numeric).Value = oc.autoriza_activos;
                parameters.Add("@fecha_vobo", OdbcType.Date).Value = oc.fecha_vobo;
                parameters.Add("@fecha_vobo2", OdbcType.Date).Value = oc.fecha_vobo2;
                parameters.Add("@fecha_vobo3", OdbcType.Date).Value = oc.fecha_vobo3;
                parameters.Add("@bit_af", OdbcType.Char).Value = oc.bit_af;
                parameters.Add("@bit_arrenda", OdbcType.Char).Value = oc.bit_arrenda;
                parameters.Add("@estatus_bloqueo", OdbcType.Char).Value = oc.estatus_bloqueo;
                parameters.Add("@ruta_pdf", OdbcType.VarChar).Value = oc.ruta_pdf;
                parameters.Add("@ruta_map", OdbcType.VarChar).Value = oc.ruta_map;
                cmd.Connection = trans.Connection;
                cmd.Transaction = trans;
                var count = cmd.ExecuteNonQuery();
                return count > 0 ? oc.numero : 0;
            }
        }
        bool guardarOrdenCompraDet(OdbcTransaction trans, OrdenCompraDetDTO det)
        {
            var ban = new List<bool>();
            using (var cmd = new OdbcCommand(@"INSERT INTO so_orden_compra_det
                              (cc
                            ,numero
                            ,partida
                            ,insumo
                            ,fecha_entrega
                            ,cantidad
                            ,precio
                            ,importe
                            ,ajuste_cant
                            ,ajuste_imp
                            ,num_requisicion
                            ,part_requisicion
                            ,cant_recibida
                            ,imp_recibido
                            ,fecha_recibido
                            ,cant_canc
                            ,imp_canc
                            ,acum_ant
                            ,max_orig
                            ,max_ppto
                            ,area
                            ,cuenta
                            ,porcent_iva
                            ,iva)
                               VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"))
            {
                OdbcParameterCollection parameters = cmd.Parameters;
                parameters.Add("@cc", OdbcType.Char).Value = det.cc;
                parameters.Add("@numero", OdbcType.Numeric).Value = det.numero;
                parameters.Add("@partida", OdbcType.Numeric).Value = det.partida;
                parameters.Add("@insumo", OdbcType.Numeric).Value = det.insumo;
                parameters.Add("@fecha_entrega", OdbcType.Date).Value = det.fecha_entrega;
                parameters.Add("@cantidad", OdbcType.Numeric).Value = det.cantidad;
                parameters.Add("@precio", OdbcType.Numeric).Value = det.precio;
                parameters.Add("@importe", OdbcType.Numeric).Value = det.importe;
                parameters.Add("@ajuste_cant", OdbcType.Numeric).Value = det.ajuste_cant;
                parameters.Add("@ajuste_imp", OdbcType.Numeric).Value = det.ajuste_imp;
                parameters.Add("@num_requisicion", OdbcType.Numeric).Value = det.num_requisicion;
                parameters.Add("@part_requisicion", OdbcType.Numeric).Value = det.part_requisicion;
                parameters.Add("@cant_recibida", OdbcType.Numeric).Value = det.cant_recibida;
                parameters.Add("@imp_recibido", OdbcType.Numeric).Value = det.imp_recibido;
                parameters.Add("@fecha_recibido", OdbcType.Date).Value = det.fecha_recibido;
                parameters.Add("@cant_canc", OdbcType.Numeric).Value = det.cant_canc;
                parameters.Add("@imp_canc", OdbcType.Numeric).Value = det.imp_canc;
                parameters.Add("@acum_ant", OdbcType.Numeric).Value = det.acum_ant;
                parameters.Add("@max_orig", OdbcType.Numeric).Value = det.max_orig;
                parameters.Add("@max_ppto", OdbcType.Numeric).Value = det.max_ppto;
                parameters.Add("@area", OdbcType.Numeric).Value = det.area;
                parameters.Add("@cuenta", OdbcType.Numeric).Value = det.cuenta;
                parameters.Add("@porcent_iva", OdbcType.Numeric).Value = det.porcent_iva;
                parameters.Add("@iva", OdbcType.Numeric).Value = det.iva;
                cmd.Connection = trans.Connection;
                cmd.Transaction = trans;
                var count = cmd.ExecuteNonQuery();
                ban.Add(count > 0);
            }
            if (!string.IsNullOrEmpty(det.descripcion))
                using (var cmd = new OdbcCommand(@"INSERT INTO so_orden_det_linea
                                                (cc
                                                ,numero
                                                ,partida
                                                ,descripcion)
                                                VALUES (?,?,?,?)"))
                {
                    OdbcParameterCollection parameters = cmd.Parameters;
                    parameters.Add("@cc", OdbcType.Char).Value = det.cc;
                    parameters.Add("@numero", OdbcType.Numeric).Value = det.numero;
                    parameters.Add("@partida", OdbcType.Numeric).Value = det.partida;
                    parameters.Add("@descripcion", OdbcType.Char).Value = det.descripcion;
                    cmd.Connection = trans.Connection;
                    cmd.Transaction = trans;
                    var count = cmd.ExecuteNonQuery();
                    ban.Add(count > 0);
                }
            return ban.All(a => a);
        }
        int guardarOrdenCompraSIGOPLAN(OrdenCompraDTO oc)
        {
            var compra = new tblCom_OrdenCompra
            {
                cc = oc.cc,
                numero = oc.numero,
                fecha = oc.fecha,
                idLibreAbordo = oc.libre_abordo,
                tipo_oc_req = oc.tipo_oc_req,
                moneda = oc.moneda.ToString(),
                tipo_cambio = oc.tipo_cambio,
                porcent_iva = oc.porcent_iva,
                sub_total = oc.sub_total,
                iva = oc.iva,
                total = oc.total,
                estatus = oc.estatus,
                comentarios = oc.comentarios,
                bienes_servicios = oc.bienes_servicios,
                estatusRegistro = true
            };

            _context.tblCom_OrdenCompra.Add(compra);
            _context.SaveChanges();

            return compra.id;
        }
        void guardarOrdenCompraDetSIGOPLAN(int idOrdenCompra, OrdenCompraDetDTO det)
        {
            _context.tblCom_OrdenCompraDet.Add(new tblCom_OrdenCompraDet
            {
                idOrdenCompra = idOrdenCompra,
                cc = det.cc,
                numero = det.numero,
                partida = det.partida,
                insumo = det.insumo,
                fecha_entrega = det.fecha_entrega ?? default(DateTime),
                cantidad = det.cantidad,
                precio = det.precio,
                importe = det.importe,
                ajuste_cant = det.ajuste_cant,
                ajuste_imp = det.ajuste_imp,
                num_requisicion = det.num_requisicion,
                part_requisicion = det.part_requisicion,
                cant_recibida = det.cant_recibida,
                imp_recibido = det.imp_recibido,
                fecha_recibido = det.fecha_recibido.GetValueOrDefault(),
                cant_canc = det.cant_canc,
                imp_canc = det.imp_canc,
                acum_ant = det.acum_ant.GetValueOrDefault(),
                max_orig = det.max_orig.GetValueOrDefault(),
                max_ppto = det.max_ppto.GetValueOrDefault(),
                area = det.area ?? 0,
                cuenta = det.cuenta ?? 0,
                porcent_iva = det.porcent_iva.GetValueOrDefault(),
                iva = det.iva.GetValueOrDefault(),
                estatusRegistro = true
            });

            _context.SaveChanges();
        }
        void upReqEstatus(OdbcTransaction trans, string cc, int numero, string estatus)
        {
            using (var cmd = new OdbcCommand(@"UPDATE so_requisicion
                              SET st_estatus = ?
                            WHERE cc = ? AND numero = ?"))
            {
                OdbcParameterCollection parameters = cmd.Parameters;
                parameters.Add("@st_estatus", OdbcType.Char).Value = estatus;
                parameters.Add("@cc", OdbcType.Char).Value = cc;
                parameters.Add("@numero", OdbcType.Numeric).Value = numero;
                cmd.Connection = trans.Connection;
                cmd.Transaction = trans;
                var count = cmd.ExecuteNonQuery();
            }
        }
        void upReqDetCantidad(OdbcTransaction trans, string cc, int numero, int partida, decimal ordenada, string estatus)
        {
            using (var cmd = new OdbcCommand(@"UPDATE so_requisicion_det
                              SET cant_ordenada = ?
                                ,estatus = ?
                                ,fecha_ordenada = ?
                            WHERE cc = ? AND numero = ? AND partida = ?"))
            {
                OdbcParameterCollection parameters = cmd.Parameters;
                parameters.Add("@cant_ordenada", OdbcType.Numeric).Value = ordenada;
                parameters.Add("@estatus", OdbcType.Char).Value = estatus;
                parameters.Add("@fecha_ordenada", OdbcType.Date).Value = DateTime.Now;
                parameters.Add("@cc", OdbcType.Char).Value = cc;
                parameters.Add("@numero", OdbcType.Numeric).Value = numero;
                parameters.Add("@partida", OdbcType.Numeric).Value = partida;
                cmd.Connection = trans.Connection;
                cmd.Transaction = trans;
                var count = cmd.ExecuteNonQuery();
            }
        }
        #endregion
        List<OrdenCompraDTO> generarPrimerOC(OdbcTransaction trans, List<GenOrdenCompraDTO> lstOC)
        {
            var usuario = vSesiones.sesionUsuarioDTO;
            var comprador = ufs.getUsuarioService().getUserEk(usuario.id);
            var lst = new List<OrdenCompraDTO>();
            const string n = "N";
            const decimal iva = 0.16m;
            lstOC.GroupBy(g => g.cc).ToList().ForEach(g =>
            {
                var max = getMaxNumOC(trans, g.Key);
                g.ToList().ForEach(o =>
                {
                    var r = getRequisicion(trans, o.cc, o.numero);
                    r.lstPartidas = new List<OrdenCompraDetDTO>();
                    var sub = o.lstPartida.Sum(s => s.colocada * s.precio * s.tc);
                    var total = sub * iva;
                    var numReq = r.numero;
                    r.numero = ++max;
                    r.proveedor = o.proveedor;
                    r.comprador = comprador.empleado;
                    r.moneda = o.lstPartida.FirstOrDefault().moneda;
                    r.tipo_cambio = o.lstPartida.FirstOrDefault().tc;
                    r.porcent_iva = iva * 100;
                    r.iva = iva;
                    r.sub_total = sub;
                    r.total = total;
                    r.tipo_oc_req = r.tipo_req_oc;
                    r.num_vobo = r.num_vobo ?? 0;
                    r.comentarios = r.comentarios ?? string.Empty;
                    r.st_impresa = r.st_impresa ?? string.Empty;
                    r.estatus = r.st_estatus ?? string.Empty;
                    r.anticipo = r.anticipo ?? string.Empty;
                    r.bienes_servicios = r.bienes_servicios ?? string.Empty;
                    r.concepto_factura = r.concepto_factura ?? string.Empty;
                    r.embarquese = r.embarquese ?? string.Empty;
                    r.estatus_bloqueo = r.estatus_bloqueo ?? string.Empty;
                    r.ruta_map = r.ruta_map ?? string.Empty;
                    r.ruta_pdf = r.ruta_pdf ?? string.Empty;
                    r.st_autoriza = r.st_autoriza ?? string.Empty;
                    r.st_autorizada = r.st_autorizada ?? string.Empty;
                    r.ST_OC = r.ST_OC ?? string.Empty;
                    r.tc_cc = 1;
                    r.bit_autorecepcion = n;
                    r.imprime_porcentaje = n;
                    r.bit_af = n;
                    r.bit_arrenda = n;
                    r.vobo_informa = n;
                    o.lstPartida.ForEach(p =>
                    {
                        var rd = getRequisicionDet(trans, o.cc, o.numero, p.partida);
                        rd.num_requisicion = numReq;
                        rd.precio = p.precio;
                        rd.cantidad = p.colocada;
                        rd.importe = p.precio * p.colocada;
                        rd.cant_ordenada -= p.colocada;
                        rd.part_requisicion = rd.partida;
                        rd.descripcion = p.partidaDesc;
                        rd.numero = r.numero;
                        rd.fecha_recibido = new DateTime(1947, 1, 1);
                        r.lstPartidas.Add(rd);
                    });
                    lst.Add(r);
                });
            });
            return lst;
        }
        int getMaxNumOC(OdbcTransaction trans, string cc)
        {
            using (var cmd = new OdbcCommand("SELECT MAX(numero) FROM so_orden_compra WHERE cc = ?"))
            {
                OdbcParameterCollection parameters = cmd.Parameters;
                parameters.Add("@cc", OdbcType.Char).Value = cc;
                cmd.Connection = trans.Connection;
                cmd.Transaction = trans;
                return Convert.ToInt32(cmd.ExecuteScalar());
            }
        }
        OrdenCompraDTO getRequisicion(OdbcTransaction trans, string cc, int numero)
        {
            using (var cmd = new OdbcCommand("SELECT * FROM so_requisicion WHERE cc = ? AND numero = ?"))
            {
                OdbcParameterCollection parameters = cmd.Parameters;
                parameters.Add("@cc", OdbcType.Char).Value = cc;
                parameters.Add("@numero", OdbcType.Numeric).Value = numero;
                cmd.Connection = trans.Connection;
                cmd.Transaction = trans;
                using (var req = cmd.ExecuteReader())
                {
                    req.Read();
                    return new OrdenCompraDTO()
                    {
                        cc = req[0] as string,
                        numero = Convert.ToInt32(req[1]),
                        fecha = (req[2] as DateTime?) ?? new DateTime(),
                        libre_abordo = Convert.ToInt32(req[3]),
                        tipo_req_oc = req[4] as string,
                        solicito = Convert.ToInt32(req[5]),
                        vobo = Convert.ToInt32(req[6]),
                        autorizo = Convert.ToInt32(req[7]),
                        comentarios = req[8] as string,
                        st_estatus = req[9] as string,
                        st_impresa = req[10] as string,
                        st_autoriza = req[11] as string,
                        emp_autoriza = req[12] == DBNull.Value ? 0 : Convert.ToInt32(req[12]),
                        empleado_modifica = req[13] == DBNull.Value ? 0 : Convert.ToInt32(req[13]),
                        fecha_modifica = (req[14] as DateTime?) ?? new DateTime(),
                        hora_modifica = (req[15] as DateTime?) ?? new DateTime(),
                        fecha_autoriza = (req[16] as DateTime?) ?? new DateTime(),
                        tmc = Convert.ToInt32(req[17]),
                        autoriza_activos = Convert.ToInt32(req[18]),
                        //num_vobo = Convert.ToInt32(req[19])
                    };
                }
            }
        }
        OrdenCompraDetDTO getRequisicionDet(OdbcTransaction trans, string cc, int numero, int partida)
        {
            using (var cmd = new OdbcCommand("SELECT * FROM so_requisicion_det WHERE cc = ? AND numero = ? AND partida = ?"))
            {
                OdbcParameterCollection parameters = cmd.Parameters;
                parameters.Add("@cc", OdbcType.Char).Value = cc;
                parameters.Add("@numero", OdbcType.Numeric).Value = numero;
                parameters.Add("@partida", OdbcType.Numeric).Value = partida;
                cmd.Connection = trans.Connection;
                cmd.Transaction = trans;
                using (var req = cmd.ExecuteReader())
                {
                    req.Read();
                    return new OrdenCompraDetDTO()
                    {
                        cc = req[0] as string,
                        numero = Convert.ToInt32(req[1]),
                        partida = Convert.ToInt32(req[2]),
                        insumo = Convert.ToInt32(req[3]),
                        cantidad = Convert.ToDecimal(req[5]),
                        fecha_entrega = (req[4] as DateTime?) ?? new DateTime(),
                        cant_ordenada = Convert.ToDecimal(req[6]),
                        cant_canc = Convert.ToDecimal(req[9]),
                        area = Convert.ToInt32(req[12]),
                        cuenta = Convert.ToInt32(req[13]),
                    };
                }
            }
        }
        RequisicionDetDTO getReqDet(OdbcTransaction trans, string cc, int numero, int partida)
        {
            using (var cmd = new OdbcCommand("SELECT * FROM so_requisicion_det WHERE cc = ? AND numero = ? AND partida = ?"))
            {
                OdbcParameterCollection parameters = cmd.Parameters;
                parameters.Add("@cc", OdbcType.Char).Value = cc;
                parameters.Add("@numero", OdbcType.Numeric).Value = numero;
                parameters.Add("@partida", OdbcType.Numeric).Value = partida;
                cmd.Connection = trans.Connection;
                cmd.Transaction = trans;
                using (var req = cmd.ExecuteReader())
                {
                    req.Read();
                    return new RequisicionDetDTO()
                    {
                        cc = req[0] as string,
                        numero = Convert.ToInt32(req[1]),
                        partida = Convert.ToInt32(req[2]),
                        insumo = (int)req[3],
                        fecha_requerido = (req[4] as DateTime?) ?? new DateTime(),
                        cantidad = Convert.ToDecimal(req[5]),
                        cant_ordenada = Convert.ToDecimal(req[6]),
                        fecha_ordenada = (req[7] as DateTime?) ?? new DateTime(),
                        estatus = req[8] as string,
                        cant_cancelada = Convert.ToDecimal(req[9]),
                        referencia_1 = req[10] as string,
                        cantidad_excedida_ppto = Convert.ToDecimal(req[11]),
                        area = Convert.ToInt32(req[12]),
                        cuenta = Convert.ToInt32(req[13]),
                    };
                }
            }
        }
        #region Generar
        public dynamic getComprador()
        {
            if ((int)EmpresaEnum.Peru == vSesiones.sesionEmpresaActual)
            {
                #region PERU
                try
                {
                    tblP_Usuario objUsuario = _context.tblP_Usuario.Where(w => w.id == (int)vSesiones.sesionUsuarioDTO.id && w.estatus).FirstOrDefault();
                    if (objUsuario == null)
                        throw new Exception("Ocurrió un error al obtener la información del usuario logueado.");

                    string[] lstNombres = objUsuario.nombre.Split(' ');
                    string primerNombre = lstNombres[0];
                    string apellidoPaterno = objUsuario.apellidoPaterno;
                    string nombreUsuario = string.Format("{0} {1}", primerNombre.Trim(), apellidoPaterno.Trim());

                    return new
                    {
                        comprador = (int)objUsuario.id,
                        emplNom = (string)nombreUsuario
                    };
                }
                catch (Exception e)
                {
                    var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                    return 0;
                }
                #endregion
            }
            else
            {
                #region OTRAS EMPRESAS
                try
                {
                    var usuario = vSesiones.sesionUsuarioDTO;
                    var relUser = ufs.getUsuarioService().getUserEk(usuario.id);

                    var resEK = consultaCheckProductivo(
                            string.Format(@"SELECT TOP 1 
                                                c.comprador, 
                                                ( 
                                                    SELECT 
                                                        descripcion 
                                                    FROM empleados e 
                                                    WHERE e.empleado = c.comprador 
                                                ) AS emplNom 
                                            FROM so_asigna_comp c 
                                            WHERE c.comprador = {0}", relUser.empleado)
                        );

                    if (resEK != null)
                    {
                        var res = (dynamic)resEK.ToObject<dynamic>();

                        return new
                        {
                            comprador = (int)res[0].comprador,
                            emplNom = (string)res[0].emplNom
                        };
                    }
                    else
                    {
                        return 0;
                    }

                }
                catch (Exception e)
                {
                    var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                    return 0;
                }
                #endregion
            }
        }
        public dynamic busqReqNum(BusqReq busq)
        {
            try
            {
                var req = (List<dynamic>)consultaCheckProductivo(
                    string.Format(@"SELECT r.numero FROM so_requisicion r 
                                    WHERE r.st_autoriza = 'S' 
                                        AND st_estatus <> 'T'
                                        AND fecha between '{0}' AND '{1}' 
                                        AND r.cc in ({2})"
                    , busq.ini.ToString("yyyyMMdd"), busq.fin.ToString("yyyyMMdd"), ListToLine(busq.lstCc)
                    )).ToObject<List<dynamic>>();
                var lst = req.Select(r => (int)r.numero).ToList();
                return new List<int> { lst.Min(), lst.Max() };
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, new { busq = busq });
                return new List<int>();
            }
        }
        public dynamic busqReq(BusqReq busq)
        {
            try
            {
                var consulta = string.Format(@"SELECT 
                                                   *, 
                                                   (SELECT t.descripcion FROM so_tipo_requisicion t WHERE t.tipo_req_oc = r.tipo_req_oc) AS tipo, 
                                                   (SELECT l.descripcion FROM so_libre_abordo l WHERE l.numero = r.libre_abordo) AS lab, 
                                                   (SELECT s.descripcion FROM empleados s WHERE s.empleado = r.solicito) AS solNom, 
                                                   (SELECT a.descripcion FROM empleados a WHERE a.empleado = r.autorizo) AS authNom 
                                               FROM so_requisicion r 
                                               WHERE r.cc in ({0}) AND r.numero = {1}", busq.cc, busq.numeroRequisicion);

                var req = (List<dynamic>)consultaCheckProductivo(consulta).ToObject<List<dynamic>>();

                return req.Select(r => new
                {
                    folio = string.Format("{0}-{1}", r.cc, r.numero.ToString("000000")),

                    cc = (string)r.cc,
                    numero = (int)r.numero,
                    fecha = r.fecha.ToString("dd/MM/yyyy"),
                    libre_abordo = r.libre_abordo ?? 0,
                    tipo_req_oc = r.tipo_req_oc ?? 0,

                    tipo = (string)r.tipo,
                    lab = (string)r.lab,

                    solicito = (int)r.solicito,
                    vobo = r.vobo ?? 0,
                    autorizo = r.autorizo ?? 0,
                    comentarios = (string)r.comentarios,
                    st_estatus = (string)r.st_estatus,
                    st_impresa = (string)r.st_impresa,
                    st_autorizada = (string)r.st_autorizada,
                    emp_autoriza = r.emp_autoriza ?? 0,
                    empleado_modifica = r.empleado_modifica ?? 0,
                    fecha_modifica = r.fecha_modifica.ToString("dd/MM/yyyy"),
                    fecha_autoriza = r.fecha_autoriza.ToString("dd/MM/yyyy"),
                    tmc = r.tmc ?? 0,
                    autoriza_activos = r.autoriza_activos ?? 0,
                    num_vobo = r.num_vobo ?? 0,

                    proveedor = string.Empty,
                    nombre = string.Empty,
                    solNom = (string)r.solNom,
                    authNom = (string)r.authNom,

                    folioOrigen = getFolioOrigen((string)r.cc, (int)r.numero)
                }).ToList();
            }
            catch (Exception) { return new List<int>(); }
        }
        public dynamic getPartidas(string cc, int num, int moneda)
        {
            try
            {
                var par = (List<dynamic>)consultaCheckProductivo(
                    string.Format(@"SELECT 
                                        d.*, 
                                        i.descripcion as insumoDesc, 
                                        i.unidad, 
                                        i.cancelado, 
                                        (
                                            SELECT TOP 1 
                                                l.descripcion 
                                            FROM so_req_det_linea l 
                                            WHERE l.cc = d.cc AND l.numero = d.numero AND l.partida = d.partida
                                        ) as partidaDesc 
                                    FROM so_requisicion_det d 
                                        INNER JOIN insumos i ON d.insumo = i.insumo 
                                    WHERE d.cantidad - d.cant_ordenada > 0 AND d.cc = '{0}' AND d.numero = {1} 
                                    ORDER BY d.partida", cc, num)
                ).ToObject<List<dynamic>>();
                var lstPartida = new object[par.Count];
                var i = 0;
                var tc = mfs.getMonedaService().getTcHoy(moneda);
                foreach (var p in par)
                {
                    lstPartida[i] = new
                    {
                        cc = (string)p.cc,
                        numero = (int?)p.numero,
                        partida = (int?)p.partida,
                        insumo = (int?)p.insumo,
                        insumoDesc = (string)p.insumoDesc,
                        unidad = (string)p.unidad,
                        cancelado = (string)p.cancelado,
                        fecha_requerido = (DateTime?)p.fecha_requerido,
                        cantidad = (decimal?)p.cantidad,
                        cant_ordenada = (decimal?)p.cant_ordenada,
                        fecha_ordenada = (DateTime?)p.fecha_ordenada,
                        estatus = (string)p.estatus,
                        cant_cancelada = (decimal?)p.cant_cancelada,
                        referencia_1 = (string)p.referencia_1,
                        cantidad_excedida_ppto = (decimal?)p.cantidad_excedida_ppto,
                        area = (int?)p.area,
                        cuenta = (int?)p.cuenta,
                        partidaDesc = (string)p.partidaDesc,
                        prov = string.Empty,
                        colocada = 0,
                        moneda = moneda,
                        tc = tc,
                        precio = 0,
                        importe = 0,
                        isOrigen = true
                    };
                    i++;
                }
                return lstPartida;
            }
            catch (Exception) { return 0; }
        }
        #endregion
        #region CBO
        public List<Core.DTO.Principal.Generales.ComboDTO> FillComboCcReqComprador(BusqReq busq)
        {
            try
            {
                var res = (List<dynamic>)consultaCheckProductivo(string.Format("SELECT c.cc FROM so_asigna_comp c WHERE c.comprador = {0}", busq.numComp)).ToObject<List<dynamic>>();
                var lstCC = res.Select(c => (string)c.cc).ToList();

                return (List<Core.DTO.Principal.Generales.ComboDTO>)consultaCheckProductivo(
                    string.Format(@"SELECT 
                                        r.cc AS Value, 
                                        (SELECT TOP 1 c.cc + '-' + c.descripcion FROM cc c WHERE c.cc = r.cc AND c.st_ppto != 'T') AS Text 
                                    FROM so_requisicion r 
                                    {0} 
                                    WHERE r.st_autoriza = 'S' AND st_estatus <> 'T' " +
                    //@"AND fecha between '{1}' AND '{2}'" 
                                    @"GROUP BY Value"
                    , lstCC.Any(c => c.Equals("*")) ? "" : "INNER JOIN so_asigna_comp a ON r.cc = a.cc AND a.comprador = " + busq.numComp
                    //, busq.ini.ToString("yyyyMMdd")
                    //, busq.fin.ToString("yyyyMMdd")
                    )).ToObject<List<Core.DTO.Principal.Generales.ComboDTO>>();
            }
            catch (Exception) { return new List<Core.DTO.Principal.Generales.ComboDTO>(); }
        }
        public List<Core.DTO.Principal.Generales.ComboDTO> FillComboCcComComprador()
        {
            try
            {
                var comprador = getComprador();
                var hoy = DateTime.Today.Date;
                var fechaIni = new DateTime(hoy.Year, 1, 1).Date;
                var fechaFin = new DateTime(hoy.Year, 12, 31).Date;

                var res = (List<dynamic>)consultaCheckProductivo(string.Format("SELECT c.cc FROM so_asigna_comp c WHERE c.comprador = {0}", comprador.comprador)).ToObject<List<dynamic>>();
                var lstCC = res.Select(c => (string)c.cc).ToList();
                return (List<Core.DTO.Principal.Generales.ComboDTO>)consultaCheckProductivo(
                    string.Format(@"SELECT r.cc AS Value, (SELECT c.cc + '-' + c.descripcion FROM cc c WHERE c.cc = r.cc AND c.st_ppto != 'T') AS Text 
                                    FROM so_orden_compra r 
                                    {0}
                                    WHERE fecha BETWEEN '{1}' AND '{2}'
                                    GROUP BY Value ORDER BY r.cc"
                    , lstCC.Any(c => c.Equals("*")) ? "" : "INNER JOIN so_asigna_comp a ON r.cc = a.cc AND a.comprador = " + comprador.comprador, fechaIni.ToString("yyyyMMdd"), fechaFin.ToString("yyyyMMdd")
                    )).ToObject<List<Core.DTO.Principal.Generales.ComboDTO>>();
                //r.st_autorizada = 'S' AND estatus <> 'T' AND
            }
            catch (Exception) { return new List<Core.DTO.Principal.Generales.ComboDTO>(); }
        }
        public List<Core.DTO.Principal.Generales.ComboDTO> FillComboCcComCompradorModalEditar()
        {
            try
            {
                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {
                    case EmpresaEnum.Peru:
                        #region PERU
                        {
                            using (var ctxPeru = new MainContext())
                            {
                                var ccsPermitidos = ctxPeru.tblP_CC_Usuario.Where(x => x.usuarioID == vSesiones.sesionUsuarioDTO.id).Select(x => x.cc).ToList();
                                var empleadoEK = ufs.getUsuarioService().getUserEk(vSesiones.sesionUsuarioDTO.id).empleado;

                                var registroPermisoComprador = ctxPeru.tblCom_Comprador.FirstOrDefault(x => x.empleado == empleadoEK);
                                var registroPermisoCC = ctxPeru.tblP_CC_Usuario.Where(x => x.usuarioID == vSesiones.sesionUsuarioDTO.id);

                                //                                var registroPermisoCompradorEK = consultaCheckProductivoConstruplan(string.Format(@"
                                //                                    SELECT TOP 1 
                                //                                        c.comprador, 
                                //                                        ( 
                                //                                            SELECT 
                                //                                                descripcion 
                                //                                            FROM empleados e 
                                //                                            WHERE e.empleado = c.comprador 
                                //                                        ) AS emplNom 
                                //                                    FROM so_asigna_comp c 
                                //                                    WHERE c.comprador = {0}", ufs.getUsuarioService().getUserEk(vSesiones.sesionUsuarioDTO.id).empleado));

                                //if (registroPermisoCompradorEK != null)
                                if ((registroPermisoComprador != null && registroPermisoCC != null && registroPermisoCC.Count() > 0) || empleadoEK == 1)
                                {
                                    //                                    var listaRegistrosPermisosCompradorEK = (List<dynamic>)consultaCheckProductivo(string.Format(@"
                                    //                                        SELECT c.cc FROM so_asigna_comp c WHERE c.comprador = {0}", registroPermisoCompradorEK[0].comprador
                                    //                                    )).ToObject<List<dynamic>>();
                                    //var listaPermisosCCEK = listaRegistrosPermisosCompradorEK.Select(c => (string)c.cc).ToList();

                                    if (empleadoEK != 1)
                                    {
                                        var listaPermisosCCEK = registroPermisoCC.Select(c => c.cc).ToList();

                                        if (listaPermisosCCEK.Any(c => c.Equals("*")))
                                        {
                                            return ctxPeru.tblP_CC.Where(x =>
                                                x.estatus &&
                                                (((PerfilUsuarioEnum)vSesiones.sesionUsuarioDTO.idPerfil == PerfilUsuarioEnum.ADMINISTRADOR) ? true : ccsPermitidos.Contains(x.cc)) &&
                                                x.cc.Length > 3
                                            ).Select(x => new Core.DTO.Principal.Generales.ComboDTO
                                            {
                                                Value = x.cc,
                                                Text = "[" + x.cc + "] " + x.descripcion.Trim()
                                            }).ToList();
                                        }
                                        else
                                        {
                                            return ctxPeru.tblP_CC.Where(x =>
                                                x.estatus &&
                                                (((PerfilUsuarioEnum)vSesiones.sesionUsuarioDTO.idPerfil == PerfilUsuarioEnum.ADMINISTRADOR) ? true : ccsPermitidos.Contains(x.cc)) &&
                                                x.cc.Length > 3 &&
                                                listaPermisosCCEK.Contains(x.cc)
                                            ).Select(x => new Core.DTO.Principal.Generales.ComboDTO
                                            {
                                                Value = x.cc,
                                                Text = "[" + x.cc + "] " + x.descripcion.Trim()
                                            }).ToList();
                                        }
                                    }
                                    else
                                    {
                                        return ctxPeru.tblP_CC.Where(x => x.estatus && x.cc.Length > 3).Select(x => new Core.DTO.Principal.Generales.ComboDTO
                                        {
                                            Value = x.cc,
                                            Text = "[" + x.cc + "] " + x.descripcion.Trim()
                                        }).ToList();
                                    }
                                }
                                else
                                {
                                    return null;
                                }
                            }
                        }
                        #endregion
                    default:
                        #region DEMAS EMPRESAS
                        {
                            var comprador = getComprador();

                            var res = (List<dynamic>)consultaCheckProductivo(string.Format("SELECT c.cc FROM so_asigna_comp c WHERE c.comprador = {0}", comprador.comprador)).ToObject<List<dynamic>>();
                            var lstCC = res.Select(c => (string)c.cc).ToList();

                            var consultaCC = "";

                            if (lstCC.Any(c => c.Equals("*")))
                            {
                                consultaCC = "SELECT cc AS Value, cc + '-' + descripcion AS Text FROM cc WHERE st_ppto != 'T' ORDER BY Value";
                            }
                            else
                            {
                                consultaCC = string.Format(@"
                                SELECT 
                                    a.cc AS Value, 
                                    a.cc + '-' + c.descripcion AS Text 
                                FROM so_asigna_comp a 
                                    INNER JOIN cc c ON a.cc = c.cc AND c.st_ppto != 'T' 
                                WHERE a.comprador = {0}", comprador.comprador);
                                //                    consultaCC = string.Format(@"
                                //                        SELECT 
                                //                            r.cc AS Value, 
                                //                            (SELECT c.cc + '-' + c.descripcion FROM cc c WHERE c.cc = r.cc AND c.st_ppto != 'T') AS Text 
                                //                        FROM so_orden_compra r 
                                //                            INNER JOIN cc c ON r.cc = c.cc AND c.st_ppto != 'T' 
                                //                        {0} 
                                //                        GROUP BY Value ORDER BY Value"
                                //                    , "INNER JOIN so_asigna_comp a ON r.cc = a.cc AND a.comprador = " + comprador.comprador);
                            }
                            var result = (List<Core.DTO.Principal.Generales.ComboDTO>)consultaCheckProductivo(consultaCC).ToObject<List<Core.DTO.Principal.Generales.ComboDTO>>();

                            return result.Where(x => x.Text != null).ToList();
                        }
                        #endregion
                }
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                return new List<Core.DTO.Principal.Generales.ComboDTO>();
            }
        }
        public List<ComboDTO> FillComboCcAut(bool isAuth)
        {
            try
            {
                var usuario = vSesiones.sesionUsuarioDTO;
                var relUser = ufs.getUsuarioService().getUserEk(usuario.id);
                dynamic permisosPorMontoEK = null;
                List<ComboDTO> resultado = new List<ComboDTO>();

                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {
                    case EmpresaEnum.Construplan:
                    case EmpresaEnum.EICI:
                        #region Empresa Construplan/EICI
                        permisosPorMontoEK = consultaCheckProductivo(
                            string.Format(@"SELECT 
                                            tblPrincipal.cc, 
                                            tblPrincipal.num_autorizacioines AS tblPrincipalNumAutorizaciones, 
                                            tblPrincipal.monto_minimo_autoriza, 
                                            tblPrincipal.monto_maximo_autoriza, 
                                            tblPrincipal.consecutivo, 
                                            
                                            tblVobo.empleado AS empleadoVobo, 
                                            tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                            
                                            tblGrupos.tipo AS tipoGrupo, 
                                            tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                            
                                            tblAut.empleado AS empleadoAutoriza, 
                                            tblAut.num_autorizaciones AS tblAutNumAutorizaciones, 
                                            tblAut.orden AS ordenAutorizacion 
                                        FROM so_cc_autorizacion tblPrincipal 
                                            LEFT JOIN so_empleados_cc tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                            LEFT JOIN so_rel_tipos_vobo tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                            LEFT JOIN so_empleados_autoriza_cc tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                        WHERE tblVobo.empleado = {0} OR tblAut.empleado = {0} 
                                        ORDER BY tblPrincipal.consecutivo", relUser.empleado)
                        );

                        if (permisosPorMontoEK != null)
                        {
                            var permisosPorMonto = (List<PermisoMontoDTO>)permisosPorMontoEK.ToObject<List<PermisoMontoDTO>>();

                            var comprasPendientesEK = consultaCheckProductivo(
                                    string.Format(@"SELECT 
                                                oc.cc, 
                                                oc.numero, 
                                                oc.fecha, 
                                                oc.total, 
                                                det.partida, 
                                                det.insumo, 
                                                CAST(LEFT(det.insumo, 3) AS int) AS tipoGrupo, 
                                                c.descripcion AS ccDesc, 
                                                det.area, 
                                                det.cuenta 
                                            FROM so_orden_compra oc 
                                                INNER JOIN so_orden_compra_det det ON oc.cc = det.cc AND oc.numero = det.numero 
                                                INNER JOIN cc c ON c.cc = oc.cc 
                                            WHERE c.st_ppto != 'T' {0}", isAuth ? "AND oc.ST_OC = 'A'" : "AND (oc.ST_OC != 'A' OR oc.ST_OC IS NULL)")
                                );

                            if (comprasPendientesEK != null)
                            {
                                var comprasPendientes = (List<dynamic>)comprasPendientesEK.ToObject<List<dynamic>>();

                                if (relUser.empleado != 1)
                                {
                                    var voboEmpleadoTipoGrupo703EK = consultaCheckProductivo(
                                        string.Format(@"SELECT * FROM so_cc_vobo WHERE empleado = {0}", relUser.empleado)
                                    );

                                    List<dynamic> voboEmpleadoTipoGrupo703 = new List<dynamic>();

                                    if (voboEmpleadoTipoGrupo703EK != null)
                                    {
                                        voboEmpleadoTipoGrupo703.AddRange((List<dynamic>)voboEmpleadoTipoGrupo703EK.ToObject<List<dynamic>>());
                                    }

                                    var checkAutorizaActivosFijos = consultaCheckProductivo(
                                        string.Format(@"SELECT * FROM empleados WHERE empleado = {0} AND autoriza_activos_fijos = 1", relUser.empleado)
                                    ) != null;

                                    foreach (var com in comprasPendientes)
                                    {
                                        var total = Convert.ToDecimal(com.total, CultureInfo.InvariantCulture);
                                        var checkPermisosMonto = permisosPorMonto.FirstOrDefault(x =>
                                                        x.cc == (string)com.cc &&
                                                        x.monto_minimo_autoriza <= total &&
                                                        x.monto_maximo_autoriza >= total &&
                                                        x.tipoGrupo == (int)com.tipoGrupo) != null;

                                        var checkVoboEmpleadoTipoGrupo = voboEmpleadoTipoGrupo703.FirstOrDefault(x => (string)x.cc == (string)com.cc) != null && (int)com.tipoGrupo == 703;

                                        if (checkVoboEmpleadoTipoGrupo || checkPermisosMonto || (checkAutorizaActivosFijos && (int)com.tipoGrupo == 703))
                                        {
                                            if (!resultado.Any(x => x.Value == (string)com.cc))
                                            {
                                                resultado.Add(new ComboDTO
                                                {
                                                    Value = (string)com.cc,
                                                    Text = (string)com.cc + "-" + (string)com.ccDesc
                                                });
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    foreach (var com in comprasPendientes)
                                    {
                                        if (!resultado.Any(x => x.Value == (string)com.cc))
                                        {
                                            resultado.Add(new ComboDTO
                                            {
                                                Value = (string)com.cc,
                                                Text = (string)com.cc + "-" + (string)com.ccDesc
                                            });
                                        }
                                    }
                                }
                            }
                        }
                        #endregion
                        break;
                    case EmpresaEnum.Colombia:
                        #region Empresa Colombia
                        permisosPorMontoEK = consultaCheckProductivo(
                        string.Format(@"SELECT 
                                            tblPrincipal.cc, 
                                            tblPrincipal.num_autorizacioines AS tblPrincipalNumAutorizaciones, 
                                            tblPrincipal.monto_minimo_autoriza, 
                                            tblPrincipal.monto_maximo_autoriza, 
                                            tblPrincipal.consecutivo, 
                                            
                                            tblVobo.empleado AS empleadoVobo, 
                                            tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                            
                                            tblGrupos.tipo AS tipoGrupo, 
                                            tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                            
                                            tblAut.empleado AS empleadoAutoriza, 
                                            tblAut.num_autorizaciones AS tblAutNumAutorizaciones, 
                                            tblAut.orden AS ordenAutorizacion 
                                        FROM so_cc_autorizacion tblPrincipal 
                                            LEFT JOIN so_empleados_cc tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                            LEFT JOIN so_rel_tipos_vobo tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                            LEFT JOIN so_empleados_autoriza_cc tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                        WHERE tblVobo.empleado = {0} OR tblAut.empleado = {0} 
                                        ORDER BY tblPrincipal.consecutivo", relUser.empleado)
                    );

                        if (permisosPorMontoEK != null)
                        {
                            var permisosPorMonto = (List<PermisoMontoDTO>)permisosPorMontoEK.ToObject<List<PermisoMontoDTO>>();

                            var comprasPendientesEK = consultaCheckProductivo(
                                    string.Format(@"SELECT 
                                                oc.cc, 
                                                oc.numero, 
                                                oc.fecha, 
                                                oc.total, 
                                                det.partida, 
                                                det.insumo, 
                                                CAST(LEFT(det.insumo, 3) AS int) AS tipoGrupo, 
                                                c.descripcion AS ccDesc, 
                                                det.area, 
                                                det.cuenta 
                                            FROM so_orden_compra oc 
                                                INNER JOIN so_orden_compra_det det ON oc.cc = det.cc AND oc.numero = det.numero 
                                                INNER JOIN cc c ON c.cc = oc.cc 
                                            WHERE c.st_ppto != 'T' {0}", isAuth ? "AND (oc.vobo_aut = 'S' OR oc.aut_aut = 'S')" : "AND (oc.vobo_aut = 'N' AND oc.aut_aut = 'N')")
                                );

                            if (comprasPendientesEK != null)
                            {
                                var comprasPendientes = (List<dynamic>)comprasPendientesEK.ToObject<List<dynamic>>();

                                if (relUser.empleado != 1)
                                {
                                    var voboEmpleadoTipoGrupo703EK = consultaCheckProductivo(
                                        string.Format(@"SELECT * FROM so_cc_vobo WHERE empleado = {0}", relUser.empleado)
                                    );

                                    List<dynamic> voboEmpleadoTipoGrupo703 = new List<dynamic>();

                                    if (voboEmpleadoTipoGrupo703EK != null)
                                    {
                                        voboEmpleadoTipoGrupo703.AddRange((List<dynamic>)voboEmpleadoTipoGrupo703EK.ToObject<List<dynamic>>());
                                    }

                                    var checkAutorizaActivosFijos = consultaCheckProductivo(
                                        string.Format(@"SELECT * FROM empleados WHERE empleado = {0} AND autoriza_activos_fijos = 1", relUser.empleado)
                                    ) != null;

                                    foreach (var com in comprasPendientes)
                                    {
                                        var total = Convert.ToDecimal(com.total, CultureInfo.InvariantCulture);
                                        var checkPermisosMonto = permisosPorMonto.FirstOrDefault(x =>
                                                        x.cc == (string)com.cc &&
                                                        x.monto_minimo_autoriza <= total &&
                                                        x.monto_maximo_autoriza >= total &&
                                                        x.tipoGrupo == (int)com.tipoGrupo) != null;

                                        var checkVoboEmpleadoTipoGrupo = voboEmpleadoTipoGrupo703.FirstOrDefault(x => (string)x.cc == (string)com.cc) != null && (int)com.tipoGrupo == 703;

                                        if (checkVoboEmpleadoTipoGrupo || checkPermisosMonto || (checkAutorizaActivosFijos && (int)com.tipoGrupo == 703))
                                        {
                                            if (!resultado.Any(x => x.Value == (string)com.cc))
                                            {
                                                resultado.Add(new ComboDTO
                                                {
                                                    Value = (string)com.cc,
                                                    Text = (string)com.cc + "-" + (string)com.ccDesc
                                                });
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    foreach (var com in comprasPendientes)
                                    {
                                        if (!resultado.Any(x => x.Value == (string)com.cc))
                                        {
                                            resultado.Add(new ComboDTO
                                            {
                                                Value = (string)com.cc,
                                                Text = (string)com.cc + "-" + (string)com.ccDesc
                                            });
                                        }
                                    }
                                }
                            }
                        }
                        #endregion
                        break;
                    case EmpresaEnum.Arrendadora:
                        #region Empresa Arrendadora
                        permisosPorMontoEK = consultaCheckProductivo(
                            string.Format(@"SELECT 
                                                            tblPrincipal.area, 
                                                            tblPrincipal.cuenta, 
                                                            tblPrincipal.num_autorizaciones AS tblPrincipalNumAutorizaciones, 
                                                            tblPrincipal.monto_minimo_autoriza, 
                                                            tblPrincipal.monto_maximo_autoriza, 
                                                            tblPrincipal.consecutivo, 
                                                            
                                                            tblVobo.empleado AS empleadoVobo, 
                                                            tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                            
                                                            tblGrupos.tipo AS tipoGrupo, 
                                                            tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                            
                                                            tblAut.empleado AS empleadoAutoriza, 
                                                            tblAut.num_autorizaciones AS tblAutNumAutorizaciones 
                                                        FROM so_area_cta_autorizacion tblPrincipal 
                                                            LEFT JOIN so_empleados_area_cta tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                                            LEFT JOIN so_rel_tipos_vobo_area_cta tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                                            LEFT JOIN so_empleados_autoriza_area_cta tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                                        WHERE tblVobo.empleado = {0} OR tblAut.empleado = {0} 
                                                        ORDER BY tblPrincipal.consecutivo", relUser.empleado)
                        );

                        if (permisosPorMontoEK != null)
                        {
                            var permisosPorMonto = (List<PermisoMontoDTO>)permisosPorMontoEK.ToObject<List<PermisoMontoDTO>>();

                            var comprasPendientesEK = consultaCheckProductivo(
                                    string.Format(@"SELECT 
                                                oc.cc, 
                                                oc.numero, 
                                                oc.fecha, 
                                                oc.total, 
                                                det.partida, 
                                                det.insumo, 
                                                CAST(LEFT(det.insumo, 3) AS int) AS tipoGrupo, 
                                                c.descripcion AS ccDesc, 
                                                det.area, 
                                                det.cuenta 
                                            FROM so_orden_compra oc 
                                                INNER JOIN so_orden_compra_det det ON oc.cc = det.cc AND oc.numero = det.numero 
                                                INNER JOIN cc c ON c.cc = oc.cc 
                                            WHERE c.st_ppto != 'T' {0}", isAuth ? "AND oc.ST_OC = 'A'" : "AND (oc.ST_OC != 'A' OR oc.ST_OC IS NULL)")
                                );

                            if (comprasPendientesEK != null)
                            {
                                var comprasPendientes = (List<dynamic>)comprasPendientesEK.ToObject<List<dynamic>>();

                                if (relUser.empleado != 1)
                                {
                                    var voboEmpleadoTipoGrupo703EK = consultaCheckProductivo(
                                        string.Format(@"SELECT * FROM so_cc_vobo WHERE empleado = {0}", relUser.empleado)
                                    );

                                    List<dynamic> voboEmpleadoTipoGrupo703 = new List<dynamic>();

                                    if (voboEmpleadoTipoGrupo703EK != null)
                                    {
                                        voboEmpleadoTipoGrupo703.AddRange((List<dynamic>)voboEmpleadoTipoGrupo703EK.ToObject<List<dynamic>>());
                                    }

                                    var checkAutorizaActivosFijos = consultaCheckProductivo(
                                        string.Format(@"SELECT * FROM empleados WHERE empleado = {0} AND autoriza_activos_fijos = 1", relUser.empleado)
                                    ) != null;

                                    foreach (var com in comprasPendientes)
                                    {
                                        var total = Convert.ToDecimal(com.total, CultureInfo.InvariantCulture);
                                        var checkPermisosMonto = permisosPorMonto.FirstOrDefault(x =>
                                                        x.area == (int)com.area &&
                                                        x.cuenta == (int)com.cuenta &&
                                                        x.monto_minimo_autoriza <= total &&
                                                        x.monto_maximo_autoriza >= total &&
                                                        x.tipoGrupo == (int)com.tipoGrupo) != null;

                                        var checkVoboEmpleadoTipoGrupo = voboEmpleadoTipoGrupo703.FirstOrDefault(x => (string)x.cc == (string)com.cc) != null && (int)com.tipoGrupo == 703;

                                        if (checkVoboEmpleadoTipoGrupo || checkPermisosMonto || (checkAutorizaActivosFijos && (int)com.tipoGrupo == 703))
                                        {
                                            if (!resultado.Any(x => x.Value == (string)com.cc))
                                            {
                                                resultado.Add(new ComboDTO
                                                {
                                                    Value = (string)com.cc,
                                                    Text = (string)com.cc + "-" + (string)com.ccDesc
                                                });
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    foreach (var com in comprasPendientes)
                                    {
                                        if (!resultado.Any(x => x.Value == (string)com.cc))
                                        {
                                            resultado.Add(new ComboDTO
                                            {
                                                Value = (string)com.cc,
                                                Text = (string)com.cc + "-" + (string)com.ccDesc
                                            });
                                        }
                                    }
                                }
                            }
                        }
                        #endregion
                        break;
                }

                resultado = resultado.OrderBy(x => x.Value).ToList();

                return resultado;
            }
            catch (Exception)
            {
                return new List<ComboDTO>();
            }
        }
        public List<ComboDTO> FillComboCcAutTodas()
        {
            switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
            {
                case EmpresaEnum.Peru:
                    {
                        #region PERU
                        List<ComboDTO> lstCC = new List<ComboDTO>();
                        try
                        {
                            #region SE OBTIENE LISTADO DE CC DE PERU
                            lstCC = _context.Select<ComboDTO>(new DapperDTO
                            {
                                baseDatos = MainContextEnum.PERU,
                                consulta = @"SELECT t1.cc AS VALUE, '[' + t1.cc + '] ' + t2.descripcion AS TEXT
	                                        FROM tblCom_OrdenCompra AS t1
	                                        INNER JOIN tblP_CC AS t2 ON t2.cc = t1.cc
		                                        WHERE (t1.ST_OC != 'A' OR t1.ST_OC IS NULL) AND t1.estatus != 'C' AND t1.estatusRegistro = 1
			                                        GROUP BY t1.cc, t2.descripcion"
                            }).ToList();

                            return lstCC;
                            #endregion
                        }
                        catch (Exception e)
                        {
                            LogError(0, 0, _NOMBRE_CONTROLADOR, "FillComboCcAutTodas", e, AccionEnum.FILLCOMBO, 0, 0);
                            return lstCC;
                        }
                        #endregion
                    }
                case EmpresaEnum.Colombia:
                    {
                        #region COLOMBIA
                        try
                        {
                            var usuario = vSesiones.sesionUsuarioDTO;
                            var relUser = ufs.getUsuarioService().getUserEk(usuario.id);

                            List<ComboDTO> resultado = new List<ComboDTO>();

                            var comprasPendientesEK = consultaCheckProductivo(
                                    string.Format(@"SELECT 
                                            oc.cc, 
                                            oc.numero, 
                                            oc.fecha, 
                                            oc.total, 
                                            c.descripcion AS ccDesc 
                                        FROM so_orden_compra oc 
                                            INNER JOIN cc c ON c.cc = oc.cc 
                                        WHERE c.st_ppto != 'T' AND (oc.vobo_aut = 'N' AND oc.aut_aut = 'N') AND oc.estatus != 'C'")
                                );

                            if (comprasPendientesEK != null)
                            {
                                var comprasPendientes = (List<dynamic>)comprasPendientesEK.ToObject<List<dynamic>>();

                                foreach (var com in comprasPendientes)
                                {
                                    if (!resultado.Any(x => x.Value == (string)com.cc))
                                    {
                                        resultado.Add(new ComboDTO
                                        {
                                            Value = (string)com.cc,
                                            Text = (string)com.cc + "-" + (string)com.ccDesc
                                        });
                                    }
                                }
                            }

                            #region SE OBTIENE LISTADO DE OC INTERNAS
                            List<dynamic> lstOCInternas = _context.Select<dynamic>(new DapperDTO
                            {
                                baseDatos = vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                                consulta = @"SELECT t1.cc, t1.numero, t1.fecha, t1.total, t2.descripcion AS ccDesc
	                                    FROM tblCom_OrdenCompra_Interna AS t1 
	                                    INNER JOIN tblP_CC AS t2 ON t1.cc = t2.cc
		                                    WHERE (t1.ST_OC != '@ST_OC' OR t1.ST_OC IS NULL)",
                                parametros = new { ST_OC = 'A' }
                            }).ToList();

                            foreach (var com in lstOCInternas)
                            {
                                if (!resultado.Any(x => x.Value == (string)com.cc))
                                {
                                    resultado.Add(new ComboDTO
                                    {
                                        Value = (string)com.cc,
                                        Text = (string)com.cc + "-" + (string)com.ccDesc,
                                        Prefijo = "OC_INTERNA"
                                    });
                                }
                            }
                            #endregion

                            return resultado.OrderBy(x => x.Value).ToList();
                        }
                        catch (Exception)
                        {
                            return new List<ComboDTO>();
                        }
                        #endregion
                    }
                default:
                    {
                        #region DEMAS EMPRESAS
                        try
                        {
                            var usuario = vSesiones.sesionUsuarioDTO;
                            var relUser = ufs.getUsuarioService().getUserEk(usuario.id);

                            List<ComboDTO> resultado = new List<ComboDTO>();

                            var comprasPendientesEK = consultaCheckProductivo(
                                    string.Format(@"SELECT 
                                            oc.cc, 
                                            oc.numero, 
                                            oc.fecha, 
                                            oc.total, 
                                            c.descripcion AS ccDesc 
                                        FROM so_orden_compra oc 
                                            INNER JOIN cc c ON c.cc = oc.cc 
                                        WHERE c.st_ppto != 'T' AND (oc.ST_OC != 'A' OR oc.ST_OC IS NULL) AND oc.estatus != 'C'")
                                );

                            if (comprasPendientesEK != null)
                            {
                                var comprasPendientes = (List<dynamic>)comprasPendientesEK.ToObject<List<dynamic>>();

                                foreach (var com in comprasPendientes)
                                {
                                    if (!resultado.Any(x => x.Value == (string)com.cc))
                                    {
                                        resultado.Add(new ComboDTO
                                        {
                                            Value = (string)com.cc,
                                            Text = (string)com.cc + "-" + (string)com.ccDesc
                                        });
                                    }
                                }
                            }

                            #region SE OBTIENE LISTADO DE OC INTERNAS
                            List<dynamic> lstOCInternas = _context.Select<dynamic>(new DapperDTO
                            {
                                baseDatos = vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                                consulta = @"SELECT t1.cc, t1.numero, t1.fecha, t1.total, t2.descripcion AS ccDesc
	                                    FROM tblCom_OrdenCompra_Interna AS t1 
	                                    INNER JOIN tblP_CC AS t2 ON t1.cc = t2.cc
		                                    WHERE (t1.ST_OC != '@ST_OC' OR t1.ST_OC IS NULL)",
                                parametros = new { ST_OC = 'A' }
                            }).ToList();

                            foreach (var com in lstOCInternas)
                            {
                                if (!resultado.Any(x => x.Value == (string)com.cc))
                                {
                                    resultado.Add(new ComboDTO
                                    {
                                        Value = (string)com.cc,
                                        Text = (string)com.cc + "-" + (string)com.ccDesc,
                                        Prefijo = "OC_INTERNA"
                                    });
                                }
                            }
                            #endregion

                            return resultado.OrderBy(x => x.Value).ToList();
                        }
                        catch (Exception)
                        {
                            return new List<ComboDTO>();
                        }
                        #endregion
                    }
            }
        }
        public dynamic FillComboAreaCuentaTodas()
        {
            try
            {
                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {
                    case EmpresaEnum.Peru:
                    case EmpresaEnum.Colombia:
                        {
                            return _context.tblM_CatMaquina.Where(x => x.estatus == 1).ToList().Select(x => new
                            {
                                Value = x.noEconomico,
                                Text = x.noEconomico,
                                Prefijo = 0
                            }).OrderBy(x => x.Text).ToList();
                        }
                    default:
                        {
                            return ((List<dynamic>)consultaCheckProductivo(string.Format(@"
                                SELECT
                                    area, cuenta, TRIM(descripcion) AS descripcion
                                FROM si_area_cuenta
                                WHERE cc_activo = 1
                                GROUP BY area, cuenta, descripcion
                                ORDER BY area, cuenta, descripcion
                            ")).ToObject<List<dynamic>>()).Select(x => new
                             {
                                 Value = (int)x.area,
                                 Text = string.Format("{0}-{1} {2}", x.area, x.cuenta, x.descripcion),
                                 Prefijo = (int)x.cuenta
                             }).ToList();
                        }
                }
            }
            catch (Exception)
            {
                return 0;
            }
        }
        public List<Core.DTO.Principal.Generales.ComboDTO> FillComboCcAsigComp()
        {
            try
            {
                var usuario = vSesiones.sesionUsuarioDTO;
                var relUser = ufs.getUsuarioService().getUserEk(usuario.id);
                var res = (List<dynamic>)consultaCheckProductivo(string.Format("SELECT cc FROM so_asigna_comp WHERE comprador = {0}", relUser.empleado)).ToObject<List<dynamic>>();
                var lstCC = res.Select(c => (string)c.cc).ToList();

                return (List<Core.DTO.Principal.Generales.ComboDTO>)consultaCheckProductivo(
                    string.Format(@"SELECT c.cc AS Value, (c.cc + '-' + c.descripcion) AS Text FROM cc c 
                                    {0} 
                                    WHERE c.st_ppto != 'T' 
                                    ORDER BY Value"
                    , lstCC.Any(c => c.Equals("*")) ? "" : "INNER JOIN so_asigna_comp a ON a.cc = c.cc AND a.comprador = {0}" + relUser.empleado
                    )).ToObject<List<Core.DTO.Principal.Generales.ComboDTO>>();
            }
            catch (Exception) { return new List<Core.DTO.Principal.Generales.ComboDTO>(); }
        }
        public List<Core.DTO.Principal.Generales.ComboDTO> FillComboCc()
        {
            try
            {
                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {
                    case EmpresaEnum.Peru:
                        {
                            using (var ctxPeru = new MainContext())
                            {
                                var ccsPermitidos = ctxPeru.tblP_CC_Usuario.Where(x => x.usuarioID == vSesiones.sesionUsuarioDTO.id).Select(x => x.cc).ToList();

                                return ctxPeru.tblP_CC.Where(x =>
                                    x.estatus &&
                                    (((PerfilUsuarioEnum)vSesiones.sesionUsuarioDTO.idPerfil == PerfilUsuarioEnum.ADMINISTRADOR) ? true : ccsPermitidos.Contains(x.cc)) &&
                                    x.cc.Length > 3
                                ).Select(x => new Core.DTO.Principal.Generales.ComboDTO
                                {
                                    Value = x.cc,
                                    Text = "[" + x.cc + "] " + x.descripcion.Trim()
                                }).ToList();
                            }
                        }
                    default:
                        {
                            var x = consultaCheckProductivo(
                                string.Format(@"SELECT 
                                                    c.cc AS Value, 
                                                    (c.cc + '-' + c.descripcion) AS Text 
                                                FROM cc c 
                                                WHERE c.st_ppto != 'T' 
                                                ORDER BY Value"));

                            var y = (List<Core.DTO.Principal.Generales.ComboDTO>)x.ToObject<List<Core.DTO.Principal.Generales.ComboDTO>>();

                            return y;
                        }
                }
            }
            catch (Exception e)
            {
                return new List<Core.DTO.Principal.Generales.ComboDTO>();
            }
        }
        public List<Core.DTO.Principal.Generales.ComboDTO> FillComboCcFiltroPorUsuario()
        {
            try
            {
                var usuario = vSesiones.sesionUsuarioDTO;
                var listCC = (List<Core.DTO.Principal.Generales.ComboDTO>)consultaCheckProductivo(
                    string.Format(@"SELECT 
                                        c.cc AS Value, 
                                        (c.cc + '-' + c.descripcion) AS Text 
                                    FROM cc c 
                                    WHERE c.st_ppto != 'T' 
                                    ORDER BY Value")
                ).ToObject<List<Core.DTO.Principal.Generales.ComboDTO>>();

                //var ccAsignadosPorUsuario = _context.tblP_CC_Usuario.ToList().Where(x => x.usuarioID == usuario.id).Select(y => y.cc).ToList();
                //var listCCFiltrados = listCC.Where(x => ccAsignadosPorUsuario.Contains(x.Value)).ToList();

                return listCC;
            }
            catch (Exception)
            {
                return new List<Core.DTO.Principal.Generales.ComboDTO>();
            }
        }
        public List<ComboFamiliaInsumoDTO> FillComboFamiliasInsumos()
        {
            try
            {
                var listaTipoGrupo = (List<dynamic>)consultaCheckProductivo(
                    string.Format(@"SELECT 
                                        gi.tipo_insumo, 
                                        gi.grupo_insumo, 
                                        gi.descripcion, 
                                        gi.inventariado 
                                    FROM grupos_insumo gi")).ToObject<List<dynamic>>();

                var listaFamilias = listaTipoGrupo.Select(x => new ComboFamiliaInsumoDTO
                {
                    Value = x.tipo_insumo.Value.ToString() +
                        (
                            (x.grupo_insumo.Value.ToString()).Length > 1 ?
                                x.grupo_insumo.Value.ToString() :
                                ("0" + x.grupo_insumo.Value.ToString())
                        ),
                    Text =
                        (
                            x.tipo_insumo.Value.ToString() +
                            (
                                (x.grupo_insumo.Value.ToString()).Length > 1 ?
                                    x.grupo_insumo.Value.ToString() :
                                    ("0" + x.grupo_insumo.Value.ToString())
                            )
                        ) + " - " + x.descripcion.Value as string + " " + (x.inventariado.Value as string == "I" ? "(INVENTARIADO)" : "(NO INVENTARIADO)"),
                    tipo_insumo = (int)x.tipo_insumo.Value,
                    grupo_insumo = (int)x.grupo_insumo.Value,
                    inventariado = x.inventariado.Value as string
                }).OrderBy(x => x.tipo_insumo).ThenBy(x => x.grupo_insumo).ToList();

                return listaFamilias;
            }
            catch (Exception)
            {
                return new List<ComboFamiliaInsumoDTO>();
            }
        }
        public List<Core.DTO.Principal.Generales.ComboDTO> FillComboCompradores()
        {
            try
            {
                if ((MainContextEnum)vSesiones.sesionEmpresaActual == MainContextEnum.PERU)
                {
                    #region PERU
                    using (var ctxPeru = new MainContext())
                    {
                        var compradores = ctxPeru.tblCom_Comprador.Select(x => new Core.DTO.Principal.Generales.ComboDTO
                        {
                            Value = x.empleado.ToString(),
                            Text = x.empleado + " - " + x.descripcion
                        }).OrderBy(x => x.Value).ToList();

                        return compradores;
                    }
                    #endregion
                }
                else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
                {
                    #region COLOMBIA LISTO
                    var compradores = _context.tblCom_Comprador.Where(x => x.estatus).ToList().Select(x => new Core.DTO.Principal.Generales.ComboDTO
                    {
                        Value = x.empleado.ToString(),
                        Text = x.empleado + " - " + x.descripcion
                    }).ToList();

                    //Se agrega el usuario logeado como comprador.
                    var usuario = vSesiones.sesionUsuarioDTO;
                    var relUser = ufs.getUsuarioService().getUserEk(usuario.id);

                    if (relUser != null)
                    {
                        var checarComprador = consultaCheckProductivo(string.Format(@"SELECT * FROM DBA.ek010ab WHERE num = {0} AND nivel IN (1, 5, 13, 23) AND estatus = 'A'", relUser.empleado));

                        if (checarComprador != null)
                        {
                            var usuarioENKONTROL = ((List<dynamic>)consultaCheckProductivo(
                                string.Format(@"SELECT * FROM DBA.empleados WHERE empleado = {0}", relUser.empleado)
                            ).ToObject<List<dynamic>>())[0];

                            if (!compradores.Select(x => x.Value).Contains(relUser.empleado.ToString()))
                            {
                                compradores.Add(new Core.DTO.Principal.Generales.ComboDTO
                                {
                                    Value = relUser.empleado.ToString(),
                                    Text = relUser.empleado + " - " + (string)usuarioENKONTROL.descripcion
                                });
                            }
                        }
                    }

                    return compradores.OrderBy(x => Int32.Parse(x.Value)).ToList();
                    #endregion
                }
                else
                {
                    #region RESTO EMPRESAS
                    var compradores = _context.tblCom_Comprador.Where(x => x.estatus).ToList().Select(x => new Core.DTO.Principal.Generales.ComboDTO
                    {
                        Value = x.empleado.ToString(),
                        Text = x.empleado + " - " + x.descripcion
                    }).ToList();

                    //Se agrega el usuario logeado como comprador.
                    var usuario = vSesiones.sesionUsuarioDTO;
                    var relUser = ufs.getUsuarioService().getUserEk(usuario.id);

                    if (relUser != null)
                    {
                        var checarComprador = consultaCheckProductivo(string.Format(@"SELECT * FROM ek010ab WHERE num = {0} AND nivel IN (1, 5, 13, 23) AND estatus = 'A'", relUser.empleado));

                        if (checarComprador != null)
                        {
                            var usuarioENKONTROL = ((List<dynamic>)consultaCheckProductivo(
                                string.Format(@"SELECT * FROM empleados WHERE empleado = {0}", relUser.empleado)
                            ).ToObject<List<dynamic>>())[0];

                            if (!compradores.Select(x => x.Value).Contains(relUser.empleado.ToString()))
                            {
                                compradores.Add(new Core.DTO.Principal.Generales.ComboDTO
                                {
                                    Value = relUser.empleado.ToString(),
                                    Text = relUser.empleado + " - " + (string)usuarioENKONTROL.descripcion
                                });
                            }
                        }
                    }

                    return compradores.OrderBy(x => Int32.Parse(x.Value)).ToList();
                    #endregion

                }

            }
            catch (Exception)
            {
                return new List<Core.DTO.Principal.Generales.ComboDTO>();
            }
        }
        public List<Core.DTO.Principal.Generales.ComboDTO> FillComboCompradores(string cc)
        {
            try
            {
                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {

                    case EmpresaEnum.Peru:
                        {
                            using (var ctxPeru = new MainContext())
                            {
                                var compradores = ctxPeru.tblCom_Comprador.Select(x => new Core.DTO.Principal.Generales.ComboDTO
                                {
                                    Value = x.empleado.ToString(),
                                    Text = x.empleado + " - " + x.descripcion
                                }).OrderBy(x => x.Value).ToList();

                                return compradores;
                            }
                        }
                        break;
                    default:
                        {
                            var compradores = _context.tblCom_Comprador.ToList().Select(x => new Core.DTO.Principal.Generales.ComboDTO
                            {
                                Value = x.empleado.ToString(),
                                Text = x.empleado + " - " + x.descripcion
                            }).ToList();
                            try
                            {
                                var usuarioENKONTROL = ((List<dynamic>)consultaCheckProductivo(
                                string.Format(@"select * from empleados e inner join so_asigna_comp as a on e.empleado=a.comprador
                                where a.cc='{0}' and e.monto>0", cc)
                                        ).ToObject<List<dynamic>>());
                                foreach (var i in usuarioENKONTROL)
                                {
                                    compradores.Add(new Core.DTO.Principal.Generales.ComboDTO
                                    {
                                        Value = i.empleado.ToString(),
                                        Text = i.empleado + " - " + (string)i.descripcion
                                    });
                                }
                            }
                            catch { }
                            //Se agrega el usuario logeado como comprador.
                            var usuario = vSesiones.sesionUsuarioDTO;
                            var relUser = ufs.getUsuarioService().getUserEk(usuario.id);

                            if (relUser != null)
                            {
                                var checarComprador = consultaCheckProductivo(string.Format(@"SELECT * FROM ek010ab WHERE num = {0} AND nivel IN (1, 5, 13, 23) AND estatus = 'A'", relUser.empleado));

                                if (checarComprador != null)
                                {
                                    var usuarioENKONTROL = ((List<dynamic>)consultaCheckProductivo(
                                        string.Format(@"SELECT * FROM empleados WHERE empleado = {0}", relUser.empleado)
                                    ).ToObject<List<dynamic>>())[0];

                                    if (!compradores.Select(x => x.Value).Contains(relUser.empleado.ToString()))
                                    {
                                        compradores.Add(new Core.DTO.Principal.Generales.ComboDTO
                                        {
                                            Value = relUser.empleado.ToString(),
                                            Text = relUser.empleado + " - " + (string)usuarioENKONTROL.descripcion
                                        });
                                    }
                                }
                            }

                            return compradores.Distinct().OrderBy(x => Convert.ToInt32(x.Value)).ToList();
                        }
                        break;
                }
            }
            catch (Exception)
            {
                return new List<Core.DTO.Principal.Generales.ComboDTO>();
            }
        }
        public List<Core.DTO.Principal.Generales.ComboDTO> FillComboProveedores()
        {
            try
            {
                if ((MainContextEnum)vSesiones.sesionEmpresaActual == MainContextEnum.PERU)
                {
                    #region PERU
                    using (var dbStartSoft = new MainContextPeruStarSoft003BDCOMUN())
                    {
                        var lstProveedoresPeru = dbStartSoft.MAEPROV.Where(e => e.PRVCESTADO == "V").Select(e => new Core.DTO.Principal.Generales.ComboDTO
                        {
                            Value = e.PRVCCODIGO,
                            Text = e.PRVCNOMBRE
                        }).ToList();

                        return lstProveedoresPeru;

                    }
                    #endregion

                }
                else
                {
                    var proveedoresEK = consultaCheckProductivo(
                        string.Format(@"SELECT 
                                        numpro AS Value, 
                                        (CAST(numpro AS varchar) + ' - ' + nombre) AS Text 
                                    FROM sp_proveedores 
                                    WHERE cancelado = 'A'")
                        );

                    if (proveedoresEK != null)
                    {
                        var proveedores = (List<Core.DTO.Principal.Generales.ComboDTO>)proveedoresEK.ToObject<List<Core.DTO.Principal.Generales.ComboDTO>>();

                        return proveedores;
                    }
                    else
                    {
                        return new List<Core.DTO.Principal.Generales.ComboDTO>();
                    }
                }

            }
            catch (Exception)
            {
                return new List<Core.DTO.Principal.Generales.ComboDTO>();
            }
        }
        #endregion
        #region AutoCompletado
        public dynamic getProvFromNum(string term)
        {
            try
            {
                var lst = (List<dynamic>)consultaCheckProductivo(
                    string.Format(@"SELECT 
                                        TOP 12 prov.numpro, 
                                        prov.nombre, 
                                        prov.moneda, 
                                        mon.moneda AS monedaDesc, 
                                        mon.tipo_cambio AS monedaTipoCambio 
                                    FROM sp_proveedores prov 
                                        INNER JOIN moneda mon ON prov.moneda = mon.clave 
                                    WHERE prov.numpro LIKE '{0}%'", term)
                    ).ToObject<List<dynamic>>();

                return lst.Select(p => new
                {
                    id = (string)p.nombre,
                    label = (string)p.numpro,
                    moneda = (int)p.moneda,
                    monedaDesc = (string)p.monedaDesc,
                    monedaTipoCambio = (decimal)p.monedaTipoCambio
                }).ToList();
            }
            catch (Exception)
            {
                return 0;
            }
        }
        public dynamic getProvFromNom(string term)
        {
            try
            {
                var lst = (List<dynamic>)consultaCheckProductivo(
                    string.Format(@"SELECT 
                                        TOP 12 p.numpro, 
                                        p.nombre, 
                                        p.moneda, 
                                        m.cve_moneda_sat
                                    FROM sp_proveedores p
                                        INNER JOIN moneda m ON m.clave = p.moneda 
                                    WHERE p.nombre LIKE '{0}%'", term)).ToObject<List<dynamic>>();
                return lst.Select(p => new
                {
                    id = (string)p.numpro,
                    label = (int)p.moneda != 1 ? (string)p.nombre + " (" + (string)p.cve_moneda_sat + ")" : (string)p.nombre
                }).ToList();
            }
            catch (Exception)
            {
                return 0;
            }
        }
        public string getLABFromNum(int num)
        {
            try
            {
                if ((MainContextEnum)vSesiones.sesionEmpresaActual != MainContextEnum.PERU)
                {
                    var descripcion = consultaCheckProductivo(string.Format(@"SELECT descripcion FROM so_libre_abordo WHERE numero = {0}", num)).ToObject<List<dynamic>>()[0].descripcion.Value;

                    return descripcion;
                }
                else
                {
                    using (var ctxPeru = new MainContextPeruStarSoft003BDCOMUN())
                    {
                        //var almacenes = ctxPeru.TABALM.ToList().Select(x => new Core.DTO.Principal.Generales.ComboDTO
                        //{
                        //    Value = Convert.ToInt32(x.TAALMA).ToString(),
                        //    Text = "[" + x.TAALMA + "] " + x.TADESCRI
                        //}).ToList();
                        var descripcion = ctxPeru.TABALM.ToList().FirstOrDefault(e => Convert.ToInt32(e.TAALMA) == num).TADESCRI;

                        return descripcion;
                    }

                }

            }
            catch (Exception)
            {
                return "";
            }
        }
        #endregion
        string ListToLine(List<string> myList)
        {
            var sb = new System.Text.StringBuilder();
            foreach (string s in myList)
            {
                sb.Append("'" + s + "'").Append(",");
            }
            return sb.Remove(sb.Length - 1, 1).ToString();
        }

        #region Update Compra
        public OrdenCompraDTO getCompra(string cc, int num, bool esOC_INTERNA, string PERU_tipoCompra = "")
        {
            switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
            {
                case EmpresaEnum.Peru:
                    {
                        #region PERU
                        try
                        {
                            #region Vistas autorización y seguimiento de autorizaciones
                            //Lógica para setear la variable "PERU_tipoCompra"
                            #endregion

                            #region CATALOGOS
                            List<tblP_Usuario> listaUsuarios = _context.tblP_Usuario.ToList();
                            List<tblP_Usuario_Enkontrol> lstUsuariosEK = _context.tblP_Usuario_Enkontrol.ToList();
                            #endregion

                            if (HttpContext.Current.Session["servicioCompra"] != null && string.IsNullOrEmpty(PERU_tipoCompra))
                            {
                                if (!(bool)HttpContext.Current.Session["servicioCompra"]) //Vista Generar Compra
                                {
                                    PERU_tipoCompra = "RQ";
                                }
                                else //Vista Generar Compra Servicio
                                {
                                    PERU_tipoCompra = "RS";
                                }
                            }

                            // ORDEN COMPRA
                            tblCom_OrdenCompra objOC = _context.tblCom_OrdenCompra.Where(w => w.cc == cc && w.numero == num && w.estatusRegistro && w.PERU_tipoCompra == PERU_tipoCompra).FirstOrDefault();
                            if (objOC == null)
                                throw new Exception("No se encuentra la información de la compra.");

                            List<tblCom_OrdenCompraDet> lstOCDetalle = _context.tblCom_OrdenCompraDet.Where(w => w.idOrdenCompra == objOC.id && w.estatusRegistro).ToList();
                            if (lstOCDetalle.Count() <= 0)
                                throw new Exception("No se encuentra la información de la compra.");

                            string compradorNom = "";
                            int numReq = lstOCDetalle[0].num_requisicion;
                            List<tblCom_ReqDet> listaDetalleRequisicion = new List<tblCom_ReqDet>();
                            tblCom_Req registroRequisicion = _context.tblCom_Req.FirstOrDefault(x => x.cc == cc && x.numero == numReq && x.estatusRegistro && x.PERU_tipoRequisicion == PERU_tipoCompra);
                            if (registroRequisicion == null) registroRequisicion = new tblCom_Req();
                            if (registroRequisicion != null)
                            {
                                listaDetalleRequisicion = _context.tblCom_ReqDet.Where(x => x.idReq == registroRequisicion.id && x.estatusRegistro).ToList();
                                if (registroRequisicion.comprador.HasValue)
                                {
                                    tblP_Usuario_Enkontrol registroRelacionComprador = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.empleado == (int)registroRequisicion.comprador.Value);

                                    if (registroRelacionComprador != null)
                                    {
                                        var comprador = listaUsuarios.FirstOrDefault(x => x.id == registroRelacionComprador.idUsuario);
                                        if (comprador != null)
                                            compradorNom = string.Format("{0} {1} {2}", comprador.nombre, comprador.apellidoPaterno, comprador.apellidoMaterno);
                                    }
                                }
                            }

                            // PANEL IZQUIERDO
                            OrdenCompraDTO objCompraDTO = new OrdenCompraDTO();
                            objCompraDTO.estatus = objOC.estatus;
                            objCompraDTO.cc = objOC.cc;
                            objCompraDTO.ccDesc = GetDescripcionCC(cc);
                            objCompraDTO.fecha = objOC.fecha;
                            objCompraDTO.PERU_proveedor = objOC.PERU_proveedor;
                            objCompraDTO.proveedorNom = getNombreProveedor(0, objCompraDTO.PERU_proveedor);

                            if ((HttpContext.Current.Session["vistaActual"] != null && (int)HttpContext.Current.Session["vistaActual"] == 7260) || // Entrada por orden de compra 
                                 HttpContext.Current.Session["vistaActual"] != null && (int)HttpContext.Current.Session["vistaActual"] == 7315)    // Entrada no inventariable
                            {
                                objCompraDTO.comprador = lstUsuariosEK.Where(w => w.empleado == registroRequisicion.comprador).Select(s => s.idUsuario).FirstOrDefault();
                                objCompraDTO.compradorNom = getNombreUsuarioEmpleado(objCompraDTO.comprador);
                                objCompraDTO.solicito = lstUsuariosEK.Where(w => w.empleado == registroRequisicion.solicito).Select(s => s.idUsuario).FirstOrDefault();
                                objCompraDTO.solicitoNom = getNombreUsuarioEmpleado(objCompraDTO.solicito);
                                objCompraDTO.autorizo = lstUsuariosEK.Where(w => w.empleado == registroRequisicion.autorizo).Select(s => s.idUsuario).FirstOrDefault();
                                objCompraDTO.autorizoNom = getNombreUsuarioEmpleado(objCompraDTO.autorizo);
                            }
                            else
                            {
                                objCompraDTO.comprador = objOC.compradorEnkontrol;
                                objCompraDTO.compradorNom = compradorNom;
                                objCompraDTO.solicito = registroRequisicion.solicito;
                                if (objCompraDTO.solicito != 0)
                                {
                                    var solicitoEK = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.empleado == objCompraDTO.solicito);
                                    if (solicitoEK != null)
                                    {
                                        var usuarioSolicito = _context.tblP_Usuario.FirstOrDefault(x => x.id == solicitoEK.idUsuario);
                                        if (usuarioSolicito != null)
                                        {
                                            objCompraDTO.solicitoNom = PersonalUtilities.NombreCompletoMayusculas(usuarioSolicito.nombre, usuarioSolicito.apellidoPaterno, usuarioSolicito.apellidoMaterno);
                                        }
                                        else
                                        {
                                            objCompraDTO.solicitoNom = "";
                                        }
                                    }
                                }
                                objCompraDTO.autorizo = registroRequisicion != null ? registroRequisicion.autorizo : 0;
                                if (objCompraDTO.autorizo != 0)
                                {
                                    var autorizoEK = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.empleado == objCompraDTO.autorizo);
                                    if (autorizoEK != null)
                                    {
                                        var usuarioAutorizo = _context.tblP_Usuario.FirstOrDefault(x => x.id == autorizoEK.idUsuario);
                                        if (usuarioAutorizo != null)
                                        {
                                            objCompraDTO.autorizoNom = PersonalUtilities.NombreCompletoMayusculas(usuarioAutorizo.nombre, usuarioAutorizo.apellidoPaterno, usuarioAutorizo.apellidoMaterno);
                                        }
                                        else
                                        {
                                            objCompraDTO.autorizoNom = "";
                                        }
                                    }
                                }
                            }

                            objCompraDTO.embarquese = "";
                            objCompraDTO.libre_abordo = (int)objOC.idLibreAbordo;
                            objCompraDTO.concepto_factura = "";
                            objCompraDTO.bit_autorecepcion = "";
                            objCompraDTO.almacenRecepNom = "";
                            objCompraDTO.empleadoRecepNom = "";
                            objCompraDTO.bienes_servicios = objOC.bienes_servicios;
                            objCompraDTO.PERU_formaPago = objOC.PERU_formaPago;
                            objCompraDTO.PERU_tipoCambio = objOC.PERU_tipoCambio;
                            objCompraDTO.PERU_cuentaCorriente = objOC.PERU_cuentaCorriente;
                            objCompraDTO.st_impresa = objOC.st_impresa;

                            // PANEL DERECHO
                            objCompraDTO.tipo_oc_req = objOC.tipo_oc_req;
                            objCompraDTO.moneda = Convert.ToInt32(objOC.moneda);
                            objCompraDTO.tipo_cambio = objOC.tipo_cambio;
                            objCompraDTO.sub_total = (decimal)objOC.sub_total;
                            objCompraDTO.porcent_iva = objOC.porcent_iva;
                            objCompraDTO.iva = objOC.iva;
                            objCompraDTO.rentencion_despues_iva = 0;
                            objCompraDTO.total = (decimal)objOC.total;
                            objCompraDTO.ST_OC = objOC.ST_OC;
                            objCompraDTO.tiempoEntregaDias = objOC.tiempoEntregaDias;
                            objCompraDTO.tiempoEntregaComentarios = objOC.tiempoEntregaComentarios;
                            objCompraDTO.flagPuedeGuardar = true; //Cambiar esto para tomar facultamientos.
                            objCompraDTO.comentarios = !string.IsNullOrEmpty(objOC.comentarios) ? objOC.comentarios.Trim() : string.Empty;

                            // PARTIDAS
                            objCompraDTO.lstPartidas = new List<OrdenCompraDetDTO>();
                            OrdenCompraDetDTO objPartida = new OrdenCompraDetDTO();

                            var listaInsumosPERU = new List<MAEART>();

                            using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                            {
                                listaInsumosPERU = _starsoft.MAEART.ToList();
                            }

                            bool tieneCuadro = false;
                            List<int> lstCuadros = new List<int>();

                            foreach (var item in lstOCDetalle)
                            {
                                objPartida = new OrdenCompraDetDTO();
                                objPartida.partida = item.partida;
                                objPartida.inventariado = Convert.ToInt32(item.insumo.ToString().Substring(0, 1)) == (int)PERU_TipoInsumoENUM.INVENTARIABLE ? "I" : "N";
                                objPartida.num_requisicion = item.num_requisicion;
                                objPartida.insumo = item.insumo;
                                objPartida.insumoDesc = listaInsumosPERU.Where(x => x.ACODIGO == "0" + objPartida.insumo.ToString()).Select(x => x.ADESCRI).FirstOrDefault();
                                objPartida.areaCuenta = "";
                                objPartida.areaCuentaDesc = "";
                                objPartida.area = 0;
                                objPartida.cuenta = 0;
                                objPartida.fecha_entrega = item.fecha_entrega;
                                objPartida.cantidad = item.cantidad;
                                objPartida.cantidadPendiente = item.cantidad;
                                objPartida.cant_recibida = item.cant_recibida;
                                objPartida.cantidadRequisicion = listaDetalleRequisicion.Where(x => x.partida == item.part_requisicion).Select(x => x.cantidad).FirstOrDefault();
                                objPartida.precio = (decimal)item.precio;
                                objPartida.importe = (decimal)item.importe;
                                objPartida.compras_req = 1;
                                objPartida.partidaDescripcion = item.partidaDescripcion;
                                objPartida.noEconomico = item.noEconomico;

                                objCompraDTO.lstPartidas.Add(objPartida);

                                //BUSCAR CUADRO
                                var objCuadroComp = _context.tblCom_CuadroComparativo.FirstOrDefault(w => w.registroActivo && w.cc == item.cc && w.numero == item.num_requisicion && w.PERU_tipoCuadro == objOC.PERU_tipoCompra);

                                if (objCuadroComp != null)
                                {
                                    if (!lstCuadros.Contains(objCuadroComp.id))
                                        lstCuadros.Add(objCuadroComp.id);

                                    tieneCuadro = true;
                                }
                            }

                            objCompraDTO.cuadrosExistentes = lstCuadros.Count();
                            objCompraDTO.tieneCuadro = tieneCuadro;

                            objCompraDTO.lstPagos = new List<OrdenCompraPagosDTO>();
                            objCompraDTO.lstRetenciones = new List<OrdenCompraRetencionesDTO>();

                            #region SE OBTIENE EL ULTIMO MOVIMIENTO EN BASE AL CC Y EL NUMERO DE ORDEN DE COMPRA PROPORCIONADO Y LA VISTA EN LA QUE SE ENCUENTRE EL USUARIO (SURTIDO INVENTARIABLE O NO INVENTARIABLE)
                            if (vSesiones.sesionCurrentView == 7260) //Surtido Inventariable
                            {
                                var listaEntradasCompra = _context.tblAlm_Movimientos.Where(x =>
                                    x.estatusHabilitado &&
                                    x.cc == cc &&
                                    x.tipo_mov == 1 &&
                                    x.orden_ct == num &&
                                    x.almacen < 90 //Almacén inventariable para entradas físicas.
                                ).ToList();

                                if (listaEntradasCompra.Count() > 0)
                                {
                                    objCompraDTO.ultimoMovimiento = listaEntradasCompra.OrderByDescending(x => x.numero).First().numero;
                                }
                            }
                            else if (vSesiones.sesionCurrentView == 7315) //Surtido No Inventariable
                            {
                                var listaEntradasCompra = _context.tblAlm_Movimientos.Where(x =>
                                    x.estatusHabilitado &&
                                    x.cc == cc &&
                                    x.tipo_mov == 1 &&
                                    x.orden_ct == num &&
                                    x.almacen >= 0 //Almacén virtual para entradas de servicios.
                                ).ToList();

                                if (listaEntradasCompra.Count() > 0)
                                {
                                    objCompraDTO.ultimoMovimiento = listaEntradasCompra.OrderByDescending(x => x.numero).First().numero;
                                }
                            }
                            #endregion

                            return objCompraDTO;
                        }
                        catch (Exception e)
                        {
                            LogError(0, 0, _NOMBRE_CONTROLADOR, "getCompra", e, AccionEnum.CONSULTA, 0, new { cc, num, esOC_INTERNA, PERU_tipoCompra });
                            throw new Exception(e.Message);
                        }
                        #endregion
                    }
                case EmpresaEnum.Colombia:
                    {
                        #region COLOMBIA
                        OrdenCompraDTO objOrdenCompraDTO = new OrdenCompraDTO();
                        try
                        {
                            var compraSIGOPLAN = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.estatusRegistro && x.cc == cc && x.numero == num);

                            using (var cmd = new OdbcCommand("SELECT * FROM DBA.so_orden_compra WHERE vobo IS NOT NULL AND cc = ? AND numero = ?"))
                            {
                                OdbcParameterCollection parameters = cmd.Parameters;
                                parameters.Add("@cc", OdbcType.Char).Value = cc;
                                parameters.Add("@numero", OdbcType.Numeric).Value = num;

                                using (var con = checkConexionProductivo())
                                using (var trans = con.BeginTransaction())
                                {
                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;
                                    using (var req = cmd.ExecuteReader())
                                    {
                                        req.Read();
                                        if (req.HasRows)
                                        {
                                            var partidasCompra = getPartidasCompra(cc, num, req[7] != DBNull.Value ? Convert.ToInt32(req[7]) : 1);

                                            //Obtener el primero insumo para sacar el tipo de insumo general de la requisición.
                                            var tipo = partidasCompra[0].tipo;
                                            var grupo = partidasCompra[0].grupo;

                                            var tipoGrupoInsumo = (consultaCheckProductivo(
                                            string.Format(@"SELECT inventariado FROM DBA.grupos_insumo WHERE tipo_insumo = {0} AND grupo_insumo = {1}", tipo, grupo)
                                            ))[0];

                                            OrdenCompraDTO ordenCompra = new OrdenCompraDTO();
                                            #region Panel Izquierdo
                                            ordenCompra.folioOrigen = req[0] != DBNull.Value && req[1] != DBNull.Value ? getFolioOrigen(req[0] as string, Convert.ToInt32(req[1])) : "";

                                            ordenCompra.cc = req[0] != DBNull.Value ? req[0] as string : "";
                                            ordenCompra.ccDesc = GetDescripcionCC(cc);
                                            ordenCompra.numero = req[1] != DBNull.Value ? Convert.ToInt32(req[1]) : 0;
                                            ordenCompra.bienes_servicios = req[43] != DBNull.Value ? req[43] as string : "";
                                            ordenCompra.fecha = (req[2] as DateTime?) ?? new DateTime();
                                            ordenCompra.proveedor = req[6] != DBNull.Value ? Convert.ToInt32(req[6]) : 0;
                                            ordenCompra.proveedorNom = req[6] != DBNull.Value ? getNombreProveedor(Convert.ToInt32(req[6])) : "";
                                            ordenCompra.comprador = req[5] != DBNull.Value ? Convert.ToInt32(req[5]) : 0;
                                            ordenCompra.compradorNom = req[5] != DBNull.Value ? getNombreUsuarioEmpleado(Convert.ToInt32(req[5])) : "";
                                            ordenCompra.solicito = req[22] != DBNull.Value ? Convert.ToInt32(req[22]) : 0;
                                            ordenCompra.solicitoNom = req[22] != DBNull.Value ? getNombreUsuarioEmpleado(Convert.ToInt32(req[22])) : "";
                                            ordenCompra.autorizo = req[24] != DBNull.Value ? Convert.ToInt32(req[24]) : 0;
                                            ordenCompra.autorizoNom = req[24] != DBNull.Value ? getNombreUsuarioEmpleado(Convert.ToInt32(req[24])) : "";
                                            ordenCompra.embarquese = req[30] != DBNull.Value ? req[30] as string : "";
                                            ordenCompra.libre_abordo = compraSIGOPLAN != null ? (int)compraSIGOPLAN.idLibreAbordo : req[3] != DBNull.Value ? Convert.ToInt32(req[3]) : 0;
                                            //Obra - Estimación

                                            ordenCompra.concepto_factura = req[44] != DBNull.Value ? req[44] as string : "";
                                            ordenCompra.bit_autorecepcion = req[38] != DBNull.Value ? req[38] as string : "";
                                            ordenCompra.almacen_autorecepcion = (req[39] != DBNull.Value && req[39] != "") ? Convert.ToInt32(req[39]) : 0;
                                            ordenCompra.almacenRecepNom = (req[39] != DBNull.Value && req[39] != "") ? getNombreAlmacen(Convert.ToInt32(req[39])) : "";
                                            ordenCompra.empleado_autorecepcion = req[40] != DBNull.Value ? Convert.ToInt32(req[40]) : 0;
                                            ordenCompra.empleadoRecepNom = req[40] != DBNull.Value ? getNombreUsuarioEmpleado(Convert.ToInt32(req[40])) : "";
                                            #endregion

                                            ordenCompra.lstRetenciones = getRetencionesCompra(cc, num);

                                            #region Panel Derecho
                                            ordenCompra.tipo_oc_req = req[4] != DBNull.Value ? req[4] as string : "";
                                            ordenCompra.moneda = req[7] != DBNull.Value ? Convert.ToInt32(req[7]) : 0;
                                            ordenCompra.tipo_cambio = req[8] != DBNull.Value ? Convert.ToDecimal(req[8], CultureInfo.InvariantCulture) : 0;
                                            ordenCompra.sub_total = req[10] != DBNull.Value ? Convert.ToDecimal(req[10], CultureInfo.InvariantCulture) : 0;
                                            ordenCompra.porcent_iva = req[9] != DBNull.Value ? Convert.ToDecimal(req[9], CultureInfo.InvariantCulture) : 0;
                                            ordenCompra.iva = req[11] != DBNull.Value ? Convert.ToDecimal(req[11], CultureInfo.InvariantCulture) : 0;
                                            ordenCompra.rentencion_antes_iva = req[41] != DBNull.Value ? Convert.ToDecimal(req[41], CultureInfo.InvariantCulture) : 0;
                                            foreach (var item in ordenCompra.lstRetenciones)
                                            {
                                                ordenCompra.rentencion_despues_iva += Convert.ToDecimal(item.importe);
                                            }
                                            //ordenCompra.rentencion_despues_iva = req[42] != DBNull.Value ? Convert.ToDecimal(req[42], CultureInfo.InvariantCulture) : 0;
                                            //total = req[12] != DBNull.Value ? Convert.ToDecimal(req[12], CultureInfo.InvariantCulture) : 0,
                                            ordenCompra.total = req[12] != DBNull.Value ? Convert.ToDecimal(req[12], CultureInfo.InvariantCulture) : 0;
                                            ordenCompra.total_rec = req[15] != DBNull.Value ? Convert.ToDecimal(req[15], CultureInfo.InvariantCulture) : 0;
                                            //Total Final
                                            ordenCompra.CFDI = compraSIGOPLAN != null ? compraSIGOPLAN.CFDI : "G03 (Gastos en general)";
                                            ordenCompra.tiempoEntregaDias = compraSIGOPLAN != null ? compraSIGOPLAN.tiempoEntregaDias : 0;
                                            ordenCompra.tiempoEntregaComentarios = compraSIGOPLAN != null ? compraSIGOPLAN.tiempoEntregaComentarios : "";
                                            ordenCompra.anticipoBool = compraSIGOPLAN != null ? compraSIGOPLAN.anticipo : false;
                                            ordenCompra.totalAnticipo = compraSIGOPLAN != null ? compraSIGOPLAN.totalAnticipo : 0;
                                            #endregion

                                            ordenCompra.lstPartidas = partidasCompra;
                                            ordenCompra.lstPagos = getPagosCompra(cc, num);
                                            ordenCompra.ST_OC = ((req[56] != DBNull.Value ? req[56] as string : "") == "S") ? "A" : "";
                                            ordenCompra.vobo_aut = req[55] != DBNull.Value ? req[55] as string : "";
                                            ordenCompra.aut_aut = req[56] != DBNull.Value ? req[56] as string : "";
                                            ordenCompra.st_impresa = req[19] != DBNull.Value ? req[19] as string : "";
                                            ordenCompra.estatus = req[20] != DBNull.Value ? req[20] as string : "";
                                            ordenCompra.inventariado = (string)tipoGrupoInsumo.inventariado;
                                            ordenCompra.vobo = req[23] != DBNull.Value ? Convert.ToInt32(req[23]) : 0;
                                            ordenCompra.vobo2 = req[54] != DBNull.Value ? Convert.ToInt32(req[54]) : 0;

                                            ordenCompra.flagSISUN = partidasCompra[0].num_requisicion == 0;

                                            dynamic existeCuadro = null;

                                            if (ordenCompra.lstPartidas != null)
                                            {
                                                existeCuadro = consultaCheckProductivo(
                                                string.Format(@"SELECT 
                                                    * 
                                                FROM DBA.so_cuadro_comparativo 
                                                WHERE cc = '{0}' AND numero = {1}", ordenCompra.cc, ordenCompra.lstPartidas[0].num_requisicion));
                                            }

                                            int cuadrosExistentes = 0;

                                            if (existeCuadro != null)
                                            {
                                                cuadrosExistentes = ((List<dynamic>)existeCuadro.ToObject<List<dynamic>>()).Count;
                                            }

                                            ordenCompra.tieneCuadro = existeCuadro != null;
                                            ordenCompra.cuadrosExistentes = cuadrosExistentes;

                                            var ordenCompraSIGOPLAN = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.estatusRegistro && x.cc == cc && x.numero == num);

                                            #region Propiedad "colocada" y correos de proveedor
                                            if (ordenCompraSIGOPLAN != null)
                                            {
                                                ordenCompra.colocada = ordenCompraSIGOPLAN.colocada;

                                                if (!string.IsNullOrEmpty(ordenCompraSIGOPLAN.correoProveedor))
                                                {
                                                    ordenCompra.correoProveedor = ordenCompraSIGOPLAN.correoProveedor;
                                                }
                                                else
                                                {
                                                    List<string> listaComprasProveedorCorreos = _context.tblCom_OrdenCompra.Where(x =>
                                                        x.estatusRegistro && x.proveedor == ordenCompraSIGOPLAN.proveedor && x.correoProveedor != "" && x.correoProveedor != null
                                                    ).ToList().SelectMany(x => x.correoProveedor.Split(';')).Select(x => x.Trim()).Distinct().ToList();

                                                    ordenCompra.correoProveedor = string.Join("; ", listaComprasProveedorCorreos);
                                                }
                                            }
                                            else
                                            {
                                                ordenCompra.colocada = false;
                                                ordenCompra.correoProveedor = "";

                                                List<string> listaComprasProveedorCorreos = _context.tblCom_OrdenCompra.Where(x =>
                                                    x.estatusRegistro && x.proveedor == ordenCompra.proveedor && x.correoProveedor != "" && x.correoProveedor != null
                                                ).ToList().SelectMany(x => x.correoProveedor.Split(';')).Select(x => x.Trim()).Distinct().ToList();

                                                ordenCompra.correoProveedor = string.Join("; ", listaComprasProveedorCorreos);
                                            }
                                            #endregion

                                            var ordenCompraDetSIGOPLAN = _context.tblCom_OrdenCompraDet.FirstOrDefault(x => x.cc == cc && x.numero == num);

                                            if (ordenCompraDetSIGOPLAN != null)
                                            {
                                                var requisicionSIGOPLAN = _context.tblCom_Req.FirstOrDefault(x => x.estatusRegistro && x.cc == cc && x.numero == ordenCompraDetSIGOPLAN.num_requisicion);

                                                if (requisicionSIGOPLAN != null)
                                                {
                                                    ordenCompra.consigna = requisicionSIGOPLAN.consigna != null ? (bool)requisicionSIGOPLAN.consigna : false;
                                                    ordenCompra.licitacion = requisicionSIGOPLAN.licitacion;
                                                    ordenCompra.crc = requisicionSIGOPLAN.crc;
                                                    ordenCompra.convenio = requisicionSIGOPLAN.convenio;
                                                }
                                                else
                                                {
                                                    ordenCompra.consigna = false;
                                                    ordenCompra.licitacion = false;
                                                    ordenCompra.crc = false;
                                                    ordenCompra.convenio = false;
                                                }
                                            }
                                            else
                                            {
                                                ordenCompra.consigna = false;
                                                ordenCompra.licitacion = false;
                                                ordenCompra.crc = false;
                                                ordenCompra.convenio = false;
                                            }

                                            var usuario = vSesiones.sesionUsuarioDTO;
                                            var relUser = ufs.getUsuarioService().getUserEk(usuario.id);

                                            ordenCompra.flagPuedeGuardar = false;

                                            if (ordenCompra.ST_OC == "A")
                                            {
                                                var listCompradorAdmin = _context.tblCom_Comprador_Admin.Select(x => x.empleado).ToList();

                                                if (relUser.empleado == 1 || listCompradorAdmin.Contains(relUser.empleado))
                                                {
                                                    ordenCompra.flagPuedeGuardar = true;
                                                }
                                            }
                                            else
                                            {
                                                var listCompradorAdmin = _context.tblCom_Comprador_Admin.Select(x => x.empleado).ToList();

                                                if ((relUser.empleado == 1 || listCompradorAdmin.Contains(relUser.empleado)) || relUser.empleado == ordenCompra.comprador)
                                                {
                                                    ordenCompra.flagPuedeGuardar = true;
                                                }
                                            }

                                            vSesiones.sesionVersionCompraOriginal = ordenCompra.st_impresa != "I";

                                            #region SE OBTIENE EL ULTIMO MOVIMIENTO EN BASE AL CC Y EL NUMERO DE ORDEN DE COMPRA PROPORCIONADO Y LA VISTA EN LA QUE SE ENCUENTRE EL USUARIO (SURTIDO INVENTARIABLE O NO INVENTARIABLE)
                                            ordenCompra.ultimoMovimiento = 0;

                                            if (vSesiones.sesionCurrentView == 7260) //Surtido Inventariable
                                            {
                                                var lstUltimoMovimiento = _contextEnkontrol.Select<OrdenCompraDTO>(vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? EnkontrolEnum.CplanProd : EnkontrolEnum.ArrenProd, new OdbcConsultaDTO()
                                                {
                                                    consulta = String.Format(@"SELECT numero FROM DBA.si_movimientos WHERE cc = '{0}' AND tipo_mov = {1} AND orden_ct = {2} ORDER BY fecha DESC", cc, 1, num)
                                                });

                                                if (lstUltimoMovimiento.Count() > 0)
                                                {
                                                    ordenCompra.ultimoMovimiento = lstUltimoMovimiento.First().numero;
                                                }
                                            }
                                            else if (vSesiones.sesionCurrentView == 7315) //Surtido No Inventariable
                                            {
                                                var lstUltimoMovimiento = _contextEnkontrol.Select<OrdenCompraDTO>(vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? EnkontrolEnum.CplanProd : EnkontrolEnum.ArrenProd, new OdbcConsultaDTO()
                                                {
                                                    consulta = String.Format(@"SELECT remision FROM DBA.so_movimientos_noinv WHERE cc = '{0}' AND tipo_mov = {1} AND orden_ct = {2} ORDER BY fecha DESC", cc, 1, num)
                                                });

                                                if (lstUltimoMovimiento.Count() > 0)
                                                {
                                                    ordenCompra.ultimoMovimiento = lstUltimoMovimiento.First().remision;
                                                }
                                            }
                                            else //Otra vista
                                            {
                                                var lstUltimoMovimiento = _contextEnkontrol.Select<OrdenCompraDTO>(vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? EnkontrolEnum.CplanProd : EnkontrolEnum.ArrenProd, new OdbcConsultaDTO()
                                                {
                                                    consulta = String.Format(@"SELECT numero FROM DBA.si_movimientos WHERE cc = '{0}' AND tipo_mov = {1} AND orden_ct = {2} ORDER BY fecha DESC", cc, 1, num)
                                                });

                                                if (lstUltimoMovimiento.Count() > 0)
                                                {
                                                    ordenCompra.ultimoMovimiento = lstUltimoMovimiento.First().numero;
                                                }
                                                else
                                                {
                                                    var lstUltimoMovimientoNoInv = _contextEnkontrol.Select<OrdenCompraDTO>(vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? EnkontrolEnum.CplanProd : EnkontrolEnum.ArrenProd, new OdbcConsultaDTO()
                                                    {
                                                        consulta = String.Format(@"SELECT remision FROM DBA.so_movimientos_noinv WHERE cc = '{0}' AND tipo_mov = {1} AND orden_ct = {2} ORDER BY fecha DESC", cc, 1, num)
                                                    });

                                                    if (lstUltimoMovimientoNoInv.Count() > 0)
                                                    {
                                                        ordenCompra.ultimoMovimiento = lstUltimoMovimientoNoInv.First().remision;
                                                    }
                                                }
                                            }
                                            #endregion

                                            objOrdenCompraDTO = ordenCompra;
                                        }
                                        else
                                        {
                                            objOrdenCompraDTO = new OrdenCompraDTO()
                                            {
                                                lstPartidas = new List<OrdenCompraDetDTO>(),
                                                lstPagos = new List<OrdenCompraPagosDTO>(),
                                                lstRetenciones = new List<OrdenCompraRetencionesDTO>(),
                                                tieneCuadro = false
                                            };
                                        }
                                    }
                                }
                            }

                            return objOrdenCompraDTO;
                        }
                        catch (Exception)
                        {
                            return objOrdenCompraDTO;
                        }
                        #endregion
                    }
                default:
                    {
                        #region TODAS LAS EMPRESAS MENOS PERU Y COLOMBIA

                        OrdenCompraDTO objOrdenCompraDTO = new OrdenCompraDTO();
                        if (esOC_INTERNA)
                        {
                            #region ORDEN COMPRA INTERNA

                            #region VALIDACIONES
                            if (string.IsNullOrEmpty(cc)) { throw new Exception("Ocurrió un error al obtener el detalle de la OC interna."); }
                            if (num <= 0) { throw new Exception("Ocurrió un error al obtener el detalle de la OC interna."); }
                            #endregion

                            tblCom_OrdenCompra_Interna objOC_Interna = _context.tblCom_OrdenCompra_Interna.Where(w => w.cc == cc && w.numero == num).FirstOrDefault();
                            if (objOC_Interna == null)
                            {
                                throw new Exception("Ocurrió un error al obtener el detalle de la OC interna.");
                            }

                            List<tblCom_OrdenCompraDet_Interna> lstOC_InternaDet = _context.tblCom_OrdenCompraDet_Interna.Where(w => w.idOrdenCompra == objOC_Interna.id).ToList();
                            if (lstOC_InternaDet.Count() <= 0)
                            {
                                throw new Exception("No se encontró el detalle de la OC interna.");
                            }

                            #region Formatear Registros Partidas
                            var monedaDesc = "";
                            var monedaDescEK = consultaCheckProductivo(string.Format(@"SELECT moneda FROM moneda WHERE clave = {0}", Int32.Parse(objOC_Interna.moneda)));

                            if (monedaDescEK != null)
                            {
                                monedaDesc = (string)((List<dynamic>)monedaDescEK.ToObject<List<dynamic>>())[0].moneda.Value;
                            }

                            List<OrdenCompraDetDTO> lstPartida = new List<OrdenCompraDetDTO>();

                            foreach (var p in lstOC_InternaDet)
                            {
                                var insumoInformacionEK = _contextEnkontrol.Select<dynamic>(vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? EnkontrolEnum.CplanProd : EnkontrolEnum.ArrenProd, new OdbcConsultaDTO()
                                {
                                    consulta = string.Format(@"SELECT 
                                        i.descripcion as insumoDesc, 
                                        i.unidad, 
                                        i.cancelado, 
                                        i.tipo, 
                                        i.grupo, 
                                        i.compras_req, 
                                        grp.inventariado
                                    FROM insumos i
                                        LEFT JOIN grupos_insumo grp ON grp.tipo_insumo = i.tipo AND grp.grupo_insumo = i.grupo 
                                    WHERE i.insumo = {0}", p.insumo)
                                });
                                var areaCuentaInformacionEK = _contextEnkontrol.Select<dynamic>(vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? EnkontrolEnum.CplanProd : EnkontrolEnum.ArrenProd, new OdbcConsultaDTO()
                                {
                                    consulta = string.Format(@"
                            SELECT
                                ac.descripcion AS areaCuentaDescripcion
                            FROM si_area_cuenta ac
                            WHERE ac.centro_costo = '{0}' AND ac.area = {1} AND ac.cuenta = {2}", p.cc, p.area, p.cuenta)
                                });

                                decimal surtido = Convert.ToDecimal(p.cant_recibida, CultureInfo.InvariantCulture);
                                decimal cantidadPendiente = p.cantidad - p.cant_recibida;
                                decimal importePendiente = p.importe - p.imp_canc;

                                var nuevaPartida = new OrdenCompraDetDTO
                                {
                                    cc = p.cc,
                                    numero = p.numero,
                                    partida = p.partida,
                                    insumo = p.insumo,
                                    insumoDesc = (string)insumoInformacionEK[0].insumoDesc,
                                    partidaDescripcion = p.partidaDescripcion,
                                    area = p.area,
                                    cuenta = p.cuenta,
                                    areaCuenta = fillNo(p.area.ToString(), 3) + "-" + fillNo(p.cuenta.ToString(), 3),
                                    areaCuentaDesc = fillNo(p.area.ToString(), 3) + "-" + fillNo(p.cuenta.ToString(), 3) + " " + (areaCuentaInformacionEK.Count() > 0 ? (string)areaCuentaInformacionEK[0].areaCuentaDescripcion : ""),
                                    fecha_entrega = p.fecha_entrega.Value != null ? p.fecha_entrega.Value : default(DateTime),
                                    cantidad = p.cantidad,
                                    moneda = Int32.Parse(objOC_Interna.moneda),
                                    monedaDesc = monedaDesc,
                                    precio = p.precio,
                                    importe = importePendiente,
                                    tipo = (int)insumoInformacionEK[0].tipo,
                                    grupo = (int)insumoInformacionEK[0].grupo,
                                    num_requisicion = p.num_requisicion,
                                    part_requisicion = p.part_requisicion,
                                    cantidadRequisicion = 0,
                                    surtido = surtido,
                                    flagBloquearPartidaSurtida = p.cantidad > 0 ? (((p.cantidad - surtido) <= 0) ? true : false) : false,
                                    flagBloquearPartidaEntrada = surtido > 0,
                                    costoPromedio = 0,
                                    cant_canc = p.cant_canc,
                                    cant_recibida = p.cant_recibida,
                                    cantidadPendiente = cantidadPendiente,
                                    unidad = (string)insumoInformacionEK[0].unidad,
                                    compras_req = (int)insumoInformacionEK[0].compras_req,
                                    inventariado = (string)insumoInformacionEK[0].inventariado
                                };

                                lstPartida.Add(nuevaPartida);
                            }

                            var partidasCompra = lstPartida.OrderBy(x => x.partida).ToList();
                            #endregion

                            //Obtener el primero insumo para sacar el tipo de insumo general de la requisición.
                            var tipo = partidasCompra[0].tipo;
                            var grupo = partidasCompra[0].grupo;

                            var tipoGrupoInsumo = (consultaCheckProductivo(
                                string.Format(@"SELECT inventariado FROM grupos_insumo WHERE tipo_insumo = {0} AND grupo_insumo = {1}", tipo, grupo)
                            ))[0];

                            objOrdenCompraDTO = new OrdenCompraDTO()
                            {
                                #region Panel Izquierdo
                                folioOrigen = "",

                                cc = objOC_Interna.cc,
                                numero = objOC_Interna.numero,
                                bienes_servicios = objOC_Interna.bienes_servicios,
                                fecha = objOC_Interna.fecha,
                                proveedor = (int)objOC_Interna.proveedor,
                                proveedorNom = getNombreProveedor((int)objOC_Interna.proveedor),
                                comprador = objOC_Interna.compradorEnkontrol,
                                compradorNom = getNombreUsuarioEmpleado(objOC_Interna.compradorEnkontrol),
                                solicito = 0,
                                solicitoNom = "",
                                autorizo = objOC_Interna.autorizo,
                                autorizoNom = getNombreUsuarioEmpleado(objOC_Interna.autorizo),
                                embarquese = "",
                                libre_abordo = (int)objOC_Interna.idLibreAbordo,
                                //Obra - Estimación

                                concepto_factura = "",
                                bit_autorecepcion = "",
                                almacen_autorecepcion = 0,
                                almacenRecepNom = "",
                                empleado_autorecepcion = 0,
                                empleadoRecepNom = "",
                                #endregion

                                #region Panel Derecho
                                tipo_oc_req = objOC_Interna.tipo_oc_req,
                                moneda = Int32.Parse(objOC_Interna.moneda),
                                tipo_cambio = objOC_Interna.tipo_cambio,
                                sub_total = objOC_Interna.sub_total,
                                porcent_iva = objOC_Interna.porcent_iva,
                                iva = objOC_Interna.iva,
                                rentencion_antes_iva = 0,
                                rentencion_despues_iva = 0,
                                total = objOC_Interna.total,
                                total_rec = 0,
                                //Total Final
                                CFDI = objOC_Interna.CFDI,
                                tiempoEntregaDias = objOC_Interna.tiempoEntregaDias,
                                tiempoEntregaComentarios = objOC_Interna.tiempoEntregaComentarios,
                                anticipoBool = objOC_Interna.anticipo,
                                totalAnticipo = objOC_Interna.totalAnticipo,
                                #endregion

                                lstPartidas = partidasCompra,
                                lstPagos = new List<OrdenCompraPagosDTO>(),
                                lstRetenciones = new List<OrdenCompraRetencionesDTO>(),
                                ST_OC = objOC_Interna.ST_OC,
                                st_impresa = objOC_Interna.st_impresa,
                                estatus = objOC_Interna.estatus,
                                inventariado = (string)tipoGrupoInsumo.inventariado,
                                vobo = objOC_Interna.vobo,
                                vobo2 = objOC_Interna.vobo2,
                                vobo3 = objOC_Interna.vobo3,
                                esOC_Interna = true
                            };
                            #endregion
                        }
                        else
                        {
                            #region ORDEN COMPRA
                            var compraSIGOPLAN = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.estatusRegistro && x.cc == cc && x.numero == num);

                            using (var cmd = new OdbcCommand("SELECT * FROM so_orden_compra WHERE cc = ? AND numero = ?"))
                            {
                                OdbcParameterCollection parameters = cmd.Parameters;
                                parameters.Add("@cc", OdbcType.Char).Value = cc;
                                parameters.Add("@numero", OdbcType.Numeric).Value = num;

                                using (var con = checkConexionProductivo())
                                using (var trans = con.BeginTransaction())
                                {
                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;
                                    using (var req = cmd.ExecuteReader())
                                    {
                                        req.Read();
                                        if (req.HasRows)
                                        {
                                            var partidasCompra = getPartidasCompra(cc, num, req[7] != DBNull.Value ? Convert.ToInt32(req[7]) : 1);

                                            //Obtener el primero insumo para sacar el tipo de insumo general de la requisición.
                                            var tipo = partidasCompra[0].tipo;
                                            var grupo = partidasCompra[0].grupo;

                                            var tipoGrupoInsumo = (consultaCheckProductivo(
                                                string.Format(@"SELECT inventariado FROM grupos_insumo WHERE tipo_insumo = {0} AND grupo_insumo = {1}", tipo, grupo)
                                            ))[0];

                                            var ordenCompra = new OrdenCompraDTO()
                                            {
                                                #region Panel Izquierdo
                                                folioOrigen = req[0] != DBNull.Value && req[1] != DBNull.Value ? getFolioOrigen(req[0] as string, Convert.ToInt32(req[1])) : "",

                                                cc = req[0] != DBNull.Value ? req[0] as string : "",
                                                numero = req[1] != DBNull.Value ? Convert.ToInt32(req[1]) : 0,
                                                bienes_servicios = req[43] != DBNull.Value ? req[43] as string : "",
                                                fecha = (req[2] as DateTime?) ?? new DateTime(),
                                                proveedor = req[6] != DBNull.Value ? Convert.ToInt32(req[6]) : 0,
                                                proveedorNom = req[6] != DBNull.Value ? getNombreProveedor(Convert.ToInt32(req[6])) : "",
                                                comprador = req[5] != DBNull.Value ? Convert.ToInt32(req[5]) : 0,
                                                compradorNom = req[5] != DBNull.Value ? getNombreUsuarioEmpleado(Convert.ToInt32(req[5])) : "",
                                                solicito = req[22] != DBNull.Value ? Convert.ToInt32(req[22]) : 0,
                                                solicitoNom = req[22] != DBNull.Value ? getNombreUsuarioEmpleado(Convert.ToInt32(req[22])) : "",
                                                autorizo = req[24] != DBNull.Value ? Convert.ToInt32(req[24]) : 0,
                                                autorizoNom = req[24] != DBNull.Value ? getNombreUsuarioEmpleado(Convert.ToInt32(req[24])) : "",
                                                embarquese = req[30] != DBNull.Value ? req[30] as string : "",
                                                libre_abordo = compraSIGOPLAN != null ? (int)compraSIGOPLAN.idLibreAbordo : req[3] != DBNull.Value ? Convert.ToInt32(req[3]) : 0,
                                                //Obra - Estimación

                                                concepto_factura = req[44] != DBNull.Value ? req[44] as string : "",
                                                bit_autorecepcion = req[38] != DBNull.Value ? req[38] as string : "",
                                                almacen_autorecepcion = req[39] != DBNull.Value ? Convert.ToInt32(req[39]) : 0,
                                                almacenRecepNom = req[39] != DBNull.Value ? getNombreAlmacen(Convert.ToInt32(req[39])) : "",
                                                empleado_autorecepcion = req[40] != DBNull.Value ? Convert.ToInt32(req[40]) : 0,
                                                empleadoRecepNom = req[40] != DBNull.Value ? getNombreUsuarioEmpleado(Convert.ToInt32(req[40])) : "",
                                                #endregion

                                                #region Panel Derecho
                                                tipo_oc_req = req[4] != DBNull.Value ? req[4] as string : "",
                                                moneda = req[7] != DBNull.Value ? Convert.ToInt32(req[7]) : 0,
                                                tipo_cambio = req[8] != DBNull.Value ? Convert.ToDecimal(req[8], CultureInfo.InvariantCulture) : 0,
                                                sub_total = req[10] != DBNull.Value ? Convert.ToDecimal(req[10], CultureInfo.InvariantCulture) : 0,
                                                porcent_iva = req[9] != DBNull.Value ? Convert.ToDecimal(req[9], CultureInfo.InvariantCulture) : 0,
                                                iva = req[11] != DBNull.Value ? Convert.ToDecimal(req[11], CultureInfo.InvariantCulture) : 0,
                                                rentencion_antes_iva = req[41] != DBNull.Value ? Convert.ToDecimal(req[41], CultureInfo.InvariantCulture) : 0,
                                                rentencion_despues_iva = req[42] != DBNull.Value ? Convert.ToDecimal(req[42], CultureInfo.InvariantCulture) : 0,
                                                //total = req[12] != DBNull.Value ? Convert.ToDecimal(req[12], CultureInfo.InvariantCulture) : 0,
                                                total = req[12] != DBNull.Value ? Convert.ToDecimal(req[12], CultureInfo.InvariantCulture) : 0,
                                                total_rec = req[15] != DBNull.Value ? Convert.ToDecimal(req[15], CultureInfo.InvariantCulture) : 0,
                                                //Total Final
                                                CFDI = compraSIGOPLAN != null ? compraSIGOPLAN.CFDI : "G03 (Gastos en general)",
                                                tiempoEntregaDias = compraSIGOPLAN != null ? compraSIGOPLAN.tiempoEntregaDias : 0,
                                                tiempoEntregaComentarios = compraSIGOPLAN != null ? compraSIGOPLAN.tiempoEntregaComentarios : "",
                                                anticipoBool = compraSIGOPLAN != null ? compraSIGOPLAN.anticipo : false,
                                                totalAnticipo = compraSIGOPLAN != null ? compraSIGOPLAN.totalAnticipo : 0,
                                                #endregion

                                                lstPartidas = partidasCompra,
                                                lstPagos = getPagosCompra(cc, num),
                                                lstRetenciones = getRetencionesCompra(cc, num),
                                                ST_OC = req[51] != DBNull.Value ? req[51] as string : "",
                                                st_impresa = req[19] != DBNull.Value ? req[19] as string : "",
                                                estatus = req[20] != DBNull.Value ? req[20] as string : "",
                                                inventariado = (string)tipoGrupoInsumo.inventariado,
                                                vobo = req[23] != DBNull.Value ? Convert.ToInt32(req[23]) : 0,
                                                vobo2 = req[54] != DBNull.Value ? Convert.ToInt32(req[54]) : 0,
                                                vobo3 = req[55] != DBNull.Value ? Convert.ToInt32(req[55]) : 0
                                            };

                                            dynamic existeCuadro = null;

                                            if (ordenCompra.lstPartidas != null)
                                            {
                                                existeCuadro = consultaCheckProductivo(
                                                string.Format(@"SELECT 
                                                    * 
                                                FROM so_cuadro_comparativo 
                                                WHERE cc = '{0}' AND numero = {1}", ordenCompra.cc, ordenCompra.lstPartidas[0].num_requisicion));
                                            }

                                            int cuadrosExistentes = 0;

                                            if (existeCuadro != null)
                                            {
                                                cuadrosExistentes = ((List<dynamic>)existeCuadro.ToObject<List<dynamic>>()).Count;
                                            }

                                            ordenCompra.tieneCuadro = existeCuadro != null;
                                            ordenCompra.cuadrosExistentes = cuadrosExistentes;

                                            var ordenCompraSIGOPLAN = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.estatusRegistro && x.cc == cc && x.numero == num);

                                            #region Propiedad "colocada" y correos de proveedor
                                            if (ordenCompraSIGOPLAN != null)
                                            {
                                                ordenCompra.colocada = ordenCompraSIGOPLAN.colocada;

                                                if (!string.IsNullOrEmpty(ordenCompraSIGOPLAN.correoProveedor))
                                                {
                                                    ordenCompra.correoProveedor = ordenCompraSIGOPLAN.correoProveedor;
                                                }
                                                else
                                                {
                                                    List<string> listaComprasProveedorCorreos = _context.tblCom_OrdenCompra.Where(x =>
                                                        x.estatusRegistro && x.proveedor == ordenCompraSIGOPLAN.proveedor && x.correoProveedor != "" && x.correoProveedor != null
                                                    ).ToList().SelectMany(x => x.correoProveedor.Split(';')).Select(x => x.Trim()).Distinct().ToList();

                                                    ordenCompra.correoProveedor = string.Join("; ", listaComprasProveedorCorreos);
                                                }
                                            }
                                            else
                                            {
                                                ordenCompra.colocada = false;
                                                ordenCompra.correoProveedor = "";

                                                List<string> listaComprasProveedorCorreos = _context.tblCom_OrdenCompra.Where(x =>
                                                    x.estatusRegistro && x.proveedor == ordenCompra.proveedor && x.correoProveedor != "" && x.correoProveedor != null
                                                ).ToList().SelectMany(x => x.correoProveedor.Split(';')).Select(x => x.Trim()).Distinct().ToList();

                                                ordenCompra.correoProveedor = string.Join("; ", listaComprasProveedorCorreos);
                                            }
                                            #endregion

                                            var ordenCompraDetSIGOPLAN = _context.tblCom_OrdenCompraDet.FirstOrDefault(x => x.cc == cc && x.numero == num);

                                            if (ordenCompraDetSIGOPLAN != null)
                                            {
                                                var requisicionSIGOPLAN = _context.tblCom_Req.FirstOrDefault(x => x.estatusRegistro && x.cc == cc && x.numero == ordenCompraDetSIGOPLAN.num_requisicion);

                                                if (requisicionSIGOPLAN != null)
                                                {
                                                    ordenCompra.consigna = requisicionSIGOPLAN.consigna != null ? (bool)requisicionSIGOPLAN.consigna : false;
                                                    ordenCompra.licitacion = requisicionSIGOPLAN.licitacion;
                                                    ordenCompra.crc = requisicionSIGOPLAN.crc;
                                                    ordenCompra.convenio = requisicionSIGOPLAN.convenio;
                                                }
                                                else
                                                {
                                                    ordenCompra.consigna = false;
                                                    ordenCompra.licitacion = false;
                                                    ordenCompra.crc = false;
                                                    ordenCompra.convenio = false;
                                                }
                                            }
                                            else
                                            {
                                                ordenCompra.consigna = false;
                                                ordenCompra.licitacion = false;
                                                ordenCompra.crc = false;
                                                ordenCompra.convenio = false;
                                            }

                                            var usuario = vSesiones.sesionUsuarioDTO;
                                            var relUser = ufs.getUsuarioService().getUserEk(usuario.id);

                                            ordenCompra.flagPuedeGuardar = false;

                                            if (ordenCompra.ST_OC == "A")
                                            {
                                                //var checkMovimientosInv = consultaCheckProductivo(
                                                //    string.Format(@"SELECT * FROM si_movimientos WHERE tipo_mov = 1 AND cc = '{0}' AND orden_ct = {1}", ordenCompra.cc, ordenCompra.numero)
                                                //);
                                                //var checkMovimientosNoInv = consultaCheckProductivo(
                                                //    string.Format(@"SELECT * FROM so_movimientos_noinv WHERE tipo_mov = 1 AND cc = '{0}' AND orden_ct = {1}", ordenCompra.cc, ordenCompra.numero)
                                                //);

                                                //if (checkMovimientosInv == null && checkMovimientosNoInv == null)
                                                //{
                                                var listCompradorAdmin = _context.tblCom_Comprador_Admin.Select(x => x.empleado).ToList();

                                                if (relUser.empleado == 1 || listCompradorAdmin.Contains(relUser.empleado))
                                                {
                                                    ordenCompra.flagPuedeGuardar = true;
                                                }
                                                //}
                                            }
                                            else
                                            {
                                                var listCompradorAdmin = _context.tblCom_Comprador_Admin.Select(x => x.empleado).ToList();

                                                if ((relUser.empleado == 1 || listCompradorAdmin.Contains(relUser.empleado)) || relUser.empleado == ordenCompra.comprador)
                                                {
                                                    ordenCompra.flagPuedeGuardar = true;
                                                }
                                            }

                                            vSesiones.sesionVersionCompraOriginal = ordenCompra.st_impresa != "I";

                                            #region SE OBTIENE EL ULTIMO MOVIMIENTO EN BASE AL CC Y EL NUMERO DE ORDEN DE COMPRA PROPORCIONADO Y LA VISTA EN LA QUE SE ENCUENTRE EL USUARIO (SURTIDO INVENTARIABLE O NO INVENTARIABLE)
                                            ordenCompra.ultimoMovimiento = 0;

                                            if (vSesiones.sesionCurrentView == 7260) //Surtido Inventariable
                                            {
                                                var lstUltimoMovimiento = _contextEnkontrol.Select<OrdenCompraDTO>(vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? EnkontrolEnum.CplanProd : vSesiones.sesionEmpresaActual == (int)EmpresaEnum.GCPLAN ? EnkontrolEnum.GCPLAN : EnkontrolEnum.ArrenProd, new OdbcConsultaDTO()
                                                {
                                                    consulta = String.Format(@"SELECT numero FROM si_movimientos WHERE cc = '{0}' AND tipo_mov = {1} AND orden_ct = {2} ORDER BY fecha DESC", cc, 1, num)
                                                });

                                                if (lstUltimoMovimiento.Count() > 0)
                                                {
                                                    ordenCompra.ultimoMovimiento = lstUltimoMovimiento.First().numero;
                                                }
                                            }
                                            else if (vSesiones.sesionCurrentView == 7315) //Surtido No Inventariable
                                            {
                                                var lstUltimoMovimiento = _contextEnkontrol.Select<OrdenCompraDTO>(vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? EnkontrolEnum.CplanProd : vSesiones.sesionEmpresaActual == (int)EmpresaEnum.GCPLAN ? EnkontrolEnum.GCPLAN : EnkontrolEnum.ArrenProd, new OdbcConsultaDTO()
                                                {
                                                    consulta = String.Format(@"SELECT remision FROM so_movimientos_noinv WHERE cc = '{0}' AND tipo_mov = {1} AND orden_ct = {2} ORDER BY fecha DESC", cc, 1, num)
                                                });

                                                if (lstUltimoMovimiento.Count() > 0)
                                                {
                                                    ordenCompra.ultimoMovimiento = lstUltimoMovimiento.First().remision;
                                                }
                                            }
                                            else //Otra vista
                                            {
                                                var lstUltimoMovimiento = _contextEnkontrol.Select<OrdenCompraDTO>(vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? EnkontrolEnum.CplanProd : vSesiones.sesionEmpresaActual == (int)EmpresaEnum.GCPLAN ? EnkontrolEnum.GCPLAN : EnkontrolEnum.ArrenProd, new OdbcConsultaDTO()
                                                {
                                                    consulta = String.Format(@"SELECT numero FROM si_movimientos WHERE cc = '{0}' AND tipo_mov = {1} AND orden_ct = {2} ORDER BY fecha DESC", cc, 1, num)
                                                });

                                                if (lstUltimoMovimiento.Count() > 0)
                                                {
                                                    ordenCompra.ultimoMovimiento = lstUltimoMovimiento.First().numero;
                                                }
                                                else
                                                {
                                                    var lstUltimoMovimientoNoInv = _contextEnkontrol.Select<OrdenCompraDTO>(vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? EnkontrolEnum.CplanProd : vSesiones.sesionEmpresaActual == (int)EmpresaEnum.GCPLAN ? EnkontrolEnum.GCPLAN : EnkontrolEnum.ArrenProd, new OdbcConsultaDTO()
                                                    {
                                                        consulta = String.Format(@"SELECT remision FROM so_movimientos_noinv WHERE cc = '{0}' AND tipo_mov = {1} AND orden_ct = {2} ORDER BY fecha DESC", cc, 1, num)
                                                    });

                                                    if (lstUltimoMovimientoNoInv.Count() > 0)
                                                    {
                                                        ordenCompra.ultimoMovimiento = lstUltimoMovimientoNoInv.First().remision;
                                                    }
                                                }
                                            }
                                            #endregion

                                            objOrdenCompraDTO = ordenCompra;
                                        }
                                        else
                                        {
                                            objOrdenCompraDTO = new OrdenCompraDTO()
                                            {
                                                lstPartidas = new List<OrdenCompraDetDTO>(),
                                                lstPagos = new List<OrdenCompraPagosDTO>(),
                                                lstRetenciones = new List<OrdenCompraRetencionesDTO>(),
                                                tieneCuadro = false
                                            };
                                        }
                                    }
                                }
                            }
                            #endregion
                        }

                        return objOrdenCompraDTO;
                        #endregion
                    }
            }
        }

        private string GetDescripcionCC(string cc)
        {
            string ccDesc = string.Empty;
            try
            {
                tblP_CC objCC = _context.tblP_CC.Where(w => w.cc == cc && w.estatus).FirstOrDefault();
                if (objCC == null) { throw new Exception("Ocurrió un error al obtener la información del CC."); }

                ccDesc = string.Format("[{0}] {1}", objCC.cc, objCC.descripcion.Trim());
            }
            catch (Exception e)
            {
                LogError(0, 0, _NOMBRE_CONTROLADOR, "GetDescripcionCC", e, AccionEnum.CONSULTA, 0, cc);
                return ccDesc;
            }
            return ccDesc;
        }

        private string GetNombreInsumoPERU(int insumo)
        {
            string insumoDesc = string.Empty;
            try
            {

            }
            catch (Exception e)
            {
                LogError(0, 0, _NOMBRE_CONTROLADOR, "GetNombreInsumoPERU", e, AccionEnum.CONSULTA, insumo, insumo);
                return insumoDesc;
            }
            return insumoDesc;
        }

        public OrdenCompraDTO getCompra_Interna(string cc, int num)
        {
            var compraSIGOPLAN = _context.tblCom_OrdenCompra_Interna.FirstOrDefault(x => x.estatusRegistro && x.cc == cc && x.numero == num);

            if (true)
            {
                var req = compraSIGOPLAN;
                var partidasCompra = getPartidasCompra_Interna(cc, num, int.Parse(req.moneda));

                //Obtener el primero insumo para sacar el tipo de insumo general de la requisición.
                var tipo = partidasCompra[0].tipo;
                var grupo = partidasCompra[0].grupo;

                var tipoGrupoInsumo = (consultaCheckProductivo(
                    string.Format(@"SELECT inventariado FROM grupos_insumo WHERE tipo_insumo = {0} AND grupo_insumo = {1}", tipo, grupo)
                ))[0];
                var comprador = ufs.getUsuarioService().getUserEk(req.compradorSIGOPLAN);
                var retenciones = _context.tblCom_OrdenCompra_Retenciones_Interna.Where(x => x.cc == cc && x.numero == num).ToList();
                var ordenCompra = new OrdenCompraDTO()
                {
                    #region Panel Izquierdo
                    folioOrigen = "",

                    cc = req.cc,
                    numero = req.numero,
                    bienes_servicios = req.bienes_servicios,
                    fecha = req.fecha,
                    proveedor = (int)req.proveedor,
                    proveedorNom = "",
                    comprador = comprador.empleado,
                    compradorNom = "",
                    solicito = 0,
                    solicitoNom = "",
                    autorizo = req.autorizo,
                    autorizoNom = "",
                    embarquese = "",
                    libre_abordo = 0,
                    //Obra - Estimación

                    concepto_factura = "",
                    bit_autorecepcion = "",
                    almacen_autorecepcion = 0,
                    almacenRecepNom = "",
                    empleado_autorecepcion = 0,
                    empleadoRecepNom = "",
                    #endregion

                    #region Panel Derecho
                    tipo_oc_req = req.tipo_oc_req,
                    moneda = int.Parse(req.moneda),
                    tipo_cambio = req.tipo_cambio,
                    sub_total = req.sub_total,
                    porcent_iva = req.porcent_iva,
                    iva = req.iva,
                    rentencion_antes_iva = 0,
                    rentencion_despues_iva = retenciones.Sum(x => x.importe),
                    total = req.total,
                    total_rec = 0,
                    //Total Final
                    CFDI = compraSIGOPLAN != null ? compraSIGOPLAN.CFDI : "G03 (Gastos en general)",
                    tiempoEntregaDias = compraSIGOPLAN != null ? compraSIGOPLAN.tiempoEntregaDias : 0,
                    tiempoEntregaComentarios = compraSIGOPLAN != null ? compraSIGOPLAN.tiempoEntregaComentarios : "",
                    anticipoBool = compraSIGOPLAN != null ? compraSIGOPLAN.anticipo : false,
                    totalAnticipo = compraSIGOPLAN != null ? compraSIGOPLAN.totalAnticipo : 0,
                    #endregion

                    lstPartidas = partidasCompra,
                    lstPagos = new List<OrdenCompraPagosDTO>(),
                    lstRetenciones = getRetencionesCompra_Interna(cc, num),
                    ST_OC = req.ST_OC,
                    st_impresa = req.st_impresa,
                    estatus = req.estatus,
                    inventariado = (string)tipoGrupoInsumo.inventariado,
                    vobo = 0,
                    vobo2 = 0,
                    vobo3 = 0
                };


                ordenCompra.tieneCuadro = false;
                ordenCompra.cuadrosExistentes = 0;
                var ordenCompraSIGOPLAN = _context.tblCom_OrdenCompra_Interna.FirstOrDefault(x => x.estatusRegistro && x.cc == cc && x.numero == num);

                #region Propiedad "colocada" y correos de proveedor
                if (ordenCompraSIGOPLAN != null)
                {
                    ordenCompra.colocada = ordenCompraSIGOPLAN.colocada;

                    if (!string.IsNullOrEmpty(ordenCompraSIGOPLAN.correoProveedor))
                    {
                        ordenCompra.correoProveedor = ordenCompraSIGOPLAN.correoProveedor;
                    }
                    else
                    {
                        List<string> listaComprasProveedorCorreos = _context.tblCom_OrdenCompra.Where(x =>
                            x.estatusRegistro && x.proveedor == ordenCompraSIGOPLAN.proveedor && x.correoProveedor != "" && x.correoProveedor != null
                        ).ToList().SelectMany(x => x.correoProveedor.Split(';')).Select(x => x.Trim()).Distinct().ToList();

                        ordenCompra.correoProveedor = string.Join("; ", listaComprasProveedorCorreos);
                    }
                }
                else
                {
                    ordenCompra.colocada = false;
                    ordenCompra.correoProveedor = "";

                    List<string> listaComprasProveedorCorreos = _context.tblCom_OrdenCompra.Where(x =>
                        x.estatusRegistro && x.proveedor == ordenCompra.proveedor && x.correoProveedor != "" && x.correoProveedor != null
                    ).ToList().SelectMany(x => x.correoProveedor.Split(';')).Select(x => x.Trim()).Distinct().ToList();

                    ordenCompra.correoProveedor = string.Join("; ", listaComprasProveedorCorreos);
                }
                #endregion

                ordenCompra.categoria = ordenCompraSIGOPLAN.categoria;
                ordenCompra.consigna = false;

                var usuario = vSesiones.sesionUsuarioDTO;
                var relUser = ufs.getUsuarioService().getUserEk(usuario.id);

                ordenCompra.flagPuedeGuardar = false;

                if (ordenCompra.ST_OC == "A")
                {
                    var listCompradorAdmin = _context.tblCom_Comprador_Admin.Select(x => x.empleado).ToList();

                    if (relUser.empleado == 1 || listCompradorAdmin.Contains(relUser.empleado))
                    {
                        ordenCompra.flagPuedeGuardar = true;
                    }
                }
                else
                {
                    var listCompradorAdmin = _context.tblCom_Comprador_Admin.Select(x => x.empleado).ToList();

                    if ((relUser.empleado == 1 || listCompradorAdmin.Contains(relUser.empleado)) || relUser.empleado == ordenCompra.comprador)
                    {
                        ordenCompra.flagPuedeGuardar = true;
                    }
                }

                vSesiones.sesionVersionCompraOriginal = ordenCompra.st_impresa != "I";

                return ordenCompra;
            }
        }

        public List<OrdenCompraDetDTO> getPartidasCompra(string cc, int num, int moneda)
        {
            try
            {
                List<dynamic> par = new List<dynamic>();

                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {
                    case EmpresaEnum.Colombia:
                        {
                            par = (List<dynamic>)consultaCheckProductivo(
                    string.Format(@"SELECT 
                                        d.*, 
                                        i.descripcion as insumoDesc, 
                                        i.unidad, 
                                        i.cancelado, 
                                        i.tipo, 
                                        i.grupo, 
                                        (
                                            ISNULL(
                                                    (
                                                        SELECT 
                                                            AVG(precio) 
                                                        FROM so_orden_compra_det AS det 
                                                        WHERE det.insumo = i.insumo
                                                    ) , 0 
                                            )
                                        ) AS costo_promedio,  
                                        (
                                            SELECT 
                                                TOP 1 l.descripcion 
                                            FROM so_orden_det_linea l 
                                            WHERE l.cc = d.cc AND l.numero = d.numero AND l.partida = d.partida 
                                        ) AS partidaDesc, 
                                        grp.inventariado, 
                                        ac.descripcion AS areaCuentaDescripcion 
                                    FROM so_orden_compra_det d 
                                        INNER JOIN insumos i ON d.insumo = i.insumo 
                                        LEFT JOIN grupos_insumo grp ON grp.tipo_insumo = i.tipo AND grp.grupo_insumo = i.grupo 
                                        LEFT JOIN si_area_cuenta ac ON d.cc = ac.centro_costo AND d.area = ac.area AND d.cuenta = ac.cuenta 
                                    WHERE d.cc = '{0}' AND d.numero = {1} 
                                    ORDER BY d.partida", cc, num)
                ).ToObject<List<dynamic>>();
                            break;
                        }
                    default:
                        {
                            par = (List<dynamic>)consultaCheckProductivo(
                    string.Format(@"SELECT 
                                        d.*, 
                                        i.descripcion as insumoDesc, 
                                        i.unidad, 
                                        i.cancelado, 
                                        i.tipo, 
                                        i.grupo, 
                                        i.compras_req, 
                                        (
                                            ISNULL(
                                                    (
                                                        SELECT 
                                                            AVG(precio) 
                                                        FROM so_orden_compra_det AS det 
                                                        WHERE det.insumo = i.insumo
                                                    ) , 0 
                                            )
                                        ) AS costo_promedio,  
                                        (
                                            SELECT 
                                                TOP 1 l.descripcion 
                                            FROM so_orden_det_linea l 
                                            WHERE l.cc = d.cc AND l.numero = d.numero AND l.partida = d.partida 
                                        ) AS partidaDesc, 
                                        grp.inventariado, 
                                        ac.descripcion AS areaCuentaDescripcion 
                                    FROM so_orden_compra_det d 
                                        INNER JOIN insumos i ON d.insumo = i.insumo 
                                        LEFT JOIN grupos_insumo grp ON grp.tipo_insumo = i.tipo AND grp.grupo_insumo = i.grupo 
                                        LEFT JOIN si_area_cuenta ac ON d.cc = ac.centro_costo AND d.area = ac.area AND d.cuenta = ac.cuenta 
                                    WHERE d.cc = '{0}' AND d.numero = {1} 
                                    ORDER BY d.partida", cc, num)
                ).ToObject<List<dynamic>>();
                            break;
                        }
                }

                var monedaDesc = "";
                var monedaDescEK = consultaCheckProductivo(string.Format(@"SELECT moneda FROM moneda WHERE clave = {0}", moneda));

                if (monedaDescEK != null)
                {
                    monedaDesc = (string)((List<dynamic>)monedaDescEK.ToObject<List<dynamic>>())[0].moneda.Value;
                }

                List<OrdenCompraDetDTO> lstPartida = new List<OrdenCompraDetDTO>();

                foreach (var p in par)
                {
                    decimal surtido = Convert.ToDecimal(p.cant_recibida, CultureInfo.InvariantCulture);

                    var cantidad = p.cantidad.Value != null ? Convert.ToDecimal(p.cantidad.Value, CultureInfo.InvariantCulture) : 0;
                    var cantidadCancelada = p.cant_canc.Value != null ? Convert.ToDecimal(p.cant_canc.Value, CultureInfo.InvariantCulture) : 0;
                    var cantidadRecibida = p.cant_recibida.Value != null ? Convert.ToDecimal(p.cant_recibida.Value, CultureInfo.InvariantCulture) : 0;
                    var cantidadPendiente = cantidad - cantidadRecibida;

                    var importePendiente =
                        (p.importe.Value != null ? Convert.ToDecimal(p.importe.Value, CultureInfo.InvariantCulture) : 0) -
                        (p.imp_canc.Value != null ? Convert.ToDecimal(p.imp_canc.Value, CultureInfo.InvariantCulture) : 0);

                    int partida = Convert.ToInt32(p.partida.Value);
                    var registroPartidaSIGOPLAN = _context.tblCom_OrdenCompraDet.FirstOrDefault(x => x.estatusRegistro && x.cc == cc && x.numero == num && x.partida == partida);

                    var nuevaPartida = new OrdenCompraDetDTO
                    {
                        cc = p.cc.Value ?? "",
                        numero = p.numero.Value != null ? Convert.ToInt32(p.numero.Value) : 0,
                        partida = p.partida.Value != null ? Convert.ToInt32(p.partida.Value) : 0,
                        insumo = p.insumo.Value != null ? Convert.ToInt32(p.insumo.Value) : 0,
                        insumoDesc = p.insumoDesc.Value != null ? p.insumoDesc.Value : "",
                        partidaDescripcion = p.partidaDesc.Value != null ? p.partidaDesc.Value : "",
                        area = p.area.Value != null ? Convert.ToInt32(p.area.Value) : 0,
                        cuenta = p.cuenta.Value != null ? Convert.ToInt32(p.cuenta.Value) : 0,
                        areaCuenta = p.area.Value != null && p.cuenta.Value != null ? fillNo(p.area.Value.ToString(), 3) + "-" + fillNo(p.cuenta.Value.ToString(), 3) : "",
                        areaCuentaDesc =
                            p.area.Value != null && p.cuenta.Value != null ? fillNo(p.area.Value.ToString(), 3) + "-" + fillNo(p.cuenta.Value.ToString(), 3) + " " + p.areaCuentaDescripcion : "",
                        fecha_entrega = p.fecha_entrega.Value != null ? p.fecha_entrega.Value : default(DateTime),
                        cantidad = cantidad,
                        moneda = moneda,
                        monedaDesc = monedaDesc,
                        precio = p.precio.Value != null ? Convert.ToDecimal(p.precio.Value, CultureInfo.InvariantCulture) : 0,
                        importe = importePendiente, //importe = p.importe.Value != null ? Convert.ToDecimal(p.importe.Value, CultureInfo.InvariantCulture) : 0,
                        tipo = p.tipo.Value != null ? Convert.ToInt32(p.tipo.Value) : 0,
                        grupo = p.grupo.Value != null ? Convert.ToInt32(p.grupo.Value) : 0,
                        num_requisicion = p.num_requisicion.Value != null ? Convert.ToInt32(p.num_requisicion.Value) : 0,
                        part_requisicion = p.part_requisicion.Value != null ? Convert.ToInt32(p.part_requisicion.Value) : 0,
                        cantidadRequisicion = 0,
                        surtido = surtido,
                        flagBloquearPartidaSurtida = cantidad > 0 ? (((cantidad - surtido) <= 0) ? true : false) : false,
                        flagBloquearPartidaEntrada = surtido > 0,
                        costoPromedio = p.costo_promedio.Value != null ? Convert.ToDecimal(p.costo_promedio.Value, CultureInfo.InvariantCulture) : 0,
                        cant_canc = cantidadCancelada,
                        cant_recibida = cantidadRecibida,
                        cantidadPendiente = cantidadPendiente,
                        unidad = (string)p.unidad.Value,
                        compras_req = p.compras_req != null ? p.compras_req.Value != null ? (int)p.compras_req : 1 : 1,
                        inventariado = p.inventariado.Value != null ? (string)p.inventariado : "",
                        iva = (p.iva != null && p.iva.Value != null) ? Convert.ToDecimal(p.iva.Value, CultureInfo.InvariantCulture) : 0,
                        porcent_iva = (p.porcent_iva != null && p.porcent_iva.Value != null) ? Convert.ToDecimal(p.porcent_iva.Value, CultureInfo.InvariantCulture) : 0,
                        exento_iva = (p.excento_iva != null && p.exento_iva.Value != null) ? Convert.ToInt32(p.exento_iva.Value, CultureInfo.InvariantCulture) == 1 : false,
                        noEconomico = registroPartidaSIGOPLAN != null ? registroPartidaSIGOPLAN.noEconomico : ""
                    };

                    if (nuevaPartida.num_requisicion != 0 && nuevaPartida.part_requisicion != 0)
                    {
                        var requisicionCantidadEK = consultaCheckProductivo(
                            string.Format(@"SELECT 
                                                * 
                                            FROM so_requisicion_det 
                                            WHERE cc = '{0}' AND numero = {1} AND partida = {2}", nuevaPartida.cc, nuevaPartida.num_requisicion, nuevaPartida.part_requisicion));

                        if (requisicionCantidadEK != null)
                        {
                            var requisicionCantidad = (List<dynamic>)requisicionCantidadEK.ToObject<List<dynamic>>();

                            nuevaPartida.cantidadRequisicion = Convert.ToDecimal(requisicionCantidad[0].cantidad.Value, CultureInfo.InvariantCulture);
                        }
                    }

                    lstPartida.Add(nuevaPartida);
                }

                return lstPartida.OrderBy(x => x.partida).ToList();
            }
            catch (Exception)
            {
                return null;
            }
        }
        public List<OrdenCompraDetDTO> getPartidasCompra_Interna(string cc, int num, int moneda)
        {
            try
            {
                var par = _context.tblCom_OrdenCompraDet_Interna.Where(x => x.cc == cc && x.numero == num).ToList();
                var monedaDesc = moneda == 1 ? "MN" : moneda == 2 ? "USD" : moneda == 3 ? "EUR" : "MN";


                List<OrdenCompraDetDTO> lstPartida = new List<OrdenCompraDetDTO>();

                foreach (var p in par)
                {
                    decimal surtido = Convert.ToDecimal(p.cant_recibida, CultureInfo.InvariantCulture);

                    var cantidad = p.cantidad != null ? Convert.ToDecimal(p.cantidad, CultureInfo.InvariantCulture) : 0;
                    var cantidadCancelada = p.cant_canc != null ? Convert.ToDecimal(p.cant_canc, CultureInfo.InvariantCulture) : 0;
                    var cantidadRecibida = p.cant_recibida != null ? Convert.ToDecimal(p.cant_recibida, CultureInfo.InvariantCulture) : 0;
                    var cantidadPendiente = cantidad - cantidadCancelada - cantidadRecibida;

                    var importePendiente =
                        (p.importe != null ? Convert.ToDecimal(p.importe, CultureInfo.InvariantCulture) : 0) -
                        (p.imp_canc != null ? Convert.ToDecimal(p.imp_canc, CultureInfo.InvariantCulture) : 0);
                    var insumo = (List<dynamic>)consultaCheckProductivo(
                    string.Format(@"SELECT 
                                        i.descripcion as insumoDesc, 
                                        i.unidad, 
                                        i.cancelado, 
                                        i.tipo, 
                                        i.grupo
                                    FROM insumos i
                                    WHERE i.insumo = {0} 
                                    ORDER BY i.insumo", p.insumo)
                ).ToObject<List<dynamic>>();

                    var nuevaPartida = new OrdenCompraDetDTO
                    {
                        cc = p.cc ?? "",
                        numero = p.numero != null ? Convert.ToInt32(p.numero) : 0,
                        partida = p.partida != null ? Convert.ToInt32(p.partida) : 0,
                        insumo = p.insumo != null ? Convert.ToInt32(p.insumo) : 0,
                        insumoDesc = insumo[0].insumoDesc.Value != null ? insumo[0].insumoDesc.Value : "",
                        partidaDescripcion = p.partidaDescripcion != null ? p.partidaDescripcion : "",
                        area = p.area != null ? Convert.ToInt32(p.area) : 0,
                        cuenta = p.cuenta != null ? Convert.ToInt32(p.cuenta) : 0,
                        areaCuenta = p.area != null && p.cuenta != null ? fillNo(p.area.ToString(), 3) + "-" + fillNo(p.cuenta.ToString(), 3) : "",
                        areaCuentaDesc = "",
                        fecha_entrega = p.fecha_entrega != null ? p.fecha_entrega : default(DateTime),
                        cantidad = cantidad,
                        moneda = moneda,
                        monedaDesc = monedaDesc,
                        precio = p.precio != null ? Convert.ToDecimal(p.precio, CultureInfo.InvariantCulture) : 0,
                        importe = importePendiente, //importe = p.importe.Value != null ? Convert.ToDecimal(p.importe.Value, CultureInfo.InvariantCulture) : 0,
                        tipo = insumo[0].tipo != null ? Convert.ToInt32(insumo[0].tipo) : 0,
                        grupo = insumo[0].grupo != null ? Convert.ToInt32(insumo[0].grupo) : 0,
                        num_requisicion = p.num_requisicion != null ? Convert.ToInt32(p.num_requisicion) : 0,
                        part_requisicion = p.part_requisicion != null ? Convert.ToInt32(p.part_requisicion) : 0,
                        cantidadRequisicion = 0,
                        surtido = surtido,
                        flagBloquearPartidaSurtida = cantidad > 0 ? (((cantidad - surtido) <= 0) ? true : false) : false,
                        flagBloquearPartidaEntrada = surtido > 0,
                        costoPromedio = 0,
                        cant_canc = cantidadCancelada,
                        cant_recibida = cantidadRecibida,
                        cantidadPendiente = cantidadPendiente,
                        unidad = "",
                        compras_req = Convert.ToInt32(p.cantidad),
                        inventariado = ""
                    };

                    lstPartida.Add(nuevaPartida);
                }

                return lstPartida.OrderBy(x => x.partida).ToList();
            }
            catch (Exception) { return null; }
        }

        public List<OrdenCompraPagosDTO> getPagosCompra(string cc, int num)
        {
            try
            {
                var par = (List<dynamic>)consultaCheckProductivo(
                    string.Format(@"SELECT * FROM DBA.so_orden_compra_pago ocr where ocr.cc = '{0}' and ocr.numero = {1}", cc, num)
                ).ToObject<List<dynamic>>();

                List<OrdenCompraPagosDTO> lstPagos = new List<OrdenCompraPagosDTO>();

                foreach (var p in par)
                {
                    lstPagos.Add(new OrdenCompraPagosDTO
                    {
                        cc = p.cc.Value ?? "",
                        numero = p.numero.Value != null ? Convert.ToInt32(p.numero.Value) : 0,
                        partida = p.partida.Value != null ? Convert.ToInt32(p.partida.Value) : 0,
                        dias_pago = p.dias_pago.Value != null ? Convert.ToInt32(p.dias_pago.Value) : 0,
                        fecha_pago = p.fecha_pago.Value != null ? p.fecha_pago.Value : default(DateTime),
                        comentarios = p.comentarios.Value != null ? p.comentarios.Value as string : "",
                        estatus = p.estatus.Value != null ? p.estatus.Value as string : "",
                        porcentaje = p.porcentaje.Value != null ? Convert.ToDecimal(p.porcentaje.Value, CultureInfo.InvariantCulture) : 0,
                        importe = p.importe.Value != null ? Convert.ToDecimal(p.importe.Value, CultureInfo.InvariantCulture) : 0
                    });
                }

                return lstPagos;
            }
            catch (Exception) { return null; }
        }

        public List<OrdenCompraRetencionesDTO> getRetencionesCompra(string cc, int num)
        {
            try
            {
                if (vSesiones.sesionEmpresaActual != (int)EmpresaEnum.Colombia)
                {
                    #region DEMAS EMPRESAS
                    var retencionesEK = consultaCheckProductivo(
                        string.Format(@"SELECT 
                                        *, 
                                        ( 
                                            SELECT r.desc_ret 
                                            FROM so_retenciones r 
                                            WHERE r.id_cpto = ocr.id_cpto 
                                        ) AS descRet 
                                    FROM so_ordenc_retenciones ocr 
                                    WHERE ocr.cc = '{0}' AND ocr.numero = {1} AND ocr.aplica = 1", cc, num)
                    );

                    List<OrdenCompraRetencionesDTO> lstRetenciones = new List<OrdenCompraRetencionesDTO>();

                    if (retencionesEK != null)
                    {
                        var lstRetencionesEK = (List<dynamic>)retencionesEK.ToObject<List<dynamic>>();

                        foreach (var p in lstRetencionesEK)
                        {
                            lstRetenciones.Add(new OrdenCompraRetencionesDTO
                            {
                                cc = p.cc.Value ?? "",
                                numero = p.numero.Value != null ? Convert.ToInt32(p.numero.Value) : 0,
                                orden = p.orden.Value != null ? Convert.ToInt32(p.orden.Value) : 0,

                                id_cpto = p.id_cpto.Value != null ? Convert.ToInt32(p.id_cpto.Value) : 0,
                                descRet = p.descRet.Value != null ? p.descRet.Value as string : "",
                                cantidad = p.cantidad.Value != null ? Convert.ToDecimal(p.cantidad.Value, CultureInfo.InvariantCulture) : 0,
                                porc_ret = p.porc_ret.Value != null ? Convert.ToDecimal(p.porc_ret.Value, CultureInfo.InvariantCulture) : 0,
                                importe = p.importe.Value != null ? Convert.ToDecimal(p.importe.Value, CultureInfo.InvariantCulture) : 0,
                                facturado = p.facturado.Value != null ? Convert.ToDecimal(p.facturado.Value, CultureInfo.InvariantCulture) : 0,
                                retenido = p.retenido.Value != null ? Convert.ToDecimal(p.retenido.Value, CultureInfo.InvariantCulture) : 0,
                                tm_descto = p.tm_descto.Value != null ? Convert.ToDecimal(p.tm_descto.Value, CultureInfo.InvariantCulture) : 0,
                                calc_iva = p.calc_iva.Value != null ? Convert.ToInt32(p.calc_iva.Value) : 1,
                                bit_afecta_oc = p.afecta_oc.Value != null ? p.afecta_oc.Value as string : "N",
                                afecta_fac = p.afecta_fac.Value != null ? p.afecta_fac.Value as string : "N"
                            });
                        }
                    }

                    return lstRetenciones;
                    #endregion
                }
                else
                {
                    #region COLOMBIA
                    var retencionesEK = consultaCheckProductivo(
                      string.Format(@"SELECT *, 
                                        ( 
                                            SELECT r.desc_ret 
                                            FROM DBA.so_retenciones r 
                                            WHERE r.id_cpto = ocr.id_cpto 
                                        ) AS descRet 
                                    FROM DBA.so_ordenc_retenciones ocr 
                                    WHERE ocr.cc = '{0}' AND ocr.numero = {1} AND ocr.aplica = 1", cc, num)
                  );

                    List<OrdenCompraRetencionesDTO> lstRetenciones = new List<OrdenCompraRetencionesDTO>();

                    if (retencionesEK != null)
                    {
                        var lstRetencionesEK = (List<dynamic>)retencionesEK.ToObject<List<dynamic>>();

                        foreach (var p in lstRetencionesEK)
                        {
                            lstRetenciones.Add(new OrdenCompraRetencionesDTO
                            {
                                cc = p.cc.Value ?? "",
                                numero = p.numero.Value != null ? Convert.ToInt32(p.numero.Value) : 0,
                                orden = p.orden.Value != null ? Convert.ToInt32(p.orden.Value) : 0,

                                id_cpto = p.id_cpto.Value != null ? Convert.ToInt32(p.id_cpto.Value) : 0,
                                descRet = p.descRet.Value != null ? p.descRet.Value as string : "",
                                cantidad = p.cantidad.Value != null ? Convert.ToDecimal(p.cantidad.Value, CultureInfo.InvariantCulture) : 0,
                                porc_ret = p.porc_ret.Value != null ? Convert.ToDecimal(p.porc_ret.Value, CultureInfo.InvariantCulture) : 0,
                                importe = p.importe.Value != null ? Convert.ToDecimal(p.importe.Value, CultureInfo.InvariantCulture) : 0,
                                facturado = p.facturado.Value != null ? Convert.ToDecimal(p.facturado.Value, CultureInfo.InvariantCulture) : 0,
                                retenido = p.retenido.Value != null ? Convert.ToDecimal(p.retenido.Value, CultureInfo.InvariantCulture) : 0,
                                tm_descto = p.tm_descto.Value != null ? Convert.ToDecimal(p.tm_descto.Value, CultureInfo.InvariantCulture) : 0,
                                calc_iva = p.calc_iva.Value != null ? Convert.ToInt32(p.calc_iva.Value) : 1,
                                bit_afecta_oc = p.afecta_oc.Value != null ? p.afecta_oc.Value as string : "N",
                                afecta_fac = p.afecta_fac.Value != null ? p.afecta_fac.Value as string : "N"
                            });
                        }
                    }

                    return lstRetenciones;
                    #endregion
                }
            }
            catch (Exception) { return null; }
        }
        public List<OrdenCompraRetencionesDTO> getRetencionesCompra_Interna(string cc, int num)
        {
            try
            {
                var lstRetencionesEK = _context.tblCom_OrdenCompra_Retenciones_Interna.Where(x => x.cc == cc && x.numero == num).ToList();
                List<OrdenCompraRetencionesDTO> lstRetenciones = new List<OrdenCompraRetencionesDTO>();
                foreach (var p in lstRetencionesEK)
                {
                    lstRetenciones.Add(new OrdenCompraRetencionesDTO
                    {
                        cc = p.cc ?? "",
                        numero = p.numero != null ? Convert.ToInt32(p.numero) : 0,
                        orden = p.orden != null ? Convert.ToInt32(p.orden) : 0,

                        id_cpto = p.id_cpto != null ? Convert.ToInt32(p.id_cpto) : 0,
                        descRet = p.descRet != null ? p.descRet as string : "",
                        cantidad = p.cantidad != null ? Convert.ToDecimal(p.cantidad, CultureInfo.InvariantCulture) : 0,
                        porc_ret = p.porc_ret != null ? Convert.ToDecimal(p.porc_ret, CultureInfo.InvariantCulture) : 0,
                        importe = p.importe != null ? Convert.ToDecimal(p.importe, CultureInfo.InvariantCulture) : 0,
                        facturado = p.facturado != null ? Convert.ToDecimal(p.facturado, CultureInfo.InvariantCulture) : 0,
                        retenido = p.retenido != null ? Convert.ToDecimal(p.retenido, CultureInfo.InvariantCulture) : 0,
                        tm_descto = p.tm_descto != null ? Convert.ToDecimal(p.tm_descto, CultureInfo.InvariantCulture) : 0,
                        calc_iva = p.calc_iva != null ? Convert.ToInt32(p.calc_iva) : 1,
                        bit_afecta_oc = p.bit_afecta_oc,
                        afecta_fac = p.afecta_fac != null ? p.afecta_fac as string : "N"
                    });
                }

                return lstRetenciones;
            }
            catch (Exception) { return null; }
        }
        public Dictionary<string, object> updateRetencionesCompra(List<OrdenCompraRetencionesDTO> retenciones)
        {
            var resultado = new Dictionary<string, object>();
            var keepGoing = true;

            try
            {
                using (var con = checkConexionProductivo())
                {
                    retenciones.ForEach(x =>
                    {
                        if (keepGoing)
                        {
                            keepGoing = updateRetenciones(con, x.cc, x.numero, x.orden, x.cantidad, x.id_cpto);
                        }
                    });
                }

                resultado.Add("success", keepGoing);
            }
            catch (Exception e)
            {
                resultado.Add("success", false);
            }

            return resultado;
        }
        public bool updateRetenciones(dynamic con, string cc, int numero, int orden, decimal cantidad, int retencion_id)
        {
            using (var trans = con.BeginTransaction())
            {
                var consulta = string.Empty;
                bool seGuardo = false;

                var exist = (List<dynamic>)consultaCheckProductivo(
                string.Format(@"SELECT 
                                    * 
                                FROM DBA.so_ordenc_retenciones ocr 
                                WHERE ocr.cc = '{0}' AND ocr.numero = {1}", cc, numero)).ToObject<List<dynamic>>();

                if (exist.Count > 0)
                {
                    consulta = @"UPDATE so_ordenc_retenciones 
                                 SET cantidad = ? 
                                 WHERE cc = ? AND numero = ? AND orden = ? AND id_cpto = ? ";
                }

                using (var cmd = new OdbcCommand(consulta))
                {
                    OdbcParameterCollection parameters = cmd.Parameters;

                    parameters.Add("@cantidad", OdbcType.Numeric).Value = cantidad;
                    parameters.Add("@cc", OdbcType.Char).Value = cc;
                    parameters.Add("@numero", OdbcType.Numeric).Value = numero;
                    parameters.Add("@orden", OdbcType.Numeric).Value = orden;
                    parameters.Add("@id_cpto", OdbcType.Numeric).Value = retencion_id;

                    cmd.Connection = trans.Connection;
                    cmd.Transaction = trans;

                    var count = cmd.ExecuteNonQuery();

                    if (count == 1)
                    {
                        trans.Commit();
                        seGuardo = true;
                    }

                    return seGuardo;
                }
            }
        }

        public string getNombreProveedor(int numProveedor, string PERU_proveedor = "")
        {
            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
            {
                #region PERU
                using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                {
                    string numProv = PERU_proveedor.ToString();
                    MAEPROV objProveedor = _starsoft.MAEPROV.Where(w => w.PRVCCODIGO == numProv).FirstOrDefault();
                    if (objProveedor == null)
                        throw new Exception("Ocurrió un error al obtener el nombre del proveedor.");

                    return objProveedor.PRVCNOMBRE;
                }
                #endregion
            }
            else
            {
                #region EK
                using (var cmd = new OdbcCommand("SELECT * FROM DBA.sp_proveedores where numpro = " + numProveedor))
                {
                    using (var con = checkConexionProductivo())
                    using (var trans = con.BeginTransaction())
                    {
                        cmd.Connection = trans.Connection;
                        cmd.Transaction = trans;
                        using (var req = cmd.ExecuteReader())
                        {
                            req.Read();
                            if (req.HasRows)
                                return req[2] as string;
                            else
                                return "";
                        }
                    }
                }
                #endregion
            }
        }

        public string getNombreUsuarioEmpleado(int numEmpleado)
        {
            switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
            {
                case EmpresaEnum.Peru:
                    {
                        #region PERU
                        string nombreCompleto = "";

                        if (vSesiones.sesionCurrentView == 7281) //Vista de Resguardos. El nombre se saca de la tabla tblAlm_EmpleadoResguardo
                        {
                            nombreCompleto = _context.tblAlm_EmpleadoResguardo.Where(x => x.registroActivo && x.folio == numEmpleado).Select(x => x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno).FirstOrDefault();
                        }
                        else
                        {
                            tblP_Usuario objUsuario = _context.tblP_Usuario.Where(w => w.id == numEmpleado && w.estatus).FirstOrDefault();

                            if (objUsuario != null)
                            {
                                nombreCompleto = PersonalUtilities.NombreCompletoMayusculas(objUsuario.nombre, objUsuario.apellidoPaterno, objUsuario.apellidoMaterno);
                            }
                        }

                        return nombreCompleto;
                        #endregion
                    }
                case EmpresaEnum.Colombia:
                    {
                        #region COLOMBIA LISTO
                        using (var cmd = new OdbcCommand("SELECT * FROM DBA.empleados WHERE empleado = " + numEmpleado))
                        {
                            using (var con = checkConexionProductivo())
                            using (var trans = con.BeginTransaction())
                            {
                                cmd.Connection = trans.Connection;
                                cmd.Transaction = trans;
                                using (var req = cmd.ExecuteReader())
                                {
                                    req.Read();
                                    if (req.HasRows)
                                    {
                                        return req[1] as string;
                                    }
                                    else
                                    {
                                        return "";
                                    }
                                }
                            }
                        }
                        #endregion
                    }
                default:
                    {
                        #region OTRAS EMPRESAS
                        using (var cmd = new OdbcCommand("SELECT * FROM empleados WHERE empleado = " + numEmpleado))
                        {
                            using (var con = checkConexionProductivo())
                            using (var trans = con.BeginTransaction())
                            {
                                cmd.Connection = trans.Connection;
                                cmd.Transaction = trans;
                                using (var req = cmd.ExecuteReader())
                                {
                                    req.Read();
                                    if (req.HasRows)
                                    {
                                        return req[1] as string;
                                    }
                                    else
                                    {
                                        return "";
                                    }
                                }
                            }
                        }
                        #endregion
                    }
            }
        }

        public string getNombreAlmacen(int numAlmacen)
        {
            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
            {
                #region COLOMBIA LISTO
                using (var cmd = new OdbcCommand("SELECT * FROM DBA.si_almacen WHERE almacen = " + numAlmacen))
                {
                    using (var con = checkConexionProductivo())
                    using (var trans = con.BeginTransaction())
                    {
                        cmd.Connection = trans.Connection;
                        cmd.Transaction = trans;
                        using (var req = cmd.ExecuteReader())
                        {
                            req.Read();
                            if (req.HasRows)
                                return req[1] as string;
                            else
                                return "";
                        }
                    }
                }
                #endregion
            }
            else
            {
                #region DEMAS EMPRESAS
                using (var cmd = new OdbcCommand("SELECT * FROM si_almacen WHERE almacen = " + numAlmacen))
                {
                    using (var con = checkConexionProductivo())
                    using (var trans = con.BeginTransaction())
                    {
                        cmd.Connection = trans.Connection;
                        cmd.Transaction = trans;
                        using (var req = cmd.ExecuteReader())
                        {
                            req.Read();
                            if (req.HasRows)
                            {
                                return req[1] as string;
                            }
                            else
                            {
                                return "";
                            }
                        }
                    }
                }
                #endregion
            }
        }

        public OrdenCompraDTO updateCompra(OrdenCompraDTO compra)
        {
            var empresa = vSesiones.sesionEmpresaActual;

            if (empresa != 1 && empresa != 4 && empresa != 6 && empresa != 3 && compra.lstPartidas.Any(x => x.area == 0 && x.cuenta == 0))
            {
                throw new Exception("Debe capturar el Área-Cuenta de todas las partidas.");
            }

            switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
            {
                case EmpresaEnum.Peru:
                    {
                        #region Compras Perú
                        #region Validación Precio Negativo
                        var compraDetSIGOPLAN = _context.tblCom_OrdenCompraDet.Where(x => x.estatusRegistro && x.cc == compra.cc && x.numero == compra.numero).ToList();

                        if (compraDetSIGOPLAN.Count > 0)
                        {
                            //Checa si la compra proviene de una requisición. Si no proviene de una requisición se salta la validación.
                            if (!compraDetSIGOPLAN.Any(x => x.num_requisicion == 0))
                            {
                                if (compra.lstPartidas.Any(x => x.precio < 0))
                                {
                                    throw new Exception("El precio de las partidas no puede tener un valor negativo.");
                                }
                            }
                        }
                        #endregion

                        using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                        {
                            using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                            {
                                using (var dbStarsoftTransaction = _starsoft.Database.BeginTransaction())
                                {
                                    try
                                    {
                                        var PERU_tipoCompra = "";

                                        if (!(bool)HttpContext.Current.Session["servicioCompra"]) //Vista Generar Compra
                                        {
                                            PERU_tipoCompra = "RQ";
                                        }
                                        else //Vista Generar Compra Servicio
                                        {
                                            PERU_tipoCompra = "RS";
                                        }

                                        var compraSIGOPLAN = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.cc == compra.cc && x.numero == compra.numero && x.PERU_tipoCompra == PERU_tipoCompra && x.estatusRegistro);
                                        var listaPartidasSIGOPLANAnteriores = _context.tblCom_OrdenCompraDet.Where(x => x.estatusRegistro && x.idOrdenCompra == compraSIGOPLAN.id).ToList();
                                        var folioCompraStarsoft = compraSIGOPLAN.numero.ToString("D13");

                                        foreach (var part in compra.lstPartidas)
                                        {
                                            var partidaAnterior = listaPartidasSIGOPLANAnteriores.FirstOrDefault(x => x.partida == part.partida && x.insumo == part.insumo);

                                            if (partidaAnterior != null)
                                            {
                                                #region Actualizar Detalle Compra
                                                #region SIGOPLAN
                                                var cantidadAnterior = partidaAnterior.cantidad;
                                                var importeAnterior = partidaAnterior.importe;

                                                var partidaAnteriorSIGOPLAN = _context.tblCom_OrdenCompraDet.FirstOrDefault(x =>
                                                    x.cc == compra.cc &&
                                                    x.numero == compra.numero &&
                                                    x.partida == part.partida &&
                                                    x.insumo == part.insumo &&
                                                    x.idOrdenCompra == compraSIGOPLAN.id &&
                                                    x.estatusRegistro);

                                                if (partidaAnteriorSIGOPLAN != null)
                                                {
                                                    partidaAnteriorSIGOPLAN.cantidad = part.cantidad;
                                                    partidaAnteriorSIGOPLAN.precio = part.precio;
                                                    partidaAnteriorSIGOPLAN.importe = part.cantidad * partidaAnterior.precio;
                                                    partidaAnteriorSIGOPLAN.porcent_iva = compra.porcent_iva;
                                                    partidaAnteriorSIGOPLAN.iva = (part.cantidad * partidaAnterior.precio) * (compra.porcent_iva / 100);
                                                    partidaAnteriorSIGOPLAN.partidaDescripcion = part.partidaDescripcion;

                                                    _context.SaveChanges();
                                                }
                                                #endregion

                                                #region Starsoft
                                                var partidaStarsoft = part.partida.ToString("D3");

                                                if (PERU_tipoCompra == "RQ")
                                                {
                                                    var registroPartidaStarsoft = _starsoft.COMOVD.FirstOrDefault(x => x.OC_CNUMORD == folioCompraStarsoft && x.OC_CITEM == partidaStarsoft);

                                                    if (registroPartidaStarsoft != null)
                                                    {
                                                        registroPartidaStarsoft.OC_NCANTID = part.cantidad;
                                                        registroPartidaStarsoft.OC_NCANTEN = 0;
                                                        registroPartidaStarsoft.OC_NCANSAL = part.cantidad;
                                                        registroPartidaStarsoft.OC_NPREUNI = part.precio;
                                                        registroPartidaStarsoft.OC_NPRENET = part.cantidad * registroPartidaStarsoft.OC_NPREUNI;
                                                        registroPartidaStarsoft.OC_NTOTVEN = part.cantidad * registroPartidaStarsoft.OC_NPREUNI;
                                                        registroPartidaStarsoft.OC_GLOSA = part.partidaDescripcion;

                                                        registroPartidaStarsoft.OC_NIGV = (part.cantidad * partidaAnterior.precio) * (compra.porcent_iva / 100);
                                                        registroPartidaStarsoft.OC_NIGVPOR = compra.porcent_iva;

                                                        _starsoft.SaveChanges();
                                                    }
                                                }
                                                else if (PERU_tipoCompra == "RS")
                                                {
                                                    var registroPartidaStarsoft = _starsoft.COMOVD_S.FirstOrDefault(x => x.OC_CNUMORD == folioCompraStarsoft && x.OC_CITEM == partidaStarsoft);

                                                    if (registroPartidaStarsoft != null)
                                                    {
                                                        registroPartidaStarsoft.OC_NCANTEN = 0;
                                                        registroPartidaStarsoft.OC_NCANSAL = part.cantidad;
                                                        registroPartidaStarsoft.OC_NPREUNI = part.precio;
                                                        registroPartidaStarsoft.OC_NPRENET = part.cantidad * registroPartidaStarsoft.OC_NPREUNI;
                                                        registroPartidaStarsoft.OC_NTOTVEN = part.cantidad * registroPartidaStarsoft.OC_NPREUNI;
                                                        registroPartidaStarsoft.OC_GLOSA = part.partidaDescripcion;

                                                        registroPartidaStarsoft.OC_NIGV = (part.cantidad * partidaAnterior.precio) * (compra.porcent_iva / 100);
                                                        registroPartidaStarsoft.OC_NIGVPOR = compra.porcent_iva;

                                                        _starsoft.SaveChanges();
                                                    }
                                                }
                                                #endregion
                                                #endregion

                                                #region Actualizar Detalle Requisición
                                                #region SIGOPLAN
                                                var requisicionSIGOPLAN = _context.tblCom_Req.FirstOrDefault(x => x.estatusRegistro && x.cc == compra.cc && x.numero == partidaAnterior.num_requisicion && x.PERU_tipoRequisicion == compraSIGOPLAN.PERU_tipoCompra);

                                                if (requisicionSIGOPLAN != null)
                                                {
                                                    var partidaRequisicionSIGOPLAN = _context.tblCom_ReqDet.FirstOrDefault(x =>
                                                        x.estatusRegistro &&
                                                        x.idReq == requisicionSIGOPLAN.id &&
                                                        x.partida == partidaAnterior.part_requisicion &&
                                                        x.insumo == partidaAnterior.insumo &&
                                                        x.estatusRegistro);

                                                    if (partidaRequisicionSIGOPLAN != null)
                                                    {
                                                        #region Validación para no comprar más de lo requerido
                                                        if (part.cantidad > partidaRequisicionSIGOPLAN.cantidad)
                                                        {
                                                            throw new Exception("No se puede comprar más de lo requerido. Partida: " + part.partida);
                                                        }
                                                        #endregion

                                                        partidaRequisicionSIGOPLAN.cantOrdenada = part.cantidad;

                                                        _context.SaveChanges();
                                                    }
                                                }
                                                #endregion

                                                #region Starsoft
                                                var folioRequisicionStarsoft = partidaAnterior.num_requisicion.ToString("D10");
                                                var partidaRequisicionStarsoft = _starsoft.REQUISD.FirstOrDefault(x => x.NROREQUI == folioRequisicionStarsoft && x.TIPOREQUI == PERU_tipoCompra && x.REQITEM == partidaAnterior.part_requisicion);

                                                if (partidaRequisicionStarsoft != null)
                                                {
                                                    partidaRequisicionStarsoft.SALDO = part.cantidad;

                                                    _starsoft.SaveChanges();
                                                }
                                                #endregion
                                                #endregion
                                            }
                                        }

                                        #region Actualizar Compra
                                        #region SIGOPLAN
                                        #region Recalcular el subtotal y total de la compra
                                        decimal compraSubtotal = Math.Round(compra.lstPartidas.Sum(x => x.importe), 2);
                                        decimal compraTotal = Math.Round((compraSubtotal + compra.iva), 2);
                                        #endregion

                                        if (compraSIGOPLAN != null)
                                        {
                                            compraSIGOPLAN.bienes_servicios = compra.bienes_servicios ?? "";
                                            compraSIGOPLAN.tipo_oc_req = compra.tipo_oc_req;
                                            compraSIGOPLAN.moneda = compra.moneda.ToString();
                                            compraSIGOPLAN.tipo_cambio = compra.tipo_cambio;
                                            compraSIGOPLAN.sub_total = compraSubtotal; //compraSIGOPLAN.sub_total = compra.sub_total;
                                            compraSIGOPLAN.porcent_iva = compra.porcent_iva;
                                            compraSIGOPLAN.iva = compra.iva;
                                            compraSIGOPLAN.total = compraTotal; //compraSIGOPLAN.total = compra.sub_total + compra.iva;
                                            compraSIGOPLAN.tiempoEntregaDias = compra.tiempoEntregaDias;
                                            compraSIGOPLAN.tiempoEntregaComentarios = compra.tiempoEntregaComentarios ?? "";
                                            compraSIGOPLAN.anticipo = compra.anticipoBool;
                                            compraSIGOPLAN.totalAnticipo = compra.totalAnticipo;
                                            compraSIGOPLAN.st_impresa = ""; //Se quita el estatus de impresa para que se vuelva a generar una impresión con la leyenda de "ORIGINAL".
                                            compraSIGOPLAN.PERU_formaPago = compra.PERU_formaPago;

                                            _context.SaveChanges();
                                        }
                                        #endregion

                                        #region Starsoft
                                        if (PERU_tipoCompra == "RQ")
                                        {
                                            var registroCompraStarsoft = _starsoft.COMOVC.FirstOrDefault(x => x.OC_CNUMORD == folioCompraStarsoft);

                                            if (registroCompraStarsoft != null)
                                            {
                                                registroCompraStarsoft.OC_CCODMON = compra.moneda == 2 ? "ME" : compra.moneda == 4 ? "MN" : "";
                                                registroCompraStarsoft.OC_NTIPCAM = compra.tipo_cambio;
                                                registroCompraStarsoft.OC_NIMPORT = compraSubtotal;
                                                registroCompraStarsoft.OC_NIGV = compra.iva;
                                                registroCompraStarsoft.OC_NVENTA = compraTotal;
                                                registroCompraStarsoft.OC_CCONVER = compra.PERU_tipoCambio;
                                                registroCompraStarsoft.OC_DFECENT = registroCompraStarsoft.OC_DFECDOC.AddDays(compra.tiempoEntregaDias);
                                                registroCompraStarsoft.COD_FP = compra.PERU_formaPago;

                                                _starsoft.SaveChanges();
                                            }
                                        }
                                        else if (PERU_tipoCompra == "RS")
                                        {
                                            var registroCompraStarsoft = _starsoft.COMOVC_S.FirstOrDefault(x => x.OC_CNUMORD == folioCompraStarsoft);

                                            if (registroCompraStarsoft != null)
                                            {
                                                registroCompraStarsoft.OC_CCODMON = compra.moneda == 2 ? "ME" : compra.moneda == 4 ? "MN" : "";
                                                registroCompraStarsoft.OC_NTIPCAM = compra.tipo_cambio;
                                                registroCompraStarsoft.OC_NIMPORT = compraSubtotal;
                                                registroCompraStarsoft.OC_NIGV = compra.iva;
                                                registroCompraStarsoft.OC_NVENTA = compraTotal;
                                                registroCompraStarsoft.OC_CCONVER = compra.PERU_tipoCambio;
                                                registroCompraStarsoft.OC_DFECENT = registroCompraStarsoft.OC_DFECDOC.AddDays(compra.tiempoEntregaDias);
                                                registroCompraStarsoft.COD_FP = compra.PERU_formaPago;

                                                _starsoft.SaveChanges();
                                            }
                                        }
                                        #endregion
                                        #endregion

                                        #region Obtener VoBos y Autorizaciones
                                        var objCompra = new OrdenCompraDTO { cc = compra.cc, numero = compra.numero, esOC_Interna = false, PERU_tipoCompra = compraSIGOPLAN.PERU_tipoCompra };
                                        var vobos = getVobos(objCompra);
                                        var autorizaciones = getAutorizaciones(objCompra);

                                        compra.stringVobosAutorizaciones += "[" + compra.cc + "-" + compra.numero + " VoBos: ";

                                        foreach (var v in vobos)
                                        {
                                            compra.stringVobosAutorizaciones += v.usu_numero + "-" + v.usu_nombre + " ";
                                        }

                                        compra.stringVobosAutorizaciones += "Autorizaciones: ";

                                        foreach (var a in autorizaciones)
                                        {
                                            compra.stringVobosAutorizaciones += (int)a.usu_numero + "-" + (string)a.usu_nombre + " ";
                                        }

                                        compra.stringVobosAutorizaciones += "] ";
                                        #endregion

                                        dbSigoplanTransaction.Commit();
                                        dbStarsoftTransaction.Commit();
                                    }
                                    catch (Exception e)
                                    {
                                        dbSigoplanTransaction.Rollback();
                                        dbStarsoftTransaction.Rollback();

                                        LogError(0, 0, "OrdenCompraController", "updateCompraPeru", e, AccionEnum.ACTUALIZAR, 0, compra);
                                    }
                                }
                            }
                        }

                        return compra;
                        #endregion
                    }
                case EmpresaEnum.Colombia:
                    {
                        #region Compras Colombia
                        #region Validación Precio Negativo
                        var compraDetSIGOPLAN = _context.tblCom_OrdenCompraDet.Where(x => x.estatusRegistro && x.cc == compra.cc && x.numero == compra.numero).ToList();

                        if (compraDetSIGOPLAN.Count > 0)
                        {
                            //Checa si la compra proviene de una requisición. Si no proviene de una requisición se salta la validación.
                            if (!compraDetSIGOPLAN.Any(x => x.num_requisicion == 0))
                            {
                                if (compra.lstPartidas.Any(x => x.precio < 0))
                                {
                                    throw new Exception("El precio de las partidas no puede tener un valor negativo.");
                                }
                            }
                        }
                        #endregion

                        var compraAnteriorEK = consultaCheckProductivo(string.Format(@"SELECT * FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", compra.cc, compra.numero));

                        if (compraAnteriorEK != null)
                        {
                            var compraAnterior = (List<dynamic>)compraAnteriorEK.ToObject<List<dynamic>>();

                            var compraDetAnteriorEK = consultaCheckProductivo(
                                    string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", compraAnterior[0].cc.Value, compraAnterior[0].numero.Value)
                                );

                            if (compraDetAnteriorEK != null)
                            {
                                var compraDetAnterior = (List<dynamic>)compraDetAnteriorEK.ToObject<List<dynamic>>();

                                using (var con = checkConexionProductivo())
                                using (var trans = con.BeginTransaction())
                                {
                                    var count = 0;
                                    //decimal subTotalCancelado = 0;

                                    foreach (var part in compra.lstPartidas)
                                    {
                                        var partidaAnterior = compraDetAnterior.FirstOrDefault(x => (int)x.partida.Value == part.partida && (int)x.insumo.Value == part.insumo);

                                        if (partidaAnterior != null)
                                        {
                                            var cantidadAnterior = Convert.ToDecimal(partidaAnterior.cantidad.Value, CultureInfo.InvariantCulture);
                                            var importeAnterior = Convert.ToDecimal(partidaAnterior.importe.Value, CultureInfo.InvariantCulture);

                                            #region Actualizar Explosión para restar la cantidad anterior y después sumar la cantidad nueva
                                            var registroExplosionEK = consultaCheckProductivo(
                                                string.Format(@"SELECT * FROM so_explos_mat WHERE cc = '{0}' AND insumo = {1} AND year_explos = {2}", compra.cc, part.insumo, DateTime.Now.Year)
                                            );

                                            if (registroExplosionEK != null)
                                            {
                                                var registroExplosion = ((List<dynamic>)registroExplosionEK.ToObject<List<dynamic>>())[0];

                                                var nuevaCantidadComprada =
                                                    (Convert.ToDecimal(registroExplosion.comp_cant, CultureInfo.InvariantCulture) - cantidadAnterior) + part.cantidad;
                                                var nuevoImporteComprado =
                                                    (Convert.ToDecimal(registroExplosion.comp_imp, CultureInfo.InvariantCulture) - importeAnterior) + (part.cantidad * part.precio);

                                                var consultaExplosionUpdateResta = @"
                                            UPDATE DBA.so_explos_mat 
                                            SET comp_cant = ?, comp_imp = ? 
                                            WHERE cc = ? AND insumo = ? AND year_explos = ?";

                                                using (var cmd = new OdbcCommand(consultaExplosionUpdateResta))
                                                {
                                                    OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                    parametersExplosion.Add("@comp_cant", OdbcType.Numeric).Value = nuevaCantidadComprada;
                                                    parametersExplosion.Add("@comp_imp", OdbcType.Numeric).Value = nuevoImporteComprado;

                                                    parametersExplosion.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                    parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = part.insumo;
                                                    parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;

                                                    cmd.Connection = trans.Connection;
                                                    cmd.Transaction = trans;

                                                    count += cmd.ExecuteNonQuery();
                                                }
                                            }
                                            #endregion

                                            //var cantidadCancelada = cantidadAnterior - part.cantidad;
                                            //var importeCancelado = cantidadCancelada * Convert.ToDecimal(partidaAnterior.precio.Value, CultureInfo.InvariantCulture);

                                            //subTotalCancelado += importeCancelado;

                                            var partidaAnteriorSIGOPLAN = _context.tblCom_OrdenCompraDet.FirstOrDefault(x =>
                                                x.cc == compra.cc &&
                                                x.numero == compra.numero &&
                                                x.partida == part.partida &&
                                                x.insumo == part.insumo);

                                            if (partidaAnteriorSIGOPLAN != null)
                                            {
                                                partidaAnteriorSIGOPLAN.cantidad = part.cantidad;
                                                partidaAnteriorSIGOPLAN.importe = part.cantidad * Convert.ToDecimal(partidaAnterior.precio.Value, CultureInfo.InvariantCulture);
                                                //partidaAnteriorSIGOPLAN.cant_canc = Convert.ToDecimal(partidaAnterior.cant_canc.Value, CultureInfo.InvariantCulture) + cantidadCancelada;
                                                //partidaAnteriorSIGOPLAN.imp_canc = Convert.ToDecimal(partidaAnterior.imp_canc.Value, CultureInfo.InvariantCulture) + importeCancelado;

                                                partidaAnteriorSIGOPLAN.partidaDescripcion = part.partidaDescripcion;

                                                _context.Entry(partidaAnteriorSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                                _context.SaveChanges();
                                            }

                                            var consultaDet = @"UPDATE DBA.so_orden_compra_det 
                                                        SET 
                                                            cantidad = ?, 
                                                            precio = ?, 
                                                            importe = ?, 
                                                            iva = ?, 
                                                            porcent_iva = ?, 
                                                            exento_iva = ? 
                                                        WHERE cc = ? AND numero = ? AND partida = ? AND insumo = ?";

                                            using (var cmd = new OdbcCommand(consultaDet))
                                            {
                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                parameters.Add("@cantidad", OdbcType.Numeric).Value = part.cantidad;
                                                parameters.Add("@precio", OdbcType.Numeric).Value = part.precio;
                                                parameters.Add("@importe", OdbcType.Numeric).Value = part.cantidad * part.precio;
                                                parameters.Add("@iva", OdbcType.Numeric).Value = part.iva ?? 0;
                                                parameters.Add("@porcent_iva", OdbcType.Numeric).Value = part.porcent_iva ?? 0;
                                                parameters.Add("@exento_iva", OdbcType.Numeric).Value = part.exento_iva ? 1 : 0;

                                                parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                parameters.Add("@numero", OdbcType.Numeric).Value = compra.numero;
                                                parameters.Add("@partida", OdbcType.Numeric).Value = part.partida;
                                                parameters.Add("@insumo", OdbcType.Numeric).Value = part.insumo;

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;

                                                count += cmd.ExecuteNonQuery();
                                            }

                                            var partidaRequisicionEK = consultaCheckProductivo(
                                                        string.Format(@"SELECT 
                                                                * 
                                                            FROM so_requisicion_det 
                                                            WHERE 
                                                                cc = '{0}' AND 
                                                                numero = {1} AND 
                                                                partida = {2} AND 
                                                                insumo = {3}",
                                                                                         compra.cc,
                                                                                         (int)partidaAnterior.num_requisicion.Value,
                                                                                         (int)partidaAnterior.part_requisicion.Value,
                                                                                         (int)partidaAnterior.insumo.Value)
                                                    );

                                            if (partidaRequisicionEK != null)
                                            {
                                                var partidaRequisicion = (List<dynamic>)partidaRequisicionEK.ToObject<List<dynamic>>();

                                                #region Validación para no comprar más de lo requerido
                                                decimal cantidadPartidaRequisicion = Convert.ToDecimal(partidaRequisicion[0].cantidad, CultureInfo.InvariantCulture);

                                                if (part.cantidad > cantidadPartidaRequisicion)
                                                {
                                                    throw new Exception("No se puede comprar más de lo requerido. Partida: " + part.partida);
                                                }
                                                #endregion

                                                var numeroRequisicion = (int)partidaAnterior.num_requisicion.Value;

                                                var requisicionSIGOPLAN = _context.tblCom_Req.FirstOrDefault(x => x.estatusRegistro && x.cc == compra.cc && x.numero == numeroRequisicion);

                                                if (requisicionSIGOPLAN != null)
                                                {
                                                    var numeroPartida = (int)partidaAnterior.part_requisicion.Value;
                                                    var numeroInsumo = (int)partidaAnterior.insumo.Value;
                                                    var partidaRequisicionSIGOPLAN = _context.tblCom_ReqDet.FirstOrDefault(x =>
                                                        x.estatusRegistro &&
                                                        x.idReq == requisicionSIGOPLAN.id &&
                                                        x.partida == numeroPartida &&
                                                        x.insumo == numeroInsumo);

                                                    if (partidaRequisicionSIGOPLAN != null)
                                                    {
                                                        partidaRequisicionSIGOPLAN.cantOrdenada =
                                                            Convert.ToDecimal(partidaRequisicion[0].cant_ordenada.Value, CultureInfo.InvariantCulture)
                                                            //- cantidadCancelada
                                                            ;

                                                        _context.Entry(partidaRequisicionSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                                        _context.SaveChanges();
                                                    }
                                                }

                                                var consultaPartidaReq = @"
                                            UPDATE DBA.so_requisicion_det 
                                            SET 
                                                cant_ordenada = ? 
                                            WHERE cc = ? AND numero = ? AND partida = ? AND insumo = ?";

                                                using (var cmd = new OdbcCommand(consultaPartidaReq))
                                                {
                                                    OdbcParameterCollection parameters = cmd.Parameters;

                                                    parameters.Add("@cant_ordenada", OdbcType.Numeric).Value = part.cantidad; //Convert.ToDecimal(partidaRequisicion[0].cant_ordenada.Value, CultureInfo.InvariantCulture);

                                                    parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                    parameters.Add("@numero", OdbcType.Numeric).Value = (int)partidaAnterior.num_requisicion.Value;
                                                    parameters.Add("@partida", OdbcType.Numeric).Value = (int)partidaAnterior.part_requisicion.Value;
                                                    parameters.Add("@insumo", OdbcType.Numeric).Value = (int)partidaAnterior.insumo.Value;

                                                    cmd.Connection = trans.Connection;
                                                    cmd.Transaction = trans;

                                                    count += cmd.ExecuteNonQuery();
                                                }
                                            }

                                            var partidaDescripcionAnteriorEK = consultaCheckProductivo(
                                                string.Format(@"SELECT 
                                                        * 
                                                    FROM so_orden_det_linea 
                                                    WHERE 
                                                        cc = '{0}' AND 
                                                        numero = {1} AND 
                                                        partida = {2}", compraAnterior[0].cc.Value, compraAnterior[0].numero.Value, partidaAnterior.partida.Value));

                                            if (partidaDescripcionAnteriorEK != null)
                                            {
                                                var partidaDescripcionAnterior = (List<dynamic>)partidaDescripcionAnteriorEK.ToObject<List<dynamic>>();

                                                if (partidaDescripcionAnterior[0].descripcion.Value as string != part.partidaDescripcion)
                                                {
                                                    var consultaPartidaDescripcion = @"
                                            UPDATE DBA.so_orden_det_linea 
                                            SET 
                                                descripcion = ? 
                                            WHERE cc = ? AND numero = ? AND partida = ?";

                                                    using (var cmd = new OdbcCommand(consultaPartidaDescripcion))
                                                    {
                                                        OdbcParameterCollection parameters = cmd.Parameters;

                                                        parameters.Add("@descripcion", OdbcType.VarChar).Value = part.partidaDescripcion ?? "";

                                                        parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                        parameters.Add("@numero", OdbcType.Numeric).Value = compraAnterior[0].numero.Value;
                                                        parameters.Add("@partida", OdbcType.Numeric).Value = partidaAnterior.partida.Value;

                                                        cmd.Connection = trans.Connection;
                                                        cmd.Transaction = trans;

                                                        count += cmd.ExecuteNonQuery();
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (part.partidaDescripcion != "" && part.partidaDescripcion != null)
                                                {
                                                    var consultaInsertPartidaDescripcion = @"INSERT INTO DBA.so_orden_det_linea (cc, numero, partida, descripcion) VALUES (?,?,?,?)";

                                                    using (var cmd = new OdbcCommand(consultaInsertPartidaDescripcion))
                                                    {
                                                        OdbcParameterCollection parameters = cmd.Parameters;

                                                        parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                        parameters.Add("@numero", OdbcType.Numeric).Value = compra.numero;
                                                        parameters.Add("@partida", OdbcType.Numeric).Value = part.partida;
                                                        parameters.Add("@descripcion", OdbcType.VarChar).Value = part.partidaDescripcion;

                                                        cmd.Connection = trans.Connection;
                                                        cmd.Transaction = trans;

                                                        count += cmd.ExecuteNonQuery();
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    //var ivaCancelado = subTotalCancelado * (Convert.ToDecimal(compraAnterior[0].porcent_iva.Value, CultureInfo.InvariantCulture) / 100);
                                    //var totalCancelado = subTotalCancelado + ivaCancelado;

                                    var compraSIGOPLAN = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.cc == compra.cc && x.numero == compra.numero);
                                    var checkEntradasExistentes = consultaCheckProductivo(
                                        string.Format(@"SELECT * FROM si_movimientos WHERE tipo_mov = 1 AND cc = '{0}' AND orden_ct = {1}", compra.cc, compra.numero)
                                    );

                                    #region Recalcular el subtotal y total de la compra
                                    decimal compraSubtotal = 0;
                                    decimal compraTotal = 0;
                                    var subTotalEK = consultaCheckProductivo(
                                        string.Format(@"SELECT SUM(importe) - SUM(imp_canc) AS subTotal FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", compra.cc, compra.numero)
                                    );

                                    if (subTotalEK != null)
                                    {
                                        var subTotal = ((List<dynamic>)subTotalEK.ToObject<List<dynamic>>())[0];

                                        compraSubtotal = Convert.ToDecimal(subTotal.subTotal, CultureInfo.InvariantCulture);
                                        compraTotal = compraSubtotal + compra.iva;
                                    }
                                    #endregion

                                    decimal totalRetencion = 0;
                                    if (compraSIGOPLAN != null)
                                    {
                                        compraSIGOPLAN.bienes_servicios = compra.bienes_servicios ?? "";

                                        if (checkEntradasExistentes == null)
                                        {
                                            compraSIGOPLAN.idLibreAbordo = compra.libre_abordo;
                                        }

                                        // SE OBTIENE TOTAL RETENCION
                                        if (compra.lstRetenciones != null)
                                        {
                                            foreach (var item in compra.lstRetenciones)
                                            {
                                                totalRetencion += Convert.ToDecimal(item.importe);
                                            }
                                        }

                                        compraSIGOPLAN.tipo_oc_req = compra.tipo_oc_req;
                                        compraSIGOPLAN.moneda = compra.moneda.ToString();
                                        compraSIGOPLAN.tipo_cambio = compra.tipo_cambio;
                                        compraSIGOPLAN.sub_total = compraSubtotal; //compraSIGOPLAN.sub_total = compra.sub_total;
                                        compraSIGOPLAN.porcent_iva = compra.porcent_iva;
                                        compraSIGOPLAN.iva = compra.iva;
                                        compraSIGOPLAN.total = compraTotal - totalRetencion; //compraSIGOPLAN.total = compra.sub_total + compra.iva;
                                        compraSIGOPLAN.tiempoEntregaDias = compra.tiempoEntregaDias;
                                        compraSIGOPLAN.tiempoEntregaComentarios = compra.tiempoEntregaComentarios ?? "";
                                        compraSIGOPLAN.anticipo = compra.anticipoBool;
                                        compraSIGOPLAN.totalAnticipo = compra.totalAnticipo;
                                        compraSIGOPLAN.st_impresa = ""; //Se quita el estatus de impresa para que se vuelva a generar una impresión con la leyenda de "ORIGINAL".

                                        _context.Entry(compraSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                        _context.SaveChanges();
                                    }

                                    var consulta = @"
                                            UPDATE DBA.so_orden_compra 
                                            SET 
                                               bienes_servicios = ?, 
                                               embarquese = ?, 
                                               libre_abordo = ?, 
                                               proveedor = ?, 
                                               bit_autorecepcion = ?, 
                                               almacen_autorecepcion = ?, 
                                               empleado_autorecepcion = ?, 
                                               tipo_oc_req = ?, 
                                               moneda = ?, 
                                               tipo_cambio = ?, 
                                               sub_total = ?, 
                                               porcent_iva = ?, 
                                               iva = ?, 
                                               rentencion_despues_iva = ?, 
                                               total = ?, 
                                               st_impresa = ? 
                                            WHERE cc = ? AND numero = ?";

                                    using (var cmd = new OdbcCommand(consulta))
                                    {
                                        OdbcParameterCollection parameters = cmd.Parameters;

                                        parameters.Add("@bienes_servicios", OdbcType.Char).Value = compra.bienes_servicios != null ? compra.bienes_servicios : "";
                                        parameters.Add("@embarquese", OdbcType.Char).Value = compra.embarquese != null ? compra.embarquese : "";
                                        parameters.Add("@libre_abordo", OdbcType.Numeric).Value = 1;
                                        parameters.Add("@proveedor", OdbcType.Numeric).Value = (compra.proveedor != null && compra.proveedor > 0) ? compra.proveedor : (int)compraAnterior[0].proveedor;
                                        parameters.Add("@bit_autorecepcion", OdbcType.Char).Value = compra.bit_autorecepcion;
                                        parameters.Add("@almacen_autorecepcion", OdbcType.Numeric).Value = compra.almacen_autorecepcion ?? (object)DBNull.Value;
                                        parameters.Add("@empleado_autorecepcion", OdbcType.Numeric).Value = compra.empleado_autorecepcion ?? (object)DBNull.Value;
                                        parameters.Add("@tipo_oc_req", OdbcType.Char).Value = compra.tipo_oc_req;
                                        parameters.Add("@moneda", OdbcType.Char).Value = compra.moneda.ToString();
                                        parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = compra.tipo_cambio;
                                        parameters.Add("@sub_total", OdbcType.Numeric).Value = compra.sub_total;
                                        parameters.Add("@porcent_iva", OdbcType.Numeric).Value = compra.porcent_iva;
                                        parameters.Add("@iva", OdbcType.Numeric).Value = compra.iva;
                                        parameters.Add("@rentencion_despues_iva", OdbcType.Numeric).Value = compra.rentencion_despues_iva;
                                        parameters.Add("@total", OdbcType.Numeric).Value = (compra.sub_total + compra.iva) - totalRetencion;
                                        parameters.Add("@st_impresa", OdbcType.Char).Value = ""; //Se quita el estatus de impresa para que se vuelva a generar una impresión con la leyenda de "ORIGINAL".

                                        //parameters.Add("@sub_tot_canc", OdbcType.Numeric).Value = Convert.ToDecimal(compraAnterior[0].sub_tot_canc.Value, CultureInfo.InvariantCulture) + subTotalCancelado;
                                        //parameters.Add("@iva_canc", OdbcType.Numeric).Value = Convert.ToDecimal(compraAnterior[0].iva_canc.Value, CultureInfo.InvariantCulture) + ivaCancelado;
                                        //parameters.Add("@total_canc", OdbcType.Numeric).Value = Convert.ToDecimal(compraAnterior[0].total_canc.Value, CultureInfo.InvariantCulture) + totalCancelado;

                                        parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                        parameters.Add("@numero", OdbcType.Numeric).Value = compra.numero;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;

                                        count += cmd.ExecuteNonQuery();
                                    }

                                    var consultaElimRet = @"DELETE FROM DBA.so_ordenc_retenciones WHERE cc = ? AND numero = ?";

                                    using (var cmd = new OdbcCommand(consultaElimRet))
                                    {
                                        OdbcParameterCollection parameters = cmd.Parameters;

                                        parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                        parameters.Add("@numero", OdbcType.Numeric).Value = compra.numero;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;

                                        count += cmd.ExecuteNonQuery();
                                    }

                                    if (compra.lstRetenciones != null)
                                    {
                                        foreach (var ret in compra.lstRetenciones)
                                        {
                                            var consultaRet = @"INSERT INTO DBA.so_ordenc_retenciones 
                                            (cc, numero, id_cpto, orden, cantidad, porc_ret, importe, facturado, retenido, aplica, forma_pago, tm_descto, calc_iva, afecta_oc, afecta_fac, 
                                            facturado_ret, facturado_iva, facturado_total, retenido_ret, retenido_iva, retenido_total) 
                                            VALUES (?,?,?,?,?,?,?,?,?,?, 
                                                    ?,?,?,?,?,?,?,?,?,?, 
                                                    ?)";

                                            using (var cmd = new OdbcCommand(consultaRet))
                                            {
                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                parameters.Add("@numero", OdbcType.Numeric).Value = compra.numero;
                                                parameters.Add("@id_cpto", OdbcType.Numeric).Value = ret.id_cpto;
                                                parameters.Add("@orden", OdbcType.Numeric).Value = ret.orden;
                                                parameters.Add("@cantidad", OdbcType.Numeric).Value = 0; //ret.cantidad;
                                                parameters.Add("@porc_ret", OdbcType.Numeric).Value = ret.porc_ret;
                                                parameters.Add("@importe", OdbcType.Numeric).Value = ret.importe;
                                                parameters.Add("@facturado", OdbcType.Numeric).Value = ret.facturado;
                                                parameters.Add("@retenido", OdbcType.Numeric).Value = ret.retenido;
                                                parameters.Add("@aplica", OdbcType.Numeric).Value = ret.aplica;
                                                parameters.Add("@forma_pago", OdbcType.Numeric).Value = ret.forma_pago;
                                                parameters.Add("@tm_descto", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@calc_iva", OdbcType.Numeric).Value = ret.calc_iva;
                                                parameters.Add("@afecta_oc", OdbcType.Char).Value = ret.bit_afecta_oc != null ? ret.bit_afecta_oc : "N";
                                                parameters.Add("@afecta_fac", OdbcType.Char).Value = ret.afecta_fac != null ? ret.afecta_fac : "N";
                                                parameters.Add("@facturado_ret", OdbcType.Numeric).Value = ret.facturado_ret;
                                                parameters.Add("@facturado_iva", OdbcType.Numeric).Value = ret.facturado_iva;
                                                parameters.Add("@facturado_total", OdbcType.Numeric).Value = ret.facturado_total;
                                                parameters.Add("@retenido_ret", OdbcType.Numeric).Value = ret.retenido_ret;
                                                parameters.Add("@retenido_iva", OdbcType.Numeric).Value = ret.retenido_iva;
                                                parameters.Add("@retenido_total", OdbcType.Numeric).Value = ret.retenido_total;
                                                parameters.Add("@porc_base_ret", OdbcType.Numeric).Value = 100;
                                                parameters.Add("@imp_base_ret", OdbcType.Numeric).Value = compra.sub_total;

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;

                                                count += cmd.ExecuteNonQuery();
                                            }
                                        }
                                    }

                                    if (count > 0)
                                    {
                                        trans.Commit();
                                    }

                                    #region Obtener VoBos y Autorizaciones
                                    var objCompra = new OrdenCompraDTO { cc = compra.cc, numero = compra.numero, esOC_Interna = false };
                                    var vobos = getVobos(objCompra);
                                    var autorizaciones = getAutorizaciones(objCompra);

                                    compra.stringVobosAutorizaciones += "[" + compra.cc + "-" + compra.numero + " VoBos: ";

                                    if (vobos != null)
                                    {
                                        foreach (var v in vobos)
                                        {
                                            compra.stringVobosAutorizaciones += v.usu_numero + "-" + v.usu_nombre + " ";
                                        }
                                    }

                                    compra.stringVobosAutorizaciones += "Autorizaciones: ";

                                    if (autorizaciones != null)
                                    {
                                        foreach (var a in autorizaciones)
                                        {
                                            compra.stringVobosAutorizaciones += (int)a.usu_numero + "-" + (string)a.usu_nombre + " ";
                                        }
                                    }

                                    compra.stringVobosAutorizaciones += "] ";
                                    #endregion

                                    return compra;
                                }
                            }
                            else
                            {
                                return new OrdenCompraDTO();
                            }
                        }
                        else
                        {
                            return new OrdenCompraDTO();
                        }
                        #endregion
                    }
                default:
                    {
                        #region Compras México
                        #region Validación Precio Negativo
                        var compraDetSIGOPLAN = _context.tblCom_OrdenCompraDet.Where(x => x.estatusRegistro && x.cc == compra.cc && x.numero == compra.numero).ToList();

                        if (compraDetSIGOPLAN.Count > 0)
                        {
                            //Checa si la compra proviene de una requisición. Si no proviene de una requisición se salta la validación.
                            if (!compraDetSIGOPLAN.Any(x => x.num_requisicion == 0))
                            {
                                if (compra.lstPartidas.Any(x => x.precio < 0))
                                {
                                    throw new Exception("El precio de las partidas no puede tener un valor negativo.");
                                }
                            }
                        }
                        #endregion

                        var compraAnteriorEK = consultaCheckProductivo(string.Format(@"SELECT * FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", compra.cc, compra.numero));

                        if (compraAnteriorEK != null)
                        {
                            var compraAnterior = (List<dynamic>)compraAnteriorEK.ToObject<List<dynamic>>();

                            var compraDetAnteriorEK = consultaCheckProductivo(
                                    string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", compraAnterior[0].cc.Value, compraAnterior[0].numero.Value)
                                );

                            if (compraDetAnteriorEK != null)
                            {
                                var compraDetAnterior = (List<dynamic>)compraDetAnteriorEK.ToObject<List<dynamic>>();

                                using (var con = checkConexionProductivo())
                                using (var trans = con.BeginTransaction())
                                {
                                    var count = 0;
                                    //decimal subTotalCancelado = 0;

                                    foreach (var part in compra.lstPartidas)
                                    {
                                        var partidaAnterior = compraDetAnterior.FirstOrDefault(x => (int)x.partida.Value == part.partida && (int)x.insumo.Value == part.insumo);

                                        if (partidaAnterior != null)
                                        {
                                            var cantidadAnterior = Convert.ToDecimal(partidaAnterior.cantidad.Value, CultureInfo.InvariantCulture);
                                            var importeAnterior = Convert.ToDecimal(partidaAnterior.importe.Value, CultureInfo.InvariantCulture);

                                            #region Actualizar Explosión para restar la cantidad anterior y después sumar la cantidad nueva
                                            var registroExplosionEK = consultaCheckProductivo(
                                                string.Format(@"SELECT * FROM so_explos_mat WHERE cc = '{0}' AND insumo = {1} AND year_explos = {2}", compra.cc, part.insumo, DateTime.Now.Year)
                                            );

                                            if (registroExplosionEK != null)
                                            {
                                                var registroExplosion = ((List<dynamic>)registroExplosionEK.ToObject<List<dynamic>>())[0];

                                                var nuevaCantidadComprada =
                                                    (Convert.ToDecimal(registroExplosion.comp_cant, CultureInfo.InvariantCulture) - cantidadAnterior) + part.cantidad;
                                                var nuevoImporteComprado =
                                                    (Convert.ToDecimal(registroExplosion.comp_imp, CultureInfo.InvariantCulture) - importeAnterior) + (part.cantidad * part.precio);

                                                var consultaExplosionUpdateResta = @"
                                            UPDATE so_explos_mat 
                                            SET comp_cant = ?, comp_imp = ? 
                                            WHERE cc = ? AND insumo = ? AND year_explos = ?";

                                                using (var cmd = new OdbcCommand(consultaExplosionUpdateResta))
                                                {
                                                    OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                    parametersExplosion.Add("@comp_cant", OdbcType.Numeric).Value = nuevaCantidadComprada;
                                                    parametersExplosion.Add("@comp_imp", OdbcType.Numeric).Value = nuevoImporteComprado;

                                                    parametersExplosion.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                    parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = part.insumo;
                                                    parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;

                                                    cmd.Connection = trans.Connection;
                                                    cmd.Transaction = trans;

                                                    count += cmd.ExecuteNonQuery();
                                                }
                                            }
                                            #endregion

                                            //var cantidadCancelada = cantidadAnterior - part.cantidad;
                                            //var importeCancelado = cantidadCancelada * Convert.ToDecimal(partidaAnterior.precio.Value, CultureInfo.InvariantCulture);

                                            //subTotalCancelado += importeCancelado;

                                            var partidaAnteriorSIGOPLAN = _context.tblCom_OrdenCompraDet.FirstOrDefault(x =>
                                                x.cc == compra.cc &&
                                                x.numero == compra.numero &&
                                                x.partida == part.partida &&
                                                x.insumo == part.insumo);

                                            if (partidaAnteriorSIGOPLAN != null)
                                            {
                                                partidaAnteriorSIGOPLAN.cantidad = part.cantidad;
                                                partidaAnteriorSIGOPLAN.importe = part.cantidad * Convert.ToDecimal(partidaAnterior.precio.Value, CultureInfo.InvariantCulture);
                                                //partidaAnteriorSIGOPLAN.cant_canc = Convert.ToDecimal(partidaAnterior.cant_canc.Value, CultureInfo.InvariantCulture) + cantidadCancelada;
                                                //partidaAnteriorSIGOPLAN.imp_canc = Convert.ToDecimal(partidaAnterior.imp_canc.Value, CultureInfo.InvariantCulture) + importeCancelado;

                                                partidaAnteriorSIGOPLAN.partidaDescripcion = part.partidaDescripcion;

                                                _context.Entry(partidaAnteriorSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                                _context.SaveChanges();
                                            }

                                            var consultaDet = @"UPDATE so_orden_compra_det 
                                                        SET 
                                                            cantidad = ?, 
                                                            precio = ?, 
                                                            importe = ? 
                                                        WHERE cc = ? AND numero = ? AND partida = ? AND insumo = ?";

                                            using (var cmd = new OdbcCommand(consultaDet))
                                            {
                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                parameters.Add("@cantidad", OdbcType.Numeric).Value = part.cantidad;
                                                parameters.Add("@precio", OdbcType.Numeric).Value = part.precio;
                                                parameters.Add("@importe", OdbcType.Numeric).Value = part.cantidad * part.precio;
                                                //parameters.Add("@cant_canc", OdbcType.Numeric).Value = Convert.ToDecimal(partidaAnterior.cant_canc.Value, CultureInfo.InvariantCulture) + cantidadCancelada;
                                                //parameters.Add("@imp_canc", OdbcType.Numeric).Value = Convert.ToDecimal(partidaAnterior.imp_canc.Value, CultureInfo.InvariantCulture) + importeCancelado;

                                                parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                parameters.Add("@numero", OdbcType.Numeric).Value = compra.numero;
                                                parameters.Add("@partida", OdbcType.Numeric).Value = part.partida;
                                                parameters.Add("@insumo", OdbcType.Numeric).Value = part.insumo;

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;

                                                count += cmd.ExecuteNonQuery();
                                            }

                                            var partidaRequisicionEK = consultaCheckProductivo(
                                                        string.Format(@"SELECT 
                                                                * 
                                                            FROM so_requisicion_det 
                                                            WHERE 
                                                                cc = '{0}' AND 
                                                                numero = {1} AND 
                                                                partida = {2} AND 
                                                                insumo = {3}",
                                                                                         compra.cc,
                                                                                         (int)partidaAnterior.num_requisicion.Value,
                                                                                         (int)partidaAnterior.part_requisicion.Value,
                                                                                         (int)partidaAnterior.insumo.Value)
                                                    );

                                            if (partidaRequisicionEK != null)
                                            {
                                                var partidaRequisicion = (List<dynamic>)partidaRequisicionEK.ToObject<List<dynamic>>();

                                                #region Validación para no comprar más de lo requerido
                                                decimal cantidadPartidaRequisicion = Convert.ToDecimal(partidaRequisicion[0].cantidad, CultureInfo.InvariantCulture);

                                                if (part.cantidad > cantidadPartidaRequisicion)
                                                {
                                                    throw new Exception("No se puede comprar más de lo requerido. Partida: " + part.partida);
                                                }
                                                #endregion

                                                var numeroRequisicion = (int)partidaAnterior.num_requisicion.Value;

                                                var requisicionSIGOPLAN = _context.tblCom_Req.FirstOrDefault(x => x.estatusRegistro && x.cc == compra.cc && x.numero == numeroRequisicion);

                                                if (requisicionSIGOPLAN != null)
                                                {
                                                    var numeroPartida = (int)partidaAnterior.part_requisicion.Value;
                                                    var numeroInsumo = (int)partidaAnterior.insumo.Value;
                                                    var partidaRequisicionSIGOPLAN = _context.tblCom_ReqDet.FirstOrDefault(x =>
                                                        x.estatusRegistro &&
                                                        x.idReq == requisicionSIGOPLAN.id &&
                                                        x.partida == numeroPartida &&
                                                        x.insumo == numeroInsumo);

                                                    if (partidaRequisicionSIGOPLAN != null)
                                                    {
                                                        partidaRequisicionSIGOPLAN.cantOrdenada =
                                                            Convert.ToDecimal(partidaRequisicion[0].cant_ordenada.Value, CultureInfo.InvariantCulture)
                                                            //- cantidadCancelada
                                                            ;

                                                        _context.Entry(partidaRequisicionSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                                        _context.SaveChanges();
                                                    }
                                                }

                                                var consultaPartidaReq = @"
                                            UPDATE so_requisicion_det 
                                            SET 
                                                cant_ordenada = ? 
                                            WHERE cc = ? AND numero = ? AND partida = ? AND insumo = ?";

                                                using (var cmd = new OdbcCommand(consultaPartidaReq))
                                                {
                                                    OdbcParameterCollection parameters = cmd.Parameters;

                                                    parameters.Add("@cant_ordenada", OdbcType.Numeric).Value = part.cantidad; //Convert.ToDecimal(partidaRequisicion[0].cant_ordenada.Value, CultureInfo.InvariantCulture);

                                                    parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                    parameters.Add("@numero", OdbcType.Numeric).Value = (int)partidaAnterior.num_requisicion.Value;
                                                    parameters.Add("@partida", OdbcType.Numeric).Value = (int)partidaAnterior.part_requisicion.Value;
                                                    parameters.Add("@insumo", OdbcType.Numeric).Value = (int)partidaAnterior.insumo.Value;

                                                    cmd.Connection = trans.Connection;
                                                    cmd.Transaction = trans;

                                                    count += cmd.ExecuteNonQuery();
                                                }
                                            }

                                            var partidaDescripcionAnteriorEK = consultaCheckProductivo(
                                                string.Format(@"SELECT 
                                                        * 
                                                    FROM so_orden_det_linea 
                                                    WHERE 
                                                        cc = '{0}' AND 
                                                        numero = {1} AND 
                                                        partida = {2}", compraAnterior[0].cc.Value, compraAnterior[0].numero.Value, partidaAnterior.partida.Value));

                                            if (partidaDescripcionAnteriorEK != null)
                                            {
                                                var partidaDescripcionAnterior = (List<dynamic>)partidaDescripcionAnteriorEK.ToObject<List<dynamic>>();

                                                if (partidaDescripcionAnterior[0].descripcion.Value as string != part.partidaDescripcion)
                                                {
                                                    var consultaPartidaDescripcion = @"
                                            UPDATE so_orden_det_linea 
                                            SET 
                                                descripcion = ? 
                                            WHERE cc = ? AND numero = ? AND partida = ?";

                                                    using (var cmd = new OdbcCommand(consultaPartidaDescripcion))
                                                    {
                                                        OdbcParameterCollection parameters = cmd.Parameters;

                                                        parameters.Add("@descripcion", OdbcType.VarChar).Value = part.partidaDescripcion ?? "";

                                                        parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                        parameters.Add("@numero", OdbcType.Numeric).Value = compraAnterior[0].numero.Value;
                                                        parameters.Add("@partida", OdbcType.Numeric).Value = partidaAnterior.partida.Value;

                                                        cmd.Connection = trans.Connection;
                                                        cmd.Transaction = trans;

                                                        count += cmd.ExecuteNonQuery();
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (part.partidaDescripcion != "" && part.partidaDescripcion != null)
                                                {
                                                    var consultaInsertPartidaDescripcion = @"INSERT INTO so_orden_det_linea (cc, numero, partida, descripcion) VALUES (?,?,?,?)";

                                                    using (var cmd = new OdbcCommand(consultaInsertPartidaDescripcion))
                                                    {
                                                        OdbcParameterCollection parameters = cmd.Parameters;

                                                        parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                        parameters.Add("@numero", OdbcType.Numeric).Value = compra.numero;
                                                        parameters.Add("@partida", OdbcType.Numeric).Value = part.partida;
                                                        parameters.Add("@descripcion", OdbcType.VarChar).Value = part.partidaDescripcion;

                                                        cmd.Connection = trans.Connection;
                                                        cmd.Transaction = trans;

                                                        count += cmd.ExecuteNonQuery();
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    //var ivaCancelado = subTotalCancelado * (Convert.ToDecimal(compraAnterior[0].porcent_iva.Value, CultureInfo.InvariantCulture) / 100);
                                    //var totalCancelado = subTotalCancelado + ivaCancelado;

                                    var compraSIGOPLAN = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.cc == compra.cc && x.numero == compra.numero);
                                    var checkEntradasExistentes = consultaCheckProductivo(
                                        string.Format(@"SELECT * FROM si_movimientos WHERE tipo_mov = 1 AND cc = '{0}' AND orden_ct = {1}", compra.cc, compra.numero)
                                    );

                                    #region Recalcular el subtotal y total de la compra
                                    decimal compraSubtotal = 0;
                                    decimal compraTotal = 0;
                                    var subTotalEK = consultaCheckProductivo(
                                        string.Format(@"SELECT SUM(importe) - SUM(imp_canc) AS subTotal FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", compra.cc, compra.numero)
                                    );

                                    if (subTotalEK != null)
                                    {
                                        var subTotal = ((List<dynamic>)subTotalEK.ToObject<List<dynamic>>())[0];

                                        compraSubtotal = Convert.ToDecimal(subTotal.subTotal, CultureInfo.InvariantCulture);

                                        decimal multiplier = (decimal)Math.Pow(10, Convert.ToDouble(2));
                                        compra.iva = Math.Ceiling((compraSubtotal * (compra.porcent_iva / 100)) * multiplier) / multiplier;

                                        compraTotal = compraSubtotal + compra.iva;
                                    }
                                    #endregion

                                    if (compraSIGOPLAN != null)
                                    {
                                        compraSIGOPLAN.bienes_servicios = compra.bienes_servicios ?? "";

                                        if (checkEntradasExistentes == null)
                                        {
                                            compraSIGOPLAN.idLibreAbordo = compra.libre_abordo;
                                        }

                                        compraSIGOPLAN.tipo_oc_req = compra.tipo_oc_req;
                                        compraSIGOPLAN.moneda = compra.moneda.ToString();
                                        compraSIGOPLAN.tipo_cambio = compra.tipo_cambio;
                                        compraSIGOPLAN.sub_total = compraSubtotal; //compraSIGOPLAN.sub_total = compra.sub_total;
                                        compraSIGOPLAN.porcent_iva = compra.porcent_iva;
                                        compraSIGOPLAN.iva = compra.iva;
                                        compraSIGOPLAN.total = compraTotal; //compraSIGOPLAN.total = compra.sub_total + compra.iva;
                                        compraSIGOPLAN.tiempoEntregaDias = compra.tiempoEntregaDias;
                                        compraSIGOPLAN.tiempoEntregaComentarios = compra.tiempoEntregaComentarios ?? "";
                                        compraSIGOPLAN.anticipo = compra.anticipoBool;
                                        compraSIGOPLAN.totalAnticipo = compra.totalAnticipo;
                                        compraSIGOPLAN.st_impresa = ""; //Se quita el estatus de impresa para que se vuelva a generar una impresión con la leyenda de "ORIGINAL".

                                        _context.Entry(compraSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                        _context.SaveChanges();
                                    }

                                    var consulta = @"
                                            UPDATE so_orden_compra 
                                            SET 
                                               bienes_servicios = ?, 
                                               embarquese = ?, 
                                               libre_abordo = ?, 
                                               proveedor = ?, 
                                               bit_autorecepcion = ?, 
                                               almacen_autorecepcion = ?, 
                                               empleado_autorecepcion = ?, 
                                               tipo_oc_req = ?, 
                                               moneda = ?, 
                                               tipo_cambio = ?, 
                                               sub_total = ?, 
                                               porcent_iva = ?, 
                                               iva = ?, 
                                               rentencion_despues_iva = ?, 
                                               total = ?, 
                                               st_impresa = ? 
                                            WHERE cc = ? AND numero = ?";

                                    using (var cmd = new OdbcCommand(consulta))
                                    {
                                        OdbcParameterCollection parameters = cmd.Parameters;

                                        parameters.Add("@bienes_servicios", OdbcType.Char).Value = compra.bienes_servicios != null ? compra.bienes_servicios : "";
                                        parameters.Add("@embarquese", OdbcType.Char).Value = compra.embarquese != null ? compra.embarquese : "";
                                        parameters.Add("@libre_abordo", OdbcType.Numeric).Value = 1;
                                        parameters.Add("@proveedor", OdbcType.Numeric).Value = (compra.proveedor != null && compra.proveedor > 0) ? compra.proveedor : (int)compraAnterior[0].proveedor;
                                        parameters.Add("@bit_autorecepcion", OdbcType.Char).Value = compra.bit_autorecepcion;
                                        parameters.Add("@almacen_autorecepcion", OdbcType.Numeric).Value = compra.almacen_autorecepcion ?? (object)DBNull.Value;
                                        parameters.Add("@empleado_autorecepcion", OdbcType.Numeric).Value = compra.empleado_autorecepcion ?? (object)DBNull.Value;
                                        parameters.Add("@tipo_oc_req", OdbcType.Char).Value = compra.tipo_oc_req;
                                        parameters.Add("@moneda", OdbcType.Char).Value = compra.moneda.ToString();
                                        parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = compra.tipo_cambio;
                                        parameters.Add("@sub_total", OdbcType.Numeric).Value = compra.sub_total;
                                        parameters.Add("@porcent_iva", OdbcType.Numeric).Value = compra.porcent_iva;
                                        parameters.Add("@iva", OdbcType.Numeric).Value = compra.iva;
                                        parameters.Add("@rentencion_despues_iva", OdbcType.Numeric).Value = compra.rentencion_despues_iva;
                                        parameters.Add("@total", OdbcType.Numeric).Value = compra.sub_total + compra.iva;
                                        parameters.Add("@st_impresa", OdbcType.Char).Value = ""; //Se quita el estatus de impresa para que se vuelva a generar una impresión con la leyenda de "ORIGINAL".

                                        //parameters.Add("@sub_tot_canc", OdbcType.Numeric).Value = Convert.ToDecimal(compraAnterior[0].sub_tot_canc.Value, CultureInfo.InvariantCulture) + subTotalCancelado;
                                        //parameters.Add("@iva_canc", OdbcType.Numeric).Value = Convert.ToDecimal(compraAnterior[0].iva_canc.Value, CultureInfo.InvariantCulture) + ivaCancelado;
                                        //parameters.Add("@total_canc", OdbcType.Numeric).Value = Convert.ToDecimal(compraAnterior[0].total_canc.Value, CultureInfo.InvariantCulture) + totalCancelado;

                                        parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                        parameters.Add("@numero", OdbcType.Numeric).Value = compra.numero;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;

                                        count += cmd.ExecuteNonQuery();
                                    }

                                    var consultaElimRet = @"DELETE FROM so_ordenc_retenciones WHERE cc = ? AND numero = ?";

                                    using (var cmd = new OdbcCommand(consultaElimRet))
                                    {
                                        OdbcParameterCollection parameters = cmd.Parameters;

                                        parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                        parameters.Add("@numero", OdbcType.Numeric).Value = compra.numero;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;

                                        count += cmd.ExecuteNonQuery();
                                    }

                                    if (compra.lstRetenciones != null)
                                    {
                                        foreach (var ret in compra.lstRetenciones)
                                        {
                                            var consultaRet = @"INSERT INTO so_ordenc_retenciones 
                                            (cc, numero, id_cpto, orden, cantidad, porc_ret, importe, facturado, retenido, aplica, forma_pago, tm_descto, calc_iva, afecta_oc, afecta_fac, 
                                            facturado_ret, facturado_iva, facturado_total, retenido_ret, retenido_iva, retenido_total) 
                                            VALUES (?,?,?,?,?,?,?,?,?,?, 
                                                    ?,?,?,?,?,?,?,?,?,?, 
                                                    ?)";

                                            using (var cmd = new OdbcCommand(consultaRet))
                                            {
                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                parameters.Add("@numero", OdbcType.Numeric).Value = compra.numero;
                                                parameters.Add("@id_cpto", OdbcType.Numeric).Value = ret.id_cpto;
                                                parameters.Add("@orden", OdbcType.Numeric).Value = ret.orden;
                                                parameters.Add("@cantidad", OdbcType.Numeric).Value = ret.cantidad;
                                                parameters.Add("@porc_ret", OdbcType.Numeric).Value = ret.porc_ret;
                                                parameters.Add("@importe", OdbcType.Numeric).Value = ret.importe;
                                                parameters.Add("@facturado", OdbcType.Numeric).Value = ret.facturado;
                                                parameters.Add("@retenido", OdbcType.Numeric).Value = ret.retenido;
                                                parameters.Add("@aplica", OdbcType.Numeric).Value = ret.aplica;
                                                parameters.Add("@forma_pago", OdbcType.Numeric).Value = ret.forma_pago;
                                                parameters.Add("@tm_descto", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@calc_iva", OdbcType.Numeric).Value = ret.calc_iva;
                                                parameters.Add("@afecta_oc", OdbcType.Char).Value = ret.bit_afecta_oc != null ? ret.bit_afecta_oc : "N";
                                                parameters.Add("@afecta_fac", OdbcType.Char).Value = ret.afecta_fac != null ? ret.afecta_fac : "N";
                                                parameters.Add("@facturado_ret", OdbcType.Numeric).Value = ret.facturado_ret;
                                                parameters.Add("@facturado_iva", OdbcType.Numeric).Value = ret.facturado_iva;
                                                parameters.Add("@facturado_total", OdbcType.Numeric).Value = ret.facturado_total;
                                                parameters.Add("@retenido_ret", OdbcType.Numeric).Value = ret.retenido_ret;
                                                parameters.Add("@retenido_iva", OdbcType.Numeric).Value = ret.retenido_iva;
                                                parameters.Add("@retenido_total", OdbcType.Numeric).Value = ret.retenido_total;

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;

                                                count += cmd.ExecuteNonQuery();
                                            }
                                        }
                                    }

                                    #region ACTIVACION DE EQUIPO DE STANDBY
                                    var flagMaquinaStandBy = false;
                                    flagMaquinaStandBy = ActivarEconomicoPorAccionRealizada
                                        (
                                            compra.cc,
                                            null,
                                            AccionActivacionEconomicoEnum.ELABORACION_ORDEN_COMPRA,
                                            new { cc = compra.cc, numero = compra.numero, esActualizacion = true }, true);
                                    #endregion

                                    if (count > 0)
                                    {
                                        trans.Commit();
                                    }

                                    #region Obtener VoBos y Autorizaciones
                                    var objCompra = new OrdenCompraDTO { cc = compra.cc, numero = compra.numero, esOC_Interna = false };
                                    var vobos = getVobos(objCompra);
                                    var autorizaciones = getAutorizaciones(objCompra);

                                    compra.stringVobosAutorizaciones += "[" + compra.cc + "-" + compra.numero + " VoBos: ";

                                    foreach (var v in vobos)
                                    {
                                        compra.stringVobosAutorizaciones += v.usu_numero + "-" + v.usu_nombre + " ";
                                    }

                                    compra.stringVobosAutorizaciones += "Autorizaciones: ";

                                    foreach (var a in autorizaciones)
                                    {
                                        compra.stringVobosAutorizaciones += (int)a.usu_numero + "-" + (string)a.usu_nombre + " ";
                                    }

                                    compra.stringVobosAutorizaciones += "] ";
                                    #endregion

                                    return compra;
                                }
                            }
                            else
                            {
                                return new OrdenCompraDTO();
                            }
                        }
                        else
                        {
                            return new OrdenCompraDTO();
                        }
                        #endregion
                    }
            }
        }

        private bool ActivarEconomicoPorAccionRealizada(string numeroEconomico, int? idEconomico, AccionActivacionEconomicoEnum accion, object objeto, bool buscarEnEnkontrol = false)
        {
            if (vSesiones.sesionEmpresaActual != (int)EmpresaEnum.Arrendadora)
            {
                return false;
            }

            tblM_CatMaquina maquina = null;

            if (buscarEnEnkontrol)
            {
                if (!string.IsNullOrEmpty(numeroEconomico))
                {
                    var queryEk = new OdbcConsultaDTO();
                    queryEk.consulta = "SELECT * FROM cc WHERE cc = ?";
                    queryEk.parametros.Add(new OdbcParameterDTO
                    {
                        nombre = "cc",
                        tipo = OdbcType.NVarChar,
                        valor = numeroEconomico
                    });
                    var ccDescripcion = _contextEnkontrol.Select<dynamic>(vSesiones.sesionAmbienteEnkontrolAdm, queryEk).FirstOrDefault();

                    if (ccDescripcion != null)
                    {
                        numeroEconomico = (string)ccDescripcion.descripcion;
                    }
                }
                else
                {
                    throw new Exception("Se tiene que indicar un CC");
                }
            }

            if (!string.IsNullOrEmpty(numeroEconomico))
            {
                maquina = _context.tblM_CatMaquina.FirstOrDefault(x => x.noEconomico == numeroEconomico && x.estatus == 2); //x.estatus == 2 significa que esta en StandBy
            }
            else if (idEconomico.HasValue)
            {
                maquina = _context.tblM_CatMaquina.FirstOrDefault(x => x.id == idEconomico.Value && x.estatus == 2); //x.estatus == 2 significa que esta en StandBy
            }

            if (maquina != null)
            {
                if (_context.tblM_STB_EconomicoBloqueado.Any(x => x.noEconomico == maquina.noEconomico && x.registroActivo))
                {
                    throw new Exception("No es posible realizar la acción puesto que el equipo referenciado se encuentra bloqueado por estatus StandBy");
                }

                var standBy = _context.tblM_STB_CapturaStandBy
                    .FirstOrDefault(x =>
                        x.noEconomicoID == maquina.id &&
                        x.estatus == 2 //Autorizado
                    );

                if (standBy != null)
                {
                    string motivoLiberacion = "";
                    maquina.estatus = 1;
                    standBy.estatus = 4; //Liberado
                    standBy.usuarioLiberaID = vSesiones.sesionUsuarioDTO.id;
                    standBy.fechaLibera = DateTime.Now;
                    standBy.comentarioLiberacion = "Se liberó por sistema - ";
                    switch (accion)
                    {
                        case AccionActivacionEconomicoEnum.ELABORACION_REQUISICION:
                            standBy.comentarioLiberacion += "Se realizó una requisición";
                            motivoLiberacion = "elaboración de requisición";
                            break;
                        case AccionActivacionEconomicoEnum.ELABORACION_ORDEN_COMPRA:
                            standBy.comentarioLiberacion += "Se realizó una orden de compra";
                            motivoLiberacion = "elaboración de orden de compra";
                            break;
                        case AccionActivacionEconomicoEnum.CAPTURA_HOROMETROS:
                            standBy.comentarioLiberacion += "Se capturó horómetros";
                            motivoLiberacion = "captura de horómetros";
                            break;
                        case AccionActivacionEconomicoEnum.CAPTURA_COMBUSTIBLE:
                            standBy.comentarioLiberacion += "Se capturó combustible";
                            motivoLiberacion = "captura de combustible";
                            break;
                        case AccionActivacionEconomicoEnum.CAPTURA_ACEITE:
                            standBy.comentarioLiberacion += "Se capturó aceite";
                            motivoLiberacion = "captura de aceite";
                            break;
                        case AccionActivacionEconomicoEnum.RECEPCION_FACTURA:
                            standBy.comentarioLiberacion += "Por recepción de factura";
                            motivoLiberacion = "recepción de factura";
                            break;
                        case AccionActivacionEconomicoEnum.SALIDA_ALMACEN:
                            standBy.comentarioLiberacion += "Por salida de almacén";
                            motivoLiberacion = "salida de almacén";
                            break;
                    }

                    var bitacora = new tblM_STB_BitacoraActivacionEconomico();
                    bitacora.economicoId = maquina.id;
                    bitacora.fechaAccion = DateTime.Now;
                    bitacora.motivoActivacionId = (int)accion;
                    bitacora.usuarioAccionId = vSesiones.sesionUsuarioDTO.id;
                    bitacora.objeto = JsonUtils.convertNetObjectToJson(objeto);
                    _context.tblM_STB_BitacoraActivacionEconomico.Add(bitacora);
                    _context.SaveChanges();

                    var correos = new List<string>();
                    var correosCC = new List<string>();

                    var adminsGerentes = _context.Select<Core.DTO.Maquinaria.StandBy.AutorizanteDTO>(new DapperDTO
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = @"SELECT
                                                u.id,
                                                u.nombre,
                                                u.apellidoPaterno,
                                                u.apellidoMaterno,
                                                u.correo,
                                                c.cc as ac,
                                                a.perfilAutorizaID
                                            FROM
                                                tblP_Autoriza AS a
                                            INNER JOIN
                                                tblP_Usuario AS u ON u.id = a.usuarioID
                                            INNER JOIN
                                                tblP_CC_Usuario AS c ON c.id = a.cc_usuario_ID
                                            WHERE
                                                u.estatus = 1 AND
                                                a.perfilAutorizaID in (5, 1) AND /*5 == Admin, 1 == Gerente*/
                                                c.cc = @paramCC",
                        parametros = new { paramCC = standBy.ccActual }
                    });

                    correosCC.AddRange(adminsGerentes.Select(x => x.correo).Distinct().ToList());

                    correos.Add("oscar.roman@construplan.com.mx");
                    correosCC.Add("g.reina@construplan.com.mx");
                    correosCC.Add("e.encinas@construplan.com.mx");
                    correosCC.Add("luis.fortino@construplan.com.mx");
                    correosCC.Add("martin.valle@construplan.com.mx");
                    correosCC.Add("alan.palomera@construplan.com.mx");
                    correosCC.Add("diego.gonzalez@construplan.com.mx");
#if DEBUG
                    correos = new List<string> { "martin.zayas@construplan.com.mx" };
                    correosCC = new List<string> { "martin.zayas@construplan.com.mx" };
#endif
                    var cc = _context.tblP_CC.FirstOrDefault(x => x.areaCuenta == maquina.centro_costos);
                    var ccDescripcion = cc != null ? cc.descripcion.Trim() : maquina.centro_costos;
                    string asunto = "El equipo " + maquina.noEconomico + " ha sido liberado de StandBy por " + motivoLiberacion;
                    string contenido = string.Format(@"
                        <p>Buen día.</p>
                        <p>El equipo <strong>{0}</strong> ha sido liberado de StandBy por {1} </p>
                        <p>El equipo se encuentra en <strong>{2}.</strong>", maquina.noEconomico, motivoLiberacion, ccDescripcion);

                    var envioCorrecto = EnviarCorreo(new Infrastructure.DTO.CorreoDTO
                    {
                        asunto = asunto,
                        cuerpo = contenido,
                        correos = correos,
                        correosCC = correosCC
                    });

                    if (!envioCorrecto)
                    {
                        throw new Exception("Error al enviar correo de liberación de StandBy");
                    }

                    return true;
                }
                else
                {
                    throw new Exception("El económico esta en StandBy pero no se encuentra su registro autorizado");
                }
            }

            return false;
        }

        private bool EnviarCorreo(Infrastructure.DTO.CorreoDTO correo)
        {
            if (correo.correos == null || correo.correos.Count == 0 || string.IsNullOrEmpty(correo.asunto) || string.IsNullOrEmpty(correo.cuerpo))
            {
                return false;
            }

            MailMessage mailMessage = new MailMessage();

            correo.correos.ForEach(c => mailMessage.To.Add(new MailAddress(c)));
            correo.correosCC.ForEach(c => mailMessage.CC.Add(new MailAddress(c)));
            correo.archivos.ForEach(archivo => mailMessage.Attachments.Add(archivo));

            mailMessage.IsBodyHtml = true;
            mailMessage.From = new MailAddress("alertas.sigoplan@construplan.com.mx");
            mailMessage.Subject = correo.asunto;
            mailMessage.Body = string.Format(@"
                {0} 
                <p><o:p>&nbsp;</o:p></p>
                <p><o:p>&nbsp;</o:p></p>
                <p>Se informa que esta es un correo autogenerado por el sistema SIGOPLAN (<a href='http://sigoplan.construplan.com.mx/'>http://sigoplan.construplan.com.mx</a>). No es necesario dar una respuesta. Gracias.</p>
            ", correo.cuerpo);

            SmtpClient smptConfig = new SmtpClient();
            smptConfig.Send(mailMessage);
            smptConfig.Dispose();

            return true;
        }

        public OrdenCompraDTO updateCompraInterna(OrdenCompraDTO compra)
        {
            var empresa = vSesiones.sesionEmpresaActual;

            if (empresa != 1 && empresa != 4 && compra.lstPartidas.Any(x => x.area == 0 && x.cuenta == 0))
            {
                throw new Exception("Debe capturar el Área-Cuenta de todas las partidas.");
            }

            #region Validación Precio Negativo
            var compraDetSIGOPLAN = _context.tblCom_OrdenCompraDet.Where(x => x.estatusRegistro && x.cc == compra.cc && x.numero == compra.numero).ToList();

            if (compraDetSIGOPLAN.Count > 0)
            {
                //Checa si la compra proviene de una requisición. Si no proviene de una requisición se salta la validación.
                if (!compraDetSIGOPLAN.Any(x => x.num_requisicion == 0))
                {
                    if (compra.lstPartidas.Any(x => x.precio < 0))
                    {
                        throw new Exception("El precio de las partidas no puede tener un valor negativo.");
                    }
                }
            }
            #endregion

            var compraAnteriorEK = consultaCheckProductivo(string.Format(@"SELECT * FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", compra.cc, compra.numero));

            if (compraAnteriorEK != null)
            {
                var compraAnterior = (List<dynamic>)compraAnteriorEK.ToObject<List<dynamic>>();

                var compraDetAnteriorEK = consultaCheckProductivo(
                        string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", compraAnterior[0].cc.Value, compraAnterior[0].numero.Value)
                    );

                if (compraDetAnteriorEK != null)
                {
                    var compraDetAnterior = (List<dynamic>)compraDetAnteriorEK.ToObject<List<dynamic>>();

                    using (var con = checkConexionProductivo())
                    using (var trans = con.BeginTransaction())
                    {
                        var count = 0;
                        //decimal subTotalCancelado = 0;

                        foreach (var part in compra.lstPartidas)
                        {
                            var partidaAnterior = compraDetAnterior.FirstOrDefault(x => (int)x.partida.Value == part.partida && (int)x.insumo.Value == part.insumo);

                            if (partidaAnterior != null)
                            {
                                var cantidadAnterior = Convert.ToDecimal(partidaAnterior.cantidad.Value, CultureInfo.InvariantCulture);
                                var importeAnterior = Convert.ToDecimal(partidaAnterior.importe.Value, CultureInfo.InvariantCulture);

                                #region Actualizar Explosión para restar la cantidad anterior y después sumar la cantidad nueva
                                var registroExplosionEK = consultaCheckProductivo(
                                    string.Format(@"SELECT * FROM so_explos_mat WHERE cc = '{0}' AND insumo = {1} AND year_explos = {2}", compra.cc, part.insumo, DateTime.Now.Year)
                                );

                                if (registroExplosionEK != null)
                                {
                                    var registroExplosion = ((List<dynamic>)registroExplosionEK.ToObject<List<dynamic>>())[0];

                                    var nuevaCantidadComprada =
                                        (Convert.ToDecimal(registroExplosion.comp_cant, CultureInfo.InvariantCulture) - cantidadAnterior) + part.cantidad;
                                    var nuevoImporteComprado =
                                        (Convert.ToDecimal(registroExplosion.comp_imp, CultureInfo.InvariantCulture) - importeAnterior) + (part.cantidad * part.precio);

                                    var consultaExplosionUpdateResta = @"
                                            UPDATE so_explos_mat 
                                            SET comp_cant = ?, comp_imp = ? 
                                            WHERE cc = ? AND insumo = ? AND year_explos = ?";

                                    using (var cmd = new OdbcCommand(consultaExplosionUpdateResta))
                                    {
                                        OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                        parametersExplosion.Add("@comp_cant", OdbcType.Numeric).Value = nuevaCantidadComprada;
                                        parametersExplosion.Add("@comp_imp", OdbcType.Numeric).Value = nuevoImporteComprado;

                                        parametersExplosion.Add("@cc", OdbcType.Char).Value = compra.cc;
                                        parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = part.insumo;
                                        parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;

                                        count += cmd.ExecuteNonQuery();
                                    }
                                }
                                #endregion

                                //var cantidadCancelada = cantidadAnterior - part.cantidad;
                                //var importeCancelado = cantidadCancelada * Convert.ToDecimal(partidaAnterior.precio.Value, CultureInfo.InvariantCulture);

                                //subTotalCancelado += importeCancelado;

                                var partidaAnteriorSIGOPLAN = _context.tblCom_OrdenCompraDet.FirstOrDefault(x =>
                                    x.cc == compra.cc &&
                                    x.numero == compra.numero &&
                                    x.partida == part.partida &&
                                    x.insumo == part.insumo);

                                if (partidaAnteriorSIGOPLAN != null)
                                {
                                    partidaAnteriorSIGOPLAN.cantidad = part.cantidad;
                                    partidaAnteriorSIGOPLAN.importe = part.cantidad * Convert.ToDecimal(partidaAnterior.precio.Value, CultureInfo.InvariantCulture);
                                    //partidaAnteriorSIGOPLAN.cant_canc = Convert.ToDecimal(partidaAnterior.cant_canc.Value, CultureInfo.InvariantCulture) + cantidadCancelada;
                                    //partidaAnteriorSIGOPLAN.imp_canc = Convert.ToDecimal(partidaAnterior.imp_canc.Value, CultureInfo.InvariantCulture) + importeCancelado;

                                    partidaAnteriorSIGOPLAN.partidaDescripcion = part.partidaDescripcion;

                                    _context.Entry(partidaAnteriorSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                    _context.SaveChanges();
                                }

                                var consultaDet = @"UPDATE so_orden_compra_det 
                                                        SET 
                                                            cantidad = ?, 
                                                            precio = ?, 
                                                            importe = ? 
                                                        WHERE cc = ? AND numero = ? AND partida = ? AND insumo = ?";

                                using (var cmd = new OdbcCommand(consultaDet))
                                {
                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@cantidad", OdbcType.Numeric).Value = part.cantidad;
                                    parameters.Add("@precio", OdbcType.Numeric).Value = part.precio;
                                    parameters.Add("@importe", OdbcType.Numeric).Value = part.cantidad * part.precio;
                                    //parameters.Add("@cant_canc", OdbcType.Numeric).Value = Convert.ToDecimal(partidaAnterior.cant_canc.Value, CultureInfo.InvariantCulture) + cantidadCancelada;
                                    //parameters.Add("@imp_canc", OdbcType.Numeric).Value = Convert.ToDecimal(partidaAnterior.imp_canc.Value, CultureInfo.InvariantCulture) + importeCancelado;

                                    parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                    parameters.Add("@numero", OdbcType.Numeric).Value = compra.numero;
                                    parameters.Add("@partida", OdbcType.Numeric).Value = part.partida;
                                    parameters.Add("@insumo", OdbcType.Numeric).Value = part.insumo;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;

                                    count += cmd.ExecuteNonQuery();
                                }

                                var partidaRequisicionEK = consultaCheckProductivo(
                                            string.Format(@"SELECT 
                                                                * 
                                                            FROM so_requisicion_det 
                                                            WHERE 
                                                                cc = '{0}' AND 
                                                                numero = {1} AND 
                                                                partida = {2} AND 
                                                                insumo = {3}",
                                                                             compra.cc,
                                                                             (int)partidaAnterior.num_requisicion.Value,
                                                                             (int)partidaAnterior.part_requisicion.Value,
                                                                             (int)partidaAnterior.insumo.Value)
                                        );

                                if (partidaRequisicionEK != null)
                                {
                                    var partidaRequisicion = (List<dynamic>)partidaRequisicionEK.ToObject<List<dynamic>>();

                                    #region Validación para no comprar más de lo requerido
                                    decimal cantidadPartidaRequisicion = Convert.ToDecimal(partidaRequisicion[0].cantidad, CultureInfo.InvariantCulture);

                                    if (part.cantidad > cantidadPartidaRequisicion)
                                    {
                                        throw new Exception("No se puede comprar más de lo requerido. Partida: " + part.partida);
                                    }
                                    #endregion

                                    var numeroRequisicion = (int)partidaAnterior.num_requisicion.Value;

                                    var requisicionSIGOPLAN = _context.tblCom_Req.FirstOrDefault(x => x.estatusRegistro && x.cc == compra.cc && x.numero == numeroRequisicion);

                                    if (requisicionSIGOPLAN != null)
                                    {
                                        var numeroPartida = (int)partidaAnterior.part_requisicion.Value;
                                        var numeroInsumo = (int)partidaAnterior.insumo.Value;
                                        var partidaRequisicionSIGOPLAN = _context.tblCom_ReqDet.FirstOrDefault(x =>
                                            x.estatusRegistro &&
                                            x.idReq == requisicionSIGOPLAN.id &&
                                            x.partida == numeroPartida &&
                                            x.insumo == numeroInsumo);

                                        if (partidaRequisicionSIGOPLAN != null)
                                        {
                                            partidaRequisicionSIGOPLAN.cantOrdenada =
                                                Convert.ToDecimal(partidaRequisicion[0].cant_ordenada.Value, CultureInfo.InvariantCulture)
                                                //- cantidadCancelada
                                                ;

                                            _context.Entry(partidaRequisicionSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                            _context.SaveChanges();
                                        }
                                    }

                                    var consultaPartidaReq = @"
                                            UPDATE so_requisicion_det 
                                            SET 
                                                cant_ordenada = ? 
                                            WHERE cc = ? AND numero = ? AND partida = ? AND insumo = ?";

                                    using (var cmd = new OdbcCommand(consultaPartidaReq))
                                    {
                                        OdbcParameterCollection parameters = cmd.Parameters;

                                        parameters.Add("@cant_ordenada", OdbcType.Numeric).Value = part.cantidad; //Convert.ToDecimal(partidaRequisicion[0].cant_ordenada.Value, CultureInfo.InvariantCulture);

                                        parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                        parameters.Add("@numero", OdbcType.Numeric).Value = (int)partidaAnterior.num_requisicion.Value;
                                        parameters.Add("@partida", OdbcType.Numeric).Value = (int)partidaAnterior.part_requisicion.Value;
                                        parameters.Add("@insumo", OdbcType.Numeric).Value = (int)partidaAnterior.insumo.Value;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;

                                        count += cmd.ExecuteNonQuery();
                                    }
                                }

                                var partidaDescripcionAnteriorEK = consultaCheckProductivo(
                                    string.Format(@"SELECT 
                                                        * 
                                                    FROM so_orden_det_linea 
                                                    WHERE 
                                                        cc = '{0}' AND 
                                                        numero = {1} AND 
                                                        partida = {2}", compraAnterior[0].cc.Value, compraAnterior[0].numero.Value, partidaAnterior.partida.Value));

                                if (partidaDescripcionAnteriorEK != null)
                                {
                                    var partidaDescripcionAnterior = (List<dynamic>)partidaDescripcionAnteriorEK.ToObject<List<dynamic>>();

                                    if (partidaDescripcionAnterior[0].descripcion.Value as string != part.partidaDescripcion)
                                    {
                                        var consultaPartidaDescripcion = @"
                                            UPDATE so_orden_det_linea 
                                            SET 
                                                descripcion = ? 
                                            WHERE cc = ? AND numero = ? AND partida = ?";

                                        using (var cmd = new OdbcCommand(consultaPartidaDescripcion))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@descripcion", OdbcType.VarChar).Value = part.partidaDescripcion;

                                            parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = compraAnterior[0].numero.Value;
                                            parameters.Add("@partida", OdbcType.Numeric).Value = partidaAnterior.partida.Value;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }
                                    }
                                }
                                else
                                {
                                    if (part.partidaDescripcion != "" && part.partidaDescripcion != null)
                                    {
                                        var consultaInsertPartidaDescripcion = @"INSERT INTO so_orden_det_linea (cc, numero, partida, descripcion) VALUES (?,?,?,?)";

                                        using (var cmd = new OdbcCommand(consultaInsertPartidaDescripcion))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = compra.numero;
                                            parameters.Add("@partida", OdbcType.Numeric).Value = part.partida;
                                            parameters.Add("@descripcion", OdbcType.VarChar).Value = part.partidaDescripcion;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }
                                    }
                                }
                            }
                        }

                        //var ivaCancelado = subTotalCancelado * (Convert.ToDecimal(compraAnterior[0].porcent_iva.Value, CultureInfo.InvariantCulture) / 100);
                        //var totalCancelado = subTotalCancelado + ivaCancelado;

                        var compraSIGOPLAN = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.cc == compra.cc && x.numero == compra.numero);
                        var checkEntradasExistentes = consultaCheckProductivo(
                            string.Format(@"SELECT * FROM si_movimientos WHERE tipo_mov = 1 AND cc = '{0}' AND orden_ct = {1}", compra.cc, compra.numero)
                        );

                        #region Recalcular el subtotal y total de la compra
                        decimal compraSubtotal = 0;
                        decimal compraTotal = 0;
                        var subTotalEK = consultaCheckProductivo(
                            string.Format(@"SELECT SUM(importe) - SUM(imp_canc) AS subTotal FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", compra.cc, compra.numero)
                        );

                        if (subTotalEK != null)
                        {
                            var subTotal = ((List<dynamic>)subTotalEK.ToObject<List<dynamic>>())[0];

                            compraSubtotal = Convert.ToDecimal(subTotal.subTotal, CultureInfo.InvariantCulture);
                            compraTotal = compraSubtotal + compra.iva;
                        }
                        #endregion

                        if (compraSIGOPLAN != null)
                        {
                            compraSIGOPLAN.bienes_servicios = compra.bienes_servicios ?? "";

                            if (checkEntradasExistentes == null)
                            {
                                compraSIGOPLAN.idLibreAbordo = compra.libre_abordo;
                            }

                            compraSIGOPLAN.tipo_oc_req = compra.tipo_oc_req;
                            compraSIGOPLAN.moneda = compra.moneda.ToString();
                            compraSIGOPLAN.tipo_cambio = compra.tipo_cambio;
                            compraSIGOPLAN.sub_total = compraSubtotal; //compraSIGOPLAN.sub_total = compra.sub_total;
                            compraSIGOPLAN.porcent_iva = compra.porcent_iva;
                            compraSIGOPLAN.iva = compra.iva;
                            compraSIGOPLAN.total = compraTotal; //compraSIGOPLAN.total = compra.sub_total + compra.iva;
                            compraSIGOPLAN.tiempoEntregaDias = compra.tiempoEntregaDias;
                            compraSIGOPLAN.tiempoEntregaComentarios = compra.tiempoEntregaComentarios ?? "";
                            compraSIGOPLAN.anticipo = compra.anticipoBool;
                            compraSIGOPLAN.totalAnticipo = compra.totalAnticipo;
                            compraSIGOPLAN.st_impresa = ""; //Se quita el estatus de impresa para que se vuelva a generar una impresión con la leyenda de "ORIGINAL".

                            _context.Entry(compraSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                            _context.SaveChanges();
                        }

                        var consulta = @"
                                            UPDATE so_orden_compra 
                                            SET 
                                               bienes_servicios = ?, 
                                               embarquese = ?, 
                                               libre_abordo = ?, 
                                               proveedor = ?, 
                                               bit_autorecepcion = ?, 
                                               almacen_autorecepcion = ?, 
                                               empleado_autorecepcion = ?, 
                                               tipo_oc_req = ?, 
                                               moneda = ?, 
                                               tipo_cambio = ?, 
                                               sub_total = ?, 
                                               porcent_iva = ?, 
                                               iva = ?, 
                                               rentencion_despues_iva = ?, 
                                               total = ?, 
                                               st_impresa = ? 
                                            WHERE cc = ? AND numero = ?";

                        using (var cmd = new OdbcCommand(consulta))
                        {
                            OdbcParameterCollection parameters = cmd.Parameters;

                            parameters.Add("@bienes_servicios", OdbcType.Char).Value = compra.bienes_servicios != null ? compra.bienes_servicios : "";
                            parameters.Add("@embarquese", OdbcType.Char).Value = compra.embarquese != null ? compra.embarquese : "";
                            parameters.Add("@libre_abordo", OdbcType.Numeric).Value = 1;
                            parameters.Add("@proveedor", OdbcType.Numeric).Value = (compra.proveedor != null && compra.proveedor > 0) ? compra.proveedor : (int)compraAnterior[0].proveedor;
                            parameters.Add("@bit_autorecepcion", OdbcType.Char).Value = compra.bit_autorecepcion;
                            parameters.Add("@almacen_autorecepcion", OdbcType.Numeric).Value = compra.almacen_autorecepcion ?? (object)DBNull.Value;
                            parameters.Add("@empleado_autorecepcion", OdbcType.Numeric).Value = compra.empleado_autorecepcion ?? (object)DBNull.Value;
                            parameters.Add("@tipo_oc_req", OdbcType.Char).Value = compra.tipo_oc_req;
                            parameters.Add("@moneda", OdbcType.Char).Value = compra.moneda.ToString();
                            parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = compra.tipo_cambio;
                            parameters.Add("@sub_total", OdbcType.Numeric).Value = compra.sub_total;
                            parameters.Add("@porcent_iva", OdbcType.Numeric).Value = compra.porcent_iva;
                            parameters.Add("@iva", OdbcType.Numeric).Value = compra.iva;
                            parameters.Add("@rentencion_despues_iva", OdbcType.Numeric).Value = compra.rentencion_despues_iva;
                            parameters.Add("@total", OdbcType.Numeric).Value = compra.sub_total + compra.iva;
                            parameters.Add("@st_impresa", OdbcType.Char).Value = ""; //Se quita el estatus de impresa para que se vuelva a generar una impresión con la leyenda de "ORIGINAL".

                            //parameters.Add("@sub_tot_canc", OdbcType.Numeric).Value = Convert.ToDecimal(compraAnterior[0].sub_tot_canc.Value, CultureInfo.InvariantCulture) + subTotalCancelado;
                            //parameters.Add("@iva_canc", OdbcType.Numeric).Value = Convert.ToDecimal(compraAnterior[0].iva_canc.Value, CultureInfo.InvariantCulture) + ivaCancelado;
                            //parameters.Add("@total_canc", OdbcType.Numeric).Value = Convert.ToDecimal(compraAnterior[0].total_canc.Value, CultureInfo.InvariantCulture) + totalCancelado;

                            parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                            parameters.Add("@numero", OdbcType.Numeric).Value = compra.numero;

                            cmd.Connection = trans.Connection;
                            cmd.Transaction = trans;

                            count += cmd.ExecuteNonQuery();
                        }

                        var consultaElimRet = @"DELETE FROM so_ordenc_retenciones WHERE cc = ? AND numero = ?";

                        using (var cmd = new OdbcCommand(consultaElimRet))
                        {
                            OdbcParameterCollection parameters = cmd.Parameters;

                            parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                            parameters.Add("@numero", OdbcType.Numeric).Value = compra.numero;

                            cmd.Connection = trans.Connection;
                            cmd.Transaction = trans;

                            count += cmd.ExecuteNonQuery();
                        }

                        if (compra.lstRetenciones != null)
                        {
                            foreach (var ret in compra.lstRetenciones)
                            {
                                var consultaRet = @"INSERT INTO so_ordenc_retenciones 
                                            (cc, numero, id_cpto, orden, cantidad, porc_ret, importe, facturado, retenido, aplica, forma_pago, tm_descto, calc_iva, afecta_oc, afecta_fac, 
                                            facturado_ret, facturado_iva, facturado_total, retenido_ret, retenido_iva, retenido_total) 
                                            VALUES (?,?,?,?,?,?,?,?,?,?, 
                                                    ?,?,?,?,?,?,?,?,?,?, 
                                                    ?)";

                                using (var cmd = new OdbcCommand(consultaRet))
                                {
                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                    parameters.Add("@numero", OdbcType.Numeric).Value = compra.numero;
                                    parameters.Add("@id_cpto", OdbcType.Numeric).Value = ret.id_cpto;
                                    parameters.Add("@orden", OdbcType.Numeric).Value = ret.orden;
                                    parameters.Add("@cantidad", OdbcType.Numeric).Value = ret.cantidad;
                                    parameters.Add("@porc_ret", OdbcType.Numeric).Value = ret.porc_ret;
                                    parameters.Add("@importe", OdbcType.Numeric).Value = ret.importe;
                                    parameters.Add("@facturado", OdbcType.Numeric).Value = ret.facturado;
                                    parameters.Add("@retenido", OdbcType.Numeric).Value = ret.retenido;
                                    parameters.Add("@aplica", OdbcType.Numeric).Value = ret.aplica;
                                    parameters.Add("@forma_pago", OdbcType.Numeric).Value = ret.forma_pago;
                                    parameters.Add("@tm_descto", OdbcType.Numeric).Value = DBNull.Value;
                                    parameters.Add("@calc_iva", OdbcType.Numeric).Value = ret.calc_iva;
                                    parameters.Add("@afecta_oc", OdbcType.Char).Value = ret.bit_afecta_oc != null ? ret.bit_afecta_oc : "N";
                                    parameters.Add("@afecta_fac", OdbcType.Char).Value = ret.afecta_fac != null ? ret.afecta_fac : "N";
                                    parameters.Add("@facturado_ret", OdbcType.Numeric).Value = ret.facturado_ret;
                                    parameters.Add("@facturado_iva", OdbcType.Numeric).Value = ret.facturado_iva;
                                    parameters.Add("@facturado_total", OdbcType.Numeric).Value = ret.facturado_total;
                                    parameters.Add("@retenido_ret", OdbcType.Numeric).Value = ret.retenido_ret;
                                    parameters.Add("@retenido_iva", OdbcType.Numeric).Value = ret.retenido_iva;
                                    parameters.Add("@retenido_total", OdbcType.Numeric).Value = ret.retenido_total;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;

                                    count += cmd.ExecuteNonQuery();
                                }
                            }
                        }

                        if (count > 0)
                        {
                            trans.Commit();
                        }

                        return compra;
                    }
                }
                else
                {
                    return new OrdenCompraDTO();
                }
            }
            else
            {
                return new OrdenCompraDTO();
            }
        }

        private string Get_CCRH(string cc)
        {
            string ccRH = string.Empty;
            try
            {
                #region VALIDACIONES
                if (string.IsNullOrEmpty(cc)) { throw new Exception("Ocurrió un error al obtener el CC de formato de Perú."); }
                #endregion

                #region SE OBTIENE ccRH DE PERU
                tblP_CC objCC = _context.tblP_CC.Where(w => w.cc == cc && w.estatus).FirstOrDefault();
                if (objCC == null)
                    throw new Exception("Ocurrió un error al obtener el CC de formato de Perú.");

                ccRH = objCC.ccRH;
                #endregion
            }
            catch (Exception e)
            {
                LogError(0, 0, _NOMBRE_CONTROLADOR, "Get_CCRH", e, AccionEnum.CONSULTA, 0, cc);
                return ccRH;
            }
            return ccRH;
        }

        public List<OrdenCompraDTO> getListaCompras(bool isAuth, string cc, bool propias)
        {
            List<OrdenCompraDTO> lstCompras = new List<OrdenCompraDTO>();

            try
            {
                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {
                    case EmpresaEnum.Peru:
                        {
                            #region PERU
                            using (var _starSoft = new MainContextPeruStarSoft003BDCOMUN())
                            {
                                #region Información Inicial
                                List<MAEPROV> lstProveedores = _starSoft.MAEPROV.ToList();
                                List<tblP_CC> lstCC = _context.tblP_CC.Where(w => w.estatus).ToList();
                                List<tblCom_OrdenCompra> listaCompras = _context.tblCom_OrdenCompra.Where(w => w.estatusRegistro && (w.ST_OC == null || w.ST_OC != "A")).ToList();
                                List<int> FK_OrdenesCompras = listaCompras.Select(s => s.id).ToList();
                                List<tblCom_OrdenCompraDet> listaComprasDet = _context.tblCom_OrdenCompraDet.Where(w => FK_OrdenesCompras.Contains(w.idOrdenCompra) && w.estatusRegistro).ToList();
                                #endregion

                                foreach (var item in listaCompras)
                                {
                                    tblP_CC objCC = lstCC.Where(w => w.cc == item.cc).FirstOrDefault();

                                    if (objCC == null)
                                    {
                                        throw new Exception("Ocurrió un error al obtener el CC de la compra.");
                                    }

                                    var numeroRequisicion = listaComprasDet.Where(w => w.idOrdenCompra == item.id).Select(s => s.num_requisicion).FirstOrDefault();
                                    var listaRegistrosCuadros = _context.tblCom_CuadroComparativo.Where(x => x.registroActivo && x.cc == item.cc && x.numero == numeroRequisicion && x.PERU_tipoCuadro == item.PERU_tipoCompra).ToList();

                                    lstCompras.Add(new OrdenCompraDTO()
                                    {
                                        cc = item.cc,
                                        ccDesc = string.Format("[{0}] {1}", objCC.cc, objCC.descripcion),
                                        numero = item.numero,
                                        numeroRequisicion = numeroRequisicion,
                                        PERU_proveedor = item.PERU_proveedor,
                                        total = item.total,
                                        moneda = Convert.ToInt32(item.moneda),
                                        fecha = item.fecha,
                                        comentarios = item.comentarios,
                                        tipo_cambio = item.tipo_cambio,
                                        estatusRegistro = item.estatusRegistro,
                                        vobo = item.vobo,
                                        vobo2 = item.vobo2,
                                        PERU_tipoCompra = item.PERU_tipoCompra,
                                        tieneCuadro = listaRegistrosCuadros.Count() > 0,
                                        countCuadroComparativo = listaRegistrosCuadros.Count()
                                    });
                                }

                                var relUser = ufs.getUsuarioService().getUserEk(vSesiones.sesionUsuarioDTO.id);

                                foreach (var item in lstCompras)
                                {
                                    item.empresa = vSesiones.sesionEmpresaActual;

                                    #region NOMBRE PROVEEDOR
                                    if (!string.IsNullOrEmpty(item.PERU_proveedor))
                                    {
                                        MAEPROV objProveedor = lstProveedores.Where(w => w.PRVCCODIGO == item.PERU_proveedor).FirstOrDefault();
                                        if (objProveedor != null)
                                            item.proveedorNom = !string.IsNullOrEmpty(objProveedor.PRVCNOMBRE) ? objProveedor.PRVCNOMBRE : string.Empty;
                                    }
                                    #endregion

                                    #region SE AGREGA FORMATO DE PERU EN NUM_OC Y NUM_REQ
                                    string numOC = item.numero.ToString().PadLeft(13, '0');
                                    item.strNumOC = numOC.ToString();

                                    string numReq = item.numeroRequisicion.ToString().PadLeft(10, '0');
                                    item.strNumReq = numReq.ToString();
                                    #endregion

                                    #region VOBO'S
                                    bool terminoProcesoVoBos = false;
                                    List<VoboDTO> lstVoBos = new List<VoboDTO>();
                                    OrdenCompraDTO objCompra = lstCompras.Where(w => w.cc == item.cc && w.numero == item.numero && w.estatusRegistro && w.PERU_tipoCompra == item.PERU_tipoCompra).FirstOrDefault();
                                    if (objCompra != null)
                                        lstVoBos = getVobos(objCompra);

                                    if (lstVoBos != null)
                                    {
                                        // SE VERIFICA SI HAY VOBOS PENDIENTES
                                        int cantVobosRealizados = 0;
                                        if (objCompra.vobo > 0)
                                            cantVobosRealizados++;

                                        if (objCompra.vobo2 > 0)
                                            cantVobosRealizados++;

                                        if (lstVoBos.Count() > 0)
                                        {
                                            // SE VERIFICA LA CANT DE VOBOS REQUERIDOS
                                            //int cantVobosRequeridos = lstVoBos.Count();
                                            int cantVobosRequeridos = lstVoBos[0].numVobos;

                                            if (cantVobosRequeridos > cantVobosRealizados)
                                            {
                                                item.voboPendiente = true;

                                                if (objCompra.vobo == relUser.empleado || objCompra.vobo2 == relUser.empleado)
                                                {
                                                    item.flagPuedeDarVobo = false;
                                                }
                                                else
                                                {
                                                    item.flagPuedeDarVobo = lstVoBos.FirstOrDefault(x => x.usu_numero == relUser.empleado) != null;
                                                }
                                            }
                                            else
                                                terminoProcesoVoBos = true;
                                        }
                                        else
                                        {
                                            terminoProcesoVoBos = true;
                                        }
                                    }
                                    #endregion

                                    #region AUTORIZANTES
                                    List<dynamic> lstAutorizantes = new List<dynamic>();
                                    if (objCompra != null)
                                        lstAutorizantes = getAutorizaciones(objCompra);

                                    if (terminoProcesoVoBos)
                                    {
                                        foreach (var objAut in lstAutorizantes)
                                        {
                                            int FK_UsuarioEK = objAut.usu_numero;
                                            tblP_Usuario_Enkontrol objUsuario = _context.tblP_Usuario_Enkontrol.Where(w => w.empleado == FK_UsuarioEK).FirstOrDefault();
                                            if (objUsuario != null)
                                            {
                                                if (objUsuario.idUsuario == (int)vSesiones.sesionUsuarioDTO.id)
                                                {
                                                    item.flagPuedeAutorizar = true;
                                                    item.voboPendiente = false;
                                                }
                                            }
                                        }
                                    }
                                    #endregion
                                }

                                return lstCompras;
                            }
                            #endregion
                        }
                    case EmpresaEnum.Colombia:
                        {
                            #region COLOMBIA
                            #region Información Inicial
                            var usuario = vSesiones.sesionUsuarioDTO;
                            var relUser = ufs.getUsuarioService().getUserEk(usuario.id);
                            //var usuarioEnkontrol = ((List<UsuarioEnkontrolDTO>)consultaCheckProductivo(
                            //    string.Format(@"SELECT * FROM empleados WHERE empleado = {0}", relUser.empleado)
                            //).ToObject<List<UsuarioEnkontrolDTO>>())[0];
                            string strQuery = string.Format("SELECT * FROM empleados WHERE empleado = {0}", relUser.empleado);
                            var usuarioEnkontrol = _context.Select<dynamic>(new DapperDTO
                            {
                                baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                                consulta = strQuery
                            }).ToList();

                            var listCompradorAdmin = _context.tblCom_Comprador_Admin.Select(x => x.empleado).ToList();
                            var puedeCancelar = relUser.empleado == 1 || listCompradorAdmin.Contains(relUser.empleado);

                            DateTime fechaFiltroAnioActual = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1).AddMonths(-3);
                            #endregion

                            List<OrdenCompraDTO> listaComprasGeneral = new List<OrdenCompraDTO>();

                            if (relUser.empleado != 1)
                            {
                                #region Compras No Autorizadas por Centro de Costo, monto y Tipo-Grupo
                                dynamic comprasMontoEK = null;

                                strQuery = string.Format(@"
                                    SELECT 
                                        tblPrincipal.*,
                                        (SELECT COUNT(*) FROM so_cuadro_comparativo cua WHERE cua.cc = tblPrincipal.cc AND cua.numero = tblPrincipal.numeroRequisicion) AS countCuadroComparativo
                                    FROM (
                                        SELECT 
                                            oc.*, 
                                            pr.nombre AS proveedorNom, 
                                            (SELECT TOP 1 det.num_requisicion FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS numeroRequisicion, 
                                            c.descripcion AS ccDesc 
                                        FROM so_orden_compra oc 
                                            LEFT JOIN sp_proveedores pr ON pr.numpro = oc.proveedor 
                                            INNER JOIN cc c ON c.cc = oc.cc 
                                        WHERE 
                                            " + (isAuth ? "oc.ST_OC = 'A'" : "(oc.ST_OC IS NULL OR oc.ST_OC != 'A')") + @" AND fecha >= '" + fechaFiltroAnioActual.ToString("yyyy-MM-dd") + @"' {0} 
                                    ) AS tblPrincipal", cc != "" ? "AND oc.cc = '" + cc + "'" : "");
                                comprasMontoEK = consultaCheckProductivo(strQuery);

                                if (comprasMontoEK != null)
                                {
                                    var comprasMonto = ((List<OrdenCompraDTO>)comprasMontoEK.ToObject<List<OrdenCompraDTO>>()).ToList().Where(x => x.fecha >= fechaFiltroAnioActual).ToList();

                                    listaComprasGeneral.AddRange(comprasMonto);

                                    List<PermisoMontoDTO> facultamientosEmpleadoEK = new List<PermisoMontoDTO>();

                                    #region Facultamientos Colombia
                                    List<string> ccs = comprasMonto.Select(x => x.cc).ToList();

                                    strQuery = string.Format(@"
                                                    SELECT DISTINCT 
                                                        tblPrincipal.cc, 
                                                        tblPrincipal.num_autorizacioines AS tblPrincipalNumAutorizaciones, 
                                                        tblPrincipal.monto_minimo_autoriza, 
                                                        tblPrincipal.monto_maximo_autoriza, 
                                                        tblPrincipal.consecutivo, 
                                                        
                                                        tblVobo.empleado AS empleadoVobo, 
                                                        tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                        
                                                        tblGrupos.tipo AS tipoGrupo, 
                                                        tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                        
                                                        tblAut.empleado AS empleadoAutoriza, 
                                                        tblAut.num_autorizaciones AS tblAutNumAutorizaciones, 
                                                        tblAut.orden AS ordenAutorizacion 
                                                    FROM so_cc_autorizacion tblPrincipal 
                                                        LEFT JOIN so_empleados_cc tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                                        LEFT JOIN so_rel_tipos_vobo tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                                        LEFT JOIN so_empleados_autoriza_cc tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                                    WHERE 
                                                        (tblVobo.empleado = {0} OR tblAut.empleado = {0}) AND tblPrincipal.cc in ('{1}')
                                                    ORDER BY tblPrincipal.consecutivo", relUser.empleado, string.Join("','", ccs));
                                    facultamientosEmpleadoEK = _context.Select<PermisoMontoDTO>(new DapperDTO
                                    {
                                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                                        consulta = strQuery
                                    }).ToList();
                                    #endregion

                                    if (facultamientosEmpleadoEK != null)
                                    {
                                        List<PermisoMontoDTO> facultamientosEmpleado = facultamientosEmpleadoEK.ToList();

                                        if (facultamientosEmpleado.Count() > 0)
                                        {
                                            List<tipoGrupoDTO> listTipoGrupoGeneral = new List<tipoGrupoDTO>();

                                            List<string> datos1 = comprasMonto.Select(x => "(cc = '" + x.cc + "' AND numero=" + x.numero + ")").ToList();
                                            string datos2 = string.Join(" OR ", datos1);
                                            //strQuery = string.Format(@"SELECT cc, numero, SUBSTRING(CONVERT(NVARCHAR(MAX), insumo), 0, 4) AS tipoGrupo FROM tblCom_OrdenCompraDet WHERE cc = 'relleno' OR " + datos2);

                                            //listTipoGrupoGeneral = (List<tipoGrupoDTO>)consultaCheckProductivo(strQuery).ToObject<List<tipoGrupoDTO>>();

                                            listTipoGrupoGeneral = (List<tipoGrupoDTO>)consultaCheckProductivo(
                                                String.Format(
                                                    @"SELECT 
                                                        cc, 
                                                        numero, 
                                                        LEFT(CAST(insumo as varchar), 3) AS tipoGrupo, 
                                                        (select CASE WHEN MAX(B.num_requisicion) = 0 THEN 1 ELSE 0 END FROM dba.so_orden_compra_det B WHERE A.cc = B.cc AND A.numero = B.numero) AS esSISUN 
                                                    FROM dba.so_orden_compra_det A  WHERE cc = 'relleno' OR " + datos2)).ToObject<List<tipoGrupoDTO>>();

                                            //listTipoGrupoGeneral = _context.Select<tipoGrupoDTO>(new DapperDTO
                                            //{
                                            //    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                                            //    consulta = strQuery
                                            //}).ToList();

                                            foreach (var com in comprasMonto)
                                            {
                                                var total = Convert.ToDecimal((com.moneda == 1 ? com.total : (com.total * com.tipo_cambio)), CultureInfo.InvariantCulture);
                                                var _listaTipoGrupo = listTipoGrupoGeneral.Where(x => x.cc == com.cc && x.numero == com.numero).ToList();
                                                var listaTipoGrupo = _listaTipoGrupo.Select(x => x.tipoGrupo).ToList();
                                                bool esSISUN = _listaTipoGrupo.Any(x => x.esSISUN);

                                                var facultamientosCompraEmpleado = facultamientosEmpleado.Where(x =>
                                                    x.cc.ToUpper().Equals(com.cc) &&
                                                    x.monto_minimo_autoriza <= total &&
                                                    x.monto_maximo_autoriza >= total &&
                                                    (x.tipoGrupo != null ? listaTipoGrupo.Contains((int)x.tipoGrupo) : false)
                                                ).ToList();

                                                if (facultamientosCompraEmpleado.Count > 0)
                                                {
                                                    var flagCompraSISUN = _contextEnkontrol.Select<OrdenCompraDetDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                                    {
                                                        consulta = string.Format(@"SELECT TOP 1 * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", com.cc, com.numero)
                                                    }).FirstOrDefault().num_requisicion == 0;

                                                    #region Flag Puede Dar VoBo / Flag Puede Autorizar
                                                    bool flagPuedeDarVobo = false;

                                                    if (flagCompraSISUN)
                                                    {
                                                        flagPuedeDarVobo = facultamientosCompraEmpleado.FirstOrDefault(x => x.empleadoVobo == relUser.empleado) != null;
                                                    }
                                                    else
                                                    {
                                                        if ((int)com.vobo == relUser.empleado || (int)com.vobo2 == relUser.empleado || (int)com.vobo3 == relUser.empleado)
                                                        {
                                                            flagPuedeDarVobo = false;
                                                        }
                                                        else
                                                        {
                                                            flagPuedeDarVobo = facultamientosCompraEmpleado.FirstOrDefault(x => x.empleadoVobo == relUser.empleado) != null;
                                                        }
                                                    }

                                                    bool flagPuedeAutorizar = facultamientosCompraEmpleado.FirstOrDefault(x => x.empleadoAutoriza == relUser.empleado) != null;
                                                    #endregion

                                                    if (!lstCompras.Any(x => x.cc == (string)com.cc && x.numero == (int)com.numero))
                                                    {
                                                        #region Flag VoBo Pendiente
                                                        bool flagVoboPendiente = false;

                                                        if (flagCompraSISUN)
                                                        {
                                                            flagVoboPendiente = com.vobo_aut != "S" || com.vobo_aut == null;
                                                        }
                                                        else
                                                        {
                                                            var vobosRequeridos = facultamientosCompraEmpleado[0].tblVoboNumAutorizaciones ?? 0;
                                                            switch (vobosRequeridos)
                                                            {
                                                                case 1: { flagVoboPendiente = (int)com.vobo == 0 ? true : false; break; }
                                                                case 2: { flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false; break; }
                                                                case 3: { flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 || (int)com.vobo3 == 0 ? true : false; break; }
                                                            }
                                                        }
                                                        #endregion

                                                        decimal rentencion_despues_iva = 0;
                                                        decimal totalFinal = 0;

                                                        if ((EmpresaEnum)vSesiones.sesionEmpresaActual == EmpresaEnum.Colombia && com.numeroRequisicion == 0)
                                                        {
                                                            var totalRetenciones = _contextEnkontrol.Select<OrdenCompraDetDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                                            {
                                                                consulta = string.Format(@"SELECT SUM(importe) AS importe FROM so_ordenc_retenciones WHERE cc = '{0}' AND numero = {1}", com.cc, com.numero)
                                                            }).FirstOrDefault();

                                                            if (totalRetenciones != null)
                                                            {
                                                                rentencion_despues_iva = totalRetenciones.importe;
                                                            }

                                                            totalFinal = com.sub_total + com.iva - rentencion_despues_iva;
                                                        }
                                                        else
                                                        {
                                                            totalFinal = com.total;
                                                        }

                                                        lstCompras.Add(new OrdenCompraDTO
                                                        {
                                                            cc = com.cc,
                                                            ccDesc = com.ccDesc,
                                                            numero = com.numero,
                                                            proveedor = com.proveedor,
                                                            proveedorNom = com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                                            sub_total = com.sub_total,
                                                            iva = com.iva,
                                                            total = totalFinal,
                                                            rentencion_despues_iva = rentencion_despues_iva,
                                                            tipo_cambio = com.tipo_cambio,
                                                            moneda = com.moneda,
                                                            fecha = com.fecha != null ? com.fecha : default(DateTime),
                                                            flagPuedeAutorizar = flagPuedeAutorizar,
                                                            vobo = com.vobo,
                                                            vobo2 = com.vobo2,
                                                            vobo3 = com.vobo3,
                                                            voboPendiente = flagVoboPendiente,
                                                            flagPuedeDarVobo = flagPuedeDarVobo,
                                                            flagCancelar = puedeCancelar ? (com.ST_OC == "A" && com.st_impresa == "I") ? true : false : false,
                                                            numeroRequisicion = com.numeroRequisicion,
                                                            tieneCuadro = com.countCuadroComparativo > 0 ? true : false,
                                                            countCuadroComparativo = com.countCuadroComparativo,
                                                            comentarios = com.comentarios,
                                                            flagCompraInterna = false
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    //OBTENER CALIFICACIONES CUADRO COMPARATIVO SI LAS HAY
                                    //ProvNoOptimos(comprasMonto, lstCompras, TipoCompraNoAutorizadaEnum.PorCC_Monto_Grupo);
                                }
                                #endregion

                                #region COMENTADO ACTIVO FIJO
                                //                                #region Compras No Autorizadas por Activo Fijo
                                //                                //var empleadoVoboActivoFijo = consultaCheckProductivo(string.Format(@"SELECT * FROM so_cc_vobo WHERE empleado = {0}", relUser.empleado));
                                //                                string strQuery2 = string.Format(@"SELECT * FROM so_cc_vobo WHERE empleado = {0}", relUser.empleado);
                                //                                var empleadoVoboActivoFijo = _context.Select<dynamic>(new DapperDTO
                                //                                {
                                //                                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                                //                                    consulta = strQuery2
                                //                                }).ToList();
                                //                                var empleadoAutorizaActivoFijo = true;

                                //                                if (empleadoVoboActivoFijo != null || empleadoAutorizaActivoFijo)
                                //                                {
                                //                                    dynamic comprasActivoFijoEK = null;

                                //                                    switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                                //                                    {
                                //                                        case EmpresaEnum.Colombia:
                                //                                            {
                                //                                                #region Compras Colombia
                                //                                                comprasActivoFijoEK = consultaCheckProductivo(string.Format(@"
                                //                                                    SELECT 
                                //                                                        tblPrincipal.*, 
                                //                                                        (SELECT COUNT(*) FROM so_cuadro_comparativo cua WHERE cua.cc = tblPrincipal.cc AND cua.numero = tblPrincipal.numeroRequisicion) AS countCuadroComparativo
                                //                                                    FROM (
                                //                                                        SELECT 
                                //                                                            oc.*, 
                                //                                                            pr.nombre AS proveedorNom, 
                                //                                                            (SELECT TOP 1 det.num_requisicion FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS numeroRequisicion, 
                                //                                                            c.descripcion AS ccDesc 
                                //                                                        FROM so_orden_compra oc 
                                //                                                            LEFT JOIN sp_proveedores pr ON pr.numpro = oc.proveedor 
                                //                                                            INNER JOIN cc c ON c.cc = oc.cc 
                                //                                                        WHERE 
                                //                                                            " + (isAuth ? "oc.ST_OC = 'A'" : "(oc.ST_OC IS NULL OR oc.ST_OC != 'A')") + @" {0} 
                                //                                                    ) AS tblPrincipal", cc != "" ? "AND oc.cc = '" + cc + "'" : ""));
                                //                                                #endregion
                                //                                                break;
                                //                                            }
                                //                                    }

                                //                                    if (comprasActivoFijoEK != null)
                                //                                    {
                                //                                        var comprasActivoFijo = ((List<OrdenCompraDTO>)comprasActivoFijoEK.ToObject<List<OrdenCompraDTO>>()).ToList().Where(x => x.fecha >= fechaFiltroAnioActual).ToList();

                                //                                        listaComprasGeneral.AddRange(comprasActivoFijo);

                                //                                        var listaEmpleadoVoboActivoFijo = new List<dynamic>();

                                //                                        if (empleadoVoboActivoFijo != null)
                                //                                        {
                                //                                            //listaEmpleadoVoboActivoFijo = (List<dynamic>)empleadoVoboActivoFijo.ToObject<List<dynamic>>();
                                //                                            listaEmpleadoVoboActivoFijo = empleadoVoboActivoFijo.ToList();
                                //                                        }

                                //                                        foreach (var com in comprasActivoFijo)
                                //                                        {
                                //                                            #region Flag Puede Dar VoBo / Flag Puede Autorizar
                                //                                            bool flagPuedeDarVobo = false;

                                //                                            if ((int)com.vobo == relUser.empleado || (int)com.vobo2 == relUser.empleado || (int)com.vobo3 == relUser.empleado)
                                //                                            {
                                //                                                flagPuedeDarVobo = false;
                                //                                            }
                                //                                            else
                                //                                            {
                                //                                                if (listaEmpleadoVoboActivoFijo.Count() > 0)
                                //                                                {
                                //                                                    flagPuedeDarVobo = listaEmpleadoVoboActivoFijo.FirstOrDefault(x => ((string)x.cc).ToUpper().Equals((string)com.cc)) != null;
                                //                                                }
                                //                                            }

                                //                                            bool flagPuedeAutorizar = empleadoAutorizaActivoFijo;
                                //                                            #endregion

                                //                                            if (!lstCompras.Any(x => x.cc.ToUpper().Equals((string)com.cc) && x.numero == (int)com.numero))
                                //                                            {
                                //                                                bool flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false; //Siempre son dos VoBos cuando la compra es Activo Fijo

                                //                                                if (listaEmpleadoVoboActivoFijo.Count() > 0)
                                //                                                {
                                //                                                    if (listaEmpleadoVoboActivoFijo.Select(x => (string)x.cc).Contains(com.cc) || flagPuedeAutorizar)
                                //                                                    {
                                //                                                        lstCompras.Add(new OrdenCompraDTO
                                //                                                        {
                                //                                                            cc = com.cc,
                                //                                                            ccDesc = com.ccDesc,
                                //                                                            numero = com.numero != null ? com.numero : 0,
                                //                                                            proveedor = com.proveedor != null ? com.proveedor : 0,
                                //                                                            proveedorNom = com.proveedor != null && com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                //                                                            total = com.total != null ? com.total : 0,
                                //                                                            tipo_cambio = com.tipo_cambio != null ? com.tipo_cambio : 0,
                                //                                                            moneda = com.moneda != null ? com.moneda : 1,
                                //                                                            fecha = com.fecha != null ? com.fecha : default(DateTime),
                                //                                                            flagPuedeAutorizar = flagPuedeAutorizar,
                                //                                                            vobo = com.vobo != null ? com.vobo : 0,
                                //                                                            vobo2 = com.vobo2 != null ? com.vobo2 : 0,
                                //                                                            vobo3 = com.vobo3 != null ? com.vobo3 : 0,
                                //                                                            voboPendiente = flagVoboPendiente,
                                //                                                            flagPuedeDarVobo = flagPuedeDarVobo,
                                //                                                            flagCancelar = puedeCancelar ? (com.ST_OC == "A" && com.st_impresa == "I") ? true : false : false,
                                //                                                            numeroRequisicion = com.numeroRequisicion != null ? (int)com.numeroRequisicion : 0,
                                //                                                            tieneCuadro = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo > 0 ? true : false : false,
                                //                                                            countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                //                                                            flagActivoFijo = false,
                                //                                                            comentarios = com.comentarios
                                //                                                        });
                                //                                                    }
                                //                                                }
                                //                                                else
                                //                                                {
                                //                                                    lstCompras.Add(new OrdenCompraDTO
                                //                                                    {
                                //                                                        cc = com.cc,
                                //                                                        ccDesc = com.ccDesc,
                                //                                                        numero = com.numero != null ? com.numero : 0,
                                //                                                        proveedor = com.proveedor != null ? com.proveedor : 0,
                                //                                                        proveedorNom = com.proveedor != null && com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                //                                                        total = com.total != null ? com.total : 0,
                                //                                                        tipo_cambio = com.tipo_cambio != null ? com.tipo_cambio : 0,
                                //                                                        moneda = com.moneda != null ? com.moneda : 1,
                                //                                                        fecha = com.fecha != null ? com.fecha : default(DateTime),
                                //                                                        flagPuedeAutorizar = flagPuedeAutorizar,
                                //                                                        vobo = com.vobo != null ? com.vobo : 0,
                                //                                                        vobo2 = com.vobo2 != null ? com.vobo2 : 0,
                                //                                                        vobo3 = com.vobo3 != null ? com.vobo3 : 0,
                                //                                                        voboPendiente = flagVoboPendiente,
                                //                                                        flagPuedeDarVobo = flagPuedeDarVobo,
                                //                                                        flagCancelar = puedeCancelar ? (com.ST_OC == "A" && com.st_impresa == "I") ? true : false : false,
                                //                                                        numeroRequisicion = com.numeroRequisicion != null ? (int)com.numeroRequisicion : 0,
                                //                                                        tieneCuadro = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo > 0 ? true : false : false,
                                //                                                        countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                //                                                        flagActivoFijo = false,
                                //                                                        comentarios = com.comentarios
                                //                                                    });
                                //                                                }
                                //                                            }
                                //                                        }

                                //                                        //OBTENER CALIFICACIONES CUADRO COMPARATIVO SI LAS HAY
                                //                                        //ProvNoOptimos(comprasActivoFijo, lstCompras, TipoCompraNoAutorizadaEnum.ActivoFijo);
                                //                                    }
                                //                                }
                                //                                #endregion
                                #endregion

                                #region Compras Traspaso de Almacén
                                if (relUser.empleado == 59 || relUser.empleado == 1)
                                {
                                    var comprasTraspasoAlmacen = _contextEnkontrol.Select<OrdenCompraDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                    {
                                        consulta = string.Format(@"
                                            SELECT
                                                oc.cc, oc.numero, oc.proveedor, oc.total, oc.tipo_cambio, oc.moneda, oc.fecha, oc.vobo, oc.vobo2, oc.vobo3, oc.ST_OC, oc.st_impresa, oc.comentarios,
                                                pr.nombre AS proveedorNom,
                                                (SELECT TOP 1 det.num_requisicion FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS numeroRequisicion,
                                                c.descripcion AS ccDesc,
                                                (SELECT det.area FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero AND det.partida = 1) AS area,
                                                (SELECT det.cuenta FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero AND det.partida = 1) AS cuenta,
                                                (SELECT COUNT(*) FROM so_cuadro_comparativo cua WHERE cua.cc = oc.cc AND cua.numero = (SELECT det.num_requisicion FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero AND det.partida = 1)) AS countCuadroComparativo
                                            FROM so_orden_compra oc
                                                LEFT JOIN sp_proveedores pr ON pr.numpro = oc.proveedor
                                                INNER JOIN cc c ON c.cc = oc.cc
                                            WHERE c.st_ppto != 'T' AND " +
                                        (isAuth ? "oc.ST_OC = 'A'" : "(oc.ST_OC IS NULL OR oc.ST_OC != 'A')") +
                                        (@" AND fecha >= '" + fechaFiltroAnioActual.ToString("yyyy-MM-dd")) + @"' " +
                                        (cc != "" ? "AND oc.cc = '" + cc + "'" : ""))
                                    });

                                    foreach (var compra in comprasTraspasoAlmacen)
                                    {
                                        if (compra.proveedor == 5412) //Verificar que la compra tenga proveedor de Construplan
                                        {
                                            if (compra.area == 1 && compra.cuenta == 9) //Verificar que la compra tenga el área-cuenta "1-9" en la primer partida
                                            {
                                                lstCompras.Add(new OrdenCompraDTO
                                                {
                                                    cc = compra.cc,
                                                    ccDesc = compra.ccDesc,
                                                    numero = compra.numero,
                                                    proveedor = compra.proveedor,
                                                    proveedorNom = compra.proveedor + " - " + (compra.proveedorNom ?? ""),
                                                    total = compra.total,
                                                    tipo_cambio = compra.tipo_cambio,
                                                    moneda = compra.moneda,
                                                    fecha = compra.fecha,
                                                    vobo = compra.vobo,
                                                    vobo2 = compra.vobo2,
                                                    vobo3 = compra.vobo3,
                                                    flagPuedeDarVobo = false,
                                                    flagCancelar = puedeCancelar ? (compra.ST_OC == "A" && compra.st_impresa == "I") ? true : false : false,
                                                    numeroRequisicion = compra.numeroRequisicion,
                                                    tieneCuadro = compra.countCuadroComparativo > 0 ? true : false,
                                                    countCuadroComparativo = compra.countCuadroComparativo,
                                                    comentarios = compra.comentarios ?? "",
                                                    flagCompraInterna = false,

                                                    voboProveedorNoOptimo = false,
                                                    voboPendiente = false,
                                                    flagPuedeAutorizar = true,
                                                    puedeDarVoboProvNoOptimo = false,
                                                    cuadroGeneradoConCalificacion = false,
                                                    flagCompraTraspasoAlmacen = true
                                                });
                                            }
                                        }
                                    }
                                }
                                #endregion
                            }
                            else
                            {
                                #region Todas las Compras No Autorizadas (Administrador)
                                dynamic comprasEK = null;

                                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                                {
                                    case EmpresaEnum.Colombia:
                                        {
                                            #region Compras Colombia
                                            comprasEK = consultaCheckProductivo(string.Format(@"
                                                SELECT 
                                                    tblPrincipal.*, 
                                                    (SELECT COUNT(*) FROM so_cuadro_comparativo cua WHERE cua.cc = tblPrincipal.cc AND cua.numero = tblPrincipal.numeroRequisicion) AS countCuadroComparativo
                                                FROM (
                                                    SELECT 
                                                        oc.*, 
                                                        pr.nombre AS proveedorNom, 
                                                        (SELECT TOP 1 det.num_requisicion FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS numeroRequisicion, 
                                                        c.descripcion AS ccDesc 
                                                    FROM so_orden_compra oc 
                                                        LEFT JOIN sp_proveedores pr ON pr.numpro = oc.proveedor 
                                                        INNER JOIN cc c ON c.cc = oc.cc 
                                                    WHERE " + (isAuth ? "oc.ST_OC = 'A'" : "(oc.ST_OC IS NULL OR oc.ST_OC != 'A')") + @" {0} 
                                                ) AS tblPrincipal", cc != "" ? "AND oc.cc = '" + cc + "'" : ""));
                                            #endregion
                                            break;
                                        }
                                }

                                if (comprasEK != null)
                                {
                                    var compras = ((List<OrdenCompraDTO>)comprasEK.ToObject<List<OrdenCompraDTO>>()).ToList().Where(x => x.fecha >= fechaFiltroAnioActual).ToList();

                                    foreach (var com in compras)
                                    {
                                        #region Flag VoBo Pendiente / Flag Puede Dar VoBo
                                        bool flagVoBoPendiente = false;
                                        bool flagPuedeDarVobo;

                                        var flagCompraSISUN = _contextEnkontrol.Select<OrdenCompraDetDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                        {
                                            consulta = string.Format(@"SELECT TOP 1 * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", com.cc, com.numero)
                                        }).FirstOrDefault().num_requisicion == 0;

                                        if (flagCompraSISUN)
                                        {
                                            flagPuedeDarVobo = true;

                                            flagVoBoPendiente = com.vobo_aut != "S" || com.vobo_aut == null;
                                        }
                                        else
                                        {
                                            if (com.autoriza_activos == 1)
                                                flagVoBoPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false; //Siempre son dos VoBos cuando la compra es Activo Fijo

                                            if (com.tmc == 1)
                                                flagVoBoPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false; //Siempre son dos VoBos cuando la compra es TMC

                                            if ((int)com.vobo == relUser.empleado || (int)com.vobo2 == relUser.empleado || (int)com.vobo3 == relUser.empleado)
                                                flagPuedeDarVobo = false;
                                            else
                                                flagPuedeDarVobo = true;
                                        }
                                        #endregion

                                        if (!lstCompras.Any(x => x.cc.ToUpper().Equals((string)com.cc) && x.numero == (int)com.numero))
                                        {
                                            decimal rentencion_despues_iva = 0;
                                            decimal totalFinal = 0;

                                            if ((EmpresaEnum)vSesiones.sesionEmpresaActual == EmpresaEnum.Colombia && com.numeroRequisicion == 0)
                                            {
                                                var totalRetenciones = _contextEnkontrol.Select<OrdenCompraDetDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                                {
                                                    consulta = string.Format(@"SELECT SUM(importe) AS importe FROM so_ordenc_retenciones WHERE cc = '{0}' AND numero = {1}", com.cc, com.numero)
                                                }).FirstOrDefault();

                                                if (totalRetenciones != null)
                                                {
                                                    rentencion_despues_iva = totalRetenciones.importe;
                                                }

                                                totalFinal = com.sub_total + com.iva - rentencion_despues_iva;
                                            }
                                            else
                                            {
                                                totalFinal = com.total;
                                            }

                                            lstCompras.Add(new OrdenCompraDTO
                                            {
                                                cc = com.cc,
                                                ccDesc = com.ccDesc,
                                                numero = com.numero,
                                                proveedor = com.proveedor,
                                                proveedorNom = com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                                sub_total = com.sub_total,
                                                iva = com.iva,
                                                total = totalFinal,
                                                rentencion_despues_iva = rentencion_despues_iva,
                                                tipo_cambio = com.tipo_cambio,
                                                moneda = com.moneda,
                                                fecha = com.fecha != null ? com.fecha : default(DateTime),
                                                flagPuedeAutorizar = true,
                                                vobo = com.vobo,
                                                vobo2 = com.vobo2,
                                                vobo3 = com.vobo3,
                                                voboPendiente = flagVoBoPendiente,
                                                flagPuedeDarVobo = flagPuedeDarVobo,
                                                flagCancelar = puedeCancelar ? (com.ST_OC == "A" && com.st_impresa == "I") ? true : false : false,
                                                numeroRequisicion = com.numeroRequisicion,
                                                tieneCuadro = com.countCuadroComparativo > 0 ? true : false,
                                                countCuadroComparativo = com.countCuadroComparativo,
                                                comentarios = com.comentarios,
                                                flagCompraInterna = false
                                            });
                                        }
                                    }

                                    //OBTENER CALIFICACIONES CUADRO COMPARATIVO SI LAS HAY
                                    //ProvNoOptimos(compras, lstCompras, TipoCompraNoAutorizadaEnum.Admin);
                                }
                                #endregion
                            }

                            #region COMENTADO Gerardo Reina
                            if (relUser.empleado == 49)
                            {
                                #region COMENTADO
                                //                                var comprasExtra = listaComprasGeneral.Where(x => !lstCompras.Any(y => (y.cc == x.cc && y.numero == x.numero))).ToList();

                                //                                List<PermisoMontoDTO> facultamientosEK = new List<PermisoMontoDTO>();

                                //                                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                                //                                {
                                //                                    case EmpresaEnum.Colombia:
                                //                                        {
                                //                                            #region Facultamientos Colombia
                                //                                            List<string> datos1 = comprasExtra.Select(x => @"
                                //                                                    (
                                //                                                        tblPrincipal.cc = '" + x.cc + @"' AND 
                                //                                                        tblPrincipal.monto_minimo_autoriza <= " + Convert.ToDecimal((x.moneda == 1 ? x.total : (x.total * x.tipo_cambio)), CultureInfo.InvariantCulture) + @" AND 
                                //                                                        tblPrincipal.monto_maximo_autoriza >= " + Convert.ToDecimal((x.moneda == 1 ? x.total : (x.total * x.tipo_cambio)), CultureInfo.InvariantCulture) + @" AND 
                                //                                                        tblGrupos.tipo IN (SELECT SUBSTRING(insumo, 0, 3) FROM so_orden_compra_det WHERE cc = '" + x.cc + @"' AND numero = " + x.numero + @")
                                //                                                    )").ToList();
                                //                                            string datos2 = string.Join(" OR ", datos1);
                                //                                            strQuery = string.Format(@"
                                //                                                    SELECT 
                                //                                                        tblPrincipal.cc, 
                                //                                                        tblPrincipal.num_autorizacioines AS tblPrincipalNumAutorizaciones, 
                                //                                                        tblPrincipal.monto_minimo_autoriza, 
                                //                                                        tblPrincipal.monto_maximo_autoriza, 
                                //                                                        tblPrincipal.consecutivo, 
                                //                                                            
                                //                                                        tblVobo.empleado AS empleadoVobo, 
                                //                                                        tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                //                                                            
                                //                                                        tblGrupos.tipo AS tipoGrupo, 
                                //                                                        tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                //                                                            
                                //                                                        tblAut.empleado AS empleadoAutoriza, 
                                //                                                        tblAut.num_autorizaciones AS tblAutNumAutorizaciones, 
                                //                                                        tblAut.orden AS ordenAutorizacion 
                                //                                                    FROM so_cc_autorizacion tblPrincipal 
                                //                                                        LEFT JOIN so_empleados_cc tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                //                                                        LEFT JOIN so_rel_tipos_vobo tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                //                                                        LEFT JOIN so_empleados_autoriza_cc tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                //                                                    WHERE 
                                //                                                        tblPrincipal.cc = 'RELLENO' OR " + datos2 + @"
                                //                                                    ORDER BY tblPrincipal.consecutivo");
                                //                                            facultamientosEK = _context.Select<PermisoMontoDTO>(new DapperDTO
                                //                                            {
                                //                                                baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                                //                                                consulta = strQuery
                                //                                            }).ToList();
                                //                                            #endregion
                                //                                            break;
                                //                                        }
                                //                                }

                                //                                foreach (var com in comprasExtra)
                                //                                {
                                //                                    #region Flag VoBo Pendiente
                                //                                    bool flagVoboPendiente = false;

                                //                                    if (facultamientosEK != null)
                                //                                    {
                                //                                        List<PermisoMontoDTO> facultamientos = facultamientosEK.ToList();

                                //                                        if (com.autoriza_activos == 0 && com.tmc == 0)
                                //                                        {
                                //                                            int vobosRequeridos = facultamientos[0].tblVoboNumAutorizaciones != null ? (int)facultamientos[0].tblVoboNumAutorizaciones : 0;

                                //                                            switch (vobosRequeridos)
                                //                                            {
                                //                                                case 1:
                                //                                                    flagVoboPendiente = (int)com.vobo == 0 ? true : false;
                                //                                                    break;
                                //                                                case 2:
                                //                                                    flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false;
                                //                                                    break;
                                //                                                case 3:
                                //                                                    flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 || (int)com.vobo3 == 0 ? true : false;
                                //                                                    break;
                                //                                            }
                                //                                        }
                                //                                        else if (com.autoriza_activos == 1 && com.tmc == 0)
                                //                                        {
                                //                                            flagVoboPendiente = com.vobo == 0 || com.vobo2 == 0 ? true : false; //Siempre son dos VoBos cuando la compra es Activo Fijo
                                //                                        }
                                //                                        else if (com.autoriza_activos == 0 && com.tmc == 1)
                                //                                        {
                                //                                            flagVoboPendiente = com.vobo == 0 ? true : false; //Siempre es un VoBo cuando la compra es TMC.
                                //                                        }
                                //                                    }
                                //                                    #endregion

                                //                                    if (!lstCompras.Any(x => x.cc.ToUpper() == com.cc && x.numero == com.numero))
                                //                                    {
                                //                                        lstCompras.Add(new OrdenCompraDTO
                                //                                        {
                                //                                            cc = com.cc,
                                //                                            ccDesc = com.ccDesc,
                                //                                            numero = com.numero != null ? com.numero : 0,
                                //                                            proveedor = com.proveedor != null ? com.proveedor : 0,
                                //                                            proveedorNom = com.proveedor != null && com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                //                                            total = com.total != null ? com.total : 0,
                                //                                            tipo_cambio = com.tipo_cambio != null ? com.tipo_cambio : 0,
                                //                                            moneda = com.moneda != null ? com.moneda : 1,
                                //                                            fecha = com.fecha != null ? com.fecha : default(DateTime),
                                //                                            flagPuedeAutorizar = false,
                                //                                            vobo = com.vobo != null ? com.vobo : 0,
                                //                                            vobo2 = com.vobo2 != null ? com.vobo2 : 0,
                                //                                            vobo3 = com.vobo3 != null ? com.vobo3 : 0,
                                //                                            voboPendiente = flagVoboPendiente,
                                //                                            flagPuedeDarVobo = false,
                                //                                            flagCancelar = puedeCancelar ? (com.ST_OC == "A" && com.st_impresa == "I") ? true : false : false,
                                //                                            numeroRequisicion = com.numeroRequisicion != null ? (int)com.numeroRequisicion : 0,
                                //                                            tieneCuadro = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo > 0 ? true : false : false,
                                //                                            countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                //                                            flagActivoFijo = com.autoriza_activos == 1,
                                //                                            flagTMC = com.tmc == 1,
                                //                                            comentarios = com.comentarios,
                                //                                            flagCompraInterna = false
                                //                                        });
                                //                                    }
                                //                                }

                                //                                //OBTENER CALIFICACIONES CUADRO COMPARATIVO SI LAS HAY
                                //                                //ProvNoOptimos(comprasExtra, lstCompras, TipoCompraNoAutorizadaEnum.Jefe);
                                //                                //}
                                #endregion
                            }
                            #endregion

                            #region Compra Interna
                            List<dynamic> listaProveedores = _contextEnkontrol.Select<dynamic>(vSesiones.sesionEmpresaActual == 1 ? EnkontrolEnum.CplanProd : vSesiones.sesionEmpresaActual == (int)EmpresaEnum.GCPLAN ? EnkontrolEnum.GCPLAN : EnkontrolEnum.ArrenProd, new OdbcConsultaDTO()
                            {
                                consulta = @"SELECT * FROM sp_proveedores"
                            });

                            List<OrdenCompraDTO> listaComprasInternas = _context.Select<OrdenCompraDTO>(new DapperDTO
                            {
                                baseDatos = MainContextEnum.Colombia,
                                consulta = @"
                                    SELECT
                                        t1.cc, t3.descripcion AS ccDesc, t1.comentarios, t1.fecha, t1.moneda, t1.numero, t1.proveedor, t1.total, t2.area, t2. cuenta, t1.vobo, t1.vobo2, t1.vobo3
	                                FROM tblCom_OrdenCompra_Interna AS t1
	                                    INNER JOIN tblCom_OrdenCompraDet_Interna AS t2 ON t1.id = t2.idOrdenCompra
	                                    INNER JOIN tblP_CC AS t3 ON t1.cc = t3.cc
                                    WHERE t1.ST_OC != 'A'",
                                parametros = new { registroActivo = true }
                            }).Select(x => new OrdenCompraDTO
                            {
                                cc = x.cc,
                                ccDesc = x.ccDesc,
                                comentarios = x.comentarios,
                                fecha = x.fecha,
                                moneda = x.moneda,
                                numero = x.numero,
                                proveedor = x.proveedor,
                                proveedorNom = listaProveedores.Where(y => (int)y.numpro == x.proveedor).Select(z => (string)z.nombre).FirstOrDefault(),
                                total = x.total,
                                consigna = x.consigna,
                                area = x.area,
                                cuenta = x.cuenta,
                                vobo = x.vobo,
                                vobo2 = x.vobo2,
                                vobo3 = x.vobo3,
                                esOC_Interna = true,
                                voboPendiente = true,
                                flagPuedeDarVobo = false
                            }).ToList();

                            foreach (var item in listaComprasInternas)
                            {
                                #region SE VERIFICA SI HACE FALTA VOBOS
                                int cantVobos = getVobos(item).Select(s => s.numVobos).FirstOrDefault();
                                int cantVobosRealizados = 0;

                                if (item.vobo != 0)
                                    cantVobosRealizados++;

                                if (item.vobo2 != 0)
                                    cantVobosRealizados++;

                                if (item.vobo3 != 0)
                                    cantVobosRealizados++;
                                #endregion

                                if (cantVobosRealizados < cantVobos)
                                {
                                    #region SE VERIFICA SI EL USUARIO LOGUEADO PUEDE DAR VOBO
                                    List<int> lstUsuariosEK = getVobos(item).Select(s => s.usu_numero).ToList();
                                    foreach (var usuarioVobo in lstUsuariosEK)
                                    {
                                        if (usuarioVobo > 0)
                                        {
                                            tblP_Usuario_Enkontrol objUsuarioEK = _context.tblP_Usuario_Enkontrol.Where(w => w.empleado == usuarioVobo).FirstOrDefault();
                                            if (objUsuarioEK != null)
                                            {
                                                if (objUsuarioEK.idUsuario == (int)vSesiones.sesionUsuarioDTO.id) item.flagPuedeDarVobo = true;
                                                if (item.vobo != (int)vSesiones.sesionUsuarioDTO.id && item.vobo2 != (int)vSesiones.sesionUsuarioDTO.id && item.vobo3 != (int)vSesiones.sesionUsuarioDTO.id) item.voboPendiente = true;
                                                else item.voboPendiente = false;
                                            }
                                        }
                                    }
                                    #endregion
                                }
                                else if (cantVobosRealizados > 0 && cantVobosRealizados == cantVobos)
                                {
                                    #region SE VERIFICA SI EL USUARIO LOGUEADO PUEDE AUTORIZAR
                                    int idUsuarioEK = 0;
                                    idUsuarioEK = getAutorizaciones(item).Select(s => s.usu_numero).FirstOrDefault();
                                    if (idUsuarioEK > 0)
                                    {
                                        tblP_Usuario_Enkontrol objUsuarioEK = _context.tblP_Usuario_Enkontrol.Where(w => w.empleado == idUsuarioEK).FirstOrDefault();
                                        if (objUsuarioEK != null)
                                        {
                                            item.voboPendiente = false;
                                            item.flagPuedeAutorizar = objUsuarioEK.idUsuario == (int)vSesiones.sesionUsuarioDTO.id ? true : false;
                                        }
                                    }
                                    #endregion
                                }
                            }

                            lstCompras.AddRange(listaComprasInternas);
                            #endregion

                            #region Determina las compras reseteadas y de consigna
                            if (lstCompras.Count() > 0)
                            {
                                var listaComprasReseteadas = _context.tblCom_ComprasReset.Where(x => x.estatus && x.registroAplica).ToList();

                                var listaComprasConRequisicion = lstCompras.Join(
                                    _context.tblCom_Req.Where(x => x.estatusRegistro),
                                    c => new { c.cc, numero = c.numeroRequisicion },
                                    r => new { r.cc, r.numero },
                                    (c, r) => new { c, r }
                                ).ToList();

                                foreach (var compra in lstCompras)
                                {
                                    var compraResetSIGOPLAN = listaComprasReseteadas.FirstOrDefault(x => x.cc == compra.cc && x.numero == compra.numero);

                                    if (compraResetSIGOPLAN != null)
                                    {
                                        if (compraResetSIGOPLAN.tipo == TipoComprasResetEnum.comprasImpresas)
                                        {
                                            compra.flagCompraReset = true;
                                        }
                                        else if (compraResetSIGOPLAN.tipo == TipoComprasResetEnum.comprasNoImpresas)
                                        {
                                            compra.flagCompraResetNoImpresa = true;
                                        }
                                    }

                                    var compraConRequisicion = listaComprasConRequisicion.FirstOrDefault(x => x.c.cc == compra.cc && x.c.numero == compra.numero);

                                    if (compraConRequisicion != null)
                                    {
                                        compra.consigna = compraConRequisicion.r.consigna != null ? (bool)compraConRequisicion.r.consigna : false;
                                        compra.crc = compraConRequisicion.r.crc;
                                        compra.convenio = compraConRequisicion.r.convenio;
                                    }
                                }
                            }
                            #endregion

                            lstCompras = lstCompras.OrderByDescending(x => x.voboPendiente && x.flagPuedeDarVobo).ThenByDescending(x => !x.voboPendiente && x.flagPuedeAutorizar).ToList();

                            return lstCompras;
                            #endregion
                        }
                    default:
                        {
                            #region DEMÁS EMPRESAS
                            #region Información Inicial
                            var usuario = vSesiones.sesionUsuarioDTO;
                            var relUser = ufs.getUsuarioService().getUserEk(usuario.id);
                            var usuarioEnkontrol = ((List<UsuarioEnkontrolDTO>)consultaCheckProductivo(
                                string.Format(@"SELECT * FROM empleados WHERE empleado = {0}", relUser.empleado)
                            ).ToObject<List<UsuarioEnkontrolDTO>>())[0];

                            var listCompradorAdmin = _context.tblCom_Comprador_Admin.Select(x => x.empleado).ToList();
                            var puedeCancelar = relUser.empleado == 1 || listCompradorAdmin.Contains(relUser.empleado);

                            DateTime fechaFiltroAnioActual = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1).AddMonths(-3);
                            #endregion

                            List<OrdenCompraDTO> listaComprasGeneral = new List<OrdenCompraDTO>();

                            if (relUser.empleado != 1)
                            {
                                #region Compras No Autorizadas por Centro de Costo, monto y Tipo-Grupo
                                dynamic comprasMontoEK = null;

                                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                                {
                                    case EmpresaEnum.Construplan:
                                    case EmpresaEnum.GCPLAN:
                                    case EmpresaEnum.EICI:
                                    case EmpresaEnum.Colombia:
                                        {
                                            #region Compras Construplan/EICI
                                            comprasMontoEK = consultaCheckProductivo(string.Format(@"
                                                SELECT 
                                                    tblPrincipal.*, 
                                                    (SELECT COUNT(*) FROM so_cuadro_comparativo cua WHERE cua.cc = tblPrincipal.cc AND cua.numero = tblPrincipal.numeroRequisicion) AS countCuadroComparativo
                                                FROM (
                                                    SELECT 
                                                        oc.*, 
                                                        pr.nombre AS proveedorNom, 
                                                        (SELECT TOP 1 det.num_requisicion FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS numeroRequisicion, 
                                                        c.descripcion AS ccDesc 
                                                    FROM so_orden_compra oc 
                                                        LEFT JOIN sp_proveedores pr ON pr.numpro = oc.proveedor 
                                                        INNER JOIN cc c ON c.cc = oc.cc 
                                                    WHERE 
                                                        " + (isAuth ? "oc.ST_OC = 'A'" : "(oc.ST_OC IS NULL OR oc.ST_OC != 'A')") + @" AND fecha >= '" + fechaFiltroAnioActual.ToString("yyyy-MM-dd") + @"' AND
                                                        oc.autoriza_activos = 0 AND oc.tmc = 0  AND c.st_ppto!='T' {0} 
                                                ) AS tblPrincipal", cc != "" ? "AND oc.cc = '" + cc + "'" : ""));
                                            #endregion
                                            break;
                                        }
                                    case EmpresaEnum.Arrendadora:
                                        {
                                            #region Compras Arrendadora
                                            comprasMontoEK = consultaCheckProductivo(string.Format(@"
                                                SELECT 
                                                    tblPrincipal.*, 
                                                    (SELECT COUNT(*) FROM so_cuadro_comparativo cua WHERE cua.cc = tblPrincipal.cc AND cua.numero = tblPrincipal.numeroRequisicion) AS countCuadroComparativo
                                                FROM (
                                                    SELECT 
                                                        oc.*, 
                                                        pr.nombre AS proveedorNom, 
                                                        (SELECT TOP 1 det.num_requisicion FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS numeroRequisicion, 
                                                        c.descripcion AS ccDesc, 
                                                        (SELECT TOP 1 det.area FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS area, 
                                                        (SELECT TOP 1 det.cuenta FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS cuenta 
                                                    FROM so_orden_compra oc 
                                                        LEFT JOIN sp_proveedores pr ON pr.numpro = oc.proveedor 
                                                        INNER JOIN cc c ON c.cc = oc.cc 
                                                    WHERE 
                                                        " + (isAuth ? "oc.ST_OC = 'A'" : "(oc.ST_OC IS NULL OR oc.ST_OC != 'A')") + @"  AND fecha >= '" + fechaFiltroAnioActual.ToString("yyyy-MM-dd") + @"' AND 
                                                        oc.tmc = 0 AND c.st_ppto!='T' {0} 
                                                ) AS tblPrincipal", cc != "" ? "AND oc.cc = '" + cc + "'" : ""));
                                            #endregion
                                            break;
                                        }
                                }

                                if (comprasMontoEK != null)
                                {
                                    var comprasMonto = ((List<OrdenCompraDTO>)comprasMontoEK.ToObject<List<OrdenCompraDTO>>()).ToList().Where(x => x.fecha >= fechaFiltroAnioActual).ToList();

                                    listaComprasGeneral.AddRange(comprasMonto);

                                    dynamic facultamientosEmpleadoEK = null;

                                    switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                                    {
                                        case EmpresaEnum.Construplan:
                                        case EmpresaEnum.GCPLAN:
                                        case EmpresaEnum.EICI:
                                            {
                                                #region Facultamientos Construplan/EICI
                                                List<string> ccs = comprasMonto.Select(x => x.cc).ToList();

                                                facultamientosEmpleadoEK = consultaCheckProductivo(string.Format(@"
                                                    SELECT DISTINCT 
                                                        tblPrincipal.cc, 
                                                        tblPrincipal.num_autorizacioines AS tblPrincipalNumAutorizaciones, 
                                                        tblPrincipal.monto_minimo_autoriza, 
                                                        tblPrincipal.monto_maximo_autoriza, 
                                                        tblPrincipal.consecutivo, 
                                                        
                                                        tblVobo.empleado AS empleadoVobo, 
                                                        tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                        
                                                        tblGrupos.tipo AS tipoGrupo, 
                                                        tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                        
                                                        tblAut.empleado AS empleadoAutoriza, 
                                                        tblAut.num_autorizaciones AS tblAutNumAutorizaciones, 
                                                        tblAut.orden AS ordenAutorizacion 
                                                    FROM so_cc_autorizacion tblPrincipal 
                                                        LEFT JOIN so_empleados_cc tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                                        LEFT JOIN so_rel_tipos_vobo tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                                        LEFT JOIN so_empleados_autoriza_cc tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                                    WHERE 
                                                        (tblVobo.empleado = {0} OR tblAut.empleado = {0}) AND tblPrincipal.cc in ('{1}')
                                                    ORDER BY tblPrincipal.consecutivo", relUser.empleado, string.Join("','", ccs))
                                                );
                                                #endregion
                                                break;
                                            }
                                        case EmpresaEnum.Arrendadora:
                                            {
                                                #region Facultamientos Arrendadora
                                                List<string> ccs = comprasMonto.Select(x => x.area + "-" + x.cuenta).ToList();

                                                facultamientosEmpleadoEK = consultaCheckProductivo(string.Format(@"
                                                    SELECT DISTINCT
                                                        tblPrincipal.area, 
                                                        tblPrincipal.cuenta, 
                                                        tblPrincipal.num_autorizaciones AS tblPrincipalNumAutorizaciones, 
                                                        tblPrincipal.monto_minimo_autoriza, 
                                                        tblPrincipal.monto_maximo_autoriza, 
                                                        tblPrincipal.consecutivo, 
                                                        
                                                        tblVobo.empleado AS empleadoVobo, 
                                                        tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                        
                                                        tblGrupos.tipo AS tipoGrupo, 
                                                        tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                        
                                                        tblAut.empleado AS empleadoAutoriza, 
                                                        tblAut.num_autorizaciones AS tblAutNumAutorizaciones 
                                                    FROM so_area_cta_autorizacion tblPrincipal 
                                                        LEFT JOIN so_empleados_area_cta tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                                        LEFT JOIN so_rel_tipos_vobo_area_cta tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                                        LEFT JOIN so_empleados_autoriza_area_cta tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                                    WHERE 
                                                        (tblVobo.empleado = {0} OR tblAut.empleado = {0}) AND REPLACE(STR(tblPrincipal.area) + '-' + STR(tblPrincipal.cuenta), ' ', '') IN ('{1}')
                                                    ORDER BY tblPrincipal.consecutivo", relUser.empleado, string.Join("','", ccs))
                                                );
                                                #endregion
                                                break;
                                            }
                                    }

                                    if (facultamientosEmpleadoEK != null)
                                    {
                                        List<PermisoMontoDTO> facultamientosEmpleado = (List<PermisoMontoDTO>)facultamientosEmpleadoEK.ToObject<List<PermisoMontoDTO>>();

                                        if (facultamientosEmpleado.Count() > 0)
                                        {
                                            List<tipoGrupoDTO> listTipoGrupoGeneral = new List<tipoGrupoDTO>();

                                            List<string> datos1 = comprasMonto.Select(x => "(cc = '" + x.cc + "' AND numero=" + x.numero + ")").ToList();
                                            string datos2 = string.Join(" OR ", datos1);

                                            listTipoGrupoGeneral = (List<tipoGrupoDTO>)consultaCheckProductivo(
                                                string.Format(@"SELECT cc, numero, SUBSTRING(insumo, 0, 3) AS tipoGrupo FROM so_orden_compra_det WHERE cc = 'relleno' OR " + datos2)
                                            ).ToObject<List<tipoGrupoDTO>>();

                                            foreach (var com in comprasMonto)
                                            {
                                                var total = Convert.ToDecimal((com.moneda == 1 ? com.total : (com.total * com.tipo_cambio)), CultureInfo.InvariantCulture);
                                                var listaTipoGrupo = listTipoGrupoGeneral.Where(x => x.cc == com.cc && x.numero == com.numero).Select(x => x.tipoGrupo).ToList();
                                                var facultamientosCompraEmpleado = facultamientosEmpleado.Where(x =>
                                                    ((vSesiones.sesionEmpresaActual == 1 || vSesiones.sesionEmpresaActual == 4 || vSesiones.sesionEmpresaActual == (int)EmpresaEnum.GCPLAN) ? x.cc.ToUpper().Equals(com.cc) : (x.area == com.area && x.cuenta == com.cuenta)) &&
                                                    x.monto_minimo_autoriza <= total &&
                                                    x.monto_maximo_autoriza >= total &&
                                                    (x.tipoGrupo != null ? listaTipoGrupo.Contains((int)x.tipoGrupo) : false)
                                                ).ToList();

                                                if (facultamientosCompraEmpleado.Count > 0)
                                                {
                                                    #region Flag Puede Dar VoBo / Flag Puede Autorizar
                                                    bool flagPuedeDarVobo = false;

                                                    if ((int)com.vobo == relUser.empleado || (int)com.vobo2 == relUser.empleado || (int)com.vobo3 == relUser.empleado)
                                                    {
                                                        flagPuedeDarVobo = false;
                                                    }
                                                    else
                                                    {
                                                        flagPuedeDarVobo = facultamientosCompraEmpleado.FirstOrDefault(x => x.empleadoVobo == relUser.empleado) != null;
                                                    }

                                                    bool flagPuedeAutorizar = facultamientosCompraEmpleado.FirstOrDefault(x => x.empleadoAutoriza == relUser.empleado) != null;
                                                    #endregion

                                                    if (!lstCompras.Any(x => x.cc == (string)com.cc && x.numero == (int)com.numero))
                                                    {
                                                        #region Flag VoBo Pendiente
                                                        bool flagVoboPendiente = false;

                                                        var vobosRequeridos = facultamientosCompraEmpleado[0].tblVoboNumAutorizaciones ?? 0;

                                                        switch (vobosRequeridos)
                                                        {
                                                            case 1:
                                                                flagVoboPendiente = (int)com.vobo == 0 ? true : false;
                                                                break;
                                                            case 2:
                                                                flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false;
                                                                break;
                                                            case 3:
                                                                flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 || (int)com.vobo3 == 0 ? true : false;
                                                                break;
                                                        }
                                                        #endregion

                                                        lstCompras.Add(new OrdenCompraDTO
                                                        {
                                                            cc = com.cc,
                                                            ccDesc = com.ccDesc,
                                                            numero = com.numero != null ? com.numero : 0,
                                                            proveedor = com.proveedor != null ? com.proveedor : 0,
                                                            proveedorNom = com.proveedor != null && com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                                            total = com.total != null ? com.total : 0,
                                                            tipo_cambio = com.tipo_cambio != null ? com.tipo_cambio : 0,
                                                            moneda = com.moneda != null ? com.moneda : 1,
                                                            fecha = com.fecha != null ? com.fecha : default(DateTime),
                                                            flagPuedeAutorizar = flagPuedeAutorizar,
                                                            vobo = com.vobo != null ? com.vobo : 0,
                                                            vobo2 = com.vobo2 != null ? com.vobo2 : 0,
                                                            vobo3 = com.vobo3 != null ? com.vobo3 : 0,
                                                            voboPendiente = flagVoboPendiente,
                                                            flagPuedeDarVobo = flagPuedeDarVobo,
                                                            flagCancelar = puedeCancelar ? (com.ST_OC == "A" && com.st_impresa == "I") ? true : false : false,
                                                            numeroRequisicion = com.numeroRequisicion != null ? (int)com.numeroRequisicion : 0,
                                                            tieneCuadro = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo > 0 ? true : false : false,
                                                            countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                                            comentarios = com.comentarios,
                                                            flagCompraInterna = false
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    //OBTENER CALIFICACIONES CUADRO COMPARATIVO SI LAS HAY
                                    ProvNoOptimos(comprasMonto, lstCompras, TipoCompraNoAutorizadaEnum.PorCC_Monto_Grupo);
                                }
                                #endregion

                                #region Compras No Autorizadas por Activo Fijo
                                var empleadoVoboActivoFijo = consultaCheckProductivo(string.Format(@"SELECT * FROM so_cc_vobo WHERE empleado = {0}", relUser.empleado));
                                var empleadoAutorizaActivoFijo = usuarioEnkontrol.autoriza_activos_fijos == 1;

                                if (empleadoVoboActivoFijo != null || empleadoAutorizaActivoFijo)
                                {
                                    dynamic comprasActivoFijoEK = null;

                                    switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                                    {
                                        case EmpresaEnum.Construplan:
                                        case EmpresaEnum.GCPLAN:
                                        case EmpresaEnum.EICI:
                                        case EmpresaEnum.Colombia:
                                            {
                                                #region Compras Construplan/EICI
                                                comprasActivoFijoEK = consultaCheckProductivo(string.Format(@"
                                                    SELECT 
                                                        tblPrincipal.*, 
                                                        (SELECT COUNT(*) FROM so_cuadro_comparativo cua WHERE cua.cc = tblPrincipal.cc AND cua.numero = tblPrincipal.numeroRequisicion) AS countCuadroComparativo
                                                    FROM (
                                                        SELECT 
                                                            oc.*, 
                                                            pr.nombre AS proveedorNom, 
                                                            (SELECT TOP 1 det.num_requisicion FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS numeroRequisicion, 
                                                            c.descripcion AS ccDesc 
                                                        FROM so_orden_compra oc 
                                                            LEFT JOIN sp_proveedores pr ON pr.numpro = oc.proveedor 
                                                            INNER JOIN cc c ON c.cc = oc.cc 
                                                        WHERE 
                                                            " + (isAuth ? "oc.ST_OC = 'A'" : "(oc.ST_OC IS NULL OR oc.ST_OC != 'A')") + @" AND 
                                                            oc.autoriza_activos = 1 AND oc.tmc = 0 {0} 
                                                    ) AS tblPrincipal", cc != "" ? "AND oc.cc = '" + cc + "'" : ""));
                                                #endregion
                                                break;
                                            }
                                        case EmpresaEnum.Arrendadora:
                                            {
                                                #region Compras Arrendadora
                                                comprasActivoFijoEK = consultaCheckProductivo(string.Format(@"
                                                    SELECT 
                                                        tblPrincipal.*, 
                                                        (SELECT COUNT(*) FROM so_cuadro_comparativo cua WHERE cua.cc = tblPrincipal.cc AND cua.numero = tblPrincipal.numeroRequisicion) AS countCuadroComparativo
                                                    FROM (
                                                        SELECT 
                                                            oc.*, 
                                                            pr.nombre AS proveedorNom, 
                                                            (SELECT TOP 1 det.num_requisicion FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS numeroRequisicion, 
                                                            c.descripcion AS ccDesc, 
                                                            (SELECT TOP 1 det.area FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS area, 
                                                            (SELECT TOP 1 det.cuenta FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS cuenta 
                                                        FROM so_orden_compra oc 
                                                            LEFT JOIN sp_proveedores pr ON pr.numpro = oc.proveedor 
                                                            INNER JOIN cc c ON c.cc = oc.cc 
                                                        WHERE 
                                                            " + (isAuth ? "oc.ST_OC = 'A'" : "(oc.ST_OC IS NULL OR oc.ST_OC != 'A')") + @" AND 
                                                            oc.autoriza_activos = 1 AND oc.tmc = 0 {0} 
                                                    ) AS tblPrincipal", cc != "" ? "AND oc.cc = '" + cc + "'" : ""));
                                                #endregion
                                                break;
                                            }
                                    }

                                    if (comprasActivoFijoEK != null)
                                    {
                                        var comprasActivoFijo = ((List<OrdenCompraDTO>)comprasActivoFijoEK.ToObject<List<OrdenCompraDTO>>()).ToList().Where(x => x.fecha >= fechaFiltroAnioActual).ToList();

                                        listaComprasGeneral.AddRange(comprasActivoFijo);

                                        var listaEmpleadoVoboActivoFijo = new List<dynamic>();

                                        if (empleadoVoboActivoFijo != null)
                                        {
                                            listaEmpleadoVoboActivoFijo = (List<dynamic>)empleadoVoboActivoFijo.ToObject<List<dynamic>>();
                                        }

                                        foreach (var com in comprasActivoFijo)
                                        {
                                            #region Flag Puede Dar VoBo / Flag Puede Autorizar
                                            bool flagPuedeDarVobo = false;

                                            if ((int)com.vobo == relUser.empleado || (int)com.vobo2 == relUser.empleado || (int)com.vobo3 == relUser.empleado)
                                            {
                                                flagPuedeDarVobo = false;
                                            }
                                            else
                                            {
                                                if (listaEmpleadoVoboActivoFijo.Count() > 0)
                                                {
                                                    flagPuedeDarVobo = listaEmpleadoVoboActivoFijo.FirstOrDefault(x => ((string)x.cc).ToUpper().Equals((string)com.cc)) != null;
                                                }
                                            }

                                            bool flagPuedeAutorizar = empleadoAutorizaActivoFijo;
                                            #endregion

                                            if (!lstCompras.Any(x => x.cc.ToUpper().Equals((string)com.cc) && x.numero == (int)com.numero))
                                            {
                                                bool flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false; //Siempre son dos VoBos cuando la compra es Activo Fijo

                                                if (listaEmpleadoVoboActivoFijo.Count() > 0)
                                                {
                                                    if (listaEmpleadoVoboActivoFijo.Select(x => (string)x.cc).Contains(com.cc) || flagPuedeAutorizar)
                                                    {
                                                        lstCompras.Add(new OrdenCompraDTO
                                                        {
                                                            cc = com.cc,
                                                            ccDesc = com.ccDesc,
                                                            numero = com.numero != null ? com.numero : 0,
                                                            proveedor = com.proveedor != null ? com.proveedor : 0,
                                                            proveedorNom = com.proveedor != null && com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                                            total = com.total != null ? com.total : 0,
                                                            tipo_cambio = com.tipo_cambio != null ? com.tipo_cambio : 0,
                                                            moneda = com.moneda != null ? com.moneda : 1,
                                                            fecha = com.fecha != null ? com.fecha : default(DateTime),
                                                            flagPuedeAutorizar = flagPuedeAutorizar,
                                                            vobo = com.vobo != null ? com.vobo : 0,
                                                            vobo2 = com.vobo2 != null ? com.vobo2 : 0,
                                                            vobo3 = com.vobo3 != null ? com.vobo3 : 0,
                                                            voboPendiente = flagVoboPendiente,
                                                            flagPuedeDarVobo = flagPuedeDarVobo,
                                                            flagCancelar = puedeCancelar ? (com.ST_OC == "A" && com.st_impresa == "I") ? true : false : false,
                                                            numeroRequisicion = com.numeroRequisicion != null ? (int)com.numeroRequisicion : 0,
                                                            tieneCuadro = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo > 0 ? true : false : false,
                                                            countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                                            flagActivoFijo = true,
                                                            comentarios = com.comentarios
                                                        });
                                                    }
                                                }
                                                else
                                                {
                                                    lstCompras.Add(new OrdenCompraDTO
                                                    {
                                                        cc = com.cc,
                                                        ccDesc = com.ccDesc,
                                                        numero = com.numero != null ? com.numero : 0,
                                                        proveedor = com.proveedor != null ? com.proveedor : 0,
                                                        proveedorNom = com.proveedor != null && com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                                        total = com.total != null ? com.total : 0,
                                                        tipo_cambio = com.tipo_cambio != null ? com.tipo_cambio : 0,
                                                        moneda = com.moneda != null ? com.moneda : 1,
                                                        fecha = com.fecha != null ? com.fecha : default(DateTime),
                                                        flagPuedeAutorizar = flagPuedeAutorizar,
                                                        vobo = com.vobo != null ? com.vobo : 0,
                                                        vobo2 = com.vobo2 != null ? com.vobo2 : 0,
                                                        vobo3 = com.vobo3 != null ? com.vobo3 : 0,
                                                        voboPendiente = flagVoboPendiente,
                                                        flagPuedeDarVobo = flagPuedeDarVobo,
                                                        flagCancelar = puedeCancelar ? (com.ST_OC == "A" && com.st_impresa == "I") ? true : false : false,
                                                        numeroRequisicion = com.numeroRequisicion != null ? (int)com.numeroRequisicion : 0,
                                                        tieneCuadro = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo > 0 ? true : false : false,
                                                        countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                                        flagActivoFijo = true,
                                                        comentarios = com.comentarios
                                                    });
                                                }
                                            }
                                        }

                                        //OBTENER CALIFICACIONES CUADRO COMPARATIVO SI LAS HAY
                                        ProvNoOptimos(comprasActivoFijo, lstCompras, TipoCompraNoAutorizadaEnum.ActivoFijo);
                                    }
                                }
                                #endregion

                                #region Compras No Autorizadas por TMC
                                var empleadoVoboTMC = usuarioEnkontrol.vobo_tmc == 1;
                                var empleadoAutorizaTMC = usuarioEnkontrol.autoriza_tmc == 1;

                                if (empleadoVoboTMC || empleadoAutorizaTMC)
                                {
                                    dynamic comprasTMCEK = null;

                                    switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                                    {
                                        case EmpresaEnum.Construplan:
                                        case EmpresaEnum.GCPLAN:
                                        case EmpresaEnum.EICI:
                                        case EmpresaEnum.Colombia:
                                            {
                                                #region Compras Construplan/EICI
                                                comprasTMCEK = consultaCheckProductivo(string.Format(@"
                                                    SELECT 
                                                        tblPrincipal.*, 
                                                        (SELECT COUNT(*) FROM so_cuadro_comparativo cua WHERE cua.cc = tblPrincipal.cc AND cua.numero = tblPrincipal.numeroRequisicion) AS countCuadroComparativo
                                                    FROM (
                                                        SELECT 
                                                            oc.*, 
                                                            pr.nombre AS proveedorNom, 
                                                            (SELECT TOP 1 det.num_requisicion FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS numeroRequisicion, 
                                                            c.descripcion AS ccDesc 
                                                        FROM so_orden_compra oc 
                                                            LEFT JOIN sp_proveedores pr ON pr.numpro = oc.proveedor 
                                                            INNER JOIN cc c ON c.cc = oc.cc 
                                                        WHERE 
                                                            " + (isAuth ? "oc.ST_OC = 'A'" : "(oc.ST_OC IS NULL OR oc.ST_OC != 'A')") + @" AND 
                                                            oc.autoriza_activos = 0 AND oc.tmc = 1 {0} 
                                                    ) AS tblPrincipal", cc != "" ? "AND oc.cc = '" + cc + "'" : ""));
                                                #endregion
                                                break;
                                            }
                                        case EmpresaEnum.Arrendadora:
                                            {
                                                #region Compras Arrendadora
                                                comprasTMCEK = consultaCheckProductivo(string.Format(@"
                                                    SELECT 
                                                        tblPrincipal.*, 
                                                        (SELECT COUNT(*) FROM so_cuadro_comparativo cua WHERE cua.cc = tblPrincipal.cc AND cua.numero = tblPrincipal.numeroRequisicion) AS countCuadroComparativo
                                                    FROM (
                                                        SELECT 
                                                            oc.*, 
                                                            pr.nombre AS proveedorNom, 
                                                            (SELECT TOP 1 det.num_requisicion FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS numeroRequisicion, 
                                                            c.descripcion AS ccDesc, 
                                                            (SELECT TOP 1 det.area FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS area, 
                                                            (SELECT TOP 1 det.cuenta FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS cuenta 
                                                        FROM so_orden_compra oc 
                                                            LEFT JOIN sp_proveedores pr ON pr.numpro = oc.proveedor 
                                                            INNER JOIN cc c ON c.cc = oc.cc 
                                                        WHERE 
                                                            " + (isAuth ? "oc.ST_OC = 'A'" : "(oc.ST_OC IS NULL OR oc.ST_OC != 'A')") + @" AND 
                                                            oc.autoriza_activos = 0 AND oc.tmc = 1 {0} 
                                                    ) AS tblPrincipal", cc != "" ? "AND oc.cc = '" + cc + "'" : ""));
                                                #endregion
                                                break;
                                            }
                                    }

                                    if (comprasTMCEK != null)
                                    {
                                        var comprasTMC = ((List<OrdenCompraDTO>)comprasTMCEK.ToObject<List<OrdenCompraDTO>>()).ToList().Where(x => x.fecha >= fechaFiltroAnioActual).ToList();

                                        listaComprasGeneral.AddRange(comprasTMC);

                                        foreach (var com in comprasTMC)
                                        {
                                            #region Flag Puede Dar VoBo / Flag Puede Autorizar
                                            bool flagPuedeDarVobo = false;

                                            if ((int)com.vobo == relUser.empleado || (int)com.vobo2 == relUser.empleado || (int)com.vobo3 == relUser.empleado)
                                            {
                                                flagPuedeDarVobo = false;
                                            }
                                            else
                                            {
                                                flagPuedeDarVobo = empleadoVoboTMC;
                                            }

                                            bool flagPuedeAutorizar = empleadoAutorizaTMC;
                                            #endregion

                                            if (!lstCompras.Any(x => x.cc.ToUpper().Equals((string)com.cc) && x.numero == (int)com.numero))
                                            {
                                                bool flagVoboPendiente = (int)com.vobo == 0 ? true : false; //Siempre es un VoBo cuando la compra es TMC.

                                                lstCompras.Add(new OrdenCompraDTO
                                                {
                                                    cc = com.cc,
                                                    ccDesc = com.ccDesc,
                                                    numero = com.numero != null ? com.numero : 0,
                                                    proveedor = com.proveedor != null ? com.proveedor : 0,
                                                    proveedorNom = com.proveedor != null && com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                                    total = com.total != null ? com.total : 0,
                                                    tipo_cambio = com.tipo_cambio != null ? com.tipo_cambio : 0,
                                                    moneda = com.moneda != null ? com.moneda : 1,
                                                    fecha = com.fecha != null ? com.fecha : default(DateTime),
                                                    flagPuedeAutorizar = flagPuedeAutorizar,
                                                    vobo = com.vobo != null ? com.vobo : 0,
                                                    vobo2 = com.vobo2 != null ? com.vobo2 : 0,
                                                    vobo3 = com.vobo3 != null ? com.vobo3 : 0,
                                                    voboPendiente = flagVoboPendiente,
                                                    flagPuedeDarVobo = flagPuedeDarVobo,
                                                    flagCancelar = puedeCancelar ? (com.ST_OC == "A" && com.st_impresa == "I") ? true : false : false,
                                                    numeroRequisicion = com.numeroRequisicion != null ? (int)com.numeroRequisicion : 0,
                                                    tieneCuadro = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo > 0 ? true : false : false,
                                                    countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                                    flagTMC = true,
                                                    comentarios = com.comentarios
                                                });
                                            }
                                        }

                                        //OBTENER CALIFICACIONES CUADRO COMPARATIVO SI LAS HAY
                                        ProvNoOptimos(comprasTMC, lstCompras, TipoCompraNoAutorizadaEnum.TMC);
                                    }
                                }
                                #endregion

                                #region Compras Traspaso de Almacén
                                if (relUser.empleado == 59 || relUser.empleado == 1)
                                {
                                    var comprasTraspasoAlmacen = _contextEnkontrol.Select<OrdenCompraDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                    {
                                        consulta = string.Format(@"
                                            SELECT
                                                oc.cc, oc.numero, oc.proveedor, oc.total, oc.tipo_cambio, oc.moneda, oc.fecha, oc.vobo, oc.vobo2, oc.vobo3, oc.ST_OC, oc.st_impresa, oc.comentarios,
                                                pr.nombre AS proveedorNom,
                                                (SELECT TOP 1 det.num_requisicion FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS numeroRequisicion,
                                                c.descripcion AS ccDesc,
                                                (SELECT det.area FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero AND det.partida = 1) AS area,
                                                (SELECT det.cuenta FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero AND det.partida = 1) AS cuenta,
                                                (SELECT COUNT(*) FROM so_cuadro_comparativo cua WHERE cua.cc = oc.cc AND cua.numero = (SELECT det.num_requisicion FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero AND det.partida = 1)) AS countCuadroComparativo
                                            FROM so_orden_compra oc
                                                LEFT JOIN sp_proveedores pr ON pr.numpro = oc.proveedor
                                                INNER JOIN cc c ON c.cc = oc.cc
                                            WHERE c.st_ppto != 'T' AND " +
                                        (isAuth ? "oc.ST_OC = 'A'" : "(oc.ST_OC IS NULL OR oc.ST_OC != 'A')") +
                                        (@" AND fecha >= '" + fechaFiltroAnioActual.ToString("yyyy-MM-dd")) + @"' " +
                                        (cc != "" ? "AND oc.cc = '" + cc + "'" : ""))
                                    });

                                    foreach (var compra in comprasTraspasoAlmacen)
                                    {
                                        if (compra.proveedor == 5412) //Verificar que la compra tenga proveedor de Construplan
                                        {
                                            if (compra.area == 1 && compra.cuenta == 9) //Verificar que la compra tenga el área-cuenta "1-9" en la primer partida
                                            {
                                                lstCompras.Add(new OrdenCompraDTO
                                                {
                                                    cc = compra.cc,
                                                    ccDesc = compra.ccDesc,
                                                    numero = compra.numero,
                                                    proveedor = compra.proveedor,
                                                    proveedorNom = compra.proveedor + " - " + (compra.proveedorNom ?? ""),
                                                    total = compra.total,
                                                    tipo_cambio = compra.tipo_cambio,
                                                    moneda = compra.moneda,
                                                    fecha = compra.fecha,
                                                    vobo = compra.vobo,
                                                    vobo2 = compra.vobo2,
                                                    vobo3 = compra.vobo3,
                                                    flagPuedeDarVobo = false,
                                                    flagCancelar = puedeCancelar ? (compra.ST_OC == "A" && compra.st_impresa == "I") ? true : false : false,
                                                    numeroRequisicion = compra.numeroRequisicion,
                                                    tieneCuadro = compra.countCuadroComparativo > 0 ? true : false,
                                                    countCuadroComparativo = compra.countCuadroComparativo,
                                                    comentarios = compra.comentarios ?? "",
                                                    flagCompraInterna = false,

                                                    voboProveedorNoOptimo = false,
                                                    voboPendiente = false,
                                                    flagPuedeAutorizar = true,
                                                    puedeDarVoboProvNoOptimo = false,
                                                    cuadroGeneradoConCalificacion = false,
                                                    flagCompraTraspasoAlmacen = true
                                                });
                                            }
                                        }
                                    }
                                }
                                #endregion
                            }
                            else
                            {
                                #region Todas las Compras No Autorizadas (Administrador)
                                dynamic comprasEK = null;

                                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                                {
                                    case EmpresaEnum.Construplan:
                                    case EmpresaEnum.GCPLAN:
                                    case EmpresaEnum.EICI:
                                    case EmpresaEnum.Colombia:
                                        {
                                            #region Compras Construplan/EICI
                                            comprasEK = consultaCheckProductivo(string.Format(@"
                                                SELECT 
                                                    tblPrincipal.*, 
                                                    (SELECT COUNT(*) FROM so_cuadro_comparativo cua WHERE cua.cc = tblPrincipal.cc AND cua.numero = tblPrincipal.numeroRequisicion) AS countCuadroComparativo
                                                FROM (
                                                    SELECT 
                                                        oc.*, 
                                                        pr.nombre AS proveedorNom, 
                                                        (SELECT TOP 1 det.num_requisicion FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS numeroRequisicion, 
                                                        c.descripcion AS ccDesc 
                                                    FROM so_orden_compra oc 
                                                        LEFT JOIN sp_proveedores pr ON pr.numpro = oc.proveedor 
                                                        INNER JOIN cc c ON c.cc = oc.cc 
                                                    WHERE " + (isAuth ? "oc.ST_OC = 'A'" : "(oc.ST_OC IS NULL OR oc.ST_OC != 'A')") + @" {0} 
                                                ) AS tblPrincipal", cc != "" ? "AND oc.cc = '" + cc + "'" : ""));
                                            #endregion
                                            break;
                                        }
                                    case EmpresaEnum.Arrendadora:
                                        {
                                            #region Compras Arrendadora
                                            comprasEK = consultaCheckProductivo(string.Format(@"
                                                SELECT 
                                                    tblPrincipal.*, 
                                                    (SELECT COUNT(*) FROM so_cuadro_comparativo cua WHERE cua.cc = tblPrincipal.cc AND cua.numero = tblPrincipal.numeroRequisicion) AS countCuadroComparativo
                                                FROM (
                                                    SELECT 
                                                        oc.*, 
                                                        pr.nombre AS proveedorNom, 
                                                        (SELECT TOP 1 det.num_requisicion FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS numeroRequisicion, 
                                                        c.descripcion AS ccDesc, 
                                                        (SELECT TOP 1 det.area FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS area, 
                                                        (SELECT TOP 1 det.cuenta FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS cuenta 
                                                    FROM so_orden_compra oc 
                                                        LEFT JOIN sp_proveedores pr ON pr.numpro = oc.proveedor 
                                                        INNER JOIN cc c ON c.cc = oc.cc 
                                                    WHERE " + (isAuth ? "oc.ST_OC = 'A'" : "(oc.ST_OC IS NULL OR oc.ST_OC != 'A')") + @" {0} 
                                                ) AS tblPrincipal", cc != "" ? "AND oc.cc = '" + cc + "'" : ""));
                                            #endregion
                                            break;
                                        }
                                }

                                if (comprasEK != null)
                                {
                                    var compras = ((List<OrdenCompraDTO>)comprasEK.ToObject<List<OrdenCompraDTO>>()).ToList().Where(x => x.fecha >= fechaFiltroAnioActual).ToList();

                                    foreach (var com in compras)
                                    {
                                        #region Flag VoBo Pendiente / Flag Puede Dar VoBo
                                        bool flagVoBoPendiente = false;

                                        if (com.autoriza_activos == 1)
                                        {
                                            flagVoBoPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false; //Siempre son dos VoBos cuando la compra es Activo Fijo
                                        }

                                        if (com.tmc == 1)
                                        {
                                            flagVoBoPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false; //Siempre son dos VoBos cuando la compra es TMC
                                        }

                                        bool flagPuedeDarVobo;

                                        if ((int)com.vobo == relUser.empleado || (int)com.vobo2 == relUser.empleado || (int)com.vobo3 == relUser.empleado)
                                        {
                                            flagPuedeDarVobo = false;
                                        }
                                        else
                                        {
                                            flagPuedeDarVobo = true;
                                        }
                                        #endregion

                                        if (!lstCompras.Any(x => x.cc.ToUpper().Equals((string)com.cc) && x.numero == (int)com.numero))
                                        {
                                            lstCompras.Add(new OrdenCompraDTO
                                            {
                                                cc = com.cc,
                                                ccDesc = com.ccDesc,
                                                numero = com.numero != null ? com.numero : 0,
                                                proveedor = com.proveedor != null ? com.proveedor : 0,
                                                proveedorNom = com.proveedor != null && com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                                total = com.total != null ? com.total : 0,
                                                tipo_cambio = com.tipo_cambio != null ? com.tipo_cambio : 0,
                                                moneda = com.moneda != null ? com.moneda : 1,
                                                fecha = com.fecha != null ? com.fecha : default(DateTime),
                                                flagPuedeAutorizar = true,
                                                vobo = com.vobo != null ? com.vobo : 0,
                                                vobo2 = com.vobo2 != null ? com.vobo2 : 0,
                                                vobo3 = com.vobo3 != null ? com.vobo3 : 0,
                                                voboPendiente = flagVoBoPendiente,
                                                flagPuedeDarVobo = flagPuedeDarVobo,
                                                flagCancelar = puedeCancelar ? (com.ST_OC == "A" && com.st_impresa == "I") ? true : false : false,
                                                numeroRequisicion = com.numeroRequisicion != null ? (int)com.numeroRequisicion : 0,
                                                tieneCuadro = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo > 0 ? true : false : false,
                                                countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                                comentarios = com.comentarios,
                                                flagCompraInterna = false
                                            });
                                        }
                                    }

                                    //OBTENER CALIFICACIONES CUADRO COMPARATIVO SI LAS HAY
                                    ProvNoOptimos(compras, lstCompras, TipoCompraNoAutorizadaEnum.Admin);
                                }
                                #endregion
                            }

                            #region Gerardo Reina
                            if (relUser.empleado == 49)
                            {
                                #region COMENTADO
                                //                                dynamic comprasExtraEK = null;

                                //                                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                                //                                {
                                //                                    case EmpresaEnum.Construplan:
                                //                                    case EmpresaEnum.EICI:
                                //                                        {
                                //                                            #region Compras Construplan/EICI
                                //                                            comprasExtraEK = consultaCheckProductivo(string.Format(@"
                                //                                                SELECT 
                                //                                                    tblPrincipal.*, 
                                //                                                    (SELECT COUNT(*) FROM so_cuadro_comparativo cua WHERE cua.cc = tblPrincipal.cc AND cua.numero = tblPrincipal.numeroRequisicion) AS countCuadroComparativo
                                //                                                FROM (
                                //                                                    SELECT 
                                //                                                        oc.*, 
                                //                                                        pr.nombre AS proveedorNom, 
                                //                                                        (SELECT TOP 1 det.num_requisicion FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS numeroRequisicion, 
                                //                                                        c.descripcion AS ccDesc 
                                //                                                    FROM so_orden_compra oc 
                                //                                                        LEFT JOIN sp_proveedores pr ON pr.numpro = oc.proveedor 
                                //                                                        INNER JOIN cc c ON c.cc = oc.cc 
                                //                                                    WHERE 
                                //                                                        " + (isAuth ? "oc.ST_OC = 'A'" : "(oc.ST_OC IS NULL OR oc.ST_OC != 'A')") + @" {0} 
                                //                                                ) AS tblPrincipal", cc != "" ? "AND oc.cc = '" + cc + "'" : ""));
                                //                                            #endregion
                                //                                            break;
                                //                                        }
                                //                                    case EmpresaEnum.Arrendadora:
                                //                                        {
                                //                                            #region Compras Arrendadora
                                //                                            comprasExtraEK = consultaCheckProductivo(string.Format(@"
                                //                                                SELECT 
                                //                                                    tblPrincipal.*, 
                                //                                                    (SELECT COUNT(*) FROM so_cuadro_comparativo cua WHERE cua.cc = tblPrincipal.cc AND cua.numero = tblPrincipal.numeroRequisicion) AS countCuadroComparativo
                                //                                                FROM (
                                //                                                    SELECT 
                                //                                                        oc.*, 
                                //                                                        pr.nombre AS proveedorNom, 
                                //                                                        (SELECT TOP 1 det.num_requisicion FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS numeroRequisicion, 
                                //                                                        c.descripcion AS ccDesc, 
                                //                                                        (SELECT TOP 1 det.area FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS area, 
                                //                                                        (SELECT TOP 1 det.cuenta FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS cuenta 
                                //                                                    FROM so_orden_compra oc 
                                //                                                        LEFT JOIN sp_proveedores pr ON pr.numpro = oc.proveedor 
                                //                                                        INNER JOIN cc c ON c.cc = oc.cc 
                                //                                                    WHERE 
                                //                                                        " + (isAuth ? "oc.ST_OC = 'A'" : "(oc.ST_OC IS NULL OR oc.ST_OC != 'A')") + @" {0} 
                                //                                                ) AS tblPrincipal", cc != "" ? "AND oc.cc = '" + cc + "'" : "")
                                //                                            );
                                //                                            #endregion
                                //                                            break;
                                //                                        }
                                //                                }

                                //if (comprasExtraEK != null)
                                //{
                                //var comprasExtra = ((List<OrdenCompraDTO>)comprasExtraEK.ToObject<List<OrdenCompraDTO>>()).ToList().Where(x =>
                                //    x.fecha >= fechaFiltroAnioActual &&
                                //    !lstCompras.Any(y => (y.cc == x.cc && y.numero == x.numero))
                                //).ToList();
                                #endregion

                                var comprasExtra = listaComprasGeneral.Where(x => !lstCompras.Any(y => (y.cc == x.cc && y.numero == x.numero))).ToList();

                                dynamic facultamientosEK = null;

                                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                                {
                                    case EmpresaEnum.GCPLAN:
                                        {
                                            #region Facultamientos Construplan/EICI
                                            List<string> datos1 = comprasExtra.Select(x => @"
                                                    (
                                                        tblPrincipal.cc = '" + x.cc + @"' AND 
                                                        tblPrincipal.monto_minimo_autoriza <= " + Convert.ToDecimal((x.moneda == 1 ? x.total : (x.total * x.tipo_cambio)), CultureInfo.InvariantCulture) + @" AND 
                                                        tblPrincipal.monto_maximo_autoriza >= " + Convert.ToDecimal((x.moneda == 1 ? x.total : (x.total * x.tipo_cambio)), CultureInfo.InvariantCulture) + @" AND 
                                                        tblGrupos.tipo IN (SELECT SUBSTRING(insumo, 0, 3) FROM so_orden_compra_det WHERE cc = '" + x.cc + @"' AND numero = " + x.numero + @")
                                                    )").ToList();
                                            string datos2 = string.Join(" {0} ", vSesiones.sesionEmpresaActual == (int)EmpresaEnum.GCPLAN ? string.Empty : " OR " + datos1);
                                            string strQuery = string.Format(@"
                                                    SELECT 
                                                        tblPrincipal.cc, 
                                                        tblPrincipal.num_autorizacioines AS tblPrincipalNumAutorizaciones, 
                                                        tblPrincipal.monto_minimo_autoriza, 
                                                        tblPrincipal.monto_maximo_autoriza, 
                                                        tblPrincipal.consecutivo, 
                                                            
                                                        tblVobo.empleado AS empleadoVobo, 
                                                        tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                            
                                                        tblGrupos.tipo AS tipoGrupo, 
                                                        tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                            
                                                        tblAut.empleado AS empleadoAutoriza, 
                                                        tblAut.num_autorizaciones AS tblAutNumAutorizaciones, 
                                                        tblAut.orden AS ordenAutorizacion 
                                                    FROM so_cc_autorizacion tblPrincipal 
                                                        LEFT JOIN so_empleados_cc tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                                        LEFT JOIN so_rel_tipos_vobo tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                                        LEFT JOIN so_empleados_autoriza_cc tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                                    WHERE 
                                                        tblPrincipal.cc = 'RELLENO' {0} " + datos2 + @"
                                                    ORDER BY tblPrincipal.consecutivo", !string.IsNullOrEmpty(datos2) ? datos2 : string.Empty);
                                            facultamientosEK = consultaCheckProductivo(strQuery);
                                            #endregion
                                            break;
                                        }
                                    case EmpresaEnum.Construplan:
                                    case EmpresaEnum.EICI:
                                    case EmpresaEnum.Colombia:
                                        {
                                            #region Facultamientos Construplan/EICI
                                            List<string> datos1 = comprasExtra.Select(x => @"
                                                    (
                                                        tblPrincipal.cc = '" + x.cc + @"' AND 
                                                        tblPrincipal.monto_minimo_autoriza <= " + Convert.ToDecimal((x.moneda == 1 ? x.total : (x.total * x.tipo_cambio)), CultureInfo.InvariantCulture) + @" AND 
                                                        tblPrincipal.monto_maximo_autoriza >= " + Convert.ToDecimal((x.moneda == 1 ? x.total : (x.total * x.tipo_cambio)), CultureInfo.InvariantCulture) + @" AND 
                                                        tblGrupos.tipo IN (SELECT SUBSTRING(insumo, 0, 3) FROM so_orden_compra_det WHERE cc = '" + x.cc + @"' AND numero = " + x.numero + @")
                                                    )").ToList();
                                            string datos2 = string.Join(" OR ", datos1);
                                            string strQuery = string.Format(@"
                                                    SELECT 
                                                        tblPrincipal.cc, 
                                                        tblPrincipal.num_autorizacioines AS tblPrincipalNumAutorizaciones, 
                                                        tblPrincipal.monto_minimo_autoriza, 
                                                        tblPrincipal.monto_maximo_autoriza, 
                                                        tblPrincipal.consecutivo, 
                                                            
                                                        tblVobo.empleado AS empleadoVobo, 
                                                        tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                            
                                                        tblGrupos.tipo AS tipoGrupo, 
                                                        tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                            
                                                        tblAut.empleado AS empleadoAutoriza, 
                                                        tblAut.num_autorizaciones AS tblAutNumAutorizaciones, 
                                                        tblAut.orden AS ordenAutorizacion 
                                                    FROM so_cc_autorizacion tblPrincipal 
                                                        LEFT JOIN so_empleados_cc tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                                        LEFT JOIN so_rel_tipos_vobo tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                                        LEFT JOIN so_empleados_autoriza_cc tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                                    WHERE 
                                                        tblPrincipal.cc = 'RELLENO' OR " + datos2 + @"
                                                    ORDER BY tblPrincipal.consecutivo");
                                            facultamientosEK = consultaCheckProductivo(strQuery);
                                            #endregion
                                            break;
                                        }
                                    case EmpresaEnum.Arrendadora:
                                        {
                                            #region Facultamientos Arrendadora
                                            List<string> datos1 = comprasExtra.Select(x => @"
                                                    (
                                                        tblPrincipal.area = " + x.area + @" AND 
                                                        tblPrincipal.cuenta = " + x.cuenta + @" AND
                                                        tblPrincipal.monto_minimo_autoriza <= " + Convert.ToDecimal((x.moneda == 1 ? x.total : (x.total * x.tipo_cambio)), CultureInfo.InvariantCulture) + @" AND 
                                                        tblPrincipal.monto_maximo_autoriza >= " + Convert.ToDecimal((x.moneda == 1 ? x.total : (x.total * x.tipo_cambio)), CultureInfo.InvariantCulture) + @" AND 
                                                        tblGrupos.tipo IN (SELECT SUBSTRING(insumo, 0, 3) FROM so_orden_compra_det WHERE cc = '" + x.cc + @"' AND numero = " + x.numero + @")
                                                    )").ToList();
                                            string datos2 = string.Join(" OR ", datos1);

                                            facultamientosEK = consultaCheckProductivo(string.Format(@"
                                                    SELECT 
                                                        tblPrincipal.area, 
                                                        tblPrincipal.cuenta, 
                                                        tblPrincipal.num_autorizaciones AS tblPrincipalNumAutorizaciones, 
                                                        tblPrincipal.monto_minimo_autoriza, 
                                                        tblPrincipal.monto_maximo_autoriza, 
                                                        tblPrincipal.consecutivo, 
                                                    
                                                        tblVobo.empleado AS empleadoVobo, 
                                                        tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                    
                                                        tblGrupos.tipo AS tipoGrupo, 
                                                        tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                    
                                                        tblAut.empleado AS empleadoAutoriza, 
                                                        tblAut.num_autorizaciones AS tblAutNumAutorizaciones 
                                                    FROM so_area_cta_autorizacion tblPrincipal 
                                                        LEFT JOIN so_empleados_area_cta tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                                        LEFT JOIN so_rel_tipos_vobo_area_cta tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                                        LEFT JOIN so_empleados_autoriza_area_cta tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                                    WHERE 
                                                        tblPrincipal.area = 999999 OR " + datos2 + @"
                                                    ORDER BY tblPrincipal.consecutivo"));
                                            #endregion
                                            break;
                                        }
                                }

                                foreach (var com in comprasExtra)
                                {
                                    #region Flag VoBo Pendiente
                                    bool flagVoboPendiente = false;

                                    if (facultamientosEK != null)
                                    {
                                        var facultamientos = (List<dynamic>)facultamientosEK.ToObject<List<dynamic>>();

                                        if (com.autoriza_activos == 0 && com.tmc == 0)
                                        {
                                            int vobosRequeridos = facultamientos[0].tblVoboNumAutorizaciones != null ? (int)facultamientos[0].tblVoboNumAutorizaciones : 0;

                                            switch (vobosRequeridos)
                                            {
                                                case 1:
                                                    flagVoboPendiente = (int)com.vobo == 0 ? true : false;
                                                    break;
                                                case 2:
                                                    flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false;
                                                    break;
                                                case 3:
                                                    flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 || (int)com.vobo3 == 0 ? true : false;
                                                    break;
                                            }
                                        }
                                        else if (com.autoriza_activos == 1 && com.tmc == 0)
                                        {
                                            flagVoboPendiente = com.vobo == 0 || com.vobo2 == 0 ? true : false; //Siempre son dos VoBos cuando la compra es Activo Fijo
                                        }
                                        else if (com.autoriza_activos == 0 && com.tmc == 1)
                                        {
                                            flagVoboPendiente = com.vobo == 0 ? true : false; //Siempre es un VoBo cuando la compra es TMC.
                                        }
                                    }
                                    #endregion

                                    if (!lstCompras.Any(x => x.cc.ToUpper() == com.cc && x.numero == com.numero))
                                    {
                                        lstCompras.Add(new OrdenCompraDTO
                                        {
                                            cc = com.cc,
                                            ccDesc = com.ccDesc,
                                            numero = com.numero != null ? com.numero : 0,
                                            proveedor = com.proveedor != null ? com.proveedor : 0,
                                            proveedorNom = com.proveedor != null && com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                            total = com.total != null ? com.total : 0,
                                            tipo_cambio = com.tipo_cambio != null ? com.tipo_cambio : 0,
                                            moneda = com.moneda != null ? com.moneda : 1,
                                            fecha = com.fecha != null ? com.fecha : default(DateTime),
                                            flagPuedeAutorizar = false,
                                            vobo = com.vobo != null ? com.vobo : 0,
                                            vobo2 = com.vobo2 != null ? com.vobo2 : 0,
                                            vobo3 = com.vobo3 != null ? com.vobo3 : 0,
                                            voboPendiente = flagVoboPendiente,
                                            flagPuedeDarVobo = false,
                                            flagCancelar = puedeCancelar ? (com.ST_OC == "A" && com.st_impresa == "I") ? true : false : false,
                                            numeroRequisicion = com.numeroRequisicion != null ? (int)com.numeroRequisicion : 0,
                                            tieneCuadro = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo > 0 ? true : false : false,
                                            countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                            flagActivoFijo = com.autoriza_activos == 1,
                                            flagTMC = com.tmc == 1,
                                            comentarios = com.comentarios,
                                            flagCompraInterna = false
                                        });
                                    }
                                }

                                //OBTENER CALIFICACIONES CUADRO COMPARATIVO SI LAS HAY
                                ProvNoOptimos(comprasExtra, lstCompras, TipoCompraNoAutorizadaEnum.Jefe);
                                //}
                            }
                            #endregion

                            #region Compra Interna
                            List<dynamic> listaProveedores = _contextEnkontrol.Select<dynamic>(vSesiones.sesionEmpresaActual == 1 ? EnkontrolEnum.CplanProd : vSesiones.sesionEmpresaActual == (int)EmpresaEnum.GCPLAN ? EnkontrolEnum.GCPLAN : EnkontrolEnum.ArrenProd, new OdbcConsultaDTO()
                            {
                                consulta = @"SELECT * FROM sp_proveedores"
                            });

                            List<OrdenCompraDTO> listaComprasInternas = _context.Select<OrdenCompraDTO>(new DapperDTO
                            {
                                baseDatos = vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : vSesiones.sesionEmpresaActual == (int)EmpresaEnum.GCPLAN ? MainContextEnum.GCPLAN : MainContextEnum.Arrendadora,
                                consulta = @"
                                    SELECT
                                        t1.cc, t3.descripcion AS ccDesc, t1.comentarios, t1.fecha, t1.moneda, t1.numero, t1.proveedor, t1.total, t2.area, t2. cuenta, t1.vobo, t1.vobo2, t1.vobo3
	                                FROM tblCom_OrdenCompra_Interna AS t1
	                                    INNER JOIN tblCom_OrdenCompraDet_Interna AS t2 ON t1.id = t2.idOrdenCompra
	                                    INNER JOIN tblP_CC AS t3 ON t1.cc = t3.cc
                                    WHERE t1.ST_OC != 'A'",
                                parametros = new { registroActivo = true }
                            }).Select(x => new OrdenCompraDTO
                            {
                                cc = x.cc,
                                ccDesc = x.ccDesc,
                                comentarios = x.comentarios,
                                fecha = x.fecha,
                                moneda = x.moneda,
                                numero = x.numero,
                                proveedor = x.proveedor,
                                proveedorNom = listaProveedores.Where(y => (int)y.numpro == x.proveedor).Select(z => (string)z.nombre).FirstOrDefault(),
                                total = x.total,
                                consigna = x.consigna,
                                area = x.area,
                                cuenta = x.cuenta,
                                vobo = x.vobo,
                                vobo2 = x.vobo2,
                                vobo3 = x.vobo3,
                                esOC_Interna = true,
                                voboPendiente = true,
                                flagPuedeDarVobo = false
                            }).ToList();

                            foreach (var item in listaComprasInternas)
                            {
                                #region SE VERIFICA SI HACE FALTA VOBOS
                                int cantVobos = getVobos(item).Select(s => s.numVobos).FirstOrDefault();
                                int cantVobosRealizados = 0;

                                if (item.vobo != 0)
                                    cantVobosRealizados++;

                                if (item.vobo2 != 0)
                                    cantVobosRealizados++;

                                if (item.vobo3 != 0)
                                    cantVobosRealizados++;
                                #endregion

                                if (cantVobosRealizados < cantVobos)
                                {
                                    #region SE VERIFICA SI EL USUARIO LOGUEADO PUEDE DAR VOBO
                                    List<int> lstUsuariosEK = getVobos(item).Select(s => s.usu_numero).ToList();
                                    foreach (var usuarioVobo in lstUsuariosEK)
                                    {
                                        if (usuarioVobo > 0)
                                        {
                                            tblP_Usuario_Enkontrol objUsuarioEK = _context.tblP_Usuario_Enkontrol.Where(w => w.empleado == usuarioVobo).FirstOrDefault();
                                            if (objUsuarioEK != null)
                                            {
                                                if (objUsuarioEK.idUsuario == (int)vSesiones.sesionUsuarioDTO.id) item.flagPuedeDarVobo = true;
                                                if (item.vobo != (int)vSesiones.sesionUsuarioDTO.id && item.vobo2 != (int)vSesiones.sesionUsuarioDTO.id && item.vobo3 != (int)vSesiones.sesionUsuarioDTO.id) item.voboPendiente = true;
                                                else item.voboPendiente = false;
                                            }
                                        }
                                    }
                                    #endregion
                                }
                                else if (cantVobosRealizados > 0 && cantVobosRealizados == cantVobos)
                                {
                                    #region SE VERIFICA SI EL USUARIO LOGUEADO PUEDE AUTORIZAR
                                    int idUsuarioEK = 0;
                                    idUsuarioEK = getAutorizaciones(item).Select(s => s.usu_numero).FirstOrDefault();
                                    if (idUsuarioEK > 0)
                                    {
                                        tblP_Usuario_Enkontrol objUsuarioEK = _context.tblP_Usuario_Enkontrol.Where(w => w.empleado == idUsuarioEK).FirstOrDefault();
                                        if (objUsuarioEK != null)
                                        {
                                            item.voboPendiente = false;
                                            item.flagPuedeAutorizar = objUsuarioEK.idUsuario == (int)vSesiones.sesionUsuarioDTO.id ? true : false;
                                        }
                                    }
                                    #endregion
                                }
                            }

                            lstCompras.AddRange(listaComprasInternas);
                            #endregion

                            #region Determina las compras reseteadas y de consigna
                            if (lstCompras.Count() > 0)
                            {
                                var listaComprasReseteadas = _context.tblCom_ComprasReset.Where(x => x.estatus && x.registroAplica).ToList();

                                var listaComprasConRequisicion = lstCompras.Join(
                                    _context.tblCom_Req.Where(x => x.estatusRegistro),
                                    c => new { c.cc, numero = c.numeroRequisicion },
                                    r => new { r.cc, r.numero },
                                    (c, r) => new { c, r }
                                ).ToList();

                                foreach (var compra in lstCompras)
                                {
                                    var compraResetSIGOPLAN = listaComprasReseteadas.FirstOrDefault(x => x.cc == compra.cc && x.numero == compra.numero);

                                    if (compraResetSIGOPLAN != null)
                                    {
                                        if (compraResetSIGOPLAN.tipo == TipoComprasResetEnum.comprasImpresas)
                                        {
                                            compra.flagCompraReset = true;
                                        }
                                        else if (compraResetSIGOPLAN.tipo == TipoComprasResetEnum.comprasNoImpresas)
                                        {
                                            compra.flagCompraResetNoImpresa = true;
                                        }
                                    }

                                    var compraConRequisicion = listaComprasConRequisicion.FirstOrDefault(x => x.c.cc == compra.cc && x.c.numero == compra.numero);

                                    if (compraConRequisicion != null)
                                    {
                                        compra.consigna = compraConRequisicion.r.consigna != null ? (bool)compraConRequisicion.r.consigna : false;
                                        compra.crc = compraConRequisicion.r.crc;
                                        compra.convenio = compraConRequisicion.r.convenio;
                                    }
                                }
                            }
                            #endregion

                            #region Compras Traspaso de Almacén
                            var listaComprasQuitar = new List<int>();

                            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                            {
                                foreach (var compra in lstCompras)
                                {
                                    if (compra.proveedor == 5412) //Verificar que la compra tenga proveedor de Construplan
                                    {
                                        var listaPartidasEK = _contextEnkontrol.Select<OrdenCompraDetDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                        {
                                            consulta = @"SELECT * FROM so_orden_compra_det WHERE cc = ? AND numero = ?",
                                            parametros = new List<OdbcParameterDTO> {
                                                new OdbcParameterDTO() { nombre = "cc", tipo = OdbcType.VarChar, valor = compra.cc },
                                                new OdbcParameterDTO() { nombre = "numero", tipo = OdbcType.Numeric, valor = compra.numero }
                                            }
                                        });

                                        if (listaPartidasEK.FirstOrDefault(x => x.partida == 1).area == 1 && listaPartidasEK.FirstOrDefault(x => x.partida == 1).cuenta == 9) //Verificar que la compra tenga el área-cuenta "1-9" en la primer partida
                                        {
                                            if (relUser.empleado == 59 || relUser.empleado == 1) //Verificar que el usuario logeado sea Alexis Samaniego (o un administrador)
                                            {
                                                compra.voboProveedorNoOptimo = false;
                                                compra.voboPendiente = false;
                                                compra.flagPuedeAutorizar = true;
                                                compra.puedeDarVoboProvNoOptimo = false;
                                                compra.cuadroGeneradoConCalificacion = false;
                                                compra.flagCompraTraspasoAlmacen = true;
                                            }
                                            else
                                            {
                                                compra.flagPuedeAutorizar = false;
                                                listaComprasQuitar.Add(lstCompras.FindIndex(x => x.cc == compra.cc && x.numero == compra.numero));
                                            }
                                        }
                                    }
                                }
                            }

                            foreach (var item in listaComprasQuitar.OrderByDescending(x => x))
                            {
                                lstCompras.RemoveAt(item);
                            }
                            #endregion

                            lstCompras = lstCompras.OrderByDescending(x => x.voboPendiente && x.flagPuedeDarVobo).ThenByDescending(x => !x.voboPendiente && x.flagPuedeAutorizar).ToList();

                            return lstCompras;
                            #endregion
                        }
                }
            }
            catch (Exception e)
            {
                LogError(0, 0, _NOMBRE_CONTROLADOR, "getListaCompras", e, AccionEnum.CONSULTA, 0, new { isAuth = isAuth, cc = cc, propias = propias });
                return null;
            }
        }

        public List<OrdenCompraDTO> getListaComprasRespaldo(bool isAuth, string cc, bool propias)
        {
            List<OrdenCompraDTO> lstCompras = new List<OrdenCompraDTO>();

            try
            {
                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {
                    case EmpresaEnum.Peru:
                        {
                            #region PERU
                            using (var _starSoft = new MainContextPeruStarSoft003BDCOMUN())
                            {
                                // CATALOGOS
                                List<MAEPROV> lstProveedores = _starSoft.MAEPROV.ToList();
                                List<tblP_CC> lstCC = _context.tblP_CC.Where(w => w.estatus).ToList();
                                List<tblCom_OrdenCompra> listaCompras = _context.tblCom_OrdenCompra.Where(w => w.estatusRegistro && (w.ST_OC == null || w.ST_OC != "A")).ToList();
                                List<int> FK_OrdenesCompras = listaCompras.Select(s => s.id).ToList();
                                List<tblCom_OrdenCompraDet> listaComprasDet = _context.tblCom_OrdenCompraDet.Where(w => FK_OrdenesCompras.Contains(w.idOrdenCompra) && w.estatusRegistro).ToList();

                                OrdenCompraDTO objCompraDTO = new OrdenCompraDTO();
                                foreach (var item in listaCompras)
                                {
                                    tblP_CC objCC = lstCC.Where(w => w.cc == item.cc && w.estatus).FirstOrDefault();
                                    if (objCC == null) { throw new Exception("Ocurrió un error al obtener el CC de la compra."); }

                                    objCompraDTO = new OrdenCompraDTO();
                                    objCompraDTO.cc = item.cc;
                                    objCompraDTO.ccDesc = string.Format("[{0}] {1}", objCC.cc, objCC.descripcion);
                                    objCompraDTO.numero = item.numero;
                                    objCompraDTO.numeroRequisicion = listaComprasDet.Where(w => w.idOrdenCompra == item.id).Select(s => s.num_requisicion).FirstOrDefault();
                                    objCompraDTO.PERU_proveedor = item.PERU_proveedor;
                                    objCompraDTO.total = (decimal)item.total;
                                    objCompraDTO.moneda = Convert.ToInt32(item.moneda);
                                    objCompraDTO.fecha = item.fecha;
                                    objCompraDTO.comentarios = item.comentarios;
                                    objCompraDTO.tipo_cambio = item.tipo_cambio;
                                    objCompraDTO.estatusRegistro = item.estatusRegistro;
                                    objCompraDTO.vobo = item.vobo;
                                    objCompraDTO.vobo2 = item.vobo2;
                                    objCompraDTO.PERU_tipoCompra = item.PERU_tipoCompra;
                                    lstCompras.Add(objCompraDTO);
                                }

                                var relUser = ufs.getUsuarioService().getUserEk(vSesiones.sesionUsuarioDTO.id);

                                foreach (var item in lstCompras)
                                {
                                    item.empresa = vSesiones.sesionEmpresaActual;

                                    #region NOMBRE PROVEEDOR
                                    if (!string.IsNullOrEmpty(item.PERU_proveedor))
                                    {
                                        MAEPROV objProveedor = lstProveedores.Where(w => w.PRVCCODIGO == item.PERU_proveedor).FirstOrDefault();
                                        if (objProveedor != null)
                                            item.proveedorNom = !string.IsNullOrEmpty(objProveedor.PRVCNOMBRE) ? objProveedor.PRVCNOMBRE : string.Empty;
                                    }
                                    #endregion

                                    #region SE AGREGA FORMATO DE PERU EN NUM_OC Y NUM_REQ
                                    string numOC = item.numero.ToString().PadLeft(13, '0');
                                    item.strNumOC = numOC.ToString();

                                    string numReq = item.numeroRequisicion.ToString().PadLeft(10, '0');
                                    item.strNumReq = numReq.ToString();
                                    #endregion

                                    #region VOBO'S
                                    bool terminoProcesoVoBos = false;
                                    List<VoboDTO> lstVoBos = new List<VoboDTO>();
                                    OrdenCompraDTO objCompra = lstCompras.Where(w => w.cc == item.cc && w.numero == item.numero && w.estatusRegistro && w.PERU_tipoCompra == item.PERU_tipoCompra).FirstOrDefault();
                                    if (objCompra != null)
                                        lstVoBos = getVobos(objCompra);

                                    if (lstVoBos != null)
                                    {
                                        // SE VERIFICA SI HAY VOBOS PENDIENTES
                                        int cantVobosRealizados = 0;
                                        if (objCompra.vobo > 0)
                                            cantVobosRealizados++;

                                        if (objCompra.vobo2 > 0)
                                            cantVobosRealizados++;

                                        if (lstVoBos.Count() > 0)
                                        {
                                            // SE VERIFICA LA CANT DE VOBOS REQUERIDOS
                                            //int cantVobosRequeridos = lstVoBos.Count();
                                            int cantVobosRequeridos = lstVoBos[0].numVobos;

                                            if (cantVobosRequeridos > cantVobosRealizados)
                                            {
                                                item.voboPendiente = true;

                                                if (objCompra.vobo == relUser.empleado || objCompra.vobo2 == relUser.empleado)
                                                {
                                                    item.flagPuedeDarVobo = false;
                                                }
                                                else
                                                {
                                                    item.flagPuedeDarVobo = lstVoBos.FirstOrDefault(x => x.usu_numero == relUser.empleado) != null;
                                                }
                                            }
                                            else
                                                terminoProcesoVoBos = true;
                                        }
                                        else
                                        {
                                            terminoProcesoVoBos = true;
                                        }
                                    }
                                    #endregion

                                    #region AUTORIZANTES
                                    List<dynamic> lstAutorizantes = new List<dynamic>();
                                    if (objCompra != null)
                                        lstAutorizantes = getAutorizaciones(objCompra);

                                    if (terminoProcesoVoBos)
                                    {
                                        foreach (var objAut in lstAutorizantes)
                                        {
                                            int FK_UsuarioEK = objAut.usu_numero;
                                            tblP_Usuario_Enkontrol objUsuario = _context.tblP_Usuario_Enkontrol.Where(w => w.empleado == FK_UsuarioEK).FirstOrDefault();
                                            if (objUsuario != null)
                                            {
                                                if (objUsuario.idUsuario == (int)vSesiones.sesionUsuarioDTO.id)
                                                {
                                                    item.flagPuedeAutorizar = true;
                                                    item.voboPendiente = false;
                                                }
                                            }
                                        }
                                    }
                                    #endregion
                                }

                                return lstCompras;
                            }
                            #endregion
                        }
                    case EmpresaEnum.Colombia:
                        {
                            #region COLOMBIA
                            var usuario = vSesiones.sesionUsuarioDTO;
                            var relUser = ufs.getUsuarioService().getUserEk(usuario.id);

                            var usuarioEnkontrol = _context.Select<UsuarioEnkontrolDTO>(new DapperDTO
                            {
                                baseDatos = MainContextEnum.Colombia,
                                consulta = @"SELECT * FROM empleadosFacultamientos WHERE empleado = @empleado",
                                parametros = new { empleado = relUser.empleado }
                            }).FirstOrDefault();

                            var listCompradorAdmin = _context.tblCom_Comprador_Admin.Select(x => x.empleado).ToList();
                            var puedeCancelar = relUser.empleado == 1 || listCompradorAdmin.Contains(relUser.empleado);

                            DateTime fechaFiltroAnioActual = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1).AddMonths(-3);

                            if (relUser.empleado != 1)
                            {
                                #region Compras No Autorizadas por Centro de Costo, monto y Tipo-Grupo
                                dynamic comprasMontoEK = null;
                                comprasMontoEK = consultaCheckProductivo(
                                    string.Format(@"SELECT tblPrincipal.*, 
                                                (SELECT COUNT(*) FROM DBA.so_cuadro_comparativo cua WHERE cua.cc = tblPrincipal.cc AND cua.numero = tblPrincipal.numeroRequisicion) AS countCuadroComparativo
                                            FROM (
                                        SELECT 
                                            oc.*, 
                                            pr.nombre AS proveedorNom, 
                                            (SELECT TOP 1 det.num_requisicion FROM DBA.so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS numeroRequisicion, 
                                            c.descripcion AS ccDesc, 
                                            (SELECT TOP 1 det.area FROM DBA.so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS area, 
                                            (SELECT TOP 1 det.cuenta FROM DBA.so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS cuenta 
                                        FROM DBA.so_orden_compra oc 
                                            LEFT JOIN DBA.sp_proveedores pr ON pr.numpro = oc.proveedor 
                                            INNER JOIN DBA.cc c ON c.cc = oc.cc 
                                        WHERE 
                                            " + (isAuth ? "(oc.vobo_aut = 'S' OR oc.aut_aut = 'S')" : "((oc.vobo_aut = 'N' AND oc.aut_aut = 'N') AND vobo IS NOT NULL)") + @"  AND fecha >= '" + fechaFiltroAnioActual.ToString("yyyy-MM-dd") + @"' AND c.st_ppto!='T' 
                                            {0}) AS tblPrincipal", cc != "" ? "AND oc.cc = '" + cc + "'" : "")
                                );

                                if (comprasMontoEK != null)
                                {
                                    var comprasMonto = (List<OrdenCompraDTO>)comprasMontoEK.ToObject<List<OrdenCompraDTO>>();

                                    comprasMonto = comprasMonto.Where(x => x.fecha >= fechaFiltroAnioActual).ToList();

                                    List<PermisoMontoDTO> facultamientoEmpleadoEK = new List<PermisoMontoDTO>();

                                    List<string> ccs = comprasMonto.Select(x => x.area + "-" + x.cuenta).ToList();

                                    string tt = string.Format(@"SELECT distinct
                                                    tblPrincipal.area, 
                                                    tblPrincipal.cuenta, 
                                                    tblPrincipal.num_autorizaciones AS tblPrincipalNumAutorizaciones, 
                                                    tblPrincipal.monto_minimo_autoriza, 
                                                    tblPrincipal.monto_maximo_autoriza, 
                                                    tblPrincipal.consecutivo, 
                                                        
                                                    tblVobo.empleado AS empleadoVobo, 
                                                    tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                        
                                                    tblGrupos.tipo AS tipoGrupo, 
                                                    tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                        
                                                    tblAut.empleado AS empleadoAutoriza, 
                                                    tblAut.num_autorizaciones AS tblAutNumAutorizaciones 
                                                FROM DBA.so_area_cta_autorizacion tblPrincipal 
                                                    LEFT JOIN DBA.so_empleados_area_cta tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                                    LEFT JOIN DBA.so_rel_tipos_vobo_area_cta tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                                    LEFT JOIN DBA.so_empleados_autoriza_area_cta tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                                WHERE 
                                                    tblVobo.empleado = {0} OR tblAut.empleado = {0} AND REPLACE(STR(tblPrincipal.area)+'-'+STR(tblPrincipal.cuenta),' ','') in ('{1}')
                                                ORDER BY tblPrincipal.consecutivo", relUser.empleado, string.Join("','", ccs));

                                    facultamientoEmpleadoEK = _context.Select<PermisoMontoDTO>(new DapperDTO
                                    {
                                        baseDatos = MainContextEnum.Colombia,
                                        consulta = @"SELECT distinct
                                                    tblPrincipal.area, 
                                                    tblPrincipal.cuenta, 
                                                    tblPrincipal.num_autorizaciones AS tblPrincipalNumAutorizaciones, 
                                                    tblPrincipal.monto_minimo_autoriza, 
                                                    tblPrincipal.monto_maximo_autoriza, 
                                                    tblPrincipal.consecutivo, 
                                                        
                                                    tblVobo.empleado AS empleadoVobo, 
                                                    tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                        
                                                    tblGrupos.tipo AS tipoGrupo, 
                                                    tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                        
                                                    tblAut.empleado AS empleadoAutoriza, 
                                                    tblAut.num_autorizaciones AS tblAutNumAutorizaciones 
                                                FROM DBA.so_area_cta_autorizacion tblPrincipal 
                                                    LEFT JOIN DBA.so_empleados_area_cta tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                                    LEFT JOIN DBA.so_rel_tipos_vobo_area_cta tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                                    LEFT JOIN DBA.so_empleados_autoriza_area_cta tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                                WHERE 
                                                    tblVobo.empleado = @empleado OR tblAut.empleado = @empleado AND REPLACE(STR(tblPrincipal.area)+'-'+STR(tblPrincipal.cuenta),' ','') in ('ccs')
                                                ORDER BY tblPrincipal.consecutivo",
                                        parametros = new { empleado = relUser.empleado, ccs = string.Join("','", ccs) }
                                    }).ToList();

                                    if (facultamientoEmpleadoEK != null)
                                    {
                                        //var facultamientoEmpleado = (List<PermisoMontoDTO>)facultamientoEmpleadoEK.ToObject<List<PermisoMontoDTO>>();
                                        List<PermisoMontoDTO> facultamientoEmpleado = facultamientoEmpleadoEK.ToList();
                                        var datos1 = comprasMonto.Select(x => "(cc='" + x.cc + "' and numero=" + x.numero + ")").ToList();
                                        var datos2 = string.Join(" or ", datos1);

                                        var listTipoGrupoGeneral = (List<tipoGrupoDTO>)consultaCheckProductivo(
                                               string.Format(@"SELECT cc,numero,SUBSTRING(insumo,0,3) as tipoGrupo FROM DBA.so_orden_compra_det WHERE cc = 'relleno' or " + datos2)
                                           ).ToObject<List<tipoGrupoDTO>>();
                                        foreach (var com in comprasMonto)
                                        {
                                            if (com.cc.Equals("LOK"))
                                            {
                                                var a = "";
                                            }
                                            var total = Convert.ToDecimal((com.moneda == 1 ? com.total : (com.total * com.tipo_cambio)), CultureInfo.InvariantCulture);
                                            var listTipoGrupo = listTipoGrupoGeneral.Where(x => x.cc == com.cc && x.numero == com.numero).Select(x => x.tipoGrupo).ToList();
                                            var facultamientosEmpleado = facultamientoEmpleado.Where(x =>
                                                ((vSesiones.sesionEmpresaActual == 1 || vSesiones.sesionEmpresaActual == 4) ? x.cc.ToUpper().Equals(com.cc) : (x.area == com.area && x.cuenta == com.cuenta)) &&
                                                x.monto_minimo_autoriza <= total &&
                                                x.monto_maximo_autoriza >= total &&
                                                (x.tipoGrupo != null ? listTipoGrupo.Contains((int)x.tipoGrupo) : false)
                                            ).ToList();

                                            if (facultamientosEmpleado.Count > 0)
                                            {
                                                bool flagPuedeDarVobo = false;

                                                if ((int)com.vobo == relUser.empleado || (int)com.vobo2 == relUser.empleado || (int)com.vobo3 == relUser.empleado)
                                                {
                                                    flagPuedeDarVobo = false;
                                                }
                                                else
                                                {
                                                    flagPuedeDarVobo = facultamientosEmpleado.FirstOrDefault(x => x.empleadoVobo == relUser.empleado) != null;
                                                }

                                                bool flagPuedeAutorizar = facultamientosEmpleado.FirstOrDefault(x => x.empleadoAutoriza == relUser.empleado) != null;

                                                if (!lstCompras.Any(x => x.cc == (string)com.cc && x.numero == (int)com.numero))
                                                {
                                                    bool flagVoboPendiente = false;

                                                    var vobosRequeridos = facultamientosEmpleado[0].tblVoboNumAutorizaciones ?? 0;

                                                    switch (vobosRequeridos)
                                                    {
                                                        case 1:
                                                            flagVoboPendiente = (int)com.vobo == 0 ? true : false;
                                                            break;
                                                        case 2:
                                                            flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false;
                                                            break;
                                                        case 3:
                                                            flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 || (int)com.vobo3 == 0 ? true : false;
                                                            break;
                                                    }

                                                    lstCompras.Add(new OrdenCompraDTO
                                                    {
                                                        cc = com.cc,
                                                        ccDesc = com.ccDesc,
                                                        numero = com.numero != null ? com.numero : 0,
                                                        proveedor = com.proveedor != null ? com.proveedor : 0,
                                                        proveedorNom = com.proveedor != null && com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                                        total = com.total != null ? com.total : 0,
                                                        tipo_cambio = com.tipo_cambio != null ? com.tipo_cambio : 0,
                                                        moneda = com.moneda != null ? com.moneda : 1,
                                                        fecha = com.fecha != null ? com.fecha : default(DateTime),
                                                        flagPuedeAutorizar = flagPuedeAutorizar,
                                                        vobo = com.vobo != null ? com.vobo : 0,
                                                        vobo2 = com.vobo2 != null ? com.vobo2 : 0,
                                                        vobo3 = com.vobo3 != null ? com.vobo3 : 0,
                                                        voboPendiente = flagVoboPendiente,
                                                        flagPuedeDarVobo = flagPuedeDarVobo,
                                                        flagCancelar = puedeCancelar ? ((com.vobo_aut == "S" || com.aut_aut == "S") && com.st_impresa == "I") ? true : false : false,
                                                        numeroRequisicion = com.numeroRequisicion != null ? (int)com.numeroRequisicion : 0,
                                                        tieneCuadro = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo > 0 ? true : false : false,
                                                        countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                                        comentarios = com.comentarios,
                                                        flagCompraInterna = false
                                                    });
                                                }
                                            }
                                        }
                                    }

                                    //OBTENER CALIFICACIONES CUADRO COMPARATIVO SI LAS HAY
                                    //ProvNoOptimos(comprasMonto, lstCompras, TipoCompraNoAutorizadaEnum.PorCC_Monto_Grupo);
                                }
                                #endregion

                                #region Compras No Autorizadas por Activo Fijo
                                List<dynamic> empleadoVoboActivoFijo = _context.Select<dynamic>(new DapperDTO
                                {
                                    baseDatos = MainContextEnum.Colombia,
                                    consulta = @"SELECT * FROM so_cc_vobo WHERE empleado = @empleado",
                                    parametros = new { empleado = relUser.empleado }
                                }).ToList();

                                var empleadoAutorizaActivoFijo = usuarioEnkontrol.autoriza_activos_fijos == 1;

                                if (empleadoVoboActivoFijo != null || empleadoAutorizaActivoFijo)
                                {
                                    dynamic comprasActivoFijoEK = null;
                                    comprasActivoFijoEK = consultaCheckProductivo(
                                        string.Format(@"SELECT tblPrincipal.*, 
                                                        (SELECT COUNT(*) FROM DBA.so_cuadro_comparativo cua WHERE cua.cc = tblPrincipal.cc AND cua.numero = tblPrincipal.numeroRequisicion) AS countCuadroComparativo
                                                        FROM (
                                                        SELECT 
                                                            oc.*, 
                                                            pr.nombre AS proveedorNom, 
                                                            (SELECT TOP 1 det.num_requisicion FROM DBA.so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS numeroRequisicion, 
                                                            c.descripcion AS ccDesc, 
                                                            CASE WHEN 
                                                                (SELECT TOP 1 det.area FROM DBA.so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) IS NULL THEN 0 ELSE
                                                                (SELECT TOP 1 det.area FROM DBA.so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) END AS area, 
                                                            CASE WHEN
                                                                (SELECT TOP 1 det.cuenta FROM DBA.so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) IS NULL THEN 0 ELSE
                                                                (SELECT TOP 1 det.cuenta FROM DBA.so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) END AS cuenta 
                                                        FROM DBA.so_orden_compra oc 
                                                            LEFT JOIN DBA.sp_proveedores pr ON pr.numpro = oc.proveedor 
                                                            INNER JOIN DBA.cc c ON c.cc = oc.cc 
                                                        WHERE 
                                                            " + (isAuth ? "(oc.vobo_aut = 'S' OR oc.aut_aut = 'S')" : "(oc.vobo_aut = 'N' AND oc.aut_aut = 'N') AND oc.vobo IS NOT NULL") + @" 
                                                            {0}) AS tblPrincipal", cc != "" ? "AND oc.cc = '" + cc + "'" : "")
                                    );

                                    if (comprasActivoFijoEK != null)
                                    {
                                        var comprasActivoFijo = (List<OrdenCompraDTO>)comprasActivoFijoEK.ToObject<List<OrdenCompraDTO>>();

                                        comprasActivoFijo = comprasActivoFijo.Where(x => x.fecha >= fechaFiltroAnioActual).ToList();

                                        var listaEmpleadoVoboActivoFijo = new List<dynamic>();

                                        if (empleadoVoboActivoFijo != null)
                                            listaEmpleadoVoboActivoFijo = empleadoVoboActivoFijo.ToList();

                                        foreach (var com in comprasActivoFijo)
                                        {
                                            bool flagPuedeDarVobo = false;

                                            if ((int)com.vobo == relUser.empleado || (int)com.vobo2 == relUser.empleado || (int)com.vobo3 == relUser.empleado)
                                                flagPuedeDarVobo = false;
                                            else
                                            {
                                                if (listaEmpleadoVoboActivoFijo.Count() > 0)
                                                    flagPuedeDarVobo = listaEmpleadoVoboActivoFijo.FirstOrDefault(x => ((string)x.cc).ToUpper().Equals((string)com.cc)) != null;
                                            }

                                            bool flagPuedeAutorizar = empleadoAutorizaActivoFijo;

                                            if (!lstCompras.Any(x => x.cc.ToUpper().Equals((string)com.cc) && x.numero == (int)com.numero))
                                            {
                                                // SE VERIFICA SI TIENE UN SEGUNDO VOBO INSERTADO EN LA COMPRA
                                                var objOC = _context.tblCom_OrdenCompra.Where(w => w.cc == com.cc && w.numero == com.numero && w.estatusRegistro).FirstOrDefault();
                                                if (objOC != null)
                                                    com.vobo2 = objOC.vobo2;

                                                bool flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false; //Siempre son dos VoBos cuando la compra es Activo Fijo

                                                if (listaEmpleadoVoboActivoFijo.Count() > 0)
                                                {
                                                    if (listaEmpleadoVoboActivoFijo.Select(x => (string)x.cc).Contains(com.cc) || flagPuedeAutorizar)
                                                    {
                                                        lstCompras.Add(new OrdenCompraDTO
                                                        {
                                                            cc = com.cc,
                                                            ccDesc = com.ccDesc,
                                                            numero = com.numero != null ? com.numero : 0,
                                                            proveedor = com.proveedor != null ? com.proveedor : 0,
                                                            proveedorNom = com.proveedor != null && com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                                            total = com.total != null ? com.total : 0,
                                                            tipo_cambio = com.tipo_cambio != null ? com.tipo_cambio : 0,
                                                            moneda = com.moneda != null ? com.moneda : 1,
                                                            fecha = com.fecha != null ? com.fecha : default(DateTime),
                                                            flagPuedeAutorizar = usuarioEnkontrol.empleado == 13 ? true : flagPuedeAutorizar, // TO DO: DESCOMENTAR LINEA DE ABAJO Y ELIMINAR ESTA LINEA AL TERMINAR PRUEBAS DE ALAN.
                                                            //flagPuedeAutorizar = flagPuedeAutorizar,
                                                            vobo = com.vobo != null ? com.vobo : 0,
                                                            vobo2 = com.vobo2 != null ? com.vobo2 : 0,
                                                            vobo3 = com.vobo3 != null ? com.vobo3 : 0,
                                                            voboPendiente = usuarioEnkontrol.empleado == 13 ? false : flagVoboPendiente, // TO DO: DESCOMENTAR LINEA DE ABAJO Y ELIMINAR ESTA LINEA AL TERMINAR PRUEBAS DE ALAN.
                                                            //voboPendiente = flagVoboPendiente,
                                                            flagPuedeDarVobo = flagPuedeDarVobo,
                                                            flagCancelar = puedeCancelar ? ((com.vobo_aut == "S" || com.aut_aut == "S") && com.st_impresa == "I") ? true : false : false,
                                                            numeroRequisicion = com.numeroRequisicion != null ? (int)com.numeroRequisicion : 0,
                                                            tieneCuadro = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo > 0 ? true : false : false,
                                                            countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                                            flagActivoFijo = true,
                                                            comentarios = com.comentarios
                                                        });
                                                    }
                                                }
                                                else
                                                {
                                                    lstCompras.Add(new OrdenCompraDTO
                                                    {
                                                        cc = com.cc,
                                                        ccDesc = com.ccDesc,
                                                        numero = com.numero != null ? com.numero : 0,
                                                        proveedor = com.proveedor != null ? com.proveedor : 0,
                                                        proveedorNom = com.proveedor != null && com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                                        total = com.total != null ? com.total : 0,
                                                        tipo_cambio = com.tipo_cambio != null ? com.tipo_cambio : 0,
                                                        moneda = com.moneda != null ? com.moneda : 1,
                                                        fecha = com.fecha != null ? com.fecha : default(DateTime),
                                                        flagPuedeAutorizar = flagPuedeAutorizar,
                                                        vobo = com.vobo != null ? com.vobo : 0,
                                                        vobo2 = com.vobo2 != null ? com.vobo2 : 0,
                                                        vobo3 = com.vobo3 != null ? com.vobo3 : 0,
                                                        voboPendiente = flagVoboPendiente,
                                                        flagPuedeDarVobo = flagPuedeDarVobo,
                                                        flagCancelar = puedeCancelar ? ((com.vobo_aut == "S" || com.aut_aut == "S") && com.st_impresa == "I") ? true : false : false,
                                                        numeroRequisicion = com.numeroRequisicion != null ? (int)com.numeroRequisicion : 0,
                                                        tieneCuadro = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo > 0 ? true : false : false,
                                                        countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                                        flagActivoFijo = true,
                                                        comentarios = com.comentarios
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                                #endregion

                                #region Compras No Autorizadas por TMC
                                var empleadoVoboTMC = usuarioEnkontrol.vobo_tmc == 1;
                                var empleadoAutorizaTMC = usuarioEnkontrol.autoriza_tmc == 1;

                                if (empleadoVoboTMC || empleadoAutorizaTMC)
                                {
                                    dynamic comprasTMCEK = null;

                                    comprasTMCEK = consultaCheckProductivo(
                                        string.Format(@"SELECT tblPrincipal.*, 
                                                (SELECT COUNT(*) FROM DBA.so_cuadro_comparativo cua WHERE cua.cc = tblPrincipal.cc AND cua.numero = tblPrincipal.numeroRequisicion) AS countCuadroComparativo
                                                FROM (
                                                    SELECT 
                                                        oc.*, 
                                                        pr.nombre AS proveedorNom, 
                                                        (SELECT TOP 1 det.num_requisicion FROM DBA.so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS numeroRequisicion, 
                                                        c.descripcion AS ccDesc, 
                                                        (SELECT TOP 1 det.area FROM DBA.so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS area, 
                                                        (SELECT TOP 1 det.cuenta FROM DBA.so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS cuenta 
                                                    FROM DBA.so_orden_compra oc 
                                                        LEFT JOIN DBA.sp_proveedores pr ON pr.numpro = oc.proveedor 
                                                        INNER JOIN DBA.cc c ON c.cc = oc.cc 
                                                    WHERE 
                                                        " + (isAuth ? "(oc.vobo_aut = 'S' OR oc.aut_aut = 'S')" : "(oc.vobo_aut = 'N' AND oc.aut_aut = 'N')") + @" AND 
                                                        oc.autoriza_activos = 0 AND 
                                                        oc.tmc = 1 
                                                        {0}) AS tblPrincipal", cc != "" ? "AND oc.cc = '" + cc + "'" : "")
                                    );

                                    if (comprasTMCEK != null)
                                    {
                                        var comprasTMC = (List<OrdenCompraDTO>)comprasTMCEK.ToObject<List<OrdenCompraDTO>>();

                                        comprasTMC = comprasTMC.Where(x => x.fecha >= fechaFiltroAnioActual).ToList();

                                        foreach (var com in comprasTMC)
                                        {
                                            bool flagPuedeDarVobo = false;

                                            if ((int)com.vobo == relUser.empleado || (int)com.vobo2 == relUser.empleado || (int)com.vobo3 == relUser.empleado)
                                            {
                                                flagPuedeDarVobo = false;
                                            }
                                            else
                                            {
                                                flagPuedeDarVobo = empleadoVoboTMC;
                                            }

                                            bool flagPuedeAutorizar = empleadoAutorizaTMC;

                                            if (!lstCompras.Any(x => x.cc.ToUpper().Equals((string)com.cc) && x.numero == (int)com.numero))
                                            {
                                                bool flagVoboPendiente = (int)com.vobo == 0 ? true : false; //Siempre es un VoBo cuando la compra es TMC.

                                                lstCompras.Add(new OrdenCompraDTO
                                                {
                                                    cc = com.cc,
                                                    ccDesc = com.ccDesc,
                                                    numero = com.numero != null ? com.numero : 0,
                                                    proveedor = com.proveedor != null ? com.proveedor : 0,
                                                    proveedorNom = com.proveedor != null && com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                                    total = com.total != null ? com.total : 0,
                                                    tipo_cambio = com.tipo_cambio != null ? com.tipo_cambio : 0,
                                                    moneda = com.moneda != null ? com.moneda : 1,
                                                    fecha = com.fecha != null ? com.fecha : default(DateTime),
                                                    flagPuedeAutorizar = flagPuedeAutorizar,
                                                    vobo = com.vobo != null ? com.vobo : 0,
                                                    vobo2 = com.vobo2 != null ? com.vobo2 : 0,
                                                    vobo3 = com.vobo3 != null ? com.vobo3 : 0,
                                                    voboPendiente = flagVoboPendiente,
                                                    flagPuedeDarVobo = flagPuedeDarVobo,
                                                    flagCancelar = puedeCancelar ? ((com.vobo_aut == "S" || com.aut_aut == "S") && com.st_impresa == "I") ? true : false : false,
                                                    numeroRequisicion = com.numeroRequisicion != null ? (int)com.numeroRequisicion : 0,
                                                    tieneCuadro = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo > 0 ? true : false : false,
                                                    countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                                    flagTMC = true,
                                                    comentarios = com.comentarios
                                                });
                                            }
                                        }
                                    }
                                }
                                #endregion

                                #region Compras Traspaso de Almacén
                                if (relUser.empleado == 59 || relUser.empleado == 1)
                                {
                                    var comprasTraspasoAlmacen = _contextEnkontrol.Select<OrdenCompraDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                    {
                                        consulta = string.Format(@"
                            SELECT
                                oc.cc, oc.numero, oc.proveedor, oc.total, oc.tipo_cambio, oc.moneda, oc.fecha, oc.vobo, oc.vobo2, oc.vobo3, oc.ST_OC, oc.vobo_aut, oc.aut_aut, oc.st_impresa, oc.comentarios,
                                pr.nombre AS proveedorNom,
                                (SELECT TOP 1 det.num_requisicion FROM DBA.so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS numeroRequisicion,
                                c.descripcion AS ccDesc,
                                (SELECT det.area FROM DBA.so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero AND det.partida = 1) AS area,
                                (SELECT det.cuenta FROM DBA.so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero AND det.partida = 1) AS cuenta,
                                (SELECT COUNT(*) FROM DBA.so_cuadro_comparativo cua WHERE cua.cc = oc.cc AND cua.numero = (SELECT det.num_requisicion FROM DBA.so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero AND det.partida = 1)) AS countCuadroComparativo
                            FROM DBA.so_orden_compra oc
                                LEFT JOIN DBA.sp_proveedores pr ON pr.numpro = oc.proveedor
                                INNER JOIN DBA.cc c ON c.cc = oc.cc
                            WHERE c.st_ppto != 'T' AND " +
                                                (isAuth ? "(oc.vobo_aut = 'S' OR oc.aut_aut = 'S')" : "(oc.vobo_aut = 'N' AND oc.aut_aut = 'N')") +
                                                (@" AND fecha >= '" + fechaFiltroAnioActual.ToString("yyyy-MM-dd")) + @"' " +
                                                (cc != "" ? "AND oc.cc = '" + cc + "'" : ""))
                                    });

                                    foreach (var compra in comprasTraspasoAlmacen)
                                    {
                                        if (compra.proveedor == 5412) //Verificar que la compra tenga proveedor de Construplan
                                        {
                                            if (compra.area == 1 && compra.cuenta == 9) //Verificar que la compra tenga el área-cuenta "1-9" en la primer partida
                                            {
                                                lstCompras.Add(new OrdenCompraDTO
                                                {
                                                    cc = compra.cc,
                                                    ccDesc = compra.ccDesc,
                                                    numero = compra.numero,
                                                    proveedor = compra.proveedor,
                                                    proveedorNom = compra.proveedor + " - " + (compra.proveedorNom ?? ""),
                                                    total = compra.total,
                                                    tipo_cambio = compra.tipo_cambio,
                                                    moneda = compra.moneda,
                                                    fecha = compra.fecha,
                                                    vobo = compra.vobo,
                                                    vobo2 = compra.vobo2,
                                                    vobo3 = compra.vobo3,
                                                    flagPuedeDarVobo = false,
                                                    flagCancelar = puedeCancelar ? ((compra.vobo_aut == "S" || compra.aut_aut == "S") && compra.st_impresa == "I") ? true : false : false,
                                                    numeroRequisicion = compra.numeroRequisicion,
                                                    tieneCuadro = compra.countCuadroComparativo > 0 ? true : false,
                                                    countCuadroComparativo = compra.countCuadroComparativo,
                                                    comentarios = compra.comentarios ?? "",
                                                    flagCompraInterna = false,

                                                    voboProveedorNoOptimo = false,
                                                    voboPendiente = false,
                                                    flagPuedeAutorizar = true,
                                                    puedeDarVoboProvNoOptimo = false,
                                                    cuadroGeneradoConCalificacion = false,
                                                    flagCompraTraspasoAlmacen = true
                                                });
                                            }
                                        }
                                    }
                                }
                                #endregion
                            }
                            else
                            {
                                #region Todas las Compras No Autorizadas (Administrador)
                                dynamic comprasEK = null;

                                string t = string.Format(@"SELECT tblPrincipal.*, 
                                            (SELECT COUNT(*) FROM DBA.so_cuadro_comparativo cua WHERE cua.cc = tblPrincipal.cc AND cua.numero = tblPrincipal.numeroRequisicion) AS countCuadroComparativo
                                            FROM (
                                                SELECT 
                                                    oc.*, 
                                                    pr.nombre AS proveedorNom, 
                                                    (SELECT TOP 1 det.num_requisicion FROM DBA.so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS numeroRequisicion, 
                                                    c.descripcion AS ccDesc, 
                                                    CASE WHEN 
                                                        (SELECT TOP 1 det.area FROM DBA.so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) IS NULL THEN 0 ELSE 
                                                        (SELECT TOP 1 det.area FROM DBA.so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) END AS area, 
                                                    CASE WHEN
                                                        (SELECT TOP 1 det.cuenta FROM DBA.so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) IS NULL THEN 0 ELSE
                                                        (SELECT TOP 1 det.cuenta FROM DBA.so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) END AS cuenta
                                                FROM DBA.so_orden_compra oc 
                                                    LEFT JOIN DBA.sp_proveedores pr ON pr.numpro = oc.proveedor 
                                                    INNER JOIN DBA.cc c ON c.cc = oc.cc 
                                                WHERE 
                                                    " + (isAuth ? "(oc.vobo_aut = 'S' OR oc.aut_aut = 'S')" : "(oc.vobo_aut = 'N' AND oc.aut_aut = 'N')") + @" 
                                                    {0}) AS tblPrincipal", cc != "" ? "AND oc.cc = '" + cc + "'" : "");

                                comprasEK = consultaCheckProductivo(
                                    string.Format(@"SELECT tblPrincipal.*, 
                                            (SELECT COUNT(*) FROM DBA.so_cuadro_comparativo cua WHERE cua.cc = tblPrincipal.cc AND cua.numero = tblPrincipal.numeroRequisicion) AS countCuadroComparativo
                                            FROM (
                                                SELECT 
                                                    oc.*, 
                                                    pr.nombre AS proveedorNom, 
                                                    (SELECT TOP 1 det.num_requisicion FROM DBA.so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS numeroRequisicion, 
                                                    c.descripcion AS ccDesc, 
                                                    CASE WHEN 
                                                        (SELECT TOP 1 det.area FROM DBA.so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) IS NULL THEN 0 ELSE 
                                                        (SELECT TOP 1 det.area FROM DBA.so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) END AS area, 
                                                    CASE WHEN
                                                        (SELECT TOP 1 det.cuenta FROM DBA.so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) IS NULL THEN 0 ELSE
                                                        (SELECT TOP 1 det.cuenta FROM DBA.so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) END AS cuenta
                                                FROM DBA.so_orden_compra oc 
                                                    LEFT JOIN DBA.sp_proveedores pr ON pr.numpro = oc.proveedor 
                                                    INNER JOIN DBA.cc c ON c.cc = oc.cc 
                                                WHERE 
                                                    " + (isAuth ? "(oc.vobo_aut = 'S' OR oc.aut_aut = 'S')" : "(oc.vobo_aut = 'N' AND oc.aut_aut = 'N')") + @" 
                                                    {0} AND oc.vobo IS NOT NULL) AS tblPrincipal", cc != "" ? "AND oc.cc = '" + cc + "'" : "")
                                );

                                if (comprasEK != null)
                                {
                                    var compras = (List<OrdenCompraDTO>)comprasEK.ToObject<List<OrdenCompraDTO>>();

                                    compras = compras.Where(x => x.fecha >= fechaFiltroAnioActual).ToList();

                                    foreach (var com in compras)
                                    {
                                        bool flagVoBoPendiente = false;

                                        if (com.autoriza_activos == 1)
                                        {
                                            flagVoBoPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false; //Siempre son dos VoBos cuando la compra es Activo Fijo
                                        }

                                        if (com.tmc == 1)
                                        {
                                            flagVoBoPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false; //Siempre son dos VoBos cuando la compra es TMC
                                        }


                                        bool flagPuedeDarVobo;

                                        if ((int)com.vobo == relUser.empleado || (int)com.vobo2 == relUser.empleado || (int)com.vobo3 == relUser.empleado)
                                        {
                                            flagPuedeDarVobo = false;
                                        }
                                        else
                                        {
                                            flagPuedeDarVobo = true;
                                        }

                                        if (!lstCompras.Any(x => x.cc.ToUpper().Equals((string)com.cc) && x.numero == (int)com.numero))
                                        {
                                            lstCompras.Add(new OrdenCompraDTO
                                            {
                                                cc = com.cc,
                                                ccDesc = com.ccDesc,
                                                numero = com.numero != null ? com.numero : 0,
                                                proveedor = com.proveedor != null ? com.proveedor : 0,
                                                proveedorNom = com.proveedor != null && com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                                total = com.total != null ? com.total : 0,
                                                tipo_cambio = com.tipo_cambio != null ? com.tipo_cambio : 0,
                                                moneda = com.moneda != null ? com.moneda : 1,
                                                fecha = com.fecha != null ? com.fecha : default(DateTime),
                                                flagPuedeAutorizar = true,
                                                vobo = com.vobo != null ? com.vobo : 0,
                                                vobo2 = com.vobo2 != null ? com.vobo2 : 0,
                                                vobo3 = com.vobo3 != null ? com.vobo3 : 0,
                                                voboPendiente = flagVoBoPendiente,
                                                flagPuedeDarVobo = flagPuedeDarVobo,
                                                flagCancelar = puedeCancelar ? ((com.vobo_aut == "S" || com.aut_aut == "S") && com.st_impresa == "I") ? true : false : false,
                                                numeroRequisicion = com.numeroRequisicion != null ? (int)com.numeroRequisicion : 0,
                                                tieneCuadro = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo > 0 ? true : false : false,
                                                countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                                comentarios = com.comentarios,
                                                flagCompraInterna = false
                                            });
                                        }
                                    }
                                }
                                #endregion
                            }

                            #region Gerardo Reina
                            if (relUser.empleado == 49)
                            {
                                dynamic comprasExtraEK = null;
                                comprasExtraEK = consultaCheckProductivo(
                                    string.Format(@"SELECT 
                                            tblPrincipal.*, 
                                            (SELECT COUNT(*) FROM DBA.so_cuadro_comparativo cua WHERE cua.cc = tblPrincipal.cc AND cua.numero = tblPrincipal.numeroRequisicion) AS countCuadroComparativo
                                        FROM (
                                            SELECT 
                                                oc.*, 
                                                pr.nombre AS proveedorNom, 
                                                (SELECT TOP 1 det.num_requisicion FROM DBA.so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS numeroRequisicion, 
                                                c.descripcion AS ccDesc, 
                                                (SELECT TOP 1 det.area FROM DBA.so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS area, 
                                                (SELECT TOP 1 det.cuenta FROM DBA.so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS cuenta 
                                            FROM DBA.so_orden_compra oc 
                                                LEFT JOIN DBA.sp_proveedores pr ON pr.numpro = oc.proveedor 
                                                INNER JOIN DBA.cc c ON c.cc = oc.cc 
                                            WHERE 
                                                " + (isAuth ? "(oc.vobo_aut = 'S' OR oc.aut_aut = 'S')" : "(oc.vobo_aut = 'N' AND oc.aut_aut = 'N')") + @" 
                                        {0}) AS tblPrincipal", cc != "" ? "AND oc.cc = '" + cc + "'" : "")
                                );

                                if (comprasExtraEK != null)
                                {
                                    var comprasExtra = (List<OrdenCompraDTO>)comprasExtraEK.ToObject<List<OrdenCompraDTO>>();
                                    comprasExtra = comprasExtra.Where(x => x.fecha >= fechaFiltroAnioActual).ToList();
                                    var comprasExtraFiltradas = comprasExtra.Where(x => !lstCompras.Any(y => (y.cc == x.cc && y.numero == x.numero))).ToList();

                                    dynamic facultamientosEK = null;

                                    List<string> datos1 = comprasExtraFiltradas.Select(x => @"(tblPrincipal.area = " + x.area + @" AND 
                                                tblPrincipal.cuenta = " + x.cuenta + @" AND
                                                tblPrincipal.monto_minimo_autoriza <= " + Convert.ToDecimal((x.moneda == 1 ? x.total : (x.total * x.tipo_cambio)), CultureInfo.InvariantCulture) + @" AND 
                                                tblPrincipal.monto_maximo_autoriza >= " + Convert.ToDecimal((x.moneda == 1 ? x.total : (x.total * x.tipo_cambio)), CultureInfo.InvariantCulture) + @" AND 
                                                tblGrupos.tipo IN (SELECT SUBSTRING(insumo,0,3) FROM DBA.so_orden_compra_det WHERE cc = '" + x.cc + @"' AND numero = " + x.numero + "))").ToList();
                                    string datos2 = string.Join(" OR ", datos1);
                                    facultamientosEK = consultaCheckProductivo(
                                    string.Format(@"SELECT 
                                                tblPrincipal.area, 
                                                tblPrincipal.cuenta, 
                                                tblPrincipal.num_autorizaciones AS tblPrincipalNumAutorizaciones, 
                                                tblPrincipal.monto_minimo_autoriza, 
                                                tblPrincipal.monto_maximo_autoriza, 
                                                tblPrincipal.consecutivo, 
                                                    
                                                tblVobo.empleado AS empleadoVobo, 
                                                tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                    
                                                tblGrupos.tipo AS tipoGrupo, 
                                                tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                    
                                                tblAut.empleado AS empleadoAutoriza, 
                                                tblAut.num_autorizaciones AS tblAutNumAutorizaciones 
                                            FROM DBA.so_area_cta_autorizacion tblPrincipal 
                                                LEFT JOIN DBA.so_empleados_area_cta tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                                LEFT JOIN DBA.so_rel_tipos_vobo_area_cta tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                                LEFT JOIN DBA.so_empleados_autoriza_area_cta tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                            WHERE 
                                                tblPrincipal.area=999999 or " + datos2 + @"
                                            ORDER BY tblPrincipal.consecutivo"));

                                    foreach (var com in comprasExtraFiltradas)
                                    {

                                        bool flagVoboPendiente = false;

                                        if (facultamientosEK != null)
                                        {
                                            var facultamientos = (List<dynamic>)facultamientosEK.ToObject<List<dynamic>>();

                                            if (com.autoriza_activos == 0 && com.tmc == 0)
                                            {
                                                int vobosRequeridos = facultamientos[0].tblVoboNumAutorizaciones != null ? (int)facultamientos[0].tblVoboNumAutorizaciones : 0;

                                                switch (vobosRequeridos)
                                                {
                                                    case 1:
                                                        flagVoboPendiente = (int)com.vobo == 0 ? true : false;
                                                        break;
                                                    case 2:
                                                        flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false;
                                                        break;
                                                    case 3:
                                                        flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 || (int)com.vobo3 == 0 ? true : false;
                                                        break;
                                                }
                                            }
                                            else if (com.autoriza_activos == 1 && com.tmc == 0)
                                            {
                                                flagVoboPendiente = com.vobo == 0 || com.vobo2 == 0 ? true : false; //Siempre son dos VoBos cuando la compra es Activo Fijo
                                            }
                                            else if (com.autoriza_activos == 0 && com.tmc == 1)
                                            {
                                                flagVoboPendiente = com.vobo == 0 ? true : false; //Siempre es un VoBo cuando la compra es TMC.
                                            }
                                        }

                                        if (!lstCompras.Any(x => x.cc.ToUpper().Equals((string)com.cc) && x.numero == (int)com.numero))
                                        {
                                            lstCompras.Add(new OrdenCompraDTO
                                            {
                                                cc = com.cc,
                                                ccDesc = com.ccDesc,
                                                numero = com.numero != null ? com.numero : 0,
                                                proveedor = com.proveedor != null ? com.proveedor : 0,
                                                proveedorNom = com.proveedor != null && com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                                total = com.total != null ? com.total : 0,
                                                tipo_cambio = com.tipo_cambio != null ? com.tipo_cambio : 0,
                                                moneda = com.moneda != null ? com.moneda : 1,
                                                fecha = com.fecha != null ? com.fecha : default(DateTime),
                                                flagPuedeAutorizar = false,
                                                vobo = com.vobo != null ? com.vobo : 0,
                                                vobo2 = com.vobo2 != null ? com.vobo2 : 0,
                                                vobo3 = com.vobo3 != null ? com.vobo3 : 0,
                                                voboPendiente = flagVoboPendiente,
                                                flagPuedeDarVobo = false,
                                                flagCancelar = puedeCancelar ? ((com.vobo_aut == "S" || com.aut_aut == "S") && com.st_impresa == "I") ? true : false : false,
                                                numeroRequisicion = com.numeroRequisicion != null ? (int)com.numeroRequisicion : 0,
                                                tieneCuadro = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo > 0 ? true : false : false,
                                                countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                                flagActivoFijo = com.autoriza_activos == 1,
                                                flagTMC = com.tmc == 1,
                                                comentarios = com.comentarios,
                                                flagCompraInterna = false
                                            });
                                        }
                                    }
                                }
                            }
                            #endregion

                            #region Compra Interna
                            foreach (var item in lstCompras)
                            {
                                int numvobos = item.numVobos;

                                if (item.esOC_Interna)
                                {
                                    #region SE VERIFICA SI HACE FALTA VOBOS
                                    int cantVobos = getVobos(item).Select(s => s.numVobos).FirstOrDefault();
                                    int cantVobosRealizados = 0;

                                    if (item.vobo != 0)
                                        cantVobosRealizados++;

                                    if (item.vobo2 != 0)
                                        cantVobosRealizados++;

                                    if (item.vobo3 != 0)
                                        cantVobosRealizados++;
                                    #endregion

                                    if (cantVobosRealizados < cantVobos)
                                    {
                                        #region SE VERIFICA SI EL USUARIO LOGUEADO PUEDE DAR VOBO
                                        List<int> lstUsuariosEK = getVobos(item).Select(s => s.usu_numero).ToList();
                                        foreach (var usuarioVobo in lstUsuariosEK)
                                        {
                                            if (usuarioVobo > 0)
                                            {
                                                tblP_Usuario_Enkontrol objUsuarioEK = _context.tblP_Usuario_Enkontrol.Where(w => w.empleado == usuarioVobo).FirstOrDefault();
                                                if (objUsuarioEK != null)
                                                {
                                                    if (objUsuarioEK.idUsuario == (int)vSesiones.sesionUsuarioDTO.id) item.flagPuedeDarVobo = true;
                                                    if (item.vobo != (int)vSesiones.sesionUsuarioDTO.id && item.vobo2 != (int)vSesiones.sesionUsuarioDTO.id && item.vobo3 != (int)vSesiones.sesionUsuarioDTO.id) item.voboPendiente = true;
                                                    else item.voboPendiente = false;
                                                }
                                            }
                                        }
                                        #endregion
                                    }
                                    else if (cantVobosRealizados > 0 && cantVobosRealizados == cantVobos)
                                    {
                                        #region SE VERIFICA SI EL USUARIO LOGUEADO PUEDE AUTORIZAR
                                        int idUsuarioEK = 0;
                                        idUsuarioEK = getAutorizaciones(item).Select(s => s.usu_numero).FirstOrDefault();
                                        if (idUsuarioEK > 0)
                                        {
                                            tblP_Usuario_Enkontrol objUsuarioEK = _context.tblP_Usuario_Enkontrol.Where(w => w.empleado == idUsuarioEK).FirstOrDefault();
                                            if (objUsuarioEK != null)
                                            {
                                                item.voboPendiente = false;
                                                item.flagPuedeAutorizar = objUsuarioEK.idUsuario == (int)vSesiones.sesionUsuarioDTO.id ? true : false;
                                            }
                                        }
                                        #endregion
                                    }
                                }

                                item.vobosString = string.Join(", ", getVobos(item).Select(x => x.usu_numero + "-" + x.usu_nombre + "|" + x.color));
                                item.autorizacionesString = string.Join(", ", getAutorizaciones(item).Select(x => (int)x.usu_numero + "-" + (string)x.usu_nombre));

                                if (vSesiones.sesionUsuarioDTO.id == 3807)
                                {
                                    item.flagPuedeAutorizar = true;
                                }
                            }
                            #endregion

                            #region Determinas las compras reseteadas y de consigna
                            foreach (var compra in lstCompras)
                            {
                                var compraResetSIGOPLAN = _context.tblCom_ComprasReset.FirstOrDefault(x => x.estatus && x.registroAplica && x.cc == compra.cc && x.numero == compra.numero);

                                if (compraResetSIGOPLAN != null)
                                {
                                    if (compraResetSIGOPLAN.tipo == TipoComprasResetEnum.comprasImpresas)
                                    {
                                        compra.flagCompraReset = true;
                                    }
                                    else if (compraResetSIGOPLAN.tipo == TipoComprasResetEnum.comprasNoImpresas)
                                    {
                                        compra.flagCompraResetNoImpresa = true;
                                    }
                                }

                                var compraDetSIGOPLAN = _context.tblCom_OrdenCompraDet.FirstOrDefault(x => x.estatusRegistro && x.cc == compra.cc && x.numero == compra.numero);

                                if (compraDetSIGOPLAN != null)
                                {
                                    var requisicionSIGOPLAN = _context.tblCom_Req.FirstOrDefault(x => x.estatusRegistro && x.cc == compraDetSIGOPLAN.cc && x.numero == compraDetSIGOPLAN.num_requisicion);

                                    if (requisicionSIGOPLAN != null)
                                    {
                                        compra.consigna = requisicionSIGOPLAN.consigna != null ? (bool)requisicionSIGOPLAN.consigna : false;
                                        compra.crc = requisicionSIGOPLAN.crc;
                                        compra.convenio = requisicionSIGOPLAN.convenio;
                                    }
                                }
                            }
                            #endregion

                            #region Compras Traspaso de Almacén
                            var listaComprasQuitar = new List<int>();

                            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                            {
                                foreach (var compra in lstCompras)
                                {
                                    if (compra.proveedor == 5412) //Verificar que la compra tenga proveedor de Construplan
                                    {
                                        var listaPartidasEK = _contextEnkontrol.Select<OrdenCompraDetDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                        {
                                            consulta = @"SELECT * FROM DBA.so_orden_compra_det WHERE cc = ? AND numero = ?",
                                            parametros = new List<OdbcParameterDTO> {
                                    new OdbcParameterDTO() { nombre = "cc", tipo = OdbcType.VarChar, valor = compra.cc },
                                    new OdbcParameterDTO() { nombre = "numero", tipo = OdbcType.Numeric, valor = compra.numero }
                                }
                                        });

                                        if (listaPartidasEK.FirstOrDefault(x => x.partida == 1).area == 1 && listaPartidasEK.FirstOrDefault(x => x.partida == 1).cuenta == 9) //Verificar que la compra tenga el área-cuenta "1-9" en la primer partida
                                        {
                                            if (relUser.empleado == 59 || relUser.empleado == 1) //Verificar que el usuario logeado sea Alexis Samaniego (o un administrador)
                                            {
                                                compra.voboProveedorNoOptimo = false;
                                                compra.voboPendiente = false;
                                                compra.flagPuedeAutorizar = true;
                                                compra.puedeDarVoboProvNoOptimo = false;
                                                compra.cuadroGeneradoConCalificacion = false;
                                                compra.flagCompraTraspasoAlmacen = true;
                                            }
                                            else
                                            {
                                                compra.flagPuedeAutorizar = false;
                                                listaComprasQuitar.Add(lstCompras.FindIndex(x => x.cc == compra.cc && x.numero == compra.numero));
                                            }
                                        }
                                    }
                                }
                            }

                            foreach (var item in listaComprasQuitar)
                            {
                                lstCompras.RemoveAt(item);
                            }
                            #endregion

                            lstCompras = lstCompras.OrderByDescending(x => x.voboPendiente && x.flagPuedeDarVobo).ThenByDescending(x => !x.voboPendiente && x.flagPuedeAutorizar).ToList();
                            return lstCompras;
                            #endregion
                        }
                    default:
                        {
                            #region DEMÁS EMPRESAS
                            var usuario = vSesiones.sesionUsuarioDTO;
                            var relUser = ufs.getUsuarioService().getUserEk(usuario.id);
                            var usuarioEnkontrol = ((List<UsuarioEnkontrolDTO>)consultaCheckProductivo(
                                string.Format(@"SELECT * FROM empleados WHERE empleado = {0}", relUser.empleado)
                            ).ToObject<List<UsuarioEnkontrolDTO>>())[0];

                            var listCompradorAdmin = _context.tblCom_Comprador_Admin.Select(x => x.empleado).ToList();
                            var puedeCancelar = relUser.empleado == 1 || listCompradorAdmin.Contains(relUser.empleado);

                            DateTime fechaFiltroAnioActual = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1).AddMonths(-3);

                            if (relUser.empleado != 1)
                            {
                                #region Compras No Autorizadas por Centro de Costo, monto y Tipo-Grupo
                                dynamic comprasMontoEK = null;

                                if (vSesiones.sesionEmpresaActual == 1 || vSesiones.sesionEmpresaActual == 4)
                                {
                                    comprasMontoEK = consultaCheckProductivo(
                                    string.Format(@"SELECT 
    tblPrincipal.*, 
    (SELECT COUNT(*) FROM so_cuadro_comparativo cua WHERE cua.cc = tblPrincipal.cc AND cua.numero = tblPrincipal.numeroRequisicion) AS countCuadroComparativo
FROM (
                                        SELECT 
                                            oc.*, 
                                            pr.nombre AS proveedorNom, 
                                            (SELECT TOP 1 det.num_requisicion FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS numeroRequisicion, 
                                            c.descripcion AS ccDesc 
                                        FROM so_orden_compra oc 
                                            LEFT JOIN sp_proveedores pr ON pr.numpro = oc.proveedor 
                                            INNER JOIN cc c ON c.cc = oc.cc 
                                        WHERE 
                                            " + (isAuth ? "oc.ST_OC = 'A'" : "(oc.ST_OC IS NULL OR oc.ST_OC != 'A')") + @" AND fecha >= '" + fechaFiltroAnioActual.ToString("yyyy-MM-dd") + @"' AND
                                            oc.autoriza_activos = 0 AND 
                                            oc.tmc = 0  AND c.st_ppto!='T' 
                                            {0}) AS tblPrincipal", cc != "" ? "AND oc.cc = '" + cc + "'" : "")
                                    );
                                }
                                else
                                {
                                    comprasMontoEK = consultaCheckProductivo(
                                        string.Format(@"SELECT 
    tblPrincipal.*, 
    (SELECT COUNT(*) FROM so_cuadro_comparativo cua WHERE cua.cc = tblPrincipal.cc AND cua.numero = tblPrincipal.numeroRequisicion) AS countCuadroComparativo
FROM (
                                            SELECT 
                                                oc.*, 
                                                pr.nombre AS proveedorNom, 
                                                (SELECT TOP 1 det.num_requisicion FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS numeroRequisicion, 
                                                c.descripcion AS ccDesc, 
                                                (SELECT TOP 1 det.area FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS area, 
                                                (SELECT TOP 1 det.cuenta FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS cuenta 
                                            FROM so_orden_compra oc 
                                                LEFT JOIN sp_proveedores pr ON pr.numpro = oc.proveedor 
                                                INNER JOIN cc c ON c.cc = oc.cc 
                                            WHERE 
                                                " + (isAuth ? "oc.ST_OC = 'A'" : "(oc.ST_OC IS NULL OR oc.ST_OC != 'A')") + @"  AND fecha >= '" + fechaFiltroAnioActual.ToString("yyyy-MM-dd") + @"' AND                                                oc.autoriza_activos = 0 AND 
                                                oc.tmc = 0 AND c.st_ppto!='T' 
                                                {0}) AS tblPrincipal", cc != "" ? "AND oc.cc = '" + cc + "'" : "")
                                    );
                                }

                                if (comprasMontoEK != null)
                                {
                                    var comprasMonto = (List<OrdenCompraDTO>)comprasMontoEK.ToObject<List<OrdenCompraDTO>>();

                                    comprasMonto = comprasMonto.Where(x => x.fecha >= fechaFiltroAnioActual).ToList();

                                    dynamic facultamientoEmpleadoEK = null;
                                    //bool entraFacultamientoEspecial = false;

                                    if (vSesiones.sesionEmpresaActual == 1 || vSesiones.sesionEmpresaActual == 4)
                                    {
                                        //var ccFacultamientoEspecial = _context.tblCom_VoboAutorizacionEspecial.Where(x => x.registroActivo).Select(x => x.cc).ToList();

                                        List<string> ccs = comprasMonto.Select(x => x.cc).ToList();

                                        //entraFacultamientoEspecial = ccs.Any(x => ccFacultamientoEspecial.Contains(x));

                                        facultamientoEmpleadoEK = consultaCheckProductivo(
                                            string.Format(@"SELECT distinct
                                                        tblPrincipal.cc, 
                                                        tblPrincipal.num_autorizacioines AS tblPrincipalNumAutorizaciones, 
                                                        tblPrincipal.monto_minimo_autoriza, 
                                                        tblPrincipal.monto_maximo_autoriza, 
                                                        tblPrincipal.consecutivo, 
                                                        
                                                        tblVobo.empleado AS empleadoVobo, 
                                                        tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                        
                                                        tblGrupos.tipo AS tipoGrupo, 
                                                        tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                        
                                                        tblAut.empleado AS empleadoAutoriza, 
                                                        tblAut.num_autorizaciones AS tblAutNumAutorizaciones, 
                                                        tblAut.orden AS ordenAutorizacion 
                                                    FROM so_cc_autorizacion tblPrincipal 
                                                        LEFT JOIN so_empleados_cc tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                                        LEFT JOIN so_rel_tipos_vobo tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                                        LEFT JOIN so_empleados_autoriza_cc tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                                    WHERE 
                                                        (tblVobo.empleado = {0} OR tblAut.empleado = {0}) AND tblPrincipal.cc in ('{1}')
                                                    ORDER BY tblPrincipal.consecutivo", relUser.empleado, string.Join("','", ccs))
                                        );
                                    }
                                    else
                                    {
                                        //var ccFacultamientosEspecial = _context.tblCom_VoboAutorizacionEspecial.Where(x => x.registroActivo).Select(x => x.area + "-" + x.cuenta).ToList();

                                        List<string> ccs = comprasMonto.Select(x => x.area + "-" + x.cuenta).ToList();

                                        //entraFacultamientoEspecial = ccs.Any(x => ccFacultamientosEspecial.Contains(x));

                                        facultamientoEmpleadoEK = consultaCheckProductivo(
                                            string.Format(@"SELECT distinct
                                                        tblPrincipal.area, 
                                                        tblPrincipal.cuenta, 
                                                        tblPrincipal.num_autorizaciones AS tblPrincipalNumAutorizaciones, 
                                                        tblPrincipal.monto_minimo_autoriza, 
                                                        tblPrincipal.monto_maximo_autoriza, 
                                                        tblPrincipal.consecutivo, 
                                                        
                                                        tblVobo.empleado AS empleadoVobo, 
                                                        tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                        
                                                        tblGrupos.tipo AS tipoGrupo, 
                                                        tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                        
                                                        tblAut.empleado AS empleadoAutoriza, 
                                                        tblAut.num_autorizaciones AS tblAutNumAutorizaciones 
                                                    FROM so_area_cta_autorizacion tblPrincipal 
                                                        LEFT JOIN so_empleados_area_cta tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                                        LEFT JOIN so_rel_tipos_vobo_area_cta tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                                        LEFT JOIN so_empleados_autoriza_area_cta tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                                    WHERE 
                                                        tblVobo.empleado = {0} OR tblAut.empleado = {0} AND REPLACE(STR(tblPrincipal.area)+'-'+STR(tblPrincipal.cuenta),' ','') in ('{1}')
                                                    ORDER BY tblPrincipal.consecutivo", relUser.empleado, string.Join("','", ccs))
                                        );
                                    }

                                    if (facultamientoEmpleadoEK != null
                                        //|| entraFacultamientoEspecial
                                        )
                                    {
                                        List<PermisoMontoDTO> facultamientoEmpleado = new List<PermisoMontoDTO>();
                                        List<string> datos1 = null;
                                        string datos2 = null;
                                        List<tipoGrupoDTO> listTipoGrupoGeneral = new List<tipoGrupoDTO>();

                                        if (
                                            //!entraFacultamientoEspecial || 
                                            facultamientoEmpleadoEK != null)
                                        {
                                            facultamientoEmpleado = (List<PermisoMontoDTO>)facultamientoEmpleadoEK.ToObject<List<PermisoMontoDTO>>();
                                            datos1 = comprasMonto.Select(x => "(cc='" + x.cc + "' and numero=" + x.numero + ")").ToList();
                                            datos2 = string.Join(" or ", datos1);

                                            listTipoGrupoGeneral = (List<tipoGrupoDTO>)consultaCheckProductivo(
                                                   string.Format(@"SELECT cc,numero,SUBSTRING(insumo,0,3) as tipoGrupo FROM so_orden_compra_det WHERE cc = 'relleno' or " + datos2)
                                               ).ToObject<List<tipoGrupoDTO>>();
                                        }

                                        foreach (var com in comprasMonto)
                                        {
                                            var total = Convert.ToDecimal((com.moneda == 1 ? com.total : (com.total * com.tipo_cambio)), CultureInfo.InvariantCulture);

                                            //#region Facultamientos Especiales
                                            //if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                                            //{
                                            //    var listaFacultamientosEspeciales = _context.tblCom_VoboAutorizacionEspecial.Where(x => x.registroActivo && x.cc == com.cc && total >= x.monto_minimo && total <= x.monto_maximo).ToList();

                                            //    if (listaFacultamientosEspeciales.Count() > 0) //Si se encuentra por lo menos un registro de facultamientos especiales, se brinca toda la lógica normal.
                                            //    {
                                            //        var facultamientosEspecialesEmpleado = listaFacultamientosEspeciales.Where(x => x.empleado == relUser.empleado).ToList();

                                            //        if (facultamientosEspecialesEmpleado.Count() > 0)
                                            //        {
                                            //            bool flagPuedeDarVobo = false;

                                            //            if ((int)com.vobo == relUser.empleado || (int)com.vobo2 == relUser.empleado || (int)com.vobo3 == relUser.empleado)
                                            //            {
                                            //                flagPuedeDarVobo = false;
                                            //            }
                                            //            else
                                            //            {
                                            //                flagPuedeDarVobo = facultamientosEspecialesEmpleado.FirstOrDefault(x => x.tipo == TipoVoboAutorizacionEnum.VOBO && x.empleado == relUser.empleado) != null;
                                            //            }

                                            //            bool flagPuedeAutorizar = facultamientosEspecialesEmpleado.FirstOrDefault(x => x.tipo == TipoVoboAutorizacionEnum.AUTORIZACION && x.empleado == relUser.empleado) != null;

                                            //            if (!lstCompras.Any(x => x.cc == (string)com.cc && x.numero == (int)com.numero))
                                            //            {
                                            //                bool flagVoboPendiente = false;

                                            //                var vobosRequeridos = listaFacultamientosEspeciales[0].cantidad_vobos;

                                            //                switch (vobosRequeridos)
                                            //                {
                                            //                    case 1:
                                            //                        flagVoboPendiente = (int)com.vobo == 0 ? true : false;
                                            //                        break;
                                            //                    case 2:
                                            //                        flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false;
                                            //                        break;
                                            //                    case 3:
                                            //                        flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 || (int)com.vobo3 == 0 ? true : false;
                                            //                        break;
                                            //                }

                                            //                lstCompras.Add(new OrdenCompraDTO
                                            //                {
                                            //                    cc = com.cc,
                                            //                    ccDesc = com.ccDesc,
                                            //                    numero = com.numero != null ? com.numero : 0,
                                            //                    proveedor = com.proveedor != null ? com.proveedor : 0,
                                            //                    proveedorNom = com.proveedor != null && com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                            //                    total = com.total != null ? com.total : 0,
                                            //                    tipo_cambio = com.tipo_cambio != null ? com.tipo_cambio : 0,
                                            //                    moneda = com.moneda != null ? com.moneda : 1,
                                            //                    fecha = com.fecha != null ? com.fecha : default(DateTime),
                                            //                    flagPuedeAutorizar = flagPuedeAutorizar,
                                            //                    vobo = com.vobo != null ? com.vobo : 0,
                                            //                    vobo2 = com.vobo2 != null ? com.vobo2 : 0,
                                            //                    vobo3 = com.vobo3 != null ? com.vobo3 : 0,
                                            //                    voboPendiente = flagVoboPendiente,
                                            //                    flagPuedeDarVobo = flagPuedeDarVobo,
                                            //                    flagCancelar = puedeCancelar ? (com.ST_OC == "A" && com.st_impresa == "I") ? true : false : false,
                                            //                    numeroRequisicion = com.numeroRequisicion != null ? (int)com.numeroRequisicion : 0,
                                            //                    tieneCuadro = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo > 0 ? true : false : false,
                                            //                    countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                            //                    comentarios = com.comentarios,
                                            //                    flagCompraInterna = false
                                            //                });
                                            //            }
                                            //        }

                                            //        continue;
                                            //    }
                                            //}

                                            //if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                                            //{
                                            //    var listaFacultamientosEspeciales = _context.tblCom_VoboAutorizacionEspecial.Where(x =>
                                            //        x.registroActivo && x.area == com.area && x.cuenta == com.cuenta && total >= x.monto_minimo && total <= x.monto_maximo
                                            //    ).ToList();

                                            //    if (listaFacultamientosEspeciales.Count() > 0) //Si se encuentra por lo menos un registro de facultamientos especiales, se brinca toda la lógica normal.
                                            //    {
                                            //        var facultamientosEspecialesEmpleado = listaFacultamientosEspeciales.Where(x => x.empleado == relUser.empleado).ToList();

                                            //        if (facultamientosEspecialesEmpleado.Count() > 0)
                                            //        {
                                            //            bool flagPuedeDarVobo = false;

                                            //            if ((int)com.vobo == relUser.empleado || (int)com.vobo2 == relUser.empleado || (int)com.vobo3 == relUser.empleado)
                                            //            {
                                            //                flagPuedeDarVobo = false;
                                            //            }
                                            //            else
                                            //            {
                                            //                flagPuedeDarVobo = facultamientosEspecialesEmpleado.FirstOrDefault(x => x.tipo == TipoVoboAutorizacionEnum.VOBO && x.empleado == relUser.empleado) != null;
                                            //            }

                                            //            bool flagPuedeAutorizar = facultamientosEspecialesEmpleado.FirstOrDefault(x => x.tipo == TipoVoboAutorizacionEnum.AUTORIZACION && x.empleado == relUser.empleado) != null;

                                            //            if (!lstCompras.Any(x => x.cc == (string)com.cc && x.numero == (int)com.numero))
                                            //            {
                                            //                bool flagVoboPendiente = false;

                                            //                var vobosRequeridos = listaFacultamientosEspeciales[0].cantidad_vobos;

                                            //                switch (vobosRequeridos)
                                            //                {
                                            //                    case 1:
                                            //                        flagVoboPendiente = (int)com.vobo == 0 ? true : false;
                                            //                        break;
                                            //                    case 2:
                                            //                        flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false;
                                            //                        break;
                                            //                    case 3:
                                            //                        flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 || (int)com.vobo3 == 0 ? true : false;
                                            //                        break;
                                            //                }

                                            //                lstCompras.Add(new OrdenCompraDTO
                                            //                {
                                            //                    cc = com.cc,
                                            //                    ccDesc = com.ccDesc,
                                            //                    numero = com.numero != null ? com.numero : 0,
                                            //                    proveedor = com.proveedor != null ? com.proveedor : 0,
                                            //                    proveedorNom = com.proveedor != null && com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                            //                    total = com.total != null ? com.total : 0,
                                            //                    tipo_cambio = com.tipo_cambio != null ? com.tipo_cambio : 0,
                                            //                    moneda = com.moneda != null ? com.moneda : 1,
                                            //                    fecha = com.fecha != null ? com.fecha : default(DateTime),
                                            //                    flagPuedeAutorizar = flagPuedeAutorizar,
                                            //                    vobo = com.vobo != null ? com.vobo : 0,
                                            //                    vobo2 = com.vobo2 != null ? com.vobo2 : 0,
                                            //                    vobo3 = com.vobo3 != null ? com.vobo3 : 0,
                                            //                    voboPendiente = flagVoboPendiente,
                                            //                    flagPuedeDarVobo = flagPuedeDarVobo,
                                            //                    flagCancelar = puedeCancelar ? (com.ST_OC == "A" && com.st_impresa == "I") ? true : false : false,
                                            //                    numeroRequisicion = com.numeroRequisicion != null ? (int)com.numeroRequisicion : 0,
                                            //                    tieneCuadro = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo > 0 ? true : false : false,
                                            //                    countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                            //                    comentarios = com.comentarios,
                                            //                    flagCompraInterna = false
                                            //                });
                                            //            }
                                            //        }

                                            //        continue;
                                            //    }
                                            //}
                                            //#endregion

                                            var listTipoGrupo = listTipoGrupoGeneral.Where(x => x.cc == com.cc && x.numero == com.numero).Select(x => x.tipoGrupo).ToList();
                                            var facultamientosEmpleado = facultamientoEmpleado.Where(x =>
                                                ((vSesiones.sesionEmpresaActual == 1 || vSesiones.sesionEmpresaActual == 4) ? x.cc.ToUpper().Equals(com.cc) : (x.area == com.area && x.cuenta == com.cuenta)) &&
                                                x.monto_minimo_autoriza <= total &&
                                                x.monto_maximo_autoriza >= total &&
                                                (x.tipoGrupo != null ? listTipoGrupo.Contains((int)x.tipoGrupo) : false)
                                            ).ToList();

                                            if (facultamientosEmpleado.Count > 0)
                                            {
                                                bool flagPuedeDarVobo = false;

                                                if ((int)com.vobo == relUser.empleado || (int)com.vobo2 == relUser.empleado || (int)com.vobo3 == relUser.empleado)
                                                {
                                                    flagPuedeDarVobo = false;
                                                }
                                                else
                                                {
                                                    flagPuedeDarVobo = facultamientosEmpleado.FirstOrDefault(x => x.empleadoVobo == relUser.empleado) != null;
                                                }

                                                bool flagPuedeAutorizar = facultamientosEmpleado.FirstOrDefault(x => x.empleadoAutoriza == relUser.empleado) != null;

                                                if (!lstCompras.Any(x => x.cc == (string)com.cc && x.numero == (int)com.numero))
                                                {
                                                    bool flagVoboPendiente = false;

                                                    var vobosRequeridos = facultamientosEmpleado[0].tblVoboNumAutorizaciones ?? 0;

                                                    switch (vobosRequeridos)
                                                    {
                                                        case 1:
                                                            flagVoboPendiente = (int)com.vobo == 0 ? true : false;
                                                            break;
                                                        case 2:
                                                            flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false;
                                                            break;
                                                        case 3:
                                                            flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 || (int)com.vobo3 == 0 ? true : false;
                                                            break;
                                                    }

                                                    lstCompras.Add(new OrdenCompraDTO
                                                    {
                                                        cc = com.cc,
                                                        ccDesc = com.ccDesc,
                                                        numero = com.numero != null ? com.numero : 0,
                                                        proveedor = com.proveedor != null ? com.proveedor : 0,
                                                        proveedorNom = com.proveedor != null && com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                                        total = com.total != null ? com.total : 0,
                                                        tipo_cambio = com.tipo_cambio != null ? com.tipo_cambio : 0,
                                                        moneda = com.moneda != null ? com.moneda : 1,
                                                        fecha = com.fecha != null ? com.fecha : default(DateTime),
                                                        flagPuedeAutorizar = flagPuedeAutorizar,
                                                        vobo = com.vobo != null ? com.vobo : 0,
                                                        vobo2 = com.vobo2 != null ? com.vobo2 : 0,
                                                        vobo3 = com.vobo3 != null ? com.vobo3 : 0,
                                                        voboPendiente = flagVoboPendiente,
                                                        flagPuedeDarVobo = flagPuedeDarVobo,
                                                        flagCancelar = puedeCancelar ? (com.ST_OC == "A" && com.st_impresa == "I") ? true : false : false,
                                                        numeroRequisicion = com.numeroRequisicion != null ? (int)com.numeroRequisicion : 0,
                                                        tieneCuadro = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo > 0 ? true : false : false,
                                                        countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                                        comentarios = com.comentarios,
                                                        flagCompraInterna = false
                                                    });
                                                }
                                            }
                                        }
                                    }

                                    //OBTENER CALIFICACIONES CUADRO COMPARATIVO SI LAS HAY
                                    ProvNoOptimos(comprasMonto, lstCompras, TipoCompraNoAutorizadaEnum.PorCC_Monto_Grupo);
                                    //
                                }
                                #endregion

                                #region Compras No Autorizadas por Activo Fijo
                                var empleadoVoboActivoFijo = consultaCheckProductivo(string.Format(@"SELECT * FROM so_cc_vobo WHERE empleado = {0}", relUser.empleado));
                                var empleadoAutorizaActivoFijo = usuarioEnkontrol.autoriza_activos_fijos == 1;

                                if (empleadoVoboActivoFijo != null || empleadoAutorizaActivoFijo)
                                {
                                    dynamic comprasActivoFijoEK = null;

                                    if (vSesiones.sesionEmpresaActual == 1 || vSesiones.sesionEmpresaActual == 4)
                                    {
                                        comprasActivoFijoEK = consultaCheckProductivo(
                                        string.Format(@"SELECT 
    tblPrincipal.*, 
    (SELECT COUNT(*) FROM so_cuadro_comparativo cua WHERE cua.cc = tblPrincipal.cc AND cua.numero = tblPrincipal.numeroRequisicion) AS countCuadroComparativo
FROM (
                                            SELECT 
                                                oc.*, 
                                                pr.nombre AS proveedorNom, 
                                                (SELECT TOP 1 det.num_requisicion FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS numeroRequisicion, 
                                                c.descripcion AS ccDesc 
                                            FROM so_orden_compra oc 
                                                LEFT JOIN sp_proveedores pr ON pr.numpro = oc.proveedor 
                                                INNER JOIN cc c ON c.cc = oc.cc 
                                            WHERE 
                                                " + (isAuth ? "oc.ST_OC = 'A'" : "(oc.ST_OC IS NULL OR oc.ST_OC != 'A')") + @" AND 
                                                oc.autoriza_activos = 1 AND 
                                                oc.tmc = 0 
                                                {0}) AS tblPrincipal", cc != "" ? "AND oc.cc = '" + cc + "'" : "")
                                        );
                                    }
                                    else
                                    {
                                        comprasActivoFijoEK = consultaCheckProductivo(
                                            string.Format(@"SELECT 
    tblPrincipal.*, 
    (SELECT COUNT(*) FROM so_cuadro_comparativo cua WHERE cua.cc = tblPrincipal.cc AND cua.numero = tblPrincipal.numeroRequisicion) AS countCuadroComparativo
FROM (
                                                SELECT 
                                                    oc.*, 
                                                    pr.nombre AS proveedorNom, 
                                                    (SELECT TOP 1 det.num_requisicion FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS numeroRequisicion, 
                                                    c.descripcion AS ccDesc, 
                                                    (SELECT TOP 1 det.area FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS area, 
                                                    (SELECT TOP 1 det.cuenta FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS cuenta 
                                                FROM so_orden_compra oc 
                                                    LEFT JOIN sp_proveedores pr ON pr.numpro = oc.proveedor 
                                                    INNER JOIN cc c ON c.cc = oc.cc 
                                                WHERE 
                                                    " + (isAuth ? "oc.ST_OC = 'A'" : "(oc.ST_OC IS NULL OR oc.ST_OC != 'A')") + @" AND 
                                                    oc.autoriza_activos = 1 AND 
                                                    oc.tmc = 0 
                                                    {0}) AS tblPrincipal", cc != "" ? "AND oc.cc = '" + cc + "'" : "")
                                        );
                                    }

                                    if (comprasActivoFijoEK != null)
                                    {
                                        var comprasActivoFijo = (List<OrdenCompraDTO>)comprasActivoFijoEK.ToObject<List<OrdenCompraDTO>>();

                                        comprasActivoFijo = comprasActivoFijo.Where(x => x.fecha >= fechaFiltroAnioActual).ToList();

                                        var listaEmpleadoVoboActivoFijo = new List<dynamic>();

                                        if (empleadoVoboActivoFijo != null)
                                        {
                                            listaEmpleadoVoboActivoFijo = (List<dynamic>)empleadoVoboActivoFijo.ToObject<List<dynamic>>();
                                        }

                                        foreach (var com in comprasActivoFijo)
                                        {
                                            //#region Facultamientos Especiales
                                            //if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                                            //{
                                            //    var totalCompraPesos = com.total * com.tipo_cambio;
                                            //    var listaFacultamientosEspeciales = _context.tblCom_VoboAutorizacionEspecial.Where(x => x.registroActivo && x.cc == com.cc && totalCompraPesos >= x.monto_minimo && totalCompraPesos <= x.monto_maximo).ToList();

                                            //    if (listaFacultamientosEspeciales.Count() > 0) //Si se encuentra por lo menos un registro de facultamientos especiales, se brinca toda la lógica normal.
                                            //    {
                                            //        var facultamientosEspecialesEmpleado = listaFacultamientosEspeciales.Where(x => x.empleado == relUser.empleado).ToList();

                                            //        if (facultamientosEspecialesEmpleado.Count() > 0)
                                            //        {
                                            //            bool flagPuedeDarVoboESP = false;

                                            //            if ((int)com.vobo == relUser.empleado || (int)com.vobo2 == relUser.empleado || (int)com.vobo3 == relUser.empleado)
                                            //            {
                                            //                flagPuedeDarVoboESP = false;
                                            //            }
                                            //            else
                                            //            {
                                            //                flagPuedeDarVoboESP = facultamientosEspecialesEmpleado.FirstOrDefault(x => x.tipo == TipoVoboAutorizacionEnum.VOBO && x.empleado == relUser.empleado) != null;
                                            //            }

                                            //            bool flagPuedeAutorizarESP = facultamientosEspecialesEmpleado.FirstOrDefault(x => x.tipo == TipoVoboAutorizacionEnum.AUTORIZACION && x.empleado == relUser.empleado) != null;

                                            //            if (!lstCompras.Any(x => x.cc == (string)com.cc && x.numero == (int)com.numero))
                                            //            {
                                            //                bool flagVoboPendiente = false;

                                            //                var vobosRequeridos = listaFacultamientosEspeciales[0].cantidad_vobos;

                                            //                switch (vobosRequeridos)
                                            //                {
                                            //                    case 1:
                                            //                        flagVoboPendiente = (int)com.vobo == 0 ? true : false;
                                            //                        break;
                                            //                    case 2:
                                            //                        flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false;
                                            //                        break;
                                            //                    case 3:
                                            //                        flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 || (int)com.vobo3 == 0 ? true : false;
                                            //                        break;
                                            //                }

                                            //                lstCompras.Add(new OrdenCompraDTO
                                            //                {
                                            //                    cc = com.cc,
                                            //                    ccDesc = com.ccDesc,
                                            //                    numero = com.numero != null ? com.numero : 0,
                                            //                    proveedor = com.proveedor != null ? com.proveedor : 0,
                                            //                    proveedorNom = com.proveedor != null && com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                            //                    total = com.total != null ? com.total : 0,
                                            //                    tipo_cambio = com.tipo_cambio != null ? com.tipo_cambio : 0,
                                            //                    moneda = com.moneda != null ? com.moneda : 1,
                                            //                    fecha = com.fecha != null ? com.fecha : default(DateTime),
                                            //                    flagPuedeAutorizar = flagPuedeAutorizarESP,
                                            //                    vobo = com.vobo != null ? com.vobo : 0,
                                            //                    vobo2 = com.vobo2 != null ? com.vobo2 : 0,
                                            //                    vobo3 = com.vobo3 != null ? com.vobo3 : 0,
                                            //                    voboPendiente = flagVoboPendiente,
                                            //                    flagPuedeDarVobo = flagPuedeDarVoboESP,
                                            //                    flagCancelar = puedeCancelar ? (com.ST_OC == "A" && com.st_impresa == "I") ? true : false : false,
                                            //                    numeroRequisicion = com.numeroRequisicion != null ? (int)com.numeroRequisicion : 0,
                                            //                    tieneCuadro = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo > 0 ? true : false : false,
                                            //                    countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                            //                    flagActivoFijo = true,
                                            //                    comentarios = com.comentarios
                                            //                });
                                            //            }
                                            //        }

                                            //        continue;
                                            //    }
                                            //}

                                            //if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                                            //{
                                            //    var totalCompraPesos = com.total * com.tipo_cambio;
                                            //    var listaFacultamientosEspeciales = _context.tblCom_VoboAutorizacionEspecial.Where(x =>
                                            //        x.registroActivo && x.area == com.area && x.cuenta == com.cuenta && totalCompraPesos >= x.monto_minimo && totalCompraPesos <= x.monto_maximo
                                            //    ).ToList();

                                            //    if (listaFacultamientosEspeciales.Count() > 0) //Si se encuentra por lo menos un registro de facultamientos especiales, se brinca toda la lógica normal.
                                            //    {
                                            //        var facultamientosEspecialesEmpleado = listaFacultamientosEspeciales.Where(x => x.empleado == relUser.empleado).ToList();

                                            //        if (facultamientosEspecialesEmpleado.Count() > 0)
                                            //        {
                                            //            bool flagPuedeDarVoboESP = false;

                                            //            if ((int)com.vobo == relUser.empleado || (int)com.vobo2 == relUser.empleado || (int)com.vobo3 == relUser.empleado)
                                            //            {
                                            //                flagPuedeDarVoboESP = false;
                                            //            }
                                            //            else
                                            //            {
                                            //                flagPuedeDarVoboESP = facultamientosEspecialesEmpleado.FirstOrDefault(x => x.tipo == TipoVoboAutorizacionEnum.VOBO && x.empleado == relUser.empleado) != null;
                                            //            }

                                            //            bool flagPuedeAutorizarESP = facultamientosEspecialesEmpleado.FirstOrDefault(x => x.tipo == TipoVoboAutorizacionEnum.AUTORIZACION && x.empleado == relUser.empleado) != null;

                                            //            if (!lstCompras.Any(x => x.cc == (string)com.cc && x.numero == (int)com.numero))
                                            //            {
                                            //                bool flagVoboPendiente = false;

                                            //                var vobosRequeridos = listaFacultamientosEspeciales[0].cantidad_vobos;

                                            //                switch (vobosRequeridos)
                                            //                {
                                            //                    case 1:
                                            //                        flagVoboPendiente = (int)com.vobo == 0 ? true : false;
                                            //                        break;
                                            //                    case 2:
                                            //                        flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false;
                                            //                        break;
                                            //                    case 3:
                                            //                        flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 || (int)com.vobo3 == 0 ? true : false;
                                            //                        break;
                                            //                }

                                            //                lstCompras.Add(new OrdenCompraDTO
                                            //                {
                                            //                    cc = com.cc,
                                            //                    ccDesc = com.ccDesc,
                                            //                    numero = com.numero != null ? com.numero : 0,
                                            //                    proveedor = com.proveedor != null ? com.proveedor : 0,
                                            //                    proveedorNom = com.proveedor != null && com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                            //                    total = com.total != null ? com.total : 0,
                                            //                    tipo_cambio = com.tipo_cambio != null ? com.tipo_cambio : 0,
                                            //                    moneda = com.moneda != null ? com.moneda : 1,
                                            //                    fecha = com.fecha != null ? com.fecha : default(DateTime),
                                            //                    flagPuedeAutorizar = flagPuedeAutorizarESP,
                                            //                    vobo = com.vobo != null ? com.vobo : 0,
                                            //                    vobo2 = com.vobo2 != null ? com.vobo2 : 0,
                                            //                    vobo3 = com.vobo3 != null ? com.vobo3 : 0,
                                            //                    voboPendiente = flagVoboPendiente,
                                            //                    flagPuedeDarVobo = flagPuedeDarVoboESP,
                                            //                    flagCancelar = puedeCancelar ? (com.ST_OC == "A" && com.st_impresa == "I") ? true : false : false,
                                            //                    numeroRequisicion = com.numeroRequisicion != null ? (int)com.numeroRequisicion : 0,
                                            //                    tieneCuadro = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo > 0 ? true : false : false,
                                            //                    countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                            //                    flagActivoFijo = true,
                                            //                    comentarios = com.comentarios
                                            //                });
                                            //            }
                                            //        }

                                            //        continue;
                                            //    }
                                            //}
                                            //#endregion

                                            bool flagPuedeDarVobo = false;

                                            if ((int)com.vobo == relUser.empleado || (int)com.vobo2 == relUser.empleado || (int)com.vobo3 == relUser.empleado)
                                            {
                                                flagPuedeDarVobo = false;
                                            }
                                            else
                                            {
                                                if (listaEmpleadoVoboActivoFijo.Count() > 0)
                                                {
                                                    flagPuedeDarVobo = listaEmpleadoVoboActivoFijo.FirstOrDefault(x => ((string)x.cc).ToUpper().Equals((string)com.cc)) != null;
                                                }
                                            }

                                            bool flagPuedeAutorizar = empleadoAutorizaActivoFijo;

                                            if (!lstCompras.Any(x => x.cc.ToUpper().Equals((string)com.cc) && x.numero == (int)com.numero))
                                            {
                                                bool flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false; //Siempre son dos VoBos cuando la compra es Activo Fijo

                                                if (listaEmpleadoVoboActivoFijo.Count() > 0)
                                                {
                                                    if (listaEmpleadoVoboActivoFijo.Select(x => (string)x.cc).Contains(com.cc) || flagPuedeAutorizar)
                                                    {
                                                        lstCompras.Add(new OrdenCompraDTO
                                                        {
                                                            cc = com.cc,
                                                            ccDesc = com.ccDesc,
                                                            numero = com.numero != null ? com.numero : 0,
                                                            proveedor = com.proveedor != null ? com.proveedor : 0,
                                                            proveedorNom = com.proveedor != null && com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                                            total = com.total != null ? com.total : 0,
                                                            tipo_cambio = com.tipo_cambio != null ? com.tipo_cambio : 0,
                                                            moneda = com.moneda != null ? com.moneda : 1,
                                                            fecha = com.fecha != null ? com.fecha : default(DateTime),
                                                            flagPuedeAutorizar = flagPuedeAutorizar,
                                                            vobo = com.vobo != null ? com.vobo : 0,
                                                            vobo2 = com.vobo2 != null ? com.vobo2 : 0,
                                                            vobo3 = com.vobo3 != null ? com.vobo3 : 0,
                                                            voboPendiente = flagVoboPendiente,
                                                            flagPuedeDarVobo = flagPuedeDarVobo,
                                                            flagCancelar = puedeCancelar ? (com.ST_OC == "A" && com.st_impresa == "I") ? true : false : false,
                                                            numeroRequisicion = com.numeroRequisicion != null ? (int)com.numeroRequisicion : 0,
                                                            tieneCuadro = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo > 0 ? true : false : false,
                                                            countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                                            flagActivoFijo = true,
                                                            comentarios = com.comentarios
                                                        });
                                                    }
                                                }
                                                else
                                                {
                                                    lstCompras.Add(new OrdenCompraDTO
                                                    {
                                                        cc = com.cc,
                                                        ccDesc = com.ccDesc,
                                                        numero = com.numero != null ? com.numero : 0,
                                                        proveedor = com.proveedor != null ? com.proveedor : 0,
                                                        proveedorNom = com.proveedor != null && com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                                        total = com.total != null ? com.total : 0,
                                                        tipo_cambio = com.tipo_cambio != null ? com.tipo_cambio : 0,
                                                        moneda = com.moneda != null ? com.moneda : 1,
                                                        fecha = com.fecha != null ? com.fecha : default(DateTime),
                                                        flagPuedeAutorizar = flagPuedeAutorizar,
                                                        vobo = com.vobo != null ? com.vobo : 0,
                                                        vobo2 = com.vobo2 != null ? com.vobo2 : 0,
                                                        vobo3 = com.vobo3 != null ? com.vobo3 : 0,
                                                        voboPendiente = flagVoboPendiente,
                                                        flagPuedeDarVobo = flagPuedeDarVobo,
                                                        flagCancelar = puedeCancelar ? (com.ST_OC == "A" && com.st_impresa == "I") ? true : false : false,
                                                        numeroRequisicion = com.numeroRequisicion != null ? (int)com.numeroRequisicion : 0,
                                                        tieneCuadro = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo > 0 ? true : false : false,
                                                        countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                                        flagActivoFijo = true,
                                                        comentarios = com.comentarios
                                                    });
                                                }
                                            }
                                        }

                                        //OBTENER CALIFICACIONES CUADRO COMPARATIVO SI LAS HAY
                                        ProvNoOptimos(comprasActivoFijo, lstCompras, TipoCompraNoAutorizadaEnum.ActivoFijo);
                                        //
                                    }
                                }
                                #endregion

                                #region Compras No Autorizadas por TMC
                                var empleadoVoboTMC = usuarioEnkontrol.vobo_tmc == 1;
                                var empleadoAutorizaTMC = usuarioEnkontrol.autoriza_tmc == 1;

                                if (empleadoVoboTMC || empleadoAutorizaTMC)
                                {
                                    dynamic comprasTMCEK = null;

                                    if (vSesiones.sesionEmpresaActual == 1 || vSesiones.sesionEmpresaActual == 4)
                                    {
                                        comprasTMCEK = consultaCheckProductivo(
                                        string.Format(@"SELECT 
    tblPrincipal.*, 
    (SELECT COUNT(*) FROM so_cuadro_comparativo cua WHERE cua.cc = tblPrincipal.cc AND cua.numero = tblPrincipal.numeroRequisicion) AS countCuadroComparativo
FROM (
                                            SELECT 
                                                oc.*, 
                                                pr.nombre AS proveedorNom, 
                                                (SELECT TOP 1 det.num_requisicion FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS numeroRequisicion, 
                                                c.descripcion AS ccDesc 
                                            FROM so_orden_compra oc 
                                                LEFT JOIN sp_proveedores pr ON pr.numpro = oc.proveedor 
                                                INNER JOIN cc c ON c.cc = oc.cc 
                                            WHERE 
                                                " + (isAuth ? "oc.ST_OC = 'A'" : "(oc.ST_OC IS NULL OR oc.ST_OC != 'A')") + @" AND 
                                                oc.autoriza_activos = 0 AND 
                                                oc.tmc = 1 
                                                {0}) AS tblPrincipal", cc != "" ? "AND oc.cc = '" + cc + "'" : "")
                                        );
                                    }
                                    else
                                    {
                                        comprasTMCEK = consultaCheckProductivo(
                                            string.Format(@"SELECT 
    tblPrincipal.*, 
    (SELECT COUNT(*) FROM so_cuadro_comparativo cua WHERE cua.cc = tblPrincipal.cc AND cua.numero = tblPrincipal.numeroRequisicion) AS countCuadroComparativo
FROM (
                                                SELECT 
                                                    oc.*, 
                                                    pr.nombre AS proveedorNom, 
                                                    (SELECT TOP 1 det.num_requisicion FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS numeroRequisicion, 
                                                    c.descripcion AS ccDesc, 
                                                    (SELECT TOP 1 det.area FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS area, 
                                                    (SELECT TOP 1 det.cuenta FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS cuenta 
                                                FROM so_orden_compra oc 
                                                    LEFT JOIN sp_proveedores pr ON pr.numpro = oc.proveedor 
                                                    INNER JOIN cc c ON c.cc = oc.cc 
                                                WHERE 
                                                    " + (isAuth ? "oc.ST_OC = 'A'" : "(oc.ST_OC IS NULL OR oc.ST_OC != 'A')") + @" AND 
                                                    oc.autoriza_activos = 0 AND 
                                                    oc.tmc = 1 
                                                    {0}) AS tblPrincipal", cc != "" ? "AND oc.cc = '" + cc + "'" : "")
                                        );
                                    }

                                    if (comprasTMCEK != null)
                                    {
                                        var comprasTMC = (List<OrdenCompraDTO>)comprasTMCEK.ToObject<List<OrdenCompraDTO>>();

                                        comprasTMC = comprasTMC.Where(x => x.fecha >= fechaFiltroAnioActual).ToList();

                                        foreach (var com in comprasTMC)
                                        {
                                            //#region Facultamientos Especiales
                                            //if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                                            //{
                                            //    var totalCompraPesos = com.total * com.tipo_cambio;
                                            //    var listaFacultamientosEspeciales = _context.tblCom_VoboAutorizacionEspecial.Where(x => x.registroActivo && x.cc == com.cc && totalCompraPesos >= x.monto_minimo && totalCompraPesos <= x.monto_maximo).ToList();

                                            //    if (listaFacultamientosEspeciales.Count() > 0) //Si se encuentra por lo menos un registro de facultamientos especiales, se brinca toda la lógica normal.
                                            //    {
                                            //        var facultamientosEspecialesEmpleado = listaFacultamientosEspeciales.Where(x => x.empleado == relUser.empleado).ToList();

                                            //        if (facultamientosEspecialesEmpleado.Count() > 0)
                                            //        {
                                            //            bool flagPuedeDarVoboESP = false;

                                            //            if ((int)com.vobo == relUser.empleado || (int)com.vobo2 == relUser.empleado || (int)com.vobo3 == relUser.empleado)
                                            //            {
                                            //                flagPuedeDarVoboESP = false;
                                            //            }
                                            //            else
                                            //            {
                                            //                flagPuedeDarVoboESP = facultamientosEspecialesEmpleado.FirstOrDefault(x => x.tipo == TipoVoboAutorizacionEnum.VOBO && x.empleado == relUser.empleado) != null;
                                            //            }

                                            //            bool flagPuedeAutorizarESP = facultamientosEspecialesEmpleado.FirstOrDefault(x => x.tipo == TipoVoboAutorizacionEnum.AUTORIZACION && x.empleado == relUser.empleado) != null;

                                            //            if (!lstCompras.Any(x => x.cc == (string)com.cc && x.numero == (int)com.numero))
                                            //            {
                                            //                bool flagVoboPendiente = false;

                                            //                var vobosRequeridos = listaFacultamientosEspeciales[0].cantidad_vobos;

                                            //                switch (vobosRequeridos)
                                            //                {
                                            //                    case 1:
                                            //                        flagVoboPendiente = (int)com.vobo == 0 ? true : false;
                                            //                        break;
                                            //                    case 2:
                                            //                        flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false;
                                            //                        break;
                                            //                    case 3:
                                            //                        flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 || (int)com.vobo3 == 0 ? true : false;
                                            //                        break;
                                            //                }

                                            //                lstCompras.Add(new OrdenCompraDTO
                                            //                {
                                            //                    cc = com.cc,
                                            //                    ccDesc = com.ccDesc,
                                            //                    numero = com.numero != null ? com.numero : 0,
                                            //                    proveedor = com.proveedor != null ? com.proveedor : 0,
                                            //                    proveedorNom = com.proveedor != null && com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                            //                    total = com.total != null ? com.total : 0,
                                            //                    tipo_cambio = com.tipo_cambio != null ? com.tipo_cambio : 0,
                                            //                    moneda = com.moneda != null ? com.moneda : 1,
                                            //                    fecha = com.fecha != null ? com.fecha : default(DateTime),
                                            //                    flagPuedeAutorizar = flagPuedeAutorizarESP,
                                            //                    vobo = com.vobo != null ? com.vobo : 0,
                                            //                    vobo2 = com.vobo2 != null ? com.vobo2 : 0,
                                            //                    vobo3 = com.vobo3 != null ? com.vobo3 : 0,
                                            //                    voboPendiente = flagVoboPendiente,
                                            //                    flagPuedeDarVobo = flagPuedeDarVoboESP,
                                            //                    flagCancelar = puedeCancelar ? (com.ST_OC == "A" && com.st_impresa == "I") ? true : false : false,
                                            //                    numeroRequisicion = com.numeroRequisicion != null ? (int)com.numeroRequisicion : 0,
                                            //                    tieneCuadro = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo > 0 ? true : false : false,
                                            //                    countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                            //                    flagTMC = true,
                                            //                    comentarios = com.comentarios
                                            //                });
                                            //            }
                                            //        }

                                            //        continue;
                                            //    }
                                            //}

                                            //if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                                            //{
                                            //    var totalCompraPesos = com.total * com.tipo_cambio;
                                            //    var listaFacultamientosEspeciales = _context.tblCom_VoboAutorizacionEspecial.Where(x =>
                                            //        x.registroActivo && x.area == com.area && x.cuenta == com.cuenta && totalCompraPesos >= x.monto_minimo && totalCompraPesos <= x.monto_maximo
                                            //    ).ToList();

                                            //    if (listaFacultamientosEspeciales.Count() > 0) //Si se encuentra por lo menos un registro de facultamientos especiales, se brinca toda la lógica normal.
                                            //    {
                                            //        var facultamientosEspecialesEmpleado = listaFacultamientosEspeciales.Where(x => x.empleado == relUser.empleado).ToList();

                                            //        if (facultamientosEspecialesEmpleado.Count() > 0)
                                            //        {
                                            //            bool flagPuedeDarVoboESP = false;

                                            //            if ((int)com.vobo == relUser.empleado || (int)com.vobo2 == relUser.empleado || (int)com.vobo3 == relUser.empleado)
                                            //            {
                                            //                flagPuedeDarVoboESP = false;
                                            //            }
                                            //            else
                                            //            {
                                            //                flagPuedeDarVoboESP = facultamientosEspecialesEmpleado.FirstOrDefault(x => x.tipo == TipoVoboAutorizacionEnum.VOBO && x.empleado == relUser.empleado) != null;
                                            //            }

                                            //            bool flagPuedeAutorizarESP = facultamientosEspecialesEmpleado.FirstOrDefault(x => x.tipo == TipoVoboAutorizacionEnum.AUTORIZACION && x.empleado == relUser.empleado) != null;

                                            //            if (!lstCompras.Any(x => x.cc == (string)com.cc && x.numero == (int)com.numero))
                                            //            {
                                            //                bool flagVoboPendiente = false;

                                            //                var vobosRequeridos = listaFacultamientosEspeciales[0].cantidad_vobos;

                                            //                switch (vobosRequeridos)
                                            //                {
                                            //                    case 1:
                                            //                        flagVoboPendiente = (int)com.vobo == 0 ? true : false;
                                            //                        break;
                                            //                    case 2:
                                            //                        flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false;
                                            //                        break;
                                            //                    case 3:
                                            //                        flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 || (int)com.vobo3 == 0 ? true : false;
                                            //                        break;
                                            //                }

                                            //                lstCompras.Add(new OrdenCompraDTO
                                            //                {
                                            //                    cc = com.cc,
                                            //                    ccDesc = com.ccDesc,
                                            //                    numero = com.numero != null ? com.numero : 0,
                                            //                    proveedor = com.proveedor != null ? com.proveedor : 0,
                                            //                    proveedorNom = com.proveedor != null && com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                            //                    total = com.total != null ? com.total : 0,
                                            //                    tipo_cambio = com.tipo_cambio != null ? com.tipo_cambio : 0,
                                            //                    moneda = com.moneda != null ? com.moneda : 1,
                                            //                    fecha = com.fecha != null ? com.fecha : default(DateTime),
                                            //                    flagPuedeAutorizar = flagPuedeAutorizarESP,
                                            //                    vobo = com.vobo != null ? com.vobo : 0,
                                            //                    vobo2 = com.vobo2 != null ? com.vobo2 : 0,
                                            //                    vobo3 = com.vobo3 != null ? com.vobo3 : 0,
                                            //                    voboPendiente = flagVoboPendiente,
                                            //                    flagPuedeDarVobo = flagPuedeDarVoboESP,
                                            //                    flagCancelar = puedeCancelar ? (com.ST_OC == "A" && com.st_impresa == "I") ? true : false : false,
                                            //                    numeroRequisicion = com.numeroRequisicion != null ? (int)com.numeroRequisicion : 0,
                                            //                    tieneCuadro = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo > 0 ? true : false : false,
                                            //                    countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                            //                    flagTMC = true,
                                            //                    comentarios = com.comentarios
                                            //                });
                                            //            }
                                            //        }

                                            //        continue;
                                            //    }
                                            //}
                                            //#endregion

                                            bool flagPuedeDarVobo = false;

                                            if ((int)com.vobo == relUser.empleado || (int)com.vobo2 == relUser.empleado || (int)com.vobo3 == relUser.empleado)
                                            {
                                                flagPuedeDarVobo = false;
                                            }
                                            else
                                            {
                                                flagPuedeDarVobo = empleadoVoboTMC;
                                            }

                                            bool flagPuedeAutorizar = empleadoAutorizaTMC;

                                            if (!lstCompras.Any(x => x.cc.ToUpper().Equals((string)com.cc) && x.numero == (int)com.numero))
                                            {
                                                bool flagVoboPendiente = (int)com.vobo == 0 ? true : false; //Siempre es un VoBo cuando la compra es TMC.

                                                lstCompras.Add(new OrdenCompraDTO
                                                {
                                                    cc = com.cc,
                                                    ccDesc = com.ccDesc,
                                                    numero = com.numero != null ? com.numero : 0,
                                                    proveedor = com.proveedor != null ? com.proveedor : 0,
                                                    proveedorNom = com.proveedor != null && com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                                    total = com.total != null ? com.total : 0,
                                                    tipo_cambio = com.tipo_cambio != null ? com.tipo_cambio : 0,
                                                    moneda = com.moneda != null ? com.moneda : 1,
                                                    fecha = com.fecha != null ? com.fecha : default(DateTime),
                                                    flagPuedeAutorizar = flagPuedeAutorizar,
                                                    vobo = com.vobo != null ? com.vobo : 0,
                                                    vobo2 = com.vobo2 != null ? com.vobo2 : 0,
                                                    vobo3 = com.vobo3 != null ? com.vobo3 : 0,
                                                    voboPendiente = flagVoboPendiente,
                                                    flagPuedeDarVobo = flagPuedeDarVobo,
                                                    flagCancelar = puedeCancelar ? (com.ST_OC == "A" && com.st_impresa == "I") ? true : false : false,
                                                    numeroRequisicion = com.numeroRequisicion != null ? (int)com.numeroRequisicion : 0,
                                                    tieneCuadro = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo > 0 ? true : false : false,
                                                    countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                                    flagTMC = true,
                                                    comentarios = com.comentarios
                                                });
                                            }
                                        }

                                        //OBTENER CALIFICACIONES CUADRO COMPARATIVO SI LAS HAY
                                        ProvNoOptimos(comprasTMC, lstCompras, TipoCompraNoAutorizadaEnum.TMC);
                                        //
                                    }
                                }
                                #endregion

                                #region Compras Traspaso de Almacén
                                if (relUser.empleado == 59 || relUser.empleado == 1)
                                {
                                    var comprasTraspasoAlmacen = _contextEnkontrol.Select<OrdenCompraDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                    {
                                        consulta = string.Format(@"
                            SELECT
                                oc.cc, oc.numero, oc.proveedor, oc.total, oc.tipo_cambio, oc.moneda, oc.fecha, oc.vobo, oc.vobo2, oc.vobo3, oc.ST_OC, oc.st_impresa, oc.comentarios,
                                pr.nombre AS proveedorNom,
                                (SELECT TOP 1 det.num_requisicion FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS numeroRequisicion,
                                c.descripcion AS ccDesc,
                                (SELECT det.area FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero AND det.partida = 1) AS area,
                                (SELECT det.cuenta FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero AND det.partida = 1) AS cuenta,
                                (SELECT COUNT(*) FROM so_cuadro_comparativo cua WHERE cua.cc = oc.cc AND cua.numero = (SELECT det.num_requisicion FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero AND det.partida = 1)) AS countCuadroComparativo
                            FROM so_orden_compra oc
                                LEFT JOIN sp_proveedores pr ON pr.numpro = oc.proveedor
                                INNER JOIN cc c ON c.cc = oc.cc
                            WHERE c.st_ppto != 'T' AND " +
                                                (isAuth ? "oc.ST_OC = 'A'" : "(oc.ST_OC IS NULL OR oc.ST_OC != 'A')") +
                                                (@" AND fecha >= '" + fechaFiltroAnioActual.ToString("yyyy-MM-dd")) + @"' " +
                                                (cc != "" ? "AND oc.cc = '" + cc + "'" : ""))
                                    });

                                    foreach (var compra in comprasTraspasoAlmacen)
                                    {
                                        //#region Facultamientos Especiales
                                        //if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                                        //{
                                        //    var totalCompraPesos = compra.total * compra.tipo_cambio;
                                        //    var listaFacultamientosEspeciales = _context.tblCom_VoboAutorizacionEspecial.Where(x => x.registroActivo && x.cc == compra.cc && totalCompraPesos >= x.monto_minimo && totalCompraPesos <= x.monto_maximo).ToList();

                                        //    if (listaFacultamientosEspeciales.Count() > 0) //Si se encuentra por lo menos un registro de facultamientos especiales, se brinca toda la lógica normal.
                                        //    {
                                        //        var facultamientosEspecialesEmpleado = listaFacultamientosEspeciales.Where(x => x.empleado == relUser.empleado).ToList();

                                        //        if (facultamientosEspecialesEmpleado.Count() > 0)
                                        //        {
                                        //            bool flagPuedeDarVoboESP = false;

                                        //            if ((int)compra.vobo == relUser.empleado || (int)compra.vobo2 == relUser.empleado || (int)compra.vobo3 == relUser.empleado)
                                        //            {
                                        //                flagPuedeDarVoboESP = false;
                                        //            }
                                        //            else
                                        //            {
                                        //                flagPuedeDarVoboESP = facultamientosEspecialesEmpleado.FirstOrDefault(x => x.tipo == TipoVoboAutorizacionEnum.VOBO && x.empleado == relUser.empleado) != null;
                                        //            }

                                        //            bool flagPuedeAutorizarESP = facultamientosEspecialesEmpleado.FirstOrDefault(x => x.tipo == TipoVoboAutorizacionEnum.AUTORIZACION && x.empleado == relUser.empleado) != null;

                                        //            if (!lstCompras.Any(x => x.cc == (string)compra.cc && x.numero == (int)compra.numero))
                                        //            {
                                        //                bool flagVoboPendiente = false;

                                        //                var vobosRequeridos = listaFacultamientosEspeciales[0].cantidad_vobos;

                                        //                switch (vobosRequeridos)
                                        //                {
                                        //                    case 1:
                                        //                        flagVoboPendiente = (int)compra.vobo == 0 ? true : false;
                                        //                        break;
                                        //                    case 2:
                                        //                        flagVoboPendiente = (int)compra.vobo == 0 || (int)compra.vobo2 == 0 ? true : false;
                                        //                        break;
                                        //                    case 3:
                                        //                        flagVoboPendiente = (int)compra.vobo == 0 || (int)compra.vobo2 == 0 || (int)compra.vobo3 == 0 ? true : false;
                                        //                        break;
                                        //                }

                                        //                if (compra.proveedor == 5412) //Verificar que la compra tenga proveedor de Construplan
                                        //                {
                                        //                    if (compra.area == 1 && compra.cuenta == 9) //Verificar que la compra tenga el área-cuenta "1-9" en la primer partida
                                        //                    {
                                        //                        lstCompras.Add(new OrdenCompraDTO
                                        //                        {
                                        //                            cc = compra.cc,
                                        //                            ccDesc = compra.ccDesc,
                                        //                            numero = compra.numero,
                                        //                            proveedor = compra.proveedor,
                                        //                            proveedorNom = compra.proveedor + " - " + (compra.proveedorNom ?? ""),
                                        //                            total = compra.total,
                                        //                            tipo_cambio = compra.tipo_cambio,
                                        //                            moneda = compra.moneda,
                                        //                            fecha = compra.fecha,
                                        //                            vobo = compra.vobo,
                                        //                            vobo2 = compra.vobo2,
                                        //                            vobo3 = compra.vobo3,
                                        //                            flagPuedeDarVobo = false,
                                        //                            flagCancelar = puedeCancelar ? (compra.ST_OC == "A" && compra.st_impresa == "I") ? true : false : false,
                                        //                            numeroRequisicion = compra.numeroRequisicion,
                                        //                            tieneCuadro = compra.countCuadroComparativo > 0 ? true : false,
                                        //                            countCuadroComparativo = compra.countCuadroComparativo,
                                        //                            comentarios = compra.comentarios ?? "",
                                        //                            flagCompraInterna = false,

                                        //                            voboProveedorNoOptimo = false,
                                        //                            voboPendiente = false,
                                        //                            flagPuedeAutorizar = true,
                                        //                            puedeDarVoboProvNoOptimo = false,
                                        //                            cuadroGeneradoConCalificacion = false,
                                        //                            flagCompraTraspasoAlmacen = true
                                        //                        });
                                        //                    }
                                        //                }
                                        //            }
                                        //        }

                                        //        continue;
                                        //    }
                                        //}

                                        //if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                                        //{
                                        //    var totalCompraPesos = compra.total * compra.tipo_cambio;
                                        //    var listaFacultamientosEspeciales = _context.tblCom_VoboAutorizacionEspecial.Where(x =>
                                        //        x.registroActivo && x.area == compra.area && x.cuenta == compra.cuenta && totalCompraPesos >= x.monto_minimo && totalCompraPesos <= x.monto_maximo
                                        //    ).ToList();

                                        //    if (listaFacultamientosEspeciales.Count() > 0) //Si se encuentra por lo menos un registro de facultamientos especiales, se brinca toda la lógica normal.
                                        //    {
                                        //        var facultamientosEspecialesEmpleado = listaFacultamientosEspeciales.Where(x => x.empleado == relUser.empleado).ToList();

                                        //        if (facultamientosEspecialesEmpleado.Count() > 0)
                                        //        {
                                        //            bool flagPuedeDarVoboESP = false;

                                        //            if ((int)compra.vobo == relUser.empleado || (int)compra.vobo2 == relUser.empleado || (int)compra.vobo3 == relUser.empleado)
                                        //            {
                                        //                flagPuedeDarVoboESP = false;
                                        //            }
                                        //            else
                                        //            {
                                        //                flagPuedeDarVoboESP = facultamientosEspecialesEmpleado.FirstOrDefault(x => x.tipo == TipoVoboAutorizacionEnum.VOBO && x.empleado == relUser.empleado) != null;
                                        //            }

                                        //            bool flagPuedeAutorizarESP = facultamientosEspecialesEmpleado.FirstOrDefault(x => x.tipo == TipoVoboAutorizacionEnum.AUTORIZACION && x.empleado == relUser.empleado) != null;

                                        //            if (!lstCompras.Any(x => x.cc == (string)compra.cc && x.numero == (int)compra.numero))
                                        //            {
                                        //                bool flagVoboPendiente = false;

                                        //                var vobosRequeridos = listaFacultamientosEspeciales[0].cantidad_vobos;

                                        //                switch (vobosRequeridos)
                                        //                {
                                        //                    case 1:
                                        //                        flagVoboPendiente = (int)compra.vobo == 0 ? true : false;
                                        //                        break;
                                        //                    case 2:
                                        //                        flagVoboPendiente = (int)compra.vobo == 0 || (int)compra.vobo2 == 0 ? true : false;
                                        //                        break;
                                        //                    case 3:
                                        //                        flagVoboPendiente = (int)compra.vobo == 0 || (int)compra.vobo2 == 0 || (int)compra.vobo3 == 0 ? true : false;
                                        //                        break;
                                        //                }

                                        //                if (compra.proveedor == 5412) //Verificar que la compra tenga proveedor de Construplan
                                        //                {
                                        //                    if (compra.area == 1 && compra.cuenta == 9) //Verificar que la compra tenga el área-cuenta "1-9" en la primer partida
                                        //                    {
                                        //                        lstCompras.Add(new OrdenCompraDTO
                                        //                        {
                                        //                            cc = compra.cc,
                                        //                            ccDesc = compra.ccDesc,
                                        //                            numero = compra.numero,
                                        //                            proveedor = compra.proveedor,
                                        //                            proveedorNom = compra.proveedor + " - " + (compra.proveedorNom ?? ""),
                                        //                            total = compra.total,
                                        //                            tipo_cambio = compra.tipo_cambio,
                                        //                            moneda = compra.moneda,
                                        //                            fecha = compra.fecha,
                                        //                            vobo = compra.vobo,
                                        //                            vobo2 = compra.vobo2,
                                        //                            vobo3 = compra.vobo3,
                                        //                            flagPuedeDarVobo = false,
                                        //                            flagCancelar = puedeCancelar ? (compra.ST_OC == "A" && compra.st_impresa == "I") ? true : false : false,
                                        //                            numeroRequisicion = compra.numeroRequisicion,
                                        //                            tieneCuadro = compra.countCuadroComparativo > 0 ? true : false,
                                        //                            countCuadroComparativo = compra.countCuadroComparativo,
                                        //                            comentarios = compra.comentarios ?? "",
                                        //                            flagCompraInterna = false,

                                        //                            voboProveedorNoOptimo = false,
                                        //                            voboPendiente = false,
                                        //                            flagPuedeAutorizar = true,
                                        //                            puedeDarVoboProvNoOptimo = false,
                                        //                            cuadroGeneradoConCalificacion = false,
                                        //                            flagCompraTraspasoAlmacen = true
                                        //                        });
                                        //                    }
                                        //                }
                                        //            }
                                        //        }

                                        //        continue;
                                        //    }
                                        //}
                                        //#endregion

                                        if (compra.proveedor == 5412) //Verificar que la compra tenga proveedor de Construplan
                                        {
                                            if (compra.area == 1 && compra.cuenta == 9) //Verificar que la compra tenga el área-cuenta "1-9" en la primer partida
                                            {
                                                lstCompras.Add(new OrdenCompraDTO
                                                {
                                                    cc = compra.cc,
                                                    ccDesc = compra.ccDesc,
                                                    numero = compra.numero,
                                                    proveedor = compra.proveedor,
                                                    proveedorNom = compra.proveedor + " - " + (compra.proveedorNom ?? ""),
                                                    total = compra.total,
                                                    tipo_cambio = compra.tipo_cambio,
                                                    moneda = compra.moneda,
                                                    fecha = compra.fecha,
                                                    vobo = compra.vobo,
                                                    vobo2 = compra.vobo2,
                                                    vobo3 = compra.vobo3,
                                                    flagPuedeDarVobo = false,
                                                    flagCancelar = puedeCancelar ? (compra.ST_OC == "A" && compra.st_impresa == "I") ? true : false : false,
                                                    numeroRequisicion = compra.numeroRequisicion,
                                                    tieneCuadro = compra.countCuadroComparativo > 0 ? true : false,
                                                    countCuadroComparativo = compra.countCuadroComparativo,
                                                    comentarios = compra.comentarios ?? "",
                                                    flagCompraInterna = false,

                                                    voboProveedorNoOptimo = false,
                                                    voboPendiente = false,
                                                    flagPuedeAutorizar = true,
                                                    puedeDarVoboProvNoOptimo = false,
                                                    cuadroGeneradoConCalificacion = false,
                                                    flagCompraTraspasoAlmacen = true
                                                });
                                            }
                                        }
                                    }
                                }
                                #endregion
                            }
                            else
                            {
                                #region Todas las Compras No Autorizadas (Administrador)
                                dynamic comprasEK = null;

                                if (vSesiones.sesionEmpresaActual == 1 || vSesiones.sesionEmpresaActual == 4)
                                {
                                    comprasEK = consultaCheckProductivo(
                                    string.Format(@"SELECT 
    tblPrincipal.*, 
    (SELECT COUNT(*) FROM so_cuadro_comparativo cua WHERE cua.cc = tblPrincipal.cc AND cua.numero = tblPrincipal.numeroRequisicion) AS countCuadroComparativo
FROM (
                                        SELECT 
                                            oc.*, 
                                            pr.nombre AS proveedorNom, 
                                            (SELECT TOP 1 det.num_requisicion FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS numeroRequisicion, 
                                            c.descripcion AS ccDesc 
                                        FROM so_orden_compra oc 
                                            LEFT JOIN sp_proveedores pr ON pr.numpro = oc.proveedor 
                                            INNER JOIN cc c ON c.cc = oc.cc 
                                        WHERE 
                                            " + (isAuth ? "oc.ST_OC = 'A'" : "(oc.ST_OC IS NULL OR oc.ST_OC != 'A')") + @" 
                                            {0}) AS tblPrincipal", cc != "" ? "AND oc.cc = '" + cc + "'" : "")
                                    );
                                }
                                else
                                {
                                    comprasEK = consultaCheckProductivo(
                                        string.Format(@"SELECT 
    tblPrincipal.*, 
    (SELECT COUNT(*) FROM so_cuadro_comparativo cua WHERE cua.cc = tblPrincipal.cc AND cua.numero = tblPrincipal.numeroRequisicion) AS countCuadroComparativo
FROM (
                                            SELECT 
                                                oc.*, 
                                                pr.nombre AS proveedorNom, 
                                                (SELECT TOP 1 det.num_requisicion FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS numeroRequisicion, 
                                                c.descripcion AS ccDesc, 
                                                (SELECT TOP 1 det.area FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS area, 
                                                (SELECT TOP 1 det.cuenta FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS cuenta 
                                            FROM so_orden_compra oc 
                                                LEFT JOIN sp_proveedores pr ON pr.numpro = oc.proveedor 
                                                INNER JOIN cc c ON c.cc = oc.cc 
                                            WHERE 
                                                " + (isAuth ? "oc.ST_OC = 'A'" : "(oc.ST_OC IS NULL OR oc.ST_OC != 'A')") + @" 
                                                {0}) AS tblPrincipal", cc != "" ? "AND oc.cc = '" + cc + "'" : "")
                                    );
                                }

                                if (comprasEK != null)
                                {
                                    var compras = (List<OrdenCompraDTO>)comprasEK.ToObject<List<OrdenCompraDTO>>();

                                    compras = compras.Where(x => x.fecha >= fechaFiltroAnioActual).ToList();

                                    foreach (var com in compras)
                                    {
                                        //#region Facultamientos Especiales
                                        //if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                                        //{
                                        //    var totalCompraPesos = com.total * com.tipo_cambio;
                                        //    var listaFacultamientosEspeciales = _context.tblCom_VoboAutorizacionEspecial.Where(x => x.registroActivo && x.cc == com.cc && totalCompraPesos >= x.monto_minimo && totalCompraPesos <= x.monto_maximo).ToList();

                                        //    if (listaFacultamientosEspeciales.Count() > 0) //Si se encuentra por lo menos un registro de facultamientos especiales, se brinca toda la lógica normal.
                                        //    {
                                        //        var facultamientosEspecialesEmpleado = listaFacultamientosEspeciales.Where(x => x.empleado == relUser.empleado).ToList();

                                        //        if (facultamientosEspecialesEmpleado.Count() > 0)
                                        //        {
                                        //            bool flagPuedeDarVoboESP = false;

                                        //            if ((int)com.vobo == relUser.empleado || (int)com.vobo2 == relUser.empleado || (int)com.vobo3 == relUser.empleado)
                                        //            {
                                        //                flagPuedeDarVoboESP = false;
                                        //            }
                                        //            else
                                        //            {
                                        //                flagPuedeDarVoboESP = facultamientosEspecialesEmpleado.FirstOrDefault(x => x.tipo == TipoVoboAutorizacionEnum.VOBO && x.empleado == relUser.empleado) != null;
                                        //            }

                                        //            bool flagPuedeAutorizarESP = facultamientosEspecialesEmpleado.FirstOrDefault(x => x.tipo == TipoVoboAutorizacionEnum.AUTORIZACION && x.empleado == relUser.empleado) != null;

                                        //            if (!lstCompras.Any(x => x.cc == (string)com.cc && x.numero == (int)com.numero))
                                        //            {
                                        //                bool flagVoboPendiente = false;

                                        //                var vobosRequeridos = listaFacultamientosEspeciales[0].cantidad_vobos;

                                        //                switch (vobosRequeridos)
                                        //                {
                                        //                    case 1:
                                        //                        flagVoboPendiente = (int)com.vobo == 0 ? true : false;
                                        //                        break;
                                        //                    case 2:
                                        //                        flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false;
                                        //                        break;
                                        //                    case 3:
                                        //                        flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 || (int)com.vobo3 == 0 ? true : false;
                                        //                        break;
                                        //                }

                                        //                lstCompras.Add(new OrdenCompraDTO
                                        //                {
                                        //                    cc = com.cc,
                                        //                    ccDesc = com.ccDesc,
                                        //                    numero = com.numero != null ? com.numero : 0,
                                        //                    proveedor = com.proveedor != null ? com.proveedor : 0,
                                        //                    proveedorNom = com.proveedor != null && com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                        //                    total = com.total != null ? com.total : 0,
                                        //                    tipo_cambio = com.tipo_cambio != null ? com.tipo_cambio : 0,
                                        //                    moneda = com.moneda != null ? com.moneda : 1,
                                        //                    fecha = com.fecha != null ? com.fecha : default(DateTime),
                                        //                    flagPuedeAutorizar = true,
                                        //                    vobo = com.vobo != null ? com.vobo : 0,
                                        //                    vobo2 = com.vobo2 != null ? com.vobo2 : 0,
                                        //                    vobo3 = com.vobo3 != null ? com.vobo3 : 0,
                                        //                    voboPendiente = flagVoboPendiente,
                                        //                    flagPuedeDarVobo = true,
                                        //                    flagCancelar = puedeCancelar ? (com.ST_OC == "A" && com.st_impresa == "I") ? true : false : false,
                                        //                    numeroRequisicion = com.numeroRequisicion != null ? (int)com.numeroRequisicion : 0,
                                        //                    tieneCuadro = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo > 0 ? true : false : false,
                                        //                    countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                        //                    flagTMC = true,
                                        //                    comentarios = com.comentarios
                                        //                });
                                        //            }
                                        //        }

                                        //        continue;
                                        //    }
                                        //}

                                        //if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                                        //{
                                        //    var totalCompraPesos = com.total * com.tipo_cambio;
                                        //    var listaFacultamientosEspeciales = _context.tblCom_VoboAutorizacionEspecial.Where(x =>
                                        //        x.registroActivo && x.area == com.area && x.cuenta == com.cuenta && totalCompraPesos >= x.monto_minimo && totalCompraPesos <= x.monto_maximo
                                        //    ).ToList();

                                        //    if (listaFacultamientosEspeciales.Count() > 0) //Si se encuentra por lo menos un registro de facultamientos especiales, se brinca toda la lógica normal.
                                        //    {
                                        //        var facultamientosEspecialesEmpleado = listaFacultamientosEspeciales.Where(x => x.empleado == relUser.empleado).ToList();

                                        //        if (facultamientosEspecialesEmpleado.Count() > 0)
                                        //        {
                                        //            bool flagPuedeDarVoboESP = false;

                                        //            if ((int)com.vobo == relUser.empleado || (int)com.vobo2 == relUser.empleado || (int)com.vobo3 == relUser.empleado)
                                        //            {
                                        //                flagPuedeDarVoboESP = false;
                                        //            }
                                        //            else
                                        //            {
                                        //                flagPuedeDarVoboESP = facultamientosEspecialesEmpleado.FirstOrDefault(x => x.tipo == TipoVoboAutorizacionEnum.VOBO && x.empleado == relUser.empleado) != null;
                                        //            }

                                        //            bool flagPuedeAutorizarESP = facultamientosEspecialesEmpleado.FirstOrDefault(x => x.tipo == TipoVoboAutorizacionEnum.AUTORIZACION && x.empleado == relUser.empleado) != null;

                                        //            if (!lstCompras.Any(x => x.cc == (string)com.cc && x.numero == (int)com.numero))
                                        //            {
                                        //                bool flagVoboPendiente = false;

                                        //                var vobosRequeridos = listaFacultamientosEspeciales[0].cantidad_vobos;

                                        //                switch (vobosRequeridos)
                                        //                {
                                        //                    case 1:
                                        //                        flagVoboPendiente = (int)com.vobo == 0 ? true : false;
                                        //                        break;
                                        //                    case 2:
                                        //                        flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false;
                                        //                        break;
                                        //                    case 3:
                                        //                        flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 || (int)com.vobo3 == 0 ? true : false;
                                        //                        break;
                                        //                }

                                        //                lstCompras.Add(new OrdenCompraDTO
                                        //                {
                                        //                    cc = com.cc,
                                        //                    ccDesc = com.ccDesc,
                                        //                    numero = com.numero != null ? com.numero : 0,
                                        //                    proveedor = com.proveedor != null ? com.proveedor : 0,
                                        //                    proveedorNom = com.proveedor != null && com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                        //                    total = com.total != null ? com.total : 0,
                                        //                    tipo_cambio = com.tipo_cambio != null ? com.tipo_cambio : 0,
                                        //                    moneda = com.moneda != null ? com.moneda : 1,
                                        //                    fecha = com.fecha != null ? com.fecha : default(DateTime),
                                        //                    flagPuedeAutorizar = true,
                                        //                    vobo = com.vobo != null ? com.vobo : 0,
                                        //                    vobo2 = com.vobo2 != null ? com.vobo2 : 0,
                                        //                    vobo3 = com.vobo3 != null ? com.vobo3 : 0,
                                        //                    voboPendiente = flagVoboPendiente,
                                        //                    flagPuedeDarVobo = true,
                                        //                    flagCancelar = puedeCancelar ? (com.ST_OC == "A" && com.st_impresa == "I") ? true : false : false,
                                        //                    numeroRequisicion = com.numeroRequisicion != null ? (int)com.numeroRequisicion : 0,
                                        //                    tieneCuadro = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo > 0 ? true : false : false,
                                        //                    countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                        //                    flagTMC = true,
                                        //                    comentarios = com.comentarios
                                        //                });
                                        //            }
                                        //        }

                                        //        continue;
                                        //    }
                                        //}
                                        //#endregion

                                        bool flagVoBoPendiente = false;

                                        if (com.autoriza_activos == 1)
                                        {
                                            flagVoBoPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false; //Siempre son dos VoBos cuando la compra es Activo Fijo
                                        }

                                        if (com.tmc == 1)
                                        {
                                            flagVoBoPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false; //Siempre son dos VoBos cuando la compra es TMC
                                        }


                                        bool flagPuedeDarVobo;

                                        if ((int)com.vobo == relUser.empleado || (int)com.vobo2 == relUser.empleado || (int)com.vobo3 == relUser.empleado)
                                        {
                                            flagPuedeDarVobo = false;
                                        }
                                        else
                                        {
                                            flagPuedeDarVobo = true;
                                        }

                                        if (!lstCompras.Any(x => x.cc.ToUpper().Equals((string)com.cc) && x.numero == (int)com.numero))
                                        {
                                            lstCompras.Add(new OrdenCompraDTO
                                            {
                                                cc = com.cc,
                                                ccDesc = com.ccDesc,
                                                numero = com.numero != null ? com.numero : 0,
                                                proveedor = com.proveedor != null ? com.proveedor : 0,
                                                proveedorNom = com.proveedor != null && com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                                total = com.total != null ? com.total : 0,
                                                tipo_cambio = com.tipo_cambio != null ? com.tipo_cambio : 0,
                                                moneda = com.moneda != null ? com.moneda : 1,
                                                fecha = com.fecha != null ? com.fecha : default(DateTime),
                                                flagPuedeAutorizar = true,
                                                vobo = com.vobo != null ? com.vobo : 0,
                                                vobo2 = com.vobo2 != null ? com.vobo2 : 0,
                                                vobo3 = com.vobo3 != null ? com.vobo3 : 0,
                                                voboPendiente = flagVoBoPendiente,
                                                flagPuedeDarVobo = flagPuedeDarVobo,
                                                flagCancelar = puedeCancelar ? (com.ST_OC == "A" && com.st_impresa == "I") ? true : false : false,
                                                numeroRequisicion = com.numeroRequisicion != null ? (int)com.numeroRequisicion : 0,
                                                tieneCuadro = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo > 0 ? true : false : false,
                                                countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                                comentarios = com.comentarios,
                                                flagCompraInterna = false
                                            });
                                        }
                                    }

                                    //OBTENER CALIFICACIONES CUADRO COMPARATIVO SI LAS HAY
                                    ProvNoOptimos(compras, lstCompras, TipoCompraNoAutorizadaEnum.Admin);
                                    //
                                }
                                #endregion
                            }

                            #region Gerardo Reina
                            if (relUser.empleado == 49)
                            {
                                dynamic comprasExtraEK = null;

                                if (vSesiones.sesionEmpresaActual == 1 || vSesiones.sesionEmpresaActual == 4)
                                {
                                    comprasExtraEK = consultaCheckProductivo(
                                        string.Format(@"SELECT 
                                                tblPrincipal.*, 
                                                (SELECT COUNT(*) FROM so_cuadro_comparativo cua WHERE cua.cc = tblPrincipal.cc AND cua.numero = tblPrincipal.numeroRequisicion) AS countCuadroComparativo
                                            FROM (
                                                SELECT 
                                                    oc.*, 
                                                    pr.nombre AS proveedorNom, 
                                                    (SELECT TOP 1 det.num_requisicion FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS numeroRequisicion, 
                                                    c.descripcion AS ccDesc 
                                                FROM so_orden_compra oc 
                                                    LEFT JOIN sp_proveedores pr ON pr.numpro = oc.proveedor 
                                                    INNER JOIN cc c ON c.cc = oc.cc 
                                                WHERE 
                                                    " + (isAuth ? "oc.ST_OC = 'A'" : "(oc.ST_OC IS NULL OR oc.ST_OC != 'A')") + @" 
                                            {0}) AS tblPrincipal", cc != "" ? "AND oc.cc = '" + cc + "'" : "")
                                    );
                                }
                                else
                                {
                                    comprasExtraEK = consultaCheckProductivo(
                                        string.Format(@"SELECT 
                                                tblPrincipal.*, 
                                                (SELECT COUNT(*) FROM so_cuadro_comparativo cua WHERE cua.cc = tblPrincipal.cc AND cua.numero = tblPrincipal.numeroRequisicion) AS countCuadroComparativo
                                            FROM (
                                                SELECT 
                                                    oc.*, 
                                                    pr.nombre AS proveedorNom, 
                                                    (SELECT TOP 1 det.num_requisicion FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS numeroRequisicion, 
                                                    c.descripcion AS ccDesc, 
                                                    (SELECT TOP 1 det.area FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS area, 
                                                    (SELECT TOP 1 det.cuenta FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS cuenta 
                                                FROM so_orden_compra oc 
                                                    LEFT JOIN sp_proveedores pr ON pr.numpro = oc.proveedor 
                                                    INNER JOIN cc c ON c.cc = oc.cc 
                                                WHERE 
                                                    " + (isAuth ? "oc.ST_OC = 'A'" : "(oc.ST_OC IS NULL OR oc.ST_OC != 'A')") + @" 
                                            {0}) AS tblPrincipal", cc != "" ? "AND oc.cc = '" + cc + "'" : "")
                                    );
                                }

                                if (comprasExtraEK != null)
                                {
                                    var comprasExtra = (List<OrdenCompraDTO>)comprasExtraEK.ToObject<List<OrdenCompraDTO>>();
                                    comprasExtra = comprasExtra.Where(x => x.fecha >= fechaFiltroAnioActual).ToList();
                                    var comprasExtraFiltradas = comprasExtra.Where(x => !lstCompras.Any(y => (y.cc == x.cc && y.numero == x.numero))).ToList();

                                    dynamic facultamientosEK = null;

                                    if (vSesiones.sesionEmpresaActual == 1 || vSesiones.sesionEmpresaActual == 4)
                                    {
                                        List<string> datos1 = comprasExtraFiltradas.Select(x => @"(tblPrincipal.cc = '" + x.cc + @"' AND 
                                                    tblPrincipal.monto_minimo_autoriza <= " + Convert.ToDecimal((x.moneda == 1 ? x.total : (x.total * x.tipo_cambio)), CultureInfo.InvariantCulture) + @" AND 
                                                    tblPrincipal.monto_maximo_autoriza >= " + Convert.ToDecimal((x.moneda == 1 ? x.total : (x.total * x.tipo_cambio)), CultureInfo.InvariantCulture) + @" AND 
                                                    tblGrupos.tipo IN (SELECT SUBSTRING(insumo,0,3) FROM so_orden_compra_det WHERE cc = '" + x.cc + @"' AND numero = " + x.numero + "))").ToList();
                                        string datos2 = string.Join(" OR ", datos1);
                                        facultamientosEK = consultaCheckProductivo(
                                        string.Format(@"SELECT 
                                                    tblPrincipal.cc, 
                                                    tblPrincipal.num_autorizacioines AS tblPrincipalNumAutorizaciones, 
                                                    tblPrincipal.monto_minimo_autoriza, 
                                                    tblPrincipal.monto_maximo_autoriza, 
                                                    tblPrincipal.consecutivo, 
                                                            
                                                    tblVobo.empleado AS empleadoVobo, 
                                                    tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                            
                                                    tblGrupos.tipo AS tipoGrupo, 
                                                    tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                            
                                                    tblAut.empleado AS empleadoAutoriza, 
                                                    tblAut.num_autorizaciones AS tblAutNumAutorizaciones, 
                                                    tblAut.orden AS ordenAutorizacion 
                                                FROM so_cc_autorizacion tblPrincipal 
                                                    LEFT JOIN so_empleados_cc tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                                    LEFT JOIN so_rel_tipos_vobo tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                                    LEFT JOIN so_empleados_autoriza_cc tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                                WHERE 
                                                    tblPrincipal.cc='RELLENO' or " + datos2 + @"
                                                ORDER BY tblPrincipal.consecutivo"));
                                    }
                                    else
                                    {
                                        List<string> datos1 = comprasExtraFiltradas.Select(x => @"(tblPrincipal.area = " + x.area + @" AND 
                                                    tblPrincipal.cuenta = " + x.cuenta + @" AND
                                                    tblPrincipal.monto_minimo_autoriza <= " + Convert.ToDecimal((x.moneda == 1 ? x.total : (x.total * x.tipo_cambio)), CultureInfo.InvariantCulture) + @" AND 
                                                    tblPrincipal.monto_maximo_autoriza >= " + Convert.ToDecimal((x.moneda == 1 ? x.total : (x.total * x.tipo_cambio)), CultureInfo.InvariantCulture) + @" AND 
                                                    tblGrupos.tipo IN (SELECT SUBSTRING(insumo,0,3) FROM so_orden_compra_det WHERE cc = '" + x.cc + @"' AND numero = " + x.numero + "))").ToList();
                                        string datos2 = string.Join(" OR ", datos1);
                                        facultamientosEK = consultaCheckProductivo(
                                        string.Format(@"SELECT 
                                                    tblPrincipal.area, 
                                                    tblPrincipal.cuenta, 
                                                    tblPrincipal.num_autorizaciones AS tblPrincipalNumAutorizaciones, 
                                                    tblPrincipal.monto_minimo_autoriza, 
                                                    tblPrincipal.monto_maximo_autoriza, 
                                                    tblPrincipal.consecutivo, 
                                                    
                                                    tblVobo.empleado AS empleadoVobo, 
                                                    tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                    
                                                    tblGrupos.tipo AS tipoGrupo, 
                                                    tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                    
                                                    tblAut.empleado AS empleadoAutoriza, 
                                                    tblAut.num_autorizaciones AS tblAutNumAutorizaciones 
                                                FROM so_area_cta_autorizacion tblPrincipal 
                                                    LEFT JOIN so_empleados_area_cta tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                                    LEFT JOIN so_rel_tipos_vobo_area_cta tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                                    LEFT JOIN so_empleados_autoriza_area_cta tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                                WHERE 
                                                    tblPrincipal.area=999999 or " + datos2 + @"
                                                ORDER BY tblPrincipal.consecutivo"));
                                    }
                                    foreach (var com in comprasExtraFiltradas)
                                    {
                                        //#region Facultamientos Especiales
                                        //if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                                        //{
                                        //    var totalCompraPesos = com.total * com.tipo_cambio;
                                        //    var listaFacultamientosEspeciales = _context.tblCom_VoboAutorizacionEspecial.Where(x => x.registroActivo && x.cc == com.cc && totalCompraPesos >= x.monto_minimo && totalCompraPesos <= x.monto_maximo).ToList();

                                        //    if (listaFacultamientosEspeciales.Count() > 0) //Si se encuentra por lo menos un registro de facultamientos especiales, se brinca toda la lógica normal.
                                        //    {
                                        //        var facultamientosEspecialesEmpleado = listaFacultamientosEspeciales.Where(x => x.empleado == relUser.empleado).ToList();

                                        //        if (facultamientosEspecialesEmpleado.Count() > 0)
                                        //        {
                                        //            bool flagPuedeDarVoboESP = false;

                                        //            if ((int)com.vobo == relUser.empleado || (int)com.vobo2 == relUser.empleado || (int)com.vobo3 == relUser.empleado)
                                        //            {
                                        //                flagPuedeDarVoboESP = false;
                                        //            }
                                        //            else
                                        //            {
                                        //                flagPuedeDarVoboESP = facultamientosEspecialesEmpleado.FirstOrDefault(x => x.tipo == TipoVoboAutorizacionEnum.VOBO && x.empleado == relUser.empleado) != null;
                                        //            }

                                        //            bool flagPuedeAutorizarESP = facultamientosEspecialesEmpleado.FirstOrDefault(x => x.tipo == TipoVoboAutorizacionEnum.AUTORIZACION && x.empleado == relUser.empleado) != null;

                                        //            if (!lstCompras.Any(x => x.cc == (string)com.cc && x.numero == (int)com.numero))
                                        //            {
                                        //                bool flagVoboPendienteESP = false;

                                        //                var vobosRequeridos = listaFacultamientosEspeciales[0].cantidad_vobos;

                                        //                switch (vobosRequeridos)
                                        //                {
                                        //                    case 1:
                                        //                        flagVoboPendienteESP = (int)com.vobo == 0 ? true : false;
                                        //                        break;
                                        //                    case 2:
                                        //                        flagVoboPendienteESP = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false;
                                        //                        break;
                                        //                    case 3:
                                        //                        flagVoboPendienteESP = (int)com.vobo == 0 || (int)com.vobo2 == 0 || (int)com.vobo3 == 0 ? true : false;
                                        //                        break;
                                        //                }

                                        //                lstCompras.Add(new OrdenCompraDTO
                                        //                {
                                        //                    cc = com.cc,
                                        //                    ccDesc = com.ccDesc,
                                        //                    numero = com.numero != null ? com.numero : 0,
                                        //                    proveedor = com.proveedor != null ? com.proveedor : 0,
                                        //                    proveedorNom = com.proveedor != null && com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                        //                    total = com.total != null ? com.total : 0,
                                        //                    tipo_cambio = com.tipo_cambio != null ? com.tipo_cambio : 0,
                                        //                    moneda = com.moneda != null ? com.moneda : 1,
                                        //                    fecha = com.fecha != null ? com.fecha : default(DateTime),
                                        //                    flagPuedeAutorizar = false,
                                        //                    vobo = com.vobo != null ? com.vobo : 0,
                                        //                    vobo2 = com.vobo2 != null ? com.vobo2 : 0,
                                        //                    vobo3 = com.vobo3 != null ? com.vobo3 : 0,
                                        //                    voboPendiente = flagVoboPendienteESP,
                                        //                    flagPuedeDarVobo = false,
                                        //                    flagCancelar = puedeCancelar ? (com.ST_OC == "A" && com.st_impresa == "I") ? true : false : false,
                                        //                    numeroRequisicion = com.numeroRequisicion != null ? (int)com.numeroRequisicion : 0,
                                        //                    tieneCuadro = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo > 0 ? true : false : false,
                                        //                    countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                        //                    flagActivoFijo = com.autoriza_activos == 1,
                                        //                    flagTMC = com.tmc == 1,
                                        //                    comentarios = com.comentarios,
                                        //                    flagCompraInterna = false
                                        //                });
                                        //            }
                                        //        }

                                        //        continue;
                                        //    }
                                        //}

                                        //if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                                        //{
                                        //    var totalCompraPesos = com.total * com.tipo_cambio;
                                        //    var listaFacultamientosEspeciales = _context.tblCom_VoboAutorizacionEspecial.Where(x =>
                                        //        x.registroActivo && x.area == com.area && x.cuenta == com.cuenta && totalCompraPesos >= x.monto_minimo && totalCompraPesos <= x.monto_maximo
                                        //    ).ToList();

                                        //    if (listaFacultamientosEspeciales.Count() > 0) //Si se encuentra por lo menos un registro de facultamientos especiales, se brinca toda la lógica normal.
                                        //    {
                                        //        var facultamientosEspecialesEmpleado = listaFacultamientosEspeciales.Where(x => x.empleado == relUser.empleado).ToList();

                                        //        if (facultamientosEspecialesEmpleado.Count() > 0)
                                        //        {
                                        //            bool flagPuedeDarVoboESP = false;

                                        //            if ((int)com.vobo == relUser.empleado || (int)com.vobo2 == relUser.empleado || (int)com.vobo3 == relUser.empleado)
                                        //            {
                                        //                flagPuedeDarVoboESP = false;
                                        //            }
                                        //            else
                                        //            {
                                        //                flagPuedeDarVoboESP = facultamientosEspecialesEmpleado.FirstOrDefault(x => x.tipo == TipoVoboAutorizacionEnum.VOBO && x.empleado == relUser.empleado) != null;
                                        //            }

                                        //            bool flagPuedeAutorizarESP = facultamientosEspecialesEmpleado.FirstOrDefault(x => x.tipo == TipoVoboAutorizacionEnum.AUTORIZACION && x.empleado == relUser.empleado) != null;

                                        //            if (!lstCompras.Any(x => x.cc == (string)com.cc && x.numero == (int)com.numero))
                                        //            {
                                        //                bool flagVoboPendienteESP = false;

                                        //                var vobosRequeridos = listaFacultamientosEspeciales[0].cantidad_vobos;

                                        //                switch (vobosRequeridos)
                                        //                {
                                        //                    case 1:
                                        //                        flagVoboPendienteESP = (int)com.vobo == 0 ? true : false;
                                        //                        break;
                                        //                    case 2:
                                        //                        flagVoboPendienteESP = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false;
                                        //                        break;
                                        //                    case 3:
                                        //                        flagVoboPendienteESP = (int)com.vobo == 0 || (int)com.vobo2 == 0 || (int)com.vobo3 == 0 ? true : false;
                                        //                        break;
                                        //                }

                                        //                lstCompras.Add(new OrdenCompraDTO
                                        //                {
                                        //                    cc = com.cc,
                                        //                    ccDesc = com.ccDesc,
                                        //                    numero = com.numero != null ? com.numero : 0,
                                        //                    proveedor = com.proveedor != null ? com.proveedor : 0,
                                        //                    proveedorNom = com.proveedor != null && com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                        //                    total = com.total != null ? com.total : 0,
                                        //                    tipo_cambio = com.tipo_cambio != null ? com.tipo_cambio : 0,
                                        //                    moneda = com.moneda != null ? com.moneda : 1,
                                        //                    fecha = com.fecha != null ? com.fecha : default(DateTime),
                                        //                    flagPuedeAutorizar = false,
                                        //                    vobo = com.vobo != null ? com.vobo : 0,
                                        //                    vobo2 = com.vobo2 != null ? com.vobo2 : 0,
                                        //                    vobo3 = com.vobo3 != null ? com.vobo3 : 0,
                                        //                    voboPendiente = flagVoboPendienteESP,
                                        //                    flagPuedeDarVobo = false,
                                        //                    flagCancelar = puedeCancelar ? (com.ST_OC == "A" && com.st_impresa == "I") ? true : false : false,
                                        //                    numeroRequisicion = com.numeroRequisicion != null ? (int)com.numeroRequisicion : 0,
                                        //                    tieneCuadro = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo > 0 ? true : false : false,
                                        //                    countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                        //                    flagActivoFijo = com.autoriza_activos == 1,
                                        //                    flagTMC = com.tmc == 1,
                                        //                    comentarios = com.comentarios,
                                        //                    flagCompraInterna = false
                                        //                });
                                        //            }
                                        //        }

                                        //        continue;
                                        //    }
                                        //}
                                        //#endregion

                                        bool flagVoboPendiente = false;

                                        if (facultamientosEK != null)
                                        {
                                            var facultamientos = (List<dynamic>)facultamientosEK.ToObject<List<dynamic>>();

                                            if (com.autoriza_activos == 0 && com.tmc == 0)
                                            {
                                                int vobosRequeridos = facultamientos[0].tblVoboNumAutorizaciones != null ? (int)facultamientos[0].tblVoboNumAutorizaciones : 0;

                                                switch (vobosRequeridos)
                                                {
                                                    case 1:
                                                        flagVoboPendiente = (int)com.vobo == 0 ? true : false;
                                                        break;
                                                    case 2:
                                                        flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false;
                                                        break;
                                                    case 3:
                                                        flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 || (int)com.vobo3 == 0 ? true : false;
                                                        break;
                                                }
                                            }
                                            else if (com.autoriza_activos == 1 && com.tmc == 0)
                                            {
                                                flagVoboPendiente = com.vobo == 0 || com.vobo2 == 0 ? true : false; //Siempre son dos VoBos cuando la compra es Activo Fijo
                                            }
                                            else if (com.autoriza_activos == 0 && com.tmc == 1)
                                            {
                                                flagVoboPendiente = com.vobo == 0 ? true : false; //Siempre es un VoBo cuando la compra es TMC.
                                            }
                                        }

                                        if (!lstCompras.Any(x => x.cc.ToUpper().Equals((string)com.cc) && x.numero == (int)com.numero))
                                        {
                                            lstCompras.Add(new OrdenCompraDTO
                                            {
                                                cc = com.cc,
                                                ccDesc = com.ccDesc,
                                                numero = com.numero != null ? com.numero : 0,
                                                proveedor = com.proveedor != null ? com.proveedor : 0,
                                                proveedorNom = com.proveedor != null && com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                                total = com.total != null ? com.total : 0,
                                                tipo_cambio = com.tipo_cambio != null ? com.tipo_cambio : 0,
                                                moneda = com.moneda != null ? com.moneda : 1,
                                                fecha = com.fecha != null ? com.fecha : default(DateTime),
                                                flagPuedeAutorizar = false,
                                                vobo = com.vobo != null ? com.vobo : 0,
                                                vobo2 = com.vobo2 != null ? com.vobo2 : 0,
                                                vobo3 = com.vobo3 != null ? com.vobo3 : 0,
                                                voboPendiente = flagVoboPendiente,
                                                flagPuedeDarVobo = false,
                                                flagCancelar = puedeCancelar ? (com.ST_OC == "A" && com.st_impresa == "I") ? true : false : false,
                                                numeroRequisicion = com.numeroRequisicion != null ? (int)com.numeroRequisicion : 0,
                                                tieneCuadro = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo > 0 ? true : false : false,
                                                countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                                flagActivoFijo = com.autoriza_activos == 1,
                                                flagTMC = com.tmc == 1,
                                                comentarios = com.comentarios,
                                                flagCompraInterna = false
                                            });
                                        }
                                    }

                                    //OBTENER CALIFICACIONES CUADRO COMPARATIVO SI LAS HAY
                                    ProvNoOptimos(comprasExtra, lstCompras, TipoCompraNoAutorizadaEnum.Jefe);
                                    //
                                }
                            }
                            #endregion

                            #region Compra Interna
                            List<OrdenCompraDTO> lstOC_Interna = _context.Select<OrdenCompraDTO>(new DapperDTO
                            {
                                baseDatos = vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                                consulta = @"SELECT t1.cc, t3.descripcion AS ccDesc, t1.comentarios, t1.fecha, t1.moneda, t1.numero, t1.proveedor, t1.total, t2.area, t2. cuenta, t1.vobo, t1.vobo2, t1.vobo3
	                                FROM tblCom_OrdenCompra_Interna AS t1
	                                INNER JOIN tblCom_OrdenCompraDet_Interna AS t2 ON t1.id = t2.idOrdenCompra
	                                INNER JOIN tblP_CC AS t3 ON t1.cc = t3.cc WHERE t1.ST_OC != 'A'",
                                parametros = new { registroActivo = true }
                            }).ToList();

                            OrdenCompraDTO objOC_Interna = new OrdenCompraDTO();
                            foreach (var item in lstOC_Interna)
                            {
                                objOC_Interna = new OrdenCompraDTO();
                                objOC_Interna.cc = item.cc;
                                objOC_Interna.ccDesc = item.ccDesc;
                                objOC_Interna.comentarios = item.comentarios;
                                objOC_Interna.fecha = item.fecha;
                                objOC_Interna.moneda = item.moneda;
                                objOC_Interna.numero = item.numero;
                                objOC_Interna.proveedor = item.proveedor;
                                objOC_Interna.proveedorNom = getNombreProveedor(item.proveedor);
                                objOC_Interna.total = item.total;
                                objOC_Interna.consigna = item.consigna;
                                objOC_Interna.area = item.area;
                                objOC_Interna.cuenta = item.cuenta;
                                objOC_Interna.vobo = item.vobo;
                                objOC_Interna.vobo2 = item.vobo2;
                                objOC_Interna.vobo3 = item.vobo3;
                                objOC_Interna.esOC_Interna = true;
                                objOC_Interna.voboPendiente = true;
                                objOC_Interna.flagPuedeDarVobo = false;
                                lstCompras.Add(objOC_Interna);
                            }

                            foreach (var item in lstCompras)
                            {
                                int numvobos = item.numVobos;

                                if (item.esOC_Interna)
                                {
                                    #region SE VERIFICA SI HACE FALTA VOBOS
                                    int cantVobos = getVobos(item).Select(s => s.numVobos).FirstOrDefault();
                                    int cantVobosRealizados = 0;

                                    if (item.vobo != 0)
                                        cantVobosRealizados++;

                                    if (item.vobo2 != 0)
                                        cantVobosRealizados++;

                                    if (item.vobo3 != 0)
                                        cantVobosRealizados++;
                                    #endregion

                                    if (cantVobosRealizados < cantVobos)
                                    {
                                        #region SE VERIFICA SI EL USUARIO LOGUEADO PUEDE DAR VOBO
                                        List<int> lstUsuariosEK = getVobos(item).Select(s => s.usu_numero).ToList();
                                        foreach (var usuarioVobo in lstUsuariosEK)
                                        {
                                            if (usuarioVobo > 0)
                                            {
                                                tblP_Usuario_Enkontrol objUsuarioEK = _context.tblP_Usuario_Enkontrol.Where(w => w.empleado == usuarioVobo).FirstOrDefault();
                                                if (objUsuarioEK != null)
                                                {
                                                    if (objUsuarioEK.idUsuario == (int)vSesiones.sesionUsuarioDTO.id) item.flagPuedeDarVobo = true;
                                                    if (item.vobo != (int)vSesiones.sesionUsuarioDTO.id && item.vobo2 != (int)vSesiones.sesionUsuarioDTO.id && item.vobo3 != (int)vSesiones.sesionUsuarioDTO.id) item.voboPendiente = true;
                                                    else item.voboPendiente = false;
                                                }
                                            }
                                        }
                                        //int idUsuarioEK = 0;
                                        //List<int> lstUsuariosEK = getVobos(item).Select(s => s.usu_numero).ToList();
                                        //if (lstUsuariosEK.Count() > 0)
                                        //    idUsuarioEK = lstUsuariosEK[cantVobosRealizados];

                                        //if (idUsuarioEK > 0)
                                        //{
                                        //    tblP_Usuario_Enkontrol objUsuarioEK = _context.tblP_Usuario_Enkontrol.Where(w => w.empleado == idUsuarioEK).FirstOrDefault();
                                        //    if (objUsuarioEK != null)
                                        //        item.flagPuedeDarVobo = objUsuarioEK.idUsuario == (int)vSesiones.sesionUsuarioDTO.id ? true : false;
                                        //}
                                        #endregion
                                    }
                                    else if (cantVobosRealizados > 0 && cantVobosRealizados == cantVobos)
                                    {
                                        #region SE VERIFICA SI EL USUARIO LOGUEADO PUEDE AUTORIZAR
                                        int idUsuarioEK = 0;
                                        idUsuarioEK = getAutorizaciones(item).Select(s => s.usu_numero).FirstOrDefault();
                                        if (idUsuarioEK > 0)
                                        {
                                            tblP_Usuario_Enkontrol objUsuarioEK = _context.tblP_Usuario_Enkontrol.Where(w => w.empleado == idUsuarioEK).FirstOrDefault();
                                            if (objUsuarioEK != null)
                                            {
                                                item.voboPendiente = false;
                                                item.flagPuedeAutorizar = objUsuarioEK.idUsuario == (int)vSesiones.sesionUsuarioDTO.id ? true : false;
                                            }
                                        }
                                        #endregion
                                    }
                                }

                                item.vobosString = string.Join(", ", getVobos(item).Select(x => x.usu_numero + "-" + x.usu_nombre + "|" + x.color));
                                item.autorizacionesString = string.Join(", ", getAutorizaciones(item).Select(x => (int)x.usu_numero + "-" + (string)x.usu_nombre));
                            }
                            #endregion

                            #region Determinas las compras reseteadas y de consigna
                            foreach (var compra in lstCompras)
                            {
                                var compraResetSIGOPLAN = _context.tblCom_ComprasReset.FirstOrDefault(x => x.estatus && x.registroAplica && x.cc == compra.cc && x.numero == compra.numero);

                                if (compraResetSIGOPLAN != null)
                                {
                                    if (compraResetSIGOPLAN.tipo == TipoComprasResetEnum.comprasImpresas)
                                    {
                                        compra.flagCompraReset = true;
                                    }
                                    else if (compraResetSIGOPLAN.tipo == TipoComprasResetEnum.comprasNoImpresas)
                                    {
                                        compra.flagCompraResetNoImpresa = true;
                                    }
                                }

                                var compraDetSIGOPLAN = _context.tblCom_OrdenCompraDet.FirstOrDefault(x => x.estatusRegistro && x.cc == compra.cc && x.numero == compra.numero);

                                if (compraDetSIGOPLAN != null)
                                {
                                    var requisicionSIGOPLAN = _context.tblCom_Req.FirstOrDefault(x => x.estatusRegistro && x.cc == compraDetSIGOPLAN.cc && x.numero == compraDetSIGOPLAN.num_requisicion);

                                    if (requisicionSIGOPLAN != null)
                                    {
                                        compra.consigna = requisicionSIGOPLAN.consigna != null ? (bool)requisicionSIGOPLAN.consigna : false;
                                        compra.crc = requisicionSIGOPLAN.crc;
                                        compra.convenio = requisicionSIGOPLAN.convenio;
                                    }
                                }
                            }
                            #endregion

                            #region Compras Traspaso de Almacén
                            var listaComprasQuitar = new List<int>();

                            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                            {
                                foreach (var compra in lstCompras)
                                {
                                    if (compra.proveedor == 5412) //Verificar que la compra tenga proveedor de Construplan
                                    {
                                        var listaPartidasEK = _contextEnkontrol.Select<OrdenCompraDetDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                        {
                                            consulta = @"SELECT * FROM so_orden_compra_det WHERE cc = ? AND numero = ?",
                                            parametros = new List<OdbcParameterDTO> {
                                    new OdbcParameterDTO() { nombre = "cc", tipo = OdbcType.VarChar, valor = compra.cc },
                                    new OdbcParameterDTO() { nombre = "numero", tipo = OdbcType.Numeric, valor = compra.numero }
                                }
                                        });

                                        if (listaPartidasEK.FirstOrDefault(x => x.partida == 1).area == 1 && listaPartidasEK.FirstOrDefault(x => x.partida == 1).cuenta == 9) //Verificar que la compra tenga el área-cuenta "1-9" en la primer partida
                                        {
                                            if (relUser.empleado == 59 || relUser.empleado == 1) //Verificar que el usuario logeado sea Alexis Samaniego (o un administrador)
                                            {
                                                compra.voboProveedorNoOptimo = false;
                                                compra.voboPendiente = false;
                                                compra.flagPuedeAutorizar = true;
                                                compra.puedeDarVoboProvNoOptimo = false;
                                                compra.cuadroGeneradoConCalificacion = false;
                                                compra.flagCompraTraspasoAlmacen = true;
                                            }
                                            else
                                            {
                                                compra.flagPuedeAutorizar = false;
                                                listaComprasQuitar.Add(lstCompras.FindIndex(x => x.cc == compra.cc && x.numero == compra.numero));
                                            }
                                        }
                                    }
                                }
                            }

                            foreach (var item in listaComprasQuitar)
                            {
                                lstCompras.RemoveAt(item);
                            }
                            #endregion

                            lstCompras = lstCompras.OrderByDescending(x => x.voboPendiente && x.flagPuedeDarVobo).ThenByDescending(x => !x.voboPendiente && x.flagPuedeAutorizar).ToList();

                            return lstCompras;
                            #endregion
                        }
                }
            }
            catch (Exception e)
            {
                LogError(0, 0, _NOMBRE_CONTROLADOR, "getListaCompras", e, AccionEnum.CONSULTA, 0, new { isAuth = isAuth, cc = cc, propias = propias });
                return null;
            }
        }

        public Dictionary<string, object> GetEmpresaLogueada()
        {
            Dictionary<string, object> resultado = new Dictionary<string, object>();
            try
            {
                resultado.Add("empresaLogueada", vSesiones.sesionEmpresaActual);
            }
            catch (Exception e)
            {
                LogError(0, 0, _NOMBRE_CONTROLADOR, "GetEmpresaLogueada", e, AccionEnum.CONSULTA, 0, 0);
            }
            return resultado;
        }

        public Dictionary<string, object> RegistrarVoBoAutorizarOrdenCompra(List<OrdenCompraDTO> listaVobos, List<OrdenCompraDTO> listaAutorizados)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                {
                    using (var dbStarsoftTransaction = _starsoft.Database.BeginTransaction())
                    {
                        Dictionary<string, object> resultado = new Dictionary<string, object>();
                        try
                        {
                            if (listaVobos != null)
                            {
                                if (listaVobos.Count() > 0)
                                {
                                    #region VOBO
                                    int FK_UsuarioEK = _context.tblP_Usuario_Enkontrol.Where(w => w.idUsuario == (int)vSesiones.sesionUsuarioDTO.id).Select(s => s.empleado).FirstOrDefault();
                                    foreach (var item in listaVobos)
                                    {
                                        tblCom_OrdenCompra objCompra = _context.tblCom_OrdenCompra.Where(w => w.cc == item.cc && w.numero == item.numero && w.estatusRegistro && w.PERU_tipoCompra == item.PERU_tipoCompra).FirstOrDefault();
                                        if (objCompra == null)
                                            throw new Exception("Ocurrió un error al realizar la acción.");

                                        if (objCompra.vobo == 0)
                                            objCompra.vobo = FK_UsuarioEK;
                                        else if (objCompra.vobo2 == 0)
                                            objCompra.vobo2 = FK_UsuarioEK;

                                        objCompra.fechaUltimaAccion = DateTime.Now;
                                        objCompra.empleadoUltimaAccion = FK_UsuarioEK;

                                        _context.SaveChanges();
                                    }

                                    // SE REGISTRA BITACORA
                                    SaveBitacora(0, (int)AccionEnum.ACTUALIZAR, 0, JsonUtils.convertNetObjectToJson(listaVobos));
                                    #endregion
                                }
                            }

                            if (listaAutorizados != null)
                            {
                                if (listaAutorizados.Count() > 0)
                                {
                                    #region AUTORIZAR
                                    int FK_UsuarioEK = _context.tblP_Usuario_Enkontrol.Where(w => w.idUsuario == (int)vSesiones.sesionUsuarioDTO.id).Select(s => s.empleado).FirstOrDefault();
                                    foreach (var item in listaAutorizados)
                                    {
                                        #region AUTORIZA EN SIGOPLANPERU
                                        tblCom_OrdenCompra objCompra = _context.tblCom_OrdenCompra.Where(w => w.cc == item.cc && w.numero == item.numero && w.estatusRegistro && w.PERU_tipoCompra == item.PERU_tipoCompra).FirstOrDefault();
                                        if (objCompra == null)
                                            throw new Exception("Ocurrió un error al autorizar la orden de compra.");

                                        if (objCompra.autorizo == 0)
                                        {
                                            objCompra.autorizo = FK_UsuarioEK;
                                            objCompra.usuario_autoriza = FK_UsuarioEK;
                                            objCompra.ST_OC = "A";
                                            objCompra.empleado_autoriza = FK_UsuarioEK;
                                            objCompra.fecha_autoriza = DateTime.Now;
                                            objCompra.fechaUltimaAccion = DateTime.Now;
                                            objCompra.empleadoUltimaAccion = FK_UsuarioEK;
                                        }
                                        _context.SaveChanges();
                                        #endregion

                                        #region AUTORIZA EN STARSOFT
                                        // SE OBTIENE NOMBRE Y PRIMER APELLIDO DEL USUARIO A AUTORIZAR
                                        tblP_Usuario objUsuario = _context.tblP_Usuario.Where(w => w.id == (int)vSesiones.sesionUsuarioDTO.id && w.estatus).FirstOrDefault();
                                        if (objUsuario == null)
                                            throw new Exception("Ocurrió un error obtener el nombre del autorizante.");

                                        string[] lstNombres = objUsuario.nombre.Split(' ');
                                        string primerNombre = lstNombres[0];
                                        string apellidoPaterno = objUsuario.apellidoPaterno;
                                        string nombreAutorizante = string.Format("{0} {1}", primerNombre.Trim(), apellidoPaterno.Trim());

                                        string numOC = item.numero.ToString().PadLeft(13, '0');
                                        if (objCompra.PERU_tipoCompra == "RQ")
                                        {
                                            COMOVC objCompraStarsoft = _starsoft.COMOVC.Where(w => w.OC_CNUMORD == numOC).FirstOrDefault();
                                            if (objCompraStarsoft == null)
                                                throw new Exception("Ocurrió un error al autorizar la orden de compra.");

                                            objCompraStarsoft.OC_CSITORD = "01";
                                            objCompraStarsoft.NOMBRE_USUARIO = nombreAutorizante;
                                            _starsoft.SaveChanges();
                                        }
                                        else if (objCompra.PERU_tipoCompra == "RS")
                                        {
                                            COMOVC_S objCompraStarsoft = _starsoft.COMOVC_S.Where(w => w.OC_CNUMORD == numOC).FirstOrDefault();
                                            if (objCompraStarsoft == null)
                                                throw new Exception("Ocurrió un error al autorizar la orden de compra.");

                                            objCompraStarsoft.OC_CSITORD = "01";
                                            objCompraStarsoft.NOMBRE_USUARIO = nombreAutorizante;
                                            _starsoft.SaveChanges();
                                        }
                                        #endregion

                                        #region Mandar correo al comprador y Alán Palomera
                                        var titulo = "Compra " + (objCompra.PERU_tipoCompra == "RQ" ? "" : " de Servicio") + " \"" + item.cc + "-" + item.numero + "\" ha sido autorizada.";
                                        var mensaje = "Se ha autorizado la compra \"" + item.cc + "-" + item.numero + "\". \n" + "Fecha Autorización: " + DateTime.Now.Date.ToShortDateString();
                                        var correo = new List<string>();

                                        if (objCompra.compradorSIGOPLAN > 0)
                                        {
                                            var compradorSIGOPLAN = _context.tblP_Usuario.FirstOrDefault(x => x.id == objCompra.compradorSIGOPLAN);

                                            if (compradorSIGOPLAN != null)
                                            {
                                                correo.Add(compradorSIGOPLAN.correo);
                                            }
                                        }
                                        else
                                        {
                                            correo.Add("oscar.valencia@construplan.com.mx");
                                        }

                                        correo.Add("alan.palomera@construplan.com.mx");
                                        correo.Add("notificacion.oc@construplan.com.mx");

                                        Infrastructure.Utils.GlobalUtils.sendEmail(string.Format("{0}: {1}", PersonalUtilities.GetNombreEmpresa(), titulo), mensaje, correo);
                                        #endregion
                                    }

                                    // SE REGISTRA BITACORA
                                    SaveBitacora(0, (int)AccionEnum.ACTUALIZAR, 0, JsonUtils.convertNetObjectToJson(listaAutorizados));
                                    #endregion
                                }
                            }

                            resultado.Add(SUCCESS, true);
                            dbContextTransaction.Commit();
                            dbStarsoftTransaction.Commit();
                        }
                        catch (Exception e)
                        {
                            dbContextTransaction.Rollback();
                            dbStarsoftTransaction.Rollback();
                            LogError(0, 0, _NOMBRE_CONTROLADOR, "RegistrarVoBoOrdenCompra", e, AccionEnum.ACTUALIZAR, 0, listaVobos);
                            resultado.Add(SUCCESS, false);
                            resultado.Add(MESSAGE, e.Message);
                        }
                        return resultado;
                    }
                }
            }
        }

        private void ProvNoOptimos(List<OrdenCompraDTO> comprasAntesFacultamientos, List<OrdenCompraDTO> comprasDespuesFacultamientos, TipoCompraNoAutorizadaEnum tipo)
        {
            var usuariosPermisosVoBoProNoOptimo = _context.tblCom_CC_PermisoVoboProvNoOptimo
                .FirstOrDefault(f =>
                    f.Estatus &&
                    f.UsuarioId == vSesiones.sesionUsuarioDTO.id
                );

            var faltantesVoBoNoOptimos = _context.tblCom_CC_ProveedorNoOptimo.Where
                (w =>
                    w.Estatus &&
                    !w.VoBo
                ).ToList();

            var VoboNoOptimosCargados = new List<tblCom_CC_ProveedorNoOptimo>();

            foreach (var noOptimo in faltantesVoBoNoOptimos.GroupBy(g => g.NumeroCompra))
            {
                var existeLstFinal = comprasDespuesFacultamientos.FirstOrDefault
                    (f =>
                        f.cc == noOptimo.First().Calificacion.CC &&
                        f.numeroRequisicion == noOptimo.First().Calificacion.Numero &&
                        f.numero == noOptimo.First().NumeroCompra
                    );
                if (existeLstFinal != null)
                {
                    existeLstFinal.cuadroGeneradoConCalificacion = true;
                    existeLstFinal.voboProveedorNoOptimo = noOptimo.First().VoBo;
                    existeLstFinal.idVoboProveedorNoOptimo = noOptimo.First().Id;
                    existeLstFinal.puedeDarVoboProvNoOptimo = usuariosPermisosVoBoProNoOptimo != null;

                    VoboNoOptimosCargados.AddRange(noOptimo);

                    if (!existeLstFinal.puedeDarVoboProvNoOptimo)
                    {
                        comprasDespuesFacultamientos.Remove(existeLstFinal);
                    }
                }
            }

            foreach (var procesado in VoboNoOptimosCargados)
            {
                faltantesVoBoNoOptimos.Remove(procesado);
            }

            if (usuariosPermisosVoBoProNoOptimo != null)
            {
                foreach (var noOptimo in faltantesVoBoNoOptimos.GroupBy(g => g.NumeroCompra))
                {
                    var existeLstAntesFacultamiento = comprasAntesFacultamientos.FirstOrDefault
                        (f =>
                            f.cc == noOptimo.First().Calificacion.CC &&
                            f.numeroRequisicion == noOptimo.First().Calificacion.Numero &&
                            f.numero == noOptimo.First().NumeroCompra
                        );

                    if (existeLstAntesFacultamiento != null)
                    {
                        existeLstAntesFacultamiento.numero = existeLstAntesFacultamiento.numero != null ? existeLstAntesFacultamiento.numero : 0;
                        existeLstAntesFacultamiento.proveedor = existeLstAntesFacultamiento.proveedor != null ? existeLstAntesFacultamiento.proveedor : 0;
                        existeLstAntesFacultamiento.proveedorNom = existeLstAntesFacultamiento.proveedor != null && existeLstAntesFacultamiento.proveedorNom != null ? existeLstAntesFacultamiento.proveedor + " - " + existeLstAntesFacultamiento.proveedorNom : string.Empty;
                        existeLstAntesFacultamiento.total = existeLstAntesFacultamiento.total != null ? existeLstAntesFacultamiento.total : 0;
                        existeLstAntesFacultamiento.tipo_cambio = existeLstAntesFacultamiento.tipo_cambio != null ? existeLstAntesFacultamiento.tipo_cambio : 0;
                        existeLstAntesFacultamiento.moneda = existeLstAntesFacultamiento.moneda != null ? existeLstAntesFacultamiento.moneda : 1;
                        existeLstAntesFacultamiento.fecha = existeLstAntesFacultamiento.fecha != null ? existeLstAntesFacultamiento.fecha : default(DateTime);
                        existeLstAntesFacultamiento.vobo = existeLstAntesFacultamiento.vobo != null ? existeLstAntesFacultamiento.vobo : 0;
                        existeLstAntesFacultamiento.vobo2 = existeLstAntesFacultamiento.vobo2 != null ? existeLstAntesFacultamiento.vobo2 : 0;
                        existeLstAntesFacultamiento.vobo3 = existeLstAntesFacultamiento.vobo3 != null ? existeLstAntesFacultamiento.vobo3 : 0;

                        existeLstAntesFacultamiento.flagPuedeAutorizar = false;
                        existeLstAntesFacultamiento.voboPendiente = true;
                        existeLstAntesFacultamiento.flagPuedeDarVobo = false;

                        existeLstAntesFacultamiento.flagCancelar = existeLstAntesFacultamiento.ST_OC == "A" && existeLstAntesFacultamiento.st_impresa == "I" ? true : false;
                        existeLstAntesFacultamiento.numeroRequisicion = existeLstAntesFacultamiento.numeroRequisicion != null ? (int)existeLstAntesFacultamiento.numeroRequisicion : 0;
                        existeLstAntesFacultamiento.tieneCuadro = existeLstAntesFacultamiento.countCuadroComparativo != null ? (int)existeLstAntesFacultamiento.countCuadroComparativo > 0 ? true : false : false;
                        existeLstAntesFacultamiento.countCuadroComparativo = existeLstAntesFacultamiento.countCuadroComparativo != null ? existeLstAntesFacultamiento.countCuadroComparativo : 0;

                        existeLstAntesFacultamiento.cuadroGeneradoConCalificacion = true;
                        existeLstAntesFacultamiento.voboProveedorNoOptimo = noOptimo.First().VoBo;
                        existeLstAntesFacultamiento.idVoboProveedorNoOptimo = noOptimo.First().Id;
                        existeLstAntesFacultamiento.puedeDarVoboProvNoOptimo = true;

                        switch (tipo)
                        {
                            case TipoCompraNoAutorizadaEnum.ActivoFijo:
                                existeLstAntesFacultamiento.flagActivoFijo = true;
                                break;
                            case TipoCompraNoAutorizadaEnum.TMC:
                                existeLstAntesFacultamiento.flagTMC = true;
                                break;
                            case TipoCompraNoAutorizadaEnum.Jefe:
                                existeLstAntesFacultamiento.flagActivoFijo = existeLstAntesFacultamiento.autoriza_activos == 1;
                                existeLstAntesFacultamiento.flagTMC = existeLstAntesFacultamiento.tmc == 1;
                                break;
                        }

                        comprasDespuesFacultamientos.Add(existeLstAntesFacultamiento);
                    }
                }
            }
        }

        public List<OrdenCompraDTO> getListaComprasTodas(string cc, bool pendientes, bool propias, int area, int cuenta)
        {
            switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
            {
                case EmpresaEnum.Peru:
                    {
                        #region PERU
                        using (var _starSoft = new MainContextPeruStarSoft003BDCOMUN())
                        {
                            // CATALOGO PROVEEDORES
                            List<MAEPROV> lstProveedores = _starSoft.MAEPROV.ToList();
                            string agreegaCC = "";

                            if (!string.IsNullOrEmpty(cc) && cc != "--Todos--")
                                agreegaCC = string.Format(" AND t1.cc = '{0}'", cc);
                            string strQuery = string.Format(@"
                    SELECT * FROM (
                        SELECT t1.id, t1.cc, t3.descripcion AS ccDesc, t1.numero, t2.nombre + ' ' + t2.apellidoPaterno + ' ' + t2.apellidoMaterno AS compradorNom, 
		                                        t1.PERU_proveedor, t1.total, t1.moneda, t1.fecha, t4.num_requisicion AS numeroRequisicion, t1.PERU_tipoCompra, 0 AS 'esOC_Interna', t1.vobo, t1.vobo2
		                                            FROM tblCom_OrdenCompra AS t1
		                                            INNER JOIN tblP_Usuario AS t2 ON t2.id = t1.compradorSIGOPLAN
		                                            INNER JOIN tblP_CC AS t3 On t3.cc = t1.cc
			                                        INNER JOIN tblCom_OrdenCompraDet AS t4 On t4.idOrdenCompra = t1.id

			                                            WHERE (t1.ST_OC != 'A' OR t1.ST_OC IS NULL) AND t1.estatus != 'C' AND t1.estatusRegistro = 1 AND t2.estatus = 1 AND t3.estatus = 1 AND t4.estatusRegistro = 1 {0}
                    ) AS tabla
                    GROUP BY id, cc, ccDesc, numero, compradorNom, PERU_proveedor, total, fecha, numeroRequisicion, moneda, PERU_tipoCompra, vobo, vobo2, esOC_Interna", agreegaCC);
                            List<OrdenCompraDTO> lstOrdenesCompra = _context.Select<OrdenCompraDTO>(new DapperDTO
                            {
                                baseDatos = MainContextEnum.PERU,
                                consulta = strQuery,
                                parametros = new { paramCC = !string.IsNullOrEmpty(cc) && cc != "--Todos--" ? cc : "" }
                            }).ToList();
                            //var vobos = getVobos(lstOrdenesCompra, vSesiones.sesionEmpresaActual, false);
                            var resultado = !pendientes ? lstOrdenesCompra.OrderBy(x => x.cc).ToList() : lstOrdenesCompra.Where(x => x.voboPendiente).OrderBy(x => x.cc).ToList();

                            foreach (var item in resultado)
                            {
                                item.empresa = vSesiones.sesionEmpresaActual;

                                #region NOMBRE PROVEEDOR
                                if (!string.IsNullOrEmpty(item.PERU_proveedor))
                                {
                                    MAEPROV objProveedor = lstProveedores.Where(w => w.PRVCCODIGO == item.PERU_proveedor).FirstOrDefault();
                                    if (objProveedor != null)
                                        item.proveedorNom = !string.IsNullOrEmpty(objProveedor.PRVCNOMBRE) ? objProveedor.PRVCNOMBRE : string.Empty;
                                }
                                #endregion

                                #region SE AGREGA FORMATO DE PERU EN NUM_OC Y NUM_REQ
                                string numOC = item.numero.ToString().PadLeft(13, '0');
                                item.strNumOC = numOC.ToString();

                                string numReq = item.numeroRequisicion.ToString().PadLeft(10, '0');
                                item.strNumReq = numReq.ToString();
                                #endregion

                                #region SE OBTIENE EN STRING EL NOMBRE DE LOS VOBOS Y AUTORIZANTES
                                //var resultado = !pendientes ? lstOrdenesCompra.OrderBy(x => x.cc).ToList() : lstOrdenesCompra.Where(x => x.voboPendiente).OrderBy(x => x.cc).ToList();


                                //var autorizaciones = getAutorizaciones(resultado, vSesiones.sesionEmpresaActual, false);

                                //foreach (var r in resultado)
                                //{
                                //int numVobos = item.numVobos;
                                //List<VoboDTO> vobosCompra = new List<VoboDTO>();
                                //var _vobo = vobos.FirstOrDefault(x => x.Item1 == item.id);
                                //if (_vobo != null)
                                //{
                                //    vobosCompra = _vobo.Item2;
                                //}

                                //List<VoboDTO> autorizacionesCompra = new List<VoboDTO>();
                                //var _autorizacionesCompra = autorizaciones.FirstOrDefault(x => x.Item1 == item.id);
                                //if (_autorizacionesCompra != null)
                                //{
                                //    autorizacionesCompra = _autorizacionesCompra.Item2;
                                //}

                                //var objCompra = new OrdenCompraDTO { cc = nuevaCompraSIGOPLAN.cc, numero = nuevaCompraSIGOPLAN.numero, esOC_Interna = false, PERU_tipoCompra = nuevaCompraSIGOPLAN.PERU_tipoCompra };

                                var vobosCompra = getVobos(new OrdenCompraDTO
                                {
                                    cc = item.cc,
                                    numero = item.numero,
                                    PERU_tipoCompra = item.PERU_tipoCompra,
                                    vobo = item.vobo,
                                    vobo2 = item.vobo2,
                                    vobo3 = item.vobo3
                                });

                                item.vobosString = string.Join(", ", vobosCompra.Select(x => x.usu_numero + "-" + x.usu_nombre + "|" + (item.voboPendiente ? x.color : x.color == "red" ? "black" : "green")));
                                item.autorizacionesString = string.Join(", ", getAutorizaciones(item).Select(x => (int)x.usu_numero + "-" + (string)x.usu_nombre));
                                //}
                                #endregion
                            }

                            return lstOrdenesCompra;
                        }
                        #endregion
                    }
                case EmpresaEnum.Colombia:
                    {
                        #region COLOMBIA
                        if (cc == "--Todos--")
                        {
                            cc = "";
                        }

                        var usuario = vSesiones.sesionUsuarioDTO;
                        var relUser = ufs.getUsuarioService().getUserEk(usuario.id);

                        dynamic comprasEKColombia = null;

                        #region Empresa Colombia
                        comprasEKColombia = consultaCheckProductivo(
                                string.Format(@"SELECT 
                                            oc.*, 
                                            pr.nombre AS proveedorNom, 
                                            det.partida, 
                                            det.insumo, 
                                            CAST(LEFT(det.insumo, 1) AS int) AS tipo, 
                                            CAST(LEFT(det.insumo, 3) AS int) AS tipoGrupo, 
                                            det.num_requisicion AS numeroRequisicion, 
                                            c.descripcion AS ccDesc,
                                            case
                                                when det.area is null then 0
                                                else det.area
                                            end as area,
                                            case
                                                when det.cuenta is null then 0
                                                else det.cuenta
                                            end as cuenta,
                                            cua.folio AS tieneCuadro, 
                                            (SELECT COUNT(*) FROM DBA.so_cuadro_comparativo cuadro WHERE cuadro.cc = oc.cc AND cuadro.numero = det.num_requisicion) AS countCuadroComparativo, 
                                            oc.comprador, 
                                            com.descripcion AS compradorNom 
                                        FROM DBA.so_orden_compra oc 
                                            INNER JOIN DBA.so_orden_compra_det det ON oc.cc = det.cc AND oc.numero = det.numero 
                                            LEFT JOIN DBA.sp_proveedores pr ON pr.numpro = oc.proveedor 
                                            LEFT JOIN DBA.so_cuadro_comparativo cua ON oc.cc = cua.cc AND det.num_requisicion = cua.numero 
                                            INNER JOIN DBA.cc c ON c.cc = oc.cc 
                                            LEFT JOIN DBA.empleados com ON oc.comprador = com.empleado 
                                        WHERE  c.st_ppto!='T' AND (oc.vobo_aut = 'N' AND oc.aut_aut = 'N') AND oc.estatus != 'C' {0} {1}", cc != "" ? "AND oc.cc = '" + cc + "'" : "", (area > 0 && cuenta > 0) ? ("AND (det.area = " + area + " AND det.cuenta = " + cuenta + ")") : "")
                            );
                        #endregion

                        List<OrdenCompraDTO> lstCompras = new List<OrdenCompraDTO>();

                        List<OrdenCompraDTO> lstComprasInterna = new List<OrdenCompraDTO>();
                        if (comprasEKColombia != null)
                        {
                            var compras = (List<dynamic>)comprasEKColombia.ToObject<List<dynamic>>();

                            DateTime fechaFiltroAnioActual = (new DateTime(DateTime.Now.Year, 1, 1)).AddMonths(-2); //Se le restan dos meses para cuando empieza un año nuevo que muestre registros anteriores.
                            compras = compras.Where(x => (DateTime)x.fecha >= fechaFiltroAnioActual).ToList();

                            List<dynamic> listaAreaCuentaEK = _contextEnkontrol.Select<dynamic>(
                            vSesiones.sesionEmpresaActual == 1 ? EnkontrolEnum.CplanProd : vSesiones.sesionEmpresaActual == 4 ? EnkontrolEnum.CplanEici : vSesiones.sesionEmpresaActual == 3 ? EnkontrolEnum.ColombiaProductivo : EnkontrolEnum.ArrenProd,
                                new OdbcConsultaDTO()
                                {
                                    consulta = @"
                                                            SELECT
                                                               area, cuenta, TRIM(descripcion) AS descripcion
                                                            FROM DBA.si_area_cuenta
                                                            GROUP BY area, cuenta, descripcion
                                                            ORDER BY area, cuenta, descripcion"
                                }
                            );

                            foreach (var com in compras)
                            {
                                #region Verificar si la compra tiene vobo pendiente.
                                bool flagVoBoPendiente = false;

                                var flagCompraSISUN = _contextEnkontrol.Select<OrdenCompraDetDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                {
                                    consulta = string.Format(@"SELECT TOP 1 * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", com.cc, com.numero)
                                }).FirstOrDefault().num_requisicion == 0;

                                if (flagCompraSISUN)
                                {
                                    flagVoBoPendiente = com.vobo_aut != "S" || com.vobo_aut == null;
                                }
                                else
                                {
                                    #region Compras Normales
                                    if (com.autoriza_activos == 0 && com.tmc == 0)
                                    {
                                        var total = Convert.ToDecimal(com.total, CultureInfo.InvariantCulture);
                                        var partidas = (List<dynamic>)consultaCheckProductivo(
                                            string.Format(@"SELECT * FROM DBA.so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", (string)com.cc, (int)com.numero)
                                        ).ToObject<List<dynamic>>();
                                        var listTipoGrupo = partidas.Select(x => Int32.Parse(((int)x.insumo).ToString().Substring(0, 3))).ToList();
                                        var stringListTipoGrupo = string.Join(", ", listTipoGrupo);

                                        dynamic facultamientosEKColombia = null;

                                        facultamientosEKColombia = _context.Select<dynamic>(new DapperDTO
                                        {
                                            baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                                            consulta = @"
                                                         SELECT 
                                                            tblPrincipal.cc, 
                                                            tblPrincipal.num_autorizacioines AS tblPrincipalNumAutorizaciones, 
                                                            tblPrincipal.monto_minimo_autoriza, 
                                                            tblPrincipal.monto_maximo_autoriza, 
                                                            tblPrincipal.consecutivo,                                                             
                                                            tblVobo.empleado AS empleadoVobo, 
                                                            tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones,                                                             
                                                            tblGrupos.tipo AS tipoGrupo, 
                                                            tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones,                                                             
                                                            tblAut.empleado AS empleadoAutoriza, 
                                                            tblAut.num_autorizaciones AS tblAutNumAutorizaciones, 
                                                            tblAut.orden AS ordenAutorizacion 
                                                        FROM so_cc_autorizacion tblPrincipal 
                                                            LEFT JOIN so_empleados_cc tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                                            LEFT JOIN so_rel_tipos_vobo tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                                            LEFT JOIN so_empleados_autoriza_cc tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                                        WHERE 
                                                            tblPrincipal.cc = '{0}' AND 
                                                            tblPrincipal.monto_minimo_autoriza <= {1} AND 
                                                            tblPrincipal.monto_maximo_autoriza >= {1} AND 
                                                            tblGrupos.tipo IN ({2}) 
                                                        ORDER BY tblPrincipal.consecutivo", //Agarra el usuario
                                            parametros = new { com.cc, total, stringListTipoGrupo }
                                        });

                                        if (facultamientosEKColombia != null)
                                        {
                                            var facultamientos = (List<PermisoMontoDTO>)facultamientosEKColombia.ToObject<List<PermisoMontoDTO>>();

                                            var vobosRequeridos = facultamientos[0].tblVoboNumAutorizaciones ?? 0;

                                            switch (vobosRequeridos)
                                            {
                                                case 1:
                                                    flagVoBoPendiente = (int)com.vobo == 0 ? true : false;
                                                    break;
                                                case 2:
                                                    flagVoBoPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false;
                                                    break;
                                                case 3:
                                                    flagVoBoPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 || (int)com.vobo3 == 0 ? true : false;
                                                    break;
                                            }
                                        }
                                    }

                                    if (com.autoriza_activos == 1)
                                    {
                                        flagVoBoPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false; //Siempre son dos VoBos cuando la compra es Activo Fijo
                                    }

                                    if (com.tmc == 1)
                                    {
                                        flagVoBoPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false; //Siempre son dos VoBos cuando la compra es TMC
                                    }
                                    #endregion
                                }
                                #endregion

                                if (!lstCompras.Any(x => x.cc == (string)com.cc && x.numero == (int)com.numero))
                                {
                                    var areaCuentaEK = listaAreaCuentaEK.FirstOrDefault(x => (int)x.area == (int)com.area && (int)x.cuenta == (int)com.cuenta);
                                    var areaCuentaDesc = "";

                                    if (areaCuentaEK != null)
                                    {
                                        areaCuentaDesc = (int)com.area + "-" + (int)com.cuenta + " " + (string)areaCuentaEK.descripcion;
                                    }

                                    decimal rentencion_despues_iva = 0;
                                    decimal totalFinal = 0;

                                    if ((EmpresaEnum)vSesiones.sesionEmpresaActual == EmpresaEnum.Colombia && com.numeroRequisicion == 0)
                                    {
                                        var totalRetenciones = _contextEnkontrol.Select<OrdenCompraDetDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                        {
                                            consulta = string.Format(@"SELECT SUM(importe) AS importe FROM so_ordenc_retenciones WHERE cc = '{0}' AND numero = {1}", com.cc, com.numero)
                                        }).FirstOrDefault();

                                        if (totalRetenciones != null)
                                        {
                                            rentencion_despues_iva = totalRetenciones.importe;
                                        }

                                        totalFinal = com.sub_total + com.iva - rentencion_despues_iva;
                                    }
                                    else
                                    {
                                        totalFinal = com.total;
                                    }

                                    OrdenCompraDTO infoCompras = new OrdenCompraDTO();

                                    infoCompras.cc = (string)com.cc.Value;
                                    infoCompras.ccDesc = (string)com.ccDesc.Value;
                                    infoCompras.numero = com.numero.Value != null ? Convert.ToInt32(com.numero.Value) : 0;
                                    infoCompras.proveedor = com.proveedor.Value != null ? Convert.ToInt32(com.proveedor.Value) : 0;
                                    infoCompras.proveedorNom = com.proveedor.Value != null && com.proveedorNom.Value != null ? com.proveedor.Value + " - " + com.proveedorNom.Value : string.Empty;
                                    infoCompras.total = totalFinal;
                                    infoCompras.tipo_cambio = com.tipo_cambio.Value != null ? Convert.ToDecimal(com.tipo_cambio.Value, CultureInfo.InvariantCulture) : 0;
                                    infoCompras.moneda = com.moneda.Value != null ? Convert.ToInt32(com.moneda.Value) : 1;
                                    infoCompras.fecha = com.fecha.Value != null ? com.fecha.Value : default(DateTime);
                                    infoCompras.flagPuedeAutorizar = false;
                                    infoCompras.vobo = com.vobo.Value != null ? Convert.ToInt32(com.vobo.Value) : 0;
                                    infoCompras.voboPendiente = flagVoBoPendiente; //voboPendiente = voboPendienteActivoFijo ? voboPendienteActivoFijo : (com.voboPendiente.Value == "PENDIENTE" ? true : false),
                                    infoCompras.flagCancelar = false;
                                    infoCompras.numeroRequisicion = com.numeroRequisicion.Value != null ? (int)com.numeroRequisicion : 0;
                                    infoCompras.tieneCuadro = com.tieneCuadro != null ? true : false;
                                    infoCompras.countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0;
                                    infoCompras.area = 0;
                                    infoCompras.cuenta = 0;
                                    infoCompras.areaCuentaDesc = "0-0";
                                    infoCompras.comprador = Convert.ToInt32(com.comprador);
                                    infoCompras.compradorNom = com.compradorNom != null ? (string)com.compradorNom : "";

                                    lstCompras.Add(infoCompras);
                                }
                            }
                        }


                        #region OC INTERNAS
                        if (!string.IsNullOrEmpty(cc))
                        {
                            string strQuery = string.Format(@"SELECT t1.cc, t1.numero, t1.fecha, t1.total, t2.descripcion AS ccDesc, t3.area, t3.cuenta, usu.nombreUsuario
	                                                        FROM tblCom_OrdenCompra_Interna AS t1 
	                                                        INNER JOIN tblP_CC AS t2 ON t1.cc = t2.cc
	                                                        INNER JOIN tblCom_OrdenCompraDet_Interna AS t3 ON t1.id = t3.idOrdenCompra
                                                            LEFT JOIN tblP_Usuario usu ON t1.compradorSIGOPLAN = usu.id
		                                                        WHERE (t1.ST_OC != 'A' OR t1.ST_OC IS NULL) AND t2.cc = '{0}'", cc);
                            List<dynamic> lstOC_Internas = _context.Select<dynamic>(new DapperDTO
                            {
                                baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                                consulta = strQuery
                            }).ToList();

                            foreach (var com in lstOC_Internas)
                            {
                                lstCompras.Add(new OrdenCompraDTO
                                {
                                    cc = (string)com.cc,
                                    ccDesc = (string)com.ccDesc,
                                    numero = com.numero != null ? Convert.ToInt32(com.numero) : 0,
                                    proveedor = com.proveedor != null ? Convert.ToInt32(com.proveedor) : 0,
                                    proveedorNom = com.proveedor != null && com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                    total = com.total != null ? Convert.ToDecimal(com.total, CultureInfo.InvariantCulture) : 0,
                                    tipo_cambio = com.tipo_cambio != null ? Convert.ToDecimal(com.tipo_cambio, CultureInfo.InvariantCulture) : 0,
                                    moneda = com.moneda != null ? Convert.ToInt32(com.moneda) : 1,
                                    fecha = com.fecha != null ? com.fecha : default(DateTime),
                                    flagPuedeAutorizar = false,
                                    vobo = com.vobo != null ? Convert.ToInt32(com.vobo) : 0,
                                    //vobo2 = com.vobo2 != null ? Convert.ToInt32(com.vobo2) : 0,
                                    //vobo3 = com.vobo3 != null ? Convert.ToInt32(com.vobo3) : 0,
                                    //voboPendiente = flagVoBoPendiente, //voboPendiente = voboPendienteActivoFijo ? voboPendienteActivoFijo : (com.voboPendiente == "PENDIENTE" ? true : false),
                                    voboPendiente = true,
                                    flagCancelar = false,
                                    numeroRequisicion = com.numeroRequisicion != null ? (int)com.numeroRequisicion : 0,
                                    tieneCuadro = com.tieneCuadro != null ? true : false,
                                    countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                    area = 0,
                                    cuenta = 0,
                                    //areaCuentaDesc = areaCuentaDesc
                                    areaCuentaDesc = "0-0",
                                    esOC_Interna = true,
                                    comprador = Convert.ToInt32(com.compradorSIGOPLAN),
                                    compradorNom = (string)com.nombreUsuario
                                });

                            }
                        }
                        #endregion

                        var resultado = !pendientes ? lstCompras.OrderBy(x => x.cc).ToList() : lstCompras.Where(x => x.voboPendiente).OrderBy(x => x.cc).ToList();

                        foreach (var r in resultado)
                        {
                            r.vobosString = string.Join(", ", getVobos(r).Select(x => x.usu_numero + "-" + x.usu_nombre + "|" + (r.voboPendiente ? x.color : x.color == "red" ? "black" : "green")));
                            r.autorizacionesString = string.Join(", ", getAutorizaciones(r).Select(x => (int)x.usu_numero + "-" + (string)x.usu_nombre));
                        }

                        return resultado;
                        #endregion
                    }
                default:
                    {
                        #region Empresas construplan y arrendadora EICI
                        if (cc == "--Todos--")
                        {
                            cc = "";
                        }

                        var usuario = vSesiones.sesionUsuarioDTO;
                        var relUser = ufs.getUsuarioService().getUserEk(usuario.id);

                        dynamic comprasEK = null;

                        if (vSesiones.sesionEmpresaActual == 1 || vSesiones.sesionEmpresaActual == 4)
                        {
                            #region Empresa Construplan/EICI
                            comprasEK = consultaCheckProductivo(
                                string.Format(@"SELECT 
                                            oc.*, 
                                            pr.nombre AS proveedorNom, 
                                            --CASE 
                                            --    WHEN (oc.vobo_informa = 'N' AND oc.cambia_vobo = 0) 
                                            --    THEN 
                                            --        CASE 
                                            --            WHEN ( 
                                            --                    SELECT 
                                            --                        MAX(DISTINCT aut.num_autorizacioines) 
                                            --                    FROM so_rel_tipos_vobo rel 
                                            --                        INNER JOIN so_cc_autorizacion aut ON rel.consecutivo = aut.consecutivo 
                                            --                        INNER JOIN so_orden_compra_det det ON oc.cc = det.cc AND oc.numero = det.numero 
                                            --                    WHERE 
                                            --                        rel.cc = oc.cc AND 
                                            --                        rel.tipo = CAST(SUBSTRING(det.insumo, 1, 3) AS int) AND 
                                            --                        (aut.monto_maximo_autoriza >= (oc.total * oc.tipo_cambio) AND aut.monto_minimo_autoriza <= (oc.total * oc.tipo_cambio)) 
                                            --                    ) > 0 
                                            --            THEN 'PENDIENTE' 
                                            --            ELSE 'COMPLETADO' 
                                            --        END 
                                            --    ELSE 
                                            --        CASE 
                                            --            WHEN (oc.vobo_informa = 'N' AND oc.cambia_vobo = 1) 
                                            --            THEN 'PENDIENTE' 
                                            --            ELSE 'COMPLETADO' 
                                            --        END 
                                            --END 
                                            --AS voboPendiente, 
                                            det.partida, 
                                            det.insumo, 
                                            CAST(LEFT(det.insumo, 1) AS int) AS tipo, 
                                            CAST(LEFT(det.insumo, 3) AS int) AS tipoGrupo, 
                                            det.num_requisicion AS numeroRequisicion, 
                                            c.descripcion AS ccDesc,
                                            case
                                                when det.area is null then 0
                                                else det.area
                                            end as area,
                                            case
                                                when det.cuenta is null then 0
                                                else det.cuenta
                                            end as cuenta,
                                            cua.folio AS tieneCuadro, 
                                            (SELECT COUNT(*) FROM so_cuadro_comparativo cuadro WHERE cuadro.cc = oc.cc AND cuadro.numero = det.num_requisicion) AS countCuadroComparativo, 
                                            oc.comprador, 
                                            com.descripcion AS compradorNom 
                                        FROM so_orden_compra oc 
                                            INNER JOIN so_orden_compra_det det ON oc.cc = det.cc AND oc.numero = det.numero 
                                            LEFT JOIN sp_proveedores pr ON pr.numpro = oc.proveedor 
                                            LEFT JOIN so_cuadro_comparativo cua ON oc.cc = cua.cc AND det.num_requisicion = cua.numero 
                                            INNER JOIN cc c ON c.cc = oc.cc 
                                            LEFT JOIN empleados com ON oc.comprador = com.empleado 
                                        WHERE  c.st_ppto!='T' AND (oc.ST_OC IS NULL OR oc.ST_OC != 'A') AND oc.estatus != 'C' {0} {1}", cc != "" ? "AND oc.cc = '" + cc + "'" : "", (area > 0 && cuenta > 0) ? ("AND (det.area = " + area + " AND det.cuenta = " + cuenta + ")") : "")
                            );
                            #endregion
                        }
                        else
                        {
                            #region Empresa Arrendadora
                            comprasEK = consultaCheckProductivo(
                                string.Format(@"SELECT 
                                            oc.*, 
                                            pr.nombre AS proveedorNom, 
                                            --CASE 
                                            --    WHEN (oc.vobo_informa = 'N' AND oc.cambia_vobo = 0) 
                                            --    THEN 
                                            --        CASE 
                                            --            WHEN ( 
                                            --                    SELECT 
                                            --                        MAX(DISTINCT aut.num_autorizaciones) 
                                            --                    FROM so_rel_tipos_vobo_area_cta rel 
                                            --                        INNER JOIN so_area_cta_autorizacion aut ON rel.consecutivo = aut.consecutivo 
                                            --                        INNER JOIN so_orden_compra_det det ON oc.cc = det.cc AND oc.numero = det.numero 
                                            --                    WHERE 
                                            --                        rel.area = det.area AND rel.cuenta = det.cuenta AND 
                                            --                        rel.tipo = CAST(SUBSTRING(det.insumo, 1, 3) AS int) AND 
                                            --                        (aut.monto_maximo_autoriza >= (oc.total * oc.tipo_cambio) AND aut.monto_minimo_autoriza <= (oc.total * oc.tipo_cambio)) 
                                            --                  ) > 0 
                                            --            THEN 'PENDIENTE' 
                                            --            ELSE 'COMPLETADO' 
                                            --        END 
                                            --    ELSE 
                                            --        CASE 
                                            --            WHEN (oc.vobo_informa = 'N' AND oc.cambia_vobo = 1) 
                                            --            THEN 'PENDIENTE' 
                                            --            ELSE 'COMPLETADO' 
                                            --        END 
                                            --END 
                                            --AS voboPendiente, 
                                            det.partida, 
                                            det.insumo, 
                                            CAST(LEFT(det.insumo, 1) AS int) AS tipo, 
                                            CAST(LEFT(det.insumo, 3) AS int) AS tipoGrupo, 
                                            det.num_requisicion AS numeroRequisicion, 
                                            c.descripcion AS ccDesc, 
                                            det.area, 
                                            det.cuenta, 
                                            cua.folio AS tieneCuadro, 
                                            (SELECT COUNT(*) FROM so_cuadro_comparativo cuadro WHERE cuadro.cc = oc.cc AND cuadro.numero = det.num_requisicion) AS countCuadroComparativo, 
                                            oc.comprador, 
                                            com.descripcion AS compradorNom 
                                        FROM so_orden_compra oc 
                                            INNER JOIN so_orden_compra_det det ON oc.cc = det.cc AND oc.numero = det.numero 
                                            LEFT JOIN sp_proveedores pr ON pr.numpro = oc.proveedor 
                                            LEFT JOIN so_cuadro_comparativo cua ON oc.cc = cua.cc AND det.num_requisicion = cua.numero 
                                            INNER JOIN cc c ON c.cc = oc.cc 
                                            LEFT JOIN empleados com ON oc.comprador = com.empleado 
                                        WHERE c.st_ppto!='T' AND (oc.ST_OC IS NULL OR oc.ST_OC != 'A') AND oc.estatus != 'C' {0} {1}", cc != "" ? "AND oc.cc = '" + cc + "'" : "", (area > 0 && cuenta > 0) ? ("AND (det.area = " + area + " AND det.cuenta = " + cuenta + ")") : "")
                            );
                            #endregion
                        }

                        List<OrdenCompraDTO> lstCompras = new List<OrdenCompraDTO>();

                        if (comprasEK != null)
                        {
                            var compras = (List<dynamic>)comprasEK.ToObject<List<dynamic>>();

                            DateTime fechaFiltroAnioActual = (new DateTime(DateTime.Now.Year, 1, 1)).AddMonths(-2); //Se le restan dos meses para cuando empieza un año nuevo que muestre registros anteriores.
                            compras = compras.Where(x => (DateTime)x.fecha >= fechaFiltroAnioActual).ToList();

                            List<dynamic> listaAreaCuentaEK = _contextEnkontrol.Select<dynamic>(
                            vSesiones.sesionEmpresaActual == 1 ? EnkontrolEnum.CplanProd : vSesiones.sesionEmpresaActual == 4 ? EnkontrolEnum.CplanEici : EnkontrolEnum.ArrenProd,
                                new OdbcConsultaDTO()
                                {
                                    consulta = @"
                                SELECT
                                    area, cuenta, TRIM(descripcion) AS descripcion
                                FROM si_area_cuenta
                                WHERE cc_activo = 1
                                GROUP BY area, cuenta, descripcion
                                ORDER BY area, cuenta, descripcion"
                                }
                            );

                            foreach (var com in compras)
                            {
                                //#region Facultamientos Especiales
                                //if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                                //{
                                //    var totalCompraPesos = com.total * com.tipo_cambio;
                                //    var listaFacultamientosEspeciales = _context.tblCom_VoboAutorizacionEspecial.ToList().Where(x => x.registroActivo && x.cc == (string)com.cc && totalCompraPesos >= x.monto_minimo && totalCompraPesos <= x.monto_maximo).ToList();

                                //    if (listaFacultamientosEspeciales.Count() > 0) //Si se encuentra por lo menos un registro de facultamientos especiales, se brinca toda la lógica normal.
                                //    {
                                //        var facultamientosEspecialesEmpleado = listaFacultamientosEspeciales.Where(x => x.empleado == relUser.empleado).ToList();

                                //        if (facultamientosEspecialesEmpleado.Count() > 0)
                                //        {
                                //            bool flagPuedeDarVoboESP = false;

                                //            if ((int)com.vobo == relUser.empleado || (int)com.vobo2 == relUser.empleado || (int)com.vobo3 == relUser.empleado)
                                //            {
                                //                flagPuedeDarVoboESP = false;
                                //            }
                                //            else
                                //            {
                                //                flagPuedeDarVoboESP = facultamientosEspecialesEmpleado.FirstOrDefault(x => x.tipo == TipoVoboAutorizacionEnum.VOBO && x.empleado == relUser.empleado) != null;
                                //            }

                                //            bool flagPuedeAutorizarESP = facultamientosEspecialesEmpleado.FirstOrDefault(x => x.tipo == TipoVoboAutorizacionEnum.AUTORIZACION && x.empleado == relUser.empleado) != null;

                                //            if (!lstCompras.Any(x => x.cc == (string)com.cc && x.numero == (int)com.numero))
                                //            {
                                //                var areaCuentaEK = listaAreaCuentaEK.FirstOrDefault(x => (int)x.area == (int)com.area && (int)x.cuenta == (int)com.cuenta);
                                //                var areaCuentaDesc = "";

                                //                if (areaCuentaEK != null)
                                //                {
                                //                    areaCuentaDesc = (int)com.area + "-" + (int)com.cuenta + " " + (string)areaCuentaEK.descripcion;
                                //                }

                                //                bool flagVoboPendiente = false;

                                //                var vobosRequeridos = listaFacultamientosEspeciales[0].cantidad_vobos;

                                //                switch (vobosRequeridos)
                                //                {
                                //                    case 1:
                                //                        flagVoboPendiente = (int)com.vobo == 0 ? true : false;
                                //                        break;
                                //                    case 2:
                                //                        flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false;
                                //                        break;
                                //                    case 3:
                                //                        flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 || (int)com.vobo3 == 0 ? true : false;
                                //                        break;
                                //                }

                                //                lstCompras.Add(new OrdenCompraDTO
                                //                {
                                //                    cc = (string)com.cc.Value,
                                //                    ccDesc = (string)com.ccDesc.Value,
                                //                    numero = com.numero.Value != null ? Convert.ToInt32(com.numero.Value) : 0,
                                //                    proveedor = com.proveedor.Value != null ? Convert.ToInt32(com.proveedor.Value) : 0,
                                //                    proveedorNom = com.proveedor.Value != null && com.proveedorNom.Value != null ? com.proveedor.Value + " - " + com.proveedorNom.Value : string.Empty,
                                //                    total = com.total.Value != null ? Convert.ToDecimal(com.total.Value, CultureInfo.InvariantCulture) : 0,
                                //                    tipo_cambio = com.tipo_cambio.Value != null ? Convert.ToDecimal(com.tipo_cambio.Value, CultureInfo.InvariantCulture) : 0,
                                //                    moneda = com.moneda.Value != null ? Convert.ToInt32(com.moneda.Value) : 1,
                                //                    fecha = com.fecha.Value != null ? com.fecha.Value : default(DateTime),
                                //                    flagPuedeAutorizar = false,
                                //                    vobo = com.vobo.Value != null ? Convert.ToInt32(com.vobo.Value) : 0,
                                //                    vobo2 = com.vobo2.Value != null ? Convert.ToInt32(com.vobo2.Value) : 0,
                                //                    vobo3 = com.vobo3.Value != null ? Convert.ToInt32(com.vobo3.Value) : 0,
                                //                    voboPendiente = flagVoboPendiente, //voboPendiente = voboPendienteActivoFijo ? voboPendienteActivoFijo : (com.voboPendiente.Value == "PENDIENTE" ? true : false),
                                //                    flagCancelar = false,
                                //                    numeroRequisicion = com.numeroRequisicion.Value != null ? (int)com.numeroRequisicion : 0,
                                //                    tieneCuadro = com.tieneCuadro != null ? true : false,
                                //                    countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                //                    area = com.area,
                                //                    cuenta = com.cuenta,
                                //                    areaCuentaDesc = areaCuentaDesc,
                                //                    comprador = Convert.ToInt32(com.comprador),
                                //                    compradorNom = com.compradorNom != null ? (string)com.compradorNom : ""
                                //                });
                                //            }
                                //        }

                                //        continue;
                                //    }
                                //}

                                //if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                                //{
                                //    var totalCompraPesos = com.total * com.tipo_cambio;
                                //    var listaFacultamientosEspeciales = _context.tblCom_VoboAutorizacionEspecial.ToList().Where(x =>
                                //        x.registroActivo && x.area == (int)com.area && x.cuenta == (int)com.cuenta && totalCompraPesos >= x.monto_minimo && totalCompraPesos <= x.monto_maximo
                                //    ).ToList();

                                //    if (listaFacultamientosEspeciales.Count() > 0) //Si se encuentra por lo menos un registro de facultamientos especiales, se brinca toda la lógica normal.
                                //    {
                                //        var facultamientosEspecialesEmpleado = listaFacultamientosEspeciales.Where(x => x.empleado == relUser.empleado).ToList();

                                //        if (facultamientosEspecialesEmpleado.Count() > 0)
                                //        {
                                //            bool flagPuedeDarVoboESP = false;

                                //            if ((int)com.vobo == relUser.empleado || (int)com.vobo2 == relUser.empleado || (int)com.vobo3 == relUser.empleado)
                                //            {
                                //                flagPuedeDarVoboESP = false;
                                //            }
                                //            else
                                //            {
                                //                flagPuedeDarVoboESP = facultamientosEspecialesEmpleado.FirstOrDefault(x => x.tipo == TipoVoboAutorizacionEnum.VOBO && x.empleado == relUser.empleado) != null;
                                //            }

                                //            bool flagPuedeAutorizarESP = facultamientosEspecialesEmpleado.FirstOrDefault(x => x.tipo == TipoVoboAutorizacionEnum.AUTORIZACION && x.empleado == relUser.empleado) != null;

                                //            if (!lstCompras.Any(x => x.cc == (string)com.cc && x.numero == (int)com.numero))
                                //            {
                                //                var areaCuentaEK = listaAreaCuentaEK.FirstOrDefault(x => (int)x.area == (int)com.area && (int)x.cuenta == (int)com.cuenta);
                                //                var areaCuentaDesc = "";

                                //                if (areaCuentaEK != null)
                                //                {
                                //                    areaCuentaDesc = (int)com.area + "-" + (int)com.cuenta + " " + (string)areaCuentaEK.descripcion;
                                //                }

                                //                bool flagVoboPendiente = false;

                                //                var vobosRequeridos = listaFacultamientosEspeciales[0].cantidad_vobos;

                                //                switch (vobosRequeridos)
                                //                {
                                //                    case 1:
                                //                        flagVoboPendiente = (int)com.vobo == 0 ? true : false;
                                //                        break;
                                //                    case 2:
                                //                        flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false;
                                //                        break;
                                //                    case 3:
                                //                        flagVoboPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 || (int)com.vobo3 == 0 ? true : false;
                                //                        break;
                                //                }

                                //                lstCompras.Add(new OrdenCompraDTO
                                //                {
                                //                    cc = (string)com.cc.Value,
                                //                    ccDesc = (string)com.ccDesc.Value,
                                //                    numero = com.numero.Value != null ? Convert.ToInt32(com.numero.Value) : 0,
                                //                    proveedor = com.proveedor.Value != null ? Convert.ToInt32(com.proveedor.Value) : 0,
                                //                    proveedorNom = com.proveedor.Value != null && com.proveedorNom.Value != null ? com.proveedor.Value + " - " + com.proveedorNom.Value : string.Empty,
                                //                    total = com.total.Value != null ? Convert.ToDecimal(com.total.Value, CultureInfo.InvariantCulture) : 0,
                                //                    tipo_cambio = com.tipo_cambio.Value != null ? Convert.ToDecimal(com.tipo_cambio.Value, CultureInfo.InvariantCulture) : 0,
                                //                    moneda = com.moneda.Value != null ? Convert.ToInt32(com.moneda.Value) : 1,
                                //                    fecha = com.fecha.Value != null ? com.fecha.Value : default(DateTime),
                                //                    flagPuedeAutorizar = false,
                                //                    vobo = com.vobo.Value != null ? Convert.ToInt32(com.vobo.Value) : 0,
                                //                    vobo2 = com.vobo2.Value != null ? Convert.ToInt32(com.vobo2.Value) : 0,
                                //                    vobo3 = com.vobo3.Value != null ? Convert.ToInt32(com.vobo3.Value) : 0,
                                //                    voboPendiente = flagVoboPendiente, //voboPendiente = voboPendienteActivoFijo ? voboPendienteActivoFijo : (com.voboPendiente.Value == "PENDIENTE" ? true : false),
                                //                    flagCancelar = false,
                                //                    numeroRequisicion = com.numeroRequisicion.Value != null ? (int)com.numeroRequisicion : 0,
                                //                    tieneCuadro = com.tieneCuadro != null ? true : false,
                                //                    countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                //                    area = com.area,
                                //                    cuenta = com.cuenta,
                                //                    areaCuentaDesc = areaCuentaDesc,
                                //                    comprador = Convert.ToInt32(com.comprador),
                                //                    compradorNom = com.compradorNom != null ? (string)com.compradorNom : ""
                                //                });
                                //            }
                                //        }

                                //        continue;
                                //    }
                                //}
                                //#endregion

                                #region Verificar si la compra tiene vobo pendiente.
                                bool flagVoBoPendiente = false;

                                if (com.autoriza_activos == 0 && com.tmc == 0)
                                {
                                    var total = Convert.ToDecimal(com.total, CultureInfo.InvariantCulture);
                                    var partidas = (List<dynamic>)consultaCheckProductivo(
                                        string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", (string)com.cc, (int)com.numero)
                                    ).ToObject<List<dynamic>>();
                                    var listTipoGrupo = partidas.Select(x => Int32.Parse(((int)x.insumo).ToString().Substring(0, 3))).ToList();
                                    var stringListTipoGrupo = string.Join(", ", listTipoGrupo);

                                    dynamic facultamientosEK = null;

                                    if (vSesiones.sesionEmpresaActual == 1 || vSesiones.sesionEmpresaActual == 4 || vSesiones.sesionEmpresaActual == (int)EmpresaEnum.GCPLAN)
                                    {
                                        facultamientosEK = consultaCheckProductivo(
                                            string.Format(@"SELECT 
                                                            tblPrincipal.cc, 
                                                            tblPrincipal.num_autorizacioines AS tblPrincipalNumAutorizaciones, 
                                                            tblPrincipal.monto_minimo_autoriza, 
                                                            tblPrincipal.monto_maximo_autoriza, 
                                                            tblPrincipal.consecutivo, 
                                                            
                                                            tblVobo.empleado AS empleadoVobo, 
                                                            tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                            
                                                            tblGrupos.tipo AS tipoGrupo, 
                                                            tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                            
                                                            tblAut.empleado AS empleadoAutoriza, 
                                                            tblAut.num_autorizaciones AS tblAutNumAutorizaciones, 
                                                            tblAut.orden AS ordenAutorizacion 
                                                        FROM so_cc_autorizacion tblPrincipal 
                                                            LEFT JOIN so_empleados_cc tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                                            LEFT JOIN so_rel_tipos_vobo tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                                            LEFT JOIN so_empleados_autoriza_cc tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                                        WHERE 
                                                            tblPrincipal.cc = '{0}' AND 
                                                            tblPrincipal.monto_minimo_autoriza <= {1} AND 
                                                            tblPrincipal.monto_maximo_autoriza >= {1} AND 
                                                            tblGrupos.tipo IN ({2}) 
                                                        ORDER BY tblPrincipal.consecutivo", (string)com.cc, total, stringListTipoGrupo)
                                        );
                                    }
                                    else
                                    {
                                        facultamientosEK = consultaCheckProductivo(
                                            string.Format(@"SELECT 
                                                            tblPrincipal.area, 
                                                            tblPrincipal.cuenta, 
                                                            tblPrincipal.num_autorizaciones AS tblPrincipalNumAutorizaciones, 
                                                            tblPrincipal.monto_minimo_autoriza, 
                                                            tblPrincipal.monto_maximo_autoriza, 
                                                            tblPrincipal.consecutivo, 
                                                            
                                                            tblVobo.empleado AS empleadoVobo, 
                                                            tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                            
                                                            tblGrupos.tipo AS tipoGrupo, 
                                                            tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                            
                                                            tblAut.empleado AS empleadoAutoriza, 
                                                            tblAut.num_autorizaciones AS tblAutNumAutorizaciones 
                                                        FROM so_area_cta_autorizacion tblPrincipal 
                                                            LEFT JOIN so_empleados_area_cta tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                                            LEFT JOIN so_rel_tipos_vobo_area_cta tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                                            LEFT JOIN so_empleados_autoriza_area_cta tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                                        WHERE 
                                                            tblPrincipal.area = {0} AND tblPrincipal.cuenta = {1} AND 
                                                            tblPrincipal.monto_minimo_autoriza <= {2} AND 
                                                            tblPrincipal.monto_maximo_autoriza >= {2} AND 
                                                            tblGrupos.tipo IN ({3}) 
                                                        ORDER BY tblPrincipal.consecutivo", (int)com.area, (int)com.cuenta, total, stringListTipoGrupo)
                                        );
                                    }

                                    if (facultamientosEK != null)
                                    {
                                        var facultamientos = (List<PermisoMontoDTO>)facultamientosEK.ToObject<List<PermisoMontoDTO>>();

                                        var vobosRequeridos = facultamientos[0].tblVoboNumAutorizaciones ?? 0;

                                        switch (vobosRequeridos)
                                        {
                                            case 1:
                                                flagVoBoPendiente = (int)com.vobo == 0 ? true : false;
                                                break;
                                            case 2:
                                                flagVoBoPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false;
                                                break;
                                            case 3:
                                                flagVoBoPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 || (int)com.vobo3 == 0 ? true : false;
                                                break;
                                        }
                                    }
                                }

                                if (com.autoriza_activos == 1)
                                {
                                    flagVoBoPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false; //Siempre son dos VoBos cuando la compra es Activo Fijo
                                }

                                if (com.tmc == 1)
                                {
                                    flagVoBoPendiente = (int)com.vobo == 0 || (int)com.vobo2 == 0 ? true : false; //Siempre son dos VoBos cuando la compra es TMC
                                }
                                #endregion

                                //var voboPendienteActivoFijo = false;

                                //if (((int)com.vobo == 0 || (int)com.vobo2 == 0) && (int)com.autoriza_activos == 1)
                                //{
                                //    voboPendienteActivoFijo = true;
                                //}

                                if (!lstCompras.Any(x => x.cc == (string)com.cc && x.numero == (int)com.numero))
                                {
                                    var areaCuentaEK = listaAreaCuentaEK.FirstOrDefault(x => (int)x.area == (int)com.area && (int)x.cuenta == (int)com.cuenta);
                                    var areaCuentaDesc = "";

                                    if (areaCuentaEK != null)
                                    {
                                        areaCuentaDesc = (int)com.area + "-" + (int)com.cuenta + " " + (string)areaCuentaEK.descripcion;
                                    }

                                    lstCompras.Add(new OrdenCompraDTO
                                    {
                                        cc = (string)com.cc.Value,
                                        ccDesc = (string)com.ccDesc.Value,
                                        numero = com.numero.Value != null ? Convert.ToInt32(com.numero.Value) : 0,
                                        proveedor = com.proveedor.Value != null ? Convert.ToInt32(com.proveedor.Value) : 0,
                                        proveedorNom = com.proveedor.Value != null && com.proveedorNom.Value != null ? com.proveedor.Value + " - " + com.proveedorNom.Value : string.Empty,
                                        total = com.total.Value != null ? Convert.ToDecimal(com.total.Value, CultureInfo.InvariantCulture) : 0,
                                        tipo_cambio = com.tipo_cambio.Value != null ? Convert.ToDecimal(com.tipo_cambio.Value, CultureInfo.InvariantCulture) : 0,
                                        moneda = com.moneda.Value != null ? Convert.ToInt32(com.moneda.Value) : 1,
                                        fecha = com.fecha.Value != null ? com.fecha.Value : default(DateTime),
                                        flagPuedeAutorizar = false,
                                        vobo = com.vobo.Value != null ? Convert.ToInt32(com.vobo.Value) : 0,
                                        vobo2 = com.vobo2.Value != null ? Convert.ToInt32(com.vobo2.Value) : 0,
                                        vobo3 = com.vobo3.Value != null ? Convert.ToInt32(com.vobo3.Value) : 0,
                                        voboPendiente = flagVoBoPendiente, //voboPendiente = voboPendienteActivoFijo ? voboPendienteActivoFijo : (com.voboPendiente.Value == "PENDIENTE" ? true : false),
                                        flagCancelar = false,
                                        numeroRequisicion = com.numeroRequisicion.Value != null ? (int)com.numeroRequisicion : 0,
                                        tieneCuadro = com.tieneCuadro != null ? true : false,
                                        countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                        area = com.area,
                                        cuenta = com.cuenta,
                                        areaCuentaDesc = areaCuentaDesc,
                                        comprador = Convert.ToInt32(com.comprador),
                                        compradorNom = com.compradorNom != null ? (string)com.compradorNom : ""
                                    });
                                }
                            }
                        }


                        #region OC INTERNAS
                        if (!string.IsNullOrEmpty(cc))
                        {
                            string strQuery = string.Format(@"SELECT t1.cc, t1.numero, t1.fecha, t1.total, t2.descripcion AS ccDesc, t3.area, t3.cuenta, usu.nombreUsuario
	                                                        FROM tblCom_OrdenCompra_Interna AS t1 
	                                                        INNER JOIN tblP_CC AS t2 ON t1.cc = t2.cc
	                                                        INNER JOIN tblCom_OrdenCompraDet_Interna AS t3 ON t1.id = t3.idOrdenCompra
                                                            LEFT JOIN tblP_Usuario usu ON t1.compradorSIGOPLAN = usu.id
		                                                        WHERE (t1.ST_OC != 'A' OR t1.ST_OC IS NULL) AND t2.cc = '{0}'", cc);

                            List<dynamic> lstOC_Internas = _context.Select<dynamic>(new DapperDTO
                            {
                                baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                                consulta = strQuery
                            }).ToList();

                            foreach (var com in lstOC_Internas)
                            {
                                lstCompras.Add(new OrdenCompraDTO
                                {
                                    cc = (string)com.cc,
                                    ccDesc = (string)com.ccDesc,
                                    numero = com.numero != null ? Convert.ToInt32(com.numero) : 0,
                                    proveedor = com.proveedor != null ? Convert.ToInt32(com.proveedor) : 0,
                                    proveedorNom = com.proveedor != null && com.proveedorNom != null ? com.proveedor + " - " + com.proveedorNom : string.Empty,
                                    total = com.total != null ? Convert.ToDecimal(com.total, CultureInfo.InvariantCulture) : 0,
                                    tipo_cambio = com.tipo_cambio != null ? Convert.ToDecimal(com.tipo_cambio, CultureInfo.InvariantCulture) : 0,
                                    moneda = com.moneda != null ? Convert.ToInt32(com.moneda) : 1,
                                    fecha = com.fecha != null ? com.fecha : default(DateTime),
                                    flagPuedeAutorizar = false,
                                    vobo = com.vobo != null ? Convert.ToInt32(com.vobo) : 0,
                                    vobo2 = com.vobo2 != null ? Convert.ToInt32(com.vobo2) : 0,
                                    vobo3 = com.vobo3 != null ? Convert.ToInt32(com.vobo3) : 0,
                                    //voboPendiente = flagVoBoPendiente, //voboPendiente = voboPendienteActivoFijo ? voboPendienteActivoFijo : (com.voboPendiente == "PENDIENTE" ? true : false),
                                    voboPendiente = true,
                                    flagCancelar = false,
                                    numeroRequisicion = com.numeroRequisicion != null ? (int)com.numeroRequisicion : 0,
                                    tieneCuadro = com.tieneCuadro != null ? true : false,
                                    countCuadroComparativo = com.countCuadroComparativo != null ? (int)com.countCuadroComparativo : 0,
                                    area = com.area,
                                    cuenta = com.cuenta,
                                    //areaCuentaDesc = areaCuentaDesc
                                    areaCuentaDesc = "areaCuentaDesc",
                                    esOC_Interna = true,
                                    comprador = Convert.ToInt32(com.compradorSIGOPLAN),
                                    compradorNom = (string)com.nombreUsuario
                                });
                            }
                        }
                        #endregion

                        var resultado = !pendientes ? lstCompras.OrderBy(x => x.cc).ToList() : lstCompras.Where(x => x.voboPendiente).OrderBy(x => x.cc).ToList();

                        foreach (var r in resultado)
                        {
                            int numVobos = r.numVobos;
                            r.vobosString = string.Join(", ", getVobos(r).Select(x => x.usu_numero + "-" + x.usu_nombre + "|" + (r.voboPendiente ? x.color : x.color == "red" ? "black" : "green")));
                            r.autorizacionesString = string.Join(", ", getAutorizaciones(r).Select(x => (int)x.usu_numero + "-" + (string)x.usu_nombre));
                        }


                        return resultado;
                        #endregion
                    }
            }
        }

        public List<OrdenCompraDesautorizacionDTO> getListaComprasDes(string cc)
        {
            try
            {
                var usuario = vSesiones.sesionUsuarioDTO;
                var relUser = ufs.getUsuarioService().getUserEk(usuario.id);

                var ccResponsableEK = consultaCheckProductivo(
                    string.Format("SELECT cc, empleado FROM so_cc_responsable WHERE empleado = {0}", relUser.empleado)
                );

                if (ccResponsableEK != null)
                {
                    var ccResponsable = (List<ResponsableDTO>)ccResponsableEK.ToObject<List<ResponsableDTO>>();

                    if (cc != "")
                    {
                        ccResponsable = ccResponsable.Where(x => x.cc == cc).ToList();
                    }

                    var stringCCResponsable = string.Join(", ", ccResponsable.Select(x => "'" + x.cc + "'"));

                    List<OrdenCompraDesautorizacionDTO> lstCompras = new List<OrdenCompraDesautorizacionDTO>();

                    if ((EmpresaEnum)vSesiones.sesionEmpresaActual != EmpresaEnum.Colombia)
                    {
                        var compras = consultaCheckProductivo(
                        string.Format(@"SELECT 
                                            DISTINCT d.num_requisicion, 
                                            oc.cc, 
                                            (SELECT c.cc + ' - ' + c.descripcion FROM cc c WHERE c.cc = oc.cc AND c.st_ppto != 'T') AS ccDesc, 
                                            oc.numero, 
                                            oc.proveedor, 
                                            (SELECT pr.nombre FROM sp_proveedores pr where pr.numpro = oc.proveedor) as proveedorNom, 
                                            oc.total, 
                                            oc.tipo_cambio, 
                                            oc.moneda, 
                                            oc.fecha                                       
                                        FROM so_orden_compra oc 
                                        INNER JOIN so_orden_compra_det d ON (oc.numero = d.numero and oc.cc = d.cc) 
                                        WHERE c.st_ppto!='T' AND oc.cc IN ({0}) AND ST_OC = 'A'", stringCCResponsable)
                        );

                        if (compras != null)
                        {
                            foreach (var p in compras)
                            {
                                lstCompras.Add(new OrdenCompraDesautorizacionDTO
                                {
                                    cc = p.cc.Value ?? string.Empty,
                                    ccDesc = p.ccDesc.Value ?? string.Empty,
                                    numero = p.numero.Value != null ? Convert.ToInt32(p.numero.Value) : 0,
                                    proveedor = p.proveedor.Value != null ? Convert.ToInt32(p.proveedor.Value) : 0,
                                    proveedorNom = p.proveedor.Value != null && p.proveedorNom.Value != null ? p.proveedor.Value + " - " + p.proveedorNom.Value : string.Empty,
                                    total = p.total.Value != null ? Convert.ToDecimal(p.total.Value, CultureInfo.InvariantCulture) : 0,
                                    tipo_cambio = p.tipo_cambio.Value != null ? Convert.ToDecimal(p.tipo_cambio.Value, CultureInfo.InvariantCulture) : 0,
                                    moneda = p.moneda.Value != null ? Convert.ToInt32(p.moneda.Value) : 1,
                                    fecha = p.fecha.Value != null ? p.fecha.Value : default(DateTime),
                                    num_requisicion = p.num_requisicion.Value != null ? Convert.ToInt32(p.num_requisicion.Value) : 0
                                });
                            }
                        }
                    }
                    else
                    {
                        var compras = consultaCheckProductivo(
                        string.Format(@"SELECT 
                                            DISTINCT d.num_requisicion, 
                                            oc.cc, 
                                            (SELECT c.cc + ' - ' + c.descripcion FROM cc c WHERE c.cc = oc.cc AND c.st_ppto != 'T') AS ccDesc, 
                                            oc.numero, 
                                            oc.proveedor, 
                                            (SELECT pr.nombre FROM sp_proveedores pr where pr.numpro = oc.proveedor) as proveedorNom, 
                                            oc.total, 
                                            oc.tipo_cambio, 
                                            oc.moneda, 
                                            oc.fecha                                       
                                        FROM so_orden_compra oc 
                                        INNER JOIN so_orden_compra_det d ON (oc.numero = d.numero and oc.cc = d.cc) 
                                        WHERE c.st_ppto!='T' AND oc.cc IN ({0}) AND (oc.vobo_aut = 'S' OR oc.aut_aut = 'S')", stringCCResponsable)
                        );

                        if (compras != null)
                        {
                            foreach (var p in compras)
                            {
                                lstCompras.Add(new OrdenCompraDesautorizacionDTO
                                {
                                    cc = p.cc.Value ?? string.Empty,
                                    ccDesc = p.ccDesc.Value ?? string.Empty,
                                    numero = p.numero.Value != null ? Convert.ToInt32(p.numero.Value) : 0,
                                    proveedor = p.proveedor.Value != null ? Convert.ToInt32(p.proveedor.Value) : 0,
                                    proveedorNom = p.proveedor.Value != null && p.proveedorNom.Value != null ? p.proveedor.Value + " - " + p.proveedorNom.Value : string.Empty,
                                    total = p.total.Value != null ? Convert.ToDecimal(p.total.Value, CultureInfo.InvariantCulture) : 0,
                                    tipo_cambio = p.tipo_cambio.Value != null ? Convert.ToDecimal(p.tipo_cambio.Value, CultureInfo.InvariantCulture) : 0,
                                    moneda = p.moneda.Value != null ? Convert.ToInt32(p.moneda.Value) : 1,
                                    fecha = p.fecha.Value != null ? p.fecha.Value : default(DateTime),
                                    num_requisicion = p.num_requisicion.Value != null ? Convert.ToInt32(p.num_requisicion.Value) : 0
                                });
                            }
                        }
                    }

                    return lstCompras.OrderByDescending(x => x.fecha).ToList();
                }
                else
                {
                    return new List<OrdenCompraDesautorizacionDTO>();
                }
            }
            catch (Exception) { return null; }
        }

        List<dynamic> listaEmpleadosEK1 = null;
        //List<tblCom_VoboAutorizacionEspecial> listaFacultamientosEspeciales1 = null;

        public List<VoboDTO> getVobos(OrdenCompraDTO compra)
        {
            try
            {
                dynamic compraEK = null;

                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
                {
                    #region COLOMBIA
                    if (compra.esOC_Interna)
                    {
                        #region OC INTERNA
                        var compraEK1 = _context.Select<OrdenCompraDTO>(new DapperDTO
                        {
                            baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                            consulta = "SELECT * FROM tblCom_OrdenCompra_Interna WHERE cc = @cc AND numero = @numero",
                            parametros = new { cc = compra.cc, numero = compra.numero }
                        }).FirstOrDefault();
                        if (compraEK1 != null)
                        {
                            var ocInternaDet = _context.tblCom_OrdenCompraDet_Interna.Where(x => x.cc == compra.cc && x.numero == compra.numero).ToList();
                            if (ocInternaDet.Count > 0)
                            {
                                compraEK1.area = ocInternaDet[0].area;
                                compraEK1.cuenta = ocInternaDet[0].cuenta;

                                List<dynamic> listAutoriza = new List<dynamic>();

                                //
                                List<VoboDTO> vobos = new List<VoboDTO>();

                                if (compraEK1.autoriza_activos == 0 && compraEK1.tmc == 0)
                                {
                                    #region VoBos por Centro de Costo, monto y Tipo-Grupo
                                    //var partidas = (List<dynamic>)consultaCheckProductivo(
                                    //    string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", compraEK1.cc, compraEK1.numero)
                                    //).ToObject<List<dynamic>>();
                                    var listTipoGrupo = ocInternaDet.Select(x => Int32.Parse(((int)x.insumo).ToString().Substring(0, 3))).ToList();
                                    var stringListTipoGrupo = string.Join(", ", listTipoGrupo);
                                    var total = compraEK1.moneda == 2 ? (compraEK1.total * compraEK1.tipo_cambio) : compraEK1.total;
                                    dynamic facultamientosEK = null;

                                    #region ES OC INTERNA
                                    if (compra.esOC_Interna)
                                    {
                                        compraEK1.cc = !string.IsNullOrEmpty(compra.cc) ? compra.cc.ToUpper() : string.Empty;
                                    }
                                    #endregion

                                    if (compra.esOC_Interna)
                                    {
                                        #region LA OC ES INTERNA, POR LO QUE SE PASA SU AREA CUENTA
                                        if (compra.area <= 0 || compra.cuenta <= 0)
                                        {
                                            if (string.IsNullOrEmpty(compra.cc)) { throw new Exception("Ocurrió un error al obtener la información."); }
                                            if (compra.numero <= 0) { throw new Exception("Ocurrió un error al obtener la información."); }

                                            tblCom_OrdenCompraDet_Interna objCompra_Interna = _context.tblCom_OrdenCompraDet_Interna.Where(w => w.cc == compra.cc && w.numero == compra.numero).FirstOrDefault();
                                            if (objCompra_Interna == null)
                                                throw new Exception("Ocurrió un error al obtener la información.");

                                            compra.area = objCompra_Interna.area;
                                            compra.cuenta = objCompra_Interna.cuenta;
                                        }

                                        compraEK1.area = compra.area;
                                        compraEK1.cuenta = compra.cuenta;
                                        #endregion
                                    }

                                    //                                    facultamientosEK = consultaCheckProductivo(
                                    //                                        string.Format(@"SELECT 
                                    //                                                tblPrincipal.area, 
                                    //                                                tblPrincipal.cuenta, 
                                    //                                                tblPrincipal.num_autorizaciones AS tblPrincipalNumAutorizaciones, 
                                    //                                                tblPrincipal.monto_minimo_autoriza, 
                                    //                                                tblPrincipal.monto_maximo_autoriza, 
                                    //                                                tblPrincipal.consecutivo, 
                                    //                                                    
                                    //                                                tblVobo.empleado AS empleadoVobo, 
                                    //                                                empVobo.descripcion AS empleadoVoboDesc, 
                                    //                                                tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                    //                                                    
                                    //                                                tblGrupos.tipo AS tipoGrupo, 
                                    //                                                tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                    //                                                    
                                    //                                                tblAut.empleado AS empleadoAutoriza, 
                                    //                                                tblAut.num_autorizaciones AS tblAutNumAutorizaciones 
                                    //                                            FROM so_area_cta_autorizacion tblPrincipal 
                                    //                                                LEFT JOIN so_empleados_area_cta tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                    //                                                LEFT JOIN so_rel_tipos_vobo_area_cta tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                    //                                                LEFT JOIN so_empleados_autoriza_area_cta tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                    //                                                LEFT JOIN empleados empVobo ON tblVobo.empleado = empVobo.empleado 
                                    //                                            WHERE 
                                    //                                                tblPrincipal.area = {0} AND tblPrincipal.cuenta = {1} AND 
                                    //                                                tblPrincipal.monto_minimo_autoriza <= {2} AND 
                                    //                                                tblPrincipal.monto_maximo_autoriza >= {2} AND 
                                    //                                                tblGrupos.tipo IN ({3}) 
                                    //                                            ORDER BY tblPrincipal.consecutivo", compraEK1.area, compraEK1.cuenta, total, stringListTipoGrupo)
                                    //                                    );

                                    string strQuery = string.Format(@"SELECT 
                                                                        tblPrincipal.area, 
                                                                        tblPrincipal.cuenta, 
                                                                        tblPrincipal.num_autorizaciones AS tblPrincipalNumAutorizaciones, 
                                                                        tblPrincipal.monto_minimo_autoriza, 
                                                                        tblPrincipal.monto_maximo_autoriza, 
                                                                        tblPrincipal.consecutivo, 
                                                    
                                                                        tblVobo.empleado AS empleadoVobo, 
                                                                        empVobo.descripcion AS empleadoVoboDesc, 
                                                                        tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                    
                                                                        tblGrupos.tipo AS tipoGrupo, 
                                                                        tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                    
                                                                        tblAut.empleado AS empleadoAutoriza, 
                                                                        tblAut.num_autorizaciones AS tblAutNumAutorizaciones 
                                                                    FROM so_area_cta_autorizacion tblPrincipal 
                                                                        LEFT JOIN so_empleados_area_cta tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                                                        LEFT JOIN so_rel_tipos_vobo_area_cta tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                                                        LEFT JOIN so_empleados_autoriza_area_cta tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                                                        LEFT JOIN empleadosFacultamientos empVobo ON tblVobo.empleado = empVobo.empleado 
                                                                    WHERE 
                                                                        tblPrincipal.area = {0} AND tblPrincipal.cuenta = {1} AND 
                                                                        tblPrincipal.monto_minimo_autoriza <= {2} AND 
                                                                        tblPrincipal.monto_maximo_autoriza >= {2} AND 
                                                                        tblGrupos.tipo IN ({3}) 
                                                                    ORDER BY tblPrincipal.consecutivo", compraEK1.area, compraEK1.cuenta, total, stringListTipoGrupo);
                                    facultamientosEK = _context.Select<dynamic>(new DapperDTO
                                    {
                                        baseDatos = MainContextEnum.Colombia,
                                        consulta = strQuery
                                    }).ToList();

                                    if (facultamientosEK != null)
                                    {
                                        var facultamientos = (List<PermisoMontoDTO>)facultamientosEK.ToObject<List<PermisoMontoDTO>>();

                                        foreach (var fac in facultamientos)
                                        {
                                            if (fac.empleadoVobo != null && fac.empleadoVobo > 0 && !vobos.Any(x => x.usu_numero == (int)fac.empleadoVobo))
                                            {
                                                vobos.Add(new VoboDTO
                                                {
                                                    usu_numero = fac.empleadoVobo != null ? (int)fac.empleadoVobo : 0,
                                                    usu_nombre = fac.empleadoVobo != null ? fac.empleadoVoboDesc : "",
                                                    numVobos = fac.tblVoboNumAutorizaciones != null ? (int)fac.tblVoboNumAutorizaciones : 0,
                                                    consecutivo = 0
                                                });
                                            }
                                        }
                                    }
                                    #endregion
                                }

                                if (compraEK1.autoriza_activos == 1 && compraEK1.tmc == 0)
                                {
                                    #region VoBos por Activo Fijo
                                    var empleadosVoboEK = consultaCheckProductivo(
                                        string.Format(@"SELECT 
                                                v.*,
                                                emp.descripcion AS empleadoDesc 
                                            FROM so_cc_vobo v 
                                                INNER JOIN empleados emp ON v.empleado = emp.empleado 
                                            WHERE cc = '{0}'", compraEK1.cc)
                                    );

                                    if (empleadosVoboEK != null)
                                    {
                                        var empleadosVobo = (List<dynamic>)empleadosVoboEK.ToObject<List<dynamic>>();

                                        foreach (var emp in empleadosVobo)
                                        {
                                            vobos.Add(new VoboDTO
                                            {
                                                usu_numero = (int)emp.empleado,
                                                usu_nombre = (string)emp.empleadoDesc,
                                                numVobos = 2, //Las compras de Activo Fijo siempre llevan 2.
                                                consecutivo = 0
                                            });
                                        }
                                    }
                                    #endregion
                                }

                                if (compraEK1.autoriza_activos == 0 && compraEK1.tmc == 1)
                                {
                                    #region VoBos por TMC
                                    var empleadosVoboTMCEK = consultaCheckProductivo(string.Format(@"SELECT * FROM empleados WHERE vobo_tmc = 1"));

                                    if (empleadosVoboTMCEK != null)
                                    {
                                        var empleadosVoboTMC = (List<dynamic>)empleadosVoboTMCEK.ToObject<List<dynamic>>();

                                        foreach (var emp in empleadosVoboTMC)
                                        {
                                            vobos.Add(new VoboDTO
                                            {
                                                usu_numero = (int)emp.empleado,
                                                usu_nombre = (string)emp.descripcion,
                                                numVobos = 1, //Las compras de TMC siempre llevan 1.
                                                consecutivo = 0
                                            });
                                        }
                                    }
                                    #endregion
                                }

                                #region Compra Traspaso de Almacén
                                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                                {
                                    if (compraEK1.proveedor == 5412) //Verificar que la compra tenga proveedor de Construplan
                                    {
                                        var listaPartidasEK = _contextEnkontrol.Select<OrdenCompraDetDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                        {
                                            consulta = @"SELECT * FROM so_orden_compra_det WHERE cc = ? AND numero = ?",
                                            parametros = new List<OdbcParameterDTO> {
                                    new OdbcParameterDTO() { nombre = "cc", tipo = OdbcType.VarChar, valor = compraEK1.cc },
                                    new OdbcParameterDTO() { nombre = "numero", tipo = OdbcType.Numeric, valor = compraEK1.numero }
                                }
                                        });

                                        if (listaPartidasEK.Count() > 0)
                                        {
                                            if (listaPartidasEK.FirstOrDefault(x => x.partida == 1).area == 1 && listaPartidasEK.FirstOrDefault(x => x.partida == 1).cuenta == 9) //Verificar que la compra tenga el área-cuenta "1-9" en la primer partida
                                            {
                                                return new List<VoboDTO>();
                                            }
                                        }
                                    }
                                }
                                #endregion

                                foreach (var item in vobos)
                                {
                                    var objVobo = getUsuarioEnKontrol(compra.vobo)[0].descripcion.Value;
                                    if (objVobo != null && objVobo != "DEFAULT")
                                        item.color = "green";
                                    else
                                        item.color = "red";
                                }

                                return vobos;
                            }
                            else
                            {
                                return new List<VoboDTO>();
                            }
                        }
                        else
                        {
                            return new List<VoboDTO>();
                        }
                        #endregion
                    }
                    else
                    {
                        compraEK = consultaCheckProductivo(
                            string.Format(@"SELECT * FROM DBA.so_orden_compra WHERE vobo is not null and cc = '{0}' AND numero = {1}", compra.cc, compra.numero)
                        );

                        if (compraEK != null)
                        {
                            OrdenCompraDTO compraEnkontrol = new OrdenCompraDTO();
                            compraEnkontrol = ((List<OrdenCompraDTO>)compraEK.ToObject<List<OrdenCompraDTO>>())[0];

                            var flagCompraSISUN = _contextEnkontrol.Select<OrdenCompraDetDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                            {
                                consulta = string.Format(@"SELECT TOP 1 * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", compraEnkontrol.cc, compraEnkontrol.numero)
                            }).FirstOrDefault().num_requisicion == 0;

                            List<VoboDTO> vobos = new List<VoboDTO>();

                            if (compraEnkontrol.autoriza_activos == 0 && compraEnkontrol.tmc == 0)
                            {
                                #region VoBos por Centro de Costo, monto y Tipo-Grupo
                                List<dynamic> partidas = new List<dynamic>();

                                partidas = (List<dynamic>)consultaCheckProductivo(
                                    string.Format(@"SELECT * FROM DBA.so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", compraEnkontrol.cc, compraEnkontrol.numero)
                                ).ToObject<List<dynamic>>();

                                var listTipoGrupo = partidas.Select(x => Int32.Parse(((int)x.insumo).ToString().Substring(0, 3))).ToList();
                                var stringListTipoGrupo = string.Join(", ", listTipoGrupo);
                                var total = compraEnkontrol.moneda == 2 ? (compraEnkontrol.total * compraEnkontrol.tipo_cambio) : compraEnkontrol.total;
                                //dynamic facultamientosEK = null;
                                List<PermisoMontoDTO> facultamientosEK = new List<PermisoMontoDTO>();

                                string strQuery = string.Format(@"SELECT 
                                                        tblPrincipal.cc, 
                                                        tblPrincipal.num_autorizacioines AS tblPrincipalNumAutorizaciones, 
                                                        tblPrincipal.monto_minimo_autoriza, 
                                                        tblPrincipal.monto_maximo_autoriza, 
                                                        tblPrincipal.consecutivo, 
                                                                                        
                                                        tblVobo.empleado AS empleadoVobo, 
                                                        empVobo.descripcion AS empleadoVoboDesc, 
                                                        tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                                                        
                                                        tblGrupos.tipo AS tipoGrupo, 
                                                        tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                                                        
                                                        tblAut.empleado AS empleadoAutoriza, 
                                                        tblAut.num_autorizaciones AS tblAutNumAutorizaciones, 
                                                        tblAut.orden AS ordenAutorizacion 
                                                    FROM so_cc_autorizacion tblPrincipal 
                                                        LEFT JOIN so_empleados_cc tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                                        LEFT JOIN so_rel_tipos_vobo tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                                        LEFT JOIN so_empleados_autoriza_cc tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                                        LEFT JOIN empleadosFacultamientos empVobo ON tblVobo.empleado = empVobo.empleado 
                                                    WHERE 
                                                        tblPrincipal.cc = '{0}' AND 
                                                        tblPrincipal.monto_minimo_autoriza <= {1} AND 
                                                        tblPrincipal.monto_maximo_autoriza >= {1} AND 
                                                        tblGrupos.tipo IN ({2}) 
                                                    ORDER BY tblPrincipal.consecutivo",
                                                    compraEnkontrol.cc.ToUpper(), total, stringListTipoGrupo);

                                facultamientosEK = _context.Select<PermisoMontoDTO>(new DapperDTO
                                {
                                    baseDatos = MainContextEnum.Colombia,
                                    consulta = strQuery
                                }).ToList();

                                if (facultamientosEK != null && facultamientosEK.Count() > 0)
                                {
                                    //var facultamientos = (List<PermisoMontoDTO>)facultamientosEK.ToObject<List<PermisoMontoDTO>>();
                                    var facultamientos = facultamientosEK.ToList();

                                    foreach (var fac in facultamientos)
                                    {
                                        if (fac.empleadoVobo != null && fac.empleadoVobo > 0 && !vobos.Any(x => x.usu_numero == (int)fac.empleadoVobo))
                                        {
                                            vobos.Add(new VoboDTO
                                            {
                                                usu_numero = fac.empleadoVobo != null ? (int)fac.empleadoVobo : 0,
                                                usu_nombre = fac.empleadoVobo != null ? fac.empleadoVoboDesc : "",
                                                numVobos = flagCompraSISUN ? 1 : (fac.tblVoboNumAutorizaciones != null ? (int)fac.tblVoboNumAutorizaciones : 0),
                                                consecutivo = 0,
                                                flagCompraSISUN = flagCompraSISUN,
                                                vobo_aut = compraEnkontrol.vobo_aut
                                            });
                                        }
                                    }
                                }
                                #endregion
                            }

                            if (compraEnkontrol.autoriza_activos == 1 && compraEnkontrol.tmc == 0)
                            {
                                #region VoBos por Activo Fijo
                                var empleadosVoboEK = consultaCheckProductivo(
                                    string.Format(@"SELECT v.*, emp.descripcion AS empleadoDesc 
                                                        FROM DBA.so_cc_vobo v 
                                                        INNER JOIN DBA.empleados emp ON v.empleado = emp.empleado 
                                                            WHERE cc = '{0}'", compraEnkontrol.cc)
                                );

                                if (empleadosVoboEK != null)
                                {
                                    var empleadosVobo = (List<dynamic>)empleadosVoboEK.ToObject<List<dynamic>>();

                                    foreach (var emp in empleadosVobo)
                                    {
                                        vobos.Add(new VoboDTO
                                        {
                                            usu_numero = (int)emp.empleado,
                                            usu_nombre = (string)emp.empleadoDesc,
                                            numVobos = 2, //Las compras de Activo Fijo siempre llevan 2.
                                            consecutivo = 0
                                        });
                                    }
                                }
                                #endregion
                            }

                            if (compraEnkontrol.autoriza_activos == 0 && compraEnkontrol.tmc == 1)
                            {
                                #region VoBos por TMC
                                var empleadosVoboTMCEK = consultaCheckProductivo(string.Format(@"SELECT * FROM DBA.empleados WHERE vobo_tmc = 1"));

                                if (empleadosVoboTMCEK != null)
                                {
                                    var empleadosVoboTMC = (List<dynamic>)empleadosVoboTMCEK.ToObject<List<dynamic>>();

                                    foreach (var emp in empleadosVoboTMC)
                                    {
                                        vobos.Add(new VoboDTO
                                        {
                                            usu_numero = (int)emp.empleado,
                                            usu_nombre = (string)emp.descripcion,
                                            numVobos = 1, //Las compras de TMC siempre llevan 1.
                                            consecutivo = 0
                                        });
                                    }
                                }
                                #endregion
                            }

                            foreach (var item in vobos)
                            {
                                var objVobo = getUsuarioEnKontrol(item.usu_numero);
                                if (objVobo != null && objVobo != "DEFAULT")
                                    item.color = "green";
                                else
                                    item.color = "red";
                            }

                            tblCom_OrdenCompra objOC = _context.tblCom_OrdenCompra.Where(w => w.cc == compra.cc && w.numero == compra.numero && w.estatusRegistro).FirstOrDefault();

                            if (objOC != null)
                            {
                                foreach (var item in vobos)
                                {
                                    if (item.usu_numero == objOC.vobo || item.usu_numero == objOC.vobo2)
                                        item.color = "green";
                                }
                            }

                            return vobos;
                        }
                        else
                        {
                            return new List<VoboDTO>();
                        }
                    }
                    #endregion
                }
                else
                {
                    #region DEMAS EMPRESAS
                    if (compra.esOC_Interna)
                    {
                        #region OC INTERNA
                        var compraEK1 = _context.Select<OrdenCompraDTO>(new DapperDTO
                        {
                            baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                            consulta = "SELECT * FROM tblCom_OrdenCompra_Interna WHERE cc = @cc AND numero = @numero",
                            parametros = new { cc = compra.cc, numero = compra.numero }
                        }).FirstOrDefault();
                        if (compraEK1 != null)
                        {
                            var ocInternaDet = _context.tblCom_OrdenCompraDet_Interna.Where(x => x.cc == compra.cc && x.numero == compra.numero).ToList();
                            if (ocInternaDet.Count > 0)
                            {
                                compraEK1.area = ocInternaDet[0].area;
                                compraEK1.cuenta = ocInternaDet[0].cuenta;

                                List<dynamic> listAutoriza = new List<dynamic>();
                                List<VoboDTO> vobos = new List<VoboDTO>();

                                if (compraEK1.autoriza_activos == 0 && compraEK1.tmc == 0)
                                {
                                    #region VoBos por Centro de Costo, monto y Tipo-Grupo
                                    //var partidas = (List<dynamic>)consultaCheckProductivo(
                                    //    string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", compraEK1.cc, compraEK1.numero)
                                    //).ToObject<List<dynamic>>();
                                    var listTipoGrupo = ocInternaDet.Select(x => Int32.Parse(((int)x.insumo).ToString().Substring(0, 3))).ToList();
                                    var stringListTipoGrupo = string.Join(", ", listTipoGrupo);
                                    var total = compraEK1.moneda == 2 ? (compraEK1.total * compraEK1.tipo_cambio) : compraEK1.total;
                                    dynamic facultamientosEK = null;

                                    #region ES OC INTERNA
                                    if (compra.esOC_Interna)
                                    {
                                        compraEK1.cc = !string.IsNullOrEmpty(compra.cc) ? compra.cc.ToUpper() : string.Empty;
                                    }
                                    #endregion

                                    if (vSesiones.sesionEmpresaActual == 1 || vSesiones.sesionEmpresaActual == 4 || vSesiones.sesionEmpresaActual == (int)EmpresaEnum.GCPLAN)
                                    {
                                        facultamientosEK = consultaCheckProductivo(
                                            string.Format(@"SELECT 
                                                    tblPrincipal.cc, 
                                                    tblPrincipal.num_autorizacioines AS tblPrincipalNumAutorizaciones, 
                                                    tblPrincipal.monto_minimo_autoriza, 
                                                    tblPrincipal.monto_maximo_autoriza, 
                                                    tblPrincipal.consecutivo, 
                                                    
                                                    tblVobo.empleado AS empleadoVobo, 
                                                    empVobo.descripcion AS empleadoVoboDesc, 
                                                    tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                    
                                                    tblGrupos.tipo AS tipoGrupo, 
                                                    tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                    
                                                    tblAut.empleado AS empleadoAutoriza, 
                                                    tblAut.num_autorizaciones AS tblAutNumAutorizaciones, 
                                                    tblAut.orden AS ordenAutorizacion 
                                                FROM so_cc_autorizacion tblPrincipal 
                                                    LEFT JOIN so_empleados_cc tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                                    LEFT JOIN so_rel_tipos_vobo tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                                    LEFT JOIN so_empleados_autoriza_cc tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                                    LEFT JOIN empleados empVobo ON tblVobo.empleado = empVobo.empleado 
                                                WHERE 
                                                    tblPrincipal.cc = '{0}' AND 
                                                    tblPrincipal.monto_minimo_autoriza <= {1} AND 
                                                    tblPrincipal.monto_maximo_autoriza >= {1} AND 
                                                    tblGrupos.tipo IN ({2}) 
                                                ORDER BY tblPrincipal.consecutivo", compraEK1.cc.ToUpper(), total, stringListTipoGrupo)
                                        );
                                    }
                                    else
                                    {
                                        if (compra.esOC_Interna)
                                        {
                                            #region LA OC ES INTERNA, POR LO QUE SE PASA SU AREA CUENTA
                                            if (compra.area <= 0 || compra.cuenta <= 0)
                                            {
                                                if (string.IsNullOrEmpty(compra.cc)) { throw new Exception("Ocurrió un error al obtener la información."); }
                                                if (compra.numero <= 0) { throw new Exception("Ocurrió un error al obtener la información."); }

                                                tblCom_OrdenCompraDet_Interna objCompra_Interna = _context.tblCom_OrdenCompraDet_Interna.Where(w => w.cc == compra.cc && w.numero == compra.numero).FirstOrDefault();
                                                if (objCompra_Interna == null)
                                                    throw new Exception("Ocurrió un error al obtener la información.");

                                                compra.area = objCompra_Interna.area;
                                                compra.cuenta = objCompra_Interna.cuenta;
                                            }

                                            compraEK1.area = compra.area;
                                            compraEK1.cuenta = compra.cuenta;
                                            #endregion
                                        }

                                        facultamientosEK = consultaCheckProductivo(
                                            string.Format(@"SELECT 
                                                    tblPrincipal.area, 
                                                    tblPrincipal.cuenta, 
                                                    tblPrincipal.num_autorizaciones AS tblPrincipalNumAutorizaciones, 
                                                    tblPrincipal.monto_minimo_autoriza, 
                                                    tblPrincipal.monto_maximo_autoriza, 
                                                    tblPrincipal.consecutivo, 
                                                    
                                                    tblVobo.empleado AS empleadoVobo, 
                                                    empVobo.descripcion AS empleadoVoboDesc, 
                                                    tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                    
                                                    tblGrupos.tipo AS tipoGrupo, 
                                                    tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                    
                                                    tblAut.empleado AS empleadoAutoriza, 
                                                    tblAut.num_autorizaciones AS tblAutNumAutorizaciones 
                                                FROM so_area_cta_autorizacion tblPrincipal 
                                                    LEFT JOIN so_empleados_area_cta tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                                    LEFT JOIN so_rel_tipos_vobo_area_cta tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                                    LEFT JOIN so_empleados_autoriza_area_cta tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                                    LEFT JOIN empleados empVobo ON tblVobo.empleado = empVobo.empleado 
                                                WHERE 
                                                    tblPrincipal.area = {0} AND tblPrincipal.cuenta = {1} AND 
                                                    tblPrincipal.monto_minimo_autoriza <= {2} AND 
                                                    tblPrincipal.monto_maximo_autoriza >= {2} AND 
                                                    tblGrupos.tipo IN ({3}) 
                                                ORDER BY tblPrincipal.consecutivo", compraEK1.area, compraEK1.cuenta, total, stringListTipoGrupo)
                                        );
                                    }

                                    if (facultamientosEK != null)
                                    {
                                        var facultamientos = (List<PermisoMontoDTO>)facultamientosEK.ToObject<List<PermisoMontoDTO>>();

                                        foreach (var fac in facultamientos)
                                        {
                                            if (fac.empleadoVobo != null && fac.empleadoVobo > 0 && !vobos.Any(x => x.usu_numero == (int)fac.empleadoVobo))
                                            {
                                                vobos.Add(new VoboDTO
                                                {
                                                    usu_numero = fac.empleadoVobo != null ? (int)fac.empleadoVobo : 0,
                                                    usu_nombre = fac.empleadoVobo != null ? fac.empleadoVoboDesc : "",
                                                    numVobos = fac.tblVoboNumAutorizaciones != null ? (int)fac.tblVoboNumAutorizaciones : 0,
                                                    consecutivo = 0
                                                });
                                            }
                                        }
                                    }
                                    #endregion
                                }

                                if (compraEK1.autoriza_activos == 1 && compraEK1.tmc == 0)
                                {
                                    #region VoBos por Activo Fijo
                                    var empleadosVoboEK = consultaCheckProductivo(
                                        string.Format(@"SELECT 
                                                v.*,
                                                emp.descripcion AS empleadoDesc 
                                            FROM so_cc_vobo v 
                                                INNER JOIN empleados emp ON v.empleado = emp.empleado 
                                            WHERE cc = '{0}'", compraEK1.cc)
                                    );

                                    if (empleadosVoboEK != null)
                                    {
                                        var empleadosVobo = (List<dynamic>)empleadosVoboEK.ToObject<List<dynamic>>();

                                        foreach (var emp in empleadosVobo)
                                        {
                                            vobos.Add(new VoboDTO
                                            {
                                                usu_numero = (int)emp.empleado,
                                                usu_nombre = (string)emp.empleadoDesc,
                                                numVobos = 2, //Las compras de Activo Fijo siempre llevan 2.
                                                consecutivo = 0
                                            });
                                        }
                                    }
                                    #endregion
                                }

                                if (compraEK1.autoriza_activos == 0 && compraEK1.tmc == 1)
                                {
                                    #region VoBos por TMC
                                    var empleadosVoboTMCEK = consultaCheckProductivo(string.Format(@"SELECT * FROM empleados WHERE vobo_tmc = 1"));

                                    if (empleadosVoboTMCEK != null)
                                    {
                                        var empleadosVoboTMC = (List<dynamic>)empleadosVoboTMCEK.ToObject<List<dynamic>>();

                                        foreach (var emp in empleadosVoboTMC)
                                        {
                                            vobos.Add(new VoboDTO
                                            {
                                                usu_numero = (int)emp.empleado,
                                                usu_nombre = (string)emp.descripcion,
                                                numVobos = 1, //Las compras de TMC siempre llevan 1.
                                                consecutivo = 0
                                            });
                                        }
                                    }
                                    #endregion
                                }

                                #region Compra Traspaso de Almacén
                                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                                {
                                    if (compraEK1.proveedor == 5412) //Verificar que la compra tenga proveedor de Construplan
                                    {
                                        var listaPartidasEK = _contextEnkontrol.Select<OrdenCompraDetDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                        {
                                            consulta = @"SELECT * FROM so_orden_compra_det WHERE cc = ? AND numero = ?",
                                            parametros = new List<OdbcParameterDTO> {
                                    new OdbcParameterDTO() { nombre = "cc", tipo = OdbcType.VarChar, valor = compraEK1.cc },
                                    new OdbcParameterDTO() { nombre = "numero", tipo = OdbcType.Numeric, valor = compraEK1.numero }
                                }
                                        });

                                        if (listaPartidasEK.Count() > 0)
                                        {
                                            if (listaPartidasEK.FirstOrDefault(x => x.partida == 1).area == 1 && listaPartidasEK.FirstOrDefault(x => x.partida == 1).cuenta == 9) //Verificar que la compra tenga el área-cuenta "1-9" en la primer partida
                                            {
                                                return new List<VoboDTO>();
                                            }
                                        }
                                    }
                                }
                                #endregion

                                foreach (var item in vobos)
                                {
                                    var objVobo = getUsuarioEnKontrol(compra.vobo)[0].descripcion.Value;
                                    if (objVobo != null && objVobo != "DEFAULT")
                                        item.color = "green";
                                    else
                                        item.color = "red";
                                }

                                return vobos;
                            }
                            else
                            {
                                return new List<VoboDTO>();
                            }
                        }
                        else
                        {
                            return new List<VoboDTO>();
                        }
                        #endregion
                    }
                    else
                    {
                        //if (compra.cc.Length == 6)
                        //{
                        //    tblP_CC objCC = _context.tblP_CC.Where(w => w.cc == compra.cc && w.estatus).FirstOrDefault();
                        //    if (objCC != null)
                        //        compra.cc = objCC.ccRH;
                        //}

                        if (vSesiones.sesionEmpresaActual == 1 || vSesiones.sesionEmpresaActual == 4 || vSesiones.sesionEmpresaActual == (int)EmpresaEnum.GCPLAN)
                        {
                            if (compraEK == null)
                            {
                                compraEK = consultaCheckProductivo(
                                string.Format(@"SELECT 
                                            oc.* 
                                        FROM so_orden_compra oc 
                                        WHERE oc.cc = '{0}' AND oc.numero = {1}", compra.cc, compra.numero)
                            );
                            }
                        }
                        else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                        {
                            //string strQuery = string.Format(@"SELECT * FROM tblCom_OrdenCompra WHERE cc = '{0}' AND numero = {1} AND estatusRegistro = {2} AND PERU_tipoCompra = {3}", compra.cc, compra.numero, 1, compra.PERU_tipoCompra);
                            //compraEK = _context.Select<OrdenCompraDTO>(new DapperDTO
                            //{
                            //    baseDatos = MainContextEnum.PERU,
                            //    consulta = strQuery,
                            //    parametros = new { cc = compra.cc, numero = compra.numero, estatusRegistro = true }
                            //}).FirstOrDefault();

                            compraEK = _context.tblCom_OrdenCompra.Where(x => x.cc == compra.cc && x.numero == compra.numero && x.estatusRegistro && x.PERU_tipoCompra == compra.PERU_tipoCompra).ToList().Select(x => new OrdenCompraDTO
                            {
                                autoriza_activos = 0,
                                tmc = 0,
                                cc = x.cc,
                                id = x.id,
                                numero = x.numero,
                                moneda = Convert.ToInt32(x.moneda),
                                total = x.total,
                                tipo_cambio = x.tipo_cambio,
                                area = 0,
                                cuenta = 0
                            }).FirstOrDefault();

                            OrdenCompraDTO compraEnkontrol = compraEK;

                            var listaCompraDetalle = _context.tblCom_OrdenCompraDet.Where(y => y.cc == compra.cc && y.numero == compra.numero && y.estatusRegistro && y.idOrdenCompra == compraEnkontrol.id).ToList();

                            using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                            {
                                var listaInsumosStarsoft = _starsoft.MAEART.ToList();

                                foreach (var det in listaCompraDetalle)
                                {
                                    var registroInsumoStarsoft = listaInsumosStarsoft.FirstOrDefault(x => x.ACODIGO == ("0" + det.insumo));

                                    if (registroInsumoStarsoft != null)
                                    {
                                        if (registroInsumoStarsoft.ATIPO == "10")
                                        {
                                            compraEK.autoriza_activos = 1;
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (compraEK == null)
                            {
                                compraEK = consultaCheckProductivo(
                                string.Format(@"SELECT 
                                            oc.*, 
                                            (SELECT TOP 1 det.area FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS area, 
                                            (SELECT TOP 1 det.cuenta FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS cuenta 
                                        FROM so_orden_compra oc 
                                        WHERE oc.cc = '{0}' AND oc.numero = {1}", compra.cc, compra.numero)
                            );
                            }
                        }

                        if (compraEK != null)
                        {
                            OrdenCompraDTO compraEnkontrol = new OrdenCompraDTO();

                            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                                compraEnkontrol = compraEK;
                            else
                                compraEnkontrol = ((List<OrdenCompraDTO>)compraEK.ToObject<List<OrdenCompraDTO>>())[0];

                            List<VoboDTO> vobos = new List<VoboDTO>();

                            if (compraEnkontrol.autoriza_activos == 0 && compraEnkontrol.tmc == 0)
                            {
                                #region VoBos por Centro de Costo, monto y Tipo-Grupo
                                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                                    compraEnkontrol.cc = Get_CCRH(compraEnkontrol.cc);

                                List<dynamic> partidas = new List<dynamic>();

                                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                                {
                                    //partidas = _context.Select<dynamic>(new DapperDTO
                                    //{
                                    //    baseDatos = MainContextEnum.PERU,
                                    //    consulta = @"SELECT * FROM tblCom_OrdenCompraDet WHERE idOrdenCompra = @idOrdenCompra AND estatusRegistro = @estatusRegistro ",
                                    //    parametros = new { idOrdenCompra = compraEnkontrol.id, estatusRegistro = true }
                                    //}).ToList();
                                    partidas = _context.tblCom_OrdenCompraDet.Where(x => x.idOrdenCompra == compraEnkontrol.id && x.estatusRegistro).Select(x => new
                                    {
                                        insumo = x.insumo
                                    }).ToList<dynamic>();
                                }
                                else
                                {
                                    partidas = (List<dynamic>)consultaCheckProductivo(
                                        string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", compraEnkontrol.cc, compraEnkontrol.numero)
                                    ).ToObject<List<dynamic>>();
                                }

                                var listTipoGrupo = partidas.Select(x => Int32.Parse(((int)x.insumo).ToString().Substring(0, 3))).ToList();
                                var stringListTipoGrupo = string.Join(", ", listTipoGrupo);
                                var total = compraEnkontrol.moneda == 2 ? (compraEnkontrol.total * compraEnkontrol.tipo_cambio) : compraEnkontrol.total;
                                dynamic facultamientosEK = null;

                                #region ES OC INTERNA
                                if (compra.esOC_Interna)
                                {
                                    compraEnkontrol.cc = !string.IsNullOrEmpty(compra.cc) ? compra.cc.ToUpper() : string.Empty;
                                }
                                #endregion

                                if (vSesiones.sesionEmpresaActual == 1 || vSesiones.sesionEmpresaActual == 4 || vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru || vSesiones.sesionEmpresaActual == (int)EmpresaEnum.GCPLAN)
                                {
                                    if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                                    {
                                        #region Familias Starsoft-Enkontrol
                                        var stringCondicionFamilia = "";
                                        var listTipoGrupoString = partidas.Select(x => ((int)x.insumo).ToString().Substring(1, 4)).ToList(); //Se empieza en la segunda posición ya que el número de insumo viene como entero.
                                        var listaFamiliasStarsoftEnkontrol = _context.tblCom_FamiliaStarsoftEnkontrol.Where(x => x.registroActivo && listTipoGrupoString.Contains(x.codigo_starsoft)).ToList();

                                        if (listaFamiliasStarsoftEnkontrol.Count() > 0)
                                        {
                                            stringCondicionFamilia = string.Format(@" AND tblGrupos.tipo IN ({0})", string.Join(", ", listaFamiliasStarsoftEnkontrol.Select(x => x.codigo_enkontrol).ToList()));
                                        }
                                        #endregion

                                        facultamientosEK = consultaCheckProductivo(string.Format(@"
                                            SELECT 
                                                tblPrincipal.cc, 
                                                tblPrincipal.num_autorizacioines AS tblPrincipalNumAutorizaciones, 
                                                tblPrincipal.monto_minimo_autoriza, 
                                                tblPrincipal.monto_maximo_autoriza, 
                                                tblPrincipal.consecutivo, 
                                                    
                                                tblVobo.empleado AS empleadoVobo, 
                                                empVobo.descripcion AS empleadoVoboDesc, 
                                                tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                    
                                                tblGrupos.tipo AS tipoGrupo, 
                                                tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                    
                                                tblAut.empleado AS empleadoAutoriza, 
                                                tblAut.num_autorizaciones AS tblAutNumAutorizaciones, 
                                                tblAut.orden AS ordenAutorizacion 
                                            FROM so_cc_autorizacion tblPrincipal 
                                                LEFT JOIN so_empleados_cc tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                                LEFT JOIN so_rel_tipos_vobo tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                                LEFT JOIN so_empleados_autoriza_cc tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                                LEFT JOIN empleados empVobo ON tblVobo.empleado = empVobo.empleado 
                                            WHERE 
                                                tblPrincipal.cc = '{0}' AND 
                                                tblPrincipal.monto_minimo_autoriza <= {1} AND 
                                                tblPrincipal.monto_maximo_autoriza >= {1} {2} 
                                            ORDER BY tblPrincipal.consecutivo
                                        ", compraEnkontrol.cc.ToUpper(), total, stringCondicionFamilia)
                                    );
                                    }
                                    else
                                    {
                                        facultamientosEK = consultaCheckProductivo(
                                        string.Format(@"SELECT 
                                                    tblPrincipal.cc, 
                                                    tblPrincipal.num_autorizacioines AS tblPrincipalNumAutorizaciones, 
                                                    tblPrincipal.monto_minimo_autoriza, 
                                                    tblPrincipal.monto_maximo_autoriza, 
                                                    tblPrincipal.consecutivo, 
                                                    
                                                    tblVobo.empleado AS empleadoVobo, 
                                                    empVobo.descripcion AS empleadoVoboDesc, 
                                                    tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                    
                                                    tblGrupos.tipo AS tipoGrupo, 
                                                    tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                    
                                                    tblAut.empleado AS empleadoAutoriza, 
                                                    tblAut.num_autorizaciones AS tblAutNumAutorizaciones, 
                                                    tblAut.orden AS ordenAutorizacion 
                                                FROM so_cc_autorizacion tblPrincipal 
                                                    LEFT JOIN so_empleados_cc tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                                    LEFT JOIN so_rel_tipos_vobo tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                                    LEFT JOIN so_empleados_autoriza_cc tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                                    LEFT JOIN empleados empVobo ON tblVobo.empleado = empVobo.empleado 
                                                WHERE 
                                                    tblPrincipal.cc = '{0}' AND 
                                                    tblPrincipal.monto_minimo_autoriza <= {1} AND 
                                                    tblPrincipal.monto_maximo_autoriza >= {1} AND 
                                                    tblGrupos.tipo IN ({2}) 
                                                ORDER BY tblPrincipal.consecutivo", compraEnkontrol.cc.ToUpper(), total, stringListTipoGrupo)
                                    );
                                    }
                                }
                                else
                                {
                                    if (compra.esOC_Interna)
                                    {
                                        #region LA OC ES INTERNA, POR LO QUE SE PASA SU AREA CUENTA
                                        if (compra.area <= 0 || compra.cuenta <= 0)
                                        {
                                            if (string.IsNullOrEmpty(compra.cc)) { throw new Exception("Ocurrió un error al obtener la información."); }
                                            if (compra.numero <= 0) { throw new Exception("Ocurrió un error al obtener la información."); }

                                            tblCom_OrdenCompraDet_Interna objCompra_Interna = _context.tblCom_OrdenCompraDet_Interna.Where(w => w.cc == compra.cc && w.numero == compra.numero).FirstOrDefault();
                                            if (objCompra_Interna == null)
                                                throw new Exception("Ocurrió un error al obtener la información.");

                                            compra.area = objCompra_Interna.area;
                                            compra.cuenta = objCompra_Interna.cuenta;
                                        }

                                        compraEnkontrol.area = compra.area;
                                        compraEnkontrol.cuenta = compra.cuenta;
                                        #endregion
                                    }

                                    facultamientosEK = consultaCheckProductivo(
                                        string.Format(@"SELECT 
                                                    tblPrincipal.area, 
                                                    tblPrincipal.cuenta, 
                                                    tblPrincipal.num_autorizaciones AS tblPrincipalNumAutorizaciones, 
                                                    tblPrincipal.monto_minimo_autoriza, 
                                                    tblPrincipal.monto_maximo_autoriza, 
                                                    tblPrincipal.consecutivo, 
                                                    
                                                    tblVobo.empleado AS empleadoVobo, 
                                                    empVobo.descripcion AS empleadoVoboDesc, 
                                                    tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                    
                                                    tblGrupos.tipo AS tipoGrupo, 
                                                    tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                    
                                                    tblAut.empleado AS empleadoAutoriza, 
                                                    tblAut.num_autorizaciones AS tblAutNumAutorizaciones 
                                                FROM so_area_cta_autorizacion tblPrincipal 
                                                    LEFT JOIN so_empleados_area_cta tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                                    LEFT JOIN so_rel_tipos_vobo_area_cta tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                                    LEFT JOIN so_empleados_autoriza_area_cta tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                                    LEFT JOIN empleados empVobo ON tblVobo.empleado = empVobo.empleado 
                                                WHERE 
                                                    tblPrincipal.area = {0} AND tblPrincipal.cuenta = {1} AND 
                                                    tblPrincipal.monto_minimo_autoriza <= {2} AND 
                                                    tblPrincipal.monto_maximo_autoriza >= {2} AND 
                                                    tblGrupos.tipo IN ({3}) 
                                                ORDER BY tblPrincipal.consecutivo", compraEnkontrol.area, compraEnkontrol.cuenta, total, stringListTipoGrupo)
                                    );
                                }

                                if (facultamientosEK != null)
                                {
                                    var facultamientos = (List<PermisoMontoDTO>)facultamientosEK.ToObject<List<PermisoMontoDTO>>();

                                    foreach (var fac in facultamientos)
                                    {
                                        if (fac.empleadoVobo != null && fac.empleadoVobo > 0 && !vobos.Any(x => x.usu_numero == (int)fac.empleadoVobo))
                                        {
                                            vobos.Add(new VoboDTO
                                            {
                                                usu_numero = fac.empleadoVobo != null ? (int)fac.empleadoVobo : 0,
                                                usu_nombre = fac.empleadoVobo != null ? fac.empleadoVoboDesc : "",
                                                numVobos = fac.tblVoboNumAutorizaciones != null ? (int)fac.tblVoboNumAutorizaciones : 0,
                                                consecutivo = 0
                                            });
                                        }
                                    }
                                }
                                #endregion
                            }

                            if (compraEnkontrol.autoriza_activos == 1 && compraEnkontrol.tmc == 0)
                            {
                                #region VoBos por Activo Fijo
                                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                                    compraEnkontrol.cc = Get_CCRH(compraEnkontrol.cc);

                                var empleadosVoboEK = consultaCheckProductivo(
                                    string.Format(@"SELECT 
                                                v.*,
                                                emp.descripcion AS empleadoDesc 
                                            FROM so_cc_vobo v 
                                                INNER JOIN empleados emp ON v.empleado = emp.empleado 
                                            WHERE cc = '{0}'", compraEnkontrol.cc)
                                );

                                if (empleadosVoboEK != null)
                                {
                                    var empleadosVobo = (List<dynamic>)empleadosVoboEK.ToObject<List<dynamic>>();

                                    foreach (var emp in empleadosVobo)
                                    {
                                        vobos.Add(new VoboDTO
                                        {
                                            usu_numero = (int)emp.empleado,
                                            usu_nombre = (string)emp.empleadoDesc,
                                            numVobos = 2, //Las compras de Activo Fijo siempre llevan 2.
                                            consecutivo = 0
                                        });
                                    }
                                }
                                #endregion
                            }

                            if (compraEnkontrol.autoriza_activos == 0 && compraEnkontrol.tmc == 1)
                            {
                                #region VoBos por TMC
                                var empleadosVoboTMCEK = consultaCheckProductivo(string.Format(@"SELECT * FROM empleados WHERE vobo_tmc = 1"));

                                if (empleadosVoboTMCEK != null)
                                {
                                    var empleadosVoboTMC = (List<dynamic>)empleadosVoboTMCEK.ToObject<List<dynamic>>();

                                    foreach (var emp in empleadosVoboTMC)
                                    {
                                        vobos.Add(new VoboDTO
                                        {
                                            usu_numero = (int)emp.empleado,
                                            usu_nombre = (string)emp.descripcion,
                                            numVobos = 1, //Las compras de TMC siempre llevan 1.
                                            consecutivo = 0
                                        });
                                    }
                                }
                                #endregion
                            }

                            #region Compra Traspaso de Almacén
                            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                            {
                                if (compraEnkontrol.proveedor == 5412) //Verificar que la compra tenga proveedor de Construplan
                                {
                                    var listaPartidasEK = _contextEnkontrol.Select<OrdenCompraDetDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                    {
                                        consulta = @"SELECT * FROM so_orden_compra_det WHERE cc = ? AND numero = ?",
                                        parametros = new List<OdbcParameterDTO> {
                                    new OdbcParameterDTO() { nombre = "cc", tipo = OdbcType.VarChar, valor = compraEnkontrol.cc },
                                    new OdbcParameterDTO() { nombre = "numero", tipo = OdbcType.Numeric, valor = compraEnkontrol.numero }
                                }
                                    });

                                    if (listaPartidasEK.Count() > 0)
                                    {
                                        if (listaPartidasEK.FirstOrDefault(x => x.partida == 1).area == 1 && listaPartidasEK.FirstOrDefault(x => x.partida == 1).cuenta == 9) //Verificar que la compra tenga el área-cuenta "1-9" en la primer partida
                                        {
                                            return new List<VoboDTO>();
                                        }
                                    }
                                }
                            }
                            #endregion

                            foreach (var item in vobos)
                            {
                                if (compra.vobo == item.usu_numero || compra.vobo2 == item.usu_numero || compra.vobo3 == item.usu_numero)
                                {
                                    item.color = "green";
                                }
                                else
                                {
                                    item.color = "red";
                                }

                                //var objVobo = getUsuarioEnKontrol(compra.vobo)[0].descripcion.Value;
                                //if (objVobo != null && objVobo != "DEFAULT")
                                //    item.color = "green";
                                //else
                                //    item.color = "red";
                            }

                            return vobos;
                        }
                        else
                        {
                            return new List<VoboDTO>();
                        }
                    }
                    #endregion
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public List<Tuple<int, List<VoboDTO>>> getAutorizaciones(List<OrdenCompraDTO> compras, int empresa, bool esInterna)
        {
            List<Tuple<int, List<VoboDTO>>> resultado = new List<Tuple<int, List<VoboDTO>>>();
            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
            {
                #region COLOMBIA LISTO
                try
                {
                    dynamic compraEK = null;
                    List<OrdenCompraDTO> comprasEK1 = new List<OrdenCompraDTO>();
                    List<MAEART> listaInsumosStarsoft = new List<MAEART>();

                    if (esInterna)
                    {
                        string consulta = "SELECT * FROM DBA.tblCom_OrdenCompra_Interna WHERE ";
                        foreach (var compra in compras)
                        {
                            consulta += String.Format(@"(cc = '{0}' AND numero = {1}) OR ", compra.cc, compra.numero);
                            if (compras.IndexOf(compra) < (compras.Count() - 1)) consulta += " OR ";
                        }

                        comprasEK1 = _context.Select<OrdenCompraDTO>(new DapperDTO
                        {
                            baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                            consulta = consulta
                        }).ToList();
                    }
                    else
                    {

                        if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                        {
                        }
                        else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                        {
                        }
                        else
                        {
                            string consulta = "";
                            foreach (var compra in compras)
                            {
                                consulta += string.Format(@"SELECT oc.*
                                                                FROM so_orden_compra oc 
                                                                    WHERE oc.cc = '{0}' AND oc.numero = {1}", compra.cc, compra.numero);

                                if (compras.IndexOf(compra) < (compras.Count() - 1)) consulta += " UNION ";
                            }

                            comprasEK1 = _context.Select<OrdenCompraDTO>(new DapperDTO
                            {
                                baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                                consulta = consulta
                            }).ToList();
                        }
                    }

                    List<int> listTipoGrupo = new List<int>();
                    var comprasEK1IDs = comprasEK1.Select(x => x.id).ToList();

                    if (esInterna)
                        listTipoGrupo = _context.tblCom_OrdenCompraDet_Interna.Where(x => comprasEK1IDs.Contains(x.idOrdenCompra)).ToList().Select(x => Int32.Parse(((int)x.insumo).ToString().Substring(0, 3))).Distinct().ToList();
                    else
                        listTipoGrupo = _context.tblCom_OrdenCompraDet.Where(x => comprasEK1IDs.Contains(x.idOrdenCompra)).ToList().Select(x => Int32.Parse(((int)x.insumo).ToString().Substring(0, 3))).Distinct().ToList();

                    List<PermisoMontoDTO> lstFacultamientosEK = new List<PermisoMontoDTO>();

                    if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                    {
                    }
                    else
                    {
                        var ccs = compras.Select(x => x.cc).Distinct().ToList();
                        if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                        {
                            for (int i = 0; i < ccs.Count(); i++) { ccs[i] = Get_CCRH(ccs[i]); }
                        }
                        var montoMaximo = compras.Max(x => x.total);
                        var montoMinimo = compras.Min(x => x.total);
                        var stringCC = "'" + string.Join("', '", ccs) + "'";

                        var stringListTipoGrupo = string.Join(", ", listTipoGrupo);

                        lstFacultamientosEK = _context.Select<PermisoMontoDTO>(new DapperDTO
                        {
                            baseDatos = MainContextEnum.Colombia,
                            consulta = @"SELECT 
                                                tblPrincipal.cc, 
                                                tblPrincipal.num_autorizacioines AS tblPrincipalNumAutorizaciones, 
                                                tblPrincipal.monto_minimo_autoriza, 
                                                tblPrincipal.monto_maximo_autoriza, 
                                                tblPrincipal.consecutivo, 
                                                    
                                                tblVobo.empleado AS empleadoVobo, 
                                                empVobo.descripcion AS empleadoVoboDesc, 
                                                tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                    
                                                tblGrupos.tipo AS tipoGrupo, 
                                                tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                    
                                                tblAut.empleado AS empleadoAutoriza, 
                                                tblAut.num_autorizaciones AS tblAutNumAutorizaciones, 
                                                tblAut.orden AS ordenAutorizacion 
                                            FROM so_cc_autorizacion tblPrincipal 
                                                LEFT JOIN so_empleados_cc tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                                LEFT JOIN so_rel_tipos_vobo tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                                LEFT JOIN so_empleados_autoriza_cc tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                                LEFT JOIN empleadosFacultamientos empVobo ON tblVobo.empleado = empVobo.empleado 
                                            WHERE 
                                                tblPrincipal.cc in (@cc) AND 
                                                tblPrincipal.monto_minimo_autoriza <= @montoMaximo AND 
                                                tblPrincipal.monto_maximo_autoriza >= @montoMinimo AND 
                                                tblGrupos.tipo IN (@lstGrupos) 
                                            ORDER BY tblPrincipal.consecutivo",
                            parametros = new { cc = stringCC, montoMaximo = montoMaximo, montoMinimo = montoMinimo, lstGrupos = stringListTipoGrupo }
                        }).ToList();

                        //                        var _facultamientos = consultaCheckProductivo(
                        //                            string.Format(@"SELECT 
                        //                                            tblPrincipal.cc, 
                        //                                            tblPrincipal.num_autorizacioines AS tblPrincipalNumAutorizaciones, 
                        //                                            tblPrincipal.monto_minimo_autoriza, 
                        //                                            tblPrincipal.monto_maximo_autoriza, 
                        //                                            tblPrincipal.consecutivo, 
                        //                                                    
                        //                                            tblVobo.empleado AS empleadoVobo, 
                        //                                            empVobo.descripcion AS empleadoVoboDesc, 
                        //                                            tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                        //                                                    
                        //                                            tblGrupos.tipo AS tipoGrupo, 
                        //                                            tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                        //                                                    
                        //                                            tblAut.empleado AS empleadoAutoriza, 
                        //                                            tblAut.num_autorizaciones AS tblAutNumAutorizaciones, 
                        //                                            tblAut.orden AS ordenAutorizacion 
                        //                                        FROM so_cc_autorizacion tblPrincipal 
                        //                                            LEFT JOIN so_empleados_cc tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                        //                                            LEFT JOIN so_rel_tipos_vobo tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                        //                                            LEFT JOIN so_empleados_autoriza_cc tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                        //                                            LEFT JOIN empleados empVobo ON tblVobo.empleado = empVobo.empleado 
                        //                                        WHERE 
                        //                                            tblPrincipal.cc in ({0}) AND 
                        //                                            tblPrincipal.monto_minimo_autoriza <= {1} AND 
                        //                                            tblPrincipal.monto_maximo_autoriza >= {2} AND 
                        //                                            tblGrupos.tipo IN ({3}) 
                        //                                        ORDER BY tblPrincipal.consecutivo", stringCC, montoMaximo, montoMinimo, stringListTipoGrupo)
                        //                        );

                        //lstFacultamientosEK = _facultamientos.ToObject<List<PermisoMontoDTO>>();
                    }

                    if (esInterna)
                    {
                        #region OC INTERNA


                        foreach (var compra in compras)
                        {
                            var compraEK1 = comprasEK1.FirstOrDefault(x => x.cc == compra.cc && x.numero == compra.numero);
                            if (compraEK1 != null)
                            {
                                var ocInternaDet = _context.tblCom_OrdenCompraDet_Interna.Where(x => x.cc == compra.cc && x.numero == compra.numero).ToList();
                                if (ocInternaDet.Count > 0)
                                {
                                    compraEK1.area = ocInternaDet[0].area;
                                    compraEK1.cuenta = ocInternaDet[0].cuenta;

                                    List<dynamic> listAutoriza = new List<dynamic>();

                                    //
                                    List<VoboDTO> vobos = new List<VoboDTO>();

                                    if (compraEK1.autoriza_activos == 0 && compraEK1.tmc == 0)
                                    {
                                        #region VoBos por Centro de Costo, monto y Tipo-Grupo
                                        //var partidas = (List<dynamic>)consultaCheckProductivo(
                                        //    string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", compraEK1.cc, compraEK1.numero)
                                        //).ToObject<List<dynamic>>();
                                        //var listTipoGrupo = ocInternaDet.Select(x => Int32.Parse(((int)x.insumo).ToString().Substring(0, 3))).ToList();
                                        var stringListTipoGrupo = string.Join(", ", listTipoGrupo);
                                        var total = compraEK1.moneda == 2 ? (compraEK1.total * compraEK1.tipo_cambio) : compraEK1.total;
                                        List<PermisoMontoDTO> facultamientosEK = new List<PermisoMontoDTO>();

                                        #region ES OC INTERNA
                                        if (compra.esOC_Interna)
                                        {
                                            compraEK1.cc = !string.IsNullOrEmpty(compra.cc) ? compra.cc.ToUpper() : string.Empty;
                                        }
                                        #endregion

                                        if (vSesiones.sesionEmpresaActual == 1 || vSesiones.sesionEmpresaActual == 4)
                                        {
                                            facultamientosEK = lstFacultamientosEK.Where(x => x.cc == compra.cc && x.monto_minimo_autoriza <= total && x.monto_maximo_autoriza >= total && listTipoGrupo.Contains(x.tipoGrupo ?? 0)).ToList();
                                            //                                        facultamientosEK = consultaCheckProductivo(
                                            //                                            string.Format(@"SELECT 
                                            //                                                    tblPrincipal.cc, 
                                            //                                                    tblPrincipal.num_autorizacioines AS tblPrincipalNumAutorizaciones, 
                                            //                                                    tblPrincipal.monto_minimo_autoriza, 
                                            //                                                    tblPrincipal.monto_maximo_autoriza, 
                                            //                                                    tblPrincipal.consecutivo, 
                                            //                                                    
                                            //                                                    tblVobo.empleado AS empleadoVobo, 
                                            //                                                    empVobo.descripcion AS empleadoVoboDesc, 
                                            //                                                    tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                            //                                                    
                                            //                                                    tblGrupos.tipo AS tipoGrupo, 
                                            //                                                    tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                            //                                                    
                                            //                                                    tblAut.empleado AS empleadoAutoriza, 
                                            //                                                    tblAut.num_autorizaciones AS tblAutNumAutorizaciones, 
                                            //                                                    tblAut.orden AS ordenAutorizacion 
                                            //                                                FROM so_cc_autorizacion tblPrincipal 
                                            //                                                    LEFT JOIN so_empleados_cc tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                            //                                                    LEFT JOIN so_rel_tipos_vobo tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                            //                                                    LEFT JOIN so_empleados_autoriza_cc tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                            //                                                    LEFT JOIN empleados empVobo ON tblVobo.empleado = empVobo.empleado 
                                            //                                                WHERE 
                                            //                                                    tblPrincipal.cc = '{0}' AND 
                                            //                                                    tblPrincipal.monto_minimo_autoriza <= {1} AND 
                                            //                                                    tblPrincipal.monto_maximo_autoriza >= {1} AND 
                                            //                                                    tblGrupos.tipo IN ({2}) 
                                            //                                                ORDER BY tblPrincipal.consecutivo", compraEK1.cc.ToUpper(), total, stringListTipoGrupo)
                                            //                                        );
                                        }
                                        else
                                        {
                                            if (compra.esOC_Interna)
                                            {
                                                #region LA OC ES INTERNA, POR LO QUE SE PASA SU AREA CUENTA
                                                if (compra.area <= 0 || compra.cuenta <= 0)
                                                {
                                                    if (string.IsNullOrEmpty(compra.cc)) { throw new Exception("Ocurrió un error al obtener la información."); }
                                                    if (compra.numero <= 0) { throw new Exception("Ocurrió un error al obtener la información."); }

                                                    tblCom_OrdenCompraDet_Interna objCompra_Interna = _context.tblCom_OrdenCompraDet_Interna.Where(w => w.cc == compra.cc && w.numero == compra.numero).FirstOrDefault();
                                                    if (objCompra_Interna == null)
                                                        throw new Exception("Ocurrió un error al obtener la información.");

                                                    compra.area = objCompra_Interna.area;
                                                    compra.cuenta = objCompra_Interna.cuenta;
                                                }

                                                compraEK1.area = compra.area;
                                                compraEK1.cuenta = compra.cuenta;
                                                #endregion
                                            }
                                            facultamientosEK = lstFacultamientosEK.Where(x => x.area == compra.area && x.cuenta == compra.cuenta && x.monto_minimo_autoriza <= total && x.monto_maximo_autoriza >= total && listTipoGrupo.Contains(x.tipoGrupo ?? 0)).ToList();
                                            //                                        facultamientosEK = consultaCheckProductivo(
                                            //                                            string.Format(@"SELECT 
                                            //                                                    tblPrincipal.area, 
                                            //                                                    tblPrincipal.cuenta, 
                                            //                                                    tblPrincipal.num_autorizaciones AS tblPrincipalNumAutorizaciones, 
                                            //                                                    tblPrincipal.monto_minimo_autoriza, 
                                            //                                                    tblPrincipal.monto_maximo_autoriza, 
                                            //                                                    tblPrincipal.consecutivo, 
                                            //                                                    
                                            //                                                    tblVobo.empleado AS empleadoVobo, 
                                            //                                                    empVobo.descripcion AS empleadoVoboDesc, 
                                            //                                                    tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                            //                                                    
                                            //                                                    tblGrupos.tipo AS tipoGrupo, 
                                            //                                                    tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                            //                                                    
                                            //                                                    tblAut.empleado AS empleadoAutoriza, 
                                            //                                                    tblAut.num_autorizaciones AS tblAutNumAutorizaciones 
                                            //                                                FROM so_area_cta_autorizacion tblPrincipal 
                                            //                                                    LEFT JOIN so_empleados_area_cta tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                            //                                                    LEFT JOIN so_rel_tipos_vobo_area_cta tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                            //                                                    LEFT JOIN so_empleados_autoriza_area_cta tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                            //                                                    LEFT JOIN empleados empVobo ON tblVobo.empleado = empVobo.empleado 
                                            //                                                WHERE 
                                            //                                                    tblPrincipal.area = {0} AND tblPrincipal.cuenta = {1} AND 
                                            //                                                    tblPrincipal.monto_minimo_autoriza <= {2} AND 
                                            //                                                    tblPrincipal.monto_maximo_autoriza >= {2} AND 
                                            //                                                    tblGrupos.tipo IN ({3}) 
                                            //                                                ORDER BY tblPrincipal.consecutivo", compraEK1.area, compraEK1.cuenta, total, stringListTipoGrupo)
                                            //                                        );
                                        }

                                        //if (facultamientosEK != null)
                                        if (facultamientosEK.Count() > 0)
                                        {
                                            var facultamientos = facultamientosEK;

                                            foreach (var fac in facultamientos)
                                            {
                                                if (fac.empleadoVobo != null && fac.empleadoVobo > 0 && !vobos.Any(x => x.usu_numero == (int)fac.empleadoVobo))
                                                {
                                                    vobos.Add(new VoboDTO
                                                    {
                                                        usu_numero = fac.empleadoVobo != null ? (int)fac.empleadoVobo : 0,
                                                        usu_nombre = fac.empleadoVobo != null ? fac.empleadoVoboDesc : "",
                                                        numVobos = fac.tblVoboNumAutorizaciones != null ? (int)fac.tblVoboNumAutorizaciones : 0,
                                                        consecutivo = 0
                                                    });
                                                }
                                            }
                                        }
                                        #endregion
                                    }

                                    if (compraEK1.autoriza_activos == 1 && compraEK1.tmc == 0)
                                    {
                                        #region VoBos por Activo Fijo
                                        var empleadosVoboEK = consultaCheckProductivo(
                                            string.Format(@"SELECT 
                                                v.*,
                                                emp.descripcion AS empleadoDesc 
                                            FROM so_cc_vobo v 
                                                INNER JOIN empleados emp ON v.empleado = emp.empleado 
                                            WHERE cc = '{0}'", compraEK1.cc)
                                        );

                                        if (empleadosVoboEK != null)
                                        {
                                            var empleadosVobo = (List<dynamic>)empleadosVoboEK.ToObject<List<dynamic>>();

                                            foreach (var emp in empleadosVobo)
                                            {
                                                vobos.Add(new VoboDTO
                                                {
                                                    usu_numero = (int)emp.empleado,
                                                    usu_nombre = (string)emp.empleadoDesc,
                                                    numVobos = 2, //Las compras de Activo Fijo siempre llevan 2.
                                                    consecutivo = 0
                                                });
                                            }
                                        }
                                        #endregion
                                    }

                                    if (compraEK1.autoriza_activos == 0 && compraEK1.tmc == 1)
                                    {
                                        #region VoBos por TMC
                                        var empleadosVoboTMCEK = consultaCheckProductivo(string.Format(@"SELECT * FROM empleados WHERE vobo_tmc = 1"));

                                        if (empleadosVoboTMCEK != null)
                                        {
                                            var empleadosVoboTMC = (List<dynamic>)empleadosVoboTMCEK.ToObject<List<dynamic>>();

                                            foreach (var emp in empleadosVoboTMC)
                                            {
                                                vobos.Add(new VoboDTO
                                                {
                                                    usu_numero = (int)emp.empleado,
                                                    usu_nombre = (string)emp.descripcion,
                                                    numVobos = 1, //Las compras de TMC siempre llevan 1.
                                                    consecutivo = 0
                                                });
                                            }
                                        }
                                        #endregion
                                    }

                                    #region Compra Traspaso de Almacén
                                    if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                                    {
                                        if (compraEK1.proveedor == 5412) //Verificar que la compra tenga proveedor de Construplan
                                        {
                                            var listaPartidasEK = _contextEnkontrol.Select<OrdenCompraDetDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                            {
                                                consulta = @"SELECT * FROM so_orden_compra_det WHERE cc = ? AND numero = ?",
                                                parametros = new List<OdbcParameterDTO> {
                                    new OdbcParameterDTO() { nombre = "cc", tipo = OdbcType.VarChar, valor = compraEK1.cc },
                                    new OdbcParameterDTO() { nombre = "numero", tipo = OdbcType.Numeric, valor = compraEK1.numero }
                                }
                                            });

                                            if (listaPartidasEK.Count() > 0)
                                            {
                                                if (listaPartidasEK.FirstOrDefault(x => x.partida == 1).area == 1 && listaPartidasEK.FirstOrDefault(x => x.partida == 1).cuenta == 9) //Verificar que la compra tenga el área-cuenta "1-9" en la primer partida
                                                {
                                                    vobos = new List<VoboDTO>();
                                                    //return new List<VoboDTO>();
                                                }
                                            }
                                        }
                                    }
                                    #endregion

                                    foreach (var item in vobos)
                                    {
                                        var objVobo = getUsuarioEnKontrol(compra.vobo)[0].descripcion.Value;
                                        if (objVobo != null && objVobo != "DEFAULT")
                                            item.color = "green";
                                        else
                                            item.color = "red";
                                    }
                                    Tuple<int, List<VoboDTO>> _resultado = new Tuple<int, List<VoboDTO>>(compra.id, vobos);
                                    resultado.Add(_resultado);
                                    //return vobos;
                                }
                                else
                                {
                                    List<VoboDTO> vobos = new List<VoboDTO>();
                                    Tuple<int, List<VoboDTO>> _resultado = new Tuple<int, List<VoboDTO>>(compra.id, vobos);
                                    resultado.Add(_resultado);
                                    //return new List<VoboDTO>();
                                }
                            }
                            else
                            {
                                List<VoboDTO> vobos = new List<VoboDTO>();
                                Tuple<int, List<VoboDTO>> _resultado = new Tuple<int, List<VoboDTO>>(compra.id, vobos);
                                resultado.Add(_resultado);
                                //return new List<VoboDTO>();
                            }
                        }
                        #endregion
                    }
                    else
                    {
                        List<tblCom_OrdenCompraDet> listaComprasDetalle = new List<tblCom_OrdenCompraDet>();
                        listaComprasDetalle = _context.tblCom_OrdenCompraDet.Where(y => y.estatusRegistro && comprasEK1IDs.Contains(y.idOrdenCompra)).ToList();

                        foreach (var compra in compras)
                        {
                            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                            {
                            }
                            else
                            {
                                compraEK = comprasEK1.FirstOrDefault(x => x.cc == compra.cc && x.numero == compra.numero);
                            }

                            if (compraEK != null)
                            {
                                OrdenCompraDTO compraEnkontrol = new OrdenCompraDTO();

                                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                                    compraEnkontrol = compraEK;
                                else
                                    compraEnkontrol = ((List<OrdenCompraDTO>)compraEK.ToObject<List<OrdenCompraDTO>>())[0];

                                List<VoboDTO> vobos = new List<VoboDTO>();

                                if (compraEnkontrol.autoriza_activos == 0 && compraEnkontrol.tmc == 0)
                                {
                                    #region VoBos por Centro de Costo, monto y Tipo-Grupo
                                    if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                                        compraEnkontrol.cc = Get_CCRH(compraEnkontrol.cc);

                                    List<dynamic> partidas = new List<dynamic>();

                                    if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                                    {
                                    }
                                    else
                                    {
                                        partidas = (List<dynamic>)consultaCheckProductivo(
                                            string.Format(@"SELECT * FROM DBA.so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", compraEnkontrol.cc, compraEnkontrol.numero)
                                        ).ToObject<List<dynamic>>();
                                    }

                                    var stringListTipoGrupo = string.Join(", ", listTipoGrupo);
                                    var total = compraEnkontrol.moneda == 2 ? (compraEnkontrol.total * compraEnkontrol.tipo_cambio) : compraEnkontrol.total;
                                    dynamic facultamientosEK = null;

                                    #region ES OC INTERNA
                                    if (compra.esOC_Interna)
                                    {
                                        compraEnkontrol.cc = !string.IsNullOrEmpty(compra.cc) ? compra.cc.ToUpper() : string.Empty;
                                    }
                                    #endregion

                                    if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
                                        facultamientosEK = facultamientosEK = lstFacultamientosEK.Where(x => x.cc == compra.cc && x.monto_minimo_autoriza <= total && x.monto_maximo_autoriza >= total && listTipoGrupo.Contains(x.tipoGrupo ?? 0)).ToList();

                                    if (facultamientosEK != null)
                                    {
                                        var facultamientos = facultamientosEK;

                                        foreach (var fac in facultamientos)
                                        {
                                            if (fac.empleadoVobo != null && fac.empleadoVobo > 0 && !vobos.Any(x => x.usu_numero == (int)fac.empleadoVobo))
                                            {
                                                vobos.Add(new VoboDTO
                                                {
                                                    usu_numero = fac.empleadoVobo != null ? (int)fac.empleadoVobo : 0,
                                                    usu_nombre = fac.empleadoVobo != null ? fac.empleadoVoboDesc : "",
                                                    numVobos = fac.tblVoboNumAutorizaciones != null ? (int)fac.tblVoboNumAutorizaciones : 0,
                                                    consecutivo = 0
                                                });
                                            }
                                        }
                                    }
                                    #endregion
                                }

                                if (compraEnkontrol.autoriza_activos == 1 && compraEnkontrol.tmc == 0)
                                {
                                    #region Autorizaciones por Activo Fijo
                                    var empleadosAutorizaActivoFijoEK = consultaCheckProductivo(string.Format(@"SELECT * FROM DBA.empleados WHERE autoriza_activos_fijos = 1"));

                                    if (empleadosAutorizaActivoFijoEK != null)
                                    {
                                        var empleadosAutorizaActivoFijo = (List<dynamic>)empleadosAutorizaActivoFijoEK.ToObject<List<dynamic>>();

                                        foreach (var emp in empleadosAutorizaActivoFijo)
                                        {
                                            vobos.Add(new VoboDTO
                                            {
                                                usu_numero = (int)emp.empleado,
                                                usu_nombre = (string)emp.descripcion
                                            });
                                        }
                                    }
                                    #endregion
                                }

                                if (compraEnkontrol.autoriza_activos == 0 && compraEnkontrol.tmc == 1)
                                {
                                    #region Autorizaciones por TMC
                                    var empleadosAutorizaTMCEK = consultaCheckProductivo(string.Format(@"SELECT * FROM DBA.empleados WHERE autoriza_tmc = 1"));

                                    if (empleadosAutorizaTMCEK != null)
                                    {
                                        var empleadosAutorizaTMC = (List<dynamic>)empleadosAutorizaTMCEK.ToObject<List<dynamic>>();

                                        foreach (var emp in empleadosAutorizaTMC)
                                        {
                                            vobos.Add(new VoboDTO
                                            {
                                                usu_numero = (int)emp.empleado,
                                                usu_nombre = (string)emp.descripcion
                                            });
                                        }
                                    }
                                    #endregion
                                }

                                #region Compra Traspaso de Almacén
                                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                                {
                                    if (compraEnkontrol.proveedor == 5412) //Verificar que la compra tenga proveedor de Construplan
                                    {
                                        var listaPartidasEK = _contextEnkontrol.Select<OrdenCompraDetDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                        {
                                            consulta = @"SELECT * FROM DBA.so_orden_compra_det WHERE cc = ? AND numero = ?",
                                            parametros = new List<OdbcParameterDTO> {
                                    new OdbcParameterDTO() { nombre = "cc", tipo = OdbcType.VarChar, valor = compraEnkontrol.cc },
                                    new OdbcParameterDTO() { nombre = "numero", tipo = OdbcType.Numeric, valor = compraEnkontrol.numero }
                                }
                                        });

                                        if (listaPartidasEK.Count() > 0)
                                        {
                                            if (listaPartidasEK.FirstOrDefault(x => x.partida == 1).area == 1 && listaPartidasEK.FirstOrDefault(x => x.partida == 1).cuenta == 9) //Verificar que la compra tenga el área-cuenta "1-9" en la primer partida
                                            {
                                                //Se asigna como autorizante el empleado 59 (Alexis Samaniego)
                                                var empleado59 = _contextEnkontrol.Select<dynamic>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                                {
                                                    consulta = @"SELECT descripcion FROM DBA.empleados WHERE empleado = 59"
                                                });

                                                vobos = new List<VoboDTO> { new VoboDTO { usu_numero = 59, usu_nombre = (string)empleado59[0].descripcion } };
                                            }
                                        }
                                    }
                                }
                                #endregion


                                Tuple<int, List<VoboDTO>> _resultado = new Tuple<int, List<VoboDTO>>(compra.id, vobos);
                                resultado.Add(_resultado);
                            }
                            else
                            {
                                List<VoboDTO> vobos = new List<VoboDTO>();
                                Tuple<int, List<VoboDTO>> _resultado = new Tuple<int, List<VoboDTO>>(compra.id, vobos);
                                resultado.Add(_resultado);
                            }
                        }
                    }
                }
                catch (Exception)
                {
                    return null;
                }
                #endregion
            }
            else
            {
                #region DEMAS EMPRESAS
                try
                {
                    dynamic compraEK = null;
                    List<OrdenCompraDTO> comprasEK1 = new List<OrdenCompraDTO>();
                    List<MAEART> listaInsumosStarsoft = new List<MAEART>();

                    if (esInterna)
                    {
                        string consulta = "SELECT * FROM tblCom_OrdenCompra_Interna WHERE ";
                        foreach (var compra in compras)
                        {
                            consulta += String.Format(@"(cc = '{0}' AND numero = {1}) OR ", compra.cc, compra.numero);
                            if (compras.IndexOf(compra) < (compras.Count() - 1)) consulta += " OR ";
                        }

                        comprasEK1 = _context.Select<OrdenCompraDTO>(new DapperDTO
                        {
                            baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                            consulta = consulta
                        }).ToList();
                    }
                    else
                    {

                        if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                        {
                            string consulta = "";
                            foreach (var compra in compras)
                            {
                                consulta += string.Format(@"SELECT 
                                        oc.*, 
                                        (SELECT TOP 1 det.area FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS area, 
                                        (SELECT TOP 1 det.cuenta FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS cuenta 
                                    FROM so_orden_compra oc 
                                    WHERE oc.cc = '{0}' AND oc.numero = {1}", compra.cc, compra.numero);
                                if (compras.IndexOf(compra) < (compras.Count() - 1)) consulta += " UNION ";
                            }

                            comprasEK1 = _context.Select<OrdenCompraDTO>(new DapperDTO
                            {
                                baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                                consulta = consulta
                            }).ToList();
                        }
                        else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                        {
                            using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                            {
                                listaInsumosStarsoft = _starsoft.MAEART.ToList();
                            }

                            string consulta = "SELECT * FROM tblCom_OrdenCompra WHERE estatusRegistro = 1 AND (";
                            foreach (var compra in compras)
                            {
                                consulta += String.Format(@"(cc = '{0}' AND numero = {1} AND PERU_tipoCompra = '{2}')", compra.cc, compra.numero, compra.PERU_tipoCompra);
                                if (compras.IndexOf(compra) < (compras.Count() - 1)) consulta += " OR ";
                            }
                            consulta += ")";

                            comprasEK1 = _context.Select<OrdenCompraDTO>(new DapperDTO
                            {
                                baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                                consulta = consulta
                            }).ToList().Select(x => new OrdenCompraDTO
                            {
                                autoriza_activos = 0,
                                tmc = 0,
                                cc = x.cc,
                                id = x.id,
                                numero = x.numero,
                                moneda = Convert.ToInt32(x.moneda),
                                total = x.total,
                                tipo_cambio = x.tipo_cambio,
                                area = 0,
                                cuenta = 0,
                                PERU_tipoCompra = x.PERU_tipoCompra
                            }).ToList();
                        }
                        else
                        {
                            string consulta = "";
                            foreach (var compra in compras)
                            {
                                consulta += string.Format(@"SELECT 
                                        oc.*
                                    FROM so_orden_compra oc 
                                    WHERE oc.cc = '{0}' AND oc.numero = {1}", compra.cc, compra.numero);
                                if (compras.IndexOf(compra) < (compras.Count() - 1)) consulta += " UNION ";
                            }

                            comprasEK1 = _context.Select<OrdenCompraDTO>(new DapperDTO
                            {
                                baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                                consulta = consulta
                            }).ToList();
                        }
                    }

                    List<int> listTipoGrupo = new List<int>();
                    var comprasEK1IDs = comprasEK1.Select(x => x.id).ToList();

                    if (esInterna)
                    {
                        listTipoGrupo = _context.tblCom_OrdenCompraDet_Interna.Where(x => comprasEK1IDs.Contains(x.idOrdenCompra)).ToList().Select(x => Int32.Parse(((int)x.insumo).ToString().Substring(0, 3))).Distinct().ToList();
                    }
                    else
                    {
                        listTipoGrupo = _context.tblCom_OrdenCompraDet.Where(x => comprasEK1IDs.Contains(x.idOrdenCompra)).ToList().Select(x => Int32.Parse(((int)x.insumo).ToString().Substring(0, 3))).Distinct().ToList();
                    }

                    List<PermisoMontoDTO> lstFacultamientosEK = new List<PermisoMontoDTO>();

                    if (vSesiones.sesionEmpresaActual == 2)
                    {
                        var areas = compras.Select(x => x.area).ToList();
                        var cuentas = compras.Select(x => x.cuenta).ToList();
                        var montoMaximo = compras.Max(x => x.total);
                        var montoMinimo = compras.Min(x => x.total);
                        var stringAreas = string.Join(", ", areas);
                        var stringCuentas = string.Join(", ", cuentas);

                        var stringListTipoGrupo = string.Join(", ", listTipoGrupo);

                        var _facultamientos = consultaCheckProductivo(
                            string.Format(@"SELECT 
                                            tblPrincipal.area, 
                                            tblPrincipal.cuenta, 
                                            tblPrincipal.num_autorizaciones AS tblPrincipalNumAutorizaciones, 
                                            tblPrincipal.monto_minimo_autoriza, 
                                            tblPrincipal.monto_maximo_autoriza, 
                                            tblPrincipal.consecutivo, 
                                                    
                                            tblVobo.empleado AS empleadoVobo, 
                                            empVobo.descripcion AS empleadoVoboDesc, 
                                            tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                    
                                            tblGrupos.tipo AS tipoGrupo, 
                                            tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                    
                                            tblAut.empleado AS empleadoAutoriza, 
                                            tblAut.num_autorizaciones AS tblAutNumAutorizaciones 
                                        FROM so_area_cta_autorizacion tblPrincipal 
                                            LEFT JOIN so_empleados_area_cta tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                            LEFT JOIN so_rel_tipos_vobo_area_cta tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                            LEFT JOIN so_empleados_autoriza_area_cta tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                            LEFT JOIN empleados empVobo ON tblVobo.empleado = empVobo.empleado 
                                        WHERE 
                                            tblPrincipal.area = {0} AND tblPrincipal.cuenta = {1} AND 
                                            tblPrincipal.monto_minimo_autoriza <= {2} AND 
                                            tblPrincipal.monto_maximo_autoriza >= {3} AND 
                                            tblGrupos.tipo IN ({4}) 
                                        ORDER BY tblPrincipal.consecutivo", stringAreas, stringCuentas, montoMaximo, montoMinimo, stringListTipoGrupo)
                        );
                        lstFacultamientosEK = _facultamientos.ToObject<List<PermisoMontoDTO>>();
                    }
                    else
                    {
                        var ccs = compras.Select(x => x.cc).Distinct().ToList();
                        if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                        {
                            for (int i = 0; i < ccs.Count(); i++) { ccs[i] = Get_CCRH(ccs[i]); }
                        }
                        var montoMaximo = compras.Max(x => x.total);
                        var montoMinimo = compras.Min(x => x.total);
                        var stringCC = "'" + string.Join("', '", ccs) + "'";

                        var stringListTipoGrupo = string.Join(", ", listTipoGrupo);

                        var _facultamientos = consultaCheckProductivo(
                            string.Format(@"SELECT 
                                            tblPrincipal.cc, 
                                            tblPrincipal.num_autorizacioines AS tblPrincipalNumAutorizaciones, 
                                            tblPrincipal.monto_minimo_autoriza, 
                                            tblPrincipal.monto_maximo_autoriza, 
                                            tblPrincipal.consecutivo, 
                                                    
                                            tblVobo.empleado AS empleadoVobo, 
                                            empVobo.descripcion AS empleadoVoboDesc, 
                                            tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                    
                                            tblGrupos.tipo AS tipoGrupo, 
                                            tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                    
                                            tblAut.empleado AS empleadoAutoriza, 
                                            tblAut.num_autorizaciones AS tblAutNumAutorizaciones, 
                                            tblAut.orden AS ordenAutorizacion 
                                        FROM so_cc_autorizacion tblPrincipal 
                                            LEFT JOIN so_empleados_cc tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                            LEFT JOIN so_rel_tipos_vobo tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                            LEFT JOIN so_empleados_autoriza_cc tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                            LEFT JOIN empleados empVobo ON tblVobo.empleado = empVobo.empleado 
                                        WHERE 
                                            tblPrincipal.cc in ({0}) AND 
                                            tblPrincipal.monto_minimo_autoriza <= {1} AND 
                                            tblPrincipal.monto_maximo_autoriza >= {2} AND 
                                            tblGrupos.tipo IN ({3}) 
                                        ORDER BY tblPrincipal.consecutivo", stringCC, montoMaximo, montoMinimo, stringListTipoGrupo)
                        );

                        lstFacultamientosEK = _facultamientos.ToObject<List<PermisoMontoDTO>>();
                    }

                    if (esInterna)
                    {
                        #region OC INTERNA


                        foreach (var compra in compras)
                        {
                            var compraEK1 = comprasEK1.FirstOrDefault(x => x.cc == compra.cc && x.numero == compra.numero);
                            if (compraEK1 != null)
                            {
                                var ocInternaDet = _context.tblCom_OrdenCompraDet_Interna.Where(x => x.cc == compra.cc && x.numero == compra.numero).ToList();
                                if (ocInternaDet.Count > 0)
                                {
                                    compraEK1.area = ocInternaDet[0].area;
                                    compraEK1.cuenta = ocInternaDet[0].cuenta;

                                    List<dynamic> listAutoriza = new List<dynamic>();

                                    //
                                    List<VoboDTO> vobos = new List<VoboDTO>();

                                    if (compraEK1.autoriza_activos == 0 && compraEK1.tmc == 0)
                                    {
                                        #region VoBos por Centro de Costo, monto y Tipo-Grupo
                                        //var partidas = (List<dynamic>)consultaCheckProductivo(
                                        //    string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", compraEK1.cc, compraEK1.numero)
                                        //).ToObject<List<dynamic>>();
                                        //var listTipoGrupo = ocInternaDet.Select(x => Int32.Parse(((int)x.insumo).ToString().Substring(0, 3))).ToList();
                                        var stringListTipoGrupo = string.Join(", ", listTipoGrupo);
                                        var total = compraEK1.moneda == 2 ? (compraEK1.total * compraEK1.tipo_cambio) : compraEK1.total;
                                        List<PermisoMontoDTO> facultamientosEK = new List<PermisoMontoDTO>();

                                        #region ES OC INTERNA
                                        if (compra.esOC_Interna)
                                        {
                                            compraEK1.cc = !string.IsNullOrEmpty(compra.cc) ? compra.cc.ToUpper() : string.Empty;
                                        }
                                        #endregion

                                        if (vSesiones.sesionEmpresaActual == 1 || vSesiones.sesionEmpresaActual == 4)
                                        {
                                            facultamientosEK = lstFacultamientosEK.Where(x => x.cc == compra.cc && x.monto_minimo_autoriza <= total && x.monto_maximo_autoriza >= total && listTipoGrupo.Contains(x.tipoGrupo ?? 0)).ToList();
                                            //                                        facultamientosEK = consultaCheckProductivo(
                                            //                                            string.Format(@"SELECT 
                                            //                                                    tblPrincipal.cc, 
                                            //                                                    tblPrincipal.num_autorizacioines AS tblPrincipalNumAutorizaciones, 
                                            //                                                    tblPrincipal.monto_minimo_autoriza, 
                                            //                                                    tblPrincipal.monto_maximo_autoriza, 
                                            //                                                    tblPrincipal.consecutivo, 
                                            //                                                    
                                            //                                                    tblVobo.empleado AS empleadoVobo, 
                                            //                                                    empVobo.descripcion AS empleadoVoboDesc, 
                                            //                                                    tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                            //                                                    
                                            //                                                    tblGrupos.tipo AS tipoGrupo, 
                                            //                                                    tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                            //                                                    
                                            //                                                    tblAut.empleado AS empleadoAutoriza, 
                                            //                                                    tblAut.num_autorizaciones AS tblAutNumAutorizaciones, 
                                            //                                                    tblAut.orden AS ordenAutorizacion 
                                            //                                                FROM so_cc_autorizacion tblPrincipal 
                                            //                                                    LEFT JOIN so_empleados_cc tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                            //                                                    LEFT JOIN so_rel_tipos_vobo tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                            //                                                    LEFT JOIN so_empleados_autoriza_cc tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                            //                                                    LEFT JOIN empleados empVobo ON tblVobo.empleado = empVobo.empleado 
                                            //                                                WHERE 
                                            //                                                    tblPrincipal.cc = '{0}' AND 
                                            //                                                    tblPrincipal.monto_minimo_autoriza <= {1} AND 
                                            //                                                    tblPrincipal.monto_maximo_autoriza >= {1} AND 
                                            //                                                    tblGrupos.tipo IN ({2}) 
                                            //                                                ORDER BY tblPrincipal.consecutivo", compraEK1.cc.ToUpper(), total, stringListTipoGrupo)
                                            //                                        );
                                        }
                                        else
                                        {
                                            if (compra.esOC_Interna)
                                            {
                                                #region LA OC ES INTERNA, POR LO QUE SE PASA SU AREA CUENTA
                                                if (compra.area <= 0 || compra.cuenta <= 0)
                                                {
                                                    if (string.IsNullOrEmpty(compra.cc)) { throw new Exception("Ocurrió un error al obtener la información."); }
                                                    if (compra.numero <= 0) { throw new Exception("Ocurrió un error al obtener la información."); }

                                                    tblCom_OrdenCompraDet_Interna objCompra_Interna = _context.tblCom_OrdenCompraDet_Interna.Where(w => w.cc == compra.cc && w.numero == compra.numero).FirstOrDefault();
                                                    if (objCompra_Interna == null)
                                                        throw new Exception("Ocurrió un error al obtener la información.");

                                                    compra.area = objCompra_Interna.area;
                                                    compra.cuenta = objCompra_Interna.cuenta;
                                                }

                                                compraEK1.area = compra.area;
                                                compraEK1.cuenta = compra.cuenta;
                                                #endregion
                                            }
                                            facultamientosEK = lstFacultamientosEK.Where(x => x.area == compra.area && x.cuenta == compra.cuenta && x.monto_minimo_autoriza <= total && x.monto_maximo_autoriza >= total && listTipoGrupo.Contains(x.tipoGrupo ?? 0)).ToList();
                                            //                                        facultamientosEK = consultaCheckProductivo(
                                            //                                            string.Format(@"SELECT 
                                            //                                                    tblPrincipal.area, 
                                            //                                                    tblPrincipal.cuenta, 
                                            //                                                    tblPrincipal.num_autorizaciones AS tblPrincipalNumAutorizaciones, 
                                            //                                                    tblPrincipal.monto_minimo_autoriza, 
                                            //                                                    tblPrincipal.monto_maximo_autoriza, 
                                            //                                                    tblPrincipal.consecutivo, 
                                            //                                                    
                                            //                                                    tblVobo.empleado AS empleadoVobo, 
                                            //                                                    empVobo.descripcion AS empleadoVoboDesc, 
                                            //                                                    tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                            //                                                    
                                            //                                                    tblGrupos.tipo AS tipoGrupo, 
                                            //                                                    tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                            //                                                    
                                            //                                                    tblAut.empleado AS empleadoAutoriza, 
                                            //                                                    tblAut.num_autorizaciones AS tblAutNumAutorizaciones 
                                            //                                                FROM so_area_cta_autorizacion tblPrincipal 
                                            //                                                    LEFT JOIN so_empleados_area_cta tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                            //                                                    LEFT JOIN so_rel_tipos_vobo_area_cta tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                            //                                                    LEFT JOIN so_empleados_autoriza_area_cta tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                            //                                                    LEFT JOIN empleados empVobo ON tblVobo.empleado = empVobo.empleado 
                                            //                                                WHERE 
                                            //                                                    tblPrincipal.area = {0} AND tblPrincipal.cuenta = {1} AND 
                                            //                                                    tblPrincipal.monto_minimo_autoriza <= {2} AND 
                                            //                                                    tblPrincipal.monto_maximo_autoriza >= {2} AND 
                                            //                                                    tblGrupos.tipo IN ({3}) 
                                            //                                                ORDER BY tblPrincipal.consecutivo", compraEK1.area, compraEK1.cuenta, total, stringListTipoGrupo)
                                            //                                        );
                                        }

                                        //if (facultamientosEK != null)
                                        if (facultamientosEK.Count() > 0)
                                        {
                                            var facultamientos = facultamientosEK;

                                            foreach (var fac in facultamientos)
                                            {
                                                if (fac.empleadoVobo != null && fac.empleadoVobo > 0 && !vobos.Any(x => x.usu_numero == (int)fac.empleadoVobo))
                                                {
                                                    vobos.Add(new VoboDTO
                                                    {
                                                        usu_numero = fac.empleadoVobo != null ? (int)fac.empleadoVobo : 0,
                                                        usu_nombre = fac.empleadoVobo != null ? fac.empleadoVoboDesc : "",
                                                        numVobos = fac.tblVoboNumAutorizaciones != null ? (int)fac.tblVoboNumAutorizaciones : 0,
                                                        consecutivo = 0
                                                    });
                                                }
                                            }
                                        }
                                        #endregion
                                    }

                                    if (compraEK1.autoriza_activos == 1 && compraEK1.tmc == 0)
                                    {
                                        #region VoBos por Activo Fijo
                                        var empleadosVoboEK = consultaCheckProductivo(
                                            string.Format(@"SELECT 
                                                v.*,
                                                emp.descripcion AS empleadoDesc 
                                            FROM so_cc_vobo v 
                                                INNER JOIN empleados emp ON v.empleado = emp.empleado 
                                            WHERE cc = '{0}'", compraEK1.cc)
                                        );

                                        if (empleadosVoboEK != null)
                                        {
                                            var empleadosVobo = (List<dynamic>)empleadosVoboEK.ToObject<List<dynamic>>();

                                            foreach (var emp in empleadosVobo)
                                            {
                                                vobos.Add(new VoboDTO
                                                {
                                                    usu_numero = (int)emp.empleado,
                                                    usu_nombre = (string)emp.empleadoDesc,
                                                    numVobos = 2, //Las compras de Activo Fijo siempre llevan 2.
                                                    consecutivo = 0
                                                });
                                            }
                                        }
                                        #endregion
                                    }

                                    if (compraEK1.autoriza_activos == 0 && compraEK1.tmc == 1)
                                    {
                                        #region VoBos por TMC
                                        var empleadosVoboTMCEK = consultaCheckProductivo(string.Format(@"SELECT * FROM empleados WHERE vobo_tmc = 1"));

                                        if (empleadosVoboTMCEK != null)
                                        {
                                            var empleadosVoboTMC = (List<dynamic>)empleadosVoboTMCEK.ToObject<List<dynamic>>();

                                            foreach (var emp in empleadosVoboTMC)
                                            {
                                                vobos.Add(new VoboDTO
                                                {
                                                    usu_numero = (int)emp.empleado,
                                                    usu_nombre = (string)emp.descripcion,
                                                    numVobos = 1, //Las compras de TMC siempre llevan 1.
                                                    consecutivo = 0
                                                });
                                            }
                                        }
                                        #endregion
                                    }

                                    #region Compra Traspaso de Almacén
                                    if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                                    {
                                        if (compraEK1.proveedor == 5412) //Verificar que la compra tenga proveedor de Construplan
                                        {
                                            var listaPartidasEK = _contextEnkontrol.Select<OrdenCompraDetDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                            {
                                                consulta = @"SELECT * FROM so_orden_compra_det WHERE cc = ? AND numero = ?",
                                                parametros = new List<OdbcParameterDTO> {
                                    new OdbcParameterDTO() { nombre = "cc", tipo = OdbcType.VarChar, valor = compraEK1.cc },
                                    new OdbcParameterDTO() { nombre = "numero", tipo = OdbcType.Numeric, valor = compraEK1.numero }
                                }
                                            });

                                            if (listaPartidasEK.Count() > 0)
                                            {
                                                if (listaPartidasEK.FirstOrDefault(x => x.partida == 1).area == 1 && listaPartidasEK.FirstOrDefault(x => x.partida == 1).cuenta == 9) //Verificar que la compra tenga el área-cuenta "1-9" en la primer partida
                                                {
                                                    vobos = new List<VoboDTO>();
                                                    //return new List<VoboDTO>();
                                                }
                                            }
                                        }
                                    }
                                    #endregion

                                    foreach (var item in vobos)
                                    {
                                        var objVobo = getUsuarioEnKontrol(compra.vobo)[0].descripcion.Value;
                                        if (objVobo != null && objVobo != "DEFAULT")
                                            item.color = "green";
                                        else
                                            item.color = "red";
                                    }
                                    Tuple<int, List<VoboDTO>> _resultado = new Tuple<int, List<VoboDTO>>(compra.id, vobos);
                                    resultado.Add(_resultado);
                                    //return vobos;
                                }
                                else
                                {
                                    List<VoboDTO> vobos = new List<VoboDTO>();
                                    Tuple<int, List<VoboDTO>> _resultado = new Tuple<int, List<VoboDTO>>(compra.id, vobos);
                                    resultado.Add(_resultado);
                                    //return new List<VoboDTO>();
                                }
                            }
                            else
                            {
                                List<VoboDTO> vobos = new List<VoboDTO>();
                                Tuple<int, List<VoboDTO>> _resultado = new Tuple<int, List<VoboDTO>>(compra.id, vobos);
                                resultado.Add(_resultado);
                                //return new List<VoboDTO>();
                            }
                        }
                        #endregion
                    }
                    else
                    {
                        //if (compra.cc.Length == 6)
                        //{
                        //    tblP_CC objCC = _context.tblP_CC.Where(w => w.cc == compra.cc && w.estatus).FirstOrDefault();
                        //    if (objCC != null)
                        //        compra.cc = objCC.ccRH;
                        //}
                        List<tblCom_OrdenCompraDet> listaComprasDetalle = new List<tblCom_OrdenCompraDet>();
                        listaComprasDetalle = _context.tblCom_OrdenCompraDet.Where(y => y.estatusRegistro && comprasEK1IDs.Contains(y.idOrdenCompra)).ToList();

                        foreach (var compra in compras)
                        {
                            /*if (vSesiones.sesionEmpresaActual == 1 || vSesiones.sesionEmpresaActual == 4)
                            {
                                compraEK = consultaCheckProductivo(
                                    string.Format(@"SELECT 
                                                oc.* 
                                            FROM so_orden_compra oc 
                                            WHERE oc.cc = '{0}' AND oc.numero = {1}", compra.cc, compra.numero)
                                );
                            }
                            else*/
                            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                            {
                                //string strQuery = string.Format(@"SELECT * FROM tblCom_OrdenCompra WHERE cc = '{0}' AND numero = {1} AND estatusRegistro = {2} AND PERU_tipoCompra = {3}", compra.cc, compra.numero, 1, compra.PERU_tipoCompra);
                                //compraEK = _context.Select<OrdenCompraDTO>(new DapperDTO
                                //{
                                //    baseDatos = MainContextEnum.PERU,
                                //    consulta = strQuery,
                                //    parametros = new { cc = compra.cc, numero = compra.numero, estatusRegistro = true }
                                //}).FirstOrDefault();

                                //compraEK = _context.tblCom_OrdenCompra.Where(x => x.cc == compra.cc && x.numero == compra.numero && x.estatusRegistro && x.PERU_tipoCompra == compra.PERU_tipoCompra).ToList().Select(x => new OrdenCompraDTO
                                //{
                                //    autoriza_activos = 0,
                                //    tmc = 0,
                                //    cc = x.cc,
                                //    id = x.id,
                                //    numero = x.numero,
                                //    moneda = Convert.ToInt32(x.moneda),
                                //    total = x.total,
                                //    tipo_cambio = x.tipo_cambio,
                                //    area = 0,
                                //    cuenta = 0
                                //}).FirstOrDefault();
                                compraEK = comprasEK1.Where(x => x.cc == compra.cc && x.numero == compra.numero && x.PERU_tipoCompra == compra.PERU_tipoCompra).ToList().Select(x => new OrdenCompraDTO
                                {
                                    autoriza_activos = 0,
                                    tmc = 0,
                                    cc = x.cc,
                                    id = x.id,
                                    numero = x.numero,
                                    moneda = Convert.ToInt32(x.moneda),
                                    total = x.total,
                                    tipo_cambio = x.tipo_cambio,
                                    area = 0,
                                    cuenta = 0
                                }).FirstOrDefault();

                                OrdenCompraDTO compraEnkontrol = compraEK;

                                //var listaCompraDetalle = _context.tblCom_OrdenCompraDet.Where(y => y.cc == compra.cc && y.numero == compra.numero && y.estatusRegistro && y.idOrdenCompra == compraEnkontrol.id).ToList();
                                var listaCompraDetalle = listaComprasDetalle.Where(y => y.cc == compra.cc && y.numero == compra.numero && y.estatusRegistro && y.idOrdenCompra == compraEnkontrol.id).ToList();


                                foreach (var det in listaCompraDetalle)
                                {
                                    var registroInsumoStarsoft = listaInsumosStarsoft.FirstOrDefault(x => x.ACODIGO == ("0" + det.insumo));
                                    if (registroInsumoStarsoft != null)
                                    {
                                        if (registroInsumoStarsoft.ATIPO == "10")
                                        {
                                            compraEK.autoriza_activos = 1;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                compraEK = comprasEK1.FirstOrDefault(x => x.cc == compra.cc && x.numero == compra.numero);
                                //                            compraEK = consultaCheckProductivo(
                                //                                string.Format(@"SELECT 
                                //                                            oc.*, 
                                //                                            (SELECT TOP 1 det.area FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS area, 
                                //                                            (SELECT TOP 1 det.cuenta FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS cuenta 
                                //                                        FROM so_orden_compra oc 
                                //                                        WHERE oc.cc = '{0}' AND oc.numero = {1}", compra.cc, compra.numero)
                                //                            );
                            }

                            if (compraEK != null)
                            {
                                OrdenCompraDTO compraEnkontrol = new OrdenCompraDTO();

                                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                                    compraEnkontrol = compraEK;
                                else
                                    compraEnkontrol = ((List<OrdenCompraDTO>)compraEK.ToObject<List<OrdenCompraDTO>>())[0];

                                List<VoboDTO> vobos = new List<VoboDTO>();

                                if (compraEnkontrol.autoriza_activos == 0 && compraEnkontrol.tmc == 0)
                                {
                                    #region VoBos por Centro de Costo, monto y Tipo-Grupo
                                    if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                                        compraEnkontrol.cc = Get_CCRH(compraEnkontrol.cc);

                                    List<dynamic> partidas = new List<dynamic>();

                                    if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                                    {
                                        //partidas = _context.Select<dynamic>(new DapperDTO
                                        //{
                                        //    baseDatos = MainContextEnum.PERU,
                                        //    consulta = @"SELECT * FROM tblCom_OrdenCompraDet WHERE idOrdenCompra = @idOrdenCompra AND estatusRegistro = @estatusRegistro ",
                                        //    parametros = new { idOrdenCompra = compraEnkontrol.id, estatusRegistro = true }
                                        //}).ToList();
                                        partidas = _context.tblCom_OrdenCompraDet.Where(x => x.idOrdenCompra == compraEnkontrol.id && x.estatusRegistro).Select(x => new
                                        {
                                            insumo = x.insumo
                                        }).ToList<dynamic>();
                                    }
                                    else
                                    {
                                        partidas = (List<dynamic>)consultaCheckProductivo(
                                            string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", compraEnkontrol.cc, compraEnkontrol.numero)
                                        ).ToObject<List<dynamic>>();
                                    }

                                    //var listTipoGrupo = partidas.Select(x => Int32.Parse(((int)x.insumo).ToString().Substring(0, 3))).ToList();
                                    var stringListTipoGrupo = string.Join(", ", listTipoGrupo);
                                    var total = compraEnkontrol.moneda == 2 ? (compraEnkontrol.total * compraEnkontrol.tipo_cambio) : compraEnkontrol.total;
                                    dynamic facultamientosEK = null;

                                    #region ES OC INTERNA
                                    if (compra.esOC_Interna)
                                    {
                                        compraEnkontrol.cc = !string.IsNullOrEmpty(compra.cc) ? compra.cc.ToUpper() : string.Empty;
                                    }
                                    #endregion

                                    if (vSesiones.sesionEmpresaActual == 1 || vSesiones.sesionEmpresaActual == 4 || vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                                    {
                                        facultamientosEK = facultamientosEK = lstFacultamientosEK.Where(x => x.cc == compra.cc && x.monto_minimo_autoriza <= total && x.monto_maximo_autoriza >= total && listTipoGrupo.Contains(x.tipoGrupo ?? 0)).ToList();
                                        //                                    if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                                        //                                    {                                        
                                        //                                        facultamientosEK = consultaCheckProductivo(
                                        //                                        string.Format(@"SELECT 
                                        //                                                    tblPrincipal.cc, 
                                        //                                                    tblPrincipal.num_autorizacioines AS tblPrincipalNumAutorizaciones, 
                                        //                                                    tblPrincipal.monto_minimo_autoriza, 
                                        //                                                    tblPrincipal.monto_maximo_autoriza, 
                                        //                                                    tblPrincipal.consecutivo, 
                                        //                                                    
                                        //                                                    tblVobo.empleado AS empleadoVobo, 
                                        //                                                    empVobo.descripcion AS empleadoVoboDesc, 
                                        //                                                    tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                        //                                                    
                                        //                                                    tblGrupos.tipo AS tipoGrupo, 
                                        //                                                    tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                        //                                                    
                                        //                                                    tblAut.empleado AS empleadoAutoriza, 
                                        //                                                    tblAut.num_autorizaciones AS tblAutNumAutorizaciones, 
                                        //                                                    tblAut.orden AS ordenAutorizacion 
                                        //                                                FROM so_cc_autorizacion tblPrincipal 
                                        //                                                    LEFT JOIN so_empleados_cc tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                        //                                                    LEFT JOIN so_rel_tipos_vobo tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                        //                                                    LEFT JOIN so_empleados_autoriza_cc tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                        //                                                    LEFT JOIN empleados empVobo ON tblVobo.empleado = empVobo.empleado 
                                        //                                                WHERE 
                                        //                                                    tblPrincipal.cc = '{0}' AND 
                                        //                                                    tblPrincipal.monto_minimo_autoriza <= {1} AND 
                                        //                                                    tblPrincipal.monto_maximo_autoriza >= {1} 
                                        //                                                ORDER BY tblPrincipal.consecutivo", compraEnkontrol.cc.ToUpper(), total)
                                        //                                        );
                                        //                                    }
                                        //                                    else
                                        //                                    {
                                        //                                        facultamientosEK = consultaCheckProductivo(
                                        //                                        string.Format(@"SELECT 
                                        //                                                    tblPrincipal.cc, 
                                        //                                                    tblPrincipal.num_autorizacioines AS tblPrincipalNumAutorizaciones, 
                                        //                                                    tblPrincipal.monto_minimo_autoriza, 
                                        //                                                    tblPrincipal.monto_maximo_autoriza, 
                                        //                                                    tblPrincipal.consecutivo, 
                                        //                                                    
                                        //                                                    tblVobo.empleado AS empleadoVobo, 
                                        //                                                    empVobo.descripcion AS empleadoVoboDesc, 
                                        //                                                    tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                        //                                                    
                                        //                                                    tblGrupos.tipo AS tipoGrupo, 
                                        //                                                    tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                        //                                                    
                                        //                                                    tblAut.empleado AS empleadoAutoriza, 
                                        //                                                    tblAut.num_autorizaciones AS tblAutNumAutorizaciones, 
                                        //                                                    tblAut.orden AS ordenAutorizacion 
                                        //                                                FROM so_cc_autorizacion tblPrincipal 
                                        //                                                    LEFT JOIN so_empleados_cc tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                        //                                                    LEFT JOIN so_rel_tipos_vobo tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                        //                                                    LEFT JOIN so_empleados_autoriza_cc tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                        //                                                    LEFT JOIN empleados empVobo ON tblVobo.empleado = empVobo.empleado 
                                        //                                                WHERE 
                                        //                                                    tblPrincipal.cc = '{0}' AND 
                                        //                                                    tblPrincipal.monto_minimo_autoriza <= {1} AND 
                                        //                                                    tblPrincipal.monto_maximo_autoriza >= {1} AND 
                                        //                                                    tblGrupos.tipo IN ({2}) 
                                        //                                                ORDER BY tblPrincipal.consecutivo", compraEnkontrol.cc.ToUpper(), total, stringListTipoGrupo)
                                        //                                        );
                                        //                                    }
                                    }
                                    else
                                    {
                                        if (compra.esOC_Interna)
                                        {
                                            #region LA OC ES INTERNA, POR LO QUE SE PASA SU AREA CUENTA
                                            if (compra.area <= 0 || compra.cuenta <= 0)
                                            {
                                                if (string.IsNullOrEmpty(compra.cc)) { throw new Exception("Ocurrió un error al obtener la información."); }
                                                if (compra.numero <= 0) { throw new Exception("Ocurrió un error al obtener la información."); }

                                                tblCom_OrdenCompraDet_Interna objCompra_Interna = _context.tblCom_OrdenCompraDet_Interna.Where(w => w.cc == compra.cc && w.numero == compra.numero).FirstOrDefault();
                                                if (objCompra_Interna == null)
                                                    throw new Exception("Ocurrió un error al obtener la información.");

                                                compra.area = objCompra_Interna.area;
                                                compra.cuenta = objCompra_Interna.cuenta;
                                            }

                                            compraEnkontrol.area = compra.area;
                                            compraEnkontrol.cuenta = compra.cuenta;
                                            #endregion
                                        }
                                        facultamientosEK = facultamientosEK = lstFacultamientosEK.Where(x => x.area == compra.area && x.cuenta == compra.cuenta && x.monto_minimo_autoriza <= total && x.monto_maximo_autoriza >= total && listTipoGrupo.Contains(x.tipoGrupo ?? 0)).ToList();

                                        //                                    facultamientosEK = consultaCheckProductivo(
                                        //                                        string.Format(@"SELECT 
                                        //                                                    tblPrincipal.area, 
                                        //                                                    tblPrincipal.cuenta, 
                                        //                                                    tblPrincipal.num_autorizaciones AS tblPrincipalNumAutorizaciones, 
                                        //                                                    tblPrincipal.monto_minimo_autoriza, 
                                        //                                                    tblPrincipal.monto_maximo_autoriza, 
                                        //                                                    tblPrincipal.consecutivo, 
                                        //                                                    
                                        //                                                    tblVobo.empleado AS empleadoVobo, 
                                        //                                                    empVobo.descripcion AS empleadoVoboDesc, 
                                        //                                                    tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                        //                                                    
                                        //                                                    tblGrupos.tipo AS tipoGrupo, 
                                        //                                                    tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                        //                                                    
                                        //                                                    tblAut.empleado AS empleadoAutoriza, 
                                        //                                                    tblAut.num_autorizaciones AS tblAutNumAutorizaciones 
                                        //                                                FROM so_area_cta_autorizacion tblPrincipal 
                                        //                                                    LEFT JOIN so_empleados_area_cta tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                        //                                                    LEFT JOIN so_rel_tipos_vobo_area_cta tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                        //                                                    LEFT JOIN so_empleados_autoriza_area_cta tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                        //                                                    LEFT JOIN empleados empVobo ON tblVobo.empleado = empVobo.empleado 
                                        //                                                WHERE 
                                        //                                                    tblPrincipal.area = {0} AND tblPrincipal.cuenta = {1} AND 
                                        //                                                    tblPrincipal.monto_minimo_autoriza <= {2} AND 
                                        //                                                    tblPrincipal.monto_maximo_autoriza >= {2} AND 
                                        //                                                    tblGrupos.tipo IN ({3}) 
                                        //                                                ORDER BY tblPrincipal.consecutivo", compraEnkontrol.area, compraEnkontrol.cuenta, total, stringListTipoGrupo)
                                        //                                    );
                                    }

                                    if (facultamientosEK != null)
                                    {
                                        var facultamientos = facultamientosEK;

                                        foreach (var fac in facultamientos)
                                        {
                                            if (fac.empleadoVobo != null && fac.empleadoVobo > 0 && !vobos.Any(x => x.usu_numero == (int)fac.empleadoVobo))
                                            {
                                                vobos.Add(new VoboDTO
                                                {
                                                    usu_numero = fac.empleadoVobo != null ? (int)fac.empleadoVobo : 0,
                                                    usu_nombre = fac.empleadoVobo != null ? fac.empleadoVoboDesc : "",
                                                    numVobos = fac.tblVoboNumAutorizaciones != null ? (int)fac.tblVoboNumAutorizaciones : 0,
                                                    consecutivo = 0
                                                });
                                            }
                                        }
                                    }
                                    #endregion
                                }

                                if (compraEnkontrol.autoriza_activos == 1 && compraEnkontrol.tmc == 0)
                                {
                                    #region Autorizaciones por Activo Fijo
                                    var empleadosAutorizaActivoFijoEK = consultaCheckProductivo(string.Format(@"SELECT * FROM empleados WHERE autoriza_activos_fijos = 1"));

                                    if (empleadosAutorizaActivoFijoEK != null)
                                    {
                                        var empleadosAutorizaActivoFijo = (List<dynamic>)empleadosAutorizaActivoFijoEK.ToObject<List<dynamic>>();

                                        foreach (var emp in empleadosAutorizaActivoFijo)
                                        {
                                            vobos.Add(new VoboDTO
                                            {
                                                usu_numero = (int)emp.empleado,
                                                usu_nombre = (string)emp.descripcion
                                            });
                                        }
                                    }
                                    #endregion
                                }

                                if (compraEnkontrol.autoriza_activos == 0 && compraEnkontrol.tmc == 1)
                                {
                                    #region Autorizaciones por TMC
                                    var empleadosAutorizaTMCEK = consultaCheckProductivo(string.Format(@"SELECT * FROM empleados WHERE autoriza_tmc = 1"));

                                    if (empleadosAutorizaTMCEK != null)
                                    {
                                        var empleadosAutorizaTMC = (List<dynamic>)empleadosAutorizaTMCEK.ToObject<List<dynamic>>();

                                        foreach (var emp in empleadosAutorizaTMC)
                                        {
                                            vobos.Add(new VoboDTO
                                            {
                                                usu_numero = (int)emp.empleado,
                                                usu_nombre = (string)emp.descripcion
                                            });
                                        }
                                    }
                                    #endregion
                                }

                                #region Compra Traspaso de Almacén
                                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                                {
                                    if (compraEnkontrol.proveedor == 5412) //Verificar que la compra tenga proveedor de Construplan
                                    {
                                        var listaPartidasEK = _contextEnkontrol.Select<OrdenCompraDetDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                        {
                                            consulta = @"SELECT * FROM so_orden_compra_det WHERE cc = ? AND numero = ?",
                                            parametros = new List<OdbcParameterDTO> {
                                    new OdbcParameterDTO() { nombre = "cc", tipo = OdbcType.VarChar, valor = compraEnkontrol.cc },
                                    new OdbcParameterDTO() { nombre = "numero", tipo = OdbcType.Numeric, valor = compraEnkontrol.numero }
                                }
                                        });

                                        if (listaPartidasEK.Count() > 0)
                                        {
                                            if (listaPartidasEK.FirstOrDefault(x => x.partida == 1).area == 1 && listaPartidasEK.FirstOrDefault(x => x.partida == 1).cuenta == 9) //Verificar que la compra tenga el área-cuenta "1-9" en la primer partida
                                            {
                                                //Se asigna como autorizante el empleado 59 (Alexis Samaniego)
                                                var empleado59 = _contextEnkontrol.Select<dynamic>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                                {
                                                    consulta = @"SELECT descripcion FROM empleados WHERE empleado = 59"
                                                });

                                                vobos = new List<VoboDTO> { new VoboDTO { usu_numero = 59, usu_nombre = (string)empleado59[0].descripcion } };
                                            }
                                        }
                                    }
                                }
                                #endregion


                                Tuple<int, List<VoboDTO>> _resultado = new Tuple<int, List<VoboDTO>>(compra.id, vobos);
                                resultado.Add(_resultado);
                            }
                            else
                            {
                                List<VoboDTO> vobos = new List<VoboDTO>();
                                Tuple<int, List<VoboDTO>> _resultado = new Tuple<int, List<VoboDTO>>(compra.id, vobos);
                                resultado.Add(_resultado);
                                //return new List<VoboDTO>();
                            }
                        }
                    }
                }
                catch (Exception ex) { return null; }
                #endregion
            }
            return resultado;
        }

        public List<Tuple<int, List<VoboDTO>>> getVobos(List<OrdenCompraDTO> compras, int empresa, bool esInterna)
        {
            List<Tuple<int, List<VoboDTO>>> resultado = new List<Tuple<int, List<VoboDTO>>>();
            try
            {
                dynamic compraEK = null;
                List<OrdenCompraDTO> comprasEK1 = new List<OrdenCompraDTO>();
                List<MAEART> listaInsumosStarsoft = new List<MAEART>();

                if (esInterna)
                {
                    string consulta = "SELECT * FROM tblCom_OrdenCompra_Interna WHERE ";
                    foreach (var compra in compras)
                    {
                        consulta += String.Format(@"(cc = '{0}' AND numero = {1}) OR ", compra.cc, compra.numero);
                        if (compras.IndexOf(compra) < (compras.Count() - 1)) consulta += " OR ";
                    }

                    comprasEK1 = _context.Select<OrdenCompraDTO>(new DapperDTO
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = consulta
                    }).ToList();
                }
                else
                {

                    if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                    {
                        string consulta = "";
                        foreach (var compra in compras)
                        {
                            consulta += string.Format(@"SELECT 
                                        oc.*, 
                                        (SELECT TOP 1 det.area FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS area, 
                                        (SELECT TOP 1 det.cuenta FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS cuenta 
                                    FROM so_orden_compra oc 
                                    WHERE oc.cc = '{0}' AND oc.numero = {1}", compra.cc, compra.numero);
                            if (compras.IndexOf(compra) < (compras.Count() - 1)) consulta += " UNION ";
                        }

                        comprasEK1 = _context.Select<OrdenCompraDTO>(new DapperDTO
                        {
                            baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                            consulta = consulta
                        }).ToList();
                    }
                    else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                    {
                        using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                        {
                            listaInsumosStarsoft = _starsoft.MAEART.ToList();
                        }

                        string consulta = "SELECT * FROM tblCom_OrdenCompra WHERE estatusRegistro = 1 AND (";
                        foreach (var compra in compras)
                        {
                            consulta += String.Format(@"(cc = '{0}' AND numero = {1} AND PERU_tipoCompra = '{2}')", compra.cc, compra.numero, compra.PERU_tipoCompra);
                            if (compras.IndexOf(compra) < (compras.Count() - 1)) consulta += " OR ";
                        }
                        consulta += ")";

                        comprasEK1 = _context.Select<OrdenCompraDTO>(new DapperDTO
                        {
                            baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                            consulta = consulta
                        }).ToList().Select(x => new OrdenCompraDTO
                        {
                            autoriza_activos = 0,
                            tmc = 0,
                            cc = x.cc,
                            id = x.id,
                            numero = x.numero,
                            moneda = Convert.ToInt32(x.moneda),
                            total = x.total,
                            tipo_cambio = x.tipo_cambio,
                            area = 0,
                            cuenta = 0,
                            PERU_tipoCompra = x.PERU_tipoCompra
                        }).ToList();
                    }
                    else
                    {
                        string consulta = "";
                        foreach (var compra in compras)
                        {
                            consulta += string.Format(@"SELECT 
                                        oc.*
                                    FROM so_orden_compra oc 
                                    WHERE oc.cc = '{0}' AND oc.numero = {1}", compra.cc, compra.numero);
                            if (compras.IndexOf(compra) < (compras.Count() - 1)) consulta += " UNION ";
                        }

                        comprasEK1 = _context.Select<OrdenCompraDTO>(new DapperDTO
                        {
                            baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                            consulta = consulta
                        }).ToList();
                    }
                }

                List<int> listTipoGrupo = new List<int>();
                var comprasEK1IDs = comprasEK1.Select(x => x.id).ToList();

                if (esInterna)
                {
                    listTipoGrupo = _context.tblCom_OrdenCompraDet_Interna.Where(x => comprasEK1IDs.Contains(x.idOrdenCompra)).ToList().Select(x => Int32.Parse(((int)x.insumo).ToString().Substring(0, 3))).Distinct().ToList();
                }
                else
                {
                    listTipoGrupo = _context.tblCom_OrdenCompraDet.Where(x => comprasEK1IDs.Contains(x.idOrdenCompra)).ToList().Select(x => Int32.Parse(((int)x.insumo).ToString().Substring(0, 3))).Distinct().ToList();
                }

                List<PermisoMontoDTO> lstFacultamientosEK = new List<PermisoMontoDTO>();

                if (vSesiones.sesionEmpresaActual == 2)
                {
                    var areas = compras.Select(x => x.area).ToList();
                    var cuentas = compras.Select(x => x.cuenta).ToList();
                    var montoMaximo = compras.Max(x => x.total);
                    var montoMinimo = compras.Min(x => x.total);
                    var stringAreas = string.Join(", ", areas);
                    var stringCuentas = string.Join(", ", cuentas);

                    var stringListTipoGrupo = string.Join(", ", listTipoGrupo);

                    var _facultamientos = consultaCheckProductivo(
                        string.Format(@"SELECT 
                                            tblPrincipal.area, 
                                            tblPrincipal.cuenta, 
                                            tblPrincipal.num_autorizaciones AS tblPrincipalNumAutorizaciones, 
                                            tblPrincipal.monto_minimo_autoriza, 
                                            tblPrincipal.monto_maximo_autoriza, 
                                            tblPrincipal.consecutivo, 
                                                    
                                            tblVobo.empleado AS empleadoVobo, 
                                            empVobo.descripcion AS empleadoVoboDesc, 
                                            tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                    
                                            tblGrupos.tipo AS tipoGrupo, 
                                            tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                    
                                            tblAut.empleado AS empleadoAutoriza, 
                                            tblAut.num_autorizaciones AS tblAutNumAutorizaciones 
                                        FROM so_area_cta_autorizacion tblPrincipal 
                                            LEFT JOIN so_empleados_area_cta tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                            LEFT JOIN so_rel_tipos_vobo_area_cta tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                            LEFT JOIN so_empleados_autoriza_area_cta tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                            LEFT JOIN empleados empVobo ON tblVobo.empleado = empVobo.empleado 
                                        WHERE 
                                            tblPrincipal.area = {0} AND tblPrincipal.cuenta = {1} AND 
                                            tblPrincipal.monto_minimo_autoriza <= {2} AND 
                                            tblPrincipal.monto_maximo_autoriza >= {3} AND 
                                            tblGrupos.tipo IN ({4}) 
                                        ORDER BY tblPrincipal.consecutivo", stringAreas, stringCuentas, montoMaximo, montoMinimo, stringListTipoGrupo)
                    );
                    lstFacultamientosEK = _facultamientos.ToObject<List<PermisoMontoDTO>>();
                }
                else
                {
                    var ccs = compras.Select(x => x.cc).Distinct().ToList();
                    if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                    {
                        for (int i = 0; i < ccs.Count(); i++) { ccs[i] = Get_CCRH(ccs[i]); }
                    }
                    var montoMaximo = compras.Max(x => x.total);
                    var montoMinimo = compras.Min(x => x.total);
                    var stringCC = "'" + string.Join("', '", ccs) + "'";

                    var stringListTipoGrupo = string.Join(", ", listTipoGrupo);

                    var _facultamientos = consultaCheckProductivo(
                        string.Format(@"SELECT 
                                            tblPrincipal.cc, 
                                            tblPrincipal.num_autorizacioines AS tblPrincipalNumAutorizaciones, 
                                            tblPrincipal.monto_minimo_autoriza, 
                                            tblPrincipal.monto_maximo_autoriza, 
                                            tblPrincipal.consecutivo, 
                                                    
                                            tblVobo.empleado AS empleadoVobo, 
                                            empVobo.descripcion AS empleadoVoboDesc, 
                                            tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                    
                                            tblGrupos.tipo AS tipoGrupo, 
                                            tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                    
                                            tblAut.empleado AS empleadoAutoriza, 
                                            tblAut.num_autorizaciones AS tblAutNumAutorizaciones, 
                                            tblAut.orden AS ordenAutorizacion 
                                        FROM so_cc_autorizacion tblPrincipal 
                                            LEFT JOIN so_empleados_cc tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                            LEFT JOIN so_rel_tipos_vobo tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                            LEFT JOIN so_empleados_autoriza_cc tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                            LEFT JOIN empleados empVobo ON tblVobo.empleado = empVobo.empleado 
                                        WHERE 
                                            tblPrincipal.cc in ({0}) AND 
                                            tblPrincipal.monto_minimo_autoriza <= {1} AND 
                                            tblPrincipal.monto_maximo_autoriza >= {2} AND 
                                            tblGrupos.tipo IN ({3}) 
                                        ORDER BY tblPrincipal.consecutivo", stringCC, montoMinimo, montoMaximo, stringListTipoGrupo)
                    );

                    if (_facultamientos != null) lstFacultamientosEK = _facultamientos.ToObject<List<PermisoMontoDTO>>();
                }

                if (esInterna)
                {
                    #region OC INTERNA


                    foreach (var compra in compras)
                    {
                        var compraEK1 = comprasEK1.FirstOrDefault(x => x.cc == compra.cc && x.numero == compra.numero);
                        if (compraEK1 != null)
                        {
                            var ocInternaDet = _context.tblCom_OrdenCompraDet_Interna.Where(x => x.cc == compra.cc && x.numero == compra.numero).ToList();
                            if (ocInternaDet.Count > 0)
                            {
                                compraEK1.area = ocInternaDet[0].area;
                                compraEK1.cuenta = ocInternaDet[0].cuenta;

                                List<dynamic> listAutoriza = new List<dynamic>();

                                //
                                List<VoboDTO> vobos = new List<VoboDTO>();

                                if (compraEK1.autoriza_activos == 0 && compraEK1.tmc == 0)
                                {
                                    #region VoBos por Centro de Costo, monto y Tipo-Grupo
                                    //var partidas = (List<dynamic>)consultaCheckProductivo(
                                    //    string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", compraEK1.cc, compraEK1.numero)
                                    //).ToObject<List<dynamic>>();
                                    //var listTipoGrupo = ocInternaDet.Select(x => Int32.Parse(((int)x.insumo).ToString().Substring(0, 3))).ToList();
                                    var stringListTipoGrupo = string.Join(", ", listTipoGrupo);
                                    var total = compraEK1.moneda == 2 ? (compraEK1.total * compraEK1.tipo_cambio) : compraEK1.total;
                                    List<PermisoMontoDTO> facultamientosEK = new List<PermisoMontoDTO>();

                                    #region ES OC INTERNA
                                    if (compra.esOC_Interna)
                                    {
                                        compraEK1.cc = !string.IsNullOrEmpty(compra.cc) ? compra.cc.ToUpper() : string.Empty;
                                    }
                                    #endregion

                                    if (vSesiones.sesionEmpresaActual == 1 || vSesiones.sesionEmpresaActual == 4)
                                    {
                                        facultamientosEK = lstFacultamientosEK.Where(x => x.cc == compra.cc && x.monto_minimo_autoriza <= total && x.monto_maximo_autoriza >= total && listTipoGrupo.Contains(x.tipoGrupo ?? 0)).ToList();
                                        //                                        facultamientosEK = consultaCheckProductivo(
                                        //                                            string.Format(@"SELECT 
                                        //                                                    tblPrincipal.cc, 
                                        //                                                    tblPrincipal.num_autorizacioines AS tblPrincipalNumAutorizaciones, 
                                        //                                                    tblPrincipal.monto_minimo_autoriza, 
                                        //                                                    tblPrincipal.monto_maximo_autoriza, 
                                        //                                                    tblPrincipal.consecutivo, 
                                        //                                                    
                                        //                                                    tblVobo.empleado AS empleadoVobo, 
                                        //                                                    empVobo.descripcion AS empleadoVoboDesc, 
                                        //                                                    tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                        //                                                    
                                        //                                                    tblGrupos.tipo AS tipoGrupo, 
                                        //                                                    tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                        //                                                    
                                        //                                                    tblAut.empleado AS empleadoAutoriza, 
                                        //                                                    tblAut.num_autorizaciones AS tblAutNumAutorizaciones, 
                                        //                                                    tblAut.orden AS ordenAutorizacion 
                                        //                                                FROM so_cc_autorizacion tblPrincipal 
                                        //                                                    LEFT JOIN so_empleados_cc tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                        //                                                    LEFT JOIN so_rel_tipos_vobo tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                        //                                                    LEFT JOIN so_empleados_autoriza_cc tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                        //                                                    LEFT JOIN empleados empVobo ON tblVobo.empleado = empVobo.empleado 
                                        //                                                WHERE 
                                        //                                                    tblPrincipal.cc = '{0}' AND 
                                        //                                                    tblPrincipal.monto_minimo_autoriza <= {1} AND 
                                        //                                                    tblPrincipal.monto_maximo_autoriza >= {1} AND 
                                        //                                                    tblGrupos.tipo IN ({2}) 
                                        //                                                ORDER BY tblPrincipal.consecutivo", compraEK1.cc.ToUpper(), total, stringListTipoGrupo)
                                        //                                        );
                                    }
                                    else
                                    {
                                        if (compra.esOC_Interna)
                                        {
                                            #region LA OC ES INTERNA, POR LO QUE SE PASA SU AREA CUENTA
                                            if (compra.area <= 0 || compra.cuenta <= 0)
                                            {
                                                if (string.IsNullOrEmpty(compra.cc)) { throw new Exception("Ocurrió un error al obtener la información."); }
                                                if (compra.numero <= 0) { throw new Exception("Ocurrió un error al obtener la información."); }

                                                tblCom_OrdenCompraDet_Interna objCompra_Interna = _context.tblCom_OrdenCompraDet_Interna.Where(w => w.cc == compra.cc && w.numero == compra.numero).FirstOrDefault();
                                                if (objCompra_Interna == null)
                                                    throw new Exception("Ocurrió un error al obtener la información.");

                                                compra.area = objCompra_Interna.area;
                                                compra.cuenta = objCompra_Interna.cuenta;
                                            }

                                            compraEK1.area = compra.area;
                                            compraEK1.cuenta = compra.cuenta;
                                            #endregion
                                        }
                                        facultamientosEK = lstFacultamientosEK.Where(x => x.area == compra.area && x.cuenta == compra.cuenta && x.monto_minimo_autoriza <= total && x.monto_maximo_autoriza >= total && listTipoGrupo.Contains(x.tipoGrupo ?? 0)).ToList();
                                        //                                        facultamientosEK = consultaCheckProductivo(
                                        //                                            string.Format(@"SELECT 
                                        //                                                    tblPrincipal.area, 
                                        //                                                    tblPrincipal.cuenta, 
                                        //                                                    tblPrincipal.num_autorizaciones AS tblPrincipalNumAutorizaciones, 
                                        //                                                    tblPrincipal.monto_minimo_autoriza, 
                                        //                                                    tblPrincipal.monto_maximo_autoriza, 
                                        //                                                    tblPrincipal.consecutivo, 
                                        //                                                    
                                        //                                                    tblVobo.empleado AS empleadoVobo, 
                                        //                                                    empVobo.descripcion AS empleadoVoboDesc, 
                                        //                                                    tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                        //                                                    
                                        //                                                    tblGrupos.tipo AS tipoGrupo, 
                                        //                                                    tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                        //                                                    
                                        //                                                    tblAut.empleado AS empleadoAutoriza, 
                                        //                                                    tblAut.num_autorizaciones AS tblAutNumAutorizaciones 
                                        //                                                FROM so_area_cta_autorizacion tblPrincipal 
                                        //                                                    LEFT JOIN so_empleados_area_cta tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                        //                                                    LEFT JOIN so_rel_tipos_vobo_area_cta tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                        //                                                    LEFT JOIN so_empleados_autoriza_area_cta tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                        //                                                    LEFT JOIN empleados empVobo ON tblVobo.empleado = empVobo.empleado 
                                        //                                                WHERE 
                                        //                                                    tblPrincipal.area = {0} AND tblPrincipal.cuenta = {1} AND 
                                        //                                                    tblPrincipal.monto_minimo_autoriza <= {2} AND 
                                        //                                                    tblPrincipal.monto_maximo_autoriza >= {2} AND 
                                        //                                                    tblGrupos.tipo IN ({3}) 
                                        //                                                ORDER BY tblPrincipal.consecutivo", compraEK1.area, compraEK1.cuenta, total, stringListTipoGrupo)
                                        //                                        );
                                    }

                                    //if (facultamientosEK != null)
                                    if (facultamientosEK.Count() > 0)
                                    {
                                        var facultamientos = facultamientosEK;

                                        foreach (var fac in facultamientos)
                                        {
                                            if (fac.empleadoVobo != null && fac.empleadoVobo > 0 && !vobos.Any(x => x.usu_numero == (int)fac.empleadoVobo))
                                            {
                                                vobos.Add(new VoboDTO
                                                {
                                                    usu_numero = fac.empleadoVobo != null ? (int)fac.empleadoVobo : 0,
                                                    usu_nombre = fac.empleadoVobo != null ? fac.empleadoVoboDesc : "",
                                                    numVobos = fac.tblVoboNumAutorizaciones != null ? (int)fac.tblVoboNumAutorizaciones : 0,
                                                    consecutivo = 0
                                                });
                                            }
                                        }
                                    }
                                    #endregion
                                }

                                if (compraEK1.autoriza_activos == 1 && compraEK1.tmc == 0)
                                {
                                    #region VoBos por Activo Fijo
                                    var empleadosVoboEK = consultaCheckProductivo(
                                        string.Format(@"SELECT 
                                                v.*,
                                                emp.descripcion AS empleadoDesc 
                                            FROM so_cc_vobo v 
                                                INNER JOIN empleados emp ON v.empleado = emp.empleado 
                                            WHERE cc = '{0}'", compraEK1.cc)
                                    );

                                    if (empleadosVoboEK != null)
                                    {
                                        var empleadosVobo = (List<dynamic>)empleadosVoboEK.ToObject<List<dynamic>>();

                                        foreach (var emp in empleadosVobo)
                                        {
                                            vobos.Add(new VoboDTO
                                            {
                                                usu_numero = (int)emp.empleado,
                                                usu_nombre = (string)emp.empleadoDesc,
                                                numVobos = 2, //Las compras de Activo Fijo siempre llevan 2.
                                                consecutivo = 0
                                            });
                                        }
                                    }
                                    #endregion
                                }

                                if (compraEK1.autoriza_activos == 0 && compraEK1.tmc == 1)
                                {
                                    #region VoBos por TMC
                                    var empleadosVoboTMCEK = consultaCheckProductivo(string.Format(@"SELECT * FROM empleados WHERE vobo_tmc = 1"));

                                    if (empleadosVoboTMCEK != null)
                                    {
                                        var empleadosVoboTMC = (List<dynamic>)empleadosVoboTMCEK.ToObject<List<dynamic>>();

                                        foreach (var emp in empleadosVoboTMC)
                                        {
                                            vobos.Add(new VoboDTO
                                            {
                                                usu_numero = (int)emp.empleado,
                                                usu_nombre = (string)emp.descripcion,
                                                numVobos = 1, //Las compras de TMC siempre llevan 1.
                                                consecutivo = 0
                                            });
                                        }
                                    }
                                    #endregion
                                }

                                #region Compra Traspaso de Almacén
                                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                                {
                                    if (compraEK1.proveedor == 5412) //Verificar que la compra tenga proveedor de Construplan
                                    {
                                        var listaPartidasEK = _contextEnkontrol.Select<OrdenCompraDetDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                        {
                                            consulta = @"SELECT * FROM so_orden_compra_det WHERE cc = ? AND numero = ?",
                                            parametros = new List<OdbcParameterDTO> {
                                    new OdbcParameterDTO() { nombre = "cc", tipo = OdbcType.VarChar, valor = compraEK1.cc },
                                    new OdbcParameterDTO() { nombre = "numero", tipo = OdbcType.Numeric, valor = compraEK1.numero }
                                }
                                        });

                                        if (listaPartidasEK.Count() > 0)
                                        {
                                            if (listaPartidasEK.FirstOrDefault(x => x.partida == 1).area == 1 && listaPartidasEK.FirstOrDefault(x => x.partida == 1).cuenta == 9) //Verificar que la compra tenga el área-cuenta "1-9" en la primer partida
                                            {
                                                vobos = new List<VoboDTO>();
                                                //return new List<VoboDTO>();
                                            }
                                        }
                                    }
                                }
                                #endregion

                                foreach (var item in vobos)
                                {
                                    var objVobo = getUsuarioEnKontrol(compra.vobo)[0].descripcion.Value;
                                    if (objVobo != null && objVobo != "DEFAULT")
                                        item.color = "green";
                                    else
                                        item.color = "red";
                                }
                                Tuple<int, List<VoboDTO>> _resultado = new Tuple<int, List<VoboDTO>>(compra.id, vobos);
                                resultado.Add(_resultado);
                                //return vobos;
                            }
                            else
                            {
                                List<VoboDTO> vobos = new List<VoboDTO>();
                                Tuple<int, List<VoboDTO>> _resultado = new Tuple<int, List<VoboDTO>>(compra.id, vobos);
                                resultado.Add(_resultado);
                                //return new List<VoboDTO>();
                            }
                        }
                        else
                        {
                            List<VoboDTO> vobos = new List<VoboDTO>();
                            Tuple<int, List<VoboDTO>> _resultado = new Tuple<int, List<VoboDTO>>(compra.id, vobos);
                            resultado.Add(_resultado);
                            //return new List<VoboDTO>();
                        }
                    }
                    #endregion
                }
                else
                {
                    //if (compra.cc.Length == 6)
                    //{
                    //    tblP_CC objCC = _context.tblP_CC.Where(w => w.cc == compra.cc && w.estatus).FirstOrDefault();
                    //    if (objCC != null)
                    //        compra.cc = objCC.ccRH;
                    //}
                    List<tblCom_OrdenCompraDet> listaComprasDetalle = new List<tblCom_OrdenCompraDet>();
                    listaComprasDetalle = _context.tblCom_OrdenCompraDet.Where(y => y.estatusRegistro && comprasEK1IDs.Contains(y.idOrdenCompra)).ToList();

                    foreach (var compra in compras)
                    {
                        /*if (vSesiones.sesionEmpresaActual == 1 || vSesiones.sesionEmpresaActual == 4)
                        {
                            compraEK = consultaCheckProductivo(
                                string.Format(@"SELECT 
                                            oc.* 
                                        FROM so_orden_compra oc 
                                        WHERE oc.cc = '{0}' AND oc.numero = {1}", compra.cc, compra.numero)
                            );
                        }
                        else*/
                        if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                        {
                            //string strQuery = string.Format(@"SELECT * FROM tblCom_OrdenCompra WHERE cc = '{0}' AND numero = {1} AND estatusRegistro = {2} AND PERU_tipoCompra = {3}", compra.cc, compra.numero, 1, compra.PERU_tipoCompra);
                            //compraEK = _context.Select<OrdenCompraDTO>(new DapperDTO
                            //{
                            //    baseDatos = MainContextEnum.PERU,
                            //    consulta = strQuery,
                            //    parametros = new { cc = compra.cc, numero = compra.numero, estatusRegistro = true }
                            //}).FirstOrDefault();

                            //compraEK = _context.tblCom_OrdenCompra.Where(x => x.cc == compra.cc && x.numero == compra.numero && x.estatusRegistro && x.PERU_tipoCompra == compra.PERU_tipoCompra).ToList().Select(x => new OrdenCompraDTO
                            //{
                            //    autoriza_activos = 0,
                            //    tmc = 0,
                            //    cc = x.cc,
                            //    id = x.id,
                            //    numero = x.numero,
                            //    moneda = Convert.ToInt32(x.moneda),
                            //    total = x.total,
                            //    tipo_cambio = x.tipo_cambio,
                            //    area = 0,
                            //    cuenta = 0
                            //}).FirstOrDefault();
                            compraEK = comprasEK1.Where(x => x.cc == compra.cc && x.numero == compra.numero && x.PERU_tipoCompra == compra.PERU_tipoCompra).ToList().Select(x => new OrdenCompraDTO
                            {
                                autoriza_activos = 0,
                                tmc = 0,
                                cc = x.cc,
                                id = x.id,
                                numero = x.numero,
                                moneda = Convert.ToInt32(x.moneda),
                                total = x.total,
                                tipo_cambio = x.tipo_cambio,
                                area = 0,
                                cuenta = 0
                            }).FirstOrDefault();

                            OrdenCompraDTO compraEnkontrol = compraEK;

                            //var listaCompraDetalle = _context.tblCom_OrdenCompraDet.Where(y => y.cc == compra.cc && y.numero == compra.numero && y.estatusRegistro && y.idOrdenCompra == compraEnkontrol.id).ToList();
                            var listaCompraDetalle = listaComprasDetalle.Where(y => y.cc == compra.cc && y.numero == compra.numero && y.estatusRegistro && y.idOrdenCompra == compraEnkontrol.id).ToList();


                            foreach (var det in listaCompraDetalle)
                            {
                                var registroInsumoStarsoft = listaInsumosStarsoft.FirstOrDefault(x => x.ACODIGO == ("0" + det.insumo));
                                if (registroInsumoStarsoft != null)
                                {
                                    if (registroInsumoStarsoft.ATIPO == "10")
                                    {
                                        compraEK.autoriza_activos = 1;
                                    }
                                }
                            }
                        }
                        else
                        {
                            compraEK = comprasEK1.FirstOrDefault(x => x.cc == compra.cc && x.numero == compra.numero);
                            //                            compraEK = consultaCheckProductivo(
                            //                                string.Format(@"SELECT 
                            //                                            oc.*, 
                            //                                            (SELECT TOP 1 det.area FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS area, 
                            //                                            (SELECT TOP 1 det.cuenta FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS cuenta 
                            //                                        FROM so_orden_compra oc 
                            //                                        WHERE oc.cc = '{0}' AND oc.numero = {1}", compra.cc, compra.numero)
                            //                            );
                        }

                        if (compraEK != null)
                        {
                            OrdenCompraDTO compraEnkontrol = new OrdenCompraDTO();

                            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                                compraEnkontrol = compraEK;
                            else
                                compraEnkontrol = ((List<OrdenCompraDTO>)compraEK.ToObject<List<OrdenCompraDTO>>())[0];

                            List<VoboDTO> vobos = new List<VoboDTO>();

                            if (compraEnkontrol.autoriza_activos == 0 && compraEnkontrol.tmc == 0)
                            {
                                #region VoBos por Centro de Costo, monto y Tipo-Grupo
                                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                                    compraEnkontrol.cc = Get_CCRH(compraEnkontrol.cc);

                                List<dynamic> partidas = new List<dynamic>();

                                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                                {
                                    //partidas = _context.Select<dynamic>(new DapperDTO
                                    //{
                                    //    baseDatos = MainContextEnum.PERU,
                                    //    consulta = @"SELECT * FROM tblCom_OrdenCompraDet WHERE idOrdenCompra = @idOrdenCompra AND estatusRegistro = @estatusRegistro ",
                                    //    parametros = new { idOrdenCompra = compraEnkontrol.id, estatusRegistro = true }
                                    //}).ToList();
                                    partidas = _context.tblCom_OrdenCompraDet.Where(x => x.idOrdenCompra == compraEnkontrol.id && x.estatusRegistro).Select(x => new
                                    {
                                        insumo = x.insumo
                                    }).ToList<dynamic>();
                                }
                                else
                                {
                                    partidas = (List<dynamic>)consultaCheckProductivo(
                                        string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", compraEnkontrol.cc, compraEnkontrol.numero)
                                    ).ToObject<List<dynamic>>();
                                }

                                //var listTipoGrupo = partidas.Select(x => Int32.Parse(((int)x.insumo).ToString().Substring(0, 3))).ToList();
                                var stringListTipoGrupo = string.Join(", ", listTipoGrupo);
                                var total = compraEnkontrol.moneda == 2 ? (compraEnkontrol.total * compraEnkontrol.tipo_cambio) : compraEnkontrol.total;
                                dynamic facultamientosEK = null;

                                #region ES OC INTERNA
                                if (compra.esOC_Interna)
                                {
                                    compraEnkontrol.cc = !string.IsNullOrEmpty(compra.cc) ? compra.cc.ToUpper() : string.Empty;
                                }
                                #endregion

                                if (vSesiones.sesionEmpresaActual == 1 || vSesiones.sesionEmpresaActual == 4 || vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                                {
                                    facultamientosEK = facultamientosEK = lstFacultamientosEK.Where(x => x.cc == compra.cc && x.monto_minimo_autoriza <= total && x.monto_maximo_autoriza >= total && listTipoGrupo.Contains(x.tipoGrupo ?? 0)).ToList();
                                    //                                    if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                                    //                                    {                                        
                                    //                                        facultamientosEK = consultaCheckProductivo(
                                    //                                        string.Format(@"SELECT 
                                    //                                                    tblPrincipal.cc, 
                                    //                                                    tblPrincipal.num_autorizacioines AS tblPrincipalNumAutorizaciones, 
                                    //                                                    tblPrincipal.monto_minimo_autoriza, 
                                    //                                                    tblPrincipal.monto_maximo_autoriza, 
                                    //                                                    tblPrincipal.consecutivo, 
                                    //                                                    
                                    //                                                    tblVobo.empleado AS empleadoVobo, 
                                    //                                                    empVobo.descripcion AS empleadoVoboDesc, 
                                    //                                                    tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                    //                                                    
                                    //                                                    tblGrupos.tipo AS tipoGrupo, 
                                    //                                                    tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                    //                                                    
                                    //                                                    tblAut.empleado AS empleadoAutoriza, 
                                    //                                                    tblAut.num_autorizaciones AS tblAutNumAutorizaciones, 
                                    //                                                    tblAut.orden AS ordenAutorizacion 
                                    //                                                FROM so_cc_autorizacion tblPrincipal 
                                    //                                                    LEFT JOIN so_empleados_cc tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                    //                                                    LEFT JOIN so_rel_tipos_vobo tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                    //                                                    LEFT JOIN so_empleados_autoriza_cc tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                    //                                                    LEFT JOIN empleados empVobo ON tblVobo.empleado = empVobo.empleado 
                                    //                                                WHERE 
                                    //                                                    tblPrincipal.cc = '{0}' AND 
                                    //                                                    tblPrincipal.monto_minimo_autoriza <= {1} AND 
                                    //                                                    tblPrincipal.monto_maximo_autoriza >= {1} 
                                    //                                                ORDER BY tblPrincipal.consecutivo", compraEnkontrol.cc.ToUpper(), total)
                                    //                                        );
                                    //                                    }
                                    //                                    else
                                    //                                    {
                                    //                                        facultamientosEK = consultaCheckProductivo(
                                    //                                        string.Format(@"SELECT 
                                    //                                                    tblPrincipal.cc, 
                                    //                                                    tblPrincipal.num_autorizacioines AS tblPrincipalNumAutorizaciones, 
                                    //                                                    tblPrincipal.monto_minimo_autoriza, 
                                    //                                                    tblPrincipal.monto_maximo_autoriza, 
                                    //                                                    tblPrincipal.consecutivo, 
                                    //                                                    
                                    //                                                    tblVobo.empleado AS empleadoVobo, 
                                    //                                                    empVobo.descripcion AS empleadoVoboDesc, 
                                    //                                                    tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                    //                                                    
                                    //                                                    tblGrupos.tipo AS tipoGrupo, 
                                    //                                                    tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                    //                                                    
                                    //                                                    tblAut.empleado AS empleadoAutoriza, 
                                    //                                                    tblAut.num_autorizaciones AS tblAutNumAutorizaciones, 
                                    //                                                    tblAut.orden AS ordenAutorizacion 
                                    //                                                FROM so_cc_autorizacion tblPrincipal 
                                    //                                                    LEFT JOIN so_empleados_cc tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                    //                                                    LEFT JOIN so_rel_tipos_vobo tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                    //                                                    LEFT JOIN so_empleados_autoriza_cc tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                    //                                                    LEFT JOIN empleados empVobo ON tblVobo.empleado = empVobo.empleado 
                                    //                                                WHERE 
                                    //                                                    tblPrincipal.cc = '{0}' AND 
                                    //                                                    tblPrincipal.monto_minimo_autoriza <= {1} AND 
                                    //                                                    tblPrincipal.monto_maximo_autoriza >= {1} AND 
                                    //                                                    tblGrupos.tipo IN ({2}) 
                                    //                                                ORDER BY tblPrincipal.consecutivo", compraEnkontrol.cc.ToUpper(), total, stringListTipoGrupo)
                                    //                                        );
                                    //                                    }
                                }
                                else
                                {
                                    if (compra.esOC_Interna)
                                    {
                                        #region LA OC ES INTERNA, POR LO QUE SE PASA SU AREA CUENTA
                                        if (compra.area <= 0 || compra.cuenta <= 0)
                                        {
                                            if (string.IsNullOrEmpty(compra.cc)) { throw new Exception("Ocurrió un error al obtener la información."); }
                                            if (compra.numero <= 0) { throw new Exception("Ocurrió un error al obtener la información."); }

                                            tblCom_OrdenCompraDet_Interna objCompra_Interna = _context.tblCom_OrdenCompraDet_Interna.Where(w => w.cc == compra.cc && w.numero == compra.numero).FirstOrDefault();
                                            if (objCompra_Interna == null)
                                                throw new Exception("Ocurrió un error al obtener la información.");

                                            compra.area = objCompra_Interna.area;
                                            compra.cuenta = objCompra_Interna.cuenta;
                                        }

                                        compraEnkontrol.area = compra.area;
                                        compraEnkontrol.cuenta = compra.cuenta;
                                        #endregion
                                    }
                                    facultamientosEK = facultamientosEK = lstFacultamientosEK.Where(x => x.area == compra.area && x.cuenta == compra.cuenta && x.monto_minimo_autoriza <= total && x.monto_maximo_autoriza >= total && listTipoGrupo.Contains(x.tipoGrupo ?? 0)).ToList();

                                    //                                    facultamientosEK = consultaCheckProductivo(
                                    //                                        string.Format(@"SELECT 
                                    //                                                    tblPrincipal.area, 
                                    //                                                    tblPrincipal.cuenta, 
                                    //                                                    tblPrincipal.num_autorizaciones AS tblPrincipalNumAutorizaciones, 
                                    //                                                    tblPrincipal.monto_minimo_autoriza, 
                                    //                                                    tblPrincipal.monto_maximo_autoriza, 
                                    //                                                    tblPrincipal.consecutivo, 
                                    //                                                    
                                    //                                                    tblVobo.empleado AS empleadoVobo, 
                                    //                                                    empVobo.descripcion AS empleadoVoboDesc, 
                                    //                                                    tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                    //                                                    
                                    //                                                    tblGrupos.tipo AS tipoGrupo, 
                                    //                                                    tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                    //                                                    
                                    //                                                    tblAut.empleado AS empleadoAutoriza, 
                                    //                                                    tblAut.num_autorizaciones AS tblAutNumAutorizaciones 
                                    //                                                FROM so_area_cta_autorizacion tblPrincipal 
                                    //                                                    LEFT JOIN so_empleados_area_cta tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                    //                                                    LEFT JOIN so_rel_tipos_vobo_area_cta tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                    //                                                    LEFT JOIN so_empleados_autoriza_area_cta tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                    //                                                    LEFT JOIN empleados empVobo ON tblVobo.empleado = empVobo.empleado 
                                    //                                                WHERE 
                                    //                                                    tblPrincipal.area = {0} AND tblPrincipal.cuenta = {1} AND 
                                    //                                                    tblPrincipal.monto_minimo_autoriza <= {2} AND 
                                    //                                                    tblPrincipal.monto_maximo_autoriza >= {2} AND 
                                    //                                                    tblGrupos.tipo IN ({3}) 
                                    //                                                ORDER BY tblPrincipal.consecutivo", compraEnkontrol.area, compraEnkontrol.cuenta, total, stringListTipoGrupo)
                                    //                                    );
                                }

                                if (facultamientosEK != null)
                                {
                                    var facultamientos = facultamientosEK;

                                    foreach (var fac in facultamientos)
                                    {
                                        if (fac.empleadoVobo != null && fac.empleadoVobo > 0 && !vobos.Any(x => x.usu_numero == (int)fac.empleadoVobo))
                                        {
                                            vobos.Add(new VoboDTO
                                            {
                                                usu_numero = fac.empleadoVobo != null ? (int)fac.empleadoVobo : 0,
                                                usu_nombre = fac.empleadoVobo != null ? fac.empleadoVoboDesc : "",
                                                numVobos = fac.tblVoboNumAutorizaciones != null ? (int)fac.tblVoboNumAutorizaciones : 0,
                                                consecutivo = 0
                                            });
                                        }
                                    }
                                }
                                #endregion
                            }

                            if (compraEnkontrol.autoriza_activos == 1 && compraEnkontrol.tmc == 0)
                            {
                                #region VoBos por Activo Fijo
                                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                                    compraEnkontrol.cc = Get_CCRH(compraEnkontrol.cc);

                                var empleadosVoboEK = consultaCheckProductivo(
                                    string.Format(@"SELECT 
                                                v.*,
                                                emp.descripcion AS empleadoDesc 
                                            FROM so_cc_vobo v 
                                                INNER JOIN empleados emp ON v.empleado = emp.empleado 
                                            WHERE cc = '{0}'", compraEnkontrol.cc)
                                );

                                if (empleadosVoboEK != null)
                                {
                                    var empleadosVobo = (List<dynamic>)empleadosVoboEK.ToObject<List<dynamic>>();

                                    foreach (var emp in empleadosVobo)
                                    {
                                        vobos.Add(new VoboDTO
                                        {
                                            usu_numero = (int)emp.empleado,
                                            usu_nombre = (string)emp.empleadoDesc,
                                            numVobos = 2, //Las compras de Activo Fijo siempre llevan 2.
                                            consecutivo = 0
                                        });
                                    }
                                }
                                #endregion
                            }

                            if (compraEnkontrol.autoriza_activos == 0 && compraEnkontrol.tmc == 1)
                            {
                                #region VoBos por TMC
                                var empleadosVoboTMCEK = consultaCheckProductivo(string.Format(@"SELECT * FROM empleados WHERE vobo_tmc = 1"));

                                if (empleadosVoboTMCEK != null)
                                {
                                    var empleadosVoboTMC = (List<dynamic>)empleadosVoboTMCEK.ToObject<List<dynamic>>();

                                    foreach (var emp in empleadosVoboTMC)
                                    {
                                        vobos.Add(new VoboDTO
                                        {
                                            usu_numero = (int)emp.empleado,
                                            usu_nombre = (string)emp.descripcion,
                                            numVobos = 1, //Las compras de TMC siempre llevan 1.
                                            consecutivo = 0
                                        });
                                    }
                                }
                                #endregion
                            }

                            #region Compra Traspaso de Almacén
                            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                            {
                                if (compraEnkontrol.proveedor == 5412) //Verificar que la compra tenga proveedor de Construplan
                                {
                                    var listaPartidasEK = _contextEnkontrol.Select<OrdenCompraDetDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                    {
                                        consulta = @"SELECT * FROM so_orden_compra_det WHERE cc = ? AND numero = ?",
                                        parametros = new List<OdbcParameterDTO> {
                                            new OdbcParameterDTO() { nombre = "cc", tipo = OdbcType.VarChar, valor = compraEnkontrol.cc },
                                            new OdbcParameterDTO() { nombre = "numero", tipo = OdbcType.Numeric, valor = compraEnkontrol.numero }
                                        }
                                    });

                                    if (listaPartidasEK.Count() > 0)
                                    {
                                        if (listaPartidasEK.FirstOrDefault(x => x.partida == 1).area == 1 && listaPartidasEK.FirstOrDefault(x => x.partida == 1).cuenta == 9) //Verificar que la compra tenga el área-cuenta "1-9" en la primer partida
                                        {
                                            vobos = new List<VoboDTO>();
                                            //return new List<VoboDTO>();
                                        }
                                    }
                                }
                            }
                            #endregion

                            foreach (var item in vobos)
                            {
                                var objVobo = getUsuarioEnKontrol(compra.vobo)[0].descripcion.Value;
                                if (objVobo != null && objVobo != "DEFAULT")
                                    item.color = "green";
                                else
                                    item.color = "red";
                            }

                            Tuple<int, List<VoboDTO>> _resultado = new Tuple<int, List<VoboDTO>>(compra.id, vobos);
                            resultado.Add(_resultado);
                        }
                        else
                        {
                            List<VoboDTO> vobos = new List<VoboDTO>();
                            Tuple<int, List<VoboDTO>> _resultado = new Tuple<int, List<VoboDTO>>(compra.id, vobos);
                            resultado.Add(_resultado);
                            //return new List<VoboDTO>();
                        }
                    }
                }
            }
            catch (Exception) { return null; }
            return resultado;
        }

        public List<dynamic> getAutorizaciones(OrdenCompraDTO compra)
        {
            try
            {
                dynamic compraEK = null;

                //#region Facultamientos Especiales
                //if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                //{
                //    if (listaFacultamientosEspeciales1 == null)
                //    {
                //        listaFacultamientosEspeciales1 = _context.tblCom_VoboAutorizacionEspecial.Where(x => x.registroActivo).ToList();
                //    }

                //    if (listaFacultamientosEspeciales1.Where(x => x.cc == compra.cc).Count() > 0)
                //    {
                //        var registroCompraEK = ((List<OrdenCompraDTO>)consultaCheckProductivo(
                //        string.Format(@"SELECT * FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", compra.cc, compra.numero)
                //        ).ToObject<List<OrdenCompraDTO>>())[0];
                //        var totalCompraPesos = registroCompraEK.total * registroCompraEK.tipo_cambio;
                //        var listaFacultamientosEspeciales = listaFacultamientosEspeciales1.Where(x => x.cc == compra.cc && totalCompraPesos >= x.monto_minimo && totalCompraPesos <= x.monto_maximo).ToList();
                //        //var listaFacultamientosEspeciales = _context.tblCom_VoboAutorizacionEspecial.Where(x => x.registroActivo && x.cc == compra.cc && totalCompraPesos >= x.monto_minimo && totalCompraPesos <= x.monto_maximo).ToList();

                //        if (listaFacultamientosEspeciales.Count() > 0) //Si se encuentra por lo menos un registro de facultamientos especiales, se brinca toda la lógica normal.
                //        {
                //            if (listaEmpleadosEK1 == null)
                //            {
                //                listaEmpleadosEK1 = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM empleados")).ToObject<List<dynamic>>();
                //            }
                //            //var listaEmpleadosEK = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM empleados")).ToObject<List<dynamic>>();
                //            var listaAutorizaciones = new List<dynamic>();

                //            foreach (var fac in listaFacultamientosEspeciales.Where(x => x.tipo == TipoVoboAutorizacionEnum.AUTORIZACION).ToList())
                //            {
                //                listaAutorizaciones.Add(new
                //                {
                //                    usu_numero = fac.empleado,
                //                    usu_nombre = listaEmpleadosEK1.Where(y => (int)y.empleado == fac.empleado).Select(z => (string)z.descripcion).FirstOrDefault(),
                //                });
                //            }

                //            return listaAutorizaciones;
                //        }
                //    }
                //}

                //if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                //{
                //    if (listaFacultamientosEspeciales1 == null)
                //    {
                //        listaFacultamientosEspeciales1 = _context.tblCom_VoboAutorizacionEspecial.Where(x => x.registroActivo).ToList();
                //    }

                //    if (listaFacultamientosEspeciales1.Count > 0)
                //    {
                //        var registroCompraEK = ((List<OrdenCompraDTO>)consultaCheckProductivo(
                //        string.Format(@"SELECT * FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", compra.cc, compra.numero)
                //        ).ToObject<List<OrdenCompraDTO>>())[0];
                //        var registroCompraDetalleEK = ((List<OrdenCompraDetDTO>)consultaCheckProductivo(
                //            string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", compra.cc, compra.numero)
                //        ).ToObject<List<OrdenCompraDetDTO>>())[0];
                //        var totalCompraPesos = registroCompraEK.total * registroCompraEK.tipo_cambio;
                //        var listaFacultamientosEspeciales = listaFacultamientosEspeciales1.Where(x =>
                //            x.area == registroCompraDetalleEK.area && x.cuenta == registroCompraDetalleEK.cuenta && totalCompraPesos >= x.monto_minimo && totalCompraPesos <= x.monto_maximo
                //        ).ToList();

                //        if (listaFacultamientosEspeciales.Count() > 0) //Si se encuentra por lo menos un registro de facultamientos especiales, se brinca toda la lógica normal.
                //        {
                //            if (listaEmpleadosEK1 == null)
                //            {
                //                listaEmpleadosEK1 = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM empleados")).ToObject<List<dynamic>>();
                //            }
                //            //var listaEmpleadosEK = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM empleados")).ToObject<List<dynamic>>();
                //            var listaAutorizaciones = new List<dynamic>();

                //            foreach (var fac in listaFacultamientosEspeciales.Where(x => x.tipo == TipoVoboAutorizacionEnum.AUTORIZACION).ToList())
                //            {
                //                listaAutorizaciones.Add(new
                //                {
                //                    usu_numero = fac.empleado,
                //                    usu_nombre = listaEmpleadosEK1.Where(y => (int)y.empleado == fac.empleado).Select(z => (string)z.descripcion).FirstOrDefault(),
                //                });
                //            }

                //            return listaAutorizaciones;
                //        }
                //    }
                //}
                //#endregion

                //dynamic compraEK = null;
                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
                {
                    #region COLOMBIA LISTO
                    //
                    if (compra.esOC_Interna)
                    {
                        #region OC INTERNA
                        var compraEK1 = _context.Select<OrdenCompraDTO>(new DapperDTO
                         {
                             baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                             consulta = "SELECT * FROM tblCom_OrdenCompra_Interna WHERE cc = @cc AND numero = @numero",
                             parametros = new { cc = compra.cc, numero = compra.numero }
                         }).FirstOrDefault();

                        if (compraEK1 != null)
                        {
                            var ocInternaDet = _context.tblCom_OrdenCompraDet_Interna.Where(x => x.cc == compra.cc && x.numero == compra.numero).ToList();
                            if (ocInternaDet.Count > 0)
                            {
                                compraEK1.area = ocInternaDet[0].area;
                                compraEK1.cuenta = ocInternaDet[0].cuenta;

                                List<dynamic> listAutoriza = new List<dynamic>();

                                if (compraEK1 != null)
                                {
                                    if (compraEK1.autoriza_activos == 0 && compraEK1.tmc == 0)
                                    {
                                        #region Autorizaciones por Centro de Costo, monto y Tipo-Grupo
                                        var listTipoGrupo = ocInternaDet.Select(x => Int32.Parse(((int)x.insumo).ToString().Substring(0, 3))).ToList();
                                        var stringListTipoGrupo = string.Join(", ", listTipoGrupo);
                                        var total = compraEK1.moneda == 2 ? (compraEK1.total * compraEK1.tipo_cambio) : compraEK1.total;
                                        dynamic facultamientosEK = null;

                                        if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
                                        {
                                            facultamientosEK = _context.Select<dynamic>(new DapperDTO
                                            {
                                                baseDatos = MainContextEnum.Colombia,
                                                consulta = @"SELECT 
                                                                tblPrincipal.cc, 
                                                                tblPrincipal.num_autorizacioines AS tblPrincipalNumAutorizaciones, 
                                                                tblPrincipal.monto_minimo_autoriza, 
                                                                tblPrincipal.monto_maximo_autoriza, 
                                                                tblPrincipal.consecutivo, 
                                                    
                                                                tblVobo.empleado AS empleadoVobo, 
                                                                tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                    
                                                                tblGrupos.tipo AS tipoGrupo, 
                                                                tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                    
                                                                tblAut.empleado AS empleadoAutoriza, 
                                                                empAut.descripcion AS empleadoAutorizaDesc, 
                                                                tblAut.num_autorizaciones AS tblAutNumAutorizaciones, 
                                                                tblAut.orden AS ordenAutorizacion 
                                                            FROM so_cc_autorizacion tblPrincipal 
                                                                LEFT JOIN so_empleados_cc tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                                                LEFT JOIN so_rel_tipos_vobo tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                                                LEFT JOIN so_empleados_autoriza_cc tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                                                LEFT JOIN empleadosFacultamientos empAut ON tblAut.empleado = empAut.empleado 
                                                            WHERE 
                                                                tblPrincipal.cc = '@cc' AND 
                                                                tblPrincipal.monto_minimo_autoriza <= @total AND 
                                                                tblPrincipal.monto_maximo_autoriza >= @total AND 
                                                                tblGrupos.tipo IN (@lstGrupos) 
                                                            ORDER BY tblPrincipal.consecutivo",
                                                parametros = new { cc = compraEK1.cc.ToUpper(), total = total, lstGrupos = stringListTipoGrupo }
                                            }).ToList();

                                            //                                            facultamientosEK = consultaCheckProductivo(
                                            //                                                string.Format(@"SELECT 
                                            //                                                    tblPrincipal.cc, 
                                            //                                                    tblPrincipal.num_autorizacioines AS tblPrincipalNumAutorizaciones, 
                                            //                                                    tblPrincipal.monto_minimo_autoriza, 
                                            //                                                    tblPrincipal.monto_maximo_autoriza, 
                                            //                                                    tblPrincipal.consecutivo, 
                                            //                                                    
                                            //                                                    tblVobo.empleado AS empleadoVobo, 
                                            //                                                    tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                            //                                                    
                                            //                                                    tblGrupos.tipo AS tipoGrupo, 
                                            //                                                    tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                            //                                                    
                                            //                                                    tblAut.empleado AS empleadoAutoriza, 
                                            //                                                    empAut.descripcion AS empleadoAutorizaDesc, 
                                            //                                                    tblAut.num_autorizaciones AS tblAutNumAutorizaciones, 
                                            //                                                    tblAut.orden AS ordenAutorizacion 
                                            //                                                FROM so_cc_autorizacion tblPrincipal 
                                            //                                                    LEFT JOIN so_empleados_cc tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                            //                                                    LEFT JOIN so_rel_tipos_vobo tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                            //                                                    LEFT JOIN so_empleados_autoriza_cc tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                            //                                                    LEFT JOIN empleados empAut ON tblAut.empleado = empAut.empleado 
                                            //                                                WHERE 
                                            //                                                    tblPrincipal.cc = '{0}' AND 
                                            //                                                    tblPrincipal.monto_minimo_autoriza <= {1} AND 
                                            //                                                    tblPrincipal.monto_maximo_autoriza >= {1} AND 
                                            //                                                    tblGrupos.tipo IN ({2}) 
                                            //                                                ORDER BY tblPrincipal.consecutivo", compraEK1.cc.ToUpper(), total, stringListTipoGrupo)
                                            //                                            );
                                        }

                                        if (facultamientosEK != null)
                                        {
                                            var facultamientos = (List<PermisoMontoDTO>)facultamientosEK.ToObject<List<PermisoMontoDTO>>();

                                            foreach (var fac in facultamientos)
                                            {
                                                if (fac.empleadoAutoriza != null && fac.empleadoAutoriza > 0 && !listAutoriza.Any(x => (int)x.usu_numero == (int)fac.empleadoAutoriza))
                                                {
                                                    listAutoriza.Add(new
                                                    {
                                                        usu_numero = (int)fac.empleadoAutoriza,
                                                        usu_nombre = fac.empleadoAutorizaDesc
                                                    });
                                                }
                                            }
                                        }
                                        #endregion
                                    }

                                    if (compraEK1.autoriza_activos == 1 && compraEK1.tmc == 0)
                                    {
                                        #region Autorizaciones por Activo Fijo
                                        var empleadosAutorizaActivoFijoEK = consultaCheckProductivo(string.Format(@"SELECT * FROM DBA.empleados WHERE autoriza_activos_fijos = 1"));

                                        if (empleadosAutorizaActivoFijoEK != null)
                                        {
                                            var empleadosAutorizaActivoFijo = (List<dynamic>)empleadosAutorizaActivoFijoEK.ToObject<List<dynamic>>();

                                            foreach (var emp in empleadosAutorizaActivoFijo)
                                            {
                                                listAutoriza.Add(new VoboDTO
                                                {
                                                    usu_numero = (int)emp.empleado,
                                                    usu_nombre = (string)emp.descripcion
                                                });
                                            }
                                        }
                                        #endregion
                                    }

                                    if (compraEK1.autoriza_activos == 0 && compraEK1.tmc == 1)
                                    {
                                        #region Autorizaciones por TMC
                                        var empleadosAutorizaTMCEK = consultaCheckProductivo(string.Format(@"SELECT * FROM DBA.empleados WHERE autoriza_tmc = 1"));

                                        if (empleadosAutorizaTMCEK != null)
                                        {
                                            var empleadosAutorizaTMC = (List<dynamic>)empleadosAutorizaTMCEK.ToObject<List<dynamic>>();

                                            foreach (var emp in empleadosAutorizaTMC)
                                            {
                                                listAutoriza.Add(new VoboDTO
                                                {
                                                    usu_numero = (int)emp.empleado,
                                                    usu_nombre = (string)emp.descripcion
                                                });
                                            }
                                        }
                                        #endregion
                                    }

                                    #region Compra Traspaso de Almacén
                                    if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                                    {
                                        if (compraEK1.proveedor == 5412) //Verificar que la compra tenga proveedor de Construplan
                                        {
                                            var listaPartidasEK = _contextEnkontrol.Select<OrdenCompraDetDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                            {
                                                consulta = @"SELECT * FROM DBA.so_orden_compra_det WHERE cc = ? AND numero = ?",
                                                parametros = new List<OdbcParameterDTO> {
                                                new OdbcParameterDTO() { nombre = "cc", tipo = OdbcType.VarChar, valor = compraEK1.cc },
                                                new OdbcParameterDTO() { nombre = "numero", tipo = OdbcType.Numeric, valor = compraEK1.numero }
                                            }
                                            });

                                            if (listaPartidasEK.Count() > 0)
                                            {
                                                if (listaPartidasEK.FirstOrDefault(x => x.partida == 1).area == 1 && listaPartidasEK.FirstOrDefault(x => x.partida == 1).cuenta == 9) //Verificar que la compra tenga el área-cuenta "1-9" en la primer partida
                                                {
                                                    //Se asigna como autorizante el empleado 59 (Alexis Samaniego)
                                                    var empleado59 = _contextEnkontrol.Select<dynamic>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                                    {
                                                        consulta = @"SELECT descripcion FROM DBA.empleados WHERE empleado = 59"
                                                    });

                                                    listAutoriza = new List<dynamic> { new { usu_numero = 59, usu_nombre = (string)empleado59[0].descripcion } };
                                                }
                                            }
                                        }
                                    }
                                    #endregion

                                    return listAutoriza;
                                }
                                else
                                {
                                    return new List<dynamic>();
                                }
                            }
                            else
                            {
                                return new List<dynamic>();
                            }
                        }
                        else
                        {
                            return new List<dynamic>();
                        }
                        #endregion
                    }
                    else
                    {
                        if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
                        {
                            compraEK = consultaCheckProductivo(
                                string.Format(@"SELECT oc.* FROM DBA.so_orden_compra oc WHERE oc.vobo is not null AND oc.cc = '{0}' AND oc.numero = {1}", compra.cc, compra.numero)
                            );
                        }
                        else if ((vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru))
                        {
                            compraEK = _context.tblCom_OrdenCompra.Where(x => x.cc == compra.cc && x.numero == compra.numero && x.PERU_tipoCompra == compra.PERU_tipoCompra).ToList().Select(x => new OrdenCompraDTO
                            {
                                id = x.id,
                                autoriza_activos = 0,
                                tmc = 0,
                                cc = x.cc,
                                numero = x.numero,
                                moneda = Convert.ToInt32(x.moneda),
                                total = x.total,
                                tipo_cambio = x.tipo_cambio,
                                area = 0,
                                cuenta = 0
                            }).FirstOrDefault();

                            OrdenCompraDTO compraEnkontrol = compraEK;

                            var listaCompraDetalle = _context.tblCom_OrdenCompraDet.Where(y => y.cc == compra.cc && y.numero == compra.numero && y.estatusRegistro && y.idOrdenCompra == compraEnkontrol.id).ToList();
                        }
                        else
                        {
                            compraEK = consultaCheckProductivo(
                                string.Format(@"SELECT 
                                            oc.*, 
                                            (SELECT TOP 1 det.area FROM DBA.so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS area, 
                                            (SELECT TOP 1 det.cuenta FROM DBA.so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS cuenta 
                                        FROM DBA.so_orden_compra oc 
                                        WHERE oc.vobo is not null AND oc.cc = '{0}' AND oc.numero = {1}", compra.cc, compra.numero)
                            );
                        }

                        List<dynamic> listAutoriza = new List<dynamic>();

                        if (compraEK != null)
                        {
                            OrdenCompraDTO compraEnkontrol = new OrdenCompraDTO();
                            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                                compraEnkontrol = compraEK;
                            else
                                compraEnkontrol = ((List<OrdenCompraDTO>)compraEK.ToObject<List<OrdenCompraDTO>>())[0];

                            if (compraEnkontrol.autoriza_activos == 0 && compraEnkontrol.tmc == 0)
                            {
                                #region Autorizaciones por Centro de Costo, monto y Tipo-Grupo
                                List<dynamic> partidas = new List<dynamic>();

                                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                                {
                                    partidas = _context.tblCom_OrdenCompraDet.Where(x => x.idOrdenCompra == compraEnkontrol.id && x.estatusRegistro).Select(x => new
                                    {
                                        insumo = x.insumo
                                    }).ToList<dynamic>();
                                }
                                else
                                {
                                    partidas = (List<dynamic>)consultaCheckProductivo(
                                        string.Format(@"SELECT * FROM DBA.so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", compraEnkontrol.cc, compraEnkontrol.numero)
                                    ).ToObject<List<dynamic>>();
                                }

                                var listTipoGrupo = partidas.Select(x => Int32.Parse(((int)x.insumo).ToString().Substring(0, 3))).ToList();
                                var stringListTipoGrupo = string.Join(", ", listTipoGrupo);
                                var total = compraEnkontrol.moneda == 2 ? (compraEnkontrol.total * compraEnkontrol.tipo_cambio) : compraEnkontrol.total;
                                //dynamic facultamientosEK = null;
                                List<PermisoMontoDTO> facultamientosEK = new List<PermisoMontoDTO>();

                                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
                                {
                                    if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                                    {
                                        tblP_CC objCC = _context.tblP_CC.Where(w => w.cc == compra.cc && w.estatus).FirstOrDefault();
                                        if (objCC != null)
                                            compraEnkontrol.cc = objCC.ccRH;
                                    }

                                    if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                                    {
                                    }
                                    else
                                    {
                                        string strQuery = string.Format(@"SELECT 
                                                    tblPrincipal.cc, 
                                                    tblPrincipal.num_autorizacioines AS tblPrincipalNumAutorizaciones, 
                                                    tblPrincipal.monto_minimo_autoriza, 
                                                    tblPrincipal.monto_maximo_autoriza, 
                                                    tblPrincipal.consecutivo, 
                                                    
                                                    tblVobo.empleado AS empleadoVobo, 
                                                    tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                    
                                                    tblGrupos.tipo AS tipoGrupo, 
                                                    tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                    
                                                    tblAut.empleado AS empleadoAutoriza, 
                                                    empAut.descripcion AS empleadoAutorizaDesc, 
                                                    tblAut.num_autorizaciones AS tblAutNumAutorizaciones, 
                                                    tblAut.orden AS ordenAutorizacion 
                                                FROM so_cc_autorizacion tblPrincipal 
                                                    LEFT JOIN so_empleados_cc tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                                    LEFT JOIN so_rel_tipos_vobo tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                                    LEFT JOIN so_empleados_autoriza_cc tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                                    LEFT JOIN empleadosFacultamientos empAut ON tblAut.empleado = empAut.empleado 
                                                WHERE 
                                                    tblPrincipal.cc = '{0}' AND 
                                                    tblPrincipal.monto_minimo_autoriza <= {1} AND 
                                                    tblPrincipal.monto_maximo_autoriza >= {1} AND 
                                                    tblGrupos.tipo IN ({2}) 
                                                ORDER BY tblPrincipal.consecutivo", compraEnkontrol.cc.ToUpper(), total, stringListTipoGrupo);

                                        facultamientosEK = _context.Select<PermisoMontoDTO>(new DapperDTO
                                        {
                                            baseDatos = MainContextEnum.Colombia,
                                            consulta = strQuery
                                        }).ToList();
                                        string t = "t";
                                    }
                                }
                                else
                                {
                                }

                                if (facultamientosEK != null)
                                {
                                    var facultamientos = facultamientosEK.ToList();

                                    foreach (var fac in facultamientos)
                                    {
                                        if (fac.empleadoAutoriza != null && fac.empleadoAutoriza > 0 && !listAutoriza.Any(x => (int)x.usu_numero == (int)fac.empleadoAutoriza))
                                        {
                                            listAutoriza.Add(new
                                            {
                                                usu_numero = (int)fac.empleadoAutoriza,
                                                usu_nombre = fac.empleadoAutorizaDesc
                                            });
                                        }
                                    }
                                }
                                #endregion
                            }

                            if (compraEnkontrol.autoriza_activos == 1 && compraEnkontrol.tmc == 0)
                            {
                                #region Autorizaciones por Activo Fijo
                                var empleadosAutorizaActivoFijoEK = consultaCheckProductivo(string.Format(@"SELECT * FROM DBA.empleados WHERE autoriza_activos_fijos = 1"));

                                if (empleadosAutorizaActivoFijoEK != null)
                                {
                                    var empleadosAutorizaActivoFijo = (List<dynamic>)empleadosAutorizaActivoFijoEK.ToObject<List<dynamic>>();

                                    foreach (var emp in empleadosAutorizaActivoFijo)
                                    {
                                        listAutoriza.Add(new VoboDTO
                                        {
                                            usu_numero = (int)emp.empleado,
                                            usu_nombre = (string)emp.descripcion
                                        });
                                    }
                                }
                                #endregion
                            }

                            if (compraEnkontrol.autoriza_activos == 0 && compraEnkontrol.tmc == 1)
                            {
                                #region Autorizaciones por TMC
                                var empleadosAutorizaTMCEK = consultaCheckProductivo(string.Format(@"SELECT * FROM DBA.empleados WHERE autoriza_tmc = 1"));

                                if (empleadosAutorizaTMCEK != null)
                                {
                                    var empleadosAutorizaTMC = (List<dynamic>)empleadosAutorizaTMCEK.ToObject<List<dynamic>>();

                                    foreach (var emp in empleadosAutorizaTMC)
                                    {
                                        listAutoriza.Add(new VoboDTO
                                        {
                                            usu_numero = (int)emp.empleado,
                                            usu_nombre = (string)emp.descripcion
                                        });
                                    }
                                }
                                #endregion
                            }

                            #region Compra Traspaso de Almacén
                            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                            {
                                if (compraEnkontrol.proveedor == 5412) //Verificar que la compra tenga proveedor de Construplan
                                {
                                    var listaPartidasEK = _contextEnkontrol.Select<OrdenCompraDetDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                    {
                                        consulta = @"SELECT * FROM DBA.so_orden_compra_det WHERE cc = ? AND numero = ?",
                                        parametros = new List<OdbcParameterDTO> {
                                    new OdbcParameterDTO() { nombre = "cc", tipo = OdbcType.VarChar, valor = compraEnkontrol.cc },
                                    new OdbcParameterDTO() { nombre = "numero", tipo = OdbcType.Numeric, valor = compraEnkontrol.numero }
                                }
                                    });

                                    if (listaPartidasEK.Count() > 0)
                                    {
                                        if (listaPartidasEK.FirstOrDefault(x => x.partida == 1).area == 1 && listaPartidasEK.FirstOrDefault(x => x.partida == 1).cuenta == 9) //Verificar que la compra tenga el área-cuenta "1-9" en la primer partida
                                        {
                                            //Se asigna como autorizante el empleado 59 (Alexis Samaniego)
                                            var empleado59 = _contextEnkontrol.Select<dynamic>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                            {
                                                consulta = @"SELECT descripcion FROM DBA.empleados WHERE empleado = 59"
                                            });

                                            listAutoriza = new List<dynamic> { new { usu_numero = 59, usu_nombre = (string)empleado59[0].descripcion } };
                                        }
                                    }
                                }
                            }
                            #endregion

                            return listAutoriza;
                        }
                        else
                        {
                            return new List<dynamic>();
                        }
                    }
                    #endregion
                }
                else
                {
                    #region DEMAS EMPRESAS
                    //
                    if (compra.esOC_Interna)
                    {
                        var compraEK1 = _context.Select<OrdenCompraDTO>(new DapperDTO
                        {
                            baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                            consulta = "SELECT * FROM tblCom_OrdenCompra_Interna WHERE cc = @cc AND numero = @numero",
                            parametros = new { cc = compra.cc, numero = compra.numero }
                        }).FirstOrDefault();
                        if (compraEK1 != null)
                        {
                            var ocInternaDet = _context.tblCom_OrdenCompraDet_Interna.Where(x => x.cc == compra.cc && x.numero == compra.numero).ToList();
                            if (ocInternaDet.Count > 0)
                            {
                                compraEK1.area = ocInternaDet[0].area;
                                compraEK1.cuenta = ocInternaDet[0].cuenta;

                                List<dynamic> listAutoriza = new List<dynamic>();

                                if (compraEK1 != null)
                                {
                                    if (compraEK1.autoriza_activos == 0 && compraEK1.tmc == 0)
                                    {
                                        #region Autorizaciones por Centro de Costo, monto y Tipo-Grupo
                                        //var partidas = (List<dynamic>)consultaCheckProductivo(
                                        //    string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", compraEnkontrol.cc, compraEnkontrol.numero)
                                        //).ToObject<List<dynamic>>();
                                        var listTipoGrupo = ocInternaDet.Select(x => Int32.Parse(((int)x.insumo).ToString().Substring(0, 3))).ToList();
                                        var stringListTipoGrupo = string.Join(", ", listTipoGrupo);
                                        var total = compraEK1.moneda == 2 ? (compraEK1.total * compraEK1.tipo_cambio) : compraEK1.total;
                                        dynamic facultamientosEK = null;

                                        if (vSesiones.sesionEmpresaActual == 1 || vSesiones.sesionEmpresaActual == 4 || vSesiones.sesionEmpresaActual == (int)EmpresaEnum.GCPLAN)
                                        {
                                            facultamientosEK = consultaCheckProductivo(
                                                string.Format(@"SELECT 
                                                    tblPrincipal.cc, 
                                                    tblPrincipal.num_autorizacioines AS tblPrincipalNumAutorizaciones, 
                                                    tblPrincipal.monto_minimo_autoriza, 
                                                    tblPrincipal.monto_maximo_autoriza, 
                                                    tblPrincipal.consecutivo, 
                                                    
                                                    tblVobo.empleado AS empleadoVobo, 
                                                    tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                    
                                                    tblGrupos.tipo AS tipoGrupo, 
                                                    tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                    
                                                    tblAut.empleado AS empleadoAutoriza, 
                                                    empAut.descripcion AS empleadoAutorizaDesc, 
                                                    tblAut.num_autorizaciones AS tblAutNumAutorizaciones, 
                                                    tblAut.orden AS ordenAutorizacion 
                                                FROM so_cc_autorizacion tblPrincipal 
                                                    LEFT JOIN so_empleados_cc tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                                    LEFT JOIN so_rel_tipos_vobo tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                                    LEFT JOIN so_empleados_autoriza_cc tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                                    LEFT JOIN empleados empAut ON tblAut.empleado = empAut.empleado 
                                                WHERE 
                                                    tblPrincipal.cc = '{0}' AND 
                                                    tblPrincipal.monto_minimo_autoriza <= {1} AND 
                                                    tblPrincipal.monto_maximo_autoriza >= {1} AND 
                                                    tblGrupos.tipo IN ({2}) 
                                                ORDER BY tblPrincipal.consecutivo", compraEK1.cc.ToUpper(), total, stringListTipoGrupo)
                                            );
                                        }
                                        else
                                        {
                                            #region OC INTERNA
                                            if (compra.esOC_Interna)
                                            {
                                                compraEK1.area = compra.area;
                                                compraEK1.cuenta = compra.cuenta;
                                            }
                                            #endregion

                                            facultamientosEK = consultaCheckProductivo(
                                                string.Format(@"SELECT 
                                                    tblPrincipal.area, 
                                                    tblPrincipal.cuenta, 
                                                    tblPrincipal.num_autorizaciones AS tblPrincipalNumAutorizaciones, 
                                                    tblPrincipal.monto_minimo_autoriza, 
                                                    tblPrincipal.monto_maximo_autoriza, 
                                                    tblPrincipal.consecutivo, 
                                                    
                                                    tblVobo.empleado AS empleadoVobo, 
                                                    tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                    
                                                    tblGrupos.tipo AS tipoGrupo, 
                                                    tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                    
                                                    tblAut.empleado AS empleadoAutoriza, 
                                                    empAut.descripcion AS empleadoAutorizaDesc, 
                                                    tblAut.num_autorizaciones AS tblAutNumAutorizaciones 
                                                FROM so_area_cta_autorizacion tblPrincipal 
                                                    LEFT JOIN so_empleados_area_cta tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                                    LEFT JOIN so_rel_tipos_vobo_area_cta tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                                    LEFT JOIN so_empleados_autoriza_area_cta tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                                    LEFT JOIN empleados empAut ON tblAut.empleado = empAut.empleado 
                                                WHERE 
                                                    tblPrincipal.area = {0} AND tblPrincipal.cuenta = {1} AND 
                                                    tblPrincipal.monto_minimo_autoriza <= {2} AND 
                                                    tblPrincipal.monto_maximo_autoriza >= {2} AND 
                                                    tblGrupos.tipo IN ({3}) 
                                                ORDER BY tblPrincipal.consecutivo", compraEK1.area, compraEK1.cuenta, total, stringListTipoGrupo)
                                            );
                                        }

                                        if (facultamientosEK != null)
                                        {
                                            var facultamientos = (List<PermisoMontoDTO>)facultamientosEK.ToObject<List<PermisoMontoDTO>>();

                                            foreach (var fac in facultamientos)
                                            {
                                                if (fac.empleadoAutoriza != null && fac.empleadoAutoriza > 0 && !listAutoriza.Any(x => (int)x.usu_numero == (int)fac.empleadoAutoriza))
                                                {
                                                    listAutoriza.Add(new
                                                    {
                                                        usu_numero = (int)fac.empleadoAutoriza,
                                                        usu_nombre = fac.empleadoAutorizaDesc
                                                    });
                                                }
                                            }
                                        }
                                        #endregion
                                    }

                                    if (compraEK1.autoriza_activos == 1 && compraEK1.tmc == 0)
                                    {
                                        #region Autorizaciones por Activo Fijo
                                        var empleadosAutorizaActivoFijoEK = consultaCheckProductivo(string.Format(@"SELECT * FROM empleados WHERE autoriza_activos_fijos = 1"));

                                        if (empleadosAutorizaActivoFijoEK != null)
                                        {
                                            var empleadosAutorizaActivoFijo = (List<dynamic>)empleadosAutorizaActivoFijoEK.ToObject<List<dynamic>>();

                                            foreach (var emp in empleadosAutorizaActivoFijo)
                                            {
                                                listAutoriza.Add(new VoboDTO
                                                {
                                                    usu_numero = (int)emp.empleado,
                                                    usu_nombre = (string)emp.descripcion
                                                });
                                            }
                                        }
                                        #endregion
                                    }

                                    if (compraEK1.autoriza_activos == 0 && compraEK1.tmc == 1)
                                    {
                                        #region Autorizaciones por TMC
                                        var empleadosAutorizaTMCEK = consultaCheckProductivo(string.Format(@"SELECT * FROM empleados WHERE autoriza_tmc = 1"));

                                        if (empleadosAutorizaTMCEK != null)
                                        {
                                            var empleadosAutorizaTMC = (List<dynamic>)empleadosAutorizaTMCEK.ToObject<List<dynamic>>();

                                            foreach (var emp in empleadosAutorizaTMC)
                                            {
                                                listAutoriza.Add(new VoboDTO
                                                {
                                                    usu_numero = (int)emp.empleado,
                                                    usu_nombre = (string)emp.descripcion
                                                });
                                            }
                                        }
                                        #endregion
                                    }

                                    #region Compra Traspaso de Almacén
                                    if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                                    {
                                        if (compraEK1.proveedor == 5412) //Verificar que la compra tenga proveedor de Construplan
                                        {
                                            var listaPartidasEK = _contextEnkontrol.Select<OrdenCompraDetDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                            {
                                                consulta = @"SELECT * FROM so_orden_compra_det WHERE cc = ? AND numero = ?",
                                                parametros = new List<OdbcParameterDTO> {
                                    new OdbcParameterDTO() { nombre = "cc", tipo = OdbcType.VarChar, valor = compraEK1.cc },
                                    new OdbcParameterDTO() { nombre = "numero", tipo = OdbcType.Numeric, valor = compraEK1.numero }
                                }
                                            });

                                            if (listaPartidasEK.Count() > 0)
                                            {
                                                if (listaPartidasEK.FirstOrDefault(x => x.partida == 1).area == 1 && listaPartidasEK.FirstOrDefault(x => x.partida == 1).cuenta == 9) //Verificar que la compra tenga el área-cuenta "1-9" en la primer partida
                                                {
                                                    //Se asigna como autorizante el empleado 59 (Alexis Samaniego)
                                                    var empleado59 = _contextEnkontrol.Select<dynamic>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                                    {
                                                        consulta = @"SELECT descripcion FROM empleados WHERE empleado = 59"
                                                    });

                                                    listAutoriza = new List<dynamic> { new { usu_numero = 59, usu_nombre = (string)empleado59[0].descripcion } };
                                                }
                                            }
                                        }
                                    }
                                    #endregion

                                    return listAutoriza;
                                }
                                else
                                {
                                    return new List<dynamic>();
                                }
                            }
                            else
                            {
                                return new List<dynamic>();
                            }
                        }
                        else
                        {
                            return new List<dynamic>();
                        }
                    }
                    else
                    {
                        if (vSesiones.sesionEmpresaActual == 1 || vSesiones.sesionEmpresaActual == 4 || vSesiones.sesionEmpresaActual == (int)EmpresaEnum.GCPLAN)
                        {
                            compraEK = consultaCheckProductivo(
                                string.Format(@"SELECT 
                                            oc.* 
                                        FROM so_orden_compra oc 
                                        WHERE oc.cc = '{0}' AND oc.numero = {1}", compra.cc, compra.numero)
                            );
                        }
                        else if ((vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru))
                        {
                            //string strQuery = string.Format(@"SELECT * FROM tblCom_OrdenCompra WHERE cc = '{0}' AND numero = {1} AND PERU_tipoCompra = '{2}'", compra.cc, compra.numero, compra.PERU_tipoCompra);
                            //compraEK = _context.Select<OrdenCompraDTO>(new DapperDTO
                            //{
                            //    baseDatos = MainContextEnum.PERU,
                            //    consulta = strQuery
                            //}).FirstOrDefault();

                            compraEK = _context.tblCom_OrdenCompra.Where(x => x.cc == compra.cc && x.numero == compra.numero && x.PERU_tipoCompra == compra.PERU_tipoCompra).ToList().Select(x => new OrdenCompraDTO
                            {
                                id = x.id,
                                autoriza_activos = 0,
                                tmc = 0,
                                cc = x.cc,
                                numero = x.numero,
                                moneda = Convert.ToInt32(x.moneda),
                                total = x.total,
                                tipo_cambio = x.tipo_cambio,
                                area = 0,
                                cuenta = 0
                            }).FirstOrDefault();

                            OrdenCompraDTO compraEnkontrol = compraEK;

                            var listaCompraDetalle = _context.tblCom_OrdenCompraDet.Where(y => y.cc == compra.cc && y.numero == compra.numero && y.estatusRegistro && y.idOrdenCompra == compraEnkontrol.id).ToList();

                            using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                            {
                                var listaInsumosStarsoft = _starsoft.MAEART.ToList();

                                foreach (var det in listaCompraDetalle)
                                {
                                    var registroInsumoStarsoft = listaInsumosStarsoft.FirstOrDefault(x => x.ACODIGO == ("0" + det.insumo));

                                    if (registroInsumoStarsoft != null)
                                    {
                                        if (registroInsumoStarsoft.ATIPO == "10")
                                        {
                                            compraEK.autoriza_activos = 1;
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            compraEK = consultaCheckProductivo(
                                string.Format(@"SELECT 
                                            oc.*, 
                                            (SELECT TOP 1 det.area FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS area, 
                                            (SELECT TOP 1 det.cuenta FROM so_orden_compra_det det WHERE oc.cc = det.cc AND oc.numero = det.numero) AS cuenta 
                                        FROM so_orden_compra oc 
                                        WHERE oc.cc = '{0}' AND oc.numero = {1}", compra.cc, compra.numero)
                            );
                        }

                        List<dynamic> listAutoriza = new List<dynamic>();

                        if (compraEK != null)
                        {
                            OrdenCompraDTO compraEnkontrol = new OrdenCompraDTO();
                            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                                compraEnkontrol = compraEK;
                            else
                                compraEnkontrol = ((List<OrdenCompraDTO>)compraEK.ToObject<List<OrdenCompraDTO>>())[0];

                            if (compraEnkontrol.autoriza_activos == 0 && compraEnkontrol.tmc == 0)
                            {
                                #region Autorizaciones por Centro de Costo, monto y Tipo-Grupo
                                List<dynamic> partidas = new List<dynamic>();

                                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                                {
                                    //int idOC = _context.tblCom_OrdenCompra.Where(w => w.cc == compra.cc && w.numero == compra.numero && w.estatusRegistro).Select(s => s.id).FirstOrDefault();
                                    //partidas = _context.Select<dynamic>(new DapperDTO
                                    //{
                                    //    baseDatos = MainContextEnum.PERU,
                                    //    consulta = @"SELECT * FROM tblCom_OrdenCompraDet WHERE idOrdenCompra = @idOrdenCompra AND estatusRegistro = @estatusRegistro",
                                    //    parametros = new { idOrdenCompra = compraEnkontrol.id, estatusRegistro = true }
                                    //}).ToList();
                                    partidas = _context.tblCom_OrdenCompraDet.Where(x => x.idOrdenCompra == compraEnkontrol.id && x.estatusRegistro).Select(x => new
                                    {
                                        insumo = x.insumo
                                    }).ToList<dynamic>();
                                }
                                else
                                {
                                    partidas = (List<dynamic>)consultaCheckProductivo(
                                        string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", compraEnkontrol.cc, compraEnkontrol.numero)
                                    ).ToObject<List<dynamic>>();
                                }

                                var listTipoGrupo = partidas.Select(x => Int32.Parse(((int)x.insumo).ToString().Substring(0, 3))).ToList();
                                var stringListTipoGrupo = string.Join(", ", listTipoGrupo);
                                var total = compraEnkontrol.moneda == 2 ? (compraEnkontrol.total * compraEnkontrol.tipo_cambio) : compraEnkontrol.total;
                                dynamic facultamientosEK = null;

                                if (vSesiones.sesionEmpresaActual == 1 || vSesiones.sesionEmpresaActual == 4 || vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru || vSesiones.sesionEmpresaActual == (int)EmpresaEnum.GCPLAN)
                                {
                                    if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                                    {
                                        tblP_CC objCC = _context.tblP_CC.Where(w => w.cc == compra.cc && w.estatus).FirstOrDefault();
                                        if (objCC != null)
                                            compraEnkontrol.cc = objCC.ccRH;
                                    }

                                    if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                                    {
                                        #region Familias Starsoft-Enkontrol
                                        var stringCondicionFamilia = "";
                                        var listTipoGrupoString = partidas.Select(x => ((int)x.insumo).ToString().Substring(1, 4)).ToList(); //Se empieza en la segunda posición ya que el número de insumo viene como entero.
                                        var listaFamiliasStarsoftEnkontrol = _context.tblCom_FamiliaStarsoftEnkontrol.Where(x => x.registroActivo && listTipoGrupoString.Contains(x.codigo_starsoft)).ToList();

                                        if (listaFamiliasStarsoftEnkontrol.Count() > 0)
                                        {
                                            stringCondicionFamilia = string.Format(@" AND tblGrupos.tipo IN ({0})", string.Join(", ", listaFamiliasStarsoftEnkontrol.Select(x => x.codigo_enkontrol).ToList()));
                                        }
                                        #endregion

                                        facultamientosEK = consultaCheckProductivo(
                                        string.Format(@"SELECT 
                                                    tblPrincipal.cc, 
                                                    tblPrincipal.num_autorizacioines AS tblPrincipalNumAutorizaciones, 
                                                    tblPrincipal.monto_minimo_autoriza, 
                                                    tblPrincipal.monto_maximo_autoriza, 
                                                    tblPrincipal.consecutivo, 
                                                    
                                                    tblVobo.empleado AS empleadoVobo, 
                                                    tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                    
                                                    tblGrupos.tipo AS tipoGrupo, 
                                                    tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                    
                                                    tblAut.empleado AS empleadoAutoriza, 
                                                    empAut.descripcion AS empleadoAutorizaDesc, 
                                                    tblAut.num_autorizaciones AS tblAutNumAutorizaciones, 
                                                    tblAut.orden AS ordenAutorizacion 
                                                FROM so_cc_autorizacion tblPrincipal 
                                                    LEFT JOIN so_empleados_cc tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                                    LEFT JOIN so_rel_tipos_vobo tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                                    LEFT JOIN so_empleados_autoriza_cc tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                                    LEFT JOIN empleados empAut ON tblAut.empleado = empAut.empleado 
                                                WHERE 
                                                    tblPrincipal.cc = '{0}' AND 
                                                    tblPrincipal.monto_minimo_autoriza <= {1} AND 
                                                    tblPrincipal.monto_maximo_autoriza >= {1} {2} 
                                                ORDER BY tblPrincipal.consecutivo", compraEnkontrol.cc.ToUpper(), total, stringCondicionFamilia)
                                    );
                                    }
                                    else
                                    {
                                        facultamientosEK = consultaCheckProductivo(
                                        string.Format(@"SELECT 
                                                    tblPrincipal.cc, 
                                                    tblPrincipal.num_autorizacioines AS tblPrincipalNumAutorizaciones, 
                                                    tblPrincipal.monto_minimo_autoriza, 
                                                    tblPrincipal.monto_maximo_autoriza, 
                                                    tblPrincipal.consecutivo, 
                                                    
                                                    tblVobo.empleado AS empleadoVobo, 
                                                    tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                    
                                                    tblGrupos.tipo AS tipoGrupo, 
                                                    tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                    
                                                    tblAut.empleado AS empleadoAutoriza, 
                                                    empAut.descripcion AS empleadoAutorizaDesc, 
                                                    tblAut.num_autorizaciones AS tblAutNumAutorizaciones, 
                                                    tblAut.orden AS ordenAutorizacion 
                                                FROM so_cc_autorizacion tblPrincipal 
                                                    LEFT JOIN so_empleados_cc tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                                    LEFT JOIN so_rel_tipos_vobo tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                                    LEFT JOIN so_empleados_autoriza_cc tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                                    LEFT JOIN empleados empAut ON tblAut.empleado = empAut.empleado 
                                                WHERE 
                                                    tblPrincipal.cc = '{0}' AND 
                                                    tblPrincipal.monto_minimo_autoriza <= {1} AND 
                                                    tblPrincipal.monto_maximo_autoriza >= {1} AND 
                                                    tblGrupos.tipo IN ({2}) 
                                                ORDER BY tblPrincipal.consecutivo", compraEnkontrol.cc.ToUpper(), total, stringListTipoGrupo)
                                    );
                                    }
                                }
                                else
                                {
                                    #region OC INTERNA
                                    if (compra.esOC_Interna)
                                    {
                                        compraEnkontrol.area = compra.area;
                                        compraEnkontrol.cuenta = compra.cuenta;
                                    }
                                    #endregion

                                    facultamientosEK = consultaCheckProductivo(
                                        string.Format(@"SELECT 
                                                    tblPrincipal.area, 
                                                    tblPrincipal.cuenta, 
                                                    tblPrincipal.num_autorizaciones AS tblPrincipalNumAutorizaciones, 
                                                    tblPrincipal.monto_minimo_autoriza, 
                                                    tblPrincipal.monto_maximo_autoriza, 
                                                    tblPrincipal.consecutivo, 
                                                    
                                                    tblVobo.empleado AS empleadoVobo, 
                                                    tblVobo.num_autorizaciones AS tblVoboNumAutorizaciones, 
                                                    
                                                    tblGrupos.tipo AS tipoGrupo, 
                                                    tblGrupos.num_autorizaciones AS tblGruposNumAutorizaciones, 
                                                    
                                                    tblAut.empleado AS empleadoAutoriza, 
                                                    empAut.descripcion AS empleadoAutorizaDesc, 
                                                    tblAut.num_autorizaciones AS tblAutNumAutorizaciones 
                                                FROM so_area_cta_autorizacion tblPrincipal 
                                                    LEFT JOIN so_empleados_area_cta tblVobo ON tblPrincipal.consecutivo = tblVobo.consecutivo 
                                                    LEFT JOIN so_rel_tipos_vobo_area_cta tblGrupos ON tblPrincipal.consecutivo = tblGrupos.consecutivo 
                                                    LEFT JOIN so_empleados_autoriza_area_cta tblAut ON tblPrincipal.consecutivo = tblAut.consecutivo 
                                                    LEFT JOIN empleados empAut ON tblAut.empleado = empAut.empleado 
                                                WHERE 
                                                    tblPrincipal.area = {0} AND tblPrincipal.cuenta = {1} AND 
                                                    tblPrincipal.monto_minimo_autoriza <= {2} AND 
                                                    tblPrincipal.monto_maximo_autoriza >= {2} AND 
                                                    tblGrupos.tipo IN ({3}) 
                                                ORDER BY tblPrincipal.consecutivo", compraEnkontrol.area, compraEnkontrol.cuenta, total, stringListTipoGrupo)
                                    );
                                }

                                if (facultamientosEK != null)
                                {
                                    var facultamientos = (List<PermisoMontoDTO>)facultamientosEK.ToObject<List<PermisoMontoDTO>>();

                                    foreach (var fac in facultamientos)
                                    {
                                        if (fac.empleadoAutoriza != null && fac.empleadoAutoriza > 0 && !listAutoriza.Any(x => (int)x.usu_numero == (int)fac.empleadoAutoriza))
                                        {
                                            listAutoriza.Add(new
                                            {
                                                usu_numero = (int)fac.empleadoAutoriza,
                                                usu_nombre = fac.empleadoAutorizaDesc
                                            });
                                        }
                                    }
                                }
                                #endregion
                            }

                            if (compraEnkontrol.autoriza_activos == 1 && compraEnkontrol.tmc == 0)
                            {
                                #region Autorizaciones por Activo Fijo
                                var empleadosAutorizaActivoFijoEK = consultaCheckProductivo(string.Format(@"SELECT * FROM empleados WHERE autoriza_activos_fijos = 1"));

                                if (empleadosAutorizaActivoFijoEK != null)
                                {
                                    var empleadosAutorizaActivoFijo = (List<dynamic>)empleadosAutorizaActivoFijoEK.ToObject<List<dynamic>>();

                                    foreach (var emp in empleadosAutorizaActivoFijo)
                                    {
                                        listAutoriza.Add(new VoboDTO
                                        {
                                            usu_numero = (int)emp.empleado,
                                            usu_nombre = (string)emp.descripcion
                                        });
                                    }
                                }
                                #endregion
                            }

                            if (compraEnkontrol.autoriza_activos == 0 && compraEnkontrol.tmc == 1)
                            {
                                #region Autorizaciones por TMC
                                var empleadosAutorizaTMCEK = consultaCheckProductivo(string.Format(@"SELECT * FROM empleados WHERE autoriza_tmc = 1"));

                                if (empleadosAutorizaTMCEK != null)
                                {
                                    var empleadosAutorizaTMC = (List<dynamic>)empleadosAutorizaTMCEK.ToObject<List<dynamic>>();

                                    foreach (var emp in empleadosAutorizaTMC)
                                    {
                                        listAutoriza.Add(new VoboDTO
                                        {
                                            usu_numero = (int)emp.empleado,
                                            usu_nombre = (string)emp.descripcion
                                        });
                                    }
                                }
                                #endregion
                            }

                            #region Compra Traspaso de Almacén
                            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                            {
                                if (compraEnkontrol.proveedor == 5412) //Verificar que la compra tenga proveedor de Construplan
                                {
                                    var listaPartidasEK = _contextEnkontrol.Select<OrdenCompraDetDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                    {
                                        consulta = @"SELECT * FROM so_orden_compra_det WHERE cc = ? AND numero = ?",
                                        parametros = new List<OdbcParameterDTO> {
                                    new OdbcParameterDTO() { nombre = "cc", tipo = OdbcType.VarChar, valor = compraEnkontrol.cc },
                                    new OdbcParameterDTO() { nombre = "numero", tipo = OdbcType.Numeric, valor = compraEnkontrol.numero }
                                }
                                    });

                                    if (listaPartidasEK.Count() > 0)
                                    {
                                        if (listaPartidasEK.FirstOrDefault(x => x.partida == 1).area == 1 && listaPartidasEK.FirstOrDefault(x => x.partida == 1).cuenta == 9) //Verificar que la compra tenga el área-cuenta "1-9" en la primer partida
                                        {
                                            //Se asigna como autorizante el empleado 59 (Alexis Samaniego)
                                            var empleado59 = _contextEnkontrol.Select<dynamic>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                                            {
                                                consulta = @"SELECT descripcion FROM empleados WHERE empleado = 59"
                                            });

                                            listAutoriza = new List<dynamic> { new { usu_numero = 59, usu_nombre = (string)empleado59[0].descripcion } };
                                        }
                                    }
                                }
                            }
                            #endregion

                            return listAutoriza;
                        }
                        else
                        {
                            return new List<dynamic>();
                        }
                    }
                    #endregion
                }
            }
            catch (Exception)
            {
                return null;
            }
        }

        public string fillNo(string e, int no)
        {
            var newe = "";
            var el = e.Length;
            if (e.Length < no)
            {
                for (int i = el; i < no; i++)
                {
                    newe += "0";
                }
                return newe + e;
            }
            else
            {
                return e;
            }
        }

        public void autorizarCompra(string cc, int numero, bool isAut, bool esOC_Interna)
        {
            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
            {
                #region COLOMBIA
                if (esOC_Interna)
                {
                    using (var dbContextTransaction = _context.Database.BeginTransaction())
                    {
                        try
                        {
                            #region SE MARCA COMO AUTORIZADA LA ORDEN DE COMPRA INTERNA

                            #region VALIDACIONES
                            string mensajeError = "Ocurrió un errro al autorizar la orden de compra interna.";
                            if (string.IsNullOrEmpty(cc)) { throw new Exception(mensajeError); }
                            if (numero <= 0) { throw new Exception(mensajeError); }
                            #endregion

                            tblCom_OrdenCompra_Interna objOC_Interna = _context.tblCom_OrdenCompra_Interna.Where(w => w.cc == cc && w.numero == numero).FirstOrDefault();
                            if (objOC_Interna == null)
                                throw new Exception(mensajeError);

                            var empEk = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                            //objOC_Interna.autorizo = (int)vSesiones.sesionUsuarioDTO.id;
                            objOC_Interna.autorizo = empEk.empleado;
                            objOC_Interna.usuario_autoriza = empEk.empleado;
                            objOC_Interna.ST_OC = "A";
                            objOC_Interna.fecha_autoriza = DateTime.Now;

                            _context.SaveChanges();
                            dbContextTransaction.Commit();
                            #endregion
                        }
                        catch (Exception e)
                        {
                            dbContextTransaction.Rollback();
                            LogError(0, 0, _NOMBRE_CONTROLADOR, "autorizarCompra", e, AccionEnum.ACTUALIZAR, 0, new { cc = cc, numero = numero, isAut = isAut, esOC_Interna = esOC_Interna });
                        }
                    }
                }
                else
                {
                    #region ORDEN DE COMPRA
                    var usuario = vSesiones.sesionUsuarioDTO;
                    var relUser = ufs.getUsuarioService().getUserEk(usuario.id);

                    OrdenCompraColombiaDTO registroCompraEK = _contextEnkontrol.Select<OrdenCompraColombiaDTO>(EnkontrolEnum.ColombiaProductivo, new OdbcConsultaDTO
                    {
                        consulta = string.Format(@"SELECT * FROM DBA.so_orden_compra WHERE cc = '{0}' AND numero = {1}", cc, numero)
                    }).FirstOrDefault();

                    List<OrdenCompraDetDTO> listaPartidasEK = _contextEnkontrol.Select<OrdenCompraDetDTO>(EnkontrolEnum.ColombiaProductivo, new OdbcConsultaDTO
                    {
                        consulta = string.Format(@"SELECT * FROM DBA.so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", cc, numero)
                    });

                    var flagSISUNEditarPorcentIVA = false;

                    if (listaPartidasEK[0].num_requisicion == 0 && registroCompraEK.iva > 0 && (registroCompraEK.porcent_iva == 0 || registroCompraEK.porcent_iva == null))
                    {
                        flagSISUNEditarPorcentIVA = true;
                    }

                    var consulta = "";
                    var porcent_iva = 0m;
                    decimal retenciones = 0m;

                    if (!flagSISUNEditarPorcentIVA)
                    {
                        consulta = @"UPDATE DBA.so_orden_compra 
                                 SET 
                                    autorizo = ?, 
                                    usuario_autoriza = ?, 
                                    fecha_autoriza = ?, 
                                    ST_OC = ?, 
                                    vobo_aut = ?, 
                                    aut_aut = ?, 
                                    empleado_autoriza = ? 
                                 WHERE cc = ? and numero = ?";
                    }
                    else
                    {
                        consulta = @"UPDATE DBA.so_orden_compra 
                                 SET 
                                    autorizo = ?, 
                                    usuario_autoriza = ?, 
                                    fecha_autoriza = ?, 
                                    ST_OC = ?, 
                                    vobo_aut = ?, 
                                    aut_aut = ?, 
                                    empleado_autoriza = ?, 
                                    porcent_iva = ?, 
                                    total = ?, 
                                    rentencion_despues_iva = ? 
                                 WHERE cc = ? and numero = ?";

                        porcent_iva = (registroCompraEK.iva * 100) / registroCompraEK.sub_total;

                        List<OrdenCompraDetDTO> listaRetenciones = _contextEnkontrol.Select<OrdenCompraDetDTO>(EnkontrolEnum.ColombiaProductivo, new OdbcConsultaDTO
                        {
                            consulta = string.Format(@"SELECT importe FROM DBA.so_ordenc_retenciones WHERE cc = '{0}' AND numero = {1}", cc, numero)
                        });

                        if (listaRetenciones.Count() > 0)
                        {
                            retenciones = listaRetenciones.Sum(x => x.importe);
                        }
                    }

                    using (var con = checkConexionProductivo())
                    using (var trans = con.BeginTransaction())
                    {
                        using (var cmd = new OdbcCommand(consulta))
                        {
                            OdbcParameterCollection parameters = cmd.Parameters;

                            parameters.Add("@autorizo", OdbcType.Numeric).Value = relUser.empleado;
                            parameters.Add("@usuario_autoriza", OdbcType.Numeric).Value = relUser.empleado;
                            parameters.Add("@fecha_autoriza", OdbcType.Date).Value = DateTime.Now;
                            parameters.Add("@ST_OC", OdbcType.Char).Value = isAut ? "A" : (object)DBNull.Value;
                            parameters.Add("@vobo_aut", OdbcType.Char).Value = isAut ? "S" : "N";
                            parameters.Add("@aut_aut", OdbcType.Char).Value = isAut ? "S" : "N";
                            parameters.Add("@empleado_autoriza", OdbcType.Numeric).Value = isAut ? relUser.empleado : (object)DBNull.Value;

                            if (flagSISUNEditarPorcentIVA)
                            {
                                parameters.Add("@porcent_iva", OdbcType.Numeric).Value = porcent_iva;
                                parameters.Add("@total", OdbcType.Numeric).Value = registroCompraEK.sub_total + registroCompraEK.iva - retenciones;
                                parameters.Add("@rentencion_despues_iva", OdbcType.Numeric).Value = retenciones;
                            }

                            parameters.Add("@cc", OdbcType.Char).Value = cc;
                            parameters.Add("@numero", OdbcType.Numeric).Value = numero;

                            cmd.Connection = trans.Connection;
                            cmd.Transaction = trans;

                            var count = cmd.ExecuteNonQuery();

                            if (count == 1)
                            {
                                trans.Commit();

                                var compraSIGOPLAN = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.cc == cc && x.numero == numero && x.estatusRegistro);

                                if (compraSIGOPLAN != null)
                                {
                                    compraSIGOPLAN.autorizo = relUser.empleado;
                                    compraSIGOPLAN.usuario_autoriza = relUser.empleado;
                                    compraSIGOPLAN.fecha_autoriza = DateTime.Now;
                                    compraSIGOPLAN.ST_OC = isAut ? "A" : "";
                                    compraSIGOPLAN.empleado_autoriza = isAut ? relUser.empleado : 0;
                                    compraSIGOPLAN.empleadoUltimaAccion = relUser.empleado;
                                    compraSIGOPLAN.fechaUltimaAccion = DateTime.Now;
                                    compraSIGOPLAN.tipoUltimaAccion = isAut ? TipoUltimaAccionEnum.Autorizacion : TipoUltimaAccionEnum.Desautorizacion;

                                    _context.Entry(compraSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                    _context.SaveChanges();
                                }

                                #region Mandar correo al comprador y Alán Palomera
                                var titulo = "Compra \"" + cc + "-" + numero + "\" ha sido autorizada.";
                                var mensaje = "Se ha autorizado la compra \"" + cc + "-" + numero + "\". \n" + "Fecha Autorización: " + DateTime.Now.Date.ToShortDateString();
                                var correo = new List<string>();

                                var compradorEK = (List<dynamic>)consultaCheckProductivo(
                                    string.Format(@"SELECT comprador FROM DBA.so_orden_compra WHERE cc = '{0}' AND numero = {1}", cc, numero)
                                ).ToObject<List<dynamic>>();

                                var numeroCompradorEK = (int)compradorEK[0].comprador;

                                if (numeroCompradorEK != 1)
                                {
                                    var relacionUsuarioSIGOPLAN = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.empleado == numeroCompradorEK);

                                    if (relacionUsuarioSIGOPLAN != null)
                                    {
                                        var compradorSIGOPLAN = _context.tblP_Usuario.FirstOrDefault(x => x.id == relacionUsuarioSIGOPLAN.idUsuario);

                                        if (compradorSIGOPLAN != null)
                                        {
                                            correo.Add(compradorSIGOPLAN.correo);
                                        }
                                    }
                                }
                                else
                                {
                                    correo.Add("oscar.valencia@construplan.com.mx");
                                }

                                correo.Add("alan.palomera@construplan.com.mx");
                                correo.Add("notificacion.oc@construplan.com.mx");
#if DEBUG
                                correo = new List<string>();
                                correo.Add("omar.nunez@construplan.com.mx");
#endif
                                Infrastructure.Utils.GlobalUtils.sendEmail(string.Format("{0}: {1}", PersonalUtilities.GetNombreEmpresa(), titulo), mensaje, correo);
                                #endregion
                            }
                        }
                    }
                    #endregion
                }
                #endregion
            }
            else
            {
                #region DEMAS EMPRESAS
                if (esOC_Interna)
                {
                    using (var dbContextTransaction = _context.Database.BeginTransaction())
                    {
                        try
                        {
                            #region SE MARCA COMO AUTORIZADA LA ORDEN DE COMPRA INTERNA

                            #region VALIDACIONES
                            string mensajeError = "Ocurrió un errro al autorizar la orden de compra interna.";
                            if (string.IsNullOrEmpty(cc)) { throw new Exception(mensajeError); }
                            if (numero <= 0) { throw new Exception(mensajeError); }
                            #endregion

                            tblCom_OrdenCompra_Interna objOC_Interna = _context.tblCom_OrdenCompra_Interna.Where(w => w.cc == cc && w.numero == numero).FirstOrDefault();
                            if (objOC_Interna == null)
                                throw new Exception(mensajeError);

                            var empEk = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                            //objOC_Interna.autorizo = (int)vSesiones.sesionUsuarioDTO.id;
                            objOC_Interna.autorizo = empEk.empleado;
                            objOC_Interna.usuario_autoriza = empEk.empleado;
                            objOC_Interna.ST_OC = "A";
                            objOC_Interna.fecha_autoriza = DateTime.Now;

                            _context.SaveChanges();
                            dbContextTransaction.Commit();
                            #endregion
                        }
                        catch (Exception e)
                        {
                            dbContextTransaction.Rollback();
                            LogError(0, 0, _NOMBRE_CONTROLADOR, "autorizarCompra", e, AccionEnum.ACTUALIZAR, 0, new { cc = cc, numero = numero, isAut = isAut, esOC_Interna = esOC_Interna });
                        }
                    }
                }
                else
                {
                    #region ORDEN DE COMPRA
                    //var comprador = getComprador();
                    var usuario = vSesiones.sesionUsuarioDTO;
                    var relUser = ufs.getUsuarioService().getUserEk(usuario.id);

                    using (var con = checkConexionProductivo())
                    using (var trans = con.BeginTransaction())
                    {
                        var consulta = @"UPDATE so_orden_compra 
                                 SET 
                                    autorizo = ?, 
                                    usuario_autoriza = ?, 
                                    fecha_autoriza = ?, 
                                    ST_OC = ?, 
                                    empleado_autoriza = ? 
                                 WHERE cc = ? and numero = ?";
                        using (var cmd = new OdbcCommand(consulta))
                        {
                            OdbcParameterCollection parameters = cmd.Parameters;

                            parameters.Add("@autorizo", OdbcType.Numeric).Value = relUser.empleado;
                            parameters.Add("@usuario_autoriza", OdbcType.Numeric).Value = relUser.empleado;
                            parameters.Add("@fecha_autoriza", OdbcType.Date).Value = DateTime.Now;
                            parameters.Add("@ST_OC", OdbcType.Char).Value = isAut ? "A" : (object)DBNull.Value;
                            parameters.Add("@empleado_autoriza", OdbcType.Numeric).Value = isAut ? relUser.empleado : (object)DBNull.Value;

                            parameters.Add("@cc", OdbcType.Char).Value = cc;
                            parameters.Add("@numero", OdbcType.Numeric).Value = numero;

                            cmd.Connection = trans.Connection;
                            cmd.Transaction = trans;

                            var count = cmd.ExecuteNonQuery();

                            if (count == 1)
                            {
                                trans.Commit();

                                var compraSIGOPLAN = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.cc == cc && x.numero == numero && x.estatusRegistro);

                                if (compraSIGOPLAN != null)
                                {
                                    compraSIGOPLAN.autorizo = relUser.empleado;
                                    compraSIGOPLAN.usuario_autoriza = relUser.empleado;
                                    compraSIGOPLAN.fecha_autoriza = DateTime.Now;
                                    compraSIGOPLAN.ST_OC = isAut ? "A" : "";
                                    compraSIGOPLAN.empleado_autoriza = isAut ? relUser.empleado : 0;
                                    compraSIGOPLAN.empleadoUltimaAccion = relUser.empleado;
                                    compraSIGOPLAN.fechaUltimaAccion = DateTime.Now;
                                    compraSIGOPLAN.tipoUltimaAccion = isAut ? TipoUltimaAccionEnum.Autorizacion : TipoUltimaAccionEnum.Desautorizacion;

                                    _context.Entry(compraSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                    _context.SaveChanges();
                                }

                                #region Mandar correo al comprador y Alán Palomera
                                var titulo = "Compra \"" + cc + "-" + numero + "\" ha sido autorizada.";
                                var mensaje = "Se ha autorizado la compra \"" + cc + "-" + numero + "\". \n" + "Fecha Autorización: " + DateTime.Now.Date.ToShortDateString();
                                var correo = new List<string>();

                                var compradorEK = (List<dynamic>)consultaCheckProductivo(
                                    string.Format(@"SELECT comprador FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", cc, numero)
                                ).ToObject<List<dynamic>>();

                                var numeroCompradorEK = (int)compradorEK[0].comprador;

                                if (numeroCompradorEK != 1)
                                {
                                    var relacionUsuarioSIGOPLAN = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.empleado == numeroCompradorEK);

                                    if (relacionUsuarioSIGOPLAN != null)
                                    {
                                        var compradorSIGOPLAN = _context.tblP_Usuario.FirstOrDefault(x => x.id == relacionUsuarioSIGOPLAN.idUsuario);

                                        if (compradorSIGOPLAN != null)
                                        {
                                            correo.Add(compradorSIGOPLAN.correo);
                                        }
                                    }
                                    //else
                                    //{
                                    //    var compraSIGOPLAN = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.cc == cc && x.numero == numero);

                                    //    if (compraSIGOPLAN != null && compraSIGOPLAN.compradorSIGOPLAN != null)
                                    //    {
                                    //        var compradorSIGOPLAN = _context.tblP_Usuario.FirstOrDefault(x => x.id == compraSIGOPLAN.compradorSIGOPLAN);

                                    //        if (compradorSIGOPLAN != null)
                                    //        {
                                    //            correo.Add(compradorSIGOPLAN.correo);
                                    //        }
                                    //    }
                                    //}
                                }
                                else
                                {
                                    correo.Add("oscar.valencia@construplan.com.mx");
                                }

                                correo.Add("alan.palomera@construplan.com.mx");
                                correo.Add("notificacion.oc@construplan.com.mx");
#if DEBUG
                                correo = new List<string> { "omar.nunez@construplan.com.mx" };
#endif
                                Infrastructure.Utils.GlobalUtils.sendEmail(string.Format("{0}: {1}", PersonalUtilities.GetNombreEmpresa(), titulo), mensaje, correo);
                                #endregion
                            }
                        }
                    }
                    #endregion
                }
                #endregion
            }
        }

        public void desautorizarCompra(string cc, int numero)
        {
            var comprador = getComprador();
            var usuario = vSesiones.sesionUsuarioDTO;
            var relUser = ufs.getUsuarioService().getUserEk(usuario.id);

            using (var con = checkConexionProductivo())
            using (var trans = con.BeginTransaction())
            {
                var consulta = @"UPDATE so_orden_compra 
                                 SET 
                                    ST_OC = NULL 
                                 WHERE cc = ? AND numero = ? AND ST_OC = 'A' AND estatus != 'T' AND estatus != 'P'";
                using (var cmd = new OdbcCommand(consulta))
                {
                    OdbcParameterCollection parameters = cmd.Parameters;

                    parameters.Add("@cc", OdbcType.Char).Value = cc;
                    parameters.Add("@numero", OdbcType.Numeric).Value = numero;

                    cmd.Connection = trans.Connection;
                    cmd.Transaction = trans;

                    var count = cmd.ExecuteNonQuery();

                    if (count == 1)
                    {
                        trans.Commit();

                        var compraSIGOPLAN = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.cc == cc && x.numero == numero && x.estatusRegistro);

                        if (compraSIGOPLAN != null)
                        {
                            compraSIGOPLAN.autorizo = relUser.empleado;
                            compraSIGOPLAN.usuario_autoriza = relUser.empleado;
                            compraSIGOPLAN.fecha_autoriza = DateTime.Now;
                            compraSIGOPLAN.ST_OC = "";
                            compraSIGOPLAN.empleado_autoriza = 0;
                            compraSIGOPLAN.empleadoUltimaAccion = relUser.empleado;
                            compraSIGOPLAN.fechaUltimaAccion = DateTime.Now;
                            compraSIGOPLAN.tipoUltimaAccion = TipoUltimaAccionEnum.Desautorizacion;

                            _context.Entry(compraSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                            _context.SaveChanges();
                        }
                    }
                }
            }
        }

        public void voboCompra(OrdenCompraDTO compra, string voboNumero, List<VoboDTO> vobos, bool esOC_Interna = false)
        {
            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
            {
                using (var con = checkConexionProductivo())
                {
                    using (var trans = con.BeginTransaction())
                    {
                        using (var dbContextTransaction = _context.Database.BeginTransaction())
                        {
                            try
                            {
                                #region ORDEN COMPRA EK | COLOMBIA LISTO
                                var usuario = vSesiones.sesionUsuarioDTO;
                                var relUser = ufs.getUsuarioService().getUserEk(usuario.id);

                                #region SE INDICA EL VOBO Y VOBO 2 EN SIGOPLANCOLOMBIA
                                tblCom_OrdenCompra objOrdenCompra = _context.tblCom_OrdenCompra.Where(w => w.cc == compra.cc && w.numero == compra.numero && w.estatusRegistro).FirstOrDefault();

                                if (objOrdenCompra != null)
                                {

                                    if (voboNumero == "vobo")
                                        objOrdenCompra.vobo = vobos != null ? vobos[0].usu_numero : 0;
                                    else if (voboNumero == "vobo2")
                                        objOrdenCompra.vobo2 = vobos != null && vobos.Count() >= 1 ? vobos[1].usu_numero : 0;

                                    _context.SaveChanges();
                                }
                                #endregion

                                if (voboNumero != "vobo2")
                                {
                                    using (var cmd = new OdbcCommand(@"
                                        UPDATE DBA.so_orden_compra
                                        SET vobo = ?, fecha_vobo = ?, vobo_aut = 'S'
                                        WHERE cc = ? AND numero = ?
                                    "))
                                    {
                                        OdbcParameterCollection parameters = cmd.Parameters;

                                        if (vobos.FirstOrDefault().numVobos == 1 && voboNumero == "vobo")
                                            parameters.Add("@vobo", OdbcType.Char).Value = vobos != null ? vobos[0].usu_numero : 0;

                                        parameters.Add("@fecha_vobo", OdbcType.Date).Value = DateTime.Now.Date;
                                        parameters.Add("@cc", OdbcType.Char).Value = compra.cc.ToString();
                                        parameters.Add("@numero", OdbcType.Numeric).Value = Convert.ToInt32(compra.numero);

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;

                                        var count = cmd.ExecuteNonQuery();

                                        if (count == 1)
                                        {
                                            trans.Commit();
                                        }
                                    }
                                }
                                dbContextTransaction.Commit();
                            }
                            catch (Exception e)
                            {
                                dbContextTransaction.Rollback();
                                trans.Rollback();
                                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "voboCompra", e, AccionEnum.ACTUALIZAR, compra.id, compra);
                            }
                                #endregion
                        }
                    }
                }
            }
            else
            {
                #region DEMAS EMPRESAS
                if (!esOC_Interna)
                {
                    #region ORDEN COMPRA EK
                    //var comprador = getComprador();
                    var usuario = vSesiones.sesionUsuarioDTO;
                    var relUser = ufs.getUsuarioService().getUserEk(usuario.id);

                    using (var con = checkConexionProductivo())
                    using (var trans = con.BeginTransaction())
                    {
                        var consulta = @"UPDATE so_orden_compra 
                                     SET 
                                        " + voboNumero + @" = ?, 
                                        vobo_informa = ?, 
                                        cambia_vobo = ?, 
                                        fecha_" + voboNumero + @" = ? 
                                     WHERE cc = ? and numero = ?";

                        using (var cmd = new OdbcCommand(consulta))
                        {
                            OdbcParameterCollection parameters = cmd.Parameters;

                            parameters.Add("@" + voboNumero, OdbcType.Numeric).Value = relUser.empleado;

                            if (vobos.FirstOrDefault().numVobos == 1 && voboNumero == "vobo")
                            {
                                parameters.Add("@vobo_informa", OdbcType.Char).Value = 'S';
                                //mandarCorreoAutorizantes(compra);
                            }
                            else if (vobos.FirstOrDefault().numVobos == 2 && voboNumero == "vobo2")
                            {
                                parameters.Add("@vobo_informa", OdbcType.Char).Value = 'S';
                                //mandarCorreoAutorizantes(compra);
                            }
                            else if (vobos.FirstOrDefault().numVobos == 3 && voboNumero == "vobo3")
                            {
                                parameters.Add("@vobo_informa", OdbcType.Char).Value = 'S';
                                //mandarCorreoAutorizantes(compra);
                            }
                            else
                            {
                                parameters.Add("@vobo_informa", OdbcType.Char).Value = 'N';
                            }

                            parameters.Add("@cambia_vobo", OdbcType.Numeric).Value = 1;
                            parameters.Add("@fecha_" + voboNumero, OdbcType.Date).Value = DateTime.Now.Date;

                            parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                            parameters.Add("@numero", OdbcType.Numeric).Value = compra.numero;

                            cmd.Connection = trans.Connection;
                            cmd.Transaction = trans;

                            var count = cmd.ExecuteNonQuery();

                            if (count == 1)
                            {
                                trans.Commit();
                            }
                        }
                    }
                    #endregion
                }
                else if (esOC_Interna)
                {
                    using (var dbContextTransaction = _context.Database.BeginTransaction())
                    {
                        try
                        {
                            #region ORDEN COMPRA INTERNA

                            #region VALIDACIONES
                            if (string.IsNullOrEmpty(compra.cc)) { throw new Exception("Ocurrió un error al registrar el VoBo a la orden de compra intertna."); }
                            if (compra.numero <= 0) { throw new Exception("Ocurrió un error al registrar el VoBo a la orden de compra intertna."); }
                            #endregion

                            #region SE OBTIENE LA ORDEN DE COMPRA A INDICAR EL VOBO
                            tblCom_OrdenCompra_Interna objOC_Interna = _context.tblCom_OrdenCompra_Interna.Where(w => w.cc == compra.cc && w.numero == compra.numero).FirstOrDefault();
                            if (objOC_Interna == null)
                                throw new Exception("Ocurrió un error al relizar el visto bueno.");

                            var emplEK = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                            if (objOC_Interna.vobo == 0)
                            {
                                //objOC_Interna.vobo = (int)vSesiones.sesionUsuarioDTO.id;
                                objOC_Interna.vobo = emplEK.empleado;
                                objOC_Interna.fechaVoBo1 = DateTime.Now;
                            }
                            else if (objOC_Interna.vobo2 == 0)
                            {
                                //objOC_Interna.vobo2 = (int)vSesiones.sesionUsuarioDTO.id;
                                objOC_Interna.vobo2 = emplEK.empleado;
                                objOC_Interna.fechaVoBo2 = DateTime.Now;
                            }
                            else if (objOC_Interna.vobo3 == 0)
                            {
                                //objOC_Interna.vobo3 = (int)vSesiones.sesionUsuarioDTO.id;
                                objOC_Interna.vobo3 = emplEK.empleado;
                                objOC_Interna.fechaVoBo3 = DateTime.Now;
                            }
                            _context.SaveChanges();
                            dbContextTransaction.Commit();
                            #endregion

                            #endregion
                        }
                        catch (Exception e)
                        {
                            dbContextTransaction.Rollback();
                            LogError(0, 0, _NOMBRE_CONTROLADOR, "voboCompra", e, AccionEnum.ACTUALIZAR, 0, compra);
                        }
                    }
                }
                #endregion
            }
        }

        public bool VerificarOC(OrdenCompraDTO objParamsDTO)
        {
            bool existeOC = false;
            try
            {
                #region SE VERIFICA SI LA OC EXISTE EN SIGOPLANCOLOMBIA
                int cantOC = _context.tblCom_OrdenCompra.Where(w => w.cc == objParamsDTO.cc && w.numero == objParamsDTO.numero && w.estatusRegistro).Count();
                if (cantOC > 0)
                    existeOC = true;
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "VerificarOC", e, AccionEnum.CONSULTA, objParamsDTO.id, objParamsDTO);
                return existeOC;
            }
            return existeOC;
        }

        private void mandarCorreoAutorizantes(OrdenCompraDTO compra)
        {
            var titulo = "Compra \"" + compra.cc + "-" + compra.numero + "\" está lista para autorizarse.";
            var mensaje = "La compra \"" + compra.cc + "-" + compra.numero + "\" ya tiene VoBo. Queda pendiente la autorización. \n";
            var correos = new List<string>();

            var autorizantes = getAutorizaciones(compra);

            foreach (var emp in autorizantes)
            {
                var empleado = (int)emp.usu_numero;
                var relacionSIGOPLAN = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.empleado == empleado);

                if (relacionSIGOPLAN != null)
                {
                    var usuarioSIGOPLAN = _context.tblP_Usuario.FirstOrDefault(x => x.id == relacionSIGOPLAN.idUsuario);

                    if (usuarioSIGOPLAN != null)
                    {
                        correos.Add(usuarioSIGOPLAN.correo);
                    }
                }
            }

            if (correos.Count > 0)
            {
                Infrastructure.Utils.GlobalUtils.sendEmail(string.Format("{0}: {1}", PersonalUtilities.GetNombreEmpresa(), titulo), mensaje, correos);
            }
        }

        public List<dynamic> GetVoBos_SIGOPLANCOLOMBIA(OrdenCompraDTO objParamsDTO)
        {
            List<dynamic> vobosCapturados = new List<dynamic>();
            try
            {
                #region SE OBTIENE EL NOMBRE Y USUARIO_ID DEL EMPLEADO QUE DIO VOBO
                tblCom_OrdenCompra objOC = _context.tblCom_OrdenCompra.Where(w => w.cc == objParamsDTO.cc && w.numero == objParamsDTO.numero && w.estatusRegistro).FirstOrDefault();
                if (objOC == null)
                    throw new Exception("Ocurrió un error al obtener listado de vobos.");

                List<int> lstVoboNumeroEmpleado = new List<int>();
                lstVoboNumeroEmpleado.Add(objOC.vobo);
                lstVoboNumeroEmpleado.Add(objOC.vobo2);

                string strQuery = string.Format("SELECT * FROM empleados WHERE empleado IN ({0})", string.Join(",", lstVoboNumeroEmpleado));
                List<dynamic> lstEmpleados = _context.Select<dynamic>(new DapperDTO
                {
                    baseDatos = MainContextEnum.Colombia,
                    consulta = strQuery
                }).ToList();

                vobosCapturados = new List<dynamic>
                {
                    new {
                        usu_numero = objOC.vobo,
                        usu_nombre = lstEmpleados.Where(w => w.empleado == objOC.vobo).Select(s => s.descripcion).FirstOrDefault()
                    },
                    new {
                        usu_numero = objOC.vobo2,
                        usu_nombre = lstEmpleados.Where(w => w.empleado == objOC.vobo2).Select(s => s.descripcion).FirstOrDefault()
                    },
                    new {
                        usu_numero = 0,
                        usu_nombre = ""
                    }
                };
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetVoBos_SIGOPLANCOLOMBIA", e, AccionEnum.CONSULTA, objParamsDTO.id, objParamsDTO);
                return vobosCapturados;
            }
            return vobosCapturados;
        }

        public dynamic getUsuarioEnKontrol(int numEmpleado)
        {
            try
            {
                if (vSesiones.sesionEmpresaActual != 3)
                {
                    var empleado = consultaCheckProductivo(
                        string.Format(@"SELECT * FROM empleados WHERE empleado = {0}", numEmpleado)
                    );

                    return empleado;
                }
                else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
                {
                    string strQuery = string.Format(@"SELECT * FROM empleados WHERE empleado = {0}", numEmpleado);
                    var empleado = _context.Select<dynamic>(new DapperDTO
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = strQuery
                    }).FirstOrDefault();
                    return empleado;
                }
                else
                {
                    var empleado = consultaCheckProductivo(
                        string.Format(@"SELECT * FROM DBA.empleados WHERE empleado = {0}", numEmpleado)
                    );

                    return empleado;
                }
            }
            catch (Exception) { return null; }
        }

        public string getUsuarioEnKontrolCOLOMBIA(int numEmpleado)
        {
            try
            {
                if (vSesiones.sesionEmpresaActual != 3)
                {
                    var empleado = consultaCheckProductivo(
                        string.Format(@"SELECT * FROM empleados WHERE empleado = {0}", numEmpleado)
                    );

                    return empleado;
                }
                else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
                {
                    string strQuery = string.Format(@"SELECT * FROM empleados WHERE empleado = {0}", numEmpleado);
                    var empleado = _context.Select<dynamic>(new DapperDTO
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = strQuery
                    }).FirstOrDefault();
                    return empleado.descripcion;
                }
                else
                {
                    var empleado = consultaCheckProductivo(
                        string.Format(@"SELECT * FROM DBA.empleados WHERE empleado = {0}", numEmpleado)
                    );

                    return empleado;
                }
            }
            catch (Exception) { return null; }
        }

        public bool getFlagPuedeDarVobo(List<int> numUsuariosEnkontrol, OrdenCompraDTO compra)
        {
            try
            {
                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
                {
                    #region COLOMBIA
                    var usuario = vSesiones.sesionUsuarioDTO;
                    var relUser = ufs.getUsuarioService().getUserEk(usuario.id);

                    bool checkVoboTipoGrupo = false;

                    if (compra.esOC_Interna)
                    {
                        if (numUsuariosEnkontrol.Contains(relUser.empleado))
                        {
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }

                    var partidas = getPartidasCompra(compra.cc, compra.numero, 1);

                    if (relUser.empleado != 1)
                    {
                        if (partidas != null && partidas.Count > 0)
                        {
                            //var voboEmpleadoTipoGrupo703EK = consultaCheckProductivo(
                            //    string.Format(@"SELECT * FROM DBA.so_cc_vobo WHERE cc = '{0}' AND empleado = {1}", compra.cc, relUser.empleado)
                            //);

                            // PRUEBAS
                            relUser.empleado = 412; // ALAN

                            string strQuery = string.Format(@"SELECT * FROM so_cc_vobo WHERE cc = '{0}' AND empleado = {1}", compra.cc, relUser.empleado);
                            var voboEmpleadoTipoGrupo703EK = _context.Select<dynamic>(new DapperDTO
                            {
                                baseDatos = MainContextEnum.Colombia,
                                consulta = strQuery
                            }).ToList();

                            if (voboEmpleadoTipoGrupo703EK != null)
                            {
                                foreach (var part in partidas)
                                {
                                    var tipoGrupo = Int32.Parse(part.insumo.ToString().Substring(0, 3));

                                    if (tipoGrupo == 703)
                                    {
                                        checkVoboTipoGrupo = true;
                                    }
                                }
                            }
                        }

                        if (checkVoboTipoGrupo)
                        {
                            return true;
                        }
                        else
                        {
                            dynamic lstVobo = null;

                            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
                            {
                                //                                lstVobo = consultaCheckProductivo(
                                //                                    string.Format(@"SELECT * FROM DBA.so_empleados_cc 
                                //                                                        WHERE cc = '{0}' {1}", compra.cc, (relUser.empleado != 1) ? "AND empleado = " + relUser.empleado : "")
                                //                                );
                                string t = string.Empty;
                                string strQuery = string.Format(@"SELECT * FROM so_empleados_cc WHERE cc = '{0}' {1}",
                                                                compra.cc, (relUser.empleado != 1) ? "AND empleado = " + relUser.empleado : "");
                                lstVobo = _context.Select<dynamic>(new DapperDTO
                                {
                                    baseDatos = MainContextEnum.Colombia,
                                    consulta = strQuery
                                }).ToList();
                            }
                            return lstVobo != null;
                        }
                    }
                    else
                    {
                        return true;
                    }
                    #endregion
                }
                else
                {
                    #region DEMAS EMPRESAS
                    var usuario = vSesiones.sesionUsuarioDTO;
                    var relUser = ufs.getUsuarioService().getUserEk(usuario.id);

                    bool checkVoboTipoGrupo = false;

                    if (compra.esOC_Interna)
                    {
                        if (numUsuariosEnkontrol.Contains(relUser.empleado))
                        {
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }

                    var partidas = getPartidasCompra(compra.cc, compra.numero, 1);

                    if (relUser.empleado != 1)
                    {
                        //var esVoboAutorizacionEspecial = false;
                        List<OrdenCompraDTO> compraDetDTO = null;
                        int area = 0;
                        int cuenta = 0;

                        switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                        {
                            case EmpresaEnum.Construplan:
                                {
                                    //esVoboAutorizacionEspecial = _context.tblCom_VoboAutorizacionEspecial.Any(x => x.cc == compra.cc && x.registroActivo);
                                }
                                break;
                            case EmpresaEnum.Arrendadora:
                                {
                                    var compraDet = consultaCheckProductivo(
                                        string.Format(@"SELECT TOP 1
                                                            DET.area,
                                                            DET.cuenta
                                                        FROM
                                                            so_orden_compra AS OC
                                                        INNER JOIN
                                                            so_orden_compra_det AS DET
                                                            ON
                                                                DET.cc = OC.cc AND
                                                                DET.numero = OC.numero
                                                        WHERE
                                                            OC.cc = '{0}' AND
                                                            OC.numero = {1} AND
                                                            (
                                                                OC.ST_OC IS NULL OR
                                                                OC.ST_OC != 'A'
                                                            )", compra.cc, compra.numero));
                                    if (compraDet != null)
                                    {
                                        compraDetDTO = (List<OrdenCompraDTO>)compraDet.ToObject<List<OrdenCompraDTO>>();
                                        if (compraDetDTO.Count > 0)
                                        {
                                            area = compraDetDTO.First().area;
                                            cuenta = compraDetDTO.First().cuenta;
                                            //esVoboAutorizacionEspecial = _context.tblCom_VoboAutorizacionEspecial.Any(x => x.registroActivo && x.area == area && x.cuenta == cuenta);
                                        }
                                    }
                                }
                                break;
                        }
                        //if (esVoboAutorizacionEspecial)
                        //{
                        //    switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                        //    {
                        //        case EmpresaEnum.Construplan:
                        //            {
                        //                if (_context.tblCom_VoboAutorizacionEspecial.Any(x => x.cc == compra.cc && x.registroActivo && x.empleado == relUser.empleado))
                        //                {
                        //                    return true;
                        //                }
                        //                else
                        //                {
                        //                    return false;
                        //                }
                        //            }
                        //            break;
                        //        case EmpresaEnum.Arrendadora:
                        //            {
                        //                if (_context.tblCom_VoboAutorizacionEspecial.Any(x => x.registroActivo && x.area == area && x.cuenta == cuenta && x.empleado == relUser.empleado))
                        //                {
                        //                    return true;
                        //                }
                        //                else
                        //                {
                        //                    return false;
                        //                }
                        //            }
                        //            break;
                        //        default:
                        //            {
                        //                return false;
                        //            }
                        //            break;
                        //    }
                        //}
                        //else
                        //{
                        if (partidas != null && partidas.Count > 0)
                        {
                            var voboEmpleadoTipoGrupo703EK = consultaCheckProductivo(
                                string.Format(@"SELECT * FROM so_cc_vobo WHERE cc = '{0}' AND empleado = {1}", compra.cc, relUser.empleado)
                            );

                            if (voboEmpleadoTipoGrupo703EK != null)
                            {
                                foreach (var part in partidas)
                                {
                                    var tipoGrupo = Int32.Parse(part.insumo.ToString().Substring(0, 3));

                                    if (tipoGrupo == 703)
                                    {
                                        checkVoboTipoGrupo = true;
                                    }
                                }
                            }
                        }

                        if (checkVoboTipoGrupo)
                        {
                            return true;
                        }
                        else
                        {
                            dynamic lstVobo = null;

                            if (vSesiones.sesionEmpresaActual == 1 || vSesiones.sesionEmpresaActual == 4 || vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                            {
                                lstVobo = consultaCheckProductivo(
                                    string.Format(@"SELECT 
                                                * 
                                            FROM so_empleados_cc 
                                            WHERE cc = '{0}' {1}", compra.cc, (relUser.empleado != 1) ? "AND empleado = " + relUser.empleado : "")
                                );
                            }
                            else
                            {
                                lstVobo = consultaCheckProductivo(
                                    string.Format(@"SELECT 
                                                * 
                                            FROM so_empleados_area_cta 
                                            WHERE area = {0} AND cuenta = {1} {2}", partidas[0].area, partidas[0].cuenta, (relUser.empleado != 1) ? "AND empleado = " + relUser.empleado : "")
                                );
                            }

                            return lstVobo != null;
                        }
                        //}
                    }
                    else
                    {
                        return true;
                    }
                    #endregion
                }
            }
            catch (Exception e)
            {
                LogError(0, 0, _NOMBRE_CONTROLADOR, "getFlagPuedeDarVobo", e, AccionEnum.CONSULTA, 0, 0);
                throw;
            }
        }

        #endregion
        public string getFolioOrigen(string cc, int num)
        {
            var requisicion = _context.tblCom_Req.FirstOrDefault(x => x.estatusRegistro && x.cc == cc && x.numero == num);

            return requisicion != null ? requisicion.folioAsignado != null ? requisicion.folioAsignado : "" : "";
        }

        public List<entradasAlmacenDTO> guardarSurtido(OrdenCompraDTO compra, List<SurtidoCompraDTO> surtido)
        {
            List<entradasAlmacenDTO> movEntradas = new List<entradasAlmacenDTO>();

            switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
            {
                case EmpresaEnum.Peru:
                    #region PERÚ
                    using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                    {
                        using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                        {
                            using (var dbStarsoftTransaction = _starsoft.Database.BeginTransaction())
                            {
                                try
                                {
                                    movEntradas = new List<entradasAlmacenDTO>();

                                    #region INFORMACIÓN INICIAL
                                    List<MAEART> lstInsumos = _starsoft.MAEART.ToList();
                                    List<MAEPROV> lstProveedores = _starsoft.MAEPROV.ToList();
                                    List<TABALM> lstAlmacenes = _starsoft.TABALM.ToList();

                                    tblP_CC objCC = _context.tblP_CC.Where(w => w.cc == compra.cc && w.estatus).FirstOrDefault();
                                    if (objCC == null)
                                        throw new Exception("Ocurrió un error al obtener la información del CC.");

                                    tblCom_OrdenCompra objOC = _context.tblCom_OrdenCompra.Where(w => w.cc == compra.cc && w.numero == compra.numero && w.estatusRegistro && w.PERU_tipoCompra == compra.PERU_tipoCompra).FirstOrDefault();
                                    if (objOC == null)
                                        throw new Exception("Ocurrió un error al obtener la información de la orden de compra.");

                                    List<tblCom_OrdenCompraDet> lstPartidas = _context.tblCom_OrdenCompraDet.Where(w => w.idOrdenCompra == objOC.id && w.estatusRegistro).ToList();
                                    if (lstPartidas.Count() <= 0)
                                        throw new Exception("Ocurrió un error al obtener las partidas de la orden de compra.");

                                    var numeroCompraStarsoft = compra.numero.ToString("D13");
                                    var registroCompraStarsoft = _starsoft.COMOVC.FirstOrDefault(x => x.OC_CNUMORD == numeroCompraStarsoft);

                                    if (registroCompraStarsoft == null)
                                    {
                                        throw new Exception("Ocurrió un error al obtener la información de la orden de compra en Starsoft.");
                                    }

                                    var listaCompraDetalleStarsoft = _starsoft.COMOVD.Where(x => x.OC_CNUMORD == numeroCompraStarsoft).ToList();

                                    if (listaCompraDetalleStarsoft.Count() == 0)
                                    {
                                        throw new Exception("Ocurrió un error al obtener las partidas de la orden de compra en Starsoft.");
                                    }
                                    #endregion

                                    #region VALIDACIONES
                                    #region VALIDA QUE LAS PARTIDAS SEAN INVENTARIABLES
                                    foreach (var objPartida in lstPartidas)
                                    {
                                        string tipoInsumo = Convert.ToInt32(objPartida.insumo.ToString().Substring(0, 1)) == (int)PERU_TipoInsumoENUM.INVENTARIABLE ? "I" : "N";
                                        if (tipoInsumo == "N")
                                        {
                                            MAEART objInsumo = lstInsumos.Where(w => w.ACODIGO == objPartida.insumo.ToString().PadLeft(11, '0')).FirstOrDefault();
                                            string mensajeError = string.Format("El insumo [{0}] {1} no es inventariable.", objInsumo.ACODIGO, objInsumo.ADESCRI);
                                            throw new Exception(mensajeError);
                                        }
                                    }
                                    #endregion

                                    #region VALIDA QUE PRIMERO SE HAYA IMPRESO PARA PODER GUARDAR
                                    if ((string)objOC.st_impresa != "I")
                                        throw new Exception("La compra no ha sido impresa.");
                                    #endregion

                                    #region VALIDAR QUE ESTE AUTORIZADA LA OC
                                    if (objOC.ST_OC != "A")
                                        throw new Exception("La compra no se encuentra autorizada.");
                                    #endregion

                                    #region VALIDAR QUE NO SE PUEDA SURTIR DE MAS (POR PARTIDA)
                                    decimal total = 0;
                                    foreach (var objSurtido in surtido)
                                    {
                                        tblCom_OrdenCompraDet objOCDet = lstPartidas.Where(w => w.cc == compra.cc && w.numero == compra.numero && w.partida == objSurtido.partida).FirstOrDefault();

                                        decimal precio = Convert.ToDecimal(objOCDet.precio, CultureInfo.InvariantCulture);
                                        decimal tipoCambioCompra = Convert.ToDecimal(objOC.tipo_cambio, CultureInfo.InvariantCulture);

                                        foreach (var objUbicacion in objSurtido.listUbicacionMovimiento)
                                        {
                                            total += (objUbicacion.cantidad * precio) * tipoCambioCompra;
                                        }

                                        #region VALIDACIÓN SOBREPASO DE SURTIDO
                                        decimal cantidadPartida = Convert.ToDecimal(objOCDet.cantidad, CultureInfo.InvariantCulture);
                                        decimal cantidadMovActualSum = objSurtido.listUbicacionMovimiento.Sum(x => x.cantidad);
                                        decimal cantidadRecibida = Convert.ToDecimal(objOCDet.cant_recibida, CultureInfo.InvariantCulture);
                                        decimal totalPartidaRecibida = cantidadMovActualSum + cantidadRecibida;

                                        if (totalPartidaRecibida > cantidadPartida)
                                            throw new Exception("No se puede ingresar una cantidad mayor a la establecida en la compra.");
                                        #endregion
                                    }
                                    #endregion

                                    #region VALIDAR GUÍA CAPTURADA
                                    if (string.IsNullOrEmpty(compra.PERU_guiaCompraPrefijo) || string.IsNullOrEmpty(compra.PERU_guiaCompraFolio))
                                    {
                                        throw new Exception("Debe capturar la guía de la compra.");
                                    }

                                    if (compra.PERU_guiaCompraPrefijo.Count() > 4)
                                    {
                                        throw new Exception("El prefijo de la guía no puede tener más de 4 caracteres.");
                                    }

                                    if (compra.PERU_guiaCompraFolio.Count() > 7)
                                    {
                                        throw new Exception("El folio de la guía no puede tener más de 7 caracteres.");
                                    }
                                    #endregion

                                    #region VALIDAR REGISTRO GUÍA EXISTENTE
                                    var registroGuia = _starsoft.COMGUICAB.FirstOrDefault(x => x.CCTD == "GC" && x.CCNUMSER == compra.PERU_guiaCompraPrefijo && x.CCNUMDOC == compra.PERU_guiaCompraFolio && x.CCCODPRO == registroCompraStarsoft.OC_CCODPRO);

                                    if (registroGuia != null)
                                    {
                                        throw new Exception("Ya existe un registro para la guía de compra. Debe capturar una guía distinta.");
                                    }
                                    #endregion
                                    #endregion

                                    bool flagAlmacenVirtual = compra.almacen != null ? (int)compra.almacen >= 90 : false;

                                    if (!flagAlmacenVirtual)
                                    {
                                        int siguienteFolio = (_starsoft.MOVALMCAB.ToList().Where(x => Int32.Parse(x.CAALMA) == compra.almacen && x.CATD == "NI").Select(x => Int32.Parse(x.CANUMDOC)).OrderByDescending(x => x).FirstOrDefault()) + 1;

                                        #region GUARDAR ENTRADA GENERAL (SIGOPLAN Y STARSOFT)
                                        #region SIGOPLAN
                                        tblAlm_Movimientos objMovimiento = new tblAlm_Movimientos();
                                        objMovimiento.almacen = compra.almacen ?? 1;
                                        objMovimiento.tipo_mov = 1;
                                        objMovimiento.numero = siguienteFolio;
                                        objMovimiento.cc = !string.IsNullOrEmpty(compra.cc) ? compra.cc.ToUpper() : string.Empty;
                                        objMovimiento.compania = 1;
                                        objMovimiento.periodo = DateTime.Now.Month;
                                        objMovimiento.ano = DateTime.Now.Year;
                                        objMovimiento.orden_ct = compra.numero;
                                        objMovimiento.frente = 0;
                                        objMovimiento.fecha = DateTime.Now.Date;
                                        objMovimiento.total = total;
                                        objMovimiento.estatus = "A";
                                        objMovimiento.transferida = "N";
                                        objMovimiento.alm_destino = 0;
                                        objMovimiento.cc_destino = "";
                                        objMovimiento.tipo_trasp = "C";
                                        objMovimiento.tipo_cambio = Convert.ToDecimal(objOC.tipo_cambio, CultureInfo.InvariantCulture);
                                        objMovimiento.estatusHabilitado = true;
                                        objMovimiento.numeroOC = compra.numero;
                                        objMovimiento.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                                        objMovimiento.fechaCreacion = DateTime.Now;
                                        objMovimiento.PERU_proveedor = objOC.PERU_proveedor;
                                        objMovimiento.comentarios = compra.comentarios ?? "";
#if DEBUG
                                        objMovimiento.comentarios = "PRUEBA #ON";
#endif
                                        objMovimiento.PERU_guiaCompraPrefijo = compra.PERU_guiaCompraPrefijo;
                                        objMovimiento.PERU_guiaCompraFolio = compra.PERU_guiaCompraFolio;
                                        objMovimiento.PERU_tipoDocumento = compra.PERU_tipoDocumento;
                                        objMovimiento.PERU_folioDocumento = compra.PERU_folioDocumento;
                                        _context.tblAlm_Movimientos.Add(objMovimiento);
                                        _context.SaveChanges();
                                        #endregion

                                        #region STARSOFT
                                        int idUsuarioSF = _context.tblP_Usuario_Enkontrol.Where(w => w.idUsuario == (int)vSesiones.sesionUsuarioDTO.id).Select(s => s.empleado).FirstOrDefault();
                                        MOVALMCAB objMovimientoSF = new MOVALMCAB();
                                        objMovimientoSF.CAALMA = compra.almacen.ToString().PadLeft(2, '0');
                                        objMovimientoSF.CATD = "NI";
                                        objMovimientoSF.CANUMDOC = siguienteFolio.ToString().PadLeft(10, '0');
                                        objMovimientoSF.CAFECDOC = DateTime.Now.Date;
                                        objMovimientoSF.CATIPMOV = "I";
                                        objMovimientoSF.CACODMOV = "CL";
                                        objMovimientoSF.CARFTDOC = compra.PERU_tipoDocumento;
                                        objMovimientoSF.CARFNDOC = (compra.PERU_guiaCompraPrefijo ?? "") + (compra.PERU_guiaCompraFolio ?? ""); //compra.PERU_folioDocumento;
                                        objMovimientoSF.CAGLOSA = !string.IsNullOrEmpty(compra.comentarios) ? compra.comentarios.Trim() : string.Empty;
#if DEBUG
                                        objMovimientoSF.CAGLOSA = "PRUEBA #ON";
#endif
                                        objMovimientoSF.CAFECACT = DateTime.Now;
                                        string horaMinSeg = DateTime.Now.TimeOfDay.ToString(@"hh\:mm\:ss");
                                        objMovimientoSF.CAHORA = horaMinSeg;
                                        objMovimientoSF.CAUSUARI = idUsuarioSF.ToString();
                                        objMovimientoSF.CACODMON = "MN"; // SIEMPRE SE CAPTURA EN SOLES.
                                        objMovimientoSF.CACODPRO = !string.IsNullOrEmpty(objOC.PERU_proveedor) ? objOC.PERU_proveedor.Trim() : string.Empty;
                                        objMovimientoSF.CATIPCAM = objOC.tipo_cambio;
                                        objMovimientoSF.CASITGUI = "V";
                                        objMovimientoSF.CACONTROLSTOCK = "N";
                                        objMovimientoSF.CACIERRE = false; //TO:DO
                                        objMovimientoSF.FLAGGS = false; //TO:DO
                                        objMovimientoSF.ASIENTO = false; //TO:DO
                                        objMovimientoSF.CANROCAJAS = 0; //TO:DO
                                        objMovimientoSF.CAPESOTOTAL = 0; //TO:DO
                                        objMovimientoSF.CADESPACHO = false; //TO:DO
                                        objMovimientoSF.CAPORDESCL = 0; //TO:DO
                                        objMovimientoSF.CAPORDESES = 0; //TO:DO
                                        objMovimientoSF.CAIMPORTE = 0; //TO:DO
                                        objMovimientoSF.CAFLETE = 0; //TO:DO
                                        objMovimientoSF.CAIMPORTACION = false; //TO:DO
                                        objMovimientoSF.COSTOMIN = 0; //TO:DO
                                        objMovimientoSF.CAINTERFACE = 0; //TO:DO
                                        objMovimientoSF.COD_AUDITORIA = string.Empty; //TO:DO
                                        objMovimientoSF.COD_MODULO = "03";
                                        objMovimientoSF.CANUMORD = objOC.numero.ToString().PadLeft(13, '0');
                                        _starsoft.MOVALMCAB.Add(objMovimientoSF);
                                        _starsoft.SaveChanges();
                                        #endregion
                                        #endregion

                                        #region GUARDAR REGISTRO GUÍA GENERAL
                                        var registroGuiaGeneral = new COMGUICAB();

                                        registroGuiaGeneral.CCTD = "GC";
                                        registroGuiaGeneral.CCNUMSER = compra.PERU_guiaCompraPrefijo;
                                        registroGuiaGeneral.CCNUMDOC = compra.PERU_guiaCompraFolio;
                                        registroGuiaGeneral.CCCODPRO = registroCompraStarsoft.OC_CCODPRO;
                                        registroGuiaGeneral.CCFECDOC = DateTime.Now;
                                        registroGuiaGeneral.CCFECVEN = null;
                                        registroGuiaGeneral.CCORDCOM = registroCompraStarsoft.OC_CNUMORD;
                                        registroGuiaGeneral.CCRUC = null;
                                        registroGuiaGeneral.CCALMA = objMovimientoSF.CAALMA;
                                        registroGuiaGeneral.CCIMPORTE = registroCompraStarsoft.OC_CCODMON == "MN" ? total : (total / registroCompraStarsoft.OC_NTIPCAM);
                                        registroGuiaGeneral.CCSALDO = 0;
                                        registroGuiaGeneral.CCTIPCAM = registroCompraStarsoft.OC_NTIPCAM;
                                        registroGuiaGeneral.CCCODMON = registroCompraStarsoft.OC_CCODMON;
                                        registroGuiaGeneral.CCRFTD = "NI";
                                        registroGuiaGeneral.CCRFNUMSER = "000";
                                        registroGuiaGeneral.CCRFNUMDOC = siguienteFolio.ToString().PadLeft(7, '0');
                                        registroGuiaGeneral.CCFECCRE = null;
                                        registroGuiaGeneral.CCFECMOD = null;
                                        registroGuiaGeneral.CCESTADO = "V";
                                        registroGuiaGeneral.CCUSER = "1"; //Se coloca 1 por mientras que es el folio del administrador. Esto podría cambiar.
                                        registroGuiaGeneral.CCGLOSA = !string.IsNullOrEmpty(compra.comentarios) ? compra.comentarios.Trim() : string.Empty;
                                        registroGuiaGeneral.CCIGV = 0;
                                        registroGuiaGeneral.CCRESPONSABLE = null;
                                        registroGuiaGeneral.CCBITSERVICIO = null;
                                        registroGuiaGeneral.CCORDFAB = "";
                                        registroGuiaGeneral.CCNROFACTURA = 0;
                                        registroGuiaGeneral.COD_AUDITORIA = "0";

                                        _starsoft.COMGUICAB.Add(registroGuiaGeneral);
                                        _starsoft.SaveChanges();
                                        #endregion

                                        TABALM objAlmacen = new TABALM();

                                        #region GUARDAR ENTRADA DETALLE (SIGOPLAN Y STARSOFT)
                                        int partidaContador = 1;

                                        foreach (var objSurtido in surtido)
                                        {
                                            MAEART objInsumo = lstInsumos.Where(w => w.ACODIGO == objSurtido.insumo.ToString().PadLeft(11, '0')).FirstOrDefault();

                                            #region SE INDICA LA NUEVA CANTIDAD RECIBIDA QUE CONTIENE LA PARTIDA
                                            #region PERU
                                            tblCom_OrdenCompraDet objOCDet = lstPartidas.Where(w => w.cc == compra.cc && w.numero == compra.numero && w.partida == objSurtido.partida).FirstOrDefault();
                                            if (objOCDet == null)
                                                throw new Exception("Ocurrió un error al obtener la información de las partidas.");

                                            objOCDet.cant_recibida += objSurtido.aSurtir;
                                            _context.SaveChanges();
                                            #endregion

                                            #region STARSOFT
                                            string OC_CNUMORD = objOC.numero.ToString().PadLeft(13, '0');
                                            string OC_CITEM = objSurtido.partida.ToString().PadLeft(3, '0');
                                            var registroDetalleCompraStarsoft = _starsoft.COMOVD.FirstOrDefault(x => x.OC_CNUMORD == OC_CNUMORD && x.OC_CITEM == OC_CITEM);

                                            if (registroDetalleCompraStarsoft == null)
                                            {
                                                throw new Exception("No se encuentra la información en Starsoft para la partida #" + objSurtido.partida);
                                            }

                                            registroDetalleCompraStarsoft.OC_NCANTEN += objSurtido.aSurtir;
                                            registroDetalleCompraStarsoft.OC_NCANSAL -= objSurtido.aSurtir;
                                            registroDetalleCompraStarsoft.OC_CESTADO = registroDetalleCompraStarsoft.OC_NCANTID == registroDetalleCompraStarsoft.OC_NCANTEN ? "04" : "03";
                                            _starsoft.SaveChanges();
                                            #endregion
                                            #endregion

                                            #region GUARDAR REGISTRO GUÍA DETALLE
                                            var registroGuiaDetalle = new COMGUIDET();

                                            registroGuiaDetalle.DCTD = "GC";
                                            registroGuiaDetalle.DCNUMSER = compra.PERU_guiaCompraPrefijo;
                                            registroGuiaDetalle.DCNUMDOC = compra.PERU_guiaCompraFolio;
                                            registroGuiaDetalle.DCCODPRO = registroCompraStarsoft.OC_CCODPRO;
                                            registroGuiaDetalle.DCITEM = objOCDet.partida;
                                            registroGuiaDetalle.DCALMA = objMovimientoSF.CAALMA;
                                            registroGuiaDetalle.DCCODIGO = "0" + objOCDet.insumo.ToString();
                                            registroGuiaDetalle.DCCANTID = objSurtido.aSurtir;
                                            registroGuiaDetalle.DCPRECIO = objOCDet.precio;
                                            registroGuiaDetalle.DCIGV = 0;
                                            registroGuiaDetalle.DCIGVPOR = 0;
                                            registroGuiaDetalle.DCIMPUS = objSurtido.aSurtir * objOCDet.precio;
                                            registroGuiaDetalle.DCIMPMN = objSurtido.aSurtir * objOCDet.precio;
                                            registroGuiaDetalle.DCUNIDAD = objInsumo.AUNIDAD;
                                            registroGuiaDetalle.DCSERIE = "";
                                            registroGuiaDetalle.DCDESCRI = objInsumo.ADESCRI;
                                            registroGuiaDetalle.DCLOTE = "";
                                            registroGuiaDetalle.DCDESCUENTO = "0";
                                            registroGuiaDetalle.DCCANBRUTA = objSurtido.aSurtir;
                                            registroGuiaDetalle.DCIMPMNBRUTO = objSurtido.aSurtir * objOCDet.precio;
                                            registroGuiaDetalle.DCIMPUSBRUTO = objSurtido.aSurtir * objOCDet.precio;
                                            registroGuiaDetalle.DCPORDESCT = 0;
                                            registroGuiaDetalle.DCCUENTA = null;
                                            registroGuiaDetalle.DCCENTCOST = "";
                                            registroGuiaDetalle.DCORDFAB = "";
                                            registroGuiaDetalle.DCDESCTIMP = 0;
                                            registroGuiaDetalle.CCRFNUMDOC = siguienteFolio.ToString().PadLeft(7, '0');

                                            _starsoft.COMGUIDET.Add(registroGuiaDetalle);
                                            _starsoft.SaveChanges();
                                            #endregion

                                            foreach (var objUbicacion in objSurtido.listUbicacionMovimiento)
                                            {
                                                decimal precioMN_TipoCambio = Convert.ToDecimal(objOCDet.precio, CultureInfo.InvariantCulture) * Convert.ToDecimal(objOC.tipo_cambio, CultureInfo.InvariantCulture);
                                                decimal precioUS = Convert.ToDecimal(objOCDet.precio, CultureInfo.InvariantCulture);
                                                int partidaOC = (int)objOCDet.partida;

                                                MAEPROV objProveedor = lstProveedores.Where(w => w.PRVCCODIGO == objOC.PERU_proveedor).FirstOrDefault();
                                                string almacen = compra.almacen.ToString().PadLeft(2, '0');
                                                objAlmacen = lstAlmacenes.Where(w => w.TAALMA == almacen).FirstOrDefault();

                                                #region DETALLE MOVIMIENTO SIGOPLAN
                                                int partidaMovimiento = partidaContador++;
                                                tblAlm_MovimientosDet objMovimientoDet = new tblAlm_MovimientosDet();
                                                objMovimientoDet.almacen = compra.almacen ?? 1;
                                                objMovimientoDet.tipo_mov = 1;
                                                objMovimientoDet.numero = siguienteFolio;
                                                objMovimientoDet.partida = partidaMovimiento;
                                                objMovimientoDet.insumo = objSurtido.insumo;
                                                objMovimientoDet.comentarios = !string.IsNullOrEmpty(compra.comentarios) ? compra.comentarios.Trim() : string.Empty;
                                                objMovimientoDet.area = 0;
                                                objMovimientoDet.cuenta = 0;
                                                objMovimientoDet.cantidad = objUbicacion.cantidadMovimiento;
                                                objMovimientoDet.precio = precioMN_TipoCambio;
                                                objMovimientoDet.importe = precioMN_TipoCambio * objUbicacion.cantidadMovimiento;
                                                objMovimientoDet.id_resguardo = 0;
                                                objMovimientoDet.area_alm = objUbicacion.area_alm;
                                                objMovimientoDet.lado_alm = objUbicacion.lado_alm;
                                                objMovimientoDet.estante_alm = objUbicacion.estante_alm;
                                                objMovimientoDet.nivel_alm = objUbicacion.nivel_alm;
                                                objMovimientoDet.estatusHabilitado = true;
                                                objMovimientoDet.PERU_insumo = objSurtido.insumo.ToString().PadLeft(11, '0');
                                                objMovimientoDet.partida_oc = objSurtido.partida;
                                                _context.tblAlm_MovimientosDet.Add(objMovimientoDet);
                                                _context.SaveChanges();
                                                #endregion

                                                #region DETALLE MOVIMIENTO STARSOFT
                                                MovAlmDet objMovimientoDetSF = new MovAlmDet();
                                                objMovimientoDetSF.DEALMA = compra.almacen.ToString().PadLeft(2, '0');
                                                objMovimientoDetSF.DETD = "NI";
                                                objMovimientoDetSF.DENUMDOC = siguienteFolio.ToString().PadLeft(10, '0');
                                                objMovimientoDetSF.DEITEM = partidaMovimiento;
                                                objMovimientoDetSF.DECODIGO = objSurtido.insumo.ToString().PadLeft(11, '0');
                                                //objMovimientoDetSF.DECODREF = 0; //TO:DO
                                                objMovimientoDetSF.DECANTID = objUbicacion.cantidadMovimiento;
                                                objMovimientoDetSF.DECANTENT = objUbicacion.cantidadMovimiento;
                                                objMovimientoDetSF.DECANREF = 0; //TO:DO
                                                objMovimientoDetSF.DECANFAC = 0; //TO:DO
                                                objMovimientoDetSF.DEPREUNI = precioMN_TipoCambio;
                                                objMovimientoDetSF.DEPRECIO = precioMN_TipoCambio; //TO:DO
                                                objMovimientoDetSF.DEPRECI1 = 0; //TO:DO
                                                objMovimientoDetSF.DEDESCTO = 0; //TO:DO
                                                objMovimientoDetSF.DEIGV = 0; //TO:DO objOC.iva; (TODAS ESTAN EN CERO)
                                                objMovimientoDetSF.DEIMPMN = precioMN_TipoCambio * objUbicacion.cantidadMovimiento;
                                                objMovimientoDetSF.DEIMPUS = 0; //TO:DO
                                                objMovimientoDetSF.DESERIE = string.Empty; //TO:DO
                                                objMovimientoDetSF.DECENCOS = compra.cc.ToString();
                                                objMovimientoDetSF.DEESTADO = "V"; //TO:DO
                                                objMovimientoDetSF.DECODMOV = "CL"; //TO:DO
                                                objMovimientoDetSF.DEVALTOT = 0; //TO:DO
                                                objMovimientoDetSF.DECODMON = "MN";
                                                objMovimientoDetSF.DEPREVTA = 0; //TO:DO
                                                objMovimientoDetSF.DEDEVOL = 0; //TO:DO
                                                objMovimientoDetSF.DETIPCAM = objOC.tipo_cambio;
                                                objMovimientoDetSF.DEGLOSA = lstPartidas.Where(w => w.insumo == objSurtido.insumo).Select(s => s.partidaDescripcion).FirstOrDefault();
#if DEBUG
                                                objMovimientoDetSF.DEGLOSA = "PRUEBA #ON #DET"; //TO:DO
#endif
                                                objMovimientoDetSF.DEDESCRI = !string.IsNullOrEmpty(objInsumo.ADESCRI) ? objInsumo.ADESCRI.Trim() : string.Empty;
                                                objMovimientoDetSF.DEREFERENCIA = lstPartidas.Where(w => w.insumo == objSurtido.insumo).Select(s => s.partidaDescripcion).FirstOrDefault();
                                                objMovimientoDetSF.DEPORDES = 0; //TO:DO
                                                objMovimientoDetSF.DEIGVPOR = 0; //TO:DO
                                                objMovimientoDetSF.DEDESCLI = 0; //TO:DO
                                                objMovimientoDetSF.DEDESESP = 0; //TO:DO
                                                objMovimientoDetSF.DELOTE = string.Empty; //TO:DO
                                                objMovimientoDetSF.DEUNIDAD = objInsumo.AUNIDAD;
                                                objMovimientoDetSF.DECANTBRUTA = 0; //TO:DO
                                                objMovimientoDetSF.DEDSCTCANTBRUTA = 0; //TO:DO
                                                objMovimientoDetSF.DEORDFAB = string.Empty; //TO:DO
                                                objMovimientoDetSF.DEQUIPO = string.Empty; //TO:DO
                                                objMovimientoDetSF.DEFLETE = 0; //TO:DO
                                                objMovimientoDetSF.CANTREFERENCIA = 0; //TO:DO
                                                objMovimientoDetSF.DECUENTA = string.Empty; //TO:DO
                                                objMovimientoDetSF.CTA_CONSUMO = string.Empty; //TO:DO
                                                objMovimientoDetSF.DEPRECIOREF = 0; //TO:DO
                                                objMovimientoDetSF.DEVALORIZADO = true; //TO:DO
                                                objMovimientoDetSF.CODPARTE = ""; //TO:DO
                                                objMovimientoDetSF.CODPLANO = ""; //TO:DO
                                                objMovimientoDetSF.MPMA = ""; //TO:DO
                                                objMovimientoDetSF.PorcentajeCosto = 0;
                                                _starsoft.MovAlmDet.Add(objMovimientoDetSF);
                                                _starsoft.SaveChanges();
                                                #endregion

                                                #region ENVIAR INFO PARA REPORTE
                                                movEntradas.Add(new entradasAlmacenDTO
                                                {
                                                    centroCosto = string.Format("[{0}] {1}", objCC.cc, objCC.descripcion),
                                                    folioEntrada = objMovimiento.numero.ToString().PadLeft(10, '0'),
                                                    almacen = string.Format("{0} - {1}", !string.IsNullOrEmpty(objAlmacen.TAALMA) ? objAlmacen.TAALMA.Trim() : string.Empty,
                                                                                         !string.IsNullOrEmpty(objAlmacen.TADESCRI) ? objAlmacen.TADESCRI.Trim() : string.Empty),
                                                    fechaEntrada = objMovimiento.fecha,
                                                    partida = partidaMovimiento,
                                                    insumo = string.Format("{0} - {1}", objInsumo.ACODIGO, objInsumo.ADESCRI) ?? "",
                                                    areaCuenta = "-",
                                                    referencia = "",
                                                    remision = "",
                                                    cantidad = objUbicacion.cantidadMovimiento,
                                                    precio = precioMN_TipoCambio,
                                                    importe = precioMN_TipoCambio * objUbicacion.cantidadMovimiento,
#if DEBUG
                                                    comentarios = "PRUEBA #ON",
#else
                                            comentarios = compra.comentarios ?? "",
#endif
                                                    ordenCompra = objMovimiento.orden_ct.ToString().PadLeft(13, '0'),
                                                    proveedor = (string)objProveedor.PRVCNOMBRE,
                                                    direccion = (string)objProveedor.PRVCDIRECC,
                                                    ciudad = (string)objProveedor.PRVCLOCALI,
                                                    telefonos = (string)objProveedor.PRVCTELEF1,
                                                    area_alm = objUbicacion.area_alm ?? "",
                                                    lado_alm = objUbicacion.lado_alm ?? "",
                                                    estante_alm = objUbicacion.estante_alm ?? "",
                                                    nivel_alm = objUbicacion.nivel_alm ?? "",
                                                    recibio = _context.tblP_Usuario.Where(w => w.id == (int)vSesiones.sesionUsuarioDTO.id && w.estatus).Select(s => s.nombre).FirstOrDefault()
                                                });
                                                #endregion

                                                #region INSERT/UPDATE STKART
                                                var registroSTKART = _starsoft.STKART.ToList().FirstOrDefault(e => e.STALMA == objAlmacen.TAALMA.ToString().PadLeft(2, '0') && e.STCODIGO == ("0" + objSurtido.insumo.ToString()));

                                                if (registroSTKART != null)
                                                {
                                                    registroSTKART.STSKDIS += objSurtido.cantidad;
                                                    registroSTKART.STKPREPRO = calcularCostoPromedioStarsoft(1, (int)compra.almacen, "0" + objSurtido.insumo, objUbicacion.cantidadMovimiento, precioMN_TipoCambio, _starsoft);

                                                    //if (registroSTKART.STKPREPRO <= 0)
                                                    //{
                                                    //    throw new Exception("Costo promedio en cero para el insumo " + ("0" + objSurtido.insumo));
                                                    //}

                                                    _starsoft.SaveChanges();
                                                }
                                                else
                                                {
                                                    _starsoft.STKART.Add(new STKART()
                                                    {
                                                        STALMA = objAlmacen.TAALMA.ToString().PadLeft(2, '0'),
                                                        STCODIGO = ("0" + objSurtido.insumo.ToString()),
                                                        STSKDIS = objSurtido.cantidad,
                                                        STSKREF = 0M,
                                                        STSKMIN = 0M,
                                                        STSKMAX = 0M,
                                                        STPUNREP = 0M,
                                                        STSEMREP = 0M,
                                                        STTIPREP = null,
                                                        STUBIALM = null,
                                                        STLOTCOM = 0M,
                                                        STTIPCOM = null,
                                                        STSKCOM = 0M,
                                                        STKPREPRO = precioMN_TipoCambio,
                                                        STKPREULT = 0M,
                                                        STKFECULT = DateTime.Now.Date,
                                                        STKPREPROUS = precioUS,
                                                        CANTREFERENCIA = 0M,
                                                    });
                                                    _starsoft.SaveChanges();
                                                }
                                                #endregion
                                            }
                                        }
                                        #endregion

                                        #region SE INCREMENTA LA CANTIDAD DE NUMERO DE ENTRADA EN EL ALMACEN DE STARSOFT
                                        objAlmacen = lstAlmacenes.Where(w => w.TAALMA == compra.almacen.ToString().PadLeft(2, '0')).FirstOrDefault();
                                        int cantActual = Convert.ToInt32(objAlmacen.TANUMENT);
                                        int cantSiguiente = cantActual + 1;
                                        objAlmacen.TANUMENT = cantSiguiente;
                                        _starsoft.SaveChanges();
                                        #endregion

                                        #region INDICAR SI LA OC ESTA COMPLETA O PARCIAL
                                        lstPartidas = _context.tblCom_OrdenCompraDet.Where(w => w.idOrdenCompra == objOC.id && w.estatusRegistro).ToList();
                                        string estatusCompra = "T";
                                        foreach (var objPartida in lstPartidas)
                                        {
                                            decimal cantSolicitada = (decimal)objPartida.cantidad;
                                            decimal cantRecibida = (decimal)objPartida.cant_recibida;

                                            if (cantSolicitada != cantRecibida)
                                                estatusCompra = "P";
                                        }
                                        objOC = _context.tblCom_OrdenCompra.Where(w => w.cc == compra.cc && w.numero == compra.numero && w.estatusRegistro).FirstOrDefault();
                                        objOC.estatus = estatusCompra;
                                        _context.SaveChanges();

                                        var registroStarsoft = _starsoft.COMOVC.FirstOrDefault(x => x.OC_CNUMORD == numeroCompraStarsoft);

                                        if (registroStarsoft != null)
                                        {
                                            registroStarsoft.OC_CSITORD = estatusCompra == "T" ? "04" : estatusCompra == "P" ? "03" : "";
                                            _starsoft.SaveChanges();
                                        }
                                        else
                                        {
                                            throw new Exception("No se encuentra la información de la compra en StarSoft.");
                                        }
                                        #endregion
                                    }
                                    else
                                    {
                                        int siguienteFolio = _context.tblAlm_Movimientos.Where(x => x.estatusHabilitado && x.almacen == compra.almacen && x.tipo_mov < 50).Select(x => x.numero).OrderByDescending(x => x).FirstOrDefault() + 1;

                                        #region GUARDAR ENTRADA GENERAL (SIGOPLAN)
                                        #region SIGOPLAN
                                        tblAlm_Movimientos objMovimiento = new tblAlm_Movimientos();
                                        objMovimiento.almacen = compra.almacen ?? 1;
                                        objMovimiento.tipo_mov = 1;
                                        objMovimiento.numero = siguienteFolio;
                                        objMovimiento.cc = !string.IsNullOrEmpty(compra.cc) ? compra.cc.ToUpper() : string.Empty;
                                        objMovimiento.compania = 1;
                                        objMovimiento.periodo = DateTime.Now.Month;
                                        objMovimiento.ano = DateTime.Now.Year;
                                        objMovimiento.orden_ct = compra.numero;
                                        objMovimiento.frente = 0;
                                        objMovimiento.fecha = DateTime.Now.Date;
                                        objMovimiento.total = total;
                                        objMovimiento.estatus = "A";
                                        objMovimiento.transferida = "N";
                                        objMovimiento.alm_destino = 0;
                                        objMovimiento.cc_destino = "";
                                        objMovimiento.tipo_trasp = "C";
                                        objMovimiento.tipo_cambio = Convert.ToDecimal(objOC.tipo_cambio, CultureInfo.InvariantCulture);
                                        objMovimiento.estatusHabilitado = true;
                                        objMovimiento.numeroOC = compra.numero;
                                        objMovimiento.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                                        objMovimiento.fechaCreacion = DateTime.Now;
                                        objMovimiento.PERU_proveedor = objOC.PERU_proveedor;
                                        objMovimiento.comentarios = compra.comentarios ?? "";
#if DEBUG
                                        objMovimiento.comentarios = "PRUEBA #ON";
#endif
                                        objMovimiento.PERU_guiaCompraPrefijo = compra.PERU_guiaCompraPrefijo;
                                        objMovimiento.PERU_guiaCompraFolio = compra.PERU_guiaCompraFolio;
                                        objMovimiento.PERU_tipoDocumento = compra.PERU_tipoDocumento;
                                        objMovimiento.PERU_folioDocumento = compra.PERU_folioDocumento;
                                        _context.tblAlm_Movimientos.Add(objMovimiento);
                                        _context.SaveChanges();
                                        #endregion
                                        #endregion

                                        TABALM objAlmacen = new TABALM();

                                        #region GUARDAR ENTRADA DETALLE (SIGOPLAN)
                                        int partidaContador = 1;

                                        foreach (var objSurtido in surtido)
                                        {
                                            MAEART objInsumo = lstInsumos.Where(w => w.ACODIGO == objSurtido.insumo.ToString().PadLeft(11, '0')).FirstOrDefault();

                                            #region SE INDICA LA NUEVA CANTIDAD RECIBIDA QUE CONTIENE LA PARTIDA
                                            #region PERU
                                            tblCom_OrdenCompraDet objOCDet = lstPartidas.Where(w => w.cc == compra.cc && w.numero == compra.numero && w.partida == objSurtido.partida).FirstOrDefault();
                                            if (objOCDet == null)
                                                throw new Exception("Ocurrió un error al obtener la información de las partidas.");

                                            objOCDet.cant_recibida += objSurtido.aSurtir;
                                            _context.SaveChanges();
                                            #endregion
                                            #endregion

                                            foreach (var objUbicacion in objSurtido.listUbicacionMovimiento)
                                            {
                                                decimal precioMN_TipoCambio = Convert.ToDecimal(objOCDet.precio, CultureInfo.InvariantCulture) * Convert.ToDecimal(objOC.tipo_cambio, CultureInfo.InvariantCulture);
                                                decimal precioUS = Convert.ToDecimal(objOCDet.precio, CultureInfo.InvariantCulture);
                                                int partidaOC = (int)objOCDet.partida;

                                                MAEPROV objProveedor = lstProveedores.Where(w => w.PRVCCODIGO == objOC.PERU_proveedor).FirstOrDefault();
                                                string almacen = compra.almacen.ToString().PadLeft(2, '0');
                                                objAlmacen = lstAlmacenes.Where(w => w.TAALMA == almacen).FirstOrDefault();

                                                #region DETALLE MOVIMIENTO SIGOPLAN
                                                int partidaMovimiento = partidaContador++;
                                                tblAlm_MovimientosDet objMovimientoDet = new tblAlm_MovimientosDet();
                                                objMovimientoDet.almacen = compra.almacen ?? 1;
                                                objMovimientoDet.tipo_mov = 1;
                                                objMovimientoDet.numero = siguienteFolio;
                                                objMovimientoDet.partida = partidaMovimiento;
                                                objMovimientoDet.insumo = objSurtido.insumo;
                                                objMovimientoDet.comentarios = !string.IsNullOrEmpty(compra.comentarios) ? compra.comentarios.Trim() : string.Empty;
                                                objMovimientoDet.area = 0;
                                                objMovimientoDet.cuenta = 0;
                                                objMovimientoDet.cantidad = objUbicacion.cantidadMovimiento;
                                                objMovimientoDet.precio = precioMN_TipoCambio;
                                                objMovimientoDet.importe = precioMN_TipoCambio * objUbicacion.cantidadMovimiento;
                                                objMovimientoDet.id_resguardo = 0;
                                                objMovimientoDet.area_alm = objUbicacion.area_alm;
                                                objMovimientoDet.lado_alm = objUbicacion.lado_alm;
                                                objMovimientoDet.estante_alm = objUbicacion.estante_alm;
                                                objMovimientoDet.nivel_alm = objUbicacion.nivel_alm;
                                                objMovimientoDet.estatusHabilitado = true;
                                                objMovimientoDet.PERU_insumo = objSurtido.insumo.ToString().PadLeft(11, '0');
                                                objMovimientoDet.partida_oc = objSurtido.partida;
                                                _context.tblAlm_MovimientosDet.Add(objMovimientoDet);
                                                _context.SaveChanges();
                                                #endregion

                                                #region ENVIAR INFO PARA REPORTE
                                                movEntradas.Add(new entradasAlmacenDTO
                                                {
                                                    centroCosto = string.Format("[{0}] {1}", objCC.cc, objCC.descripcion),
                                                    folioEntrada = objMovimiento.numero.ToString().PadLeft(10, '0'),
                                                    almacen = string.Format("{0} - {1}", !string.IsNullOrEmpty(objAlmacen.TAALMA) ? objAlmacen.TAALMA.Trim() : string.Empty,
                                                                                         !string.IsNullOrEmpty(objAlmacen.TADESCRI) ? objAlmacen.TADESCRI.Trim() : string.Empty),
                                                    fechaEntrada = objMovimiento.fecha,
                                                    partida = partidaMovimiento,
                                                    insumo = string.Format("{0} - {1}", objInsumo.ACODIGO, objInsumo.ADESCRI) ?? "",
                                                    areaCuenta = "-",
                                                    referencia = "",
                                                    remision = "",
                                                    cantidad = objUbicacion.cantidadMovimiento,
                                                    precio = precioMN_TipoCambio,
                                                    importe = precioMN_TipoCambio * objUbicacion.cantidadMovimiento,
#if DEBUG
                                                    comentarios = "PRUEBA #ON",
#else
                                            comentarios = compra.comentarios ?? "",
#endif
                                                    ordenCompra = objMovimiento.orden_ct.ToString().PadLeft(13, '0'),
                                                    proveedor = (string)objProveedor.PRVCNOMBRE,
                                                    direccion = (string)objProveedor.PRVCDIRECC,
                                                    ciudad = (string)objProveedor.PRVCLOCALI,
                                                    telefonos = (string)objProveedor.PRVCTELEF1,
                                                    area_alm = objUbicacion.area_alm ?? "",
                                                    lado_alm = objUbicacion.lado_alm ?? "",
                                                    estante_alm = objUbicacion.estante_alm ?? "",
                                                    nivel_alm = objUbicacion.nivel_alm ?? "",
                                                    recibio = _context.tblP_Usuario.Where(w => w.id == (int)vSesiones.sesionUsuarioDTO.id && w.estatus).Select(s => s.nombre).FirstOrDefault()
                                                });
                                                #endregion
                                            }
                                        }
                                        #endregion

                                        #region INDICAR SI LA OC ESTA COMPLETA O PARCIAL
                                        lstPartidas = _context.tblCom_OrdenCompraDet.Where(w => w.idOrdenCompra == objOC.id && w.estatusRegistro).ToList();
                                        string estatusCompra = "T";
                                        foreach (var objPartida in lstPartidas)
                                        {
                                            decimal cantSolicitada = (decimal)objPartida.cantidad;
                                            decimal cantRecibida = (decimal)objPartida.cant_recibida;

                                            if (cantSolicitada != cantRecibida)
                                                estatusCompra = "P";
                                        }
                                        objOC = _context.tblCom_OrdenCompra.Where(w => w.cc == compra.cc && w.numero == compra.numero && w.estatusRegistro).FirstOrDefault();
                                        objOC.estatus = estatusCompra;
                                        _context.SaveChanges();
                                        #endregion
                                    }

                                    dbSigoplanTransaction.Commit();
                                    dbStarsoftTransaction.Commit();

                                    SaveBitacora(0, (int)AccionEnum.AGREGAR, 0, JsonUtils.convertNetObjectToJson(compra));
                                    SaveBitacora(0, (int)AccionEnum.AGREGAR, 0, JsonUtils.convertNetObjectToJson(surtido));

                                    return movEntradas;
                                }
                                catch (Exception e)
                                {
                                    dbSigoplanTransaction.Rollback();
                                    dbStarsoftTransaction.Rollback();
                                    LogError(0, 0, _NOMBRE_CONTROLADOR, "guardarSurtido", e, AccionEnum.AGREGAR, 0, 0);
                                    throw new Exception(e.Message);
                                }
                            }
                        }
                    }
                    #endregion
                case EmpresaEnum.Colombia:
                    #region COLOMBIA
                    movEntradas = new List<entradasAlmacenDTO>();

                    using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                    {
                        using (var con = checkConexionProductivo())
                        {
                            using (var trans = con.BeginTransaction())
                            {
                                try
                                {
                                    #region Validación Inventariables
                                    var registrosGrupoInsumo = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM grupos_insumo")).ToObject<List<dynamic>>();

                                    foreach (var det in surtido)
                                    {
                                        var tipo_insumo = Int32.Parse(det.insumo.ToString().Substring(0, 1));
                                        var grupo_insumo = Int32.Parse(det.insumo.ToString().Substring(1, 2));
                                        var registroGrupoInsumo = registrosGrupoInsumo.FirstOrDefault(x => (int)x.tipo_insumo == tipo_insumo && (int)x.grupo_insumo == grupo_insumo);

                                        if (registroGrupoInsumo != null)
                                        {
                                            if ((string)registroGrupoInsumo.inventariado != "I")
                                            {
                                                throw new Exception(string.Format(@"El insumo ""{0}"" no es inventariable.", det.insumo));
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception(string.Format(@"No se encuentra la información del grupo de insumo para el insumo ""{0}"".", det.insumo));
                                        }
                                    }
                                    #endregion

                                    #region Validación Almacenes 600
                                    if (compra.almacen >= 600 && compra.almacen <= 699)
                                    {
                                        throw new Exception("No se puede hacer una entrada por compra a los almacenes 600.");
                                    }
                                    #endregion

                                    var empleado = 0;
                                    var usuarioEnkontrolSigoplan = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                                    if (usuarioEnkontrolSigoplan != null)
                                    {
                                        empleado = usuarioEnkontrolSigoplan.empleado;
                                    }

                                    var compraSIGOPLAN = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.cc == compra.cc && x.numero == compra.numero);

                                    List<tblCom_OrdenCompraDet> compraSIGOPLANDet = new List<tblCom_OrdenCompraDet>();

                                    if (compraSIGOPLAN != null)
                                    {
                                        compraSIGOPLANDet = _context.tblCom_OrdenCompraDet.Where(x => x.idOrdenCompra == compraSIGOPLAN.id).ToList();
                                    }

                                    var compraENKONTROL = ((List<dynamic>)consultaCheckProductivo(
                                        string.Format(@"SELECT * FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", compra.cc, compra.numero)
                                    ).ToObject<List<dynamic>>())[0];

                                    #region Validación Compra Impresa.
                                    if ((string)compraENKONTROL.st_impresa != "I")
                                    {
                                        throw new Exception("La compra no ha sido impresa.");
                                    }
                                    #endregion

                                    #region Validación Compra Autorizada.
                                    if ((string)compraENKONTROL.vobo_aut == "N" && (string)compraENKONTROL.aut_aut == "N")
                                    {
                                        throw new Exception("La compra no está autorizada.");
                                    }
                                    #endregion

                                    var folioMovimientoNuevo = 0;

                                    var ultimoMovimientoEK = consultaCheckProductivo(
                                        string.Format(@"SELECT TOP 1 
                                                    numero 
                                                FROM si_movimientos 
                                                WHERE almacen = {0} AND tipo_mov = {1} 
                                                ORDER BY numero DESC", compra.almacen ?? 1, 1)
                                    );

                                    if (ultimoMovimientoEK != null)
                                    {
                                        var ultimoMovimiento = (List<OrdenCompraDTO>)ultimoMovimientoEK.ToObject<List<OrdenCompraDTO>>();

                                        folioMovimientoNuevo = ultimoMovimiento[0].numero + 1;
                                    }
                                    else
                                    {
                                        folioMovimientoNuevo = 1;
                                    }

                                    decimal total = 0;

                                    foreach (var s in surtido)
                                    {
                                        var partidaCompraENKONTROL = ((List<dynamic>)consultaCheckProductivo(
                                            string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1} AND partida = {2}", compra.cc, compra.numero, s.partida)
                                        ).ToObject<List<dynamic>>())[0];

                                        var precio = Convert.ToDecimal(partidaCompraENKONTROL.precio, CultureInfo.InvariantCulture);
                                        var tipoCambioCompra = Convert.ToDecimal(compraENKONTROL.tipo_cambio, CultureInfo.InvariantCulture);

                                        foreach (var u in s.listUbicacionMovimiento)
                                        {
                                            total += (u.cantidad * precio) * tipoCambioCompra;
                                        }

                                        #region Validación sobrepaso de surtido
                                        var cantidadPartida = Convert.ToDecimal(partidaCompraENKONTROL.cantidad, CultureInfo.InvariantCulture);
                                        var cantidadMovActualSum = s.listUbicacionMovimiento.Sum(x => x.cantidad);
                                        var cantidadRecibida = Convert.ToDecimal(partidaCompraENKONTROL.cant_recibida, CultureInfo.InvariantCulture);
                                        var totalPartidaRecibida = cantidadMovActualSum + cantidadRecibida;



                                        if (totalPartidaRecibida > cantidadPartida)
                                        {
                                            throw new Exception("No se puede ingresar una cantidad mayor a la establecida en la compra.");
                                        }
                                        #endregion
                                    }

                                    //if (total <= 0)
                                    //{
                                    //    throw new Exception("El total no puede ser menor o igual a cero.");
                                    //}

                                    var nuevaEntrada = new tblAlm_Movimientos
                                    {
                                        almacen = compra.almacen ?? 1,
                                        tipo_mov = 1,
                                        numero = folioMovimientoNuevo,
                                        cc = compra.cc.ToUpper(),
                                        compania = 1,
                                        periodo = DateTime.Now.Month,
                                        ano = DateTime.Now.Year,
                                        orden_ct = compra.numero,
                                        frente = 0,
                                        fecha = DateTime.Now.Date,
                                        proveedor = compra.proveedor,
                                        total = total,
                                        estatus = "A",
                                        transferida = "N",
                                        alm_destino = 0,
                                        cc_destino = "",
                                        comentarios = compra.comentarios ?? "",
                                        tipo_trasp = "C",
                                        tipo_cambio = Convert.ToDecimal(compraENKONTROL.tipo_cambio, CultureInfo.InvariantCulture),
                                        estatusHabilitado = true,
                                        numeroOC = compra.numero
                                    };

                                    _context.tblAlm_Movimientos.Add(nuevaEntrada);
                                    _context.SaveChanges();

                                    var count = 0;

                                    var consulta = @"INSERT INTO DBA.si_movimientos 
                                         (almacen, tipo_mov, numero, cc, compania, periodo, ano, orden_ct, frente, fecha, proveedor, total, estatus, 
                                         transferida, poliza, empleado, alm_destino, cc_destino, comentarios, tipo_trasp, numero_destino, tp, year_poliza, 
                                         mes_poliza, tipo_cambio, hora, fecha_modifica, empleado_modifica, destajista, obra, id_residente, factura, sector_id, 
                                         tc_cc, paquete, tipo_cargo, cargo_destajista, cargo_id_residente, embarque, orden_prod, numero_prevale, obra_destino, indica_prov) 
                                         VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                    using (var cmd = new OdbcCommand(consulta))
                                    {
                                        OdbcParameterCollection parameters = cmd.Parameters;

                                        parameters.Add("@almacen", OdbcType.Numeric).Value = nuevaEntrada.almacen;
                                        parameters.Add("@tipo_mov", OdbcType.Numeric).Value = nuevaEntrada.tipo_mov;
                                        parameters.Add("@numero", OdbcType.Numeric).Value = nuevaEntrada.numero;
                                        parameters.Add("@cc", OdbcType.Char).Value = nuevaEntrada.cc;
                                        parameters.Add("@compania", OdbcType.Numeric).Value = nuevaEntrada.compania;
                                        parameters.Add("@periodo", OdbcType.Numeric).Value = nuevaEntrada.periodo;
                                        parameters.Add("@ano", OdbcType.Numeric).Value = nuevaEntrada.ano;
                                        parameters.Add("@orden_ct", OdbcType.Numeric).Value = nuevaEntrada.orden_ct;
                                        parameters.Add("@frente", OdbcType.Numeric).Value = nuevaEntrada.frente;
                                        parameters.Add("@fecha", OdbcType.Date).Value = nuevaEntrada.fecha.Date;
                                        parameters.Add("@proveedor", OdbcType.Numeric).Value = nuevaEntrada.proveedor;
                                        parameters.Add("@total", OdbcType.Numeric).Value = nuevaEntrada.total;
                                        parameters.Add("@estatus", OdbcType.Char).Value = nuevaEntrada.estatus ?? "";
                                        parameters.Add("@transferida", OdbcType.Char).Value = nuevaEntrada.transferida ?? "";
                                        parameters.Add("@poliza", OdbcType.Numeric).Value = 0;
                                        parameters.Add("@empleado", OdbcType.Numeric).Value = empleado;
                                        parameters.Add("@alm_destino", OdbcType.Numeric).Value = nuevaEntrada.alm_destino;
                                        parameters.Add("@cc_destino", OdbcType.Char).Value = nuevaEntrada.cc_destino ?? "";
                                        parameters.Add("@comentarios", OdbcType.Char).Value = nuevaEntrada.comentarios ?? "";
                                        parameters.Add("@tipo_trasp", OdbcType.Char).Value = nuevaEntrada.tipo_trasp ?? "";
                                        parameters.Add("@numero_destino", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@tp", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@year_poliza", OdbcType.Numeric).Value = DateTime.Now.Year;
                                        parameters.Add("@mes_poliza", OdbcType.Numeric).Value = DateTime.Now.Month;
                                        parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = nuevaEntrada.tipo_cambio;
                                        parameters.Add("@hora", OdbcType.Time).Value = DateTime.Now.TimeOfDay;
                                        parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                        parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = empleado;
                                        parameters.Add("@destajista", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@factura", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@tc_cc", OdbcType.Numeric).Value = 1;
                                        parameters.Add("@paquete", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@tipo_cargo", OdbcType.Numeric).Value = 0;
                                        parameters.Add("@cargo_Destajista", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@cargo_id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@embarque", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@orden_prod", OdbcType.Numeric).Value = DBNull.Value;
                                        //parameters.Add("@folio_traspaso", OdbcType.Numeric).Value = DBNull.Value;
                                        //parameters.Add("@bit_sin_ubicacion", OdbcType.Numeric).Value = 0;
                                        parameters.Add("@numero_prevale", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@obra_destino", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@indica_prov", OdbcType.Numeric).Value = DBNull.Value;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;

                                        count += cmd.ExecuteNonQuery();
                                    }

                                    var ccDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM cc WHERE cc = '{0}' AND st_ppto != 'T'", compra.cc));
                                    var ccDesc = (string)(((List<dynamic>)ccDescEK.ToObject<List<dynamic>>())[0].descripcion);
                                    var almacenDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", nuevaEntrada.almacen));
                                    var almacenDesc = (string)(((List<dynamic>)almacenDescEK.ToObject<List<dynamic>>())[0].descripcion);

                                    dynamic proveedor = null;

                                    proveedor = ((List<dynamic>)consultaCheckProductivo(
                                        string.Format(@"SELECT * FROM sp_proveedores WHERE numpro = {0}", (int)compraENKONTROL.proveedor)
                                    ).ToObject<List<dynamic>>())[0];
                                    var recibioDesc = (string)((List<dynamic>)consultaCheckProductivo(
                                        string.Format(@"SELECT * FROM empleados WHERE empleado = {0}", empleado)
                                    ).ToObject<List<dynamic>>())[0].descripcion;

                                    decimal subTotalRecibido = 0;

                                    var partidaContador = 1;

                                    foreach (var sur in surtido)
                                    {
                                        #region Editar Partida Compra
                                        var partidaCompraEK = consultaCheckProductivo(
                                            string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1} AND partida = {2}", compra.cc, compra.numero, sur.partida)
                                        );

                                        if (partidaCompraEK != null)
                                        {
                                            var partidaCompraENKONTROL = ((List<dynamic>)partidaCompraEK.ToObject<List<dynamic>>())[0];

                                            var partidaCantidadRecibida = sur.listUbicacionMovimiento.Sum(x => x.cantidadMovimiento);
                                            var partidaImporteRecibido = partidaCantidadRecibida * Convert.ToDecimal(partidaCompraENKONTROL.precio, CultureInfo.InvariantCulture);

                                            subTotalRecibido += partidaImporteRecibido;

                                            var consultaUpdatePartidaCompra = @"UPDATE DBA.so_orden_compra_det 
                                                                        SET 
                                                                            cant_recibida = ?, 
                                                                            imp_recibido = ?, 
                                                                            fecha_recibido = ? 
                                                                        WHERE cc = ? AND numero = ? AND partida = ? AND insumo = ?";

                                            using (var cmd = new OdbcCommand(consultaUpdatePartidaCompra))
                                            {
                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                parameters.Add("@cant_recibida", OdbcType.Numeric).Value =
                                                    Convert.ToDecimal(partidaCompraENKONTROL.cant_recibida, CultureInfo.InvariantCulture) + partidaCantidadRecibida;
                                                parameters.Add("@imp_recibido", OdbcType.Numeric).Value =
                                                    Convert.ToDecimal(partidaCompraENKONTROL.imp_recibido, CultureInfo.InvariantCulture) + partidaImporteRecibido;
                                                parameters.Add("@fecha_recibido", OdbcType.Date).Value = DateTime.Now.Date;

                                                parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                parameters.Add("@numero", OdbcType.Numeric).Value = compra.numero;
                                                parameters.Add("@partida", OdbcType.Numeric).Value = sur.partida;
                                                parameters.Add("@insumo", OdbcType.Numeric).Value = sur.insumo;

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;

                                                count += cmd.ExecuteNonQuery();
                                            }
                                        }
                                        #endregion

                                        #region Actualizar Explosión
                                        var registroExplosionEK = consultaCheckProductivo(
                                            string.Format(@"SELECT * FROM so_explos_mat WHERE cc = '{0}' AND insumo = {1} AND year_explos = {2}", compra.cc, sur.insumo, DateTime.Now.Year)
                                        );

                                        if (partidaCompraEK != null)
                                        {
                                            var partidaCompraENKONTROL = ((List<dynamic>)partidaCompraEK.ToObject<List<dynamic>>())[0];

                                            if (registroExplosionEK != null)
                                            {
                                                var registroExplosion = ((List<dynamic>)registroExplosionEK.ToObject<List<dynamic>>())[0];

                                                var partidaCantidadRecibida = sur.listUbicacionMovimiento.Sum(x => x.cantidadMovimiento);
                                                var nuevaCantidadRecibida = Convert.ToDecimal(registroExplosion.cant_recibida, CultureInfo.InvariantCulture) + partidaCantidadRecibida;
                                                var nuevoImporteRecibido =
                                                    Convert.ToDecimal(registroExplosion.imp_recibido, CultureInfo.InvariantCulture) +
                                                    (partidaCantidadRecibida * Convert.ToDecimal(partidaCompraENKONTROL.precio, CultureInfo.InvariantCulture));

                                                var consultaExplosionUpdate = @"
                                            UPDATE DBA.so_explos_mat 
                                            SET cant_recibida = ?, imp_recibido = ? 
                                            WHERE cc = ? AND insumo = ? AND year_explos = ?";

                                                using (var cmd = new OdbcCommand(consultaExplosionUpdate))
                                                {
                                                    OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                    parametersExplosion.Add("@cant_recibida", OdbcType.Numeric).Value = nuevaCantidadRecibida;
                                                    parametersExplosion.Add("@imp_recibido", OdbcType.Numeric).Value = nuevoImporteRecibido;

                                                    parametersExplosion.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                    parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = sur.insumo;
                                                    parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;

                                                    cmd.Connection = trans.Connection;
                                                    cmd.Transaction = trans;

                                                    count += cmd.ExecuteNonQuery();
                                                }
                                            }
                                            else
                                            {
                                                var partidaCantidadRecibida = sur.listUbicacionMovimiento.Sum(x => x.cantidadMovimiento);
                                                var nuevoImporteRecibido = (partidaCantidadRecibida * Convert.ToDecimal(partidaCompraENKONTROL.precio, CultureInfo.InvariantCulture));

                                                var consultaExplosionInsert = @"INSERT INTO DBA.so_explos_mat 
                                            (cc, insumo, cantidad, precio, aditiva_cant, aditiva_imp, deduc_cant, deduc_imp, cant_requerida, 
                                            comp_cant, comp_imp, ajuste_cant, ajuste_imp, traspaso_cant, traspaso_imp, cant_recibida, imp_recibido, 
                                            aditiva_cant_fecha, deduc_cant_fecha, aditiva_precio_fecha, deduc_precio_fecha, aditiva_precio, deductiva_precio, 
                                            traspaso_cant_entrada, traspaso_imp_entrada, importe, year_explos, periodo, bit_auto_presu, cantidad_aditiva_sun, 
                                            cantidad_deductiva_sun, cantidad_extra_sun, iva) 
                                            VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                                using (var cmd = new OdbcCommand(consultaExplosionInsert))
                                                {
                                                    OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                    parametersExplosion.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                    parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = sur.insumo;
                                                    parametersExplosion.Add("@cantidad", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@precio", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@aditiva_cant", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@aditiva_imp", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@deduc_cant", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@deduc_imp", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@cant_requerida", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@comp_cant", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@comp_imp", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@ajuste_cant", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@ajuste_imp", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@traspaso_cant", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@traspaso_imp", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@cant_recibida", OdbcType.Numeric).Value = partidaCantidadRecibida;
                                                    parametersExplosion.Add("@imp_recibido", OdbcType.Numeric).Value = nuevoImporteRecibido;
                                                    parametersExplosion.Add("@aditiva_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                                    parametersExplosion.Add("@deduc_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                                    parametersExplosion.Add("@aditiva_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                                    parametersExplosion.Add("@deduc_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                                    parametersExplosion.Add("@aditiva_precio", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@deductiva_precio", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@traspaso_cant_entrada", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@traspaso_imp_entrada", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@importe", OdbcType.Numeric).Value = DBNull.Value;
                                                    parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;
                                                    parametersExplosion.Add("@periodo", OdbcType.Char).Value = DBNull.Value;
                                                    parametersExplosion.Add("@bit_auto_presu", OdbcType.Char).Value = "N";
                                                    parametersExplosion.Add("@cantidad_aditiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                                    parametersExplosion.Add("@cantidad_deductiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                                    parametersExplosion.Add("@cantidad_extra_sun", OdbcType.Numeric).Value = DBNull.Value;
                                                    parametersExplosion.Add("@iva", OdbcType.Numeric).Value = DBNull.Value;

                                                    cmd.Connection = trans.Connection;
                                                    cmd.Transaction = trans;

                                                    count += cmd.ExecuteNonQuery();
                                                }
                                            }
                                        }
                                        #endregion

                                        var insumoCom = compraSIGOPLANDet.FirstOrDefault(x => x.insumo == sur.insumo);

                                        foreach (var ubi in sur.listUbicacionMovimiento)
                                        {
                                            decimal precio = 0;
                                            int partidaOC = 0;

                                            if (partidaCompraEK != null)
                                            {
                                                var partidaCompraENKONTROL = ((List<dynamic>)partidaCompraEK.ToObject<List<dynamic>>())[0];

                                                precio =
                                                    Convert.ToDecimal(partidaCompraENKONTROL.precio, CultureInfo.InvariantCulture) *
                                                    Convert.ToDecimal(compraENKONTROL.tipo_cambio, CultureInfo.InvariantCulture);
                                                partidaOC = (int)partidaCompraENKONTROL.partida;
                                            }

                                            var partidaMovimiento = partidaContador++;

                                            var nuevaEntradaDet = new tblAlm_MovimientosDet
                                            {
                                                almacen = compra.almacen ?? 1,
                                                tipo_mov = 1,
                                                numero = folioMovimientoNuevo,
                                                partida = partidaMovimiento,
                                                insumo = sur.insumo,
                                                comentarios = compra.comentarios ?? "",
                                                area = insumoCom != null ? insumoCom.area : 0,
                                                cuenta = insumoCom != null ? insumoCom.cuenta : 0,
                                                cantidad = ubi.cantidadMovimiento,
                                                precio = precio,
                                                importe = precio * ubi.cantidadMovimiento,
                                                id_resguardo = 0,
                                                area_alm = ubi.area_alm,
                                                lado_alm = ubi.lado_alm,
                                                estante_alm = ubi.estante_alm,
                                                nivel_alm = ubi.nivel_alm,
                                                estatusHabilitado = true
                                            };

                                            _context.tblAlm_MovimientosDet.Add(nuevaEntradaDet);
                                            _context.SaveChanges();

                                            decimal costoPromedio = 0; //decimal costoPromedio = getCostoPromedioNuevo(nuevaEntrada.almacen, sur.insumo);

                                            var listPreciosEK = consultaCheckProductivo(
                                                string.Format(@"SELECT 
                                                            precio 
                                                        FROM si_movimientos_det 
                                                        WHERE almacen = {0} AND insumo = {1}", nuevaEntrada.almacen, sur.insumo));

                                            if (listPreciosEK != null)
                                            {
                                                var listPrecios = (List<MovimientoDetalleEnkontrolDTO>)listPreciosEK.ToObject<List<MovimientoDetalleEnkontrolDTO>>();

                                                listPrecios.Add(new MovimientoDetalleEnkontrolDTO { precio = precio });

                                                costoPromedio = listPrecios.Average(x => x.precio);
                                            }

                                            if (costoPromedio <= 0)
                                            {
                                                costoPromedio = precio;
                                            }

                                            var insumoDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM insumos WHERE insumo = {0}", sur.insumo));
                                            var insumoDesc = (string)(((List<dynamic>)insumoDescEK.ToObject<List<dynamic>>())[0].descripcion);
                                            var importe = precio * ubi.cantidadMovimiento;

                                            #region Validación cero
                                            if (precio <= 0 || importe <= 0 || costoPromedio <= 0)
                                            {
                                                throw new Exception("El precio, importe o costo promedio no puede ser igual o menor a cero en las partidas.");
                                            }
                                            #endregion

                                            var consultaDetalle = @"INSERT INTO DBA.si_movimientos_det 
                                         (almacen, tipo_mov, numero, partida, insumo, comentarios, area, cuenta, cantidad, precio, importe, 
                                         partida_oc, costo_prom, obra, manzana_ini, lote_ini, interior_ini, manzana_fin, lote_fin, interior_fin, 
                                         remision, sector_id, lote_id, folio_oc, numero_prevale, frente_ppto, partida_ppto, numero_economico,iva,
                                         porcent_iva, folio, kit, tarjeta, secuencia) 
                                         VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                            using (var cmd = new OdbcCommand(consultaDetalle))
                                            {
                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                parameters.Add("@almacen", OdbcType.Numeric).Value = compra.almacen ?? 1;
                                                parameters.Add("@tipo_mov", OdbcType.Numeric).Value = 1;
                                                parameters.Add("@numero", OdbcType.Numeric).Value = folioMovimientoNuevo;
                                                parameters.Add("@partida", OdbcType.Numeric).Value = partidaMovimiento;
                                                parameters.Add("@insumo", OdbcType.Numeric).Value = sur.insumo;
                                                parameters.Add("@comentarios", OdbcType.Char).Value = compra.comentarios ?? "";
                                                parameters.Add("@area", OdbcType.Numeric).Value = insumoCom != null ? insumoCom.area : 0;
                                                parameters.Add("@cuenta", OdbcType.Numeric).Value = insumoCom != null ? insumoCom.cuenta : 0;
                                                parameters.Add("@cantidad", OdbcType.Numeric).Value = ubi.cantidadMovimiento;
                                                parameters.Add("@precio", OdbcType.Numeric).Value = precio;
                                                parameters.Add("@importe", OdbcType.Numeric).Value = importe;
                                                parameters.Add("@partida_oc", OdbcType.Numeric).Value = partidaOC;
                                                parameters.Add("@costo_prom", OdbcType.Numeric).Value = costoPromedio;
                                                parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@manzana_ini", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@lote_ini", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@interior_ini", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@manzana_fin", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@lote_fin", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@interior_fin", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@remision", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                                //parameters.Add("@id_resguardo", OdbcType.Numeric).Value = DBNull.Value;
                                                //parameters.Add("@area_alm", OdbcType.Char).Value = ubi.area_alm ?? "";
                                                //parameters.Add("@lado_alm", OdbcType.Char).Value = ubi.lado_alm ?? "";
                                                //parameters.Add("@estante_alm", OdbcType.Char).Value = ubi.estante_alm ?? "";
                                                //parameters.Add("@nivel_alm", OdbcType.Char).Value = ubi.nivel_alm ?? "";
                                                //parameters.Add("@fecha_fisico", OdbcType.Date).Value = DBNull.Value;
                                                parameters.Add("@lote_id", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@folio_oc", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@numero_prevale", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@frente_ppto", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@partida_ppto", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@numero_economico", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@iva", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@porcent_iva", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@folio", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@kit", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@tarjeta", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@secuencia", OdbcType.Numeric).Value = DBNull.Value;

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;

                                                count += cmd.ExecuteNonQuery();

                                                movEntradas.Add(new entradasAlmacenDTO
                                                {
                                                    centroCosto = compra.cc + "-" + ccDesc,
                                                    folioEntrada = nuevaEntrada.numero.ToString(),
                                                    almacen = nuevaEntrada.almacen + "-" + almacenDesc,
                                                    fechaEntrada = nuevaEntrada.fecha,
                                                    partida = partidaMovimiento,
                                                    insumo = sur.insumo + "-" + insumoDesc ?? "",
                                                    areaCuenta = (insumoCom != null ? insumoCom.area : 0) + "-" + (insumoCom != null ? insumoCom.cuenta : 0),
                                                    referencia = "",
                                                    remision = "",
                                                    cantidad = ubi.cantidadMovimiento,
                                                    precio = precio,
                                                    importe = precio * ubi.cantidadMovimiento,
                                                    comentarios = compra.comentarios ?? "",
                                                    ordenCompra = nuevaEntrada.orden_ct.ToString(),
                                                    proveedor = (string)proveedor.nombre,
                                                    direccion = (string)proveedor.direccion,
                                                    ciudad = (string)proveedor.ciudad,
                                                    telefonos = (string)proveedor.telefono1,

                                                    area_alm = ubi.area_alm ?? "",
                                                    lado_alm = ubi.lado_alm ?? "",
                                                    estante_alm = ubi.estante_alm ?? "",
                                                    nivel_alm = ubi.nivel_alm ?? "",
                                                    recibio = recibioDesc ?? "",
                                                });
                                            }

                                            #region Actualizar Tablas Acumula
                                            var objAcumula = new MovimientoDetalleEnkontrolDTO
                                            {
                                                insumo = sur.insumo,
                                                cantidad = ubi.cantidadMovimiento,
                                                precio = precio,
                                                tipo_mov = 1,
                                                costo_prom = costoPromedio
                                            };

                                            actualizarAcumula(nuevaEntrada.almacen, nuevaEntrada.cc, objAcumula, dbSigoplanTransaction, trans);
                                            #endregion
                                        }
                                    }

                                    decimal ivaRecibido = subTotalRecibido * (Convert.ToDecimal(compraENKONTROL.porcent_iva, CultureInfo.InvariantCulture) / 100);
                                    decimal totalRecibido = subTotalRecibido + ivaRecibido;

                                    decimal resultadoTotalRecibido = Math.Round(Convert.ToDecimal(compraENKONTROL.total_rec, CultureInfo.InvariantCulture) + totalRecibido, 2);
                                    decimal totalCompra = Math.Round(Convert.ToDecimal(compraENKONTROL.total, CultureInfo.InvariantCulture), 2);

                                    #region Update Compra Recibido
                                    var consultaEditarCompra = @"
                                            UPDATE DBA.so_orden_compra 
                                            SET 
                                                sub_tot_rec = ?, 
                                                iva_rec = ?, 
                                                total_rec = ?, 
                                                estatus = ? 
                                            WHERE cc = ? AND numero = ?";

                                    using (var cmd = new OdbcCommand(consultaEditarCompra))
                                    {
                                        OdbcParameterCollection parameters = cmd.Parameters;

                                        parameters.Add("@sub_tot_rec", OdbcType.Numeric).Value =
                                            Convert.ToDecimal(compraENKONTROL.sub_tot_rec, CultureInfo.InvariantCulture) + subTotalRecibido;
                                        parameters.Add("@iva_rec", OdbcType.Numeric).Value =
                                            Convert.ToDecimal(compraENKONTROL.iva_rec, CultureInfo.InvariantCulture) + ivaRecibido;
                                        parameters.Add("@total_rec", OdbcType.Numeric).Value = resultadoTotalRecibido;
                                        parameters.Add("@estatus", OdbcType.Char).Value = (resultadoTotalRecibido == totalCompra) ? "T" : "P";

                                        parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                        parameters.Add("@numero", OdbcType.Numeric).Value = compra.numero;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;

                                        count += cmd.ExecuteNonQuery();
                                    }
                                    #endregion

                                    #region BACKLOGS: SE VERIFICA SI LA OC SE ENCUENTRA RELACIONADA A UN BL
                                    int idBL = 0;
                                    string numOC = string.Empty, numReq = string.Empty, cc = string.Empty;
                                    numOC = compra.numero.ToString();
                                    numReq = compra.numeroRequisicion.ToString();
                                    List<tblBL_OrdenesCompra> lstOCBL = _context.tblBL_OrdenesCompra.Where(w => w.numOC == numOC && w.numRequisicion == numReq && w.esActivo).ToList();

                                    #region BACKLOGS
                                    if (lstOCBL.Count() > 0)
                                    {
                                        #region SE OBTIENE LISTADO DE OC EN BASE AL CC Y REQUISICIÓN
                                        idBL = lstOCBL.Select(s => s.idBackLog).FirstOrDefault();
                                        cc = compra.cc;
                                        List<dynamic> lstOCDet = new List<dynamic>();
                                        string strQuery = "SELECT numero FROM so_orden_compra_det WHERE cc = '{0}' AND num_requisicion = {1}";
                                        var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                                        odbc.consulta = String.Format(strQuery, cc, numReq);

                                        if (productivo)
                                            lstOCDet = _contextEnkontrol.Select<dynamic>(EnkontrolEnum.ArrenProd, odbc);
                                        else
                                            lstOCDet = _contextEnkontrol.Select<dynamic>(EnkontrolAmbienteEnum.Prueba, odbc);
                                        #endregion

                                        #region SE VERIFICA SI TODAS LAS OC SE ENCUENTRAN CON ESTATUS T
                                        if (lstOCDet.Count() > 0)
                                        {
                                            List<dynamic> lstOC = new List<dynamic>();
                                            foreach (var item in lstOCDet)
                                            {
                                                lstOC.Add(item);
                                            }
                                            List<dynamic> lstOCEstatusT = new List<dynamic>();
                                            strQuery = "SELECT estatus FROM so_orden_compra WHERE cc = '{0}' AND numero IN ({1})";
                                            odbc = new OdbcConsultaDTO() { consulta = strQuery };
                                            odbc.consulta = String.Format(strQuery, cc, string.Join(",", lstOC.Select(s => s.numero)));

                                            if (productivo)
                                                lstOCEstatusT = _contextEnkontrol.Select<dynamic>(EnkontrolEnum.ArrenProd, odbc);
                                            else
                                                lstOCEstatusT = _contextEnkontrol.Select<dynamic>(EnkontrolAmbienteEnum.Prueba, odbc);

                                            if (lstOCEstatusT.Count() > 0)
                                            {
                                                int cantOC = lstOCEstatusT.Count();
                                                int cantOCEstatusT = lstOCEstatusT.Where(s => s.estatus == "T").Count();

                                                if (cantOC == cantOCEstatusT)
                                                {
                                                    #region SE REGISTRA BITACORA DE CUANTOS DÍAS DURO EL ESTATUS A ACTUALIZAR
                                                    tblBL_CatBackLogs objBL = _context.tblBL_CatBackLogs.Where(w => w.id == idBL && w.esActivo).FirstOrDefault();
                                                    tblBL_BitacoraEstatusBL objBitacoraBL = _context.tblBL_BitacoraEstatusBL.Where(w => w.idBL == idBL && w.esActivo).OrderByDescending(o => o.id).FirstOrDefault();
                                                    if (objBitacoraBL != null)
                                                    {
                                                        string areaCuenta = String.Format("{0}", objBL.areaCuenta);
                                                        int diasTranscurridos = (DateTime.Now - objBitacoraBL.fechaCreacion).Days;
                                                        tblBL_BitacoraEstatusBL objGuardarBitacoraEstatusBL = new tblBL_BitacoraEstatusBL();
                                                        objGuardarBitacoraEstatusBL.idBL = idBL;
                                                        objGuardarBitacoraEstatusBL.areaCuenta = areaCuenta;
                                                        objGuardarBitacoraEstatusBL.diasTranscurridos = diasTranscurridos;
                                                        objGuardarBitacoraEstatusBL.idEstatus = (int)EstatusBackLogEnum.ElaboracionOC;
                                                        objGuardarBitacoraEstatusBL.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                                                        objGuardarBitacoraEstatusBL.idUsuarioModificacion = 0;
                                                        objGuardarBitacoraEstatusBL.fechaCreacion = DateTime.Now;
                                                        objGuardarBitacoraEstatusBL.fechaModificacion = new DateTime(2000, 01, 01);
                                                        objGuardarBitacoraEstatusBL.esActivo = true;
                                                        _context.tblBL_BitacoraEstatusBL.Add(objGuardarBitacoraEstatusBL);
                                                        _context.SaveChanges();
                                                    }
                                                    #endregion

                                                    #region SE ACTUALIZA LOS BL A SUMINISTRO DE REFACCIONES (SOLO BL DE OBRA)
                                                    //List<tblBL_CatBackLogs> lstBL = _context.tblBL_CatBackLogs.Where(w => idBL)
                                                    //ActualizarBL.idEstatus = (int)EstatusBackLogEnum.SuministroRefacciones;
                                                    //ActualizarBL.fechaModificacionBL = DateTime.Now;
                                                    //_context.SaveChanges();
                                                    #endregion
                                                }
                                            }
                                        }
                                        #endregion
                                    }
                                    #endregion

                                    #endregion

                                    #region Update Compra SIGOPLAN
                                    if (compraSIGOPLAN != null)
                                    {
                                        compraSIGOPLAN.estatus = (resultadoTotalRecibido == totalCompra) ? "T" : "P";

                                        _context.Entry(compraSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                        _context.SaveChanges();
                                    }
                                    #endregion

                                    #region Mandar correo al requisitor si el surtido de la requisición está completo.
                                    var partidaCompra = ((List<dynamic>)consultaCheckProductivo(
                                        string.Format(@"SELECT TOP 1 * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", compra.cc, compra.numero)
                                    ).ToObject<List<dynamic>>())[0];

                                    var surtidoRequisicionCompleto = verificarRequisicionCompletamenteSurtida(compra.cc, (int)partidaCompra.num_requisicion);

                                    if (surtidoRequisicionCompleto)
                                    {
                                        var titulo = "Requisición \"" + compra.cc + "-" + (int)partidaCompra.num_requisicion + "\" completamente surtida.";
                                        var mensaje = "La requisición \"" + compra.cc + "-" + (int)partidaCompra.num_requisicion + "\" se ha surtido por completo. \n" + "Fecha Surtido Completo: " + DateTime.Now.Date.ToShortDateString();
                                        var correo = new List<string>();

                                        if (empleado != 1)
                                        {
                                            var usuarioSIGOPLAN = _context.tblP_Usuario.FirstOrDefault(x => x.id == usuarioEnkontrolSigoplan.idUsuario);

                                            if (usuarioSIGOPLAN.correo != null)
                                            {
                                                correo.Add(usuarioSIGOPLAN.correo);
                                            }
                                        }
                                        //else
                                        //{
                                        //    correo.Add("omar.nunez@construplan.com.mx");
                                        //}

                                        if (correo.Count == 1)
                                        {
                                            Infrastructure.Utils.GlobalUtils.sendEmail(string.Format("{0}: {1}", PersonalUtilities.GetNombreEmpresa(), titulo), mensaje, correo);
                                        }
                                    }
                                    #endregion

                                    trans.Commit();
                                    dbSigoplanTransaction.Commit();
                                }
                                catch (Exception e)
                                {
                                    trans.Rollback();
                                    dbSigoplanTransaction.Rollback();

                                    LogError(12, 0, "OrdenCompraController", "guardarSurtido", e, AccionEnum.AGREGAR, 0, new { compra = compra, surtido = surtido });

                                    throw new Exception(e.Message);
                                }
                            }
                        }
                    }

                    return movEntradas;
                    #endregion
                default:
                    #region OTRAS EMPRESAS
                    movEntradas = new List<entradasAlmacenDTO>();

                    using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                    {
                        using (var con = checkConexionProductivo())
                        {
                            using (var trans = con.BeginTransaction())
                            {
                                try
                                {
                                    #region Validación Inventariables
                                    var registrosGrupoInsumo = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM grupos_insumo")).ToObject<List<dynamic>>();

                                    foreach (var det in surtido)
                                    {
                                        var tipo_insumo = Int32.Parse(det.insumo.ToString().Substring(0, 1));
                                        var grupo_insumo = Int32.Parse(det.insumo.ToString().Substring(1, 2));
                                        var registroGrupoInsumo = registrosGrupoInsumo.FirstOrDefault(x => (int)x.tipo_insumo == tipo_insumo && (int)x.grupo_insumo == grupo_insumo);

                                        if (registroGrupoInsumo != null)
                                        {
                                            if ((string)registroGrupoInsumo.inventariado != "I")
                                            {
                                                throw new Exception(string.Format(@"El insumo ""{0}"" no es inventariable.", det.insumo));
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception(string.Format(@"No se encuentra la información del grupo de insumo para el insumo ""{0}"".", det.insumo));
                                        }
                                    }
                                    #endregion

                                    #region Validación Almacenes 600
                                    if (compra.almacen >= 600 && compra.almacen <= 699)
                                    {
                                        throw new Exception("No se puede hacer una entrada por compra a los almacenes 600.");
                                    }
                                    #endregion

                                    var empleado = 0;
                                    var usuarioEnkontrolSigoplan = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                                    if (usuarioEnkontrolSigoplan != null)
                                    {
                                        empleado = usuarioEnkontrolSigoplan.empleado;
                                    }

                                    var compraSIGOPLAN = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.cc == compra.cc && x.numero == compra.numero);

                                    List<tblCom_OrdenCompraDet> compraSIGOPLANDet = new List<tblCom_OrdenCompraDet>();

                                    if (compraSIGOPLAN != null)
                                    {
                                        compraSIGOPLANDet = _context.tblCom_OrdenCompraDet.Where(x => x.idOrdenCompra == compraSIGOPLAN.id).ToList();
                                    }

                                    var compraENKONTROL = ((List<dynamic>)consultaCheckProductivo(
                                        string.Format(@"SELECT * FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", compra.cc, compra.numero)
                                    ).ToObject<List<dynamic>>())[0];

                                    #region Validación Compra Impresa.
                                    if ((string)compraENKONTROL.st_impresa != "I")
                                    {
                                        throw new Exception("La compra no ha sido impresa.");
                                    }
                                    #endregion

                                    #region Validación Compra Autorizada.
                                    if (compraENKONTROL.ST_OC == null)
                                    {
                                        throw new Exception("La compra no está autorizada.");
                                    }
                                    else
                                    {
                                        if ((string)compraENKONTROL.ST_OC != "A")
                                        {
                                            throw new Exception("La compra no está autorizada.");
                                        }
                                    }
                                    #endregion

                                    var folioMovimientoNuevo = 0;

                                    var ultimoMovimientoEK = consultaCheckProductivo(
                                        string.Format(@"SELECT TOP 1 
                                                    numero 
                                                FROM si_movimientos 
                                                WHERE almacen = {0} AND tipo_mov = {1} 
                                                ORDER BY numero DESC", compra.almacen ?? 1, 1)
                                    );

                                    if (ultimoMovimientoEK != null)
                                    {
                                        var ultimoMovimiento = (List<OrdenCompraDTO>)ultimoMovimientoEK.ToObject<List<OrdenCompraDTO>>();

                                        folioMovimientoNuevo = ultimoMovimiento[0].numero + 1;
                                    }
                                    else
                                    {
                                        folioMovimientoNuevo = 1;
                                    }

                                    decimal total = 0;

                                    foreach (var s in surtido)
                                    {
                                        var partidaCompraENKONTROL = ((List<dynamic>)consultaCheckProductivo(
                                            string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1} AND partida = {2}", compra.cc, compra.numero, s.partida)
                                        ).ToObject<List<dynamic>>())[0];

                                        var precio = Convert.ToDecimal(partidaCompraENKONTROL.precio, CultureInfo.InvariantCulture);
                                        var tipoCambioCompra = Convert.ToDecimal(compraENKONTROL.tipo_cambio, CultureInfo.InvariantCulture);

                                        foreach (var u in s.listUbicacionMovimiento)
                                        {
                                            total += (u.cantidad * precio) * tipoCambioCompra;
                                        }

                                        #region Validación sobrepaso de surtido
                                        var cantidadPartida = Convert.ToDecimal(partidaCompraENKONTROL.cantidad, CultureInfo.InvariantCulture);
                                        var cantidadMovActualSum = s.listUbicacionMovimiento.Sum(x => x.cantidad);
                                        var cantidadRecibida = Convert.ToDecimal(partidaCompraENKONTROL.cant_recibida, CultureInfo.InvariantCulture);
                                        var totalPartidaRecibida = cantidadMovActualSum + cantidadRecibida;

                                        if (totalPartidaRecibida > cantidadPartida)
                                        {
                                            throw new Exception("No se puede ingresar una cantidad mayor a la establecida en la compra.");
                                        }
                                        #endregion
                                    }

                                    //if (total <= 0)
                                    //{
                                    //    throw new Exception("El total no puede ser menor o igual a cero.");
                                    //}

                                    var nuevaEntrada = new tblAlm_Movimientos
                                    {
                                        almacen = compra.almacen ?? 1,
                                        tipo_mov = 1,
                                        numero = folioMovimientoNuevo,
                                        cc = compra.cc.ToUpper(),
                                        compania = 1,
                                        periodo = DateTime.Now.Month,
                                        ano = DateTime.Now.Year,
                                        orden_ct = compra.numero,
                                        frente = 0,
                                        fecha = DateTime.Now.Date,
                                        proveedor = compra.proveedor,
                                        total = total,
                                        estatus = "A",
                                        transferida = "N",
                                        alm_destino = 0,
                                        cc_destino = "",
                                        comentarios = compra.comentarios ?? "",
                                        tipo_trasp = "C",
                                        tipo_cambio = Convert.ToDecimal(compraENKONTROL.tipo_cambio, CultureInfo.InvariantCulture),
                                        estatusHabilitado = true,
                                        numeroOC = compra.numero
                                    };

                                    _context.tblAlm_Movimientos.Add(nuevaEntrada);
                                    _context.SaveChanges();

                                    var count = 0;

                                    var consulta = @"INSERT INTO si_movimientos 
                                         (almacen, tipo_mov, numero, cc, compania, periodo, ano, orden_ct, frente, fecha, proveedor, total, estatus, 
                                         transferida, poliza, empleado, alm_destino, cc_destino, comentarios, tipo_trasp, numero_destino, tp, year_poliza, 
                                         mes_poliza, tipo_cambio, hora, fecha_modifica, empleado_modifica, destajista, obra, id_residente, factura, sector_id, 
                                         tc_cc, paquete, tipo_cargo, cargo_destajista, cargo_id_residente, embarque, orden_prod, folio_traspaso, bit_sin_ubicacion) 
                                         VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                    using (var cmd = new OdbcCommand(consulta))
                                    {
                                        OdbcParameterCollection parameters = cmd.Parameters;

                                        parameters.Add("@almacen", OdbcType.Numeric).Value = nuevaEntrada.almacen;
                                        parameters.Add("@tipo_mov", OdbcType.Numeric).Value = nuevaEntrada.tipo_mov;
                                        parameters.Add("@numero", OdbcType.Numeric).Value = nuevaEntrada.numero;
                                        parameters.Add("@cc", OdbcType.Char).Value = nuevaEntrada.cc;
                                        parameters.Add("@compania", OdbcType.Numeric).Value = nuevaEntrada.compania;
                                        parameters.Add("@periodo", OdbcType.Numeric).Value = nuevaEntrada.periodo;
                                        parameters.Add("@ano", OdbcType.Numeric).Value = nuevaEntrada.ano;
                                        parameters.Add("@orden_ct", OdbcType.Numeric).Value = nuevaEntrada.orden_ct;
                                        parameters.Add("@frente", OdbcType.Numeric).Value = nuevaEntrada.frente;
                                        parameters.Add("@fecha", OdbcType.Date).Value = nuevaEntrada.fecha.Date;
                                        parameters.Add("@proveedor", OdbcType.Numeric).Value = nuevaEntrada.proveedor;
                                        parameters.Add("@total", OdbcType.Numeric).Value = nuevaEntrada.total;
                                        parameters.Add("@estatus", OdbcType.Char).Value = nuevaEntrada.estatus ?? "";
                                        parameters.Add("@transferida", OdbcType.Char).Value = nuevaEntrada.transferida ?? "";
                                        parameters.Add("@poliza", OdbcType.Numeric).Value = 0;
                                        parameters.Add("@empleado", OdbcType.Numeric).Value = empleado;
                                        parameters.Add("@alm_destino", OdbcType.Numeric).Value = nuevaEntrada.alm_destino;
                                        parameters.Add("@cc_destino", OdbcType.Char).Value = nuevaEntrada.cc_destino ?? "";
                                        parameters.Add("@comentarios", OdbcType.Char).Value = nuevaEntrada.comentarios ?? "";
                                        parameters.Add("@tipo_trasp", OdbcType.Char).Value = nuevaEntrada.tipo_trasp ?? "";
                                        parameters.Add("@numero_destino", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@tp", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@year_poliza", OdbcType.Numeric).Value = DateTime.Now.Year;
                                        parameters.Add("@mes_poliza", OdbcType.Numeric).Value = DateTime.Now.Month;
                                        parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = nuevaEntrada.tipo_cambio;
                                        parameters.Add("@hora", OdbcType.Time).Value = DateTime.Now.TimeOfDay;
                                        parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                        parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = empleado;
                                        parameters.Add("@destajista", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@factura", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@tc_cc", OdbcType.Numeric).Value = 1;
                                        parameters.Add("@paquete", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@tipo_cargo", OdbcType.Numeric).Value = 0;
                                        parameters.Add("@cargo_Destajista", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@cargo_id_residente", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@embarque", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@orden_prod", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@folio_traspaso", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@bit_sin_ubicacion", OdbcType.Numeric).Value = 0;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;

                                        count += cmd.ExecuteNonQuery();
                                    }

                                    var ccDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM cc WHERE cc = '{0}' AND st_ppto != 'T'", compra.cc));
                                    var ccDesc = (string)(((List<dynamic>)ccDescEK.ToObject<List<dynamic>>())[0].descripcion);
                                    var almacenDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", nuevaEntrada.almacen));
                                    var almacenDesc = (string)(((List<dynamic>)almacenDescEK.ToObject<List<dynamic>>())[0].descripcion);

                                    dynamic proveedor = null;

                                    proveedor = ((List<dynamic>)consultaCheckProductivo(
                                        string.Format(@"SELECT * FROM sp_proveedores WHERE numpro = {0}", (int)compraENKONTROL.proveedor)
                                    ).ToObject<List<dynamic>>())[0];
                                    var recibioDesc = (string)((List<dynamic>)consultaCheckProductivo(
                                        string.Format(@"SELECT * FROM empleados WHERE empleado = {0}", empleado)
                                    ).ToObject<List<dynamic>>())[0].descripcion;

                                    decimal subTotalRecibido = 0;

                                    var partidaContador = 1;

                                    foreach (var sur in surtido)
                                    {
                                        #region Editar Partida Compra
                                        var partidaCompraEK = consultaCheckProductivo(
                                            string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1} AND partida = {2}", compra.cc, compra.numero, sur.partida)
                                        );

                                        if (partidaCompraEK != null)
                                        {
                                            var partidaCompraENKONTROL = ((List<dynamic>)partidaCompraEK.ToObject<List<dynamic>>())[0];

                                            var partidaCantidadRecibida = sur.listUbicacionMovimiento.Sum(x => x.cantidadMovimiento);
                                            var partidaImporteRecibido = partidaCantidadRecibida * Convert.ToDecimal(partidaCompraENKONTROL.precio, CultureInfo.InvariantCulture);

                                            subTotalRecibido += partidaImporteRecibido;

                                            var consultaUpdatePartidaCompra = @"UPDATE so_orden_compra_det 
                                                                        SET 
                                                                            cant_recibida = ?, 
                                                                            imp_recibido = ?, 
                                                                            fecha_recibido = ? 
                                                                        WHERE cc = ? AND numero = ? AND partida = ? AND insumo = ?";

                                            using (var cmd = new OdbcCommand(consultaUpdatePartidaCompra))
                                            {
                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                parameters.Add("@cant_recibida", OdbcType.Numeric).Value =
                                                    Convert.ToDecimal(partidaCompraENKONTROL.cant_recibida, CultureInfo.InvariantCulture) + partidaCantidadRecibida;
                                                parameters.Add("@imp_recibido", OdbcType.Numeric).Value =
                                                    Convert.ToDecimal(partidaCompraENKONTROL.imp_recibido, CultureInfo.InvariantCulture) + partidaImporteRecibido;
                                                parameters.Add("@fecha_recibido", OdbcType.Date).Value = DateTime.Now.Date;

                                                parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                parameters.Add("@numero", OdbcType.Numeric).Value = compra.numero;
                                                parameters.Add("@partida", OdbcType.Numeric).Value = sur.partida;
                                                parameters.Add("@insumo", OdbcType.Numeric).Value = sur.insumo;

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;

                                                count += cmd.ExecuteNonQuery();
                                            }
                                        }
                                        #endregion

                                        #region Actualizar Explosión
                                        var registroExplosionEK = consultaCheckProductivo(
                                            string.Format(@"SELECT * FROM so_explos_mat WHERE cc = '{0}' AND insumo = {1} AND year_explos = {2}", compra.cc, sur.insumo, DateTime.Now.Year)
                                        );

                                        if (partidaCompraEK != null)
                                        {
                                            var partidaCompraENKONTROL = ((List<dynamic>)partidaCompraEK.ToObject<List<dynamic>>())[0];

                                            if (registroExplosionEK != null)
                                            {
                                                var registroExplosion = ((List<dynamic>)registroExplosionEK.ToObject<List<dynamic>>())[0];

                                                var partidaCantidadRecibida = sur.listUbicacionMovimiento.Sum(x => x.cantidadMovimiento);
                                                var nuevaCantidadRecibida = Convert.ToDecimal(registroExplosion.cant_recibida, CultureInfo.InvariantCulture) + partidaCantidadRecibida;
                                                var nuevoImporteRecibido =
                                                    Convert.ToDecimal(registroExplosion.imp_recibido, CultureInfo.InvariantCulture) +
                                                    (partidaCantidadRecibida * Convert.ToDecimal(partidaCompraENKONTROL.precio, CultureInfo.InvariantCulture));

                                                var consultaExplosionUpdate = @"
                                            UPDATE so_explos_mat 
                                            SET cant_recibida = ?, imp_recibido = ? 
                                            WHERE cc = ? AND insumo = ? AND year_explos = ?";

                                                using (var cmd = new OdbcCommand(consultaExplosionUpdate))
                                                {
                                                    OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                    parametersExplosion.Add("@cant_recibida", OdbcType.Numeric).Value = nuevaCantidadRecibida;
                                                    parametersExplosion.Add("@imp_recibido", OdbcType.Numeric).Value = nuevoImporteRecibido;

                                                    parametersExplosion.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                    parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = sur.insumo;
                                                    parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;

                                                    cmd.Connection = trans.Connection;
                                                    cmd.Transaction = trans;

                                                    count += cmd.ExecuteNonQuery();
                                                }
                                            }
                                            else
                                            {
                                                var partidaCantidadRecibida = sur.listUbicacionMovimiento.Sum(x => x.cantidadMovimiento);
                                                var nuevoImporteRecibido = (partidaCantidadRecibida * Convert.ToDecimal(partidaCompraENKONTROL.precio, CultureInfo.InvariantCulture));

                                                var consultaExplosionInsert = @"INSERT INTO so_explos_mat 
                                            (cc, insumo, cantidad, precio, aditiva_cant, aditiva_imp, deduc_cant, deduc_imp, cant_requerida, 
                                            comp_cant, comp_imp, ajuste_cant, ajuste_imp, traspaso_cant, traspaso_imp, cant_recibida, imp_recibido, 
                                            aditiva_cant_fecha, deduc_cant_fecha, aditiva_precio_fecha, deduc_precio_fecha, aditiva_precio, deductiva_precio, 
                                            traspaso_cant_entrada, traspaso_imp_entrada, importe, year_explos, periodo, bit_auto_presu, cantidad_aditiva_sun, 
                                            cantidad_deductiva_sun, cantidad_extra_sun) 
                                            VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                                using (var cmd = new OdbcCommand(consultaExplosionInsert))
                                                {
                                                    OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                    parametersExplosion.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                    parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = sur.insumo;
                                                    parametersExplosion.Add("@cantidad", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@precio", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@aditiva_cant", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@aditiva_imp", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@deduc_cant", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@deduc_imp", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@cant_requerida", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@comp_cant", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@comp_imp", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@ajuste_cant", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@ajuste_imp", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@traspaso_cant", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@traspaso_imp", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@cant_recibida", OdbcType.Numeric).Value = partidaCantidadRecibida;
                                                    parametersExplosion.Add("@imp_recibido", OdbcType.Numeric).Value = nuevoImporteRecibido;
                                                    parametersExplosion.Add("@aditiva_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                                    parametersExplosion.Add("@deduc_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                                    parametersExplosion.Add("@aditiva_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                                    parametersExplosion.Add("@deduc_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                                    parametersExplosion.Add("@aditiva_precio", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@deductiva_precio", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@traspaso_cant_entrada", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@traspaso_imp_entrada", OdbcType.Numeric).Value = 0;
                                                    parametersExplosion.Add("@importe", OdbcType.Numeric).Value = DBNull.Value;
                                                    parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;
                                                    parametersExplosion.Add("@periodo", OdbcType.Char).Value = DBNull.Value;
                                                    parametersExplosion.Add("@bit_auto_presu", OdbcType.Char).Value = "N";
                                                    parametersExplosion.Add("@cantidad_aditiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                                    parametersExplosion.Add("@cantidad_deductiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                                    parametersExplosion.Add("@cantidad_extra_sun", OdbcType.Numeric).Value = DBNull.Value;

                                                    cmd.Connection = trans.Connection;
                                                    cmd.Transaction = trans;

                                                    count += cmd.ExecuteNonQuery();
                                                }
                                            }
                                        }
                                        #endregion

                                        var insumoCom = compraSIGOPLANDet.FirstOrDefault(x => x.insumo == sur.insumo);

                                        foreach (var ubi in sur.listUbicacionMovimiento)
                                        {
                                            decimal precio = 0;
                                            int partidaOC = 0;

                                            if (partidaCompraEK != null)
                                            {
                                                var partidaCompraENKONTROL = ((List<dynamic>)partidaCompraEK.ToObject<List<dynamic>>())[0];

                                                precio =
                                                    Convert.ToDecimal(partidaCompraENKONTROL.precio, CultureInfo.InvariantCulture) *
                                                    Convert.ToDecimal(compraENKONTROL.tipo_cambio, CultureInfo.InvariantCulture);
                                                partidaOC = (int)partidaCompraENKONTROL.partida;
                                            }

                                            var partidaMovimiento = partidaContador++;

                                            var nuevaEntradaDet = new tblAlm_MovimientosDet
                                            {
                                                almacen = compra.almacen ?? 1,
                                                tipo_mov = 1,
                                                numero = folioMovimientoNuevo,
                                                partida = partidaMovimiento,
                                                insumo = sur.insumo,
                                                comentarios = compra.comentarios ?? "",
                                                area = insumoCom != null ? insumoCom.area : 0,
                                                cuenta = insumoCom != null ? insumoCom.cuenta : 0,
                                                cantidad = ubi.cantidadMovimiento,
                                                precio = precio,
                                                importe = precio * ubi.cantidadMovimiento,
                                                id_resguardo = 0,
                                                area_alm = ubi.area_alm,
                                                lado_alm = ubi.lado_alm,
                                                estante_alm = ubi.estante_alm,
                                                nivel_alm = ubi.nivel_alm,
                                                estatusHabilitado = true
                                            };

                                            _context.tblAlm_MovimientosDet.Add(nuevaEntradaDet);
                                            _context.SaveChanges();

                                            decimal costoPromedio = 0; //decimal costoPromedio = getCostoPromedioNuevo(nuevaEntrada.almacen, sur.insumo);

                                            var listPreciosEK = consultaCheckProductivo(
                                                string.Format(@"SELECT 
                                                            precio 
                                                        FROM si_movimientos_det 
                                                        WHERE almacen = {0} AND insumo = {1}", nuevaEntrada.almacen, sur.insumo));

                                            if (listPreciosEK != null)
                                            {
                                                var listPrecios = (List<MovimientoDetalleEnkontrolDTO>)listPreciosEK.ToObject<List<MovimientoDetalleEnkontrolDTO>>();

                                                listPrecios.Add(new MovimientoDetalleEnkontrolDTO { precio = precio });

                                                costoPromedio = listPrecios.Average(x => x.precio);
                                            }

                                            if (costoPromedio <= 0)
                                            {
                                                costoPromedio = precio;
                                            }

                                            var insumoDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM insumos WHERE insumo = {0}", sur.insumo));
                                            var insumoDesc = (string)(((List<dynamic>)insumoDescEK.ToObject<List<dynamic>>())[0].descripcion);
                                            var importe = precio * ubi.cantidadMovimiento;

                                            #region Validación cero
                                            if (precio <= 0 || importe <= 0 || costoPromedio <= 0)
                                            {
                                                throw new Exception("El precio, importe o costo promedio no puede ser igual o menor a cero en las partidas.");
                                            }
                                            #endregion

                                            var consultaDetalle = @"INSERT INTO si_movimientos_det 
                                         (almacen, tipo_mov, numero, partida, insumo, comentarios, area, cuenta, cantidad, precio, importe, 
                                         partida_oc, costo_prom, obra, manzana_ini, lote_ini, interior_ini, manzana_fin, lote_fin, interior_fin, 
                                         remision, sector_id, id_resguardo, area_alm, lado_alm, estante_alm, nivel_alm, fecha_fisico) 
                                         VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                            using (var cmd = new OdbcCommand(consultaDetalle))
                                            {
                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                parameters.Add("@almacen", OdbcType.Numeric).Value = compra.almacen ?? 1;
                                                parameters.Add("@tipo_mov", OdbcType.Numeric).Value = 1;
                                                parameters.Add("@numero", OdbcType.Numeric).Value = folioMovimientoNuevo;
                                                parameters.Add("@partida", OdbcType.Numeric).Value = partidaMovimiento;
                                                parameters.Add("@insumo", OdbcType.Numeric).Value = sur.insumo;
                                                parameters.Add("@comentarios", OdbcType.Char).Value = compra.comentarios ?? "";
                                                parameters.Add("@area", OdbcType.Numeric).Value = insumoCom != null ? insumoCom.area : 0;
                                                parameters.Add("@cuenta", OdbcType.Numeric).Value = insumoCom != null ? insumoCom.cuenta : 0;
                                                parameters.Add("@cantidad", OdbcType.Numeric).Value = ubi.cantidadMovimiento;
                                                parameters.Add("@precio", OdbcType.Numeric).Value = precio;
                                                parameters.Add("@importe", OdbcType.Numeric).Value = importe;
                                                parameters.Add("@partida_oc", OdbcType.Numeric).Value = partidaOC;
                                                parameters.Add("@costo_prom", OdbcType.Numeric).Value = costoPromedio;
                                                parameters.Add("@obra", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@manzana_ini", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@lote_ini", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@interior_ini", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@manzana_fin", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@lote_fin", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@interior_fin", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@remision", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@sector_id", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@id_resguardo", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@area_alm", OdbcType.Char).Value = ubi.area_alm ?? "";
                                                parameters.Add("@lado_alm", OdbcType.Char).Value = ubi.lado_alm ?? "";
                                                parameters.Add("@estante_alm", OdbcType.Char).Value = ubi.estante_alm ?? "";
                                                parameters.Add("@nivel_alm", OdbcType.Char).Value = ubi.nivel_alm ?? "";
                                                parameters.Add("@fecha_fisico", OdbcType.Date).Value = DBNull.Value;

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;

                                                count += cmd.ExecuteNonQuery();

                                                movEntradas.Add(new entradasAlmacenDTO
                                                {
                                                    centroCosto = compra.cc + "-" + ccDesc,
                                                    folioEntrada = nuevaEntrada.numero.ToString(),
                                                    almacen = nuevaEntrada.almacen + "-" + almacenDesc,
                                                    fechaEntrada = nuevaEntrada.fecha,
                                                    partida = partidaMovimiento,
                                                    insumo = sur.insumo + "-" + insumoDesc ?? "",
                                                    areaCuenta = (insumoCom != null ? insumoCom.area : 0) + "-" + (insumoCom != null ? insumoCom.cuenta : 0),
                                                    referencia = "",
                                                    remision = "",
                                                    cantidad = ubi.cantidadMovimiento,
                                                    precio = precio,
                                                    importe = precio * ubi.cantidadMovimiento,
                                                    comentarios = compra.comentarios ?? "",
                                                    ordenCompra = nuevaEntrada.orden_ct.ToString(),
                                                    proveedor = (string)proveedor.nombre,
                                                    direccion = (string)proveedor.direccion,
                                                    ciudad = (string)proveedor.ciudad,
                                                    telefonos = (string)proveedor.telefono1,

                                                    area_alm = ubi.area_alm ?? "",
                                                    lado_alm = ubi.lado_alm ?? "",
                                                    estante_alm = ubi.estante_alm ?? "",
                                                    nivel_alm = ubi.nivel_alm ?? "",
                                                    recibio = recibioDesc ?? "",
                                                });
                                            }

                                            #region Actualizar Tablas Acumula
                                            var objAcumula = new MovimientoDetalleEnkontrolDTO
                                            {
                                                insumo = sur.insumo,
                                                cantidad = ubi.cantidadMovimiento,
                                                precio = precio,
                                                tipo_mov = 1,
                                                costo_prom = costoPromedio
                                            };

                                            actualizarAcumula(nuevaEntrada.almacen, nuevaEntrada.cc, objAcumula, dbSigoplanTransaction, trans);
                                            #endregion
                                        }
                                    }

                                    decimal ivaRecibido = subTotalRecibido * (Convert.ToDecimal(compraENKONTROL.porcent_iva, CultureInfo.InvariantCulture) / 100);
                                    decimal totalRecibido = subTotalRecibido + ivaRecibido;

                                    decimal resultadoTotalRecibido = Math.Round(Convert.ToDecimal(compraENKONTROL.total_rec, CultureInfo.InvariantCulture) + totalRecibido, 2);
                                    decimal totalCompra = Math.Round(Convert.ToDecimal(compraENKONTROL.total, CultureInfo.InvariantCulture), 2);

                                    #region Update Compra Recibido
                                    var consultaEditarCompra = @"
                                            UPDATE so_orden_compra 
                                            SET 
                                                sub_tot_rec = ?, 
                                                iva_rec = ?, 
                                                total_rec = ?, 
                                                estatus = ? 
                                            WHERE cc = ? AND numero = ?";

                                    using (var cmd = new OdbcCommand(consultaEditarCompra))
                                    {
                                        OdbcParameterCollection parameters = cmd.Parameters;

                                        parameters.Add("@sub_tot_rec", OdbcType.Numeric).Value =
                                            Convert.ToDecimal(compraENKONTROL.sub_tot_rec, CultureInfo.InvariantCulture) + subTotalRecibido;
                                        parameters.Add("@iva_rec", OdbcType.Numeric).Value =
                                            Convert.ToDecimal(compraENKONTROL.iva_rec, CultureInfo.InvariantCulture) + ivaRecibido;
                                        parameters.Add("@total_rec", OdbcType.Numeric).Value = resultadoTotalRecibido;
                                        parameters.Add("@estatus", OdbcType.Char).Value = (resultadoTotalRecibido == totalCompra) ? "T" : "P";

                                        parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                        parameters.Add("@numero", OdbcType.Numeric).Value = compra.numero;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;

                                        count += cmd.ExecuteNonQuery();
                                    }
                                    #endregion

                                    #region BACKLOGS: SE VERIFICA SI LA OC SE ENCUENTRA RELACIONADA A UN BL
                                    int idBL = 0;
                                    string numOC = string.Empty, numReq = string.Empty, cc = string.Empty;
                                    numOC = compra.numero.ToString();
                                    numReq = compra.numeroRequisicion.ToString();
                                    List<tblBL_OrdenesCompra> lstOCBL = _context.tblBL_OrdenesCompra.Where(w => w.numOC == numOC && w.numRequisicion == numReq && w.esActivo).ToList();

                                    #region BACKLOGS
                                    if (lstOCBL.Count() > 0)
                                    {
                                        #region SE OBTIENE LISTADO DE OC EN BASE AL CC Y REQUISICIÓN
                                        idBL = lstOCBL.Select(s => s.idBackLog).FirstOrDefault();
                                        cc = compra.cc;
                                        List<dynamic> lstOCDet = new List<dynamic>();
                                        string strQuery = "SELECT numero FROM so_orden_compra_det WHERE cc = '{0}' AND num_requisicion = {1}";
                                        var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                                        odbc.consulta = String.Format(strQuery, cc, numReq);

                                        if (productivo)
                                            lstOCDet = _contextEnkontrol.Select<dynamic>(EnkontrolEnum.ArrenProd, odbc);
                                        else
                                            lstOCDet = _contextEnkontrol.Select<dynamic>(EnkontrolAmbienteEnum.Prueba, odbc);
                                        #endregion

                                        #region SE VERIFICA SI TODAS LAS OC SE ENCUENTRAN CON ESTATUS T
                                        if (lstOCDet.Count() > 0)
                                        {
                                            List<dynamic> lstOC = new List<dynamic>();
                                            foreach (var item in lstOCDet)
                                            {
                                                lstOC.Add(item);
                                            }
                                            List<dynamic> lstOCEstatusT = new List<dynamic>();
                                            strQuery = "SELECT estatus FROM so_orden_compra WHERE cc = '{0}' AND numero IN ({1})";
                                            odbc = new OdbcConsultaDTO() { consulta = strQuery };
                                            odbc.consulta = String.Format(strQuery, cc, string.Join(",", lstOC.Select(s => s.numero)));

                                            if (productivo)
                                                lstOCEstatusT = _contextEnkontrol.Select<dynamic>(EnkontrolEnum.ArrenProd, odbc);
                                            else
                                                lstOCEstatusT = _contextEnkontrol.Select<dynamic>(EnkontrolAmbienteEnum.Prueba, odbc);

                                            if (lstOCEstatusT.Count() > 0)
                                            {
                                                int cantOC = lstOCEstatusT.Count();
                                                int cantOCEstatusT = lstOCEstatusT.Where(s => s.estatus == "T").Count();

                                                if (cantOC == cantOCEstatusT)
                                                {
                                                    #region SE REGISTRA BITACORA DE CUANTOS DÍAS DURO EL ESTATUS A ACTUALIZAR
                                                    tblBL_CatBackLogs objBL = _context.tblBL_CatBackLogs.Where(w => w.id == idBL && w.esActivo).FirstOrDefault();
                                                    tblBL_BitacoraEstatusBL objBitacoraBL = _context.tblBL_BitacoraEstatusBL.Where(w => w.idBL == idBL && w.esActivo).OrderByDescending(o => o.id).FirstOrDefault();
                                                    if (objBitacoraBL != null)
                                                    {
                                                        string areaCuenta = String.Format("{0}", objBL.areaCuenta);
                                                        int diasTranscurridos = (DateTime.Now - objBitacoraBL.fechaCreacion).Days;
                                                        tblBL_BitacoraEstatusBL objGuardarBitacoraEstatusBL = new tblBL_BitacoraEstatusBL();
                                                        objGuardarBitacoraEstatusBL.idBL = idBL;
                                                        objGuardarBitacoraEstatusBL.areaCuenta = areaCuenta;
                                                        objGuardarBitacoraEstatusBL.diasTranscurridos = diasTranscurridos;
                                                        objGuardarBitacoraEstatusBL.idEstatus = (int)EstatusBackLogEnum.ElaboracionOC;
                                                        objGuardarBitacoraEstatusBL.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                                                        objGuardarBitacoraEstatusBL.idUsuarioModificacion = 0;
                                                        objGuardarBitacoraEstatusBL.fechaCreacion = DateTime.Now;
                                                        objGuardarBitacoraEstatusBL.fechaModificacion = new DateTime(2000, 01, 01);
                                                        objGuardarBitacoraEstatusBL.esActivo = true;
                                                        _context.tblBL_BitacoraEstatusBL.Add(objGuardarBitacoraEstatusBL);
                                                        _context.SaveChanges();
                                                    }
                                                    #endregion

                                                    #region SE ACTUALIZA LOS BL A SUMINISTRO DE REFACCIONES (SOLO BL DE OBRA)
                                                    //List<tblBL_CatBackLogs> lstBL = _context.tblBL_CatBackLogs.Where(w => idBL)
                                                    //ActualizarBL.idEstatus = (int)EstatusBackLogEnum.SuministroRefacciones;
                                                    //ActualizarBL.fechaModificacionBL = DateTime.Now;
                                                    //_context.SaveChanges();
                                                    #endregion
                                                }
                                            }
                                        }
                                        #endregion
                                    }
                                    #endregion

                                    #endregion

                                    #region Update Compra SIGOPLAN
                                    if (compraSIGOPLAN != null)
                                    {
                                        compraSIGOPLAN.estatus = (resultadoTotalRecibido == totalCompra) ? "T" : "P";

                                        _context.Entry(compraSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                        _context.SaveChanges();
                                    }
                                    #endregion

                                    #region Mandar correo al requisitor si el surtido de la requisición está completo.
                                    var partidaCompra = ((List<dynamic>)consultaCheckProductivo(
                                        string.Format(@"SELECT TOP 1 * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", compra.cc, compra.numero)
                                    ).ToObject<List<dynamic>>())[0];

                                    var surtidoRequisicionCompleto = verificarRequisicionCompletamenteSurtida(compra.cc, (int)partidaCompra.num_requisicion);

                                    if (surtidoRequisicionCompleto)
                                    {
                                        var titulo = "Requisición \"" + compra.cc + "-" + (int)partidaCompra.num_requisicion + "\" completamente surtida.";
                                        var mensaje = "La requisición \"" + compra.cc + "-" + (int)partidaCompra.num_requisicion + "\" se ha surtido por completo. \n" + "Fecha Surtido Completo: " + DateTime.Now.Date.ToShortDateString();
                                        var correo = new List<string>();

                                        if (empleado != 1)
                                        {
                                            var usuarioSIGOPLAN = _context.tblP_Usuario.FirstOrDefault(x => x.id == usuarioEnkontrolSigoplan.idUsuario);

                                            if (usuarioSIGOPLAN.correo != null)
                                            {
                                                correo.Add(usuarioSIGOPLAN.correo);
                                            }
                                        }
                                        //else
                                        //{
                                        //    correo.Add("omar.nunez@construplan.com.mx");
                                        //}

                                        if (correo.Count == 1)
                                        {
                                            Infrastructure.Utils.GlobalUtils.sendEmail(string.Format("{0}: {1}", PersonalUtilities.GetNombreEmpresa(), titulo), mensaje, correo);
                                        }
                                    }
                                    #endregion

                                    trans.Commit();
                                    dbSigoplanTransaction.Commit();
                                }
                                catch (Exception e)
                                {
                                    trans.Rollback();
                                    dbSigoplanTransaction.Rollback();

                                    LogError(12, 0, "OrdenCompraController", "guardarSurtido", e, AccionEnum.AGREGAR, 0, new { compra = compra, surtido = surtido });

                                    throw new Exception(e.Message);
                                }
                            }
                        }
                    }

                    return movEntradas;
                    #endregion
            }
        }

        private decimal calcularCostoPromedioStarsoft(int tipo_mov, int almacen, string insumoPeru, decimal cantidad, decimal precio, MainContextPeruStarSoft003BDCOMUN _starsoft)
        {
            decimal costoPromedio = 0;

            var registroStock = _starsoft.STKART.ToList().FirstOrDefault(x => Int32.Parse(x.STALMA) == almacen && x.STCODIGO == insumoPeru);

            var montoActual = (decimal)registroStock.STSKDIS * (decimal)registroStock.STKPREPRO;

            if (tipo_mov < 50)
            {
                var montoFinal = montoActual + (cantidad * precio);
                var existenciasFinal = (decimal)registroStock.STSKDIS + cantidad;

                costoPromedio = montoFinal / existenciasFinal;
            }
            else if (tipo_mov > 50)
            {
                var montoFinal = montoActual - (cantidad * precio);
                var existenciasFinal = (decimal)registroStock.STSKDIS - cantidad;

                costoPromedio = existenciasFinal > 0 ? (montoFinal / existenciasFinal) : 0;
            }

            return costoPromedio;
        }

        public List<entradasAlmacenDTO> guardarSurtidoNoInventariable(OrdenCompraDTO compra, List<SurtidoCompraDTO> surtido)
        {
            List<entradasAlmacenDTO> movEntradas = new List<entradasAlmacenDTO>();

            switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
            {
                case EmpresaEnum.Peru:
                    #region PERÚ
                    using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                    {
                        using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                        {
                            using (var dbStarsoftTransaction = _starsoft.Database.BeginTransaction())
                            {
                                try
                                {
                                    movEntradas = new List<entradasAlmacenDTO>();

                                    #region CATALOGOS
                                    List<MAEART> lstInsumos = _starsoft.MAEART.ToList();
                                    List<MAEPROV> lstProveedores = _starsoft.MAEPROV.ToList();
                                    List<TABALM> lstAlmacenes = _starsoft.TABALM.ToList();

                                    tblP_CC objCC = _context.tblP_CC.Where(w => w.cc == compra.cc && w.estatus).FirstOrDefault();
                                    if (objCC == null)
                                        throw new Exception("Ocurrió un error al obtener la información del CC.");
                                    #endregion

                                    #region SE OBTIENE LA INFORMACIÓN DE LA ORDEN DE COMPRA
                                    tblCom_OrdenCompra objOC = _context.tblCom_OrdenCompra.Where(w => w.cc == compra.cc && w.numero == compra.numero && w.estatusRegistro && w.PERU_tipoCompra == compra.PERU_tipoCompra).FirstOrDefault();
                                    if (objOC == null)
                                        throw new Exception("Ocurrió un error al obtener la información de la orden de compra.");

                                    List<tblCom_OrdenCompraDet> lstPartidas = _context.tblCom_OrdenCompraDet.Where(w => w.idOrdenCompra == objOC.id && w.estatusRegistro).ToList();
                                    if (lstPartidas.Count() <= 0)
                                        throw new Exception("Ocurrió un error al obtener las partidas de la orden de compra.");
                                    #endregion

                                    #region VALIDACIONES
                                    #region VALIDA QUE LAS PARTIDAS SEAN NO INVENTARIABLES
                                    foreach (var objPartida in lstPartidas)
                                    {
                                        string tipoInsumo = Convert.ToInt32(objPartida.insumo.ToString().Substring(0, 1)) == (int)PERU_TipoInsumoENUM.INVENTARIABLE ? "I" : "N";
                                        if (tipoInsumo == "I")
                                        {
                                            MAEART objInsumo = lstInsumos.Where(w => w.ACODIGO == objPartida.insumo.ToString().PadLeft(11, '0')).FirstOrDefault();
                                            string mensajeError = string.Format("El insumo [{0}] {1} es inventariable.", objInsumo.ACODIGO, objInsumo.ADESCRI);
                                            throw new Exception(mensajeError);
                                        }
                                    }
                                    #endregion

                                    #region VALIDA QUE PRIMERO SE HAYA IMPRESO PARA PODER GUARDAR
                                    // TO:DO ¿SE OCUPA QUE SE IMPRIMA ANTES DE GUARDAR?
                                    //if ((string)objOC.st_impresa != "I")
                                    //    throw new Exception("La compra no ha sido impresa.");
                                    #endregion

                                    #region VALIDAR QUE ESTE AUTORIZADA LA OC
                                    if (objOC.ST_OC != "A")
                                        throw new Exception("La compra no se encuentra autorizada.");
                                    #endregion
                                    #endregion

                                    #region SE OBTIENE EL ULTIMO FOLIO DE MOVIMIENTOS
                                    //int ultimoFolio = _context.tblAlm_Movimientos.Where(w => w.almacen == objOC.idLibreAbordo && w.cc == compra.cc && w.tipo_mov > 50 && w.estatusHabilitado).Select(s => s.numero).OrderByDescending(o => o).FirstOrDefault();
                                    int ultimoFolio = _starsoft.MOVINGCAB_S.ToList().Where(x => x.CATD == "NI").Select(x => Int32.Parse(x.CANUMDOC)).OrderByDescending(x => x).FirstOrDefault();
                                    int siguienteFolio = ultimoFolio + 1;
#if DEBUG
                                    string stop = string.Empty;
#endif
                                    #endregion

                                    #region VALIDAR QUE NO SE PUEDA SURTIR DE MAS (POR PARTIDA)
                                    decimal total = 0;
                                    foreach (var objSurtido in surtido)
                                    {
                                        tblCom_OrdenCompraDet objOCDet = lstPartidas.Where(w => w.cc == compra.cc && w.numero == compra.numero && w.partida == objSurtido.partida).FirstOrDefault();

                                        total += objSurtido.aSurtir * (Convert.ToDecimal(objOCDet.precio, CultureInfo.InvariantCulture) * Convert.ToDecimal(objOC.tipo_cambio, CultureInfo.InvariantCulture));

                                        decimal cantidadPartida = Convert.ToDecimal(objOCDet.cantidad, CultureInfo.InvariantCulture);
                                        decimal cantidadMovActualSum = objSurtido.aSurtir;
                                        decimal cantidadRecibida = Convert.ToDecimal(objOCDet.cant_recibida, CultureInfo.InvariantCulture);
                                        decimal totalPartidaRecibida = cantidadMovActualSum + cantidadRecibida;

                                        if (totalPartidaRecibida > cantidadPartida)
                                            throw new Exception("No se puede ingresar una cantidad mayor a la establecida en la compra.");
                                    }

                                    if (total <= 0)
                                        throw new Exception("El total no puede ser igual o menor a cero.");
                                    #endregion

                                    #region GUARDAR ENCABEZADO (SIGOPLAN Y STARSOFT)
                                    #region SIGOPLAN
                                    tblAlm_Movimientos objMovimiento = new tblAlm_Movimientos();
                                    objMovimiento.almacen = 0;
                                    objMovimiento.tipo_mov = 1;
                                    objMovimiento.numero = siguienteFolio;
                                    objMovimiento.cc = !string.IsNullOrEmpty(compra.cc) ? compra.cc.ToUpper() : string.Empty;
                                    objMovimiento.compania = 1;
                                    objMovimiento.periodo = DateTime.Now.Month;
                                    objMovimiento.ano = DateTime.Now.Year;
                                    objMovimiento.orden_ct = compra.numero;
                                    objMovimiento.frente = 0;
                                    objMovimiento.fecha = DateTime.Now.Date;
                                    objMovimiento.total = total;
                                    objMovimiento.estatus = "A";
                                    objMovimiento.transferida = "N";
                                    objMovimiento.alm_destino = 0;
                                    objMovimiento.cc_destino = "";
                                    objMovimiento.tipo_trasp = "C";
                                    objMovimiento.tipo_cambio = Convert.ToDecimal(objOC.tipo_cambio, CultureInfo.InvariantCulture);
                                    objMovimiento.estatusHabilitado = true;
                                    objMovimiento.numeroOC = compra.numero;
                                    objMovimiento.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                                    objMovimiento.fechaCreacion = DateTime.Now;
                                    objMovimiento.PERU_proveedor = objOC.PERU_proveedor;
                                    objMovimiento.comentarios = compra.comentarios ?? "";
#if DEBUG
                                    objMovimiento.comentarios = "PRUEBA #ON";
#endif
                                    objMovimiento.PERU_guiaCompraPrefijo = compra.PERU_guiaCompraPrefijo;
                                    objMovimiento.PERU_guiaCompraFolio = compra.PERU_guiaCompraFolio;
                                    objMovimiento.PERU_tipoDocumento = compra.PERU_tipoDocumento;
                                    objMovimiento.PERU_folioDocumento = compra.PERU_folioDocumento;
                                    _context.tblAlm_Movimientos.Add(objMovimiento);
                                    _context.SaveChanges();
                                    #endregion

                                    #region STARSOFT
                                    int idUsuarioSF = _context.tblP_Usuario_Enkontrol.Where(w => w.idUsuario == (int)vSesiones.sesionUsuarioDTO.id).Select(s => s.empleado).FirstOrDefault();
                                    MOVINGCAB_S objMovimientoSF = new MOVINGCAB_S();
                                    objMovimientoSF.CAALMA = string.Empty; // SE GUARDA STRING VACIO EN STARSOFT.
                                    objMovimientoSF.CATD = "NI";
                                    objMovimientoSF.CANUMDOC = siguienteFolio.ToString().PadLeft(10, '0');
                                    objMovimientoSF.CAFECDOC = DateTime.Now;
                                    objMovimientoSF.CATIPMOV = "I";
                                    objMovimientoSF.CACODMOV = "CL";
                                    objMovimientoSF.CASITUA = string.Empty; //TO:DO
                                    objMovimientoSF.CARFTDOC = compra.PERU_tipoDocumento;
                                    objMovimientoSF.CARFNDOC = (compra.PERU_guiaCompraPrefijo ?? "") + (compra.PERU_guiaCompraFolio ?? ""); //compra.PERU_folioDocumento; //TO:DO
                                    objMovimientoSF.CASOLI = null;
                                    objMovimientoSF.CAFECDEV = null;
                                    objMovimientoSF.CACODPRO = !string.IsNullOrEmpty(objOC.PERU_proveedor) ? objOC.PERU_proveedor.Trim() : string.Empty;
                                    objMovimientoSF.CACENCOS = string.Empty;
                                    objMovimientoSF.CARFALMA = null;
                                    objMovimientoSF.CAGLOSA = !string.IsNullOrEmpty(compra.comentarios) ? compra.comentarios.Trim() : string.Empty;
                                    objMovimientoSF.CAFECACT = DateTime.Now;
                                    string horaMinSeg = DateTime.Now.TimeOfDay.ToString(@"hh\:mm\:ss");
                                    objMovimientoSF.CAHORA = horaMinSeg;
                                    objMovimientoSF.CAUSUARI = idUsuarioSF.ToString();
                                    objMovimientoSF.CACODCLI = null;
                                    objMovimientoSF.CARUC = null;
                                    objMovimientoSF.CANOMCLI = null;
                                    objMovimientoSF.CAFORVEN = null;
                                    objMovimientoSF.CACODMON = "MN";
                                    objMovimientoSF.CAVENDE = null;
                                    objMovimientoSF.CATIPCAM = (decimal)objOC.tipo_cambio;
                                    objMovimientoSF.CATIPGUI = null;
                                    objMovimientoSF.CASITGUI = "V";
                                    objMovimientoSF.CAGUIFAC = null;
                                    objMovimientoSF.CADIRENV = null;
                                    objMovimientoSF.CACODTRAN = null;
                                    objMovimientoSF.CANUMORD = objOC.numero.ToString().PadLeft(13, '0');
                                    objMovimientoSF.CAGUIDEV = null;
                                    objMovimientoSF.CANOMPRO = null;
                                    objMovimientoSF.CANROPED = null;
                                    objMovimientoSF.CACOTIZA = null;
                                    objMovimientoSF.CAPORDESCL = 0m;
                                    objMovimientoSF.CAPORDESES = 0m;
                                    objMovimientoSF.CAIMPORTE = 0m;
                                    objMovimientoSF.CANOMTRA = null;
                                    objMovimientoSF.CADIRTRA = null;
                                    objMovimientoSF.CARUCTRA = null;
                                    objMovimientoSF.CAPLATRA = null;
                                    objMovimientoSF.CANROIMP = null;
                                    objMovimientoSF.CACODLIQ = string.Empty;
                                    objMovimientoSF.CAESTIMP = null;
                                    objMovimientoSF.COD_AUDITORIA = string.Empty;
                                    _starsoft.MOVINGCAB_S.Add(objMovimientoSF);
                                    _starsoft.SaveChanges();
                                    #endregion
                                    #endregion

                                    #region GUARDAR DETALLE (SIGOPLAN Y STARSOFT)
                                    TABALM objAlmacen = new TABALM();
                                    int partidaContador = 1;
                                    foreach (var objSurtido in surtido)
                                    {
                                        #region SE INDICA LA NUEVA CANTIDAD RECIBIDA QUE CONTIENE LA PARTIDA
                                        #region PERU
                                        tblCom_OrdenCompraDet objOCDet = lstPartidas.Where(w => w.cc == compra.cc && w.numero == compra.numero && w.partida == objSurtido.partida).FirstOrDefault();
                                        if (objOCDet == null)
                                            throw new Exception("Ocurrió un error al obtener la información de las partidas.");

                                        objOCDet.cant_recibida += (decimal)objSurtido.aSurtir;
                                        _context.SaveChanges();
                                        #endregion

                                        #region STARSOFT
                                        string OC_CNUMORD = objOC.numero.ToString().PadLeft(13, '0');
                                        string OC_CITEM = objSurtido.partida.ToString().PadLeft(3, '0');
                                        var registroDetalleCompraStarsoft = _starsoft.COMOVD_S.FirstOrDefault(x => x.OC_CNUMORD == OC_CNUMORD && x.OC_CITEM == OC_CITEM);

                                        if (registroDetalleCompraStarsoft == null)
                                        {
                                            throw new Exception("No se encuentra la información en Starsoft para la partida #" + objSurtido.partida);
                                        }

                                        registroDetalleCompraStarsoft.OC_NCANTEN += objSurtido.aSurtir;
                                        registroDetalleCompraStarsoft.OC_NCANSAL -= objSurtido.aSurtir;
                                        registroDetalleCompraStarsoft.OC_CESTADO = registroDetalleCompraStarsoft.OC_CANT == registroDetalleCompraStarsoft.OC_NCANTEN ? "04" : "03";
                                        _starsoft.SaveChanges();
                                        #endregion
                                        #endregion

                                        #region DETALLE MOVIMIENTO SIGOPLAN
                                        decimal precio = Convert.ToDecimal(objOCDet.precio, CultureInfo.InvariantCulture) * Convert.ToDecimal(objOC.tipo_cambio, CultureInfo.InvariantCulture);
                                        int partidaOC = (int)objOCDet.partida;
                                        MAEART objInsumo = lstInsumos.Where(w => w.ACODIGO == objSurtido.insumo.ToString().PadLeft(11, '0')).FirstOrDefault();
                                        MAEPROV objProveedor = lstProveedores.Where(w => w.PRVCCODIGO == objOC.PERU_proveedor).FirstOrDefault();
                                        string almacen = objOC.idLibreAbordo.ToString().PadLeft(2, '0');
                                        objAlmacen = lstAlmacenes.Where(w => w.TAALMA == almacen).FirstOrDefault();

                                        int partidaMovimiento = partidaContador++;
                                        tblAlm_MovimientosDet objMovimientoDet = new tblAlm_MovimientosDet();
                                        objMovimientoDet.almacen = 0;
                                        objMovimientoDet.tipo_mov = 1;
                                        objMovimientoDet.numero = siguienteFolio;
                                        objMovimientoDet.partida = partidaMovimiento;
                                        objMovimientoDet.insumo = objSurtido.insumo;
                                        objMovimientoDet.comentarios = compra.comentarios ?? "";
                                        objMovimientoDet.area = 0;
                                        objMovimientoDet.cuenta = 0;
                                        objMovimientoDet.cantidad = objSurtido.cantidad;
                                        objMovimientoDet.precio = precio;
                                        objMovimientoDet.importe = precio * objSurtido.cantidad;
                                        objMovimientoDet.id_resguardo = 0;
                                        objMovimientoDet.area_alm = objSurtido.area_alm;
                                        objMovimientoDet.lado_alm = objSurtido.lado_alm;
                                        objMovimientoDet.estante_alm = objSurtido.estante_alm;
                                        objMovimientoDet.nivel_alm = objSurtido.nivel_alm;
                                        objMovimientoDet.estatusHabilitado = true;
                                        _context.tblAlm_MovimientosDet.Add(objMovimientoDet);
                                        _context.SaveChanges();
                                        #endregion

                                        #region DETALLE MOVIMIENTO STARSOFT
                                        MOVINGDET_S objMovimientoDetSF = new MOVINGDET_S();
                                        objMovimientoDetSF.DEALMA = string.Empty;
                                        objMovimientoDetSF.DETD = "NI";
                                        objMovimientoDetSF.DENUMDOC = siguienteFolio.ToString().PadLeft(10, '0');
                                        objMovimientoDetSF.DEITEM = partidaMovimiento;
                                        objMovimientoDetSF.DECODIGO = objSurtido.insumo.ToString().PadLeft(11, '0');
                                        objMovimientoDetSF.DECANTID = (decimal)objSurtido.cantidad;
                                        objMovimientoDetSF.DECANTENT = (decimal)objSurtido.aSurtir;
                                        objMovimientoDetSF.DECANREF = 0; //TO:DO
                                        objMovimientoDetSF.DECANFAC = 0; //TO:DO
                                        objMovimientoDetSF.DEORDEN = null;
                                        objMovimientoDetSF.DEPREUNI = (decimal)precio; //TO:DO
                                        objMovimientoDetSF.DEPRECIO = (decimal)precio;
                                        objMovimientoDetSF.DEPRECI1 = 0; //TO:DO
                                        objMovimientoDetSF.DEDESCTO = 0; //TO:DO
                                        objMovimientoDetSF.DESTOCK = null;
                                        objMovimientoDetSF.DEIGV = 0; //TO:DO
                                        objMovimientoDetSF.DEIMPMN = 0; //TO:DO
                                        objMovimientoDetSF.DEIMPUS = 0; //TO:DO
                                        objMovimientoDetSF.DESERIE = null; //TO:DO
                                        objMovimientoDetSF.DESITUA = null; //TO:DO
                                        objMovimientoDetSF.DEFECDOC = DateTime.Now;
                                        objMovimientoDetSF.DECENCOS = compra.cc.ToString();
                                        objMovimientoDetSF.DERFALMA = null;
                                        objMovimientoDetSF.DETR = null;
                                        objMovimientoDetSF.DEESTADO = "V";
                                        objMovimientoDetSF.DECODMOV = "CL"; //TO:DO
                                        objMovimientoDetSF.DEVALTOT = (decimal)precio * (decimal)objSurtido.aSurtir;
                                        objMovimientoDetSF.DECODMON = "MN";
                                        objMovimientoDetSF.DETIPO = null;
                                        objMovimientoDetSF.DETIPCAM = objOC.tipo_cambio;
                                        objMovimientoDetSF.DEPREVTA = 0; //TO:DO
                                        objMovimientoDetSF.DEMONVTA = null;
                                        objMovimientoDetSF.DEFECVEN = DateTime.Now;
                                        objMovimientoDetSF.DEDEVOL = 0; //TO:DO
                                        objMovimientoDetSF.DESOLI = "0";
                                        objMovimientoDetSF.DEDESCRI = !string.IsNullOrEmpty(objInsumo.ADESCRI) ? objInsumo.ADESCRI.Trim() : string.Empty;
                                        objMovimientoDetSF.DEPORDES = 0; //TO:DO
                                        objMovimientoDetSF.DEIGVPOR = 0; //TO:DO
                                        objMovimientoDetSF.DEDESCLI = 0; //TO:DO
                                        objMovimientoDetSF.DEDESESP = 0; //TO:DO
                                        objMovimientoDetSF.DENUMFAC = null;
                                        objMovimientoDetSF.DELOTE = string.Empty; //TO:DO
                                        objMovimientoDetSF.DEUNIDAD = ""; //TO:DO
                                        objMovimientoDetSF.DEGLOSA = string.Empty; //TO:DO
#if DEBUG
                                        objMovimientoDetSF.DEGLOSA = "PRUEBA #ON #DET"; //TO:DO
#endif
                                        _starsoft.MOVINGDET_S.Add(objMovimientoDetSF);
                                        _starsoft.SaveChanges();
                                        #endregion

                                        //#region INSERT/UPDATE STKART
                                        //var registroSTKART = _starsoft.STKART.ToList().FirstOrDefault(e => e.STALMA == objAlmacen.TAALMA.ToString().PadLeft(2, '0') && e.STCODIGO == ("0" + objSurtido.insumo.ToString()));

                                        //if (registroSTKART != null)
                                        //{
                                        //    registroSTKART.STSKDIS += objSurtido.cantidad;
                                        //    _starsoft.SaveChanges();
                                        //}
                                        //else
                                        //{
                                        //    _starsoft.STKART.Add(new STKART()
                                        //    {
                                        //        STALMA = objAlmacen.TAALMA.ToString().PadLeft(2, '0'),
                                        //        STCODIGO = ("0" + objSurtido.insumo.ToString()),
                                        //        STSKDIS = objSurtido.cantidad,
                                        //        STSKREF = 0M,
                                        //        STSKMIN = 0M,
                                        //        STSKMAX = 0M,
                                        //        STPUNREP = 0M,
                                        //        STSEMREP = 0M,
                                        //        STTIPREP = null,
                                        //        STUBIALM = null,
                                        //        STLOTCOM = 0M,
                                        //        STTIPCOM = null,
                                        //        STSKCOM = 0M,
                                        //        STKPREPRO = 0M,
                                        //        STKPREULT = 0M,
                                        //        STKFECULT = DateTime.Now.Date,
                                        //        STKPREPROUS = 0M,
                                        //        CANTREFERENCIA = 0M,
                                        //    });
                                        //    _starsoft.SaveChanges();
                                        //}
                                        //#endregion

                                        siguienteFolio++;

                                        #region ENVIAR INFO PARA REPORTE
                                        //MAEART objInsumo = lstInsumos.Where(w => w.ACODIGO == objSurtido.insumo.ToString().PadLeft(11, '0')).FirstOrDefault();
                                        //MAEPROV objProveedor = lstProveedores.Where(w => w.PRVCCODIGO == objOC.PERU_proveedor).FirstOrDefault();

                                        //                                    movEntradas.Add(new entradasAlmacenDTO
                                        //                                    {
                                        //                                        centroCosto = string.Format("[{0}] {1}", objCC.cc, objCC.descripcion),
                                        //                                        folioEntrada = objMovimiento.numero.ToString(),
                                        //                                        almacen = "1",
                                        //                                        fechaEntrada = objMovimiento.fecha,
                                        //                                        partida = partidaMovimiento,
                                        //                                        insumo = string.Format("{0} - {1}", objInsumo.ACODIGO, objInsumo.ADESCRI) ?? "",
                                        //                                        areaCuenta = string.Format("{0} - {1}", 0, 0),
                                        //                                        referencia = "",
                                        //                                        remision = "",
                                        //                                        cantidad = objUbicacion.cantidadMovimiento,
                                        //                                        precio = precio,
                                        //                                        importe = precio * objUbicacion.cantidadMovimiento,
                                        //#if DEBUG
                                        //                                        comentarios = "PRUEBA #ON",
                                        //#else
                                        //                                        comentarios = compra.comentarios ?? "",
                                        //#endif
                                        //                                        ordenCompra = objMovimiento.orden_ct.ToString(),
                                        //                                        proveedor = (string)objProveedor.PRVCNOMBRE,
                                        //                                        direccion = (string)objProveedor.PRVCDIRECC,
                                        //                                        ciudad = (string)objProveedor.PRVCLOCALI,
                                        //                                        telefonos = (string)objProveedor.PRVCTELEF1,
                                        //                                        area_alm = objUbicacion.area_alm ?? "",
                                        //                                        lado_alm = objUbicacion.lado_alm ?? "",
                                        //                                        estante_alm = objUbicacion.estante_alm ?? "",
                                        //                                        nivel_alm = objUbicacion.nivel_alm ?? "",
                                        //                                        recibio = _context.tblP_Usuario.Where(w => w.id == (int)vSesiones.sesionUsuarioDTO.id && w.estatus).Select(s => s.nombre).FirstOrDefault()
                                        //                                    });
                                        #endregion
                                    }
                                    #endregion

                                    #region INDICAR SI LA OC ESTA COMPLETA O PARCIAL
                                    lstPartidas = _context.tblCom_OrdenCompraDet.Where(w => w.idOrdenCompra == objOC.id && w.estatusRegistro).ToList();
                                    string estatusCompra = "T";
                                    foreach (var objPartida in lstPartidas)
                                    {
                                        decimal cantSolicitada = (decimal)objPartida.cantidad;
                                        decimal cantRecibida = (decimal)objPartida.cant_recibida;

                                        if (cantSolicitada != cantRecibida)
                                            estatusCompra = "P";
                                    }
                                    objOC = _context.tblCom_OrdenCompra.Where(w => w.cc == compra.cc && w.numero == compra.numero && w.estatusRegistro).FirstOrDefault();
                                    objOC.estatus = estatusCompra;
                                    _context.SaveChanges();

                                    var numeroCompraStarsoft = compra.numero.ToString("D13");
                                    var registroStarsoft = _starsoft.COMOVC_S.FirstOrDefault(x => x.OC_CNUMORD == numeroCompraStarsoft);

                                    if (registroStarsoft != null)
                                    {
                                        registroStarsoft.OC_CSITORD = estatusCompra == "T" ? "04" : estatusCompra == "P" ? "03" : "";
                                        _starsoft.SaveChanges();
                                    }
                                    else
                                    {
                                        throw new Exception("No se encuentra la información de la compra en StarSoft.");
                                    }
                                    #endregion

                                    #region MANDAR CORREO AL REQUISITOR SI EL SURTIDO DE LA REQUISICIÓN ESTA COMPLETO
                                    //TO:DO ¿SE VA REQUERIR?
                                    #endregion

                                    dbSigoplanTransaction.Commit();
                                    dbStarsoftTransaction.Commit();

                                    // SE REGISTRA BITACORA
                                    SaveBitacora(0, (int)AccionEnum.AGREGAR, 0, JsonUtils.convertNetObjectToJson(compra));
                                    SaveBitacora(0, (int)AccionEnum.AGREGAR, 0, JsonUtils.convertNetObjectToJson(surtido));

                                    return movEntradas;
                                }
                                catch (Exception e)
                                {
                                    dbSigoplanTransaction.Rollback();
                                    dbStarsoftTransaction.Rollback();
                                    LogError(0, 0, _NOMBRE_CONTROLADOR, "guardarSurtido", e, AccionEnum.AGREGAR, 0, 0);
                                    throw new Exception(e.Message);
                                }
                            }
                        }
                    }
                    #endregion
                case EmpresaEnum.Colombia:
                    #region COLOMBIA
                    using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                    {
                        using (var con = checkConexionProductivo())
                        {
                            using (var trans = con.BeginTransaction())
                            {
                                try
                                {
                                    #region Validación Inventariables
                                    var registrosGrupoInsumo = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM grupos_insumo")).ToObject<List<dynamic>>();

                                    foreach (var det in surtido)
                                    {
                                        var tipo_insumo = Int32.Parse(det.insumo.ToString().Substring(0, 1));
                                        var grupo_insumo = Int32.Parse(det.insumo.ToString().Substring(1, 2));
                                        var registroGrupoInsumo = registrosGrupoInsumo.FirstOrDefault(x => (int)x.tipo_insumo == tipo_insumo && (int)x.grupo_insumo == grupo_insumo);

                                        if (registroGrupoInsumo != null)
                                        {
                                            if ((string)registroGrupoInsumo.inventariado != "N")
                                            {
                                                throw new Exception(string.Format(@"El insumo ""{0}"" es inventariable.", det.insumo));
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception(string.Format(@"No se encuentra la información del grupo de insumo para el insumo ""{0}"".", det.insumo));
                                        }
                                    }
                                    #endregion

                                    var empleado = 0;
                                    var usuarioSigoplan = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                                    if (usuarioSigoplan != null)
                                    {
                                        empleado = usuarioSigoplan.empleado;
                                    }

                                    var compraSIGOPLAN = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.cc == compra.cc && x.numero == compra.numero);

                                    List<tblCom_OrdenCompraDet> compraSIGOPLANDet = new List<tblCom_OrdenCompraDet>();

                                    if (compraSIGOPLAN != null)
                                    {
                                        compraSIGOPLANDet = _context.tblCom_OrdenCompraDet.Where(x => x.idOrdenCompra == compraSIGOPLAN.id).ToList();
                                    }

                                    var folioMovimientoNuevo = 0;

                                    var ultimoMovimientoEK = consultaCheckProductivo(
                                        string.Format(@"SELECT TOP 1 
                                                    remision AS numero 
                                                FROM so_movimientos_noinv 
                                                WHERE almacen = {0} AND tipo_mov = {1} 
                                                ORDER BY remision DESC", 999, 1)
                                    );

                                    if (ultimoMovimientoEK != null)
                                    {
                                        var ultimoMovimiento = (List<OrdenCompraDTO>)ultimoMovimientoEK.ToObject<List<OrdenCompraDTO>>();

                                        folioMovimientoNuevo = ultimoMovimiento[0].numero + 1;
                                    }
                                    else
                                    {
                                        folioMovimientoNuevo = 1;
                                    }

                                    var compraENKONTROL = consultaCheckProductivo(string.Format(@"SELECT * FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", compra.cc, compra.numero));
                                    var compraEK = ((List<dynamic>)compraENKONTROL.ToObject<List<dynamic>>())[0];

                                    #region Validación Compra Impresa.
                                    if ((string)compraEK.st_impresa != "I")
                                    {
                                        throw new Exception("La compra no ha sido impresa.");
                                    }
                                    #endregion

                                    #region Validación compra autorizada.
                                    if ((EmpresaEnum)vSesiones.sesionEmpresaActual != EmpresaEnum.Colombia)
                                    {
                                        if (compraEK.ST_OC == null)
                                        {
                                            throw new Exception("La compra no está autorizada.");
                                        }
                                        else
                                        {
                                            if ((string)compraEK.ST_OC != "A")
                                            {
                                                throw new Exception("La compra no está autorizada.");
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if ((string)compraEK.vobo_aut == "N" && (string)compraEK.aut_aut == "N")
                                        {
                                            throw new Exception("La compra no está autorizada.");
                                        }
                                    }
                                    #endregion

                                    decimal total = 0;

                                    foreach (var s in surtido)
                                    {
                                        var partidaEK = ((List<dynamic>)consultaCheckProductivo(
                                            string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1} AND partida = {2}",
                                            (string)compraEK.cc,
                                            (int)compraEK.numero,
                                            s.partida)
                                        ).ToObject<List<dynamic>>())[0];

                                        total +=
                                            s.aSurtir * (Convert.ToDecimal(partidaEK.precio, CultureInfo.InvariantCulture) * Convert.ToDecimal(compraEK.tipo_cambio, CultureInfo.InvariantCulture));

                                        #region Validación sobrepaso de surtido
                                        var cantidadPartida = Convert.ToDecimal(partidaEK.cantidad, CultureInfo.InvariantCulture);
                                        var cantidadMovActualSum = s.aSurtir;
                                        var cantidadRecibida = Convert.ToDecimal(partidaEK.cant_recibida, CultureInfo.InvariantCulture);
                                        var totalPartidaRecibida = cantidadMovActualSum + cantidadRecibida;

                                        if (totalPartidaRecibida > cantidadPartida)
                                        {
                                            throw new Exception("No se puede ingresar una cantidad mayor a la establecida en la compra.");
                                        }
                                        #endregion
                                    }

                                    if (total <= 0)
                                    {
                                        throw new Exception("El total no puede ser igual o menor a cero.");
                                    }

                                    var nuevaEntrada = new tblAlm_Movimientos
                                    {
                                        almacen = 999,
                                        tipo_mov = 1,
                                        numero = folioMovimientoNuevo,
                                        cc = compra.cc.ToUpper(),
                                        compania = 1,
                                        periodo = DateTime.Now.Month,
                                        ano = DateTime.Now.Year,
                                        orden_ct = compra.numero,
                                        frente = 0,
                                        fecha = DateTime.Now.Date,
                                        proveedor = compra.proveedor,
                                        total = total,
                                        estatus = "A",
                                        transferida = "N",
                                        alm_destino = 0,
                                        cc_destino = "",
                                        comentarios = compra.comentarios,
                                        tipo_trasp = "C",
                                        tipo_cambio = Convert.ToDecimal(compraEK.tipo_cambio, CultureInfo.InvariantCulture),
                                        estatusHabilitado = true,
                                        numeroOC = compra.numero
                                    };

                                    _context.tblAlm_Movimientos.Add(nuevaEntrada);
                                    _context.SaveChanges();

                                    var count = 0;

                                    var consulta = @"INSERT INTO DBA.so_movimientos_noinv 
                                         (almacen, tipo_mov, remision, cc, compania, periodo, ano, orden_ct, frente, fecha, proveedor, total, estatus, 
                                         transferida, poliza, empleado, alm_destino, cc_destino, comentarios, tipo_trasp, numero_destino, tp, year_poliza, 
                                         mes_poliza, tipo_cambio, hora, fecha_modifica, empleado_modifica, tc_cc) 
                                         VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

                                    using (var cmd = new OdbcCommand(consulta))
                                    {
                                        OdbcParameterCollection parameters = cmd.Parameters;

                                        //parameters.Add("@almacen", OdbcType.Numeric).Value = nuevaEntrada.almacen;
                                        parameters.Add("@almacen", OdbcType.Numeric).Value = 999;
                                        parameters.Add("@tipo_mov", OdbcType.Numeric).Value = nuevaEntrada.tipo_mov;
                                        parameters.Add("@remision", OdbcType.Numeric).Value = nuevaEntrada.numero;
                                        parameters.Add("@cc", OdbcType.Char).Value = nuevaEntrada.cc;
                                        parameters.Add("@compania", OdbcType.Numeric).Value = nuevaEntrada.compania;
                                        parameters.Add("@periodo", OdbcType.Numeric).Value = nuevaEntrada.periodo;
                                        parameters.Add("@ano", OdbcType.Numeric).Value = nuevaEntrada.ano;
                                        parameters.Add("@orden_ct", OdbcType.Numeric).Value = nuevaEntrada.orden_ct;
                                        parameters.Add("@frente", OdbcType.Numeric).Value = nuevaEntrada.frente;
                                        parameters.Add("@fecha", OdbcType.Date).Value = nuevaEntrada.fecha.Date;
                                        parameters.Add("@proveedor", OdbcType.Numeric).Value = nuevaEntrada.proveedor;
                                        parameters.Add("@total", OdbcType.Numeric).Value = nuevaEntrada.total;
                                        parameters.Add("@estatus", OdbcType.Char).Value = nuevaEntrada.estatus ?? "";
                                        parameters.Add("@transferida", OdbcType.Char).Value = nuevaEntrada.transferida ?? "";
                                        parameters.Add("@poliza", OdbcType.Numeric).Value = 0;
                                        parameters.Add("@empleado", OdbcType.Numeric).Value = empleado;
                                        parameters.Add("@alm_destino", OdbcType.Numeric).Value = 0;
                                        parameters.Add("@cc_destino", OdbcType.Char).Value = nuevaEntrada.cc_destino ?? "";
                                        parameters.Add("@comentarios", OdbcType.Char).Value = nuevaEntrada.comentarios ?? "";
                                        parameters.Add("@tipo_trasp", OdbcType.Char).Value = nuevaEntrada.tipo_trasp ?? "";
                                        parameters.Add("@numero_destino", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@tp", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@year_poliza", OdbcType.Numeric).Value = DateTime.Now.Year;
                                        parameters.Add("@mes_poliza", OdbcType.Numeric).Value = DateTime.Now.Month;
                                        parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = nuevaEntrada.tipo_cambio;
                                        parameters.Add("@hora", OdbcType.Time).Value = DateTime.Now.TimeOfDay;
                                        parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                        parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = empleado;
                                        parameters.Add("@tc_cc", OdbcType.Numeric).Value = 1;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;

                                        count += cmd.ExecuteNonQuery();
                                    }

                                    var ccDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM cc WHERE cc = '{0}' AND st_ppto != 'T'", compra.cc));
                                    var ccDesc = (string)(((List<dynamic>)ccDescEK.ToObject<List<dynamic>>())[0].descripcion);
                                    var almacenDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", 999));
                                    var almacenDesc = (string)(((List<dynamic>)almacenDescEK.ToObject<List<dynamic>>())[0].descripcion);

                                    var compraDetalleEK = new List<OrdenCompraDetDTO>();

                                    dynamic proveedor = null;

                                    compraDetalleEK = (List<OrdenCompraDetDTO>)consultaCheckProductivo(
                                        string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", compra.cc, compra.numero)
                                    ).ToObject<List<OrdenCompraDetDTO>>();

                                    proveedor = ((List<dynamic>)consultaCheckProductivo(
                                        string.Format(@"SELECT * FROM sp_proveedores WHERE numpro = {0}", (int)compraEK.proveedor)
                                    ).ToObject<List<dynamic>>())[0];
                                    var recibioDesc = (string)((List<dynamic>)consultaCheckProductivo(
                                        string.Format(@"SELECT * FROM empleados WHERE empleado = {0}", empleado)
                                    ).ToObject<List<dynamic>>())[0].descripcion;

                                    decimal subTotalRecibido = 0;

                                    #region Update Compra Detalle Recibido
                                    foreach (var s in surtido)
                                    {
                                        var partidaCompraEK = ((List<dynamic>)consultaCheckProductivo(
                                            string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1} AND partida = {2}",
                                            (string)compraEK.cc,
                                            (int)compraEK.numero,
                                            s.partida)
                                        ).ToObject<List<dynamic>>())[0];

                                        var importeRecibido =
                                            s.aSurtir * (Convert.ToDecimal(partidaCompraEK.precio, CultureInfo.InvariantCulture) * Convert.ToDecimal(compraEK.tipo_cambio, CultureInfo.InvariantCulture));

                                        subTotalRecibido += importeRecibido;

                                        var consultaUpdateCompraDetalleRecibido = @"
                                                                UPDATE DBA.so_orden_compra_det 
                                                                SET 
                                                                    cant_recibida = ?, 
                                                                    imp_recibido = ?, 
                                                                    fecha_recibido = ? 
                                                                WHERE cc = ? AND numero = ? AND partida = ? AND insumo = ?";

                                        using (var cmd = new OdbcCommand(consultaUpdateCompraDetalleRecibido))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@cant_recibida", OdbcType.Numeric).Value =
                                                Convert.ToDecimal(partidaCompraEK.cant_recibida, CultureInfo.InvariantCulture) + s.aSurtir;
                                            parameters.Add("@imp_recibido", OdbcType.Numeric).Value =
                                                Convert.ToDecimal(partidaCompraEK.imp_recibido, CultureInfo.InvariantCulture) + importeRecibido;
                                            parameters.Add("@fecha_recibido", OdbcType.Date).Value = DateTime.Now.Date;

                                            parameters.Add("@cc", OdbcType.Char).Value = (string)compra.cc;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = (int)compra.numero;
                                            parameters.Add("@partida", OdbcType.Numeric).Value = (int)partidaCompraEK.partida;
                                            parameters.Add("@insumo", OdbcType.Numeric).Value = (int)partidaCompraEK.insumo;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }

                                        #region Actualizar Explosión
                                        var registroExplosionEK = consultaCheckProductivo(
                                            string.Format(@"SELECT * FROM so_explos_mat WHERE cc = '{0}' AND insumo = {1} AND year_explos = {2}", compra.cc, s.insumo, DateTime.Now.Year)
                                        );

                                        if (registroExplosionEK != null)
                                        {
                                            var registroExplosion = ((List<dynamic>)registroExplosionEK.ToObject<List<dynamic>>())[0];

                                            var nuevaCantidadRecibida = Convert.ToDecimal(registroExplosion.cant_recibida, CultureInfo.InvariantCulture) + s.aSurtir;
                                            var nuevoImporteRecibido = Convert.ToDecimal(registroExplosion.imp_recibido, CultureInfo.InvariantCulture) + importeRecibido;

                                            var consultaExplosionUpdate = @"
                                            UPDATE DBA.so_explos_mat 
                                            SET cant_recibida = ?, imp_recibido = ? 
                                            WHERE cc = ? AND insumo = ? AND year_explos = ?";

                                            using (var cmd = new OdbcCommand(consultaExplosionUpdate))
                                            {
                                                OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                parametersExplosion.Add("@cant_recibida", OdbcType.Numeric).Value = nuevaCantidadRecibida;
                                                parametersExplosion.Add("@imp_recibido", OdbcType.Numeric).Value = nuevoImporteRecibido;

                                                parametersExplosion.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = s.insumo;
                                                parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;

                                                count += cmd.ExecuteNonQuery();
                                            }
                                        }
                                        else
                                        {
                                            var consultaExplosionInsert = @"INSERT INTO DBA.so_explos_mat 
                                            (cc, insumo, cantidad, precio, aditiva_cant, aditiva_imp, deduc_cant, deduc_imp, cant_requerida, 
                                            comp_cant, comp_imp, ajuste_cant, ajuste_imp, traspaso_cant, traspaso_imp, cant_recibida, imp_recibido, 
                                            aditiva_cant_fecha, deduc_cant_fecha, aditiva_precio_fecha, deduc_precio_fecha, aditiva_precio, deductiva_precio, 
                                            traspaso_cant_entrada, traspaso_imp_entrada, importe, year_explos, periodo, bit_auto_presu, cantidad_aditiva_sun, 
                                            cantidad_deductiva_sun, cantidad_extra_sun) 
                                            VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                            using (var cmd = new OdbcCommand(consultaExplosionInsert))
                                            {
                                                OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                parametersExplosion.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = s.insumo;
                                                parametersExplosion.Add("@cantidad", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@precio", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@aditiva_cant", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@aditiva_imp", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@deduc_cant", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@deduc_imp", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@cant_requerida", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@comp_cant", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@comp_imp", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@ajuste_cant", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@ajuste_imp", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@traspaso_cant", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@traspaso_imp", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@cant_recibida", OdbcType.Numeric).Value = s.aSurtir;
                                                parametersExplosion.Add("@imp_recibido", OdbcType.Numeric).Value = importeRecibido;
                                                parametersExplosion.Add("@aditiva_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                                parametersExplosion.Add("@deduc_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                                parametersExplosion.Add("@aditiva_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                                parametersExplosion.Add("@deduc_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                                parametersExplosion.Add("@aditiva_precio", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@deductiva_precio", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@traspaso_cant_entrada", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@traspaso_imp_entrada", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@importe", OdbcType.Numeric).Value = DBNull.Value;
                                                parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;
                                                parametersExplosion.Add("@periodo", OdbcType.Char).Value = DBNull.Value;
                                                parametersExplosion.Add("@bit_auto_presu", OdbcType.Char).Value = "N";
                                                parametersExplosion.Add("@cantidad_aditiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                                parametersExplosion.Add("@cantidad_deductiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                                parametersExplosion.Add("@cantidad_extra_sun", OdbcType.Numeric).Value = DBNull.Value;

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;

                                                count += cmd.ExecuteNonQuery();
                                            }
                                        }
                                        #endregion
                                    }
                                    #endregion

                                    #region Update Compra Recibido
                                    var ivaRecibido = subTotalRecibido * (Convert.ToDecimal(compraEK.porcent_iva, CultureInfo.InvariantCulture) / 100);
                                    var totalRecibido = subTotalRecibido + ivaRecibido;

                                    decimal resultadoSubTotalRecibido = Convert.ToDecimal(compraEK.sub_tot_rec, CultureInfo.InvariantCulture) + subTotalRecibido;

                                    var consultaUpdateCompraRecibido = @"
                                                                UPDATE DBA.so_orden_compra 
                                                                SET 
                                                                    sub_tot_rec = ?, 
                                                                    iva_rec = ?, 
                                                                    total_rec = ?, 
                                                                    estatus = ? 
                                                                WHERE cc = ? AND numero = ?";

                                    using (var cmd = new OdbcCommand(consultaUpdateCompraRecibido))
                                    {
                                        OdbcParameterCollection parameters = cmd.Parameters;

                                        parameters.Add("@sub_tot_rec", OdbcType.Numeric).Value = resultadoSubTotalRecibido;
                                        parameters.Add("@iva_rec", OdbcType.Numeric).Value = Convert.ToDecimal(compraEK.iva_rec, CultureInfo.InvariantCulture) + ivaRecibido;
                                        parameters.Add("@total_rec", OdbcType.Numeric).Value = Convert.ToDecimal(compraEK.total_rec, CultureInfo.InvariantCulture) + totalRecibido;
                                        parameters.Add("@estatus", OdbcType.Char).Value =
                                            (compraEK.sub_total > resultadoSubTotalRecibido ? "P" : "T");

                                        parameters.Add("@cc", OdbcType.Char).Value = (string)compra.cc;
                                        parameters.Add("@numero", OdbcType.Numeric).Value = (int)compra.numero;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;

                                        count += cmd.ExecuteNonQuery();
                                    }
                                    #endregion

                                    #region Update Compra SIGOPLAN
                                    if (compraSIGOPLAN != null)
                                    {
                                        compraSIGOPLAN.estatus = (compraEK.sub_total > resultadoSubTotalRecibido ? "P" : "T");

                                        _context.Entry(compraSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                        _context.SaveChanges();
                                    }
                                    #endregion

                                    var partidaContador = 1;

                                    foreach (var sur in surtido)
                                    {
                                        var insumoComEK = compraDetalleEK.FirstOrDefault(x => x.partida == sur.partida);

                                        var area = (insumoComEK != null && insumoComEK.area != null) ? (int)insumoComEK.area : 0;
                                        var cuenta = (insumoComEK != null && insumoComEK.cuenta != null) ? (int)insumoComEK.cuenta : 0;
                                        var precio = insumoComEK != null ? insumoComEK.precio * Convert.ToDecimal(compraEK.tipo_cambio, CultureInfo.InvariantCulture) : 0;
                                        var importe = precio * sur.aSurtir;

                                        List<tblAlm_MovimientosDet> listEntradaDet = new List<tblAlm_MovimientosDet>();

                                        var partidaMovimiento = partidaContador++;

                                        var nuevaEntradaDet = new tblAlm_MovimientosDet
                                        {
                                            //almacen = compraSIGOPLAN != null ? (int)compraSIGOPLAN.idLibreAbordo : 1,
                                            almacen = 999,
                                            tipo_mov = 1,
                                            numero = folioMovimientoNuevo,
                                            partida = partidaMovimiento,
                                            insumo = sur.insumo,
                                            comentarios = compra.comentarios,
                                            area = area,
                                            cuenta = cuenta,
                                            cantidad = sur.aSurtir,
                                            precio = precio,
                                            importe = importe,
                                            id_resguardo = 0,
                                            area_alm = sur.area_alm,
                                            lado_alm = sur.lado_alm,
                                            estante_alm = sur.estante_alm,
                                            nivel_alm = sur.nivel_alm,
                                            estatusHabilitado = true
                                        };

                                        _context.tblAlm_MovimientosDet.Add(nuevaEntradaDet);
                                        _context.SaveChanges();

                                        //decimal costoPromedio = getCostoPromedioEntrada(nuevaEntrada.almacen, nuevaEntrada.cc, nuevaEntradaDet.insumo);
                                        var insumoDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM insumos WHERE insumo = {0}", nuevaEntradaDet.insumo));
                                        var insumoDesc = (string)(((List<dynamic>)insumoDescEK.ToObject<List<dynamic>>())[0].descripcion);

                                        if (nuevaEntradaDet.precio <= 0 || nuevaEntradaDet.importe <= 0)
                                        {
                                            throw new Exception("El precio o el importe no puede ser igual o menor a cero.");
                                        }

                                        var consultaDetalle = @"INSERT INTO DBA.so_movimientos_noinv_det 
                                                        (almacen, tipo_mov, remision, partida, insumo, comentarios, area, cuenta, cantidad, precio, importe, partida_oc, costo_prom, remision2, iva, porcent_iva) 
                                                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

                                        using (var cmd = new OdbcCommand(consultaDetalle))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            //parameters.Add("@almacen", OdbcType.Numeric).Value = nuevaEntradaDet.almacen;
                                            parameters.Add("@almacen", OdbcType.Numeric).Value = 999;
                                            parameters.Add("@tipo_mov", OdbcType.Numeric).Value = nuevaEntradaDet.tipo_mov;
                                            parameters.Add("@remision", OdbcType.Numeric).Value = nuevaEntradaDet.numero;
                                            parameters.Add("@partida", OdbcType.Numeric).Value = nuevaEntradaDet.partida;
                                            parameters.Add("@insumo", OdbcType.Numeric).Value = nuevaEntradaDet.insumo;
                                            parameters.Add("@comentarios", OdbcType.Char).Value = nuevaEntradaDet.comentarios ?? "";
                                            parameters.Add("@area", OdbcType.Numeric).Value = nuevaEntradaDet.area;
                                            parameters.Add("@cuenta", OdbcType.Numeric).Value = nuevaEntradaDet.cuenta;
                                            parameters.Add("@cantidad", OdbcType.Numeric).Value = nuevaEntradaDet.cantidad;
                                            parameters.Add("@precio", OdbcType.Numeric).Value = nuevaEntradaDet.precio;
                                            parameters.Add("@importe", OdbcType.Numeric).Value = nuevaEntradaDet.importe;
                                            parameters.Add("@partida_oc", OdbcType.Numeric).Value = insumoComEK.partida;
                                            parameters.Add("@costo_prom", OdbcType.Numeric).Value = nuevaEntradaDet.precio; //parameters.Add("@costo_prom", OdbcType.Numeric).Value = costoPromedio;
                                            parameters.Add("@remision2", OdbcType.Char).Value = nuevaEntradaDet.numero;
                                            parameters.Add("@iva", OdbcType.Numeric).Value = insumoComEK.iva;
                                            parameters.Add("@porcent_iva", OdbcType.Numeric).Value = insumoComEK.porcent_iva;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();

                                            movEntradas.Add(new entradasAlmacenDTO
                                            {
                                                centroCosto = ccDesc,
                                                folioEntrada = nuevaEntrada.numero.ToString(),
                                                almacen = almacenDesc,
                                                fechaEntrada = nuevaEntrada.fecha,
                                                partida = nuevaEntradaDet.partida,
                                                insumo = nuevaEntradaDet.insumo + "-" + insumoDesc ?? "",
                                                areaCuenta = nuevaEntradaDet.area + "-" + nuevaEntradaDet.cuenta,
                                                referencia = "",
                                                remision = "",
                                                cantidad = nuevaEntradaDet.cantidad,
                                                precio = nuevaEntradaDet.precio,
                                                importe = nuevaEntradaDet.importe,
                                                comentarios = nuevaEntradaDet.comentarios ?? "",
                                                ordenCompra = nuevaEntrada.orden_ct.ToString(),
                                                proveedor = (string)proveedor.nombre,
                                                direccion = (string)proveedor.direccion,
                                                ciudad = (string)proveedor.ciudad,
                                                telefonos = (string)proveedor.telefono1,

                                                area_alm = nuevaEntradaDet.area_alm ?? "",
                                                lado_alm = nuevaEntradaDet.lado_alm ?? "",
                                                estante_alm = nuevaEntradaDet.estante_alm ?? "",
                                                nivel_alm = nuevaEntradaDet.nivel_alm ?? "",
                                                recibio = recibioDesc ?? ""
                                            });
                                        }
                                    }

                                    trans.Commit();
                                    dbSigoplanTransaction.Commit();
                                }
                                catch (Exception e)
                                {
                                    trans.Rollback();
                                    dbSigoplanTransaction.Rollback();

                                    LogError(12, 0, "OrdenCompraController", "guardarSurtidoNoInventariable", e, AccionEnum.AGREGAR, 0, new { compra = compra, surtido = surtido });

                                    throw new Exception(e.Message);
                                }
                            }
                        }
                    }
                    return movEntradas;
                    #endregion
                default:
                    #region OTRAS EMPRESAS
                    using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                    {
                        using (var con = checkConexionProductivo())
                        {
                            using (var trans = con.BeginTransaction())
                            {
                                try
                                {
                                    #region Validación Inventariables
                                    var registrosGrupoInsumo = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM grupos_insumo")).ToObject<List<dynamic>>();

                                    foreach (var det in surtido)
                                    {
                                        var tipo_insumo = Int32.Parse(det.insumo.ToString().Substring(0, 1));
                                        var grupo_insumo = Int32.Parse(det.insumo.ToString().Substring(1, 2));
                                        var registroGrupoInsumo = registrosGrupoInsumo.FirstOrDefault(x => (int)x.tipo_insumo == tipo_insumo && (int)x.grupo_insumo == grupo_insumo);

                                        if (registroGrupoInsumo != null)
                                        {
                                            if ((string)registroGrupoInsumo.inventariado != "N")
                                            {
                                                throw new Exception(string.Format(@"El insumo ""{0}"" es inventariable.", det.insumo));
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception(string.Format(@"No se encuentra la información del grupo de insumo para el insumo ""{0}"".", det.insumo));
                                        }
                                    }
                                    #endregion

                                    var empleado = 0;
                                    var usuarioSigoplan = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                                    if (usuarioSigoplan != null)
                                    {
                                        empleado = usuarioSigoplan.empleado;
                                    }

                                    var compraSIGOPLAN = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.cc == compra.cc && x.numero == compra.numero);

                                    List<tblCom_OrdenCompraDet> compraSIGOPLANDet = new List<tblCom_OrdenCompraDet>();

                                    if (compraSIGOPLAN != null)
                                    {
                                        compraSIGOPLANDet = _context.tblCom_OrdenCompraDet.Where(x => x.idOrdenCompra == compraSIGOPLAN.id).ToList();
                                    }

                                    var folioMovimientoNuevo = 0;

                                    var ultimoMovimientoEK = consultaCheckProductivo(
                                        string.Format(@"SELECT TOP 1 
                                                    remision AS numero 
                                                FROM so_movimientos_noinv 
                                                WHERE almacen = {0} AND tipo_mov = {1} 
                                                ORDER BY remision DESC", 999, 1)
                                    );

                                    if (ultimoMovimientoEK != null)
                                    {
                                        var ultimoMovimiento = (List<OrdenCompraDTO>)ultimoMovimientoEK.ToObject<List<OrdenCompraDTO>>();

                                        folioMovimientoNuevo = ultimoMovimiento[0].numero + 1;
                                    }
                                    else
                                    {
                                        folioMovimientoNuevo = 1;
                                    }

                                    var compraENKONTROL = consultaCheckProductivo(string.Format(@"SELECT * FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", compra.cc, compra.numero));
                                    var compraEK = ((List<dynamic>)compraENKONTROL.ToObject<List<dynamic>>())[0];

                                    #region Validación Compra Impresa.
                                    if ((string)compraEK.st_impresa != "I")
                                    {
                                        throw new Exception("La compra no ha sido impresa.");
                                    }
                                    #endregion

                                    #region Validación compra autorizada.
                                    if ((EmpresaEnum)vSesiones.sesionEmpresaActual != EmpresaEnum.Colombia)
                                    {
                                        if (compraEK.ST_OC == null)
                                        {
                                            throw new Exception("La compra no está autorizada.");
                                        }
                                        else
                                        {
                                            if ((string)compraEK.ST_OC != "A")
                                            {
                                                throw new Exception("La compra no está autorizada.");
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if ((string)compraEK.vobo_aut == "N" && (string)compraEK.aut_aut == "N")
                                        {
                                            throw new Exception("La compra no está autorizada.");
                                        }
                                    }
                                    #endregion

                                    decimal total = 0;

                                    foreach (var s in surtido)
                                    {
                                        var partidaEK = ((List<dynamic>)consultaCheckProductivo(
                                            string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1} AND partida = {2}",
                                            (string)compraEK.cc,
                                            (int)compraEK.numero,
                                            s.partida)
                                        ).ToObject<List<dynamic>>())[0];

                                        total +=
                                            s.aSurtir * (Convert.ToDecimal(partidaEK.precio, CultureInfo.InvariantCulture) * Convert.ToDecimal(compraEK.tipo_cambio, CultureInfo.InvariantCulture));

                                        #region Validación sobrepaso de surtido
                                        var cantidadPartida = Convert.ToDecimal(partidaEK.cantidad, CultureInfo.InvariantCulture);
                                        var cantidadMovActualSum = s.aSurtir;
                                        var cantidadRecibida = Convert.ToDecimal(partidaEK.cant_recibida, CultureInfo.InvariantCulture);
                                        var totalPartidaRecibida = cantidadMovActualSum + cantidadRecibida;

                                        if (totalPartidaRecibida > cantidadPartida)
                                        {
                                            throw new Exception("No se puede ingresar una cantidad mayor a la establecida en la compra.");
                                        }
                                        #endregion
                                    }

                                    if (total <= 0)
                                    {
                                        throw new Exception("El total no puede ser igual o menor a cero.");
                                    }

                                    var nuevaEntrada = new tblAlm_Movimientos
                                    {
                                        almacen = 999,
                                        tipo_mov = 1,
                                        numero = folioMovimientoNuevo,
                                        cc = compra.cc.ToUpper(),
                                        compania = 1,
                                        periodo = DateTime.Now.Month,
                                        ano = DateTime.Now.Year,
                                        orden_ct = compra.numero,
                                        frente = 0,
                                        fecha = DateTime.Now.Date,
                                        proveedor = compra.proveedor,
                                        total = total,
                                        estatus = "A",
                                        transferida = "N",
                                        alm_destino = 0,
                                        cc_destino = "",
                                        comentarios = compra.comentarios,
                                        tipo_trasp = "C",
                                        tipo_cambio = Convert.ToDecimal(compraEK.tipo_cambio, CultureInfo.InvariantCulture),
                                        estatusHabilitado = true,
                                        numeroOC = compra.numero
                                    };

                                    _context.tblAlm_Movimientos.Add(nuevaEntrada);
                                    _context.SaveChanges();

                                    var count = 0;

                                    var consulta = @"INSERT INTO so_movimientos_noinv 
                                         (almacen, tipo_mov, remision, cc, compania, periodo, ano, orden_ct, frente, fecha, proveedor, total, estatus, 
                                         transferida, poliza, empleado, alm_destino, cc_destino, comentarios, tipo_trasp, numero_destino, tp, year_poliza, 
                                         mes_poliza, tipo_cambio, hora, fecha_modifica, empleado_modifica, tc_cc, remision_b2b) 
                                         VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

                                    using (var cmd = new OdbcCommand(consulta))
                                    {
                                        OdbcParameterCollection parameters = cmd.Parameters;

                                        //parameters.Add("@almacen", OdbcType.Numeric).Value = nuevaEntrada.almacen;
                                        parameters.Add("@almacen", OdbcType.Numeric).Value = 999;
                                        parameters.Add("@tipo_mov", OdbcType.Numeric).Value = nuevaEntrada.tipo_mov;
                                        parameters.Add("@remision", OdbcType.Numeric).Value = nuevaEntrada.numero;
                                        parameters.Add("@cc", OdbcType.Char).Value = nuevaEntrada.cc;
                                        parameters.Add("@compania", OdbcType.Numeric).Value = nuevaEntrada.compania;
                                        parameters.Add("@periodo", OdbcType.Numeric).Value = nuevaEntrada.periodo;
                                        parameters.Add("@ano", OdbcType.Numeric).Value = nuevaEntrada.ano;
                                        parameters.Add("@orden_ct", OdbcType.Numeric).Value = nuevaEntrada.orden_ct;
                                        parameters.Add("@frente", OdbcType.Numeric).Value = nuevaEntrada.frente;
                                        parameters.Add("@fecha", OdbcType.Date).Value = nuevaEntrada.fecha.Date;
                                        parameters.Add("@proveedor", OdbcType.Numeric).Value = nuevaEntrada.proveedor;
                                        parameters.Add("@total", OdbcType.Numeric).Value = nuevaEntrada.total;
                                        parameters.Add("@estatus", OdbcType.Char).Value = nuevaEntrada.estatus ?? "";
                                        parameters.Add("@transferida", OdbcType.Char).Value = nuevaEntrada.transferida ?? "";
                                        parameters.Add("@poliza", OdbcType.Numeric).Value = 0;
                                        parameters.Add("@empleado", OdbcType.Numeric).Value = empleado;
                                        parameters.Add("@alm_destino", OdbcType.Numeric).Value = 0;
                                        parameters.Add("@cc_destino", OdbcType.Char).Value = nuevaEntrada.cc_destino ?? "";
                                        parameters.Add("@comentarios", OdbcType.Char).Value = nuevaEntrada.comentarios ?? "";
                                        parameters.Add("@tipo_trasp", OdbcType.Char).Value = nuevaEntrada.tipo_trasp ?? "";
                                        parameters.Add("@numero_destino", OdbcType.Numeric).Value = DBNull.Value;
                                        parameters.Add("@tp", OdbcType.Char).Value = DBNull.Value;
                                        parameters.Add("@year_poliza", OdbcType.Numeric).Value = DateTime.Now.Year;
                                        parameters.Add("@mes_poliza", OdbcType.Numeric).Value = DateTime.Now.Month;
                                        parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = nuevaEntrada.tipo_cambio;
                                        parameters.Add("@hora", OdbcType.Time).Value = DateTime.Now.TimeOfDay;
                                        parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                        parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = empleado;
                                        parameters.Add("@tc_cc", OdbcType.Numeric).Value = 1;
                                        parameters.Add("@remision_b2b", OdbcType.VarChar).Value = DBNull.Value;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;

                                        count += cmd.ExecuteNonQuery();
                                    }

                                    var ccDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM cc WHERE cc = '{0}' AND st_ppto != 'T'", compra.cc));
                                    var ccDesc = (string)(((List<dynamic>)ccDescEK.ToObject<List<dynamic>>())[0].descripcion);
                                    var almacenDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", 999));
                                    var almacenDesc = (string)(((List<dynamic>)almacenDescEK.ToObject<List<dynamic>>())[0].descripcion);

                                    var compraDetalleEK = new List<OrdenCompraDetDTO>();

                                    dynamic proveedor = null;

                                    compraDetalleEK = (List<OrdenCompraDetDTO>)consultaCheckProductivo(
                                        string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", compra.cc, compra.numero)
                                    ).ToObject<List<OrdenCompraDetDTO>>();

                                    proveedor = ((List<dynamic>)consultaCheckProductivo(
                                        string.Format(@"SELECT * FROM sp_proveedores WHERE numpro = {0}", (int)compraEK.proveedor)
                                    ).ToObject<List<dynamic>>())[0];
                                    var recibioDesc = (string)((List<dynamic>)consultaCheckProductivo(
                                        string.Format(@"SELECT * FROM empleados WHERE empleado = {0}", empleado)
                                    ).ToObject<List<dynamic>>())[0].descripcion;

                                    decimal subTotalRecibido = 0;

                                    #region Update Compra Detalle Recibido
                                    foreach (var s in surtido)
                                    {
                                        var partidaCompraEK = ((List<dynamic>)consultaCheckProductivo(
                                            string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1} AND partida = {2}",
                                            (string)compraEK.cc,
                                            (int)compraEK.numero,
                                            s.partida)
                                        ).ToObject<List<dynamic>>())[0];

                                        var importeRecibido =
                                            s.aSurtir * (Convert.ToDecimal(partidaCompraEK.precio, CultureInfo.InvariantCulture) * Convert.ToDecimal(compraEK.tipo_cambio, CultureInfo.InvariantCulture));

                                        subTotalRecibido += importeRecibido;

                                        var consultaUpdateCompraDetalleRecibido = @"
                                                                UPDATE so_orden_compra_det 
                                                                SET 
                                                                    cant_recibida = ?, 
                                                                    imp_recibido = ?, 
                                                                    fecha_recibido = ? 
                                                                WHERE cc = ? AND numero = ? AND partida = ? AND insumo = ?";

                                        using (var cmd = new OdbcCommand(consultaUpdateCompraDetalleRecibido))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@cant_recibida", OdbcType.Numeric).Value =
                                                Convert.ToDecimal(partidaCompraEK.cant_recibida, CultureInfo.InvariantCulture) + s.aSurtir;
                                            parameters.Add("@imp_recibido", OdbcType.Numeric).Value =
                                                Convert.ToDecimal(partidaCompraEK.imp_recibido, CultureInfo.InvariantCulture) + importeRecibido;
                                            parameters.Add("@fecha_recibido", OdbcType.Date).Value = DateTime.Now.Date;

                                            parameters.Add("@cc", OdbcType.Char).Value = (string)compra.cc;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = (int)compra.numero;
                                            parameters.Add("@partida", OdbcType.Numeric).Value = (int)partidaCompraEK.partida;
                                            parameters.Add("@insumo", OdbcType.Numeric).Value = (int)partidaCompraEK.insumo;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }

                                        #region Actualizar Explosión
                                        var registroExplosionEK = consultaCheckProductivo(
                                            string.Format(@"SELECT * FROM so_explos_mat WHERE cc = '{0}' AND insumo = {1} AND year_explos = {2}", compra.cc, s.insumo, DateTime.Now.Year)
                                        );

                                        if (registroExplosionEK != null)
                                        {
                                            var registroExplosion = ((List<dynamic>)registroExplosionEK.ToObject<List<dynamic>>())[0];

                                            var nuevaCantidadRecibida = Convert.ToDecimal(registroExplosion.cant_recibida, CultureInfo.InvariantCulture) + s.aSurtir;
                                            var nuevoImporteRecibido = Convert.ToDecimal(registroExplosion.imp_recibido, CultureInfo.InvariantCulture) + importeRecibido;

                                            var consultaExplosionUpdate = @"
                                            UPDATE so_explos_mat 
                                            SET cant_recibida = ?, imp_recibido = ? 
                                            WHERE cc = ? AND insumo = ? AND year_explos = ?";

                                            using (var cmd = new OdbcCommand(consultaExplosionUpdate))
                                            {
                                                OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                parametersExplosion.Add("@cant_recibida", OdbcType.Numeric).Value = nuevaCantidadRecibida;
                                                parametersExplosion.Add("@imp_recibido", OdbcType.Numeric).Value = nuevoImporteRecibido;

                                                parametersExplosion.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = s.insumo;
                                                parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;

                                                count += cmd.ExecuteNonQuery();
                                            }
                                        }
                                        else
                                        {
                                            var consultaExplosionInsert = @"INSERT INTO so_explos_mat 
                                            (cc, insumo, cantidad, precio, aditiva_cant, aditiva_imp, deduc_cant, deduc_imp, cant_requerida, 
                                            comp_cant, comp_imp, ajuste_cant, ajuste_imp, traspaso_cant, traspaso_imp, cant_recibida, imp_recibido, 
                                            aditiva_cant_fecha, deduc_cant_fecha, aditiva_precio_fecha, deduc_precio_fecha, aditiva_precio, deductiva_precio, 
                                            traspaso_cant_entrada, traspaso_imp_entrada, importe, year_explos, periodo, bit_auto_presu, cantidad_aditiva_sun, 
                                            cantidad_deductiva_sun, cantidad_extra_sun) 
                                            VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                            using (var cmd = new OdbcCommand(consultaExplosionInsert))
                                            {
                                                OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                parametersExplosion.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = s.insumo;
                                                parametersExplosion.Add("@cantidad", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@precio", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@aditiva_cant", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@aditiva_imp", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@deduc_cant", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@deduc_imp", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@cant_requerida", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@comp_cant", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@comp_imp", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@ajuste_cant", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@ajuste_imp", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@traspaso_cant", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@traspaso_imp", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@cant_recibida", OdbcType.Numeric).Value = s.aSurtir;
                                                parametersExplosion.Add("@imp_recibido", OdbcType.Numeric).Value = importeRecibido;
                                                parametersExplosion.Add("@aditiva_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                                parametersExplosion.Add("@deduc_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                                parametersExplosion.Add("@aditiva_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                                parametersExplosion.Add("@deduc_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                                parametersExplosion.Add("@aditiva_precio", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@deductiva_precio", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@traspaso_cant_entrada", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@traspaso_imp_entrada", OdbcType.Numeric).Value = 0;
                                                parametersExplosion.Add("@importe", OdbcType.Numeric).Value = DBNull.Value;
                                                parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;
                                                parametersExplosion.Add("@periodo", OdbcType.Char).Value = DBNull.Value;
                                                parametersExplosion.Add("@bit_auto_presu", OdbcType.Char).Value = "N";
                                                parametersExplosion.Add("@cantidad_aditiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                                parametersExplosion.Add("@cantidad_deductiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                                parametersExplosion.Add("@cantidad_extra_sun", OdbcType.Numeric).Value = DBNull.Value;

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;

                                                count += cmd.ExecuteNonQuery();
                                            }
                                        }
                                        #endregion
                                    }
                                    #endregion

                                    #region Update Compra Recibido
                                    var ivaRecibido = subTotalRecibido * (Convert.ToDecimal(compraEK.porcent_iva, CultureInfo.InvariantCulture) / 100);
                                    var totalRecibido = subTotalRecibido + ivaRecibido;

                                    decimal resultadoSubTotalRecibido = Convert.ToDecimal(compraEK.sub_tot_rec, CultureInfo.InvariantCulture) + subTotalRecibido;

                                    var consultaUpdateCompraRecibido = @"
                                                                UPDATE so_orden_compra 
                                                                SET 
                                                                    sub_tot_rec = ?, 
                                                                    iva_rec = ?, 
                                                                    total_rec = ?, 
                                                                    estatus = ? 
                                                                WHERE cc = ? AND numero = ?";

                                    using (var cmd = new OdbcCommand(consultaUpdateCompraRecibido))
                                    {
                                        OdbcParameterCollection parameters = cmd.Parameters;

                                        parameters.Add("@sub_tot_rec", OdbcType.Numeric).Value = resultadoSubTotalRecibido;
                                        parameters.Add("@iva_rec", OdbcType.Numeric).Value = Convert.ToDecimal(compraEK.iva_rec, CultureInfo.InvariantCulture) + ivaRecibido;
                                        parameters.Add("@total_rec", OdbcType.Numeric).Value = Convert.ToDecimal(compraEK.total_rec, CultureInfo.InvariantCulture) + totalRecibido;
                                        parameters.Add("@estatus", OdbcType.Char).Value =
                                            (compraEK.sub_total > resultadoSubTotalRecibido ? "P" : "T");

                                        parameters.Add("@cc", OdbcType.Char).Value = (string)compra.cc;
                                        parameters.Add("@numero", OdbcType.Numeric).Value = (int)compra.numero;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;

                                        count += cmd.ExecuteNonQuery();
                                    }
                                    #endregion

                                    #region Update Compra SIGOPLAN
                                    if (compraSIGOPLAN != null)
                                    {
                                        compraSIGOPLAN.estatus = (compraEK.sub_total > resultadoSubTotalRecibido ? "P" : "T");

                                        _context.Entry(compraSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                        _context.SaveChanges();
                                    }
                                    #endregion

                                    var partidaContador = 1;

                                    foreach (var sur in surtido)
                                    {
                                        var insumoComEK = compraDetalleEK.FirstOrDefault(x => x.partida == sur.partida);

                                        var area = (insumoComEK != null && insumoComEK.area != null) ? (int)insumoComEK.area : 0;
                                        var cuenta = (insumoComEK != null && insumoComEK.cuenta != null) ? (int)insumoComEK.cuenta : 0;
                                        var precio = insumoComEK != null ? insumoComEK.precio * Convert.ToDecimal(compraEK.tipo_cambio, CultureInfo.InvariantCulture) : 0;
                                        var importe = precio * sur.aSurtir;

                                        List<tblAlm_MovimientosDet> listEntradaDet = new List<tblAlm_MovimientosDet>();

                                        var partidaMovimiento = partidaContador++;

                                        var nuevaEntradaDet = new tblAlm_MovimientosDet
                                        {
                                            //almacen = compraSIGOPLAN != null ? (int)compraSIGOPLAN.idLibreAbordo : 1,
                                            almacen = 999,
                                            tipo_mov = 1,
                                            numero = folioMovimientoNuevo,
                                            partida = partidaMovimiento,
                                            insumo = sur.insumo,
                                            comentarios = compra.comentarios,
                                            area = area,
                                            cuenta = cuenta,
                                            cantidad = sur.aSurtir,
                                            precio = precio,
                                            importe = importe,
                                            id_resguardo = 0,
                                            area_alm = sur.area_alm,
                                            lado_alm = sur.lado_alm,
                                            estante_alm = sur.estante_alm,
                                            nivel_alm = sur.nivel_alm,
                                            estatusHabilitado = true
                                        };

                                        _context.tblAlm_MovimientosDet.Add(nuevaEntradaDet);
                                        _context.SaveChanges();

                                        //decimal costoPromedio = getCostoPromedioEntrada(nuevaEntrada.almacen, nuevaEntrada.cc, nuevaEntradaDet.insumo);
                                        var insumoDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM insumos WHERE insumo = {0}", nuevaEntradaDet.insumo));
                                        var insumoDesc = (string)(((List<dynamic>)insumoDescEK.ToObject<List<dynamic>>())[0].descripcion);

                                        if (nuevaEntradaDet.precio <= 0 || nuevaEntradaDet.importe <= 0)
                                        {
                                            throw new Exception("El precio o el importe no puede ser igual o menor a cero.");
                                        }

                                        var consultaDetalle = @"INSERT INTO so_movimientos_noinv_det 
                                                        (almacen, tipo_mov, remision, partida, insumo, comentarios, area, cuenta, cantidad, precio, importe, partida_oc, costo_prom, remision2) 
                                                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

                                        using (var cmd = new OdbcCommand(consultaDetalle))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            //parameters.Add("@almacen", OdbcType.Numeric).Value = nuevaEntradaDet.almacen;
                                            parameters.Add("@almacen", OdbcType.Numeric).Value = 999;
                                            parameters.Add("@tipo_mov", OdbcType.Numeric).Value = nuevaEntradaDet.tipo_mov;
                                            parameters.Add("@remision", OdbcType.Numeric).Value = nuevaEntradaDet.numero;
                                            parameters.Add("@partida", OdbcType.Numeric).Value = nuevaEntradaDet.partida;
                                            parameters.Add("@insumo", OdbcType.Numeric).Value = nuevaEntradaDet.insumo;
                                            parameters.Add("@comentarios", OdbcType.Char).Value = nuevaEntradaDet.comentarios ?? "";
                                            parameters.Add("@area", OdbcType.Numeric).Value = nuevaEntradaDet.area;
                                            parameters.Add("@cuenta", OdbcType.Numeric).Value = nuevaEntradaDet.cuenta;
                                            parameters.Add("@cantidad", OdbcType.Numeric).Value = nuevaEntradaDet.cantidad;
                                            parameters.Add("@precio", OdbcType.Numeric).Value = nuevaEntradaDet.precio;
                                            parameters.Add("@importe", OdbcType.Numeric).Value = nuevaEntradaDet.importe;
                                            parameters.Add("@partida_oc", OdbcType.Numeric).Value = insumoComEK.partida;
                                            parameters.Add("@costo_prom", OdbcType.Numeric).Value = nuevaEntradaDet.precio; //parameters.Add("@costo_prom", OdbcType.Numeric).Value = costoPromedio;
                                            parameters.Add("@remision2", OdbcType.Char).Value = nuevaEntradaDet.numero;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();

                                            movEntradas.Add(new entradasAlmacenDTO
                                            {
                                                centroCosto = ccDesc,
                                                folioEntrada = nuevaEntrada.numero.ToString(),
                                                almacen = almacenDesc,
                                                fechaEntrada = nuevaEntrada.fecha,
                                                partida = nuevaEntradaDet.partida,
                                                insumo = nuevaEntradaDet.insumo + "-" + insumoDesc ?? "",
                                                areaCuenta = nuevaEntradaDet.area + "-" + nuevaEntradaDet.cuenta,
                                                referencia = "",
                                                remision = "",
                                                cantidad = nuevaEntradaDet.cantidad,
                                                precio = nuevaEntradaDet.precio,
                                                importe = nuevaEntradaDet.importe,
                                                comentarios = nuevaEntradaDet.comentarios ?? "",
                                                ordenCompra = nuevaEntrada.orden_ct.ToString(),
                                                proveedor = (string)proveedor.nombre,
                                                direccion = (string)proveedor.direccion,
                                                ciudad = (string)proveedor.ciudad,
                                                telefonos = (string)proveedor.telefono1,

                                                area_alm = nuevaEntradaDet.area_alm ?? "",
                                                lado_alm = nuevaEntradaDet.lado_alm ?? "",
                                                estante_alm = nuevaEntradaDet.estante_alm ?? "",
                                                nivel_alm = nuevaEntradaDet.nivel_alm ?? "",
                                                recibio = recibioDesc ?? ""
                                            });
                                        }
                                    }

                                    trans.Commit();
                                    dbSigoplanTransaction.Commit();
                                }
                                catch (Exception e)
                                {
                                    trans.Rollback();
                                    dbSigoplanTransaction.Rollback();

                                    LogError(12, 0, "OrdenCompraController", "guardarSurtidoNoInventariable", e, AccionEnum.AGREGAR, 0, new { compra = compra, surtido = surtido });

                                    throw new Exception(e.Message);
                                }
                            }
                        }
                    }
                    return movEntradas;
                    #endregion
            }
        }

        public List<CuadroComparativoDTO> buscarCuadros(BusquedaCuadroDTO filtros)
        {
            switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
            {
                case EmpresaEnum.Peru:
                    {
                        #region PERU
                        var usuario = vSesiones.sesionUsuarioDTO;
                        var relUser = ufs.getUsuarioService().getUserEk(usuario.id);

                        #region Requisiciones

                        string PERU_tipoCompra = "";
                        if (HttpContext.Current.Session["servicioCompraCuadroComparativo"] != null)
                        {
                            if (!(bool)HttpContext.Current.Session["servicioCompraCuadroComparativo"]) //Vista Generar Compra
                            {
                                PERU_tipoCompra = "RQ";
                            }
                            else //Vista Generar Compra Servicio
                            {
                                PERU_tipoCompra = "RS";
                            }
                        }

                        var lstRequisiciones = _context.Select<CuadroComparativoDTO>(new DapperDTO()
                        {
                            baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                            consulta = string.Format(@"
                        SELECT 
                        req.cc, 
                        req.numero, 
						req.PERU_tipoRequisicion,
                        CASE WHEN EXISTS(SELECT * FROM tblCom_CuadroComparativo cua WHERE req.cc = cua.cc AND req.numero = cua.numero AND cua.PERU_tipoCuadro = '{5}' AND cua.registroActivo = 1) 
                            THEN CAST(1 AS BIT) 
                            ELSE CAST(0 AS BIT) 
                        END AS tieneCuadro, 
                        CASE WHEN EXISTS(
                            SELECT * FROM tblCom_OrdenCompraDet ocd 
							INNER JOIN tblCom_OrdenCompra occ ON ocd.idOrdenCompra = ocd.id
							WHERE req.cc = ocd.cc AND req.numero = ocd.num_requisicion AND (ocd.cantidad - ocd.cant_canc) > 0 AND occ.PERU_tipoCompra = req.PERU_tipoRequisicion AND ocd.estatusRegistro = 1 AND occ.estatusRegistro = 1)
                            THEN CAST(1 AS BIT) 
                            ELSE CAST(0 AS BIT) 
                        END AS tieneCompra, 
                        (
                            SELECT 
                                TOP 1 ocd.numero 
                            FROM tblCom_OrdenCompraDet ocd 
                            INNER JOIN tblCom_OrdenCompra occ ON ocd.idOrdenCompra = occ.id
                            WHERE req.cc = ocd.cc AND req.numero = ocd.num_requisicion AND (ocd.cantidad - ocd.cant_canc) > 0 AND occ.PERU_tipoCompra = req.PERU_tipoRequisicion AND ocd.estatusRegistro = 1 AND occ.estatusRegistro = 1
                        ) AS numeroCompra, 
                        req.fecha AS fecha_requisicion, 
                        SUM(reqDet.cantidad - reqDet.cantOrdenada) AS cantidadTotalPendiente 
                    FROM tblCom_Req req 
                        LEFT JOIN tblCom_OrdenCompraDet det ON req.cc = det.cc AND req.numero = det.num_requisicion
                        LEFT JOIN tblCom_OrdenCompra coo ON coo.id = det.idOrdenCompra AND coo.PERU_tipoCompra = '{5}' AND coo.estatusRegistro = 1
                        INNER JOIN tblCom_ReqDet reqDet ON req.id = reqDet.idReq
                    WHERE req.stAutoriza = 1 AND req.estatusRegistro = 1 AND reqDet.estatusRegistro = 1 AND req.cc = '{0}' AND req.fecha >= '{1}' AND req.fecha <= '{2}' AND req.numero >= {3} AND req.numero <= {4} AND req.PERU_tipoRequisicion = '{5}'
                    GROUP BY req.cc, req.numero, req.fecha, req.PERU_tipoRequisicion", filtros.cc, filtros.fechaInicial.ToString("yyyyMMdd"), filtros.fechaFinal.ToString("yyyyMMdd"), filtros.reqInicial, filtros.reqFinal, PERU_tipoCompra),
                        });

                        foreach (var requisicion in lstRequisiciones)
                        {
                            requisicion.ccNumeroCompuesto = fillNo(requisicion.numero.ToString(), 10);
                            requisicion.folio = 0;
                            requisicion.fecha_cuadro = default(DateTime);
                            requisicion.insumosLicitados = false;
                            requisicion.listNumeroCompra = getComprasPorRequisicion(requisicion.cc, requisicion.numero);
                            requisicion.ccNumeroCompraCompuesto = requisicion.tieneCompra && requisicion.numeroCompra > 0 ? fillNo(requisicion.numeroCompra.ToString(), 10) : "";
                        }
                        #endregion

                        #region Cuadros

                        var lstCuadros = _context.Select<CuadroComparativoDTO>(new DapperDTO()
                        {
                            baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                            consulta = string.Format(@"
                                            SELECT 
                                                cua.cc, 
                                                cua.numero, 
                                                cua.folio, 
                                                req.fecha AS fecha_requisicion, 
                                                cua.fecha AS fecha_cuadro, 
                                                cua.inslic AS insumosLicitados, 
                                                CASE WHEN EXISTS(
                                                    SELECT * FROM tblCom_OrdenCompraDet ocd 
							                        INNER JOIN tblCom_OrdenCompra occ ON ocd.idOrdenCompra = occ.id
							                        WHERE occ.estatusRegistro = 1 AND ocd.estatusRegistro = 1 AND req.cc = ocd.cc AND req.numero = ocd.num_requisicion AND (ocd.cantidad - ocd.cant_canc) > 0 AND occ.PERU_tipoCompra = req.PERU_tipoRequisicion) 
                                                    THEN CAST(1 AS BIT) 
                                                    ELSE CAST(0 AS BIT) 
                                                END AS tieneCompra, 
                                                (
                                                    SELECT TOP 1 ocd.numero 
                                                    FROM tblCom_OrdenCompraDet ocd 
                                                    INNER JOIN tblCom_OrdenCompra occ ON ocd.idOrdenCompra = occ.id
                                                    WHERE occ.estatusRegistro = 1 AND ocd.estatusRegistro = 1 AND req.cc = ocd.cc AND req.numero = ocd.num_requisicion AND (ocd.cantidad - ocd.cant_canc) > 0 AND occ.PERU_tipoCompra = req.PERU_tipoRequisicion
                                                ) AS numeroCompra,
                                                cua.PERU_tipoCuadro as PERU_tipoRequisicion
                                            FROM tblCom_CuadroComparativo cua 
                                            INNER JOIN tblCom_Req req ON cua.cc = req.cc AND cua.numero = req.numero 
                                            WHERE cua.cc = '{0}' AND req.fecha >= '{1}' AND req.fecha <= '{2}' AND cua.numero >= {3} AND cua.numero <= {4} AND cua.PERU_tipoCuadro = '{5}' AND cua.registroActivo = 1 AND req.PERU_tipoRequisicion = '{5}'",
                                                        filtros.cc, filtros.fechaInicial.ToString("yyyyMMdd"), filtros.fechaFinal.ToString("yyyyMMdd"), filtros.reqInicial, filtros.reqFinal, PERU_tipoCompra),
                        });

                        foreach (var cuadro in lstCuadros)
                        {
                            cuadro.ccNumeroCompuesto = fillNo(cuadro.numero.ToString(), 10);
                            cuadro.tieneCuadro = true;
                            cuadro.listNumeroCompra = getComprasPorRequisicion(cuadro.cc, cuadro.numero);
                            cuadro.ccNumeroCompraCompuesto = cuadro.tieneCompra && cuadro.numeroCompra > 0 ? fillNo(cuadro.numeroCompra.ToString(), 10) : "";
                        }
                        #endregion

                        List<CuadroComparativoDTO> lstResultadoMerge = lstRequisiciones.Where(x => !x.tieneCuadro && x.cantidadTotalPendiente > 0).ToList();

                        lstResultadoMerge.AddRange(lstCuadros);

                        #region Determinar que cuadros puede eliminar
                        var listaCuadrosSIGOPLAN = _context.tblCom_CuadroComparativo.Where(x =>
                            x.registroActivo && x.cc == filtros.cc &&
                            DbFunctions.TruncateTime(x.fecha) >= DbFunctions.TruncateTime(filtros.fechaInicial) &&
                            DbFunctions.TruncateTime(x.fecha) <= DbFunctions.TruncateTime(filtros.fechaFinal) &&
                            x.numero >= filtros.reqInicial &&
                            x.numero <= filtros.reqFinal &&
                            x.PERU_tipoCuadro == PERU_tipoCompra
                        ).ToList();

                        foreach (var requisicion in lstResultadoMerge)
                        {
                            if (requisicion.tieneCuadro && !requisicion.tieneCompra)
                            {
                                var cuadroSIGOPLAN = listaCuadrosSIGOPLAN.FirstOrDefault(x => x.cc == requisicion.cc && x.numero == requisicion.numero && x.folio == requisicion.folio);

                                if (cuadroSIGOPLAN != null)
                                {
                                    if (cuadroSIGOPLAN.usuarioCreacion_id == usuario.id || relUser.empleado == 1 || relUser.empleado == 300) //Se verifica si el usuario logeado es el mismo que creó el cuadro, administrador o es Victor Esquer para poder eliminar.
                                    {
                                        requisicion.puedeEliminar = true;
                                    }
                                }
                            }
                        }
                        #endregion

                        return lstResultadoMerge.OrderByDescending(x => x.tieneCuadro).ThenBy(x => x.numero).ThenBy(x => x.folio).ToList();
                        #endregion
                    }
                case EmpresaEnum.Colombia:
                    {
                        #region RESTO EMPRESAS
                        var usuario = vSesiones.sesionUsuarioDTO;
                        var relUser = ufs.getUsuarioService().getUserEk(usuario.id);

                        #region Requisiciones
                        var lstRequisiciones = _contextEnkontrol.Select<CuadroComparativoDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                        {
                            consulta = string.Format(@"
                                SELECT 
                                    req.cc, 
                                    req.numero, 
                                    CASE WHEN EXISTS(SELECT * FROM so_cuadro_comparativo cua WHERE req.cc = cua.cc AND req.numero = cua.numero) 
                                        THEN CAST(1 AS BIT) 
                                        ELSE CAST(0 AS BIT) 
                                    END AS tieneCuadro, 
                                    CASE WHEN EXISTS(
                                        SELECT * FROM so_orden_compra_det ocd WHERE req.cc = ocd.cc AND req.numero = ocd.num_requisicion AND (ocd.cantidad - ocd.cant_canc) > 0) 
                                        THEN CAST(1 AS BIT) 
                                        ELSE CAST(0 AS BIT) 
                                    END AS tieneCompra, 
                                    (
                                        SELECT 
                                            TOP 1 numero 
                                        FROM so_orden_compra_det ocd 
                                        WHERE req.cc = ocd.cc AND req.numero = ocd.num_requisicion AND (ocd.cantidad - ocd.cant_canc) > 0 
                                    ) AS numeroCompra, 
                                    req.fecha AS fecha_requisicion, 
                                    SUM(det.cantidad - det.cant_ordenada) AS cantidadTotalPendiente 
                                FROM so_requisicion req 
                                    INNER JOIN so_requisicion_det det ON req.cc = det.cc AND req.numero = det.numero 
                                WHERE req.st_autoriza = 'S' AND req.cc = '{0}' AND req.fecha >= '{1}' AND req.fecha <= '{2}' AND req.numero >= {3} AND req.numero <= {4} 
                                GROUP BY req.cc, req.numero, req.fecha 
                                ORDER BY req.fecha DESC", filtros.cc, filtros.fechaInicial.ToString("yyyyMMdd"), filtros.fechaFinal.ToString("yyyyMMdd"), filtros.reqInicial, filtros.reqFinal)
                        });

                        foreach (var requisicion in lstRequisiciones)
                        {
                            requisicion.ccNumeroCompuesto = fillNo(requisicion.numero.ToString(), 10);
                            requisicion.folio = 0;
                            requisicion.fecha_cuadro = default(DateTime);
                            requisicion.insumosLicitados = false;
                            requisicion.listNumeroCompra = getComprasPorRequisicion(requisicion.cc, requisicion.numero);
                            requisicion.ccNumeroCompraCompuesto = requisicion.tieneCompra && requisicion.numeroCompra > 0 ? fillNo(requisicion.numeroCompra.ToString(), 10) : "";
                        }
                        #endregion

                        #region Cuadros
                        var lstCuadros = _contextEnkontrol.Select<CuadroComparativoDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                        {
                            consulta = string.Format(@"
                                SELECT 
                                    cua.cc, 
                                    cua.numero, 
                                    cua.folio, 
                                    req.fecha AS fecha_requisicion, 
                                    cua.fecha AS fecha_cuadro, 
                                    CASE WHEN EXISTS(SELECT * FROM so_orden_compra_det ocd WHERE cua.cc = ocd.cc AND cua.numero = ocd.num_requisicion AND (ocd.cantidad - ocd.cant_canc) > 0) 
                                        THEN CAST(1 AS BIT) 
                                        ELSE CAST(0 AS BIT) 
                                    END AS tieneCompra, 
                                    (
                                        SELECT 
                                            TOP 1 numero 
                                        FROM so_orden_compra_det ocd 
                                        WHERE req.cc = ocd.cc AND req.numero = ocd.num_requisicion AND (ocd.cantidad - ocd.cant_canc) > 0 
                                    ) AS numeroCompra 
                                FROM so_cuadro_comparativo cua 
                                    INNER JOIN so_requisicion req ON cua.cc = req.cc AND cua.numero = req.numero 
                                WHERE cua.cc = '{0}' AND req.fecha >= '{1}' AND req.fecha <= '{2}' AND cua.numero >= {3} AND cua.numero <= {4}", filtros.cc, filtros.fechaInicial.ToString("yyyyMMdd"), filtros.fechaFinal.ToString("yyyyMMdd"), filtros.reqInicial, filtros.reqFinal)
                        });

                        foreach (var cuadro in lstCuadros)
                        {
                            cuadro.ccNumeroCompuesto = fillNo(cuadro.numero.ToString(), 10);
                            cuadro.tieneCuadro = true;
                            cuadro.listNumeroCompra = getComprasPorRequisicion(cuadro.cc, cuadro.numero);
                            cuadro.ccNumeroCompraCompuesto = cuadro.tieneCompra && cuadro.numeroCompra > 0 ? fillNo(cuadro.numeroCompra.ToString(), 10) : "";
                        }
                        #endregion

                        List<CuadroComparativoDTO> lstResultadoMerge = lstRequisiciones.Where(x => !x.tieneCuadro && x.cantidadTotalPendiente > 0).ToList();

                        lstResultadoMerge.AddRange(lstCuadros);

                        #region Determinar que cuadros puede eliminar
                        var listaCuadrosSIGOPLAN = _context.tblCom_CuadroComparativo.Where(x =>
                            x.registroActivo && x.cc == filtros.cc &&
                            DbFunctions.TruncateTime(x.fecha) >= DbFunctions.TruncateTime(filtros.fechaInicial) &&
                            DbFunctions.TruncateTime(x.fecha) <= DbFunctions.TruncateTime(filtros.fechaFinal) &&
                            x.numero >= filtros.reqInicial &&
                            x.numero <= filtros.reqFinal
                        ).ToList();

                        foreach (var requisicion in lstResultadoMerge)
                        {
                            if (requisicion.tieneCuadro && !requisicion.tieneCompra)
                            {
                                var cuadroSIGOPLAN = listaCuadrosSIGOPLAN.FirstOrDefault(x => x.cc == requisicion.cc && x.numero == requisicion.numero && x.folio == requisicion.folio);

                                if (cuadroSIGOPLAN != null)
                                {
                                    if (cuadroSIGOPLAN.usuarioCreacion_id == usuario.id || relUser.empleado == 1 || relUser.empleado == 300) //Se verifica si el usuario logeado es el mismo que creó el cuadro, administrador o es Victor Esquer para poder eliminar.
                                    {
                                        requisicion.puedeEliminar = true;
                                    }
                                }
                            }
                        }
                        #endregion

                        return lstResultadoMerge.OrderByDescending(x => x.tieneCuadro).ThenBy(x => x.numero).ThenBy(x => x.folio).ToList();
                        #endregion
                    }
                default:
                    {
                        #region RESTO EMPRESAS
                        var usuario = vSesiones.sesionUsuarioDTO;
                        var relUser = ufs.getUsuarioService().getUserEk(usuario.id);

                        #region Requisiciones
                        var lstRequisiciones = _contextEnkontrol.Select<CuadroComparativoDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                        {
                            consulta = string.Format(@"
                    SELECT 
                        req.cc, 
                        req.numero, 
                        CASE WHEN EXISTS(SELECT * FROM so_cuadro_comparativo cua WHERE req.cc = cua.cc AND req.numero = cua.numero) 
                            THEN CAST(1 AS BIT) 
                            ELSE CAST(0 AS BIT) 
                        END AS tieneCuadro, 
                        CASE WHEN EXISTS(
                            SELECT * FROM so_orden_compra_det ocd WHERE req.cc = ocd.cc AND req.numero = ocd.num_requisicion AND (ocd.cantidad - ocd.cant_canc) > 0) 
                            THEN CAST(1 AS BIT) 
                            ELSE CAST(0 AS BIT) 
                        END AS tieneCompra, 
                        (
                            SELECT 
                                TOP 1 numero 
                            FROM so_orden_compra_det ocd 
                            WHERE req.cc = ocd.cc AND req.numero = ocd.num_requisicion AND (ocd.cantidad - ocd.cant_canc) > 0 
                        ) AS numeroCompra, 
                        req.fecha AS fecha_requisicion, 
                        SUM(det.cantidad - det.cant_ordenada) AS cantidadTotalPendiente 
                    FROM so_requisicion req 
                        INNER JOIN so_requisicion_det det ON req.cc = det.cc AND req.numero = det.numero 
                    WHERE req.st_autoriza = 'S' AND req.cc = '{0}' AND req.fecha >= '{1}' AND req.fecha <= '{2}' AND req.numero >= {3} AND req.numero <= {4} 
                    GROUP BY req.cc, req.numero, req.fecha 
                    ORDER BY req.fecha DESC", filtros.cc, filtros.fechaInicial.ToString("yyyyMMdd"), filtros.fechaFinal.ToString("yyyyMMdd"), filtros.reqInicial, filtros.reqFinal)
                        });

                        foreach (var requisicion in lstRequisiciones)
                        {
                            requisicion.ccNumeroCompuesto = fillNo(requisicion.numero.ToString(), 10);
                            requisicion.folio = 0;
                            requisicion.fecha_cuadro = default(DateTime);
                            requisicion.insumosLicitados = false;
                            requisicion.listNumeroCompra = getComprasPorRequisicion(requisicion.cc, requisicion.numero);
                            requisicion.ccNumeroCompraCompuesto = requisicion.tieneCompra && requisicion.numeroCompra > 0 ? fillNo(requisicion.numeroCompra.ToString(), 10) : "";
                        }
                        #endregion

                        #region Cuadros
                        var lstCuadros = _contextEnkontrol.Select<CuadroComparativoDTO>(getEnkontrolEnumADM(), new OdbcConsultaDTO()
                        {
                            consulta = string.Format(@"
                    SELECT 
                        cua.cc, 
                        cua.numero, 
                        cua.folio, 
                        req.fecha AS fecha_requisicion, 
                        cua.fecha AS fecha_cuadro, 
                        cua.inslic AS insumosLicitados, 
                        CASE WHEN EXISTS(SELECT * FROM so_orden_compra_det ocd WHERE cua.cc = ocd.cc AND cua.numero = ocd.num_requisicion AND (ocd.cantidad - ocd.cant_canc) > 0) 
                            THEN CAST(1 AS BIT) 
                            ELSE CAST(0 AS BIT) 
                        END AS tieneCompra, 
                        (
                            SELECT 
                                TOP 1 numero 
                            FROM so_orden_compra_det ocd 
                            WHERE req.cc = ocd.cc AND req.numero = ocd.num_requisicion AND (ocd.cantidad - ocd.cant_canc) > 0 
                        ) AS numeroCompra 
                    FROM so_cuadro_comparativo cua 
                        INNER JOIN so_requisicion req ON cua.cc = req.cc AND cua.numero = req.numero 
                    WHERE cua.cc = '{0}' AND req.fecha >= '{1}' AND req.fecha <= '{2}' AND cua.numero >= {3} AND cua.numero <= {4}", filtros.cc, filtros.fechaInicial.ToString("yyyyMMdd"), filtros.fechaFinal.ToString("yyyyMMdd"), filtros.reqInicial, filtros.reqFinal)
                        });

                        foreach (var cuadro in lstCuadros)
                        {
                            cuadro.ccNumeroCompuesto = fillNo(cuadro.numero.ToString(), 10);
                            cuadro.tieneCuadro = true;
                            cuadro.listNumeroCompra = getComprasPorRequisicion(cuadro.cc, cuadro.numero);
                            cuadro.ccNumeroCompraCompuesto = cuadro.tieneCompra && cuadro.numeroCompra > 0 ? fillNo(cuadro.numeroCompra.ToString(), 10) : "";
                        }
                        #endregion

                        List<CuadroComparativoDTO> lstResultadoMerge = lstRequisiciones.Where(x => !x.tieneCuadro && x.cantidadTotalPendiente > 0).ToList();

                        lstResultadoMerge.AddRange(lstCuadros);

                        #region Determinar que cuadros puede eliminar
                        var listaCuadrosSIGOPLAN = _context.tblCom_CuadroComparativo.Where(x =>
                            x.registroActivo && x.cc == filtros.cc &&
                            DbFunctions.TruncateTime(x.fecha) >= DbFunctions.TruncateTime(filtros.fechaInicial) &&
                            DbFunctions.TruncateTime(x.fecha) <= DbFunctions.TruncateTime(filtros.fechaFinal) &&
                            x.numero >= filtros.reqInicial &&
                            x.numero <= filtros.reqFinal
                        ).ToList();

                        foreach (var requisicion in lstResultadoMerge)
                        {
                            if (requisicion.tieneCuadro && !requisicion.tieneCompra)
                            {
                                var cuadroSIGOPLAN = listaCuadrosSIGOPLAN.FirstOrDefault(x => x.cc == requisicion.cc && x.numero == requisicion.numero && x.folio == requisicion.folio);

                                if (cuadroSIGOPLAN != null)
                                {
                                    if (cuadroSIGOPLAN.usuarioCreacion_id == usuario.id || relUser.empleado == 1 || relUser.empleado == 300) //Se verifica si el usuario logeado es el mismo que creó el cuadro, administrador o es Victor Esquer para poder eliminar.
                                    {
                                        requisicion.puedeEliminar = true;
                                    }
                                }
                            }
                        }
                        #endregion

                        return lstResultadoMerge.OrderByDescending(x => x.tieneCuadro).ThenBy(x => x.numero).ThenBy(x => x.folio).ToList();
                        #endregion
                    }
            }
        }

        public List<string> getComprasPorRequisicion(string cc, int numero)
        {
            var comprasEK = consultaCheckProductivo(
                string.Format(@"SELECT 
                                    numero 
                                FROM so_orden_compra_det ocd 
                                WHERE ocd.cc = '{0}' AND ocd.num_requisicion = {1} AND (ocd.cantidad - ocd.cant_canc) > 0", cc, numero)
            );

            if (comprasEK != null)
            {
                var compras = (List<dynamic>)comprasEK.ToObject<List<dynamic>>();
                var numeros = new List<string>();

                foreach (var com in compras)
                {
                    numeros.Add(fillNo(com.numero.Value.ToString(), 10));
                }

                return numeros;
            }
            else
            {
                return new List<string>();
            }
        }
        public dynamic requisicionesNumeros(string cc)
        {
            if ((MainContextEnum)vSesiones.sesionEmpresaActual != MainContextEnum.PERU)
            {
                #region RESTO EMPRESAS
                var numeros = (dynamic)consultaCheckProductivo(
                                string.Format(@"SELECT 
                                    MIN(numero) AS minimo, 
                                    MAX(numero) AS maximo 
                                FROM so_requisicion 
                                WHERE cc = '{0}' AND st_estatus != 'T'", cc));

                var resultado = new
                {
                    minimo = numeros[0].minimo.Value != null ? (int)numeros[0].minimo.Value : 0,
                    maximo = numeros[0].maximo.Value != null ? (int)numeros[0].maximo.Value : 0
                };

                return resultado;
                #endregion
            }
            else
            {
                #region PERU

                string PERU_tipoCompra = "";
                if (HttpContext.Current.Session["servicioCompraCuadroComparativo"] != null)
                {
                    if (!(bool)HttpContext.Current.Session["servicioCompraCuadroComparativo"]) //Vista Generar Compra
                    {
                        PERU_tipoCompra = "RQ";
                    }
                    else //Vista Generar Compra Servicio
                    {
                        PERU_tipoCompra = "RS";
                    }
                }

                var numeros = _context.Select<dynamic>(new DapperDTO()
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = string.Format(@"SELECT 
                                    MIN(numero) AS minimo, 
                                    MAX(numero) AS maximo 
                                FROM tblCom_Req 
                                WHERE cc = '{0}' AND stEstatus != 'T' AND PERU_tipoRequisicion = '{1}'", cc, PERU_tipoCompra)
                });

                var resultado = new
                {
                    minimo = numeros[0].minimo != null ? numeros[0].minimo : 0,
                    maximo = numeros[0].maximo != null ? numeros[0].maximo : 0
                };

                return resultado;
                #endregion
            }

        }

        public CuadroComparativoDTO getCuadroDet(CuadroComparativoDTO cuadro)
        {
            if ((MainContextEnum)vSesiones.sesionEmpresaActual != MainContextEnum.PERU)
            {
                #region RESTO EMPRESAS
                var existeCuadro = consultaCheckProductivo(
                string.Format(@"SELECT 
                                    * 
                                FROM so_cuadro_comparativo 
                                WHERE cc = '{0}' AND numero = {1} AND folio = {2}", cuadro.cc, cuadro.numero, cuadro.folio));

                var surtido = _context.tblCom_Surtido.Where(x => x.estatus && x.cc == cuadro.cc && x.numero == cuadro.numero).ToList();
                var surtidoDet = new List<tblCom_SurtidoDet>();

                if (surtido.Count > 0)
                {
                    foreach (var sur in surtido)
                    {
                        surtidoDet.AddRange(_context.tblCom_SurtidoDet.Where(x => x.estatus && x.surtidoID == sur.id).ToList());
                    }
                }

                var requisicion = ((List<dynamic>)consultaCheckProductivo(
                    string.Format(@"SELECT * FROM so_requisicion WHERE cc = '{0}' AND numero = {1}", cuadro.cc, cuadro.numero)
                ).ToObject<List<dynamic>>())[0];
                var requisicionDet = (List<dynamic>)consultaCheckProductivo(
                    string.Format(@"SELECT * FROM so_requisicion_det WHERE cc = '{0}' AND numero = {1}", cuadro.cc, cuadro.numero)
                ).ToObject<List<dynamic>>();

                if (existeCuadro != null)
                {
                    var consultaRegistroGeneral = "";

                    if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
                    {
                        consultaRegistroGeneral = @"
                            SELECT 
                                cua.*, cua.observaciones1 AS comentarios1, cua.observaciones2 AS comentarios2, cua.observaciones3 AS comentarios3, 
                                (SELECT mon1.moneda FROM moneda mon1 WHERE cua.moneda1 = mon1.clave) AS moneda1Desc, 
                                (SELECT mon2.moneda FROM moneda mon2 WHERE cua.moneda2 = mon2.clave) AS moneda2Desc, 
                                (SELECT mon3.moneda FROM moneda mon3 WHERE cua.moneda3 = mon3.clave) AS moneda3Desc, 
                                (SELECT la1.descripcion FROM so_libre_abordo la1 WHERE cua.lab1 = la1.numero) AS lab1Desc, 
                                (SELECT la2.descripcion FROM so_libre_abordo la2 WHERE cua.lab2 = la2.numero) AS lab2Desc, 
                                (SELECT la3.descripcion FROM so_libre_abordo la3 WHERE cua.lab3 = la3.numero) AS lab3Desc 
                            FROM so_cuadro_comparativo cua 
                            WHERE cua.cc = '{0}' AND cua.numero = {1} AND cua.folio = {2}";
                    }
                    else
                    {
                        consultaRegistroGeneral = @"
                            SELECT 
                                cua.*, 
                                (SELECT mon1.moneda FROM moneda mon1 WHERE cua.moneda1 = mon1.clave) AS moneda1Desc, 
                                (SELECT mon2.moneda FROM moneda mon2 WHERE cua.moneda2 = mon2.clave) AS moneda2Desc, 
                                (SELECT mon3.moneda FROM moneda mon3 WHERE cua.moneda3 = mon3.clave) AS moneda3Desc, 
                                (SELECT la1.descripcion FROM so_libre_abordo la1 WHERE cua.lab1 = la1.numero) AS lab1Desc, 
                                (SELECT la2.descripcion FROM so_libre_abordo la2 WHERE cua.lab2 = la2.numero) AS lab2Desc, 
                                (SELECT la3.descripcion FROM so_libre_abordo la3 WHERE cua.lab3 = la3.numero) AS lab3Desc 
                            FROM so_cuadro_comparativo cua 
                            WHERE cua.cc = '{0}' AND cua.numero = {1} AND cua.folio = {2}";
                    }

                    var cuadroComparativo = consultaCheckProductivo(string.Format(consultaRegistroGeneral, cuadro.cc, cuadro.numero, cuadro.folio)).ToObject<List<CuadroComparativoDTO>>()[0];

                    var cuadroDet = consultaCheckProductivo(
                        string.Format(@"SELECT 
                                    det.cc, 
                                    det.numero, 
                                    det.folio, 
                                    det.partida, 
                                    det.insumo, 
                                    ins.descripcion, 
                                    det.cantidad, 
                                    ins.unidad, 
                                    det.precio1, 
                                    (SELECT mon1.moneda FROM moneda mon1 WHERE cua.moneda1 = mon1.clave) AS moneda1, 
                                    det.precio2, 
                                    (SELECT mon2.moneda FROM moneda mon2 WHERE cua.moneda2 = mon2.clave) AS moneda2, 
                                    det.precio3, 
                                    (SELECT mon3.moneda FROM moneda mon3 WHERE cua.moneda3 = mon3.clave) AS moneda3, 
                                    det.proveedor_uc, 
                                    det.oc_uc, 
                                    det.fecha_uc, 
                                    det.precio_uc, 
                                    cua.prov1, 
                                    cua.nombre_prov1, 
                                    cua.prov2, 
                                    cua.nombre_prov2, 
                                    cua.prov3, 
                                    cua.nombre_prov3, 
                                    (
                                        SELECT 
                                            TOP 1 l.descripcion 
                                        FROM so_req_det_linea l 
                                        WHERE l.cc = det.cc AND l.numero = det.numero AND l.partida = det.partida 
                                    ) AS partidaDesc 
                                FROM so_cuadro_comparativo_det det 
                                    INNER JOIN so_cuadro_comparativo cua ON det.cc = cua.cc AND det.numero = cua.numero AND det.folio = cua.folio 
                                    INNER JOIN insumos ins ON det.insumo = ins.insumo 
                                WHERE det.cc = '{0}' AND det.numero = {1} AND det.folio = {2}", cuadro.cc, cuadro.numero, cuadro.folio)).ToObject<List<CuadroComparativoDetDTO>>();

                    foreach (var part in cuadroDet)
                    {
                        var partidaRequisicion = requisicionDet.FirstOrDefault(x => x.partida == part.partida);
                        var surtidoPorInsumo = surtidoDet.Where(x => x.insumo == Convert.ToInt32(part.insumo)).ToList().Count > 0 ?
                            surtidoDet.Where(x => x.insumo == Convert.ToInt32(part.insumo)).Sum(y => y.cantidad) : 0;

                        var cantidadNoCancelada = (part.cantidad != null ?
                            Convert.ToDecimal(part.cantidad, CultureInfo.InvariantCulture) : 0) - Convert.ToDecimal(partidaRequisicion.cant_cancelada, CultureInfo.InvariantCulture);
                        //var cantidadNoOrdenada = cantidadNoCancelada - (partidaRequisicion.cant_ordenada != null ? Convert.ToDecimal(partidaRequisicion.cant_ordenada, CultureInfo.InvariantCulture) : 0);
                        var cantidadResultado = cantidadNoCancelada - surtidoPorInsumo;

                        part.cantidad = cantidadResultado;
                        part.cant_ordenada = Convert.ToDecimal(partidaRequisicion.cant_ordenada, CultureInfo.InvariantCulture);
                    }

                    cuadroComparativo.detalleCuadro = cuadroDet;
                    cuadroComparativo.tieneCuadro = true;

                    var cuadroSIGOPLAN = _context.tblCom_CuadroComparativo.FirstOrDefault(x => x.registroActivo && x.cc == cuadro.cc && x.numero == cuadro.numero && x.folio == cuadro.folio);

                    if (cuadroSIGOPLAN != null)
                    {
                        cuadroComparativo.rutaArchivo1 = cuadroSIGOPLAN.rutaArchivo1;
                        cuadroComparativo.rutaArchivo2 = cuadroSIGOPLAN.rutaArchivo2;
                        cuadroComparativo.rutaArchivo3 = cuadroSIGOPLAN.rutaArchivo3;
                    }

                    //DEFAULT PERU
                    cuadroComparativo.PERU_tipoCambio = 1;

                    return cuadroComparativo;
                }
                else
                {
                    var requisicionNuevoCuadro = new CuadroComparativoDTO();

                    var requisicionDetNuevoCuadro = consultaCheckProductivo(
                        string.Format(@"SELECT 
                                        det.cc, 
                                        det.numero, 
                                        det.partida, 
                                        det.insumo, 
                                        ins.descripcion, 
                                        det.cantidad, 
                                        ins.unidad, 
                                        det.cant_ordenada, 
                                        (
                                            SELECT 
                                                TOP 1 l.descripcion 
                                            FROM so_req_det_linea l 
                                            WHERE l.cc = det.cc AND l.numero = det.numero AND l.partida = det.partida 
                                        ) AS partidaDesc 
                                    FROM so_requisicion_det det 
                                        INNER JOIN insumos ins ON det.insumo = ins.insumo 
                                    WHERE det.cc = '{0}' AND det.numero = {1}", cuadro.cc, cuadro.numero)).ToObject<List<CuadroComparativoDetDTO>>();

                    foreach (var part in requisicionDetNuevoCuadro)
                    {
                        var partidaRequisicion = requisicionDet.FirstOrDefault(x => x.partida == part.partida);
                        var surtidoPorInsumo = surtidoDet.Where(x => x.insumo == Convert.ToInt32(part.insumo)).ToList().Count > 0 ?
                            surtidoDet.Where(x => x.insumo == Convert.ToInt32(part.insumo)).Sum(y => y.cantidad) : 0;

                        var cantidadNoCancelada = (part.cantidad != null ?
                            Convert.ToDecimal(part.cantidad, CultureInfo.InvariantCulture) : 0) - Convert.ToDecimal(partidaRequisicion.cant_cancelada, CultureInfo.InvariantCulture);
                        //var cantidadNoOrdenada = cantidadNoCancelada - (partidaRequisicion.cant_ordenada.Value != null ? Convert.ToDecimal(partidaRequisicion.cant_ordenada.Value, CultureInfo.InvariantCulture) : 0);
                        var cantidadResultado = cantidadNoCancelada - surtidoPorInsumo;

                        part.cantidad = cantidadResultado;
                        part.cant_ordenada = Convert.ToDecimal(part.cant_ordenada, CultureInfo.InvariantCulture);
                    }

                    requisicionNuevoCuadro.detalleCuadro = requisicionDetNuevoCuadro;
                    requisicionNuevoCuadro.tieneCuadro = false;

                    //var requisicionEK = consultaCheckProductivo(string.Format(@"SELECT * FROM so_requisicion WHERE cc = '{0}' AND numero = {1}", cuadro.cc, cuadro.numero));

                    //if (requisicionEK != null)
                    //{
                    //var requisicion = ((List<dynamic>)requisicionEK.ToObject<List<dynamic>>())[0];

                    var libreAbordoDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM so_libre_abordo WHERE numero = {0}", (int)requisicion.libre_abordo));

                    if (libreAbordoDescEK != null)
                    {
                        var libreAbordoDesc = ((List<dynamic>)libreAbordoDescEK.ToObject<List<dynamic>>())[0];

                        requisicionNuevoCuadro.lab1 = (int)requisicion.libre_abordo;
                        requisicionNuevoCuadro.lab1Desc = (string)libreAbordoDesc.descripcion;
                        requisicionNuevoCuadro.lab2 = (int)requisicion.libre_abordo;
                        requisicionNuevoCuadro.lab2Desc = (string)libreAbordoDesc.descripcion;
                        requisicionNuevoCuadro.lab3 = (int)requisicion.libre_abordo;
                        requisicionNuevoCuadro.lab3Desc = (string)libreAbordoDesc.descripcion;
                    }
                    //}

                    //DEFAULT PERU
                    requisicionNuevoCuadro.PERU_tipoCambio = 1;

                    return requisicionNuevoCuadro;
                }
                #endregion
            }
            else
            {
                #region PERU

                decimal tipoCambioPeru = 0M;

                using (var dbStarsoft = new MainContextPeruStarSoft003BDCONTABILIDAD())
                {
                    var tipoCambioActual = dbStarsoft.TIPO_CAMBIO.ToList().FirstOrDefault(e => e.TIPOCAMB_FECHA.Date == DateTime.Now.Date);
                    if (tipoCambioActual != null)
                    {
                        tipoCambioPeru = tipoCambioActual.TIPOCAMB_COMPRA;
                    }
                    else
                    {
                        tipoCambioPeru = dbStarsoft.TIPO_CAMBIO.ToList().FirstOrDefault(e => e.TIPOCAMB_FECHA.Date == DateTime.Now.AddDays(-1).Date).TIPOCAMB_COMPRA;
                    }

                }


                var existeCuadro = _context.Select<dynamic>(new DapperDTO()
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = string.Format(@"
                                SELECT 
                                    * 
                                FROM tblCom_CuadroComparativo 
                                WHERE cc = '{0}' AND numero = {1} AND folio = {2} AND PERU_tipoCuadro = '{3}' AND registroActivo = 1", cuadro.cc, cuadro.numero, cuadro.folio, cuadro.PERU_tipoRequisicion)
                }).FirstOrDefault();

                var surtido = _context.tblCom_Surtido.Where(x => x.estatus && x.cc == cuadro.cc && x.numero == cuadro.numero).ToList();
                var surtidoDet = new List<tblCom_SurtidoDet>();

                if (surtido.Count > 0)
                {
                    foreach (var sur in surtido)
                    {
                        surtidoDet.AddRange(_context.tblCom_SurtidoDet.Where(x => x.estatus && x.surtidoID == sur.id).ToList());
                    }
                }

                var requisicion = _context.Select<dynamic>(new DapperDTO()
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = string.Format(@"
                                SELECT 
                                    * 
                                FROM tblCom_Req 
                                WHERE cc = '{0}' AND numero = {1} AND estatusRegistro = 1 AND PERU_tipoRequisicion = '{3}'", cuadro.cc, cuadro.numero, cuadro.folio, cuadro.PERU_tipoRequisicion)
                }).FirstOrDefault();

                var requisicionDet = _context.Select<dynamic>(new DapperDTO()
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = string.Format(@"
                                SELECT 
                                    det.* 
                                FROM tblCom_Req req
                                INNER JOIN tblCom_ReqDet det ON req.id = det.idReq
                                WHERE det.idReq = '{0}' AND det.estatusRegistro = 1", requisicion.id)
                });

                if (existeCuadro != null)
                {
                    #region CUADRO EXISTENTE
                    var cuadroComparativo = _context.Select<CuadroComparativoDTO>(new DapperDTO()
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = string.Format(@"SELECT 
                                    cua.* 
                                FROM tblCom_CuadroComparativo cua 
                                WHERE cua.cc = '{0}' AND cua.numero = {1} AND cua.folio = {2} AND PERU_tipoCuadro = '{3}' AND registroActivo = 1", cuadro.cc, cuadro.numero, cuadro.folio, cuadro.PERU_tipoRequisicion)
                    }).FirstOrDefault();

                    //TIPO DE MONEDA POR PROVEEDOR
                    cuadroComparativo.moneda1Desc = cuadroComparativo.moneda1 == 4 ? "SOL" : "USD";
                    cuadroComparativo.moneda2Desc = cuadroComparativo.moneda2 == 4 ? "SOL" : "USD";
                    cuadroComparativo.moneda3Desc = cuadroComparativo.moneda3 == 4 ? "SOL" : "USD";

                    cuadroComparativo.PERU_tipoCambio = tipoCambioPeru;

                    var cuadroDet = _context.Select<CuadroComparativoDetDTO>(new DapperDTO()
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = string.Format(@"SELECT 
                                    det.cc, 
                                    det.numero, 
                                    det.folio, 
                                    det.partida, 
                                    det.insumo, 
                                    --ins.descripcion, 
                                    det.cantidad, 
                                    --ins.unidad, 
                                    det.precio1, 
                                    det.precio2,  
                                    det.precio3, 
                                    cua.moneda1, 
                                    cua.moneda2, 
                                    cua.moneda3, 
                                    det.proveedor_uc, 
                                    det.oc_uc, 
                                    det.fecha_uc, 
                                    det.precio_uc, 
                                    cua.prov1, 
                                    cua.nombre_prov1, 
                                    cua.prov2, 
                                    cua.nombre_prov2, 
                                    cua.prov3, 
                                    cua.nombre_prov3, 
                                    (
                                        SELECT 
                                            TOP 1 l.descripcion 
                                        FROM tblCom_Req c
										INNER JOIN tblCom_ReqDet l ON c.id = l.idReq
                                        WHERE cua.cc = c.cc AND cua.numero = c.numero AND l.partida = det.partida AND c.estatusRegistro = 1 AND c.PERU_tipoRequisicion = '{3}' AND l.estatusRegistro = 1 AND l.PERU_tipoRequisicion = '{3}'
                                    ) AS partidaDesc 
                                FROM tblCom_CuadroComparativoDet det 
                                    INNER JOIN tblCom_CuadroComparativo cua ON det.cc = cua.cc AND det.numero = cua.numero AND det.folio = cua.folio 
                                WHERE det.cc = '{0}' AND det.numero = {1} AND det.folio = {2} AND det.registroActivo = 1 AND cua.registroActivo = 1 AND det.PERU_tipoCuadro = '{3}' AND cua.PERU_tipoCuadro = '{3}'", cuadro.cc, cuadro.numero, cuadro.folio, cuadro.PERU_tipoRequisicion)
                    });

                    foreach (var part in cuadroDet)
                    {

                        using (var dbStarsoft = new MainContextPeruStarSoft003BDCOMUN())
                        {

                            var insumoStarsoft = "";

                            string insumoStr = ((int)part.insumo).ToString();
                            int lengthId = 11 - insumoStr.Count();

                            for (int i = 0; i < lengthId; i++)
                            {
                                insumoStarsoft += "0";
                            }

                            insumoStarsoft += insumoStr;

                            var objInusmoStarsoft = dbStarsoft.MAEART.FirstOrDefault(e => e.ACODIGO == insumoStarsoft);
                            part.descripcion = objInusmoStarsoft.ADESCRI;
                            part.unidad = objInusmoStarsoft.AUNIDAD;
                        }

                        var partidaRequisicion = requisicionDet.FirstOrDefault(x => x.partida == part.partida);
                        var surtidoPorInsumo = surtidoDet.Where(x => x.insumo == Convert.ToInt32(part.insumo)).ToList().Count > 0 ?
                            surtidoDet.Where(x => x.insumo == Convert.ToInt32(part.insumo)).Sum(y => y.cantidad) : 0;

                        var cantidadNoCancelada = (part.cantidad != null ?
                            Convert.ToDecimal(part.cantidad, CultureInfo.InvariantCulture) : 0) - (partidaRequisicion != null ? Convert.ToDecimal(partidaRequisicion.cantCancelada, CultureInfo.InvariantCulture) : 0);
                        //var cantidadNoOrdenada = cantidadNoCancelada - (partidaRequisicion.cant_ordenada != null ? Convert.ToDecimal(partidaRequisicion.cant_ordenada, CultureInfo.InvariantCulture) : 0);
                        var cantidadResultado = cantidadNoCancelada - surtidoPorInsumo;

                        part.cantidad = cantidadResultado;
                    }

                    cuadroComparativo.detalleCuadro = cuadroDet;
                    cuadroComparativo.tieneCuadro = true;

                    var cuadroSIGOPLAN = _context.tblCom_CuadroComparativo.FirstOrDefault(x => x.registroActivo && x.cc == cuadro.cc && x.numero == cuadro.numero && x.folio == cuadro.folio && x.PERU_tipoCuadro == cuadro.PERU_tipoRequisicion);

                    if (cuadroSIGOPLAN != null)
                    {
                        cuadroComparativo.rutaArchivo1 = cuadroSIGOPLAN.rutaArchivo1;
                        cuadroComparativo.rutaArchivo2 = cuadroSIGOPLAN.rutaArchivo2;
                        cuadroComparativo.rutaArchivo3 = cuadroSIGOPLAN.rutaArchivo3;
                    }



                    return cuadroComparativo;

                    #endregion
                }
                else
                {
                    #region CUADRO SIN GUARDAR
                    var requisicionNuevoCuadro = new CuadroComparativoDTO();

                    var requisicionDetNuevoCuadro = _context.Select<CuadroComparativoDetDTO>(new DapperDTO()
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = string.Format(@"
                                SELECT 
                                    req.cc, 
                                    req.numero, 
                                    det.partida, 
                                    det.insumo, 
                                    --ins.descripcion, 
                                    det.cantidad - det.cantOrdenada AS cantidad, 
                                    --ins.unidad, 
                                    det.descripcion AS partidaDesc 
                                FROM tblCom_Req req
                                INNER JOIN tblCom_ReqDet det ON req.id = det.idReq
                                WHERE req.estatusRegistro = 1 AND det.estatusRegistro = 1 AND req.PERU_tipoRequisicion = '{2}' AND req.cc = '{0}' AND req.numero = {1}", cuadro.cc, cuadro.numero, cuadro.PERU_tipoRequisicion)
                    });

                    requisicionNuevoCuadro.PERU_tipoCambio = tipoCambioPeru;

                    foreach (var part in requisicionDetNuevoCuadro)
                    {
                        using (var dbStarsoft = new MainContextPeruStarSoft003BDCOMUN())
                        {

                            var insumoStarsoft = "";

                            string insumoStr = ((int)part.insumo).ToString();
                            int lengthId = 11 - insumoStr.Count();

                            for (int i = 0; i < lengthId; i++)
                            {
                                insumoStarsoft += "0";
                            }

                            insumoStarsoft += insumoStr;

                            var objInusmoStarsoft = dbStarsoft.MAEART.FirstOrDefault(e => e.ACODIGO == insumoStarsoft);
                            part.descripcion = objInusmoStarsoft.ADESCRI;
                            part.unidad = objInusmoStarsoft.AUNIDAD;
                        }

                        var partidaRequisicion = requisicionDet.FirstOrDefault(x => x.partida == part.partida);
                        var surtidoPorInsumo = surtidoDet.Where(x => x.insumo == Convert.ToInt32(part.insumo)).ToList().Count > 0 ?
                            surtidoDet.Where(x => x.insumo == Convert.ToInt32(part.insumo)).Sum(y => y.cantidad) : 0;

                        var cantidadNoCancelada = (part.cantidad != null ?
                            Convert.ToDecimal(part.cantidad, CultureInfo.InvariantCulture) : 0) - (partidaRequisicion != null ? Convert.ToDecimal(partidaRequisicion.cantCancelada, CultureInfo.InvariantCulture) : 0);
                        //var cantidadNoOrdenada = cantidadNoCancelada - (partidaRequisicion.cant_ordenada.Value != null ? Convert.ToDecimal(partidaRequisicion.cant_ordenada.Value, CultureInfo.InvariantCulture) : 0);
                        var cantidadResultado = cantidadNoCancelada - surtidoPorInsumo;

                        part.cantidad = cantidadResultado;
                    }

                    requisicionNuevoCuadro.detalleCuadro = requisicionDetNuevoCuadro;
                    requisicionNuevoCuadro.tieneCuadro = false;

                    return requisicionNuevoCuadro;
                    #endregion
                }
                #endregion
            }

        }
        public CuadroComparativoReporteDTO getCuadroReporte(string cc, int numero, int folio)
        {

            if ((MainContextEnum)vSesiones.sesionEmpresaActual != MainContextEnum.PERU)
            {
                #region RESTO EMPRESAS
                var cuadro = getCuadroDet(new CuadroComparativoDTO { cc = cc, numero = numero, folio = folio }); //OMAR
                var cuadroReporte = new CuadroComparativoReporteDTO();

                var ccDesc = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT descripcion FROM cc WHERE cc = '{0}' AND st_ppto != 'T'", cuadro.cc)).ToObject<List<dynamic>>();
                var listLAB = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM so_libre_abordo")).ToObject<List<dynamic>>();

                cuadroReporte.cc = cuadro.cc + "-" + (string)ccDesc[0].descripcion;
                cuadroReporte.folioCuadroComparativo = cuadro.cc + "-" + fillNo(cuadro.numero.ToString(), 6) + "-" + ((cuadro.folio < 10) ? ("0" + cuadro.folio) : cuadro.folio.ToString());
                cuadroReporte.fechaCuadro = cuadro.fecha.Date.ToShortDateString();
                cuadroReporte.fechaActual = DateTime.Now.Date.ToShortDateString();
                cuadroReporte.proveedor1 = (cuadro.prov1 != null ? (cuadro.prov1.ToString() + "-" + (cuadro.nombre_prov1 ?? "")) : "");
                cuadroReporte.proveedor2 = (cuadro.prov2 != null ? (cuadro.prov2.ToString() + "-" + (cuadro.nombre_prov2 ?? "")) : "");
                cuadroReporte.proveedor3 = (cuadro.prov3 != null ? (cuadro.prov3.ToString() + "-" + (cuadro.nombre_prov3 ?? "")) : "");
                cuadroReporte.subTotalProv1 = "$" + cuadro.sub_total1.ToString("N6");
                cuadroReporte.subTotalProv2 = "$" + cuadro.sub_total2.ToString("N6");
                cuadroReporte.subTotalProv3 = "$" + cuadro.sub_total3.ToString("N6");
                cuadroReporte.descuentoProv1 = "$" + cuadro.dcto1.ToString("N6");
                cuadroReporte.descuentoProv2 = "$" + cuadro.dcto2.ToString("N6");
                cuadroReporte.descuentoProv3 = "$" + cuadro.dcto3.ToString("N6");
                cuadroReporte.total1Prov1 = "$" + (cuadro.sub_total1 - cuadro.dcto1).ToString("N6");
                cuadroReporte.total1Prov2 = "$" + (cuadro.sub_total2 - cuadro.dcto2).ToString("N6");
                cuadroReporte.total1Prov3 = "$" + (cuadro.sub_total3 - cuadro.dcto3).ToString("N6");
                cuadroReporte.ivaProv1 = "$" + cuadro.iva1.ToString("N6");
                cuadroReporte.ivaProv2 = "$" + cuadro.iva2.ToString("N6");
                cuadroReporte.ivaProv3 = "$" + cuadro.iva3.ToString("N6");
                cuadroReporte.total2Prov1 = "$" + cuadro.total1.ToString("N6");
                cuadroReporte.total2Prov2 = "$" + cuadro.total2.ToString("N6");
                cuadroReporte.total2Prov3 = "$" + cuadro.total3.ToString("N6");
                cuadroReporte.fletesProv1 = "$" + cuadro.fletes1.ToString("N6");
                cuadroReporte.fletesProv2 = "$" + cuadro.fletes2.ToString("N6");
                cuadroReporte.fletesProv3 = "$" + cuadro.fletes3.ToString("N6");
                cuadroReporte.gastosProv1 = "$" + cuadro.gastos_imp1.ToString("N6");
                cuadroReporte.gastosProv2 = "$" + cuadro.gastos_imp2.ToString("N6");
                cuadroReporte.gastosProv3 = "$" + cuadro.gastos_imp3.ToString("N6");
                cuadroReporte.granTotalProv1 = "$" + (cuadro.total1 + cuadro.fletes1 + cuadro.gastos_imp1).ToString("N6");
                cuadroReporte.granTotalProv2 = "$" + (cuadro.total2 + cuadro.fletes2 + cuadro.gastos_imp2).ToString("N6");
                cuadroReporte.granTotalProv3 = "$" + (cuadro.total3 + cuadro.fletes3 + cuadro.gastos_imp3).ToString("N6");
                cuadroReporte.labProv1 = cuadro.lab1 > 0 ? (string)listLAB.FirstOrDefault(x => (int)x.numero == cuadro.lab1).descripcion : "";
                cuadroReporte.labProv2 = cuadro.lab2 > 0 ? (string)listLAB.FirstOrDefault(x => (int)x.numero == cuadro.lab2).descripcion : "";
                cuadroReporte.labProv3 = cuadro.lab3 > 0 ? (string)listLAB.FirstOrDefault(x => (int)x.numero == cuadro.lab3).descripcion : "";
                cuadroReporte.pagoProv1 = "";
                cuadroReporte.pagoProv2 = "";
                cuadroReporte.pagoProv3 = "";
                cuadroReporte.fechaEntregaProv1 = cuadro.fecha_entrega1.Date.ToShortDateString();
                cuadroReporte.fechaEntregaProv2 = cuadro.fecha_entrega2.Date.ToShortDateString();
                cuadroReporte.fechaEntregaProv3 = cuadro.fecha_entrega3.Date.ToShortDateString();
                cuadroReporte.comentarioProv1 = cuadro.comentarios1 ?? "";
                cuadroReporte.comentarioProv2 = cuadro.comentarios2 ?? "";
                cuadroReporte.comentarioProv3 = cuadro.comentarios3 ?? "";

                cuadroReporte.partidas = new List<CuadroComparativoPartidasReporteDTO>();

                foreach (var det in cuadro.detalleCuadro)
                {
                    var ultimaCompra = getUltimaCompra(new CuadroComparativoDetDTO
                    {
                        cc = det.cc,
                        numero = det.numero,
                        folio = det.folio,
                        partida = det.partida,
                        insumo = det.insumo
                    });

                    cuadroReporte.partidas.Add(new CuadroComparativoPartidasReporteDTO
                    {
                        partida = det.partida.ToString(),
                        insumo = det.insumo + " " + det.descripcion,
                        cantidad = det.cantidad.ToString("N6") + " " + det.unidad,
                        precioProv1 = "$" + det.precio1.ToString("N6") + " " + (det.moneda1 ?? ""),
                        importeProv1 = "$" + (det.cantidad * det.precio1).ToString("N6"),
                        precioProv2 = "$" + det.precio2.ToString("N6") + " " + (det.moneda2 ?? ""),
                        importeProv2 = "$" + (det.cantidad * det.precio2).ToString("N6"),
                        precioProv3 = "$" + det.precio3.ToString("N6") + " " + (det.moneda3 ?? ""),
                        importeProv3 = "$" + (det.cantidad * det.precio3).ToString("N6"),
                        ultCompraProveedor = ultimaCompra != null ? ultimaCompra.proveedorNum + '-' + ultimaCompra.proveedorNom : "",
                        ultCompraFolio = ultimaCompra != null ? ultimaCompra.folioOC : "",
                        ultCompraFecha = ultimaCompra != null ? ultimaCompra.fechaString : "",
                        ultCompraPrecio = ultimaCompra != null ? "$" + ultimaCompra.precio.ToString("N6") + ' ' + ultimaCompra.monedaDesc : ""
                    });
                }

                return cuadroReporte;
                #endregion
            }
            else
            {
                #region PERU
                string PERU_tipoCuadro = "";


                if (HttpContext.Current.Session["servicioCompraCuadroComparativo"] != null)
                {
                    if (!(bool)HttpContext.Current.Session["servicioCompraCuadroComparativo"]) //Vista Generar Compra
                    {
                        PERU_tipoCuadro = "RQ";
                    }
                    else //Vista Generar Compra Servicio
                    {
                        PERU_tipoCuadro = "RS";
                    }
                }

                var cuadro = getCuadroDet(new CuadroComparativoDTO { cc = cc, numero = numero, folio = folio, PERU_tipoRequisicion = PERU_tipoCuadro }); //OMAR
                var cuadroReporte = new CuadroComparativoReporteDTO();

                //var ccDesc = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT descripcion FROM cc WHERE cc = '{0}' AND st_ppto != 'T'", cuadro.cc)).ToObject<List<dynamic>>();
                //var listLAB = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM so_libre_abordo")).ToObject<List<dynamic>>();

                var ccDesc = _context.tblC_Nom_CatalogoCC.FirstOrDefault(e => e.cc == cc).ccDescripcion;

                string prefijoMoneda1 = cuadro.moneda1.Value == 2 ? "$" : "S/";
                string prefijoMoneda2 = cuadro.moneda2.Value == 2 ? "$" : "S/";
                string prefijoMoneda3 = cuadro.moneda3.Value == 2 ? "$" : "S/";

                cuadroReporte.cc = cuadro.cc + "-" + ccDesc;
                cuadroReporte.folioCuadroComparativo = cuadro.cc + "-" + fillNo(cuadro.numero.ToString(), 6) + "-" + ((cuadro.folio < 10) ? ("0" + cuadro.folio) : cuadro.folio.ToString());
                cuadroReporte.fechaCuadro = cuadro.fecha.Date.ToShortDateString();
                cuadroReporte.fechaActual = DateTime.Now.Date.ToShortDateString();
                cuadroReporte.proveedor1 = (cuadro.prov1 != null ? (cuadro.prov1.ToString() + "-" + (cuadro.nombre_prov1 ?? "")) : "");
                cuadroReporte.proveedor2 = (cuadro.prov2 != null ? (cuadro.prov2.ToString() + "-" + (cuadro.nombre_prov2 ?? "")) : "");
                cuadroReporte.proveedor3 = (cuadro.prov3 != null ? (cuadro.prov3.ToString() + "-" + (cuadro.nombre_prov3 ?? "")) : "");
                cuadroReporte.subTotalProv1 = prefijoMoneda1 + cuadro.sub_total1.ToString("N6");
                cuadroReporte.subTotalProv2 = prefijoMoneda2 + cuadro.sub_total2.ToString("N6");
                cuadroReporte.subTotalProv3 = prefijoMoneda3 + cuadro.sub_total3.ToString("N6");
                cuadroReporte.descuentoProv1 = prefijoMoneda1 + cuadro.dcto1.ToString("N6");
                cuadroReporte.descuentoProv2 = prefijoMoneda2 + cuadro.dcto2.ToString("N6");
                cuadroReporte.descuentoProv3 = prefijoMoneda3 + cuadro.dcto3.ToString("N6");
                cuadroReporte.total1Prov1 = prefijoMoneda1 + (cuadro.sub_total1 - cuadro.dcto1).ToString("N6");
                cuadroReporte.total1Prov2 = prefijoMoneda2 + (cuadro.sub_total2 - cuadro.dcto2).ToString("N6");
                cuadroReporte.total1Prov3 = prefijoMoneda3 + (cuadro.sub_total3 - cuadro.dcto3).ToString("N6");
                cuadroReporte.ivaProv1 = prefijoMoneda1 + cuadro.iva1.ToString("N6");
                cuadroReporte.ivaProv2 = prefijoMoneda2 + cuadro.iva2.ToString("N6");
                cuadroReporte.ivaProv3 = prefijoMoneda3 + cuadro.iva3.ToString("N6");
                cuadroReporte.total2Prov1 = prefijoMoneda1 + cuadro.total1.ToString("N6");
                cuadroReporte.total2Prov2 = prefijoMoneda2 + cuadro.total2.ToString("N6");
                cuadroReporte.total2Prov3 = prefijoMoneda3 + cuadro.total3.ToString("N6");
                cuadroReporte.fletesProv1 = prefijoMoneda1 + cuadro.fletes1.ToString("N6");
                cuadroReporte.fletesProv2 = prefijoMoneda2 + cuadro.fletes2.ToString("N6");
                cuadroReporte.fletesProv3 = prefijoMoneda3 + cuadro.fletes3.ToString("N6");
                cuadroReporte.gastosProv1 = prefijoMoneda1 + cuadro.gastos_imp1.ToString("N6");
                cuadroReporte.gastosProv2 = prefijoMoneda2 + cuadro.gastos_imp2.ToString("N6");
                cuadroReporte.gastosProv3 = prefijoMoneda3 + cuadro.gastos_imp3.ToString("N6");
                cuadroReporte.granTotalProv1 = prefijoMoneda1 + (cuadro.total1 + cuadro.fletes1 + cuadro.gastos_imp1).ToString("N6");
                cuadroReporte.granTotalProv2 = prefijoMoneda2 + (cuadro.total2 + cuadro.fletes2 + cuadro.gastos_imp2).ToString("N6");
                cuadroReporte.granTotalProv3 = prefijoMoneda3 + (cuadro.total3 + cuadro.fletes3 + cuadro.gastos_imp3).ToString("N6");
                //cuadroReporte.labProv1 = cuadro.lab1 > 0 ? (string)listLAB.FirstOrDefault(x => (int)x.numero == cuadro.lab1).descripcion : "";
                //cuadroReporte.labProv2 = cuadro.lab2 > 0 ? (string)listLAB.FirstOrDefault(x => (int)x.numero == cuadro.lab2).descripcion : "";
                //cuadroReporte.labProv3 = cuadro.lab3 > 0 ? (string)listLAB.FirstOrDefault(x => (int)x.numero == cuadro.lab3).descripcion : "";
                cuadroReporte.labProv1 = "";
                cuadroReporte.labProv2 = "";
                cuadroReporte.labProv3 = "";
                cuadroReporte.pagoProv1 = "";
                cuadroReporte.pagoProv2 = "";
                cuadroReporte.pagoProv3 = "";
                cuadroReporte.fechaEntregaProv1 = cuadro.fecha_entrega1.Date.ToShortDateString();
                cuadroReporte.fechaEntregaProv2 = cuadro.fecha_entrega2.Date.ToShortDateString();
                cuadroReporte.fechaEntregaProv3 = cuadro.fecha_entrega3.Date.ToShortDateString();
                cuadroReporte.comentarioProv1 = cuadro.comentarios1 ?? "";
                cuadroReporte.comentarioProv2 = cuadro.comentarios2 ?? "";
                cuadroReporte.comentarioProv3 = cuadro.comentarios3 ?? "";
                cuadroReporte.moneda1 = cuadro.moneda1.ToString();
                cuadroReporte.moneda2 = cuadro.moneda2.ToString();
                cuadroReporte.moneda3 = cuadro.moneda3.ToString();

                cuadroReporte.partidas = new List<CuadroComparativoPartidasReporteDTO>();

                foreach (var det in cuadro.detalleCuadro)
                {
                    var ultimaCompra = getUltimaCompra(new CuadroComparativoDetDTO
                    {
                        cc = det.cc,
                        numero = det.numero,
                        folio = det.folio,
                        partida = det.partida,
                        insumo = det.insumo,
                    });

                    string prefijoUltimaComp = ultimaCompra.moneda == 2 ? "$" : "S/";

                    cuadroReporte.partidas.Add(new CuadroComparativoPartidasReporteDTO
                    {
                        partida = det.partida.ToString(),
                        insumo = det.insumo + " " + det.descripcion,
                        cantidad = det.cantidad.ToString("N6") + " " + det.unidad,
                        precioProv1 = prefijoMoneda1 + det.precio1.ToString("N6") + " " + (det.moneda1 ?? ""),
                        importeProv1 = prefijoMoneda1 + (det.cantidad * det.precio1).ToString("N6"),
                        precioProv2 = prefijoMoneda2 + det.precio2.ToString("N6") + " " + (det.moneda2 ?? ""),
                        importeProv2 = prefijoMoneda2 + (det.cantidad * det.precio2).ToString("N6"),
                        precioProv3 = prefijoMoneda3 + det.precio3.ToString("N6") + " " + (det.moneda3 ?? ""),
                        importeProv3 = prefijoMoneda3 + (det.cantidad * det.precio3).ToString("N6"),
                        ultCompraProveedor = ultimaCompra != null ? ultimaCompra.proveedorNum + '-' + ultimaCompra.proveedorNom : "",
                        ultCompraFolio = ultimaCompra != null ? ultimaCompra.folioOC : "",
                        ultCompraFecha = ultimaCompra != null ? ultimaCompra.fechaString : "",
                        ultCompraPrecio = ultimaCompra != null ? prefijoUltimaComp + ultimaCompra.precio.ToString("N6") + ' ' + ultimaCompra.monedaDesc : ""
                    });
                }

                return cuadroReporte;
                #endregion
            }

        }
        public InfoProveedorMonedaDTO getProveedorInfo(string num, string PERU_tipoCambio = "")
        {
            try
            {
                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {
                    #region PERU
                    case EmpresaEnum.Peru:
                        {
                            using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                            {
                                using (var _starsoftContabilidad = new MainContextPeruStarSoft003BDCONTABILIDAD())
                                {
                                    var registroProveedor = _starsoft.MAEPROV.ToList().FirstOrDefault(x => x.PRVCCODIGO == num.ToString());

                                    if (registroProveedor != null)
                                    {
                                        var listaBancosStarsoft = _starsoftContabilidad.BANCO.ToList();
                                        var listaCuentasCorrientes = _starsoftContabilidad.CUENTA_TELE_ANEXO.Where(x => x.ANEXO.Contains(registroProveedor.PRVCCODIGO)).ToList().Select(x => new ComboDTO
                                        {
                                            Value = x.ANEXO + "-" + x.BAN_CODIGO + "-" + x.CTABAN_CODIGO,
                                            Text = "[" + x.CTABAN_CODIGO + "] " + x.BAN_CODIGO + " - " + listaBancosStarsoft.Where(y => y.BAN_CODIGO == x.BAN_CODIGO).Select(z => z.BAN_DESCRIPCION).FirstOrDefault() + " - " + x.MON_CODIGO,
                                            TextoOpcional = x.MON_CODIGO
                                        }).ToList();
                                        var PERU_cuentaCorriente = "";
                                        var moneda = 4;
                                        TIPO_CAMBIO tipoCambioHoy = null;

                                        if (listaCuentasCorrientes.Count() > 0)
                                        {
                                            PERU_cuentaCorriente = listaCuentasCorrientes[0].Value;
                                            moneda = listaCuentasCorrientes[0].TextoOpcional == "MN" ? 4 : 2;

                                            var hoy = DateTime.Now;

                                            tipoCambioHoy = _starsoftContabilidad.TIPO_CAMBIO.ToList().FirstOrDefault(x => x.TIPOCAMB_FECHA.Year == hoy.Year && x.TIPOCAMB_FECHA.Month == hoy.Month && x.TIPOCAMB_FECHA.Day == hoy.Day);
                                            if (tipoCambioHoy == null)
                                            {
                                                tipoCambioHoy = _starsoftContabilidad.TIPO_CAMBIO.OrderByDescending(x => x.TIPOCAMB_FECHA).FirstOrDefault();
                                                if (tipoCambioHoy == null)
                                                {
                                                    tipoCambioHoy = new TIPO_CAMBIO();
                                                    tipoCambioHoy.TIPOCAMB_COMPRA = 1;
                                                    tipoCambioHoy.TIPOCAMB_VENTA = 1;
                                                }
                                            }
                                        }

                                        return new InfoProveedorMonedaDTO
                                        {
                                            id = registroProveedor.PRVCNOMBRE,
                                            label = registroProveedor.PRVCCODIGO,
                                            moneda = moneda,
                                            monedaDesc = moneda == 4 ? "SOL" : "USD",
                                            monedaTipoCambio = moneda == 2 ? PERU_tipoCambio == "COM" ? tipoCambioHoy.TIPOCAMB_COMPRA : tipoCambioHoy.TIPOCAMB_VENTA : 1m,
                                            cancelado = "",
                                            proveedorSubcontratistaBloqueado = false,
                                            proveedorSubcontratistaExiste = true,
                                            listaCuentasCorrientes = listaCuentasCorrientes,
                                            PERU_formaPago = registroProveedor.PRVPAGO,
                                            PERU_cuentaCorriente = PERU_cuentaCorriente
                                        };
                                    }
                                    else
                                    {
                                        return null;
                                    }
                                }
                            }
                        }
                    #endregion
                    case EmpresaEnum.Colombia:
                        {
                            string t = string.Format(@"
                                SELECT 
                                    prov.numpro, 
                                    prov.nombre, 
                                    prov.moneda, 
                                    mon.moneda AS monedaDesc, 
                                    (
                                        CASE 
                                            WHEN prov.moneda = 2 THEN 
                                                (SELECT TOP 1 tc.tipo_cambio FROM tipo_cambio tc WHERE tc.moneda = 2 ORDER BY tc.fecha DESC)
                                            ELSE 
                                                mon.tipo_cambio 
                                        END
                                    ) AS monedaTipoCambio, 
                                    prov.cancelado 
                                FROM sp_proveedores prov 
                                    INNER JOIN moneda mon ON prov.moneda = mon.clave 
                                WHERE prov.numpro = {0}", num);

                            var lst = (List<dynamic>)consultaCheckProductivo(string.Format(@"
                                SELECT 
                                    prov.numpro, 
                                    prov.nombre, 
                                    prov.moneda, 
                                    mon.moneda AS monedaDesc, 
                                    (
                                        CASE 
                                            WHEN prov.moneda = 2 THEN 
                                                (SELECT TOP 1 tc.tipo_cambio FROM tipo_cambio tc WHERE tc.moneda = 2 ORDER BY tc.fecha DESC)
                                            ELSE 
                                                mon.tipo_cambio 
                                        END
                                    ) AS monedaTipoCambio, 
                                    prov.cancelado 
                                FROM sp_proveedores prov 
                                    INNER JOIN moneda mon ON prov.moneda = mon.clave 
                                WHERE prov.numpro = {0}", num)
                            ).ToObject<List<dynamic>>();

                            var proveedorSubcontratistaBloqueado = false;
                            var proveedorSubcontratistaExiste = false;
                            var subcontratistaDB = _context.sp_Select<dynamic>(new StoreProcedureDTO
                            {
                                nombre = "spSUBCONTRATISTAS_PROVEEDOR_POR_NUMERO",
                                parametros = new List<OdbcParameterDTO> { new OdbcParameterDTO { nombre = "numeroProveedor", tipoSql = SqlDbType.Int, valor = num } }
                            });

                            if (subcontratistaDB.Count() > 0)
                            {
                                if (Convert.ToInt32(subcontratistaDB[0].tipoBloqueoId) > 0)
                                    proveedorSubcontratistaBloqueado = true;

                                proveedorSubcontratistaExiste = true;
                            }
                            else
                            {
                                //proveedorSubcontratistaExiste = false; comentado por mientras andreas felix se pone las pilas
                                proveedorSubcontratistaExiste = true; // quitar esta linea al descomentar la de arriba
                            }

                            return new InfoProveedorMonedaDTO
                            {
                                id = (string)lst[0].nombre,
                                label = (string)lst[0].numpro,
                                moneda = (int)lst[0].moneda,
                                monedaDesc = (string)lst[0].monedaDesc,
                                monedaTipoCambio = (decimal)lst[0].monedaTipoCambio,
                                cancelado = (string)lst[0].cancelado,
                                proveedorSubcontratistaBloqueado = proveedorSubcontratistaBloqueado,
                                proveedorSubcontratistaExiste = proveedorSubcontratistaExiste
                            };
                        }
                    default:
                        {
                            var lst = (List<dynamic>)consultaCheckProductivo(string.Format(@"
                                SELECT 
                                    prov.numpro, 
                                    prov.nombre, 
                                    prov.moneda, 
                                    mon.moneda AS monedaDesc, 
                                    (
                                        CASE 
                                            WHEN prov.moneda = 2 THEN 
                                                (SELECT TOP 1 tc.tipo_cambio FROM tipo_cambio tc WHERE tc.moneda = 2 ORDER BY tc.fecha DESC)
                                            ELSE 
                                                mon.tipo_cambio 
                                        END
                                    ) AS monedaTipoCambio, 
                                    prov.cancelado 
                                FROM sp_proveedores prov 
                                    INNER JOIN moneda mon ON prov.moneda = mon.clave 
                                WHERE prov.numpro = {0}", num)
                            ).ToObject<List<dynamic>>();

                            var proveedorSubcontratistaBloqueado = false;
                            var proveedorSubcontratistaExiste = false;
                            var subcontratistaDB = _context.sp_Select<dynamic>(new StoreProcedureDTO
                            {
                                nombre = "spSUBCONTRATISTAS_PROVEEDOR_POR_NUMERO",
                                parametros = new List<OdbcParameterDTO> { new OdbcParameterDTO { nombre = "numeroProveedor", tipoSql = SqlDbType.Int, valor = num } }
                            });

                            if (subcontratistaDB.Count() > 0)
                            {
                                if (Convert.ToInt32(subcontratistaDB[0].tipoBloqueoId) > 0)
                                {
                                    proveedorSubcontratistaBloqueado = true;
                                }

                                proveedorSubcontratistaExiste = true;
                            }
                            else
                            {
                                //proveedorSubcontratistaExiste = false; comentado por mientras andreas felix se pone las pilas
                                proveedorSubcontratistaExiste = true; // quitar esta linea al descomentar la de arriba
                            }

                            return new InfoProveedorMonedaDTO
                            {
                                id = (string)lst[0].nombre,
                                label = (string)lst[0].numpro,
                                moneda = (int)lst[0].moneda,
                                monedaDesc = (string)lst[0].monedaDesc,
                                monedaTipoCambio = (decimal)lst[0].monedaTipoCambio,
                                cancelado = (string)lst[0].cancelado,
                                proveedorSubcontratistaBloqueado = proveedorSubcontratistaBloqueado,
                                proveedorSubcontratistaExiste = proveedorSubcontratistaExiste
                            };
                        }
                }
            }
            catch (Exception)
            {
                return null;
            }
        }
        public Dictionary<string, object> GuardarNuevoCuadro(CuadroComparativoDTO nuevoCuadro)
        {
            var resultado = new Dictionary<string, object>();

            using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
            {
                using (var con = checkConexionProductivo())
                {
                    using (var trans = con.BeginTransaction())
                    {
                        try
                        {
                            var cuadroSIGOPLAN = new tblCom_CuadroComparativo();

                            switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                            {
                                case EmpresaEnum.Peru:
                                    {
                                        #region PERU
                                        #region SIGOPLAN
                                        #region General

                                        string PERU_tipoCompra = "";
                                        if (HttpContext.Current.Session["servicioCompraCuadroComparativo"] != null)
                                        {
                                            if (!(bool)HttpContext.Current.Session["servicioCompraCuadroComparativo"]) //Vista Generar Compra
                                            {
                                                PERU_tipoCompra = "RQ";
                                            }
                                            else //Vista Generar Compra Servicio
                                            {
                                                PERU_tipoCompra = "RS";
                                            }
                                        }

                                        cuadroSIGOPLAN.cc = nuevoCuadro.cc;
                                        cuadroSIGOPLAN.numero = nuevoCuadro.numero;
                                        cuadroSIGOPLAN.folio = nuevoCuadro.folio;
                                        cuadroSIGOPLAN.fecha = DateTime.Now;

                                        cuadroSIGOPLAN.prov1 = nuevoCuadro.prov1 ?? 0;
                                        cuadroSIGOPLAN.porcent_dcto1 = nuevoCuadro.porcent_dcto1;
                                        cuadroSIGOPLAN.porcent_iva1 = nuevoCuadro.porcent_iva1;
                                        cuadroSIGOPLAN.dcto1 = nuevoCuadro.dcto1;
                                        cuadroSIGOPLAN.iva1 = nuevoCuadro.iva1;
                                        cuadroSIGOPLAN.total1 = nuevoCuadro.total1;
                                        cuadroSIGOPLAN.tipo_cambio1 = nuevoCuadro.tipo_cambio1;
                                        cuadroSIGOPLAN.fecha_entrega1 = nuevoCuadro.fecha_entrega1;
                                        cuadroSIGOPLAN.lab1 = nuevoCuadro.lab1 ?? 0;
                                        cuadroSIGOPLAN.dias_pago1 = nuevoCuadro.dias_pago1 ?? 0;

                                        cuadroSIGOPLAN.prov2 = nuevoCuadro.prov2 ?? 0;
                                        cuadroSIGOPLAN.porcent_dcto2 = nuevoCuadro.porcent_dcto2;
                                        cuadroSIGOPLAN.porcent_iva2 = nuevoCuadro.porcent_iva2;
                                        cuadroSIGOPLAN.dcto2 = nuevoCuadro.dcto2;
                                        cuadroSIGOPLAN.iva2 = nuevoCuadro.iva2;
                                        cuadroSIGOPLAN.total2 = nuevoCuadro.total2;
                                        cuadroSIGOPLAN.tipo_cambio2 = nuevoCuadro.tipo_cambio2;
                                        cuadroSIGOPLAN.fecha_entrega2 = nuevoCuadro.fecha_entrega2;
                                        cuadroSIGOPLAN.lab2 = nuevoCuadro.lab2 ?? 0;
                                        cuadroSIGOPLAN.dias_pago2 = nuevoCuadro.dias_pago2 ?? 0;

                                        cuadroSIGOPLAN.prov3 = nuevoCuadro.prov3 ?? 0;
                                        cuadroSIGOPLAN.porcent_dcto3 = nuevoCuadro.porcent_dcto3;
                                        cuadroSIGOPLAN.porcent_iva3 = nuevoCuadro.porcent_iva3;
                                        cuadroSIGOPLAN.dcto3 = nuevoCuadro.dcto3;
                                        cuadroSIGOPLAN.iva3 = nuevoCuadro.iva3;
                                        cuadroSIGOPLAN.total3 = nuevoCuadro.total3;
                                        cuadroSIGOPLAN.tipo_cambio3 = nuevoCuadro.tipo_cambio3;
                                        cuadroSIGOPLAN.fecha_entrega3 = nuevoCuadro.fecha_entrega3;
                                        cuadroSIGOPLAN.lab3 = nuevoCuadro.lab3 ?? 0;
                                        cuadroSIGOPLAN.dias_pago3 = nuevoCuadro.dias_pago3 ?? 0;

                                        cuadroSIGOPLAN.solicito = nuevoCuadro.solicito;

                                        cuadroSIGOPLAN.sub_total1 = nuevoCuadro.sub_total1;
                                        cuadroSIGOPLAN.sub_total2 = nuevoCuadro.sub_total2;
                                        cuadroSIGOPLAN.sub_total3 = nuevoCuadro.sub_total3;

                                        cuadroSIGOPLAN.fletes1 = nuevoCuadro.fletes1;
                                        cuadroSIGOPLAN.fletes2 = nuevoCuadro.fletes2;
                                        cuadroSIGOPLAN.fletes3 = nuevoCuadro.fletes3;

                                        cuadroSIGOPLAN.gastos_imp1 = nuevoCuadro.gastos_imp1;
                                        cuadroSIGOPLAN.gastos_imp2 = nuevoCuadro.gastos_imp2;
                                        cuadroSIGOPLAN.gastos_imp3 = nuevoCuadro.gastos_imp3;

                                        cuadroSIGOPLAN.nombre_prov1 = nuevoCuadro.nombre_prov1 ?? "";
                                        cuadroSIGOPLAN.nombre_prov2 = nuevoCuadro.nombre_prov2 ?? "";
                                        cuadroSIGOPLAN.nombre_prov3 = nuevoCuadro.nombre_prov3 ?? "";

                                        cuadroSIGOPLAN.moneda1 = nuevoCuadro.moneda1 ?? 0;
                                        cuadroSIGOPLAN.moneda2 = nuevoCuadro.moneda2 ?? 0;
                                        cuadroSIGOPLAN.moneda3 = nuevoCuadro.moneda3 ?? 0;

                                        cuadroSIGOPLAN.inslic = nuevoCuadro.inslic;
                                        cuadroSIGOPLAN.inslic_fecha_ini = nuevoCuadro.inslic_fecha_ini;
                                        cuadroSIGOPLAN.inslic_fecha_fin = nuevoCuadro.inslic_fecha_fin;

                                        cuadroSIGOPLAN.comentarios1 = nuevoCuadro.comentarios1 ?? "";
                                        cuadroSIGOPLAN.comentarios2 = nuevoCuadro.comentarios2 ?? "";
                                        cuadroSIGOPLAN.comentarios3 = nuevoCuadro.comentarios3 ?? "";

                                        cuadroSIGOPLAN.usuarioCreacion_id = vSesiones.sesionUsuarioDTO.id;
                                        cuadroSIGOPLAN.fechaCreacion = DateTime.Now;
                                        cuadroSIGOPLAN.usuarioModificacion_id = 0;
                                        cuadroSIGOPLAN.fechaModificacion = null;
                                        cuadroSIGOPLAN.registroActivo = true;

                                        cuadroSIGOPLAN.PERU_prov1 = nuevoCuadro.PERU_prov1;
                                        cuadroSIGOPLAN.PERU_prov2 = nuevoCuadro.PERU_prov2;
                                        cuadroSIGOPLAN.PERU_prov3 = nuevoCuadro.PERU_prov3;

                                        cuadroSIGOPLAN.PERU_tipoCuadro = PERU_tipoCompra;

                                        _context.tblCom_CuadroComparativo.Add(cuadroSIGOPLAN);
                                        _context.SaveChanges();
                                        #endregion

                                        #region Detalle
                                        foreach (var detalle in nuevoCuadro.detalleCuadro)
                                        {
                                            var cuadroDetalleSIGOPLAN = new tblCom_CuadroComparativoDet();

                                            cuadroDetalleSIGOPLAN.cc = detalle.cc;
                                            cuadroDetalleSIGOPLAN.numero = detalle.numero;
                                            cuadroDetalleSIGOPLAN.folio = Int32.Parse(detalle.folio);
                                            cuadroDetalleSIGOPLAN.partida = detalle.partida;
                                            cuadroDetalleSIGOPLAN.insumo = detalle.insumo;
                                            cuadroDetalleSIGOPLAN.cantidad = detalle.cantidad;
                                            cuadroDetalleSIGOPLAN.precio1 = detalle.precio1;
                                            cuadroDetalleSIGOPLAN.precio2 = detalle.precio2;
                                            cuadroDetalleSIGOPLAN.precio3 = detalle.precio3;
                                            cuadroDetalleSIGOPLAN.proveedor_uc = detalle.proveedor_uc;
                                            cuadroDetalleSIGOPLAN.oc_uc = detalle.oc_uc;
                                            cuadroDetalleSIGOPLAN.fecha_uc = detalle.fecha_uc;
                                            cuadroDetalleSIGOPLAN.precio_uc = detalle.precio_uc;
                                            cuadroDetalleSIGOPLAN.usuarioCreacion_id = vSesiones.sesionUsuarioDTO.id;
                                            cuadroDetalleSIGOPLAN.fechaCreacion = DateTime.Now;
                                            cuadroDetalleSIGOPLAN.usuarioModificacion_id = 0;
                                            cuadroDetalleSIGOPLAN.fechaModificacion = null;
                                            cuadroDetalleSIGOPLAN.registroActivo = true;
                                            cuadroDetalleSIGOPLAN.PERU_tipoCuadro = cuadroSIGOPLAN.PERU_tipoCuadro;

                                            _context.tblCom_CuadroComparativoDet.Add(cuadroDetalleSIGOPLAN);
                                            _context.SaveChanges();
                                        }
                                        #endregion
                                        #endregion

                                        //cuadroComparativoFS.GuardarConfiabilidad(nuevoCuadro);
                                        #endregion
                                        break;
                                    }
                                case EmpresaEnum.Colombia:
                                    {
                                        #region COLOMBIA LISTO
                                        #region SIGOPLAN
                                        #region General
                                        cuadroSIGOPLAN.cc = nuevoCuadro.cc;
                                        cuadroSIGOPLAN.numero = nuevoCuadro.numero;
                                        cuadroSIGOPLAN.folio = nuevoCuadro.folio;
                                        cuadroSIGOPLAN.fecha = DateTime.Now;

                                        cuadroSIGOPLAN.prov1 = nuevoCuadro.prov1 ?? 0;
                                        cuadroSIGOPLAN.porcent_dcto1 = nuevoCuadro.porcent_dcto1;
                                        cuadroSIGOPLAN.porcent_iva1 = nuevoCuadro.porcent_iva1;
                                        cuadroSIGOPLAN.dcto1 = nuevoCuadro.dcto1;
                                        cuadroSIGOPLAN.iva1 = nuevoCuadro.iva1;
                                        cuadroSIGOPLAN.total1 = nuevoCuadro.total1;
                                        cuadroSIGOPLAN.tipo_cambio1 = nuevoCuadro.tipo_cambio1;
                                        cuadroSIGOPLAN.fecha_entrega1 = nuevoCuadro.fecha_entrega1;
                                        cuadroSIGOPLAN.lab1 = nuevoCuadro.lab1 ?? 0;
                                        cuadroSIGOPLAN.dias_pago1 = nuevoCuadro.dias_pago1 ?? 0;

                                        cuadroSIGOPLAN.prov2 = nuevoCuadro.prov2 ?? 0;
                                        cuadroSIGOPLAN.porcent_dcto2 = nuevoCuadro.porcent_dcto2;
                                        cuadroSIGOPLAN.porcent_iva2 = nuevoCuadro.porcent_iva2;
                                        cuadroSIGOPLAN.dcto2 = nuevoCuadro.dcto2;
                                        cuadroSIGOPLAN.iva2 = nuevoCuadro.iva2;
                                        cuadroSIGOPLAN.total2 = nuevoCuadro.total2;
                                        cuadroSIGOPLAN.tipo_cambio2 = nuevoCuadro.tipo_cambio2;
                                        cuadroSIGOPLAN.fecha_entrega2 = nuevoCuadro.fecha_entrega2;
                                        cuadroSIGOPLAN.lab2 = nuevoCuadro.lab2 ?? 0;
                                        cuadroSIGOPLAN.dias_pago2 = nuevoCuadro.dias_pago2 ?? 0;

                                        cuadroSIGOPLAN.prov3 = nuevoCuadro.prov3 ?? 0;
                                        cuadroSIGOPLAN.porcent_dcto3 = nuevoCuadro.porcent_dcto3;
                                        cuadroSIGOPLAN.porcent_iva3 = nuevoCuadro.porcent_iva3;
                                        cuadroSIGOPLAN.dcto3 = nuevoCuadro.dcto3;
                                        cuadroSIGOPLAN.iva3 = nuevoCuadro.iva3;
                                        cuadroSIGOPLAN.total3 = nuevoCuadro.total3;
                                        cuadroSIGOPLAN.tipo_cambio3 = nuevoCuadro.tipo_cambio3;
                                        cuadroSIGOPLAN.fecha_entrega3 = nuevoCuadro.fecha_entrega3;
                                        cuadroSIGOPLAN.lab3 = nuevoCuadro.lab3 ?? 0;
                                        cuadroSIGOPLAN.dias_pago3 = nuevoCuadro.dias_pago3 ?? 0;

                                        cuadroSIGOPLAN.solicito = nuevoCuadro.solicito;

                                        cuadroSIGOPLAN.sub_total1 = nuevoCuadro.sub_total1;
                                        cuadroSIGOPLAN.sub_total2 = nuevoCuadro.sub_total2;
                                        cuadroSIGOPLAN.sub_total3 = nuevoCuadro.sub_total3;

                                        cuadroSIGOPLAN.fletes1 = nuevoCuadro.fletes1;
                                        cuadroSIGOPLAN.fletes2 = nuevoCuadro.fletes2;
                                        cuadroSIGOPLAN.fletes3 = nuevoCuadro.fletes3;

                                        cuadroSIGOPLAN.gastos_imp1 = nuevoCuadro.gastos_imp1;
                                        cuadroSIGOPLAN.gastos_imp2 = nuevoCuadro.gastos_imp2;
                                        cuadroSIGOPLAN.gastos_imp3 = nuevoCuadro.gastos_imp3;

                                        cuadroSIGOPLAN.nombre_prov1 = nuevoCuadro.nombre_prov1 ?? "";
                                        cuadroSIGOPLAN.nombre_prov2 = nuevoCuadro.nombre_prov2 ?? "";
                                        cuadroSIGOPLAN.nombre_prov3 = nuevoCuadro.nombre_prov3 ?? "";

                                        cuadroSIGOPLAN.moneda1 = nuevoCuadro.moneda1 ?? 0;
                                        cuadroSIGOPLAN.moneda2 = nuevoCuadro.moneda2 ?? 0;
                                        cuadroSIGOPLAN.moneda3 = nuevoCuadro.moneda3 ?? 0;

                                        cuadroSIGOPLAN.inslic = false;
                                        cuadroSIGOPLAN.inslic_fecha_ini = null;
                                        cuadroSIGOPLAN.inslic_fecha_fin = null;

                                        cuadroSIGOPLAN.comentarios1 = nuevoCuadro.comentarios1 ?? "";
                                        cuadroSIGOPLAN.comentarios2 = nuevoCuadro.comentarios2 ?? "";
                                        cuadroSIGOPLAN.comentarios3 = nuevoCuadro.comentarios3 ?? "";

                                        cuadroSIGOPLAN.usuarioCreacion_id = vSesiones.sesionUsuarioDTO.id;
                                        cuadroSIGOPLAN.fechaCreacion = DateTime.Now;
                                        cuadroSIGOPLAN.usuarioModificacion_id = 0;
                                        cuadroSIGOPLAN.fechaModificacion = null;
                                        cuadroSIGOPLAN.registroActivo = true;

                                        _context.tblCom_CuadroComparativo.Add(cuadroSIGOPLAN);
                                        _context.SaveChanges();
                                        #endregion

                                        #region Detalle
                                        foreach (var detalle in nuevoCuadro.detalleCuadro)
                                        {
                                            var cuadroDetalleSIGOPLAN = new tblCom_CuadroComparativoDet();

                                            cuadroDetalleSIGOPLAN.cc = detalle.cc;
                                            cuadroDetalleSIGOPLAN.numero = detalle.numero;
                                            cuadroDetalleSIGOPLAN.folio = Int32.Parse(detalle.folio);
                                            cuadroDetalleSIGOPLAN.partida = detalle.partida;
                                            cuadroDetalleSIGOPLAN.insumo = detalle.insumo;
                                            cuadroDetalleSIGOPLAN.cantidad = detalle.cantidad;
                                            cuadroDetalleSIGOPLAN.precio1 = detalle.precio1;
                                            cuadroDetalleSIGOPLAN.precio2 = detalle.precio2;
                                            cuadroDetalleSIGOPLAN.precio3 = detalle.precio3;
                                            cuadroDetalleSIGOPLAN.proveedor_uc = detalle.proveedor_uc;
                                            cuadroDetalleSIGOPLAN.oc_uc = detalle.oc_uc;
                                            cuadroDetalleSIGOPLAN.fecha_uc = detalle.fecha_uc;
                                            cuadroDetalleSIGOPLAN.precio_uc = detalle.precio_uc;
                                            cuadroDetalleSIGOPLAN.usuarioCreacion_id = vSesiones.sesionUsuarioDTO.id;
                                            cuadroDetalleSIGOPLAN.fechaCreacion = DateTime.Now;
                                            cuadroDetalleSIGOPLAN.usuarioModificacion_id = 0;
                                            cuadroDetalleSIGOPLAN.fechaModificacion = null;
                                            cuadroDetalleSIGOPLAN.registroActivo = true;

                                            _context.tblCom_CuadroComparativoDet.Add(cuadroDetalleSIGOPLAN);
                                            _context.SaveChanges();
                                        }
                                        #endregion
                                        #endregion

                                        #region Enkontrol
                                        var count = 0;

                                        #region General
                                        using (var cmd = new OdbcCommand(@"
                                            INSERT INTO DBA.so_cuadro_comparativo (cc, numero, folio, fecha, prov1, porcent_dcto1, porcent_iva1, dcto1, iva1, total1, tipo_cambio1, fecha_entrega1, lab1, dias_pago1, 
                                                prov2, porcent_dcto2, porcent_iva2, dcto2, iva2, total2, tipo_cambio2, fecha_entrega2, lab2, dias_pago2, prov3, porcent_dcto3, porcent_iva3, dcto3, iva3, total3, tipo_cambio3, fecha_entrega3, lab3, dias_pago3, 
                                                solicito, sub_total1, sub_total2, sub_total3, fletes1, fletes2, fletes3, gastos_imp1, gastos_imp2, gastos_imp3, nombre_prov1, nombre_prov2, nombre_prov3, moneda1, moneda2, moneda3, 
                                                observaciones1, observaciones2, observaciones3) 
                                            VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@cc", OdbcType.Char).Value = nuevoCuadro.cc;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = nuevoCuadro.numero;
                                            parameters.Add("@folio", OdbcType.Numeric).Value = nuevoCuadro.folio;
                                            parameters.Add("@fecha", OdbcType.Date).Value = DateTime.Now;

                                            parameters.Add("@prov1", OdbcType.Numeric).Value = nuevoCuadro.prov1 ?? (object)DBNull.Value;
                                            parameters.Add("@porcent_dcto1", OdbcType.Numeric).Value = nuevoCuadro.porcent_dcto1;
                                            parameters.Add("@porcent_iva1", OdbcType.Numeric).Value = nuevoCuadro.porcent_iva1;
                                            parameters.Add("@dcto1", OdbcType.Numeric).Value = nuevoCuadro.dcto1;
                                            parameters.Add("@iva1", OdbcType.Numeric).Value = nuevoCuadro.iva1;
                                            parameters.Add("@total1", OdbcType.Numeric).Value = nuevoCuadro.total1;
                                            parameters.Add("@tipo_cambio1", OdbcType.Numeric).Value = nuevoCuadro.tipo_cambio1;
                                            parameters.Add("@fecha_entrega1", OdbcType.Date).Value = nuevoCuadro.fecha_entrega1;
                                            parameters.Add("@lab1", OdbcType.Numeric).Value = nuevoCuadro.lab1 ?? (object)DBNull.Value;
                                            parameters.Add("@dias_pago1", OdbcType.Numeric).Value = nuevoCuadro.dias_pago1 ?? (object)DBNull.Value;

                                            parameters.Add("@prov2", OdbcType.Numeric).Value = nuevoCuadro.prov2 ?? (object)DBNull.Value;
                                            parameters.Add("@porcent_dcto2", OdbcType.Numeric).Value = nuevoCuadro.porcent_dcto2;
                                            parameters.Add("@porcent_iva2", OdbcType.Numeric).Value = nuevoCuadro.porcent_iva2;
                                            parameters.Add("@dcto2", OdbcType.Numeric).Value = nuevoCuadro.dcto2;
                                            parameters.Add("@iva2", OdbcType.Numeric).Value = nuevoCuadro.iva2;
                                            parameters.Add("@total2", OdbcType.Numeric).Value = nuevoCuadro.total2;
                                            parameters.Add("@tipo_cambio2", OdbcType.Numeric).Value = nuevoCuadro.tipo_cambio2;
                                            parameters.Add("@fecha_entrega2", OdbcType.Date).Value = nuevoCuadro.fecha_entrega2;
                                            parameters.Add("@lab2", OdbcType.Numeric).Value = nuevoCuadro.lab2 ?? (object)DBNull.Value;
                                            parameters.Add("@dias_pago2", OdbcType.Numeric).Value = nuevoCuadro.dias_pago2 ?? (object)DBNull.Value;

                                            parameters.Add("@prov3", OdbcType.Numeric).Value = nuevoCuadro.prov3 ?? (object)DBNull.Value;
                                            parameters.Add("@porcent_dcto3", OdbcType.Numeric).Value = nuevoCuadro.porcent_dcto3;
                                            parameters.Add("@porcent_iva3", OdbcType.Numeric).Value = nuevoCuadro.porcent_iva3;
                                            parameters.Add("@dcto3", OdbcType.Numeric).Value = nuevoCuadro.dcto3;
                                            parameters.Add("@iva3", OdbcType.Numeric).Value = nuevoCuadro.iva3;
                                            parameters.Add("@total3", OdbcType.Numeric).Value = nuevoCuadro.total3;
                                            parameters.Add("@tipo_cambio3", OdbcType.Numeric).Value = nuevoCuadro.tipo_cambio3;
                                            parameters.Add("@fecha_entrega3", OdbcType.Date).Value = nuevoCuadro.fecha_entrega3;
                                            parameters.Add("@lab3", OdbcType.Numeric).Value = nuevoCuadro.lab3 ?? (object)DBNull.Value;
                                            parameters.Add("@dias_pago3", OdbcType.Numeric).Value = nuevoCuadro.dias_pago3 ?? (object)DBNull.Value;

                                            parameters.Add("@solicito", OdbcType.Numeric).Value = nuevoCuadro.solicito;

                                            parameters.Add("@sub_total1", OdbcType.Numeric).Value = nuevoCuadro.sub_total1;
                                            parameters.Add("@sub_total2", OdbcType.Numeric).Value = nuevoCuadro.sub_total2;
                                            parameters.Add("@sub_total3", OdbcType.Numeric).Value = nuevoCuadro.sub_total3;

                                            parameters.Add("@fletes1", OdbcType.Numeric).Value = nuevoCuadro.fletes1;
                                            parameters.Add("@fletes2", OdbcType.Numeric).Value = nuevoCuadro.fletes2;
                                            parameters.Add("@fletes3", OdbcType.Numeric).Value = nuevoCuadro.fletes3;

                                            parameters.Add("@gastos_imp1", OdbcType.Numeric).Value = nuevoCuadro.gastos_imp1;
                                            parameters.Add("@gastos_imp2", OdbcType.Numeric).Value = nuevoCuadro.gastos_imp2;
                                            parameters.Add("@gastos_imp3", OdbcType.Numeric).Value = nuevoCuadro.gastos_imp3;

                                            parameters.Add("@nombre_prov1", OdbcType.VarChar).Value = nuevoCuadro.nombre_prov1 ?? (object)DBNull.Value;
                                            parameters.Add("@nombre_prov2", OdbcType.VarChar).Value = nuevoCuadro.nombre_prov2 ?? (object)DBNull.Value;
                                            parameters.Add("@nombre_prov3", OdbcType.VarChar).Value = nuevoCuadro.nombre_prov3 ?? (object)DBNull.Value;

                                            parameters.Add("@moneda1", OdbcType.Char).Value = nuevoCuadro.moneda1 ?? (object)DBNull.Value;
                                            parameters.Add("@moneda2", OdbcType.Char).Value = nuevoCuadro.moneda2 ?? (object)DBNull.Value;
                                            parameters.Add("@moneda3", OdbcType.Char).Value = nuevoCuadro.moneda3 ?? (object)DBNull.Value;

                                            parameters.Add("@observaciones1", OdbcType.Char).Value = nuevoCuadro.comentarios1 ?? (object)DBNull.Value;
                                            parameters.Add("@observaciones2", OdbcType.Char).Value = nuevoCuadro.comentarios2 ?? (object)DBNull.Value;
                                            parameters.Add("@observaciones3", OdbcType.Char).Value = nuevoCuadro.comentarios3 ?? (object)DBNull.Value;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }
                                        #endregion

                                        #region Detalle
                                        foreach (var det in nuevoCuadro.detalleCuadro)
                                        {
                                            using (var cmd = new OdbcCommand(@"INSERT INTO DBA.so_cuadro_comparativo_det (cc, numero, folio, partida, insumo, cantidad, precio1, precio2, precio3, proveedor_uc, oc_uc, fecha_uc, precio_uc) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)"))
                                            {
                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                parameters.Add("@cc", OdbcType.Char).Value = det.cc;
                                                parameters.Add("@numero", OdbcType.Char).Value = det.numero;
                                                parameters.Add("@folio", OdbcType.Char).Value = det.folio;
                                                parameters.Add("@partida", OdbcType.Char).Value = det.partida;
                                                parameters.Add("@insumo", OdbcType.Char).Value = det.insumo;
                                                parameters.Add("@cantidad", OdbcType.Char).Value = det.cantidad;
                                                parameters.Add("@precio1", OdbcType.Char).Value = det.precio1;
                                                parameters.Add("@precio2", OdbcType.Char).Value = det.precio2;
                                                parameters.Add("@precio3", OdbcType.Char).Value = det.precio3;
                                                parameters.Add("@proveedor_uc", OdbcType.Char).Value = det.proveedor_uc ?? (object)DBNull.Value;
                                                parameters.Add("@oc_uc", OdbcType.Char).Value = det.oc_uc ?? (object)DBNull.Value;
                                                parameters.Add("@fecha_uc", OdbcType.Date).Value = det.fecha_uc ?? (object)DBNull.Value;
                                                parameters.Add("@precio_uc", OdbcType.Char).Value = det.precio_uc ?? (object)DBNull.Value;

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;

                                                count += cmd.ExecuteNonQuery();
                                            }
                                        }
                                        #endregion
                                        #endregion

                                        //cuadroComparativoFS.GuardarConfiabilidad(nuevoCuadro);
                                        #endregion
                                        break;
                                    }
                                default:
                                    {
                                        #region RESTO EMPRESAS
                                        #region SIGOPLAN
                                        #region General

                                        cuadroSIGOPLAN.cc = nuevoCuadro.cc;
                                        cuadroSIGOPLAN.numero = nuevoCuadro.numero;
                                        cuadroSIGOPLAN.folio = nuevoCuadro.folio;
                                        cuadroSIGOPLAN.fecha = DateTime.Now;

                                        cuadroSIGOPLAN.prov1 = nuevoCuadro.prov1 ?? 0;
                                        cuadroSIGOPLAN.porcent_dcto1 = nuevoCuadro.porcent_dcto1;
                                        cuadroSIGOPLAN.porcent_iva1 = nuevoCuadro.porcent_iva1;
                                        cuadroSIGOPLAN.dcto1 = nuevoCuadro.dcto1;
                                        cuadroSIGOPLAN.iva1 = nuevoCuadro.iva1;
                                        cuadroSIGOPLAN.total1 = nuevoCuadro.total1;
                                        cuadroSIGOPLAN.tipo_cambio1 = nuevoCuadro.tipo_cambio1;
                                        cuadroSIGOPLAN.fecha_entrega1 = nuevoCuadro.fecha_entrega1;
                                        cuadroSIGOPLAN.lab1 = nuevoCuadro.lab1 ?? 0;
                                        cuadroSIGOPLAN.dias_pago1 = nuevoCuadro.dias_pago1 ?? 0;

                                        cuadroSIGOPLAN.prov2 = nuevoCuadro.prov2 ?? 0;
                                        cuadroSIGOPLAN.porcent_dcto2 = nuevoCuadro.porcent_dcto2;
                                        cuadroSIGOPLAN.porcent_iva2 = nuevoCuadro.porcent_iva2;
                                        cuadroSIGOPLAN.dcto2 = nuevoCuadro.dcto2;
                                        cuadroSIGOPLAN.iva2 = nuevoCuadro.iva2;
                                        cuadroSIGOPLAN.total2 = nuevoCuadro.total2;
                                        cuadroSIGOPLAN.tipo_cambio2 = nuevoCuadro.tipo_cambio2;
                                        cuadroSIGOPLAN.fecha_entrega2 = nuevoCuadro.fecha_entrega2;
                                        cuadroSIGOPLAN.lab2 = nuevoCuadro.lab2 ?? 0;
                                        cuadroSIGOPLAN.dias_pago2 = nuevoCuadro.dias_pago2 ?? 0;

                                        cuadroSIGOPLAN.prov3 = nuevoCuadro.prov3 ?? 0;
                                        cuadroSIGOPLAN.porcent_dcto3 = nuevoCuadro.porcent_dcto3;
                                        cuadroSIGOPLAN.porcent_iva3 = nuevoCuadro.porcent_iva3;
                                        cuadroSIGOPLAN.dcto3 = nuevoCuadro.dcto3;
                                        cuadroSIGOPLAN.iva3 = nuevoCuadro.iva3;
                                        cuadroSIGOPLAN.total3 = nuevoCuadro.total3;
                                        cuadroSIGOPLAN.tipo_cambio3 = nuevoCuadro.tipo_cambio3;
                                        cuadroSIGOPLAN.fecha_entrega3 = nuevoCuadro.fecha_entrega3;
                                        cuadroSIGOPLAN.lab3 = nuevoCuadro.lab3 ?? 0;
                                        cuadroSIGOPLAN.dias_pago3 = nuevoCuadro.dias_pago3 ?? 0;

                                        cuadroSIGOPLAN.solicito = nuevoCuadro.solicito;

                                        cuadroSIGOPLAN.sub_total1 = nuevoCuadro.sub_total1;
                                        cuadroSIGOPLAN.sub_total2 = nuevoCuadro.sub_total2;
                                        cuadroSIGOPLAN.sub_total3 = nuevoCuadro.sub_total3;

                                        cuadroSIGOPLAN.fletes1 = nuevoCuadro.fletes1;
                                        cuadroSIGOPLAN.fletes2 = nuevoCuadro.fletes2;
                                        cuadroSIGOPLAN.fletes3 = nuevoCuadro.fletes3;

                                        cuadroSIGOPLAN.gastos_imp1 = nuevoCuadro.gastos_imp1;
                                        cuadroSIGOPLAN.gastos_imp2 = nuevoCuadro.gastos_imp2;
                                        cuadroSIGOPLAN.gastos_imp3 = nuevoCuadro.gastos_imp3;

                                        cuadroSIGOPLAN.nombre_prov1 = nuevoCuadro.nombre_prov1 ?? "";
                                        cuadroSIGOPLAN.nombre_prov2 = nuevoCuadro.nombre_prov2 ?? "";
                                        cuadroSIGOPLAN.nombre_prov3 = nuevoCuadro.nombre_prov3 ?? "";

                                        cuadroSIGOPLAN.moneda1 = nuevoCuadro.moneda1 ?? 0;
                                        cuadroSIGOPLAN.moneda2 = nuevoCuadro.moneda2 ?? 0;
                                        cuadroSIGOPLAN.moneda3 = nuevoCuadro.moneda3 ?? 0;

                                        cuadroSIGOPLAN.inslic = nuevoCuadro.inslic;
                                        cuadroSIGOPLAN.inslic_fecha_ini = nuevoCuadro.inslic_fecha_ini;
                                        cuadroSIGOPLAN.inslic_fecha_fin = nuevoCuadro.inslic_fecha_fin;

                                        cuadroSIGOPLAN.comentarios1 = nuevoCuadro.comentarios1 ?? "";
                                        cuadroSIGOPLAN.comentarios2 = nuevoCuadro.comentarios2 ?? "";
                                        cuadroSIGOPLAN.comentarios3 = nuevoCuadro.comentarios3 ?? "";

                                        cuadroSIGOPLAN.usuarioCreacion_id = vSesiones.sesionUsuarioDTO.id;
                                        cuadroSIGOPLAN.fechaCreacion = DateTime.Now;
                                        cuadroSIGOPLAN.usuarioModificacion_id = 0;
                                        cuadroSIGOPLAN.fechaModificacion = null;
                                        cuadroSIGOPLAN.registroActivo = true;

                                        _context.tblCom_CuadroComparativo.Add(cuadroSIGOPLAN);
                                        _context.SaveChanges();
                                        #endregion

                                        #region Detalle
                                        foreach (var detalle in nuevoCuadro.detalleCuadro)
                                        {
                                            var cuadroDetalleSIGOPLAN = new tblCom_CuadroComparativoDet();

                                            cuadroDetalleSIGOPLAN.cc = detalle.cc;
                                            cuadroDetalleSIGOPLAN.numero = detalle.numero;
                                            cuadroDetalleSIGOPLAN.folio = Int32.Parse(detalle.folio);
                                            cuadroDetalleSIGOPLAN.partida = detalle.partida;
                                            cuadroDetalleSIGOPLAN.insumo = detalle.insumo;
                                            cuadroDetalleSIGOPLAN.cantidad = detalle.cantidad;
                                            cuadroDetalleSIGOPLAN.precio1 = detalle.precio1;
                                            cuadroDetalleSIGOPLAN.precio2 = detalle.precio2;
                                            cuadroDetalleSIGOPLAN.precio3 = detalle.precio3;
                                            cuadroDetalleSIGOPLAN.proveedor_uc = detalle.proveedor_uc;
                                            cuadroDetalleSIGOPLAN.oc_uc = detalle.oc_uc;
                                            cuadroDetalleSIGOPLAN.fecha_uc = detalle.fecha_uc;
                                            cuadroDetalleSIGOPLAN.precio_uc = detalle.precio_uc;
                                            cuadroDetalleSIGOPLAN.usuarioCreacion_id = vSesiones.sesionUsuarioDTO.id;
                                            cuadroDetalleSIGOPLAN.fechaCreacion = DateTime.Now;
                                            cuadroDetalleSIGOPLAN.usuarioModificacion_id = 0;
                                            cuadroDetalleSIGOPLAN.fechaModificacion = null;
                                            cuadroDetalleSIGOPLAN.registroActivo = true;

                                            _context.tblCom_CuadroComparativoDet.Add(cuadroDetalleSIGOPLAN);
                                            _context.SaveChanges();
                                        }
                                        #endregion
                                        #endregion

                                        #region Enkontrol
                                        var count = 0;

                                        #region General
                                        using (var cmd = new OdbcCommand(@"
                                INSERT INTO so_cuadro_comparativo (cc, numero, folio, fecha, prov1, porcent_dcto1, porcent_iva1, dcto1, iva1, total1, tipo_cambio1, fecha_entrega1, lab1, dias_pago1, 
                                    prov2, porcent_dcto2, porcent_iva2, dcto2, iva2, total2, tipo_cambio2, fecha_entrega2, lab2, dias_pago2, prov3, porcent_dcto3, porcent_iva3, dcto3, iva3, total3, tipo_cambio3, fecha_entrega3, lab3, dias_pago3, 
                                    solicito, sub_total1, sub_total2, sub_total3, fletes1, fletes2, fletes3, gastos_imp1, gastos_imp2, gastos_imp3, nombre_prov1, nombre_prov2, nombre_prov3, moneda1, moneda2, moneda3, 
                                    inslic, inslic_fecha_ini, inslic_fecha_fin, comentarios1, comentarios2, comentarios3) 
                                VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@cc", OdbcType.Char).Value = nuevoCuadro.cc;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = nuevoCuadro.numero;
                                            parameters.Add("@folio", OdbcType.Numeric).Value = nuevoCuadro.folio;
                                            parameters.Add("@fecha", OdbcType.Date).Value = DateTime.Now;

                                            parameters.Add("@prov1", OdbcType.Numeric).Value = nuevoCuadro.prov1 ?? (object)DBNull.Value;
                                            parameters.Add("@porcent_dcto1", OdbcType.Numeric).Value = nuevoCuadro.porcent_dcto1;
                                            parameters.Add("@porcent_iva1", OdbcType.Numeric).Value = nuevoCuadro.porcent_iva1;
                                            parameters.Add("@dcto1", OdbcType.Numeric).Value = nuevoCuadro.dcto1;
                                            parameters.Add("@iva1", OdbcType.Numeric).Value = nuevoCuadro.iva1;
                                            parameters.Add("@total1", OdbcType.Numeric).Value = nuevoCuadro.total1;
                                            parameters.Add("@tipo_cambio1", OdbcType.Numeric).Value = nuevoCuadro.tipo_cambio1;
                                            parameters.Add("@fecha_entrega1", OdbcType.Date).Value = nuevoCuadro.fecha_entrega1;
                                            parameters.Add("@lab1", OdbcType.Numeric).Value = nuevoCuadro.lab1 ?? (object)DBNull.Value;
                                            parameters.Add("@dias_pago1", OdbcType.Numeric).Value = nuevoCuadro.dias_pago1 ?? (object)DBNull.Value;

                                            parameters.Add("@prov2", OdbcType.Numeric).Value = nuevoCuadro.prov2 ?? (object)DBNull.Value;
                                            parameters.Add("@porcent_dcto2", OdbcType.Numeric).Value = nuevoCuadro.porcent_dcto2;
                                            parameters.Add("@porcent_iva2", OdbcType.Numeric).Value = nuevoCuadro.porcent_iva2;
                                            parameters.Add("@dcto2", OdbcType.Numeric).Value = nuevoCuadro.dcto2;
                                            parameters.Add("@iva2", OdbcType.Numeric).Value = nuevoCuadro.iva2;
                                            parameters.Add("@total2", OdbcType.Numeric).Value = nuevoCuadro.total2;
                                            parameters.Add("@tipo_cambio2", OdbcType.Numeric).Value = nuevoCuadro.tipo_cambio2;
                                            parameters.Add("@fecha_entrega2", OdbcType.Date).Value = nuevoCuadro.fecha_entrega2;
                                            parameters.Add("@lab2", OdbcType.Numeric).Value = nuevoCuadro.lab2 ?? (object)DBNull.Value;
                                            parameters.Add("@dias_pago2", OdbcType.Numeric).Value = nuevoCuadro.dias_pago2 ?? (object)DBNull.Value;

                                            parameters.Add("@prov3", OdbcType.Numeric).Value = nuevoCuadro.prov3 ?? (object)DBNull.Value;
                                            parameters.Add("@porcent_dcto3", OdbcType.Numeric).Value = nuevoCuadro.porcent_dcto3;
                                            parameters.Add("@porcent_iva3", OdbcType.Numeric).Value = nuevoCuadro.porcent_iva3;
                                            parameters.Add("@dcto3", OdbcType.Numeric).Value = nuevoCuadro.dcto3;
                                            parameters.Add("@iva3", OdbcType.Numeric).Value = nuevoCuadro.iva3;
                                            parameters.Add("@total3", OdbcType.Numeric).Value = nuevoCuadro.total3;
                                            parameters.Add("@tipo_cambio3", OdbcType.Numeric).Value = nuevoCuadro.tipo_cambio3;
                                            parameters.Add("@fecha_entrega3", OdbcType.Date).Value = nuevoCuadro.fecha_entrega3;
                                            parameters.Add("@lab3", OdbcType.Numeric).Value = nuevoCuadro.lab3 ?? (object)DBNull.Value;
                                            parameters.Add("@dias_pago3", OdbcType.Numeric).Value = nuevoCuadro.dias_pago3 ?? (object)DBNull.Value;

                                            parameters.Add("@solicito", OdbcType.Numeric).Value = nuevoCuadro.solicito;

                                            parameters.Add("@sub_total1", OdbcType.Numeric).Value = nuevoCuadro.sub_total1;
                                            parameters.Add("@sub_total2", OdbcType.Numeric).Value = nuevoCuadro.sub_total2;
                                            parameters.Add("@sub_total3", OdbcType.Numeric).Value = nuevoCuadro.sub_total3;

                                            parameters.Add("@fletes1", OdbcType.Numeric).Value = nuevoCuadro.fletes1;
                                            parameters.Add("@fletes2", OdbcType.Numeric).Value = nuevoCuadro.fletes2;
                                            parameters.Add("@fletes3", OdbcType.Numeric).Value = nuevoCuadro.fletes3;

                                            parameters.Add("@gastos_imp1", OdbcType.Numeric).Value = nuevoCuadro.gastos_imp1;
                                            parameters.Add("@gastos_imp2", OdbcType.Numeric).Value = nuevoCuadro.gastos_imp2;
                                            parameters.Add("@gastos_imp3", OdbcType.Numeric).Value = nuevoCuadro.gastos_imp3;

                                            parameters.Add("@nombre_prov1", OdbcType.VarChar).Value = nuevoCuadro.nombre_prov1 ?? (object)DBNull.Value;
                                            parameters.Add("@nombre_prov2", OdbcType.VarChar).Value = nuevoCuadro.nombre_prov2 ?? (object)DBNull.Value;
                                            parameters.Add("@nombre_prov3", OdbcType.VarChar).Value = nuevoCuadro.nombre_prov3 ?? (object)DBNull.Value;

                                            parameters.Add("@moneda1", OdbcType.Char).Value = nuevoCuadro.moneda1 ?? (object)DBNull.Value;
                                            parameters.Add("@moneda2", OdbcType.Char).Value = nuevoCuadro.moneda2 ?? (object)DBNull.Value;
                                            parameters.Add("@moneda3", OdbcType.Char).Value = nuevoCuadro.moneda3 ?? (object)DBNull.Value;

                                            parameters.Add("@inslic", OdbcType.Bit).Value = nuevoCuadro.inslic;
                                            parameters.Add("@inslic_fecha_ini", OdbcType.Date).Value = nuevoCuadro.inslic_fecha_ini ?? (object)DBNull.Value;
                                            parameters.Add("@inslic_fecha_fin", OdbcType.Date).Value = nuevoCuadro.inslic_fecha_fin ?? (object)DBNull.Value;

                                            parameters.Add("@comentarios1", OdbcType.Char).Value = nuevoCuadro.comentarios1 ?? (object)DBNull.Value;
                                            parameters.Add("@comentarios2", OdbcType.Char).Value = nuevoCuadro.comentarios2 ?? (object)DBNull.Value;
                                            parameters.Add("@comentarios3", OdbcType.Char).Value = nuevoCuadro.comentarios3 ?? (object)DBNull.Value;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }
                                        #endregion

                                        #region Detalle
                                        foreach (var det in nuevoCuadro.detalleCuadro)
                                        {
                                            using (var cmd = new OdbcCommand(@"INSERT INTO so_cuadro_comparativo_det (cc, numero, folio, partida, insumo, cantidad, precio1, precio2, precio3, proveedor_uc, oc_uc, fecha_uc, precio_uc) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)"))
                                            {
                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                parameters.Add("@cc", OdbcType.Char).Value = det.cc;
                                                parameters.Add("@numero", OdbcType.Char).Value = det.numero;
                                                parameters.Add("@folio", OdbcType.Char).Value = det.folio;
                                                parameters.Add("@partida", OdbcType.Char).Value = det.partida;
                                                parameters.Add("@insumo", OdbcType.Char).Value = det.insumo;
                                                parameters.Add("@cantidad", OdbcType.Char).Value = det.cantidad;
                                                parameters.Add("@precio1", OdbcType.Char).Value = det.precio1;
                                                parameters.Add("@precio2", OdbcType.Char).Value = det.precio2;
                                                parameters.Add("@precio3", OdbcType.Char).Value = det.precio3;
                                                parameters.Add("@proveedor_uc", OdbcType.Char).Value = det.proveedor_uc ?? (object)DBNull.Value;
                                                parameters.Add("@oc_uc", OdbcType.Char).Value = det.oc_uc ?? (object)DBNull.Value;
                                                parameters.Add("@fecha_uc", OdbcType.Date).Value = det.fecha_uc ?? (object)DBNull.Value;
                                                parameters.Add("@precio_uc", OdbcType.Char).Value = det.precio_uc ?? (object)DBNull.Value;

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;

                                                count += cmd.ExecuteNonQuery();
                                            }
                                        }
                                        #endregion
                                        #endregion

                                        cuadroComparativoFS.GuardarConfiabilidad(nuevoCuadro);
                                        #endregion
                                        break;
                                    }
                            }

                            trans.Commit();
                            dbSigoplanTransaction.Commit();

                            resultado.Add(SUCCESS, true);
                            SaveBitacora(4, (int)AccionEnum.AGREGAR, cuadroSIGOPLAN.id, JsonUtils.convertNetObjectToJson(new { nuevoCuadro = nuevoCuadro }));
                        }
                        catch (Exception e)
                        {
                            trans.Rollback();
                            dbSigoplanTransaction.Rollback();

                            LogError(4, 0, "OrdenCompraController", "GuardarNuevoCuadro", e, AccionEnum.AGREGAR, 0, new { nuevoCuadro = nuevoCuadro });

                            resultado.Add(MESSAGE, e.Message);
                            resultado.Add(SUCCESS, false);
                        }
                    }
                }
            }

            return resultado;
        }

        public Dictionary<string, object> UpdateCuadro(CuadroComparativoDTO cuadro)
        {
            var resultado = new Dictionary<string, object>();

            switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
            {
                case EmpresaEnum.Peru:
                    {
                        #region PERU
                        using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                        {
                            try
                            {

                                string PERU_tipoCompra = "";
                                if (HttpContext.Current.Session["servicioCompraCuadroComparativo"] != null)
                                {
                                    if (!(bool)HttpContext.Current.Session["servicioCompraCuadroComparativo"]) //Vista Generar Compra
                                    {
                                        PERU_tipoCompra = "RQ";
                                    }
                                    else //Vista Generar Compra Servicio
                                    {
                                        PERU_tipoCompra = "RS";
                                    }
                                }

                                var cuadroSIGOPLAN = _context.tblCom_CuadroComparativo.FirstOrDefault(x => x.registroActivo && x.cc == cuadro.cc && x.numero == cuadro.numero && x.folio == cuadro.folio && x.PERU_tipoCuadro == PERU_tipoCompra);

                                #region PERU
                                #region SIGOPLAN
                                if (cuadroSIGOPLAN != null)
                                {
                                    #region General
                                    cuadroSIGOPLAN.prov1 = cuadro.prov1 ?? 0;
                                    cuadroSIGOPLAN.porcent_dcto1 = cuadro.porcent_dcto1;
                                    cuadroSIGOPLAN.porcent_iva1 = cuadro.porcent_iva1;
                                    cuadroSIGOPLAN.dcto1 = cuadro.dcto1;
                                    cuadroSIGOPLAN.iva1 = cuadro.iva1;
                                    cuadroSIGOPLAN.total1 = cuadro.total1;
                                    cuadroSIGOPLAN.tipo_cambio1 = cuadro.tipo_cambio1;
                                    cuadroSIGOPLAN.fecha_entrega1 = cuadro.fecha_entrega1;
                                    cuadroSIGOPLAN.lab1 = cuadro.lab1 ?? 0;
                                    cuadroSIGOPLAN.dias_pago1 = cuadro.dias_pago1 ?? 0;

                                    cuadroSIGOPLAN.prov2 = cuadro.prov2 ?? 0;
                                    cuadroSIGOPLAN.porcent_dcto2 = cuadro.porcent_dcto2;
                                    cuadroSIGOPLAN.porcent_iva2 = cuadro.porcent_iva2;
                                    cuadroSIGOPLAN.dcto2 = cuadro.dcto2;
                                    cuadroSIGOPLAN.iva2 = cuadro.iva2;
                                    cuadroSIGOPLAN.total2 = cuadro.total2;
                                    cuadroSIGOPLAN.tipo_cambio2 = cuadro.tipo_cambio2;
                                    cuadroSIGOPLAN.fecha_entrega2 = cuadro.fecha_entrega2;
                                    cuadroSIGOPLAN.lab2 = cuadro.lab2 ?? 0;
                                    cuadroSIGOPLAN.dias_pago2 = cuadro.dias_pago2 ?? 0;

                                    cuadroSIGOPLAN.prov3 = cuadro.prov3 ?? 0;
                                    cuadroSIGOPLAN.porcent_dcto3 = cuadro.porcent_dcto3;
                                    cuadroSIGOPLAN.porcent_iva3 = cuadro.porcent_iva3;
                                    cuadroSIGOPLAN.dcto3 = cuadro.dcto3;
                                    cuadroSIGOPLAN.iva3 = cuadro.iva3;
                                    cuadroSIGOPLAN.total3 = cuadro.total3;
                                    cuadroSIGOPLAN.tipo_cambio3 = cuadro.tipo_cambio3;
                                    cuadroSIGOPLAN.fecha_entrega3 = cuadro.fecha_entrega3;
                                    cuadroSIGOPLAN.lab3 = cuadro.lab3 ?? 0;
                                    cuadroSIGOPLAN.dias_pago3 = cuadro.dias_pago3 ?? 0;

                                    cuadroSIGOPLAN.solicito = cuadro.solicito;

                                    cuadroSIGOPLAN.sub_total1 = cuadro.sub_total1;
                                    cuadroSIGOPLAN.sub_total2 = cuadro.sub_total2;
                                    cuadroSIGOPLAN.sub_total3 = cuadro.sub_total3;

                                    cuadroSIGOPLAN.fletes1 = cuadro.fletes1;
                                    cuadroSIGOPLAN.fletes2 = cuadro.fletes2;
                                    cuadroSIGOPLAN.fletes3 = cuadro.fletes3;

                                    cuadroSIGOPLAN.gastos_imp1 = cuadro.gastos_imp1;
                                    cuadroSIGOPLAN.gastos_imp2 = cuadro.gastos_imp2;
                                    cuadroSIGOPLAN.gastos_imp3 = cuadro.gastos_imp3;

                                    cuadroSIGOPLAN.nombre_prov1 = cuadro.nombre_prov1 ?? "";
                                    cuadroSIGOPLAN.nombre_prov2 = cuadro.nombre_prov2 ?? "";
                                    cuadroSIGOPLAN.nombre_prov3 = cuadro.nombre_prov3 ?? "";

                                    cuadroSIGOPLAN.moneda1 = cuadro.moneda1 ?? 0;
                                    cuadroSIGOPLAN.moneda2 = cuadro.moneda2 ?? 0;
                                    cuadroSIGOPLAN.moneda3 = cuadro.moneda3 ?? 0;

                                    cuadroSIGOPLAN.inslic = cuadro.inslic;
                                    cuadroSIGOPLAN.inslic_fecha_ini = cuadro.inslic_fecha_ini;
                                    cuadroSIGOPLAN.inslic_fecha_fin = cuadro.inslic_fecha_fin;

                                    cuadroSIGOPLAN.comentarios1 = cuadro.comentarios1 ?? "";
                                    cuadroSIGOPLAN.comentarios2 = cuadro.comentarios2 ?? "";
                                    cuadroSIGOPLAN.comentarios3 = cuadro.comentarios3 ?? "";

                                    cuadroSIGOPLAN.usuarioModificacion_id = vSesiones.sesionUsuarioDTO.id;
                                    cuadroSIGOPLAN.fechaModificacion = DateTime.Now;

                                    cuadroSIGOPLAN.PERU_prov1 = cuadro.PERU_prov1;
                                    cuadroSIGOPLAN.PERU_prov2 = cuadro.PERU_prov2;
                                    cuadroSIGOPLAN.PERU_prov3 = cuadro.PERU_prov3;

                                    cuadroSIGOPLAN.PERU_tipoCuadro = PERU_tipoCompra;

                                    _context.SaveChanges();
                                    #endregion

                                    #region Detalle
                                    var cuadroDetalleSIGOPLAN = _context.tblCom_CuadroComparativoDet.Where(x => x.registroActivo && x.cc == cuadro.cc && x.numero == cuadro.numero && x.folio == cuadro.folio && x.PERU_tipoCuadro == PERU_tipoCompra).ToList();

                                    foreach (var detalle in cuadro.detalleCuadro)
                                    {
                                        var detalleSIGOPLAN = cuadroDetalleSIGOPLAN.FirstOrDefault(x => x.partida == detalle.partida);

                                        if (detalleSIGOPLAN != null)
                                        {
                                            detalleSIGOPLAN.precio1 = detalle.precio1;
                                            detalleSIGOPLAN.precio2 = detalle.precio2;
                                            detalleSIGOPLAN.precio3 = detalle.precio3;
                                            detalleSIGOPLAN.proveedor_uc = detalle.proveedor_uc ?? 0;
                                            detalleSIGOPLAN.oc_uc = detalle.oc_uc ?? 0;
                                            detalleSIGOPLAN.fecha_uc = detalle.fecha_uc;
                                            detalleSIGOPLAN.precio_uc = detalle.precio_uc ?? 0;
                                            detalleSIGOPLAN.usuarioModificacion_id = vSesiones.sesionUsuarioDTO.id;
                                            detalleSIGOPLAN.fechaModificacion = DateTime.Now;
                                            detalleSIGOPLAN.PERU_tipoCuadro = cuadroSIGOPLAN.PERU_tipoCuadro;

                                            _context.SaveChanges();
                                        }
                                    }
                                    #endregion
                                }
                                #endregion
                                #endregion

                                cuadroComparativoFS.GuardarConfiabilidad(cuadro);

                                dbSigoplanTransaction.Commit();

                                resultado.Add(SUCCESS, true);
                                SaveBitacora(4, (int)AccionEnum.ACTUALIZAR, cuadroSIGOPLAN.id, JsonUtils.convertNetObjectToJson(new { cuadro = cuadro }));
                            }
                            catch (Exception e)
                            {
                                dbSigoplanTransaction.Rollback();

                                LogError(4, 0, "OrdenCompraController", "UpdateCuadro", e, AccionEnum.ACTUALIZAR, 0, new { cuadro = cuadro });

                                resultado.Add(MESSAGE, e.Message);
                                resultado.Add(SUCCESS, false);
                            }
                        }
                        #endregion
                        break;
                    }
                case EmpresaEnum.Colombia:
                    {
                        #region COLOMBIA LISTO
                        using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                        {
                            using (var con = checkConexionProductivo())
                            {
                                using (var trans = con.BeginTransaction())
                                {
                                    try
                                    {
                                        var cuadroSIGOPLAN = _context.tblCom_CuadroComparativo.FirstOrDefault(x => x.registroActivo && x.cc == cuadro.cc && x.numero == cuadro.numero && x.folio == cuadro.folio);

                                        #region RESTO EMPRESAS
                                        #region SIGOPLAN
                                        if (cuadroSIGOPLAN != null)
                                        {
                                            #region General
                                            cuadroSIGOPLAN.prov1 = cuadro.prov1 ?? 0;
                                            cuadroSIGOPLAN.porcent_dcto1 = cuadro.porcent_dcto1;
                                            cuadroSIGOPLAN.porcent_iva1 = cuadro.porcent_iva1;
                                            cuadroSIGOPLAN.dcto1 = cuadro.dcto1;
                                            cuadroSIGOPLAN.iva1 = cuadro.iva1;
                                            cuadroSIGOPLAN.total1 = cuadro.total1;
                                            cuadroSIGOPLAN.tipo_cambio1 = cuadro.tipo_cambio1;
                                            cuadroSIGOPLAN.fecha_entrega1 = cuadro.fecha_entrega1;
                                            cuadroSIGOPLAN.lab1 = cuadro.lab1 ?? 0;
                                            cuadroSIGOPLAN.dias_pago1 = cuadro.dias_pago1 ?? 0;

                                            cuadroSIGOPLAN.prov2 = cuadro.prov2 ?? 0;
                                            cuadroSIGOPLAN.porcent_dcto2 = cuadro.porcent_dcto2;
                                            cuadroSIGOPLAN.porcent_iva2 = cuadro.porcent_iva2;
                                            cuadroSIGOPLAN.dcto2 = cuadro.dcto2;
                                            cuadroSIGOPLAN.iva2 = cuadro.iva2;
                                            cuadroSIGOPLAN.total2 = cuadro.total2;
                                            cuadroSIGOPLAN.tipo_cambio2 = cuadro.tipo_cambio2;
                                            cuadroSIGOPLAN.fecha_entrega2 = cuadro.fecha_entrega2;
                                            cuadroSIGOPLAN.lab2 = cuadro.lab2 ?? 0;
                                            cuadroSIGOPLAN.dias_pago2 = cuadro.dias_pago2 ?? 0;

                                            cuadroSIGOPLAN.prov3 = cuadro.prov3 ?? 0;
                                            cuadroSIGOPLAN.porcent_dcto3 = cuadro.porcent_dcto3;
                                            cuadroSIGOPLAN.porcent_iva3 = cuadro.porcent_iva3;
                                            cuadroSIGOPLAN.dcto3 = cuadro.dcto3;
                                            cuadroSIGOPLAN.iva3 = cuadro.iva3;
                                            cuadroSIGOPLAN.total3 = cuadro.total3;
                                            cuadroSIGOPLAN.tipo_cambio3 = cuadro.tipo_cambio3;
                                            cuadroSIGOPLAN.fecha_entrega3 = cuadro.fecha_entrega3;
                                            cuadroSIGOPLAN.lab3 = cuadro.lab3 ?? 0;
                                            cuadroSIGOPLAN.dias_pago3 = cuadro.dias_pago3 ?? 0;

                                            cuadroSIGOPLAN.solicito = cuadro.solicito;

                                            cuadroSIGOPLAN.sub_total1 = cuadro.sub_total1;
                                            cuadroSIGOPLAN.sub_total2 = cuadro.sub_total2;
                                            cuadroSIGOPLAN.sub_total3 = cuadro.sub_total3;

                                            cuadroSIGOPLAN.fletes1 = cuadro.fletes1;
                                            cuadroSIGOPLAN.fletes2 = cuadro.fletes2;
                                            cuadroSIGOPLAN.fletes3 = cuadro.fletes3;

                                            cuadroSIGOPLAN.gastos_imp1 = cuadro.gastos_imp1;
                                            cuadroSIGOPLAN.gastos_imp2 = cuadro.gastos_imp2;
                                            cuadroSIGOPLAN.gastos_imp3 = cuadro.gastos_imp3;

                                            cuadroSIGOPLAN.nombre_prov1 = cuadro.nombre_prov1 ?? "";
                                            cuadroSIGOPLAN.nombre_prov2 = cuadro.nombre_prov2 ?? "";
                                            cuadroSIGOPLAN.nombre_prov3 = cuadro.nombre_prov3 ?? "";

                                            cuadroSIGOPLAN.moneda1 = cuadro.moneda1 ?? 0;
                                            cuadroSIGOPLAN.moneda2 = cuadro.moneda2 ?? 0;
                                            cuadroSIGOPLAN.moneda3 = cuadro.moneda3 ?? 0;

                                            cuadroSIGOPLAN.inslic = cuadro.inslic;
                                            cuadroSIGOPLAN.inslic_fecha_ini = cuadro.inslic_fecha_ini;
                                            cuadroSIGOPLAN.inslic_fecha_fin = cuadro.inslic_fecha_fin;

                                            cuadroSIGOPLAN.comentarios1 = cuadro.comentarios1 ?? "";
                                            cuadroSIGOPLAN.comentarios2 = cuadro.comentarios2 ?? "";
                                            cuadroSIGOPLAN.comentarios3 = cuadro.comentarios3 ?? "";

                                            cuadroSIGOPLAN.usuarioModificacion_id = vSesiones.sesionUsuarioDTO.id;
                                            cuadroSIGOPLAN.fechaModificacion = DateTime.Now;

                                            _context.SaveChanges();
                                            #endregion

                                            #region Detalle
                                            var cuadroDetalleSIGOPLAN = _context.tblCom_CuadroComparativoDet.Where(x => x.registroActivo && x.cc == cuadro.cc && x.numero == cuadro.numero && x.folio == cuadro.folio).ToList();

                                            foreach (var detalle in cuadro.detalleCuadro)
                                            {
                                                var detalleSIGOPLAN = cuadroDetalleSIGOPLAN.FirstOrDefault(x => x.partida == detalle.partida);

                                                if (detalleSIGOPLAN != null)
                                                {
                                                    detalleSIGOPLAN.precio1 = detalle.precio1;
                                                    detalleSIGOPLAN.precio2 = detalle.precio2;
                                                    detalleSIGOPLAN.precio3 = detalle.precio3;
                                                    detalleSIGOPLAN.proveedor_uc = detalle.proveedor_uc ?? 0;
                                                    detalleSIGOPLAN.oc_uc = detalle.oc_uc ?? 0;
                                                    detalleSIGOPLAN.fecha_uc = detalle.fecha_uc;
                                                    detalleSIGOPLAN.precio_uc = detalle.precio_uc ?? 0;
                                                    detalleSIGOPLAN.usuarioModificacion_id = vSesiones.sesionUsuarioDTO.id;
                                                    detalleSIGOPLAN.fechaModificacion = DateTime.Now;

                                                    _context.SaveChanges();
                                                }
                                            }
                                            #endregion
                                        }
                                        #endregion

                                        #region Enkontrol
                                        var count = 0;

                                        #region General
                                        using (var cmd = new OdbcCommand(@"
                                UPDATE DBA.so_cuadro_comparativo 
                                SET 
                                    prov1 = ?, porcent_dcto1 = ?, porcent_iva1 = ?, dcto1 = ?, iva1 = ?, total1 = ?, tipo_cambio1 = ?, fecha_entrega1 = ?, lab1 = ?, dias_pago1 = ?, 
                                    prov2 = ?, porcent_dcto2 = ?, porcent_iva2 = ?, dcto2 = ?, iva2 = ?, total2 = ?, tipo_cambio2 = ?, fecha_entrega2 = ?, lab2 = ?, dias_pago2 = ?, 
                                    prov3 = ?, porcent_dcto3 = ?, porcent_iva3 = ?, dcto3 = ?, iva3 = ?, total3 = ?, tipo_cambio3 = ?, fecha_entrega3 = ?, lab3 = ?, dias_pago3 = ?, 
                                    solicito = ?, 
                                    sub_total1 = ?, sub_total2 = ?, sub_total3 = ?, 
                                    fletes1 = ?, fletes2 = ?, fletes3 = ?, 
                                    gastos_imp1 = ?, gastos_imp2 = ?, gastos_imp3 = ?, 
                                    nombre_prov1 = ?, nombre_prov2 = ?, nombre_prov3 = ?, 
                                    moneda1 = ?, moneda2 = ?, moneda3 = ?, 
                                    observaciones1 = ?, observaciones2 = ?, observaciones3 = ? 
                                WHERE cc = ? AND numero = ? AND folio = ?"))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@prov1", OdbcType.Numeric).Value = cuadro.prov1 ?? (object)DBNull.Value;
                                            parameters.Add("@porcent_dcto1", OdbcType.Numeric).Value = cuadro.porcent_dcto1;
                                            parameters.Add("@porcent_iva1", OdbcType.Numeric).Value = cuadro.porcent_iva1;
                                            parameters.Add("@dcto1", OdbcType.Numeric).Value = cuadro.dcto1;
                                            parameters.Add("@iva1", OdbcType.Numeric).Value = cuadro.iva1;
                                            parameters.Add("@total1", OdbcType.Numeric).Value = cuadro.total1;
                                            parameters.Add("@tipo_cambio1", OdbcType.Numeric).Value = cuadro.tipo_cambio1;
                                            parameters.Add("@fecha_entrega1", OdbcType.Date).Value = cuadro.fecha_entrega1;
                                            parameters.Add("@lab1", OdbcType.Numeric).Value = cuadro.lab1 ?? (object)DBNull.Value;
                                            parameters.Add("@dias_pago1", OdbcType.Numeric).Value = cuadro.dias_pago1 ?? (object)DBNull.Value;

                                            parameters.Add("@prov2", OdbcType.Numeric).Value = cuadro.prov2 ?? (object)DBNull.Value;
                                            parameters.Add("@porcent_dcto2", OdbcType.Numeric).Value = cuadro.porcent_dcto2;
                                            parameters.Add("@porcent_iva2", OdbcType.Numeric).Value = cuadro.porcent_iva2;
                                            parameters.Add("@dcto2", OdbcType.Numeric).Value = cuadro.dcto2;
                                            parameters.Add("@iva2", OdbcType.Numeric).Value = cuadro.iva2;
                                            parameters.Add("@total2", OdbcType.Numeric).Value = cuadro.total2;
                                            parameters.Add("@tipo_cambio2", OdbcType.Numeric).Value = cuadro.tipo_cambio2;
                                            parameters.Add("@fecha_entrega2", OdbcType.Date).Value = cuadro.fecha_entrega2;
                                            parameters.Add("@lab2", OdbcType.Numeric).Value = cuadro.lab2 ?? (object)DBNull.Value;
                                            parameters.Add("@dias_pago2", OdbcType.Numeric).Value = cuadro.dias_pago2 ?? (object)DBNull.Value;

                                            parameters.Add("@prov3", OdbcType.Numeric).Value = cuadro.prov3 ?? (object)DBNull.Value;
                                            parameters.Add("@porcent_dcto3", OdbcType.Numeric).Value = cuadro.porcent_dcto3;
                                            parameters.Add("@porcent_iva3", OdbcType.Numeric).Value = cuadro.porcent_iva3;
                                            parameters.Add("@dcto3", OdbcType.Numeric).Value = cuadro.dcto3;
                                            parameters.Add("@iva3", OdbcType.Numeric).Value = cuadro.iva3;
                                            parameters.Add("@total3", OdbcType.Numeric).Value = cuadro.total3;
                                            parameters.Add("@tipo_cambio3", OdbcType.Numeric).Value = cuadro.tipo_cambio3;
                                            parameters.Add("@fecha_entrega3", OdbcType.Date).Value = cuadro.fecha_entrega3;
                                            parameters.Add("@lab3", OdbcType.Numeric).Value = cuadro.lab3 ?? (object)DBNull.Value;
                                            parameters.Add("@dias_pago3", OdbcType.Numeric).Value = cuadro.dias_pago3 ?? (object)DBNull.Value;

                                            parameters.Add("@solicito", OdbcType.Numeric).Value = cuadro.solicito;

                                            parameters.Add("@sub_total1", OdbcType.Numeric).Value = cuadro.sub_total1;
                                            parameters.Add("@sub_total2", OdbcType.Numeric).Value = cuadro.sub_total2;
                                            parameters.Add("@sub_total3", OdbcType.Numeric).Value = cuadro.sub_total3;

                                            parameters.Add("@fletes1", OdbcType.Numeric).Value = cuadro.fletes1;
                                            parameters.Add("@fletes2", OdbcType.Numeric).Value = cuadro.fletes2;
                                            parameters.Add("@fletes3", OdbcType.Numeric).Value = cuadro.fletes3;

                                            parameters.Add("@gastos_imp1", OdbcType.Numeric).Value = cuadro.gastos_imp1;
                                            parameters.Add("@gastos_imp2", OdbcType.Numeric).Value = cuadro.gastos_imp2;
                                            parameters.Add("@gastos_imp3", OdbcType.Numeric).Value = cuadro.gastos_imp3;

                                            parameters.Add("@nombre_prov1", OdbcType.VarChar).Value = cuadro.nombre_prov1 ?? (object)DBNull.Value;
                                            parameters.Add("@nombre_prov2", OdbcType.VarChar).Value = cuadro.nombre_prov2 ?? (object)DBNull.Value;
                                            parameters.Add("@nombre_prov3", OdbcType.VarChar).Value = cuadro.nombre_prov3 ?? (object)DBNull.Value;

                                            parameters.Add("@moneda1", OdbcType.Char).Value = cuadro.moneda1 ?? (object)DBNull.Value;
                                            parameters.Add("@moneda2", OdbcType.Char).Value = cuadro.moneda2 ?? (object)DBNull.Value;
                                            parameters.Add("@moneda3", OdbcType.Char).Value = cuadro.moneda3 ?? (object)DBNull.Value;

                                            parameters.Add("@observaciones1", OdbcType.Char).Value = cuadro.comentarios1 ?? (object)DBNull.Value;
                                            parameters.Add("@observaciones2", OdbcType.Char).Value = cuadro.comentarios2 ?? (object)DBNull.Value;
                                            parameters.Add("@observaciones3", OdbcType.Char).Value = cuadro.comentarios3 ?? (object)DBNull.Value;

                                            parameters.Add("@cc", OdbcType.Char).Value = cuadro.cc;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = cuadro.numero;
                                            parameters.Add("@folio", OdbcType.Numeric).Value = cuadro.folio;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }
                                        #endregion

                                        #region Detalle
                                        foreach (var det in cuadro.detalleCuadro)
                                        {
                                            using (var cmd = new OdbcCommand(@"
                                    UPDATE DBA.so_cuadro_comparativo_det 
                                    SET 
                                        precio1 = ?, precio2 = ?, precio3 = ?, 
                                        proveedor_uc = ?, oc_uc = ?, fecha_uc = ?, precio_uc = ? 
                                    WHERE cc = ? AND numero = ? AND folio = ? AND partida = ?"))
                                            {
                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                parameters.Add("@precio1", OdbcType.Char).Value = det.precio1;
                                                parameters.Add("@precio2", OdbcType.Char).Value = det.precio2;
                                                parameters.Add("@precio3", OdbcType.Char).Value = det.precio3;
                                                parameters.Add("@proveedor_uc", OdbcType.Char).Value = det.proveedor_uc ?? (object)DBNull.Value;
                                                parameters.Add("@oc_uc", OdbcType.Char).Value = det.oc_uc ?? (object)DBNull.Value;
                                                parameters.Add("@fecha_uc", OdbcType.Date).Value = det.fecha_uc ?? (object)DBNull.Value;
                                                parameters.Add("@precio_uc", OdbcType.Char).Value = det.precio_uc ?? (object)DBNull.Value;

                                                parameters.Add("@cc", OdbcType.Char).Value = cuadro.cc;
                                                parameters.Add("@numero", OdbcType.Numeric).Value = cuadro.numero;
                                                parameters.Add("@folio", OdbcType.Numeric).Value = cuadro.folio;
                                                parameters.Add("@partida", OdbcType.Numeric).Value = det.partida;

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;

                                                count += cmd.ExecuteNonQuery();
                                            }
                                        }
                                        #endregion
                                        #endregion
                                        #endregion

                                        //cuadroComparativoFS.GuardarConfiabilidad(cuadro);

                                        trans.Commit();
                                        dbSigoplanTransaction.Commit();

                                        resultado.Add(SUCCESS, true);
                                        SaveBitacora(4, (int)AccionEnum.ACTUALIZAR, cuadroSIGOPLAN != null ? cuadroSIGOPLAN.id : 0, JsonUtils.convertNetObjectToJson(new { cuadro = cuadro }));
                                    }
                                    catch (Exception e)
                                    {
                                        trans.Rollback();
                                        dbSigoplanTransaction.Rollback();

                                        LogError(4, 0, "OrdenCompraController", "UpdateCuadro", e, AccionEnum.ACTUALIZAR, 0, new { cuadro = cuadro });

                                        resultado.Add(MESSAGE, e.Message);
                                        resultado.Add(SUCCESS, false);
                                    }
                                }
                            }
                        }
                        #endregion
                        break;
                    }
                default:
                    {
                        #region OTRAS EMPRESAS
                        using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                        {
                            using (var con = checkConexionProductivo())
                            {
                                using (var trans = con.BeginTransaction())
                                {
                                    try
                                    {
                                        var cuadroSIGOPLAN = _context.tblCom_CuadroComparativo.FirstOrDefault(x => x.registroActivo && x.cc == cuadro.cc && x.numero == cuadro.numero && x.folio == cuadro.folio);

                                        #region RESTO EMPRESAS
                                        #region SIGOPLAN

                                        if (cuadroSIGOPLAN != null)
                                        {
                                            #region General
                                            cuadroSIGOPLAN.prov1 = cuadro.prov1 ?? 0;
                                            cuadroSIGOPLAN.porcent_dcto1 = cuadro.porcent_dcto1;
                                            cuadroSIGOPLAN.porcent_iva1 = cuadro.porcent_iva1;
                                            cuadroSIGOPLAN.dcto1 = cuadro.dcto1;
                                            cuadroSIGOPLAN.iva1 = cuadro.iva1;
                                            cuadroSIGOPLAN.total1 = cuadro.total1;
                                            cuadroSIGOPLAN.tipo_cambio1 = cuadro.tipo_cambio1;
                                            cuadroSIGOPLAN.fecha_entrega1 = cuadro.fecha_entrega1;
                                            cuadroSIGOPLAN.lab1 = cuadro.lab1 ?? 0;
                                            cuadroSIGOPLAN.dias_pago1 = cuadro.dias_pago1 ?? 0;

                                            cuadroSIGOPLAN.prov2 = cuadro.prov2 ?? 0;
                                            cuadroSIGOPLAN.porcent_dcto2 = cuadro.porcent_dcto2;
                                            cuadroSIGOPLAN.porcent_iva2 = cuadro.porcent_iva2;
                                            cuadroSIGOPLAN.dcto2 = cuadro.dcto2;
                                            cuadroSIGOPLAN.iva2 = cuadro.iva2;
                                            cuadroSIGOPLAN.total2 = cuadro.total2;
                                            cuadroSIGOPLAN.tipo_cambio2 = cuadro.tipo_cambio2;
                                            cuadroSIGOPLAN.fecha_entrega2 = cuadro.fecha_entrega2;
                                            cuadroSIGOPLAN.lab2 = cuadro.lab2 ?? 0;
                                            cuadroSIGOPLAN.dias_pago2 = cuadro.dias_pago2 ?? 0;

                                            cuadroSIGOPLAN.prov3 = cuadro.prov3 ?? 0;
                                            cuadroSIGOPLAN.porcent_dcto3 = cuadro.porcent_dcto3;
                                            cuadroSIGOPLAN.porcent_iva3 = cuadro.porcent_iva3;
                                            cuadroSIGOPLAN.dcto3 = cuadro.dcto3;
                                            cuadroSIGOPLAN.iva3 = cuadro.iva3;
                                            cuadroSIGOPLAN.total3 = cuadro.total3;
                                            cuadroSIGOPLAN.tipo_cambio3 = cuadro.tipo_cambio3;
                                            cuadroSIGOPLAN.fecha_entrega3 = cuadro.fecha_entrega3;
                                            cuadroSIGOPLAN.lab3 = cuadro.lab3 ?? 0;
                                            cuadroSIGOPLAN.dias_pago3 = cuadro.dias_pago3 ?? 0;

                                            cuadroSIGOPLAN.solicito = cuadro.solicito;

                                            cuadroSIGOPLAN.sub_total1 = cuadro.sub_total1;
                                            cuadroSIGOPLAN.sub_total2 = cuadro.sub_total2;
                                            cuadroSIGOPLAN.sub_total3 = cuadro.sub_total3;

                                            cuadroSIGOPLAN.fletes1 = cuadro.fletes1;
                                            cuadroSIGOPLAN.fletes2 = cuadro.fletes2;
                                            cuadroSIGOPLAN.fletes3 = cuadro.fletes3;

                                            cuadroSIGOPLAN.gastos_imp1 = cuadro.gastos_imp1;
                                            cuadroSIGOPLAN.gastos_imp2 = cuadro.gastos_imp2;
                                            cuadroSIGOPLAN.gastos_imp3 = cuadro.gastos_imp3;

                                            cuadroSIGOPLAN.nombre_prov1 = cuadro.nombre_prov1 ?? "";
                                            cuadroSIGOPLAN.nombre_prov2 = cuadro.nombre_prov2 ?? "";
                                            cuadroSIGOPLAN.nombre_prov3 = cuadro.nombre_prov3 ?? "";

                                            cuadroSIGOPLAN.moneda1 = cuadro.moneda1 ?? 0;
                                            cuadroSIGOPLAN.moneda2 = cuadro.moneda2 ?? 0;
                                            cuadroSIGOPLAN.moneda3 = cuadro.moneda3 ?? 0;

                                            cuadroSIGOPLAN.inslic = cuadro.inslic;
                                            cuadroSIGOPLAN.inslic_fecha_ini = cuadro.inslic_fecha_ini;
                                            cuadroSIGOPLAN.inslic_fecha_fin = cuadro.inslic_fecha_fin;

                                            cuadroSIGOPLAN.comentarios1 = cuadro.comentarios1 ?? "";
                                            cuadroSIGOPLAN.comentarios2 = cuadro.comentarios2 ?? "";
                                            cuadroSIGOPLAN.comentarios3 = cuadro.comentarios3 ?? "";

                                            cuadroSIGOPLAN.usuarioModificacion_id = vSesiones.sesionUsuarioDTO.id;
                                            cuadroSIGOPLAN.fechaModificacion = DateTime.Now;

                                            _context.SaveChanges();
                                            #endregion

                                            #region Detalle
                                            var cuadroDetalleSIGOPLAN = _context.tblCom_CuadroComparativoDet.Where(x => x.registroActivo && x.cc == cuadro.cc && x.numero == cuadro.numero && x.folio == cuadro.folio).ToList();

                                            foreach (var detalle in cuadro.detalleCuadro)
                                            {
                                                var detalleSIGOPLAN = cuadroDetalleSIGOPLAN.FirstOrDefault(x => x.partida == detalle.partida);

                                                if (detalleSIGOPLAN != null)
                                                {
                                                    detalleSIGOPLAN.precio1 = detalle.precio1;
                                                    detalleSIGOPLAN.precio2 = detalle.precio2;
                                                    detalleSIGOPLAN.precio3 = detalle.precio3;
                                                    detalleSIGOPLAN.proveedor_uc = detalle.proveedor_uc ?? 0;
                                                    detalleSIGOPLAN.oc_uc = detalle.oc_uc ?? 0;
                                                    detalleSIGOPLAN.fecha_uc = detalle.fecha_uc;
                                                    detalleSIGOPLAN.precio_uc = detalle.precio_uc ?? 0;
                                                    detalleSIGOPLAN.usuarioModificacion_id = vSesiones.sesionUsuarioDTO.id;
                                                    detalleSIGOPLAN.fechaModificacion = DateTime.Now;

                                                    _context.SaveChanges();
                                                }
                                            }
                                            #endregion
                                        }
                                        #endregion

                                        #region Enkontrol
                                        var count = 0;

                                        #region General
                                        using (var cmd = new OdbcCommand(@"
                                UPDATE so_cuadro_comparativo 
                                SET 
                                    prov1 = ?, porcent_dcto1 = ?, porcent_iva1 = ?, dcto1 = ?, iva1 = ?, total1 = ?, tipo_cambio1 = ?, fecha_entrega1 = ?, lab1 = ?, dias_pago1 = ?, 
                                    prov2 = ?, porcent_dcto2 = ?, porcent_iva2 = ?, dcto2 = ?, iva2 = ?, total2 = ?, tipo_cambio2 = ?, fecha_entrega2 = ?, lab2 = ?, dias_pago2 = ?, 
                                    prov3 = ?, porcent_dcto3 = ?, porcent_iva3 = ?, dcto3 = ?, iva3 = ?, total3 = ?, tipo_cambio3 = ?, fecha_entrega3 = ?, lab3 = ?, dias_pago3 = ?, 
                                    solicito = ?, 
                                    sub_total1 = ?, sub_total2 = ?, sub_total3 = ?, 
                                    fletes1 = ?, fletes2 = ?, fletes3 = ?, 
                                    gastos_imp1 = ?, gastos_imp2 = ?, gastos_imp3 = ?, 
                                    nombre_prov1 = ?, nombre_prov2 = ?, nombre_prov3 = ?, 
                                    moneda1 = ?, moneda2 = ?, moneda3 = ?, 
                                    inslic = ?, inslic_fecha_ini = ?, inslic_fecha_fin = ?, 
                                    comentarios1 = ?, comentarios2 = ?, comentarios3 = ? 
                                WHERE cc = ? AND numero = ? AND folio = ?"))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@prov1", OdbcType.Numeric).Value = cuadro.prov1 ?? (object)DBNull.Value;
                                            parameters.Add("@porcent_dcto1", OdbcType.Numeric).Value = cuadro.porcent_dcto1;
                                            parameters.Add("@porcent_iva1", OdbcType.Numeric).Value = cuadro.porcent_iva1;
                                            parameters.Add("@dcto1", OdbcType.Numeric).Value = cuadro.dcto1;
                                            parameters.Add("@iva1", OdbcType.Numeric).Value = cuadro.iva1;
                                            parameters.Add("@total1", OdbcType.Numeric).Value = cuadro.total1;
                                            parameters.Add("@tipo_cambio1", OdbcType.Numeric).Value = cuadro.tipo_cambio1;
                                            parameters.Add("@fecha_entrega1", OdbcType.Date).Value = cuadro.fecha_entrega1;
                                            parameters.Add("@lab1", OdbcType.Numeric).Value = cuadro.lab1 ?? (object)DBNull.Value;
                                            parameters.Add("@dias_pago1", OdbcType.Numeric).Value = cuadro.dias_pago1 ?? (object)DBNull.Value;

                                            parameters.Add("@prov2", OdbcType.Numeric).Value = cuadro.prov2 ?? (object)DBNull.Value;
                                            parameters.Add("@porcent_dcto2", OdbcType.Numeric).Value = cuadro.porcent_dcto2;
                                            parameters.Add("@porcent_iva2", OdbcType.Numeric).Value = cuadro.porcent_iva2;
                                            parameters.Add("@dcto2", OdbcType.Numeric).Value = cuadro.dcto2;
                                            parameters.Add("@iva2", OdbcType.Numeric).Value = cuadro.iva2;
                                            parameters.Add("@total2", OdbcType.Numeric).Value = cuadro.total2;
                                            parameters.Add("@tipo_cambio2", OdbcType.Numeric).Value = cuadro.tipo_cambio2;
                                            parameters.Add("@fecha_entrega2", OdbcType.Date).Value = cuadro.fecha_entrega2;
                                            parameters.Add("@lab2", OdbcType.Numeric).Value = cuadro.lab2 ?? (object)DBNull.Value;
                                            parameters.Add("@dias_pago2", OdbcType.Numeric).Value = cuadro.dias_pago2 ?? (object)DBNull.Value;

                                            parameters.Add("@prov3", OdbcType.Numeric).Value = cuadro.prov3 ?? (object)DBNull.Value;
                                            parameters.Add("@porcent_dcto3", OdbcType.Numeric).Value = cuadro.porcent_dcto3;
                                            parameters.Add("@porcent_iva3", OdbcType.Numeric).Value = cuadro.porcent_iva3;
                                            parameters.Add("@dcto3", OdbcType.Numeric).Value = cuadro.dcto3;
                                            parameters.Add("@iva3", OdbcType.Numeric).Value = cuadro.iva3;
                                            parameters.Add("@total3", OdbcType.Numeric).Value = cuadro.total3;
                                            parameters.Add("@tipo_cambio3", OdbcType.Numeric).Value = cuadro.tipo_cambio3;
                                            parameters.Add("@fecha_entrega3", OdbcType.Date).Value = cuadro.fecha_entrega3;
                                            parameters.Add("@lab3", OdbcType.Numeric).Value = cuadro.lab3 ?? (object)DBNull.Value;
                                            parameters.Add("@dias_pago3", OdbcType.Numeric).Value = cuadro.dias_pago3 ?? (object)DBNull.Value;

                                            parameters.Add("@solicito", OdbcType.Numeric).Value = cuadro.solicito;

                                            parameters.Add("@sub_total1", OdbcType.Numeric).Value = cuadro.sub_total1;
                                            parameters.Add("@sub_total2", OdbcType.Numeric).Value = cuadro.sub_total2;
                                            parameters.Add("@sub_total3", OdbcType.Numeric).Value = cuadro.sub_total3;

                                            parameters.Add("@fletes1", OdbcType.Numeric).Value = cuadro.fletes1;
                                            parameters.Add("@fletes2", OdbcType.Numeric).Value = cuadro.fletes2;
                                            parameters.Add("@fletes3", OdbcType.Numeric).Value = cuadro.fletes3;

                                            parameters.Add("@gastos_imp1", OdbcType.Numeric).Value = cuadro.gastos_imp1;
                                            parameters.Add("@gastos_imp2", OdbcType.Numeric).Value = cuadro.gastos_imp2;
                                            parameters.Add("@gastos_imp3", OdbcType.Numeric).Value = cuadro.gastos_imp3;

                                            parameters.Add("@nombre_prov1", OdbcType.VarChar).Value = cuadro.nombre_prov1 ?? (object)DBNull.Value;
                                            parameters.Add("@nombre_prov2", OdbcType.VarChar).Value = cuadro.nombre_prov2 ?? (object)DBNull.Value;
                                            parameters.Add("@nombre_prov3", OdbcType.VarChar).Value = cuadro.nombre_prov3 ?? (object)DBNull.Value;

                                            parameters.Add("@moneda1", OdbcType.Char).Value = cuadro.moneda1 ?? (object)DBNull.Value;
                                            parameters.Add("@moneda2", OdbcType.Char).Value = cuadro.moneda2 ?? (object)DBNull.Value;
                                            parameters.Add("@moneda3", OdbcType.Char).Value = cuadro.moneda3 ?? (object)DBNull.Value;

                                            parameters.Add("@inslic", OdbcType.Bit).Value = cuadro.inslic;
                                            parameters.Add("@inslic_fecha_ini", OdbcType.Date).Value = cuadro.inslic_fecha_ini ?? (object)DBNull.Value;
                                            parameters.Add("@inslic_fecha_fin", OdbcType.Date).Value = cuadro.inslic_fecha_fin ?? (object)DBNull.Value;

                                            parameters.Add("@comentarios1", OdbcType.Char).Value = cuadro.comentarios1 ?? (object)DBNull.Value;
                                            parameters.Add("@comentarios2", OdbcType.Char).Value = cuadro.comentarios2 ?? (object)DBNull.Value;
                                            parameters.Add("@comentarios3", OdbcType.Char).Value = cuadro.comentarios3 ?? (object)DBNull.Value;

                                            parameters.Add("@cc", OdbcType.Char).Value = cuadro.cc;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = cuadro.numero;
                                            parameters.Add("@folio", OdbcType.Numeric).Value = cuadro.folio;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }
                                        #endregion

                                        #region Detalle
                                        foreach (var det in cuadro.detalleCuadro)
                                        {
                                            using (var cmd = new OdbcCommand(@"
                                    UPDATE so_cuadro_comparativo_det 
                                    SET 
                                        precio1 = ?, precio2 = ?, precio3 = ?, 
                                        proveedor_uc = ?, oc_uc = ?, fecha_uc = ?, precio_uc = ? 
                                    WHERE cc = ? AND numero = ? AND folio = ? AND partida = ?"))
                                            {
                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                parameters.Add("@precio1", OdbcType.Char).Value = det.precio1;
                                                parameters.Add("@precio2", OdbcType.Char).Value = det.precio2;
                                                parameters.Add("@precio3", OdbcType.Char).Value = det.precio3;
                                                parameters.Add("@proveedor_uc", OdbcType.Char).Value = det.proveedor_uc ?? (object)DBNull.Value;
                                                parameters.Add("@oc_uc", OdbcType.Char).Value = det.oc_uc ?? (object)DBNull.Value;
                                                parameters.Add("@fecha_uc", OdbcType.Date).Value = det.fecha_uc ?? (object)DBNull.Value;
                                                parameters.Add("@precio_uc", OdbcType.Char).Value = det.precio_uc ?? (object)DBNull.Value;

                                                parameters.Add("@cc", OdbcType.Char).Value = cuadro.cc;
                                                parameters.Add("@numero", OdbcType.Numeric).Value = cuadro.numero;
                                                parameters.Add("@folio", OdbcType.Numeric).Value = cuadro.folio;
                                                parameters.Add("@partida", OdbcType.Numeric).Value = det.partida;

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;

                                                count += cmd.ExecuteNonQuery();
                                            }
                                        }
                                        #endregion
                                        #endregion
                                        #endregion

                                        cuadroComparativoFS.GuardarConfiabilidad(cuadro);

                                        trans.Commit();
                                        dbSigoplanTransaction.Commit();

                                        resultado.Add(SUCCESS, true);
                                        SaveBitacora(4, (int)AccionEnum.ACTUALIZAR, cuadroSIGOPLAN.id, JsonUtils.convertNetObjectToJson(new { cuadro = cuadro }));
                                    }
                                    catch (Exception e)
                                    {
                                        trans.Rollback();
                                        dbSigoplanTransaction.Rollback();

                                        LogError(4, 0, "OrdenCompraController", "UpdateCuadro", e, AccionEnum.ACTUALIZAR, 0, new { cuadro = cuadro });

                                        resultado.Add(MESSAGE, e.Message);
                                        resultado.Add(SUCCESS, false);
                                    }
                                }
                            }
                        }
                        #endregion
                        break;
                    }
            }

            return resultado;
        }

        public Dictionary<string, object> BorrarCuadro(CuadroComparativoDTO cuadro)
        {
            var resultado = new Dictionary<string, object>();

            switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
            {
                case EmpresaEnum.Peru:
                    {
                        #region PERU
                        using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                        {
                            try
                            {
                                string PERU_tipoCompra = "";
                                if (HttpContext.Current.Session["servicioCompraCuadroComparativo"] != null)
                                {
                                    if (!(bool)HttpContext.Current.Session["servicioCompraCuadroComparativo"]) //Vista Generar Compra
                                    {
                                        PERU_tipoCompra = "RQ";
                                    }
                                    else //Vista Generar Compra Servicio
                                    {
                                        PERU_tipoCompra = "RS";
                                    }
                                }

                                #region SIGOPLAN
                                var cuadroSIGOPLAN = _context.tblCom_CuadroComparativo.FirstOrDefault(x => x.registroActivo && x.cc == cuadro.cc && x.numero == cuadro.numero && x.folio == cuadro.folio && x.PERU_tipoCuadro == PERU_tipoCompra);

                                if (cuadroSIGOPLAN != null)
                                {
                                    #region General
                                    cuadroSIGOPLAN.usuarioModificacion_id = vSesiones.sesionUsuarioDTO.id;
                                    cuadroSIGOPLAN.fechaModificacion = DateTime.Now;
                                    cuadroSIGOPLAN.registroActivo = false;

                                    _context.SaveChanges();
                                    #endregion

                                    #region Detalle
                                    var cuadroDetalleSIGOPLAN = _context.tblCom_CuadroComparativoDet.Where(x => x.registroActivo && x.cc == cuadro.cc && x.numero == cuadro.numero && x.folio == cuadro.folio && x.PERU_tipoCuadro == PERU_tipoCompra).ToList();

                                    foreach (var detalleSIGOPLAN in cuadroDetalleSIGOPLAN)
                                    {
                                        detalleSIGOPLAN.usuarioModificacion_id = vSesiones.sesionUsuarioDTO.id;
                                        detalleSIGOPLAN.fechaModificacion = DateTime.Now;
                                        detalleSIGOPLAN.registroActivo = false;

                                        _context.SaveChanges();
                                    }
                                    #endregion
                                }
                                #endregion

                                //#region Quitar registros de calificaciones
                                //var listaCalificacionesSIGOPLAN = _context.tblCom_CC_Calificacion.Where(x => x.esActivo && x.CC == cuadro.cc && x.Numero == cuadro.numero && x.Folio == cuadro.folio).ToList();

                                //foreach (var calificacion in listaCalificacionesSIGOPLAN)
                                //{
                                //    calificacion.esActivo = false;

                                //    var listaCalificacionesPartidasSIGOPLAN = _context.tblCom_CC_CalificacionPartida.Where(x => x.esActivo && x.idCalificacion == calificacion.Id).ToList();

                                //    foreach (var partida in listaCalificacionesPartidasSIGOPLAN)
                                //    {
                                //        partida.esActivo = false;
                                //    }

                                //    _context.SaveChanges();
                                //}
                                //#endregion

                                dbSigoplanTransaction.Commit();

                                resultado.Add(SUCCESS, true);
                                SaveBitacora(4, (int)AccionEnum.ELIMINAR, 0, JsonUtils.convertNetObjectToJson(new { cuadro = cuadro }));
                            }
                            catch (Exception e)
                            {
                                dbSigoplanTransaction.Rollback();

                                LogError(4, 0, "OrdenCompraController", "BorrarCuadro", e, AccionEnum.ELIMINAR, 0, new { cuadro = cuadro });

                                resultado.Add(MESSAGE, e.Message);
                                resultado.Add(SUCCESS, false);
                            }
                        }
                        #endregion
                        break;
                    }
                case EmpresaEnum.Colombia:
                    {
                        #region DEMÁS EMPRESAS
                        using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                        {
                            using (var con = checkConexionProductivo())
                            {
                                using (var trans = con.BeginTransaction())
                                {
                                    try
                                    {
                                        #region SIGOPLAN
                                        var cuadroSIGOPLAN = _context.tblCom_CuadroComparativo.FirstOrDefault(x => x.registroActivo && x.cc == cuadro.cc && x.numero == cuadro.numero && x.folio == cuadro.folio);

                                        if (cuadroSIGOPLAN != null)
                                        {
                                            #region General
                                            cuadroSIGOPLAN.usuarioModificacion_id = vSesiones.sesionUsuarioDTO.id;
                                            cuadroSIGOPLAN.fechaModificacion = DateTime.Now;
                                            cuadroSIGOPLAN.registroActivo = false;

                                            _context.SaveChanges();
                                            #endregion

                                            #region Detalle
                                            var cuadroDetalleSIGOPLAN = _context.tblCom_CuadroComparativoDet.Where(x => x.registroActivo && x.cc == cuadro.cc && x.numero == cuadro.numero && x.folio == cuadro.folio).ToList();

                                            foreach (var detalleSIGOPLAN in cuadroDetalleSIGOPLAN)
                                            {
                                                detalleSIGOPLAN.usuarioModificacion_id = vSesiones.sesionUsuarioDTO.id;
                                                detalleSIGOPLAN.fechaModificacion = DateTime.Now;
                                                detalleSIGOPLAN.registroActivo = false;

                                                _context.SaveChanges();
                                            }
                                            #endregion
                                        }
                                        #endregion

                                        #region Enkontrol
                                        var count = 0;

                                        #region Detalle
                                        using (var cmd = new OdbcCommand(@"DELETE FROM DBA.so_cuadro_comparativo_det WHERE cc = ? AND numero = ? AND folio = ?"))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@cc", OdbcType.Char).Value = cuadro.cc;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = cuadro.numero;
                                            parameters.Add("@folio", OdbcType.Numeric).Value = cuadro.folio;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }
                                        #endregion

                                        #region General
                                        using (var cmd = new OdbcCommand(@"DELETE FROM DBA.so_cuadro_comparativo WHERE cc = ? AND numero = ? AND folio = ?"))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@cc", OdbcType.Char).Value = cuadro.cc;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = cuadro.numero;
                                            parameters.Add("@folio", OdbcType.Numeric).Value = cuadro.folio;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }
                                        #endregion
                                        #endregion

                                        //#region Quitar registros de calificaciones
                                        //var listaCalificacionesSIGOPLAN = _context.tblCom_CC_Calificacion.Where(x => x.esActivo && x.CC == cuadro.cc && x.Numero == cuadro.numero && x.Folio == cuadro.folio).ToList();

                                        //foreach (var calificacion in listaCalificacionesSIGOPLAN)
                                        //{
                                        //    calificacion.esActivo = false;

                                        //    var listaCalificacionesPartidasSIGOPLAN = _context.tblCom_CC_CalificacionPartida.Where(x => x.esActivo && x.idCalificacion == calificacion.Id).ToList();

                                        //    foreach (var partida in listaCalificacionesPartidasSIGOPLAN)
                                        //    {
                                        //        partida.esActivo = false;
                                        //    }

                                        //    _context.SaveChanges();
                                        //}
                                        //#endregion

                                        trans.Commit();
                                        dbSigoplanTransaction.Commit();

                                        resultado.Add(SUCCESS, true);
                                        SaveBitacora(4, (int)AccionEnum.ELIMINAR, 0, JsonUtils.convertNetObjectToJson(new { cuadro = cuadro }));
                                    }
                                    catch (Exception e)
                                    {
                                        trans.Rollback();
                                        dbSigoplanTransaction.Rollback();

                                        LogError(4, 0, "OrdenCompraController", "BorrarCuadro", e, AccionEnum.ELIMINAR, 0, new { cuadro = cuadro });

                                        resultado.Add(MESSAGE, e.Message);
                                        resultado.Add(SUCCESS, false);
                                    }
                                }
                            }
                        }
                        #endregion
                        break;
                    }
                default:
                    {
                        #region DEMÁS EMPRESAS
                        using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                        {
                            using (var con = checkConexionProductivo())
                            {
                                using (var trans = con.BeginTransaction())
                                {
                                    try
                                    {
                                        #region SIGOPLAN
                                        var cuadroSIGOPLAN = _context.tblCom_CuadroComparativo.FirstOrDefault(x => x.registroActivo && x.cc == cuadro.cc && x.numero == cuadro.numero && x.folio == cuadro.folio);

                                        if (cuadroSIGOPLAN != null)
                                        {
                                            #region General
                                            cuadroSIGOPLAN.usuarioModificacion_id = vSesiones.sesionUsuarioDTO.id;
                                            cuadroSIGOPLAN.fechaModificacion = DateTime.Now;
                                            cuadroSIGOPLAN.registroActivo = false;

                                            _context.SaveChanges();
                                            #endregion

                                            #region Detalle
                                            var cuadroDetalleSIGOPLAN = _context.tblCom_CuadroComparativoDet.Where(x => x.registroActivo && x.cc == cuadro.cc && x.numero == cuadro.numero && x.folio == cuadro.folio).ToList();

                                            foreach (var detalleSIGOPLAN in cuadroDetalleSIGOPLAN)
                                            {
                                                detalleSIGOPLAN.usuarioModificacion_id = vSesiones.sesionUsuarioDTO.id;
                                                detalleSIGOPLAN.fechaModificacion = DateTime.Now;
                                                detalleSIGOPLAN.registroActivo = false;

                                                _context.SaveChanges();
                                            }
                                            #endregion
                                        }
                                        #endregion

                                        #region Enkontrol
                                        var count = 0;

                                        #region Detalle
                                        using (var cmd = new OdbcCommand(@"DELETE FROM so_cuadro_comparativo_det WHERE cc = ? AND numero = ? AND folio = ?"))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@cc", OdbcType.Char).Value = cuadro.cc;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = cuadro.numero;
                                            parameters.Add("@folio", OdbcType.Numeric).Value = cuadro.folio;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }
                                        #endregion

                                        #region General
                                        using (var cmd = new OdbcCommand(@"DELETE FROM so_cuadro_comparativo WHERE cc = ? AND numero = ? AND folio = ?"))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@cc", OdbcType.Char).Value = cuadro.cc;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = cuadro.numero;
                                            parameters.Add("@folio", OdbcType.Numeric).Value = cuadro.folio;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }
                                        #endregion
                                        #endregion

                                        #region Quitar registros de calificaciones
                                        var listaCalificacionesSIGOPLAN = _context.tblCom_CC_Calificacion.Where(x => x.esActivo && x.CC == cuadro.cc && x.Numero == cuadro.numero && x.Folio == cuadro.folio).ToList();

                                        foreach (var calificacion in listaCalificacionesSIGOPLAN)
                                        {
                                            calificacion.esActivo = false;

                                            var listaCalificacionesPartidasSIGOPLAN = _context.tblCom_CC_CalificacionPartida.Where(x => x.esActivo && x.idCalificacion == calificacion.Id).ToList();

                                            foreach (var partida in listaCalificacionesPartidasSIGOPLAN)
                                            {
                                                partida.esActivo = false;
                                            }

                                            _context.SaveChanges();
                                        }
                                        #endregion

                                        trans.Commit();
                                        dbSigoplanTransaction.Commit();

                                        resultado.Add(SUCCESS, true);
                                        SaveBitacora(4, (int)AccionEnum.ELIMINAR, 0, JsonUtils.convertNetObjectToJson(new { cuadro = cuadro }));
                                    }
                                    catch (Exception e)
                                    {
                                        trans.Rollback();
                                        dbSigoplanTransaction.Rollback();

                                        LogError(4, 0, "OrdenCompraController", "BorrarCuadro", e, AccionEnum.ELIMINAR, 0, new { cuadro = cuadro });

                                        resultado.Add(MESSAGE, e.Message);
                                        resultado.Add(SUCCESS, false);
                                    }
                                }
                            }
                        }
                        #endregion
                        break;
                    }
            }

            return resultado;
        }

        public Dictionary<string, object> guardarNuevaCompra(OrdenCompraDTO compra)
        {
            var result = new Dictionary<string, object>();

            switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
            {
                case EmpresaEnum.Peru:
                    {
                        #region PERÚ
                        using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                        {
                            using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                            {
                                using (var dbStarsoftTransaction = _starsoft.Database.BeginTransaction())
                                {
                                    try
                                    {
                                        #region Validación precio negativo o precio en cero
                                        if (compra.lstPartidas.Where(x => x.cantidad > 0).Any(x => x.precio <= 0))
                                        {
                                            throw new Exception("El precio de las partidas no puede tener un valor negativo o en cero.");
                                        }
                                        #endregion

                                        //Checa cuantos proveedores distintos se capturaron para crear una compra por cada uno
                                        var proveedores = compra.lstPartidas.Where(x => x.cantidad > 0).Select(x => x.PERU_proveedor).Distinct().ToList();
                                        List<int> numerosCompras = new List<int>();

                                        foreach (var proveedorStarsoft in proveedores)
                                        {
                                            #region Validación Proveedor Inactivo
                                            var registroProveedor = _starsoft.MAEPROV.FirstOrDefault(x => x.PRVCCODIGO == proveedorStarsoft);
                                            var proveedorStarsoftNombre = registroProveedor.PRVCNOMBRE;

                                            if (registroProveedor.PRVCESTADO == null || registroProveedor.PRVCESTADO != "V")
                                            {
                                                throw new Exception("El proveedor \"" + (proveedorStarsoft + " - " + proveedorStarsoftNombre) + "\" está inactivo. No se puede guardar la compra.");
                                            }
                                            #endregion

                                            var sumatoriaRetencion = compra.lstRetenciones != null && compra.lstRetenciones.Count > 0 ? Math.Round(compra.lstRetenciones.Select(x => x.importe).Sum(), 2) : 0;
                                            var diferenciaRetencion = sumatoriaRetencion - Math.Round(compra.rentencion_despues_iva, 2);

                                            //Se revisa que la sumatoria de la lista de retenciones sea parecida al valor de la propiedad "compra.rentencion_despues_iva".
                                            if (diferenciaRetencion > 1 || diferenciaRetencion < -1)
                                            {
                                                throw new Exception("Error al capturar las retenciones.");
                                            }

                                            var lstPartidas = compra.lstPartidas.Where(x => x.cantidad > 0 && x.PERU_proveedor == proveedorStarsoft).ToList();
                                            var num_req = lstPartidas[0].num_requisicion;
                                            var registroRequisicion = _context.tblCom_Req.FirstOrDefault(x => x.cc == compra.cc && x.numero == num_req && x.PERU_tipoRequisicion == compra.PERU_tipoCompra);
                                            var listaRegistrosRequisicionDetalle = _context.tblCom_ReqDet.Where(x => x.estatusRegistro && x.idReq == registroRequisicion.id).ToList();

                                            #region Validación para no comprar más de lo requerido pendiente
                                            foreach (var partidaCompra in compra.lstPartidas.Where(x => x.cantidad > 0).ToList())
                                            {
                                                var partidaRequisicion = listaRegistrosRequisicionDetalle.FirstOrDefault(x => x.insumo == partidaCompra.insumo && x.partida == partidaCompra.part_requisicion);

                                                var cantidadPartida = partidaRequisicion.cantidad;
                                                var cantidadOrdenada = partidaRequisicion.cantOrdenada;
                                                //var cantidadCancelada = Convert.ToDecimal(partReq.cant_cancelada, CultureInfo.InvariantCulture);
                                                var cantidadPendiente = cantidadPartida - cantidadOrdenada;

                                                if (cantidadPendiente > 0)
                                                {
                                                    if (partidaCompra.cantidad > cantidadPendiente)
                                                    {
                                                        throw new Exception("No se puede comprar más de lo requerido. Partida Compra: #" + partidaCompra.partida + ". Partida Requisición: #" + partidaRequisicion.partida + ".");
                                                    }
                                                }
                                                else
                                                {
                                                    throw new Exception("La partida #" + partidaRequisicion.partida + " de la requisición no tiene cantidad pendiente por comprar.");
                                                }
                                            }
                                            #endregion

                                            var tipoCompra = registroRequisicion.PERU_tipoRequisicion == "RQ" ? "OC" : "OS";

                                            #region Validación Insumos Inventariables en OC e Insumos No Inventariables en OS
                                            switch (tipoCompra)
                                            {
                                                case "OC":
                                                    if (lstPartidas.Any(x => x.insumo.ToString()[0] == '2'))
                                                    {
                                                        throw new Exception("No se pueden agregar insumos de servicios en las compras tipo OC.");
                                                    }
                                                    break;
                                                case "OS":
                                                    if (lstPartidas.Any(x => x.insumo.ToString()[0] == '1'))
                                                    {
                                                        throw new Exception("No se pueden agregar insumos inventariables en las compras tipo OS.");
                                                    }
                                                    break;
                                            }
                                            #endregion

                                            var ultimaCompraStarsoft = _starsoft.NUM_DOCCOMPRAS.FirstOrDefault(x => x.CTNCODIGO == tipoCompra);
                                            var numeroCompraNueva = (int)ultimaCompraStarsoft.CTNNUMERO + 1;

                                            #region Calcular de nuevo los totales ahora con las partidas filtradas por proveedor
                                            var subTotalPorProveedor = lstPartidas.Select(x => x.importe).Sum();
                                            var ivaPorProveedor = subTotalPorProveedor * (compra.porcent_iva / 100);
                                            var totalPorProveedor = (subTotalPorProveedor + ivaPorProveedor) - sumatoriaRetencion;
                                            #endregion

                                            #region Guardar Compra SIGOPLAN
                                            var nuevaCompraSIGOPLAN = new tblCom_OrdenCompra
                                            {
                                                cc = compra.cc,
                                                numero = numeroCompraNueva,
                                                fecha = DateTime.Now,
                                                idLibreAbordo = compra.libre_abordo,
                                                tipo_oc_req = compra.tipo_oc_req,
                                                compradorSIGOPLAN = vSesiones.sesionUsuarioDTO.id, //Usuario SIGOPLAN
                                                compradorEnkontrol = compra.comprador, //Usuario Enkontrol
                                                compradorStarsoft = 0, //Usuario Starsoft
                                                moneda = compra.moneda.ToString(),
                                                tipo_cambio = compra.tipo_cambio,
                                                porcent_iva = compra.porcent_iva,
                                                sub_total = subTotalPorProveedor, //sub_total = compraPorProveedor.sub_total,
                                                iva = ivaPorProveedor, //iva = compraPorProveedor.iva,
                                                total = totalPorProveedor,
                                                estatus = compra.estatus != null ? compra.estatus : "",
                                                comentarios = registroRequisicion.comentarios ?? "",
                                                bienes_servicios = compra.bienes_servicios ?? "",
                                                CFDI = compra.CFDI ?? "",
                                                tiempoEntregaDias = compra.tiempoEntregaDias,
                                                tiempoEntregaComentarios = compra.tiempoEntregaComentarios ?? "",
                                                estatusRegistro = true,
                                                anticipo = compra.anticipoBool,
                                                totalAnticipo = compra.totalAnticipo,
                                                st_impresa = "",
                                                colocada = false,
                                                correoProveedor = "",
                                                proveedor = 0,
                                                PERU_proveedor = proveedorStarsoft,
                                                PERU_cuentaCorriente = !string.IsNullOrEmpty(compra.PERU_cuentaCorriente) ? compra.PERU_cuentaCorriente.Split('-')[2] : "",
                                                PERU_formaPago = compra.PERU_formaPago ?? "",
                                                PERU_tipoCambio = compra.PERU_tipoCambio,
                                                PERU_tipoCompra = registroRequisicion.PERU_tipoRequisicion
                                            };

                                            _context.tblCom_OrdenCompra.Add(nuevaCompraSIGOPLAN);
                                            _context.SaveChanges();
                                            #endregion

                                            ultimaCompraStarsoft.CTNNUMERO = numeroCompraNueva;
                                            _starsoft.SaveChanges();

                                            #region Guardar Compra Detalle SIGOPLAN
                                            var partidaCompraSIGOPLAN = 1;

                                            foreach (var part in lstPartidas)
                                            {
                                                if (part.cantidad > 0)
                                                {
                                                    var nuevaCompraSIGOPLANDet = new tblCom_OrdenCompraDet
                                                    {
                                                        idOrdenCompra = nuevaCompraSIGOPLAN.id,
                                                        cc = nuevaCompraSIGOPLAN.cc,
                                                        numero = nuevaCompraSIGOPLAN.numero,
                                                        partida = partidaCompraSIGOPLAN++,
                                                        insumo = part.insumo,
                                                        fecha_entrega = part.fecha_entrega,
                                                        cantidad = part.cantidad,
                                                        precio = part.precio,
                                                        importe = part.precio * part.cantidad,
                                                        ajuste_cant = part.ajuste_cant,
                                                        ajuste_imp = part.ajuste_imp,
                                                        num_requisicion = part.num_requisicion,
                                                        part_requisicion = part.part_requisicion,
                                                        cant_recibida = part.cant_recibida,
                                                        imp_recibido = part.imp_recibido,
                                                        fecha_recibido = part.fecha_recibido,
                                                        cant_canc = part.cant_canc,
                                                        imp_canc = part.imp_canc,
                                                        acum_ant = part.acum_ant ?? default(decimal),
                                                        max_orig = part.max_orig ?? default(decimal),
                                                        max_ppto = part.max_ppto ?? default(decimal),
                                                        area = part.area ?? 0,
                                                        cuenta = part.cuenta ?? 0,
                                                        porcent_iva = part.porcent_iva ?? default(decimal),
                                                        iva = part.iva ?? default(decimal),
                                                        partidaDescripcion = part.partidaDescripcion ?? "",
                                                        noEconomico = part.noEconomico,
                                                        estatusRegistro = true
                                                    };

                                                    _context.tblCom_OrdenCompraDet.Add(nuevaCompraSIGOPLANDet);
                                                    _context.SaveChanges();

                                                    #region Update Partida Requisicion SIGOPLAN
                                                    var requisicionSIGOPLAN = _context.tblCom_Req.FirstOrDefault(x => x.estatusRegistro && x.cc == compra.cc && x.numero == part.num_requisicion && x.PERU_tipoRequisicion == registroRequisicion.PERU_tipoRequisicion);

                                                    if (requisicionSIGOPLAN != null)
                                                    {
                                                        var numeroPartida = part.part_requisicion;
                                                        var numeroInsumo = part.insumo;
                                                        var partidaRequisicionSIGOPLAN = _context.tblCom_ReqDet.FirstOrDefault(x =>
                                                            x.estatusRegistro &&
                                                            x.idReq == requisicionSIGOPLAN.id &&
                                                            x.partida == numeroPartida &&
                                                            x.insumo == numeroInsumo);

                                                        if (partidaRequisicionSIGOPLAN != null)
                                                        {
                                                            partidaRequisicionSIGOPLAN.cantOrdenada += part.cantidad;

                                                            _context.Entry(partidaRequisicionSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                                            _context.SaveChanges();
                                                        }
                                                    }
                                                    #endregion
                                                }
                                            }
                                            #endregion

                                            #region Guardar Compra Starsoft
                                            var siguienteConsecutivoAuditoria = "";

                                            //using (var _starsoftBDWENCO = new MainContextPeruStarSoftBDWENCO())
                                            //{
                                            //    siguienteConsecutivoAuditoria = (_starsoftBDWENCO.AUDITORIA_SISTEMAS.ToList().Max(x => Int32.Parse(x.COD_AUDITORIA)) + 1).ToString();
                                            //}

                                            var formaPagoDescripcion = "";

                                            if (!string.IsNullOrEmpty(compra.PERU_formaPago))
                                            {
                                                using (var _starsoftContabilidad = new MainContextPeruStarSoft003BDCOMUN())
                                                {
                                                    formaPagoDescripcion = _starsoftContabilidad.FORMA_PAGO.FirstOrDefault(x => x.COD_FP == compra.PERU_formaPago).DES_FP;
                                                }
                                            }

                                            var OC_CTACTE_PROV = "";
                                            var BCO_CTACTE_PROV = "";
                                            var BCO_DESCRIPCION = "";

                                            if (!string.IsNullOrEmpty(compra.PERU_cuentaCorriente))
                                            {
                                                BCO_CTACTE_PROV = compra.PERU_cuentaCorriente.Split('-')[1];
                                                OC_CTACTE_PROV = compra.PERU_cuentaCorriente.Split('-')[2];

                                                using (var _starsoftContabilidad = new MainContextPeruStarSoft003BDCONTABILIDAD())
                                                {
                                                    var BANCO = _starsoftContabilidad.BANCO.FirstOrDefault(x => x.BAN_CODIGO == BCO_CTACTE_PROV);
                                                    BCO_DESCRIPCION = BANCO == null ? "S/D" : BANCO.BAN_DESCRIPCION;
                                                }
                                            }

                                            var csolict = "01";
                                            var csitord = "01";
                                            var usuarioEK_solicito = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.empleado == registroRequisicion.solicito);
                                            if (usuarioEK_solicito != null)
                                            {
                                                var usuarioStar_solicito = _context.tblP_Usuario_Starsoft.FirstOrDefault(x => x.sigoplan_usuario_id == usuarioEK_solicito.idUsuario && x.registroActivo);
                                                if (usuarioStar_solicito != null)
                                                {
                                                    csolict = usuarioStar_solicito.starsoft_usuario_id;
                                                }
                                            }
                                            var usuarioStar_comprador = _context.tblP_Usuario_Starsoft_Compradores.FirstOrDefault(x => x.registroActivo && x.sigoplan_usuario_id == vSesiones.sesionUsuarioDTO.id);
                                            if (usuarioStar_comprador != null)
                                            {
                                                csitord = usuarioStar_comprador.starsoft_usuario_id;
                                            }

                                            if (registroRequisicion.PERU_tipoRequisicion == "RQ") //Compras Físicas
                                            {
                                                #region Registro COMOVC
                                                var registroCompraStarsoft = new COMOVC();

                                                registroCompraStarsoft.OC_CNUMORD = nuevaCompraSIGOPLAN.numero.ToString("D13");
                                                registroCompraStarsoft.OC_DFECDOC = DateTime.Now;
                                                registroCompraStarsoft.OC_CCODPRO = proveedorStarsoft;
                                                registroCompraStarsoft.OC_CRAZSOC = proveedorStarsoftNombre;
                                                registroCompraStarsoft.OC_CDIRPRO = "-";
                                                registroCompraStarsoft.OC_CCOTIZA = "";
                                                registroCompraStarsoft.OC_CCODMON = compra.moneda == 4 ? "MN" : compra.moneda == 2 ? "ME" : "";
                                                registroCompraStarsoft.OC_CFORPAG = formaPagoDescripcion;
                                                registroCompraStarsoft.OC_NTIPCAM = compra.tipo_cambio;
                                                registroCompraStarsoft.OC_DFECENT = DateTime.Now.AddDays(compra.tiempoEntregaDias);
                                                registroCompraStarsoft.OC_COBSERV = "";
                                                registroCompraStarsoft.OC_CSOLICT = csitord;
                                                registroCompraStarsoft.OC_CTIPENV = null;
                                                registroCompraStarsoft.OC_CENTREG = "CAMINOS DEL INCA 244 OF. 803 SANTIAGO DE SURCO";
                                                registroCompraStarsoft.OC_CSITORD = "00";
                                                registroCompraStarsoft.OC_NIMPORT = subTotalPorProveedor;
                                                registroCompraStarsoft.OC_NDESCUE = 0;
                                                registroCompraStarsoft.OC_NIGV = ivaPorProveedor;
                                                registroCompraStarsoft.OC_NVENTA = totalPorProveedor;
                                                registroCompraStarsoft.OC_DFECACT = DateTime.Now;
                                                registroCompraStarsoft.OC_CHORA = DateTime.Now.ToShortTimeString().Substring(0, 5);
                                                registroCompraStarsoft.OC_CUSUARI = "1"; //Se coloca 1 de manera temporal. Cambiar esto.
                                                registroCompraStarsoft.OC_CFECDOC = null;
                                                registroCompraStarsoft.OC_CCONVER = compra.PERU_tipoCambio;
                                                registroCompraStarsoft.OC_CFACNOMBRE = "GRUPO CONSTRUCCIONES PLANIFICA";
                                                registroCompraStarsoft.OC_CFACRUC = "20609408261";
                                                registroCompraStarsoft.OC_CFACDIREC = "CAMINOS DEL INCA 244 OF. 803 SANTIAGO DE SURCO";
                                                registroCompraStarsoft.OC_CDOCREF = registroRequisicion.PERU_tipoRequisicion;
                                                registroCompraStarsoft.OC_CNRODOCREF = registroRequisicion.numero.ToString("D10");
                                                registroCompraStarsoft.OC_CTACTE_PROV = OC_CTACTE_PROV;
                                                registroCompraStarsoft.BCO_CTACTE_PROV = BCO_CTACTE_PROV;
                                                registroCompraStarsoft.BCO_DESCRIPCION = BCO_DESCRIPCION;
                                                registroCompraStarsoft.OC_ORDFAB = "";
                                                registroCompraStarsoft.OC_DOCORIGEN = "";
                                                registroCompraStarsoft.OC_NIMPPERC = 0;
                                                registroCompraStarsoft.OC_NOMTRAN = "";
                                                registroCompraStarsoft.OC_RUCTRAN = "";
                                                registroCompraStarsoft.OC_DIRTRAN = "";
                                                registroCompraStarsoft.OC_TELFTRAN = "";
                                                registroCompraStarsoft.OC_CONTTRAN = "";
                                                registroCompraStarsoft.OC_DESTTRAN = "";
                                                registroCompraStarsoft.OC_SOLICITA = csolict;
                                                registroCompraStarsoft.OC_CTIPOC = null;
                                                registroCompraStarsoft.OC_NFLETE = 0;
                                                registroCompraStarsoft.OC_NSEGURO = 0;
                                                registroCompraStarsoft.OC_DESPACHO = "";
                                                registroCompraStarsoft.COD_AUDITORIA = siguienteConsecutivoAuditoria;
                                                registroCompraStarsoft.TIPO_USUARIO = "A";
                                                registroCompraStarsoft.NOMBRE_USUARIO = "1";
                                                registroCompraStarsoft.CARGO_USUARIO = null;
                                                registroCompraStarsoft.ESTADO_PROVEEDOR = null;
                                                registroCompraStarsoft.GLOSA_PROVEEDOR = null;
                                                registroCompraStarsoft.RESPUESTA_PROVEEDOR = null;
                                                registroCompraStarsoft.FIRMA_PROVEEDOR = null;
                                                registroCompraStarsoft.FECHA_HORA_PROVEEDOR = null;
                                                registroCompraStarsoft.FECHAHORA_CAMBIOESTADO = DateTime.Now;
                                                registroCompraStarsoft.COD_FP = compra.PERU_formaPago ?? "";
                                                registroCompraStarsoft.TipoDocumento = "OC";

                                                _starsoft.COMOVC.Add(registroCompraStarsoft);
                                                _starsoft.SaveChanges();
                                                #endregion

                                                #region Registros COMOVD
                                                var partida = 1;

                                                foreach (var part in lstPartidas)
                                                {
                                                    if (part.cantidad > 0)
                                                    {
                                                        var registroInsumoStarsoft = _starsoft.MAEART.FirstOrDefault(x => x.ACODIGO == ("0" + part.insumo));

                                                        var registroDetalleStarsoft = new COMOVD();

                                                        registroDetalleStarsoft.OC_CNUMORD = nuevaCompraSIGOPLAN.numero.ToString("D13");
                                                        registroDetalleStarsoft.OC_CCODPRO = proveedorStarsoft;
                                                        registroDetalleStarsoft.OC_DFECDOC = DateTime.Now;
                                                        registroDetalleStarsoft.OC_CITEM = partida.ToString("D3");
                                                        registroDetalleStarsoft.OC_CCODIGO = "0" + part.insumo;
                                                        registroDetalleStarsoft.OC_CCODREF = registroInsumoStarsoft.ACODIGO2;
                                                        registroDetalleStarsoft.OC_CDESREF = registroInsumoStarsoft.ADESCRI;
                                                        registroDetalleStarsoft.OC_CUNIDAD = registroInsumoStarsoft.AUNIDAD;
                                                        registroDetalleStarsoft.OC_CUNIREF = "";
                                                        registroDetalleStarsoft.OC_NFACTOR = 0;
                                                        registroDetalleStarsoft.OC_NCANTID = part.cantidad;
                                                        registroDetalleStarsoft.OC_NPREUNI = part.precio;
                                                        registroDetalleStarsoft.OC_NDSCPOR = 0;
                                                        registroDetalleStarsoft.OC_NDESCTO = 0;
                                                        registroDetalleStarsoft.OC_NIGV = part.precio * (compra.porcent_iva / 100);
                                                        registroDetalleStarsoft.OC_NIGVPOR = compra.porcent_iva;
                                                        registroDetalleStarsoft.OC_NPRENET = part.cantidad * part.precio;
                                                        registroDetalleStarsoft.OC_NTOTVEN = part.cantidad * part.precio;
                                                        registroDetalleStarsoft.OC_NTOTNET = 0;
                                                        registroDetalleStarsoft.OC_NCANTEN = 0;
                                                        registroDetalleStarsoft.OC_NCANSAL = part.cantidad;
                                                        registroDetalleStarsoft.OC_COMENTA = "";
                                                        registroDetalleStarsoft.OC_CESTADO = "";
                                                        registroDetalleStarsoft.OC_FUNICOM = "";
                                                        registroDetalleStarsoft.OC_NRECIBI = 0;
                                                        registroDetalleStarsoft.OC_CCOMEN1 = "";
                                                        registroDetalleStarsoft.OC_CCOMEN2 = "";
                                                        registroDetalleStarsoft.OC_GLOSA = part.partidaDescripcion;
                                                        registroDetalleStarsoft.OC_DORDFAB = "";
                                                        registroDetalleStarsoft.CENTCOST = compra.cc;
                                                        registroDetalleStarsoft.OC_N_PERCPOR = 0;
                                                        registroDetalleStarsoft.OC_N_PERC = 0;
                                                        registroDetalleStarsoft.OC_PRECIOVEN = part.precio;
                                                        registroDetalleStarsoft.REQITEM_REF = null;

                                                        _starsoft.COMOVD.Add(registroDetalleStarsoft);
                                                        _starsoft.SaveChanges();

                                                        partida++;
                                                    }
                                                }
                                                #endregion
                                            }
                                            else if (registroRequisicion.PERU_tipoRequisicion == "RS") //Compras Servicios
                                            {
                                                #region Registro COMOVC_S
                                                var registroCompraServicioStarsoft = new COMOVC_S();

                                                registroCompraServicioStarsoft.OC_CNUMORD = nuevaCompraSIGOPLAN.numero.ToString("D13");
                                                registroCompraServicioStarsoft.OC_DFECDOC = DateTime.Now;
                                                registroCompraServicioStarsoft.OC_CCODPRO = proveedorStarsoft;
                                                registroCompraServicioStarsoft.OC_CRAZSOC = proveedorStarsoftNombre;
                                                registroCompraServicioStarsoft.OC_CDIRPRO = "-";
                                                registroCompraServicioStarsoft.OC_CCOTIZA = "";
                                                registroCompraServicioStarsoft.OC_CCODMON = compra.moneda == 4 ? "MN" : compra.moneda == 2 ? "ME" : "";
                                                registroCompraServicioStarsoft.OC_CFORPAG = formaPagoDescripcion;
                                                registroCompraServicioStarsoft.OC_NTIPCAM = compra.tipo_cambio;
                                                registroCompraServicioStarsoft.OC_DFECENT = DateTime.Now;
                                                registroCompraServicioStarsoft.OC_COBSERV = "";
                                                registroCompraServicioStarsoft.OC_CSOLICT = csolict;
                                                registroCompraServicioStarsoft.OC_CTIPENV = null;
                                                registroCompraServicioStarsoft.OC_CENTREG = "CAMINOS DEL INCA 244 OF. 803 SANTIAGO DE SURCO";
                                                registroCompraServicioStarsoft.OC_CSITORD = "00";
                                                registroCompraServicioStarsoft.OC_NIMPORT = subTotalPorProveedor;
                                                registroCompraServicioStarsoft.OC_NDESCUE = 0;
                                                registroCompraServicioStarsoft.OC_NIGV = ivaPorProveedor;
                                                registroCompraServicioStarsoft.OC_NVENTA = totalPorProveedor;
                                                registroCompraServicioStarsoft.OC_DFECACT = DateTime.Now;
                                                registroCompraServicioStarsoft.OC_CHORA = DateTime.Now.ToShortTimeString().Substring(0, 5);
                                                registroCompraServicioStarsoft.OC_CUSUARI = "1"; //Se coloca 1 de manera temporal. Cambiar esto.
                                                registroCompraServicioStarsoft.OC_CFECDOC = null;
                                                registroCompraServicioStarsoft.OC_CCONVER = compra.PERU_tipoCambio;
                                                registroCompraServicioStarsoft.OC_CFACNOMBRE = "GRUPO CONSTRUCCIONES PLANIFICA";
                                                registroCompraServicioStarsoft.OC_CFACRUC = compra.PERU_proveedor;
                                                registroCompraServicioStarsoft.OC_CFACDIREC = "CAMINOS DEL INCA 244 OF. 803 SANTIAGO DE SURCO";
                                                registroCompraServicioStarsoft.OC_CDOCREF = registroRequisicion.PERU_tipoRequisicion;
                                                registroCompraServicioStarsoft.OC_ORDFAB = "";
                                                registroCompraServicioStarsoft.OC_CTACTE_PROV = OC_CTACTE_PROV;
                                                registroCompraServicioStarsoft.BCO_CTACTE_PROV = BCO_CTACTE_PROV;
                                                registroCompraServicioStarsoft.BCO_DESCRIPCION = BCO_DESCRIPCION;
                                                registroCompraServicioStarsoft.OC_SOLICITA = csolict;
                                                registroCompraServicioStarsoft.OC_CNRODOCREF = registroRequisicion.numero.ToString("D10");
                                                registroCompraServicioStarsoft.OC_TIPOFACT = 1;
                                                registroCompraServicioStarsoft.OC_HONOPOR = 0;
                                                registroCompraServicioStarsoft.COD_AUDITORIA = siguienteConsecutivoAuditoria;
                                                registroCompraServicioStarsoft.TIPO_USUARIO = "A";
                                                registroCompraServicioStarsoft.NOMBRE_USUARIO = "1";
                                                registroCompraServicioStarsoft.CARGO_USUARIO = "";
                                                registroCompraServicioStarsoft.ESTADO_PROVEEDOR = null;
                                                registroCompraServicioStarsoft.GLOSA_PROVEEDOR = null;
                                                registroCompraServicioStarsoft.RESPUESTA_PROVEEDOR = null;
                                                registroCompraServicioStarsoft.FIRMA_PROVEEDOR = null;
                                                registroCompraServicioStarsoft.FECHA_HORA_PROVEEDOR = null;
                                                registroCompraServicioStarsoft.FECHAHORA_CAMBIOESTADO = DateTime.Now;
                                                registroCompraServicioStarsoft.COD_FP = compra.PERU_formaPago ?? "";
                                                registroCompraServicioStarsoft.TipoDocumento = "OS";

                                                _starsoft.COMOVC_S.Add(registroCompraServicioStarsoft);
                                                _starsoft.SaveChanges();
                                                #endregion

                                                #region Registros COMOVD_S
                                                var partida = 1;

                                                foreach (var part in lstPartidas)
                                                {
                                                    if (part.cantidad > 0)
                                                    {
                                                        var registroInsumoStarsoft = _starsoft.MAEART.FirstOrDefault(x => x.ACODIGO == ("0" + part.insumo));

                                                        var registroDetalleServicioStarsoft = new COMOVD_S();

                                                        registroDetalleServicioStarsoft.OC_CNUMORD = nuevaCompraSIGOPLAN.numero.ToString("D13");
                                                        registroDetalleServicioStarsoft.OC_CCODPRO = proveedorStarsoft;
                                                        registroDetalleServicioStarsoft.OC_DFECDOC = DateTime.Now;
                                                        registroDetalleServicioStarsoft.OC_CITEM = partida.ToString("D3");
                                                        registroDetalleServicioStarsoft.OC_CODSERVICIO = "0" + part.insumo;
                                                        registroDetalleServicioStarsoft.OC_CDESREF = registroInsumoStarsoft.ADESCRI;
                                                        registroDetalleServicioStarsoft.OC_CANT = part.cantidad;
                                                        registroDetalleServicioStarsoft.OC_GLOSA = part.partidaDescripcion;
                                                        registroDetalleServicioStarsoft.OC_NPREUNI = part.precio;
                                                        registroDetalleServicioStarsoft.OC_NDSCPOR = 0;
                                                        registroDetalleServicioStarsoft.OC_NDESCTO = 0;
                                                        registroDetalleServicioStarsoft.OC_NIGV = part.precio * (compra.porcent_iva / 100); ;
                                                        registroDetalleServicioStarsoft.OC_NIGVPOR = compra.porcent_iva;
                                                        registroDetalleServicioStarsoft.OC_NPRENET = part.precio * part.cantidad;
                                                        registroDetalleServicioStarsoft.OC_NTOTVEN = 0;
                                                        registroDetalleServicioStarsoft.OC_NTOTNET = part.precio * part.cantidad;
                                                        registroDetalleServicioStarsoft.OC_COMENTA = "";
                                                        registroDetalleServicioStarsoft.OC_CESTADO = "";
                                                        registroDetalleServicioStarsoft.OC_FUNICOM = "";
                                                        registroDetalleServicioStarsoft.OC_NRECIBI = 0;
                                                        registroDetalleServicioStarsoft.OC_CCOMEN1 = "";
                                                        registroDetalleServicioStarsoft.OC_CCOMEN2 = "";
                                                        registroDetalleServicioStarsoft.OC_NCANTEN = 0;
                                                        registroDetalleServicioStarsoft.OC_NCANSAL = part.cantidad;
                                                        registroDetalleServicioStarsoft.OC_CREQSER = registroRequisicion.numero.ToString("D10");
                                                        registroDetalleServicioStarsoft.OC_DORDFAB = "";
                                                        registroDetalleServicioStarsoft.OC_CUENTA = "";
                                                        registroDetalleServicioStarsoft.CENTCOST = compra.cc;
                                                        registroDetalleServicioStarsoft.OC_ITEMOS = partida.ToString();
                                                        registroDetalleServicioStarsoft.REQITEM_REF = partida;

                                                        _starsoft.COMOVD_S.Add(registroDetalleServicioStarsoft);
                                                        _starsoft.SaveChanges();

                                                        partida++;
                                                    }
                                                }
                                                #endregion
                                            }
                                            #endregion

                                            #region Obtener VoBos y Autorizaciones
                                            var objCompra = new OrdenCompraDTO { cc = nuevaCompraSIGOPLAN.cc, numero = nuevaCompraSIGOPLAN.numero, esOC_Interna = false, PERU_tipoCompra = nuevaCompraSIGOPLAN.PERU_tipoCompra };
                                            var vobos = getVobos(objCompra);
                                            var autorizaciones = getAutorizaciones(objCompra);

                                            compra.stringVobosAutorizaciones += "[" + nuevaCompraSIGOPLAN.cc + "-" + nuevaCompraSIGOPLAN.numero + " VoBos: ";

                                            foreach (var v in vobos)
                                            {
                                                compra.stringVobosAutorizaciones += v.usu_numero + "-" + v.usu_nombre + " ";
                                            }

                                            compra.stringVobosAutorizaciones += "Autorizaciones: ";

                                            foreach (var a in autorizaciones)
                                            {
                                                compra.stringVobosAutorizaciones += (int)a.usu_numero + "-" + (string)a.usu_nombre + " ";
                                            }

                                            compra.stringVobosAutorizaciones += "] ";
                                            #endregion

                                            numerosCompras.Add(numeroCompraNueva);
                                        }

                                        dbSigoplanTransaction.Commit();
                                        dbStarsoftTransaction.Commit();

                                        List<string> listStringNumerosCompras = numerosCompras.ConvertAll<string>(x => compra.cc + "-" + x.ToString());

                                        result.Add("info", compra);
                                        result.Add("numerosCompras", numerosCompras);
                                        result.Add("numerosComprasString", string.Join(", ", listStringNumerosCompras));
                                        result.Add("partidas", compra.lstPartidas);
                                        result.Add("pagos", compra.lstPagos);
                                        result.Add("retenciones", compra.lstRetenciones);

                                        result.Add(SUCCESS, true);
                                    }
                                    catch (Exception e)
                                    {
                                        dbSigoplanTransaction.Rollback();
                                        dbStarsoftTransaction.Rollback();

                                        LogError(0, 0, "OrdenCompraController", "guardarNuevaCompraPeru", e, AccionEnum.AGREGAR, 0, new { compra = compra });

                                        result.Add(MESSAGE, e.Message);
                                        result.Add(SUCCESS, false);
                                    }
                                }
                            }
                        }
                        #endregion
                        break;
                    }
                case EmpresaEnum.Colombia:
                    {
                        #region COLOMBIA
                        var _numeroCompraParaBL = 0;

                        using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                        {
                            using (var con = checkConexionProductivo())
                            {
                                using (var trans = con.BeginTransaction())
                                {
                                    try
                                    {
                                        #region Validación requisicion validada por almacén
                                        var flagNoInventariable = false;
                                        var flagFamiliaExcepcion = true;

                                        var listaTipoGrupoEK = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM grupos_insumo")).ToObject<List<dynamic>>();
                                        var listaFamiliasExcepcion = _context.tblCom_FamiliasExcepcionInventariables.Where(x => x.estatus).Select(x => x.familia).ToList();

                                        foreach (var part in compra.lstPartidas)
                                        {
                                            var familia = part.insumo.ToString().Substring(0, 3);

                                            if (!listaFamiliasExcepcion.Contains(familia))
                                            {
                                                flagFamiliaExcepcion = false;
                                            }

                                            var tipo = Int32.Parse(part.insumo.ToString().Substring(0, 1));
                                            var grupo = Int32.Parse(part.insumo.ToString().Substring(1, 2));

                                            var tipoGrupoEK = listaTipoGrupoEK.FirstOrDefault(x => (int)x.tipo_insumo == tipo && (int)x.grupo_insumo == grupo);

                                            if (tipoGrupoEK != null)
                                            {
                                                if ((string)tipoGrupoEK.inventariado.Value == "N")
                                                {
                                                    flagNoInventariable = true;
                                                }
                                            }
                                        }
                                        var requisicionValidada = _context.tblCom_Req.ToList().FirstOrDefault(x => x.estatusRegistro && x.cc == compra.cc && x.numero == compra.lstPartidas[0].num_requisicion);

                                        //Si la compra es de insumos inventariables y no tiene familias excepción se pasa a verificar que la requisición sea validada por almacén.
                                        if (!flagNoInventariable)
                                        {
                                            if (!flagFamiliaExcepcion)
                                            {
                                                if (requisicionValidada != null)
                                                {
                                                    if (!requisicionValidada.validadoCompras)
                                                    {
                                                        throw new Exception("La requisición \"" + compra.cc + "-" + compra.lstPartidas[0].num_requisicion + "\" no ha sido validada por almacén. No se puede proceder con la compra.");
                                                    }
                                                }
                                            }
                                        }

                                        //Si pasa la validación se le pone validado por almacén y compras por si no lo tenía.
                                        if (requisicionValidada != null)
                                        {
                                            requisicionValidada.validadoCompras = true;
                                            requisicionValidada.validadoAlmacen = true;

                                            _context.SaveChanges();
                                        }
                                        #endregion

                                        #region Validación precio negativo o precio en cero
                                        //if (!compra.lstPartidas.Any(x => x.num_requisicion == 0))
                                        //{
                                        if (compra.lstPartidas.Where(x => x.cantidad > 0).Any(x => x.precio <= 0))
                                        {
                                            throw new Exception("El precio de las partidas no puede tener un valor negativo o en cero.");
                                        }
                                        //}
                                        #endregion

                                        #region Validación para no comprar más de lo requerido pendiente
                                        var partidasRequisicionEK = consultaCheckProductivo(
                                            string.Format(@"SELECT * FROM so_requisicion_det WHERE cc = '{0}' AND numero = {1}", compra.cc, compra.lstPartidas[0].num_requisicion)
                                        );

                                        if (partidasRequisicionEK != null)
                                        {
                                            var partidasRequisicion = (List<dynamic>)partidasRequisicionEK.ToObject<List<dynamic>>();

                                            foreach (var partReq in partidasRequisicion)
                                            {
                                                var partidaCompra = compra.lstPartidas.FirstOrDefault(x => x.part_requisicion == (int)partReq.partida && x.insumo == (int)partReq.insumo);

                                                if (partidaCompra != null)
                                                {
                                                    if (partidaCompra.cantidad > 0)
                                                    {
                                                        var cantidadPartida = Convert.ToDecimal(partReq.cantidad, CultureInfo.InvariantCulture);
                                                        var cantidadOrdenada = Convert.ToDecimal(partReq.cant_ordenada, CultureInfo.InvariantCulture);
                                                        var cantidadCancelada = Convert.ToDecimal(partReq.cant_cancelada, CultureInfo.InvariantCulture);
                                                        var cantidadPendiente = cantidadPartida - cantidadOrdenada - cantidadCancelada;

                                                        if (cantidadPendiente > 0)
                                                        {
                                                            if (partidaCompra.cantidad > cantidadPendiente)
                                                            {
                                                                throw new Exception("No se puede comprar más de lo requerido. Partida Compra: #" + partidaCompra.partida + ". Partida Requisición: #" + (int)partReq.partida + ".");
                                                            }
                                                        }
                                                        else
                                                        {
                                                            throw new Exception("La partida #" + (int)partReq.partida + " de la requisición no tiene cantidad pendiente por comprar.");
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    throw new Exception("No coincide la información de la partida de la requisición con la partida de la compra: Partida Requisición: " + partReq.partida + ". Insumo: " + (int)partReq.insumo);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("No se encuentra la información de las partidas de la requisición \"" + compra.cc + "-" + compra.lstPartidas[0] + "\".");
                                        }
                                        #endregion

                                        #region Validación Presupuesto Global
                                        var presupuesto = getPresupuestoCC(compra.cc);

                                        if (presupuesto != null)
                                        {
                                            var presupuestoGlobal = Convert.ToDecimal(presupuesto.presupuestoGlobal, CultureInfo.InvariantCulture);
                                            var presupuestoActual = Convert.ToDecimal(presupuesto.presupuestoActual, CultureInfo.InvariantCulture);

                                            if (presupuestoGlobal < (presupuestoActual + compra.sub_total))
                                            {
                                                throw new Exception("El presupuesto actual sobrepasa el global para el centro de costo.");
                                            }
                                        }
                                        #endregion

                                        #region Validación para compra autorecepcionable sin almacén y empleado capturado
                                        if (compra.bit_autorecepcion == "S")
                                        {
                                            if (compra.almacen_autorecepcion == null || compra.almacen_autorecepcion == 0 || compra.empleado_autorecepcion == null || compra.empleado_autorecepcion == 0)
                                            {
                                                throw new Exception("Debe capturar un almacén y un empleado de autorecepción para las compras autorecepcionables.");
                                            }
                                        }
                                        #endregion

                                        #region Calificación encuestas
                                        var compraRequi = compra.lstPartidas[0].num_requisicion;
                                        var compraCC = compra.cc.ToUpper();
                                        var calificacionProveedores = _context.tblCom_CC_Calificacion
                                                    .Where(w =>
                                                        w.esActivo &&
                                                        w.Numero == compraRequi &&
                                                        w.CC.ToUpper() == compraCC)
                                                    .OrderByDescending(o => o.Calificacion)
                                                    .ToList();
                                        var laCompraTienePartidasNoOptimas = false;
                                        var partidasNoOptimas = new List<sp_proveedoresDTO>();
                                        var mismoProveedor = true;

                                        var permisosCompradoresCalificacion = _context.tblCom_CC_PermisoCompradorCalificarOC.Where(x => x.registroActivo).Select(x => x.usuarioId).ToList();
                                        #endregion

                                        //Checa cuantos proveedores distintos se capturaron para crear una compra por cada uno
                                        var proveedores = compra.lstPartidas.Where(x => x.cantidad > 0).Select(x => x.proveedorDistinto).Distinct().ToList();
                                        List<int> numerosCompras = new List<int>();

                                        #region Verifica si todos los proveedores de las partidas son los mismos para Calificación de encuestas
                                        if (proveedores.Count > 1)
                                        {
                                            mismoProveedor = false;
                                        }
                                        #endregion
                                        foreach (var prov in proveedores)
                                        {
                                            #region Validación Proveedor-Subcontratista Bloqueado
                                            var reglaCompras = _context.tblP_ReglasSubcontratistasBloqueo.FirstOrDefault(x => x.id == 1);

                                            if (reglaCompras != null)
                                            {
                                                if (reglaCompras.aplicar)
                                                {
                                                    var subcontratistaDB = _context.sp_Select<dynamic>(new StoreProcedureDTO
                                                    {
                                                        nombre = "spSUBCONTRATISTAS_PROVEEDOR_POR_NUMERO",
                                                        parametros = new List<OdbcParameterDTO> { new OdbcParameterDTO { nombre = "numeroProveedor", tipoSql = SqlDbType.Int, valor = prov } }
                                                    });

                                                    if (subcontratistaDB.Count() > 0)
                                                    {
                                                        if (Convert.ToInt32(subcontratistaDB[0].tipoBloqueoId) > 0)
                                                        {
                                                            throw new Exception("El proveedor " + prov + " está bloqueado.");
                                                        }
                                                    }
                                                }
                                            }
                                            #endregion

                                            var sumatoriaRetencion = compra.lstRetenciones != null && compra.lstRetenciones.Count > 0 ? Math.Round(compra.lstRetenciones.Select(x => x.importe).Sum(), 2) : 0;
                                            var diferenciaRetencion = sumatoriaRetencion - Math.Round(compra.rentencion_despues_iva, 2);

                                            //Se revisa que la sumatoria de la lista de retenciones sea parecida al valor de la propiedad "compra.rentencion_despues_iva".
                                            if (diferenciaRetencion > 1 || diferenciaRetencion < -1)
                                            {
                                                throw new Exception("Error al capturar las retenciones.");
                                            }

                                            var infoProveedor = getProveedorInfo(prov.ToString());
                                            var lstPartidas = compra.lstPartidas.Where(x => x.cantidad > 0 && x.proveedorDistinto == prov).ToList();

                                            #region Validación Proveedor-Subcontratista Existente por Insumo
                                            if (reglaCompras != null)
                                            {
                                                var listaValidacionInsumoSubcontratista = _context.tblCom_ValidacionInsumoSubcontratista.Where(x => x.estatus).ToList();

                                                if (listaValidacionInsumoSubcontratista.Count() > 0)
                                                {
                                                    var subcontratistaDB = _context.sp_Select<dynamic>(new StoreProcedureDTO
                                                    {
                                                        nombre = "spSUBCONTRATISTAS_PROVEEDOR_POR_NUMERO",
                                                        parametros = new List<OdbcParameterDTO> { new OdbcParameterDTO { nombre = "numeroProveedor", tipoSql = SqlDbType.Int, valor = prov } }
                                                    });

                                                    foreach (var registroValidacion in listaValidacionInsumoSubcontratista)
                                                    {
                                                        if (registroValidacion.tipo == 1) //Validación por tipo de insumo
                                                        {
                                                            var tipoInsumoValidacion = registroValidacion.codigo;
                                                            List<int> listaTiposInsumos = lstPartidas.Select(x => Int32.Parse((x.insumo.ToString()[0]).ToString())).ToList();

                                                            if (listaTiposInsumos.Any(x => x == tipoInsumoValidacion))
                                                            {
                                                                if (subcontratistaDB.Count() == 0)
                                                                {
                                                                    //throw new Exception("El proveedor no está registrado como subcontratista.");
                                                                }
                                                            }
                                                        }
                                                        else if (registroValidacion.tipo == 2) //Validación por insumo específico
                                                        {
                                                            var insumoEspecificoValidacion = registroValidacion.codigo;

                                                            if (lstPartidas.Any(x => x.insumo == insumoEspecificoValidacion))
                                                            {
                                                                if (subcontratistaDB.Count() == 0)
                                                                {
                                                                    //throw new Exception("El proveedor no está registrado como subcontratista.");
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            #endregion

                                            var ultimaCompraEK = consultaCheckProductivo(
                                                string.Format(@"SELECT TOP 1 numero FROM so_orden_compra WHERE cc = '{0}' ORDER BY numero DESC", compra.cc)
                                            );
                                            var numeroCompraNueva = 0;

                                            if (ultimaCompraEK != null)
                                            {
                                                var ultimaCompra = ((List<OrdenCompraDTO>)ultimaCompraEK.ToObject<List<OrdenCompraDTO>>())[0];

                                                numeroCompraNueva = ultimaCompra.numero;
                                            }

                                            var requisicionEK = ((List<dynamic>)consultaCheckProductivo(
                                                string.Format(@"SELECT * FROM so_requisicion WHERE cc = '{0}' AND numero = {1}", compra.cc, lstPartidas[0].num_requisicion)
                                            ).ToObject<List<dynamic>>())[0];

                                            //compraPorProveedor.numero = numeroCompraNueva + 1;
                                            numerosCompras.Add(numeroCompraNueva + 1);
                                            _numeroCompraParaBL = numeroCompraNueva + 1;

                                            #region Calificación encuestas
                                            /*SOLO LOS USUARIOS JOSE PEDRO LOPEZ Y ROGELIO PACHECO
                                 * PUEDEN DAR DE ALTA REGISTROS DE PRUEBAS
                                 * ID: 3287 JUAN PEDRO CARREON VILLA
                                 * ID: 1060 ROGELIO PACHECO VALENCIA
                                 * ID: 3807 OSCAR VALENCIA
                                 * update 18/02/2022 ahora los usuarios registrados en la tabla tblCom_CC_PermisoCompradorCalificarOC son los que pueden dar de alta registros
                                 * var permisosCompradoresCalificacion = _context.tblCom_CC_PermisoCompradorCalificarOC.Where(x => x.registroActivo).Select(x => x.usuarioId).ToList();
                                */

                                            if (!mismoProveedor)
                                            {
                                                //var idUsuariosPrueba = new List<int> { 3287, 1060 };
                                                if (/*idUsuariosPrueba.Contains(vSesiones.sesionUsuarioDTO.id)*/permisosCompradoresCalificacion.Contains(vSesiones.sesionUsuarioDTO.id))
                                                {
                                                    if (calificacionProveedores.Count > 0)
                                                    {
                                                        var calificacionPartidas = new List<tblCom_CC_CalificacionPartida>();
                                                        foreach (var caliProv in calificacionProveedores)
                                                        {
                                                            calificacionPartidas.AddRange(caliProv.partidas);
                                                        }

                                                        foreach (var partida in lstPartidas)
                                                        {
                                                            var caliPartida = calificacionPartidas.Where(f => f.numeroPartida == partida.partida).ToList();

                                                            if (caliPartida.Any(a => a.calificacionProv.Proveedor == prov))
                                                            {
                                                                var OptimaNoOptima = caliPartida.FirstOrDefault(f => f.numeroPartida == partida.partida && f.calificacionProv.Proveedor == partida.proveedorDistinto);

                                                                if (OptimaNoOptima != null)
                                                                {
                                                                    if (OptimaNoOptima.idTipoCalificacionPartida == (int)TipoCalificacion.Optima)
                                                                    {
                                                                        var proveedorOptimo = new tblCom_CC_ProveedorNoOptimo();
                                                                        proveedorOptimo.CalificacionId = OptimaNoOptima.idCalificacion;
                                                                        proveedorOptimo.NumeroCompra = numeroCompraNueva + 1;
                                                                        proveedorOptimo.Estatus = true;
                                                                        proveedorOptimo.VoBo = true;
                                                                        proveedorOptimo.IdTipoCalificacion = OptimaNoOptima.idTipoCalificacionPartida;
                                                                        proveedorOptimo.Fecha = DateTime.Now;
                                                                        proveedorOptimo.FechaCreacion = DateTime.Now;
                                                                        proveedorOptimo.UsuarioIdVoBo = vSesiones.sesionUsuarioDTO.id;
                                                                        proveedorOptimo.idUsuario = vSesiones.sesionUsuarioDTO.id;
                                                                        proveedorOptimo.IdPartida = OptimaNoOptima.id;

                                                                        _context.tblCom_CC_ProveedorNoOptimo.Add(proveedorOptimo);
                                                                        _context.SaveChanges();
                                                                    }
                                                                    else
                                                                    {
                                                                        if ((partida.importe * (compra.moneda == 2 ? infoProveedor.monedaTipoCambio : 1)) < 20000 && string.IsNullOrEmpty(partida.partidaDescripcion))
                                                                        {
                                                                            throw new Exception("La partida " + partida.partida + " debe de contar con una descripción indicando porque se selecciono a el proveedor no optimo segun la información del cuadro comparativo");
                                                                        }

                                                                        var proveedorNoOptimo = new tblCom_CC_ProveedorNoOptimo();
                                                                        proveedorNoOptimo.CalificacionId = OptimaNoOptima.idCalificacion;
                                                                        proveedorNoOptimo.NumeroCompra = numeroCompraNueva + 1;
                                                                        proveedorNoOptimo.Estatus = true;
                                                                        proveedorNoOptimo.VoBo = (partida.importe * (compra.moneda == 2 ? infoProveedor.monedaTipoCambio : 1)) < 20000 && !string.IsNullOrEmpty(partida.partidaDescripcion);
                                                                        proveedorNoOptimo.IdTipoCalificacion = OptimaNoOptima.idTipoCalificacionPartida;
                                                                        proveedorNoOptimo.Fecha = DateTime.Now;
                                                                        proveedorNoOptimo.FechaCreacion = DateTime.Now;
                                                                        proveedorNoOptimo.UsuarioIdVoBo = vSesiones.sesionUsuarioDTO.id;
                                                                        proveedorNoOptimo.idUsuario = vSesiones.sesionUsuarioDTO.id;
                                                                        proveedorNoOptimo.IdPartida = OptimaNoOptima.id;

                                                                        _context.tblCom_CC_ProveedorNoOptimo.Add(proveedorNoOptimo);
                                                                        _context.SaveChanges();

                                                                        var consultaProvODBC = new OdbcConsultaDTO();

                                                                        consultaProvODBC.consulta = "SELECT numpro, nombre FROM sp_proveedores WHERE numpro = ?";
                                                                        consultaProvODBC.parametros.Add(new OdbcParameterDTO
                                                                        {
                                                                            nombre = "numpro",
                                                                            tipo = OdbcType.Int,
                                                                            valor = prov
                                                                        });
                                                                        var _nombre_prov = _contextEnkontrol.Select<sp_proveedoresDTO>(EnkontrolAmbienteEnum.Prod, consultaProvODBC).FirstOrDefault();

                                                                        partidasNoOptimas.Add(new sp_proveedoresDTO
                                                                        {
                                                                            numpro = prov,
                                                                            nombre = _nombre_prov.nombre
                                                                        });

                                                                        if (!proveedorNoOptimo.VoBo)
                                                                        {
                                                                            laCompraTienePartidasNoOptimas = true;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            #endregion

                                            #region Calcular de nuevo los totales ahora con las partidas filtradas por proveedor
                                            var subTotalPorProveedor = lstPartidas.Select(x => x.importe).Sum();
                                            var ivaPorProveedor = lstPartidas.Select(x => (decimal)x.iva).Sum(); //var ivaPorProveedor = subTotalPorProveedor * (compra.porcent_iva / 100);
                                            var totalPorProveedor = (subTotalPorProveedor + ivaPorProveedor) - sumatoriaRetencion;
                                            #endregion

                                            // TOTAL RETENCIONES
                                            decimal totalRetencion = 0;
                                            if (compra.lstRetenciones != null)
                                            {
                                                foreach (var item in compra.lstRetenciones)
                                                {
                                                    totalRetencion += Convert.ToDecimal(item.importe);
                                                }
                                            }

                                            #region Guardar Compra SIGOPLAN
                                            var nuevaCompraSIGOPLAN = new tblCom_OrdenCompra
                                            {
                                                cc = compra.cc,
                                                numero = numeroCompraNueva + 1,
                                                fecha = DateTime.Now,
                                                idLibreAbordo = compra.libre_abordo,
                                                tipo_oc_req = compra.tipo_oc_req,
                                                compradorSIGOPLAN = vSesiones.sesionUsuarioDTO.id, //Usuario SIGOPLAN
                                                compradorEnkontrol = compra.comprador, //Usuario Enkontrol
                                                compradorStarsoft = 0, //Usuario Starsoft
                                                moneda = infoProveedor.moneda.ToString(),
                                                tipo_cambio = infoProveedor.monedaTipoCambio,
                                                porcent_iva = compra.porcent_iva,
                                                sub_total = subTotalPorProveedor, //sub_total = compraPorProveedor.sub_total,
                                                iva = ivaPorProveedor, //iva = compraPorProveedor.iva,
                                                total = totalPorProveedor,
                                                estatus = compra.estatus != null ? compra.estatus : "",
                                                comentarios = requisicionEK.comentarios != null ? (string)requisicionEK.comentarios : "",
                                                bienes_servicios = compra.bienes_servicios != null ? compra.bienes_servicios : "",
                                                CFDI = compra.CFDI ?? "",
                                                tiempoEntregaDias = compra.tiempoEntregaDias,
                                                tiempoEntregaComentarios = compra.tiempoEntregaComentarios ?? "",
                                                estatusRegistro = true,
                                                anticipo = compra.anticipoBool,
                                                totalAnticipo = compra.totalAnticipo,
                                                st_impresa = "",
                                                colocada = false,
                                                correoProveedor = "",
                                                proveedor = prov,
                                                PERU_proveedor = "",
                                                PERU_cuentaCorriente = "",
                                                PERU_formaPago = "",
                                                PERU_tipoCambio = "",
                                                PERU_tipoCompra = ""
                                            };

                                            _context.tblCom_OrdenCompra.Add(nuevaCompraSIGOPLAN);
                                            _context.SaveChanges();
                                            #endregion

                                            #region Guardar Compra Detalle SIGOPLAN
                                            var partidaCompraSIGOPLAN = 1;

                                            foreach (var part in lstPartidas)
                                            {
                                                if (part.cantidad > 0)
                                                {
                                                    var nuevaCompraSIGOPLANDet = new tblCom_OrdenCompraDet
                                                    {
                                                        idOrdenCompra = nuevaCompraSIGOPLAN.id,
                                                        cc = nuevaCompraSIGOPLAN.cc,
                                                        numero = nuevaCompraSIGOPLAN.numero,
                                                        partida = partidaCompraSIGOPLAN++,
                                                        insumo = part.insumo,
                                                        fecha_entrega = part.fecha_entrega,
                                                        cantidad = part.cantidad,
                                                        precio = part.precio,
                                                        importe = part.importe,
                                                        ajuste_cant = part.ajuste_cant,
                                                        ajuste_imp = part.ajuste_imp,
                                                        num_requisicion = part.num_requisicion,
                                                        part_requisicion = part.part_requisicion,
                                                        cant_recibida = part.cant_recibida,
                                                        imp_recibido = part.imp_recibido,
                                                        fecha_recibido = part.fecha_recibido,
                                                        cant_canc = part.cant_canc,
                                                        imp_canc = part.imp_canc,
                                                        acum_ant = part.acum_ant ?? default(decimal),
                                                        max_orig = part.max_orig ?? default(decimal),
                                                        max_ppto = part.max_ppto ?? default(decimal),
                                                        area = part.area ?? 0,
                                                        cuenta = part.cuenta ?? 0,
                                                        porcent_iva = part.porcent_iva ?? default(decimal),
                                                        iva = part.iva ?? default(decimal),
                                                        partidaDescripcion = part.partidaDescripcion ?? "",
                                                        noEconomico = part.noEconomico,
                                                        estatusRegistro = true
                                                    };

                                                    _context.tblCom_OrdenCompraDet.Add(nuevaCompraSIGOPLANDet);
                                                    _context.SaveChanges();
                                                }
                                            }
                                            #endregion

                                            var count = 0;

                                            #region Guardar Compra Enkontrol
                                            var consulta = @"INSERT INTO DBA.so_orden_compra 
                                     (cc, numero, fecha, libre_abordo, tipo_oc_req, comprador, proveedor, moneda, tipo_cambio, porcent_iva, 
                                     sub_total, iva, total, sub_tot_rec, iva_rec, total_rec, sub_tot_ajus, iva_ajus, total_ajus, st_impresa, 
                                     estatus, comentarios, solicito, vobo, autorizo, sub_tot_canc, iva_canc, total_canc, total_fac, total_pag, 
                                     embarquese, empleado_modifica, fecha_modifica, hora_modifica, tc_cc, anticipo, monto_anticipo, almacen, 
                                     bit_autorecepcion, almacen_autorecepcion, empleado_autorecepcion, rentencion_antes_iva, rentencion_despues_iva, 
                                     bienes_servicios, concepto_factura, tot_fac_ret, tot_ret_ret, usuario_autoriza, fecha_autoriza, st_autorizada, 
                                     imprime_porcentaje, ST_OC, vobo_aut, aut_aut, empleado_autoriza, fecha_vobo) 
                                     VALUES (?,?,?,?,?,?,?,?,?,?, 
                                             ?,?,?,?,?,?,?,?,?,?, 
                                             ?,?,?,?,?,?,?,?,?,?, 
                                             ?,?,?,?,?,?,?,?,?,?, 
                                             ?,?,?,?,?,?,?,?,?,?, 
                                             ?,?,?,?,?,?)";

                                            using (var cmd = new OdbcCommand(consulta))
                                            {
                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                parameters.Add("@numero", OdbcType.Numeric).Value = numeroCompraNueva + 1;
                                                parameters.Add("@fecha", OdbcType.Date).Value = DateTime.Now;

                                                //Se guarda siempre con 1 porque en EnKontrol la tabla de libre abordo no contiene todos los almacenes. En SIGOPLAN se guarda con el número de almacén.
                                                parameters.Add("@libre_abordo", OdbcType.Numeric).Value = 1;

                                                parameters.Add("@tipo_oc_req", OdbcType.Char).Value = compra.tipo_oc_req;
                                                parameters.Add("@comprador", OdbcType.Numeric).Value = compra.comprador;
                                                parameters.Add("@proveedor", OdbcType.Numeric).Value = prov; //compra.proveedor;
                                                parameters.Add("@moneda", OdbcType.Char).Value = infoProveedor.moneda.ToString();
                                                parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = infoProveedor.monedaTipoCambio;
                                                parameters.Add("@porcent_iva", OdbcType.Numeric).Value = compra.porcent_iva;
                                                parameters.Add("@sub_total", OdbcType.Numeric).Value = subTotalPorProveedor;
                                                parameters.Add("@iva", OdbcType.Numeric).Value = ivaPorProveedor;
                                                parameters.Add("@total", OdbcType.Numeric).Value = totalPorProveedor;
                                                parameters.Add("@sub_tot_rec", OdbcType.Numeric).Value = 0;
                                                parameters.Add("@iva_rec", OdbcType.Numeric).Value = 0;
                                                parameters.Add("@total_rec", OdbcType.Numeric).Value = 0;
                                                parameters.Add("@sub_tot_ajus", OdbcType.Numeric).Value = compra.sub_tot_ajus;
                                                parameters.Add("@iva_ajus", OdbcType.Numeric).Value = compra.iva_ajus;
                                                parameters.Add("@total_ajus", OdbcType.Numeric).Value = compra.total_ajus;
                                                parameters.Add("@st_impresa", OdbcType.Char).Value = compra.st_impresa != null ? compra.st_impresa : "";
                                                parameters.Add("@estatus", OdbcType.Char).Value = " "; //Se pone un espacio en blanco porque si se guarda un string vacío truena en Enkontrol y no se ven algunos reportes.
                                                parameters.Add("@comentarios", OdbcType.Char).Value = requisicionEK.comentarios != null ? (string)requisicionEK.comentarios : "";
                                                parameters.Add("@solicito", OdbcType.Numeric).Value = compra.solicito;
                                                parameters.Add("@vobo", OdbcType.Numeric).Value = compra.vobo;
                                                parameters.Add("@autorizo", OdbcType.Numeric).Value = compra.autorizo;
                                                parameters.Add("@sub_tot_canc", OdbcType.Numeric).Value = compra.sub_tot_canc;
                                                parameters.Add("@iva_canc", OdbcType.Numeric).Value = compra.iva_canc;
                                                parameters.Add("@total_canc", OdbcType.Numeric).Value = compra.total_canc;
                                                parameters.Add("@total_fac", OdbcType.Numeric).Value = compra.total_fac;
                                                parameters.Add("@total_pag", OdbcType.Numeric).Value = compra.total_pag;
                                                parameters.Add("@embarquese", OdbcType.Char).Value = compra.embarquese != null ? compra.embarquese : "";
                                                parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = compra.comprador;
                                                parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                                parameters.Add("@hora_modifica", OdbcType.DateTime).Value = DateTime.Now;
                                                parameters.Add("@tc_cc", OdbcType.Numeric).Value = 1;
                                                parameters.Add("@anticipo", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@monto_anticipo", OdbcType.Numeric).Value = compra.monto_anticipo ?? (object)DBNull.Value;
                                                parameters.Add("@almacen", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@bit_autorecepcion", OdbcType.Char).Value = compra.bit_autorecepcion;
                                                parameters.Add("@almacen_autorecepcion", OdbcType.Numeric).Value =
                                                    compra.almacen_autorecepcion != null && compra.almacen_autorecepcion != 0 ? compra.almacen_autorecepcion : (object)DBNull.Value;
                                                parameters.Add("@empleado_autorecepcion", OdbcType.Numeric).Value =
                                                    compra.empleado_autorecepcion != null && compra.empleado_autorecepcion != 0 ? compra.empleado_autorecepcion : (object)DBNull.Value;
                                                parameters.Add("@rentencion_antes_iva", OdbcType.Numeric).Value = compra.rentencion_antes_iva;
                                                parameters.Add("@rentencion_despues_iva", OdbcType.Numeric).Value = compra.rentencion_despues_iva;
                                                parameters.Add("@bienes_servicios", OdbcType.Char).Value = compra.bienes_servicios != null ? compra.bienes_servicios : "";
                                                parameters.Add("@concepto_factura", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@tot_fac_ret", OdbcType.Numeric).Value = compra.tot_fac_ret;
                                                parameters.Add("@tot_ret_ret", OdbcType.Numeric).Value = compra.tot_ret_ret;
                                                parameters.Add("@usuario_autoriza", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@fecha_autoriza", OdbcType.Date).Value = DBNull.Value;
                                                parameters.Add("@st_autorizada", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@imprime_porcentaje", OdbcType.Char).Value = "N";
                                                parameters.Add("@ST_OC", OdbcType.Char).Value = compra.ST_OC != null ? compra.ST_OC : (object)DBNull.Value;
                                                parameters.Add("@vobo_aut", OdbcType.Char).Value = "N";
                                                parameters.Add("@aut_aut", OdbcType.Char).Value = "N";
                                                parameters.Add("@empleado_autoriza", OdbcType.Numeric).Value = compra.empleado_autoriza ?? (object)DBNull.Value;
                                                parameters.Add("@fecha_vobo", OdbcType.Date).Value = DBNull.Value;

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;

                                                count += cmd.ExecuteNonQuery();
                                            }
                                            #endregion

                                            var partidaCompraENKONTROL = 0;

                                            foreach (var part in lstPartidas)
                                            {
                                                if (part.cantidad > 0)
                                                {
                                                    partidaCompraENKONTROL += 1;

                                                    #region Guardar Compra Detalle Enkontrol
                                                    var consultaDet = @"INSERT INTO DBA.so_orden_compra_det 
                                            (cc, numero, partida, insumo, fecha_entrega, cantidad, precio, importe, ajuste_cant, ajuste_imp, num_requisicion, part_requisicion, 
                                            cant_recibida, imp_recibido, fecha_recibido, cant_canc, imp_canc, acum_ant, max_orig, max_ppto, area, cuenta, porcent_iva, iva, exento_iva) 
                                            VALUES (?,?,?,?,?,?,?,?,?,?, 
                                                    ?,?,?,?,?,?,?,?,?,?, 
                                                    ?,?,?,?,?)";

                                                    using (var cmd = new OdbcCommand(consultaDet))
                                                    {
                                                        OdbcParameterCollection parameters = cmd.Parameters;

                                                        parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                        parameters.Add("@numero", OdbcType.Numeric).Value = numeroCompraNueva + 1;
                                                        parameters.Add("@partida", OdbcType.Numeric).Value = partidaCompraENKONTROL;
                                                        parameters.Add("@insumo", OdbcType.Numeric).Value = part.insumo;
                                                        parameters.Add("@fecha_entrega", OdbcType.Date).Value = part.fecha_entrega ?? DateTime.Now;
                                                        parameters.Add("@cantidad", OdbcType.Numeric).Value = part.cantidad;
                                                        parameters.Add("@precio", OdbcType.Numeric).Value = part.precio;
                                                        parameters.Add("@importe", OdbcType.Numeric).Value = part.importe;
                                                        parameters.Add("@ajuste_cant", OdbcType.Numeric).Value = part.ajuste_cant;
                                                        parameters.Add("@ajuste_imp", OdbcType.Numeric).Value = part.ajuste_imp;
                                                        parameters.Add("@num_requisicion", OdbcType.Numeric).Value = part.num_requisicion;
                                                        parameters.Add("@part_requisicion", OdbcType.Numeric).Value = part.part_requisicion;
                                                        parameters.Add("@cant_recibida", OdbcType.Numeric).Value = part.cant_recibida;
                                                        parameters.Add("@imp_recibido", OdbcType.Numeric).Value = part.imp_recibido;
                                                        parameters.Add("@fecha_recibido", OdbcType.Date).Value = part.fecha_recibido ?? (object)DBNull.Value;
                                                        parameters.Add("@cant_canc", OdbcType.Numeric).Value = part.cant_canc;
                                                        parameters.Add("@imp_canc", OdbcType.Numeric).Value = part.imp_canc;
                                                        parameters.Add("@acum_ant", OdbcType.Numeric).Value = part.acum_ant ?? (object)DBNull.Value;
                                                        parameters.Add("@max_orig", OdbcType.Numeric).Value = part.max_orig ?? (object)DBNull.Value;
                                                        parameters.Add("@max_ppto", OdbcType.Numeric).Value = part.max_ppto ?? (object)DBNull.Value;
                                                        parameters.Add("@area", OdbcType.Numeric).Value = part.area ?? 0;
                                                        parameters.Add("@cuenta", OdbcType.Numeric).Value = part.cuenta ?? 0;
                                                        parameters.Add("@porcent_iva", OdbcType.Numeric).Value = part.porcent_iva ?? 0;
                                                        parameters.Add("@iva", OdbcType.Numeric).Value = part.iva ?? 0;
                                                        parameters.Add("@exento_iva", OdbcType.Numeric).Value = part.exento_iva ? 1 : 0;

                                                        cmd.Connection = trans.Connection;
                                                        cmd.Transaction = trans;

                                                        count += cmd.ExecuteNonQuery();
                                                    }
                                                    #endregion

                                                    #region Actualizar Explosión para Compra
                                                    var registroExplosionEK = consultaCheckProductivo(
                                                        string.Format(@"SELECT * FROM so_explos_mat WHERE cc = '{0}' AND insumo = {1} AND year_explos = {2}", compra.cc, part.insumo, DateTime.Now.Year)
                                                    );

                                                    if (registroExplosionEK == null)
                                                    {
                                                        #region Insert Registro Explosión
                                                        var consultaExplosionInsert = @"INSERT INTO DBA.so_explos_mat 
                                            (cc, insumo, cantidad, precio, aditiva_cant, aditiva_imp, deduc_cant, deduc_imp, cant_requerida, 
                                            comp_cant, comp_imp, ajuste_cant, ajuste_imp, traspaso_cant, traspaso_imp, cant_recibida, imp_recibido, 
                                            aditiva_cant_fecha, deduc_cant_fecha, aditiva_precio_fecha, deduc_precio_fecha, aditiva_precio, deductiva_precio, 
                                            traspaso_cant_entrada, traspaso_imp_entrada, importe, year_explos, periodo, bit_auto_presu, cantidad_aditiva_sun, 
                                            cantidad_deductiva_sun, cantidad_extra_sun) 
                                            VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                                        using (var cmd = new OdbcCommand(consultaExplosionInsert))
                                                        {
                                                            OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                            parametersExplosion.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                            parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = part.insumo;
                                                            parametersExplosion.Add("@cantidad", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@precio", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@aditiva_cant", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@aditiva_imp", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@deduc_cant", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@deduc_imp", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@cant_requerida", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@comp_cant", OdbcType.Numeric).Value = part.cantidad;
                                                            parametersExplosion.Add("@comp_imp", OdbcType.Numeric).Value = part.importe;
                                                            parametersExplosion.Add("@ajuste_cant", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@ajuste_imp", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@traspaso_cant", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@traspaso_imp", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@cant_recibida", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@imp_recibido", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@aditiva_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                                            parametersExplosion.Add("@deduc_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                                            parametersExplosion.Add("@aditiva_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                                            parametersExplosion.Add("@deduc_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                                            parametersExplosion.Add("@aditiva_precio", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@deductiva_precio", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@traspaso_cant_entrada", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@traspaso_imp_entrada", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@importe", OdbcType.Numeric).Value = DBNull.Value;
                                                            parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;
                                                            parametersExplosion.Add("@periodo", OdbcType.Char).Value = DBNull.Value;
                                                            parametersExplosion.Add("@bit_auto_presu", OdbcType.Char).Value = "N";
                                                            parametersExplosion.Add("@cantidad_aditiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                                            parametersExplosion.Add("@cantidad_deductiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                                            parametersExplosion.Add("@cantidad_extra_sun", OdbcType.Numeric).Value = DBNull.Value;

                                                            cmd.Connection = trans.Connection;
                                                            cmd.Transaction = trans;

                                                            count += cmd.ExecuteNonQuery();
                                                        }
                                                        #endregion
                                                    }
                                                    else
                                                    {
                                                        #region Update Registro Explosión
                                                        var registroExplosion = ((List<dynamic>)registroExplosionEK.ToObject<List<dynamic>>())[0];

                                                        var nuevaCantidadComprada = Convert.ToDecimal(registroExplosion.comp_cant, CultureInfo.InvariantCulture) + part.cantidad;
                                                        var nuevoImporteComprado = Convert.ToDecimal(registroExplosion.comp_imp, CultureInfo.InvariantCulture) + part.importe;

                                                        var consultaExplosionUpdate = @"
                                            UPDATE DBA.so_explos_mat 
                                            SET comp_cant = ?, comp_imp = ? 
                                            WHERE cc = ? AND insumo = ? AND year_explos = ?";

                                                        using (var cmd = new OdbcCommand(consultaExplosionUpdate))
                                                        {
                                                            OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                            parametersExplosion.Add("@comp_cant", OdbcType.Numeric).Value = nuevaCantidadComprada;
                                                            parametersExplosion.Add("@comp_imp", OdbcType.Numeric).Value = nuevoImporteComprado;

                                                            parametersExplosion.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                            parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = part.insumo;
                                                            parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;

                                                            cmd.Connection = trans.Connection;
                                                            cmd.Transaction = trans;

                                                            count += cmd.ExecuteNonQuery();
                                                        }
                                                        #endregion
                                                    }
                                                    #endregion

                                                    var partidaRequisicionEK = consultaCheckProductivo(
                                                        string.Format(@"SELECT 
                                                                * 
                                                            FROM so_requisicion_det 
                                                            WHERE cc = '{0}' AND numero = {1} AND partida = {2} AND insumo = {3}",
                                                        compra.cc,
                                                        part.num_requisicion,
                                                        part.part_requisicion,
                                                        part.insumo)
                                                    );

                                                    if (partidaRequisicionEK != null)
                                                    {
                                                        #region Update Partida Requisicion SIGOPLAN
                                                        var partidaRequisicion = (List<dynamic>)partidaRequisicionEK.ToObject<List<dynamic>>();
                                                        var numeroRequisicion = part.num_requisicion;

                                                        var requisicionSIGOPLAN = _context.tblCom_Req.FirstOrDefault(x => x.estatusRegistro && x.cc == compra.cc && x.numero == numeroRequisicion);

                                                        if (requisicionSIGOPLAN != null)
                                                        {
                                                            var numeroPartida = part.part_requisicion;
                                                            var numeroInsumo = part.insumo;
                                                            var partidaRequisicionSIGOPLAN = _context.tblCom_ReqDet.FirstOrDefault(x =>
                                                                x.estatusRegistro &&
                                                                x.idReq == requisicionSIGOPLAN.id &&
                                                                x.partida == numeroPartida &&
                                                                x.insumo == numeroInsumo);

                                                            if (partidaRequisicionSIGOPLAN != null)
                                                            {
                                                                partidaRequisicionSIGOPLAN.cantOrdenada += part.cantidad;

                                                                _context.Entry(partidaRequisicionSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                                                _context.SaveChanges();
                                                            }
                                                        }
                                                        #endregion

                                                        #region Update Partida Requisicion Enkontrol
                                                        var consultaPartidaReq = @"
                                            UPDATE DBA.so_requisicion_det 
                                            SET 
                                                cant_ordenada = ? 
                                            WHERE cc = ? AND numero = ? AND partida = ? AND insumo = ?";

                                                        using (var cmd = new OdbcCommand(consultaPartidaReq))
                                                        {
                                                            OdbcParameterCollection parameters = cmd.Parameters;

                                                            parameters.Add("@cant_ordenada", OdbcType.Numeric).Value =
                                                                Convert.ToDecimal(partidaRequisicion[0].cant_ordenada.Value, CultureInfo.InvariantCulture) + part.cantidad;

                                                            parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                            parameters.Add("@numero", OdbcType.Numeric).Value = part.num_requisicion;
                                                            parameters.Add("@partida", OdbcType.Numeric).Value = part.part_requisicion;
                                                            parameters.Add("@insumo", OdbcType.Numeric).Value = part.insumo;

                                                            cmd.Connection = trans.Connection;
                                                            cmd.Transaction = trans;

                                                            count += cmd.ExecuteNonQuery();
                                                        }
                                                        #endregion
                                                    }

                                                    if (part.partidaDescripcion != "" && part.partidaDescripcion != null)
                                                    {
                                                        #region Guardar Descripcion Partida Compra Enkontrol
                                                        var consultaPartidaDescripcion = @"INSERT INTO DBA.so_orden_det_linea (cc, numero, partida, descripcion) VALUES (?,?,?,?)";

                                                        using (var cmd = new OdbcCommand(consultaPartidaDescripcion))
                                                        {
                                                            OdbcParameterCollection parameters = cmd.Parameters;

                                                            parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                            parameters.Add("@numero", OdbcType.Numeric).Value = numeroCompraNueva + 1;
                                                            parameters.Add("@partida", OdbcType.Numeric).Value = partidaCompraENKONTROL;
                                                            parameters.Add("@descripcion", OdbcType.VarChar).Value = part.partidaDescripcion ?? (object)DBNull.Value;

                                                            cmd.Connection = trans.Connection;
                                                            cmd.Transaction = trans;

                                                            count += cmd.ExecuteNonQuery();
                                                        }
                                                        #endregion
                                                    }
                                                }
                                            }

                                            if (compra.lstRetenciones != null)
                                            {
                                                foreach (var ret in compra.lstRetenciones)
                                                {
                                                    #region Guardar Retenciones Enkontrol
                                                    var consultaRet = @"INSERT INTO DBA.so_ordenc_retenciones 
                                                            (cc, numero, id_cpto, orden, cantidad, porc_ret, importe, facturado, retenido, aplica, 
                                                            forma_pago, tm_descto, calc_iva, afecta_oc, afecta_fac, facturado_ret, facturado_iva, facturado_total, 
                                                            retenido_ret, retenido_iva, retenido_total) 
                                                        VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                                    using (var cmd = new OdbcCommand(consultaRet))
                                                    {
                                                        OdbcParameterCollection parameters = cmd.Parameters;

                                                        parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                        parameters.Add("@numero", OdbcType.Numeric).Value = numeroCompraNueva + 1;
                                                        parameters.Add("@id_cpto", OdbcType.Numeric).Value = ret.id_cpto;
                                                        parameters.Add("@orden", OdbcType.Numeric).Value = ret.orden;
                                                        parameters.Add("@cantidad", OdbcType.Numeric).Value = 0; //ret.cantidad;
                                                        parameters.Add("@porc_ret", OdbcType.Numeric).Value = ret.porc_ret;
                                                        parameters.Add("@importe", OdbcType.Numeric).Value = ret.importe;
                                                        parameters.Add("@facturado", OdbcType.Numeric).Value = ret.facturado;
                                                        parameters.Add("@retenido", OdbcType.Numeric).Value = ret.retenido;
                                                        parameters.Add("@aplica", OdbcType.Numeric).Value = ret.aplica;
                                                        parameters.Add("@forma_pago", OdbcType.Numeric).Value = ret.forma_pago;
                                                        parameters.Add("@tm_descto", OdbcType.Numeric).Value = DBNull.Value;
                                                        parameters.Add("@calc_iva", OdbcType.Numeric).Value = ret.calc_iva;
                                                        parameters.Add("@afecta_oc", OdbcType.Char).Value = ret.bit_afecta_oc != null ? ret.bit_afecta_oc : "N";
                                                        parameters.Add("@afecta_fac", OdbcType.Char).Value = ret.afecta_fac != null ? ret.afecta_fac : "N";
                                                        parameters.Add("@facturado_ret", OdbcType.Numeric).Value = ret.facturado_ret;
                                                        parameters.Add("@facturado_iva", OdbcType.Numeric).Value = ret.facturado_iva;
                                                        parameters.Add("@facturado_total", OdbcType.Numeric).Value = ret.facturado_total;
                                                        parameters.Add("@retenido_ret", OdbcType.Numeric).Value = ret.retenido_ret;
                                                        parameters.Add("@retenido_iva", OdbcType.Numeric).Value = ret.retenido_iva;
                                                        parameters.Add("@retenido_total", OdbcType.Numeric).Value = ret.retenido_total;
                                                        parameters.Add("@porc_base_ret", OdbcType.Numeric).Value = 100;
                                                        parameters.Add("@imp_base_ret", OdbcType.Numeric).Value = subTotalPorProveedor;

                                                        cmd.Connection = trans.Connection;
                                                        cmd.Transaction = trans;

                                                        count += cmd.ExecuteNonQuery();
                                                    }
                                                    #endregion
                                                }
                                            }

                                            #region COMENTADO
                                            //#region Autorización automática de compras de consigna/licitación/CRC/convenio con total menor igual a 20,000
                                            //var num_requisicion = lstPartidas[0].num_requisicion;
                                            //var registroRequisicionSIGOPLAN = _context.tblCom_Req.FirstOrDefault(x => x.estatusRegistro && x.cc == compra.cc && x.numero == num_requisicion);

                                            //if (registroRequisicionSIGOPLAN != null)
                                            //{
                                            //    if ((totalPorProveedor * (compra.moneda == 2 ? infoProveedor.monedaTipoCambio : 1)) < 20000 && (registroRequisicionSIGOPLAN.consigna == true || registroRequisicionSIGOPLAN.licitacion || registroRequisicionSIGOPLAN.crc || registroRequisicionSIGOPLAN.convenio))
                                            //    {
                                            //        #region Función para autorizar copiada (autorizarCompra)
                                            //        var siguienteNumeroCompra = numeroCompraNueva + 1;
                                            //        var usuario = vSesiones.sesionUsuarioDTO;
                                            //        var relUser = ufs.getUsuarioService().getUserEk(usuario.id);

                                            //        using (var cmd = new OdbcCommand(@"UPDATE DBA.so_orden_compra SET autorizo = ?, usuario_autoriza = ?, fecha_autoriza = ?, ST_OC = ?, empleado_autoriza = ? WHERE cc = ? and numero = ?"))
                                            //        {
                                            //            OdbcParameterCollection parameters = cmd.Parameters;

                                            //            parameters.Add("@autorizo", OdbcType.Numeric).Value = relUser.empleado;
                                            //            parameters.Add("@usuario_autoriza", OdbcType.Numeric).Value = relUser.empleado;
                                            //            parameters.Add("@fecha_autoriza", OdbcType.Date).Value = DateTime.Now;
                                            //            parameters.Add("@ST_OC", OdbcType.Char).Value = "A";
                                            //            parameters.Add("@empleado_autoriza", OdbcType.Numeric).Value = relUser.empleado;

                                            //            parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                            //            parameters.Add("@numero", OdbcType.Numeric).Value = siguienteNumeroCompra;

                                            //            cmd.Connection = trans.Connection;
                                            //            cmd.Transaction = trans;
                                            //            count += cmd.ExecuteNonQuery();
                                            //        }

                                            //        var compraSIGOPLAN = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.cc == compra.cc && x.numero == siguienteNumeroCompra && x.estatusRegistro);

                                            //        if (compraSIGOPLAN != null)
                                            //        {
                                            //            compraSIGOPLAN.autorizo = relUser.empleado;
                                            //            compraSIGOPLAN.usuario_autoriza = relUser.empleado;
                                            //            compraSIGOPLAN.fecha_autoriza = DateTime.Now;
                                            //            compraSIGOPLAN.ST_OC = "A";
                                            //            compraSIGOPLAN.empleado_autoriza = relUser.empleado;
                                            //            compraSIGOPLAN.empleadoUltimaAccion = relUser.empleado;
                                            //            compraSIGOPLAN.fechaUltimaAccion = DateTime.Now;
                                            //            compraSIGOPLAN.tipoUltimaAccion = TipoUltimaAccionEnum.Autorizacion;

                                            //            _context.SaveChanges();
                                            //        }
                                            //        #endregion
                                            //    }
                                            //}
                                            //#endregion
                                            #endregion

                                            #region Obtener VoBos y Autorizaciones
                                            var objCompra = new OrdenCompraDTO { cc = nuevaCompraSIGOPLAN.cc, numero = nuevaCompraSIGOPLAN.numero, esOC_Interna = false };
                                            var vobos = getVobos(objCompra);
                                            var autorizaciones = getAutorizaciones(objCompra);

                                            if (vobos != null || autorizaciones != null)
                                            {
                                                compra.stringVobosAutorizaciones += "[" + nuevaCompraSIGOPLAN.cc + "-" + nuevaCompraSIGOPLAN.numero + " VoBos: ";

                                                if (vobos != null)
                                                {
                                                    foreach (var v in vobos)
                                                    {
                                                        compra.stringVobosAutorizaciones += v.usu_numero + "-" + v.usu_nombre + " ";
                                                    }
                                                }

                                                compra.stringVobosAutorizaciones += "Autorizaciones: ";

                                                if (autorizaciones != null)
                                                {
                                                    foreach (var a in autorizaciones)
                                                    {
                                                        compra.stringVobosAutorizaciones += (int)a.usu_numero + "-" + (string)a.usu_nombre + " ";
                                                    }
                                                }

                                                compra.stringVobosAutorizaciones += "] ";
                                            }
                                            #endregion
                                        }

                                        #region Calificación encuestas
                                        //if (!mismoProveedor)
                                        //{
                                        //    if (laCompraTienePartidasNoOptimas)
                                        //    {
                                        //        var correoProvNoOptimo = new Infrastructure.DTO.CorreoDTO();

                                        //        if (partidasNoOptimas.Count > 1)
                                        //        {
                                        //            correoProvNoOptimo.asunto =
                                        //                "Se ha realizado la orden de compra: " + compra.cc + "-" + numerosCompras.First() +
                                        //                " con proveedores no optimos";
                                        //            correoProvNoOptimo.cuerpo =
                                        //                "Se realizó la orden de compra: " + compra.cc + "-" + numerosCompras.First() +
                                        //                    " con los proveedores siguientes <br /><strong>" +
                                        //                    " <ol>";
                                        //            foreach (var item in partidasNoOptimas)
                                        //            {
                                        //                correoProvNoOptimo.cuerpo += "<li>" + item.numpro + "-" + item.nombre + "</li>";
                                        //            }
                                        //            correoProvNoOptimo.cuerpo += "</ol></strong><br />Lo cuales no son optimos.";
                                        //        }
                                        //        else
                                        //        {
                                        //            correoProvNoOptimo.asunto =
                                        //            "Se ha realizado la orden de compra: " + compra.cc + "-" + numerosCompras.First() +
                                        //            " con un proveedor no optimo";
                                        //            correoProvNoOptimo.cuerpo =
                                        //                "Se realizó la orden de compra <strong>" + compra.cc + "-" + numerosCompras.First() + "</strong>" +
                                        //                " con el proveedor <strong>" + compra.proveedor + (partidasNoOptimas.Count > 0 ? (partidasNoOptimas.First().numpro + " - " + partidasNoOptimas.First().nombre) : "") + "</strong>" +
                                        //                " el cual no es optimo en base al cuadro comparativo <strong>" +
                                        //                calificacionProveedores.First().Numero + "-" + calificacionProveedores.First().CC + "</strong>";
                                        //        }
                                        //        correoProvNoOptimo.correos = new List<string> { "victor.esquer@construplan.com.mx" };
                                        //        //correoProvNoOptimo.correos = new List<string> { "martin.zayas@construplan.com.mx" };
                                        //        var correoEnviado = correoProvNoOptimo.Enviar();
                                        //    }
                                        //}
                                        #endregion

                                        #region Cancelar links pendientes de proveedores.
                                        //var ccReq = compra.cc;
                                        //var numeroReq = compra.lstPartidas[0].num_requisicion;
                                        //var listaLinks = _context.tblCom_ProveedoresLinks.Where(x => x.registroActivo && x.idEstatusRegistro == EstatusRegistroProveedorLinkEnum.PENDIENTE && x.cc == ccReq && x.numRequisicion == numeroReq).ToList();

                                        //foreach (var link in listaLinks)
                                        //{
                                        //    link.idEstatusRegistro = EstatusRegistroProveedorLinkEnum.CANCELADO;
                                        //    _context.SaveChanges();
                                        //}
                                        #endregion

                                        trans.Commit();
                                        dbSigoplanTransaction.Commit();

                                        List<string> listStringNumerosCompras = numerosCompras.ConvertAll<string>(x => compra.cc + "-" + x.ToString());

                                        result.Add("info", compra);
                                        result.Add("numerosCompras", numerosCompras);
                                        result.Add("numerosComprasString", string.Join(", ", listStringNumerosCompras));
                                        result.Add("partidas", compra.lstPartidas);
                                        result.Add("pagos", compra.lstPagos);
                                        result.Add("retenciones", compra.lstRetenciones);

                                        result.Add(SUCCESS, true);
                                    }
                                    catch (Exception e)
                                    {
                                        trans.Rollback();
                                        dbSigoplanTransaction.Rollback();

                                        LogError(0, 0, "OrdenCompraController", "guardarNuevaCompra", e, AccionEnum.AGREGAR, 0, new { compra = compra });

                                        result.Add(MESSAGE, e.Message);
                                        result.Add(SUCCESS, false);
                                    }
                                }
                            }
                        }
                        #endregion
                        break;
                    }
                default:
                    {
                        #region OTRAS EMPRESAS
                        var _numeroCompraParaBL = 0;

                        using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                        {
                            using (var con = checkConexionProductivo())
                            {
                                using (var trans = con.BeginTransaction())
                                {
                                    try
                                    {
                                        #region Validación requisicion validada por almacén
                                        var flagNoInventariable = false;
                                        var flagFamiliaExcepcion = true;

                                        var listaTipoGrupoEK = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM grupos_insumo")).ToObject<List<dynamic>>();
                                        var listaFamiliasExcepcion = _context.tblCom_FamiliasExcepcionInventariables.Where(x => x.estatus).Select(x => x.familia).ToList();

                                        foreach (var part in compra.lstPartidas)
                                        {
                                            var familia = part.insumo.ToString().Substring(0, 3);

                                            if (!listaFamiliasExcepcion.Contains(familia))
                                            {
                                                flagFamiliaExcepcion = false;
                                            }

                                            var tipo = Int32.Parse(part.insumo.ToString().Substring(0, 1));
                                            var grupo = Int32.Parse(part.insumo.ToString().Substring(1, 2));

                                            var tipoGrupoEK = listaTipoGrupoEK.FirstOrDefault(x => (int)x.tipo_insumo == tipo && (int)x.grupo_insumo == grupo);

                                            if (tipoGrupoEK != null)
                                            {
                                                if ((string)tipoGrupoEK.inventariado.Value == "N")
                                                {
                                                    flagNoInventariable = true;
                                                }
                                            }
                                        }
                                        var requisicionValidada = _context.tblCom_Req.ToList().FirstOrDefault(x => x.estatusRegistro && x.cc == compra.cc && x.numero == compra.lstPartidas[0].num_requisicion);

                                        //Si la compra es de insumos inventariables y no tiene familias excepción se pasa a verificar que la requisición sea validada por almacén.
                                        if (!flagNoInventariable)
                                        {
                                            if (!flagFamiliaExcepcion)
                                            {
                                                if (requisicionValidada != null)
                                                {
                                                    if (!requisicionValidada.validadoCompras)
                                                    {
                                                        throw new Exception("La requisición \"" + compra.cc + "-" + compra.lstPartidas[0].num_requisicion + "\" no ha sido validada por almacén. No se puede proceder con la compra.");
                                                    }
                                                }
                                            }
                                        }

                                        //Si pasa la validación se le pone validado por almacén y compras por si no lo tenía.
                                        if (requisicionValidada != null)
                                        {
                                            requisicionValidada.validadoCompras = true;
                                            requisicionValidada.validadoAlmacen = true;

                                            _context.SaveChanges();
                                        }
                                        #endregion

                                        #region Validación Área-Cuenta
                                        if (vSesiones.sesionEmpresaActual != 3)
                                        {
                                            if (compra.lstPartidas.Any(x => x.area == 0 || x.cuenta == 0 || x.area == null || x.cuenta == null))
                                            {
                                                if (vSesiones.sesionEmpresaActual == 1 || vSesiones.sesionEmpresaActual == 4 || vSesiones.sesionEmpresaActual == 5 || vSesiones.sesionEmpresaActual == (int)EmpresaEnum.GCPLAN)
                                                {
                                                    var gruposValidaAreaCuentaEK = consultaCheckProductivo(string.Format(@"SELECT * FROM grupos_insumo WHERE valida_area_cta = 'S'"));

                                                    if (gruposValidaAreaCuentaEK != null)
                                                    {
                                                        var gruposValidaAreaCuenta = (List<dynamic>)gruposValidaAreaCuentaEK.ToObject<List<dynamic>>();

                                                        foreach (var p in compra.lstPartidas.Where(x => x.area == 0 || x.cuenta == 0 || x.area == null || x.cuenta == null).ToList())
                                                        {
                                                            var tipo = Int32.Parse(p.insumo.ToString().Substring(0, 1));
                                                            var grupo = Int32.Parse(p.insumo.ToString().Substring(1, 2));
                                                            var checkInsumoValidaAreaCuenta = gruposValidaAreaCuenta.FirstOrDefault(x => (int)x.tipo_insumo == tipo && (int)x.grupo_insumo == grupo);

                                                            if (checkInsumoValidaAreaCuenta != null)
                                                            {
                                                                throw new Exception("Debe capturar el Área-Cuenta para el insumo " + p.insumo + " en la partida #" + p.partida + ".");
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    throw new Exception("Debe capturar el Área-Cuenta de todas las partidas.");
                                                }
                                            }
                                        }
                                        #endregion

                                        #region Validación precio negativo o precio en cero
                                        //if (!compra.lstPartidas.Any(x => x.num_requisicion == 0))
                                        //{
                                        if (compra.lstPartidas.Where(x => x.cantidad > 0).Any(x => x.precio <= 0))
                                        {
                                            throw new Exception("El precio de las partidas no puede tener un valor negativo o en cero.");
                                        }
                                        //}
                                        #endregion

                                        #region Validación para no comprar más de lo requerido pendiente
                                        var partidasRequisicionEK = consultaCheckProductivo(
                                            string.Format(@"SELECT * FROM so_requisicion_det WHERE cc = '{0}' AND numero = {1}", compra.cc, compra.lstPartidas[0].num_requisicion)
                                        );

                                        if (partidasRequisicionEK != null)
                                        {
                                            var partidasRequisicion = (List<dynamic>)partidasRequisicionEK.ToObject<List<dynamic>>();

                                            foreach (var partReq in partidasRequisicion)
                                            {
                                                var partidaCompra = compra.lstPartidas.FirstOrDefault(x => x.part_requisicion == (int)partReq.partida && x.insumo == (int)partReq.insumo);

                                                if (partidaCompra != null)
                                                {
                                                    if (partidaCompra.cantidad > 0)
                                                    {
                                                        var cantidadPartida = Convert.ToDecimal(partReq.cantidad, CultureInfo.InvariantCulture);
                                                        var cantidadOrdenada = Convert.ToDecimal(partReq.cant_ordenada, CultureInfo.InvariantCulture);
                                                        var cantidadCancelada = Convert.ToDecimal(partReq.cant_cancelada, CultureInfo.InvariantCulture);
                                                        var cantidadPendiente = cantidadPartida - cantidadOrdenada - cantidadCancelada;

                                                        if (cantidadPendiente > 0)
                                                        {
                                                            if (partidaCompra.cantidad > cantidadPendiente)
                                                            {
                                                                throw new Exception("No se puede comprar más de lo requerido. Partida Compra: #" + partidaCompra.partida + ". Partida Requisición: #" + (int)partReq.partida + ".");
                                                            }
                                                        }
                                                        else
                                                        {
                                                            throw new Exception("La partida #" + (int)partReq.partida + " de la requisición no tiene cantidad pendiente por comprar.");
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    throw new Exception("No coincide la información de la partida de la requisición con la partida de la compra: Partida Requisición: " + partReq.partida + ". Insumo: " + (int)partReq.insumo);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("No se encuentra la información de las partidas de la requisición \"" + compra.cc + "-" + compra.lstPartidas[0] + "\".");
                                        }
                                        #endregion

                                        #region Validación Presupuesto Global
                                        var presupuesto = getPresupuestoCC(compra.cc);

                                        if (presupuesto != null)
                                        {
                                            var presupuestoGlobal = Convert.ToDecimal(presupuesto.presupuestoGlobal, CultureInfo.InvariantCulture);
                                            var presupuestoActual = Convert.ToDecimal(presupuesto.presupuestoActual, CultureInfo.InvariantCulture);

                                            if (presupuestoGlobal < (presupuestoActual + compra.sub_total))
                                            {
                                                throw new Exception("El presupuesto actual sobrepasa el global para el centro de costo.");
                                            }
                                        }
                                        #endregion

                                        #region Validación para compra autorecepcionable sin almacén y empleado capturado
                                        if (compra.bit_autorecepcion == "S")
                                        {
                                            if (compra.almacen_autorecepcion == null || compra.almacen_autorecepcion == 0 || compra.empleado_autorecepcion == null || compra.empleado_autorecepcion == 0)
                                            {
                                                throw new Exception("Debe capturar un almacén y un empleado de autorecepción para las compras autorecepcionables.");
                                            }
                                        }
                                        #endregion

                                        #region Calificación encuestas
                                        var compraRequi = compra.lstPartidas[0].num_requisicion;
                                        var compraCC = compra.cc.ToUpper();
                                        var calificacionProveedores = _context.tblCom_CC_Calificacion
                                                    .Where(w =>
                                                        w.esActivo &&
                                                        w.Numero == compraRequi &&
                                                        w.CC.ToUpper() == compraCC)
                                                    .OrderByDescending(o => o.Calificacion)
                                                    .ToList();
                                        var laCompraTienePartidasNoOptimas = false;
                                        var partidasNoOptimas = new List<sp_proveedoresDTO>();
                                        var mismoProveedor = true;

                                        var permisosCompradoresCalificacion = _context.tblCom_CC_PermisoCompradorCalificarOC.Where(x => x.registroActivo).Select(x => x.usuarioId).ToList();
                                        #endregion

                                        //Checa cuantos proveedores distintos se capturaron para crear una compra por cada uno
                                        var proveedores = compra.lstPartidas.Where(x => x.cantidad > 0).Select(x => x.proveedorDistinto).Distinct().ToList();
                                        List<int> numerosCompras = new List<int>();

                                        #region Verifica si todos los proveedores de las partidas son los mismos para Calificación de encuestas
                                        if (proveedores.Count > 1)
                                        {
                                            mismoProveedor = false;
                                        }
                                        #endregion
                                        bool activacionStandBy = false;
                                        foreach (var prov in proveedores)
                                        {
                                            #region Validación Proveedor-Subcontratista Bloqueado
                                            var reglaCompras = _context.tblP_ReglasSubcontratistasBloqueo.FirstOrDefault(x => x.id == 1);

                                            if (reglaCompras != null)
                                            {
                                                if (reglaCompras.aplicar)
                                                {
                                                    var subcontratistaDB = _context.sp_Select<dynamic>(new StoreProcedureDTO
                                                    {
                                                        nombre = "spSUBCONTRATISTAS_PROVEEDOR_POR_NUMERO",
                                                        parametros = new List<OdbcParameterDTO> { new OdbcParameterDTO { nombre = "numeroProveedor", tipoSql = SqlDbType.Int, valor = prov } }
                                                    });

                                                    if (subcontratistaDB.Count() > 0)
                                                    {
                                                        if (Convert.ToInt32(subcontratistaDB[0].tipoBloqueoId) > 0)
                                                        {
                                                            throw new Exception("El proveedor " + prov + " está bloqueado.");
                                                        }
                                                    }
                                                }
                                            }
                                            #endregion

                                            var sumatoriaRetencion = compra.lstRetenciones != null && compra.lstRetenciones.Count > 0 ? Math.Round(compra.lstRetenciones.Select(x => x.importe).Sum(), 2) : 0;
                                            var diferenciaRetencion = sumatoriaRetencion - Math.Round(compra.rentencion_despues_iva, 2);

                                            //Se revisa que la sumatoria de la lista de retenciones sea parecida al valor de la propiedad "compra.rentencion_despues_iva".
                                            if (diferenciaRetencion > 1 || diferenciaRetencion < -1)
                                            {
                                                throw new Exception("Error al capturar las retenciones.");
                                            }

                                            var infoProveedor = getProveedorInfo(prov.ToString());
                                            var lstPartidas = compra.lstPartidas.Where(x => x.cantidad > 0 && x.proveedorDistinto == prov).ToList();

                                            #region Validación Proveedor-Subcontratista Existente por Insumo
                                            if (reglaCompras != null)
                                            {
                                                var listaValidacionInsumoSubcontratista = _context.tblCom_ValidacionInsumoSubcontratista.Where(x => x.estatus).ToList();

                                                if (listaValidacionInsumoSubcontratista.Count() > 0)
                                                {
                                                    var subcontratistaDB = _context.sp_Select<dynamic>(new StoreProcedureDTO
                                                    {
                                                        nombre = "spSUBCONTRATISTAS_PROVEEDOR_POR_NUMERO",
                                                        parametros = new List<OdbcParameterDTO> { new OdbcParameterDTO { nombre = "numeroProveedor", tipoSql = SqlDbType.Int, valor = prov } }
                                                    });

                                                    foreach (var registroValidacion in listaValidacionInsumoSubcontratista)
                                                    {
                                                        if (registroValidacion.tipo == 1) //Validación por tipo de insumo
                                                        {
                                                            var tipoInsumoValidacion = registroValidacion.codigo;
                                                            List<int> listaTiposInsumos = lstPartidas.Select(x => Int32.Parse((x.insumo.ToString()[0]).ToString())).ToList();

                                                            if (listaTiposInsumos.Any(x => x == tipoInsumoValidacion))
                                                            {
                                                                if (subcontratistaDB.Count() == 0)
                                                                {
                                                                    //throw new Exception("El proveedor no está registrado como subcontratista.");
                                                                }
                                                            }
                                                        }
                                                        else if (registroValidacion.tipo == 2) //Validación por insumo específico
                                                        {
                                                            var insumoEspecificoValidacion = registroValidacion.codigo;

                                                            if (lstPartidas.Any(x => x.insumo == insumoEspecificoValidacion))
                                                            {
                                                                if (subcontratistaDB.Count() == 0)
                                                                {
                                                                    //throw new Exception("El proveedor no está registrado como subcontratista.");
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            #endregion

                                            var ultimaCompraEK = consultaCheckProductivo(
                                                string.Format(@"SELECT TOP 1 numero FROM so_orden_compra WHERE cc = '{0}' ORDER BY numero DESC", compra.cc)
                                            );
                                            var numeroCompraNueva = 0;

                                            if (ultimaCompraEK != null)
                                            {
                                                var ultimaCompra = ((List<OrdenCompraDTO>)ultimaCompraEK.ToObject<List<OrdenCompraDTO>>())[0];

                                                numeroCompraNueva = ultimaCompra.numero;
                                            }

                                            var requisicionEK = ((List<dynamic>)consultaCheckProductivo(
                                                string.Format(@"SELECT * FROM so_requisicion WHERE cc = '{0}' AND numero = {1}", compra.cc, lstPartidas[0].num_requisicion)
                                            ).ToObject<List<dynamic>>())[0];

                                            //compraPorProveedor.numero = numeroCompraNueva + 1;
                                            numerosCompras.Add(numeroCompraNueva + 1);
                                            _numeroCompraParaBL = numeroCompraNueva + 1;

                                            #region Calificación encuestas
                                            /*SOLO LOS USUARIOS JOSE PEDRO LOPEZ Y ROGELIO PACHECO
                                 * PUEDEN DAR DE ALTA REGISTROS DE PRUEBAS
                                 * ID: 3287 JUAN PEDRO CARREON VILLA
                                 * ID: 1060 ROGELIO PACHECO VALENCIA
                                 * ID: 3807 OSCAR VALENCIA
                                 * update 18/02/2022 ahora los usuarios registrados en la tabla tblCom_CC_PermisoCompradorCalificarOC son los que pueden dar de alta registros
                                 * var permisosCompradoresCalificacion = _context.tblCom_CC_PermisoCompradorCalificarOC.Where(x => x.registroActivo).Select(x => x.usuarioId).ToList();
                                */

                                            if (!mismoProveedor)
                                            {
                                                //var idUsuariosPrueba = new List<int> { 3287, 1060 };
                                                if (/*idUsuariosPrueba.Contains(vSesiones.sesionUsuarioDTO.id)*/permisosCompradoresCalificacion.Contains(vSesiones.sesionUsuarioDTO.id))
                                                {
                                                    if (calificacionProveedores.Count > 0)
                                                    {
                                                        var calificacionPartidas = new List<tblCom_CC_CalificacionPartida>();
                                                        foreach (var caliProv in calificacionProveedores)
                                                        {
                                                            calificacionPartidas.AddRange(caliProv.partidas);
                                                        }

                                                        foreach (var partida in lstPartidas)
                                                        {
                                                            var caliPartida = calificacionPartidas.Where(f => f.numeroPartida == partida.partida).ToList();

                                                            if (caliPartida.Any(a => a.calificacionProv.Proveedor == prov))
                                                            {
                                                                var OptimaNoOptima = caliPartida.FirstOrDefault(f => f.numeroPartida == partida.partida && f.calificacionProv.Proveedor == partida.proveedorDistinto);

                                                                if (OptimaNoOptima != null)
                                                                {
                                                                    if (OptimaNoOptima.idTipoCalificacionPartida == (int)TipoCalificacion.Optima)
                                                                    {
                                                                        var proveedorOptimo = new tblCom_CC_ProveedorNoOptimo();
                                                                        proveedorOptimo.CalificacionId = OptimaNoOptima.idCalificacion;
                                                                        proveedorOptimo.NumeroCompra = numeroCompraNueva + 1;
                                                                        proveedorOptimo.Estatus = true;
                                                                        proveedorOptimo.VoBo = true;
                                                                        proveedorOptimo.IdTipoCalificacion = OptimaNoOptima.idTipoCalificacionPartida;
                                                                        proveedorOptimo.Fecha = DateTime.Now;
                                                                        proveedorOptimo.FechaCreacion = DateTime.Now;
                                                                        proveedorOptimo.UsuarioIdVoBo = vSesiones.sesionUsuarioDTO.id;
                                                                        proveedorOptimo.idUsuario = vSesiones.sesionUsuarioDTO.id;
                                                                        proveedorOptimo.IdPartida = OptimaNoOptima.id;

                                                                        _context.tblCom_CC_ProveedorNoOptimo.Add(proveedorOptimo);
                                                                        _context.SaveChanges();
                                                                    }
                                                                    else
                                                                    {
                                                                        if ((partida.importe * (compra.moneda == 2 ? infoProveedor.monedaTipoCambio : 1)) < 20000 && string.IsNullOrEmpty(partida.partidaDescripcion))
                                                                        {
                                                                            throw new Exception("La partida " + partida.partida + " debe de contar con una descripción indicando porque se selecciono a el proveedor no optimo segun la información del cuadro comparativo");
                                                                        }

                                                                        var proveedorNoOptimo = new tblCom_CC_ProveedorNoOptimo();
                                                                        proveedorNoOptimo.CalificacionId = OptimaNoOptima.idCalificacion;
                                                                        proveedorNoOptimo.NumeroCompra = numeroCompraNueva + 1;
                                                                        proveedorNoOptimo.Estatus = true;
                                                                        proveedorNoOptimo.VoBo = (partida.importe * (compra.moneda == 2 ? infoProveedor.monedaTipoCambio : 1)) < 20000 && !string.IsNullOrEmpty(partida.partidaDescripcion);
                                                                        proveedorNoOptimo.IdTipoCalificacion = OptimaNoOptima.idTipoCalificacionPartida;
                                                                        proveedorNoOptimo.Fecha = DateTime.Now;
                                                                        proveedorNoOptimo.FechaCreacion = DateTime.Now;
                                                                        proveedorNoOptimo.UsuarioIdVoBo = vSesiones.sesionUsuarioDTO.id;
                                                                        proveedorNoOptimo.idUsuario = vSesiones.sesionUsuarioDTO.id;
                                                                        proveedorNoOptimo.IdPartida = OptimaNoOptima.id;

                                                                        _context.tblCom_CC_ProveedorNoOptimo.Add(proveedorNoOptimo);
                                                                        _context.SaveChanges();

                                                                        var consultaProvODBC = new OdbcConsultaDTO();

                                                                        consultaProvODBC.consulta = "SELECT numpro, nombre FROM sp_proveedores WHERE numpro = ?";
                                                                        consultaProvODBC.parametros.Add(new OdbcParameterDTO
                                                                        {
                                                                            nombre = "numpro",
                                                                            tipo = OdbcType.Int,
                                                                            valor = prov
                                                                        });
                                                                        var _nombre_prov = _contextEnkontrol.Select<sp_proveedoresDTO>(EnkontrolAmbienteEnum.Prod, consultaProvODBC).FirstOrDefault();

                                                                        partidasNoOptimas.Add(new sp_proveedoresDTO
                                                                        {
                                                                            numpro = prov,
                                                                            nombre = _nombre_prov.nombre
                                                                        });

                                                                        if (!proveedorNoOptimo.VoBo)
                                                                        {
                                                                            laCompraTienePartidasNoOptimas = true;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            #endregion

                                            #region Calcular de nuevo los totales ahora con las partidas filtradas por proveedor
                                            var subTotalPorProveedor = lstPartidas.Select(x => x.importe).Sum();

                                            decimal ivaPorProveedor = 0;
                                            decimal totalPorProveedor = 0;

                                            switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                                            {
                                                case EmpresaEnum.Construplan:
                                                case EmpresaEnum.GCPLAN:
                                                case EmpresaEnum.Arrendadora:
                                                    {
                                                        decimal multiplier = (decimal)Math.Pow(10, Convert.ToDouble(2));
                                                        ivaPorProveedor = Math.Ceiling((subTotalPorProveedor * (compra.porcent_iva / 100)) * multiplier) / multiplier;
                                                        totalPorProveedor = (subTotalPorProveedor + ivaPorProveedor) - sumatoriaRetencion;
                                                        break;
                                                    }
                                                default:
                                                    {
                                                        ivaPorProveedor = Math.Ceiling(subTotalPorProveedor * (compra.porcent_iva / 100));
                                                        totalPorProveedor = (subTotalPorProveedor + ivaPorProveedor) - sumatoriaRetencion;
                                                        break;
                                                    }
                                            }
                                            #endregion

                                            #region Guardar Compra SIGOPLAN
                                            var nuevaCompraSIGOPLAN = new tblCom_OrdenCompra
                                            {
                                                cc = compra.cc,
                                                numero = numeroCompraNueva + 1,
                                                fecha = DateTime.Now,
                                                idLibreAbordo = compra.libre_abordo,
                                                tipo_oc_req = compra.tipo_oc_req,
                                                compradorSIGOPLAN = vSesiones.sesionUsuarioDTO.id, //Usuario SIGOPLAN
                                                compradorEnkontrol = compra.comprador, //Usuario Enkontrol
                                                compradorStarsoft = 0, //Usuario Starsoft
                                                moneda = infoProveedor.moneda.ToString(),
                                                tipo_cambio = infoProveedor.monedaTipoCambio,
                                                porcent_iva = compra.porcent_iva,
                                                sub_total = subTotalPorProveedor, //sub_total = compraPorProveedor.sub_total,
                                                iva = ivaPorProveedor, //iva = compraPorProveedor.iva,
                                                total = totalPorProveedor,
                                                estatus = compra.estatus != null ? compra.estatus : "",
                                                comentarios = requisicionEK.comentarios != null ? (string)requisicionEK.comentarios : "",
                                                bienes_servicios = compra.bienes_servicios != null ? compra.bienes_servicios : "",
                                                CFDI = compra.CFDI ?? "",
                                                tiempoEntregaDias = compra.tiempoEntregaDias,
                                                tiempoEntregaComentarios = compra.tiempoEntregaComentarios ?? "",
                                                estatusRegistro = true,
                                                anticipo = compra.anticipoBool,
                                                totalAnticipo = compra.totalAnticipo,
                                                st_impresa = "",
                                                colocada = false,
                                                correoProveedor = "",
                                                proveedor = prov,
                                                PERU_proveedor = "",
                                                PERU_cuentaCorriente = "",
                                                PERU_formaPago = "",
                                                PERU_tipoCambio = "",
                                                PERU_tipoCompra = ""
                                            };

                                            _context.tblCom_OrdenCompra.Add(nuevaCompraSIGOPLAN);
                                            _context.SaveChanges();
                                            #endregion

                                            #region ACTIVACION DE EQUIPO DE STANDBY
                                            var flagMaquinaStandBy = false;
                                            flagMaquinaStandBy = ActivarEconomicoPorAccionRealizada
                                                (
                                                    compra.cc,
                                                    null,
                                                    AccionActivacionEconomicoEnum.ELABORACION_ORDEN_COMPRA,
                                                    new { cc = compra.cc, numero = numeroCompraNueva + 1, esActualizacion = false }, true);
                                            #endregion

                                            #region Guardar Compra Detalle SIGOPLAN
                                            var partidaCompraSIGOPLAN = 1;

                                            foreach (var part in lstPartidas)
                                            {
                                                if (part.cantidad > 0)
                                                {
                                                    var nuevaCompraSIGOPLANDet = new tblCom_OrdenCompraDet
                                                    {
                                                        idOrdenCompra = nuevaCompraSIGOPLAN.id,
                                                        cc = nuevaCompraSIGOPLAN.cc,
                                                        numero = nuevaCompraSIGOPLAN.numero,
                                                        partida = partidaCompraSIGOPLAN++,
                                                        insumo = part.insumo,
                                                        fecha_entrega = part.fecha_entrega,
                                                        cantidad = part.cantidad,
                                                        precio = part.precio,
                                                        importe = part.importe,
                                                        ajuste_cant = part.ajuste_cant,
                                                        ajuste_imp = part.ajuste_imp,
                                                        num_requisicion = part.num_requisicion,
                                                        part_requisicion = part.part_requisicion,
                                                        cant_recibida = part.cant_recibida,
                                                        imp_recibido = part.imp_recibido,
                                                        fecha_recibido = part.fecha_recibido,
                                                        cant_canc = part.cant_canc,
                                                        imp_canc = part.imp_canc,
                                                        acum_ant = part.acum_ant ?? default(decimal),
                                                        max_orig = part.max_orig ?? default(decimal),
                                                        max_ppto = part.max_ppto ?? default(decimal),
                                                        area = part.area ?? 0,
                                                        cuenta = part.cuenta ?? 0,
                                                        porcent_iva = part.porcent_iva ?? default(decimal),
                                                        iva = part.iva ?? default(decimal),
                                                        partidaDescripcion = part.partidaDescripcion ?? "",
                                                        estatusRegistro = true
                                                    };

                                                    _context.tblCom_OrdenCompraDet.Add(nuevaCompraSIGOPLANDet);
                                                    _context.SaveChanges();
                                                }
                                            }
                                            #endregion

                                            var count = 0;

                                            #region Guardar Compra Enkontrol
                                            var consulta = @"INSERT INTO so_orden_compra 
                                     (cc, numero, fecha, libre_abordo, tipo_oc_req, comprador, proveedor, moneda, tipo_cambio, porcent_iva, 
                                     sub_total, iva, total, sub_tot_rec, iva_rec, total_rec, sub_tot_ajus, iva_ajus, total_ajus, st_impresa, 
                                     estatus, comentarios, solicito, vobo, autorizo, sub_tot_canc, iva_canc, total_canc, total_fac, total_pag, 
                                     embarquese, empleado_modifica, fecha_modifica, hora_modifica, tc_cc, anticipo, monto_anticipo, almacen, 
                                     bit_autorecepcion, almacen_autorecepcion, empleado_autorecepcion, rentencion_antes_iva, rentencion_despues_iva, 
                                     bienes_servicios, concepto_factura, tot_fac_ret, tot_ret_ret, usuario_autoriza, fecha_autoriza, st_autorizada, 
                                     imprime_porcentaje, ST_OC, empleado_autoriza, vobo_informa, vobo2, vobo3, vobo4, vobo5, vobo6, cambia_vobo, tmc, 
                                     autoriza_activos, fecha_vobo, fecha_vobo2, fecha_vobo3, bit_af, bit_arrenda, estatus_bloqueo, ruta_pdf, ruta_map) 
                                     VALUES (?,?,?,?,?,?,?,?,?,?, 
                                             ?,?,?,?,?,?,?,?,?,?, 
                                             ?,?,?,?,?,?,?,?,?,?, 
                                             ?,?,?,?,?,?,?,?,?,?, 
                                             ?,?,?,?,?,?,?,?,?,?, 
                                             ?,?,?,?,?,?,?,?,?,?, 
                                             ?,?,?,?,?,?,?,?,?,?)";

                                            using (var cmd = new OdbcCommand(consulta))
                                            {
                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                parameters.Add("@numero", OdbcType.Numeric).Value = numeroCompraNueva + 1;
                                                parameters.Add("@fecha", OdbcType.Date).Value = DateTime.Now;

                                                //Se guarda siempre con 1 porque en EnKontrol la tabla de libre abordo no contiene todos los almacenes. En SIGOPLAN se guarda con el número de almacén.
                                                parameters.Add("@libre_abordo", OdbcType.Numeric).Value = 1;

                                                parameters.Add("@tipo_oc_req", OdbcType.Char).Value = compra.tipo_oc_req;
                                                parameters.Add("@comprador", OdbcType.Numeric).Value = compra.comprador;
                                                parameters.Add("@proveedor", OdbcType.Numeric).Value = prov; //compra.proveedor;
                                                parameters.Add("@moneda", OdbcType.Char).Value = infoProveedor.moneda.ToString();
                                                parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = infoProveedor.monedaTipoCambio;
                                                parameters.Add("@porcent_iva", OdbcType.Numeric).Value = compra.porcent_iva;
                                                parameters.Add("@sub_total", OdbcType.Numeric).Value = subTotalPorProveedor;
                                                parameters.Add("@iva", OdbcType.Numeric).Value = ivaPorProveedor;
                                                parameters.Add("@total", OdbcType.Numeric).Value = totalPorProveedor;
                                                parameters.Add("@sub_tot_rec", OdbcType.Numeric).Value = 0;
                                                parameters.Add("@iva_rec", OdbcType.Numeric).Value = 0;
                                                parameters.Add("@total_rec", OdbcType.Numeric).Value = 0;
                                                parameters.Add("@sub_tot_ajus", OdbcType.Numeric).Value = compra.sub_tot_ajus;
                                                parameters.Add("@iva_ajus", OdbcType.Numeric).Value = compra.iva_ajus;
                                                parameters.Add("@total_ajus", OdbcType.Numeric).Value = compra.total_ajus;
                                                parameters.Add("@st_impresa", OdbcType.Char).Value = compra.st_impresa != null ? compra.st_impresa : "";
                                                parameters.Add("@estatus", OdbcType.Char).Value = " "; //Se pone un espacio en blanco porque si se guarda un string vacío truena en Enkontrol y no se ven algunos reportes.
                                                parameters.Add("@comentarios", OdbcType.Char).Value = requisicionEK.comentarios != null ? (string)requisicionEK.comentarios : "";
                                                parameters.Add("@solicito", OdbcType.Numeric).Value = compra.solicito;
                                                parameters.Add("@vobo", OdbcType.Numeric).Value = compra.vobo;
                                                parameters.Add("@autorizo", OdbcType.Numeric).Value = compra.autorizo;
                                                parameters.Add("@sub_tot_canc", OdbcType.Numeric).Value = compra.sub_tot_canc;
                                                parameters.Add("@iva_canc", OdbcType.Numeric).Value = compra.iva_canc;
                                                parameters.Add("@total_canc", OdbcType.Numeric).Value = compra.total_canc;
                                                parameters.Add("@total_fac", OdbcType.Numeric).Value = compra.total_fac;
                                                parameters.Add("@total_pag", OdbcType.Numeric).Value = compra.total_pag;
                                                parameters.Add("@embarquese", OdbcType.Char).Value = compra.embarquese != null ? compra.embarquese : "";
                                                parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = compra.comprador;
                                                parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                                parameters.Add("@hora_modifica", OdbcType.DateTime).Value = DateTime.Now;
                                                parameters.Add("@tc_cc", OdbcType.Numeric).Value = 1;
                                                parameters.Add("@anticipo", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@monto_anticipo", OdbcType.Numeric).Value = compra.monto_anticipo ?? (object)DBNull.Value;
                                                parameters.Add("@almacen", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@bit_autorecepcion", OdbcType.Char).Value = compra.bit_autorecepcion;
                                                parameters.Add("@almacen_autorecepcion", OdbcType.Numeric).Value =
                                                    compra.almacen_autorecepcion != null && compra.almacen_autorecepcion != 0 ? compra.almacen_autorecepcion : (object)DBNull.Value;
                                                parameters.Add("@empleado_autorecepcion", OdbcType.Numeric).Value =
                                                    compra.empleado_autorecepcion != null && compra.empleado_autorecepcion != 0 ? compra.empleado_autorecepcion : (object)DBNull.Value;
                                                parameters.Add("@rentencion_antes_iva", OdbcType.Numeric).Value = compra.rentencion_antes_iva;
                                                parameters.Add("@rentencion_despues_iva", OdbcType.Numeric).Value = compra.rentencion_despues_iva;
                                                parameters.Add("@bienes_servicios", OdbcType.Char).Value = compra.bienes_servicios != null ? compra.bienes_servicios : "";
                                                parameters.Add("@concepto_factura", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@tot_fac_ret", OdbcType.Numeric).Value = compra.tot_fac_ret;
                                                parameters.Add("@tot_ret_ret", OdbcType.Numeric).Value = compra.tot_ret_ret;
                                                parameters.Add("@usuario_autoriza", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@fecha_autoriza", OdbcType.Date).Value = DBNull.Value;
                                                parameters.Add("@st_autorizada", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@imprime_porcentaje", OdbcType.Char).Value = "N";
                                                parameters.Add("@ST_OC", OdbcType.Char).Value = compra.ST_OC != null ? compra.ST_OC : (object)DBNull.Value;
                                                parameters.Add("@empleado_autoriza", OdbcType.Numeric).Value = compra.empleado_autoriza ?? (object)DBNull.Value;
                                                parameters.Add("@vobo_informa", OdbcType.Char).Value = "N";
                                                parameters.Add("@vobo2", OdbcType.Numeric).Value = compra.vobo2;
                                                parameters.Add("@vobo3", OdbcType.Numeric).Value = compra.vobo3;
                                                parameters.Add("@vobo4", OdbcType.Numeric).Value = compra.vobo4;
                                                parameters.Add("@vobo5", OdbcType.Numeric).Value = compra.vobo5;
                                                parameters.Add("@vobo6", OdbcType.Numeric).Value = compra.vobo6;
                                                parameters.Add("@cambia_vobo", OdbcType.Numeric).Value = compra.cambia_vobo;
                                                parameters.Add("@tmc", OdbcType.Numeric).Value = compra.tmc;
                                                parameters.Add("@autoriza_activos", OdbcType.Numeric).Value =
                                                    compra.lstPartidas.Any(x => x.cantidad > 0 && x.insumo.ToString().Substring(0, 3) == "703") ? 1 : 0;
                                                parameters.Add("@fecha_vobo", OdbcType.Date).Value = DBNull.Value;
                                                parameters.Add("@fecha_vobo2", OdbcType.Date).Value = DBNull.Value;
                                                parameters.Add("@fecha_vobo3", OdbcType.Date).Value = DBNull.Value;
                                                parameters.Add("@bit_af", OdbcType.Char).Value = "N";
                                                parameters.Add("@bit_arrenda", OdbcType.Char).Value = "N";
                                                parameters.Add("@estatus_bloqueo", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@ruta_pdf", OdbcType.VarChar).Value = DBNull.Value;
                                                parameters.Add("@ruta_map", OdbcType.VarChar).Value = DBNull.Value;

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;

                                                count += cmd.ExecuteNonQuery();
                                            }
                                            #endregion

                                            var partidaCompraENKONTROL = 0;

                                            foreach (var part in lstPartidas)
                                            {
                                                if (part.cantidad > 0)
                                                {
                                                    partidaCompraENKONTROL += 1;

                                                    #region Guardar Compra Detalle Enkontrol
                                                    var consultaDet = @"INSERT INTO so_orden_compra_det 
                                            (cc, numero, partida, insumo, fecha_entrega, cantidad, precio, importe, ajuste_cant, ajuste_imp, num_requisicion, part_requisicion, 
                                            cant_recibida, imp_recibido, fecha_recibido, cant_canc, imp_canc, acum_ant, max_orig, max_ppto, area, cuenta, porcent_iva, iva) 
                                            VALUES (?,?,?,?,?,?,?,?,?,?, 
                                                    ?,?,?,?,?,?,?,?,?,?, 
                                                    ?,?,?,?)";

                                                    using (var cmd = new OdbcCommand(consultaDet))
                                                    {
                                                        OdbcParameterCollection parameters = cmd.Parameters;

                                                        parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                        parameters.Add("@numero", OdbcType.Numeric).Value = numeroCompraNueva + 1;
                                                        parameters.Add("@partida", OdbcType.Numeric).Value = partidaCompraENKONTROL;
                                                        parameters.Add("@insumo", OdbcType.Numeric).Value = part.insumo;
                                                        parameters.Add("@fecha_entrega", OdbcType.Date).Value = part.fecha_entrega ?? DateTime.Now;
                                                        parameters.Add("@cantidad", OdbcType.Numeric).Value = part.cantidad;
                                                        parameters.Add("@precio", OdbcType.Numeric).Value = part.precio;
                                                        parameters.Add("@importe", OdbcType.Numeric).Value = part.importe;
                                                        parameters.Add("@ajuste_cant", OdbcType.Numeric).Value = part.ajuste_cant;
                                                        parameters.Add("@ajuste_imp", OdbcType.Numeric).Value = part.ajuste_imp;
                                                        parameters.Add("@num_requisicion", OdbcType.Numeric).Value = part.num_requisicion;
                                                        parameters.Add("@part_requisicion", OdbcType.Numeric).Value = part.part_requisicion;
                                                        parameters.Add("@cant_recibida", OdbcType.Numeric).Value = part.cant_recibida;
                                                        parameters.Add("@imp_recibido", OdbcType.Numeric).Value = part.imp_recibido;
                                                        parameters.Add("@fecha_recibido", OdbcType.Date).Value = part.fecha_recibido ?? (object)DBNull.Value;
                                                        parameters.Add("@cant_canc", OdbcType.Numeric).Value = part.cant_canc;
                                                        parameters.Add("@imp_canc", OdbcType.Numeric).Value = part.imp_canc;
                                                        parameters.Add("@acum_ant", OdbcType.Numeric).Value = part.acum_ant ?? (object)DBNull.Value;
                                                        parameters.Add("@max_orig", OdbcType.Numeric).Value = part.max_orig ?? (object)DBNull.Value;
                                                        parameters.Add("@max_ppto", OdbcType.Numeric).Value = part.max_ppto ?? (object)DBNull.Value;
                                                        parameters.Add("@area", OdbcType.Numeric).Value = part.area ?? 0;
                                                        parameters.Add("@cuenta", OdbcType.Numeric).Value = part.cuenta ?? 0;
                                                        parameters.Add("@porcent_iva", OdbcType.Numeric).Value = DBNull.Value;
                                                        parameters.Add("@iva", OdbcType.Numeric).Value = DBNull.Value;

                                                        cmd.Connection = trans.Connection;
                                                        cmd.Transaction = trans;

                                                        count += cmd.ExecuteNonQuery();
                                                    }
                                                    #endregion

                                                    #region Actualizar Explosión para Compra
                                                    var registroExplosionEK = consultaCheckProductivo(
                                                        string.Format(@"SELECT * FROM so_explos_mat WHERE cc = '{0}' AND insumo = {1} AND year_explos = {2}", compra.cc, part.insumo, DateTime.Now.Year)
                                                    );

                                                    if (registroExplosionEK == null)
                                                    {
                                                        #region Insert Registro Explosión
                                                        var consultaExplosionInsert = @"INSERT INTO so_explos_mat 
                                            (cc, insumo, cantidad, precio, aditiva_cant, aditiva_imp, deduc_cant, deduc_imp, cant_requerida, 
                                            comp_cant, comp_imp, ajuste_cant, ajuste_imp, traspaso_cant, traspaso_imp, cant_recibida, imp_recibido, 
                                            aditiva_cant_fecha, deduc_cant_fecha, aditiva_precio_fecha, deduc_precio_fecha, aditiva_precio, deductiva_precio, 
                                            traspaso_cant_entrada, traspaso_imp_entrada, importe, year_explos, periodo, bit_auto_presu, cantidad_aditiva_sun, 
                                            cantidad_deductiva_sun, cantidad_extra_sun) 
                                            VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                                        using (var cmd = new OdbcCommand(consultaExplosionInsert))
                                                        {
                                                            OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                            parametersExplosion.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                            parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = part.insumo;
                                                            parametersExplosion.Add("@cantidad", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@precio", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@aditiva_cant", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@aditiva_imp", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@deduc_cant", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@deduc_imp", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@cant_requerida", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@comp_cant", OdbcType.Numeric).Value = part.cantidad;
                                                            parametersExplosion.Add("@comp_imp", OdbcType.Numeric).Value = part.importe;
                                                            parametersExplosion.Add("@ajuste_cant", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@ajuste_imp", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@traspaso_cant", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@traspaso_imp", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@cant_recibida", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@imp_recibido", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@aditiva_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                                            parametersExplosion.Add("@deduc_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                                            parametersExplosion.Add("@aditiva_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                                            parametersExplosion.Add("@deduc_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                                            parametersExplosion.Add("@aditiva_precio", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@deductiva_precio", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@traspaso_cant_entrada", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@traspaso_imp_entrada", OdbcType.Numeric).Value = 0;
                                                            parametersExplosion.Add("@importe", OdbcType.Numeric).Value = DBNull.Value;
                                                            parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;
                                                            parametersExplosion.Add("@periodo", OdbcType.Char).Value = DBNull.Value;
                                                            parametersExplosion.Add("@bit_auto_presu", OdbcType.Char).Value = "N";
                                                            parametersExplosion.Add("@cantidad_aditiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                                            parametersExplosion.Add("@cantidad_deductiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                                            parametersExplosion.Add("@cantidad_extra_sun", OdbcType.Numeric).Value = DBNull.Value;

                                                            cmd.Connection = trans.Connection;
                                                            cmd.Transaction = trans;

                                                            count += cmd.ExecuteNonQuery();
                                                        }
                                                        #endregion
                                                    }
                                                    else
                                                    {
                                                        #region Update Registro Explosión
                                                        var registroExplosion = ((List<dynamic>)registroExplosionEK.ToObject<List<dynamic>>())[0];

                                                        var nuevaCantidadComprada = Convert.ToDecimal(registroExplosion.comp_cant, CultureInfo.InvariantCulture) + part.cantidad;
                                                        var nuevoImporteComprado = Convert.ToDecimal(registroExplosion.comp_imp, CultureInfo.InvariantCulture) + part.importe;

                                                        var consultaExplosionUpdate = @"
                                            UPDATE so_explos_mat 
                                            SET comp_cant = ?, comp_imp = ? 
                                            WHERE cc = ? AND insumo = ? AND year_explos = ?";

                                                        using (var cmd = new OdbcCommand(consultaExplosionUpdate))
                                                        {
                                                            OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                            parametersExplosion.Add("@comp_cant", OdbcType.Numeric).Value = nuevaCantidadComprada;
                                                            parametersExplosion.Add("@comp_imp", OdbcType.Numeric).Value = nuevoImporteComprado;

                                                            parametersExplosion.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                            parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = part.insumo;
                                                            parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;

                                                            cmd.Connection = trans.Connection;
                                                            cmd.Transaction = trans;

                                                            count += cmd.ExecuteNonQuery();
                                                        }
                                                        #endregion
                                                    }
                                                    #endregion

                                                    var partidaRequisicionEK = consultaCheckProductivo(
                                                        string.Format(@"SELECT 
                                                                * 
                                                            FROM so_requisicion_det 
                                                            WHERE cc = '{0}' AND numero = {1} AND partida = {2} AND insumo = {3}",
                                                        compra.cc,
                                                        part.num_requisicion,
                                                        part.part_requisicion,
                                                        part.insumo)
                                                    );

                                                    if (partidaRequisicionEK != null)
                                                    {
                                                        #region Update Partida Requisicion SIGOPLAN
                                                        var partidaRequisicion = (List<dynamic>)partidaRequisicionEK.ToObject<List<dynamic>>();
                                                        var numeroRequisicion = part.num_requisicion;

                                                        var requisicionSIGOPLAN = _context.tblCom_Req.FirstOrDefault(x => x.estatusRegistro && x.cc == compra.cc && x.numero == numeroRequisicion);

                                                        if (requisicionSIGOPLAN != null)
                                                        {
                                                            var numeroPartida = part.part_requisicion;
                                                            var numeroInsumo = part.insumo;
                                                            var partidaRequisicionSIGOPLAN = _context.tblCom_ReqDet.FirstOrDefault(x =>
                                                                x.estatusRegistro &&
                                                                x.idReq == requisicionSIGOPLAN.id &&
                                                                x.partida == numeroPartida &&
                                                                x.insumo == numeroInsumo);

                                                            if (partidaRequisicionSIGOPLAN != null)
                                                            {
                                                                partidaRequisicionSIGOPLAN.cantOrdenada += part.cantidad;

                                                                _context.Entry(partidaRequisicionSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                                                _context.SaveChanges();
                                                            }
                                                        }
                                                        #endregion

                                                        #region Update Partida Requisicion Enkontrol
                                                        var consultaPartidaReq = @"
                                            UPDATE so_requisicion_det 
                                            SET 
                                                cant_ordenada = ? 
                                            WHERE cc = ? AND numero = ? AND partida = ? AND insumo = ?";

                                                        using (var cmd = new OdbcCommand(consultaPartidaReq))
                                                        {
                                                            OdbcParameterCollection parameters = cmd.Parameters;

                                                            parameters.Add("@cant_ordenada", OdbcType.Numeric).Value =
                                                                Convert.ToDecimal(partidaRequisicion[0].cant_ordenada.Value, CultureInfo.InvariantCulture) + part.cantidad;

                                                            parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                            parameters.Add("@numero", OdbcType.Numeric).Value = part.num_requisicion;
                                                            parameters.Add("@partida", OdbcType.Numeric).Value = part.part_requisicion;
                                                            parameters.Add("@insumo", OdbcType.Numeric).Value = part.insumo;

                                                            cmd.Connection = trans.Connection;
                                                            cmd.Transaction = trans;

                                                            count += cmd.ExecuteNonQuery();
                                                        }
                                                        #endregion
                                                    }

                                                    if (part.partidaDescripcion != "" && part.partidaDescripcion != null)
                                                    {
                                                        #region Guardar Descripcion Partida Compra Enkontrol
                                                        var consultaPartidaDescripcion = @"INSERT INTO so_orden_det_linea (cc, numero, partida, descripcion) VALUES (?,?,?,?)";

                                                        using (var cmd = new OdbcCommand(consultaPartidaDescripcion))
                                                        {
                                                            OdbcParameterCollection parameters = cmd.Parameters;

                                                            parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                            parameters.Add("@numero", OdbcType.Numeric).Value = numeroCompraNueva + 1;
                                                            parameters.Add("@partida", OdbcType.Numeric).Value = partidaCompraENKONTROL;
                                                            parameters.Add("@descripcion", OdbcType.VarChar).Value = part.partidaDescripcion ?? (object)DBNull.Value;

                                                            cmd.Connection = trans.Connection;
                                                            cmd.Transaction = trans;

                                                            count += cmd.ExecuteNonQuery();
                                                        }
                                                        #endregion
                                                    }
                                                }
                                            }

                                            if (compra.lstRetenciones != null)
                                            {
                                                foreach (var ret in compra.lstRetenciones)
                                                {
                                                    #region Guardar Retenciones Enkontrol
                                                    var consultaRet = @"INSERT INTO so_ordenc_retenciones 
                                                            (cc, numero, id_cpto, orden, cantidad, porc_ret, importe, facturado, retenido, aplica, 
                                                            forma_pago, tm_descto, calc_iva, afecta_oc, afecta_fac, facturado_ret, facturado_iva, facturado_total, 
                                                            retenido_ret, retenido_iva, retenido_total) 
                                                        VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                                    using (var cmd = new OdbcCommand(consultaRet))
                                                    {
                                                        OdbcParameterCollection parameters = cmd.Parameters;

                                                        parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                        parameters.Add("@numero", OdbcType.Numeric).Value = numeroCompraNueva + 1;
                                                        parameters.Add("@id_cpto", OdbcType.Numeric).Value = ret.id_cpto;
                                                        parameters.Add("@orden", OdbcType.Numeric).Value = ret.orden;
                                                        parameters.Add("@cantidad", OdbcType.Numeric).Value = ret.cantidad;
                                                        parameters.Add("@porc_ret", OdbcType.Numeric).Value = ret.porc_ret;
                                                        parameters.Add("@importe", OdbcType.Numeric).Value = ret.importe;
                                                        parameters.Add("@facturado", OdbcType.Numeric).Value = ret.facturado;
                                                        parameters.Add("@retenido", OdbcType.Numeric).Value = ret.retenido;
                                                        parameters.Add("@aplica", OdbcType.Numeric).Value = ret.aplica;
                                                        parameters.Add("@forma_pago", OdbcType.Numeric).Value = ret.forma_pago;
                                                        parameters.Add("@tm_descto", OdbcType.Numeric).Value = DBNull.Value;
                                                        parameters.Add("@calc_iva", OdbcType.Numeric).Value = ret.calc_iva;
                                                        parameters.Add("@afecta_oc", OdbcType.Char).Value = ret.bit_afecta_oc != null ? ret.bit_afecta_oc : "N";
                                                        parameters.Add("@afecta_fac", OdbcType.Char).Value = ret.afecta_fac != null ? ret.afecta_fac : "N";
                                                        parameters.Add("@facturado_ret", OdbcType.Numeric).Value = ret.facturado_ret;
                                                        parameters.Add("@facturado_iva", OdbcType.Numeric).Value = ret.facturado_iva;
                                                        parameters.Add("@facturado_total", OdbcType.Numeric).Value = ret.facturado_total;
                                                        parameters.Add("@retenido_ret", OdbcType.Numeric).Value = ret.retenido_ret;
                                                        parameters.Add("@retenido_iva", OdbcType.Numeric).Value = ret.retenido_iva;
                                                        parameters.Add("@retenido_total", OdbcType.Numeric).Value = ret.retenido_total;

                                                        cmd.Connection = trans.Connection;
                                                        cmd.Transaction = trans;

                                                        count += cmd.ExecuteNonQuery();
                                                    }
                                                    #endregion
                                                }
                                            }

                                            #region COMENTADO
                                            //#region Autorización automática de compras de consigna/licitación/CRC/convenio con total menor igual a 20,000
                                            //var num_requisicion = lstPartidas[0].num_requisicion;
                                            //var registroRequisicionSIGOPLAN = _context.tblCom_Req.FirstOrDefault(x => x.estatusRegistro && x.cc == compra.cc && x.numero == num_requisicion);

                                            //if (registroRequisicionSIGOPLAN != null)
                                            //{
                                            //    if ((totalPorProveedor * (compra.moneda == 2 ? infoProveedor.monedaTipoCambio : 1)) < 20000 && (registroRequisicionSIGOPLAN.consigna == true || registroRequisicionSIGOPLAN.licitacion || registroRequisicionSIGOPLAN.crc || registroRequisicionSIGOPLAN.convenio))
                                            //    {
                                            //        #region Función para autorizar copiada (autorizarCompra)
                                            //        var siguienteNumeroCompra = numeroCompraNueva + 1;
                                            //        var usuario = vSesiones.sesionUsuarioDTO;
                                            //        var relUser = ufs.getUsuarioService().getUserEk(usuario.id);

                                            //        using (var cmd = new OdbcCommand(@"UPDATE so_orden_compra SET autorizo = ?, usuario_autoriza = ?, fecha_autoriza = ?, ST_OC = ?, empleado_autoriza = ? WHERE cc = ? and numero = ?"))
                                            //        {
                                            //            OdbcParameterCollection parameters = cmd.Parameters;

                                            //            parameters.Add("@autorizo", OdbcType.Numeric).Value = relUser.empleado;
                                            //            parameters.Add("@usuario_autoriza", OdbcType.Numeric).Value = relUser.empleado;
                                            //            parameters.Add("@fecha_autoriza", OdbcType.Date).Value = DateTime.Now;
                                            //            parameters.Add("@ST_OC", OdbcType.Char).Value = "A";
                                            //            parameters.Add("@empleado_autoriza", OdbcType.Numeric).Value = relUser.empleado;

                                            //            parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                            //            parameters.Add("@numero", OdbcType.Numeric).Value = siguienteNumeroCompra;

                                            //            cmd.Connection = trans.Connection;
                                            //            cmd.Transaction = trans;
                                            //            count += cmd.ExecuteNonQuery();
                                            //        }

                                            //        var compraSIGOPLAN = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.cc == compra.cc && x.numero == siguienteNumeroCompra && x.estatusRegistro);

                                            //        if (compraSIGOPLAN != null)
                                            //        {
                                            //            compraSIGOPLAN.autorizo = relUser.empleado;
                                            //            compraSIGOPLAN.usuario_autoriza = relUser.empleado;
                                            //            compraSIGOPLAN.fecha_autoriza = DateTime.Now;
                                            //            compraSIGOPLAN.ST_OC = "A";
                                            //            compraSIGOPLAN.empleado_autoriza = relUser.empleado;
                                            //            compraSIGOPLAN.empleadoUltimaAccion = relUser.empleado;
                                            //            compraSIGOPLAN.fechaUltimaAccion = DateTime.Now;
                                            //            compraSIGOPLAN.tipoUltimaAccion = TipoUltimaAccionEnum.Autorizacion;

                                            //            _context.SaveChanges();
                                            //        }
                                            //        #endregion
                                            //    }
                                            //}
                                            //#endregion
                                            #endregion

                                            #region Obtener VoBos y Autorizaciones
                                            var objCompra = new OrdenCompraDTO { cc = nuevaCompraSIGOPLAN.cc, numero = nuevaCompraSIGOPLAN.numero, esOC_Interna = false };
                                            var vobos = getVobos(objCompra);
                                            var autorizaciones = getAutorizaciones(objCompra);

                                            compra.stringVobosAutorizaciones += "[" + nuevaCompraSIGOPLAN.cc + "-" + nuevaCompraSIGOPLAN.numero + " VoBos: ";

                                            foreach (var v in vobos)
                                            {
                                                compra.stringVobosAutorizaciones += v.usu_numero + "-" + v.usu_nombre + " ";
                                            }

                                            compra.stringVobosAutorizaciones += "Autorizaciones: ";

                                            foreach (var a in autorizaciones)
                                            {
                                                compra.stringVobosAutorizaciones += (int)a.usu_numero + "-" + (string)a.usu_nombre + " ";
                                            }

                                            compra.stringVobosAutorizaciones += "] ";
                                            #endregion
                                        }

                                        #region Calificación encuestas
                                        if (!mismoProveedor)
                                        {
                                            if (laCompraTienePartidasNoOptimas)
                                            {
                                                var correoProvNoOptimo = new Infrastructure.DTO.CorreoDTO();

                                                if (partidasNoOptimas.Count > 1)
                                                {
                                                    correoProvNoOptimo.asunto =
                                                        "Se ha realizado la orden de compra: " + compra.cc + "-" + numerosCompras.First() +
                                                        " con proveedores no optimos";
                                                    correoProvNoOptimo.cuerpo =
                                                        "Se realizó la orden de compra: " + compra.cc + "-" + numerosCompras.First() +
                                                            " con los proveedores siguientes <br /><strong>" +
                                                            " <ol>";
                                                    foreach (var item in partidasNoOptimas)
                                                    {
                                                        correoProvNoOptimo.cuerpo += "<li>" + item.numpro + "-" + item.nombre + "</li>";
                                                    }
                                                    correoProvNoOptimo.cuerpo += "</ol></strong><br />Lo cuales no son optimos.";
                                                }
                                                else
                                                {
                                                    correoProvNoOptimo.asunto =
                                                    "Se ha realizado la orden de compra: " + compra.cc + "-" + numerosCompras.First() +
                                                    " con un proveedor no optimo";
                                                    correoProvNoOptimo.cuerpo =
                                                        "Se realizó la orden de compra <strong>" + compra.cc + "-" + numerosCompras.First() + "</strong>" +
                                                        " con el proveedor <strong>" + compra.proveedor + (partidasNoOptimas.Count > 0 ? (partidasNoOptimas.First().numpro + " - " + partidasNoOptimas.First().nombre) : "") + "</strong>" +
                                                        " el cual no es optimo en base al cuadro comparativo <strong>" +
                                                        calificacionProveedores.First().Numero + "-" + calificacionProveedores.First().CC + "</strong>";
                                                }
                                                correoProvNoOptimo.correos = new List<string> { "victor.esquer@construplan.com.mx" };
                                                //correoProvNoOptimo.correos = new List<string> { "martin.zayas@construplan.com.mx" };
#if DEBUG
                                                correoProvNoOptimo.correos = new List<string> { "omar.nunez@construplan.com.mx" };
#endif
                                                var correoEnviado = correoProvNoOptimo.Enviar();
                                            }
                                        }
                                        #endregion

                                        #region CODIGO ANTERIOR DE CALIFICACION ENCUESTAS
                                        /* SOLO LOS USUARIOS JOSE PEDRO LOPEZ Y ROGELIO PACHECO
                             * PUEDEN DAR DE ALTA REGISTOS DE PRUEBAS
                             * ID: 3287 JUAN PEDRO CARREON VILLA
                             * ID: 1060 ROGELIO PACHECO VALENCIA
                             * * update 18/02/2022 ahora los usuarios registrados en la tabla tblCom_CC_PermisoCompradorCalificarOC son los que pueden dar de alta registros
                            */
                                        if (mismoProveedor)
                                        {
                                            //int idUsuarioPrueba = vSesiones.sesionUsuarioDTO.id;
                                            if (/*idUsuarioPrueba == 3287 || idUsuarioPrueba == 1060*/permisosCompradoresCalificacion.Contains(vSesiones.sesionUsuarioDTO.id))
                                            {
                                                #region CALIFICACIONES CUADRO COMPARATIVO

                                                var proveedorUnico = compra.lstPartidas.Where(x => x.cantidad > 0).First().proveedorDistinto;

                                                var consultaProvODBC = new OdbcConsultaDTO();

                                                consultaProvODBC.consulta = "SELECT nombre FROM sp_proveedores WHERE numpro = ?";
                                                consultaProvODBC.parametros.Add(new OdbcParameterDTO
                                                {
                                                    nombre = "numpro",
                                                    tipo = OdbcType.Int,
                                                    valor = proveedorUnico
                                                });
                                                var _prov = _contextEnkontrol.Select<dynamic>(EnkontrolAmbienteEnum.Prod, consultaProvODBC).FirstOrDefault();

                                                var num_requi = compra.lstPartidas[0].num_requisicion;

                                                var cuadrosCalificacion = _context.tblCom_CC_Calificacion.Where
                                                    (w =>
                                                        w.esActivo &&
                                                        w.Numero == num_requi &&
                                                        w.CC.ToUpper() == compra.cc.ToUpper()
                                                    ).OrderByDescending(o => o.Calificacion).ToList();

                                                if (cuadrosCalificacion.Count > 0)
                                                {
                                                    var esCompraOptima = cuadrosCalificacion.First().Proveedor == proveedorUnico;
                                                    var esCompraNoOptima = cuadrosCalificacion.Last().Proveedor == proveedorUnico;
                                                    var esCompraMedia = !esCompraOptima && !esCompraNoOptima;

                                                    var calificacionProvSeleccionado = cuadrosCalificacion.FirstOrDefault(f => f.Proveedor == proveedorUnico);

                                                    if (calificacionProvSeleccionado != null)
                                                    {
                                                        var proveedorNoOptimo = new tblCom_CC_ProveedorNoOptimo();

                                                        proveedorNoOptimo.CalificacionId = calificacionProvSeleccionado.Id;
                                                        proveedorNoOptimo.NumeroCompra = numerosCompras.First();
                                                        proveedorNoOptimo.Estatus = true;
                                                        proveedorNoOptimo.VoBo = esCompraOptima;
                                                        proveedorNoOptimo.IdTipoCalificacion = esCompraOptima ? (int)TipoCalificacion.Optima : esCompraNoOptima ? (int)TipoCalificacion.NoOptima : (int)TipoCalificacion.Media;
                                                        proveedorNoOptimo.Fecha = DateTime.Now;
                                                        proveedorNoOptimo.FechaCreacion = DateTime.Now;
                                                        proveedorNoOptimo.UsuarioIdVoBo = vSesiones.sesionUsuarioDTO.id;
                                                        proveedorNoOptimo.idUsuario = vSesiones.sesionUsuarioDTO.id;

                                                        _context.tblCom_CC_ProveedorNoOptimo.Add(proveedorNoOptimo);
                                                        _context.SaveChanges();

                                                        if (!esCompraOptima)
                                                        {
                                                            var correoProvNoOptimo = new Infrastructure.DTO.CorreoDTO();

                                                            correoProvNoOptimo.asunto =
                                                                "Se ha realizado la orden de compra: " + compra.cc + "-" + numerosCompras.First() +
                                                                " con un proveedor no optimo";
                                                            correoProvNoOptimo.cuerpo =
                                                                "Se realizó la orden de compra <strong>" + compra.cc + "-" + numerosCompras.First() + "</strong>" +
                                                                " con proveedor <strong>" + proveedorUnico + (_prov != null ? "-" + _prov.nombre : "") + "</strong>" +
                                                                " el cual no es optimo en base al cuadro comparativo <strong>" +
                                                                cuadrosCalificacion.First().Numero + "-" + cuadrosCalificacion.First().CC + "</strong>";
                                                            correoProvNoOptimo.correos = new List<string> { "victor.esquer@construplan.com.mx" };
#if DEBUG
                                                            correoProvNoOptimo.correos = new List<string> { "omar.nunez@construplan.com.mx" };
#endif
                                                            var correoEnviado = correoProvNoOptimo.Enviar();
                                                        }
                                                    }
                                                }
                                                #endregion
                                            }
                                        }
                                        #endregion

                                        if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                                        {
                                            #region SE ACTUALIZA EL ESTATUS DEL BL A ESTATUS DE OC
                                            if (compra.lstPartidas.Count > 0)
                                            {
                                                var _ccBL = compra.cc.ToUpper();
                                                var _numReqBL = compra.lstPartidas.First().num_requisicion;

                                                var _blRequi = _context.tblBL_Requisiciones
                                                    .Where(w =>
                                                        w.numRequisicion == _numReqBL.ToString().ToUpper()
                                                    )
                                                    .Join(
                                                        _context.tblBL_CatBackLogs.Where(w => w.cc.ToUpper() == _ccBL),
                                                        requi => requi.idBackLog,
                                                        bl => bl.id,
                                                        (requi, bl) => new { requi, bl }
                                                    )
                                                    .FirstOrDefault(f =>
                                                        f.requi.numRequisicion == _numReqBL.ToString().ToUpper() &&
                                                        f.bl.cc == _ccBL &&
                                                        f.bl.esActivo &&
                                                        f.requi.esActivo &&
                                                        f.bl.idEstatus == (int)EstatusBackLogEnum.ElaboracionRequisicion
                                                    );

                                                if (_blRequi != null)
                                                {
                                                    var _ordenCompraBL = new tblBL_OrdenesCompra();

                                                    _ordenCompraBL.cc = _ccBL.ToString().ToUpper();
                                                    _ordenCompraBL.esActivo = true;
                                                    _ordenCompraBL.estatus = "";
                                                    _ordenCompraBL.fechaCreacionNumOC = DateTime.Now;
                                                    _ordenCompraBL.fechaModificacionNumOC = _ordenCompraBL.fechaCreacionNumOC;
                                                    _ordenCompraBL.idBackLog = _blRequi.bl.id;
                                                    _ordenCompraBL.numOC = _numeroCompraParaBL.ToString();
                                                    _ordenCompraBL.numRequisicion = _numReqBL.ToString();

                                                    _context.tblBL_OrdenesCompra.Add(_ordenCompraBL);
                                                    _context.SaveChanges();

                                                    var requisModuloCompras = _context.tblCom_Req.FirstOrDefault(f => f.cc == _ccBL.ToUpper() && f.numero == _numReqBL && f.estatusRegistro);

                                                    if (requisModuloCompras != null)
                                                    {
                                                        var detallesRequisModuloCompras = _context.tblCom_ReqDet.Where(w => w.idReq == requisModuloCompras.id && w.estatusRegistro);

                                                        var requiTerminada = true;
                                                        foreach (var _detReq in detallesRequisModuloCompras)
                                                        {
                                                            if (_detReq.cantidad != _detReq.cantOrdenada)
                                                            {
                                                                requiTerminada = false;
                                                            }
                                                        }

                                                        if (requiTerminada)
                                                        {
                                                            var blOrdenCompraTerminado = _context.tblBL_CatBackLogs.FirstOrDefault(f => f.id == _blRequi.bl.id);

                                                            if (blOrdenCompraTerminado != null)
                                                            {
                                                                blOrdenCompraTerminado.idEstatus = (int)EstatusBackLogEnum.ElaboracionOC;
                                                                _context.SaveChanges();

                                                                #region SE REGISTRA BITACORA DE CUANTOS DÍAS DURO EL ESTATUS A ACTUALIZAR
                                                                int diasTranscurridos = 0;
                                                                tblBL_BitacoraEstatusBL objBitacoraBL = _context.tblBL_BitacoraEstatusBL.Where(w => w.idBL == _blRequi.bl.id && w.esActivo).OrderByDescending(o => o.id).FirstOrDefault();
                                                                if (objBitacoraBL != null)
                                                                    diasTranscurridos = (DateTime.Now - objBitacoraBL.fechaCreacion).Days;

                                                                tblBL_BitacoraEstatusBL objGuardarBitacoraEstatusBL = new tblBL_BitacoraEstatusBL();
                                                                objGuardarBitacoraEstatusBL.idBL = _blRequi.bl.id;
                                                                objGuardarBitacoraEstatusBL.areaCuenta = _blRequi.bl.areaCuenta;
                                                                objGuardarBitacoraEstatusBL.diasTranscurridos = diasTranscurridos;
                                                                objGuardarBitacoraEstatusBL.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                                                                objGuardarBitacoraEstatusBL.idUsuarioModificacion = 0;
                                                                objGuardarBitacoraEstatusBL.fechaCreacion = DateTime.Now;
                                                                objGuardarBitacoraEstatusBL.fechaModificacion = new DateTime(2000, 01, 01);
                                                                objGuardarBitacoraEstatusBL.esActivo = true;
                                                                _context.tblBL_BitacoraEstatusBL.Add(objGuardarBitacoraEstatusBL);
                                                                _context.SaveChanges();
                                                                #endregion
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            #endregion
                                        }

                                        #region Cancelar links pendientes de proveedores.
                                        var ccReq = compra.cc;
                                        var numeroReq = compra.lstPartidas[0].num_requisicion;
                                        var listaLinks = _context.tblCom_ProveedoresLinks.Where(x => x.registroActivo && x.idEstatusRegistro == EstatusRegistroProveedorLinkEnum.PENDIENTE && x.cc == ccReq && x.numRequisicion == numeroReq).ToList();

                                        foreach (var link in listaLinks)
                                        {
                                            link.idEstatusRegistro = EstatusRegistroProveedorLinkEnum.CANCELADO;
                                            _context.SaveChanges();
                                        }
                                        #endregion

                                        trans.Commit();
                                        dbSigoplanTransaction.Commit();

                                        List<string> listStringNumerosCompras = numerosCompras.ConvertAll<string>(x => compra.cc + "-" + x.ToString());

                                        result.Add("info", compra);
                                        result.Add("numerosCompras", numerosCompras);
                                        result.Add("numerosComprasString", string.Join(", ", listStringNumerosCompras));
                                        result.Add("partidas", compra.lstPartidas);
                                        result.Add("pagos", compra.lstPagos);
                                        result.Add("retenciones", compra.lstRetenciones);

                                        result.Add(SUCCESS, true);
                                    }
                                    catch (Exception e)
                                    {
                                        trans.Rollback();
                                        dbSigoplanTransaction.Rollback();

                                        LogError(0, 0, "OrdenCompraController", "guardarNuevaCompra", e, AccionEnum.AGREGAR, 0, new { compra = compra });

                                        result.Add(MESSAGE, e.Message);
                                        result.Add(SUCCESS, false);
                                    }
                                }
                            }
                        }
                        #endregion
                        break;
                    }
            }

            return result;
        }
        public Dictionary<string, object> guardarNuevaCompraInterna(OrdenCompraDTO compra)
        {
            var result = new Dictionary<string, object>();

            var _numeroCompraParaBL = 0;

            using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    // SE VERIFICA SI LA ORDEN DE COMPRA YA EXISTE
                    tblCom_OrdenCompra_Interna objOrdenCompra = _context.tblCom_OrdenCompra_Interna.Where(w => w.cc == compra.cc && w.numero == compra.numero).FirstOrDefault();
                    if (objOrdenCompra != null)
                    {
                        #region EDITAR ORDEN COMPRA INTERNA
                        tblCom_OrdenCompraDet_Interna objOrdenCompraDet = _context.tblCom_OrdenCompraDet_Interna.Where(w => w.idOrdenCompra == objOrdenCompra.id).FirstOrDefault();
                        if (objOrdenCompraDet == null)
                            throw new Exception("Ocurrió un error al actualizar la Orden de Compra.");

                        objOrdenCompraDet.area = Convert.ToInt32(compra.lstPartidas[0].area);
                        objOrdenCompraDet.cuenta = Convert.ToInt32(compra.lstPartidas[0].cuenta);
                        _context.SaveChanges();

                        result.Add(MESSAGE, "Se ha actualizado con éxito.");
                        #endregion
                    }
                    else
                    {
                        #region NUEVO ORDEN DE COMPRA INTERNA
                        #region Validación Área-Cuenta
                        //if (compra.lstPartidas.Any(x => x.area == 0 || x.cuenta == 0 || x.area == null || x.cuenta == null))
                        //{
                        //    if (vSesiones.sesionEmpresaActual == 1 || vSesiones.sesionEmpresaActual == 4 || vSesiones.sesionEmpresaActual == 5)
                        //    {
                        //        var gruposValidaAreaCuentaEK = consultaCheckProductivo(string.Format(@"SELECT * FROM grupos_insumo WHERE valida_area_cta = 'S'"));

                        //        if (gruposValidaAreaCuentaEK != null)
                        //        {
                        //            var gruposValidaAreaCuenta = (List<dynamic>)gruposValidaAreaCuentaEK.ToObject<List<dynamic>>();

                        //            foreach (var p in compra.lstPartidas.Where(x => x.area == 0 || x.cuenta == 0 || x.area == null || x.cuenta == null).ToList())
                        //            {
                        //                var tipo = Int32.Parse(p.insumo.ToString().Substring(0, 1));
                        //                var grupo = Int32.Parse(p.insumo.ToString().Substring(1, 2));
                        //                var checkInsumoValidaAreaCuenta = gruposValidaAreaCuenta.FirstOrDefault(x => (int)x.tipo_insumo == tipo && (int)x.grupo_insumo == grupo);

                        //                if (checkInsumoValidaAreaCuenta != null)
                        //                {
                        //                    throw new Exception("Debe capturar el Área-Cuenta para el insumo " + p.insumo + " en la partida #" + p.partida + ".");
                        //                }
                        //            }
                        //        }
                        //    }
                        //    else
                        //    {
                        //        throw new Exception("Debe capturar el Área-Cuenta de todas las partidas.");
                        //    }
                        //}
                        #endregion

                        #region Validación precio negativo o precio en cero
                        //if (!compra.lstPartidas.Any(x => x.num_requisicion == 0))
                        //{
                        if (compra.lstPartidas.Where(x => x.cantidad > 0).Any(x => x.precio <= 0))
                        {
                            throw new Exception("El precio de las partidas no puede tener un valor negativo o en cero.");
                        }
                        //}
                        #endregion

                        #region Validación Presupuesto Global
                        var presupuesto = getPresupuestoCC(compra.cc);

                        if (presupuesto != null)
                        {
                            var presupuestoGlobal = Convert.ToDecimal(presupuesto.presupuestoGlobal, CultureInfo.InvariantCulture);
                            var presupuestoActual = Convert.ToDecimal(presupuesto.presupuestoActual, CultureInfo.InvariantCulture);

                            if (presupuestoGlobal < (presupuestoActual + compra.sub_total))
                            {
                                throw new Exception("El presupuesto actual sobrepasa el global para el centro de costo.");
                            }
                        }
                        #endregion

                        //Checa cuantos proveedores distintos se capturaron para crear una compra por cada uno
                        var proveedores = compra.lstPartidas.Where(x => x.cantidad > 0).Select(x => x.proveedorDistinto).Distinct().ToList();
                        List<int> numerosCompras = new List<int>();

                        foreach (var prov in proveedores)
                        {
                            #region Validación Proveedor-Subcontratista Bloqueado
                            var reglaCompras = _context.tblP_ReglasSubcontratistasBloqueo.FirstOrDefault(x => x.id == 1);

                            if (reglaCompras != null)
                            {
                                if (reglaCompras.aplicar)
                                {
                                    var subcontratistaDB = _context.sp_Select<dynamic>(new StoreProcedureDTO
                                    {
                                        nombre = "spSUBCONTRATISTAS_PROVEEDOR_POR_NUMERO",
                                        parametros = new List<OdbcParameterDTO> { new OdbcParameterDTO { nombre = "numeroProveedor", tipoSql = SqlDbType.Int, valor = prov } }
                                    });

                                    if (subcontratistaDB.Count() > 0)
                                    {
                                        if (Convert.ToInt32(subcontratistaDB[0].tipoBloqueoId) > 0)
                                        {
                                            throw new Exception("El proveedor " + prov + " está bloqueado.");
                                        }
                                    }
                                }
                            }
                            #endregion


                            var infoProveedor = getProveedorInfo(prov.ToString());
                            var lstPartidas = compra.lstPartidas.Where(x => x.cantidad > 0 && x.proveedorDistinto == prov).ToList();

                            #region Validación Proveedor-Subcontratista Existente por Insumo
                            if (reglaCompras != null)
                            {
                                var listaValidacionInsumoSubcontratista = _context.tblCom_ValidacionInsumoSubcontratista.Where(x => x.estatus).ToList();

                                if (listaValidacionInsumoSubcontratista.Count() > 0)
                                {
                                    var subcontratistaDB = _context.sp_Select<dynamic>(new StoreProcedureDTO
                                    {
                                        nombre = "spSUBCONTRATISTAS_PROVEEDOR_POR_NUMERO",
                                        parametros = new List<OdbcParameterDTO> { new OdbcParameterDTO { nombre = "numeroProveedor", tipoSql = SqlDbType.Int, valor = prov } }
                                    });

                                    foreach (var registroValidacion in listaValidacionInsumoSubcontratista)
                                    {
                                        if (registroValidacion.tipo == 1) //Validación por tipo de insumo
                                        {
                                            var tipoInsumoValidacion = registroValidacion.codigo;
                                            List<int> listaTiposInsumos = lstPartidas.Select(x => Int32.Parse((x.insumo.ToString()[0]).ToString())).ToList();

                                            if (listaTiposInsumos.Any(x => x == tipoInsumoValidacion))
                                            {
                                                if (subcontratistaDB.Count() == 0)
                                                {
                                                    //throw new Exception("El proveedor no está registrado como subcontratista.");
                                                }
                                            }
                                        }
                                        else if (registroValidacion.tipo == 2) //Validación por insumo específico
                                        {
                                            var insumoEspecificoValidacion = registroValidacion.codigo;

                                            if (lstPartidas.Any(x => x.insumo == insumoEspecificoValidacion))
                                            {
                                                if (subcontratistaDB.Count() == 0)
                                                {
                                                    //throw new Exception("El proveedor no está registrado como subcontratista.");
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            #endregion

                            var ultimaCompra = _context.tblCom_OrdenCompra_Interna.Where(x => x.cc == compra.cc).OrderByDescending(x => x.id).FirstOrDefault();
                            var numeroCompraNueva = 0;

                            if (ultimaCompra != null)
                            {
                                numeroCompraNueva = ultimaCompra.numero;
                            }

                            //compraPorProveedor.numero = numeroCompraNueva + 1;
                            numerosCompras.Add(numeroCompraNueva + 1);
                            _numeroCompraParaBL = numeroCompraNueva + 1;

                            #region Calcular de nuevo los totales ahora con las partidas filtradas por proveedor
                            var subTotalPorProveedor = lstPartidas.Select(x => x.importe).Sum();
                            var ivaPorProveedor = subTotalPorProveedor * (compra.porcent_iva / 100);
                            var totalPorProveedor = (subTotalPorProveedor + ivaPorProveedor);
                            #endregion

                            #region Guardar Compra SIGOPLAN
                            var nuevaCompraSIGOPLAN = new tblCom_OrdenCompra_Interna
                            {
                                cc = compra.cc,
                                numero = numeroCompraNueva + 1,
                                fecha = DateTime.Today,
                                idLibreAbordo = compra.libre_abordo,
                                tipo_oc_req = compra.tipo_oc_req,
                                compradorSIGOPLAN = vSesiones.sesionUsuarioDTO.id, //Usuario SIGOPLAN
                                compradorEnkontrol = compra.comprador, //Usuario Enkontrol
                                moneda = infoProveedor != null ? infoProveedor.moneda.ToString() : "",
                                tipo_cambio = infoProveedor != null ? infoProveedor.monedaTipoCambio : 0,
                                porcent_iva = compra.porcent_iva,
                                sub_total = subTotalPorProveedor, //sub_total = compraPorProveedor.sub_total,
                                iva = ivaPorProveedor, //iva = compraPorProveedor.iva,
                                total = totalPorProveedor,
                                estatus = compra.estatus != null ? compra.estatus : "",
                                comentarios = compra.comentarios != null ? (string)compra.comentarios : "",
                                bienes_servicios = compra.bienes_servicios != null ? compra.bienes_servicios : "",
                                CFDI = compra.CFDI ?? "",
                                tiempoEntregaDias = compra.tiempoEntregaDias,
                                tiempoEntregaComentarios = compra.tiempoEntregaComentarios ?? "",
                                estatusRegistro = true,
                                anticipo = compra.anticipoBool,
                                totalAnticipo = compra.totalAnticipo,
                                st_impresa = "",
                                colocada = false,
                                correoProveedor = "",
                                proveedor = prov,
                                categoria = compra.categoria,
                                fechaCreacion = DateTime.Today
                            };

                            _context.tblCom_OrdenCompra_Interna.Add(nuevaCompraSIGOPLAN);
                            _context.SaveChanges();
                            #endregion

                            #region Guardar Compra Detalle SIGOPLAN
                            var partidaCompraSIGOPLAN = 1;

                            foreach (var part in lstPartidas)
                            {
                                if (part.cantidad > 0)
                                {
                                    var nuevaCompraSIGOPLANDet = new tblCom_OrdenCompraDet_Interna
                                    {
                                        idOrdenCompra = nuevaCompraSIGOPLAN.id,
                                        cc = nuevaCompraSIGOPLAN.cc,
                                        numero = nuevaCompraSIGOPLAN.numero,
                                        partida = partidaCompraSIGOPLAN++,
                                        insumo = part.insumo,
                                        fecha_entrega = part.fecha_entrega,
                                        cantidad = part.cantidad,
                                        precio = part.precio,
                                        importe = part.importe,
                                        ajuste_cant = part.ajuste_cant,
                                        ajuste_imp = part.ajuste_imp,
                                        num_requisicion = part.num_requisicion,
                                        part_requisicion = part.part_requisicion,
                                        cant_recibida = part.cant_recibida,
                                        imp_recibido = part.imp_recibido,
                                        fecha_recibido = part.fecha_recibido,
                                        cant_canc = part.cant_canc,
                                        imp_canc = part.imp_canc,
                                        acum_ant = part.acum_ant ?? default(decimal),
                                        max_orig = part.max_orig ?? default(decimal),
                                        max_ppto = part.max_ppto ?? default(decimal),
                                        area = part.area ?? 0,
                                        cuenta = part.cuenta ?? 0,
                                        porcent_iva = part.porcent_iva ?? default(decimal),
                                        iva = part.iva ?? default(decimal),
                                        partidaDescripcion = part.partidaDescripcion ?? "",
                                        estatusRegistro = true
                                    };

                                    _context.tblCom_OrdenCompraDet_Interna.Add(nuevaCompraSIGOPLANDet);
                                    _context.SaveChanges();
                                }
                            }
                            #endregion

                            if (compra.lstRetenciones != null)
                            {


                                foreach (var ret in compra.lstRetenciones)
                                {
                                    #region Guardar Retenciones
                                    var o = new tblCom_OrdenCompra_Retenciones_Interna();
                                    o.cc = compra.cc;
                                    o.numero = numeroCompraNueva + 1;
                                    o.id_cpto = ret.id_cpto;
                                    o.orden = ret.orden;
                                    o.cantidad = ret.cantidad;
                                    o.porc_ret = ret.porc_ret;
                                    o.importe = ret.importe;
                                    o.facturado = ret.facturado;
                                    o.retenido = ret.retenido;
                                    o.aplica = ret.aplica;
                                    o.forma_pago = ret.forma_pago;
                                    o.tm_descto = null;
                                    o.calc_iva = ret.calc_iva;
                                    o.bit_afecta_oc = ret.bit_afecta_oc != null ? ret.bit_afecta_oc : "N";
                                    o.afecta_fac = ret.afecta_fac != null ? ret.afecta_fac : "N";
                                    o.facturado_ret = ret.facturado_ret;
                                    o.facturado_iva = ret.facturado_iva;
                                    o.facturado_total = ret.facturado_total;
                                    o.retenido_ret = ret.retenido_ret;
                                    o.retenido_iva = ret.retenido_iva;
                                    o.retenido_total = ret.retenido_total;
                                    _context.tblCom_OrdenCompra_Retenciones_Interna.Add(o);
                                    #endregion
                                }

                                _context.SaveChanges();
                            }
                        }

                        List<string> listStringNumerosCompras = numerosCompras.ConvertAll<string>(x => compra.cc + "-" + x.ToString());
                        result.Add("numerosCompras", numerosCompras);
                        result.Add("numerosComprasString", string.Join(", ", listStringNumerosCompras));
                        result.Add("info", compra);
                        result.Add("partidas", compra.lstPartidas);
                        result.Add("pagos", compra.lstPagos);
                        result.Add("retenciones", compra.lstRetenciones);
                        #endregion
                    }

                    dbSigoplanTransaction.Commit();


                    result.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    dbSigoplanTransaction.Rollback();

                    LogError(0, 0, "OrdenCompraController", "guardarNuevaCompra", e, AccionEnum.AGREGAR, 0, new { compra = compra });

                    result.Add(MESSAGE, e.Message);
                    result.Add(SUCCESS, false);
                }
            }

            return result;
        }

        public OrdenCompraDTO getRequisicion(string cc, int num)
        {
            switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
            {
                case EmpresaEnum.Peru:
                    {
                        #region PERU
                        var PERU_tipoCompra = "";

                        if (!(bool)HttpContext.Current.Session["servicioCompra"]) //Vista Generar Compra
                        {
                            PERU_tipoCompra = "RQ";
                        }
                        else //Vista Generar Compra Servicio
                        {
                            PERU_tipoCompra = "RS";
                        }

                        var registroRequisicion = _context.tblCom_Req.FirstOrDefault(x => x.estatusRegistro && x.cc == cc && x.numero == num && x.PERU_tipoRequisicion == PERU_tipoCompra);

                        if (registroRequisicion == null)
                        {
                            throw new Exception("No se encuentra la información de la requisición.");
                        }

                        //var tipoCompra = registroRequisicion.PERU_tipoRequisicion == "RQ" ? "OC" : "OS";

                        var listaRegistrosDetalle = _context.tblCom_ReqDet.Where(x => x.estatusRegistro && x.idReq == registroRequisicion.id).ToList();
                        var listaCuadrosRequisicion = _context.tblCom_CuadroComparativo.Where(x => x.registroActivo && x.cc == cc && x.numero == num && x.PERU_tipoCuadro == PERU_tipoCompra).ToList();
                        var listaPartidas = new List<OrdenCompraDetDTO>();
                        var listaInsumos = new List<MAEART>();

                        using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                        {
                            listaInsumos = _starsoft.MAEART.ToList();
                        }

                        //                        var ordenCompraDet = _context.Select<tblCom_OrdenCompraDet>(new DapperDTO
                        //                        {
                        //                            baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        //                            consulta = @"SELECT
                        //                                            det.partida,
                        //                                            det.insumo,
                        //                                            det.cantidad,
                        //                                            det.num_requisicion,
                        //                                            det.cant_recibida,
                        //                                            cant_canc
                        //                                         FROM
                        //                                            tblCom_OrdenCompraDet AS det
                        //                                        INNER JOIN
                        //                                            tblCom_OrdenCompra AS com
                        //                                            ON
                        //                                                com.id = det.idOrdenCompra AND
                        //                                                com.cc = det.cc AND
                        //                                                com.numero = det.numero
                        //                                        WHERE
                        //                                            com.PERU_tipoCompra = @paramTipoCompra AND
                        //                                            com.estatusRegistro = 1 AND
                        //                                            det.estatusRegistro = 1 AND
                        //                                            com.cc = @paramCC AND
                        //                                            det.num_requisicion = @paramRequisicion",
                        //                            parametros = new
                        //                            {
                        //                                paramTipoCompra = PERU_tipoCompra,
                        //                                paramCC = cc,
                        //                                paramNumero = num,
                        //                                paramRequisicion = num
                        //                            }
                        //                        });

                        foreach (var p in listaRegistrosDetalle)
                        {
                            listaPartidas.Add(new OrdenCompraDetDTO
                            {
                                cc = cc,
                                numero = num,
                                partida = p.partida,
                                insumo = p.insumo,
                                insumoDesc = listaInsumos.Where(y => y.ACODIGO == ("0" + p.insumo)).Select(z => z.ADESCRI).FirstOrDefault(),
                                partidaDescripcion = p.descripcion,
                                area = 0,
                                cuenta = 0,
                                areaCuenta = "",
                                areaCuentaDesc = "",
                                fecha_entrega = null,
                                cantidad = p.cantidad,
                                //cant_canc = 0,
                                //cant_ordenada = 0,
                                //moneda = 0,
                                //precio = 0,
                                //importe = 0,
                                //tipo = 0,
                                //grupo = 0,
                                //surtido = 0,
                                pendiente = p.cantidad - p.cantOrdenada,
                                //costoPromedio = 0,
                                //flagBloquearPartidaSurtida = false,
                                //flagPartidaComprada = false,
                                colocada = p.cantidad - p.cantOrdenada,
                                compras_req = 1,
                                //proveedorDistinto = 0,
                                inventariado = "",
                                noEconomico = p.noEconomico
                            });
                        }

                        listaPartidas = listaPartidas.OrderBy(x => x.partida).ToList();

                        var listaComprasRequisicion = _context.tblCom_OrdenCompra.Where(x => x.cc == cc && x.estatusRegistro && x.PERU_tipoCompra == PERU_tipoCompra).ToList().Join(
                            _context.tblCom_OrdenCompraDet.Where(x => x.estatusRegistro && x.cc == cc).ToList(),
                            oc => oc.id,
                            det => det.idOrdenCompra,
                            (oc, det) => new { oc, det }
                        ).ToList().Where(x => x.det.num_requisicion == num).GroupBy(x => new { x.oc.cc, x.oc.numero }).ToList();
                        var listComprasString = string.Join(", ", listaComprasRequisicion.Select(x => x.Key.cc + "-" + fillNo((x.Key.numero).ToString(), 6)).ToList());
                        var listaRelacionUsuariosStarsoft = _context.tblP_Usuario_Starsoft.ToList();
                        var listaRelacionCompradoresStarsoft = _context.tblP_Usuario_Starsoft_Compradores.ToList();
                        var listaUsuariosStarsoft = new List<TABAYU>();
                        var listaCompradoresStarsoft = new List<RESPONSABLECMP>();

                        using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                        {
                            listaUsuariosStarsoft = _starsoft.TABAYU.ToList();
                            listaCompradoresStarsoft = _starsoft.RESPONSABLECMP.ToList();
                        }

                        var solicitanteStarsoft = registroRequisicion.solicito.ToString("D2");
                        var registroRelacionUsuarioStarsoft = _context.tblP_Usuario_Starsoft.FirstOrDefault(x => x.starsoft_usuario_id == solicitanteStarsoft);
                        var solicitoNom = "";
                        var compradorNom = "";

                        //if (registroRelacionUsuarioStarsoft != null)
                        //{
                        //    using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                        //    {
                        //        solicitoNom = _starsoft.TABAYU.ToList().Where(x => x.TCOD == "12" && x.TCLAVE == registroRelacionUsuarioStarsoft.starsoft_usuario_id).Select(x => x.TDESCRI).FirstOrDefault();
                        //    }
                        //}

                        //if (registroRequisicion.comprador != null)
                        //{
                        //    using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                        //    {
                        //        compradorNom = _starsoft.RESPONSABLECMP.ToList().Where(x => x.RESPONSABLE_CODIGO == ((int)registroRequisicion.comprador).ToString("D2")).Select(x => x.RESPONSABLE_NOMBRE).FirstOrDefault();
                        //    }
                        //}

                        var registroRelacionComprador = _context.tblP_Usuario_Enkontrol.ToList().FirstOrDefault(x => x.empleado == (int)registroRequisicion.comprador);
                        var registroRelacionSolicito = _context.tblP_Usuario_Enkontrol.ToList().FirstOrDefault(x => x.empleado == registroRequisicion.solicito);
                        var listaUsuarios = _context.tblP_Usuario.ToList();

                        return new OrdenCompraDTO()
                        {
                            #region Panel Izquierdo
                            folioOrigen = "",

                            cc = cc,
                            numero = num,
                            bienes_servicios = registroRequisicion.PERU_tipoRequisicion == "RQ" ? "B" : registroRequisicion.PERU_tipoRequisicion == "RS" ? "S" : "",
                            inventariado = registroRequisicion.PERU_tipoRequisicion == "RQ" ? "I" : "",
                            fecha = registroRequisicion.fecha,
                            proveedor = 0,
                            proveedorNom = "",
                            comprador = (int)registroRequisicion.comprador,
                            compradorNom = registroRelacionComprador != null ? listaUsuarios.Where(x => x.id == registroRelacionComprador.idUsuario).Select(x => x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno).FirstOrDefault() : "",
                            solicito = registroRequisicion.solicito,
                            solicitoNom = registroRelacionSolicito != null ? listaUsuarios.Where(x => x.id == registroRelacionSolicito.idUsuario).Select(x => x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno).FirstOrDefault() : "",
                            autorizo = 0,
                            autorizoNom = "",
                            embarquese = "",
                            libre_abordo = registroRequisicion.idLibreAbordo,
                            concepto_factura = "",
                            bit_autorecepcion = "",
                            almacen_autorecepcion = 0,
                            almacenRecepNom = "",
                            empleado_autorecepcion = 0,
                            empleadoRecepNom = "",
                            #endregion

                            #region Panel Derecho
                            tipo_oc_req = registroRequisicion.idTipoReqOc.ToString(),
                            moneda = 4,
                            tipo_cambio = 0,
                            sub_total = 0,
                            porcent_iva = 0,
                            iva = 0,
                            rentencion_antes_iva = 0,
                            rentencion_despues_iva = 0,
                            total = 0,
                            #endregion

                            lstPartidas = listaPartidas,
                            lstPagos = null,
                            lstRetenciones = null,
                            ST_OC = "",
                            tieneCuadro = listaCuadrosRequisicion.Count() > 0,
                            cuadrosExistentes = listaCuadrosRequisicion.Count(),
                            consigna = false,
                            licitacion = false,
                            crc = false,
                            convenio = false,
                            tmc = 0,
                            flagRequisicionComprada = listaPartidas.Sum(s => s.pendiente) <= 0 ? true : false,
                            st_autoriza = registroRequisicion.stAutoriza ? "S" : "",
                            listComprasString = listComprasString,
                            validadoCompras = true,
                            validadoAlmacen = true,
                            flagValidacionInsumoSubcontratista = true
                        };
                        #endregion
                    }
                case EmpresaEnum.Colombia:
                    {
                        #region COLOMBIA
                        var reqEK = consultaCheckProductivo(string.Format(@"SELECT * FROM so_requisicion WHERE cc = '{0}' AND numero = {1}", cc, num));

                        if (reqEK == null)
                        {
                            throw new Exception("No existe la requisición.");
                        }

                        var req = (List<dynamic>)reqEK.ToObject<List<dynamic>>();

                        var existeCuadro = consultaCheckProductivo(
                            string.Format(@"SELECT 
                                        * 
                                    FROM so_cuadro_comparativo 
                                    WHERE cc = '{0}' AND numero = {1}", cc, num));

                        int cuadrosExistentes = 0;

                        if (existeCuadro != null)
                        {
                            cuadrosExistentes = ((List<dynamic>)existeCuadro.ToObject<List<dynamic>>()).Count;
                        }

                        var requisicionSIGOPLAN = _context.tblCom_Req.FirstOrDefault(x => x.estatusRegistro && x.cc == cc && x.numero == num);
                        var usuario = vSesiones.sesionUsuarioDTO;
                        var relUser = ufs.getUsuarioService().getUserEk(usuario.id);

                        string compradorNom = "";

                        if (relUser != null)
                        {
                            var empleadoEK = consultaCheckProductivo(string.Format(@"SELECT * FROM empleados WHERE empleado = {0}", relUser.empleado));

                            if (empleadoEK != null)
                            {
                                var empleado = (List<dynamic>)empleadoEK.ToObject<List<dynamic>>();

                                compradorNom = (string)empleado[0].descripcion.Value;
                            }
                        }

                        var partidasRequisicion = getPartidasRequisicion(cc, num);

                        //Obtener el primero insumo para sacar el tipo de insumo general de la requisición.
                        var tipo = partidasRequisicion[0].tipo;
                        var grupo = partidasRequisicion[0].grupo;

                        var tipoGrupoInsumo = (consultaCheckProductivo(string.Format(@"SELECT inventariado FROM grupos_insumo WHERE tipo_insumo = {0} AND grupo_insumo = {1}", tipo, grupo)))[0];

                        var listComprasString = "";

                        var comprasEK = consultaCheckProductivo(
                            string.Format(@"SELECT cc, numero FROM so_orden_compra_det WHERE cc = '{0}' AND num_requisicion = {1} GROUP BY cc, numero", cc, num)
                        );

                        if (comprasEK != null)
                        {
                            var compras = (List<dynamic>)comprasEK.ToObject<List<dynamic>>();

                            listComprasString = string.Join(", ", compras.Select(x => (string)x.cc + "-" + fillNo(((int)x.numero).ToString(), 6)).ToList());
                        }

                        #region Validación requisicion validada por almacén
                        var flagNoInventariable = false;
                        var flagFamiliaExcepcion = true;

                        var listaTipoGrupoEK = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM grupos_insumo")).ToObject<List<dynamic>>();
                        var listaFamiliasExcepcion = _context.tblCom_FamiliasExcepcionInventariables.Where(x => x.estatus).Select(x => x.familia).ToList();

                        foreach (var part in partidasRequisicion)
                        {
                            var familia = part.insumo.ToString().Substring(0, 3);

                            if (!listaFamiliasExcepcion.Contains(familia))
                            {
                                flagFamiliaExcepcion = false;
                            }

                            var tipoInsumo = Int32.Parse(part.insumo.ToString().Substring(0, 1));
                            var grupoInsumo = Int32.Parse(part.insumo.ToString().Substring(1, 2));

                            var tipoGrupoEK = listaTipoGrupoEK.FirstOrDefault(x => (int)x.tipo_insumo == tipoInsumo && (int)x.grupo_insumo == grupoInsumo);

                            if (tipoGrupoEK != null)
                            {
                                if ((string)tipoGrupoEK.inventariado.Value == "N")
                                {
                                    flagNoInventariable = true;
                                }
                            }
                        }

                        var validadoCompras = false;
                        var validadoAlmacen = false;

                        if (requisicionSIGOPLAN != null)
                        {
                            validadoCompras = requisicionSIGOPLAN.validadoCompras;

                            if (requisicionSIGOPLAN.validadoAlmacen != null)
                            {
                                validadoAlmacen = (bool)requisicionSIGOPLAN.validadoAlmacen;
                            }
                        }

                        //Se coloca la variable "validadoAlmacen" como true cuando la requisición es "no inventariable" o de familia excepción para saltarse el mensaje en el front-end de que no está validada.
                        if (flagNoInventariable || flagFamiliaExcepcion)
                        {
                            validadoCompras = true;
                            validadoAlmacen = true;
                        }
                        #endregion

                        #region Validación Insumo Subcontratista
                        var listaValidacionInsumoSubcontratista = _context.tblCom_ValidacionInsumoSubcontratista.Where(x => x.estatus).ToList();
                        var flagValidacionInsumoSubcontratista = false;

                        if (listaValidacionInsumoSubcontratista.Count() > 0)
                        {
                            foreach (var registroValidacion in listaValidacionInsumoSubcontratista)
                            {
                                if (registroValidacion.tipo == 1) //Validación por tipo de insumo
                                {
                                    var tipoInsumoValidacion = registroValidacion.codigo;
                                    List<int> listaTiposInsumos = partidasRequisicion.Select(x => Int32.Parse((x.insumo.ToString()[0]).ToString())).ToList();

                                    if (listaTiposInsumos.Any(x => x == tipoInsumoValidacion))
                                    {
                                        flagValidacionInsumoSubcontratista = true;
                                    }
                                }
                                else if (registroValidacion.tipo == 2) //Validación por insumo específico
                                {
                                    var insumoEspecificoValidacion = registroValidacion.codigo;

                                    if (partidasRequisicion.Any(x => x.insumo == insumoEspecificoValidacion))
                                    {
                                        flagValidacionInsumoSubcontratista = true;
                                    }
                                }
                            }
                        }
                        #endregion

                        if (requisicionSIGOPLAN != null)
                        {
                            var listaDetalleSIGOPLAN = _context.tblCom_ReqDet.Where(x => x.estatusRegistro && x.idReq == requisicionSIGOPLAN.id).ToList();

                            foreach (var partida in partidasRequisicion)
                            {
                                var registroSIGOPLAN = listaDetalleSIGOPLAN.FirstOrDefault(x => x.partida == partida.partida && x.insumo == partida.insumo);

                                if (registroSIGOPLAN != null)
                                {
                                    partida.precio = registroSIGOPLAN.precio;
                                }
                            }
                        }

                        return new OrdenCompraDTO()
                        {
                            #region Panel Izquierdo
                            folioOrigen = req[0].cc.Value != null && req[0].cc.Value != null ? getFolioOrigen(req[0].cc.Value as string, Convert.ToInt32(req[0].numero.Value)) : "",

                            cc = req[0].cc.Value != null ? req[0].cc.Value as string : "",
                            numero = req[0].numero.Value != null ? Convert.ToInt32(req[0].numero.Value) : 0,
                            bienes_servicios = (string)tipoGrupoInsumo.inventariado == "I" ? "B" : "S",
                            inventariado = (string)tipoGrupoInsumo.inventariado,
                            fecha = (req[0].fecha.Value as DateTime?) ?? new DateTime(),
                            proveedor = requisicionSIGOPLAN != null ? requisicionSIGOPLAN.proveedor : 0,
                            proveedorNom = "",
                            comprador = relUser.empleado,
                            compradorNom = compradorNom,
                            solicito = req[0].solicito.Value != null ? Convert.ToInt32(req[0].solicito.Value) : 0,
                            solicitoNom = "",
                            autorizo = req[0].autorizo.Value != null ? Convert.ToInt32(req[0].autorizo.Value) : 0,
                            autorizoNom = "",
                            embarquese = "",
                            libre_abordo = requisicionSIGOPLAN != null ? requisicionSIGOPLAN.idLibreAbordo : req[0].libre_abordo.Value != null ? Convert.ToInt32(req[0].libre_abordo.Value) : 0,
                            concepto_factura = "",
                            bit_autorecepcion = "",
                            almacen_autorecepcion = 0,
                            almacenRecepNom = "",
                            empleado_autorecepcion = 0,
                            empleadoRecepNom = "",
                            #endregion

                            #region Panel Derecho
                            tipo_oc_req = req[0].tipo_req_oc.Value != null ? req[0].tipo_req_oc.Value as string : "",
                            moneda = 1,
                            tipo_cambio = 0,
                            sub_total = 0,
                            porcent_iva = 0,
                            iva = 0,
                            rentencion_antes_iva = 0,
                            rentencion_despues_iva = 0,
                            total = 0,
                            #endregion

                            lstPartidas = partidasRequisicion,
                            lstPagos = null,
                            lstRetenciones = null,
                            ST_OC = "",
                            tieneCuadro = existeCuadro != null,
                            cuadrosExistentes = cuadrosExistentes,
                            consigna = requisicionSIGOPLAN != null ? requisicionSIGOPLAN.consigna != null ? (bool)requisicionSIGOPLAN.consigna : false : false,
                            licitacion = requisicionSIGOPLAN != null ? requisicionSIGOPLAN.licitacion : false,
                            crc = requisicionSIGOPLAN != null ? requisicionSIGOPLAN.crc : false,
                            convenio = requisicionSIGOPLAN != null ? requisicionSIGOPLAN.convenio : false,
                            tmc = req[0].tmc != null ? (int)req[0].tmc.Value : 0,
                            flagRequisicionComprada = partidasRequisicion.Any(x => !x.flagPartidaComprada) ? false : true,
                            st_autoriza = (string)req[0].st_autoriza,
                            listComprasString = listComprasString,
                            validadoCompras = validadoCompras,
                            validadoAlmacen = validadoAlmacen,
                            flagValidacionInsumoSubcontratista = flagValidacionInsumoSubcontratista
                        };
                        #endregion
                    }
                default:
                    {
                        #region DEMAS EMPRESAS
                        var reqEK = consultaCheckProductivo(string.Format(@"SELECT * FROM so_requisicion WHERE cc = '{0}' AND numero = {1}", cc, num));

                        if (reqEK == null)
                        {
                            throw new Exception("No existe la requisición.");
                        }

                        var req = (List<dynamic>)reqEK.ToObject<List<dynamic>>();

                        var existeCuadro = consultaCheckProductivo(
                            string.Format(@"SELECT 
                                        * 
                                    FROM so_cuadro_comparativo 
                                    WHERE cc = '{0}' AND numero = {1}", cc, num));

                        int cuadrosExistentes = 0;

                        if (existeCuadro != null)
                        {
                            cuadrosExistentes = ((List<dynamic>)existeCuadro.ToObject<List<dynamic>>()).Count;
                        }

                        var requisicionSIGOPLAN = _context.tblCom_Req.FirstOrDefault(x => x.estatusRegistro && x.cc == cc && x.numero == num);
                        var usuario = vSesiones.sesionUsuarioDTO;
                        var relUser = ufs.getUsuarioService().getUserEk(usuario.id);

                        string compradorNom = "";

                        if (relUser != null)
                        {
                            var empleadoEK = consultaCheckProductivo(string.Format(@"SELECT * FROM empleados WHERE empleado = {0}", relUser.empleado));

                            if (empleadoEK != null)
                            {
                                var empleado = (List<dynamic>)empleadoEK.ToObject<List<dynamic>>();

                                compradorNom = (string)empleado[0].descripcion.Value;
                            }
                        }

                        var partidasRequisicion = getPartidasRequisicion(cc, num);

                        //Obtener el primero insumo para sacar el tipo de insumo general de la requisición.
                        var tipo = partidasRequisicion[0].tipo;
                        var grupo = partidasRequisicion[0].grupo;

                        var tipoGrupoInsumo = (consultaCheckProductivo(string.Format(@"SELECT inventariado FROM grupos_insumo WHERE tipo_insumo = {0} AND grupo_insumo = {1}", tipo, grupo)))[0];

                        var listComprasString = "";

                        var comprasEK = consultaCheckProductivo(
                            string.Format(@"SELECT cc, numero FROM so_orden_compra_det WHERE cc = '{0}' AND num_requisicion = {1} GROUP BY cc, numero", cc, num)
                        );

                        if (comprasEK != null)
                        {
                            var compras = (List<dynamic>)comprasEK.ToObject<List<dynamic>>();

                            listComprasString = string.Join(", ", compras.Select(x => (string)x.cc + "-" + fillNo(((int)x.numero).ToString(), 6)).ToList());
                        }

                        #region Validación requisicion validada por almacén
                        var flagNoInventariable = false;
                        var flagFamiliaExcepcion = true;

                        var listaTipoGrupoEK = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM grupos_insumo")).ToObject<List<dynamic>>();
                        var listaFamiliasExcepcion = _context.tblCom_FamiliasExcepcionInventariables.Where(x => x.estatus).Select(x => x.familia).ToList();

                        foreach (var part in partidasRequisicion)
                        {
                            var familia = part.insumo.ToString().Substring(0, 3);

                            if (!listaFamiliasExcepcion.Contains(familia))
                            {
                                flagFamiliaExcepcion = false;
                            }

                            var tipoInsumo = Int32.Parse(part.insumo.ToString().Substring(0, 1));
                            var grupoInsumo = Int32.Parse(part.insumo.ToString().Substring(1, 2));

                            var tipoGrupoEK = listaTipoGrupoEK.FirstOrDefault(x => (int)x.tipo_insumo == tipoInsumo && (int)x.grupo_insumo == grupoInsumo);

                            if (tipoGrupoEK != null)
                            {
                                if ((string)tipoGrupoEK.inventariado.Value == "N")
                                {
                                    flagNoInventariable = true;
                                }
                            }
                        }

                        var validadoCompras = false;
                        var validadoAlmacen = false;

                        if (requisicionSIGOPLAN != null)
                        {
                            validadoCompras = requisicionSIGOPLAN.validadoCompras;

                            if (requisicionSIGOPLAN.validadoAlmacen != null)
                            {
                                validadoAlmacen = (bool)requisicionSIGOPLAN.validadoAlmacen;
                            }
                        }

                        //Se coloca la variable "validadoAlmacen" como true cuando la requisición es "no inventariable" o de familia excepción para saltarse el mensaje en el front-end de que no está validada.
                        if (flagNoInventariable || flagFamiliaExcepcion)
                        {
                            validadoCompras = true;
                            validadoAlmacen = true;
                        }
                        #endregion

                        #region Validación Insumo Subcontratista
                        var listaValidacionInsumoSubcontratista = _context.tblCom_ValidacionInsumoSubcontratista.Where(x => x.estatus).ToList();
                        var flagValidacionInsumoSubcontratista = false;

                        if (listaValidacionInsumoSubcontratista.Count() > 0)
                        {
                            foreach (var registroValidacion in listaValidacionInsumoSubcontratista)
                            {
                                if (registroValidacion.tipo == 1) //Validación por tipo de insumo
                                {
                                    var tipoInsumoValidacion = registroValidacion.codigo;
                                    List<int> listaTiposInsumos = partidasRequisicion.Select(x => Int32.Parse((x.insumo.ToString()[0]).ToString())).ToList();

                                    if (listaTiposInsumos.Any(x => x == tipoInsumoValidacion))
                                    {
                                        flagValidacionInsumoSubcontratista = true;
                                    }
                                }
                                else if (registroValidacion.tipo == 2) //Validación por insumo específico
                                {
                                    var insumoEspecificoValidacion = registroValidacion.codigo;

                                    if (partidasRequisicion.Any(x => x.insumo == insumoEspecificoValidacion))
                                    {
                                        flagValidacionInsumoSubcontratista = true;
                                    }
                                }
                            }
                        }
                        #endregion

                        if (requisicionSIGOPLAN != null)
                        {
                            var listaDetalleSIGOPLAN = _context.tblCom_ReqDet.Where(x => x.estatusRegistro && x.idReq == requisicionSIGOPLAN.id).ToList();

                            foreach (var partida in partidasRequisicion)
                            {
                                var registroSIGOPLAN = listaDetalleSIGOPLAN.FirstOrDefault(x => x.partida == partida.partida && x.insumo == partida.insumo);

                                if (registroSIGOPLAN != null)
                                {
                                    partida.precio = registroSIGOPLAN.precio;
                                }
                            }
                        }

                        return new OrdenCompraDTO()
                        {
                            #region Panel Izquierdo
                            folioOrigen = req[0].cc.Value != null && req[0].cc.Value != null ? getFolioOrigen(req[0].cc.Value as string, Convert.ToInt32(req[0].numero.Value)) : "",

                            cc = req[0].cc.Value != null ? req[0].cc.Value as string : "",
                            numero = req[0].numero.Value != null ? Convert.ToInt32(req[0].numero.Value) : 0,
                            bienes_servicios = (string)tipoGrupoInsumo.inventariado == "I" ? "B" : "S",
                            inventariado = (string)tipoGrupoInsumo.inventariado,
                            fecha = (req[0].fecha.Value as DateTime?) ?? new DateTime(),
                            proveedor = requisicionSIGOPLAN != null ? requisicionSIGOPLAN.proveedor : 0,
                            proveedorNom = "",
                            comprador = relUser.empleado,
                            compradorNom = compradorNom,
                            solicito = req[0].solicito.Value != null ? Convert.ToInt32(req[0].solicito.Value) : 0,
                            solicitoNom = "",
                            autorizo = req[0].autorizo.Value != null ? Convert.ToInt32(req[0].autorizo.Value) : 0,
                            autorizoNom = "",
                            embarquese = "",
                            libre_abordo = requisicionSIGOPLAN != null ? requisicionSIGOPLAN.idLibreAbordo : req[0].libre_abordo.Value != null ? Convert.ToInt32(req[0].libre_abordo.Value) : 0,
                            concepto_factura = "",
                            bit_autorecepcion = "",
                            almacen_autorecepcion = 0,
                            almacenRecepNom = "",
                            empleado_autorecepcion = 0,
                            empleadoRecepNom = "",
                            #endregion

                            #region Panel Derecho
                            tipo_oc_req = req[0].tipo_req_oc.Value != null ? req[0].tipo_req_oc.Value as string : "",
                            moneda = 1,
                            tipo_cambio = 0,
                            sub_total = 0,
                            porcent_iva = 0,
                            iva = 0,
                            rentencion_antes_iva = 0,
                            rentencion_despues_iva = 0,
                            total = 0,
                            #endregion

                            lstPartidas = partidasRequisicion,
                            lstPagos = null,
                            lstRetenciones = null,
                            ST_OC = "",
                            tieneCuadro = existeCuadro != null,
                            cuadrosExistentes = cuadrosExistentes,
                            consigna = requisicionSIGOPLAN != null ? requisicionSIGOPLAN.consigna != null ? (bool)requisicionSIGOPLAN.consigna : false : false,
                            licitacion = requisicionSIGOPLAN != null ? requisicionSIGOPLAN.licitacion : false,
                            crc = requisicionSIGOPLAN != null ? requisicionSIGOPLAN.crc : false,
                            convenio = requisicionSIGOPLAN != null ? requisicionSIGOPLAN.convenio : false,
                            tmc = req[0].tmc != null ? (int)req[0].tmc.Value : 0,
                            flagRequisicionComprada = partidasRequisicion.Any(x => !x.flagPartidaComprada) ? false : true,
                            st_autoriza = (string)req[0].st_autoriza,
                            listComprasString = listComprasString,
                            validadoCompras = validadoCompras,
                            validadoAlmacen = validadoAlmacen,
                            flagValidacionInsumoSubcontratista = flagValidacionInsumoSubcontratista
                        };
                        #endregion
                    }
            }
        }

        public List<OrdenCompraDetDTO> getPartidasRequisicion(string cc, int num)
        {
            try
            {
                var par = new List<dynamic>();

                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {
                    case EmpresaEnum.Colombia:
                        {
                            par = (List<dynamic>)consultaCheckProductivo(string.Format(@"
                                SELECT 
                                    d.*, 
                                    i.descripcion AS insumoDesc, 
                                    i.unidad, 
                                    i.cancelado, 
                                    i.tipo, 
                                    i.grupo, 
                                    ( 
                                        ISNULL ( 
                                            ( 
                                                SELECT 
                                                    AVG(precio) 
                                                FROM so_orden_compra_det AS det 
                                                WHERE det.insumo = i.insumo 
                                            ) , 0 
                                        ) 
                                    ) AS costo_promedio, 
                                    (
                                        SELECT 
                                            TOP 1 l.descripcion 
                                        FROM so_req_det_linea l 
                                        WHERE l.cc = d.cc AND l.numero = d.numero AND l.partida = d.partida 
                                    ) AS partidaDesc, 
                                    grp.inventariado 
                                FROM so_requisicion_det d 
                                    INNER JOIN insumos i ON d.insumo = i.insumo 
                                    LEFT JOIN grupos_insumo grp ON grp.tipo_insumo = i.tipo AND grp.grupo_insumo = i.grupo 
                                WHERE d.cc = '{0}' AND d.numero = {1} 
                                ORDER BY d.partida", cc, num)
                            ).ToObject<List<dynamic>>();
                            break;
                        }
                    default:
                        {
                            par = (List<dynamic>)consultaCheckProductivo(string.Format(@"
                                SELECT 
                                    d.*, 
                                    i.descripcion AS insumoDesc, 
                                    i.unidad, 
                                    i.cancelado, 
                                    i.tipo, 
                                    i.grupo, 
                                    i.compras_req, 
                                    ( 
                                        ISNULL ( 
                                            ( 
                                                SELECT 
                                                    AVG(precio) 
                                                FROM so_orden_compra_det AS det 
                                                WHERE det.insumo = i.insumo 
                                            ) , 0 
                                        ) 
                                    ) AS costo_promedio, 
                                    (
                                        SELECT 
                                            TOP 1 l.descripcion 
                                        FROM so_req_det_linea l 
                                        WHERE l.cc = d.cc AND l.numero = d.numero AND l.partida = d.partida 
                                    ) AS partidaDesc, 
                                    grp.inventariado 
                                FROM so_requisicion_det d 
                                    INNER JOIN insumos i ON d.insumo = i.insumo 
                                    LEFT JOIN grupos_insumo grp ON grp.tipo_insumo = i.tipo AND grp.grupo_insumo = i.grupo 
                                WHERE d.cc = '{0}' AND d.numero = {1} 
                                ORDER BY d.partida", cc, num)
                            ).ToObject<List<dynamic>>();
                            break;
                        }
                }

                List<OrdenCompraDetDTO> lstPartida = new List<OrdenCompraDetDTO>();

                List<tblCom_Surtido> surtido = new List<tblCom_Surtido>();
                List<tblCom_SurtidoDet> surtidoDet = new List<tblCom_SurtidoDet>();

                surtido = _context.tblCom_Surtido.Where(x => x.cc == cc && x.numero == num).ToList();

                if (surtido.Count > 0)
                {
                    foreach (var sur in surtido)
                    {
                        surtidoDet.AddRange(_context.tblCom_SurtidoDet.Where(x => x.estatus && x.surtidoID == sur.id).ToList());
                    }
                }

                var registroRequisicionSIGOPLAN = _context.tblCom_Req.FirstOrDefault(x => x.estatusRegistro && x.cc == cc && x.numero == num);

                foreach (var p in par)
                {
                    var surtidoPorInsumo = surtidoDet.Where(x => x.insumo == Convert.ToInt32(p.insumo.Value)).ToList().Count > 0 ?
                        surtidoDet.Where(x => x.insumo == Convert.ToInt32(p.insumo.Value)).Sum(y => y.cantidad) : 0;

                    var cantidadRestante = (p.cantidad.Value != null ? Convert.ToDecimal(p.cantidad.Value, CultureInfo.InvariantCulture) : 0) - Convert.ToDecimal(p.cant_cancelada.Value, CultureInfo.InvariantCulture);
                    var cantidadNoOrdenada = cantidadRestante - (p.cant_ordenada.Value != null ? Convert.ToDecimal(p.cant_ordenada.Value, CultureInfo.InvariantCulture) : 0);

                    var noEconomico = "";

                    if (registroRequisicionSIGOPLAN != null)
                    {
                        int partida = Convert.ToInt32(p.partida.Value);
                        var registroDetalleSIGOPLAN = _context.tblCom_ReqDet.FirstOrDefault(x => x.estatusRegistro && x.idReq == registroRequisicionSIGOPLAN.id && x.partida == partida);

                        if (registroDetalleSIGOPLAN != null)
                        {
                            noEconomico = registroDetalleSIGOPLAN.noEconomico;
                        }
                    }

                    lstPartida.Add(new OrdenCompraDetDTO
                    {
                        cc = p.cc.Value ?? "",
                        numero = p.numero.Value != null ? Convert.ToInt32(p.numero.Value) : 0,
                        partida = p.partida.Value != null ? Convert.ToInt32(p.partida.Value) : 0,
                        insumo = p.insumo.Value != null ? Convert.ToInt32(p.insumo.Value) : 0,
                        insumoDesc = p.insumoDesc.Value != null ? p.insumoDesc.Value : "",
                        partidaDescripcion = p.partidaDesc.Value != null ? p.partidaDesc.Value : "",
                        area = p.area.Value != null ? Convert.ToInt32(p.area.Value) : 0,
                        cuenta = p.cuenta.Value != null ? Convert.ToInt32(p.cuenta.Value) : 0,
                        areaCuenta = p.area.Value != null && p.cuenta.Value != null ? fillNo(p.area.Value.ToString(), 3) + "-" + fillNo(p.cuenta.Value.ToString(), 3) : "",
                        areaCuentaDesc = p.area.Value != null && p.cuenta.Value != null ? fillNo(p.area.Value.ToString(), 3) + "-" + fillNo(p.cuenta.Value.ToString(), 3) : "",
                        fecha_entrega = null,
                        cantidad = cantidadRestante,
                        cant_canc = Convert.ToDecimal(p.cant_cancelada.Value, CultureInfo.InvariantCulture),
                        cant_ordenada = p.cant_ordenada.Value != null ? Convert.ToDecimal(p.cant_ordenada.Value, CultureInfo.InvariantCulture) : 0,
                        moneda = 0,
                        precio = 0,
                        importe = 0,
                        tipo = p.tipo.Value != null ? Convert.ToInt32(p.tipo.Value) : 0,
                        grupo = p.grupo.Value != null ? Convert.ToInt32(p.grupo.Value) : 0,

                        surtido = surtidoPorInsumo,
                        pendiente = cantidadNoOrdenada - surtidoPorInsumo,
                        costoPromedio = p.costo_promedio.Value != null ? Convert.ToDecimal(p.costo_promedio.Value, CultureInfo.InvariantCulture) : 0,
                        flagBloquearPartidaSurtida = (cantidadNoOrdenada - surtidoPorInsumo) <= 0 ? true : false,
                        flagPartidaComprada = cantidadNoOrdenada == 0 ? true : false,
                        colocada = cantidadNoOrdenada - surtidoPorInsumo,
                        compras_req = vSesiones.sesionEmpresaActual != (int)EmpresaEnum.Colombia ? p.compras_req.Value != null ? (int)p.compras_req : 1 : 1,
                        proveedorDistinto = 0,
                        inventariado = p.inventariado.Value != null ? (string)p.inventariado : "",
                        noEconomico = noEconomico
                    });
                }

                return lstPartida.OrderBy(x => x.partida).ToList();
            }
            catch (Exception) { return null; }
        }

        public List<Core.DTO.Principal.Generales.ComboDTO> FillComboTipoReq()
        {
            try
            {
                var lst = (List<Core.DTO.Principal.Generales.ComboDTO>)consultaCheckProductivo("SELECT tipo_req_oc as Value, descripcion as Text, dias_requisicion as Prefijo FROM so_tipo_requisicion").ToObject<List<Core.DTO.Principal.Generales.ComboDTO>>();
                return lst.ToList();
            }
            catch (Exception) { return new List<Core.DTO.Principal.Generales.ComboDTO>(); }
        }

        public RetencionInfoDTO getRetencionInfo(int id_cpto)
        {
            try
            {
                var retencionEK = consultaCheckProductivo(
                    string.Format(@"SELECT * FROM so_retenciones WHERE id_cpto = {0}", id_cpto)
                );

                RetencionInfoDTO objRetencion = new RetencionInfoDTO();

                if (retencionEK != null)
                {
                    var lstRetencionesEK = (List<dynamic>)retencionEK.ToObject<List<dynamic>>();

                    objRetencion.id_cpto = lstRetencionesEK[0].id_cpto.Value != null ? (int)lstRetencionesEK[0].id_cpto.Value : 0;
                    objRetencion.desc_ret = lstRetencionesEK[0].desc_ret.Value != null ? lstRetencionesEK[0].desc_ret.Value as string : "";
                    objRetencion.porc_default = lstRetencionesEK[0].porc_default.Value != null ? Convert.ToDecimal(lstRetencionesEK[0].porc_default.Value, CultureInfo.InvariantCulture) : 0;
                    objRetencion.calc_iva = lstRetencionesEK[0].calc_iva.Value != null ? (int)lstRetencionesEK[0].calc_iva.Value : 1;
                    objRetencion.bit_afecta_oc = lstRetencionesEK[0].bit_afecta_oc.Value != null ? lstRetencionesEK[0].bit_afecta_oc.Value as string : "N";
                    objRetencion.afecta_fac = lstRetencionesEK[0].afecta_fac.Value != null ? lstRetencionesEK[0].afecta_fac.Value as string : "N";
                }

                return objRetencion;
            }
            catch (Exception) { return null; }
        }

        public dynamic getProveedorNumero(string proveedor)
        {
            try
            {
                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {
                    case EmpresaEnum.Peru:
                        {
                            using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                            {
                                var lstProveedorStarsoft = _starsoft.MAEPROV.ToList().Where(x => x.PRVCNOMBRE.ToLower().Contains(proveedor.ToLower())).Take(10).ToList();

                                if (lstProveedorStarsoft != null && lstProveedorStarsoft.Count > 0)
                                {
                                    var lstProvStarsoft = new List<InfoProveedorMonedaDTO>();

                                    foreach (var item in lstProveedorStarsoft)
                                    {

                                        lstProvStarsoft.Add(new InfoProveedorMonedaDTO
                                        {
                                            id = item.PRVCCODIGO,
                                            label = item.PRVCNOMBRE,
                                            moneda = 4,
                                            monedaDesc = "SOL",
                                            monedaTipoCambio = 1m,
                                            cancelado = "",
                                            proveedorSubcontratistaBloqueado = false,
                                            proveedorSubcontratistaExiste = false,
                                            PERU_formaPago = item.PRVPAGO,

                                        });
                                    }
                                    return lstProvStarsoft;
                                }
                                else
                                {
                                    return null;
                                }
                            }
                        }
                    default:
                        {
                            var lst = (List<dynamic>)consultaCheckProductivo(
                                    string.Format(@"SELECT 
                                        TOP 12 prov.numpro, 
                                        prov.nombre, 
                                        prov.moneda, 
                                        mon.moneda AS monedaDesc, 
                                        mon.tipo_cambio AS monedaTipoCambio, 
                                        prov.cancelado 
                                    FROM sp_proveedores prov 
                                        INNER JOIN moneda mon ON prov.moneda = mon.clave 
                                    WHERE prov.nombre LIKE '%{0}%'", proveedor)
                            ).ToObject<List<dynamic>>();

                            return lst.Select(p => new
                            {
                                id = (string)p.numpro,
                                label = (string)p.cancelado != "C" ? (string)p.nombre : "(CANCELADO) " + (string)p.nombre,
                                moneda = (int)p.moneda,
                                monedaDesc = (string)p.monedaDesc,
                                monedaTipoCambio = (decimal)p.monedaTipoCambio
                            }).ToList();
                        }

                }

            }
            catch (Exception) { return 0; }
        }

        public dynamic getCompradorNumero(string comprador)
        {
            try
            {
                var lst = (List<dynamic>)consultaCheckProductivo(
                    string.Format(@"SELECT 
                                        TOP 12 emp.*
                                    FROM empleados emp 
                                    WHERE emp.descripcion LIKE '%{0}%'", comprador)
                    ).ToObject<List<dynamic>>();

                return lst.Select(p => new
                {
                    id = (string)p.empleado,
                    label = (string)p.descripcion
                }).ToList();
            }
            catch (Exception) { return 0; }
        }

        public Dictionary<string, object> ObtenerComprasPendientes(string cc, int estatus, int proveedor, DateTime fechaInicial, DateTime fechaFinal, string idAreaCuenta, int idCompradorEK)
        {
            Dictionary<string, object> resultado = new Dictionary<string, object>();
            try
            {
                List<RequisicionDTO> listaCompras = new List<RequisicionDTO>();
                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                {
                    #region PERU
                    var lstUsrsStarsoft = _context.tblP_Usuario_Starsoft_Compradores.ToList();
                    var usuario = vSesiones.sesionUsuarioDTO;
                    var relUser = ufs.getUsuarioService().getUserEk(usuario.id);
                    var listCompradorAdmin = _context.tblCom_Comprador_Admin.Select(x => x.empleado).ToList();
                    var puedeCancelar = relUser.empleado == 1 || listCompradorAdmin.Contains(relUser.empleado);
                    //                    var almacenes = (List<Core.DTO.Principal.Generales.ComboDTO>)consultaCheckProductivo(
                    //                        string.Format(@"SELECT 
                    //                                        alm.almacen AS Value, 
                    //                                        alm.descripcion AS Text 
                    //                                    FROM si_almacen alm                
                    //                                    ORDER BY Text ASC")).ToObject<List<Core.DTO.Principal.Generales.ComboDTO>>();
                    //                    var almacenDefault = almacenes.FirstOrDefault(y => y.Value == "1").Text;

                    //var proveedorres = ((List<dynamic>)consultaCheckProductivo(
                    //            string.Format(@"SELECT * FROM sp_proveedores")
                    //        ).ToObject<List<dynamic>>());

                    var proveedorres = new List<ProveedoresDTO>();

                    using (var dbStartSoft = new MainContextPeruStarSoft003BDCOMUN())
                    {
                        var lstProveedoresPeru = dbStartSoft.MAEPROV.Where(e => e.PRVCESTADO == "V").ToList();
                        foreach (var item in lstProveedoresPeru)
                        {

                            proveedorres.Add(new ProveedoresDTO()
                            {
                                noProveedor = 0,
                                noProveedorStarsoft = item.PRVCCODIGO,
                                nomProveedor = item.PRVCNOMBRE,
                                tipoCambio = 0,
                            });
                        }
                    }

                    List<tblCom_OrdenCompra> comprasEK = null;
                    string fi = fechaInicial.ToString("yyyyMMdd");
                    string ff = fechaFinal.ToString("yyyyMMdd");
                    string queryProv = proveedor > 0 ? "and proveedor = " + proveedor : "";

                    switch (estatus)
                    {
                        case 1: //Sin Surtir
                            //comprasEK = consultaCheckProductivo(
                            //    string.Format(@"SELECT * FROM so_orden_compra WHERE ST_OC = 'A' AND estatus != 'C' AND estatus != 'T' AND estatus != 'P' and ( fecha >= {0} and fecha <= {1} ) " + queryProv, fi, ff)
                            //);
                            comprasEK = _context.tblCom_OrdenCompra.Where(e => e.estatusRegistro && e.ST_OC == "A" && e.estatus != "C" && e.estatus != "P").ToList().Where(e => e.fecha.Date >= fechaInicial.Date && e.fecha.Date <= fechaFinal.Date).ToList();
                            break;
                        case 2: //Parciales
                            //comprasEK = consultaCheckProductivo(
                            //    string.Format(@"SELECT * FROM so_orden_compra WHERE ST_OC = 'A' AND estatus = 'P' and ( fecha >= {0} and fecha <= {1} ) " + queryProv, fi, ff)
                            //);
                            comprasEK = _context.tblCom_OrdenCompra.Where(e => e.estatusRegistro && e.ST_OC == "A" && e.estatus == "P").ToList().Where(e => e.fecha.Date >= fechaInicial.Date && e.fecha.Date <= fechaFinal.Date).ToList();

                            break;
                        case 3: //Surtidas
                            //comprasEK = consultaCheckProductivo(
                            //    string.Format(@"SELECT * FROM so_orden_compra WHERE ST_OC = 'A' AND estatus = 'T' and ( fecha >= {0} and fecha <= {1} ) " + queryProv, fi, ff)
                            //);
                            comprasEK = _context.tblCom_OrdenCompra.Where(e => e.estatusRegistro && e.ST_OC == "A" && e.estatus == "T").ToList().Where(e => e.fecha.Date >= fechaInicial.Date && e.fecha.Date <= fechaFinal.Date).ToList();

                            break;
                        default: //Todas
                            //comprasEK = consultaCheckProductivo(
                            //    string.Format(@"SELECT * FROM so_orden_compra WHERE ST_OC = 'A' AND estatus != 'C' and ( fecha >= {0} and fecha <= {1} ) " + queryProv, fi, ff)
                            //);
                            comprasEK = _context.tblCom_OrdenCompra.Where(e => e.estatusRegistro && e.ST_OC == "A" && e.estatus != "C").ToList().Where(e => e.fecha.Date >= fechaInicial.Date && e.fecha.Date <= fechaFinal.Date).ToList();

                            break;
                    }

                    if (comprasEK != null)
                    {
                        var compras = comprasEK;

                        if (cc != "" && cc != null)
                        {
                            compras = compras.Where(x => (string)x.cc == cc).ToList();
                        }

                        List<tblCom_OrdenCompra> lstOrdenCompras = _context.tblCom_OrdenCompra.Where(w => (cc != "" && cc != null ? w.cc == cc : true) && w.estatusRegistro).OrderBy(x => x.fecha).ToList();
                        List<tblCom_Comprador> lstCompradores = new List<tblCom_Comprador>();

                        foreach (var item in lstUsrsStarsoft)
                        {
                            int idStartsoft = Convert.ToInt32(item.id);
                            var objUsuario = _context.tblP_Usuario.FirstOrDefault(e => e.id == item.sigoplan_usuario_id);

                            lstCompradores.Add(new tblCom_Comprador
                            {
                                id = 0,
                                empleado = idStartsoft,
                                descripcion = objUsuario.apellidoPaterno + " " + objUsuario.nombre,
                                usuarioSIGOPLAN = objUsuario.id,
                                estatus = true,
                            });

                        }

                        //List<tblCom_Req> lstComprasReq = _context.tblCom_Req.Where(w => w.estatusRegistro && (cc != "" && cc != null ? w.cc == cc : true)).ToList();
                        //
                        var lstComprasReq = _context.Select<tblCom_Req>(new DapperDTO
                        {
                            baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                            consulta = string.Format("SELECT * FROM tblCom_Req WHERE estatusRegistro = 1 {0}", cc != "" && cc != null ? "AND cc = @cc " : ""),
                            parametros = new { cc = cc }
                        });
                        //
                        var lstComprasReq_id = lstComprasReq.Select(x => x.id).ToList();
                        //List<tblCom_ReqDet> lstComprasReqDet = _context.tblCom_ReqDet.Where(x => x.estatusRegistro && lstComprasReq_id.Contains(x.idReq)).ToList();
                        //
                        int ciclos = lstComprasReq_id.Count / 2000;
                        var lstComprasReqDet = new List<tblCom_ReqDet>();
                        for (int i = 0; i < ciclos; i++)
                        {
                            lstComprasReqDet.AddRange(_context.Select<tblCom_ReqDet>(new DapperDTO
                            {
                                baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                                consulta = "SELECT * FROM tblCom_ReqDet WHERE estatusRegistro = 1 AND idReq IN @req",
                                parametros = new { req = lstComprasReq_id.Skip(i * 2000).Take(2000) }
                            }));
                        }
                        //

                        #region SE OBTIENE LISTADO DE AREAS CUENTAS
                        List<dynamic> listaAreaCuentaEK = _contextEnkontrol.Select<dynamic>(
                        EnkontrolEnum.CplanProd,
                        new OdbcConsultaDTO()
                        {
                            consulta = @"
                            SELECT
                                area, cuenta, TRIM(descripcion) AS descripcion
                            FROM si_area_cuenta
                            WHERE cc_activo = 1
                            GROUP BY area, cuenta, descripcion
                            ORDER BY area, cuenta, descripcion"
                        });
                        #endregion

                        var lstCC = _context.tblP_CC.ToList();

                        foreach (var com in compras)
                        {
                            var tcc = (string)com.cc;
                            int tnumero = (int)com.numero;
                            var compraSIGOPLAN = lstOrdenCompras.FirstOrDefault(x => x.cc == tcc && x.numero == tnumero);

                            var almacenLAB = "";

                            //if (compraSIGOPLAN != null)
                            //{
                            //    string idLibreAbordo = compraSIGOPLAN.idLibreAbordo.ToString();
                            //    string almacenText = almacenes.Where(w => w.Value == idLibreAbordo).Select(s => s.Text).FirstOrDefault();
                            //    if (!string.IsNullOrEmpty(almacenText))
                            //        almacenLAB = almacenText;
                            //    else
                            //        almacenLAB = string.Empty;
                            //}
                            //else
                            //{
                            //    almacenLAB = almacenDefault;
                            //}
                            almacenLAB = string.Empty; // SKIP ALMACEN

                            bool flagCancelar = (puedeCancelar && com.st_impresa == "I") ? true : false;

                            //int p = (int)com.proveedor;
                            var provDesc = proveedorres.FirstOrDefault(x => x.noProveedorStarsoft == com.PERU_proveedor).nomProveedor;

                            listaCompras.Add(new RequisicionDTO
                            {
                                ccDescripcion = lstCC.Where((y => y.cc == (string)com.cc)).Select(x => x.descripcion).FirstOrDefault(),
                                numero = (int)com.numero,
                                fecha = (DateTime)com.fecha,
                                almacenLAB = almacenLAB,
                                cc = (string)com.cc,
                                libre_abordo = (int)com.idLibreAbordo,
                                estatusSurtido = (string)com.estatus,
                                flagCancelar = flagCancelar,
                                proveedor = 0,
                                PERU_proveedor = com.PERU_proveedor,
                                PERU_tipoCompra = com.PERU_tipoCompra,
                                proveedorDesc = provDesc,
                                flagTieneEntrada = ((string)com.estatus == "T" || (string)com.estatus == "P"),
                                comprador = com.compradorEnkontrol != null ? com.compradorEnkontrol : 0,
                                area = 0,
                                cuenta = 0,
                                areaCuentaDesc = string.Empty,
                                st_impresa = (string)com.st_impresa,
                                fechaAutorizacionString = com.fecha_autoriza != null ? ((DateTime)com.fecha_autoriza).ToShortDateString() : "",
                                fechaEntregaString = (compraSIGOPLAN != null && com.fecha_autoriza != null) ? ((DateTime)com.fecha_autoriza).AddDays(30 + compraSIGOPLAN.tiempoEntregaDias).ToShortDateString() : ""
                            });
                        }

                        if (idCompradorEK > 0)
                            listaCompras = listaCompras.Where(w => w.comprador == idCompradorEK).ToList();

                        foreach (var item in listaCompras)
                        {
                            #region SE OBTIENE NOMBRE DEL COMPRADOR
                            tblCom_Comprador objComprador = lstCompradores.Where(w => w.empleado == item.comprador).FirstOrDefault();
                            if (objComprador != null)
                                item.nombreComprador = objComprador.descripcion;
                            else
                                item.nombreComprador = string.Empty;
                            #endregion

                            #region SE OBTIENE AREA-CUENTA DESCRIPCIÓN
                            tblCom_Req objRequisicionSIGOPLAN = lstComprasReq.Where(w => w.cc == item.cc && w.numero == item.numero).FirstOrDefault();
                            if (objRequisicionSIGOPLAN != null)
                            {
                                int idReq = objRequisicionSIGOPLAN.id;
                                var detalle = lstComprasReqDet.Where(x => x.idReq == idReq).ToList();

                                //Se escoge el área-cuenta de la primer partida.
                                if (detalle.Count() > 0)
                                {
                                    item.area = detalle[0].area;
                                    item.cuenta = detalle[0].cuenta;

                                    var areaCuentaEK = listaAreaCuentaEK.Where(x => (int)x.area == item.area && (int)x.cuenta == item.cuenta).FirstOrDefault();
                                    if (areaCuentaEK != null)
                                    {
                                        item.areaCuentaDesc = (int)item.area + "-" + (int)item.cuenta + " " + (string)areaCuentaEK.descripcion;
                                    }
                                }
                            }
                            #endregion
                        }

                    }
                    else
                    {
                        listaCompras = new List<RequisicionDTO>();
                    }
                    #endregion
                }
                else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
                {
                    #region COLOMBIA
                    var usuario = vSesiones.sesionUsuarioDTO;
                    var relUser = ufs.getUsuarioService().getUserEk(usuario.id);
                    var listCompradorAdmin = _context.tblCom_Comprador_Admin.Select(x => x.empleado).ToList();
                    var puedeCancelar = relUser.empleado == 1 || listCompradorAdmin.Contains(relUser.empleado);
                    var almacenes = (List<Core.DTO.Principal.Generales.ComboDTO>)consultaCheckProductivo(
                        string.Format(@"SELECT 
                                        alm.almacen AS Value, 
                                        alm.descripcion AS Text 
                                    FROM DBA.si_almacen alm                
                                    ORDER BY Text ASC")).ToObject<List<Core.DTO.Principal.Generales.ComboDTO>>();
                    var almacenDefault = almacenes.FirstOrDefault(y => y.Value == "1").Text;
                    //var proveedorres = ((List<dynamic>)consultaCheckProductivo(
                    //            string.Format(@"SELECT numpro, nombre FROM sp_proveedores")
                    //        ).ToObject<List<dynamic>>());
                    //dynamic comprasEK = null;
                    List<CompraEkDTO> compras = null;
                    string fi = fechaInicial.ToString("yyyyMMdd");
                    string ff = fechaFinal.ToString("yyyyMMdd");
                    string queryProv = proveedor > 0 ? "AND proveedor = " + proveedor : "";
                    string queryCC = !string.IsNullOrEmpty(cc) ? " AND cc = ?" : "";

                    var query_compraEK = new OdbcConsultaDTO();
                    switch (estatus)
                    {
                        case 1: //Sin Surtir
                            {
                                query_compraEK.consulta = string.Format
                                (
                                    @"SELECT
                                        cc,
                                        numero,
                                        fecha,
                                        libre_abordo,
                                        comprador,
                                        proveedor,
                                        st_impresa,
                                        estatus,
                                        fecha_autoriza,
                                        (cc + '-' + CAST(numero AS varchar)) AS ccNumero
                                    FROM
                                        DBA.so_orden_compra
                                    WHERE
                                        estatus != 'C' AND
                                        estatus != 'T' AND
                                        estatus != 'P' AND
                                        fecha >= ? AND
                                        fecha <= ? AND
                                        {0} {1}{2}{3}
                                    ORDER BY
                                        fecha",
                                    "(vobo_aut = 'S' OR aut_aut = 'S')", queryProv, queryCC, (idCompradorEK > 0 ? " AND comprador = ?" : "")
                                );
                                query_compraEK.parametros.Add(new OdbcParameterDTO
                                {
                                    nombre = "fecha",
                                    tipo = OdbcType.Numeric,
                                    valor = fi
                                });
                                query_compraEK.parametros.Add(new OdbcParameterDTO
                                {
                                    nombre = "fecha",
                                    tipo = OdbcType.Numeric,
                                    valor = ff
                                });
                            }
                            break;
                        case 2: //Parciales
                            {
                                {
                                    query_compraEK.consulta = string.Format
                                    (
                                        @"SELECT
                                        cc,
                                        numero,
                                        fecha,
                                        libre_abordo,
                                        comprador,
                                        proveedor,
                                        st_impresa,
                                        estatus,
                                        fecha_autoriza,
                                        (cc + '-' + CAST(numero AS varchar)) AS ccNumero
                                    FROM
                                        DBA.so_orden_compra
                                    WHERE
                                        estatus = 'P' AND
                                        fecha >= ? AND
                                        fecha <= ? AND
                                        {0} {1}{2}{3}
                                    ORDER BY
                                        fecha",
                                        "(vobo_aut = 'S' OR aut_aut = 'S')", queryProv, queryCC, (idCompradorEK > 0 ? " AND comprador = ?" : "")
                                    );
                                    query_compraEK.parametros.Add(new OdbcParameterDTO
                                    {
                                        nombre = "fecha",
                                        tipo = OdbcType.Numeric,
                                        valor = fi
                                    });
                                    query_compraEK.parametros.Add(new OdbcParameterDTO
                                    {
                                        nombre = "fecha",
                                        tipo = OdbcType.Numeric,
                                        valor = ff
                                    });
                                }
                            }
                            break;
                        case 3: //Surtidas
                            {
                                {
                                    query_compraEK.consulta = string.Format
                                    (
                                        @"SELECT
                                        cc,
                                        numero,
                                        fecha,
                                        libre_abordo,
                                        comprador,
                                        proveedor,
                                        st_impresa,
                                        estatus,
                                        fecha_autoriza,
                                        (cc + '-' + CAST(numero AS varchar)) AS ccNumero
                                    FROM
                                        DBA.so_orden_compra
                                    WHERE
                                        estatus = 'T' AND
                                        fecha >= ? AND
                                        fecha <= ? AND
                                        {0} {1}{2}{3}
                                    ORDER BY
                                        fecha",
                                        "(vobo_aut = 'S' OR aut_aut = 'S')", queryProv, queryCC, (idCompradorEK > 0 ? " AND comprador = ?" : "")
                                    );
                                    query_compraEK.parametros.Add(new OdbcParameterDTO
                                    {
                                        nombre = "fecha",
                                        tipo = OdbcType.Numeric,
                                        valor = fi
                                    });
                                    query_compraEK.parametros.Add(new OdbcParameterDTO
                                    {
                                        nombre = "fecha",
                                        tipo = OdbcType.Numeric,
                                        valor = ff
                                    });
                                }
                            }
                            break;
                        default: //Todas
                            {
                                {
                                    query_compraEK.consulta = string.Format
                                    (
                                        @"SELECT
                                        cc,
                                        numero,
                                        fecha,
                                        libre_abordo,
                                        comprador,
                                        proveedor,
                                        st_impresa,
                                        estatus,
                                        fecha_autoriza,
                                        (cc + '-' + CAST(numero AS varchar)) AS ccNumero
                                    FROM
                                        DBA.so_orden_compra
                                    WHERE
                                        estatus != 'C' AND
                                        fecha >= ? AND
                                        fecha <= ? AND
                                        {0} {1}{2}{3}
                                    ORDER BY
                                        fecha",
                                        "(vobo_aut = 'S' OR aut_aut = 'S')", queryProv, queryCC, (idCompradorEK > 0 ? " AND comprador = ?" : "")
                                    );
                                    query_compraEK.parametros.Add(new OdbcParameterDTO
                                    {
                                        nombre = "fecha",
                                        tipo = OdbcType.Numeric,
                                        valor = fi
                                    });
                                    query_compraEK.parametros.Add(new OdbcParameterDTO
                                    {
                                        nombre = "fecha",
                                        tipo = OdbcType.Numeric,
                                        valor = ff
                                    });
                                }
                            }
                            break;
                    }

                    if (!string.IsNullOrEmpty(queryCC))
                    {
                        query_compraEK.parametros.Add(new OdbcParameterDTO
                        {
                            nombre = "cc",
                            tipo = OdbcType.NVarChar,
                            valor = cc
                        });
                    }

                    if (idCompradorEK > 0)
                    {
                        query_compraEK.parametros.Add(new OdbcParameterDTO
                        {
                            nombre = "comprador",
                            tipo = OdbcType.Numeric,
                            valor = idCompradorEK
                        });
                    }

                    compras = _contextEnkontrol.Select<CompraEkDTO>(productivo ? EnkontrolAmbienteEnum.Prod : EnkontrolAmbienteEnum.Prueba, query_compraEK);

                    if (compras != null)
                    {
                        var proveedoresEnCompras = compras.Select(x => (int)x.proveedor).ToList();
                        var query_proveedores = new OdbcConsultaDTO();
                        query_proveedores.consulta = string.Format
                        (
                            @"SELECT
                                numpro,
                                nombre
                            FROM
                                DBA.sp_proveedores
                            WHERE
                                numpro IN {0}",
                            proveedoresEnCompras.ToParamInValue()
                        );
                        query_proveedores.parametros.AddRange(proveedoresEnCompras.Select(x => new OdbcParameterDTO
                        {
                            nombre = "numpro",
                            tipo = OdbcType.Int,
                            valor = x
                        }).ToList());

                        var proveedores = _contextEnkontrol.Select<ProveedorDTO>(productivo ? EnkontrolAmbienteEnum.Prod : EnkontrolAmbienteEnum.Prueba, query_proveedores);

                        var ccNumeros = compras.Select(x => x.ccNumero).ToList();
                        //COMPRAS DE SIGOPLAN CON AREA-CUENTA DEL DETALLE DE LA ORDEN DE COMPRA
                        string fechaInicialStr = string.Format("{0}-{1}-{2}", fechaInicial.Year, fechaInicial.Month, fechaInicial.Day);
                        string fechaFinalStr = string.Format("{0}-{1}-{2}", fechaFinal.Year, fechaFinal.Month, fechaFinal.Day);
                        string strQuery =
                            string.Format(@"SELECT  COMPRA.cc,
                                                    COMPRA.numero,
                                                    COMPRA.idLibreAbordo,
                                                    COMPRA.tiempoEntregaDias,
                                                    INFO_COMPRA_DET.area AS areaCompra,
                                                    INFO_COMPRA_DET.cuenta AS cuentaCompra
                                                        FROM tblCom_OrdenCompra AS COMPRA
                                                        CROSS APPLY
                                                        (
                                                            SELECT TOP 1
                                                                    COMPRADET.area,
                                                                    COMPRADET.cuenta
                                                                        FROM tblCom_OrdenCompraDet AS COMPRADET
                                                                            WHERE COMPRADET.idOrdenCompra = COMPRA.id AND COMPRADET.estatusRegistro = 1 ORDER BY COMPRADET.partida
                                                        ) INFO_COMPRA_DET
                                                        WHERE COMPRA.estatusRegistro = 1 AND COMPRA.fecha >= '{0}' AND COMPRA.fecha <= '{1}' {2}{3}{4}",
                                            fechaInicialStr,
                                            fechaFinalStr,
                                            !string.IsNullOrEmpty(cc) ? " AND COMPRA.cc = @paramCC" : "",
                                            proveedor > 0 ? " AND COMPRA.proveedor = @paramProveedor" : "",
                                            idCompradorEK > 0 ? " AND COMPRA.compradorEnkontrol = @paramComprador" : "");
                        var lstOrdenCompras = _context.Select<CompraSPDTO>(new DapperDTO
                        {
                            baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                            consulta = strQuery
                        });

                        List<tblCom_Comprador> lstCompradores = _context.tblCom_Comprador.Where(x => x.estatus).ToList();

                        #region SE OBTIENE LISTADO DE AREAS CUENTAS
                        List<dynamic> listaAreaCuentaEK = _contextEnkontrol.Select<dynamic>(
                            vSesiones.sesionEmpresaActual == 1 ? EnkontrolEnum.CplanProd :
                            vSesiones.sesionEmpresaActual == 4 ? EnkontrolEnum.CplanEici :
                            vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora ? EnkontrolEnum.ArrenProd : EnkontrolEnum.ColombiaProductivo,
                        new OdbcConsultaDTO()
                        {
                            consulta = @"
                            SELECT
                                area, cuenta, TRIM(descripcion) AS descripcion
                            FROM DBA.si_area_cuenta
                            --WHERE cc_activo = 1
                            GROUP BY area, cuenta, descripcion
                            ORDER BY area, cuenta, descripcion"
                        });
                        #endregion

                        var centrosCosto = (List<Core.DTO.Principal.Generales.ComboDTO>)consultaCheckProductivo(
                            string.Format(@"SELECT cc AS Value, descripcion AS Text FROM DBA.cc WHERE st_ppto != 'T' ORDER BY Text ASC")
                        ).ToObject<List<Core.DTO.Principal.Generales.ComboDTO>>();

                        foreach (var com in compras)
                        {
                            var tcc = (string)com.cc;
                            int tnumero = (int)com.numero;
                            var compraSIGOPLAN = lstOrdenCompras.FirstOrDefault(x => x.cc == tcc && x.numero == tnumero);

                            var almacenLAB = "";

                            string acDescripcion = "";

                            if (compraSIGOPLAN != null)
                            {
                                string idLibreAbordo = compraSIGOPLAN.idLibreAbordo.ToString();
                                string almacenText = almacenes.Where(w => w.Value == idLibreAbordo).Select(s => s.Text).FirstOrDefault();
                                if (!string.IsNullOrEmpty(almacenText))
                                    almacenLAB = almacenText;
                                else
                                    almacenLAB = string.Empty;

                                var areaCuentaEK = listaAreaCuentaEK.FirstOrDefault(x => (int)x.area == compraSIGOPLAN.areaCompra && (int)x.cuenta == compraSIGOPLAN.cuentaCompra);
                                if (areaCuentaEK != null)
                                {
                                    acDescripcion = compraSIGOPLAN.areaCompra + "-" + compraSIGOPLAN.cuentaCompra + " " + (string)areaCuentaEK.descripcion;
                                }
                            }
                            else
                            {
                                almacenLAB = almacenDefault;
                            }

                            bool flagCancelar = (puedeCancelar && com.st_impresa != null && com.st_impresa == "I") ? true : false;

                            int p = (int)com.proveedor;
                            var provDesc = proveedores.FirstOrDefault(x => x.numpro == p).nombre;

                            #region SE OBTIENE NOMBRE DEL COMPRADOR
                            tblCom_Comprador objComprador = lstCompradores.FirstOrDefault(w => w.empleado == com.comprador);
                            #endregion

                            listaCompras.Add(new RequisicionDTO
                            {
                                ccDescripcion = centrosCosto.Where((y => y.Value == (string)com.cc)).Select(x => x.Text).FirstOrDefault(),
                                numero = (int)com.numero,
                                fecha = (DateTime)com.fecha,
                                almacenLAB = almacenLAB,
                                cc = (string)com.cc,
                                libre_abordo = (int)com.libre_abordo,
                                estatusSurtido = (string)com.estatus,
                                flagCancelar = flagCancelar,
                                proveedor = (int)com.proveedor,
                                proveedorDesc = provDesc,
                                flagTieneEntrada = ((string)com.estatus == "T" || (string)com.estatus == "P"),
                                comprador = com.comprador,
                                nombreComprador = objComprador != null ? objComprador.descripcion : "",
                                area = compraSIGOPLAN != null ? compraSIGOPLAN.areaCompra : 0,
                                cuenta = compraSIGOPLAN != null ? compraSIGOPLAN.cuentaCompra : 0,
                                areaCuentaDesc = acDescripcion,
                                st_impresa = (string)com.st_impresa,
                                fechaAutorizacionString = com.fecha_autoriza != null ? ((DateTime)com.fecha_autoriza).ToShortDateString() : "",
                                fechaEntregaString = (compraSIGOPLAN != null && com.fecha_autoriza != null) ? ((DateTime)com.fecha_autoriza).AddDays(30 + compraSIGOPLAN.tiempoEntregaDias).ToShortDateString() : ""
                            });
                        }

                        if (!string.IsNullOrEmpty(idAreaCuenta))
                        {
                            if (idAreaCuenta != "--Todos--")
                            {
                                int area = Int32.Parse(idAreaCuenta.Split('-')[0]);
                                int cuenta = Int32.Parse(idAreaCuenta.Split('-')[1]);

                                listaCompras = listaCompras.Where(w => w.area == area && w.cuenta == cuenta).ToList();
                            }
                        }
                    }
                    else
                        listaCompras = new List<RequisicionDTO>();
                    #endregion
                }
                else
                {
                    #region RESTO EMPRESAS
                    var usuario = vSesiones.sesionUsuarioDTO;
                    var relUser = ufs.getUsuarioService().getUserEk(usuario.id);
                    var listCompradorAdmin = _context.tblCom_Comprador_Admin.Select(x => x.empleado).ToList();
                    var puedeCancelar = relUser.empleado == 1 || listCompradorAdmin.Contains(relUser.empleado);
                    var almacenes = (List<Core.DTO.Principal.Generales.ComboDTO>)consultaCheckProductivo(
                        string.Format(@"SELECT 
                                        alm.almacen AS Value, 
                                        alm.descripcion AS Text 
                                    FROM si_almacen alm                
                                    ORDER BY Text ASC")).ToObject<List<Core.DTO.Principal.Generales.ComboDTO>>();
                    var almacenDefault = almacenes.FirstOrDefault(y => y.Value == "1").Text;
                    //var proveedorres = ((List<dynamic>)consultaCheckProductivo(
                    //            string.Format(@"SELECT numpro, nombre FROM sp_proveedores")
                    //        ).ToObject<List<dynamic>>());
                    //dynamic comprasEK = null;
                    List<CompraEkDTO> compras = null;
                    string fi = fechaInicial.ToString("yyyyMMdd");
                    string ff = fechaFinal.ToString("yyyyMMdd");
                    string queryProv = proveedor > 0 ? "AND proveedor = " + proveedor : "";
                    string queryCC = !string.IsNullOrEmpty(cc) ? " AND cc = ?" : "";

                    var query_compraEK = new OdbcConsultaDTO();
                    switch (estatus)
                    {
                        case 1: //Sin Surtir
                            {
                                query_compraEK.consulta = string.Format
                                (
                                    @"SELECT
                                        cc,
                                        numero,
                                        fecha,
                                        libre_abordo,
                                        comprador,
                                        proveedor,
                                        st_impresa,
                                        estatus,
                                        fecha_autoriza,
                                        (cc + '-' + CAST(numero AS varchar)) AS ccNumero
                                    FROM
                                        DBA.so_orden_compra
                                    WHERE
                                        estatus != 'C' AND
                                        estatus != 'T' AND
                                        estatus != 'P' AND
                                        fecha >= ? AND
                                        fecha <= ? AND
                                        {0} {1}{2}{3}
                                    ORDER BY
                                        fecha",
                                    ((EmpresaEnum)vSesiones.sesionEmpresaActual != EmpresaEnum.Colombia ? "ST_OC = 'A'" : "(vobo_aut = 'S' OR aut_aut = 'S')"), queryProv, queryCC,
                                    (idCompradorEK > 0 ? " AND comprador = ?" : "")
                                );
                                query_compraEK.parametros.Add(new OdbcParameterDTO
                                {
                                    nombre = "fecha",
                                    tipo = OdbcType.Numeric,
                                    valor = fi
                                });
                                query_compraEK.parametros.Add(new OdbcParameterDTO
                                {
                                    nombre = "fecha",
                                    tipo = OdbcType.Numeric,
                                    valor = ff
                                });
                            }
                            //comprasEK = consultaCheckProductivo(
                            //    string.Format(@"SELECT * FROM so_orden_compra WHERE " + ((EmpresaEnum)vSesiones.sesionEmpresaActual != EmpresaEnum.Colombia ? "ST_OC = 'A'" : "(vobo_aut = 'S' OR aut_aut = 'S')") + @" AND estatus != 'C' AND estatus != 'T' AND estatus != 'P' and ( fecha >= {0} and fecha <= {1} ) " + queryProv, fi, ff)
                            //);
                            break;
                        case 2: //Parciales
                            {
                                {
                                    query_compraEK.consulta = string.Format
                                    (
                                        @"SELECT
                                        cc,
                                        numero,
                                        fecha,
                                        libre_abordo,
                                        comprador,
                                        proveedor,
                                        st_impresa,
                                        estatus,
                                        fecha_autoriza,
                                        (cc + '-' + CAST(numero AS varchar)) AS ccNumero
                                    FROM
                                        DBA.so_orden_compra
                                    WHERE
                                        estatus = 'P' AND
                                        fecha >= ? AND
                                        fecha <= ? AND
                                        {0} {1}{2}{3}
                                    ORDER BY
                                        fecha",
                                        ((EmpresaEnum)vSesiones.sesionEmpresaActual != EmpresaEnum.Colombia ? "ST_OC = 'A'" : "(vobo_aut = 'S' OR aut_aut = 'S')"), queryProv, queryCC,
                                        (idCompradorEK > 0 ? " AND comprador = ?" : "")
                                    );
                                    query_compraEK.parametros.Add(new OdbcParameterDTO
                                    {
                                        nombre = "fecha",
                                        tipo = OdbcType.Numeric,
                                        valor = fi
                                    });
                                    query_compraEK.parametros.Add(new OdbcParameterDTO
                                    {
                                        nombre = "fecha",
                                        tipo = OdbcType.Numeric,
                                        valor = ff
                                    });
                                }
                            }
                            //comprasEK = consultaCheckProductivo(
                            //    string.Format(@"SELECT * FROM so_orden_compra WHERE " + ((EmpresaEnum)vSesiones.sesionEmpresaActual != EmpresaEnum.Colombia ? "ST_OC = 'A'" : "(vobo_aut = 'S' OR aut_aut = 'S')") + @" AND estatus = 'P' and ( fecha >= {0} and fecha <= {1} ) " + queryProv, fi, ff)
                            //);
                            break;
                        case 3: //Surtidas
                            {
                                {
                                    query_compraEK.consulta = string.Format
                                    (
                                        @"SELECT
                                        cc,
                                        numero,
                                        fecha,
                                        libre_abordo,
                                        comprador,
                                        proveedor,
                                        st_impresa,
                                        estatus,
                                        fecha_autoriza,
                                        (cc + '-' + CAST(numero AS varchar)) AS ccNumero
                                    FROM
                                        DBA.so_orden_compra
                                    WHERE
                                        estatus = 'T' AND
                                        fecha >= ? AND
                                        fecha <= ? AND
                                        {0} {1}{2}{3}
                                    ORDER BY
                                        fecha",
                                        ((EmpresaEnum)vSesiones.sesionEmpresaActual != EmpresaEnum.Colombia ? "ST_OC = 'A'" : "(vobo_aut = 'S' OR aut_aut = 'S')"), queryProv, queryCC,
                                        (idCompradorEK > 0 ? " AND comprador = ?" : "")
                                    );
                                    query_compraEK.parametros.Add(new OdbcParameterDTO
                                    {
                                        nombre = "fecha",
                                        tipo = OdbcType.Numeric,
                                        valor = fi
                                    });
                                    query_compraEK.parametros.Add(new OdbcParameterDTO
                                    {
                                        nombre = "fecha",
                                        tipo = OdbcType.Numeric,
                                        valor = ff
                                    });
                                }
                            }
                            //comprasEK = consultaCheckProductivo(
                            //    string.Format(@"SELECT * FROM so_orden_compra WHERE " + ((EmpresaEnum)vSesiones.sesionEmpresaActual != EmpresaEnum.Colombia ? "ST_OC = 'A'" : "(vobo_aut = 'S' OR aut_aut = 'S')") + @" AND estatus = 'T' and ( fecha >= {0} and fecha <= {1} ) " + queryProv, fi, ff)
                            //);
                            break;
                        default: //Todas
                            {
                                {
                                    query_compraEK.consulta = string.Format
                                    (
                                        @"SELECT
                                        cc,
                                        numero,
                                        fecha,
                                        libre_abordo,
                                        comprador,
                                        proveedor,
                                        st_impresa,
                                        estatus,
                                        fecha_autoriza,
                                        (cc + '-' + CAST(numero AS varchar)) AS ccNumero
                                    FROM
                                        DBA.so_orden_compra
                                    WHERE
                                        estatus != 'C' AND
                                        fecha >= ? AND
                                        fecha <= ? AND
                                        {0} {1}{2}{3}
                                    ORDER BY
                                        fecha",
                                        ((EmpresaEnum)vSesiones.sesionEmpresaActual != EmpresaEnum.Colombia ? "ST_OC = 'A'" : "(vobo_aut = 'S' OR aut_aut = 'S')"), queryProv, queryCC,
                                        (idCompradorEK > 0 ? " AND comprador = ?" : "")
                                    );
                                    query_compraEK.parametros.Add(new OdbcParameterDTO
                                    {
                                        nombre = "fecha",
                                        tipo = OdbcType.Numeric,
                                        valor = fi
                                    });
                                    query_compraEK.parametros.Add(new OdbcParameterDTO
                                    {
                                        nombre = "fecha",
                                        tipo = OdbcType.Numeric,
                                        valor = ff
                                    });
                                }
                            }
                            //comprasEK = consultaCheckProductivo(
                            //    string.Format(@"SELECT * FROM so_orden_compra WHERE " + ((EmpresaEnum)vSesiones.sesionEmpresaActual != EmpresaEnum.Colombia ? "ST_OC = 'A'" : "(vobo_aut = 'S' OR aut_aut = 'S')") + @" AND estatus != 'C' and ( fecha >= {0} and fecha <= {1} ) " + queryProv, fi, ff)
                            //);
                            break;
                    }

                    if (!string.IsNullOrEmpty(queryCC))
                    {
                        query_compraEK.parametros.Add(new OdbcParameterDTO
                        {
                            nombre = "cc",
                            tipo = OdbcType.NVarChar,
                            valor = cc
                        });
                    }

                    if (idCompradorEK > 0)
                    {
                        query_compraEK.parametros.Add(new OdbcParameterDTO
                        {
                            nombre = "comprador",
                            tipo = OdbcType.Numeric,
                            valor = idCompradorEK
                        });
                    }

                    compras = _contextEnkontrol.Select<CompraEkDTO>(productivo ? EnkontrolAmbienteEnum.Prod : EnkontrolAmbienteEnum.Prueba, query_compraEK);

                    if (/*comprasEK != null*/compras != null)
                    {
                        //var compras = (List<dynamic>)comprasEK.ToObject<List<dynamic>>();

                        //if (cc != "" && cc != null)
                        //{
                        //    compras = compras.Where(x => (string)x.cc == cc).ToList();
                        //}

                        var proveedoresEnCompras = compras.Select(x => (int)x.proveedor).ToList();
                        var query_proveedores = new OdbcConsultaDTO();
                        query_proveedores.consulta = string.Format
                        (
                            @"SELECT
                                numpro,
                                nombre
                            FROM
                                sp_proveedores
                            WHERE
                                numpro IN {0}",
                            proveedoresEnCompras.ToParamInValue()
                        );
                        query_proveedores.parametros.AddRange(proveedoresEnCompras.Select(x => new OdbcParameterDTO
                        {
                            nombre = "numpro",
                            tipo = OdbcType.Int,
                            valor = x
                        }).ToList());

                        var proveedores = _contextEnkontrol.Select<ProveedorDTO>(productivo ? EnkontrolAmbienteEnum.Prod : EnkontrolAmbienteEnum.Prueba, query_proveedores);

                        var ccNumeros = compras.Select(x => x.ccNumero).ToList();
                        //List<CompraSPDTO> lstOrdenCompras = _context.tblCom_OrdenCompra.Where(w => ccNumeros.Contains(w.cc + "-" + w.numero) /*(cc != "" && cc != null ? w.cc == cc : true)*/ && w.estatusRegistro).Select(x => new CompraSPDTO
                        //{
                        //    cc = x.cc,
                        //    numero = x.numero,
                        //    idLibreAbordo = x.idLibreAbordo.Value,
                        //    tiempoEntregaDias = x.tiempoEntregaDias
                        //}).ToList();
                        //COMPRAS DE SIGOPLAN CON AREA-CUENTA DEL DETALLE DE LA ORDEN DE COMPRA
                        var lstOrdenCompras = _context.Select<CompraSPDTO>(new DapperDTO
                        {
                            baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                            consulta = string.Format(@"SELECT
                                            COMPRA.cc,
                                            COMPRA.numero,
                                            COMPRA.idLibreAbordo,
                                            COMPRA.tiempoEntregaDias,
                                            INFO_COMPRA_DET.area AS areaCompra,
                                            INFO_COMPRA_DET.cuenta AS cuentaCompra
                                        FROM
                                            tblCom_OrdenCompra AS COMPRA
                                        CROSS APPLY
                                            (
                                                SELECT TOP 1
                                                    COMPRADET.area,
                                                    COMPRADET.cuenta
                                                FROM
                                                    tblCom_OrdenCompraDet AS COMPRADET
                                                WHERE
                                                    COMPRADET.idOrdenCompra = COMPRA.id AND
                                                    COMPRADET.estatusRegistro = 1
                                                ORDER BY
                                                    COMPRADET.partida
                                            ) INFO_COMPRA_DET
                                        WHERE
                                            COMPRA.estatusRegistro = 1 AND
                                            COMPRA.fecha >= @paramFechaInicio AND
                                            COMPRA.fecha <= @paramFechaFin
                                            {0}{1}{2}",
                                       !string.IsNullOrEmpty(cc) ? " AND COMPRA.cc = @paramCC" : "", proveedor > 0 ? " AND COMPRA.proveedor = @paramProveedor" : "", idCompradorEK > 0 ? " AND COMPRA.compradorEnkontrol = @paramComprador" : ""),
                            parametros = new { paramFechaInicio = fechaInicial, paramFechaFin = fechaFinal, paramCC = cc, paramProveedor = proveedor, paramComprador = idCompradorEK }
                        });

                        //                        COMPRAS DE SIGOPLAN CON AREA-CUENTA DE LAS REQUISICIONES
                        //                        var lstOrdenCompras = _context.Select<CompraSPDTO>(new DapperDTO
                        //                        {
                        //                            baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        //                            consulta = @"SELECT
                        //	                                        COMPRA.cc,
                        //	                                        COMPRA.numero,
                        //	                                        COMPRA.idLibreAbordo,
                        //	                                        COMPRA.tiempoEntregaDias,
                        //	                                        REQDET.area,
                        //	                                        REQDET.cuenta
                        //                                        FROM
                        //	                                        tblCom_OrdenCompra AS COMPRA
                        //                                        CROSS APPLY
                        //	                                        (
                        //		                                        SELECT TOP 1
                        //			                                        COMPRADET.num_requisicion,
                        //			                                        COMPRADET.part_requisicion
                        //		                                        FROM
                        //			                                        tblCom_OrdenCompraDet AS COMPRADET
                        //		                                        WHERE
                        //			                                        COMPRADET.idOrdenCompra = COMPRA.id AND
                        //			                                        COMPRADET.estatusRegistro = 1
                        //		                                        ORDER BY
                        //			                                        COMPRADET.part_requisicion
                        //	                                        ) INFOREQ
                        //                                        INNER JOIN
                        //	                                        tblCom_Req AS REQ
                        //	                                        ON
                        //		                                        REQ.cc = COMPRA.cc AND
                        //		                                        REQ.numero = INFOREQ.num_requisicion AND
                        //		                                        REQ.estatusRegistro = 1
                        //                                        INNER JOIN
                        //	                                        tblCom_ReqDet AS REQDET
                        //	                                        ON
                        //		                                        REQDET.idReq = REQ.id AND
                        //		                                        REQDET.partida = INFOREQ.part_requisicion AND
                        //		                                        REQDET.estatusRegistro = 1
                        //                                        WHERE
                        //	                                        COMPRA.estatusRegistro = 1
                        //                                        ORDER BY
                        //	                                        COMPRA.cc,
                        //	                                        COMPRA.numero AND
                        //                                          (COMPRA.cc + '-' + CAST(COMPRA.numero AS VARCHAR) IN @paramCcNumero",
                        //                            parametros = new { paramCcNumero = ccNumeros }
                        //                        });

                        List<tblCom_Comprador> lstCompradores = _context.tblCom_Comprador.Where(x => x.estatus).ToList();

                        //List<tblCom_Req> lstComprasReq = _context.tblCom_Req.Where(w => w.estatusRegistro && (cc != "" && cc != null ? w.cc == cc : true)).ToList();
                        //
                        //var lstComprasReq = _context.Select<tblCom_Req>(new DapperDTO
                        //{
                        //    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        //    consulta = string.Format("SELECT * FROM tblCom_Req WHERE estatusRegistro = 1 {0}", cc != "" && cc != null ? "AND cc = @cc " : ""),
                        //    parametros = new { cc = cc }
                        //});
                        //
                        //var lstComprasReq_id = lstComprasReq.Select(x => x.id).ToList();
                        //List<tblCom_ReqDet> lstComprasReqDet = _context.tblCom_ReqDet.Where(x => x.estatusRegistro && lstComprasReq_id.Contains(x.idReq)).ToList();
                        //
                        //int ciclos = lstComprasReq_id.Count / 2000;
                        //var lstComprasReqDet = new List<tblCom_ReqDet>();
                        //for (int i = 0; i < ciclos; i++)
                        //{
                        //    lstComprasReqDet.AddRange(_context.Select<tblCom_ReqDet>(new DapperDTO
                        //    {
                        //        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        //        consulta = "SELECT * FROM tblCom_ReqDet WHERE estatusRegistro = 1 AND idReq IN @req",
                        //        parametros = new { req = lstComprasReq_id.Skip(i * 2000).Take(2000) }
                        //    }));
                        //}
                        //

                        #region SE OBTIENE LISTADO DE AREAS CUENTAS
                        List<dynamic> listaAreaCuentaEK = _contextEnkontrol.Select<dynamic>(
                        vSesiones.sesionEmpresaActual == 1 ? EnkontrolEnum.CplanProd : vSesiones.sesionEmpresaActual == 4 ? EnkontrolEnum.CplanEici : EnkontrolEnum.ArrenProd,
                        new OdbcConsultaDTO()
                        {
                            consulta = @"
                            SELECT
                                area, cuenta, TRIM(descripcion) AS descripcion
                            FROM si_area_cuenta
                            WHERE cc_activo = 1
                            GROUP BY area, cuenta, descripcion
                            ORDER BY area, cuenta, descripcion"
                        });
                        #endregion

                        var centrosCosto = (List<Core.DTO.Principal.Generales.ComboDTO>)consultaCheckProductivo(
                            string.Format(@"SELECT cc AS Value, descripcion AS Text FROM cc WHERE st_ppto != 'T' ORDER BY Text ASC")
                        ).ToObject<List<Core.DTO.Principal.Generales.ComboDTO>>();

                        foreach (var com in compras)
                        {
                            var tcc = (string)com.cc;
                            int tnumero = (int)com.numero;
                            var compraSIGOPLAN = lstOrdenCompras.FirstOrDefault(x => x.cc == tcc && x.numero == tnumero);

                            var almacenLAB = "";

                            string acDescripcion = "";

                            if (compraSIGOPLAN != null)
                            {
                                string idLibreAbordo = compraSIGOPLAN.idLibreAbordo.ToString();
                                string almacenText = almacenes.Where(w => w.Value == idLibreAbordo).Select(s => s.Text).FirstOrDefault();
                                if (!string.IsNullOrEmpty(almacenText))
                                    almacenLAB = almacenText;
                                else
                                    almacenLAB = string.Empty;

                                var areaCuentaEK = listaAreaCuentaEK.FirstOrDefault(x => (int)x.area == compraSIGOPLAN.areaCompra && (int)x.cuenta == compraSIGOPLAN.cuentaCompra);
                                if (areaCuentaEK != null)
                                {
                                    acDescripcion = compraSIGOPLAN.areaCompra + "-" + compraSIGOPLAN.cuentaCompra + " " + (string)areaCuentaEK.descripcion;
                                }
                            }
                            else
                            {
                                almacenLAB = almacenDefault;
                            }

                            bool flagCancelar = (puedeCancelar && com.st_impresa != null && com.st_impresa == "I" /*com.st_impresa.Value == "I"*/) ? true : false;

                            int p = (int)com.proveedor;
                            //var provDesc = proveedorres.FirstOrDefault(x => x.numpro == p).nombre;
                            var provDesc = proveedores.FirstOrDefault(x => x.numpro == p).nombre;

                            #region SE OBTIENE NOMBRE DEL COMPRADOR
                            tblCom_Comprador objComprador = lstCompradores.FirstOrDefault(w => w.empleado == com.comprador);
                            //if (objComprador != null)
                            //    item.nombreComprador = objComprador.descripcion;
                            //else
                            //    item.nombreComprador = string.Empty;
                            #endregion

                            listaCompras.Add(new RequisicionDTO
                            {
                                ccDescripcion = centrosCosto.Where((y => y.Value == (string)com.cc)).Select(x => x.Text).FirstOrDefault(),
                                numero = (int)com.numero,
                                fecha = (DateTime)com.fecha,
                                almacenLAB = almacenLAB,
                                cc = (string)com.cc,
                                libre_abordo = (int)com.libre_abordo,
                                estatusSurtido = (string)com.estatus,
                                flagCancelar = flagCancelar,
                                proveedor = (int)com.proveedor,
                                proveedorDesc = provDesc,
                                flagTieneEntrada = ((string)com.estatus == "T" || (string)com.estatus == "P"),
                                comprador = /*com.comprador != null ? */com.comprador /*: 0*/,
                                nombreComprador = objComprador != null ? objComprador.descripcion : "",
                                area = compraSIGOPLAN != null ? compraSIGOPLAN.areaCompra : 0,
                                cuenta = compraSIGOPLAN != null ? compraSIGOPLAN.cuentaCompra : 0,
                                //area = 0,
                                //cuenta = 0,
                                //areaCuentaDesc = string.Empty,
                                areaCuentaDesc = acDescripcion,
                                st_impresa = (string)com.st_impresa,
                                fechaAutorizacionString = com.fecha_autoriza != null ? ((DateTime)com.fecha_autoriza).ToShortDateString() : "",
                                fechaEntregaString = (compraSIGOPLAN != null && com.fecha_autoriza != null) ? ((DateTime)com.fecha_autoriza).AddDays(30 + compraSIGOPLAN.tiempoEntregaDias).ToShortDateString() : ""
                            });
                        }

                        //if (idCompradorEK > 0)
                        //    listaCompras = listaCompras.Where(w => w.comprador == idCompradorEK).ToList();

                        //foreach (var item in listaCompras)
                        //{
                        //    //#region SE OBTIENE NOMBRE DEL COMPRADOR
                        //    //tblCom_Comprador objComprador = lstCompradores.Where(w => w.empleado == item.comprador).FirstOrDefault();
                        //    //if (objComprador != null)
                        //    //    item.nombreComprador = objComprador.descripcion;
                        //    //else
                        //    //    item.nombreComprador = string.Empty;
                        //    //#endregion

                        //    #region SE OBTIENE AREA-CUENTA DESCRIPCIÓN
                        //    //tblCom_Req objRequisicionSIGOPLAN = lstComprasReq.Where(w => w.cc == item.cc && w.numero == item.numero).FirstOrDefault();
                        //    //if (objRequisicionSIGOPLAN != null)
                        //    //{
                        //    //    int idReq = objRequisicionSIGOPLAN.id;
                        //    //    var detalle = lstComprasReqDet.Where(x => x.idReq == idReq).ToList();

                        //    //    //Se escoge el área-cuenta de la primer partida.
                        //    //    if (detalle.Count() > 0)
                        //    //    {
                        //    //        item.area = detalle[0].area;
                        //    //        item.cuenta = detalle[0].cuenta;

                        //    //        var areaCuentaEK = listaAreaCuentaEK.Where(x => (int)x.area == item.area && (int)x.cuenta == item.cuenta).FirstOrDefault();
                        //    //        if (areaCuentaEK != null)
                        //    //        {
                        //    //            item.areaCuentaDesc = (int)item.area + "-" + (int)item.cuenta + " " + (string)areaCuentaEK.descripcion;
                        //    //        }
                        //    //    }
                        //    //}
                        //    #endregion
                        //}

                        if (!string.IsNullOrEmpty(idAreaCuenta))
                        {
                            if (idAreaCuenta != "--Todos--")
                            {
                                int area = Int32.Parse(idAreaCuenta.Split('-')[0]);
                                int cuenta = Int32.Parse(idAreaCuenta.Split('-')[1]);

                                listaCompras = listaCompras.Where(w => w.area == area && w.cuenta == cuenta).ToList();
                            }
                        }
                    }
                    else
                    {
                        listaCompras = new List<RequisicionDTO>();
                    }
                    #endregion
                }

                resultado.Add(SUCCESS, true);
                resultado.Add("data", listaCompras);
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0,
                    new { cc = cc, estatus = estatus, proveedor = proveedor, fechaInicial = fechaInicial, fechaFinal = fechaFinal, idAreaCuenta = idAreaCuenta, idCompradorEK = idCompradorEK });
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }

            return resultado;
        }

        public UltimaCompraDTO getUltimaCompra(CuadroComparativoDetDTO partidaCuadro)
        {

            if ((MainContextEnum)vSesiones.sesionEmpresaActual != MainContextEnum.PERU)
            {
                #region RESTO EMPRESAS
                var ordenCompraDetEK = consultaCheckProductivo(
                string.Format(@"SELECT 
                                    TOP 1 * 
                                FROM so_orden_compra_det 
                                WHERE cc = '{0}' AND insumo = {1} AND partida = 1 
                                ORDER BY numero DESC", partidaCuadro.cc, partidaCuadro.insumo));

                if (ordenCompraDetEK != null)
                {
                    var ordenCompraDet = (List<dynamic>)ordenCompraDetEK.ToObject<List<dynamic>>();

                    var ordenCompraEK = consultaCheckProductivo(
                        string.Format(@"SELECT 
                                        oc.*, 
                                        prov.nombre AS proveedorNom, 
                                        prov.moneda AS moneda, 
                                        mon.moneda AS monedaDesc 
                                    FROM so_orden_compra oc
                                        INNER JOIN sp_proveedores prov ON oc.proveedor = prov.numpro 
                                        INNER JOIN moneda mon ON prov.moneda = mon.clave 
                                    WHERE cc = '{0}' AND numero = {1}", ordenCompraDet[0].cc.Value, ordenCompraDet[0].numero.Value));

                    if (ordenCompraEK != null)
                    {
                        var ordenCompra = (List<dynamic>)ordenCompraEK.ToObject<List<dynamic>>();

                        var ultimaCompra = new UltimaCompraDTO
                        {
                            proveedorNum = ordenCompra[0].proveedor.Value.ToString(),
                            proveedorNom = (string)ordenCompra[0].proveedorNom.Value,
                            cc = (string)ordenCompra[0].cc.Value,
                            numero = (int)ordenCompra[0].numero.Value,
                            folioOC = (string)ordenCompra[0].cc.Value + "-" + fillNo(ordenCompra[0].numero.Value.ToString(), 6),
                            fecha = (DateTime)ordenCompra[0].fecha.Value,
                            fechaString = ((DateTime)ordenCompra[0].fecha.Value).Date.ToShortDateString(),
                            precio = Convert.ToDecimal(ordenCompraDet[0].precio.Value, CultureInfo.InvariantCulture),
                            moneda = Int32.Parse(ordenCompra[0].moneda.Value),
                            monedaDesc = (string)ordenCompra[0].monedaDesc.Value
                        };

                        return ultimaCompra;
                    }
                    else
                    {
                        return new UltimaCompraDTO();
                    }
                }
                else
                {
                    return new UltimaCompraDTO();
                }
                #endregion
            }
            else
            {
                #region PERU
                //                var ordenCompraDetEK = consultaCheckProductivo(
                //                string.Format(@"SELECT 
                //                                    TOP 1 * 
                //                                FROM so_orden_compra_det 
                //                                WHERE cc = '{0}' AND insumo = {1} AND partida = 1 
                //                                ORDER BY numero DESC", partidaCuadro.cc, partidaCuadro.insumo));

                var ordenCompraDet = _context.Select<dynamic>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = string.Format(@"SELECT TOP 1 * 
                                FROM tblCom_OrdenCompraDet 
                                WHERE cc = '{0}' AND insumo = {1} AND partida = 1 
                                ORDER BY numero DESC", partidaCuadro.cc, partidaCuadro.insumo)
                }).FirstOrDefault();

                if (ordenCompraDet != null)
                {

                    //                    var ordenCompraEK = consultaCheckProductivo(
                    //                        string.Format(@"SELECT 
                    //                                        oc.*, 
                    //                                        prov.nombre AS proveedorNom, 
                    //                                        prov.moneda AS moneda, 
                    //                                        mon.moneda AS monedaDesc 
                    //                                    FROM so_orden_compra oc
                    //                                        INNER JOIN sp_proveedores prov ON oc.proveedor = prov.numpro 
                    //                                        INNER JOIN moneda mon ON prov.moneda = mon.clave 
                    //                                    WHERE cc = '{0}' AND numero = {1}", ordenCompraDet[0].cc.Value, ordenCompraDet[0].numero.Value));
                    string ccDet = (string)ordenCompraDet.cc;
                    int? numeroDet = (int?)ordenCompraDet.numero;

                    var ordenCompra = _context.tblCom_OrdenCompra.FirstOrDefault(e => e.estatusRegistro && e.cc == ccDet && e.numero == numeroDet.Value && e.PERU_tipoCompra == partidaCuadro.PERU_tipoCuadro);

                    if (ordenCompra != null)
                    {
                        string nomProveeStarsoft = "";

                        using (var dbStarsoft = new MainContextPeruStarSoft003BDCOMUN())
                        {
                            var objProveeStarsoft = dbStarsoft.MAEPROV.FirstOrDefault(e => e.PRVCCODIGO == ordenCompra.PERU_proveedor);

                            nomProveeStarsoft = objProveeStarsoft.PRVCNOMBRE;
                        }

                        var ultimaCompra = new UltimaCompraDTO
                        {
                            proveedorNum = ordenCompra.PERU_proveedor,
                            proveedorNom = nomProveeStarsoft,
                            cc = ordenCompra.cc,
                            numero = ordenCompra.numero,
                            folioOC = ordenCompra.cc + "-" + fillNo(ordenCompra.numero.ToString(), 6),
                            fecha = ordenCompra.fecha,
                            fechaString = ordenCompra.fecha.Date.ToShortDateString(),
                            precio = Convert.ToDecimal(ordenCompraDet.precio, CultureInfo.InvariantCulture),
                            moneda = Int32.Parse(ordenCompra.moneda),
                            monedaDesc = ordenCompra.moneda == "2" ? "DLS" : "SOL",
                        };

                        return ultimaCompra;
                    }
                    else
                    {
                        return new UltimaCompraDTO();
                    }
                }
                else
                {
                    return new UltimaCompraDTO();
                }
                #endregion
            }

        }

        public rptOrdenCompraInfoDTO getOrdenCompraRpt(string cc, int numero, string PERU_tipoCompra = "")
        {
            try
            {
                if (vSesiones.sesionEmpresaActual != (int)EmpresaEnum.Peru && vSesiones.sesionEmpresaActual != (int)EmpresaEnum.Colombia)
                {
                    #region Compras México
                    var ordenCompraEK = consultaCheckProductivo(
                        string.Format(@"SELECT 
                                        oc.*, 
                                        comp.descripcion AS compradorNombre, 
                                        cc.descripcion AS ccDescripcion, 
                                        aut.descripcion AS autorizoNombre, 
                                        prov.nombre AS provNombre, 
                                        prov.ciudad AS provLugar, 
                                        prov.telefono1 AS provTelefono, 
                                        prov.fax AS provFax, 
                                        mon.moneda AS monedaDesc, 
                                        vob.descripcion AS voboNombre 
                                    FROM so_orden_compra oc 
                                        INNER JOIN empleados comp ON comp.empleado = oc.comprador 
                                        LEFT JOIN empleados aut ON aut.empleado = oc.autorizo 
                                        INNER JOIN empleados vob ON vob.empleado = oc.vobo 
                                        INNER JOIN cc cc ON cc.cc = oc.cc 
                                        INNER JOIN sp_proveedores prov ON oc.proveedor = prov.numpro 
                                        INNER JOIN moneda mon ON oc.moneda = mon.clave 
                                    WHERE oc.cc = '{0}' AND oc.numero = {1}", cc, numero));

                    if (ordenCompraEK != null)
                    {
                        var partidasEK = consultaCheckProductivo(
                        string.Format(@"SELECT 
                                        d.*, 
                                        i.descripcion AS insumoDesc, 
                                        i.unidad, 
                                        i.cancelado, 
                                        (
                                            SELECT 
                                                l.descripcion 
                                            FROM so_orden_det_linea l 
                                            WHERE l.cc = d.cc AND l.numero = d.numero AND l.partida = d.partida 
                                        ) AS partidaDesc 
                                    FROM so_orden_compra_det d 
                                        INNER JOIN insumos i ON d.insumo = i.insumo 
                                    WHERE d.cc = '{0}' AND d.numero = {1} 
                                    ORDER BY d.partida", cc, numero));

                        var pagoEK = consultaCheckProductivo(
                        string.Format(@"SELECT 
                                        pag.* 
                                    FROM so_orden_compra_pago pag 
                                    WHERE pag.cc = '{0}' AND pag.numero = {1} 
                                    ORDER BY pag.partida", cc, numero));

                        List<dynamic> oc = (List<dynamic>)ordenCompraEK.ToObject<List<dynamic>>();
                        List<dynamic> part = (List<dynamic>)partidasEK.ToObject<List<dynamic>>();
                        List<dynamic> pag = new List<dynamic>();

                        if (pagoEK != null)
                        {
                            pag = (List<dynamic>)pagoEK.ToObject<List<dynamic>>();
                        }

                        var almacenes = (List<dynamic>)consultaCheckProductivo(
                        string.Format(@"SELECT 
                                        * 
                                    FROM si_almacen")).ToObject<List<dynamic>>();

                        var libreAbordo = (List<dynamic>)consultaCheckProductivo(
                        string.Format(@"SELECT 
                                        * 
                                    FROM so_libre_abordo")).ToObject<List<dynamic>>();

                        string libre_abordo = "";
                        int libreAbordoID = (int)oc[0].libre_abordo.Value;

                        if (vSesiones.sesionEmpresaActual != (int)EmpresaEnum.Colombia)
                        {
                            if (almacenes.FirstOrDefault(x => (int)x.almacen.Value == libreAbordoID) != null)
                            {
                                libre_abordo = (string)almacenes.FirstOrDefault(x => (int)x.almacen.Value == libreAbordoID).descripcion.Value;
                            }
                            else if (libreAbordo.FirstOrDefault(x => (int)x.numero.Value == libreAbordoID) != null)
                            {
                                libre_abordo = (string)libreAbordo.FirstOrDefault(x => (int)x.numero.Value == libreAbordoID).descripcion.Value;
                            }
                        }

                        List<rptOrdenCompraPartidasDTO> rptOrdenCompraPartidas = new List<rptOrdenCompraPartidasDTO>();

                        foreach (var p in part)
                        {
                            var area = p.area.Value != null ? (int)p.area.Value : 0;
                            var cuenta = p.cuenta.Value != null ? (int)p.cuenta.Value : 0;

                            rptOrdenCompraPartidas.Add(new rptOrdenCompraPartidasDTO
                            {
                                partida = ((int)p.partida.Value).ToString(),
                                insumoNumero = ((int)p.insumo.Value).ToString(),
                                insumoDescripcion = (string)p.insumoDesc.Value + "\n " + (string)p.partidaDesc.Value,
                                areaCuenta = area + "-" + cuenta,
                                fechaEntrega = ((DateTime)p.fecha_entrega.Value).ToShortDateString(),
                                cantidad = ((decimal)p.cantidad.Value).ToString("C2").Replace("$", "") + " " + (string)p.unidad.Value,
                                precioUnitario = ((decimal)p.precio.Value).ToString("C2") + " " + (string)oc[0].monedaDesc.Value,
                                importe = ((decimal)p.importe.Value).ToString("C2"),
                                num_requisicion = (int)p.num_requisicion
                            });
                        }

                        List<rptOrdenCompraFormaPagoDTO> rptOrdenCompraPago = new List<rptOrdenCompraFormaPagoDTO>();

                        foreach (var p in pag)
                        {
                            rptOrdenCompraPago.Add(new rptOrdenCompraFormaPagoDTO
                            {
                                numero = ((int)p.partida.Value).ToString(),
                                dias = ((int)p.dias_pago.Value).ToString(),
                                movimiento = (string)p.comentarios.Value,
                                porcentaje = ((decimal)p.porcentaje.Value).ToString() + "%",
                                importe = "$" + ((decimal)p.importe.Value).ToString()
                            });
                        }

                        var compraSIGOPLAN = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.cc == cc && x.numero == numero);
                        var labNumero = "";
                        var labDescripcion = "";

                        if (vSesiones.sesionEmpresaActual != (int)EmpresaEnum.Colombia)
                        {
                            if (compraSIGOPLAN != null)
                            {
                                if (compraSIGOPLAN.idLibreAbordo != null && compraSIGOPLAN.idLibreAbordo > 0)
                                {
                                    var almacenEK = ((List<dynamic>)consultaCheckProductivo(
                                        string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", compraSIGOPLAN.idLibreAbordo)
                                    ).ToObject<List<dynamic>>())[0];

                                    labNumero = compraSIGOPLAN.idLibreAbordo.ToString();
                                    labDescripcion = (string)almacenEK.descripcion;
                                }
                                else
                                {
                                    labNumero = ((int)oc[0].libre_abordo.Value).ToString();
                                    labDescripcion = libre_abordo;
                                }
                            }
                            else
                            {
                                labNumero = ((int)oc[0].libre_abordo.Value).ToString();
                                labDescripcion = libre_abordo;
                            }
                        }

                        #region Determinar el tipo de la compra
                        var tipoCompra = "";

                        if (rptOrdenCompraPartidas[0].num_requisicion > 0)
                        {
                            var numeroRequisicion = rptOrdenCompraPartidas[0].num_requisicion;
                            if (compraSIGOPLAN != null)
                            {
                                var registroRequisicionSIGOPLAN = _context.tblCom_Req.FirstOrDefault(x => x.estatusRegistro && x.cc == compraSIGOPLAN.cc && x.numero == numeroRequisicion);

                                if (registroRequisicionSIGOPLAN != null)
                                {
                                    tipoCompra = registroRequisicionSIGOPLAN.consigna == true ? "CONSIGNA" : "";
                                }
                            }
                        }
                        #endregion

                        #region SE OBTIENE LISTADO DE RETENCIONES DE LA COMPRA
                        List<RetencionInfoDTO> lstRetencionesDTO = new List<RetencionInfoDTO>();
                        decimal totalRetencion = 0;

                        if (compraSIGOPLAN != null)
                        {
                            var lstRetencionesEK = consultaCheckProductivo(
                                string.Format(@"SELECT t2.id_cpto, t1.desc_ret, t2.importe
                                                    FROM DBA.so_retenciones AS t1
                                                    INNER JOIN so_ordenc_retenciones AS t2 ON t2.id_cpto = t1.id_cpto
                                                        WHERE t2.cc = '{0}' AND t2.numero = {1}", compraSIGOPLAN.cc, compraSIGOPLAN.numero));
                            if (lstRetencionesEK != null)
                                lstRetencionesEK = (List<dynamic>)lstRetencionesEK.ToObject<List<dynamic>>();

                            if (lstRetencionesEK != null)
                            {
                                foreach (var item in lstRetencionesEK)
                                {
                                    var objRetencionDTO = new RetencionInfoDTO();
                                    objRetencionDTO.id_cpto = item.id_cpto;
                                    objRetencionDTO.desc_ret = item.desc_ret;
                                    objRetencionDTO.importe = item.importe;
                                    totalRetencion += Convert.ToDecimal(objRetencionDTO.importe);
                                    lstRetencionesDTO.Add(objRetencionDTO);
                                }
                            }
                        }
                        #endregion

                        var rptOrdenCompraInfo = new rptOrdenCompraInfoDTO
                        {
                            folioOrdenCompra = (string)oc[0].cc.Value + "-" + fillNo(((int)oc[0].numero.Value).ToString(), 6),
                            fechaHoy = DateTime.Now.Date.ToShortDateString(),
                            provNumero = ((int)oc[0].proveedor.Value).ToString(),
                            provNombre = (string)oc[0].provNombre.Value,
                            provLugar = (string)oc[0].provLugar.Value,
                            provTelefono = (string)oc[0].provTelefono.Value,
                            provFax = (string)oc[0].provFax.Value,
                            labNumero = labNumero, //labNumero = ((int)oc[0].libre_abordo.Value).ToString(),
                            labDescripcion = labDescripcion, //labDescripcion = libre_abordo,
                            cc = (string)oc[0].cc.Value,
                            ccDescripcion = (string)oc[0].ccDescripcion.Value,
                            compradorNumero = ((int)oc[0].comprador.Value).ToString(),
                            compradorNombre = (string)oc[0].compradorNombre.Value,
                            fechaOrdenCompra = ((DateTime)oc[0].fecha.Value).ToShortDateString(),
                            folioRequisicion = (string)oc[0].cc.Value + "-" + fillNo(((int)part[0].num_requisicion.Value).ToString(), 6),
                            comentarios = (string)oc[0].comentarios.Value,

                            facturar = "GRUPO CONSTRUCCIONES PLANIFICADAS SA DE CV",
                            direccion = (vSesiones.sesionEmpresaActual == 1 || vSesiones.sesionEmpresaActual == 4) ? "PERIFERICO PTE 770 COL. EMILIANO ZAPATA" : "CAMINO A LAS GRAVERAS S/N COL. LA MANGA C.P. 83220",
                            rfc = "GCP800324FJ1",

                            embarquese = (string)oc[0].embarquese.Value,
                            subTotal = (Convert.ToDecimal(oc[0].sub_total.Value, CultureInfo.InvariantCulture)).ToString("C2") + " " + (string)oc[0].monedaDesc.Value,
                            iva = (Convert.ToDecimal(oc[0].iva.Value, CultureInfo.InvariantCulture)).ToString("C2") + " " + (string)oc[0].monedaDesc.Value,
                            total = (Convert.ToDecimal(oc[0].sub_total.Value, CultureInfo.InvariantCulture) + Convert.ToDecimal(oc[0].iva.Value, CultureInfo.InvariantCulture)).ToString("C2") + " " + (string)oc[0].monedaDesc.Value,
                            elaboro = (string)oc[0].compradorNombre.Value,
                            reviso = (string)oc[0].voboNombre.Value,
                            autorizo = oc[0].autorizoNombre != null ? (string)oc[0].autorizoNombre.Value : "",
                            tipoCompra = tipoCompra,
                            pago = rptOrdenCompraPago,
                            partidas = rptOrdenCompraPartidas,
                            CFDI = compraSIGOPLAN != null ? compraSIGOPLAN.CFDI : "G03 (Gastos en general)",
                            fechaVencimientoString = compraSIGOPLAN != null ? compraSIGOPLAN.fecha_autoriza != null ? ((DateTime)compraSIGOPLAN.fecha_autoriza).AddDays(compraSIGOPLAN.tiempoEntregaDias).ToShortDateString() : "" : "",
                            lstRetencionesDTO = lstRetencionesDTO,
                            totalRetencion = totalRetencion.ToString("C2"),
                            totalFinal = ((Convert.ToDecimal(oc[0].sub_total.Value) + Convert.ToDecimal(oc[0].iva.Value)) - totalRetencion).ToString("C2")
                        };

                        return rptOrdenCompraInfo;
                    }
                    else
                    {
                        return new rptOrdenCompraInfoDTO();
                    }
                    #endregion
                }
                else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                {
                    #region Compras Perú
                    if (HttpContext.Current.Session["servicioCompra"] != null && string.IsNullOrEmpty(PERU_tipoCompra))
                    {
                        if (!(bool)HttpContext.Current.Session["servicioCompra"]) //Vista Generar Compra
                        {
                            PERU_tipoCompra = "RQ";
                        }
                        else //Vista Generar Compra Servicio
                        {
                            PERU_tipoCompra = "RS";
                        }
                    }

                    var registroCompra = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.estatusRegistro && x.cc == cc && x.numero == numero && x.PERU_tipoCompra == PERU_tipoCompra);
                    var listaDetalle = _context.tblCom_OrdenCompraDet.Where(x => x.estatusRegistro && x.idOrdenCompra == registroCompra.id).ToList();
                    string signoMoneda = "";
                    var monedaDesc = registroCompra.moneda == "4" ? "MN" : "ME";
                    switch (registroCompra.moneda)
                    {
                        case "1":
                            monedaDesc = "MXN";
                            signoMoneda = "$";
                            break;
                        case "2":
                            monedaDesc = "USD";
                            signoMoneda = "$";
                            break;
                        case "3":
                            monedaDesc = "€";
                            signoMoneda = "";
                            break;
                        case "4":
                            monedaDesc = "";
                            signoMoneda = "S/";
                            break;
                    }

                    var listaInsumosPERU = new List<MAEART>();
                    var listaProveedores = new List<MAEPROV>();
                    var autorizoNombre = "";
                    var facturar = "";
                    var direccion = "";
                    var rfc = "";

                    var comprador = _context.tblP_Usuario.FirstOrDefault(x => x.id == registroCompra.compradorSIGOPLAN);
                    var compradorNombre = comprador == null ? "" : comprador.nombre + " " + comprador.apellidoPaterno + " " + comprador.apellidoMaterno;
                    var labNumero = ((int)registroCompra.idLibreAbordo).ToString();
                    var labDescripcion = "";
                    var PERU_formaPago = "";

                    using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                    {
                        listaInsumosPERU = _starsoft.MAEART.ToList();
                        listaProveedores = _starsoft.MAEPROV.ToList();

                        if (PERU_tipoCompra == "RQ")
                        {
                            var registroCompraStarsoft = _starsoft.COMOVC.ToList().FirstOrDefault(x => x.OC_CNUMORD == registroCompra.numero.ToString("D13"));

                            autorizoNombre = registroCompraStarsoft.NOMBRE_USUARIO;
                            facturar = registroCompraStarsoft.OC_CFACNOMBRE;
                            direccion = registroCompraStarsoft.OC_CFACDIREC;
                            rfc = registroCompraStarsoft.OC_CFACRUC;
                            //compradorNombre = _starsoft.RESPONSABLECMP.FirstOrDefault(x => x.RESPONSABLE_CODIGO == registroCompraStarsoft.OC_CSOLICT).RESPONSABLE_NOMBRE;
                            PERU_formaPago = registroCompraStarsoft.COD_FP + " (" + _starsoft.FORMA_PAGO.Where(x => x.COD_FP == registroCompraStarsoft.COD_FP).Select(x => x.DES_FP).FirstOrDefault() + ")";
                        }
                        else if (PERU_tipoCompra == "RS")
                        {
                            var registroCompraStarsoft = _starsoft.COMOVC_S.ToList().FirstOrDefault(x => x.OC_CNUMORD == registroCompra.numero.ToString("D13"));

                            autorizoNombre = registroCompraStarsoft.NOMBRE_USUARIO;
                            facturar = registroCompraStarsoft.OC_CFACNOMBRE;
                            direccion = registroCompraStarsoft.OC_CFACDIREC;
                            rfc = registroCompraStarsoft.OC_CFACRUC;
                            //compradorNombre = _starsoft.RESPONSABLECMP.FirstOrDefault(x => x.RESPONSABLE_CODIGO == registroCompraStarsoft.OC_CSOLICT).RESPONSABLE_NOMBRE;
                            PERU_formaPago = registroCompraStarsoft.COD_FP + " (" + _starsoft.FORMA_PAGO.Where(x => x.COD_FP == registroCompraStarsoft.COD_FP).Select(x => x.DES_FP).FirstOrDefault() + ")";
                        }

                        labDescripcion = _starsoft.TABALM.ToList().FirstOrDefault(x => x.TAALMA == ((int)registroCompra.idLibreAbordo).ToString("D2")).TADESCRI;
                    }

                    List<rptOrdenCompraPartidasDTO> rptOrdenCompraPartidas = new List<rptOrdenCompraPartidasDTO>();

                    foreach (var p in listaDetalle)
                    {
                        rptOrdenCompraPartidas.Add(new rptOrdenCompraPartidasDTO
                        {
                            partida = p.partida.ToString(),
                            insumoNumero = p.insumo.ToString("D11"),
                            insumoDescripcion = listaInsumosPERU.Where(x => x.ACODIGO == ("0" + p.insumo)).Select(x => x.ADESCRI).FirstOrDefault() + " " + p.partidaDescripcion,
                            areaCuenta = p.noEconomico,
                            fechaEntrega = ((DateTime)p.fecha_entrega).ToShortDateString(),
                            cantidad = (p.cantidad).ToString("C2").Replace("$", "") + " " + listaInsumosPERU.Where(x => x.ACODIGO == ("0" + p.insumo)).Select(x => x.AUNIDAD).FirstOrDefault(),
                            precioUnitario = (!string.IsNullOrEmpty(signoMoneda) ? signoMoneda + " " : "") + p.precio.ToString("N2") + (!string.IsNullOrEmpty(monedaDesc) ? " " + monedaDesc : ""),
                            importe = (!string.IsNullOrEmpty(signoMoneda) ? signoMoneda + " " : "") + p.importe.ToString("N2") + (!string.IsNullOrEmpty(monedaDesc) ? " " + monedaDesc : "")
                        });
                    }

                    var voboNombre = "";

                    if (registroCompra.vobo > 0)
                    {
                        var voboEK = consultaCheckProductivoConstruplan(
                            string.Format(@"SELECT * FROM empleados WHERE empleado = {0}", registroCompra.vobo)
                        );

                        if (voboEK != null)
                        {
                            voboNombre = ((List<dynamic>)voboEK.ToObject<List<dynamic>>())[0].descripcion;
                        }
                    }

                    var provNombre = listaProveedores.Where(x => x.PRVCCODIGO == registroCompra.PERU_proveedor).Select(x => x.PRVCNOMBRE).FirstOrDefault();
                    decimal totalRetencion = 0;
                    decimal totalFinal = 0;
                    var rptOrdenCompraInfo = new rptOrdenCompraInfoDTO
                    {
                        folioOrdenCompra = registroCompra.cc + "-" + registroCompra.numero.ToString("D11"),
                        fechaHoy = DateTime.Now.Date.ToShortDateString(),
                        provNumero = registroCompra.PERU_proveedor,
                        provNombre = provNombre,
                        provLugar = "",
                        provTelefono = "",
                        provFax = "",
                        labNumero = labNumero,
                        labDescripcion = labDescripcion,
                        cc = registroCompra.cc,
                        ccDescripcion = _context.tblP_CC.Where(x => x.cc == registroCompra.cc).Select(x => x.descripcion).FirstOrDefault(),
                        compradorNumero = registroCompra.compradorEnkontrol.ToString(),
                        compradorNombre = compradorNombre,
                        fechaOrdenCompra = registroCompra.fecha.ToShortDateString(),
                        folioRequisicion = registroCompra.cc + "-" + fillNo(listaDetalle[0].num_requisicion.ToString(), 6),
                        comentarios = registroCompra.comentarios,

                        facturar = facturar,
                        direccion = direccion,
                        rfc = rfc,

                        embarquese = "",
                        subTotal = (!string.IsNullOrEmpty(signoMoneda) ? signoMoneda + " " : "") + registroCompra.sub_total.ToString("N2") + (!string.IsNullOrEmpty(monedaDesc) ? " " + monedaDesc : ""),
                        iva = (!string.IsNullOrEmpty(signoMoneda) ? signoMoneda + " " : "") + registroCompra.iva.ToString("N2") + (!string.IsNullOrEmpty(monedaDesc) ? " " + monedaDesc : ""),
                        total = (!string.IsNullOrEmpty(signoMoneda) ? signoMoneda + " " : "") + registroCompra.total.ToString("N2") + (!string.IsNullOrEmpty(monedaDesc) ? " " + monedaDesc : ""),
                        elaboro = compradorNombre,
                        reviso = voboNombre,
                        autorizo = autorizoNombre,

                        pago = new List<rptOrdenCompraFormaPagoDTO>(),
                        partidas = rptOrdenCompraPartidas.OrderBy(x => x.partida).ToList(),
                        CFDI = "",
                        PERU_formaPago = PERU_formaPago,
                        PERU_tipoCompra = PERU_tipoCompra == "RQ" ? "ORDEN DE COMPRA" : PERU_tipoCompra == "RS" ? "ORDEN DE SERVICIO" : "",
                        fechaVencimientoString = registroCompra != null ? registroCompra.fecha_autoriza != null ? ((DateTime)registroCompra.fecha_autoriza).AddDays(registroCompra.tiempoEntregaDias).ToShortDateString() : "" : "",
                        totalRetencion = totalRetencion.ToString("C2").Replace("$", "S/"),
                        totalFinal = totalFinal.ToString("C2").Replace("$", "S/")
                    };

                    return rptOrdenCompraInfo;
                    #endregion
                }
                else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
                {
                    #region Compras Colombia
                    var ordenCompraEK = consultaCheckProductivo(
                        string.Format(@"SELECT 
                                        oc.*, 
                                        comp.descripcion AS compradorNombre, 
                                        cc.descripcion AS ccDescripcion, 
                                        aut.descripcion AS autorizoNombre, 
                                        prov.nombre AS provNombre, 
                                        prov.ciudad AS provLugar, 
                                        prov.telefono1 AS provTelefono, 
                                        prov.fax AS provFax, 
                                        mon.moneda AS monedaDesc, 
                                        vob.descripcion AS voboNombre 
                                    FROM so_orden_compra oc 
                                        INNER JOIN empleados comp ON comp.empleado = oc.comprador 
                                        LEFT JOIN empleados aut ON aut.empleado = oc.autorizo 
                                        INNER JOIN empleados vob ON vob.empleado = oc.vobo 
                                        INNER JOIN cc cc ON cc.cc = oc.cc 
                                        INNER JOIN sp_proveedores prov ON oc.proveedor = prov.numpro 
                                        INNER JOIN moneda mon ON oc.moneda = mon.clave 
                                    WHERE oc.cc = '{0}' AND oc.numero = {1}", cc, numero));

                    if (ordenCompraEK != null)
                    {
                        var partidasEK = consultaCheckProductivo(
                        string.Format(@"SELECT 
                                        d.*, 
                                        i.descripcion AS insumoDesc, 
                                        i.unidad, 
                                        i.cancelado, 
                                        (
                                            SELECT 
                                                l.descripcion 
                                            FROM so_orden_det_linea l 
                                            WHERE l.cc = d.cc AND l.numero = d.numero AND l.partida = d.partida 
                                        ) AS partidaDesc 
                                    FROM so_orden_compra_det d 
                                        INNER JOIN insumos i ON d.insumo = i.insumo 
                                    WHERE d.cc = '{0}' AND d.numero = {1} 
                                    ORDER BY d.partida", cc, numero));

                        var pagoEK = consultaCheckProductivo(
                        string.Format(@"SELECT 
                                        pag.* 
                                    FROM so_orden_compra_pago pag 
                                    WHERE pag.cc = '{0}' AND pag.numero = {1} 
                                    ORDER BY pag.partida", cc, numero));

                        List<dynamic> oc = (List<dynamic>)ordenCompraEK.ToObject<List<dynamic>>();
                        List<dynamic> part = (List<dynamic>)partidasEK.ToObject<List<dynamic>>();
                        List<dynamic> pag = new List<dynamic>();

                        if (pagoEK != null)
                        {
                            pag = (List<dynamic>)pagoEK.ToObject<List<dynamic>>();
                        }

                        var almacenes = (List<dynamic>)consultaCheckProductivo(
                        string.Format(@"SELECT 
                                        * 
                                    FROM si_almacen")).ToObject<List<dynamic>>();

                        var libreAbordo = (List<dynamic>)consultaCheckProductivo(
                        string.Format(@"SELECT 
                                        * 
                                    FROM so_libre_abordo")).ToObject<List<dynamic>>();

                        string libre_abordo = "";
                        int libreAbordoID = (int)oc[0].libre_abordo.Value;

                        List<rptOrdenCompraPartidasDTO> rptOrdenCompraPartidas = new List<rptOrdenCompraPartidasDTO>();

                        foreach (var p in part)
                        {
                            var area = p.area.Value != null ? (int)p.area.Value : 0;
                            var cuenta = p.cuenta.Value != null ? (int)p.cuenta.Value : 0;

                            rptOrdenCompraPartidas.Add(new rptOrdenCompraPartidasDTO
                            {
                                partida = ((int)p.partida.Value).ToString(),
                                insumoNumero = ((int)p.insumo.Value).ToString(),
                                insumoDescripcion = (string)p.insumoDesc.Value + "\n " + (string)p.partidaDesc.Value,
                                areaCuenta = area + "-" + cuenta,
                                fechaEntrega = ((DateTime)p.fecha_entrega.Value).ToShortDateString(),
                                cantidad = ((decimal)p.cantidad.Value).ToString("C2").Replace("$", "") + " " + (string)p.unidad.Value,
                                precioUnitario = ((decimal)p.precio.Value).ToString("C2").Replace("$", "COP") + " " + (string)oc[0].monedaDesc.Value,
                                importe = ((decimal)p.importe.Value).ToString("C2").Replace("$", "COP"),
                                num_requisicion = (int)p.num_requisicion
                            });
                        }

                        List<rptOrdenCompraFormaPagoDTO> rptOrdenCompraPago = new List<rptOrdenCompraFormaPagoDTO>();

                        foreach (var p in pag)
                        {
                            rptOrdenCompraPago.Add(new rptOrdenCompraFormaPagoDTO
                            {
                                numero = ((int)p.partida.Value).ToString(),
                                dias = ((int)p.dias_pago.Value).ToString(),
                                movimiento = (string)p.comentarios.Value,
                                porcentaje = ((decimal)p.porcentaje.Value).ToString() + "%",
                                importe = "COP" + ((decimal)p.importe.Value).ToString()
                            });
                        }

                        var compraSIGOPLAN = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.cc == cc && x.numero == numero);
                        var labNumero = "";
                        var labDescripcion = "";

                        if (compraSIGOPLAN != null)
                        {
                            if (vSesiones.sesionEmpresaActual != (int)EmpresaEnum.Colombia)
                            {
                                if (compraSIGOPLAN.idLibreAbordo != null && compraSIGOPLAN.idLibreAbordo > 0)
                                {
                                    var almacenEK = ((List<dynamic>)consultaCheckProductivo(
                                        string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", compraSIGOPLAN.idLibreAbordo)
                                    ).ToObject<List<dynamic>>())[0];

                                    labNumero = compraSIGOPLAN.idLibreAbordo.ToString();
                                    labDescripcion = (string)almacenEK.descripcion;
                                }
                                else
                                {
                                    labNumero = ((int)oc[0].libre_abordo.Value).ToString();
                                    labDescripcion = libre_abordo;
                                }
                            }
                        }
                        else
                        {
                            labNumero = ((int)oc[0].libre_abordo.Value).ToString();
                            labDescripcion = libre_abordo;
                        }


                        #region Determinar el tipo de la compra
                        var tipoCompra = "";

                        if (rptOrdenCompraPartidas[0].num_requisicion > 0)
                        {
                            var numeroRequisicion = rptOrdenCompraPartidas[0].num_requisicion;
                            if (compraSIGOPLAN != null)
                            {
                                var registroRequisicionSIGOPLAN = _context.tblCom_Req.FirstOrDefault(x => x.estatusRegistro && x.cc == compraSIGOPLAN.cc && x.numero == numeroRequisicion);

                                if (registroRequisicionSIGOPLAN != null)
                                {
                                    tipoCompra = registroRequisicionSIGOPLAN.consigna == true ? "CONSIGNA" : "";
                                }
                            }
                        }
                        #endregion

                        #region SE OBTIENE LISTADO DE RETENCIONES DE LA COMPRA

                        var lstRetencionesEK = consultaCheckProductivo(
                                string.Format(@"SELECT t2.id_cpto, t1.desc_ret, t2.importe
                                                    FROM DBA.so_retenciones AS t1
                                                    INNER JOIN so_ordenc_retenciones AS t2 ON t2.id_cpto = t1.id_cpto
                                                        WHERE t2.cc = '{0}' AND t2.numero = {1}", cc, numero));


                        if (lstRetencionesEK != null)
                            lstRetencionesEK = (List<dynamic>)lstRetencionesEK.ToObject<List<dynamic>>();

                        List<RetencionInfoDTO> lstRetencionesDTO = new List<RetencionInfoDTO>();
                        RetencionInfoDTO objRetencionDTO = new RetencionInfoDTO();
                        decimal totalRetencion = 0;
                        if (lstRetencionesEK != null)
                        {
                            foreach (var item in lstRetencionesEK)
                            {
                                objRetencionDTO = new RetencionInfoDTO();
                                objRetencionDTO.id_cpto = item.id_cpto;
                                objRetencionDTO.desc_ret = item.desc_ret;
                                objRetencionDTO.importe = item.importe;
                                totalRetencion += Convert.ToDecimal(objRetencionDTO.importe);
                                lstRetencionesDTO.Add(objRetencionDTO);
                            }
                        }
                        #endregion

                        var rptOrdenCompraInfo = new rptOrdenCompraInfoDTO
                        {
                            folioOrdenCompra = (string)oc[0].cc.Value + "-" + fillNo(((int)oc[0].numero.Value).ToString(), 6),
                            fechaHoy = DateTime.Now.Date.ToShortDateString(),
                            provNumero = ((int)oc[0].proveedor.Value).ToString(),
                            provNombre = (string)oc[0].provNombre.Value,
                            provLugar = (string)oc[0].provLugar.Value,
                            provTelefono = (string)oc[0].provTelefono.Value,
                            provFax = (string)oc[0].provFax.Value,
                            labNumero = labNumero, //labNumero = ((int)oc[0].libre_abordo.Value).ToString(),
                            labDescripcion = labDescripcion, //labDescripcion = libre_abordo,
                            cc = (string)oc[0].cc.Value,
                            ccDescripcion = (string)oc[0].ccDescripcion.Value,
                            compradorNumero = ((int)oc[0].comprador.Value).ToString(),
                            compradorNombre = (string)oc[0].compradorNombre.Value,
                            fechaOrdenCompra = ((DateTime)oc[0].fecha.Value).ToShortDateString(),
                            folioRequisicion = (string)oc[0].cc.Value + "-" + fillNo(((int)part[0].num_requisicion.Value).ToString(), 6),
                            comentarios = (string)oc[0].comentarios.Value,

                            facturar = "GRUPO CONSTRUCCIONES PLANIFICADAS SA DE CV",
                            direccion = (vSesiones.sesionEmpresaActual == 1 || vSesiones.sesionEmpresaActual == 4) ? "PERIFERICO PTE 770 COL. EMILIANO ZAPATA" : "CAMINO A LAS GRAVERAS S/N COL. LA MANGA C.P. 83220",
                            rfc = "GCP800324FJ1",

                            embarquese = (string)oc[0].embarquese.Value,
                            subTotal = (Convert.ToDecimal(oc[0].sub_total.Value, CultureInfo.InvariantCulture)).ToString("C2").Replace("$", "COP") + " " + (string)oc[0].monedaDesc.Value,
                            iva = (Convert.ToDecimal(oc[0].iva.Value, CultureInfo.InvariantCulture)).ToString("C2").Replace("$", "COP") + " " + (string)oc[0].monedaDesc.Value,
                            total = (Convert.ToDecimal(oc[0].sub_total.Value, CultureInfo.InvariantCulture) + Convert.ToDecimal(oc[0].iva.Value, CultureInfo.InvariantCulture)).ToString("C2").Replace("$", "COP") + " " + (string)oc[0].monedaDesc.Value,
                            elaboro = (string)oc[0].compradorNombre.Value,
                            reviso = (string)oc[0].voboNombre.Value,
                            autorizo = oc[0].autorizoNombre != null ? (string)oc[0].autorizoNombre.Value : "",
                            tipoCompra = tipoCompra,
                            pago = rptOrdenCompraPago,
                            partidas = rptOrdenCompraPartidas,
                            CFDI = compraSIGOPLAN != null ? compraSIGOPLAN.CFDI : "G03 (Gastos en general)",
                            fechaVencimientoString = compraSIGOPLAN != null ? compraSIGOPLAN.fecha_autoriza != null ? ((DateTime)compraSIGOPLAN.fecha_autoriza).AddDays(compraSIGOPLAN.tiempoEntregaDias).ToShortDateString() : "" : "",
                            lstRetencionesDTO = lstRetencionesDTO,
                            totalRetencion = totalRetencion.ToString("C2").Replace("$", "COP"),
                            totalFinal = ((Convert.ToDecimal(oc[0].sub_total.Value) + Convert.ToDecimal(oc[0].iva.Value)) - totalRetencion).ToString("C2").Replace("$", "COP")
                        };

                        return rptOrdenCompraInfo;
                    }
                    else
                    {
                        return new rptOrdenCompraInfoDTO();
                    }
                    #endregion
                }
                else
                    return new rptOrdenCompraInfoDTO();
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                return new rptOrdenCompraInfoDTO();
            }
        }
        public rptOrdenCompraInfoDTO getOrdenCompraInternaRpt(string cc, int numero)
        {
            try
            {
                var compraSIGOPLAN = _context.tblCom_OrdenCompra_Interna.FirstOrDefault(x => x.cc == cc && x.numero == numero);
                var compraDetSIGOPLAN = _context.tblCom_OrdenCompraDet_Interna.Where(x => x.cc == cc && x.numero == numero).ToList();

                if (true)
                {

                    string libre_abordo = "";


                    List<rptOrdenCompraPartidasDTO> rptOrdenCompraPartidas = new List<rptOrdenCompraPartidasDTO>();
                    var moneda = compraSIGOPLAN.moneda == "1" ? "MN" : compraSIGOPLAN.moneda == "2" ? "USD" : compraSIGOPLAN.moneda == "3" ? "EUR" : "";
                    foreach (var p in compraDetSIGOPLAN)
                    {
                        var area = p.area != null ? (int)p.area : 0;
                        var cuenta = p.cuenta != null ? (int)p.cuenta : 0;
                        var insumo = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM insumos where insumo = {0}", p.insumo)).ToObject<List<dynamic>>();

                        rptOrdenCompraPartidas.Add(new rptOrdenCompraPartidasDTO
                        {
                            partida = ((int)p.partida).ToString(),
                            insumoNumero = ((int)p.insumo).ToString(),
                            insumoDescripcion = (string)insumo[0].descripcion.Value + "\n " + (string)p.partidaDescripcion,
                            areaCuenta = area + "-" + cuenta,
                            fechaEntrega = ((DateTime)p.fecha_entrega.Value).ToShortDateString(),
                            cantidad = ((decimal)p.cantidad).ToString("C2").Replace("$", "") + " " + (string)insumo[0].unidad.Value,
                            precioUnitario = ((decimal)p.precio).ToString("C2") + " " + (string)moneda,
                            importe = ((decimal)p.importe).ToString("C2")
                        });
                    }




                    var labNumero = "";
                    var labDescripcion = "";
                    var comprador = ufs.getUsuarioService().getUserEk(compraSIGOPLAN.compradorSIGOPLAN);
                    var retenciones = _context.tblCom_OrdenCompra_Retenciones_Interna.Where(x => x.cc == cc && x.numero == numero).ToList();
                    var prov = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM sp_proveedores where numpro = {0}", compraSIGOPLAN.proveedor)).ToObject<List<dynamic>>();
                    var ccData = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM cc where cc = '{0}'", compraSIGOPLAN.cc)).ToObject<List<dynamic>>();
                    var empData = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM empleados where empleado = {0}", comprador.empleado)).ToObject<List<dynamic>>();
                    var rptOrdenCompraInfo = new rptOrdenCompraInfoDTO
                    {
                        folioOrdenCompra = cc + "-" + fillNo(((int)numero).ToString(), 6),
                        fechaHoy = DateTime.Now.Date.ToShortDateString(),
                        provNumero = "" + compraSIGOPLAN.proveedor,
                        provNombre = (string)prov[0].nombre.Value,
                        provLugar = (string)prov[0].direccion.Value ?? "",
                        provTelefono = (string)prov[0].telefono1.Value ?? "",
                        provFax = (string)prov[0].fax.Value ?? "",
                        labNumero = labNumero, //labNumero = ((int)oc[0].libre_abordo.Value).ToString(),
                        labDescripcion = labDescripcion, //labDescripcion = libre_abordo,
                        cc = cc,
                        ccDescripcion = (string)ccData[0].descripcion.Value,
                        compradorNumero = "" + comprador.empleado,
                        compradorNombre = (string)empData[0].descripcion.Value,
                        fechaOrdenCompra = compraSIGOPLAN.fecha.ToShortDateString(),
                        folioRequisicion = "N/A",
                        comentarios = compraSIGOPLAN.comentarios,

                        facturar = "GRUPO CONSTRUCCIONES PLANIFICADAS SA DE CV",
                        direccion = (vSesiones.sesionEmpresaActual == 1 || vSesiones.sesionEmpresaActual == 4) ? "PERIFERICO PTE 770 COL. EMILIANO ZAPATA" : "CAMINO A LAS GRAVERAS S/N COL. LA MANGA C.P. 83220",
                        rfc = "GCP800324FJ1",

                        embarquese = "",
                        subTotal = (Convert.ToDecimal(compraSIGOPLAN.sub_total, CultureInfo.InvariantCulture)).ToString("C2") + " " + moneda,
                        iva = (Convert.ToDecimal(compraSIGOPLAN.iva, CultureInfo.InvariantCulture)).ToString("C2") + " " + moneda,
                        total = (
                            Convert.ToDecimal(compraSIGOPLAN.sub_total, CultureInfo.InvariantCulture) +
                            Convert.ToDecimal(compraSIGOPLAN.iva, CultureInfo.InvariantCulture) -
                            Convert.ToDecimal(retenciones.Sum(x => x.importe), CultureInfo.InvariantCulture)
                        ).ToString("C2") + " " + moneda,
                        elaboro = (string)empData[0].descripcion.Value,
                        reviso = "",
                        autorizo = "",

                        pago = new List<rptOrdenCompraFormaPagoDTO>(),
                        partidas = rptOrdenCompraPartidas,
                        CFDI = compraSIGOPLAN != null ? compraSIGOPLAN.CFDI : "G03 (Gastos en general)",
                        fechaVencimientoString = compraSIGOPLAN != null ? compraSIGOPLAN.fecha_autoriza != null ? ((DateTime)compraSIGOPLAN.fecha_autoriza).AddDays(compraSIGOPLAN.tiempoEntregaDias).ToShortDateString() : "" : ""
                    };

                    return rptOrdenCompraInfo;
                }
                else
                {
                    return new rptOrdenCompraInfoDTO();
                }
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                return new rptOrdenCompraInfoDTO();
            }
        }
        public Dictionary<string, object> puedeCancelar()
        {
            var result = new Dictionary<string, object>();

            try
            {
                var usuario = vSesiones.sesionUsuarioDTO;
                var relUser = ufs.getUsuarioService().getUserEk(usuario.id);
                var listCompradorAdmin = _context.tblCom_Comprador_Admin.Select(x => x.empleado).ToList();

                var data = relUser.empleado == 1 || listCompradorAdmin.Contains(relUser.empleado);

                result.Add("puedeCancelar", data);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return result;
        }

        public Dictionary<string, object> cancelarCompra(string cc, int numero)
        {
            var result = new Dictionary<string, object>();

            try
            {
                var usuario = vSesiones.sesionUsuarioDTO;
                var relUser = ufs.getUsuarioService().getUserEk(usuario.id);

                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {
                    case EmpresaEnum.Peru:
                        {
                            #region PERÚ
                            var PERU_tipoCompra = "";
                            if (HttpContext.Current.Session["servicioCompra"] != null)
                            {
                                if (!(bool)HttpContext.Current.Session["servicioCompra"]) //Vista Generar Compra
                                {
                                    PERU_tipoCompra = "RQ";
                                }
                                else //Vista Generar Compra Servicio
                                {
                                    PERU_tipoCompra = "RS";
                                }
                            }
                            if (HttpContext.Current.Session["servicioCompraCuadroComparativo"] != null)
                            {
                                if (!(bool)HttpContext.Current.Session["servicioCompraCuadroComparativo"]) //Vista Generar Compra
                                {
                                    PERU_tipoCompra = "RQ";
                                }
                                else //Vista Generar Compra Servicio
                                {
                                    PERU_tipoCompra = "RS";
                                }
                            }

                            using (var transaccion = _context.Database.BeginTransaction())
                            {
                                using (var ctxStarsoft = new MainContextPeruStarSoft003BDCOMUN())
                                {
                                    using (var transaccionStarsoft = ctxStarsoft.Database.BeginTransaction())
                                    {
                                        try
                                        {
                                            var puedeCancelarCompra = puedeCancelar();
                                            if (!(bool)puedeCancelarCompra[SUCCESS])
                                            {
                                                throw new Exception("No tiene permiso para cancelar OC");
                                            }

                                            var compraSigoplan = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.cc == cc && x.numero == numero && x.PERU_tipoCompra == PERU_tipoCompra && x.estatusRegistro);
                                            if (compraSigoplan != null)
                                            {
                                                compraSigoplan.estatus = "C";
                                                compraSigoplan.empleadoUltimaAccion = vSesiones.sesionUsuarioDTO.id;
                                                compraSigoplan.fechaUltimaAccion = DateTime.Now;
                                                compraSigoplan.tipoUltimaAccion = TipoUltimaAccionEnum.Cancelacion;
                                                _context.SaveChanges();

                                                var compraSigoplanDet = _context.tblCom_OrdenCompraDet.Where(x => x.idOrdenCompra == compraSigoplan.id && x.estatusRegistro).ToList();
                                                foreach (var item in compraSigoplanDet)
                                                {
                                                    item.cant_canc = item.cant_recibida;
                                                    item.imp_canc = item.imp_recibido;
                                                    item.cant_recibida = 0;
                                                    item.imp_recibido = 0;
                                                }
                                                _context.SaveChanges();

                                                var num_req = compraSigoplanDet.First().num_requisicion;
                                                var requi = _context.tblCom_Req.FirstOrDefault(x => x.cc == cc && x.numero == num_req && x.PERU_tipoRequisicion == PERU_tipoCompra && x.estatusRegistro);
                                                if (requi != null)
                                                {
                                                    requi.stEstatus = " ";
                                                    _context.SaveChanges();

                                                    var requiDet = _context.tblCom_ReqDet.Where(x => x.idReq == requi.id && x.estatusRegistro).ToList();
                                                    foreach (var item in requiDet)
                                                    {
                                                        var partidaOrdenCompra = compraSigoplanDet.FirstOrDefault(x => x.part_requisicion == item.partida);
                                                        if (partidaOrdenCompra != null)
                                                        {
                                                            item.cantOrdenada = item.cantOrdenada - partidaOrdenCompra.cantidad;
                                                        }
                                                    }
                                                    _context.SaveChanges();
                                                }

                                                if (PERU_tipoCompra == "RQ")
                                                {
                                                    var numOCStarsoft = compraSigoplan.numero.ToString("D13");
                                                    var ocStarsoft = ctxStarsoft.COMOVC.FirstOrDefault(x => x.OC_CNUMORD == numOCStarsoft && x.TipoDocumento == "OC");
                                                    ocStarsoft.OC_CSITORD = "06";
                                                    ctxStarsoft.SaveChanges();
                                                }
                                                if (PERU_tipoCompra == "RS")
                                                {
                                                    var numOCStarsoft = compraSigoplan.numero.ToString("D13");
                                                    var ocStarsoft = ctxStarsoft.COMOVC_S.FirstOrDefault(x => x.OC_CNUMORD == numOCStarsoft && x.TipoDocumento == "OS");
                                                    ocStarsoft.OC_CSITORD = "06";
                                                    ctxStarsoft.SaveChanges();
                                                }

                                                transaccion.Commit();
                                                transaccionStarsoft.Commit();
                                                result.Add(SUCCESS, true);

                                                SaveBitacora(0, (int)AccionEnum.ACTUALIZAR, compraSigoplan.id, JsonUtils.convertNetObjectToJson(compraSigoplan));
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            transaccionStarsoft.Rollback();
                                            transaccion.Rollback();
                                            throw new Exception(ex.Message);
                                        }
                                    }
                                }
                            }
                            #endregion
                            break;
                        }
                    case EmpresaEnum.Colombia:
                        {
                            #region COLOMBIA LISTO
                            using (var con = checkConexionProductivo())
                            using (var trans = con.BeginTransaction())
                            {
                                var count = 0;

                                var compra = (List<dynamic>)consultaCheckProductivo(
                                                    string.Format(@"SELECT * FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", cc, numero)
                                                ).ToObject<List<dynamic>>();

                                #region Validación para compras con facturas y/o pagos
                                if (Convert.ToDecimal(compra[0].total_fac) > 0 || Convert.ToDecimal(compra[0].total_pag) > 0)
                                {
                                    throw new Exception("No se puede cancelar compras con facturas o pagos.");
                                }
                                #endregion

                                #region Update Compra
                                var consulta = @"
                                    UPDATE DBA.so_orden_compra 
                                    SET 
                                        estatus = ?, 
                                        sub_total = ?, 
                                        iva = ?, 
                                        total = ?, 
                                        sub_tot_canc = ?, 
                                        iva_canc = ?, 
                                        total_canc = ? 
                                    WHERE cc = ? AND numero = ?";

                                using (var cmd = new OdbcCommand(consulta))
                                {
                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@estatus", OdbcType.Char).Value = "C";
                                    parameters.Add("@sub_total", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@iva", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@total", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@sub_tot_canc", OdbcType.Numeric).Value = compra[0].sub_total.Value;
                                    parameters.Add("@iva_canc", OdbcType.Numeric).Value = compra[0].iva.Value;
                                    parameters.Add("@total_canc", OdbcType.Numeric).Value = compra[0].total.Value;

                                    parameters.Add("@cc", OdbcType.Char).Value = cc;
                                    parameters.Add("@numero", OdbcType.Numeric).Value = numero;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;

                                    count += cmd.ExecuteNonQuery();
                                }

                                var compraSIGOPLAN = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.cc == cc && x.numero == numero);

                                if (compraSIGOPLAN != null)
                                {
                                    compraSIGOPLAN.estatus = "C";
                                    compraSIGOPLAN.sub_total = 0;
                                    compraSIGOPLAN.iva = 0;
                                    compraSIGOPLAN.total = 0;
                                    compraSIGOPLAN.empleadoUltimaAccion = relUser.empleado;
                                    compraSIGOPLAN.fechaUltimaAccion = DateTime.Now;
                                    compraSIGOPLAN.tipoUltimaAccion = TipoUltimaAccionEnum.Cancelacion;

                                    _context.Entry(compraSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                    _context.SaveChanges();
                                }
                                #endregion

                                var lstPartidasEK = consultaCheckProductivo(string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", cc, numero));

                                if (lstPartidasEK != null)
                                {
                                    var lstPartidas = (List<dynamic>)lstPartidasEK.ToObject<List<dynamic>>();

                                    #region Update Requisición
                                    var consultaUpdateRequisicion = @"
                                    UPDATE DBA.so_requisicion 
                                    SET 
                                        st_estatus = ? 
                                    WHERE cc = ? AND numero = ?";

                                    using (var cmd = new OdbcCommand(consultaUpdateRequisicion))
                                    {
                                        OdbcParameterCollection parameters = cmd.Parameters;

                                        parameters.Add("@st_estatus", OdbcType.Char).Value = " ";

                                        parameters.Add("@cc", OdbcType.Char).Value = cc;
                                        parameters.Add("@numero", OdbcType.Numeric).Value = (int)lstPartidas[0].num_requisicion;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;

                                        count += cmd.ExecuteNonQuery();
                                    }

                                    var requisicionSIGOPLAN = _context.tblCom_Req.Where(x => x.estatusRegistro && x.cc == cc).ToList().FirstOrDefault(x => x.numero == (int)lstPartidas[0].num_requisicion);

                                    if (requisicionSIGOPLAN != null)
                                    {
                                        requisicionSIGOPLAN.stEstatus = " ";

                                        _context.Entry(requisicionSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                        _context.SaveChanges();
                                    }
                                    #endregion

                                    foreach (var part in lstPartidas)
                                    {
                                        #region Update Partida Compra
                                        var consultaDet = @"UPDATE DBA.so_orden_compra_det 
                                                SET 
                                                    cantidad = ?, 
                                                    precio = ?, 
                                                    importe = ?, 
                                                    cant_canc = ?, 
                                                    imp_canc = ? 
                                                WHERE cc = ? AND numero = ? AND partida = ? AND insumo = ?";

                                        using (var cmd = new OdbcCommand(consultaDet))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@cantidad", OdbcType.Numeric).Value = 0;
                                            parameters.Add("@precio", OdbcType.Numeric).Value = 0;
                                            parameters.Add("@importe", OdbcType.Numeric).Value = 0;
                                            parameters.Add("@cant_canc", OdbcType.Numeric).Value = part.cantidad.Value;
                                            parameters.Add("@imp_canc", OdbcType.Numeric).Value = part.importe.Value;

                                            parameters.Add("@cc", OdbcType.Char).Value = cc;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = numero;
                                            parameters.Add("@partida", OdbcType.Numeric).Value = part.partida.Value;
                                            parameters.Add("@insumo", OdbcType.Numeric).Value = part.insumo.Value;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }

                                        var partidaCompraSIGOPLAN = _context.tblCom_OrdenCompraDet.Where(x => x.estatusRegistro && x.cc == cc && x.numero == numero).ToList().FirstOrDefault(x =>
                                            x.partida == (int)part.partida && x.insumo == (int)part.insumo
                                        );

                                        if (partidaCompraSIGOPLAN != null)
                                        {
                                            partidaCompraSIGOPLAN.cantidad = 0;
                                            partidaCompraSIGOPLAN.precio = 0;
                                            partidaCompraSIGOPLAN.importe = 0;
                                            partidaCompraSIGOPLAN.cant_canc = Convert.ToDecimal(part.cantidad, CultureInfo.InvariantCulture);
                                            partidaCompraSIGOPLAN.imp_canc = Convert.ToDecimal(part.importe, CultureInfo.InvariantCulture);

                                            _context.Entry(partidaCompraSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                            _context.SaveChanges();
                                        }
                                        #endregion

                                        #region Update Partida Requisición
                                        var partidaRequisicionEK = consultaCheckProductivo(
                                            string.Format(@"SELECT * FROM so_requisicion_det WHERE cc = '{0}' AND numero = {1} AND partida = {2}", cc, (int)part.num_requisicion, (int)part.part_requisicion)
                                        );

                                        if (partidaRequisicionEK != null)
                                        {
                                            var partidaRequisicion = (List<dynamic>)partidaRequisicionEK.ToObject<List<dynamic>>();

                                            var consultaUpdateReqDet = @"UPDATE DBA.so_requisicion_det 
                                                            SET 
                                                                cant_ordenada = ? 
                                                            WHERE cc = ? AND numero = ? AND partida = ?";

                                            using (var cmd = new OdbcCommand(consultaUpdateReqDet))
                                            {
                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                parameters.Add("@cant_ordenada", OdbcType.Numeric).Value = 0;

                                                parameters.Add("@cc", OdbcType.Char).Value = cc;
                                                parameters.Add("@numero", OdbcType.Numeric).Value = part.num_requisicion.Value;
                                                parameters.Add("@partida", OdbcType.Numeric).Value = part.part_requisicion.Value;

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;

                                                count += cmd.ExecuteNonQuery();
                                            }
                                        }

                                        if (requisicionSIGOPLAN != null)
                                        {
                                            var partidaRequisicionSIGOPLAN = _context.tblCom_ReqDet.Where(x => x.estatusRegistro && x.idReq == requisicionSIGOPLAN.id).ToList().FirstOrDefault(x =>
                                                x.partida == Convert.ToDecimal(part.part_requisicion, CultureInfo.InvariantCulture)
                                            );

                                            if (partidaRequisicionSIGOPLAN != null)
                                            {
                                                partidaRequisicionSIGOPLAN.cantOrdenada = 0;

                                                _context.Entry(partidaRequisicionSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                                _context.SaveChanges();
                                            }
                                        }
                                        #endregion
                                    }
                                }

                                if (count > 0)
                                {
                                    trans.Commit();
                                }
                            }

                            //result.Add("data", data);
                            result.Add(SUCCESS, true);
                            #endregion
                            break;
                        }
                    default:
                        {
                            #region MÉXICO
                            using (var con = checkConexionProductivo())
                            using (var trans = con.BeginTransaction())
                            {
                                var count = 0;

                                var compra = (List<dynamic>)consultaCheckProductivo(
                                                    string.Format(@"SELECT * FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", cc, numero)
                                                ).ToObject<List<dynamic>>();

                                #region Validación para compras con facturas y/o pagos
                                if (Convert.ToDecimal(compra[0].total_fac) > 0 || Convert.ToDecimal(compra[0].total_pag) > 0)
                                {
                                    throw new Exception("No se puede cancelar compras con facturas o pagos.");
                                }
                                #endregion

                                #region Update Compra
                                var consulta = @"
                                    UPDATE so_orden_compra 
                                    SET 
                                        estatus = ?, 
                                        sub_total = ?, 
                                        iva = ?, 
                                        total = ?, 
                                        sub_tot_canc = ?, 
                                        iva_canc = ?, 
                                        total_canc = ? 
                                    WHERE cc = ? AND numero = ?";

                                using (var cmd = new OdbcCommand(consulta))
                                {
                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@estatus", OdbcType.Char).Value = "C";
                                    parameters.Add("@sub_total", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@iva", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@total", OdbcType.Numeric).Value = 0;
                                    parameters.Add("@sub_tot_canc", OdbcType.Numeric).Value = compra[0].sub_total.Value;
                                    parameters.Add("@iva_canc", OdbcType.Numeric).Value = compra[0].iva.Value;
                                    parameters.Add("@total_canc", OdbcType.Numeric).Value = compra[0].total.Value;

                                    parameters.Add("@cc", OdbcType.Char).Value = cc;
                                    parameters.Add("@numero", OdbcType.Numeric).Value = numero;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;

                                    count += cmd.ExecuteNonQuery();
                                }

                                var compraSIGOPLAN = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.cc == cc && x.numero == numero);

                                if (compraSIGOPLAN != null)
                                {
                                    compraSIGOPLAN.estatus = "C";
                                    compraSIGOPLAN.sub_total = 0;
                                    compraSIGOPLAN.iva = 0;
                                    compraSIGOPLAN.total = 0;
                                    compraSIGOPLAN.empleadoUltimaAccion = relUser.empleado;
                                    compraSIGOPLAN.fechaUltimaAccion = DateTime.Now;
                                    compraSIGOPLAN.tipoUltimaAccion = TipoUltimaAccionEnum.Cancelacion;

                                    _context.Entry(compraSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                    _context.SaveChanges();
                                }
                                #endregion

                                var lstPartidasEK = consultaCheckProductivo(string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", cc, numero));

                                if (lstPartidasEK != null)
                                {
                                    var lstPartidas = (List<dynamic>)lstPartidasEK.ToObject<List<dynamic>>();

                                    #region Update Requisición
                                    var consultaUpdateRequisicion = @"
                                    UPDATE so_requisicion 
                                    SET 
                                        st_estatus = ? 
                                    WHERE cc = ? AND numero = ?";

                                    using (var cmd = new OdbcCommand(consultaUpdateRequisicion))
                                    {
                                        OdbcParameterCollection parameters = cmd.Parameters;

                                        parameters.Add("@st_estatus", OdbcType.Char).Value = " ";

                                        parameters.Add("@cc", OdbcType.Char).Value = cc;
                                        parameters.Add("@numero", OdbcType.Numeric).Value = (int)lstPartidas[0].num_requisicion;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;

                                        count += cmd.ExecuteNonQuery();
                                    }

                                    var requisicionSIGOPLAN = _context.tblCom_Req.Where(x => x.estatusRegistro && x.cc == cc).ToList().FirstOrDefault(x => x.numero == (int)lstPartidas[0].num_requisicion);

                                    if (requisicionSIGOPLAN != null)
                                    {
                                        requisicionSIGOPLAN.stEstatus = " ";

                                        _context.Entry(requisicionSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                        _context.SaveChanges();
                                    }
                                    #endregion

                                    foreach (var part in lstPartidas)
                                    {
                                        #region Update Partida Compra
                                        var consultaDet = @"UPDATE so_orden_compra_det 
                                                SET 
                                                    cantidad = ?, 
                                                    precio = ?, 
                                                    importe = ?, 
                                                    cant_canc = ?, 
                                                    imp_canc = ? 
                                                WHERE cc = ? AND numero = ? AND partida = ? AND insumo = ?";

                                        using (var cmd = new OdbcCommand(consultaDet))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@cantidad", OdbcType.Numeric).Value = 0;
                                            parameters.Add("@precio", OdbcType.Numeric).Value = 0;
                                            parameters.Add("@importe", OdbcType.Numeric).Value = 0;
                                            parameters.Add("@cant_canc", OdbcType.Numeric).Value = part.cantidad.Value;
                                            parameters.Add("@imp_canc", OdbcType.Numeric).Value = part.importe.Value;

                                            parameters.Add("@cc", OdbcType.Char).Value = cc;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = numero;
                                            parameters.Add("@partida", OdbcType.Numeric).Value = part.partida.Value;
                                            parameters.Add("@insumo", OdbcType.Numeric).Value = part.insumo.Value;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }

                                        var partidaCompraSIGOPLAN = _context.tblCom_OrdenCompraDet.Where(x => x.estatusRegistro && x.cc == cc && x.numero == numero).ToList().FirstOrDefault(x =>
                                            x.partida == (int)part.partida && x.insumo == (int)part.insumo
                                        );

                                        if (partidaCompraSIGOPLAN != null)
                                        {
                                            partidaCompraSIGOPLAN.cantidad = 0;
                                            partidaCompraSIGOPLAN.precio = 0;
                                            partidaCompraSIGOPLAN.importe = 0;
                                            partidaCompraSIGOPLAN.cant_canc = Convert.ToDecimal(part.cantidad, CultureInfo.InvariantCulture);
                                            partidaCompraSIGOPLAN.imp_canc = Convert.ToDecimal(part.importe, CultureInfo.InvariantCulture);

                                            _context.Entry(partidaCompraSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                            _context.SaveChanges();
                                        }
                                        #endregion

                                        #region Update Partida Requisición
                                        var partidaRequisicionEK = consultaCheckProductivo(
                                            string.Format(@"SELECT * FROM so_requisicion_det WHERE cc = '{0}' AND numero = {1} AND partida = {2}", cc, (int)part.num_requisicion, (int)part.part_requisicion)
                                        );

                                        if (partidaRequisicionEK != null)
                                        {
                                            var partidaRequisicion = (List<dynamic>)partidaRequisicionEK.ToObject<List<dynamic>>();

                                            var consultaUpdateReqDet = @"UPDATE so_requisicion_det 
                                                            SET 
                                                                cant_ordenada = ? 
                                                            WHERE cc = ? AND numero = ? AND partida = ?";

                                            using (var cmd = new OdbcCommand(consultaUpdateReqDet))
                                            {
                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                parameters.Add("@cant_ordenada", OdbcType.Numeric).Value = 0;

                                                parameters.Add("@cc", OdbcType.Char).Value = cc;
                                                parameters.Add("@numero", OdbcType.Numeric).Value = part.num_requisicion.Value;
                                                parameters.Add("@partida", OdbcType.Numeric).Value = part.part_requisicion.Value;

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;

                                                count += cmd.ExecuteNonQuery();
                                            }
                                        }

                                        if (requisicionSIGOPLAN != null)
                                        {
                                            var partidaRequisicionSIGOPLAN = _context.tblCom_ReqDet.Where(x => x.estatusRegistro && x.idReq == requisicionSIGOPLAN.id).ToList().FirstOrDefault(x =>
                                                x.partida == Convert.ToDecimal(part.part_requisicion, CultureInfo.InvariantCulture)
                                            );

                                            if (partidaRequisicionSIGOPLAN != null)
                                            {
                                                partidaRequisicionSIGOPLAN.cantOrdenada = 0;

                                                _context.Entry(partidaRequisicionSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                                _context.SaveChanges();
                                            }
                                        }
                                        #endregion
                                    }
                                }

                                if (count > 0)
                                {
                                    trans.Commit();
                                }
                            }

                            //result.Add("data", data);
                            result.Add(SUCCESS, true);
                            #endregion
                            break;
                        }
                }
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return result;
        }

        public void CancelarComprasMasivo()
        {
            var listaCompras = new List<Tuple<string, int>>
            {
                new Tuple<string, int>("", 0)
            };

            foreach (var com in listaCompras)
            {
                try
                {
                    cancelarCompra(com.Item1, com.Item2);
                }
                catch (Exception e)
                {
                    var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.ACTUALIZAR, 0, null);
                }
            }
        }

        public Dictionary<string, object> cancelarParcialCompra(OrdenCompraDTO compra)
        {
            var result = new Dictionary<string, object>();

            try
            {
                var compraAnteriorEK = consultaCheckProductivo(string.Format(@"SELECT * FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", compra.cc, compra.numero));

                if (compraAnteriorEK != null)
                {
                    var compraAnterior = (List<dynamic>)compraAnteriorEK.ToObject<List<dynamic>>();

                    var compraDetAnteriorEK = consultaCheckProductivo(
                            string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", compraAnterior[0].cc.Value, compraAnterior[0].numero.Value)
                        );

                    if (compraDetAnteriorEK != null)
                    {
                        var compraDetAnterior = (List<dynamic>)compraDetAnteriorEK.ToObject<List<dynamic>>();

                        using (var con = checkConexionProductivo())
                        using (var trans = con.BeginTransaction())
                        {
                            var count = 0;
                            decimal subTotalCancelado = 0;

                            foreach (var part in compra.lstPartidas)
                            {
                                var partidaAnterior = compraDetAnterior.FirstOrDefault(x => (int)x.partida.Value == part.partida && (int)x.insumo.Value == part.insumo);

                                if (partidaAnterior != null)
                                {
                                    var cantidadCancelada = Convert.ToDecimal(partidaAnterior.cantidad.Value, CultureInfo.InvariantCulture) - part.cantidad;
                                    var importeCancelado = cantidadCancelada * Convert.ToDecimal(partidaAnterior.precio.Value, CultureInfo.InvariantCulture);

                                    subTotalCancelado += importeCancelado;

                                    var consultaDet = @"UPDATE so_orden_compra_det 
                                                        SET 
                                                            cantidad = ?, 
                                                            importe = ?, 
                                                            cant_canc = ?, 
                                                            imp_canc = ? 
                                                        WHERE cc = ? AND numero = ? AND partida = ? AND insumo = ?";

                                    using (var cmd = new OdbcCommand(consultaDet))
                                    {
                                        OdbcParameterCollection parameters = cmd.Parameters;

                                        parameters.Add("@cantidad", OdbcType.Numeric).Value = part.cantidad;
                                        parameters.Add("@importe", OdbcType.Numeric).Value = part.cantidad * Convert.ToDecimal(partidaAnterior.precio.Value, CultureInfo.InvariantCulture);
                                        parameters.Add("@cant_canc", OdbcType.Numeric).Value = cantidadCancelada;
                                        parameters.Add("@imp_canc", OdbcType.Numeric).Value = importeCancelado;

                                        parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                        parameters.Add("@numero", OdbcType.Numeric).Value = compra.numero;
                                        parameters.Add("@partida", OdbcType.Numeric).Value = part.partida;
                                        parameters.Add("@insumo", OdbcType.Numeric).Value = part.insumo;

                                        cmd.Connection = trans.Connection;
                                        cmd.Transaction = trans;

                                        count += cmd.ExecuteNonQuery();
                                    }

                                    var partidaRequisicionEK = consultaCheckProductivo(
                                            string.Format(@"SELECT 
                                                                * 
                                                            FROM so_requisicion_det 
                                                            WHERE 
                                                                cc = '{0}' AND 
                                                                numero = {1} AND 
                                                                partida = {2} AND 
                                                                insumo = {3}",
                                                                             compra.cc,
                                                                             (int)partidaAnterior.num_requisicion.Value,
                                                                             (int)partidaAnterior.part_requisicion.Value,
                                                                             (int)partidaAnterior.insumo.Value)
                                        );

                                    if (partidaRequisicionEK != null)
                                    {
                                        var partidaRequisicion = (List<dynamic>)partidaRequisicionEK.ToObject<List<dynamic>>();

                                        var consultaPartidaReq = @"
                                            UPDATE so_requisicion_det 
                                            SET 
                                                cant_ordenada = ? 
                                            WHERE cc = ? AND numero = ? AND partida = ? AND insumo = ?";

                                        using (var cmd = new OdbcCommand(consultaPartidaReq))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@cant_ordenada", OdbcType.Numeric).Value = (int)partidaRequisicion[0].cant_ordenada.Value - cantidadCancelada;

                                            parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = (int)partidaAnterior.num_requisicion.Value;
                                            parameters.Add("@partida", OdbcType.Numeric).Value = (int)partidaAnterior.part_requisicion.Value;
                                            parameters.Add("@insumo", OdbcType.Numeric).Value = (int)partidaAnterior.insumo.Value;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }
                                    }
                                }
                            }

                            var ivaCancelado = subTotalCancelado * (Convert.ToDecimal(compraAnterior[0].porcent_iva.Value, CultureInfo.InvariantCulture) / 100);
                            var totalCancelado = subTotalCancelado + ivaCancelado;

                            var consulta = @"
                                    UPDATE so_orden_compra 
                                    SET 
                                        estatus = ?, 
                                        sub_total = ?, 
                                        iva = ?, 
                                        total = ?, 
                                        sub_tot_canc = ?, 
                                        iva_canc = ?, 
                                        total_canc = ? 
                                    WHERE cc = ? AND numero = ?";

                            using (var cmd = new OdbcCommand(consulta))
                            {
                                OdbcParameterCollection parameters = cmd.Parameters;

                                parameters.Add("@estatus", OdbcType.Char).Value = "";
                                parameters.Add("@sub_total", OdbcType.Numeric).Value = Convert.ToDecimal(compraAnterior[0].sub_total.Value, CultureInfo.InvariantCulture) - subTotalCancelado;
                                parameters.Add("@iva", OdbcType.Numeric).Value = Convert.ToDecimal(compraAnterior[0].iva.Value, CultureInfo.InvariantCulture) - ivaCancelado;
                                parameters.Add("@total", OdbcType.Numeric).Value = Convert.ToDecimal(compraAnterior[0].total.Value, CultureInfo.InvariantCulture) - totalCancelado;
                                parameters.Add("@sub_tot_canc", OdbcType.Numeric).Value = subTotalCancelado;
                                parameters.Add("@iva_canc", OdbcType.Numeric).Value = ivaCancelado;
                                parameters.Add("@total_canc", OdbcType.Numeric).Value = totalCancelado;

                                parameters.Add("@cc", OdbcType.Char).Value = compra.cc;
                                parameters.Add("@numero", OdbcType.Numeric).Value = compra.numero;

                                cmd.Connection = trans.Connection;
                                cmd.Transaction = trans;

                                count += cmd.ExecuteNonQuery();
                            }

                            if (count > 0)
                            {
                                trans.Commit();
                            }
                        }
                    }
                }

                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return result;
        }

        public Dictionary<string, object> getRequisicionesValidadas(List<string> listCC, List<string> listFamiliasInsumos, List<string> listCompradores, DateTime fechaInicio, DateTime fechaFin, int area, int cuenta, string noEconomico)
        {
            var result = new Dictionary<string, object>();

            try
            {
                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {
                    #region EmpresaPeru
                    case EmpresaEnum.Peru:
                        {
                            using (var ctxPeru = new MainContext())
                            {
                                if (listCC == null)
                                {
                                    listCC = new List<string>();
                                }
                                var requisiciones = ctxPeru.tblCom_Req.Where(x => listCC.Contains(x.cc) && x.estatusRegistro &&
                                    x.stAutoriza && DbFunctions.TruncateTime(x.fecha) >= DbFunctions.TruncateTime(fechaInicio) &&
                                    DbFunctions.TruncateTime(x.fecha) <= DbFunctions.TruncateTime(fechaFin)).ToList();
                                //x.estatusRegistro &&
                                //x.stAutoriza 
                                ////(x.validadoCompras || x.validadoAlmacen == true) &&
                                //DbFunctions.TruncateTime(x.fecha) >= DbFunctions.TruncateTime(fechaInicio) &&
                                //DbFunctions.TruncateTime(x.fecha) <= DbFunctions.TruncateTime(fechaFin)
                                //).ToList().Where(x => (listCC != null ? listCC.Contains(x.cc) : true)).ToList();

                                var requisicionesSinCompras = new List<tblCom_Req>();
                                var listaCompras = (
                                    from com in ctxPeru.tblCom_OrdenCompra
                                    join comDet in ctxPeru.tblCom_OrdenCompraDet on new { id = com.id } equals new { id = comDet.idOrdenCompra }
                                    where DbFunctions.TruncateTime(com.fecha) >= DbFunctions.TruncateTime(fechaInicio)
                                    select new { cc = com.cc, num_requisicion = comDet.num_requisicion, estatusRegistro = comDet.estatusRegistro, PERU_tipoRequisicion = com.PERU_tipoCompra }
                                ).ToList().Where(x => (listCC != null ? listCC.Contains(x.cc) : true)).ToList();

                                foreach (var req in requisiciones)
                                {
                                    //var compraDet = listaCompras.FirstOrDefault(x => x.estatusRegistro && x.cc == req.cc && x.num_requisicion == req.numero);
                                    var compraDet = listaCompras.FirstOrDefault(x => x.estatusRegistro && x.num_requisicion == req.numero && req.PERU_tipoRequisicion == x.PERU_tipoRequisicion);

                                    if (compraDet == null)
                                    {
                                        requisicionesSinCompras.Add(req);
                                    }
                                }

                                var requisicionesFamilias = (
                                    from req in requisicionesSinCompras
                                    join reqDet in ctxPeru.tblCom_ReqDet.ToList() on req.id equals reqDet.idReq
                                    where
                                        reqDet.estatusRegistro && (noEconomico != "" ? reqDet.noEconomico == noEconomico : true)
                                    select new
                                    {
                                        id = req.id,
                                        cc = req.cc,
                                        numero = req.numero,
                                        solicito = req.solicito,
                                        fecha = req.fecha,
                                        comprador = req.comprador,
                                        consigna = req.consigna,
                                        licitacion = req.licitacion,
                                        crc = req.crc,
                                        convenio = req.convenio,
                                        tipoRequisicion = req.idTipoReqOc,
                                        fechaValidacionAlmacen = req.fechaValidacionAlmacen,
                                        PERU_tipoRequisicion = req.PERU_tipoRequisicion
                                    }
                                ).Distinct().ToList();

                                var requisicionesFiltradasPorCompradores = requisicionesFamilias.Where(x => (listCompradores != null ? listCompradores.Contains(x.comprador.ToString()) : true)).ToList();

                                List<dynamic> listaRequisiciones = new List<dynamic>();
                                var listaCentrosCosto = ctxPeru.tblP_CC.ToList();

                                //var listaCentrosCosto = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM cc")).ToObject<List<dynamic>>();
                                //var listaEmpleadosEnkontrol = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM empleados")).ToObject<List<dynamic>>();

                                //var consultaUsuariosStarsoft = @"SELECT cast(TCLAVE as int) as TCLAVE,TDESCRI FROM [003BDCOMUN].[dbo].[TABAYU] WHERE TCOD = '12' ";
                                //List<InfoUsuariosStarsoftDTO> listaEmpleados = new List<InfoUsuariosStarsoftDTO>();
                                //DynamicParameters lstParametros = new DynamicParameters();
                                //using (var conexion = new SqlConnection(ConextSigoDapper.conexionStarsoftBancos()))
                                //{
                                //    conexion.Open();
                                //    listaEmpleados = conexion.Query<InfoUsuariosStarsoftDTO>(consultaUsuariosStarsoft, lstParametros, null, true, 300, commandType: CommandType.Text).ToList();
                                //    conexion.Close();
                                //}


                                //var compradores = ctxPeru.tblCom_Comprador.Where(x => x.estatus).ToList();
                                var fechaHoy = DateTime.Now;

                                foreach (var req in requisicionesFiltradasPorCompradores)
                                {
                                    var centroCosto = listaCentrosCosto.FirstOrDefault(x => (string)x.cc == req.cc);
                                    var ccDesc = "";

                                    if (centroCosto != null)
                                    {
                                        ccDesc = (string)centroCosto.descripcion;
                                    }

                                    //var empleadoSolicito = listaEmpleados.FirstOrDefault(x => x.TCLAVE == req.solicito);
                                    var solicitoDesc = "";
                                    var empleadoSolicitoEK = ctxPeru.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.empleado == req.solicito);
                                    if (empleadoSolicitoEK != null)
                                    {
                                        var usuarioSolicito = ctxPeru.tblP_Usuario.FirstOrDefault(x => x.id == empleadoSolicitoEK.idUsuario);
                                        if (usuarioSolicito != null)
                                        {
                                            solicitoDesc = PersonalUtilities.NombreCompletoMayusculas(usuarioSolicito.nombre, usuarioSolicito.apellidoPaterno, usuarioSolicito.apellidoMaterno);
                                        }
                                    }

                                    //if (empleadoSolicito != null)
                                    //{
                                    //    solicitoDesc = (string)empleadoSolicito.TDESCRI;
                                    //}

                                    var estatusVencido = "";
                                    var tipoRequisicionDesc = "";

                                    if (req.fechaValidacionAlmacen != null)
                                    {
                                        var diferenciaDias = (fechaHoy.Date - (DateTime)req.fechaValidacionAlmacen).TotalDays;

                                        switch (req.tipoRequisicion)
                                        {
                                            case 1: //Normal (5 días)
                                                tipoRequisicionDesc = "NORMAL";
                                                estatusVencido = diferenciaDias > 5 ? "VENCIDO" : "VIGENTE";
                                                break;
                                            case 2: //Urgente (1 días)
                                                tipoRequisicionDesc = "URGENTE";
                                                estatusVencido = diferenciaDias > 1 ? "VENCIDO" : "VIGENTE";
                                                break;
                                            case 3: //Programa Mensual (5 día)
                                                tipoRequisicionDesc = "PROGRAMA";
                                                estatusVencido = diferenciaDias > 5 ? "VENCIDO" : "VIGENTE";
                                                break;
                                            case 4: //Por reembolso (1 día)
                                                tipoRequisicionDesc = "REEMBOLSO";
                                                estatusVencido = diferenciaDias > 1 ? "VENCIDO" : "VIGENTE";
                                                break;
                                        }
                                    }
                                    else
                                    {
                                        switch (req.tipoRequisicion)
                                        {
                                            case 1: //Normal (3 días)
                                                tipoRequisicionDesc = "NORMAL";
                                                //estatusVencido = diferenciaDias > 3 ? "VENCIDO" : "VIGENTE";
                                                break;
                                            case 2: //Urgente (3 días)
                                                tipoRequisicionDesc = "URGENTE";
                                                //estatusVencido = diferenciaDias > 3 ? "VENCIDO" : "VIGENTE";
                                                break;
                                            case 3: //Programa Mensual (1 día)
                                                tipoRequisicionDesc = "PROGRAMA";
                                                //estatusVencido = diferenciaDias > 1 ? "VENCIDO" : "VIGENTE";
                                                break;
                                            case 4: //Por reembolso (1 día)
                                                tipoRequisicionDesc = "REEMBOLSO";
                                                //estatusVencido = diferenciaDias > 1 ? "VENCIDO" : "VIGENTE";
                                                break;
                                        }
                                    }

                                    var compradorDesc = "";
                                    var compradorEk = ctxPeru.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.empleado == req.comprador);
                                    if (compradorEk != null)
                                    {
                                        var usuarioComprador = ctxPeru.tblP_Usuario.FirstOrDefault(x => x.id == compradorEk.idUsuario);
                                        if (usuarioComprador != null)
                                        {
                                            compradorDesc = PersonalUtilities.NombreCompletoMayusculas(usuarioComprador.nombre, usuarioComprador.apellidoPaterno, usuarioComprador.apellidoMaterno);
                                        }
                                    }

                                    var data = new RequisicionSinOCDTO
                                    {
                                        id = req.id,
                                        cc = req.cc,
                                        ccDesc = req.cc + "-" + ccDesc,
                                        numero = req.numero,
                                        solicito = req.solicito,
                                        solicitoDesc = solicitoDesc,
                                        fecha = req.fecha,
                                        consigna = req.consigna,
                                        licitacion = req.licitacion,
                                        crc = req.crc,
                                        convenio = req.convenio,
                                        comprador = req.comprador,
                                        compradorDesc = compradorDesc,
                                        area = 0,
                                        cuenta = 0,
                                        areaCuentaDesc = "",
                                        tipoRequisicion = req.tipoRequisicion,
                                        tipoRequisicionDesc = "(" + (req.PERU_tipoRequisicion == "RQ" ? "COMPRA" : "SERVICIO") + ") " + tipoRequisicionDesc,
                                        fechaValidacionAlmacen = req.fechaValidacionAlmacen,
                                        fechaValidacionAlmacenString = req.fechaValidacionAlmacen != null ? ((DateTime)req.fechaValidacionAlmacen).ToShortDateString() : "",
                                        estatusVencido = estatusVencido,
                                        PERU_tipoRequisicion = req.PERU_tipoRequisicion
                                    };

                                    listaRequisiciones.Add(data);
                                }

                                List<dynamic> requisicionesFiltradasFinal = new List<dynamic>();

                                foreach (var r in listaRequisiciones)
                                {
                                    var idReq = (int)r.id;
                                    var detalle = ctxPeru.tblCom_ReqDet.Where(x => x.estatusRegistro && x.idReq == idReq).ToList();

                                    //Se escoge el área-cuenta de la primer partida.
                                    r.area = detalle[0].area;
                                    r.cuenta = detalle[0].cuenta;
                                    r.noEconomico = detalle[0].noEconomico;

                                    if (area > 0 && cuenta > 0)
                                    {
                                        var registroAreaCuenta = detalle.FirstOrDefault(x => x.area == area && x.cuenta == cuenta);

                                        if (registroAreaCuenta != null)
                                        {
                                            requisicionesFiltradasFinal.Add(r);
                                        }
                                    }
                                    else
                                    {
                                        requisicionesFiltradasFinal.Add(r);
                                    }
                                }
                                result.Add("data", requisicionesFiltradasFinal);
                                result.Add(SUCCESS, true);
                            }
                        }
                        break;
                    #endregion

                    #region EmpresaColombia

                    case EmpresaEnum.Colombia:
                        {
                            var requisiciones = _context.tblCom_Req.Where(x =>
                                x.estatusRegistro &&
                                x.stAutoriza &&
                                (x.validadoCompras || x.validadoAlmacen == true) &&
                                DbFunctions.TruncateTime(x.fecha) >= DbFunctions.TruncateTime(fechaInicio) &&
                                DbFunctions.TruncateTime(x.fecha) <= DbFunctions.TruncateTime(fechaFin)
                                ).ToList().Where(x => (listCC != null ? listCC.Contains(x.cc) : true)).ToList();

                            var requisicionesSinCompras = new List<tblCom_Req>();
                            var listaCompras = (
                                from com in _context.tblCom_OrdenCompra
                                join comDet in _context.tblCom_OrdenCompraDet on new { com.cc, com.numero } equals new { comDet.cc, comDet.numero }
                                where DbFunctions.TruncateTime(com.fecha) >= DbFunctions.TruncateTime(fechaInicio)
                                select new { cc = com.cc, num_requisicion = comDet.num_requisicion, estatusRegistro = comDet.estatusRegistro }
                            ).ToList().Where(x => (listCC != null ? listCC.Contains(x.cc) : true)).ToList();

                            foreach (var req in requisiciones)
                            {
                                var compraDet = listaCompras.FirstOrDefault(x => x.estatusRegistro && x.cc == req.cc && x.num_requisicion == req.numero);

                                if (compraDet == null)
                                {
                                    requisicionesSinCompras.Add(req);
                                }
                            }

                            var requisicionesFamilias = (
                                from req in requisicionesSinCompras
                                join reqDet in _context.tblCom_ReqDet.ToList() on req.id equals reqDet.idReq
                                where
                                    reqDet.estatusRegistro && (noEconomico != "" ? reqDet.noEconomico == noEconomico : true)
                                select new
                                {
                                    id = req.id,
                                    cc = req.cc,
                                    numero = req.numero,
                                    solicito = req.solicito,
                                    fecha = req.fecha,
                                    comprador = req.comprador,
                                    consigna = req.consigna,
                                    licitacion = req.licitacion,
                                    crc = req.crc,
                                    convenio = req.convenio,
                                    tipoRequisicion = req.idTipoReqOc,
                                    fechaValidacionAlmacen = req.fechaValidacionAlmacen
                                }
                            ).Distinct().ToList();

                            var requisicionesFiltradasPorCompradores = requisicionesFamilias.Where(x => (listCompradores != null ? listCompradores.Contains(x.comprador.ToString()) : true)).ToList();

                            List<dynamic> listaRequisiciones = new List<dynamic>();
                            var listaCentrosCosto = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM cc")).ToObject<List<dynamic>>();
                            var listaEmpleadosEnkontrol = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM empleados")).ToObject<List<dynamic>>();

                            var compradores = _context.tblCom_Comprador.Where(x => x.estatus).ToList();
                            var fechaHoy = DateTime.Now;

                            foreach (var req in requisicionesFiltradasPorCompradores)
                            {
                                var centroCosto = listaCentrosCosto.FirstOrDefault(x => (string)x.cc == req.cc);
                                var ccDesc = "";

                                if (centroCosto != null)
                                {
                                    ccDesc = (string)centroCosto.descripcion;
                                }

                                var empleadoSolicito = listaEmpleadosEnkontrol.FirstOrDefault(x => (int)x.empleado == req.solicito);
                                var solicitoDesc = "";

                                if (empleadoSolicito != null)
                                {
                                    solicitoDesc = (string)empleadoSolicito.descripcion;
                                }

                                var estatusVencido = "";
                                var tipoRequisicionDesc = "";

                                if (req.fechaValidacionAlmacen != null)
                                {
                                    var diferenciaDias = (fechaHoy.Date - (DateTime)req.fechaValidacionAlmacen).TotalDays;

                                    switch (req.tipoRequisicion)
                                    {
                                        case 1: //Normal (5 días)
                                            tipoRequisicionDesc = "NORMAL";
                                            estatusVencido = diferenciaDias > 5 ? "VENCIDO" : "VIGENTE";
                                            break;
                                        case 2: //Urgente (1 días)
                                            tipoRequisicionDesc = "URGENTE";
                                            estatusVencido = diferenciaDias > 1 ? "VENCIDO" : "VIGENTE";
                                            break;
                                        case 3: //Programa Mensual (5 día)
                                            tipoRequisicionDesc = "PROGRAMA";
                                            estatusVencido = diferenciaDias > 5 ? "VENCIDO" : "VIGENTE";
                                            break;
                                        case 4: //Por reembolso (1 día)
                                            tipoRequisicionDesc = "REEMBOLSO";
                                            estatusVencido = diferenciaDias > 1 ? "VENCIDO" : "VIGENTE";
                                            break;
                                    }
                                }

                                var detalle = _context.tblCom_ReqDet.Where(x => x.estatusRegistro && x.idReq == req.id).ToList();

                                var data = new RequisicionSinOCDTO
                                {
                                    id = req.id,
                                    cc = req.cc,
                                    ccDesc = req.cc + "-" + ccDesc,
                                    numero = req.numero,
                                    solicito = req.solicito,
                                    solicitoDesc = solicitoDesc,
                                    fecha = req.fecha,
                                    consigna = req.consigna,
                                    licitacion = req.licitacion,
                                    crc = req.crc,
                                    convenio = req.convenio,
                                    comprador = req.comprador,
                                    compradorDesc = compradores.Where(x => x.empleado == req.comprador).Select(y => y.descripcion).FirstOrDefault(),
                                    area = 0,
                                    cuenta = 0,
                                    areaCuentaDesc = "",
                                    tipoRequisicion = req.tipoRequisicion,
                                    tipoRequisicionDesc = tipoRequisicionDesc,
                                    fechaValidacionAlmacen = req.fechaValidacionAlmacen,
                                    fechaValidacionAlmacenString = req.fechaValidacionAlmacen != null ? ((DateTime)req.fechaValidacionAlmacen).ToShortDateString() : "",
                                    estatusVencido = estatusVencido,
                                    noEconomico = detalle[0].noEconomico
                                };

                                listaRequisiciones.Add(data);
                            }

                            result.Add("data", listaRequisiciones);
                            result.Add(SUCCESS, true);
                        }
                        break;
                    #endregion

                    #region EmpresaConstruplan
                    default:
                        {
                            var requisiciones = _context.tblCom_Req.Where(x =>
                                x.estatusRegistro &&
                                x.stAutoriza &&
                                (x.validadoCompras || x.validadoAlmacen == true) &&
                                DbFunctions.TruncateTime(x.fecha) >= DbFunctions.TruncateTime(fechaInicio) &&
                                DbFunctions.TruncateTime(x.fecha) <= DbFunctions.TruncateTime(fechaFin)
                                ).ToList().Where(x => (listCC != null ? listCC.Contains(x.cc) : true)).ToList();

                            var requisicionesSinCompras = new List<tblCom_Req>();
                            var listaCompras = (
                                from com in _context.tblCom_OrdenCompra
                                join comDet in _context.tblCom_OrdenCompraDet on new { com.cc, com.numero } equals new { comDet.cc, comDet.numero }
                                where DbFunctions.TruncateTime(com.fecha) >= DbFunctions.TruncateTime(fechaInicio)
                                select new { cc = com.cc, num_requisicion = comDet.num_requisicion, estatusRegistro = comDet.estatusRegistro }
                            ).ToList().Where(x => (listCC != null ? listCC.Contains(x.cc) : true)).ToList();

                            foreach (var req in requisiciones)
                            {
                                var compraDet = listaCompras.FirstOrDefault(x => x.estatusRegistro && x.cc == req.cc && x.num_requisicion == req.numero);

                                if (compraDet == null)
                                {
                                    requisicionesSinCompras.Add(req);
                                }
                            }

                            var requisicionesFamilias = (
                                from req in requisicionesSinCompras
                                join reqDet in _context.tblCom_ReqDet.ToList() on req.id equals reqDet.idReq
                                where
                                    reqDet.estatusRegistro && listFamiliasInsumos.Contains(reqDet.insumo.ToString().Substring(0, 3))
                                select new
                                {
                                    id = req.id,
                                    cc = req.cc,
                                    numero = req.numero,
                                    solicito = req.solicito,
                                    fecha = req.fecha,
                                    comprador = req.comprador,
                                    consigna = req.consigna,
                                    licitacion = req.licitacion,
                                    crc = req.crc,
                                    convenio = req.convenio,
                                    tipoRequisicion = req.idTipoReqOc,
                                    fechaValidacionAlmacen = req.fechaValidacionAlmacen
                                }
                            ).Distinct().ToList();

                            var requisicionesFiltradasPorCompradores = requisicionesFamilias.Where(x => (listCompradores != null ? listCompradores.Contains(x.comprador.ToString()) : true)).ToList();

                            List<dynamic> listaRequisiciones = new List<dynamic>();
                            var listaCentrosCosto = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM cc")).ToObject<List<dynamic>>();
                            var listaEmpleadosEnkontrol = (List<dynamic>)consultaCheckProductivo(string.Format(@"SELECT * FROM empleados")).ToObject<List<dynamic>>();

                            var compradores = _context.tblCom_Comprador.Where(x => x.estatus).ToList();
                            var fechaHoy = DateTime.Now;

                            foreach (var req in requisicionesFiltradasPorCompradores)
                            {
                                var centroCosto = listaCentrosCosto.FirstOrDefault(x => (string)x.cc == req.cc);
                                var ccDesc = "";

                                if (centroCosto != null)
                                {
                                    ccDesc = (string)centroCosto.descripcion;
                                }

                                var empleadoSolicito = listaEmpleadosEnkontrol.FirstOrDefault(x => (int)x.empleado == req.solicito);
                                var solicitoDesc = "";

                                if (empleadoSolicito != null)
                                {
                                    solicitoDesc = (string)empleadoSolicito.descripcion;
                                }

                                var estatusVencido = "";
                                var tipoRequisicionDesc = "";

                                if (req.fechaValidacionAlmacen != null)
                                {
                                    var diferenciaDias = (fechaHoy.Date - (DateTime)req.fechaValidacionAlmacen).TotalDays;

                                    switch (req.tipoRequisicion)
                                    {
                                        case 1: //Normal (5 días)
                                            tipoRequisicionDesc = "NORMAL";
                                            estatusVencido = diferenciaDias > 5 ? "VENCIDO" : "VIGENTE";
                                            break;
                                        case 2: //Urgente (1 días)
                                            tipoRequisicionDesc = "URGENTE";
                                            estatusVencido = diferenciaDias > 1 ? "VENCIDO" : "VIGENTE";
                                            break;
                                        case 3: //Programa Mensual (5 día)
                                            tipoRequisicionDesc = "PROGRAMA";
                                            estatusVencido = diferenciaDias > 5 ? "VENCIDO" : "VIGENTE";
                                            break;
                                        case 4: //Por reembolso (1 día)
                                            tipoRequisicionDesc = "REEMBOLSO";
                                            estatusVencido = diferenciaDias > 1 ? "VENCIDO" : "VIGENTE";
                                            break;
                                    }
                                }

                                var data = new RequisicionSinOCDTO
                                {
                                    id = req.id,
                                    cc = req.cc,
                                    ccDesc = req.cc + "-" + ccDesc,
                                    numero = req.numero,
                                    solicito = req.solicito,
                                    solicitoDesc = solicitoDesc,
                                    fecha = req.fecha,
                                    consigna = req.consigna,
                                    licitacion = req.licitacion,
                                    crc = req.crc,
                                    convenio = req.convenio,
                                    comprador = req.comprador,
                                    compradorDesc = compradores.Where(x => x.empleado == req.comprador).Select(y => y.descripcion).FirstOrDefault(),
                                    area = 0,
                                    cuenta = 0,
                                    areaCuentaDesc = "",
                                    tipoRequisicion = req.tipoRequisicion,
                                    tipoRequisicionDesc = tipoRequisicionDesc,
                                    fechaValidacionAlmacen = req.fechaValidacionAlmacen,
                                    fechaValidacionAlmacenString = req.fechaValidacionAlmacen != null ? ((DateTime)req.fechaValidacionAlmacen).ToShortDateString() : "",
                                    estatusVencido = estatusVencido
                                };

                                listaRequisiciones.Add(data);
                            }

                            List<dynamic> listaAreaCuentaEK = _contextEnkontrol.Select<dynamic>(
                                vSesiones.sesionEmpresaActual == 1 ? EnkontrolEnum.CplanProd : vSesiones.sesionEmpresaActual == 4 ? EnkontrolEnum.CplanEici : EnkontrolEnum.ArrenProd,
                                new OdbcConsultaDTO()
                                {
                                    consulta = @"
                            SELECT
                                area, cuenta, TRIM(descripcion) AS descripcion
                            FROM si_area_cuenta
                            WHERE cc_activo = 1
                            GROUP BY area, cuenta, descripcion
                            ORDER BY area, cuenta, descripcion"
                                }
                            );

                            List<dynamic> requisicionesFiltradasFinal = new List<dynamic>();

                            foreach (var r in listaRequisiciones)
                            {
                                var idReq = (int)r.id;
                                var detalle = _context.tblCom_ReqDet.Where(x => x.estatusRegistro && x.idReq == idReq).ToList();

                                //Se escoge el área-cuenta de la primer partida.
                                r.area = detalle[0].area;
                                r.cuenta = detalle[0].cuenta;

                                var areaCuentaEK = listaAreaCuentaEK.FirstOrDefault(x => (int)x.area == r.area && (int)x.cuenta == r.cuenta);

                                if (areaCuentaEK != null)
                                {
                                    r.areaCuentaDesc = (int)r.area + "-" + (int)r.cuenta + " " + (string)areaCuentaEK.descripcion;
                                }

                                if (area > 0 && cuenta > 0)
                                {
                                    var registroAreaCuenta = detalle.FirstOrDefault(x => x.area == area && x.cuenta == cuenta);

                                    if (registroAreaCuenta != null)
                                    {
                                        requisicionesFiltradasFinal.Add(r);
                                    }
                                }
                                else
                                {
                                    requisicionesFiltradasFinal.Add(r);
                                }
                            }
                            result.Add("data", requisicionesFiltradasFinal);
                            result.Add(SUCCESS, true);
                        }
                        break;
                    #endregion

                }

            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return result;
        }

        public Dictionary<string, object> getPreciosPorProveedor(string cc, int numeroRequisicion, long numeroProveedor)
        {
            var result = new Dictionary<string, object>();

            try
            {
                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {

                    case EmpresaEnum.Peru:
                        {
                            var PERU_tipoCompra = "";
                            if (HttpContext.Current.Session["servicioCompra"] != null)
                            {
                                if (!(bool)HttpContext.Current.Session["servicioCompra"]) //Vista Generar Compra
                                {
                                    PERU_tipoCompra = "RQ";
                                }
                                else //Vista Generar Compra Servicio
                                {
                                    PERU_tipoCompra = "RS";
                                }
                            }
                            if (HttpContext.Current.Session["servicioCompraCuadroComparativo"] != null)
                            {
                                if (!(bool)HttpContext.Current.Session["servicioCompraCuadroComparativo"]) //Vista Generar Compra
                                {
                                    PERU_tipoCompra = "RQ";
                                }
                                else //Vista Generar Compra Servicio
                                {
                                    PERU_tipoCompra = "RS";
                                }
                            }


                            var numPro = numeroProveedor.ToString("D11");
                            var cuadro = _context.Select<CuadroComparativoDTO>(new DapperDTO
                            {
                                baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                                consulta = "SELECT * FROM tblCom_CuadroComparativo WHERE cc = @paramCC AND numero = @paramNumero AND (PERU_prov1 = @paramProv OR PERU_prov2 = @paramProv OR PERU_prov3 = @paramProv) AND PERU_tipoCuadro = @paramTipoRequi AND registroActivo = 1",
                                parametros = new { paramCC = cc, paramNumero = numeroRequisicion, paramProv = numPro, paramTipoRequi = PERU_tipoCompra }
                            }).ToList();

                            if (cuadro != null && cuadro.Count() > 0)
                            {
                                var cuadroDet = _context.Select<CuadroComparativoDetDTO>(new DapperDTO
                                {
                                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                                    consulta = "SELECT * FROM tblCom_CuadroComparativoDet WHERE cc = @paramCC AND numero = @paramNumero AND folio = @paramFolio AND registroActivo = 1 AND PERU_tipoCuadro = @paramTipoCuadro",
                                    parametros = new { paramCC = cc, paramNumero = numeroRequisicion, paramFolio = cuadro[0].folio, paramTipoCuadro = PERU_tipoCompra }
                                }).ToList();

                                if (cuadroDet.Count > 0)
                                {
                                    result.Add("cuadro", cuadro);
                                    result.Add("cuadroDetalle", cuadroDet);
                                    result.Add(SUCCESS, true);
                                }
                                else
                                {
                                    result.Add(SUCCESS, false);
                                }
                            }
                        }
                        break;
                    default:
                        {
                            var cuadroEK = consultaCheckProductivo(
                    string.Format(@"SELECT 
                                        * 
                                    FROM so_cuadro_comparativo 
                                    WHERE cc = '{0}' AND numero = {1} AND (prov1 = {2} OR prov2 = {2} OR prov3 = {2})", cc, numeroRequisicion, numeroProveedor));

                            if (cuadroEK != null)
                            {
                                var cuadro = (List<CuadroComparativoDTO>)cuadroEK.ToObject<List<CuadroComparativoDTO>>();

                                var cuadroDetalleEK = consultaCheckProductivo(
                                string.Format(@"SELECT 
                                        * 
                                    FROM so_cuadro_comparativo_det 
                                    WHERE cc = '{0}' AND numero = {1} AND folio = {2}", cc, numeroRequisicion, cuadro[0].folio));

                                if (cuadroDetalleEK != null)
                                {
                                    var cuadroDetalle = (List<CuadroComparativoDetDTO>)cuadroDetalleEK.ToObject<List<CuadroComparativoDetDTO>>();

                                    result.Add("cuadro", cuadro);
                                    result.Add("cuadroDetalle", cuadroDetalle);
                                    result.Add(SUCCESS, true);
                                }
                                else
                                {
                                    result.Add(SUCCESS, false);
                                }
                            }
                            else
                            {
                                result.Add("cuadro", null);
                            }
                        }
                        break;
                }
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return result;
        }

        private decimal getCostoPromedioEntrada(int almacen, int insumo)
        {
            var acumulaAlmacenEK = consultaCheckProductivo(
                                    string.Format(@"SELECT 
                                                        TOP 1 * 
                                                    FROM si_acumula_almacen 
                                                    WHERE almacen = {0} AND ano = {1} AND insumo = {2}
                                                    ORDER BY ano DESC", almacen, DateTime.Now.Year, insumo)
                                );

            var contador = 0;
            decimal sumatoriaCostos = 0;
            decimal costoPromedio = 0;

            if (acumulaAlmacenEK != null)
            {
                var acuAlm = ((List<AcumulaAlmacenDTO>)acumulaAlmacenEK.ToObject<List<AcumulaAlmacenDTO>>())[0];

                if (acuAlm.existencia_ent_ini > 0 && acuAlm.importe_ent_ini > 0)
                {
                    contador++;
                    sumatoriaCostos += (decimal)acuAlm.importe_ent_ini / (decimal)acuAlm.existencia_ent_ini;
                }

                if (acuAlm.existencia_ent_ene > 0 && acuAlm.importe_ent_ene > 0)
                {
                    contador++;
                    sumatoriaCostos += (decimal)acuAlm.importe_ent_ene / (decimal)acuAlm.existencia_ent_ene;
                }

                if (acuAlm.existencia_ent_feb > 0 && acuAlm.importe_ent_feb > 0)
                {
                    contador++;
                    sumatoriaCostos += (decimal)acuAlm.importe_ent_feb / (decimal)acuAlm.existencia_ent_feb;
                }

                if (acuAlm.existencia_ent_mar > 0 && acuAlm.importe_ent_mar > 0)
                {
                    contador++;
                    sumatoriaCostos += (decimal)acuAlm.importe_ent_mar / (decimal)acuAlm.existencia_ent_mar;
                }

                if (acuAlm.existencia_ent_abr > 0 && acuAlm.importe_ent_abr > 0)
                {
                    contador++;
                    sumatoriaCostos += (decimal)acuAlm.importe_ent_abr / (decimal)acuAlm.existencia_ent_abr;
                }

                if (acuAlm.existencia_ent_may > 0 && acuAlm.importe_ent_may > 0)
                {
                    contador++;
                    sumatoriaCostos += (decimal)acuAlm.importe_ent_may / (decimal)acuAlm.existencia_ent_may;
                }

                if (acuAlm.existencia_ent_jun > 0 && acuAlm.importe_ent_jun > 0)
                {
                    contador++;
                    sumatoriaCostos += (decimal)acuAlm.importe_ent_jun / (decimal)acuAlm.existencia_ent_jun;
                }

                if (acuAlm.existencia_ent_jul > 0 && acuAlm.importe_ent_jul > 0)
                {
                    contador++;
                    sumatoriaCostos += (decimal)acuAlm.importe_ent_jul / (decimal)acuAlm.existencia_ent_jul;
                }

                if (acuAlm.existencia_ent_ago > 0 && acuAlm.importe_ent_ago > 0)
                {
                    contador++;
                    sumatoriaCostos += (decimal)acuAlm.importe_ent_ago / (decimal)acuAlm.existencia_ent_ago;
                }

                if (acuAlm.existencia_ent_sep > 0 && acuAlm.importe_ent_sep > 0)
                {
                    contador++;
                    sumatoriaCostos += (decimal)acuAlm.importe_ent_sep / (decimal)acuAlm.existencia_ent_sep;
                }

                if (acuAlm.existencia_ent_oct > 0 && acuAlm.importe_ent_oct > 0)
                {
                    contador++;
                    sumatoriaCostos += (decimal)acuAlm.importe_ent_oct / (decimal)acuAlm.existencia_ent_oct;
                }

                if (acuAlm.existencia_ent_nov > 0 && acuAlm.importe_ent_nov > 0)
                {
                    contador++;
                    sumatoriaCostos += (decimal)acuAlm.importe_ent_nov / (decimal)acuAlm.existencia_ent_nov;
                }

                if (acuAlm.existencia_ent_dic > 0 && acuAlm.importe_ent_dic > 0)
                {
                    contador++;
                    sumatoriaCostos += (decimal)acuAlm.importe_ent_dic / (decimal)acuAlm.existencia_ent_dic;
                }

                if (contador > 0)
                {
                    costoPromedio = sumatoriaCostos / contador;
                }
            }

            return costoPromedio;
        }

        public Dictionary<string, object> checkEstatusOrdenCompraImpresa(string cc, int numero, string PERU_tipoCompra = "")
        {
            var result = new Dictionary<string, object>();

            switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
            {
                case EmpresaEnum.Peru:
                    {
                        #region Compras Perú
                        using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                        {
                            try
                            {
                                if (HttpContext.Current.Session["servicioCompra"] != null && string.IsNullOrEmpty(PERU_tipoCompra))
                                {
                                    if (!(bool)HttpContext.Current.Session["servicioCompra"]) //Vista Generar Compra
                                    {
                                        PERU_tipoCompra = "RQ";
                                    }
                                    else //Vista Generar Compra Servicio
                                    {
                                        PERU_tipoCompra = "RS";
                                    }
                                }

                                var empleado = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id).empleado;
                                var compraSIGOPLAN = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.estatusRegistro && x.cc == cc && x.numero == numero && x.PERU_tipoCompra == PERU_tipoCompra);

                                if (compraSIGOPLAN.ST_OC != "A" || compraSIGOPLAN.ST_OC == null)
                                {
                                    throw new Exception("La compra no está autorizada");
                                }

                                if (compraSIGOPLAN.st_impresa == "I")
                                {
                                    vSesiones.sesionVersionCompraOriginal = false;
                                }
                                else
                                {
                                    var compradores = _context.tblCom_Comprador.Where(x => x.estatus).Select(x => x.usuarioSIGOPLAN).ToList();
                                    var compradoresAdmin = _context.tblCom_Comprador_Admin.Where(x => x.estatus).Select(x => x.idUsuario).ToList();

                                    if (empleado != 1 && vSesiones.sesionCurrentView != 7260) //Usuario que no sea admin de Enkontrol y que no venga de la vista de "entrada por compra" en almacén.
                                    {
                                        if (!compradores.Contains(vSesiones.sesionUsuarioDTO.id) && !compradoresAdmin.Contains(vSesiones.sesionUsuarioDTO.id)) //Usuario que no sea comprador ni comprador admin.
                                        {
                                            throw new Exception("Su usuario no es comprador. No puede imprimir la copia original de la compra.");
                                        }
                                    }

                                    vSesiones.sesionVersionCompraOriginal = true;

                                    compraSIGOPLAN.st_impresa = "I";
                                    _context.SaveChanges();

                                    dbSigoplanTransaction.Commit();
                                }

                                result.Add(SUCCESS, true);
                            }
                            catch (Exception e)
                            {
                                dbSigoplanTransaction.Rollback();
                                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                                result.Add(MESSAGE, e.Message);
                                result.Add(SUCCESS, false);
                            }
                        }
                        #endregion
                        break;
                    }
                case EmpresaEnum.Colombia:
                    {
                        #region Compras Colombia
                        using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                        {
                            using (var con = checkConexionProductivo())
                            {
                                using (var trans = con.BeginTransaction())
                                {
                                    try
                                    {
                                        var count = 0;
                                        var empleado = 0;
                                        var usuarioSigoplan = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                                        if (usuarioSigoplan != null)
                                        {
                                            empleado = usuarioSigoplan.empleado;
                                        }

                                        var compraEK = consultaCheckProductivo(
                                            string.Format(@"SELECT * FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", cc, numero)
                                        );

                                        if (compraEK != null)
                                        {
                                            var compra = ((List<dynamic>)compraEK.ToObject<List<dynamic>>())[0];

                                            if ((string)compra.vobo_aut == "N" && (string)compra.aut_aut == "N")
                                            {
                                                throw new Exception("La compra no está autorizada");
                                            }

                                            if ((string)compra.st_impresa == "I")
                                            {
                                                vSesiones.sesionVersionCompraOriginal = false;
                                            }
                                            else
                                            {
                                                var compradores = _context.tblCom_Comprador.Where(x => x.estatus).Select(x => x.usuarioSIGOPLAN).ToList();
                                                var compradoresAdmin = _context.tblCom_Comprador_Admin.Where(x => x.estatus).Select(x => x.idUsuario).ToList();

                                                if (usuarioSigoplan.empleado != 1 && vSesiones.sesionCurrentView != 7260) //Usuario que no sea admin de Enkontrol y que no venga de la vista de "entrada por compra" en almacén.
                                                {
                                                    if (!compradores.Contains(vSesiones.sesionUsuarioDTO.id) && !compradoresAdmin.Contains(vSesiones.sesionUsuarioDTO.id)) //Usuario que no sea comprador ni comprador admin.
                                                    {
                                                        throw new Exception("Su usuario no es comprador. No puede imprimir la copia original de la compra.");
                                                    }
                                                }

                                                vSesiones.sesionVersionCompraOriginal = true;

                                                var consultaUpdateCompra = @"
                                                                UPDATE DBA.so_orden_compra 
                                                                SET 
                                                                    st_impresa = ? 
                                                                WHERE cc = ? AND numero = ?";

                                                using (var cmd = new OdbcCommand(consultaUpdateCompra))
                                                {
                                                    OdbcParameterCollection parameters = cmd.Parameters;

                                                    parameters.Add("@st_impresa", OdbcType.Char).Value = "I";

                                                    parameters.Add("@cc", OdbcType.Char).Value = (string)compra.cc;
                                                    parameters.Add("@numero", OdbcType.Numeric).Value = (int)compra.numero;

                                                    cmd.Connection = trans.Connection;
                                                    cmd.Transaction = trans;

                                                    count += cmd.ExecuteNonQuery();
                                                }

                                                var compraSIGOPLAN = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.estatusRegistro && x.cc == cc && x.numero == numero);

                                                if (compraSIGOPLAN != null)
                                                {
                                                    compraSIGOPLAN.st_impresa = "I";
                                                    _context.SaveChanges();
                                                }

                                                //Si la compra es "Autorecepcionable" se hace una entrada directa al almacén 999.
                                                if ((string)compra.bit_autorecepcion == "S")
                                                {
                                                    //No se le resta lo de retenciones. Por lo tanto, le sumo las retenciones al total.
                                                    var totalRecibido =
                                                        Convert.ToDecimal(compra.total, CultureInfo.InvariantCulture) + Convert.ToDecimal(compra.rentencion_despues_iva, CultureInfo.InvariantCulture);

                                                    #region Update Compra Recibido
                                                    var consultaUpdateCompraRecibido = @"
                                                                UPDATE DBA.so_orden_compra 
                                                                SET 
                                                                    sub_tot_rec = ?, 
                                                                    iva_rec = ?, 
                                                                    total_rec = ?, 
                                                                    estatus = ? 
                                                                WHERE cc = ? AND numero = ?";

                                                    using (var cmd = new OdbcCommand(consultaUpdateCompraRecibido))
                                                    {
                                                        OdbcParameterCollection parameters = cmd.Parameters;

                                                        parameters.Add("@sub_tot_rec", OdbcType.Numeric).Value = Convert.ToDecimal(compra.sub_total, CultureInfo.InvariantCulture);
                                                        parameters.Add("@iva_rec", OdbcType.Numeric).Value = Convert.ToDecimal(compra.iva, CultureInfo.InvariantCulture);
                                                        parameters.Add("@total_rec", OdbcType.Numeric).Value = totalRecibido;
                                                        parameters.Add("@estatus", OdbcType.Char).Value = "T";

                                                        parameters.Add("@cc", OdbcType.Char).Value = (string)compra.cc;
                                                        parameters.Add("@numero", OdbcType.Numeric).Value = (int)compra.numero;

                                                        cmd.Connection = trans.Connection;
                                                        cmd.Transaction = trans;

                                                        count += cmd.ExecuteNonQuery();
                                                    }
                                                    #endregion

                                                    var compraDetalleEK = consultaCheckProductivo(
                                                        string.Format(@"SELECT 
                                                                * 
                                                            FROM so_orden_compra_det 
                                                            WHERE cc = '{0}' AND numero = {1} AND (cantidad - cant_canc) > 0", (string)compra.cc, (int)compra.numero)
                                                    );

                                                    if (compraDetalleEK != null)
                                                    {
                                                        var compraDetalle = (List<OrdenCompraDetDTO>)compraDetalleEK.ToObject<List<OrdenCompraDetDTO>>();
                                                        var flagSinRequisicion = false;

                                                        if (compraDetalle.Any(x => x.num_requisicion == 0))
                                                        {
                                                            flagSinRequisicion = true;
                                                        }

                                                        var ultimoMovimiento = (List<SurtidoDetDTO>)consultaCheckProductivo(
                                                            string.Format(@"SELECT TOP 1 
                                                                    remision AS numero 
                                                                FROM so_movimientos_noinv 
                                                                WHERE almacen = {0} AND tipo_mov = {1} 
                                                                ORDER BY remision DESC", 999, 1)
                                                        ).ToObject<List<SurtidoDetDTO>>();

                                                        #region Insert Movimiento
                                                        if (!flagSinRequisicion)
                                                        {
                                                            if (Convert.ToDecimal(compra.total, CultureInfo.InvariantCulture) <= 0)
                                                            {
                                                                throw new Exception("El total no puede ser igual o menor a cero.");
                                                            }
                                                        }

                                                        var consultaMovimientos = @"INSERT INTO DBA.so_movimientos_noinv 
                                                    (almacen, tipo_mov, remision, cc, compania, periodo, ano, orden_ct, frente, fecha, proveedor, total, estatus, 
                                                    transferida, poliza, empleado, alm_destino, cc_destino, comentarios, tipo_trasp, numero_destino, tp, year_poliza, 
                                                    mes_poliza, tipo_cambio, hora, fecha_modifica, empleado_modifica, tc_cc, factura) 
                                                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

                                                        using (var cmd = new OdbcCommand(consultaMovimientos))
                                                        {
                                                            OdbcParameterCollection parameters = cmd.Parameters;

                                                            parameters.Add("@almacen", OdbcType.Numeric).Value = 999;
                                                            parameters.Add("@tipo_mov", OdbcType.Numeric).Value = 1;
                                                            parameters.Add("@remision", OdbcType.Numeric).Value = ultimoMovimiento[0].numero + 1;
                                                            parameters.Add("@cc", OdbcType.Char).Value = ((string)compra.cc).ToUpper();
                                                            parameters.Add("@compania", OdbcType.Numeric).Value = 1;
                                                            parameters.Add("@periodo", OdbcType.Numeric).Value = DateTime.Now.Month;
                                                            parameters.Add("@ano", OdbcType.Numeric).Value = DateTime.Now.Year;
                                                            parameters.Add("@orden_ct", OdbcType.Numeric).Value = (int)compra.numero;
                                                            parameters.Add("@frente", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@fecha", OdbcType.Date).Value = DateTime.Now.Date;
                                                            parameters.Add("@proveedor", OdbcType.Numeric).Value = (int)compra.proveedor;
                                                            parameters.Add("@total", OdbcType.Numeric).Value = Convert.ToDecimal(compra.total, CultureInfo.InvariantCulture);
                                                            parameters.Add("@estatus", OdbcType.Char).Value = "A";
                                                            parameters.Add("@transferida", OdbcType.Char).Value = "N";
                                                            parameters.Add("@poliza", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@empleado", OdbcType.Numeric).Value = empleado;
                                                            parameters.Add("@alm_destino", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@cc_destino", OdbcType.Char).Value = " ";
                                                            parameters.Add("@comentarios", OdbcType.Char).Value = "";
                                                            parameters.Add("@tipo_trasp", OdbcType.Char).Value = "0";
                                                            parameters.Add("@numero_destino", OdbcType.Numeric).Value = DBNull.Value;
                                                            parameters.Add("@tp", OdbcType.Char).Value = DBNull.Value;
                                                            parameters.Add("@year_poliza", OdbcType.Numeric).Value = DBNull.Value;
                                                            parameters.Add("@mes_poliza", OdbcType.Numeric).Value = DBNull.Value;
                                                            parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = Convert.ToDecimal(compra.tipo_cambio, CultureInfo.InvariantCulture);
                                                            parameters.Add("@hora", OdbcType.Time).Value = DateTime.Now.TimeOfDay;
                                                            parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                                            parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = empleado;
                                                            parameters.Add("@tc_cc", OdbcType.Numeric).Value = 1;
                                                            parameters.Add("@factura", OdbcType.VarChar).Value = DBNull.Value;

                                                            cmd.Connection = trans.Connection;
                                                            cmd.Transaction = trans;

                                                            count += cmd.ExecuteNonQuery();
                                                        }
                                                        #endregion

                                                        foreach (var compDet in compraDetalle)
                                                        {
                                                            #region Update Compra Detalle Recibido
                                                            var consultaUpdateCompraDetalleRecibido = @"
                                                                UPDATE DBA.so_orden_compra_det 
                                                                SET 
                                                                    cant_recibida = ?, 
                                                                    imp_recibido = ?, 
                                                                    fecha_recibido = ? 
                                                                WHERE cc = ? AND numero = ? AND partida = ? AND insumo = ?";

                                                            using (var cmd = new OdbcCommand(consultaUpdateCompraDetalleRecibido))
                                                            {
                                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                                parameters.Add("@cant_recibida", OdbcType.Numeric).Value = compDet.cantidad;
                                                                parameters.Add("@imp_recibido", OdbcType.Numeric).Value = compDet.cantidad * compDet.precio;
                                                                parameters.Add("@fecha_recibido", OdbcType.Date).Value = DateTime.Now.Date;

                                                                parameters.Add("@cc", OdbcType.Char).Value = (string)compra.cc;
                                                                parameters.Add("@numero", OdbcType.Numeric).Value = (int)compra.numero;
                                                                parameters.Add("@partida", OdbcType.Numeric).Value = compDet.partida;
                                                                parameters.Add("@insumo", OdbcType.Numeric).Value = compDet.insumo;

                                                                cmd.Connection = trans.Connection;
                                                                cmd.Transaction = trans;

                                                                count += cmd.ExecuteNonQuery();
                                                            }
                                                            #endregion

                                                            #region Insert Movimiendo Detalle
                                                            var importe = compDet.cantidad * compDet.precio;

                                                            if (!flagSinRequisicion)
                                                            {
                                                                if (compDet.precio <= 0 || importe <= 0)
                                                                {
                                                                    throw new Exception("El precio y el importe no pueden ser igual o menor a cero.");
                                                                }
                                                            }

                                                            var consultaMovimientosDetalle = @"INSERT INTO DBA.so_movimientos_noinv_det 
                                                        (almacen, tipo_mov, remision, partida, insumo, comentarios, area, cuenta, cantidad, precio, importe, partida_oc, costo_prom, remision2, iva, porcent_iva) 
                                                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

                                                            using (var cmd = new OdbcCommand(consultaMovimientosDetalle))
                                                            {
                                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                                parameters.Add("@almacen", OdbcType.Numeric).Value = 999;
                                                                parameters.Add("@tipo_mov", OdbcType.Numeric).Value = 1;
                                                                parameters.Add("@remision", OdbcType.Numeric).Value = ultimoMovimiento[0].numero + 1;
                                                                parameters.Add("@partida", OdbcType.Numeric).Value = compDet.partida;
                                                                parameters.Add("@insumo", OdbcType.Numeric).Value = compDet.insumo;
                                                                parameters.Add("@comentarios", OdbcType.Char).Value = "";
                                                                parameters.Add("@area", OdbcType.Numeric).Value = compDet.area ?? (object)DBNull.Value;
                                                                parameters.Add("@cuenta", OdbcType.Numeric).Value = compDet.cuenta ?? (object)DBNull.Value;
                                                                parameters.Add("@cantidad", OdbcType.Numeric).Value = compDet.cantidad;
                                                                parameters.Add("@precio", OdbcType.Numeric).Value = compDet.precio;
                                                                parameters.Add("@importe", OdbcType.Numeric).Value = importe;
                                                                parameters.Add("@partida_oc", OdbcType.Numeric).Value = compDet.partida;
                                                                parameters.Add("@costo_prom", OdbcType.Numeric).Value = DBNull.Value;
                                                                parameters.Add("@remision2", OdbcType.Char).Value = ultimoMovimiento[0].numero + 1;
                                                                parameters.Add("@iva", OdbcType.Numeric).Value = compDet.iva;
                                                                parameters.Add("@porcent_iva", OdbcType.Numeric).Value = compDet.porcent_iva;

                                                                cmd.Connection = trans.Connection;
                                                                cmd.Transaction = trans;

                                                                count += cmd.ExecuteNonQuery();
                                                            }
                                                            #endregion

                                                            #region Actualizar Explosión
                                                            var registroExplosionEK = consultaCheckProductivo(
                                                                string.Format(@"SELECT * FROM so_explos_mat WHERE cc = '{0}' AND insumo = {1} AND year_explos = {2}", compra.cc, compDet.insumo, DateTime.Now.Year)
                                                            );

                                                            if (registroExplosionEK != null)
                                                            {
                                                                var registroExplosion = ((List<dynamic>)registroExplosionEK.ToObject<List<dynamic>>())[0];

                                                                var nuevaCantidadRecibida = Convert.ToDecimal(registroExplosion.cant_recibida, CultureInfo.InvariantCulture) + compDet.cantidad;
                                                                var nuevoImporteRecibido = Convert.ToDecimal(registroExplosion.imp_recibido, CultureInfo.InvariantCulture) + (compDet.cantidad * compDet.precio);

                                                                var consultaExplosionUpdate = @"
                                                        UPDATE DBA.so_explos_mat 
                                                        SET cant_recibida = ?, imp_recibido = ? 
                                                        WHERE cc = ? AND insumo = ? AND year_explos = ?";

                                                                using (var cmd = new OdbcCommand(consultaExplosionUpdate))
                                                                {
                                                                    OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                                    parametersExplosion.Add("@cant_recibida", OdbcType.Numeric).Value = nuevaCantidadRecibida;
                                                                    parametersExplosion.Add("@imp_recibido", OdbcType.Numeric).Value = nuevoImporteRecibido;

                                                                    parametersExplosion.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                                    parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = compDet.insumo;
                                                                    parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;

                                                                    cmd.Connection = trans.Connection;
                                                                    cmd.Transaction = trans;

                                                                    count += cmd.ExecuteNonQuery();
                                                                }
                                                            }
                                                            else
                                                            {
                                                                var consultaExplosionInsert = @"INSERT INTO DBA.so_explos_mat 
                                                        (cc, insumo, cantidad, precio, aditiva_cant, aditiva_imp, deduc_cant, deduc_imp, cant_requerida, 
                                                        comp_cant, comp_imp, ajuste_cant, ajuste_imp, traspaso_cant, traspaso_imp, cant_recibida, imp_recibido, 
                                                        aditiva_cant_fecha, deduc_cant_fecha, aditiva_precio_fecha, deduc_precio_fecha, aditiva_precio, deductiva_precio, 
                                                        traspaso_cant_entrada, traspaso_imp_entrada, importe, year_explos, periodo, bit_auto_presu, cantidad_aditiva_sun, 
                                                        cantidad_deductiva_sun, cantidad_extra_sun) 
                                                        VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                                                using (var cmd = new OdbcCommand(consultaExplosionInsert))
                                                                {
                                                                    OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                                    parametersExplosion.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                                    parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = compDet.insumo;
                                                                    parametersExplosion.Add("@cantidad", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@precio", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@aditiva_cant", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@aditiva_imp", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@deduc_cant", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@deduc_imp", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@cant_requerida", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@comp_cant", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@comp_imp", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@ajuste_cant", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@ajuste_imp", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@traspaso_cant", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@traspaso_imp", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@cant_recibida", OdbcType.Numeric).Value = compDet.cantidad;
                                                                    parametersExplosion.Add("@imp_recibido", OdbcType.Numeric).Value = (compDet.cantidad * compDet.precio);
                                                                    parametersExplosion.Add("@aditiva_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                                                    parametersExplosion.Add("@deduc_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                                                    parametersExplosion.Add("@aditiva_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                                                    parametersExplosion.Add("@deduc_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                                                    parametersExplosion.Add("@aditiva_precio", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@deductiva_precio", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@traspaso_cant_entrada", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@traspaso_imp_entrada", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@importe", OdbcType.Numeric).Value = DBNull.Value;
                                                                    parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;
                                                                    parametersExplosion.Add("@periodo", OdbcType.Char).Value = DBNull.Value;
                                                                    parametersExplosion.Add("@bit_auto_presu", OdbcType.Char).Value = "N";
                                                                    parametersExplosion.Add("@cantidad_aditiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                                                    parametersExplosion.Add("@cantidad_deductiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                                                    parametersExplosion.Add("@cantidad_extra_sun", OdbcType.Numeric).Value = DBNull.Value;

                                                                    cmd.Connection = trans.Connection;
                                                                    cmd.Transaction = trans;

                                                                    count += cmd.ExecuteNonQuery();
                                                                }
                                                            }
                                                            #endregion
                                                        }
                                                    }
                                                    else
                                                    {
                                                        throw new Exception("Error al generar el movimiento de entrada para la compra auto recepcionable.");
                                                    }
                                                }

                                                trans.Commit();
                                                dbSigoplanTransaction.Commit();
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("No se encuentra la información de la compra.");
                                        }

                                        result.Add(SUCCESS, true);
                                    }
                                    catch (Exception e)
                                    {
                                        trans.Rollback();
                                        dbSigoplanTransaction.Rollback();
                                        var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                                        LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                                        result.Add(MESSAGE, e.Message);
                                        result.Add(SUCCESS, false);
                                    }
                                }
                            }
                        }
                        #endregion
                        break;
                    }
                default:
                    {
                        #region Compras México
                        using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                        {
                            using (var con = checkConexionProductivo())
                            {
                                using (var trans = con.BeginTransaction())
                                {
                                    try
                                    {
                                        var count = 0;
                                        var empleado = 0;
                                        var usuarioSigoplan = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                                        if (usuarioSigoplan != null)
                                        {
                                            empleado = usuarioSigoplan.empleado;
                                        }

                                        var compraEK = consultaCheckProductivo(
                                            string.Format(@"SELECT * FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", cc, numero)
                                        );

                                        if (compraEK != null)
                                        {
                                            var compra = ((List<dynamic>)compraEK.ToObject<List<dynamic>>())[0];

                                            if (compra.ST_OC.Value == null)
                                            {
                                                throw new Exception("La compra no está autorizada");
                                            }
                                            else
                                            {
                                                if ((string)compra.ST_OC != "A")
                                                {
                                                    throw new Exception("La compra no está autorizada");
                                                }
                                            }

                                            if ((string)compra.st_impresa == "I")
                                            {
                                                vSesiones.sesionVersionCompraOriginal = false;
                                            }
                                            else
                                            {
                                                var compradores = _context.tblCom_Comprador.Where(x => x.estatus).Select(x => x.usuarioSIGOPLAN).ToList();
                                                var compradoresAdmin = _context.tblCom_Comprador_Admin.Where(x => x.estatus).Select(x => x.idUsuario).ToList();

                                                if (usuarioSigoplan.empleado != 1 && vSesiones.sesionCurrentView != 7260) //Usuario que no sea admin de Enkontrol y que no venga de la vista de "entrada por compra" en almacén.
                                                {
                                                    if (!compradores.Contains(vSesiones.sesionUsuarioDTO.id) && !compradoresAdmin.Contains(vSesiones.sesionUsuarioDTO.id)) //Usuario que no sea comprador ni comprador admin.
                                                    {
                                                        throw new Exception("Su usuario no es comprador. No puede imprimir la copia original de la compra.");
                                                    }
                                                }

                                                vSesiones.sesionVersionCompraOriginal = true;

                                                var consultaUpdateCompra = @"
                                                                UPDATE so_orden_compra 
                                                                SET 
                                                                    st_impresa = ? 
                                                                WHERE cc = ? AND numero = ?";

                                                using (var cmd = new OdbcCommand(consultaUpdateCompra))
                                                {
                                                    OdbcParameterCollection parameters = cmd.Parameters;

                                                    parameters.Add("@st_impresa", OdbcType.Char).Value = "I";

                                                    parameters.Add("@cc", OdbcType.Char).Value = (string)compra.cc;
                                                    parameters.Add("@numero", OdbcType.Numeric).Value = (int)compra.numero;

                                                    cmd.Connection = trans.Connection;
                                                    cmd.Transaction = trans;

                                                    count += cmd.ExecuteNonQuery();
                                                }

                                                var compraSIGOPLAN = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.estatusRegistro && x.cc == cc && x.numero == numero);

                                                if (compraSIGOPLAN != null)
                                                {
                                                    compraSIGOPLAN.st_impresa = "I";
                                                    _context.SaveChanges();
                                                }

                                                //Si la compra es "Autorecepcionable" se hace una entrada directa al almacén 999.
                                                if ((string)compra.bit_autorecepcion == "S")
                                                {
                                                    //No se le resta lo de retenciones. Por lo tanto, le sumo las retenciones al total.
                                                    var totalRecibido =
                                                        Convert.ToDecimal(compra.total, CultureInfo.InvariantCulture) + Convert.ToDecimal(compra.rentencion_despues_iva, CultureInfo.InvariantCulture);

                                                    #region Update Compra Recibido
                                                    var consultaUpdateCompraRecibido = @"
                                                                UPDATE so_orden_compra 
                                                                SET 
                                                                    sub_tot_rec = ?, 
                                                                    iva_rec = ?, 
                                                                    total_rec = ?, 
                                                                    estatus = ? 
                                                                WHERE cc = ? AND numero = ?";

                                                    using (var cmd = new OdbcCommand(consultaUpdateCompraRecibido))
                                                    {
                                                        OdbcParameterCollection parameters = cmd.Parameters;

                                                        parameters.Add("@sub_tot_rec", OdbcType.Numeric).Value = Convert.ToDecimal(compra.sub_total, CultureInfo.InvariantCulture);
                                                        parameters.Add("@iva_rec", OdbcType.Numeric).Value = Convert.ToDecimal(compra.iva, CultureInfo.InvariantCulture);
                                                        parameters.Add("@total_rec", OdbcType.Numeric).Value = totalRecibido;
                                                        parameters.Add("@estatus", OdbcType.Char).Value = "T";

                                                        parameters.Add("@cc", OdbcType.Char).Value = (string)compra.cc;
                                                        parameters.Add("@numero", OdbcType.Numeric).Value = (int)compra.numero;

                                                        cmd.Connection = trans.Connection;
                                                        cmd.Transaction = trans;

                                                        count += cmd.ExecuteNonQuery();
                                                    }
                                                    #endregion

                                                    var compraDetalleEK = consultaCheckProductivo(
                                                        string.Format(@"SELECT 
                                                                * 
                                                            FROM so_orden_compra_det 
                                                            WHERE cc = '{0}' AND numero = {1} AND (cantidad - cant_canc) > 0", (string)compra.cc, (int)compra.numero)
                                                    );

                                                    if (compraDetalleEK != null)
                                                    {
                                                        var compraDetalle = (List<OrdenCompraDetDTO>)compraDetalleEK.ToObject<List<OrdenCompraDetDTO>>();
                                                        var flagSinRequisicion = false;

                                                        if (compraDetalle.Any(x => x.num_requisicion == 0))
                                                        {
                                                            flagSinRequisicion = true;
                                                        }

                                                        List<SurtidoDetDTO> ultimoMovimiento = new List<SurtidoDetDTO>();
                                                        try
                                                        {
                                                            ultimoMovimiento = (List<SurtidoDetDTO>)consultaCheckProductivo(
                                                                string.Format(@"SELECT TOP 1 
                                                                    remision AS numero 
                                                                    FROM so_movimientos_noinv 
                                                                    WHERE almacen = {0} AND tipo_mov = {1} 
                                                                    ORDER BY remision DESC", 999, 1)
                                                                ).ToObject<List<SurtidoDetDTO>>();
                                                        }
                                                        catch (Exception)
                                                        {
                                                            SurtidoDetDTO obj = new SurtidoDetDTO();
                                                            obj.numero = 0;
                                                            ultimoMovimiento.Add(obj);
                                                        }

                                                        #region Insert Movimiento
                                                        if (!flagSinRequisicion)
                                                        {
                                                            if (Convert.ToDecimal(compra.total, CultureInfo.InvariantCulture) <= 0)
                                                            {
                                                                throw new Exception("El total no puede ser igual o menor a cero.");
                                                            }
                                                        }

                                                        var consultaMovimientos = @"INSERT INTO so_movimientos_noinv 
                                                    (almacen, tipo_mov, remision, cc, compania, periodo, ano, orden_ct, frente, fecha, proveedor, total, estatus, 
                                                    transferida, poliza, empleado, alm_destino, cc_destino, comentarios, tipo_trasp, numero_destino, tp, year_poliza, 
                                                    mes_poliza, tipo_cambio, hora, fecha_modifica, empleado_modifica, tc_cc, remision_b2b) 
                                                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

                                                        using (var cmd = new OdbcCommand(consultaMovimientos))
                                                        {
                                                            OdbcParameterCollection parameters = cmd.Parameters;

                                                            parameters.Add("@almacen", OdbcType.Numeric).Value = 999;
                                                            parameters.Add("@tipo_mov", OdbcType.Numeric).Value = 1;
                                                            parameters.Add("@remision", OdbcType.Numeric).Value = ultimoMovimiento[0].numero + 1;
                                                            parameters.Add("@cc", OdbcType.Char).Value = ((string)compra.cc).ToUpper();
                                                            parameters.Add("@compania", OdbcType.Numeric).Value = 1;
                                                            parameters.Add("@periodo", OdbcType.Numeric).Value = DateTime.Now.Month;
                                                            parameters.Add("@ano", OdbcType.Numeric).Value = DateTime.Now.Year;
                                                            parameters.Add("@orden_ct", OdbcType.Numeric).Value = (int)compra.numero;
                                                            parameters.Add("@frente", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@fecha", OdbcType.Date).Value = DateTime.Now.Date;
                                                            parameters.Add("@proveedor", OdbcType.Numeric).Value = (int)compra.proveedor;
                                                            parameters.Add("@total", OdbcType.Numeric).Value = Convert.ToDecimal(compra.total, CultureInfo.InvariantCulture);
                                                            parameters.Add("@estatus", OdbcType.Char).Value = "A";
                                                            parameters.Add("@transferida", OdbcType.Char).Value = "N";
                                                            parameters.Add("@poliza", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@empleado", OdbcType.Numeric).Value = empleado;
                                                            parameters.Add("@alm_destino", OdbcType.Numeric).Value = 0;
                                                            parameters.Add("@cc_destino", OdbcType.Char).Value = " ";
                                                            parameters.Add("@comentarios", OdbcType.Char).Value = "";
                                                            parameters.Add("@tipo_trasp", OdbcType.Char).Value = "0";
                                                            parameters.Add("@numero_destino", OdbcType.Numeric).Value = DBNull.Value;
                                                            parameters.Add("@tp", OdbcType.Char).Value = DBNull.Value;
                                                            parameters.Add("@year_poliza", OdbcType.Numeric).Value = DBNull.Value;
                                                            parameters.Add("@mes_poliza", OdbcType.Numeric).Value = DBNull.Value;
                                                            parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = Convert.ToDecimal(compra.tipo_cambio, CultureInfo.InvariantCulture);
                                                            parameters.Add("@hora", OdbcType.Time).Value = DateTime.Now.TimeOfDay;
                                                            parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                                            parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = empleado;
                                                            parameters.Add("@tc_cc", OdbcType.Numeric).Value = 1;
                                                            parameters.Add("@remision_b2b", OdbcType.VarChar).Value = DBNull.Value;

                                                            cmd.Connection = trans.Connection;
                                                            cmd.Transaction = trans;

                                                            count += cmd.ExecuteNonQuery();
                                                        }
                                                        #endregion

                                                        foreach (var compDet in compraDetalle)
                                                        {
                                                            #region Update Compra Detalle Recibido
                                                            var consultaUpdateCompraDetalleRecibido = @"
                                                                UPDATE so_orden_compra_det 
                                                                SET 
                                                                    cant_recibida = ?, 
                                                                    imp_recibido = ?, 
                                                                    fecha_recibido = ? 
                                                                WHERE cc = ? AND numero = ? AND partida = ? AND insumo = ?";

                                                            using (var cmd = new OdbcCommand(consultaUpdateCompraDetalleRecibido))
                                                            {
                                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                                parameters.Add("@cant_recibida", OdbcType.Numeric).Value = compDet.cantidad;
                                                                parameters.Add("@imp_recibido", OdbcType.Numeric).Value = compDet.cantidad * compDet.precio;
                                                                parameters.Add("@fecha_recibido", OdbcType.Date).Value = DateTime.Now.Date;

                                                                parameters.Add("@cc", OdbcType.Char).Value = (string)compra.cc;
                                                                parameters.Add("@numero", OdbcType.Numeric).Value = (int)compra.numero;
                                                                parameters.Add("@partida", OdbcType.Numeric).Value = compDet.partida;
                                                                parameters.Add("@insumo", OdbcType.Numeric).Value = compDet.insumo;

                                                                cmd.Connection = trans.Connection;
                                                                cmd.Transaction = trans;

                                                                count += cmd.ExecuteNonQuery();
                                                            }
                                                            #endregion

                                                            #region Insert Movimiendo Detalle
                                                            var importe = compDet.cantidad * compDet.precio;

                                                            if (!flagSinRequisicion)
                                                            {
                                                                if (compDet.precio <= 0 || importe <= 0)
                                                                {
                                                                    throw new Exception("El precio y el importe no pueden ser igual o menor a cero.");
                                                                }
                                                            }

                                                            var consultaMovimientosDetalle = @"INSERT INTO so_movimientos_noinv_det 
                                                        (almacen, tipo_mov, remision, partida, insumo, comentarios, area, cuenta, cantidad, precio, importe, partida_oc, costo_prom, remision2) 
                                                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

                                                            using (var cmd = new OdbcCommand(consultaMovimientosDetalle))
                                                            {
                                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                                parameters.Add("@almacen", OdbcType.Numeric).Value = 999;
                                                                parameters.Add("@tipo_mov", OdbcType.Numeric).Value = 1;
                                                                parameters.Add("@remision", OdbcType.Numeric).Value = ultimoMovimiento[0].numero + 1;
                                                                parameters.Add("@partida", OdbcType.Numeric).Value = compDet.partida;
                                                                parameters.Add("@insumo", OdbcType.Numeric).Value = compDet.insumo;
                                                                parameters.Add("@comentarios", OdbcType.Char).Value = "";
                                                                parameters.Add("@area", OdbcType.Numeric).Value = compDet.area ?? (object)DBNull.Value;
                                                                parameters.Add("@cuenta", OdbcType.Numeric).Value = compDet.cuenta ?? (object)DBNull.Value;
                                                                parameters.Add("@cantidad", OdbcType.Numeric).Value = compDet.cantidad;
                                                                parameters.Add("@precio", OdbcType.Numeric).Value = compDet.precio;
                                                                parameters.Add("@importe", OdbcType.Numeric).Value = importe;
                                                                parameters.Add("@partida_oc", OdbcType.Numeric).Value = compDet.partida;
                                                                parameters.Add("@costo_prom", OdbcType.Numeric).Value = DBNull.Value;
                                                                parameters.Add("@remision2", OdbcType.Char).Value = ultimoMovimiento[0].numero + 1;

                                                                cmd.Connection = trans.Connection;
                                                                cmd.Transaction = trans;

                                                                count += cmd.ExecuteNonQuery();
                                                            }
                                                            #endregion

                                                            #region Actualizar Explosión
                                                            var registroExplosionEK = consultaCheckProductivo(
                                                                string.Format(@"SELECT * FROM so_explos_mat WHERE cc = '{0}' AND insumo = {1} AND year_explos = {2}", compra.cc, compDet.insumo, DateTime.Now.Year)
                                                            );

                                                            if (registroExplosionEK != null)
                                                            {
                                                                var registroExplosion = ((List<dynamic>)registroExplosionEK.ToObject<List<dynamic>>())[0];

                                                                var nuevaCantidadRecibida = Convert.ToDecimal(registroExplosion.cant_recibida, CultureInfo.InvariantCulture) + compDet.cantidad;
                                                                var nuevoImporteRecibido = Convert.ToDecimal(registroExplosion.imp_recibido, CultureInfo.InvariantCulture) + (compDet.cantidad * compDet.precio);

                                                                var consultaExplosionUpdate = @"
                                                        UPDATE so_explos_mat 
                                                        SET cant_recibida = ?, imp_recibido = ? 
                                                        WHERE cc = ? AND insumo = ? AND year_explos = ?";

                                                                using (var cmd = new OdbcCommand(consultaExplosionUpdate))
                                                                {
                                                                    OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                                    parametersExplosion.Add("@cant_recibida", OdbcType.Numeric).Value = nuevaCantidadRecibida;
                                                                    parametersExplosion.Add("@imp_recibido", OdbcType.Numeric).Value = nuevoImporteRecibido;

                                                                    parametersExplosion.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                                    parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = compDet.insumo;
                                                                    parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;

                                                                    cmd.Connection = trans.Connection;
                                                                    cmd.Transaction = trans;

                                                                    count += cmd.ExecuteNonQuery();
                                                                }
                                                            }
                                                            else
                                                            {
                                                                var consultaExplosionInsert = @"INSERT INTO so_explos_mat 
                                                        (cc, insumo, cantidad, precio, aditiva_cant, aditiva_imp, deduc_cant, deduc_imp, cant_requerida, 
                                                        comp_cant, comp_imp, ajuste_cant, ajuste_imp, traspaso_cant, traspaso_imp, cant_recibida, imp_recibido, 
                                                        aditiva_cant_fecha, deduc_cant_fecha, aditiva_precio_fecha, deduc_precio_fecha, aditiva_precio, deductiva_precio, 
                                                        traspaso_cant_entrada, traspaso_imp_entrada, importe, year_explos, periodo, bit_auto_presu, cantidad_aditiva_sun, 
                                                        cantidad_deductiva_sun, cantidad_extra_sun) 
                                                        VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                                                using (var cmd = new OdbcCommand(consultaExplosionInsert))
                                                                {
                                                                    OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                                    parametersExplosion.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                                    parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = compDet.insumo;
                                                                    parametersExplosion.Add("@cantidad", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@precio", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@aditiva_cant", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@aditiva_imp", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@deduc_cant", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@deduc_imp", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@cant_requerida", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@comp_cant", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@comp_imp", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@ajuste_cant", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@ajuste_imp", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@traspaso_cant", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@traspaso_imp", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@cant_recibida", OdbcType.Numeric).Value = compDet.cantidad;
                                                                    parametersExplosion.Add("@imp_recibido", OdbcType.Numeric).Value = (compDet.cantidad * compDet.precio);
                                                                    parametersExplosion.Add("@aditiva_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                                                    parametersExplosion.Add("@deduc_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                                                    parametersExplosion.Add("@aditiva_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                                                    parametersExplosion.Add("@deduc_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                                                    parametersExplosion.Add("@aditiva_precio", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@deductiva_precio", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@traspaso_cant_entrada", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@traspaso_imp_entrada", OdbcType.Numeric).Value = 0;
                                                                    parametersExplosion.Add("@importe", OdbcType.Numeric).Value = DBNull.Value;
                                                                    parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;
                                                                    parametersExplosion.Add("@periodo", OdbcType.Char).Value = DBNull.Value;
                                                                    parametersExplosion.Add("@bit_auto_presu", OdbcType.Char).Value = "N";
                                                                    parametersExplosion.Add("@cantidad_aditiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                                                    parametersExplosion.Add("@cantidad_deductiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                                                    parametersExplosion.Add("@cantidad_extra_sun", OdbcType.Numeric).Value = DBNull.Value;

                                                                    cmd.Connection = trans.Connection;
                                                                    cmd.Transaction = trans;

                                                                    count += cmd.ExecuteNonQuery();
                                                                }
                                                            }
                                                            #endregion
                                                        }
                                                    }
                                                    else
                                                    {
                                                        throw new Exception("Error al generar el movimiento de entrada para la compra auto recepcionable.");
                                                    }
                                                }

                                                trans.Commit();
                                                dbSigoplanTransaction.Commit();
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("No se encuentra la información de la compra.");
                                        }

                                        result.Add(SUCCESS, true);
                                    }
                                    catch (Exception e)
                                    {
                                        trans.Rollback();
                                        dbSigoplanTransaction.Rollback();
                                        var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                                        LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                                        result.Add(MESSAGE, e.Message);
                                        result.Add(SUCCESS, false);
                                    }
                                }
                            }
                        }
                        #endregion
                        break;
                    }
            }

            return result;
        }

        public Dictionary<string, object> checkEstatusOrdenCompraImpresaConsulta(string cc, int numero)
        {
            var result = new Dictionary<string, object>();

            if (vSesiones.sesionEmpresaActual != (int)EmpresaEnum.Peru)
            {
                try
                {
                    var empleado = 0;
                    var usuarioSigoplan = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

                    if (usuarioSigoplan != null)
                    {
                        empleado = usuarioSigoplan.empleado;
                    }

                    var compraEK = consultaCheckProductivo(
                        string.Format(@"SELECT * FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", cc, numero)
                    );

                    if (compraEK != null)
                    {
                        var compra = ((List<dynamic>)compraEK.ToObject<List<dynamic>>())[0];

                        if ((EmpresaEnum)vSesiones.sesionEmpresaActual != EmpresaEnum.Colombia)
                        {
                            if (compra.ST_OC.Value == null)
                            {
                                throw new Exception("La compra no está autorizada");
                            }
                            else
                            {
                                if ((string)compra.ST_OC != "A")
                                {
                                    throw new Exception("La compra no está autorizada");
                                }
                            }
                        }
                        else
                        {
                            if ((string)compra.vobo_aut == "N" && (string)compra.aut_aut == "N")
                            {
                                throw new Exception("La compra no está autorizada");
                            }
                        }

                        if ((string)compra.st_impresa == "I")
                        {
                            vSesiones.sesionVersionCompraOriginal = false;
                        }
                        else
                        {
                            var compradores = _context.tblCom_Comprador.Where(x => x.estatus).Select(x => x.usuarioSIGOPLAN).ToList();
                            var compradoresAdmin = _context.tblCom_Comprador_Admin.Where(x => x.estatus).Select(x => x.idUsuario).ToList();

                            if (usuarioSigoplan.empleado != 1 && vSesiones.sesionCurrentView != 7260) //Usuario que no sea admin de Enkontrol y que no venga de la vista de "entrada por compra" en almacén.
                            {
                                if (!compradores.Contains(vSesiones.sesionUsuarioDTO.id) && !compradoresAdmin.Contains(vSesiones.sesionUsuarioDTO.id)) //Usuario que no sea comprador ni comprador admin.
                                {
                                    throw new Exception("Su usuario no es comprador. No puede imprimir la copia original de la compra.");
                                }
                            }

                            vSesiones.sesionVersionCompraOriginal = true;
                        }
                    }
                    else
                    {
                        throw new Exception("No se encuentra la información de la compra.");
                    }

                    result.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                    result.Add(MESSAGE, e.Message);
                    result.Add(SUCCESS, false);
                }
            }

            return result;
        }

        public Dictionary<string, object> getContadorRequisicionesPendientes()
        {
            var result = new Dictionary<string, object>();
            try
            {
                var fechaInicio = new DateTime(DateTime.Now.Year, 1, 1);
                var fechaFin = DateTime.Now.Date;
                var count = getReqNoOCCount(fechaInicio, fechaFin);

                result.Add("data", count);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return result;
        }
        private int getReqNoOCCount(DateTime fechaInicio, DateTime fechaFin)
        {
            var consulta = new StoreProcedureDTO { nombre = "sp_Com_ReqNoOC_Count" };
            consulta.parametros.Add(new OdbcParameterDTO { nombre = "fechaInicio", tipoSql = SqlDbType.DateTime, valor = fechaInicio });
            consulta.parametros.Add(new OdbcParameterDTO { nombre = "fechaFin", tipoSql = SqlDbType.DateTime, valor = fechaFin });
            var lst = _context.sp_Select<int>(consulta);
            return lst.First();
        }
        public void borrarCompra(string cc, int numero, bool autorizante)
        {
            switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
            {
                case EmpresaEnum.Peru:
                    {
                        #region PERÚ
                        using (var dbContextTransaction = _context.Database.BeginTransaction())
                        {
                            using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                            {
                                using (var dbStarsoftTransaction = _starsoft.Database.BeginTransaction())
                                {
                                    try
                                    {
                                        var PERU_tipoCompra = "";
                                        if (HttpContext.Current.Session["servicioCompra"] != null && string.IsNullOrEmpty(PERU_tipoCompra))
                                        {
                                            if (!(bool)HttpContext.Current.Session["servicioCompra"]) //Vista Generar Compra
                                            {
                                                PERU_tipoCompra = "RQ";
                                            }
                                            else //Vista Generar Compra Servicio
                                            {
                                                PERU_tipoCompra = "RS";
                                            }
                                        }
                                        if (HttpContext.Current.Session["servicioCompraCuadroComparativo"] != null)
                                        {
                                            if (!(bool)HttpContext.Current.Session["servicioCompraCuadroComparativo"]) //Vista Generar Compra
                                            {
                                                PERU_tipoCompra = "RQ";
                                            }
                                            else //Vista Generar Compra Servicio
                                            {
                                                PERU_tipoCompra = "RS";
                                            }
                                        }
                                        #region VALIDACIONES
                                        if (string.IsNullOrEmpty(cc)) { throw new Exception("Ocurrió un error al eliminar la orden de compra."); }
                                        if (numero <= 0) { throw new Exception("Ocurrió un error al eliminar la orden de compra."); }
                                        #endregion

                                        #region ELIMINAR
                                        #region SE ELIMINA LA ORDEN DE COMPRA PRINCIPAL
                                        tblCom_OrdenCompra objOC = _context.tblCom_OrdenCompra.Where(w => w.cc == cc && w.numero == numero && w.PERU_tipoCompra == PERU_tipoCompra && w.estatusRegistro).FirstOrDefault();
                                        if (objOC == null)
                                            throw new Exception("Ocurrió un error.");

                                        //if ((objOC.ST_OC == "A" && vSesiones.sesionUsuarioDTO.idPerfil != (int)PerfilUsuarioEnum.ADMINISTRADOR) || (!_context.tblCom_Comprador_Admin.Any(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id && x.estatus)))
                                        //{
                                        //    throw new Exception("Solo el administrador puede realizar esta acción");
                                        //}

                                        objOC.estatusRegistro = false;
                                        objOC.empleadoUltimaAccion = (int)vSesiones.sesionUsuarioDTO.id;
                                        objOC.fechaUltimaAccion = DateTime.Now;
                                        _context.SaveChanges();
                                        #endregion

                                        #region SE ELIMINA EL DETALLE DE LA ORDEN DE COMPRA
                                        List<tblCom_OrdenCompraDet> lstOC = _context.tblCom_OrdenCompraDet.Where(w => w.idOrdenCompra == objOC.id && w.estatusRegistro).ToList();
                                        if (lstOC.Count() > 0)
                                        {
                                            foreach (var item in lstOC)
                                            {
                                                item.estatusRegistro = false;
                                            }
                                            _context.SaveChanges();

                                            #region SE ACTUALIZA REQUI
                                            var num_req = lstOC.First().num_requisicion;
                                            var requi = _context.tblCom_Req.FirstOrDefault(x => x.cc == objOC.cc && x.numero == num_req && x.PERU_tipoRequisicion == objOC.PERU_tipoCompra && x.estatusRegistro);
                                            if (requi != null)
                                            {
                                                requi.stEstatus = " ";
                                                _context.SaveChanges();

                                                var requiDet = _context.tblCom_ReqDet.Where(x => x.idReq == requi.id && x.estatusRegistro).ToList();
                                                foreach (var item in requiDet)
                                                {
                                                    var partidaOrdenCompra = lstOC.FirstOrDefault(x => x.part_requisicion == item.partida);
                                                    if (partidaOrdenCompra != null)
                                                    {
                                                        item.cantOrdenada = item.cantOrdenada - partidaOrdenCompra.cantidad;
                                                    }
                                                }
                                                _context.SaveChanges();
                                            }
                                            #endregion
                                        }
                                        #endregion

                                        #region ELIMINAR OC EN STARSOFT
                                        string numOC = numero.ToString().PadLeft(13, '0');
                                        if (objOC.PERU_tipoCompra == "RQ")
                                        {
                                            List<COMOVD> lstCompraDetalle = _starsoft.COMOVD.Where(w => w.OC_CNUMORD == numOC).ToList();
                                            _starsoft.COMOVD.RemoveRange(lstCompraDetalle);
                                            _starsoft.SaveChanges();

                                            COMOVC objCompraPrincipal = _starsoft.COMOVC.Where(w => w.OC_CNUMORD == numOC).FirstOrDefault();
                                            _starsoft.COMOVC.Remove(objCompraPrincipal);
                                            _starsoft.SaveChanges();
                                        }
                                        else if (objOC.PERU_tipoCompra == "RS")
                                        {
                                            List<COMOVD_S> lstCompraDetalle = _starsoft.COMOVD_S.Where(w => w.OC_CNUMORD == numOC).ToList();
                                            _starsoft.COMOVD_S.RemoveRange(lstCompraDetalle);
                                            _starsoft.SaveChanges();

                                            COMOVC_S objCompraPrincipal = _starsoft.COMOVC_S.Where(w => w.OC_CNUMORD == numOC).FirstOrDefault();
                                            _starsoft.COMOVC_S.Remove(objCompraPrincipal);
                                            _starsoft.SaveChanges();
                                        }
                                        #endregion

                                        dbContextTransaction.Commit();
                                        dbStarsoftTransaction.Commit();

                                        // SE REGISTRA BITACORA
                                        SaveBitacora(0, (int)AccionEnum.ELIMINAR, objOC.id, JsonUtils.convertNetObjectToJson(objOC));
                                        SaveBitacora(0, (int)AccionEnum.ELIMINAR, objOC.id, JsonUtils.convertNetObjectToJson(lstOC));
                                        #endregion
                                    }
                                    catch (Exception e)
                                    {
                                        dbContextTransaction.Rollback();
                                        dbStarsoftTransaction.Rollback();
                                        LogError(0, 0, _NOMBRE_CONTROLADOR, "borrarCompra", e, AccionEnum.ELIMINAR, 0, 0);

                                        throw new Exception(e.Message);
                                    }
                                }
                            }
                        }
                        #endregion
                        break;
                    }
                case EmpresaEnum.Colombia:
                    {
                        #region COLOMBIA
                        using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                        {
                            using (var con = checkConexionProductivo())
                            {
                                using (var trans = con.BeginTransaction())
                                {
                                    try
                                    {
                                        var usuarioSesion = vSesiones.sesionUsuarioDTO;
                                        var relUser = ufs.getUsuarioService().getUserEk(usuarioSesion.id);

                                        //#region Validación Periodo Contable
                                        //if (!autorizante && relUser.empleado != 1 && relUser.empleado != 300)
                                        //{
                                        //    var periodoContable = getPeriodoContableCompra(cc, numero);

                                        //    if (periodoContable != null)
                                        //    {
                                        //        if ((string)periodoContable.periodoContable.soc != "N")
                                        //        {
                                        //            throw new Exception("Periodo Contable Cerrado.");
                                        //        }
                                        //    }
                                        //    else
                                        //    {
                                        //        throw new Exception("Periodo Contable Cerrado.");
                                        //    }
                                        //}
                                        //#endregion

                                        var compradorEK = ((List<dynamic>)consultaCheckProductivo(
                                            string.Format(@"SELECT comprador FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", cc, numero)
                                        ).ToObject<List<dynamic>>())[0];

                                        #region SIGOPLAN
                                        var compraSIGOPLAN = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.cc == cc && x.numero == numero && x.estatusRegistro);

                                        if (compraSIGOPLAN != null)
                                        {
                                            var detalleCompraSIGOPLAN = _context.tblCom_OrdenCompraDet.Where(x =>
                                                x.idOrdenCompra == compraSIGOPLAN.id &&
                                                x.cc == cc &&
                                                x.numero == numero &&
                                                x.estatusRegistro
                                            ).ToList();

                                            foreach (var det in detalleCompraSIGOPLAN)
                                            {
                                                det.estatusRegistro = false;

                                                _context.Entry(det).State = System.Data.Entity.EntityState.Modified;
                                                _context.SaveChanges();

                                                var requisicionSIGOPLAN = _context.tblCom_Req.FirstOrDefault(x => x.estatusRegistro && x.cc == det.cc && x.numero == det.num_requisicion);

                                                if (requisicionSIGOPLAN != null)
                                                {
                                                    var partidaRequisicionSIGOPLAN = _context.tblCom_ReqDet.FirstOrDefault(x =>
                                                        x.estatusRegistro &&
                                                        x.idReq == requisicionSIGOPLAN.id &&
                                                        x.partida == det.part_requisicion &&
                                                        x.insumo == det.insumo
                                                    );

                                                    if (partidaRequisicionSIGOPLAN != null)
                                                    {
                                                        partidaRequisicionSIGOPLAN.cantOrdenada = partidaRequisicionSIGOPLAN.cantOrdenada - (det.cantidad - det.cant_canc);

                                                        _context.Entry(partidaRequisicionSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                                        _context.SaveChanges();
                                                    }
                                                }
                                            }

                                            compraSIGOPLAN.estatusRegistro = false;
                                            compraSIGOPLAN.empleadoUltimaAccion = relUser.empleado;
                                            compraSIGOPLAN.fechaUltimaAccion = DateTime.Now;
                                            compraSIGOPLAN.tipoUltimaAccion = TipoUltimaAccionEnum.Eliminacion;

                                            _context.Entry(compraSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                            _context.SaveChanges();
                                        }
                                        #endregion

                                        #region Enkontrol
                                        var count = 0;

                                        #region Update Requisición para quitar lo comprado
                                        var compraEK = consultaCheckProductivo(string.Format(@"SELECT * FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", cc, numero));

                                        if (compraEK != null)
                                        {
                                            var compraDetalleEK = consultaCheckProductivo(string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", cc, numero));

                                            if (compraDetalleEK != null)
                                            {
                                                var compraDetalleENKONTROL = (List<dynamic>)compraDetalleEK.ToObject<List<dynamic>>();

                                                foreach (var det in compraDetalleENKONTROL)
                                                {
                                                    var cantidadPartidaCompra =
                                                        Convert.ToDecimal(det.cantidad, CultureInfo.InvariantCulture) - Convert.ToDecimal(det.cant_canc, CultureInfo.InvariantCulture);
                                                    var partidaRequisicionEK = consultaCheckProductivo(
                                                        string.Format(@"SELECT 
                                                                * 
                                                            FROM so_requisicion_det 
                                                            WHERE cc = '{0}' AND numero = {1} AND partida = {2}", (string)det.cc, (int)det.num_requisicion, (int)det.part_requisicion)
                                                    );

                                                    if (partidaRequisicionEK != null)
                                                    {
                                                        var partidaRequisicionENKONTROL = ((List<dynamic>)partidaRequisicionEK.ToObject<List<dynamic>>())[0];

                                                        var consultaQuitarComprado = @"
                                                UPDATE DBA.so_requisicion_det 
                                                SET 
                                                    cant_ordenada = ? 
                                                WHERE cc = ? AND numero = ? AND partida = ? AND insumo = ?";

                                                        using (var cmd = new OdbcCommand(consultaQuitarComprado))
                                                        {
                                                            OdbcParameterCollection parameters = cmd.Parameters;

                                                            parameters.Add("@cant_ordenada", OdbcType.Numeric).Value =
                                                                Convert.ToDecimal(partidaRequisicionENKONTROL.cant_ordenada, CultureInfo.InvariantCulture) - cantidadPartidaCompra;

                                                            parameters.Add("@cc", OdbcType.Char).Value = (string)det.cc;
                                                            parameters.Add("@numero", OdbcType.Numeric).Value = (int)det.num_requisicion;
                                                            parameters.Add("@partida", OdbcType.Numeric).Value = (int)det.part_requisicion;
                                                            parameters.Add("@insumo", OdbcType.Numeric).Value = (int)det.insumo;

                                                            cmd.Connection = trans.Connection;
                                                            cmd.Transaction = trans;

                                                            count += cmd.ExecuteNonQuery();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        #endregion

                                        #region Actualizar Explosión
                                        var detalleCompraEK = consultaCheckProductivo(string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", cc, numero));

                                        if (detalleCompraEK != null)
                                        {
                                            var detalleCompra = (List<dynamic>)detalleCompraEK.ToObject<List<dynamic>>();

                                            foreach (var det in detalleCompra)
                                            {
                                                var registroExplosionEK = consultaCheckProductivo(
                                                    string.Format(@"SELECT * FROM so_explos_mat WHERE cc = '{0}' AND insumo = {1} AND year_explos = {2}", cc, (int)det.insumo, DateTime.Now.Year)
                                                );

                                                if (registroExplosionEK != null)
                                                {
                                                    var registroExplosion = ((List<dynamic>)registroExplosionEK.ToObject<List<dynamic>>())[0];

                                                    var nuevaCantidadComprada =
                                                        Convert.ToDecimal(registroExplosion.comp_cant, CultureInfo.InvariantCulture) - Convert.ToDecimal(det.cantidad, CultureInfo.InvariantCulture);
                                                    var nuevoImporteComprado =
                                                        Convert.ToDecimal(registroExplosion.comp_imp, CultureInfo.InvariantCulture) - Convert.ToDecimal(det.importe, CultureInfo.InvariantCulture);

                                                    var consultaExplosionUpdate = @"
                                            UPDATE DBA.so_explos_mat 
                                            SET comp_cant = ?, comp_imp = ? 
                                            WHERE cc = ? AND insumo = ? AND year_explos = ?";

                                                    using (var cmd = new OdbcCommand(consultaExplosionUpdate))
                                                    {
                                                        OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                        parametersExplosion.Add("@comp_cant", OdbcType.Numeric).Value = nuevaCantidadComprada;
                                                        parametersExplosion.Add("@comp_imp", OdbcType.Numeric).Value = nuevoImporteComprado;

                                                        parametersExplosion.Add("@cc", OdbcType.Char).Value = cc;
                                                        parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = det.insumo;
                                                        parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;

                                                        cmd.Connection = trans.Connection;
                                                        cmd.Transaction = trans;

                                                        count += cmd.ExecuteNonQuery();
                                                    }
                                                }
                                            }
                                        }
                                        #endregion

                                        #region Borrar Compra Detalle
                                        var consultaEliminarCompraDetalle = @"DELETE FROM DBA.so_orden_compra_det WHERE cc = ? AND numero = ?";

                                        using (var cmd = new OdbcCommand(consultaEliminarCompraDetalle))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@cc", OdbcType.Char).Value = cc;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = numero;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }
                                        #endregion

                                        #region Borrar Compra Pagos
                                        var consultaEliminarCompraPagos = @"DELETE FROM DBA.so_orden_compra_pago WHERE cc = ? AND numero = ?";

                                        using (var cmd = new OdbcCommand(consultaEliminarCompraPagos))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@cc", OdbcType.Char).Value = cc;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = numero;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }
                                        #endregion

                                        #region Borrar Detalle Ajuste
                                        var consultaEliminarCompraDetalleAjuste = @"DELETE FROM DBA.so_orden_det_ajuste WHERE cc = ? AND numero_oc = ?";

                                        using (var cmd = new OdbcCommand(consultaEliminarCompraDetalleAjuste))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@cc", OdbcType.Char).Value = cc;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = numero;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }
                                        #endregion

                                        #region Borrar Detalle Linea
                                        var consultaEliminarCompraDetalleLinea = @"DELETE FROM DBA.so_orden_det_linea WHERE cc = ? AND numero = ?";

                                        using (var cmd = new OdbcCommand(consultaEliminarCompraDetalleLinea))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@cc", OdbcType.Char).Value = cc;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = numero;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }
                                        #endregion

                                        #region Borrar Retenciones
                                        var consultaEliminarCompraRetenciones = @"DELETE FROM DBA.so_ordenc_retenciones WHERE cc = ? AND numero = ?";

                                        using (var cmd = new OdbcCommand(consultaEliminarCompraRetenciones))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@cc", OdbcType.Char).Value = cc;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = numero;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }
                                        #endregion

                                        #region Borrar Compra
                                        var consultaEliminarCompra = @"DELETE FROM DBA.so_orden_compra WHERE cc = ? AND numero = ?";

                                        using (var cmd = new OdbcCommand(consultaEliminarCompra))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@cc", OdbcType.Char).Value = cc;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = numero;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }
                                        #endregion

                                        #region Borrar proveedor no optimo
                                        //var noOptimoExiste = _context.tblCom_CC_ProveedorNoOptimo.Where
                                        //    (f =>
                                        //        f.Estatus &&
                                        //        f.NumeroCompra == numero &&
                                        //        f.Calificacion.CC.ToUpper() == cc.ToUpper()
                                        //    );

                                        //foreach (var item in noOptimoExiste)
                                        //{
                                        //    item.Estatus = false;
                                        //}

                                        //_context.SaveChanges();
                                        #endregion
                                        #endregion

                                        if (count > 0)
                                        {
                                            trans.Commit();
                                            dbSigoplanTransaction.Commit();

                                            if (autorizante)
                                            {
                                                #region Mandar correo al comprador
                                                var usuario = _context.tblP_Usuario.FirstOrDefault(x => x.id == vSesiones.sesionUsuarioDTO.id);
                                                var usuarioNombre = string.Format(@"{0} {1} {2}", usuario.nombre ?? "", usuario.apellidoPaterno ?? "", usuario.apellidoMaterno ?? "");

                                                var titulo = "Compra \"" + cc + "-" + numero + "\" ha sido eliminada.";
                                                var mensaje = "Se ha borrado la compra \"" + cc + "-" + numero + "\" por el usuario: " + usuarioNombre + ". \n" + "Fecha Eliminación: " + DateTime.Now.Date.ToShortDateString();
                                                var correo = new List<string>();

                                                var numeroCompradorEK = (int)compradorEK.comprador;

                                                if (numeroCompradorEK != 1)
                                                {
                                                    var relacionUsuarioSIGOPLAN = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.empleado == numeroCompradorEK);

                                                    if (relacionUsuarioSIGOPLAN != null)
                                                    {
                                                        var compradorSIGOPLAN = _context.tblP_Usuario.FirstOrDefault(x => x.id == relacionUsuarioSIGOPLAN.idUsuario);

                                                        if (compradorSIGOPLAN != null)
                                                        {
                                                            correo.Add(compradorSIGOPLAN.correo);
                                                        }
                                                    }
                                                    //else
                                                    //{
                                                    //    throw new Exception("No se encuentra la relación de usuarios entre SIGOPLAN y Enkontrol para el número de usuario: " + numeroCompradorEK);
                                                    //}
                                                }
                                                //else
                                                //{
                                                //    correo.Add("oscar.valencia@construplan.com.mx");
                                                //}

                                                if (correo.Count == 1)
                                                {
#if DEBUG
                                                    correo = new List<string>();
                                                    correo.Add("omar.nunez@construplan.com.mx");
#endif
                                                    Infrastructure.Utils.GlobalUtils.sendEmail(string.Format("{0}: {1}", PersonalUtilities.GetNombreEmpresa(), titulo), mensaje, correo);
                                                }
                                                #endregion
                                            }
                                        }
                                    }
                                    catch (Exception e)
                                    {
                                        trans.Rollback();
                                        dbSigoplanTransaction.Rollback();

                                        throw new Exception(e.Message);
                                    }
                                }
                            }
                        }
                        #endregion
                        break;
                    }
                default:
                    {
                        #region DEMAS EMPRESAS
                        using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                        {
                            using (var con = checkConexionProductivo())
                            {
                                using (var trans = con.BeginTransaction())
                                {
                                    try
                                    {
                                        var usuarioSesion = vSesiones.sesionUsuarioDTO;
                                        var relUser = ufs.getUsuarioService().getUserEk(usuarioSesion.id);

                                        //#region Validación Periodo Contable
                                        //if (!autorizante && relUser.empleado != 1 && relUser.empleado != 300)
                                        //{
                                        //    var periodoContable = getPeriodoContableCompra(cc, numero);

                                        //    if (periodoContable != null)
                                        //    {
                                        //        if ((string)periodoContable.periodoContable.soc != "N")
                                        //        {
                                        //            throw new Exception("Periodo Contable Cerrado.");
                                        //        }
                                        //    }
                                        //    else
                                        //    {
                                        //        throw new Exception("Periodo Contable Cerrado.");
                                        //    }
                                        //}
                                        //#endregion

                                        var compradorEK = ((List<dynamic>)consultaCheckProductivo(
                                            string.Format(@"SELECT comprador FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", cc, numero)
                                        ).ToObject<List<dynamic>>())[0];

                                        #region SIGOPLAN
                                        var compraSIGOPLAN = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.cc == cc && x.numero == numero && x.estatusRegistro);

                                        if (compraSIGOPLAN != null)
                                        {
                                            var detalleCompraSIGOPLAN = _context.tblCom_OrdenCompraDet.Where(x =>
                                                x.idOrdenCompra == compraSIGOPLAN.id &&
                                                x.cc == cc &&
                                                x.numero == numero &&
                                                x.estatusRegistro
                                            ).ToList();

                                            foreach (var det in detalleCompraSIGOPLAN)
                                            {
                                                det.estatusRegistro = false;

                                                _context.Entry(det).State = System.Data.Entity.EntityState.Modified;
                                                _context.SaveChanges();

                                                var requisicionSIGOPLAN = _context.tblCom_Req.FirstOrDefault(x => x.estatusRegistro && x.cc == det.cc && x.numero == det.num_requisicion);

                                                if (requisicionSIGOPLAN != null)
                                                {
                                                    var partidaRequisicionSIGOPLAN = _context.tblCom_ReqDet.FirstOrDefault(x =>
                                                        x.estatusRegistro &&
                                                        x.idReq == requisicionSIGOPLAN.id &&
                                                        x.partida == det.part_requisicion &&
                                                        x.insumo == det.insumo
                                                    );

                                                    if (partidaRequisicionSIGOPLAN != null)
                                                    {
                                                        partidaRequisicionSIGOPLAN.cantOrdenada = partidaRequisicionSIGOPLAN.cantOrdenada - (det.cantidad - det.cant_canc);

                                                        _context.Entry(partidaRequisicionSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                                        _context.SaveChanges();
                                                    }
                                                }
                                            }

                                            compraSIGOPLAN.estatusRegistro = false;
                                            compraSIGOPLAN.empleadoUltimaAccion = relUser.empleado;
                                            compraSIGOPLAN.fechaUltimaAccion = DateTime.Now;
                                            compraSIGOPLAN.tipoUltimaAccion = TipoUltimaAccionEnum.Eliminacion;

                                            _context.Entry(compraSIGOPLAN).State = System.Data.Entity.EntityState.Modified;
                                            _context.SaveChanges();
                                        }
                                        #endregion

                                        #region Enkontrol
                                        var count = 0;

                                        #region Update Requisición para quitar lo comprado
                                        var compraEK = consultaCheckProductivo(string.Format(@"SELECT * FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", cc, numero));

                                        if (compraEK != null)
                                        {
                                            var compraDetalleEK = consultaCheckProductivo(string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", cc, numero));

                                            if (compraDetalleEK != null)
                                            {
                                                var compraDetalleENKONTROL = (List<dynamic>)compraDetalleEK.ToObject<List<dynamic>>();

                                                foreach (var det in compraDetalleENKONTROL)
                                                {
                                                    var cantidadPartidaCompra =
                                                        Convert.ToDecimal(det.cantidad, CultureInfo.InvariantCulture) - Convert.ToDecimal(det.cant_canc, CultureInfo.InvariantCulture);
                                                    var partidaRequisicionEK = consultaCheckProductivo(
                                                        string.Format(@"SELECT 
                                                                * 
                                                            FROM so_requisicion_det 
                                                            WHERE cc = '{0}' AND numero = {1} AND partida = {2}", (string)det.cc, (int)det.num_requisicion, (int)det.part_requisicion)
                                                    );

                                                    if (partidaRequisicionEK != null)
                                                    {
                                                        var partidaRequisicionENKONTROL = ((List<dynamic>)partidaRequisicionEK.ToObject<List<dynamic>>())[0];

                                                        var consultaQuitarComprado = @"
                                                UPDATE so_requisicion_det 
                                                SET 
                                                    cant_ordenada = ? 
                                                WHERE cc = ? AND numero = ? AND partida = ? AND insumo = ?";

                                                        using (var cmd = new OdbcCommand(consultaQuitarComprado))
                                                        {
                                                            OdbcParameterCollection parameters = cmd.Parameters;

                                                            parameters.Add("@cant_ordenada", OdbcType.Numeric).Value =
                                                                Convert.ToDecimal(partidaRequisicionENKONTROL.cant_ordenada, CultureInfo.InvariantCulture) - cantidadPartidaCompra;

                                                            parameters.Add("@cc", OdbcType.Char).Value = (string)det.cc;
                                                            parameters.Add("@numero", OdbcType.Numeric).Value = (int)det.num_requisicion;
                                                            parameters.Add("@partida", OdbcType.Numeric).Value = (int)det.part_requisicion;
                                                            parameters.Add("@insumo", OdbcType.Numeric).Value = (int)det.insumo;

                                                            cmd.Connection = trans.Connection;
                                                            cmd.Transaction = trans;

                                                            count += cmd.ExecuteNonQuery();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        #endregion

                                        #region Actualizar Explosión
                                        var detalleCompraEK = consultaCheckProductivo(string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", cc, numero));

                                        if (detalleCompraEK != null)
                                        {
                                            var detalleCompra = (List<dynamic>)detalleCompraEK.ToObject<List<dynamic>>();

                                            foreach (var det in detalleCompra)
                                            {
                                                var registroExplosionEK = consultaCheckProductivo(
                                                    string.Format(@"SELECT * FROM so_explos_mat WHERE cc = '{0}' AND insumo = {1} AND year_explos = {2}", cc, (int)det.insumo, DateTime.Now.Year)
                                                );

                                                if (registroExplosionEK != null)
                                                {
                                                    var registroExplosion = ((List<dynamic>)registroExplosionEK.ToObject<List<dynamic>>())[0];

                                                    var nuevaCantidadComprada =
                                                        Convert.ToDecimal(registroExplosion.comp_cant, CultureInfo.InvariantCulture) - Convert.ToDecimal(det.cantidad, CultureInfo.InvariantCulture);
                                                    var nuevoImporteComprado =
                                                        Convert.ToDecimal(registroExplosion.comp_imp, CultureInfo.InvariantCulture) - Convert.ToDecimal(det.importe, CultureInfo.InvariantCulture);

                                                    var consultaExplosionUpdate = @"
                                            UPDATE so_explos_mat 
                                            SET comp_cant = ?, comp_imp = ? 
                                            WHERE cc = ? AND insumo = ? AND year_explos = ?";

                                                    using (var cmd = new OdbcCommand(consultaExplosionUpdate))
                                                    {
                                                        OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                        parametersExplosion.Add("@comp_cant", OdbcType.Numeric).Value = nuevaCantidadComprada;
                                                        parametersExplosion.Add("@comp_imp", OdbcType.Numeric).Value = nuevoImporteComprado;

                                                        parametersExplosion.Add("@cc", OdbcType.Char).Value = cc;
                                                        parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = det.insumo;
                                                        parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;

                                                        cmd.Connection = trans.Connection;
                                                        cmd.Transaction = trans;

                                                        count += cmd.ExecuteNonQuery();
                                                    }
                                                }
                                            }
                                        }
                                        #endregion

                                        #region Borrar Compra Detalle
                                        var consultaEliminarCompraDetalle = @"DELETE FROM so_orden_compra_det WHERE cc = ? AND numero = ?";

                                        using (var cmd = new OdbcCommand(consultaEliminarCompraDetalle))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@cc", OdbcType.Char).Value = cc;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = numero;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }
                                        #endregion

                                        #region Borrar Compra Pagos
                                        var consultaEliminarCompraPagos = @"DELETE FROM so_orden_compra_pago WHERE cc = ? AND numero = ?";

                                        using (var cmd = new OdbcCommand(consultaEliminarCompraPagos))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@cc", OdbcType.Char).Value = cc;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = numero;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }
                                        #endregion

                                        #region Borrar Detalle Ajuste
                                        var consultaEliminarCompraDetalleAjuste = @"DELETE FROM so_orden_det_ajuste WHERE cc = ? AND numero_oc = ?";

                                        using (var cmd = new OdbcCommand(consultaEliminarCompraDetalleAjuste))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@cc", OdbcType.Char).Value = cc;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = numero;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }
                                        #endregion

                                        #region Borrar Detalle Linea
                                        var consultaEliminarCompraDetalleLinea = @"DELETE FROM so_orden_det_linea WHERE cc = ? AND numero = ?";

                                        using (var cmd = new OdbcCommand(consultaEliminarCompraDetalleLinea))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@cc", OdbcType.Char).Value = cc;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = numero;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }
                                        #endregion

                                        #region Borrar Retenciones
                                        var consultaEliminarCompraRetenciones = @"DELETE FROM so_ordenc_retenciones WHERE cc = ? AND numero = ?";

                                        using (var cmd = new OdbcCommand(consultaEliminarCompraRetenciones))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@cc", OdbcType.Char).Value = cc;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = numero;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }
                                        #endregion

                                        #region Borrar Compra
                                        var consultaEliminarCompra = @"DELETE FROM so_orden_compra WHERE cc = ? AND numero = ?";

                                        using (var cmd = new OdbcCommand(consultaEliminarCompra))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@cc", OdbcType.Char).Value = cc;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = numero;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }
                                        #endregion

                                        #region Borrar proveedor no optimo
                                        var noOptimoExiste = _context.tblCom_CC_ProveedorNoOptimo.Where
                                            (f =>
                                                f.Estatus &&
                                                f.NumeroCompra == numero &&
                                                f.Calificacion.CC.ToUpper() == cc.ToUpper()
                                            );

                                        foreach (var item in noOptimoExiste)
                                        {
                                            item.Estatus = false;
                                        }

                                        _context.SaveChanges();
                                        #endregion
                                        #endregion

                                        if (count > 0)
                                        {
                                            trans.Commit();
                                            dbSigoplanTransaction.Commit();

                                            if (autorizante)
                                            {
                                                #region Mandar correo al comprador
                                                var usuario = _context.tblP_Usuario.FirstOrDefault(x => x.id == vSesiones.sesionUsuarioDTO.id);
                                                var usuarioNombre = string.Format(@"{0} {1} {2}", usuario.nombre ?? "", usuario.apellidoPaterno ?? "", usuario.apellidoMaterno ?? "");

                                                var titulo = "Compra \"" + cc + "-" + numero + "\" ha sido eliminada.";
                                                var mensaje = "Se ha borrado la compra \"" + cc + "-" + numero + "\" por el usuario: " + usuarioNombre + ". \n" + "Fecha Eliminación: " + DateTime.Now.Date.ToShortDateString();
                                                var correo = new List<string>();

                                                var numeroCompradorEK = (int)compradorEK.comprador;

                                                if (numeroCompradorEK != 1)
                                                {
                                                    var relacionUsuarioSIGOPLAN = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.empleado == numeroCompradorEK);

                                                    if (relacionUsuarioSIGOPLAN != null)
                                                    {
                                                        var compradorSIGOPLAN = _context.tblP_Usuario.FirstOrDefault(x => x.id == relacionUsuarioSIGOPLAN.idUsuario);

                                                        if (compradorSIGOPLAN != null)
                                                        {
                                                            correo.Add(compradorSIGOPLAN.correo);
                                                        }
                                                    }
                                                    //else
                                                    //{
                                                    //    throw new Exception("No se encuentra la relación de usuarios entre SIGOPLAN y Enkontrol para el número de usuario: " + numeroCompradorEK);
                                                    //}
                                                }
                                                //else
                                                //{
                                                //    correo.Add("oscar.valencia@construplan.com.mx");
                                                //}

                                                if (correo.Count == 1)
                                                {
#if DEBUG
                                                    correo = new List<string> { "omar.nunez@construplan.com.mx" };
#endif
                                                    Infrastructure.Utils.GlobalUtils.sendEmail(string.Format("{0}: {1}", PersonalUtilities.GetNombreEmpresa(), titulo), mensaje, correo);
                                                }
                                                #endregion
                                            }
                                        }
                                    }
                                    catch (Exception e)
                                    {
                                        trans.Rollback();
                                        dbSigoplanTransaction.Rollback();

                                        throw new Exception(e.Message);
                                    }
                                }
                            }
                        }
                        #endregion
                        break;
                    }
            }
        }

        public void BorrarComprasMasivo()
        {
            var listaCompras = new List<Tuple<string, int>>
            {
                new Tuple<string, int>("", 0)
            };

            foreach (var com in listaCompras)
            {
                try
                {
                    borrarCompra(com.Item1, com.Item2, false);
                }
                catch (Exception e)
                {
                    LogError(0, 0, "OrdenCompraController", "BorrarComprasMasivo", e, AccionEnum.ELIMINAR, 0, null);
                }
            }
        }

        public bool checarUbicacionesValidas(OrdenCompraDTO compra, List<SurtidoCompraDTO> entradas)
        {
            if ((MainContextEnum)vSesiones.sesionEmpresaActual == MainContextEnum.Colombia)
            {
                var listaUbicacionesAlmacen = _context.tblAlm_Ubicacion.Where(x => x.registroActivo && x.almacen == compra.almacen).ToList();

                foreach (var ent in entradas)
                {
                    foreach (var ubi in ent.listUbicacionMovimiento)
                    {
                        if (ubi.area_alm != "" && ubi.area_alm != null
                            && ubi.lado_alm != "" && ubi.lado_alm != null
                            && ubi.estante_alm != "" && ubi.estante_alm != null
                            && ubi.nivel_alm != "" && ubi.nivel_alm != null)
                        {
                            var coincidencia = listaUbicacionesAlmacen.Where(x =>
                                    x.area_alm == ubi.area_alm
                                    && x.lado_alm == ubi.lado_alm
                                    && x.estante_alm == ubi.estante_alm
                                    && x.nivel_alm == ubi.nivel_alm).ToList();
                            if (coincidencia.Count() <= 0)
                            {
                                throw new Exception("Debe capturar ubicaciones válidas para el almacén.");
                            }
                        }
                    }
                }
            }
            else
            {
                foreach (var ent in entradas)
                {
                    foreach (var ubi in ent.listUbicacionMovimiento)
                    {
                        var checkUbicacionValida = consultaCheckProductivo(
                            string.Format(@"SELECT 
                                            * 
                                        FROM si_matriz_ubicaciones 
                                        WHERE 
                                            almacen = {0} AND 
                                            area_alm = '{1}' AND 
                                            lado_alm = '{2}' AND 
                                            estante_alm = '{3}' AND 
                                            nivel_alm = '{4}'", compra.almacen, ubi.area_alm, ubi.lado_alm, ubi.estante_alm, ubi.nivel_alm)
                        );

                        if (checkUbicacionValida == null)
                        {
                            throw new Exception("Debe capturar ubicaciones válidas para el almacén.");
                        }
                    }
                }
            }


            return true;
        }

        public List<RetencionInfoDTO> getCatalogoRetenciones()
        {
            return (List<RetencionInfoDTO>)consultaCheckProductivo(string.Format(@"SELECT * FROM so_retenciones")).ToObject<List<RetencionInfoDTO>>();
        }

        public MovimientoEnkontrolDTO getMovimientoNoInv(int almacenID, int remision)
        {
            var movimientoNoInvEK = consultaCheckProductivo(string.Format(@"SELECT * FROM so_movimientos_noinv WHERE almacen = {0} AND remision = {1}", almacenID, remision));

            if (movimientoNoInvEK != null)
            {
                var movimientoNoInv = ((List<MovimientoEnkontrolDTO>)movimientoNoInvEK.ToObject<List<MovimientoEnkontrolDTO>>())[0];

                movimientoNoInv.detalle = (List<MovimientoDetalleEnkontrolDTO>)consultaCheckProductivo(
                    string.Format(@"SELECT * FROM so_movimientos_noinv_det WHERE almacen = {0} AND remision = {1}", almacenID, remision)
                ).ToObject<List<MovimientoDetalleEnkontrolDTO>>();

                var compraSIGOPLAN = _context.tblCom_OrdenCompra.ToList().FirstOrDefault(x =>
                    x.estatusRegistro &&
                    x.cc == (string)movimientoNoInv.cc &&
                    x.numero == (int)movimientoNoInv.orden_ct
                );
                var compraEK = consultaCheckProductivo(
                    string.Format(@"SELECT * FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", (string)movimientoNoInv.cc, (int)movimientoNoInv.orden_ct)
                );

                if (compraEK != null)
                {
                    var compraENKONTROL = ((List<dynamic>)compraEK.ToObject<List<dynamic>>())[0];

                    var ST_OC = "";

                    if ((EmpresaEnum)vSesiones.sesionEmpresaActual != EmpresaEnum.Colombia)
                    {
                        ST_OC = compraENKONTROL.ST_OC != null ? (string)compraENKONTROL.ST_OC : "";
                    }
                    else
                    {
                        ST_OC = ((string)compraENKONTROL.vobo_aut == "S" || (string)compraENKONTROL.aut_aut == "S") ? "A" : "";
                    }

                    var ordenCompra = new OrdenCompraDTO()
                    {
                        #region Panel Izquierdo
                        folioOrigen = "",

                        cc = (string)compraENKONTROL.cc,
                        numero = (int)compraENKONTROL.numero,
                        bienes_servicios = (string)compraENKONTROL.bienes_servicios,
                        fecha = (DateTime)compraENKONTROL.fecha,
                        proveedor = compraENKONTROL.proveedor != null ? (int)compraENKONTROL.proveedor : 0,
                        proveedorNom = compraENKONTROL.proveedor != null ? getNombreProveedor((int)compraENKONTROL.proveedor) : "",
                        comprador = compraENKONTROL.comprador != null ? (int)compraENKONTROL.comprador : 0,
                        compradorNom = compraENKONTROL.comprador != null ? getNombreUsuarioEmpleado((int)compraENKONTROL.comprador) : "",
                        solicito = compraENKONTROL.solicito != null ? (int)compraENKONTROL.solicito : 0,
                        solicitoNom = compraENKONTROL.solicito != null ? getNombreUsuarioEmpleado((int)compraENKONTROL.solicito) : "",
                        autorizo = compraENKONTROL.autorizo != null ? (int)compraENKONTROL.autorizo : 0,
                        autorizoNom = compraENKONTROL.autorizo != null ? getNombreUsuarioEmpleado((int)compraENKONTROL.autorizo) : "",
                        embarquese = compraENKONTROL.embarquese != null ? (string)compraENKONTROL.embarquese : "",
                        libre_abordo = compraSIGOPLAN != null ? (int)compraSIGOPLAN.idLibreAbordo : compraENKONTROL.libre_abordo != null ? (int)compraENKONTROL.libre_abordo : 0,
                        concepto_factura = compraENKONTROL.concepto_factura != null ? (string)compraENKONTROL.concepto_factura : "",
                        bit_autorecepcion = compraENKONTROL.bit_autorecepcion != null ? (string)compraENKONTROL.bit_autorecepcion : "",
                        almacen_autorecepcion = compraENKONTROL.almacen_autorecepcion != null ? (int)compraENKONTROL.almacen_autorecepcion : 0,
                        almacenRecepNom = compraENKONTROL.almacen_autorecepcion != null ? getNombreAlmacen((int)compraENKONTROL.almacen_autorecepcion) : "",
                        empleado_autorecepcion = compraENKONTROL.empleado_autorecepcion != null ? (int)compraENKONTROL.empleado_autorecepcion : 0,
                        empleadoRecepNom = compraENKONTROL.empleado_autorecepcion != null ? getNombreUsuarioEmpleado((int)compraENKONTROL.empleado_autorecepcion) : "",
                        #endregion

                        #region Panel Derecho
                        tipo_oc_req = compraENKONTROL.tipo_oc_req != null ? (string)compraENKONTROL.tipo_oc_req : "",
                        moneda = compraENKONTROL.moneda != null ? (int)compraENKONTROL.moneda : 0,
                        tipo_cambio = compraENKONTROL.tipo_cambio != null ? Convert.ToDecimal(compraENKONTROL.tipo_cambio, CultureInfo.InvariantCulture) : 0,
                        sub_total = compraENKONTROL.sub_total != null ? Convert.ToDecimal(compraENKONTROL.sub_total, CultureInfo.InvariantCulture) : 0,
                        porcent_iva = compraENKONTROL.porcent_iva != null ? Convert.ToDecimal(compraENKONTROL.porcent_iva, CultureInfo.InvariantCulture) : 0,
                        iva = compraENKONTROL.iva != null ? Convert.ToDecimal(compraENKONTROL.iva, CultureInfo.InvariantCulture) : 0,
                        rentencion_antes_iva = compraENKONTROL.rentencion_antes_iva != null ? Convert.ToDecimal(compraENKONTROL.rentencion_antes_iva, CultureInfo.InvariantCulture) : 0,
                        rentencion_despues_iva = compraENKONTROL.rentencion_despues_iva != null ? Convert.ToDecimal(compraENKONTROL.rentencion_despues_iva, CultureInfo.InvariantCulture) : 0,
                        total = compraENKONTROL.total != null ? Convert.ToDecimal(compraENKONTROL.total, CultureInfo.InvariantCulture) : 0,
                        total_rec = compraENKONTROL.total_rec != null ? Convert.ToDecimal(compraENKONTROL.total_rec, CultureInfo.InvariantCulture) : 0,
                        CFDI = compraSIGOPLAN != null ? compraSIGOPLAN.CFDI : "G03 (Gastos en general)",
                        #endregion

                        lstPartidas = getPartidasCompra(
                            (string)compraENKONTROL.cc, (int)compraENKONTROL.numero, compraENKONTROL.moneda != null ? (int)compraENKONTROL.moneda : 1
                        ),
                        lstPagos = getPagosCompra((string)compraENKONTROL.cc, (int)compraENKONTROL.numero),
                        lstRetenciones = getRetencionesCompra((string)compraENKONTROL.cc, (int)compraENKONTROL.numero),
                        ST_OC = ST_OC,
                        st_impresa = compraENKONTROL.st_impresa != null ? (string)compraENKONTROL.st_impresa : ""
                    };

                    dynamic existeCuadro = null;

                    if (ordenCompra.lstPartidas != null)
                    {
                        existeCuadro = consultaCheckProductivo(
                        string.Format(@"SELECT 
                                            * 
                                        FROM so_cuadro_comparativo 
                                        WHERE cc = '{0}' AND numero = {1}", ordenCompra.cc, ordenCompra.lstPartidas[0].num_requisicion));
                    }

                    int cuadrosExistentes = 0;

                    if (existeCuadro != null)
                    {
                        cuadrosExistentes = ((List<dynamic>)existeCuadro.ToObject<List<dynamic>>()).Count;
                    }

                    ordenCompra.tieneCuadro = existeCuadro != null;
                    ordenCompra.cuadrosExistentes = cuadrosExistentes;

                    var ordenCompraDetSIGOPLAN = _context.tblCom_OrdenCompraDet.FirstOrDefault(x => x.cc == ordenCompra.cc && x.numero == ordenCompra.numero);

                    if (ordenCompraDetSIGOPLAN != null)
                    {
                        var requisicionSIGOPLAN = _context.tblCom_Req.FirstOrDefault(x => x.estatusRegistro && x.cc == ordenCompra.cc && x.numero == ordenCompraDetSIGOPLAN.num_requisicion);

                        if (requisicionSIGOPLAN != null)
                        {
                            ordenCompra.consigna = requisicionSIGOPLAN.consigna != null ? (bool)requisicionSIGOPLAN.consigna : false;
                            ordenCompra.crc = requisicionSIGOPLAN.crc;
                            ordenCompra.convenio = requisicionSIGOPLAN.convenio;
                        }
                        else
                        {
                            ordenCompra.consigna = false;
                            ordenCompra.crc = false;
                            ordenCompra.convenio = false;
                        }
                    }
                    else
                    {
                        ordenCompra.consigna = false;
                        ordenCompra.crc = false;
                        ordenCompra.convenio = false;
                    }

                    var usuario = vSesiones.sesionUsuarioDTO;
                    var relUser = ufs.getUsuarioService().getUserEk(usuario.id);

                    ordenCompra.flagPuedeGuardar = false;

                    if (ordenCompra.ST_OC == "A")
                    {
                        var checkMovimientosInv = consultaCheckProductivo(
                            string.Format(@"SELECT * FROM si_movimientos WHERE tipo_mov = 1 AND cc = '{0}' AND orden_ct = {1}", ordenCompra.cc, ordenCompra.numero)
                        );
                        var checkMovimientosNoInv = consultaCheckProductivo(
                            string.Format(@"SELECT * FROM so_movimientos_noinv WHERE tipo_mov = 1 AND cc = '{0}' AND orden_ct = {1}", ordenCompra.cc, ordenCompra.numero)
                        );

                        if (checkMovimientosInv == null && checkMovimientosNoInv == null)
                        {
                            var listCompradorAdmin = _context.tblCom_Comprador_Admin.Select(x => x.empleado).ToList();

                            if (relUser.empleado == 1 || listCompradorAdmin.Contains(relUser.empleado))
                            {
                                ordenCompra.flagPuedeGuardar = true;
                            }
                        }
                    }
                    else
                    {
                        var listCompradorAdmin = _context.tblCom_Comprador_Admin.Select(x => x.empleado).ToList();

                        if ((relUser.empleado == 1 || listCompradorAdmin.Contains(relUser.empleado)) || relUser.empleado == ordenCompra.comprador)
                        {
                            ordenCompra.flagPuedeGuardar = true;
                        }
                    }

                    movimientoNoInv.tieneCompra = true;
                    movimientoNoInv.compra = ordenCompra;

                    return movimientoNoInv;
                }
                else
                {
                    movimientoNoInv.tieneCompra = false;
                    movimientoNoInv.compra = null;

                    return movimientoNoInv;
                }
            }
            else
            {
                return null;
            }
        }

        public dynamic getPresupuestoCC(string cc)
        {
            var centroCostoEK = consultaCheckProductivo(string.Format(@"SELECT * FROM cc WHERE cc = '{0}' AND st_ppto != 'T'", cc));

            if (centroCostoEK != null)
            {
                var centroCosto = ((List<dynamic>)centroCostoEK.ToObject<List<dynamic>>())[0];

                if ((string)centroCosto.st_ppto == "G")
                {
                    decimal presupuestoGlobal = Convert.ToDecimal(centroCosto.ppto_global, CultureInfo.InvariantCulture);
                    decimal presupuestoActual = 0;

                    if ((string)centroCosto.valida_anio == "S")
                    {
                        DateTime primerDiaAnio = new DateTime(DateTime.Now.Year, 1, 1);
                        var comprasPorAnioEK = consultaCheckProductivo(
                            string.Format(@"SELECT sub_total FROM so_orden_compra WHERE cc = '{0}' AND estatus != 'C' AND fecha >= '{1}'", cc, primerDiaAnio.ToString("yyyy-MM-dd"))
                        );

                        if (comprasPorAnioEK != null)
                        {
                            var comprasPorAnio = (List<OrdenCompraDTO>)comprasPorAnioEK.ToObject<List<OrdenCompraDTO>>();

                            presupuestoActual = comprasPorAnio.Sum(x => x.sub_total);
                        }
                    }
                    else
                    {
                        var comprasEK = consultaCheckProductivo(string.Format(@"SELECT sub_total FROM so_orden_compra WHERE cc = '{0}' AND estatus != 'C'", cc));

                        if (comprasEK != null)
                        {
                            var compras = (List<OrdenCompraDTO>)comprasEK.ToObject<List<OrdenCompraDTO>>();

                            presupuestoActual = compras.Sum(x => x.sub_total);
                        }
                    }

                    return new
                    {
                        centroCosto = centroCosto,
                        presupuestoGlobal = presupuestoGlobal,
                        presupuestoActual = presupuestoActual
                    };
                }
                else
                {
                    return null;
                }
            }
            else
            {
                return null;
            }
        }

        public dynamic getPeriodoContable()
        {
            if (vSesiones.sesionEmpresaActual != (int)EmpresaEnum.Peru)
            {
                using (var ctx = new MainContext())
                {
                    // Obtenemos el periodo contable correspondiente al año y mes actuales
                    var periodoContable = ctx.tblCom_PeriodoContable
                        .Where(p => p.year == DateTime.Now.Year && p.mes == DateTime.Now.Month)
                        .FirstOrDefault(); // Obtenemos el primer registro o null si no existe

                    if (periodoContable != null)
                    {
                        // Comprobamos si el campo 'soc' tiene el valor "N"
                        if (periodoContable.soc == "N")
                        {
                            return new
                            {
                                periodoContable = periodoContable,
                                flagPeriodoAbierto = true
                            };
                        }
                        else
                        {
                            return null; // Periodo no abierto
                        }
                    }
                    else
                    {
                        return null; // No se encontró periodo contable
                    }
                }
            }
            else
            {
                // Para la empresa "Peru", devolvemos un valor predefinido
                return new
                {
                    periodoContable = 0,
                    flagPeriodoAbierto = true
                };
            }
        }

        public dynamic getPeriodoContable_old()
        {
            if (vSesiones.sesionEmpresaActual != (int)EmpresaEnum.Peru)
            {
                var periodoContableEK = consultaCheckProductivo(string.Format(@"SELECT * FROM sc_mesproc WHERE year = {0} AND mes = {1}", DateTime.Now.Year, DateTime.Now.Month));

                if (periodoContableEK != null)
                {
                    var periodoContable = ((List<dynamic>)periodoContableEK.ToObject<List<dynamic>>())[0];

                    if ((string)periodoContable.soc == "N")
                    {
                        return new
                        {
                            periodoContable = periodoContable,
                            flagPeriodoAbierto = true
                        };
                    }
                    else
                    {
                        return null;
                    }
                }
                else
                {
                    return null;
                }
            }
            else
            {
                return new
                {
                    periodoContable = 0,
                    flagPeriodoAbierto = true
                };
            }
        }

        public dynamic getPeriodoContableCompra(string cc, int numero)
        {
            using (var ctx = new MainContext())
            {
                // Obtener la compra basada en cc y numero
                var compra = ctx.tblCom_OrdenCompra
                    .Where(o => o.cc == cc && o.numero == numero)
                    .FirstOrDefault(); // Obtener la primera coincidencia o null si no existe

                if (compra != null)
                {
                    // Calcular el mes y el año de la compra
                    var mesCompra = compra.fecha.Month;
                    var anioCompra = compra.fecha.Year;

                    // Obtener el periodo contable correspondiente al año y mes de la compra
                    var periodoContable = ctx.tblCom_PeriodoContable
                        .Where(p => p.year == anioCompra && p.mes == mesCompra)
                        .FirstOrDefault(); // Obtener el primer registro o null si no existe

                    if (periodoContable != null)
                    {
                        // Verificar si el periodo contable está abierto (soc == "N")
                        if (periodoContable.soc == "N")
                        {
                            return new
                            {
                                periodoContable = periodoContable,
                                flagPeriodoAbierto = true
                            };
                        }
                        else
                        {
                            return null; // Periodo no abierto
                        }
                    }
                    else
                    {
                        return null; // No se encontró el periodo contable
                    }
                }
                else
                {
                    return null; // No se encontró la compra
                }
            }
        }

        public dynamic getPeriodoContableCompra_old(string cc, int numero)
        {
            var compraEK = ((List<dynamic>)consultaCheckProductivo(
                string.Format(@"SELECT * FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", cc, numero)
            ).ToObject<List<dynamic>>())[0];

            var mesCompra = ((DateTime)compraEK.fecha).Month;
            var anioCompra = ((DateTime)compraEK.fecha).Year;

            var periodoContableEK = consultaCheckProductivo(string.Format(@"SELECT * FROM sc_mesproc WHERE year = {0} AND mes = {1}", anioCompra, mesCompra));

            if (periodoContableEK != null)
            {
                var periodoContable = ((List<dynamic>)periodoContableEK.ToObject<List<dynamic>>())[0];

                if ((string)periodoContable.soc == "N")
                {
                    return new
                    {
                        periodoContable = periodoContable,
                        flagPeriodoAbierto = true
                    };
                }
                else
                {
                    return null;
                }
            }
            else
            {
                return null;
            }
        }

        //        public void migrarRequisicionesYCompras()
        //        {
        //            using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
        //            {
        //                using (var con = checkConexionProductivo())
        //                {
        //                    using (var trans = con.BeginTransaction())
        //                    {
        //                        try
        //                        {
        //                            var requisicionesEK = consultaCheckProductivo(string.Format(@"SELECT * FROM so_requisicion WHERE st_estatus != 'T'"));

        //                            if (requisicionesEK != null)
        //                            {
        //                                var requisiciones = (List<dynamic>)requisicionesEK.ToObject<List<dynamic>>();
        //                                var requisicionesSIGOPLAN = _context.tblCom_Req.ToList();

        //                                foreach (var req in requisiciones)
        //                                {
        //                                    var requisicionSIGOPLAN = requisicionesSIGOPLAN.FirstOrDefault(x => x.cc == (string)req.cc && x.numero == (int)req.numero);

        //                                    if (requisicionSIGOPLAN == null)
        //                                    {
        //                                        var nuevaReq = new tblCom_Req();

        //                                        nuevaReq.cc = (string)req.cc;
        //                                        nuevaReq.numero = (int)req.numero;
        //                                        nuevaReq.fecha = (DateTime)req.fecha;
        //                                        nuevaReq.idLibreAbordo = ;
        //                                        nuevaReq.idTipoReqOc = (int)req.idTipoReqOc;
        //                                        nuevaReq.solicito = (int)req.solicito;
        //                                        nuevaReq.vobo = (int)req.vobo;
        //                                        nuevaReq.autorizo = (int)req.autorizo;
        //                                        nuevaReq.comentarios = (string)req.comentarios;
        //                                        nuevaReq.stEstatus = (string)req.stEstatus;
        //                                        nuevaReq.stImpresa = (string)req.stImpresa == "I";
        //                                        nuevaReq.stAutoriza = (string)req.stAutoriza == "S";
        //                                        nuevaReq.empAutoriza = req.emp_autoriza != null ? (int)req.emp_autoriza : 0;
        //                                        nuevaReq.empModifica = req.emp_modifica != null ? (int)req.emp_modifica : 0;
        //                                        nuevaReq.modifica = (DateTime)req.fecha_modifica;
        //                                        nuevaReq.autoriza = (DateTime)req.fecha_autoriza;
        //                                        nuevaReq.isTmc = (int)req.tmc == 1;
        //                                        nuevaReq.isActivos = (int)req.autoriza_activos == 1;
        //                                        nuevaReq.folioAsignado = "";
        //                                        nuevaReq.consigna = false;
        //                                        nuevaReq.validadoAlmacen = false;
        //                                        nuevaReq.validadoRequisitor = false;
        //                                        nuevaReq.comprador = 0;

        //                                        _context.tblCom_Req.Add(nuevaReq);
        //                                        _context.SaveChanges();

        //                                        var detalleEK = consultaCheckProductivo(
        //                                            string.Format(@"SELECT * FROM so_requisicion_det WHERE cc = '{0}' AND numero = {1}", (string)req.cc, (int)req.numero)
        //                                        );

        //                                        if (detalleEK != null)
        //                                        {
        //                                            var detalle = (List<dynamic>)detalleEK.ToObject<List<dynamic>>();

        //                                            foreach (var det in detalle)
        //                                            {
        //                                                var descripcion = "";
        //                                                var descripcionPartidaEK = consultaCheckProductivo(
        //                                                    string.Format(@"SELECT 
        //                                                                        * 
        //                                                                    FROM so_req_det_linea 
        //                                                                    WHERE cc = '{0}' AND numero = {1} AND partida = {2}", (string)req.cc, (int)req.numero, (int)det.partida)
        //                                                );

        //                                                if (descripcionPartidaEK != null)
        //                                                {
        //                                                    descripcion = (string)(((List<dynamic>)descripcionPartidaEK.ToObject<List<dynamic>>())[0].descripcion);
        //                                                }

        //                                                var nuevaReqDet = new tblCom_ReqDet();

        //                                                nuevaReqDet.idReq = req.id;
        //                                                nuevaReqDet.partida = (int)det.partida;
        //                                                nuevaReqDet.insumo = (int)det.insumo;
        //                                                nuevaReqDet.requerido = (DateTime)det.fecha_requerido;
        //                                                nuevaReqDet.cantidad = Convert.ToDecimal(det.cantidad, CultureInfo.InvariantCulture);
        //                                                nuevaReqDet.cantOrdenada = Convert.ToDecimal(det.cant_ordenada, CultureInfo.InvariantCulture);
        //                                                nuevaReqDet.ordenada = (DateTime)det.fecha_ordenada;
        //                                                nuevaReqDet.estatus = (string)det.estatus;
        //                                                nuevaReqDet.cantCancelada = Convert.ToDecimal(det.cant_cancelada, CultureInfo.InvariantCulture);
        //                                                nuevaReqDet.referencia = (string)det.referencia_1;
        //                                                nuevaReqDet.cantExcedida = Convert.ToDecimal(det.cantidad_excedida_ppto, CultureInfo.InvariantCulture);
        //                                                nuevaReqDet.area = det.area != null ? (int)det.area : 0;
        //                                                nuevaReqDet.cuenta = det.cuenta != null ? (int)det.cuenta : 0;
        //                                                nuevaReqDet.descripcion = descripcion;
        //                                                nuevaReqDet.observaciones = "";

        //                                                _context.tblCom_ReqDet.Add(nuevaReqDet);
        //                                                _context.SaveChanges();
        //                                            }
        //                                        }
        //                                    }
        //                                }
        //                            }

        //                            var comprasEK = consultaCheckProductivo(string.Format(@"SELECT * FROM so_orden_compra WHERE (ST_OC != 'A' OR ST_OC IS NULL)"));

        //                            if (comprasEK != null)
        //                            {
        //                                var compras = (List<dynamic>)comprasEK.ToObject<List<dynamic>>();
        //                                var comprasSIGOPLAN = _context.tblCom_OrdenCompra.ToList();

        //                                foreach (var com in compras)
        //                                {
        //                                    var compraSIGOPLAN = comprasSIGOPLAN.FirstOrDefault(x => x.cc == (string)com.cc && x.numero == (int)com.numero);

        //                                    if (compraSIGOPLAN == null)
        //                                    {
        //                                        var compradorSIGOPLAN = _context.tblP_Usuario_Enkontrol.ToList().FirstOrDefault(x => x.empleado == (int)com.comprador);

        //                                        var nuevaCompra = new tblCom_OrdenCompra
        //                                        {
        //                                            cc = (string)com.cc,
        //                                            numero = (int)com.numero,
        //                                            fecha = (DateTime)com.fecha,
        //                                            idLibreAbordo = ,
        //                                            tipo_oc_req = ((int)com.tipo_oc_req).ToString(),
        //                                            compradorSIGOPLAN = compradorSIGOPLAN != null ? compradorSIGOPLAN.idUsuario : 0,
        //                                            compradorEnkontrol = (int)com.comprador,
        //                                            moneda = ((int)com.moneda).ToString(),
        //                                            tipo_cambio = Convert.ToDecimal(com.tipo_cambio, CultureInfo.InvariantCulture),
        //                                            porcent_iva = Convert.ToDecimal(com.porcent_iva,CultureInfo.InvariantCulture),
        //                                            sub_total = Convert.ToDecimal(com.sub_total, CultureInfo.InvariantCulture),
        //                                            iva = Convert.ToDecimal(com.iva, CultureInfo.InvariantCulture),
        //                                            total = Convert.ToDecimal(com.total, CultureInfo.InvariantCulture),
        //                                            estatus = (string)com.estatus,
        //                                            comentarios = (string)com.comentarios,
        //                                            bienes_servicios = (string)com.bienes_servicios,
        //                                            CFDI = "",
        //                                            estatusRegistro = true
        //                                        };

        //                                        _context.tblCom_OrdenCompra.Add(nuevaCompra);
        //                                        _context.SaveChanges();

        //                                        var detalleEK = consultaCheckProductivo(
        //                                            string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", (string)com.cc, (int)com.numero)
        //                                        );

        //                                        if (detalleEK != null)
        //                                        {
        //                                            var detalle = (List<dynamic>)detalleEK.ToObject<List<dynamic>>();

        //                                            foreach (var det in detalle)
        //                                            {
        //                                                var descripcion = "";
        //                                                var descripcionPartidaEK = consultaCheckProductivo(
        //                                                    string.Format(@"SELECT 
        //                                                                        * 
        //                                                                    FROM so_orden_det_linea 
        //                                                                    WHERE cc = '{0}' AND numero = {1} AND partida = {2}", (string)com.cc, (int)com.numero, (int)det.partida)
        //                                                );

        //                                                if (descripcionPartidaEK != null)
        //                                                {
        //                                                    descripcion = (string)(((List<dynamic>)descripcionPartidaEK.ToObject<List<dynamic>>())[0].descripcion);
        //                                                }

        //                                                var nuevaCompraDet = new tblCom_OrdenCompraDet
        //                                        {
        //                                            idOrdenCompra = nuevaCompra.id,
        //                                            cc = nuevaCompra.cc,
        //                                            numero = nuevaCompra.numero,
        //                                            partida = (int)det.partida,
        //                                            insumo = (int)det.insumo,
        //                                            fecha_entrega = (DateTime)det.fecha_entrega,
        //                                            cantidad = Convert.ToDecimal(det.cantidad, CultureInfo.InvariantCulture),
        //                                            precio = Convert.ToDecimal(det.precio, CultureInfo.InvariantCulture),
        //                                            importe = Convert.ToDecimal(det.importe, CultureInfo.InvariantCulture),
        //                                            ajuste_cant = Convert.ToDecimal(det.ajuste_cant, CultureInfo.InvariantCulture),
        //                                            ajuste_imp = Convert.ToDecimal(det.ajuste_imp, CultureInfo.InvariantCulture),
        //                                            num_requisicion = (int)det.num_requisicion,
        //                                            part_requisicion = (int)det.part_requisicion,
        //                                            cant_recibida = Convert.ToDecimal(det.cant_recibida, CultureInfo.InvariantCulture),
        //                                            imp_recibido = Convert.ToDecimal(det.imp_recibido, CultureInfo.InvariantCulture),
        //                                            fecha_recibido = (DateTime)det.fecha_recibido,
        //                                            cant_canc = Convert.ToDecimal(det.cant_canc, CultureInfo.InvariantCulture),
        //                                            imp_canc = Convert.ToDecimal(det.imp_canc, CultureInfo.InvariantCulture),
        //                                            acum_ant = det.acum_ant != null ? Convert.ToDecimal(det.acum_ant, CultureInfo.InvariantCulture) : default(decimal),
        //                                            max_orig = det.max_orig != null ? Convert.ToDecimal(det.max_orig, CultureInfo.InvariantCulture) : default(decimal),
        //                                            max_ppto = det.max_ppto != null ? Convert.ToDecimal(det.max_ppto, CultureInfo.InvariantCulture) : default(decimal),
        //                                            area = det.area != null ? (int)det.area : 0,
        //                                            cuenta = det.cuenta != null ? (int)det.cuenta : 0,
        //                                            porcent_iva = det.porcent_iva != null ? Convert.ToDecimal(det.porcent_iva, CultureInfo.InvariantCulture) : default(decimal),
        //                                            iva = det.iva != null ? Convert.ToDecimal(det.iva, CultureInfo.InvariantCulture) : default(decimal),
        //                                            partidaDescripcion = descripcion,
        //                                            estatusRegistro = true
        //                                        };

        //                                        _context.tblCom_OrdenCompraDet.Add(nuevaCompraDet);
        //                                        _context.SaveChanges();
        //                                            }
        //                                        }
        //                                    }
        //                                }
        //                            }

        //                            trans.Commit();
        //                            dbSigoplanTransaction.Commit();
        //                        }
        //                        catch (Exception)
        //                        {
        //                            trans.Rollback();
        //                            dbSigoplanTransaction.Rollback();
        //                        }
        //                    }
        //                }
        //            }
        //        }

        public List<entradasAlmacenDTO> GetDatosReporteEntradaOC(string cc, int? num, long numMovimiento)
        {
            var entradasDTO = new List<entradasAlmacenDTO>();

            if (vSesiones.sesionEmpresaActual != (int)EmpresaEnum.Peru)
            {
                dynamic compra = null;
                if (num == null)
                {
                    compra = consultaCheckProductivo(string.Format(@"SELECT TOP 1 o.* FROM so_orden_compra AS o INNER JOIN si_movimientos AS i on o.cc = i.cc AND o.numero = i.orden_ct WHERE o.cc = '{0}' AND i.numero = '{1}'", cc, numMovimiento));
                }
                else
                {
                    compra = consultaCheckProductivo(string.Format(@"SELECT * FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", cc, num.Value));
                }

                if (compra == null)
                {
                    return null;
                }

                var ccDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM cc WHERE cc = '{0}' AND st_ppto != 'T'", cc));
                var ccDesc = (string)(((List<dynamic>)ccDescEK.ToObject<List<dynamic>>())[0].descripcion);

                dynamic proveedor = null;

                var compraENKONTROL = ((List<dynamic>)compra.ToObject<List<dynamic>>())[0];

                proveedor = ((List<dynamic>)consultaCheckProductivo(
                    string.Format(@"SELECT * FROM sp_proveedores WHERE numpro = {0}", (int)compraENKONTROL.proveedor)
                ).ToObject<List<dynamic>>())[0];

                // Movimientos entradas almacén
                dynamic movimientoEntrada = null;
                if (num == null)
                {
                    movimientoEntrada = ((List<dynamic>)consultaCheckProductivo(
                    string.Format(@"SELECT * FROM si_movimientos WHERE tipo_mov = 1 AND numero = {0} AND cc = '{1}' AND orden_ct = {2}", numMovimiento, (string)compraENKONTROL.cc, compraENKONTROL.numero)
                ).ToObject<List<dynamic>>())[0];
                }
                else
                {
                    movimientoEntrada = ((List<dynamic>)consultaCheckProductivo(
                    string.Format(@"SELECT * FROM si_movimientos WHERE tipo_mov = 1 AND numero = {0} AND cc = '{1}' AND orden_ct = {2}", numMovimiento, (string)compraENKONTROL.cc, num.Value)
                ).ToObject<List<dynamic>>())[0];
                }

                if (movimientoEntrada == null)
                {
                    return null;
                }

                var almacenDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", (int)movimientoEntrada.almacen));
                var almacenDesc = (string)(((List<dynamic>)almacenDescEK.ToObject<List<dynamic>>())[0].descripcion);
                var recibioDesc = (string)((List<dynamic>)consultaCheckProductivo(
                    string.Format(@"SELECT * FROM empleados WHERE empleado = {0}", (int)movimientoEntrada.empleado)
                ).ToObject<List<dynamic>>())[0].descripcion;

                dynamic detallesMovimientos = ((List<dynamic>)consultaCheckProductivo(
                         string.Format(@"SELECT * FROM si_movimientos_det WHERE tipo_mov = 1 AND almacen = {0} AND numero = {1}", (int)movimientoEntrada.almacen, numMovimiento)
                     ).ToObject<List<dynamic>>());

                foreach (var detalle in detallesMovimientos)
                {
                    var insumoDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM insumos WHERE insumo = {0}", (int)detalle.insumo));
                    var insumoDesc = (string)(((List<dynamic>)insumoDescEK.ToObject<List<dynamic>>())[0].descripcion);

                    entradasDTO.Add(new entradasAlmacenDTO
                    {
                        centroCosto = String.Format("{0}-{1}", compraENKONTROL.cc, ccDesc),
                        folioEntrada = numMovimiento.ToString(),
                        almacen = String.Format("{0}-{1}", (string)movimientoEntrada.almacen, almacenDesc),
                        fechaEntrada = movimientoEntrada.fecha,
                        partida = detalle.partida,
                        insumo = String.Format("{0}-{1}", (int)detalle.insumo, insumoDesc ?? ""),
                        areaCuenta = String.Format("{0}-{1}", (int)detalle.area, (int)detalle.cuenta),
                        referencia = "",
                        remision = "",
                        cantidad = (decimal)detalle.cantidad,
                        precio = (decimal)detalle.precio,
                        importe = (decimal)detalle.importe,
                        comentarios = movimientoEntrada.comentarios != null ? (string)movimientoEntrada.comentarios : "",
                        ordenCompra = num == null ? compraENKONTROL.numero.ToString() : num.Value.ToString(),
                        proveedor = (string)proveedor.nombre,
                        direccion = (string)proveedor.direccion,
                        ciudad = (string)proveedor.ciudad,
                        telefonos = (string)proveedor.telefono1,
                        area_alm = (string)detalle.area_alm ?? "",
                        lado_alm = (string)detalle.lado_alm ?? "",
                        estante_alm = (string)detalle.estante_alm ?? "",
                        nivel_alm = (string)detalle.nivel_alm ?? "",
                        recibio = recibioDesc
                    });
                }
            }
            else
            {
                var PERU_tipoCompra = "";

                if (vSesiones.sesionCurrentView == 7260) //Compras Inventariables
                {
                    PERU_tipoCompra = "RQ";
                }
                else if (vSesiones.sesionCurrentView == 7315) //Compras No Inventariables
                {
                    PERU_tipoCompra = "RS";
                }

                var registroCompra = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.estatusRegistro && x.cc == cc && x.numero == num && x.PERU_tipoCompra == PERU_tipoCompra);
                var registroMovimiento = _context.tblAlm_Movimientos.FirstOrDefault(x => x.estatusHabilitado && x.cc == cc && x.tipo_mov == 1 && x.numero == numMovimiento && x.orden_ct == registroCompra.numero);
                var listaDetalleMovimiento = _context.tblAlm_MovimientosDet.Where(x => x.estatusHabilitado && x.almacen == registroMovimiento.almacen && x.tipo_mov == 1 && x.numero == registroMovimiento.numero).ToList();
                var listaUsuarios = _context.tblP_Usuario.Where(x => x.estatus).ToList();

                using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                {
                    var listaProveedoresStarsoft = _starsoft.MAEPROV.ToList();
                    var listaInsumosStarsoft = _starsoft.MAEART.ToList();

                    foreach (var detalle in listaDetalleMovimiento)
                    {
                        entradasDTO.Add(new entradasAlmacenDTO
                        {
                            centroCosto = string.Format("{0}-{1}", registroMovimiento.cc, _context.tblP_CC.Where(x => x.cc == registroMovimiento.cc).Select(x => x.descripcion).FirstOrDefault()),
                            folioEntrada = registroMovimiento.numero.ToString(),
                            almacen = string.Format("{0}-{1}", registroMovimiento.almacen, _starsoft.TABALM.ToList().Where(x => Int32.Parse(x.TAALMA) == registroMovimiento.almacen).Select(x => x.TADESCRI).FirstOrDefault()),
                            fechaEntrada = registroMovimiento.fecha,
                            partida = detalle.partida,
                            insumo = string.Format("{0}-{1}", ("0" + detalle.insumo.ToString()), listaInsumosStarsoft.Where(x => x.ACODIGO == ("0" + detalle.insumo.ToString())).Select(x => x.ADESCRI).FirstOrDefault()),
                            areaCuenta = "-",
                            referencia = "",
                            remision = "",
                            cantidad = detalle.cantidad,
                            precio = detalle.precio,
                            importe = detalle.importe,
                            comentarios = registroMovimiento.comentarios ?? "",
                            ordenCompra = registroMovimiento.orden_ct.ToString(),
                            proveedor = listaProveedoresStarsoft.Where(x => x.PRVCCODIGO == registroCompra.PERU_proveedor).Select(x => x.PRVCNOMBRE).FirstOrDefault(),
                            direccion = "",
                            ciudad = "",
                            telefonos = "",
                            area_alm = detalle.area_alm,
                            lado_alm = detalle.lado_alm,
                            estante_alm = detalle.estante_alm,
                            nivel_alm = detalle.nivel_alm,
                            recibio = listaUsuarios.Where(x => (registroMovimiento.idUsuarioCreacion != null ? x.id == (int)registroMovimiento.idUsuarioCreacion : false)).Select(x => x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno).FirstOrDefault()
                        });
                    }
                }
            }

            return entradasDTO.OrderBy(x => x.partida).ToList();
        }

        public List<entradasAlmacenDTO> GetDatosReporteEntradaNoInvOC(string cc, int? num, long numMovimiento)
        {
            var entradasDTO = new List<entradasAlmacenDTO>();

            if (vSesiones.sesionEmpresaActual != (int)EmpresaEnum.Peru)
            {
                dynamic compra = null;
                if (num == null)
                {
                    compra = consultaCheckProductivo(string.Format(@"SELECT TOP 1 o.* FROM so_orden_compra AS o INNER JOIN so_movimientos_noinv AS i on o.cc = i.cc AND o.numero = i.orden_ct WHERE o.cc = '{0}' AND i.remision = '{1}'", cc, numMovimiento));
                }
                else
                {
                    compra = consultaCheckProductivo(string.Format(@"SELECT * FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", cc, num.Value));
                }

                if (compra == null)
                {
                    return null;
                }

                var ccDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM cc WHERE cc = '{0}' AND st_ppto != 'T'", cc));
                var ccDesc = (string)(((List<dynamic>)ccDescEK.ToObject<List<dynamic>>())[0].descripcion);

                dynamic proveedor = null;

                var compraENKONTROL = ((List<dynamic>)compra.ToObject<List<dynamic>>())[0];

                proveedor = ((List<dynamic>)consultaCheckProductivo(
                    string.Format(@"SELECT * FROM sp_proveedores WHERE numpro = {0}", (int)compraENKONTROL.proveedor)
                ).ToObject<List<dynamic>>())[0];

                // Movimientos entradas almacén
                dynamic movimientoEntrada = null;
                if (num == null)
                {
                    movimientoEntrada = ((List<dynamic>)consultaCheckProductivo(
                    string.Format(@"SELECT * FROM so_movimientos_noinv WHERE tipo_mov = 1 AND remision = {0} AND cc = '{1}' AND orden_ct = {2}", numMovimiento, (string)compraENKONTROL.cc, compraENKONTROL.numero)
                ).ToObject<List<dynamic>>())[0];
                }
                else
                {
                    movimientoEntrada = ((List<dynamic>)consultaCheckProductivo(
                    string.Format(@"SELECT * FROM so_movimientos_noinv WHERE tipo_mov = 1 AND remision = {0} AND cc = '{1}' AND orden_ct = {2}", numMovimiento, (string)compraENKONTROL.cc, num.Value)
                ).ToObject<List<dynamic>>())[0];
                }

                if (movimientoEntrada == null)
                {
                    return null;
                }

                var almacenDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM si_almacen WHERE almacen = {0}", (int)movimientoEntrada.almacen));
                var almacenDesc = (string)(((List<dynamic>)almacenDescEK.ToObject<List<dynamic>>())[0].descripcion);

                dynamic detallesMovimientos = ((List<dynamic>)consultaCheckProductivo(
                    string.Format(@"SELECT * FROM so_movimientos_noinv_det WHERE tipo_mov = 1 AND almacen = {0} AND remision = {1}", (int)movimientoEntrada.almacen, numMovimiento)
                ).ToObject<List<dynamic>>());

                foreach (var detalle in detallesMovimientos)
                {
                    var insumoDescEK = consultaCheckProductivo(string.Format(@"SELECT * FROM insumos WHERE insumo = {0}", (int)detalle.insumo));
                    var insumoDesc = (string)(((List<dynamic>)insumoDescEK.ToObject<List<dynamic>>())[0].descripcion);

                    entradasDTO.Add(new entradasAlmacenDTO
                    {
                        centroCosto = String.Format("{0}-{1}", compraENKONTROL.cc, ccDesc),
                        folioEntrada = numMovimiento.ToString(),
                        almacen = String.Format("{0}-{1}", (string)movimientoEntrada.almacen, almacenDesc),
                        fechaEntrada = movimientoEntrada.fecha,
                        partida = detalle.partida,
                        insumo = String.Format("{0}-{1}", (int)detalle.insumo, insumoDesc ?? ""),
                        areaCuenta = String.Format("{0}-{1}", (int)detalle.area, (int)detalle.cuenta),
                        referencia = "",
                        remision = "",
                        cantidad = (decimal)detalle.cantidad,
                        precio = (decimal)detalle.precio,
                        importe = (decimal)detalle.importe,
                        comentarios = movimientoEntrada.comentarios != null ? (string)movimientoEntrada.comentarios : "",
                        ordenCompra = num == null ? compraENKONTROL.numero.ToString() : num.Value.ToString(),
                        proveedor = (string)proveedor.nombre,
                        direccion = (string)proveedor.direccion,
                        ciudad = (string)proveedor.ciudad,
                        telefonos = (string)proveedor.telefono1,
                        area_alm = (string)detalle.area_alm ?? "",
                        lado_alm = (string)detalle.lado_alm ?? "",
                        estante_alm = (string)detalle.estante_alm ?? "",
                        nivel_alm = (string)detalle.nivel_alm ?? ""
                    });
                }
            }
            else
            {
                var registroCompra = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.estatusRegistro && x.cc == cc && x.numero == num);
                var registroMovimiento = _context.tblAlm_Movimientos.FirstOrDefault(x => x.estatusHabilitado && x.cc == cc && x.tipo_mov == 1 && x.numero == numMovimiento);
                var listaDetalleMovimiento = _context.tblAlm_MovimientosDet.Where(x => x.estatusHabilitado && x.almacen == registroMovimiento.almacen && x.tipo_mov == 1 && x.numero == registroMovimiento.numero).ToList();
                var listaUsuarios = _context.tblP_Usuario.Where(x => x.estatus).ToList();

                using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                {
                    var listaProveedoresStarsoft = _starsoft.MAEPROV.ToList();
                    var listaInsumosStarsoft = _starsoft.MAEART.ToList();

                    foreach (var detalle in listaDetalleMovimiento)
                    {
                        entradasDTO.Add(new entradasAlmacenDTO
                        {
                            centroCosto = string.Format("{0}-{1}", registroMovimiento.cc, _context.tblP_CC.Where(x => x.cc == registroMovimiento.cc).Select(x => x.descripcion).FirstOrDefault()),
                            folioEntrada = registroMovimiento.numero.ToString(),
                            almacen = string.Format("{0}-{1}", registroMovimiento.almacen, _starsoft.TABALM.ToList().Where(x => Int32.Parse(x.TAALMA) == registroMovimiento.almacen).Select(x => x.TADESCRI).FirstOrDefault()),
                            fechaEntrada = registroMovimiento.fecha,
                            partida = detalle.partida,
                            insumo = string.Format("{0}-{1}", ("0" + detalle.insumo.ToString()), listaInsumosStarsoft.Where(x => x.ACODIGO == ("0" + detalle.insumo.ToString())).Select(x => x.ADESCRI).FirstOrDefault()),
                            areaCuenta = "-",
                            referencia = "",
                            remision = "",
                            cantidad = detalle.cantidad,
                            precio = detalle.precio,
                            importe = detalle.importe,
                            comentarios = registroMovimiento.comentarios ?? "",
                            ordenCompra = registroMovimiento.orden_ct.ToString(),
                            proveedor = listaProveedoresStarsoft.Where(x => x.PRVCCODIGO == registroCompra.PERU_proveedor).Select(x => x.PRVCNOMBRE).FirstOrDefault(),
                            direccion = "",
                            ciudad = "",
                            telefonos = "",
                            area_alm = detalle.area_alm,
                            lado_alm = detalle.lado_alm,
                            estante_alm = detalle.estante_alm,
                            nivel_alm = detalle.nivel_alm,
                            recibio = listaUsuarios.Where(x => (registroMovimiento.idUsuarioCreacion != null ? x.id == (int)registroMovimiento.idUsuarioCreacion : false)).Select(x => x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno).FirstOrDefault()
                        });
                    }
                }
            }

            return entradasDTO;
        }

        public dynamic getEntradas(string cc, int numero)
        {
            var compraEK = consultaCheckProductivo(string.Format(@"SELECT * FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", cc, numero));
            var compra = ((List<dynamic>)compraEK.ToObject<List<dynamic>>())[0];

            if ((string)compra.bienes_servicios == "B")
            {
                var movimientosEK = consultaCheckProductivo(
                    string.Format(@"SELECT 
                                        mov.*, 
                                        alm.descripcion AS almacenDesc 
                                    FROM si_movimientos mov 
                                        INNER JOIN si_almacen alm ON mov.almacen = alm.almacen 
                                    WHERE mov.cc = '{0}' AND mov.orden_ct = {1}", cc, numero)
                );

                if (movimientosEK != null)
                {
                    var movimientos = (List<dynamic>)movimientosEK.ToObject<List<dynamic>>();

                    return movimientos.Select(x => new
                    {
                        almacenDesc = (int)x.almacen + " - " + (string)x.almacenDesc,
                        numero = (int)x.numero,
                        fecha = (DateTime)x.fecha
                    }).ToList();
                }
                else
                {
                    return new List<dynamic>();
                }
            }
            else
            {
                var movimientosEK = consultaCheckProductivo(
                    string.Format(@"SELECT 
                                        mov.*, 
                                        alm.descripcion AS almacenDesc 
                                    FROM so_movimientos_noinv mov 
                                        INNER JOIN si_almacen alm ON mov.almacen = alm.almacen 
                                    WHERE mov.cc = '{0}' AND mov.orden_ct = {1}", cc, numero)
                );

                if (movimientosEK != null)
                {
                    var movimientos = (List<dynamic>)movimientosEK.ToObject<List<dynamic>>();

                    return movimientos.Select(x => new
                    {
                        almacenDesc = (int)x.almacen + " - " + (string)x.almacenDesc,
                        numero = (int)x.remision,
                        fecha = (DateTime)x.fecha
                    }).ToList();
                }
                else
                {
                    return new List<dynamic>();
                }
            }
        }

        public bool actualizarAcumula(int almacen, string cc, MovimientoDetalleEnkontrolDTO det, DbContextTransaction dbSigoplanTransaction, OdbcTransaction trans)
        {
            var anio = DateTime.Now.Year;
            var insumo = det.insumo;
            var cantidad = det.cantidad;
            var precio = det.precio;
            var importe = cantidad * precio;
            var tipoMovimiento = det.tipo_mov;

            var mes = DateTime.Now.Month;
            var columnaExistencia = "existencia_" + (tipoMovimiento < 50 ? "ent_" : "sal_");
            var columnaImporte = "importe_" + (tipoMovimiento < 50 ? "ent_" : "sal_");

            #region Localizar Columnas Afectadas
            switch (mes)
            {
                case 1:
                    columnaExistencia = string.Concat(columnaExistencia, "ene");
                    columnaImporte = string.Concat(columnaImporte, "ene");
                    break;
                case 2:
                    columnaExistencia = string.Concat(columnaExistencia, "feb");
                    columnaImporte = string.Concat(columnaImporte, "feb");
                    break;
                case 3:
                    columnaExistencia = string.Concat(columnaExistencia, "mar");
                    columnaImporte = string.Concat(columnaImporte, "mar");
                    break;
                case 4:
                    columnaExistencia = string.Concat(columnaExistencia, "abr");
                    columnaImporte = string.Concat(columnaImporte, "abr");
                    break;
                case 5:
                    columnaExistencia = string.Concat(columnaExistencia, "may");
                    columnaImporte = string.Concat(columnaImporte, "may");
                    break;
                case 6:
                    columnaExistencia = string.Concat(columnaExistencia, "jun");
                    columnaImporte = string.Concat(columnaImporte, "jun");
                    break;
                case 7:
                    columnaExistencia = string.Concat(columnaExistencia, "jul");
                    columnaImporte = string.Concat(columnaImporte, "jul");
                    break;
                case 8:
                    columnaExistencia = string.Concat(columnaExistencia, "ago");
                    columnaImporte = string.Concat(columnaImporte, "ago");
                    break;
                case 9:
                    columnaExistencia = string.Concat(columnaExistencia, "sep");
                    columnaImporte = string.Concat(columnaImporte, "sep");
                    break;
                case 10:
                    columnaExistencia = string.Concat(columnaExistencia, "oct");
                    columnaImporte = string.Concat(columnaImporte, "oct");
                    break;
                case 11:
                    columnaExistencia = string.Concat(columnaExistencia, "nov");
                    columnaImporte = string.Concat(columnaImporte, "nov");
                    break;
                case 12:
                    columnaExistencia = string.Concat(columnaExistencia, "dic");
                    columnaImporte = string.Concat(columnaImporte, "dic");
                    break;
            }
            #endregion

            var count = 0;

            switch ((MainContextEnum)vSesiones.sesionEmpresaActual)
            {
                case MainContextEnum.Colombia:
                    {
                        #region COLOMBIAS
                        #region Update Registro Acumula Almacén
                        var registroAcumulaAlmacenEK = consultaCheckProductivo(
                            string.Format(@"SELECT * FROM si_acumula_almacen WHERE almacen = {0} AND cc = '{1}' AND ano = {2} AND insumo = {3}", almacen, cc, anio, insumo)
                        );

                        if (registroAcumulaAlmacenEK != null)
                        {
                            var registroAcumulaAlmacen = ((List<AcumulaEnkontrolDTO>)registroAcumulaAlmacenEK.ToObject<List<AcumulaEnkontrolDTO>>())[0];

                            var existenciaAnteriorAlmacen = Convert.ToDecimal(registroAcumulaAlmacen.GetType().GetProperty(columnaExistencia).GetValue(registroAcumulaAlmacen), CultureInfo.InvariantCulture);
                            var importeAnteriorAlmacen = Convert.ToDecimal(registroAcumulaAlmacen.GetType().GetProperty(columnaImporte).GetValue(registroAcumulaAlmacen), CultureInfo.InvariantCulture);

                            var consultaUpdateAlmacen =
                                string.Format(@"UPDATE DBA.si_acumula_almacen 
                                SET {0} = ?, {1} = ? 
                                WHERE almacen = ? AND cc = ? AND ano = ? AND insumo = ?", columnaExistencia, columnaImporte);

                            using (var cmd = new OdbcCommand(consultaUpdateAlmacen))
                            {
                                OdbcParameterCollection parameters = cmd.Parameters;

                                parameters.Add(string.Concat("@", columnaExistencia), OdbcType.Numeric).Value = existenciaAnteriorAlmacen + cantidad;
                                parameters.Add(string.Concat("@", columnaImporte), OdbcType.Numeric).Value = importeAnteriorAlmacen + importe;

                                parameters.Add("@almacen", OdbcType.Numeric).Value = almacen;
                                parameters.Add("@cc", OdbcType.Char).Value = cc;
                                parameters.Add("@ano", OdbcType.Numeric).Value = anio;
                                parameters.Add("@insumo", OdbcType.Numeric).Value = insumo;

                                cmd.Connection = trans.Connection;
                                cmd.Transaction = trans;

                                count += cmd.ExecuteNonQuery();
                            }
                        }
                        else
                        {
                            #region Insert Registro en la tabla "si_acumula_almacen"
                            var consultaInsertAcumulaAlmacen = @"INSERT INTO DBA.si_acumula_almacen 
                                                        (almacen, cc, ano, 
                                                        existencia_ent_ini, importe_ent_ini, existencia_sal_ini, importe_sal_ini, 
                                                        existencia_ent_ene, importe_ent_ene, existencia_sal_ene, importe_sal_ene, 
                                                        existencia_ent_feb, importe_ent_feb, existencia_sal_feb, importe_sal_feb, 
                                                        existencia_ent_mar, importe_ent_mar, existencia_sal_mar, importe_sal_mar, 
                                                        existencia_ent_abr, importe_ent_abr, existencia_sal_abr, importe_sal_abr, 
                                                        existencia_ent_may, importe_ent_may, existencia_sal_may, importe_sal_may, 
                                                        existencia_ent_jun, importe_ent_jun, existencia_sal_jun, importe_sal_jun, 
                                                        existencia_ent_jul, importe_ent_jul, existencia_sal_jul, importe_sal_jul, 
                                                        existencia_ent_ago, importe_ent_ago, existencia_sal_ago, importe_sal_ago, 
                                                        existencia_ent_sep, importe_ent_sep, existencia_sal_sep, importe_sal_sep, 
                                                        existencia_ent_oct, importe_ent_oct, existencia_sal_oct, importe_sal_oct, 
                                                        existencia_ent_nov, importe_ent_nov, existencia_sal_nov, importe_sal_nov, 
                                                        existencia_ent_dic, importe_ent_dic, existencia_sal_dic, importe_sal_dic, 
                                                        insumo) 
                                                        VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                            using (var cmd = new OdbcCommand(consultaInsertAcumulaAlmacen))
                            {
                                OdbcParameterCollection parameters = cmd.Parameters;

                                parameters.Add("@almacen", OdbcType.Numeric).Value = almacen;
                                parameters.Add("@cc", OdbcType.Char).Value = cc;
                                parameters.Add("@ano", OdbcType.Numeric).Value = DateTime.Now.Year;

                                parameters.Add("@existencia_ent_ini", OdbcType.Numeric).Value = 0;
                                parameters.Add("@importe_ent_ini", OdbcType.Numeric).Value = 0;
                                parameters.Add("@existencia_sal_ini", OdbcType.Numeric).Value = 0;
                                parameters.Add("@importe_sal_ini", OdbcType.Numeric).Value = 0;

                                parameters.Add("@existencia_ent_ene", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_ene" ? cantidad : 0;
                                parameters.Add("@importe_ent_ene", OdbcType.Numeric).Value = columnaImporte == "importe_ent_ene" ? importe : 0;
                                parameters.Add("@existencia_sal_ene", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_ene" ? cantidad : 0;
                                parameters.Add("@importe_sal_ene", OdbcType.Numeric).Value = columnaImporte == "importe_sal_ene" ? importe : 0;

                                parameters.Add("@existencia_ent_feb", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_feb" ? cantidad : 0;
                                parameters.Add("@importe_ent_feb", OdbcType.Numeric).Value = columnaImporte == "importe_ent_feb" ? importe : 0;
                                parameters.Add("@existencia_sal_feb", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_feb" ? cantidad : 0;
                                parameters.Add("@importe_sal_feb", OdbcType.Numeric).Value = columnaImporte == "importe_sal_feb" ? importe : 0;

                                parameters.Add("@existencia_ent_mar", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_mar" ? cantidad : 0;
                                parameters.Add("@importe_ent_mar", OdbcType.Numeric).Value = columnaImporte == "importe_ent_mar" ? importe : 0;
                                parameters.Add("@existencia_sal_mar", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_mar" ? cantidad : 0;
                                parameters.Add("@importe_sal_mar", OdbcType.Numeric).Value = columnaImporte == "importe_sal_mar" ? importe : 0;

                                parameters.Add("@existencia_ent_abr", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_abr" ? cantidad : 0;
                                parameters.Add("@importe_ent_abr", OdbcType.Numeric).Value = columnaImporte == "importe_ent_abr" ? importe : 0;
                                parameters.Add("@existencia_sal_abr", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_abr" ? cantidad : 0;
                                parameters.Add("@importe_sal_abr", OdbcType.Numeric).Value = columnaImporte == "importe_sal_abr" ? importe : 0;

                                parameters.Add("@existencia_ent_may", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_may" ? cantidad : 0;
                                parameters.Add("@importe_ent_may", OdbcType.Numeric).Value = columnaImporte == "importe_ent_may" ? importe : 0;
                                parameters.Add("@existencia_sal_may", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_may" ? cantidad : 0;
                                parameters.Add("@importe_sal_may", OdbcType.Numeric).Value = columnaImporte == "importe_sal_may" ? importe : 0;

                                parameters.Add("@existencia_ent_jun", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_jun" ? cantidad : 0;
                                parameters.Add("@importe_ent_jun", OdbcType.Numeric).Value = columnaImporte == "importe_ent_jun" ? importe : 0;
                                parameters.Add("@existencia_sal_jun", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_jun" ? cantidad : 0;
                                parameters.Add("@importe_sal_jun", OdbcType.Numeric).Value = columnaImporte == "importe_sal_jun" ? importe : 0;

                                parameters.Add("@existencia_ent_jul", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_jul" ? cantidad : 0;
                                parameters.Add("@importe_ent_jul", OdbcType.Numeric).Value = columnaImporte == "importe_ent_jul" ? importe : 0;
                                parameters.Add("@existencia_sal_jul", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_jul" ? cantidad : 0;
                                parameters.Add("@importe_sal_jul", OdbcType.Numeric).Value = columnaImporte == "importe_sal_jul" ? importe : 0;

                                parameters.Add("@existencia_ent_ago", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_ago" ? cantidad : 0;
                                parameters.Add("@importe_ent_ago", OdbcType.Numeric).Value = columnaImporte == "importe_ent_ago" ? importe : 0;
                                parameters.Add("@existencia_sal_ago", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_ago" ? cantidad : 0;
                                parameters.Add("@importe_sal_ago", OdbcType.Numeric).Value = columnaImporte == "importe_sal_ago" ? importe : 0;

                                parameters.Add("@existencia_ent_sep", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_sep" ? cantidad : 0;
                                parameters.Add("@importe_ent_sep", OdbcType.Numeric).Value = columnaImporte == "importe_ent_sep" ? importe : 0;
                                parameters.Add("@existencia_sal_sep", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_sep" ? cantidad : 0;
                                parameters.Add("@importe_sal_sep", OdbcType.Numeric).Value = columnaImporte == "importe_sal_sep" ? importe : 0;

                                parameters.Add("@existencia_ent_oct", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_oct" ? cantidad : 0;
                                parameters.Add("@importe_ent_oct", OdbcType.Numeric).Value = columnaImporte == "importe_ent_oct" ? importe : 0;
                                parameters.Add("@existencia_sal_oct", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_oct" ? cantidad : 0;
                                parameters.Add("@importe_sal_oct", OdbcType.Numeric).Value = columnaImporte == "importe_sal_oct" ? importe : 0;

                                parameters.Add("@existencia_ent_nov", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_nov" ? cantidad : 0;
                                parameters.Add("@importe_ent_nov", OdbcType.Numeric).Value = columnaImporte == "importe_ent_nov" ? importe : 0;
                                parameters.Add("@existencia_sal_nov", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_nov" ? cantidad : 0;
                                parameters.Add("@importe_sal_nov", OdbcType.Numeric).Value = columnaImporte == "importe_sal_nov" ? importe : 0;

                                parameters.Add("@existencia_ent_dic", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_dic" ? cantidad : 0;
                                parameters.Add("@importe_ent_dic", OdbcType.Numeric).Value = columnaImporte == "importe_ent_dic" ? importe : 0;
                                parameters.Add("@existencia_sal_dic", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_dic" ? cantidad : 0;
                                parameters.Add("@importe_sal_dic", OdbcType.Numeric).Value = columnaImporte == "importe_sal_dic" ? importe : 0;

                                parameters.Add("@insumo", OdbcType.Numeric).Value = insumo;

                                cmd.Connection = trans.Connection;
                                cmd.Transaction = trans;

                                count += cmd.ExecuteNonQuery();
                            }
                            #endregion
                        }
                        #endregion

                        #region Update Registro Acumula CC
                        var registroAcumulaCCEK = consultaCheckProductivo(
                            string.Format(@"SELECT * FROM si_acumula_cc WHERE cc = '{0}' AND ano = {1} AND insumo = {2}", cc, anio, insumo)
                        );

                        if (registroAcumulaCCEK != null)
                        {
                            var registroAcumulaCC = ((List<AcumulaEnkontrolDTO>)registroAcumulaCCEK.ToObject<List<AcumulaEnkontrolDTO>>())[0];

                            var existenciaAnteriorCC = Convert.ToDecimal(registroAcumulaCC.GetType().GetProperty(columnaExistencia).GetValue(registroAcumulaCC), CultureInfo.InvariantCulture);
                            var importeAnteriorCC = Convert.ToDecimal(registroAcumulaCC.GetType().GetProperty(columnaImporte).GetValue(registroAcumulaCC), CultureInfo.InvariantCulture);

                            var consultaUpdateCC =
                                string.Format(@"UPDATE DBA.si_acumula_cc 
                                SET {0} = ?, {1} = ?, ultimo_cp = ?, fecha_cp = ? 
                                WHERE cc = ? AND ano = ? AND insumo = ?", columnaExistencia, columnaImporte);

                            using (var cmd = new OdbcCommand(consultaUpdateCC))
                            {
                                OdbcParameterCollection parameters = cmd.Parameters;

                                parameters.Add(string.Concat("@", columnaExistencia), OdbcType.Numeric).Value = existenciaAnteriorCC + cantidad;
                                parameters.Add(string.Concat("@", columnaImporte), OdbcType.Numeric).Value = importeAnteriorCC + importe;

                                if (det.costo_prom > 0)
                                {
                                    parameters.Add("@ultimo_cp", OdbcType.Numeric).Value = det.costo_prom ?? 0;
                                    parameters.Add("@fecha_cp", OdbcType.Date).Value = DateTime.Now.Date;
                                }
                                else
                                {
                                    parameters.Add("@ultimo_cp", OdbcType.Numeric).Value = registroAcumulaCC.ultimo_cp ?? (object)DBNull.Value;
                                    parameters.Add("@fecha_cp", OdbcType.Date).Value = registroAcumulaCC.fecha_cp ?? (object)DBNull.Value;
                                }

                                parameters.Add("@cc", OdbcType.Char).Value = cc;
                                parameters.Add("@ano", OdbcType.Numeric).Value = anio;
                                parameters.Add("@insumo", OdbcType.Numeric).Value = insumo;

                                cmd.Connection = trans.Connection;
                                cmd.Transaction = trans;

                                count += cmd.ExecuteNonQuery();
                            }
                        }
                        else
                        {
                            #region Insert Registro en la tabla "si_acumula_cc"
                            var consultaInsertAcumulaCC = @"INSERT INTO DBA.si_acumula_cc 
                                                    (cc, ano, 
                                                    existencia_ent_ini, importe_ent_ini, existencia_sal_ini, importe_sal_ini, 
                                                    existencia_ent_ene, importe_ent_ene, existencia_sal_ene, importe_sal_ene, 
                                                    existencia_ent_feb, importe_ent_feb, existencia_sal_feb, importe_sal_feb, 
                                                    existencia_ent_mar, importe_ent_mar, existencia_sal_mar, importe_sal_mar, 
                                                    existencia_ent_abr, importe_ent_abr, existencia_sal_abr, importe_sal_abr, 
                                                    existencia_ent_may, importe_ent_may, existencia_sal_may, importe_sal_may, 
                                                    existencia_ent_jun, importe_ent_jun, existencia_sal_jun, importe_sal_jun, 
                                                    existencia_ent_jul, importe_ent_jul, existencia_sal_jul, importe_sal_jul, 
                                                    existencia_ent_ago, importe_ent_ago, existencia_sal_ago, importe_sal_ago, 
                                                    existencia_ent_sep, importe_ent_sep, existencia_sal_sep, importe_sal_sep, 
                                                    existencia_ent_oct, importe_ent_oct, existencia_sal_oct, importe_sal_oct, 
                                                    existencia_ent_nov, importe_ent_nov, existencia_sal_nov, importe_sal_nov, 
                                                    existencia_ent_dic, importe_ent_dic, existencia_sal_dic, importe_sal_dic, 
                                                    insumo, ultimo_cp, fecha_cp) 
                                                VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                            using (var cmd = new OdbcCommand(consultaInsertAcumulaCC))
                            {
                                OdbcParameterCollection parameters = cmd.Parameters;

                                parameters.Add("@cc", OdbcType.Char).Value = cc;
                                parameters.Add("@ano", OdbcType.Numeric).Value = DateTime.Now.Year;

                                parameters.Add("@existencia_ent_ini", OdbcType.Numeric).Value = 0;
                                parameters.Add("@importe_ent_ini", OdbcType.Numeric).Value = 0;
                                parameters.Add("@existencia_sal_ini", OdbcType.Numeric).Value = 0;
                                parameters.Add("@importe_sal_ini", OdbcType.Numeric).Value = 0;

                                parameters.Add("@existencia_ent_ene", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_ene" ? cantidad : 0;
                                parameters.Add("@importe_ent_ene", OdbcType.Numeric).Value = columnaImporte == "importe_ent_ene" ? importe : 0;
                                parameters.Add("@existencia_sal_ene", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_ene" ? cantidad : 0;
                                parameters.Add("@importe_sal_ene", OdbcType.Numeric).Value = columnaImporte == "importe_sal_ene" ? importe : 0;

                                parameters.Add("@existencia_ent_feb", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_feb" ? cantidad : 0;
                                parameters.Add("@importe_ent_feb", OdbcType.Numeric).Value = columnaImporte == "importe_ent_feb" ? importe : 0;
                                parameters.Add("@existencia_sal_feb", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_feb" ? cantidad : 0;
                                parameters.Add("@importe_sal_feb", OdbcType.Numeric).Value = columnaImporte == "importe_sal_feb" ? importe : 0;

                                parameters.Add("@existencia_ent_mar", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_mar" ? cantidad : 0;
                                parameters.Add("@importe_ent_mar", OdbcType.Numeric).Value = columnaImporte == "importe_ent_mar" ? importe : 0;
                                parameters.Add("@existencia_sal_mar", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_mar" ? cantidad : 0;
                                parameters.Add("@importe_sal_mar", OdbcType.Numeric).Value = columnaImporte == "importe_sal_mar" ? importe : 0;

                                parameters.Add("@existencia_ent_abr", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_abr" ? cantidad : 0;
                                parameters.Add("@importe_ent_abr", OdbcType.Numeric).Value = columnaImporte == "importe_ent_abr" ? importe : 0;
                                parameters.Add("@existencia_sal_abr", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_abr" ? cantidad : 0;
                                parameters.Add("@importe_sal_abr", OdbcType.Numeric).Value = columnaImporte == "importe_sal_abr" ? importe : 0;

                                parameters.Add("@existencia_ent_may", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_may" ? cantidad : 0;
                                parameters.Add("@importe_ent_may", OdbcType.Numeric).Value = columnaImporte == "importe_ent_may" ? importe : 0;
                                parameters.Add("@existencia_sal_may", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_may" ? cantidad : 0;
                                parameters.Add("@importe_sal_may", OdbcType.Numeric).Value = columnaImporte == "importe_sal_may" ? importe : 0;

                                parameters.Add("@existencia_ent_jun", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_jun" ? cantidad : 0;
                                parameters.Add("@importe_ent_jun", OdbcType.Numeric).Value = columnaImporte == "importe_ent_jun" ? importe : 0;
                                parameters.Add("@existencia_sal_jun", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_jun" ? cantidad : 0;
                                parameters.Add("@importe_sal_jun", OdbcType.Numeric).Value = columnaImporte == "importe_sal_jun" ? importe : 0;

                                parameters.Add("@existencia_ent_jul", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_jul" ? cantidad : 0;
                                parameters.Add("@importe_ent_jul", OdbcType.Numeric).Value = columnaImporte == "importe_ent_jul" ? importe : 0;
                                parameters.Add("@existencia_sal_jul", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_jul" ? cantidad : 0;
                                parameters.Add("@importe_sal_jul", OdbcType.Numeric).Value = columnaImporte == "importe_sal_jul" ? importe : 0;

                                parameters.Add("@existencia_ent_ago", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_ago" ? cantidad : 0;
                                parameters.Add("@importe_ent_ago", OdbcType.Numeric).Value = columnaImporte == "importe_ent_ago" ? importe : 0;
                                parameters.Add("@existencia_sal_ago", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_ago" ? cantidad : 0;
                                parameters.Add("@importe_sal_ago", OdbcType.Numeric).Value = columnaImporte == "importe_sal_ago" ? importe : 0;

                                parameters.Add("@existencia_ent_sep", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_sep" ? cantidad : 0;
                                parameters.Add("@importe_ent_sep", OdbcType.Numeric).Value = columnaImporte == "importe_ent_sep" ? importe : 0;
                                parameters.Add("@existencia_sal_sep", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_sep" ? cantidad : 0;
                                parameters.Add("@importe_sal_sep", OdbcType.Numeric).Value = columnaImporte == "importe_sal_sep" ? importe : 0;

                                parameters.Add("@existencia_ent_oct", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_oct" ? cantidad : 0;
                                parameters.Add("@importe_ent_oct", OdbcType.Numeric).Value = columnaImporte == "importe_ent_oct" ? importe : 0;
                                parameters.Add("@existencia_sal_oct", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_oct" ? cantidad : 0;
                                parameters.Add("@importe_sal_oct", OdbcType.Numeric).Value = columnaImporte == "importe_sal_oct" ? importe : 0;

                                parameters.Add("@existencia_ent_nov", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_nov" ? cantidad : 0;
                                parameters.Add("@importe_ent_nov", OdbcType.Numeric).Value = columnaImporte == "importe_ent_nov" ? importe : 0;
                                parameters.Add("@existencia_sal_nov", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_nov" ? cantidad : 0;
                                parameters.Add("@importe_sal_nov", OdbcType.Numeric).Value = columnaImporte == "importe_sal_nov" ? importe : 0;

                                parameters.Add("@existencia_ent_dic", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_dic" ? cantidad : 0;
                                parameters.Add("@importe_ent_dic", OdbcType.Numeric).Value = columnaImporte == "importe_ent_dic" ? importe : 0;
                                parameters.Add("@existencia_sal_dic", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_dic" ? cantidad : 0;
                                parameters.Add("@importe_sal_dic", OdbcType.Numeric).Value = columnaImporte == "importe_sal_dic" ? importe : 0;

                                parameters.Add("@insumo", OdbcType.Numeric).Value = insumo;
                                parameters.Add("@ultimo_cp", OdbcType.Numeric).Value = importe;
                                parameters.Add("@fecha_cp", OdbcType.Date).Value = DateTime.Now.Date;

                                cmd.Connection = trans.Connection;
                                cmd.Transaction = trans;

                                count += cmd.ExecuteNonQuery();
                            }
                            #endregion
                        }
                        #endregion

                        return true;
                        #endregion
                    }
                    break;
                default:
                    {
                        #region RESTO EMPRESAS
                        #region Update Registro Acumula Almacén
                        var registroAcumulaAlmacenEK = consultaCheckProductivo(
                            string.Format(@"SELECT * FROM si_acumula_almacen WHERE almacen = {0} AND cc = '{1}' AND ano = {2} AND insumo = {3}", almacen, cc, anio, insumo)
                        );

                        if (registroAcumulaAlmacenEK != null)
                        {
                            var registroAcumulaAlmacen = ((List<AcumulaEnkontrolDTO>)registroAcumulaAlmacenEK.ToObject<List<AcumulaEnkontrolDTO>>())[0];

                            var existenciaAnteriorAlmacen = Convert.ToDecimal(registroAcumulaAlmacen.GetType().GetProperty(columnaExistencia).GetValue(registroAcumulaAlmacen), CultureInfo.InvariantCulture);
                            var importeAnteriorAlmacen = Convert.ToDecimal(registroAcumulaAlmacen.GetType().GetProperty(columnaImporte).GetValue(registroAcumulaAlmacen), CultureInfo.InvariantCulture);

                            var consultaUpdateAlmacen =
                                string.Format(@"UPDATE si_acumula_almacen 
                                SET {0} = ?, {1} = ? 
                                WHERE almacen = ? AND cc = ? AND ano = ? AND insumo = ?", columnaExistencia, columnaImporte);

                            using (var cmd = new OdbcCommand(consultaUpdateAlmacen))
                            {
                                OdbcParameterCollection parameters = cmd.Parameters;

                                parameters.Add(string.Concat("@", columnaExistencia), OdbcType.Numeric).Value = existenciaAnteriorAlmacen + cantidad;
                                parameters.Add(string.Concat("@", columnaImporte), OdbcType.Numeric).Value = importeAnteriorAlmacen + importe;

                                parameters.Add("@almacen", OdbcType.Numeric).Value = almacen;
                                parameters.Add("@cc", OdbcType.Char).Value = cc;
                                parameters.Add("@ano", OdbcType.Numeric).Value = anio;
                                parameters.Add("@insumo", OdbcType.Numeric).Value = insumo;

                                cmd.Connection = trans.Connection;
                                cmd.Transaction = trans;

                                count += cmd.ExecuteNonQuery();
                            }
                        }
                        else
                        {
                            #region Insert Registro en la tabla "si_acumula_almacen"
                            var consultaInsertAcumulaAlmacen = @"INSERT INTO si_acumula_almacen 
                                                        (almacen, cc, ano, 
                                                        existencia_ent_ini, importe_ent_ini, existencia_sal_ini, importe_sal_ini, 
                                                        existencia_ent_ene, importe_ent_ene, existencia_sal_ene, importe_sal_ene, 
                                                        existencia_ent_feb, importe_ent_feb, existencia_sal_feb, importe_sal_feb, 
                                                        existencia_ent_mar, importe_ent_mar, existencia_sal_mar, importe_sal_mar, 
                                                        existencia_ent_abr, importe_ent_abr, existencia_sal_abr, importe_sal_abr, 
                                                        existencia_ent_may, importe_ent_may, existencia_sal_may, importe_sal_may, 
                                                        existencia_ent_jun, importe_ent_jun, existencia_sal_jun, importe_sal_jun, 
                                                        existencia_ent_jul, importe_ent_jul, existencia_sal_jul, importe_sal_jul, 
                                                        existencia_ent_ago, importe_ent_ago, existencia_sal_ago, importe_sal_ago, 
                                                        existencia_ent_sep, importe_ent_sep, existencia_sal_sep, importe_sal_sep, 
                                                        existencia_ent_oct, importe_ent_oct, existencia_sal_oct, importe_sal_oct, 
                                                        existencia_ent_nov, importe_ent_nov, existencia_sal_nov, importe_sal_nov, 
                                                        existencia_ent_dic, importe_ent_dic, existencia_sal_dic, importe_sal_dic, 
                                                        insumo) 
                                                        VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                            using (var cmd = new OdbcCommand(consultaInsertAcumulaAlmacen))
                            {
                                OdbcParameterCollection parameters = cmd.Parameters;

                                parameters.Add("@almacen", OdbcType.Numeric).Value = almacen;
                                parameters.Add("@cc", OdbcType.Char).Value = cc;
                                parameters.Add("@ano", OdbcType.Numeric).Value = DateTime.Now.Year;

                                parameters.Add("@existencia_ent_ini", OdbcType.Numeric).Value = 0;
                                parameters.Add("@importe_ent_ini", OdbcType.Numeric).Value = 0;
                                parameters.Add("@existencia_sal_ini", OdbcType.Numeric).Value = 0;
                                parameters.Add("@importe_sal_ini", OdbcType.Numeric).Value = 0;

                                parameters.Add("@existencia_ent_ene", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_ene" ? cantidad : 0;
                                parameters.Add("@importe_ent_ene", OdbcType.Numeric).Value = columnaImporte == "importe_ent_ene" ? importe : 0;
                                parameters.Add("@existencia_sal_ene", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_ene" ? cantidad : 0;
                                parameters.Add("@importe_sal_ene", OdbcType.Numeric).Value = columnaImporte == "importe_sal_ene" ? importe : 0;

                                parameters.Add("@existencia_ent_feb", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_feb" ? cantidad : 0;
                                parameters.Add("@importe_ent_feb", OdbcType.Numeric).Value = columnaImporte == "importe_ent_feb" ? importe : 0;
                                parameters.Add("@existencia_sal_feb", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_feb" ? cantidad : 0;
                                parameters.Add("@importe_sal_feb", OdbcType.Numeric).Value = columnaImporte == "importe_sal_feb" ? importe : 0;

                                parameters.Add("@existencia_ent_mar", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_mar" ? cantidad : 0;
                                parameters.Add("@importe_ent_mar", OdbcType.Numeric).Value = columnaImporte == "importe_ent_mar" ? importe : 0;
                                parameters.Add("@existencia_sal_mar", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_mar" ? cantidad : 0;
                                parameters.Add("@importe_sal_mar", OdbcType.Numeric).Value = columnaImporte == "importe_sal_mar" ? importe : 0;

                                parameters.Add("@existencia_ent_abr", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_abr" ? cantidad : 0;
                                parameters.Add("@importe_ent_abr", OdbcType.Numeric).Value = columnaImporte == "importe_ent_abr" ? importe : 0;
                                parameters.Add("@existencia_sal_abr", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_abr" ? cantidad : 0;
                                parameters.Add("@importe_sal_abr", OdbcType.Numeric).Value = columnaImporte == "importe_sal_abr" ? importe : 0;

                                parameters.Add("@existencia_ent_may", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_may" ? cantidad : 0;
                                parameters.Add("@importe_ent_may", OdbcType.Numeric).Value = columnaImporte == "importe_ent_may" ? importe : 0;
                                parameters.Add("@existencia_sal_may", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_may" ? cantidad : 0;
                                parameters.Add("@importe_sal_may", OdbcType.Numeric).Value = columnaImporte == "importe_sal_may" ? importe : 0;

                                parameters.Add("@existencia_ent_jun", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_jun" ? cantidad : 0;
                                parameters.Add("@importe_ent_jun", OdbcType.Numeric).Value = columnaImporte == "importe_ent_jun" ? importe : 0;
                                parameters.Add("@existencia_sal_jun", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_jun" ? cantidad : 0;
                                parameters.Add("@importe_sal_jun", OdbcType.Numeric).Value = columnaImporte == "importe_sal_jun" ? importe : 0;

                                parameters.Add("@existencia_ent_jul", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_jul" ? cantidad : 0;
                                parameters.Add("@importe_ent_jul", OdbcType.Numeric).Value = columnaImporte == "importe_ent_jul" ? importe : 0;
                                parameters.Add("@existencia_sal_jul", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_jul" ? cantidad : 0;
                                parameters.Add("@importe_sal_jul", OdbcType.Numeric).Value = columnaImporte == "importe_sal_jul" ? importe : 0;

                                parameters.Add("@existencia_ent_ago", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_ago" ? cantidad : 0;
                                parameters.Add("@importe_ent_ago", OdbcType.Numeric).Value = columnaImporte == "importe_ent_ago" ? importe : 0;
                                parameters.Add("@existencia_sal_ago", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_ago" ? cantidad : 0;
                                parameters.Add("@importe_sal_ago", OdbcType.Numeric).Value = columnaImporte == "importe_sal_ago" ? importe : 0;

                                parameters.Add("@existencia_ent_sep", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_sep" ? cantidad : 0;
                                parameters.Add("@importe_ent_sep", OdbcType.Numeric).Value = columnaImporte == "importe_ent_sep" ? importe : 0;
                                parameters.Add("@existencia_sal_sep", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_sep" ? cantidad : 0;
                                parameters.Add("@importe_sal_sep", OdbcType.Numeric).Value = columnaImporte == "importe_sal_sep" ? importe : 0;

                                parameters.Add("@existencia_ent_oct", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_oct" ? cantidad : 0;
                                parameters.Add("@importe_ent_oct", OdbcType.Numeric).Value = columnaImporte == "importe_ent_oct" ? importe : 0;
                                parameters.Add("@existencia_sal_oct", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_oct" ? cantidad : 0;
                                parameters.Add("@importe_sal_oct", OdbcType.Numeric).Value = columnaImporte == "importe_sal_oct" ? importe : 0;

                                parameters.Add("@existencia_ent_nov", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_nov" ? cantidad : 0;
                                parameters.Add("@importe_ent_nov", OdbcType.Numeric).Value = columnaImporte == "importe_ent_nov" ? importe : 0;
                                parameters.Add("@existencia_sal_nov", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_nov" ? cantidad : 0;
                                parameters.Add("@importe_sal_nov", OdbcType.Numeric).Value = columnaImporte == "importe_sal_nov" ? importe : 0;

                                parameters.Add("@existencia_ent_dic", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_dic" ? cantidad : 0;
                                parameters.Add("@importe_ent_dic", OdbcType.Numeric).Value = columnaImporte == "importe_ent_dic" ? importe : 0;
                                parameters.Add("@existencia_sal_dic", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_dic" ? cantidad : 0;
                                parameters.Add("@importe_sal_dic", OdbcType.Numeric).Value = columnaImporte == "importe_sal_dic" ? importe : 0;

                                parameters.Add("@insumo", OdbcType.Numeric).Value = insumo;

                                cmd.Connection = trans.Connection;
                                cmd.Transaction = trans;

                                count += cmd.ExecuteNonQuery();
                            }
                            #endregion
                        }
                        #endregion

                        #region Update Registro Acumula CC
                        var registroAcumulaCCEK = consultaCheckProductivo(
                            string.Format(@"SELECT * FROM si_acumula_cc WHERE cc = '{0}' AND ano = {1} AND insumo = {2}", cc, anio, insumo)
                        );

                        if (registroAcumulaCCEK != null)
                        {
                            var registroAcumulaCC = ((List<AcumulaEnkontrolDTO>)registroAcumulaCCEK.ToObject<List<AcumulaEnkontrolDTO>>())[0];

                            var existenciaAnteriorCC = Convert.ToDecimal(registroAcumulaCC.GetType().GetProperty(columnaExistencia).GetValue(registroAcumulaCC), CultureInfo.InvariantCulture);
                            var importeAnteriorCC = Convert.ToDecimal(registroAcumulaCC.GetType().GetProperty(columnaImporte).GetValue(registroAcumulaCC), CultureInfo.InvariantCulture);

                            var consultaUpdateCC =
                                string.Format(@"UPDATE si_acumula_cc 
                                SET {0} = ?, {1} = ?, ultimo_cp = ?, fecha_cp = ? 
                                WHERE cc = ? AND ano = ? AND insumo = ?", columnaExistencia, columnaImporte);

                            using (var cmd = new OdbcCommand(consultaUpdateCC))
                            {
                                OdbcParameterCollection parameters = cmd.Parameters;

                                parameters.Add(string.Concat("@", columnaExistencia), OdbcType.Numeric).Value = existenciaAnteriorCC + cantidad;
                                parameters.Add(string.Concat("@", columnaImporte), OdbcType.Numeric).Value = importeAnteriorCC + importe;

                                if (det.costo_prom > 0)
                                {
                                    parameters.Add("@ultimo_cp", OdbcType.Numeric).Value = det.costo_prom ?? 0;
                                    parameters.Add("@fecha_cp", OdbcType.Date).Value = DateTime.Now.Date;
                                }
                                else
                                {
                                    parameters.Add("@ultimo_cp", OdbcType.Numeric).Value = registroAcumulaCC.ultimo_cp ?? (object)DBNull.Value;
                                    parameters.Add("@fecha_cp", OdbcType.Date).Value = registroAcumulaCC.fecha_cp ?? (object)DBNull.Value;
                                }

                                parameters.Add("@cc", OdbcType.Char).Value = cc;
                                parameters.Add("@ano", OdbcType.Numeric).Value = anio;
                                parameters.Add("@insumo", OdbcType.Numeric).Value = insumo;

                                cmd.Connection = trans.Connection;
                                cmd.Transaction = trans;

                                count += cmd.ExecuteNonQuery();
                            }
                        }
                        else
                        {
                            #region Insert Registro en la tabla "si_acumula_cc"
                            var consultaInsertAcumulaCC = @"INSERT INTO si_acumula_cc 
                                                    (cc, ano, 
                                                    existencia_ent_ini, importe_ent_ini, existencia_sal_ini, importe_sal_ini, 
                                                    existencia_ent_ene, importe_ent_ene, existencia_sal_ene, importe_sal_ene, 
                                                    existencia_ent_feb, importe_ent_feb, existencia_sal_feb, importe_sal_feb, 
                                                    existencia_ent_mar, importe_ent_mar, existencia_sal_mar, importe_sal_mar, 
                                                    existencia_ent_abr, importe_ent_abr, existencia_sal_abr, importe_sal_abr, 
                                                    existencia_ent_may, importe_ent_may, existencia_sal_may, importe_sal_may, 
                                                    existencia_ent_jun, importe_ent_jun, existencia_sal_jun, importe_sal_jun, 
                                                    existencia_ent_jul, importe_ent_jul, existencia_sal_jul, importe_sal_jul, 
                                                    existencia_ent_ago, importe_ent_ago, existencia_sal_ago, importe_sal_ago, 
                                                    existencia_ent_sep, importe_ent_sep, existencia_sal_sep, importe_sal_sep, 
                                                    existencia_ent_oct, importe_ent_oct, existencia_sal_oct, importe_sal_oct, 
                                                    existencia_ent_nov, importe_ent_nov, existencia_sal_nov, importe_sal_nov, 
                                                    existencia_ent_dic, importe_ent_dic, existencia_sal_dic, importe_sal_dic, 
                                                    insumo, ultimo_cp, fecha_cp) 
                                                VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                            using (var cmd = new OdbcCommand(consultaInsertAcumulaCC))
                            {
                                OdbcParameterCollection parameters = cmd.Parameters;

                                parameters.Add("@cc", OdbcType.Char).Value = cc;
                                parameters.Add("@ano", OdbcType.Numeric).Value = DateTime.Now.Year;

                                parameters.Add("@existencia_ent_ini", OdbcType.Numeric).Value = 0;
                                parameters.Add("@importe_ent_ini", OdbcType.Numeric).Value = 0;
                                parameters.Add("@existencia_sal_ini", OdbcType.Numeric).Value = 0;
                                parameters.Add("@importe_sal_ini", OdbcType.Numeric).Value = 0;

                                parameters.Add("@existencia_ent_ene", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_ene" ? cantidad : 0;
                                parameters.Add("@importe_ent_ene", OdbcType.Numeric).Value = columnaImporte == "importe_ent_ene" ? importe : 0;
                                parameters.Add("@existencia_sal_ene", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_ene" ? cantidad : 0;
                                parameters.Add("@importe_sal_ene", OdbcType.Numeric).Value = columnaImporte == "importe_sal_ene" ? importe : 0;

                                parameters.Add("@existencia_ent_feb", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_feb" ? cantidad : 0;
                                parameters.Add("@importe_ent_feb", OdbcType.Numeric).Value = columnaImporte == "importe_ent_feb" ? importe : 0;
                                parameters.Add("@existencia_sal_feb", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_feb" ? cantidad : 0;
                                parameters.Add("@importe_sal_feb", OdbcType.Numeric).Value = columnaImporte == "importe_sal_feb" ? importe : 0;

                                parameters.Add("@existencia_ent_mar", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_mar" ? cantidad : 0;
                                parameters.Add("@importe_ent_mar", OdbcType.Numeric).Value = columnaImporte == "importe_ent_mar" ? importe : 0;
                                parameters.Add("@existencia_sal_mar", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_mar" ? cantidad : 0;
                                parameters.Add("@importe_sal_mar", OdbcType.Numeric).Value = columnaImporte == "importe_sal_mar" ? importe : 0;

                                parameters.Add("@existencia_ent_abr", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_abr" ? cantidad : 0;
                                parameters.Add("@importe_ent_abr", OdbcType.Numeric).Value = columnaImporte == "importe_ent_abr" ? importe : 0;
                                parameters.Add("@existencia_sal_abr", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_abr" ? cantidad : 0;
                                parameters.Add("@importe_sal_abr", OdbcType.Numeric).Value = columnaImporte == "importe_sal_abr" ? importe : 0;

                                parameters.Add("@existencia_ent_may", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_may" ? cantidad : 0;
                                parameters.Add("@importe_ent_may", OdbcType.Numeric).Value = columnaImporte == "importe_ent_may" ? importe : 0;
                                parameters.Add("@existencia_sal_may", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_may" ? cantidad : 0;
                                parameters.Add("@importe_sal_may", OdbcType.Numeric).Value = columnaImporte == "importe_sal_may" ? importe : 0;

                                parameters.Add("@existencia_ent_jun", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_jun" ? cantidad : 0;
                                parameters.Add("@importe_ent_jun", OdbcType.Numeric).Value = columnaImporte == "importe_ent_jun" ? importe : 0;
                                parameters.Add("@existencia_sal_jun", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_jun" ? cantidad : 0;
                                parameters.Add("@importe_sal_jun", OdbcType.Numeric).Value = columnaImporte == "importe_sal_jun" ? importe : 0;

                                parameters.Add("@existencia_ent_jul", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_jul" ? cantidad : 0;
                                parameters.Add("@importe_ent_jul", OdbcType.Numeric).Value = columnaImporte == "importe_ent_jul" ? importe : 0;
                                parameters.Add("@existencia_sal_jul", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_jul" ? cantidad : 0;
                                parameters.Add("@importe_sal_jul", OdbcType.Numeric).Value = columnaImporte == "importe_sal_jul" ? importe : 0;

                                parameters.Add("@existencia_ent_ago", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_ago" ? cantidad : 0;
                                parameters.Add("@importe_ent_ago", OdbcType.Numeric).Value = columnaImporte == "importe_ent_ago" ? importe : 0;
                                parameters.Add("@existencia_sal_ago", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_ago" ? cantidad : 0;
                                parameters.Add("@importe_sal_ago", OdbcType.Numeric).Value = columnaImporte == "importe_sal_ago" ? importe : 0;

                                parameters.Add("@existencia_ent_sep", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_sep" ? cantidad : 0;
                                parameters.Add("@importe_ent_sep", OdbcType.Numeric).Value = columnaImporte == "importe_ent_sep" ? importe : 0;
                                parameters.Add("@existencia_sal_sep", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_sep" ? cantidad : 0;
                                parameters.Add("@importe_sal_sep", OdbcType.Numeric).Value = columnaImporte == "importe_sal_sep" ? importe : 0;

                                parameters.Add("@existencia_ent_oct", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_oct" ? cantidad : 0;
                                parameters.Add("@importe_ent_oct", OdbcType.Numeric).Value = columnaImporte == "importe_ent_oct" ? importe : 0;
                                parameters.Add("@existencia_sal_oct", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_oct" ? cantidad : 0;
                                parameters.Add("@importe_sal_oct", OdbcType.Numeric).Value = columnaImporte == "importe_sal_oct" ? importe : 0;

                                parameters.Add("@existencia_ent_nov", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_nov" ? cantidad : 0;
                                parameters.Add("@importe_ent_nov", OdbcType.Numeric).Value = columnaImporte == "importe_ent_nov" ? importe : 0;
                                parameters.Add("@existencia_sal_nov", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_nov" ? cantidad : 0;
                                parameters.Add("@importe_sal_nov", OdbcType.Numeric).Value = columnaImporte == "importe_sal_nov" ? importe : 0;

                                parameters.Add("@existencia_ent_dic", OdbcType.Numeric).Value = columnaExistencia == "existencia_ent_dic" ? cantidad : 0;
                                parameters.Add("@importe_ent_dic", OdbcType.Numeric).Value = columnaImporte == "importe_ent_dic" ? importe : 0;
                                parameters.Add("@existencia_sal_dic", OdbcType.Numeric).Value = columnaExistencia == "existencia_sal_dic" ? cantidad : 0;
                                parameters.Add("@importe_sal_dic", OdbcType.Numeric).Value = columnaImporte == "importe_sal_dic" ? importe : 0;

                                parameters.Add("@insumo", OdbcType.Numeric).Value = insumo;
                                parameters.Add("@ultimo_cp", OdbcType.Numeric).Value = importe;
                                parameters.Add("@fecha_cp", OdbcType.Date).Value = DateTime.Now.Date;

                                cmd.Connection = trans.Connection;
                                cmd.Transaction = trans;

                                count += cmd.ExecuteNonQuery();
                            }
                            #endregion
                        }
                        #endregion

                        return true;
                        #endregion
                    }
            }
        }

        private decimal getCostoPromedioNuevo(int almacen, int insumo)
        {
            decimal costoPromedio = 0;

            var costoPromedioEK = consultaCheckProductivo(
                string.Format(@"SELECT 
                                    ROUND(AVG(precio), 1) AS costo_prom 
                                FROM si_movimientos_det 
                                WHERE almacen = {0} AND insumo = {1}", almacen, insumo)
            );

            if (costoPromedioEK != null)
            {
                var costoPromedioENKONTROL = ((List<dynamic>)costoPromedioEK.ToObject<List<dynamic>>())[0];

                if (costoPromedioENKONTROL.costo_prom != null)
                {
                    costoPromedio = Convert.ToDecimal(costoPromedioENKONTROL.costo_prom, CultureInfo.InvariantCulture);
                }
            }

            return costoPromedio;
        }

        public void actualizarColocadaFechaYProveedor()
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    var comprasSIGOPLAN = _context.tblCom_OrdenCompra.Where(x => x.estatusRegistro && (x.colocadaFecha == null || x.proveedor == null)).ToList();
                    int contador = 1;

                    foreach (var compSIG in comprasSIGOPLAN)
                    {
                        var compraEnkontrolEK = consultaCheckProductivo(string.Format(@"SELECT * FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", compSIG.cc, compSIG.numero));

                        if (compraEnkontrolEK != null)
                        {
                            var compraEnkontrol = ((List<dynamic>)compraEnkontrolEK.ToObject<List<dynamic>>())[0];

                            if (compraEnkontrol.fecha_autoriza != null)
                            {
                                compSIG.colocadaFecha = (DateTime)compraEnkontrol.fecha_autoriza;
                            }
                            else
                            {
                                compSIG.colocadaFecha = null;
                            }

                            if (compraEnkontrol.proveedor != null)
                            {
                                compSIG.proveedor = (int)compraEnkontrol.proveedor;
                            }
                            else
                            {
                                compSIG.proveedor = null;
                            }
                        }

                        _context.SaveChanges();
                        contador++;
                    }

                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                }
            }
        }

        public void actualizarImpresa()
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    var comprasSIGOPLAN = _context.tblCom_OrdenCompra.Where(x => x.estatusRegistro).ToList();
                    int contador = 1;

                    foreach (var compSIG in comprasSIGOPLAN)
                    {
                        var compraEnkontrolEK = consultaCheckProductivo(string.Format(@"SELECT * FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", compSIG.cc, compSIG.numero));

                        if (compraEnkontrolEK != null)
                        {
                            var compraEnkontrol = ((List<dynamic>)compraEnkontrolEK.ToObject<List<dynamic>>())[0];
                            var st_impresa = (string)compraEnkontrol.st_impresa;

                            compSIG.st_impresa = st_impresa;

                            if (st_impresa != "I")
                            {
                                compSIG.colocada = false;
                                compSIG.colocadaFecha = null;
                            }
                        }

                        _context.SaveChanges();
                        contador++;
                    }

                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                }
            }
        }
        public void enviarOCProv(string cc, int numero, string correo, HttpPostedFileBase cotizacion)
        {
            if (vSesiones.sesionEmpresaActual != (int)EmpresaEnum.Peru)
            {
                #region Validación para archivo cotización obligatorio en requisiciones que no son de consigna ni licitación ni CRC ni convenio.
                if (cotizacion == null)
                {
                    var primerPartidaCompraSIGOPLAN = _context.tblCom_OrdenCompraDet.FirstOrDefault(x => x.estatusRegistro && x.cc == cc && x.numero == numero);

                    if (primerPartidaCompraSIGOPLAN == null)
                    {
                        //throw new Exception("No se encuentra la información de la compra.");
                        throw new Exception("Debe capturar el archivo de la cotización."); //Si no encuentra la información en SIGOPLAN, se toma como obligatorio el archivo de cotización.
                    }

                    var requisicionSIGOPLAN = _context.tblCom_Req.FirstOrDefault(x => x.estatusRegistro && x.cc == cc && x.numero == primerPartidaCompraSIGOPLAN.num_requisicion);

                    if (requisicionSIGOPLAN == null)
                    {
                        //throw new Exception("No se encuentra la información de la requisición.");
                        throw new Exception("Debe capturar el archivo de la cotización."); //Si no encuentra la información en SIGOPLAN, se toma como obligatorio el archivo de cotización.
                    }

                    if (requisicionSIGOPLAN.consigna != true && !requisicionSIGOPLAN.licitacion && !requisicionSIGOPLAN.crc && !requisicionSIGOPLAN.convenio)
                    {
                        throw new Exception("Debe capturar el archivo de la cotización.");
                    }
                }
                #endregion
            }

            #region Validación Usuario Comprador
            var idUsuario = vSesiones.sesionUsuarioDTO.id;
            var usuarioCompradorExiste = _context.tblCom_Comprador.Where(x => x.usuarioSIGOPLAN == idUsuario).FirstOrDefault();

            if (usuarioCompradorExiste == null && idUsuario != 3807)
            {
                throw new Exception("Debes ser comprador para poder enviar correo");
            }
            #endregion

            using (var dbTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    List<Byte[]> listaArchivos = new List<byte[]>();
                    string nombreArchivoCotizacion = default(string);

                    if (cotizacion != null)
                    {
                        nombreArchivoCotizacion = cotizacion.FileName;

                        byte[] data;

                        using (Stream inputStream = cotizacion.InputStream)
                        {
                            MemoryStream memoryStream = inputStream as MemoryStream;

                            if (memoryStream == null)
                            {
                                memoryStream = new MemoryStream();
                                inputStream.CopyTo(memoryStream);
                            }

                            data = memoryStream.ToArray();
                        }

                        listaArchivos.Add(data);
                    }

                    listaArchivos.Add(vSesiones.downloadPDF[0]); //Archivo Reporte de Orden de Compra

                    List<string> emails = new List<string>();

                    var correos = correo.Split(';');

                    foreach (var i in correos)
                    {
                        emails.Add(i.Trim());
                    }

                    emails.Add(vSesiones.sesionUsuarioDTO.correo);

#if DEBUG
                    emails = new List<string> { "oscar.valencia@construplan.com.mx" };
#endif

                    string asunto = "Orden de Compra " + cc + "-" + numero;
                    string mensaje = @"
                        <p><b>ESTIMADO PROVEEDOR.</b><br/>
                        <br/>
                        ADJUNTO ENCONTRARA UNA COPIA DIGITAL DE LA <b>OC #" + cc + "-" + numero + @"</b> CONFORME A LO COTIZADO PREVIAMENTE, CON LA CUAL FORMALIZAMOS EL PEDIDO Y QUEDAMOS EN ESPERA DE LA ENTREGA SEGÚN LA COTIZACIÓN TAMBIÉN ADJUNTA.<br/>
                        <br/>
                        COMPRADOR SOLICITANTE: <b>" + vSesiones.sesionUsuarioDTO.nombre + @"</b> (EL CUAL VIENE COPIADO EN ESTE CORREO)<br/>
                        <br/>
                        EL COMPRADOR QUEDA A LA ESPERA DE LA CONFIRMACIÓN DE RECIBIDO.<br/>
                        <br/>
                        <b>NOTA: ESTE ES UN CORREO GENERADO AUTOMATICAMENTE DESDE EL SISTEMA DE COMPRAS DE CONSTRUPLAN, FAVOR DE RESPONDER DIRECTAMENTE AL COMPRADOR INDICADO COMO COMPRADOR SOLICITANTE.</b></p>
                    ";

                    var correoEnviado = GlobalUtils.sendEmailOCProv(string.Format("{0}: {1}", PersonalUtilities.GetNombreEmpresa(), asunto), mensaje, emails, listaArchivos, nombreArchivoCotizacion, "OC " + cc + "-" + numero);

                    if (!correoEnviado)
                    {
                        throw new Exception("No se pudo enviar el correo.");
                    }

                    var oc = _context.tblCom_OrdenCompra.FirstOrDefault(x => x.estatusRegistro && x.cc == cc && x.numero == numero);

                    oc.correoProveedor = correo;
                    oc.colocada = true;
                    oc.colocadaFecha = DateTime.Now;
                    _context.SaveChanges();

                    dbTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbTransaction.Rollback();
                    LogError(0, 0, _NOMBRE_CONTROLADOR, "enviarOCProv", e, AccionEnum.CORREO, 0, new { cc = cc, numero = numero, correo = correo });

                    throw new Exception(e.Message);
                }
            }
        }

        public Dictionary<string, object> auditoriaEliminarReqOC()
        {
            var result = new Dictionary<string, object>();

            var usuario = vSesiones.sesionUsuarioDTO;
            var relUser = ufs.getUsuarioService().getUserEk(usuario.id);

            var fechaInicio2020 = new DateTime(2020, 1, 1);
            var fechaHoy = DateTime.Now.Date;
            var fechaLimite = fechaHoy.AddDays(-30);
            var nuevaFechaLimite = new DateTime(2022, 3, 31);


#if DEBUG
            fechaLimite = nuevaFechaLimite;
#endif

            //Los select de Enkontrol siempre apuntan a productivo. La transacción depende de la variable global "productivo".

            var count = 0;
            var requisicionesSIGOPLAN = _context.tblCom_Req.ToList();
            var comprasSIGOPLAN = _context.tblCom_OrdenCompra.ToList();

            #region Requisiciones No Autorizadas
            List<dynamic> listaRequisicionesNoAutorizadasEK = _contextEnkontrol.Select<dynamic>(
                vSesiones.sesionEmpresaActual == 1 ? EnkontrolEnum.CplanProd : vSesiones.sesionEmpresaActual == 4 ? EnkontrolEnum.CplanEici : EnkontrolEnum.ArrenProd,
                new OdbcConsultaDTO()
                {
                    consulta = @"SELECT * FROM so_requisicion WHERE st_autoriza != 'S' AND fecha >= '2020-01-01' AND fecha < ? ORDER BY fecha DESC",
                    parametros = new List<OdbcParameterDTO>() { new OdbcParameterDTO() { nombre = "fecha", tipo = OdbcType.Date, valor = fechaLimite.Date } }
                }
            );

            foreach (var reqEK in listaRequisicionesNoAutorizadasEK)
            {
                using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                {
                    using (var con = checkConexionProductivo())
                    {
                        using (var trans = con.BeginTransaction())
                        {
                            try
                            {

                                #region SIGOPLAN
                                var requisicionSIGOPLAN = requisicionesSIGOPLAN.FirstOrDefault(x =>
                                    x.estatusRegistro && x.estatusRegistro && x.cc == (string)reqEK.cc && x.numero == (int)reqEK.numero
                                );

                                if (requisicionSIGOPLAN != null)
                                {
                                    if (requisicionSIGOPLAN.consigna == true || requisicionSIGOPLAN.crc || requisicionSIGOPLAN.convenio)
                                    {
                                        continue; //No se eliminan las requisiciones de consigna ni de CRC ni convenio.
                                    }

                                    var detalleRequisicionSIGOPLAN = _context.tblCom_ReqDet.Where(x => x.estatusRegistro && x.estatusRegistro && x.idReq == requisicionSIGOPLAN.id).ToList();

                                    foreach (var det in detalleRequisicionSIGOPLAN)
                                    {
                                        det.estatusRegistro = false;
                                        _context.SaveChanges();
                                    }

                                    requisicionSIGOPLAN.estatusRegistro = false;
                                    requisicionSIGOPLAN.empleadoUltimaAccion = relUser.empleado;
                                    requisicionSIGOPLAN.fechaUltimaAccion = DateTime.Now;
                                    requisicionSIGOPLAN.tipoUltimaAccion = TipoUltimaAccionEnum.Eliminacion;
                                    _context.SaveChanges();
                                }
                                #endregion

                                #region Cancelar links pendientes de proveedores.
                                var cc = (string)reqEK.cc;
                                var numero = (int)reqEK.numero;
                                var listaLinks = _context.tblCom_ProveedoresLinks.Where(x => x.registroActivo && x.idEstatusRegistro == EstatusRegistroProveedorLinkEnum.PENDIENTE && x.cc == cc && x.numRequisicion == numero).ToList();

                                foreach (var link in listaLinks)
                                {
                                    link.idEstatusRegistro = EstatusRegistroProveedorLinkEnum.CANCELADO;
                                    _context.SaveChanges();
                                }
                                #endregion

                                #region Enkontrol
                                #region Borrar Detalle Linea
                                var consultaEliminarRequisicionDetalleLinea = @"DELETE FROM so_req_det_linea WHERE cc = ? AND numero = ?";

                                using (var cmd = new OdbcCommand(consultaEliminarRequisicionDetalleLinea))
                                {
                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@cc", OdbcType.Char).Value = (string)reqEK.cc;
                                    parameters.Add("@numero", OdbcType.Numeric).Value = (int)reqEK.numero;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;

                                    count += cmd.ExecuteNonQuery();
                                }
                                #endregion

                                #region Actualizar Explosión
                                var detalleRequisicionEK = consultaCheckProductivo(
                                    string.Format(@"SELECT * FROM so_requisicion_det WHERE cc = '{0}' AND numero = {1}", (string)reqEK.cc, (int)reqEK.numero)
                                );

                                if (detalleRequisicionEK != null)
                                {
                                    var detalleRequisicion = (List<dynamic>)detalleRequisicionEK.ToObject<List<dynamic>>();

                                    foreach (var det in detalleRequisicion)
                                    {
                                        var registroExplosionEK = consultaCheckProductivo(
                                            string.Format(@"SELECT * FROM so_explos_mat WHERE cc = '{0}' AND insumo = {1} AND year_explos = {2}", (string)reqEK.cc, (int)det.insumo, DateTime.Now.Year)
                                        );

                                        if (registroExplosionEK != null)
                                        {
                                            var registroExplosion = ((List<dynamic>)registroExplosionEK.ToObject<List<dynamic>>())[0];

                                            var nuevaCantidadRequerida =
                                                Convert.ToDecimal(registroExplosion.cant_requerida, CultureInfo.InvariantCulture) - Convert.ToDecimal(det.cantidad, CultureInfo.InvariantCulture);

                                            var consultaExplosionUpdate = @"
                                            UPDATE so_explos_mat 
                                            SET cant_requerida = ? 
                                            WHERE cc = ? AND insumo = ? AND year_explos = ?";

                                            using (var cmd = new OdbcCommand(consultaExplosionUpdate))
                                            {
                                                OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                parametersExplosion.Add("@cant_requerida", OdbcType.Numeric).Value = nuevaCantidadRequerida;

                                                parametersExplosion.Add("@cc", OdbcType.Char).Value = (string)reqEK.cc;
                                                parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = det.insumo;
                                                parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;

                                                count += cmd.ExecuteNonQuery();
                                            }
                                        }
                                    }
                                }
                                #endregion

                                #region Borrar Cuadros Comparativos
                                var cuadrosEK = consultaCheckProductivo(
                                    string.Format(@"SELECT * FROM so_cuadro_comparativo WHERE cc = '{0}' AND numero = {1}", (string)reqEK.cc, (int)reqEK.numero)
                                );

                                if (cuadrosEK != null)
                                {
                                    var cuadros = (List<dynamic>)cuadrosEK.ToObject<List<dynamic>>();

                                    foreach (var cuadro in cuadros)
                                    {
                                        #region Borrar Tabla Detalle
                                        var consultaEliminarCuadroDetalle = @"DELETE FROM so_cuadro_comparativo_det WHERE cc = ? AND numero = ? AND folio = ?";

                                        using (var cmd = new OdbcCommand(consultaEliminarCuadroDetalle))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@cc", OdbcType.Char).Value = (string)reqEK.cc;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = (int)reqEK.numero;
                                            parameters.Add("@folio", OdbcType.Numeric).Value = (int)cuadro.folio;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }
                                        #endregion

                                        #region Borrar Tabla General
                                        var consultaEliminarCuadro = @"DELETE FROM so_cuadro_comparativo WHERE cc = ? AND numero = ? AND folio = ?";

                                        using (var cmd = new OdbcCommand(consultaEliminarCuadro))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@cc", OdbcType.Char).Value = (string)reqEK.cc;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = (int)reqEK.numero;
                                            parameters.Add("@folio", OdbcType.Numeric).Value = (int)cuadro.folio;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }
                                        #endregion
                                    }
                                }
                                #endregion

                                #region Borrar Requisición Detalle
                                var consultaEliminarRequisicionDetalle = @"DELETE FROM so_requisicion_det WHERE cc = ? AND numero = ?";

                                using (var cmd = new OdbcCommand(consultaEliminarRequisicionDetalle))
                                {
                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@cc", OdbcType.Char).Value = (string)reqEK.cc;
                                    parameters.Add("@numero", OdbcType.Numeric).Value = (int)reqEK.numero;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;

                                    count += cmd.ExecuteNonQuery();
                                }
                                #endregion

                                #region Borrar Requisición
                                var consultaEliminarRequisicion = @"DELETE FROM so_requisicion WHERE cc = ? AND numero = ?";

                                using (var cmd = new OdbcCommand(consultaEliminarRequisicion))
                                {
                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@cc", OdbcType.Char).Value = (string)reqEK.cc;
                                    parameters.Add("@numero", OdbcType.Numeric).Value = (int)reqEK.numero;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;

                                    count += cmd.ExecuteNonQuery();
                                }
                                #endregion
                                #endregion

                                trans.Commit();
                                dbSigoplanTransaction.Commit();
                            }
                            catch (Exception e)
                            {
                                trans.Rollback();
                                dbSigoplanTransaction.Rollback();
                                LogError(0, 0, "OrdenCompraController", "auditoriaEliminarReqOC_Requisiciones_No_Autorizadas", e, AccionEnum.ELIMINAR, 0, null);
                            }
                        }
                    }
                }
            }
            #endregion

            #region Compras No Autorizadas
            List<dynamic> listaComprasNoAutorizadasEK = _contextEnkontrol.Select<dynamic>(
                vSesiones.sesionEmpresaActual == 1 ? EnkontrolEnum.CplanProd : vSesiones.sesionEmpresaActual == 4 ? EnkontrolEnum.CplanEici : EnkontrolEnum.ArrenProd,
                new OdbcConsultaDTO()
                {
                    consulta = @"SELECT cc, numero FROM so_orden_compra WHERE (ST_OC != 'A' OR ST_OC IS NULL) AND fecha >= '2020-01-01' AND fecha < ? ORDER BY fecha DESC",
                    parametros = new List<OdbcParameterDTO>() { new OdbcParameterDTO() { nombre = "fecha", tipo = OdbcType.Date, valor = fechaLimite.Date } }
                }
            );

            foreach (var comEK in listaComprasNoAutorizadasEK)
            {
                using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                {
                    using (var con = checkConexionProductivo())
                    {
                        using (var trans = con.BeginTransaction())
                        {
                            try
                            {
                                #region SIGOPLAN
                                var compraSIGOPLAN = comprasSIGOPLAN.FirstOrDefault(x => x.estatusRegistro && x.cc == (string)comEK.cc && x.numero == (int)comEK.numero);

                                if (compraSIGOPLAN != null)
                                {
                                    var detalleCompraSIGOPLAN = _context.tblCom_OrdenCompraDet.ToList().Where(x =>
                                        x.idOrdenCompra == compraSIGOPLAN.id &&
                                        x.cc == (string)comEK.cc &&
                                        x.numero == (int)comEK.numero &&
                                        x.estatusRegistro
                                    ).ToList();

                                    if (detalleCompraSIGOPLAN.Count() > 0)
                                    {
                                        var ccReq = detalleCompraSIGOPLAN[0].cc;
                                        var numeroReq = detalleCompraSIGOPLAN[0].num_requisicion;
                                        var requisicionSIGOPLAN = requisicionesSIGOPLAN.FirstOrDefault(x => x.estatusRegistro && x.cc == ccReq && x.numero == numeroReq);

                                        if (requisicionSIGOPLAN != null)
                                        {
                                            if (requisicionSIGOPLAN.consigna == true || requisicionSIGOPLAN.crc || requisicionSIGOPLAN.convenio)
                                            {
                                                continue; //Se brinca la compra cuando la requisición es consigna ni de CRC ni convenio.
                                            }
                                        }

                                        foreach (var det in detalleCompraSIGOPLAN)
                                        {
                                            det.estatusRegistro = false;
                                            _context.SaveChanges();

                                            if (requisicionSIGOPLAN != null)
                                            {
                                                var partidaRequisicionSIGOPLAN = _context.tblCom_ReqDet.FirstOrDefault(x =>
                                                    x.estatusRegistro &&
                                                    x.idReq == requisicionSIGOPLAN.id &&
                                                    x.partida == det.part_requisicion &&
                                                    x.insumo == det.insumo
                                                );

                                                if (partidaRequisicionSIGOPLAN != null)
                                                {
                                                    partidaRequisicionSIGOPLAN.cantOrdenada = partidaRequisicionSIGOPLAN.cantOrdenada - (det.cantidad - det.cant_canc);
                                                    _context.SaveChanges();
                                                }
                                            }
                                        }
                                    }

                                    compraSIGOPLAN.estatusRegistro = false;
                                    compraSIGOPLAN.empleadoUltimaAccion = relUser.empleado;
                                    compraSIGOPLAN.fechaUltimaAccion = DateTime.Now;
                                    compraSIGOPLAN.tipoUltimaAccion = TipoUltimaAccionEnum.Eliminacion;
                                    _context.SaveChanges();
                                }
                                #endregion

                                #region Enkontrol
                                #region Update Requisición para quitar lo comprado
                                var compraEK = consultaCheckProductivo(string.Format(@"SELECT * FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", (string)comEK.cc, (int)comEK.numero));

                                if (compraEK != null)
                                {
                                    var compraDetalleEK = consultaCheckProductivo(
                                        string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", (string)comEK.cc, (int)comEK.numero)
                                    );

                                    if (compraDetalleEK != null)
                                    {
                                        var compraDetalleENKONTROL = (List<dynamic>)compraDetalleEK.ToObject<List<dynamic>>();

                                        foreach (var det in compraDetalleENKONTROL)
                                        {
                                            var cantidadPartidaCompra =
                                                Convert.ToDecimal(det.cantidad, CultureInfo.InvariantCulture) - Convert.ToDecimal(det.cant_canc, CultureInfo.InvariantCulture);
                                            var partidaRequisicionEK = consultaCheckProductivo(
                                                string.Format(@"SELECT 
                                                                * 
                                                            FROM so_requisicion_det 
                                                            WHERE cc = '{0}' AND numero = {1} AND partida = {2}", (string)det.cc, (int)det.num_requisicion, (int)det.part_requisicion)
                                            );

                                            if (partidaRequisicionEK != null)
                                            {
                                                var partidaRequisicionENKONTROL = ((List<dynamic>)partidaRequisicionEK.ToObject<List<dynamic>>())[0];

                                                var consultaQuitarComprado = @"
                                                UPDATE so_requisicion_det 
                                                SET 
                                                    cant_ordenada = ? 
                                                WHERE cc = ? AND numero = ? AND partida = ? AND insumo = ?";

                                                using (var cmd = new OdbcCommand(consultaQuitarComprado))
                                                {
                                                    OdbcParameterCollection parameters = cmd.Parameters;

                                                    parameters.Add("@cant_ordenada", OdbcType.Numeric).Value =
                                                        Convert.ToDecimal(partidaRequisicionENKONTROL.cant_ordenada, CultureInfo.InvariantCulture) - cantidadPartidaCompra;

                                                    parameters.Add("@cc", OdbcType.Char).Value = (string)det.cc;
                                                    parameters.Add("@numero", OdbcType.Numeric).Value = (int)det.num_requisicion;
                                                    parameters.Add("@partida", OdbcType.Numeric).Value = (int)det.part_requisicion;
                                                    parameters.Add("@insumo", OdbcType.Numeric).Value = (int)det.insumo;

                                                    cmd.Connection = trans.Connection;
                                                    cmd.Transaction = trans;

                                                    count += cmd.ExecuteNonQuery();
                                                }
                                            }
                                        }
                                    }
                                }
                                #endregion

                                #region Actualizar Explosión
                                var detalleCompraEK = consultaCheckProductivo(
                                    string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", (string)comEK.cc, (int)comEK.numero)
                                );

                                if (detalleCompraEK != null)
                                {
                                    var detalleCompra = (List<dynamic>)detalleCompraEK.ToObject<List<dynamic>>();

                                    foreach (var det in detalleCompra)
                                    {
                                        var registroExplosionEK = consultaCheckProductivo(
                                            string.Format(@"SELECT * FROM so_explos_mat WHERE cc = '{0}' AND insumo = {1} AND year_explos = {2}", (string)comEK.cc, (int)det.insumo, DateTime.Now.Year)
                                        );

                                        if (registroExplosionEK != null)
                                        {
                                            var registroExplosion = ((List<dynamic>)registroExplosionEK.ToObject<List<dynamic>>())[0];

                                            var nuevaCantidadComprada =
                                                Convert.ToDecimal(registroExplosion.comp_cant, CultureInfo.InvariantCulture) - Convert.ToDecimal(det.cantidad, CultureInfo.InvariantCulture);
                                            var nuevoImporteComprado =
                                                Convert.ToDecimal(registroExplosion.comp_imp, CultureInfo.InvariantCulture) - Convert.ToDecimal(det.importe, CultureInfo.InvariantCulture);

                                            var consultaExplosionUpdate = @"
                                            UPDATE so_explos_mat 
                                            SET comp_cant = ?, comp_imp = ? 
                                            WHERE cc = ? AND insumo = ? AND year_explos = ?";

                                            using (var cmd = new OdbcCommand(consultaExplosionUpdate))
                                            {
                                                OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                parametersExplosion.Add("@comp_cant", OdbcType.Numeric).Value = nuevaCantidadComprada;
                                                parametersExplosion.Add("@comp_imp", OdbcType.Numeric).Value = nuevoImporteComprado;

                                                parametersExplosion.Add("@cc", OdbcType.Char).Value = (string)comEK.cc;
                                                parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = det.insumo;
                                                parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;

                                                count += cmd.ExecuteNonQuery();
                                            }
                                        }
                                    }
                                }
                                #endregion

                                #region Borrar Detalle Ajuste
                                var consultaEliminarCompraDetalleAjuste = @"DELETE FROM so_orden_det_ajuste WHERE cc = ? AND numero_oc = ?";

                                using (var cmd = new OdbcCommand(consultaEliminarCompraDetalleAjuste))
                                {
                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@cc", OdbcType.Char).Value = (string)comEK.cc;
                                    parameters.Add("@numero", OdbcType.Numeric).Value = (int)comEK.numero;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;

                                    count += cmd.ExecuteNonQuery();
                                }
                                #endregion

                                #region Borrar Detalle Linea
                                var consultaEliminarCompraDetalleLinea = @"DELETE FROM so_orden_det_linea WHERE cc = ? AND numero = ?";

                                using (var cmd = new OdbcCommand(consultaEliminarCompraDetalleLinea))
                                {
                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@cc", OdbcType.Char).Value = (string)comEK.cc;
                                    parameters.Add("@numero", OdbcType.Numeric).Value = (int)comEK.numero;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;

                                    count += cmd.ExecuteNonQuery();
                                }
                                #endregion

                                #region Borrar Compra Detalle
                                var consultaEliminarCompraDetalle = @"DELETE FROM so_orden_compra_det WHERE cc = ? AND numero = ?";

                                using (var cmd = new OdbcCommand(consultaEliminarCompraDetalle))
                                {
                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@cc", OdbcType.Char).Value = (string)comEK.cc;
                                    parameters.Add("@numero", OdbcType.Numeric).Value = (int)comEK.numero;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;

                                    count += cmd.ExecuteNonQuery();
                                }
                                #endregion

                                #region Borrar Compra Pagos
                                var consultaEliminarCompraPagos = @"DELETE FROM so_orden_compra_pago WHERE cc = ? AND numero = ?";

                                using (var cmd = new OdbcCommand(consultaEliminarCompraPagos))
                                {
                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@cc", OdbcType.Char).Value = (string)comEK.cc;
                                    parameters.Add("@numero", OdbcType.Numeric).Value = (int)comEK.numero;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;

                                    count += cmd.ExecuteNonQuery();
                                }
                                #endregion

                                #region Borrar Retenciones
                                var consultaEliminarCompraRetenciones = @"DELETE FROM so_ordenc_retenciones WHERE cc = ? AND numero = ?";

                                using (var cmd = new OdbcCommand(consultaEliminarCompraRetenciones))
                                {
                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@cc", OdbcType.Char).Value = (string)comEK.cc;
                                    parameters.Add("@numero", OdbcType.Numeric).Value = (int)comEK.numero;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;

                                    count += cmd.ExecuteNonQuery();
                                }
                                #endregion

                                #region Borrar Compra
                                var consultaEliminarCompra = @"DELETE FROM so_orden_compra WHERE cc = ? AND numero = ?";

                                using (var cmd = new OdbcCommand(consultaEliminarCompra))
                                {
                                    OdbcParameterCollection parameters = cmd.Parameters;

                                    parameters.Add("@cc", OdbcType.Char).Value = (string)comEK.cc;
                                    parameters.Add("@numero", OdbcType.Numeric).Value = (int)comEK.numero;

                                    cmd.Connection = trans.Connection;
                                    cmd.Transaction = trans;

                                    count += cmd.ExecuteNonQuery();
                                }
                                #endregion
                                #endregion

                                trans.Commit();
                                dbSigoplanTransaction.Commit();
                            }
                            catch (Exception e)
                            {
                                trans.Rollback();
                                dbSigoplanTransaction.Rollback();
                                LogError(0, 0, "OrdenCompraController", "auditoriaEliminarReqOC_Compras_No_Autorizadas", e, AccionEnum.ELIMINAR, 0, null);
                            }
                        }
                    }
                }
            }
            #endregion

            #region Compras Autorizadas Sin Entradas
            List<dynamic> listaComprasAutorizadasEK = _contextEnkontrol.Select<dynamic>(
                vSesiones.sesionEmpresaActual == 1 ? EnkontrolEnum.CplanProd : vSesiones.sesionEmpresaActual == 4 ? EnkontrolEnum.CplanEici : EnkontrolEnum.ArrenProd,
                new OdbcConsultaDTO()
                {
                    consulta = @"
                                        SELECT 
                                            * 
                                        FROM so_orden_compra 
                                        WHERE ST_OC = 'A' AND fecha >= '2020-01-01' AND estatus != 'T' AND estatus != 'C' AND estatus != 'P'"
                }
            );

            foreach (var comEK in listaComprasAutorizadasEK)
            {
                using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                {
                    using (var con = checkConexionProductivo())
                    {
                        using (var trans = con.BeginTransaction())
                        {
                            try
                            {
                                #region SIGOPLAN y Enkontrol
                                List<dynamic> listaEntradasInventariables = _contextEnkontrol.Select<dynamic>(
                                    vSesiones.sesionEmpresaActual == 1 ? EnkontrolEnum.CplanProd : vSesiones.sesionEmpresaActual == 4 ? EnkontrolEnum.CplanEici : EnkontrolEnum.ArrenProd,
                                    new OdbcConsultaDTO()
                                    {
                                        consulta = @"SELECT * FROM si_movimientos WHERE tipo_mov = 1 AND cc = ? AND orden_ct = ?",
                                        parametros = new List<OdbcParameterDTO>() {
                                            new OdbcParameterDTO { nombre = "cc", tipo = OdbcType.Char, valor = (string)comEK.cc },
                                            new OdbcParameterDTO { nombre ="orden_ct", tipo = OdbcType.Numeric, valor = (int)comEK.numero }
                                        }
                                    }
                                );

                                List<dynamic> listaEntradasNoInventariables = _contextEnkontrol.Select<dynamic>(
                                    vSesiones.sesionEmpresaActual == 1 ? EnkontrolEnum.CplanProd : vSesiones.sesionEmpresaActual == 4 ? EnkontrolEnum.CplanEici : EnkontrolEnum.ArrenProd,
                                    new OdbcConsultaDTO()
                                    {
                                        consulta = @"SELECT * FROM so_movimientos_noinv WHERE tipo_mov = 1 AND cc = ? AND orden_ct = ?",
                                        parametros = new List<OdbcParameterDTO>() {
                                            new OdbcParameterDTO { nombre = "cc", tipo = OdbcType.Char, valor = (string)comEK.cc },
                                            new OdbcParameterDTO { nombre ="orden_ct", tipo = OdbcType.Numeric, valor = (int)comEK.numero }
                                        }
                                    }
                                );

                                //Se verifica si no existen movimientos relacionados a la compra en las tablas de movimientos inventariables y no inventariables.
                                if (listaEntradasInventariables.Count() == 0 && listaEntradasNoInventariables.Count() == 0)
                                {
                                    var compraSIGOPLAN = comprasSIGOPLAN.FirstOrDefault(x => x.estatusRegistro && x.cc == (string)comEK.cc && x.numero == (int)comEK.numero);

                                    //Se verifica si existe la compra en SIGOPLAN para poder hacer el cálculo de "fecha autorización + tiempo de entrega". Si no existe no se procede con la cancelación.
                                    if (compraSIGOPLAN != null)
                                    {
                                        //Se verifica que la fecha de autorización no sea nulo para proceder con la cancelación en base al cálculo "fecha autorización + tiempo de entrega".
                                        if (comEK.fecha_autoriza != null)
                                        {
                                            var fechaLimiteEntrada = ((DateTime)comEK.fecha_autoriza).AddDays(30 + compraSIGOPLAN.tiempoEntregaDias);

                                            //Se verifica que se haya pasado de la fecha límite.
                                            if (fechaHoy.Date > fechaLimiteEntrada.Date)
                                            {
                                                List<dynamic> listaInsumosCompra = _contextEnkontrol.Select<dynamic>(
                                                    vSesiones.sesionEmpresaActual == 1 ? EnkontrolEnum.CplanProd : vSesiones.sesionEmpresaActual == 4 ? EnkontrolEnum.CplanEici : EnkontrolEnum.ArrenProd,
                                                    new OdbcConsultaDTO()
                                                    {
                                                        consulta = @"SELECT * FROM so_orden_compra_det WHERE cc = ? AND numero = ?",
                                                        parametros = new List<OdbcParameterDTO>()
                                                        {
                                                            new OdbcParameterDTO{ nombre = "cc", tipo = OdbcType.Char, valor = (string)comEK.cc },
                                                            new OdbcParameterDTO{ nombre = "numero", tipo = OdbcType.Numeric, valor = (int)comEK.numero }
                                                        }
                                                    }
                                                );

                                                //Se verifica que no tenga los insumos 6070000 y 7070000.
                                                if (!listaInsumosCompra.Any(x => (int)x.insumo == 6070000 || (int)x.insumo == 7070000))
                                                {
                                                    if (listaInsumosCompra.Count() > 0)
                                                    {
                                                        var ccReq = (string)listaInsumosCompra[0].cc;
                                                        var numeroReq = (int)listaInsumosCompra[0].num_requisicion;
                                                        var requisicionSIGOPLAN = requisicionesSIGOPLAN.FirstOrDefault(x => x.estatusRegistro && x.cc == ccReq && x.numero == numeroReq);

                                                        if (requisicionSIGOPLAN != null)
                                                        {
                                                            if (requisicionSIGOPLAN.consigna == true || requisicionSIGOPLAN.crc || requisicionSIGOPLAN.convenio)
                                                            {
                                                                continue; //Se brinca la compra cuando la requisición es consigna o de CRC ni convenio.
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }

                                                    #region Update Compra
                                                    var consulta = @"
                                            UPDATE so_orden_compra 
                                            SET 
                                                estatus = ?, 
                                                sub_total = ?, 
                                                iva = ?, 
                                                total = ?, 
                                                sub_tot_canc = ?, 
                                                iva_canc = ?, 
                                                total_canc = ? 
                                            WHERE cc = ? AND numero = ?";

                                                    using (var cmd = new OdbcCommand(consulta))
                                                    {
                                                        OdbcParameterCollection parameters = cmd.Parameters;

                                                        parameters.Add("@estatus", OdbcType.Char).Value = "C";
                                                        parameters.Add("@sub_total", OdbcType.Numeric).Value = 0;
                                                        parameters.Add("@iva", OdbcType.Numeric).Value = 0;
                                                        parameters.Add("@total", OdbcType.Numeric).Value = 0;
                                                        parameters.Add("@sub_tot_canc", OdbcType.Numeric).Value = comEK.sub_total;
                                                        parameters.Add("@iva_canc", OdbcType.Numeric).Value = comEK.iva;
                                                        parameters.Add("@total_canc", OdbcType.Numeric).Value = comEK.total;

                                                        parameters.Add("@cc", OdbcType.Char).Value = (string)comEK.cc;
                                                        parameters.Add("@numero", OdbcType.Numeric).Value = (int)comEK.numero;

                                                        cmd.Connection = trans.Connection;
                                                        cmd.Transaction = trans;

                                                        count += cmd.ExecuteNonQuery();
                                                    }

                                                    compraSIGOPLAN.estatus = "C";
                                                    compraSIGOPLAN.sub_total = 0;
                                                    compraSIGOPLAN.iva = 0;
                                                    compraSIGOPLAN.total = 0;
                                                    compraSIGOPLAN.empleadoUltimaAccion = relUser.empleado;
                                                    compraSIGOPLAN.fechaUltimaAccion = DateTime.Now;
                                                    compraSIGOPLAN.tipoUltimaAccion = TipoUltimaAccionEnum.Cancelacion;

                                                    _context.SaveChanges();
                                                    #endregion

                                                    var lstPartidasEK = consultaCheckProductivo(
                                                        string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND numero = {1}", (string)comEK.cc, (int)comEK.numero)
                                                    );

                                                    if (lstPartidasEK != null)
                                                    {
                                                        var lstPartidas = (List<dynamic>)lstPartidasEK.ToObject<List<dynamic>>();

                                                        #region Update Requisición
                                                        var consultaUpdateRequisicion = @"
                                                UPDATE so_requisicion 
                                                SET 
                                                    st_estatus = ? 
                                                WHERE cc = ? AND numero = ?";

                                                        using (var cmd = new OdbcCommand(consultaUpdateRequisicion))
                                                        {
                                                            OdbcParameterCollection parameters = cmd.Parameters;

                                                            parameters.Add("@st_estatus", OdbcType.Char).Value = " ";

                                                            parameters.Add("@cc", OdbcType.Char).Value = (string)comEK.cc;
                                                            parameters.Add("@numero", OdbcType.Numeric).Value = (int)lstPartidas[0].num_requisicion;

                                                            cmd.Connection = trans.Connection;
                                                            cmd.Transaction = trans;

                                                            count += cmd.ExecuteNonQuery();
                                                        }

                                                        var requisicionSIGOPLAN = requisicionesSIGOPLAN.FirstOrDefault(x =>
                                                            x.estatusRegistro && x.cc == (string)comEK.cc && x.numero == (int)lstPartidas[0].num_requisicion
                                                        );

                                                        if (requisicionSIGOPLAN != null)
                                                        {
                                                            requisicionSIGOPLAN.stEstatus = " ";
                                                            _context.SaveChanges();
                                                        }
                                                        #endregion

                                                        foreach (var part in lstPartidas)
                                                        {
                                                            #region Update Partida Compra
                                                            var consultaDet = @"
                                                    UPDATE so_orden_compra_det 
                                                    SET 
                                                        cantidad = ?, 
                                                        precio = ?, 
                                                        importe = ?, 
                                                        cant_canc = ?, 
                                                        imp_canc = ? 
                                                    WHERE cc = ? AND numero = ? AND partida = ? AND insumo = ?";

                                                            using (var cmd = new OdbcCommand(consultaDet))
                                                            {
                                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                                parameters.Add("@cantidad", OdbcType.Numeric).Value = 0;
                                                                parameters.Add("@precio", OdbcType.Numeric).Value = 0;
                                                                parameters.Add("@importe", OdbcType.Numeric).Value = 0;
                                                                parameters.Add("@cant_canc", OdbcType.Numeric).Value = part.cantidad;
                                                                parameters.Add("@imp_canc", OdbcType.Numeric).Value = part.importe;

                                                                parameters.Add("@cc", OdbcType.Char).Value = (string)comEK.cc;
                                                                parameters.Add("@numero", OdbcType.Numeric).Value = (int)comEK.numero;
                                                                parameters.Add("@partida", OdbcType.Numeric).Value = part.partida;
                                                                parameters.Add("@insumo", OdbcType.Numeric).Value = part.insumo;

                                                                cmd.Connection = trans.Connection;
                                                                cmd.Transaction = trans;

                                                                count += cmd.ExecuteNonQuery();
                                                            }

                                                            var partidaCompraSIGOPLAN = _context.tblCom_OrdenCompraDet.ToList().FirstOrDefault(x =>
                                                                x.cc == (string)comEK.cc && x.numero == (int)comEK.numero && x.partida == (int)part.partida && x.insumo == (int)part.insumo
                                                            );

                                                            if (partidaCompraSIGOPLAN != null)
                                                            {
                                                                partidaCompraSIGOPLAN.cantidad = 0;
                                                                partidaCompraSIGOPLAN.precio = 0;
                                                                partidaCompraSIGOPLAN.importe = 0;
                                                                partidaCompraSIGOPLAN.cant_canc = Convert.ToDecimal(part.cantidad, CultureInfo.InvariantCulture);
                                                                partidaCompraSIGOPLAN.imp_canc = Convert.ToDecimal(part.importe, CultureInfo.InvariantCulture);

                                                                _context.SaveChanges();
                                                            }
                                                            #endregion

                                                            #region Update Partida Requisición
                                                            var partidaRequisicionEK = consultaCheckProductivo(
                                                                string.Format(@"SELECT * FROM so_requisicion_det WHERE cc = '{0}' AND numero = {1} AND partida = {2}",
                                                                (string)comEK.cc, (int)part.num_requisicion, (int)part.part_requisicion)
                                                            );

                                                            if (partidaRequisicionEK != null)
                                                            {
                                                                var partidaRequisicion = (List<dynamic>)partidaRequisicionEK.ToObject<List<dynamic>>();

                                                                var consultaUpdateReqDet = @"
                                                        UPDATE so_requisicion_det 
                                                        SET 
                                                            cant_ordenada = ? 
                                                        WHERE cc = ? AND numero = ? AND partida = ?";

                                                                using (var cmd = new OdbcCommand(consultaUpdateReqDet))
                                                                {
                                                                    OdbcParameterCollection parameters = cmd.Parameters;

                                                                    parameters.Add("@cant_ordenada", OdbcType.Numeric).Value = 0;

                                                                    parameters.Add("@cc", OdbcType.Char).Value = (string)comEK.cc;
                                                                    parameters.Add("@numero", OdbcType.Numeric).Value = part.num_requisicion;
                                                                    parameters.Add("@partida", OdbcType.Numeric).Value = part.part_requisicion;

                                                                    cmd.Connection = trans.Connection;
                                                                    cmd.Transaction = trans;

                                                                    count += cmd.ExecuteNonQuery();
                                                                }
                                                            }

                                                            if (requisicionSIGOPLAN != null)
                                                            {
                                                                var partidaRequisicionSIGOPLAN = _context.tblCom_ReqDet.ToList().FirstOrDefault(x =>
                                                                    x.estatusRegistro &&
                                                                    x.idReq == requisicionSIGOPLAN.id &&
                                                                    x.partida == Convert.ToDecimal(part.part_requisicion, CultureInfo.InvariantCulture)
                                                                );

                                                                if (partidaRequisicionSIGOPLAN != null)
                                                                {
                                                                    partidaRequisicionSIGOPLAN.cantOrdenada = 0;
                                                                    _context.SaveChanges();
                                                                }
                                                            }
                                                            #endregion
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                #endregion

                                trans.Commit();
                                dbSigoplanTransaction.Commit();
                            }
                            catch (Exception e)
                            {
                                trans.Rollback();
                                dbSigoplanTransaction.Rollback();
                                LogError(0, 0, "OrdenCompraController", "auditoriaEliminarReqOC_Compras_Sin_Entradas", e, AccionEnum.ELIMINAR, 0, null);
                            }
                        }
                    }
                }
            }
            #endregion

            result.Add(SUCCESS, true);

            return result;
        }

        public Dictionary<string, object> getAuditoriaRequisicionesComprasAfectadas()
        {
            var result = new Dictionary<string, object>();

            var fechaInicio2020 = new DateTime(2020, 1, 1);
            var fechaHoy = DateTime.Now.Date;
            var fechaLimite = fechaHoy.AddDays(-30);
            var nuevaFechaLimite = new DateTime(2022, 3, 31);

            switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
            {
                #region EmpresaPeru
                case EmpresaEnum.Peru:
                    {
                        using (var ctxPeru = new MainContext())
                        {
#if DEBUG
                            fechaLimite = nuevaFechaLimite;
#endif
                            var requisicionesSIGOPLAN = _context.tblCom_Req.ToList();
                            try
                            {
                                List<dynamic> requisicionesNoAutorizadas = new List<dynamic>();
                                List<dynamic> comprasNoAutorizadas = new List<dynamic>();
                                List<dynamic> comprasAutorizadasSinEntradas = new List<dynamic>();

                                #region Requisiciones No Autorizadas
                                //List<dynamic> listaRequisicionesNoAutorizadasEK = _contextEnkontrol.Select<dynamic>(
                                //    vSesiones.sesionEmpresaActual == 1 ? EnkontrolEnum.CplanProd : vSesiones.sesionEmpresaActual == 4 ? EnkontrolEnum.CplanEici : EnkontrolEnum.ArrenProd,
                                //    new OdbcConsultaDTO()
                                //    {
                                //        consulta = @"SELECT * FROM so_requisicion WHERE st_autoriza != 'S' AND fecha >= '2020-01-01' AND fecha < ? ORDER BY fecha DESC",
                                //        parametros = new List<OdbcParameterDTO>() { new OdbcParameterDTO() { nombre = "fecha", tipo = OdbcType.Date, valor = fechaLimite.Date } }
                                //    }
                                //);
                                var listaRequisicionesNoAutorizadas = ctxPeru.tblCom_Req.Where(r => r.stAutoriza != true).ToList();


                                foreach (var reqEK in listaRequisicionesNoAutorizadas)
                                {
                                    var requisicionSIGOPLAN = requisicionesSIGOPLAN.FirstOrDefault(x =>
                                        x.estatusRegistro && x.estatusRegistro && x.cc == (string)reqEK.cc && x.numero == (int)reqEK.numero
                                    );

                                    if (requisicionSIGOPLAN != null)
                                    {
                                        if (requisicionSIGOPLAN.consigna == true || requisicionSIGOPLAN.crc || requisicionSIGOPLAN.convenio)
                                        {
                                            continue; //No se eliminan las requisiciones de consigna ni de CRC ni convenio.
                                        }
                                    }

                                    requisicionesNoAutorizadas.Add(new
                                    {
                                        cc = (string)reqEK.cc,
                                        numero = (int)reqEK.numero,
                                        fechaString = ((DateTime)reqEK.fecha).ToShortDateString()
                                    });
                                }
                                #endregion

                                var comprasSIGOPLAN = ctxPeru.tblCom_OrdenCompra.ToList();

                                #region Compras No Autorizadas
                                //List<dynamic> listaComprasNoAutorizadasEK = _contextEnkontrol.Select<dynamic>(
                                //    vSesiones.sesionEmpresaActual == 1 ? EnkontrolEnum.CplanProd : vSesiones.sesionEmpresaActual == 4 ? EnkontrolEnum.CplanEici : EnkontrolEnum.ArrenProd,
                                //    new OdbcConsultaDTO()
                                //    {
                                //        consulta = @"SELECT * FROM so_orden_compra WHERE (ST_OC != 'A' OR ST_OC IS NULL) AND fecha >= '2020-01-01' AND fecha < ? ORDER BY fecha DESC",
                                //        parametros = new List<OdbcParameterDTO>() { new OdbcParameterDTO() { nombre = "fecha", tipo = OdbcType.Date, valor = fechaLimite.Date } }
                                //    }
                                //);

                                var listaComprasNoAutorizadas = ctxPeru.tblCom_OrdenCompra.Where(oc => oc.ST_OC != "A" || oc.ST_OC == null).ToList();

                                foreach (var comEK in listaComprasNoAutorizadas)
                                {
                                    var detalleCompraSIGOPLAN = ctxPeru.tblCom_OrdenCompraDet.ToList().Where(x =>
                                        x.cc == (string)comEK.cc &&
                                        x.numero == (int)comEK.numero &&
                                        x.estatusRegistro
                                    ).ToList();

                                    if (detalleCompraSIGOPLAN.Count() > 0)
                                    {
                                        var ccReq = detalleCompraSIGOPLAN[0].cc;
                                        var numeroReq = detalleCompraSIGOPLAN[0].num_requisicion;
                                        var requisicionSIGOPLAN = requisicionesSIGOPLAN.FirstOrDefault(x => x.estatusRegistro && x.cc == ccReq && x.numero == numeroReq);

                                        if (requisicionSIGOPLAN != null)
                                        {
                                            if (requisicionSIGOPLAN.consigna == true || requisicionSIGOPLAN.crc || requisicionSIGOPLAN.convenio)
                                            {
                                                continue; //Se brinca la compra cuando la requisición es consigna o CRC o convenio.
                                            }
                                        }
                                    }

                                    comprasNoAutorizadas.Add(new
                                    {
                                        cc = (string)comEK.cc,
                                        numero = (int)comEK.numero,
                                        fechaString = ((DateTime)comEK.fecha).ToShortDateString()
                                    });
                                }
                                #endregion

                                #region Compras Autorizadas Sin Entradas
                                //                                List<dynamic> listaComprasAutorizadasEK = _contextEnkontrol.Select<dynamic>(
                                //                                    vSesiones.sesionEmpresaActual == 1 ? EnkontrolEnum.CplanProd : vSesiones.sesionEmpresaActual == 4 ? EnkontrolEnum.CplanEici : EnkontrolEnum.ArrenProd,
                                //                                    new OdbcConsultaDTO()
                                //                                    {
                                //                                        consulta = @"
                                //                            SELECT 
                                //                                * 
                                //                            FROM so_orden_compra 
                                //                            WHERE ST_OC = 'A' AND fecha >= '2020-01-01' AND estatus != 'T' AND estatus != 'C' AND estatus != 'P'"
                                //                                    }
                                //                                );
                                var listaComprasAutorizadas = ctxPeru.tblCom_OrdenCompra.Where(oc => oc.ST_OC == "A" && oc.estatus != "C" && oc.estatus != "P").ToList();



                                List<dynamic> listaEntradasInventariables = _contextEnkontrol.Select<dynamic>(
                                    vSesiones.sesionEmpresaActual == 1 ? EnkontrolEnum.CplanProd : vSesiones.sesionEmpresaActual == 4 ? EnkontrolEnum.CplanEici : EnkontrolEnum.ArrenProd,
                                    new OdbcConsultaDTO()
                                    {
                                        consulta = @"SELECT * FROM si_movimientos WHERE tipo_mov = 1 AND fecha >= '2020-01-01'"
                                    }
                                );

                                List<dynamic> listaEntradasNoInventariables = _contextEnkontrol.Select<dynamic>(
                                    vSesiones.sesionEmpresaActual == 1 ? EnkontrolEnum.CplanProd : vSesiones.sesionEmpresaActual == 4 ? EnkontrolEnum.CplanEici : EnkontrolEnum.ArrenProd,
                                    new OdbcConsultaDTO()
                                    {
                                        consulta = @"SELECT * FROM so_movimientos_noinv WHERE tipo_mov = 1 AND fecha >= '2020-01-01'"
                                    }
                                );

                                foreach (var comEK in listaComprasAutorizadas)
                                {
                                    List<dynamic> entradasInvCompra = listaEntradasInventariables.Where(x => (string)x.cc == (string)comEK.cc && (int)x.orden_ct == (int)comEK.numero).ToList();
                                    List<dynamic> entradasNoInvCompra = listaEntradasNoInventariables.Where(x => (string)x.cc == (string)comEK.cc && (int)x.orden_ct == (int)comEK.numero).ToList();

                                    //Se verifica si no existen movimientos relacionados a la compra en las tablas de movimientos inventariables y no inventariables.
                                    if (entradasInvCompra.Count() == 0 && entradasNoInvCompra.Count() == 0)//if (listaEntradasInventariables.Count() == 0 && listaEntradasNoInventariables.Count() == 0)
                                    {
                                        var compraSIGOPLAN = comprasSIGOPLAN.FirstOrDefault(x => x.estatusRegistro && x.cc == (string)comEK.cc && x.numero == (int)comEK.numero);

                                        //Se verifica si existe la compra en SIGOPLAN para poder hacer el cálculo de "fecha autorización + tiempo de entrega". Si no existe no se procede con la cancelación.
                                        if (compraSIGOPLAN != null)
                                        {
                                            //Se verifica que la fecha de autorización no sea nulo para proceder con la cancelación en base al cálculo "fecha autorización + tiempo de entrega".
                                            if (comEK.fecha_autoriza != null)
                                            {
                                                var fechaLimiteEntrada = ((DateTime)comEK.fecha_autoriza).AddDays(30 + compraSIGOPLAN.tiempoEntregaDias);

                                                //Se verifica que se haya pasado de la fecha límite.
                                                if (fechaHoy.Date > fechaLimiteEntrada.Date)
                                                {
                                                    //List<dynamic> listaInsumosCompra = _contextEnkontrol.Select<dynamic>(
                                                    //    vSesiones.sesionEmpresaActual == 1 ? EnkontrolEnum.CplanProd : vSesiones.sesionEmpresaActual == 4 ? EnkontrolEnum.CplanEici : EnkontrolEnum.ArrenProd,
                                                    //    new OdbcConsultaDTO()
                                                    //    {
                                                    //        consulta = @"SELECT * FROM so_orden_compra_det WHERE cc = ? AND numero = ?",
                                                    //        parametros = new List<OdbcParameterDTO>()
                                                    //        {
                                                    //            new OdbcParameterDTO{ nombre = "cc", tipo = OdbcType.Char, valor = (string)comEK.cc },
                                                    //            new OdbcParameterDTO{ nombre = "numero", tipo = OdbcType.Numeric, valor = (int)comEK.numero }
                                                    //        }
                                                    //    }
                                                    //);

                                                    var listaInsumosCompra = ctxPeru.tblCom_OrdenCompraDet.Where(ocDet => ocDet.cc == comEK.cc && ocDet.numero == comEK.numero).ToList();

                                                    //Se verifica que no tenga los insumos 6070000 y 7070000.
                                                    if (!listaInsumosCompra.Any(x => (int)x.insumo == 6070000 || (int)x.insumo == 7070000))
                                                    {
                                                        if (listaInsumosCompra.Count() > 0)
                                                        {
                                                            var ccReq = (string)listaInsumosCompra[0].cc;
                                                            var numeroReq = (int)listaInsumosCompra[0].num_requisicion;
                                                            var requisicionSIGOPLAN = requisicionesSIGOPLAN.FirstOrDefault(x => x.estatusRegistro && x.cc == ccReq && x.numero == numeroReq);

                                                            if (requisicionSIGOPLAN != null)
                                                            {
                                                                if (requisicionSIGOPLAN.consigna == true || requisicionSIGOPLAN.crc || requisicionSIGOPLAN.convenio)
                                                                {
                                                                    continue; //Se brinca la compra cuando la requisición es consigna o CRC o convenio.
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }

                                                        comprasAutorizadasSinEntradas.Add(new
                                                        {
                                                            cc = (string)comEK.cc,
                                                            numero = (int)comEK.numero,
                                                            fechaString = ((DateTime)comEK.fecha).ToShortDateString(),
                                                            fechaAutorizaString = comEK.fecha_autoriza != null ? ((DateTime)comEK.fecha_autoriza).ToShortDateString() : ""
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                #endregion


                                result.Add("requisicionesNoAutorizadas", requisicionesNoAutorizadas);
                                result.Add("comprasNoAutorizadas", comprasNoAutorizadas);
                                result.Add("comprasAutorizadasSinEntradas", comprasAutorizadasSinEntradas);
                                result.Add(SUCCESS, true);

                            }
                            catch (Exception e)
                            {
                                result.Add(SUCCESS, false);
                                throw new Exception(e.Message);
                            }
                        }
                    }
                    break;
                #endregion

                #region EmpresaConstruplan
                default:
                    {
#if DEBUG
                        fechaLimite = nuevaFechaLimite;
#endif

                        var requisicionesSIGOPLAN = _context.tblCom_Req.ToList();

                        try
                        {
                            //Los select de Enkontrol siempre apuntan a productivo. La transacción depende de la variable global "productivo".

                            List<dynamic> requisicionesNoAutorizadas = new List<dynamic>();
                            List<dynamic> comprasNoAutorizadas = new List<dynamic>();
                            List<dynamic> comprasAutorizadasSinEntradas = new List<dynamic>();

                            #region Requisiciones No Autorizadas
                            List<dynamic> listaRequisicionesNoAutorizadasEK = _contextEnkontrol.Select<dynamic>(
                                vSesiones.sesionEmpresaActual == 1 ? EnkontrolEnum.CplanProd : vSesiones.sesionEmpresaActual == 4 ? EnkontrolEnum.CplanEici : EnkontrolEnum.ArrenProd,
                                new OdbcConsultaDTO()
                                {
                                    consulta = @"SELECT * FROM so_requisicion WHERE st_autoriza != 'S' AND fecha >= '2020-01-01' AND fecha < ? ORDER BY fecha DESC",
                                    parametros = new List<OdbcParameterDTO>() { new OdbcParameterDTO() { nombre = "fecha", tipo = OdbcType.Date, valor = fechaLimite.Date } }
                                }
                            );

                            foreach (var reqEK in listaRequisicionesNoAutorizadasEK)
                            {
                                var requisicionSIGOPLAN = requisicionesSIGOPLAN.FirstOrDefault(x =>
                                    x.estatusRegistro && x.estatusRegistro && x.cc == (string)reqEK.cc && x.numero == (int)reqEK.numero
                                );

                                if (requisicionSIGOPLAN != null)
                                {
                                    if (requisicionSIGOPLAN.consigna == true || requisicionSIGOPLAN.crc || requisicionSIGOPLAN.convenio)
                                    {
                                        continue; //No se eliminan las requisiciones de consigna ni de CRC ni convenio.
                                    }
                                }

                                requisicionesNoAutorizadas.Add(new
                                {
                                    cc = (string)reqEK.cc,
                                    numero = (int)reqEK.numero,
                                    fechaString = ((DateTime)reqEK.fecha).ToShortDateString()
                                });
                            }
                            #endregion

                            var comprasSIGOPLAN = _context.tblCom_OrdenCompra.ToList();

                            #region Compras No Autorizadas
                            List<dynamic> listaComprasNoAutorizadasEK = _contextEnkontrol.Select<dynamic>(
                                vSesiones.sesionEmpresaActual == 1 ? EnkontrolEnum.CplanProd : vSesiones.sesionEmpresaActual == 4 ? EnkontrolEnum.CplanEici : EnkontrolEnum.ArrenProd,
                                new OdbcConsultaDTO()
                                {
                                    consulta = @"SELECT * FROM so_orden_compra WHERE (ST_OC != 'A' OR ST_OC IS NULL) AND fecha >= '2020-01-01' AND fecha < ? ORDER BY fecha DESC",
                                    parametros = new List<OdbcParameterDTO>() { new OdbcParameterDTO() { nombre = "fecha", tipo = OdbcType.Date, valor = fechaLimite.Date } }
                                }
                            );

                            foreach (var comEK in listaComprasNoAutorizadasEK)
                            {
                                var detalleCompraSIGOPLAN = _context.tblCom_OrdenCompraDet.ToList().Where(x =>
                                    x.cc == (string)comEK.cc &&
                                    x.numero == (int)comEK.numero &&
                                    x.estatusRegistro
                                ).ToList();

                                if (detalleCompraSIGOPLAN.Count() > 0)
                                {
                                    var ccReq = detalleCompraSIGOPLAN[0].cc;
                                    var numeroReq = detalleCompraSIGOPLAN[0].num_requisicion;
                                    var requisicionSIGOPLAN = requisicionesSIGOPLAN.FirstOrDefault(x => x.estatusRegistro && x.cc == ccReq && x.numero == numeroReq);

                                    if (requisicionSIGOPLAN != null)
                                    {
                                        if (requisicionSIGOPLAN.consigna == true || requisicionSIGOPLAN.crc || requisicionSIGOPLAN.convenio)
                                        {
                                            continue; //Se brinca la compra cuando la requisición es consigna o CRC o convenio.
                                        }
                                    }
                                }

                                comprasNoAutorizadas.Add(new
                                {
                                    cc = (string)comEK.cc,
                                    numero = (int)comEK.numero,
                                    fechaString = ((DateTime)comEK.fecha).ToShortDateString()
                                });
                            }
                            #endregion

                            #region Compras Autorizadas Sin Entradas
                            List<dynamic> listaComprasAutorizadasEK = _contextEnkontrol.Select<dynamic>(
                                vSesiones.sesionEmpresaActual == 1 ? EnkontrolEnum.CplanProd : vSesiones.sesionEmpresaActual == 4 ? EnkontrolEnum.CplanEici : EnkontrolEnum.ArrenProd,
                                new OdbcConsultaDTO()
                                {
                                    consulta = @"
                            SELECT 
                                * 
                            FROM so_orden_compra 
                            WHERE ST_OC = 'A' AND fecha >= '2020-01-01' AND estatus != 'T' AND estatus != 'C' AND estatus != 'P'"
                                }
                            );

                            List<dynamic> listaEntradasInventariables = _contextEnkontrol.Select<dynamic>(
                                vSesiones.sesionEmpresaActual == 1 ? EnkontrolEnum.CplanProd : vSesiones.sesionEmpresaActual == 4 ? EnkontrolEnum.CplanEici : EnkontrolEnum.ArrenProd,
                                new OdbcConsultaDTO()
                                {
                                    consulta = @"SELECT * FROM si_movimientos WHERE tipo_mov = 1 AND fecha >= '2020-01-01'"
                                }
                            );

                            List<dynamic> listaEntradasNoInventariables = _contextEnkontrol.Select<dynamic>(
                                vSesiones.sesionEmpresaActual == 1 ? EnkontrolEnum.CplanProd : vSesiones.sesionEmpresaActual == 4 ? EnkontrolEnum.CplanEici : EnkontrolEnum.ArrenProd,
                                new OdbcConsultaDTO()
                                {
                                    consulta = @"SELECT * FROM so_movimientos_noinv WHERE tipo_mov = 1 AND fecha >= '2020-01-01'"
                                }
                            );

                            foreach (var comEK in listaComprasAutorizadasEK)
                            {
                                List<dynamic> entradasInvCompra = listaEntradasInventariables.Where(x => (string)x.cc == (string)comEK.cc && (int)x.orden_ct == (int)comEK.numero).ToList();
                                List<dynamic> entradasNoInvCompra = listaEntradasNoInventariables.Where(x => (string)x.cc == (string)comEK.cc && (int)x.orden_ct == (int)comEK.numero).ToList();

                                //Se verifica si no existen movimientos relacionados a la compra en las tablas de movimientos inventariables y no inventariables.
                                if (entradasInvCompra.Count() == 0 && entradasNoInvCompra.Count() == 0)//if (listaEntradasInventariables.Count() == 0 && listaEntradasNoInventariables.Count() == 0)
                                {
                                    var compraSIGOPLAN = comprasSIGOPLAN.FirstOrDefault(x => x.estatusRegistro && x.cc == (string)comEK.cc && x.numero == (int)comEK.numero);

                                    //Se verifica si existe la compra en SIGOPLAN para poder hacer el cálculo de "fecha autorización + tiempo de entrega". Si no existe no se procede con la cancelación.
                                    if (compraSIGOPLAN != null)
                                    {
                                        //Se verifica que la fecha de autorización no sea nulo para proceder con la cancelación en base al cálculo "fecha autorización + tiempo de entrega".
                                        if (comEK.fecha_autoriza != null)
                                        {
                                            var fechaLimiteEntrada = ((DateTime)comEK.fecha_autoriza).AddDays(30 + compraSIGOPLAN.tiempoEntregaDias);

                                            //Se verifica que se haya pasado de la fecha límite.
                                            if (fechaHoy.Date > fechaLimiteEntrada.Date)
                                            {
                                                List<dynamic> listaInsumosCompra = _contextEnkontrol.Select<dynamic>(
                                                    vSesiones.sesionEmpresaActual == 1 ? EnkontrolEnum.CplanProd : vSesiones.sesionEmpresaActual == 4 ? EnkontrolEnum.CplanEici : EnkontrolEnum.ArrenProd,
                                                    new OdbcConsultaDTO()
                                                    {
                                                        consulta = @"SELECT * FROM so_orden_compra_det WHERE cc = ? AND numero = ?",
                                                        parametros = new List<OdbcParameterDTO>()
                                            {
                                                new OdbcParameterDTO{ nombre = "cc", tipo = OdbcType.Char, valor = (string)comEK.cc },
                                                new OdbcParameterDTO{ nombre = "numero", tipo = OdbcType.Numeric, valor = (int)comEK.numero }
                                            }
                                                    }
                                                );

                                                //Se verifica que no tenga los insumos 6070000 y 7070000.
                                                if (!listaInsumosCompra.Any(x => (int)x.insumo == 6070000 || (int)x.insumo == 7070000))
                                                {
                                                    if (listaInsumosCompra.Count() > 0)
                                                    {
                                                        var ccReq = (string)listaInsumosCompra[0].cc;
                                                        var numeroReq = (int)listaInsumosCompra[0].num_requisicion;
                                                        var requisicionSIGOPLAN = requisicionesSIGOPLAN.FirstOrDefault(x => x.estatusRegistro && x.cc == ccReq && x.numero == numeroReq);

                                                        if (requisicionSIGOPLAN != null)
                                                        {
                                                            if (requisicionSIGOPLAN.consigna == true || requisicionSIGOPLAN.crc || requisicionSIGOPLAN.convenio)
                                                            {
                                                                continue; //Se brinca la compra cuando la requisición es consigna o CRC o convenio.
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }

                                                    comprasAutorizadasSinEntradas.Add(new
                                                    {
                                                        cc = (string)comEK.cc,
                                                        numero = (int)comEK.numero,
                                                        fechaString = ((DateTime)comEK.fecha).ToShortDateString(),
                                                        fechaAutorizaString = comEK.fecha_autoriza != null ? ((DateTime)comEK.fecha_autoriza).ToShortDateString() : ""
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            #endregion


                            result.Add("requisicionesNoAutorizadas", requisicionesNoAutorizadas);
                            result.Add("comprasNoAutorizadas", comprasNoAutorizadas);
                            result.Add("comprasAutorizadasSinEntradas", comprasAutorizadasSinEntradas);
                            result.Add(SUCCESS, true);
                        }
                        catch (Exception e)
                        {
                            result.Add(SUCCESS, false);
                            throw new Exception(e.Message);
                        }
                    } break;
                #endregion
            }

            return result;
        }

        public bool verificarRequisicionCompletamenteSurtida(string cc, int numero_requisicion)
        {
            try
            {
                var requisicionDetalle = (List<RequisicionDetDTO>)consultaCheckProductivo(
                    string.Format(@"SELECT 
                                            det.*, 
                                            ins.insumo, 
                                            ins.descripcion AS insumoDescripcion 
                                        FROM so_requisicion_det det 
                                            INNER JOIN insumos ins ON det.insumo = ins.insumo 
                                        WHERE det.cc = '{0}' AND det.numero = {1}", cc, numero_requisicion)
                ).ToObject<List<RequisicionDetDTO>>();

                #region Almacén Propio
                var listaAP = _context.tblCom_SurtidoDet.Where(x => x.estatus && x.tipoSurtidoDetalle == "AP" && x.cc == cc && x.surtido.numero == numero_requisicion).ToList();
                #endregion

                #region Almacén Externo
                var listaAE = _context.tblCom_SurtidoDet.Where(x => x.estatus && x.tipoSurtidoDetalle == "AE" && x.cc == cc && x.surtido.numero == numero_requisicion).ToList();
                var entradasTraspasosAE = _context.tblAlm_Movimientos.Where(x => x.estatusHabilitado && x.tipo_mov == 2 && x.cc == cc && x.numeroReq == numero_requisicion).ToList();
                var entradasTraspasosDetalleAE = (
                    from mov in entradasTraspasosAE
                    join det in _context.tblAlm_MovimientosDet.Where(x => x.estatusHabilitado && x.tipo_mov == 2).ToList()
                        on new { mov.almacen, mov.numero } equals new { det.almacen, det.numero }
                    select new
                    {
                        insumo = det.insumo,
                        cantidad = det.cantidad
                    }
                ).ToList();
                #endregion

                #region Orden Compra
                var comprasDetalleEK = consultaCheckProductivo(string.Format(@"SELECT * FROM so_orden_compra_det WHERE cc = '{0}' AND num_requisicion = {1}", cc, numero_requisicion));
                List<dynamic> comprasDetalle = new List<dynamic>();

                if (comprasDetalleEK != null)
                {
                    comprasDetalle = (List<dynamic>)comprasDetalleEK.ToObject<List<dynamic>>();
                }
                #endregion

                #region Salida por Consumo
                var salidasConsumo = _context.tblAlm_Movimientos.Where(x => x.estatusHabilitado && x.cc == cc && x.numeroReq == numero_requisicion && x.tipo_mov == 51).ToList();
                var salidasConsumoDetalle = (
                    from mov in salidasConsumo
                    join det in _context.tblAlm_MovimientosDet.Where(x => x.estatusHabilitado && x.tipo_mov == 51).ToList()
                        on new { mov.almacen, mov.numero } equals new { det.almacen, det.numero }
                    select new
                    {
                        insumo = det.insumo,
                        cantidad = det.cantidad
                    }
                ).ToList();
                #endregion

                List<bool> listaPartidasSurtidas = new List<bool>();

                foreach (var det in requisicionDetalle)
                {
                    var cantidadPartida = det.cantidad - det.cant_cancelada;

                    var solicitadoAP = listaAP.Where(x => x.partidaRequisicion == det.partida && x.insumo == det.insumo).Select(x => x.cantidad).Sum();
                    var cantidadAP = listaAP.Where(x => x.partidaRequisicion == det.partida && x.insumo == det.insumo).Select(x => x.cantidad).Sum();

                    var solicitadoAE = listaAE.Where(x => x.partidaRequisicion == det.partida && x.insumo == det.insumo).Select(x => x.cantidad).Sum();
                    var cantidadAE = entradasTraspasosDetalleAE.Where(x => x.insumo == det.insumo).Select(x => x.cantidad).Sum();

                    var solicitadoOC = cantidadPartida - solicitadoAP - solicitadoAE;
                    var cantidadOC = default(decimal);

                    if (comprasDetalle.Count() > 0)
                    {
                        foreach (var ocDet in comprasDetalle.Where(x => x.part_requisicion == det.partida).ToList())
                        {
                            cantidadOC += Convert.ToDecimal(ocDet.cant_recibida, CultureInfo.InvariantCulture);
                        }
                    }

                    var partidaCompletamenteSurtida = solicitadoAP == cantidadAP && solicitadoAE == cantidadAE && solicitadoOC == cantidadOC;

                    listaPartidasSurtidas.Add(partidaCompletamenteSurtida);
                }

                return listaPartidasSurtidas.All(x => x);
            }
            catch (Exception e)
            {
                LogError(0, 0, "OrdenCompraController", "verificarRequisicionCompletamenteSurtida", e, AccionEnum.CORREO, 0, new { cc = cc, numero_requisicion = numero_requisicion });
                return false;
            }
        }

        public Dictionary<string, object> getComprasProveedor(string cc, DateTime fechaInicio, DateTime fechaFin, int proveedor, int area, int cuenta)
        {
            var result = new Dictionary<string, object>();

            try
            {
                var parametros = new List<OdbcParameterDTO>();

                if (cc != "" && cc != null)
                {
                    parametros.Add(new OdbcParameterDTO() { nombre = "cc", tipo = OdbcType.Char, valor = cc });
                }

                if (proveedor > 0)
                {
                    parametros.Add(new OdbcParameterDTO() { nombre = "proveedor", tipo = OdbcType.Numeric, valor = proveedor });
                }

                parametros.Add(new OdbcParameterDTO() { nombre = "fecha", tipo = OdbcType.Date, valor = fechaInicio.Date });
                parametros.Add(new OdbcParameterDTO() { nombre = "fecha", tipo = OdbcType.Date, valor = fechaFin.Date });

                if (area > 0 && cuenta > 0)
                {
                    parametros.Add(new OdbcParameterDTO() { nombre = "area", tipo = OdbcType.Numeric, valor = area });
                    parametros.Add(new OdbcParameterDTO() { nombre = "cuenta", tipo = OdbcType.Numeric, valor = cuenta });
                }

                List<dynamic> listaCompras = _contextEnkontrol.Select<dynamic>(
                    vSesiones.sesionEmpresaActual == 1 ? EnkontrolEnum.CplanProd : vSesiones.sesionEmpresaActual == 4 ? EnkontrolEnum.CplanEici : EnkontrolEnum.ArrenProd,
                    new OdbcConsultaDTO()
                    {
                        consulta = string.Format(@"
                            SELECT
                                oc.cc,
                                oc.numero,
                                oc.fecha,
                                oc.proveedor,
                                MIN(prov.nombre) AS proveedorNombre,
                                --lin.descripcion AS partidaDescripcion,
                                MIN(oc.sub_total) as sub_total,
                                MIN(oc.total) as total,
                                MIN(oc.moneda) as moneda,
                                --ins.descripcion AS insumoDescripcion,
                                MIN(com.descripcion) AS compradorDesc
                            FROM so_orden_compra oc
                                INNER JOIN so_orden_compra_det det ON oc.cc = det.cc AND oc.numero = det.numero
                                --LEFT JOIN so_orden_det_linea lin ON oc.cc = lin.cc AND oc.numero = lin.numero AND det.partida = lin.partida
                                INNER JOIN sp_proveedores prov ON oc.proveedor = prov.numpro
                                --INNER JOIN insumos ins ON det.insumo = ins.insumo
                                LEFT JOIN empleados com ON oc.comprador = com.empleado
                            WHERE {0} {1} oc.fecha >= ? AND oc.fecha <= ? {2} 
                            GROUP BY oc.cc, oc.numero, oc.fecha, oc.proveedor",
                            (cc != "" && cc != null ? "oc.cc = ? AND" : ""),
                            (proveedor > 0 ? "oc.proveedor = ? AND" : ""),
                            ((area > 0 && cuenta > 0) ? "AND det.area = ? AND det.cuenta = ?" : "")),
                        parametros = parametros
                    }
                );

                var data = listaCompras.Select(x => new ComprasProveedorDTO
                {
                    cc = (string)x.cc,
                    numero = Convert.ToInt32(x.numero),
                    fecha = x.fecha,
                    fechaString = x.fecha.ToShortDateString(),
                    proveedor = Convert.ToInt32(x.proveedor),
                    proveedorDesc = x.proveedor + "-" + x.proveedorNombre,
                    //detalle = x.partidaDescripcion ?? x.insumoDescripcion,
                    sub_total = Convert.ToDecimal(x.sub_total, CultureInfo.InvariantCulture),
                    total = Convert.ToInt32(x.total, CultureInfo.InvariantCulture),
                    moneda = x.moneda,
                    subTotalPesos = x.moneda == "1" ? "$" + string.Format("{0:#,##0.##}", Convert.ToDecimal(x.sub_total, CultureInfo.InvariantCulture)) : "",
                    subTotalDolares = x.moneda != "1" ? "$" + string.Format("{0:#,##0.##}", Convert.ToDecimal(x.sub_total, CultureInfo.InvariantCulture)) : "",
                    totalPesos = x.moneda == "1" ? "$" + string.Format("{0:#,##0.##}", Convert.ToDecimal(x.total, CultureInfo.InvariantCulture)) : "",
                    totalDolares = x.moneda != "1" ? "$" + string.Format("{0:#,##0.##}", Convert.ToDecimal(x.total, CultureInfo.InvariantCulture)) : "",
                    compradorDesc = x.compradorDesc ?? "",
                    tipoCompraDesc = ""
                }).ToList();

                foreach (var d in data)
                {
                    var primerDetalleCompraSIGOPLAN = _context.tblCom_OrdenCompraDet.FirstOrDefault(x => x.estatusRegistro && x.cc == d.cc && x.numero == d.numero);

                    if (primerDetalleCompraSIGOPLAN != null)
                    {
                        var requisicionSIGOPLAN = _context.tblCom_Req.FirstOrDefault(x => x.estatusRegistro && x.cc == d.cc && x.numero == primerDetalleCompraSIGOPLAN.num_requisicion);

                        if (requisicionSIGOPLAN != null)
                        {
                            if (requisicionSIGOPLAN.consigna == true)
                            {
                                d.tipoCompraDesc = "CONSIGNA";
                            }
                            else if (requisicionSIGOPLAN.licitacion)
                            {
                                d.tipoCompraDesc = "LICITACIÓN";
                            }
                            else if (requisicionSIGOPLAN.crc)
                            {
                                d.tipoCompraDesc = "CRC";
                            }
                            else if (requisicionSIGOPLAN.convenio)
                            {
                                d.tipoCompraDesc = "CONVENIO";
                            }
                        }
                    }
                }

                result.Add("data", data);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(SUCCESS, false);
                throw new Exception(e.Message);
            }

            return result;
        }

        public Dictionary<string, object> getProveedoresCC(string cc, DateTime fechaInicio, DateTime fechaFin)
        {
            var result = new Dictionary<string, object>();

            try
            {
                var parametros = new List<OdbcParameterDTO>();

                if (cc != "" && cc != null)
                {
                    parametros.Add(new OdbcParameterDTO() { nombre = "cc", tipo = OdbcType.Char, valor = cc });
                }

                parametros.Add(new OdbcParameterDTO() { nombre = "fechaInicio", tipo = OdbcType.Date, valor = fechaInicio });
                parametros.Add(new OdbcParameterDTO() { nombre = "fechaFin", tipo = OdbcType.Date, valor = fechaFin });

                List<Core.DTO.Principal.Generales.ComboDTO> listaProveedoresPorCompras = _contextEnkontrol.Select<Core.DTO.Principal.Generales.ComboDTO>(
                    vSesiones.sesionEmpresaActual == 1 ? EnkontrolEnum.CplanProd : vSesiones.sesionEmpresaActual == 4 ? EnkontrolEnum.CplanEici : EnkontrolEnum.ArrenProd,
                    new OdbcConsultaDTO()
                    {
                        consulta = string.Format(@"
                            SELECT 
                                oc.proveedor AS Value, 
                                (CAST(oc.proveedor AS varchar) + ' - ' + prov.nombre) AS Text 
                            FROM so_orden_compra oc
                                INNER JOIN sp_proveedores prov ON oc.proveedor = prov.numpro 
                            WHERE {0} oc.fecha >= ? AND oc.fecha <= ?
                            GROUP BY oc.proveedor, prov.nombre ORDER BY oc.proveedor", cc != "" && cc != null ? "oc.cc = ? AND " : ""),
                        parametros = parametros
                    }
                );

                result.Add(ITEMS, listaProveedoresPorCompras);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(SUCCESS, false);
                throw new Exception(e.Message);
            }

            return result;
        }

        public Dictionary<string, object> getAreasCuentasCCFechaProveedor(string cc, DateTime fechaInicio, DateTime fechaFin, int proveedor)
        {
            var result = new Dictionary<string, object>();

            try
            {
                var parametros = new List<OdbcParameterDTO>();

                if (cc != "" && cc != null)
                {
                    parametros.Add(new OdbcParameterDTO() { nombre = "cc", tipo = OdbcType.Char, valor = cc });
                }

                parametros.Add(new OdbcParameterDTO() { nombre = "fechaInicio", tipo = OdbcType.Date, valor = fechaInicio });
                parametros.Add(new OdbcParameterDTO() { nombre = "fechaFin", tipo = OdbcType.Date, valor = fechaFin });

                if (proveedor > 0)
                {
                    parametros.Add(new OdbcParameterDTO() { nombre = "proveedor", tipo = OdbcType.Numeric, valor = proveedor });
                }

                List<Core.DTO.Principal.Generales.ComboDTO> listaProveedoresPorCompras = _contextEnkontrol.Select<Core.DTO.Principal.Generales.ComboDTO>(
                    vSesiones.sesionEmpresaActual == 1 ? EnkontrolEnum.CplanProd : vSesiones.sesionEmpresaActual == 4 ? EnkontrolEnum.CplanEici : EnkontrolEnum.ArrenProd,
                    new OdbcConsultaDTO()
                    {
                        consulta = string.Format(@"
                            SELECT 
                                det.area AS Value, 
                                det.cuenta AS Prefijo, 
                                (CAST(det.area AS varchar) + ' - ' + CAST(det.cuenta AS varchar)) AS Text 
                            FROM so_orden_compra oc 
                                INNER JOIN so_orden_compra_det det ON oc.cc = det.cc AND oc.numero = det.numero 
                            WHERE {0} oc.fecha >= ? AND oc.fecha <= ? " + (proveedor > 0 ? "AND oc.proveedor = ?" : "") +
                            @"GROUP BY det.area, det.cuenta 
                            ORDER BY det.area, det.cuenta", cc != "" && cc != null ? "oc.cc = ? AND " : ""),
                        parametros = parametros
                    }
                );

                result.Add(ITEMS, listaProveedoresPorCompras);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(SUCCESS, false);
                throw new Exception(e.Message);
            }

            return result;
        }

        public bool puedeVerCheckBoxProvNoOptimo()
        {
            var r = false;

            try
            {
                r = _context.tblCom_CC_PermisoVoboProvNoOptimo
                .Any(a =>
                    a.Estatus &&
                    a.UsuarioId == vSesiones.sesionUsuarioDTO.id
                );
            }
            catch (Exception ex)
            {
                r = false;
            }

            return r;
        }


        #region Esconder boton enviar correo si no son compradores
        public bool usuarioCompradorExiste()
        {
            var r = new Dictionary<string, object>();
            try
            {
                var idUsuario = vSesiones.sesionUsuarioDTO.id;
                var usuario = _context.tblCom_Comprador.Where(x => x.estatus).ToList();
                var usuarioPermiso = usuario.Where(w => w.usuarioSIGOPLAN == idUsuario).FirstOrDefault();
                if (usuarioPermiso == null && vSesiones.sesionUsuarioDTO.id != 3807)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                LogError(2, 0, "", "", ex, AccionEnum.CONSULTA, 0, 0);
                return false;
            }
        }
        #endregion

        public List<trazabilidadDTO> getTrazabilidadGeneral(trazabilidad_filtrosDTO filtro)
        {
            string query = "";
            query += @"select distinct ";
            query += @"r.cc as cc, ";
            query += @"r.numero as req_numero, ";
            query += @"r.fecha as req_fecha, ";
            query += @"r.solicito as req_usuario_numero, ";
            query += @"(select top 1 e.descripcion from empleados e where e.empleado = r.solicito ) AS req_usuario_nombre, ";
            query += @"(case r.st_autoriza when 'S' then 'AUTORIZADA' else 'PENDIENTE' end) as req_estatus, ";
            query += @"r.autorizo as req_autorizador_numero, ";
            query += @"(case r.st_autoriza when 'S' then (select top 1 e.descripcion from empleados e where e.empleado = r.autorizo ) else 'PENDIENTE' end) AS req_autorizador_nombre, ";
            query += @"c.numero as comp_numero, ";
            query += @"c.fecha as comp_fecha, ";
            query += @"c.proveedor as comp_prov_numero, ";
            query += @"c.bit_autorecepcion as comp_autorecepcion, ";
            query += @"(case When c.numero is not null then (select top 1 pr.nombre from sp_proveedores pr where pr.numpro = c.proveedor) else null end) as comp_prov_nombre, ";
            query += @"(case When c.numero is not null then (case when c.ST_OC='A' then 'AUTORIZADA' when c.estatus='C' then 'CANCELADA' when c.estatus='A' then 'CANCELADA' else 'PENDIENTE' end) else null end) as comp_estatus, ";
            query += @"(case When c.numero is not null then (case c.estatus when 'A' then null when 'C' then null when 'P' then 'PARCIAL' when 'T' then 'SURTIDA' end) else null end) as como_surtido_estatus, ";
            query += @"c.comprador as comp_comprador_numero, ";
            query += @"(select top 1 e.descripcion from empleados e where e.empleado = c.comprador ) AS comp_comprador_nombre, ";
            query += @"(case When c.total_rec>0 then 1 else 0 end) as tiene_entrada, ";
            query += @"(case When (c.total_rec>0 AND c.total_fac>=0) then 1 else 0 end) as tiene_factura, ";
            if (filtro.tiene_contrarecibo == 1 || filtro.tiene_contrarecibo == 2)
            {
                query += @"(case When h.factura is not null then 1 else 0 end) as tiene_contrarecibo ";
            }
            else
            {
                query += @"0 as tiene_contrarecibo ";
            }

            query += @"from so_requisicion r
            inner join so_requisicion_det rd on (rd.cc = r.cc and rd.numero = r.numero)
            left join so_orden_Compra_det cd on (cd.cc = r.cc and cd.num_requisicion = r.numero)
            left join so_orden_Compra c on (c.cc = cd.cc and c.numero = cd.numero) ";
            if (filtro.tiene_contrarecibo == 1)
            {
                query += @"left join sp_movprov h on (h.numpro = c.proveedor and h.referenciaoc=c.numero and h.cc=c.cc) ";
            }
            else if (filtro.tiene_contrarecibo == 2)
            {
                query += @"inner join sp_movprov h on (h.numpro = c.proveedor and h.referenciaoc=c.numero and h.cc=c.cc) ";
            }
            query += @"where  r.cc is not null ";
            if (!string.IsNullOrEmpty(filtro.cc))
            {
                query += @" and r.cc = '" + filtro.cc + @"' ";
            }

            query += @" and (r.fecha >= '2021-10-01' and r.fecha <= '2021-10-05') ";
            if (filtro.autorecepcionable == 1)
            {
                query += @"and c.bit_autorecepcion = 'S' ";
            }
            else if (filtro.autorecepcionable == 2)
            {
                query += @"and c.bit_autorecepcion = 'N' ";
            }

            if (filtro.tiene_entrada == 1)
            {
                query += @"and c.total_rec > 0 -- tiene entrada ";
            }
            else if (filtro.tiene_entrada == 2)
            {
                query += @"and c.total_rec <= 0 -- no tiene entrada ";
            }

            if (filtro.tiene_factura == 1)
            {
                query += @"and c.total_fac>0 -- tiene factura ";
            }
            else if (filtro.tiene_factura == 2)
            {
                query += @"and c.total_fac<=0 -- no tiene factura ";
            }
            query += @"order by r.fecha,r.numero,c.fecha,c.numero";

            var odbc = new OdbcConsultaDTO() { consulta = query, parametros = new List<OdbcParameterDTO>() };
            var data = _contextEnkontrol.Select<trazabilidadDTO>(EnkontrolAmbienteEnum.Prod, odbc);

            return data;
        }
        public List<trazabilidadDTO> getTrazabilidadGeneralv2(trazabilidad_filtrosDTO filtro)
        {
            string query = string.Format(@"
                SELECT DISTINCT 
                    RQ.cc AS 'req_cc', 
                    CC.descripcion AS 'req_ccDesc', 
                    RQ.numero AS 'req_num', 
                    RQ.fecha AS 'req_fecha', 
                    (SELECT TOP 1 e.descripcion FROM empleados e WHERE e.empleado = RQ.solicito) AS 'req_usuario', 
                    (CASE RQ.st_autoriza WHEN 'S' THEN 'AUTORIZADA' ELSE 'PENDIENTE' END) AS 'req_estatus', 
                    (CASE RQ.st_autoriza WHEN 'S' THEN (SELECT TOP 1 e.descripcion FROM empleados e WHERE e.empleado = RQ.autORizo ) ELSE 'PENDIENTE' END) AS 'req_autORiza', 
                    RQ.fecha_autORiza AS 'req_autORiza_fecha', 
                    OC.numero AS 'comp_num', 
                    OC.fecha AS 'comp_fecha', 
                    (CASE WHEN OC.numero IS not null THEN (SELECT TOP 1 pr.nombre FROM sp_proveedORes pr WHERE pr.numpro = OC.proveedOR) ELSE null END) AS 'comp_prov_nom', 
                    (CASE WHEN OC.numero IS not null THEN (CASE WHEN {0} THEN 'AUTORIZADA' WHEN OC.estatus = 'C' THEN 'CANCELADA' WHEN OC.estatus = 'A' THEN 'CANCELADA' ELSE 'PENDIENTE' END) ELSE null END) AS 'comp_estatus', 
                    (CASE WHEN OC.numero IS not null THEN (CASE WHEN OC.vobo = 0 THEN null ELSE (SELECT TOP 1 e.descripcion FROM empleados e WHERE e.empleado = OC.vobo ) END) ELSE null END) AS 'comp_vobo1_nom', 
                    OC.fecha_vobo AS 'comp_vobo1_fecha', 
                    (CASE WHEN OC.numero IS not null THEN (CASE WHEN OC.vobo2 = 0 THEN null ELSE (SELECT TOP 1 e.descripcion FROM empleados e WHERE e.empleado = OC.vobo2 ) END) ELSE null END) AS 'comp_vobo2_nom', 
                    OC.fecha_vobo2 AS 'comp_vobo2_fecha', 
                    (CASE WHEN OC.numero IS not null THEN (SELECT TOP 1 e.descripcion FROM empleados e WHERE e.empleado = OC.usuario_autoriza ) ELSE null END) AS 'comp_aut_nom', 
                    OC.fecha_autoriza AS 'comp_aut_fecha', 
                    (CASE WHEN OC.numero IS not null THEN (CASE OC.estatus WHEN 'A' THEN null WHEN 'C' THEN null WHEN 'P' THEN 'PARCIAL' WHEN 'T' THEN 'SURTIDA' END) ELSE null END) AS 'comp_surtido', 
                    (SELECT TOP 1 e.descripcion FROM empleados e WHERE e.empleado = OC.comprador ) AS 'comp_compradOR_nom', 
                    (CASE WHEN OC.total_rec > 0 THEN 'SI' ELSE 'NO' END) AS 'comp_tiene_entrada', 
                    --(CASE WHEN (OC.total_rec>0 AND OC.total_fac>=0) THEN 'SI' ELSE 'NO' END) AS 'comp_tiene_factura', 
                    (CASE WHEN (GP.factura IS NOT null AND GP.estatus != 'R') THEN 'SI' ELSE 'NO' END) AS 'comp_tiene_factura', 
                    --(CASE WHEN OC.total_fac>0 THEN 'SI' ELSE 'NO' END) AS 'fac_tiene_contrarecibo', 
                    (CASE WHEN CR.factura IS NOT null THEN 'SI' ELSE 'NO' END) AS 'fac_tiene_contrarecibo',
                    ( 
                        CASE  
                            WHEN (GP.referenciaoc IS null OR GP.estatus='R' OR GP.factura = 0) THEN 'NO' 
                        ELSE 'SI' END 
                    ) AS fac_portal_existe, 
                    ( 
                        CASE  
                            WHEN (GP.referenciaoc IS null AND CR.factura IS NOT null) THEN 'MANUAL' 
                            WHEN (GP.referenciaoc IS not null) THEN 'PORTAL' 
                        ELSE null END 
                    ) AS fac_tipo, 
                    ( 
                        CASE   
                            WHEN (GP.referenciaoc IS null AND CR.factura IS NOT null) THEN null 
                            WHEN (GP.estatus IS null) THEN 'SIN FACTURA' 
                            WHEN (GP.estatus='R') THEN 'FACTURA RECHAZADA' 
                            WHEN (GP.referenciaoc IS not null AND GP.estatus != 'R' AND OC.total_fac = 0) THEN 'PENDIENTE VALIDACION' 
                            WHEN (GP.referenciaoc IS not null AND GP.estatus != 'R' AND CR.factura IS NOT null) THEN 'CONTRARECIBO' 
                        ELSE null END 
                    ) AS 'fac_portal_estatus', 
                    ( 
                        CASE  
                            WHEN (GP.referenciaoc IS null AND CR.factura IS NOT null) THEN REPLACE(STR(CR.factura), ' ', '') /*(SELECT REPLACE(STR(MAX(m.factura)), ' ', '') FROM sp_movprov m WHERE m.numpro = OC.proveedOR AND m.referenciaoc = OC.numero AND m.cc = OC.cc AND m.es_factura = 'S') */
                            WHEN (GP.referenciaoc IS null OR GP.estatus='R') THEN null 
                            WHEN (GP.referenciaoc IS not null AND CR.factura IS NOT null) THEN REPLACE(STR(GP.factura), ' ', '') 
                        ELSE null END 
                    ) AS 'fac_numero', 
                    ( 
                        CASE  
                            WHEN (GP.referenciaoc IS null AND CR.factura IS NOT null) THEN null 
                            WHEN (GP.referenciaoc IS null OR GP.estatus = 'R') THEN null 
                        ELSE GP.fecha_autoriza_portal END 
                    ) AS 'fac_pORtal_fecha', 
                    ( 
                        CASE  
                            WHEN (GP.referenciaoc IS null AND OC.total_fac > 0) THEN (SELECT TOP 1 m.fecha FROM sp_movprov m WHERE m.numpro = OC.proveedOR AND m.referenciaoc = OC.numero AND m.cc = OC.cc AND m.es_factura = 'S') 
                            WHEN (GP.referenciaoc IS null OR GP.estatus = 'R') THEN null 
                            WHEN (GP.referenciaoc IS not null AND OC.total_fac = 0) THEN null 
                            WHEN (GP.referenciaoc IS not null AND OC.total_fac > 0) THEN (SELECT TOP 1 m.fecha FROM sp_movprov m WHERE m.numpro = OC.proveedOR AND m.referenciaoc = OC.numero AND m.cc = OC.cc AND m.factura = GP.factura AND m.es_factura = 'S') 
                        ELSE 
                            null 
                        END 
                    ) AS 'fac_contrarecibo_fecha', 
                    ( 
                        CASE  
                            WHEN (GP.referenciaoc IS null AND CR.factura IS NOT null) THEN CR.folio/*(SELECT TOP 1 m.folio FROM sp_movprov m WHERE m.numpro = OC.proveedOR AND m.referenciaoc = OC.numero AND m.cc = OC.cc AND m.es_factura = 'S') */
                            WHEN (GP.referenciaoc IS null OR GP.estatus = 'R') THEN null 
                            WHEN (GP.referenciaoc IS not null AND OC.total_fac = 0) THEN null 
                            WHEN (GP.referenciaoc IS not null AND CR.factura IS NOT null) THEN CR.folio/*(SELECT TOP 1 m.folio FROM sp_movprov m WHERE m.numpro = OC.proveedOR AND m.referenciaoc = OC.numero AND m.cc = OC.cc AND m.factura = GP.factura AND m.es_factura = 'S') */
                        ELSE 
                            null 
                        END 
                    ) AS 'fac_contrarecibo_folio', 

                    OC.total_fac AS 'comp_total_factura',  
                    (CASE WHEN P.cc IS NOT NULL THEN 'SI' ELSE 'NO' END) AS 'fac_tiene_pago', 
                    OC.total_pag AS 'fac_pagado',  
                    OC.total_rec AS 'comp_total_entrada',  
                    OC.tipo_cambio AS 'comp_tipo_cambio', 
                    OC.proveedOR AS 'comp_prov_num', 
                    RQD.area, 
                    RQD.cuenta, 
                    AC.descripcion AS areaCuentaDesc 
                FROM so_requISicion RQ 
                    INNER JOIN so_requISicion_det RQD on (RQD.cc = RQ.cc AND RQD.numero = RQ.numero) 
                    LEFT JOIN so_ORden_Compra_det OCD on (OCD.cc = RQ.cc AND OCD.num_requISicion = RQ.numero) 
                    LEFT JOIN so_ORden_Compra OC on (OC.cc = OCD.cc AND OC.numero = OCD.numero) 
                    LEFT JOIN sp_gAStos_prov GP on (GP.numpro = OC.proveedOR AND GP.referenciaoc = OC.numero AND GP.cc = OC.cc) 
                    LEFT JOIN sp_movprov CR ON CR.cc = OC.cc AND CR.referenciaoc = OC.numero AND CR.total - OC.total < 1 AND (CR.uuid = GP.uuid OR CR.cfd_folio = GP.cfd_folio OR (CR.factura = GP.factura) ) AND (CR.tm < 26 OR CR.tm = 99)
                    LEFT JOIN sp_movprov P ON P.cc = CR.cc AND P.numpro = CR.numpro AND P.factura = CR.factura AND P.tm >= 26 AND P.tm != 99
                    --LEFT JOIN sp_movprov h on (h.numpro = OC.proveedOR AND h.referenciaoc = OC.numero AND h.cc = OC.cc) 
                    LEFT JOIN cc CC ON RQ.cc = CC.cc 
                    LEFT JOIN si_area_cuenta AC ON RQD.area = AC.area AND RQD.cuenta = AC.cuenta AND RQ.cc = AC.centro_costo
                WHERE RQ.cc IS NOT NULL ", (EmpresaEnum)vSesiones.sesionEmpresaActual != EmpresaEnum.Colombia ? "OC.ST_OC = 'A'" : "(OC.vobo_aut = 'S' OR OC.aut_aut = 'S')");

            if (!string.IsNullOrEmpty(filtro.cc))
            {
                query += @" AND RQ.cc = '" + filtro.cc + @"' ";
            }

            if (filtro.proveedor > 0)
            {
                query += @" AND OC.proveedor = " + filtro.proveedor + @" ";
            }

            query += @" AND (RQ.fecha >= '" + filtro.fecha_inicio.ToString("yyyy-MM-dd") + "' AND RQ.fecha <= '" + filtro.fecha_fin.ToString("yyyy-MM-dd") + "') ";

            if (filtro.autorecepcionable == 1)
            {
                query += @"AND OC.bit_autorecepcion = 'S' ";
            }
            else if (filtro.autorecepcionable == 2)
            {
                query += @"AND OC.bit_autorecepcion = 'N' ";
            }

            if (filtro.tiene_entrada == 1)
            {
                query += @"AND OC.total_rec > 0 -- tiene entrada ";
            }
            else if (filtro.tiene_entrada == 2)
            {
                query += @"AND OC.total_rec <= 0 -- no tiene entrada ";
            }

            if (filtro.tiene_factura == 1)
            {
                query += @"AND (GP.cc IS NOT NULL OR CR.cc IS NOT NULL) /*c.total_fac > 0*/ ";
            }
            else if (filtro.tiene_factura == 2)
            {
                query += @"AND (GP.cc IS NULL AND CR.cc IS NULL)/*c.total_fac <= 0*/ ";
            }

            if (filtro.req != 0)
            {
                query += @"AND RQ.numero = " + filtro.req + @" ";
            }

            if (filtro.oc != 0)
            {
                query += @"AND OC.numero = " + filtro.oc + @" ";
            }

            query += @"ORDER BY RQ.cc, RQ.fecha, RQ.numero, OC.numero ";

            var odbc = new OdbcConsultaDTO() { consulta = query, parametros = new List<OdbcParameterDTO>() };
            var data = _contextEnkontrol.Select<trazabilidadDTO>(EnkontrolAmbienteEnum.Prod, odbc);

            return data;
        }
        public void actualizarComprasDesautorizadas()
        {
            var usuario = vSesiones.sesionUsuarioDTO;
            var relUser = ufs.getUsuarioService().getUserEk(usuario.id);
            var listaCompras = new List<Tuple<string, int>>();

            listaCompras.AddRange(new List<Tuple<string, int>> {
                new Tuple<string, int>("CRA", 132)
            });

            foreach (var compra in listaCompras)
            {
                autorizarCompra(compra.Item1, compra.Item2, true, false);

                checkEstatusOrdenCompraImpresa(compra.Item1, compra.Item2);
            }
        }

        private EnkontrolEnum getEnkontrolEnumADM()
        {
            var baseDatos = new EnkontrolEnum();

            if (productivo)
            {
                if (vSesiones.sesionEmpresaActual == 1)
                {
                    baseDatos = EnkontrolEnum.CplanProd;
                }
                else if (vSesiones.sesionEmpresaActual == 2)
                {
                    baseDatos = EnkontrolEnum.ArrenProd;
                }
                else if (vSesiones.sesionEmpresaActual == 3)
                {
                    baseDatos = EnkontrolEnum.ColombiaProductivo;
                }
                else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.GCPLAN)
                {
                    baseDatos = EnkontrolEnum.GCPLAN;
                }
                else
                {
                    throw new Exception("Empresa distinta a Construplan, Arrendadora, Colombia y GCPLAN");
                }
            }
            else
            {
                if (vSesiones.sesionEmpresaActual == 1)
                {
                    baseDatos = EnkontrolEnum.PruebaCplanProd;
                }
                else if (vSesiones.sesionEmpresaActual == 2)
                {
                    baseDatos = EnkontrolEnum.PruebaArrenADM;
                }
                else
                {
                    throw new Exception("Empresa distinta a Construplan y Arrendadora");
                }
            }

            return baseDatos;
        }

        public Dictionary<string, object> GetProveedoresInsumos(List<string> listaInsumos)
        {
            var resultado = new Dictionary<string, object>();

            try
            {
                int insumoNumerico;
                List<int> listaInsumosFiltrada = listaInsumos.Where(x => x != null && x.Count() == 7 && int.TryParse(x, out insumoNumerico)).Select(x => Int32.Parse(x)).ToList();

                if (listaInsumosFiltrada.Count() == 0)
                {
                    throw new Exception("Debe capturar insumos válidos.");
                }

                string listaInsumosFiltradaString = string.Join(", ", listaInsumosFiltrada);
                string hoySeisMesesAtras = DateTime.Now.AddMonths(-6).ToString("yyyy-MM-dd");

                var listaInsumosEK = _contextEnkontrol.Select<ProveedorInsumoDTO>(getEnkontrolAmbienteConsulta(), string.Format(@"
                    SELECT
                        det.insumo, i.descripcion AS insumoDesc, oc.proveedor, p.nombre AS proveedorDesc, p.direccion, p.telefono1, p.email, est.descripcion_larga AS estado, gi.descripcion AS categoria,
                        oc.cc AS ccUltimaCompra, oc.numero AS numeroUltimaCompra, oc.fecha AS fechaUltimaCompra, CONVERT(varchar, oc.fecha, 103) AS fechaUltimaCompraString, det.precio AS ultimoPrecio, det.area, det.cuenta
                    FROM so_orden_compra_det det
                        INNER JOIN (
                            SELECT
                                a.ccCompra, MAX(a.numeroCompra) AS maximoNumeroCompra, a.insumo
                            FROM (
                                SELECT
                                    det.insumo, oc.proveedor, oc.cc AS ccCompra, oc.numero AS numeroCompra, oc.fecha AS fechaCompra
                                FROM so_orden_compra oc
                                    INNER JOIN so_orden_compra_det det ON oc.cc = det.cc AND oc.numero = det.numero
                                WHERE oc.fecha >= '{0}' AND det.cant_recibida > 0 AND det.insumo IN ({1})
                                ) a
                                LEFT OUTER JOIN (
                                SELECT
                                    det.insumo, oc.proveedor, oc.cc AS ccCompra, oc.numero AS numeroCompra, oc.fecha AS fechaCompra
                                FROM so_orden_compra oc
                                    INNER JOIN so_orden_compra_det det ON oc.cc = det.cc AND oc.numero = det.numero
                                WHERE oc.fecha >= '{0}' AND det.cant_recibida > 0 AND det.insumo IN ({1})
                            ) b ON a.insumo = b.insumo AND a.proveedor = b.proveedor AND a.fechaCompra < b.fechaCompra
                            WHERE b.fechaCompra IS NULL
                            GROUP BY a.ccCompra, a.insumo
                        ) sq ON det.cc = sq.ccCompra AND det.numero = sq.maximoNumeroCompra AND det.insumo = sq.insumo
                        INNER JOIN so_orden_compra oc ON det.cc = oc.cc AND det.numero = oc.numero
                        LEFT JOIN cc c ON oc.cc = c.cc
                        LEFT JOIN insumos i ON det.insumo = i.insumo
                        LEFT JOIN sp_proveedores p ON oc.proveedor = p.numpro
                        LEFT JOIN ciudades ciu ON p.ciudad = ciu.ciudad
                        LEFT JOIN estados est ON ciu.estado = est.estado
                        LEFT JOIN grupos_insumo gi ON CAST(SUBSTRING(CAST(det.insumo as varchar(50)), 1, 1) as int) = gi.tipo_insumo AND CAST(SUBSTRING(CAST(det.insumo as varchar(50)), 2, 2) as int) = gi.grupo_insumo",
                    hoySeisMesesAtras, listaInsumosFiltradaString));

                #region Determinar el Proyecto
                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                {
                    foreach (var ins in listaInsumosEK)
                    {
                        var proyectoEK = _contextEnkontrol.Select<ProveedorInsumoDTO>(getEnkontrolAmbienteConsulta(), string.Format(@"SELECT descripcion AS proyectoDesc FROM cc WHERE cc = '{0}'", ins.ccUltimaCompra)).FirstOrDefault();

                        if (proyectoEK != null)
                        {
                            ins.proyecto = ins.ccUltimaCompra;
                            ins.proyectoDesc = "[" + ins.ccUltimaCompra + "] " + proyectoEK.proyectoDesc;
                        }
                    }
                }
                else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                {
                    foreach (var ins in listaInsumosEK)
                    {
                        var proyectoEK = _contextEnkontrol.Select<ProveedorInsumoDTO>(getEnkontrolAmbienteConsulta(),
                            string.Format(@"SELECT descripcion AS proyectoDesc FROM si_area_cuenta WHERE area = {0} AND cuenta = {1}", ins.area, ins.cuenta)
                        ).FirstOrDefault();

                        if (proyectoEK != null)
                        {
                            ins.proyecto = ins.area + "-" + ins.cuenta;
                            ins.proyectoDesc = "[" + (ins.area + "-" + ins.cuenta) + "] " + proyectoEK.proyectoDesc;
                        }
                    }
                }
                else
                {
                    throw new Exception("Empresa diferente a Construplan/Arrendadora.");
                }
                #endregion

                #region Querys Anteriores
                string querysAnteriores = @"
SELECT
    det.insumo, i.descripcion AS insumoDesc, oc.proveedor, p.nombre AS proveedorDesc, gi.descripcion AS categoria, oc.cc AS ccCompra, oc.numero AS numeroCompra, oc.fecha AS fechaCompra, det.precio AS precio, oc.cc AS proyecto
FROM so_orden_compra oc
    INNER JOIN so_orden_compra_det det ON oc.cc = det.cc AND oc.numero = det.numero
    LEFT JOIN cc c ON oc.cc = c.cc
    LEFT JOIN insumos i ON det.insumo = i.insumo
    LEFT JOIN sp_proveedores p ON oc.proveedor = p.numpro
    LEFT JOIN grupos_insumo gi ON CAST(SUBSTRING(CAST(det.insumo as varchar(50)), 1, 1) as int) = gi.tipo_insumo AND CAST(SUBSTRING(CAST(det.insumo as varchar(50)), 2, 2) as int) = gi.grupo_insumo
WHERE oc.fecha >= '2021-11-28' AND det.cant_recibida > 0 AND det.insumo IN (7030001, 7030002)





SELECT
    a.*
FROM (
    SELECT
        det.insumo, oc.proveedor, oc.cc AS ccCompra, oc.numero AS numeroCompra, oc.fecha AS fechaCompra, det.precio AS precio, det.area, det.cuenta
    FROM so_orden_compra oc
        INNER JOIN so_orden_compra_det det ON oc.cc = det.cc AND oc.numero = det.numero
    WHERE oc.fecha >= '2021-11-28' AND det.cant_recibida > 0 AND det.insumo IN (7030001, 7030002)
    ) a
    LEFT OUTER JOIN (
    SELECT
        det.insumo, oc.proveedor, oc.cc AS ccCompra, oc.numero AS numeroCompra, oc.fecha AS fechaCompra, det.precio AS precio, det.area, det.cuenta
    FROM so_orden_compra oc
        INNER JOIN so_orden_compra_det det ON oc.cc = det.cc AND oc.numero = det.numero
    WHERE oc.fecha >= '2021-11-28' AND det.cant_recibida > 0 AND det.insumo IN (7030001, 7030002)
) b ON a.insumo = b.insumo AND a.proveedor = b.proveedor AND a.fechaCompra < b.fechaCompra
WHERE b.insumo IS NULL
";
                #endregion

                resultado.Add("data", listaInsumosEK);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(12, 0, "OrdenCompraController", "GetProveedoresInsumos", e, AccionEnum.CONSULTA, 0, listaInsumos);
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }

            return resultado;
        }

        private EnkontrolAmbienteEnum getEnkontrolAmbienteConsulta()
        {
            if (productivo)
            {
                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                {
                    return EnkontrolAmbienteEnum.ProdCPLAN;
                }
                else
                {
                    return EnkontrolAmbienteEnum.ProdARREND;
                }
            }
            else
            {
                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                {
                    return EnkontrolAmbienteEnum.PruebaCPLAN;
                }
                else
                {
                    return EnkontrolAmbienteEnum.PruebaARREND;
                }
            }
        }

        public List<EmpleadoPendienteLiberacionDTO> getEmpleadosPendientesLiberacion()
        {
            var listEmpleados = _context.Select<EmpleadoPendienteLiberacionDTO>(new DapperDTO
            {
                baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                consulta = @"
                    SELECT
	                    a.id as idBaja,
	                    a.numeroEmpleado as clave_empleado,
	                    (emp.nombre + ' ' + emp.ape_paterno + ' ' + emp.ape_materno) AS nombreEmpleado,
	                    emp.rfc,
	                    a.cc AS cc,
	                    a.descripcionCC AS ccDesc,
	                    p.puesto,
	                    p.descripcion AS puestoDesc,
	                    a.fechaBaja
                    FROM tblRH_Baja_Registro a
	                    INNER JOIN
		                    (
			                    SELECT
				                    baj.numeroEmpleado, MAX(baj.fechaBaja) AS fechaBaja
			                    FROM tblRH_Baja_Registro baj
			                    WHERE (baj.est_compras = 'P' AND registroActivo = 1 AND baj.est_baja = 'A') OR (baj.est_compras = 'P' AND registroActivo = 1 AND baj.esAnticipada = 1)
			                    GROUP BY baj.numeroEmpleado
		                    ) b ON a.numeroEmpleado = b.numeroEmpleado AND a.fechaBaja = b.fechaBaja AND a.registroActivo = 1
	                    INNER JOIN tblRH_EK_Empleados emp ON a.numeroEmpleado = emp.clave_empleado
	                    --INNER JOIN tblP_CC c ON emp.cc_contable = c.cc
	                    LEFT JOIN tblRH_EK_Puestos p ON emp.puesto = p.puesto
                    ORDER BY a.numeroEmpleado DESC",
            });

            var queryAnterior = @"
                            SELECT 
                                baj.id as idBaja,  
                                baj.numeroEmpleado as clave_empleado, 
                                (emp.nombre + ' ' + emp.ape_paterno + ' ' + emp.ape_materno) AS nombreEmpleado, 
                                emp.rfc, 
                                emp.cc_contable AS cc, 
                                c.descripcion AS ccDesc, 
                                p.descripcion AS puestoDesc 
                            FROM tblRH_Baja_Registro baj 
                                INNER JOIN tblRH_EK_Empleados emp ON baj.numeroEmpleado = emp.clave_empleado 
                                INNER JOIN tblP_CC c ON emp.cc_contable = c.cc 
                                LEFT JOIN tblRH_EK_Puestos p ON emp.puesto = p.puesto 
                            WHERE baj.est_baja = 'A' AND baj.est_compras = 'P' AND registroActivo = 1  
                            ORDER BY baj.numeroEmpleado DESC";

            return listEmpleados ?? new List<EmpleadoPendienteLiberacionDTO>();
        }

        private MainContextEnum getContextEmpresa()
        {
            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
            {
                return MainContextEnum.Construplan;
            }
            else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
            {
                return MainContextEnum.Arrendadora;
            }
            else
            {
                throw new Exception("Empresa distinta a Construplan y Arrendadora.");
            }
        }

        public void guardarBajas(List<EmpleadoPendienteLiberacionDTO> empleados)
        {
            using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    string personasLiberadasString = "";
                    List<string> lstCC = new List<string>();

                    foreach (var emp in empleados)
                    {
                        var objBaja = _context.tblRH_Baja_Registro.FirstOrDefault(e => e.registroActivo && e.id == emp.idBaja);

                        if (objBaja != null)
                        {
                            lstCC.Add(objBaja.cc);

                            objBaja.est_compras = "A";
                            objBaja.est_compras_usuario = (vSesiones.sesionUsuarioDTO.cveEmpleado != "" && vSesiones.sesionUsuarioDTO.cveEmpleado != null) ? Int32.Parse(vSesiones.sesionUsuarioDTO.cveEmpleado) : 0;
                            objBaja.est_compras_fecha = DateTime.Now;
                            objBaja.est_compras_comentario = emp.comentario ?? "";
                            objBaja.est_compras_firma = GlobalUtils.CrearFirmaDigital(objBaja.id, DocumentosEnum.LiberacionContabilidad, vSesiones.sesionUsuarioDTO.id);
                            _context.SaveChanges();

                            string bodyAnticipada = "";

                            if (objBaja.esAnticipada)
                            {
                                bodyAnticipada = " - ( *BAJA ANTICIPADA*. <b>Esperar a la autorizacion de responsable del CC</b>).";
                            }

                            if (objBaja.est_compras == "A" && objBaja.est_inventario == "A" && objBaja.est_contabilidad == "A")
                            {
                                personasLiberadasString += objBaja.numeroEmpleado + " " + objBaja.nombre + " - " + objBaja.cc + " " + objBaja.descripcionCC + " - " + objBaja.est_contabilidad_comentario + bodyAnticipada + "<br/>";
                            }
                        }
                    }
                    dbSigoplanTransaction.Commit();

                    #region Enviar Correo a Despacho si se encuentra liberada por las 4 areas
                    if (personasLiberadasString != "")
                    {
                        string asunto = "BAJAS LIBERADAS AL " + DateTime.Now.ToShortDateString();
                        string mensaje = "Las siguientes personas han sido liberadas por las 3 áreas:<br/><br/>";
                        string cuerpoCorreo = mensaje + personasLiberadasString;
                        //List<string> correo = new List<string> { "despacho@construplan.com.mx" };

                        List<string> correos = new List<string>();

                        List<int> lstNotificantes = _context.tblRH_Notis_RelConceptoUsuario.
                            Where(e => lstCC.Contains(e.cc) && (e.idConcepto == (int)ConceptosNotificantesEnum.Taller || e.idConcepto == (int)ConceptosNotificantesEnum.ResponsableCC)).
                            Select(e => e.idUsuario).ToList();

                        foreach (var usu in lstNotificantes)
                        {
                            correos.Add(_context.tblP_Usuario.FirstOrDefault(x => x.id == usu).correo);
                        }

                        List<string> lstCorreoGenerales = _context.tblRH_Notis_RelConceptoCorreo.
                            Where(e => (e.cc == "*" || lstCC.Contains(e.cc)) && (e.idConcepto == (int)ConceptosNotificantesEnum.Taller || e.idConcepto == (int)ConceptosNotificantesEnum.ResponsableCC)).
                            Select(e => e.correo).ToList();

                        foreach (var correo in lstCorreoGenerales)
                        {
                            correos.Add(correo);
                        }

                        if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan
                            || vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora
                            || vSesiones.sesionEmpresaActual == (int)EmpresaEnum.GCPLAN)
                        {
                            correos.AddRange(new List<string> 
                            { 
                                "despacho@construplan.com.mx",
                            });
                        }

#if DEBUG
                        //correos = new List<string> { "oscar.valencia@construplan.com.mx" };
                        correos = new List<string> { "miguel.buzani@construplan.com.mx" };
#endif

                        //var correoEnviado = GlobalUtils.sendEmail(asunto, cuerpoCorreo, correos);

                        //if (!correoEnviado)
                        //{
                        //    LogError(0, 0, "NominaController", "guardarBajas_enviarCorreo", null, AccionEnum.ACTUALIZAR, 0, empleados);
                        //}
                    }
                    #endregion

                }
                catch (Exception)
                {
                    dbSigoplanTransaction.Rollback();
                    throw;
                }

            }
        }

        #region GENERAR LINK
        public Dictionary<string, object> FillCboProveedoresGenerarLink()
        {
            Dictionary<string, object> resultado = new Dictionary<string, object>();
            try
            {
                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {
                    #region EmpresaPeru
                    case EmpresaEnum.Peru:
                        {
                            using (var ctxPeru = new MainContext())
                            {
                                #region FILL CBO PROVEEDORES PERU
                                var consultaProveedoresStarsoft = @"SELECT prvccodigo,prvcnombre FROM  [003BDCOMUN].[dbo].[MAEPROV]";
                                List<infoProveedoresStarsoftDTO> listaProveedores = new List<infoProveedoresStarsoftDTO>();
                                DynamicParameters lstParametrosProveedor = new DynamicParameters();
                                using (var conexion = new SqlConnection(ConextSigoDapper.conexionStarsoftBancos()))
                                {
                                    conexion.Open();
                                    listaProveedores = conexion.Query<infoProveedoresStarsoftDTO>(consultaProveedoresStarsoft, lstParametrosProveedor, null, true, 300, commandType: CommandType.Text).ToList();
                                    conexion.Close();
                                };

                                List<ComboDTO> lstComboDTO = new List<ComboDTO>();
                                ComboDTO objComboDTO = new ComboDTO();
                                foreach (var item in listaProveedores)
                                {
                                    string claveProveedor = item.prvccodigo;
                                    string nombreProveedor = item.prvcnombre;

                                    if (!string.IsNullOrEmpty(claveProveedor) && !string.IsNullOrEmpty(nombreProveedor))
                                    {
                                        objComboDTO = new ComboDTO();
                                        objComboDTO.Value = claveProveedor.ToString();
                                        objComboDTO.Text = "[" + claveProveedor + "] " + nombreProveedor.Trim().ToUpper();
                                        lstComboDTO.Add(objComboDTO);
                                    }
                                }
                                resultado.Add(ITEMS, lstComboDTO);
                                resultado.Add(SUCCESS, true);
                                #endregion
                            }
                        } break;
                    #endregion

                    #region EmpresaConstruplan

                    default:
                        {
                            #region FILL CBO PROVEEDORES
                            EnkontrolEnum idEmpresa = (int)EmpresaEnum.Construplan == vSesiones.sesionEmpresaActual ? EnkontrolEnum.CplanProd : EnkontrolEnum.ArrenProd;
                            string strQuery = @"SELECT numpro, nombre FROM sp_proveedores ORDER BY numpro";
                            var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                            odbc.consulta = String.Format(strQuery);
                            List<dynamic> lstProveedoresEK = _contextEnkontrol.Select<dynamic>(idEmpresa, odbc);

                            List<ComboDTO> lstComboDTO = new List<ComboDTO>();
                            ComboDTO objComboDTO = new ComboDTO();
                            foreach (var item in lstProveedoresEK)
                            {
                                int claveProveedor = Convert.ToInt32(item.numpro);
                                string nombreProveedor = item.nombre;

                                if (claveProveedor > 0 && !string.IsNullOrEmpty(nombreProveedor))
                                {
                                    objComboDTO = new ComboDTO();
                                    objComboDTO.Value = claveProveedor.ToString();
                                    objComboDTO.Text = "[" + claveProveedor + "] " + nombreProveedor.Trim().ToUpper();
                                    lstComboDTO.Add(objComboDTO);
                                }
                            }

                            resultado.Add(ITEMS, lstComboDTO);
                            resultado.Add(SUCCESS, true);
                            #endregion
                        } break;
                    #endregion
                }
            }
            catch (Exception e)
            {
                LogError(0, 0, _NOMBRE_CONTROLADOR, "FillCboProveedores", e, AccionEnum.FILLCOMBO, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        #endregion
        public Dictionary<string, object> CEProveedorLink(ProveedorLinkDTO objDTO)
        {
            Dictionary<string, object> resultado = new Dictionary<string, object>();
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                    {
                        #region EmpresaPeru
                        case EmpresaEnum.Peru:
                            {
                                using (var ctxPeru = new MainContext())
                                {
                                    #region VALIDACIONES
                                    if (objDTO.idProveedor == 0)
                                    {
                                        throw new Exception("Es necesario indicar al proveedor.");
                                    }

                                    if (string.IsNullOrEmpty(objDTO.cc))
                                    {
                                        throw new Exception("Es necesario indicar el CC.");
                                    }

                                    if (objDTO.numRequisicion == 0)
                                    {
                                        throw new Exception("Es necesario indicar el número de requisición.");
                                    }

                                    // SE VERIFICA SI YA SE ENCUENTRA REGISTRADO EL PROVEEDOR EN BASE AL CC Y NÚMERO DE REQUISICIÓN.
                                    tblCom_ProveedoresLinks objProveedor = ctxPeru.tblCom_ProveedoresLinks.Where(x =>
                                        x.cc == objDTO.cc && x.numRequisicion == objDTO.numRequisicion && x.idProveedor == objDTO.idProveedor && x.registroActivo
                                    ).FirstOrDefault();

                                    if (objProveedor != null)
                                    {
                                        throw new Exception("El proveedor seleccionado ya se encuentra registrado en este CC y número de requisición ingresado.");
                                    }
                                    #endregion

                                    var dominio = "sigoplan.construplan.com.mx";

#if DEBUG
                                    dominio = "localhost:3676";
#endif


                                    var hash = GenerarClaveSHA1(Convert.ToInt64(objDTO.idProveedor), objDTO.numRequisicion);
                                    var nuevoRegistro = new tblCom_ProveedoresLinks
                                    {
                                        cc = objDTO.cc,
                                        idProveedor = Convert.ToInt64(objDTO.idProveedor),
                                        numRequisicion = objDTO.numRequisicion,
                                        hash = hash,
                                        link = string.Format("http://{0}/Enkontrol/ProveedorCuadroComparativo/ProveedorCuadroComparativo?hash={1}", dominio, hash),
                                        idEmpresa = vSesiones.sesionEmpresaActual,
                                        idEstatusRegistro = EstatusRegistroProveedorLinkEnum.PENDIENTE,
                                        esEnvioCorreoExterno = false,
                                        esEnvioCorreoSIGOPLAN = false,
                                        idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id,
                                        fechaCreacion = DateTime.Now,
                                        registroActivo = true
                                    };

                                    ctxPeru.tblCom_ProveedoresLinks.Add(nuevoRegistro);
                                    ctxPeru.SaveChanges();

                                    resultado.Add(SUCCESS, true);
                                    resultado.Add(MESSAGE, "Se ha guardado la información.");
                                    dbContextTransaction.Commit();
                                    SaveBitacora(0, (int)AccionEnum.AGREGAR, objDTO.id, JsonUtils.convertNetObjectToJson(nuevoRegistro));




                                }
                            } break;
                        #endregion

                        #region EmpresaConstruplan
                        default:
                            {

                                #region VALIDACIONES
                                if (objDTO.idProveedor == 0)
                                {
                                    throw new Exception("Es necesario indicar al proveedor.");
                                }

                                if (string.IsNullOrEmpty(objDTO.cc))
                                {
                                    throw new Exception("Es necesario indicar el CC.");
                                }

                                if (objDTO.numRequisicion == 0)
                                {
                                    throw new Exception("Es necesario indicar el número de requisición.");
                                }

                                // SE VERIFICA SI YA SE ENCUENTRA REGISTRADO EL PROVEEDOR EN BASE AL CC Y NÚMERO DE REQUISICIÓN.
                                tblCom_ProveedoresLinks objProveedor = _context.tblCom_ProveedoresLinks.Where(x =>
                                    x.cc == objDTO.cc && x.numRequisicion == objDTO.numRequisicion && x.idProveedor == objDTO.idProveedor && x.registroActivo
                                ).FirstOrDefault();

                                if (objProveedor != null)
                                {
                                    throw new Exception("El proveedor seleccionado ya se encuentra registrado en este CC y número de requisición ingresado.");
                                }
                                #endregion

                                var dominio = "sigoplan.construplan.com.mx";

#if DEBUG
                                dominio = "localhost:3676";
#endif

                                //Agregar funcionalidad para guardar dos links si tiene su contraparte de la otra moneda

                                var hash = GenerarClaveSHA1(Convert.ToInt64(objDTO.idProveedor), objDTO.numRequisicion);
                                var nuevoRegistro = new tblCom_ProveedoresLinks
                                {
                                    cc = objDTO.cc,
                                    idProveedor = Convert.ToInt64(objDTO.idProveedor),
                                    numRequisicion = objDTO.numRequisicion,
                                    hash = hash,
                                    link = string.Format("http://{0}/Enkontrol/ProveedorCuadroComparativo/ProveedorCuadroComparativo?hash={1}", dominio, hash),
                                    idEmpresa = vSesiones.sesionEmpresaActual,
                                    idEstatusRegistro = EstatusRegistroProveedorLinkEnum.PENDIENTE,
                                    esEnvioCorreoExterno = false,
                                    esEnvioCorreoSIGOPLAN = false,
                                    idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id,
                                    fechaCreacion = DateTime.Now,
                                    registroActivo = true
                                };

                                _context.tblCom_ProveedoresLinks.Add(nuevoRegistro);
                                _context.SaveChanges();

                                #region Verificar si el proveedor tiene su contraparte en la otra moneda para crear el link.
                                var proveedorEK = _contextEnkontrol.Select<ProveedorEKDTO>(getEnkontrolEnumADM(), string.Format(@"SELECT * FROM sp_proveedores WHERE numpro = {0}", objDTO.idProveedor)).FirstOrDefault();
                                var moneda = proveedorEK.moneda;
                                var monedaContraparte = proveedorEK.moneda == "1" ? "2" : "1";
                                var segundoProveedorEK = _contextEnkontrol.Select<ProveedorEKDTO>(getEnkontrolEnumADM(), string.Format(@"
                        SELECT TOP 1 * FROM sp_proveedores WHERE TRIM(rfc) = '{0}' AND moneda = '{1}' ORDER BY numpro", proveedorEK.rfc.Trim(), monedaContraparte
                                )).FirstOrDefault();

                                if (segundoProveedorEK != null)
                                {
                                    tblCom_ProveedoresLinks objProveedorSegundo = _context.tblCom_ProveedoresLinks.Where(x =>
                                        x.cc == objDTO.cc && x.numRequisicion == objDTO.numRequisicion && x.idProveedor == segundoProveedorEK.numpro && x.registroActivo
                                    ).FirstOrDefault();

                                    if (objProveedorSegundo == null)
                                    {
                                        var hashSegundo = GenerarClaveSHA1(segundoProveedorEK.numpro, objDTO.numRequisicion);
                                        var nuevoRegistroSegundo = new tblCom_ProveedoresLinks
                                        {
                                            cc = objDTO.cc,
                                            idProveedor = segundoProveedorEK.numpro,
                                            numRequisicion = objDTO.numRequisicion,
                                            hash = hashSegundo,
                                            link = string.Format("http://{0}/Enkontrol/ProveedorCuadroComparativo/ProveedorCuadroComparativo?hash={1}", dominio, hashSegundo),
                                            idEmpresa = vSesiones.sesionEmpresaActual,
                                            idEstatusRegistro = EstatusRegistroProveedorLinkEnum.PENDIENTE,
                                            esEnvioCorreoExterno = false,
                                            esEnvioCorreoSIGOPLAN = false,
                                            idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id,
                                            fechaCreacion = DateTime.Now,
                                            registroActivo = true
                                        };

                                        _context.tblCom_ProveedoresLinks.Add(nuevoRegistroSegundo);
                                        _context.SaveChanges();
                                    }
                                }
                                #endregion

                                resultado.Add(SUCCESS, true);
                                resultado.Add(MESSAGE, "Se ha guardado la información.");
                                dbContextTransaction.Commit();
                                SaveBitacora(0, (int)AccionEnum.AGREGAR, objDTO.id, JsonUtils.convertNetObjectToJson(nuevoRegistro));
                            } break;
                        #endregion
                    }
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(0, 0, _NOMBRE_CONTROLADOR, "CEProveedorLink", e, AccionEnum.AGREGAR, objDTO.id, objDTO);
                    resultado.Add(MESSAGE, e.Message);
                    resultado.Add(SUCCESS, false);
                }
            }
            return resultado;
        }

        public Dictionary<string, object> EliminarProveedorLink(ProveedorLinkDTO objDTO)
        {
            Dictionary<string, object> resultado = new Dictionary<string, object>();
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                    {
                        #region EmpresaPeru
                        case EmpresaEnum.Peru:
                            {
                                using (var ctxPeru = new MainContext())
                                {

                                    #region VALIDACIONES
                                    if (objDTO.id <= 0) { throw new Exception("Ocurrió un error al eliminar el registro."); }
                                    #endregion

                                    #region SE ELIMINA EL PROVEEDOR LINK
                                    tblCom_ProveedoresLinks objEliminar = ctxPeru.tblCom_ProveedoresLinks.Where(w => w.id == objDTO.id).FirstOrDefault();
                                    objEliminar.idEstatusRegistro = EstatusRegistroProveedorLinkEnum.CANCELADO;
                                    objEliminar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                                    objEliminar.fechaModificacion = DateTime.Now;
                                    objEliminar.registroActivo = false;
                                    #endregion

                                    resultado.Add(SUCCESS, true);
                                    resultado.Add(MESSAGE, "Se ha eliminado con éxito el registro.");
                                    ctxPeru.Database.BeginTransaction().Commit();
                                    SaveBitacora(0, (int)AccionEnum.ELIMINAR, objDTO.id, JsonUtils.convertNetObjectToJson(objEliminar));
                                }
                            } break;
                        #endregion
                        default:
                            {

                                #region VALIDACIONES
                                if (objDTO.id <= 0) { throw new Exception("Ocurrió un error al eliminar el registro."); }
                                #endregion

                                #region SE ELIMINA EL PROVEEDOR LINK
                                tblCom_ProveedoresLinks objEliminar = _context.tblCom_ProveedoresLinks.Where(w => w.id == objDTO.id).FirstOrDefault();
                                objEliminar.idEstatusRegistro = EstatusRegistroProveedorLinkEnum.CANCELADO;
                                objEliminar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                                objEliminar.fechaModificacion = DateTime.Now;
                                objEliminar.registroActivo = false;
                                #endregion

                                resultado.Add(SUCCESS, true);
                                resultado.Add(MESSAGE, "Se ha eliminado con éxito el registro.");
                                dbContextTransaction.Commit();
                                SaveBitacora(0, (int)AccionEnum.ELIMINAR, objDTO.id, JsonUtils.convertNetObjectToJson(objEliminar));
                            } break;
                    }
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(0, 0, _NOMBRE_CONTROLADOR, "EliminarProveedorLink", e, AccionEnum.ELIMINAR, objDTO.id, objDTO);
                    resultado.Add(MESSAGE, e.Message);
                    resultado.Add(SUCCESS, false);
                }
            }
            return resultado;
        }

        private string GenerarClaveSHA1(Int64 idProveedor, int numRequisicion)
        {
            StringBuilder sb = new StringBuilder();
            bool existeHash = true;
            try
            {
                #region GENERAR HASH
                while (existeHash)
                {
                    UTF8Encoding enc = new UTF8Encoding();
                    string cadena = idProveedor.ToString() + numRequisicion.ToString();
                    byte[] data = enc.GetBytes(cadena);
                    byte[] result;

                    SHA1CryptoServiceProvider sha = new SHA1CryptoServiceProvider();
                    result = sha.ComputeHash(data);

                    for (int i = 0; i < result.Length; i++)
                    {
                        if (result[i] < 16)
                        {
                            sb.Append("0");
                        }
                        sb.Append(result[i].ToString("x"));
                    }
                    existeHash = VerificaHashUnico(sb.ToString().ToUpper());
                }
                #endregion
            }
            catch (Exception e)
            {
                LogError(0, 0, _NOMBRE_CONTROLADOR, "GenerarClaveSHA1", e, AccionEnum.CONSULTA, 0, 0);
            }
            return sb.ToString().ToUpper();
        }

        private bool VerificaHashUnico(string hash)
        {
            bool existeHash = true;
            try
            {
                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {
                    #region EmpresaPeru
                    case EmpresaEnum.Peru:
                        {
                            using (var ctxPeru = new MainContext())
                            {
                                #region SE VERIFICA QUE EL HASH SEA UNICO
                                tblCom_ProveedoresLinks objHash = ctxPeru.tblCom_ProveedoresLinks.Where(w => w.hash == hash && w.registroActivo).FirstOrDefault();
                                if (objHash == null)
                                    existeHash = false;
                                #endregion
                            }

                        } break;

                    default:
                        {
                            #region SE VERIFICA QUE EL HASH SEA UNICO
                            tblCom_ProveedoresLinks objHash = _context.tblCom_ProveedoresLinks.Where(w => w.hash == hash && w.registroActivo).FirstOrDefault();
                            if (objHash == null)
                                existeHash = false;
                            #endregion

                        } break;
                }
            }
            catch (Exception e)
            {
                LogError(0, 0, _NOMBRE_CONTROLADOR, "VerificaHashUnico", e, AccionEnum.ELIMINAR, 0, 0);
            }
            return existeHash;
        }

        public Dictionary<string, object> GetProveedoresLink(ProveedorLinkDTO objDTO)
        {
            Dictionary<string, object> resultado = new Dictionary<string, object>();
            try
            {
                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {
                    #region EmpresaPeru
                    case EmpresaEnum.Peru:
                        {
                            using (var ctxPeru = new MainContext())
                            {
                                #region VALIDACIONES
                                if (string.IsNullOrEmpty(objDTO.cc)) { throw new Exception("Es necesario indicar el CC."); }
                                if (objDTO.numRequisicion == 0) { throw new Exception("Es necesario indicar el número de requisición."); }
                                #endregion

                                #region SE OBTIENE LISTADO DE PROVEEDORES
                                var consultaProveedoresStarsoft = @"SELECT prvccodigo,prvcnombre FROM  [003BDCOMUN].[dbo].[MAEPROV]";
                                List<infoProveedoresStarsoftDTO> listaProveedores = new List<infoProveedoresStarsoftDTO>();
                                DynamicParameters lstParametrosProveedor = new DynamicParameters();
                                using (var conexion = new SqlConnection(ConextSigoDapper.conexionStarsoftBancos()))
                                {
                                    conexion.Open();
                                    listaProveedores = conexion.Query<infoProveedoresStarsoftDTO>(consultaProveedoresStarsoft, lstParametrosProveedor, null, true, 300, commandType: CommandType.Text).ToList();
                                    conexion.Close();
                                };
                                #endregion

                                #region SE OBTIENE LISTADO DE PROVEEDORES REGISTRADO CON ALGUN LINK
                                List<tblCom_ProveedoresLinks> lstProveedoresLink = ctxPeru.tblCom_ProveedoresLinks.Where(w => w.numRequisicion == objDTO.numRequisicion && w.cc == objDTO.cc && w.registroActivo).ToList();
                                List<ProveedorLinkDTO> lstProveedoresDTO = new List<ProveedorLinkDTO>();
                                ProveedorLinkDTO objProveedorDTO = new ProveedorLinkDTO();
                                foreach (var item in lstProveedoresLink)
                                {
                                    objProveedorDTO = new ProveedorLinkDTO();
                                    objProveedorDTO.id = item.id;

                                    string proveedor = listaProveedores.Where(w => w.prvccodigo == item.idProveedor.ToString()).Select(s => s.prvcnombre).FirstOrDefault();
                                    if (!string.IsNullOrEmpty(proveedor))
                                        objProveedorDTO.proveedor = string.Format("[{0}] {1}", item.idProveedor, proveedor.Trim().ToUpper());

                                    objProveedorDTO.estatusRegistro = EnumHelper.GetDescription((EstatusRegistroProveedorLinkEnum)item.idEstatusRegistro);
                                    objProveedorDTO.numRequisicion = item.numRequisicion;
                                    objProveedorDTO.link = item.link;

                                    string envioCorreoExterno = item.esEnvioCorreoExterno ? "Envío externo" : string.Empty;
                                    envioCorreoExterno += item.esEnvioCorreoSIGOPLAN ? "Envío SIGOPLAN" : string.Empty;
                                    objProveedorDTO.envioCorreo = envioCorreoExterno;

                                    lstProveedoresDTO.Add(objProveedorDTO);
                                }
                                #endregion

                                resultado.Add("lstProveedoresDTO", lstProveedoresDTO);
                                resultado.Add(SUCCESS, true);
                            }

                        } break;
                    #endregion
                    default:
                        {

                            #region VALIDACIONES
                            if (string.IsNullOrEmpty(objDTO.cc)) { throw new Exception("Es necesario indicar el CC."); }
                            if (objDTO.numRequisicion == 0) { throw new Exception("Es necesario indicar el número de requisición."); }
                            #endregion

                            #region SE OBTIENE LISTADO DE PROVEEDORES
                            EnkontrolEnum idEmpresa = (int)EmpresaEnum.Construplan == vSesiones.sesionEmpresaActual ? EnkontrolEnum.CplanProd : EnkontrolEnum.ArrenProd;
                            string strQuery = @"SELECT numpro, nombre FROM sp_proveedores ORDER BY nombre";
                            var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                            odbc.consulta = String.Format(strQuery);
                            List<dynamic> lstProveedoresEK = _contextEnkontrol.Select<dynamic>(idEmpresa, odbc);
                            #endregion

                            #region SE OBTIENE LISTADO DE PROVEEDORES REGISTRADO CON ALGUN LINK
                            List<tblCom_ProveedoresLinks> lstProveedoresLink = _context.tblCom_ProveedoresLinks.Where(w => w.numRequisicion == objDTO.numRequisicion && w.cc == objDTO.cc && w.registroActivo).ToList();
                            List<ProveedorLinkDTO> lstProveedoresDTO = new List<ProveedorLinkDTO>();
                            ProveedorLinkDTO objProveedorDTO = new ProveedorLinkDTO();
                            foreach (var item in lstProveedoresLink)
                            {
                                objProveedorDTO = new ProveedorLinkDTO();
                                objProveedorDTO.id = item.id;

                                string proveedor = lstProveedoresEK.Where(w => w.numpro == item.idProveedor).Select(s => s.nombre).FirstOrDefault();
                                if (!string.IsNullOrEmpty(proveedor))
                                    objProveedorDTO.proveedor = string.Format("[{0}] {1}", item.idProveedor, proveedor.Trim().ToUpper());

                                objProveedorDTO.estatusRegistro = EnumHelper.GetDescription((EstatusRegistroProveedorLinkEnum)item.idEstatusRegistro);
                                objProveedorDTO.numRequisicion = item.numRequisicion;
                                objProveedorDTO.link = item.link;

                                string envioCorreoExterno = item.esEnvioCorreoExterno ? "Envío externo" : string.Empty;
                                envioCorreoExterno += item.esEnvioCorreoSIGOPLAN ? "Envío SIGOPLAN" : string.Empty;
                                objProveedorDTO.envioCorreo = envioCorreoExterno;

                                lstProveedoresDTO.Add(objProveedorDTO);
                            }
                            #endregion

                            resultado.Add("lstProveedoresDTO", lstProveedoresDTO);
                            resultado.Add(SUCCESS, true);
                        } break;
                }
            }
            catch (Exception e)
            {
                LogError(0, 0, _NOMBRE_CONTROLADOR, "GetProveedoresLink", e, AccionEnum.CONSULTA, objDTO.id, objDTO);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> FillCboProveedoresGenerarLinkRegistrados(ProveedorLinkDTO objDTO)
        {
            Dictionary<string, object> resultado = new Dictionary<string, object>();
            try
            {
                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {
                    #region EmpresaPeru
                    case EmpresaEnum.Peru:
                        {
                            using (var ctxPeru = new MainContext())
                            {
                                #region VALIDACIONES
                                if (string.IsNullOrEmpty(objDTO.cc)) { throw new Exception("Es necesario indicar el CC."); }
                                if (objDTO.numRequisicion == 0) { throw new Exception("Es necesario indicar el número de requisición."); }
                                #endregion

                                #region SE OBTIENE LISTADO DE PROVEEDORES
                                //EnkontrolEnum idEmpresa = (int)EmpresaEnum.Construplan == vSesiones.sesionEmpresaActual ? EnkontrolEnum.CplanProd : EnkontrolEnum.ArrenProd;
                                //string strQuery = @"SELECT numpro, nombre FROM sp_proveedores ORDER BY numpro";
                                //var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                                //odbc.consulta = String.Format(strQuery);
                                //List<dynamic> lstProveedoresEK = _contextEnkontrol.Select<dynamic>(idEmpresa, odbc);

                                var consultaProveedoresStarsoft = @"SELECT * FROM  [003BDCOMUN].[dbo].[MAEPROV]";
                                List<infoProveedoresStarsoftDTO> listaProveedores = new List<infoProveedoresStarsoftDTO>();
                                DynamicParameters lstParametrosProveedor = new DynamicParameters();
                                using (var conexion = new SqlConnection(ConextSigoDapper.conexionStarsoftBancos()))
                                {
                                    conexion.Open();
                                    listaProveedores = conexion.Query<infoProveedoresStarsoftDTO>(consultaProveedoresStarsoft, lstParametrosProveedor, null, true, 300, commandType: CommandType.Text).ToList();
                                    conexion.Close();
                                };
                                #endregion

                                #region FILL CBO FILTRO PROVEEDORES LINK
                                List<tblCom_ProveedoresLinks> lstProveedores = ctxPeru.tblCom_ProveedoresLinks.Where(w => w.cc == objDTO.cc && w.numRequisicion == objDTO.numRequisicion && w.registroActivo).ToList();

                                List<ComboDTO> lstComboDTO = new List<ComboDTO>();
                                ComboDTO objComboDTO = new ComboDTO();
                                foreach (var item in lstProveedores)
                                {
                                    objComboDTO = new ComboDTO();
                                    objComboDTO.Value = item.idProveedor.ToString();

                                    string proveedor = listaProveedores.Where(w => w.prvccodigo == item.idProveedor.ToString()).Select(s => s.prvcnombre).FirstOrDefault();
                                    if (!string.IsNullOrEmpty(proveedor))
                                        objComboDTO.Text = "[" + item.idProveedor + "] " + proveedor.Trim().ToUpper();

                                    lstComboDTO.Add(objComboDTO);
                                }

                                resultado.Add(ITEMS, lstComboDTO);
                                resultado.Add(SUCCESS, true);
                                #endregion
                            }
                        } break;
                    #endregion

                    #region EmpresaConstruplan
                    default:
                        {

                            #region VALIDACIONES
                            if (string.IsNullOrEmpty(objDTO.cc)) { throw new Exception("Es necesario indicar el CC."); }
                            if (objDTO.numRequisicion == 0) { throw new Exception("Es necesario indicar el número de requisición."); }
                            #endregion

                            #region SE OBTIENE LISTADO DE PROVEEDORES
                            EnkontrolEnum idEmpresa = (int)EmpresaEnum.Construplan == vSesiones.sesionEmpresaActual ? EnkontrolEnum.CplanProd : EnkontrolEnum.ArrenProd;
                            string strQuery = @"SELECT numpro, nombre FROM sp_proveedores ORDER BY numpro";
                            var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                            odbc.consulta = String.Format(strQuery);
                            List<dynamic> lstProveedoresEK = _contextEnkontrol.Select<dynamic>(idEmpresa, odbc);
                            #endregion

                            #region FILL CBO FILTRO PROVEEDORES LINK
                            List<tblCom_ProveedoresLinks> lstProveedores = _context.tblCom_ProveedoresLinks.Where(w => w.cc == objDTO.cc && w.numRequisicion == objDTO.numRequisicion && w.registroActivo).ToList();

                            List<ComboDTO> lstComboDTO = new List<ComboDTO>();
                            ComboDTO objComboDTO = new ComboDTO();
                            foreach (var item in lstProveedores)
                            {
                                objComboDTO = new ComboDTO();
                                objComboDTO.Value = item.idProveedor.ToString();

                                string proveedor = lstProveedoresEK.Where(w => w.numpro == item.idProveedor).Select(s => s.nombre).FirstOrDefault();
                                if (!string.IsNullOrEmpty(proveedor))
                                    objComboDTO.Text = "[" + item.idProveedor + "] " + proveedor.Trim().ToUpper();

                                lstComboDTO.Add(objComboDTO);
                            }

                            resultado.Add(ITEMS, lstComboDTO);
                            resultado.Add(SUCCESS, true);
                            #endregion
                        } break;

                    #endregion
                }

            }
            catch (Exception e)
            {
                LogError(0, 0, _NOMBRE_CONTROLADOR, "FillCboProveedoresGenerarLinkRegistrados", e, AccionEnum.FILLCOMBO, objDTO.id, objDTO);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> EnviarCorreoLinkProveedores(ProveedorLinkDTO objDTO)
        {
            Dictionary<string, object> resultado = new Dictionary<string, object>();
            try
            {
                #region SE ENVIA LINK A LOS PROVEEDORES (EN BASE AL LISTADO DE CORREOS QUE REGISTRA EL USUARIO)

                // SE OBTIENE EL LINK DE LA REQUISICION.
                tblCom_ProveedoresLinks objProveedor = _context.tblCom_ProveedoresLinks.Where(w => w.cc == objDTO.cc && w.numRequisicion == objDTO.numRequisicion && w.idEstatusRegistro == EstatusRegistroProveedorLinkEnum.PENDIENTE && w.registroActivo).FirstOrDefault();
                if (objProveedor == null)
                {
                    string strMensajeError = string.Empty;
                    int cantCorreos = objDTO.lstCorreos.Count();
                    if (cantCorreos == 1) { throw new Exception("Ocurrió un error al enviar el correo."); }
                    else if (cantCorreos > 1) { throw new Exception("Ocurrió un error al enviar los correos."); }
                    else if (cantCorreos <= 0) { throw new Exception("No se encontraron correos a enviar."); }
                }

#if DEBUG
                objDTO.lstCorreos = new List<string>();
                objDTO.lstCorreos.Add("omar.nunez@construplan.com.mx");
#endif

                // SE INDICA QUE EL CORREO SE ENVIO DESDE SIGOPLAN
                objProveedor.esEnvioCorreoSIGOPLAN = true;
                objProveedor.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                objProveedor.fechaModificacion = DateTime.Now;
                _context.SaveChanges();

                objDTO.lstCorreos.Add(vSesiones.sesionUsuarioDTO.correo);

                GlobalUtils.sendEmail(string.Format("{0}: COTIZACIÓN PENDIENTE POR REALIZAR", PersonalUtilities.GetNombreEmpresa()),
                    string.Format("Buen día, favor de ingresar al siguiente link {0} para realizar la cotización.<br><br>COMPRADOR SOLICITANTE: <b>" + vSesiones.sesionUsuarioDTO.nombre + "</b> (EL CUAL VIENE COPIADO EN ESTE CORREO)<br><br>" +
                    "Se informa que este es un correo autogenerado por el sistema. No es necesario dar una respuesta. Gracias.", objProveedor.link), objDTO.lstCorreos);
                resultado.Add(SUCCESS, true);
                resultado.Add(MESSAGE, "Se ha enviado con éxito el correo");
                #endregion
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> IndicarEnvioCorreoExternamente(ProveedorLinkDTO objDTO)
        {
            Dictionary<string, object> resultado = new Dictionary<string, object>();
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                resultado = new Dictionary<string, object>();
                try
                {
                    #region SE INDICA QUE EL CORREO SE ENVIO EXTERNAMENTE
                    tblCom_ProveedoresLinks objProveedor = _context.tblCom_ProveedoresLinks.Where(w => w.cc == objDTO.cc && w.numRequisicion == objDTO.numRequisicion && w.idEstatusRegistro == EstatusRegistroProveedorLinkEnum.PENDIENTE && w.registroActivo).FirstOrDefault();
                    if (objProveedor == null)
                        throw new Exception("Ocurrió un error en la petición.");

                    objProveedor.esEnvioCorreoExterno = true;
                    objProveedor.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                    objProveedor.fechaModificacion = DateTime.Now;
                    _context.SaveChanges();

                    dbContextTransaction.Commit();
                    resultado.Add(SUCCESS, true);
                    resultado.Add(MESSAGE, "Se ha registrado con éxito.");
                    #endregion
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(0, 0, _NOMBRE_CONTROLADOR, "IndicarEnvioCorreoExternamente", e, AccionEnum.CONSULTA, objDTO.id, objDTO);
                    resultado.Add(MESSAGE, e.Message);
                    resultado.Add(SUCCESS, false);
                }
            }
            return resultado;
        }
                    #endregion

        public Dictionary<string, object> ImpresionMasivaCompras()
        {
            var result = new Dictionary<string, object>();

            var count = 0;
            var empleado = 0;
            var usuarioSigoplan = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id);

            if (usuarioSigoplan != null)
            {
                empleado = usuarioSigoplan.empleado;
            }

            List<OrdenCompraDTO> listaCompras = new List<OrdenCompraDTO>();
            listaCompras.AddRange(new List<OrdenCompraDTO>
            {
                new OrdenCompraDTO {cc = "NL6", numero =	179},
new OrdenCompraDTO {cc = "MW7", numero =	239},
new OrdenCompraDTO {cc = "S02", numero =	47},
new OrdenCompraDTO {cc = "MW6", numero =	308},
new OrdenCompraDTO {cc = "MWB", numero =	278},
new OrdenCompraDTO {cc = "QJ3", numero =	41},
new OrdenCompraDTO {cc = "QJ3", numero =	42},
new OrdenCompraDTO {cc = "IA5", numero =	71},
new OrdenCompraDTO {cc = "EA1", numero =	613},
new OrdenCompraDTO {cc = "AIY", numero =	1042},
new OrdenCompraDTO {cc = "AIT", numero =	724},
new OrdenCompraDTO {cc = "LTJ", numero =	90},
new OrdenCompraDTO {cc = "LTG", numero =	217},
new OrdenCompraDTO {cc = "A63", numero =	269},
new OrdenCompraDTO {cc = "LO6", numero =	279},
new OrdenCompraDTO {cc = "LOB", numero =	46},
new OrdenCompraDTO {cc = "AIL", numero =	815},
new OrdenCompraDTO {cc = "A53", numero =	389},
new OrdenCompraDTO {cc = "AIY", numero =	911},
new OrdenCompraDTO {cc = "A63", numero =	268},
new OrdenCompraDTO {cc = "AL3", numero =	706},
new OrdenCompraDTO {cc = "A86", numero =	269},
new OrdenCompraDTO {cc = "237", numero =	1083},
new OrdenCompraDTO {cc = "227", numero =	6664},
new OrdenCompraDTO {cc = "LOD", numero =	198},
new OrdenCompraDTO {cc = "A62", numero =	277},
new OrdenCompraDTO {cc = "A23", numero =	597},
new OrdenCompraDTO {cc = "A15", numero =	696},
new OrdenCompraDTO {cc = "AJ5", numero =	419},
new OrdenCompraDTO {cc = "A87", numero =	322},
new OrdenCompraDTO {cc = "A42", numero =	592},
new OrdenCompraDTO {cc = "269", numero =	787},
new OrdenCompraDTO {cc = "LTB", numero =	150},
new OrdenCompraDTO {cc = "AIL", numero =	814},
new OrdenCompraDTO {cc = "A09", numero =	662},
new OrdenCompraDTO {cc = "227", numero =	5040},
new OrdenCompraDTO {cc = "LTJ", numero =	98},
new OrdenCompraDTO {cc = "AIN", numero =	726},
new OrdenCompraDTO {cc = "LTG", numero =	187},
new OrdenCompraDTO {cc = "A23", numero =	598},
new OrdenCompraDTO {cc = "Y05", numero =	2},
new OrdenCompraDTO {cc = "Y02", numero =	294},
new OrdenCompraDTO {cc = "LT3", numero =	269},
new OrdenCompraDTO {cc = "QI2", numero =	210},
new OrdenCompraDTO {cc = "QI2", numero =	212},
new OrdenCompraDTO {cc = "CVM", numero =	69},
new OrdenCompraDTO {cc = "QJ1", numero =	230},
new OrdenCompraDTO {cc = "C33", numero =	1},
new OrdenCompraDTO {cc = "AIK", numero =	783},
new OrdenCompraDTO {cc = "AIK", numero =	782},
new OrdenCompraDTO {cc = "269", numero =	786},
new OrdenCompraDTO {cc = "LF7", numero =	3},
new OrdenCompraDTO {cc = "A85", numero =	330},
new OrdenCompraDTO {cc = "AIN", numero =	794},
new OrdenCompraDTO {cc = "227", numero =	6568},
new OrdenCompraDTO {cc = "A63", numero =	368},
new OrdenCompraDTO {cc = "MW7", numero =	296},
new OrdenCompraDTO {cc = "MWA", numero =	314},
new OrdenCompraDTO {cc = "CZ4", numero =	95},
new OrdenCompraDTO {cc = "227", numero =	6581},
new OrdenCompraDTO {cc = "AJ5", numero =	506},
new OrdenCompraDTO {cc = "A40", numero =	753},
new OrdenCompraDTO {cc = "QI2", numero =	207},
new OrdenCompraDTO {cc = "CVM", numero =	68},
new OrdenCompraDTO {cc = "I04", numero =	135},
new OrdenCompraDTO {cc = "A16", numero =	647},
new OrdenCompraDTO {cc = "QM1", numero =	83},
new OrdenCompraDTO {cc = "240", numero =	1141},
new OrdenCompraDTO {cc = "CRG", numero =	147},
new OrdenCompraDTO {cc = "X01", numero =	296},
new OrdenCompraDTO {cc = "OUJ", numero =	17},
new OrdenCompraDTO {cc = "A25", numero =	753},
new OrdenCompraDTO {cc = "227", numero =	6516},
new OrdenCompraDTO {cc = "LOF", numero =	38},
new OrdenCompraDTO {cc = "MW8", numero =	255},
new OrdenCompraDTO {cc = "CY7", numero =	562},
new OrdenCompraDTO {cc = "LOL", numero =	182},
new OrdenCompraDTO {cc = "LTJ", numero =	85},
new OrdenCompraDTO {cc = "X88", numero =	3},
new OrdenCompraDTO {cc = "CA4", numero =	107},
new OrdenCompraDTO {cc = "MWF", numero =	54},
new OrdenCompraDTO {cc = "CAC", numero =	138},
new OrdenCompraDTO {cc = "CA6", numero =	187},
new OrdenCompraDTO {cc = "AI3", numero =	158},
new OrdenCompraDTO {cc = "CA6", numero =	188},
new OrdenCompraDTO {cc = "CA5", numero =	147},
new OrdenCompraDTO {cc = "216", numero =	2627},
new OrdenCompraDTO {cc = "A23", numero =	696},
new OrdenCompraDTO {cc = "CZ4", numero =	29},
new OrdenCompraDTO {cc = "MW9", numero =	202},
new OrdenCompraDTO {cc = "AL3", numero =	694},
new OrdenCompraDTO {cc = "X82", numero =	3},
new OrdenCompraDTO {cc = "002", numero =	2876},
new OrdenCompraDTO {cc = "A56", numero =	405},
new OrdenCompraDTO {cc = "AI8", numero =	884},
new OrdenCompraDTO {cc = "MWF", numero =	53},
new OrdenCompraDTO {cc = "MWE", numero =	66},
new OrdenCompraDTO {cc = "EA1", numero =	597},
new OrdenCompraDTO {cc = "279", numero =	24},
new OrdenCompraDTO {cc = "LTE", numero =	503},
new OrdenCompraDTO {cc = "001", numero =	746},
new OrdenCompraDTO {cc = "MW6", numero =	280},
new OrdenCompraDTO {cc = "MW9", numero =	201},
new OrdenCompraDTO {cc = "MW7", numero =	278},
new OrdenCompraDTO {cc = "IC7", numero =	24},
new OrdenCompraDTO {cc = "MWD", numero =	181},
new OrdenCompraDTO {cc = "MW8", numero =	248},
new OrdenCompraDTO {cc = "QH1", numero =	135},
new OrdenCompraDTO {cc = "EB4", numero =	50},
new OrdenCompraDTO {cc = "CA6", numero =	184},
new OrdenCompraDTO {cc = "Y01", numero =	303},
new OrdenCompraDTO {cc = "CA6", numero =	184},
new OrdenCompraDTO {cc = "LTH", numero =	188},
new OrdenCompraDTO {cc = "L63", numero =	9},
new OrdenCompraDTO {cc = "CYB", numero =	567},
new OrdenCompraDTO {cc = "CRI", numero =	158},
new OrdenCompraDTO {cc = "MWF", numero =	47},
new OrdenCompraDTO {cc = "284", numero =	91},
new OrdenCompraDTO {cc = "MWE", numero =	60},
new OrdenCompraDTO {cc = "A05", numero =	634},
new OrdenCompraDTO {cc = "284", numero =	87},
new OrdenCompraDTO {cc = "269", numero =	731},
new OrdenCompraDTO {cc = "269", numero =	732},
new OrdenCompraDTO {cc = "269", numero =	729},
new OrdenCompraDTO {cc = "001", numero =	750},
new OrdenCompraDTO {cc = "269", numero =	730},
new OrdenCompraDTO {cc = "CYL", numero =	395},
new OrdenCompraDTO {cc = "A25", numero =	746},
new OrdenCompraDTO {cc = "MWA", numero =	233},
new OrdenCompraDTO {cc = "A20", numero =	590},
new OrdenCompraDTO {cc = "MW7", numero =	241},
new OrdenCompraDTO {cc = "MWB", numero =	199},
new OrdenCompraDTO {cc = "MW7", numero =	238},
new OrdenCompraDTO {cc = "200", numero =	433},
new OrdenCompraDTO {cc = "MW7", numero =	240},
new OrdenCompraDTO {cc = "MW7", numero =	239},
new OrdenCompraDTO {cc = "MW6", numero =	223},
new OrdenCompraDTO {cc = "MWB", numero =	202},
new OrdenCompraDTO {cc = "A01", numero =	676},
new OrdenCompraDTO {cc = "M05", numero =	97},
new OrdenCompraDTO {cc = "CRD", numero =	273},
new OrdenCompraDTO {cc = "A20", numero =	591},
new OrdenCompraDTO {cc = "A03", numero =	675},
new OrdenCompraDTO {cc = "CY7", numero =	552},
new OrdenCompraDTO {cc = "MWB", numero =	200},
new OrdenCompraDTO {cc = "MWB", numero =	201},
new OrdenCompraDTO {cc = "MW6", numero =	222},
new OrdenCompraDTO {cc = "A25", numero =	747},
new OrdenCompraDTO {cc = "A45", numero =	464},
new OrdenCompraDTO {cc = "A45", numero =	464},
new OrdenCompraDTO {cc = "A45", numero =	464},
new OrdenCompraDTO {cc = "002", numero =	2863},
new OrdenCompraDTO {cc = "002", numero =	2862},
new OrdenCompraDTO {cc = "MW8", numero =	235},
new OrdenCompraDTO {cc = "284", numero =	50},
new OrdenCompraDTO {cc = "C08", numero =	215},
new OrdenCompraDTO {cc = "CRG", numero =	140},
new OrdenCompraDTO {cc = "282", numero =	1},
new OrdenCompraDTO {cc = "Y02", numero =	278},
new OrdenCompraDTO {cc = "Y01", numero =	223},
new OrdenCompraDTO {cc = "A37", numero =	482},
new OrdenCompraDTO {cc = "AJ5", numero =	315},
new OrdenCompraDTO {cc = "CYD", numero =	450},
new OrdenCompraDTO {cc = "269", numero =	705},
new OrdenCompraDTO {cc = "ICJ", numero =	20},
new OrdenCompraDTO {cc = "269", numero =	700},
new OrdenCompraDTO {cc = "AIY", numero =	965},
new OrdenCompraDTO {cc = "IBF", numero =	94},
new OrdenCompraDTO {cc = "IB4", numero =	53},
new OrdenCompraDTO {cc = "284", numero =	40},
new OrdenCompraDTO {cc = "NFG", numero =	16},
new OrdenCompraDTO {cc = "Y02", numero =	267},
new OrdenCompraDTO {cc = "CVM", numero =	62},
new OrdenCompraDTO {cc = "269", numero =	692},
new OrdenCompraDTO {cc = "269", numero =	693},
new OrdenCompraDTO {cc = "ICL", numero =	23},
new OrdenCompraDTO {cc = "Y04", numero =	70},
new OrdenCompraDTO {cc = "A49", numero =	534},
new OrdenCompraDTO {cc = "L55", numero =	13},
new OrdenCompraDTO {cc = "269", numero =	681},
new OrdenCompraDTO {cc = "216", numero =	2575},
new OrdenCompraDTO {cc = "002", numero =	2851},
new OrdenCompraDTO {cc = "MD6", numero =	109},
new OrdenCompraDTO {cc = "284", numero =	4},
new OrdenCompraDTO {cc = "284", numero =	1},
new OrdenCompraDTO {cc = "E03", numero =	702},
new OrdenCompraDTO {cc = "CR9", numero =	131},
new OrdenCompraDTO {cc = "LEI", numero =	133},
new OrdenCompraDTO {cc = "CR9", numero =	130},
new OrdenCompraDTO {cc = "AJ1", numero =	550},
new OrdenCompraDTO {cc = "269", numero =	536},
new OrdenCompraDTO {cc = "MWB", numero =	195},
new OrdenCompraDTO {cc = "MWB", numero =	195},
new OrdenCompraDTO {cc = "MWB", numero =	194},
new OrdenCompraDTO {cc = "MWB", numero =	194},
new OrdenCompraDTO {cc = "MWA", numero =	228},
new OrdenCompraDTO {cc = "MWA", numero =	228},
new OrdenCompraDTO {cc = "LTJ", numero =	67},
new OrdenCompraDTO {cc = "227", numero =	5987},
new OrdenCompraDTO {cc = "A49", numero =	524},
new OrdenCompraDTO {cc = "AI6", numero =	875},
new OrdenCompraDTO {cc = "LTI", numero =	317},
new OrdenCompraDTO {cc = "L65", numero =	6},
new OrdenCompraDTO {cc = "MW9", numero =	180},
new OrdenCompraDTO {cc = "MW9", numero =	180},
new OrdenCompraDTO {cc = "LTG", numero =	203},
new OrdenCompraDTO {cc = "OS4", numero =	17},
new OrdenCompraDTO {cc = "MWB", numero =	222},
new OrdenCompraDTO {cc = "LTG", numero =	202},
new OrdenCompraDTO {cc = "002", numero =	2789},
new OrdenCompraDTO {cc = "Y02", numero =	257},
new OrdenCompraDTO {cc = "CVF", numero =	65},
new OrdenCompraDTO {cc = "Y02", numero =	256},
new OrdenCompraDTO {cc = "IC3", numero =	37},
new OrdenCompraDTO {cc = "L58", numero =	17},
new OrdenCompraDTO {cc = "216", numero =	2547},
new OrdenCompraDTO {cc = "ICJ", numero =	19},
new OrdenCompraDTO {cc = "269", numero =	659},
new OrdenCompraDTO {cc = "MW6", numero =	245},
new OrdenCompraDTO {cc = "A26", numero =	700},
new OrdenCompraDTO {cc = "LEQ", numero =	84},
new OrdenCompraDTO {cc = "227", numero =	5925},
new OrdenCompraDTO {cc = "A25", numero =	727},
new OrdenCompraDTO {cc = "Y04", numero =	58},
new OrdenCompraDTO {cc = "C23", numero =	128},
new OrdenCompraDTO {cc = "C23", numero =	128},
new OrdenCompraDTO {cc = "MD7", numero =	103},
new OrdenCompraDTO {cc = "AIH", numero =	131},
new OrdenCompraDTO {cc = "AIH", numero =	131},
new OrdenCompraDTO {cc = "MW6", numero =	240},
new OrdenCompraDTO {cc = "CYI", numero =	377},
new OrdenCompraDTO {cc = "CRK", numero =	234},
new OrdenCompraDTO {cc = "MW8", numero =	217},
new OrdenCompraDTO {cc = "MWB", numero =	212},
new OrdenCompraDTO {cc = "AIC", numero =	1061},
new OrdenCompraDTO {cc = "CYD", numero =	427},
new OrdenCompraDTO {cc = "LT5", numero =	296},
new OrdenCompraDTO {cc = "269", numero =	615},
new OrdenCompraDTO {cc = "L55", numero =	12},
new OrdenCompraDTO {cc = "277", numero =	29},
new OrdenCompraDTO {cc = "LOL", numero =	189},
new OrdenCompraDTO {cc = "269", numero =	590},
new OrdenCompraDTO {cc = "216", numero =	2521},
new OrdenCompraDTO {cc = "283", numero =	2},
new OrdenCompraDTO {cc = "QI2", numero =	154},
new OrdenCompraDTO {cc = "QI2", numero =	154},
new OrdenCompraDTO {cc = "QI2", numero =	154},
new OrdenCompraDTO {cc = "LT5", numero =	288},
new OrdenCompraDTO {cc = "C26", numero =	64},
new OrdenCompraDTO {cc = "AIA", numero =	754},
new OrdenCompraDTO {cc = "LOI", numero =	287},
new OrdenCompraDTO {cc = "IBJ", numero =	74},
new OrdenCompraDTO {cc = "C26", numero =	64},
new OrdenCompraDTO {cc = "AIA", numero =	754},
new OrdenCompraDTO {cc = "LOI", numero =	287},
new OrdenCompraDTO {cc = "IBJ", numero =	74},
new OrdenCompraDTO {cc = "CA5", numero =	129},
new OrdenCompraDTO {cc = "LO4", numero =	74},
new OrdenCompraDTO {cc = "LF3", numero =	58},
new OrdenCompraDTO {cc = "MM8", numero =	139}
            });


            foreach (var c in listaCompras)
            {
                var compraEK = consultaCheckProductivo(
                    string.Format(@"SELECT * FROM so_orden_compra WHERE cc = '{0}' AND numero = {1}", c.cc, c.numero)
                );

                if (compraEK != null)
                {
                    var compra = ((List<dynamic>)compraEK.ToObject<List<dynamic>>())[0];

                    var movimientoNoInvEK = consultaCheckProductivo(
                        string.Format(@"SELECT * FROM so_movimientos_noinv WHERE cc = '{0}' AND orden_ct = {1}", c.cc, c.numero)
                    );

                    if (movimientoNoInvEK == null)
                    {
                        using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                        {
                            using (var con = checkConexionProductivo())
                            {
                                using (var trans = con.BeginTransaction())
                                {
                                    try
                                    {
                                        //No se le resta lo de retenciones. Por lo tanto, le sumo las retenciones al total.
                                        var totalRecibido =
                                            Convert.ToDecimal(compra.total, CultureInfo.InvariantCulture) + Convert.ToDecimal(compra.rentencion_despues_iva, CultureInfo.InvariantCulture);

                                        #region Update Compra Recibido
                                        var consultaUpdateCompraRecibido = @"
                                                                UPDATE so_orden_compra 
                                                                SET 
                                                                    sub_tot_rec = ?, 
                                                                    iva_rec = ?, 
                                                                    total_rec = ?, 
                                                                    estatus = ? 
                                                                WHERE cc = ? AND numero = ?";

                                        using (var cmd = new OdbcCommand(consultaUpdateCompraRecibido))
                                        {
                                            OdbcParameterCollection parameters = cmd.Parameters;

                                            parameters.Add("@sub_tot_rec", OdbcType.Numeric).Value = Convert.ToDecimal(compra.sub_total, CultureInfo.InvariantCulture);
                                            parameters.Add("@iva_rec", OdbcType.Numeric).Value = Convert.ToDecimal(compra.iva, CultureInfo.InvariantCulture);
                                            parameters.Add("@total_rec", OdbcType.Numeric).Value = totalRecibido;
                                            parameters.Add("@estatus", OdbcType.Char).Value = "T";

                                            parameters.Add("@cc", OdbcType.Char).Value = (string)compra.cc;
                                            parameters.Add("@numero", OdbcType.Numeric).Value = (int)compra.numero;

                                            cmd.Connection = trans.Connection;
                                            cmd.Transaction = trans;

                                            count += cmd.ExecuteNonQuery();
                                        }
                                        #endregion

                                        var compraDetalleEK = consultaCheckProductivo(
                                            string.Format(@"SELECT 
                                                                * 
                                                            FROM so_orden_compra_det 
                                                            WHERE cc = '{0}' AND numero = {1} AND (cantidad - cant_canc) > 0", (string)compra.cc, (int)compra.numero)
                                        );

                                        if (compraDetalleEK != null)
                                        {
                                            var compraDetalle = (List<OrdenCompraDetDTO>)compraDetalleEK.ToObject<List<OrdenCompraDetDTO>>();
                                            var flagSinRequisicion = false;

                                            if (compraDetalle.Any(x => x.num_requisicion == 0))
                                            {
                                                flagSinRequisicion = true;
                                            }

                                            if (!flagSinRequisicion)
                                            {
                                                if (Convert.ToDecimal(compra.total, CultureInfo.InvariantCulture) <= 0)
                                                {
                                                    continue;
                                                }
                                            }

                                            var ultimoMovimiento = (List<SurtidoDetDTO>)consultaCheckProductivo(
                                                string.Format(@"SELECT TOP 1 
                                                                    remision AS numero 
                                                                FROM so_movimientos_noinv 
                                                                WHERE almacen = {0} AND tipo_mov = {1} 
                                                                ORDER BY remision DESC", 999, 1)
                                            ).ToObject<List<SurtidoDetDTO>>();

                                            #region Insert Movimiento


                                            var consultaMovimientos = @"INSERT INTO so_movimientos_noinv 
                                                    (almacen, tipo_mov, remision, cc, compania, periodo, ano, orden_ct, frente, fecha, proveedor, total, estatus, 
                                                    transferida, poliza, empleado, alm_destino, cc_destino, comentarios, tipo_trasp, numero_destino, tp, year_poliza, 
                                                    mes_poliza, tipo_cambio, hora, fecha_modifica, empleado_modifica, tc_cc, remision_b2b) 
                                                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

                                            using (var cmd = new OdbcCommand(consultaMovimientos))
                                            {
                                                OdbcParameterCollection parameters = cmd.Parameters;

                                                parameters.Add("@almacen", OdbcType.Numeric).Value = 999;
                                                parameters.Add("@tipo_mov", OdbcType.Numeric).Value = 1;
                                                parameters.Add("@remision", OdbcType.Numeric).Value = ultimoMovimiento[0].numero + 1;
                                                parameters.Add("@cc", OdbcType.Char).Value = ((string)compra.cc).ToUpper();
                                                parameters.Add("@compania", OdbcType.Numeric).Value = 1;
                                                parameters.Add("@periodo", OdbcType.Numeric).Value = DateTime.Now.Month;
                                                parameters.Add("@ano", OdbcType.Numeric).Value = DateTime.Now.Year;
                                                parameters.Add("@orden_ct", OdbcType.Numeric).Value = (int)compra.numero;
                                                parameters.Add("@frente", OdbcType.Numeric).Value = 0;
                                                parameters.Add("@fecha", OdbcType.Date).Value = DateTime.Now.Date;
                                                parameters.Add("@proveedor", OdbcType.Numeric).Value = (int)compra.proveedor;
                                                parameters.Add("@total", OdbcType.Numeric).Value = Convert.ToDecimal(compra.total, CultureInfo.InvariantCulture);
                                                parameters.Add("@estatus", OdbcType.Char).Value = "A";
                                                parameters.Add("@transferida", OdbcType.Char).Value = "N";
                                                parameters.Add("@poliza", OdbcType.Numeric).Value = 0;
                                                parameters.Add("@empleado", OdbcType.Numeric).Value = empleado;
                                                parameters.Add("@alm_destino", OdbcType.Numeric).Value = 0;
                                                parameters.Add("@cc_destino", OdbcType.Char).Value = " ";
                                                parameters.Add("@comentarios", OdbcType.Char).Value = "";
                                                parameters.Add("@tipo_trasp", OdbcType.Char).Value = "0";
                                                parameters.Add("@numero_destino", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@tp", OdbcType.Char).Value = DBNull.Value;
                                                parameters.Add("@year_poliza", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@mes_poliza", OdbcType.Numeric).Value = DBNull.Value;
                                                parameters.Add("@tipo_cambio", OdbcType.Numeric).Value = Convert.ToDecimal(compra.tipo_cambio, CultureInfo.InvariantCulture);
                                                parameters.Add("@hora", OdbcType.Time).Value = DateTime.Now.TimeOfDay;
                                                parameters.Add("@fecha_modifica", OdbcType.Date).Value = DateTime.Now.Date;
                                                parameters.Add("@empleado_modifica", OdbcType.Numeric).Value = empleado;
                                                parameters.Add("@tc_cc", OdbcType.Numeric).Value = 1;
                                                parameters.Add("@remision_b2b", OdbcType.VarChar).Value = DBNull.Value;

                                                cmd.Connection = trans.Connection;
                                                cmd.Transaction = trans;

                                                count += cmd.ExecuteNonQuery();
                                            }
                                            #endregion

                                            foreach (var compDet in compraDetalle)
                                            {
                                                #region Update Compra Detalle Recibido
                                                var consultaUpdateCompraDetalleRecibido = @"
                                                                UPDATE so_orden_compra_det 
                                                                SET 
                                                                    cant_recibida = ?, 
                                                                    imp_recibido = ?, 
                                                                    fecha_recibido = ? 
                                                                WHERE cc = ? AND numero = ? AND partida = ? AND insumo = ?";

                                                using (var cmd = new OdbcCommand(consultaUpdateCompraDetalleRecibido))
                                                {
                                                    OdbcParameterCollection parameters = cmd.Parameters;

                                                    parameters.Add("@cant_recibida", OdbcType.Numeric).Value = compDet.cantidad;
                                                    parameters.Add("@imp_recibido", OdbcType.Numeric).Value = compDet.cantidad * compDet.precio;
                                                    parameters.Add("@fecha_recibido", OdbcType.Date).Value = DateTime.Now.Date;

                                                    parameters.Add("@cc", OdbcType.Char).Value = (string)compra.cc;
                                                    parameters.Add("@numero", OdbcType.Numeric).Value = (int)compra.numero;
                                                    parameters.Add("@partida", OdbcType.Numeric).Value = compDet.partida;
                                                    parameters.Add("@insumo", OdbcType.Numeric).Value = compDet.insumo;

                                                    cmd.Connection = trans.Connection;
                                                    cmd.Transaction = trans;

                                                    count += cmd.ExecuteNonQuery();
                                                }
                                                #endregion

                                                #region Insert Movimiendo Detalle
                                                var importe = compDet.cantidad * compDet.precio;

                                                if (!flagSinRequisicion)
                                                {
                                                    if (compDet.precio <= 0 || importe <= 0)
                                                    {
                                                        throw new Exception("El precio y el importe no pueden ser igual o menor a cero.");
                                                    }
                                                }

                                                var consultaMovimientosDetalle = @"INSERT INTO so_movimientos_noinv_det 
                                                        (almacen, tipo_mov, remision, partida, insumo, comentarios, area, cuenta, cantidad, precio, importe, partida_oc, costo_prom, remision2) 
                                                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

                                                using (var cmd = new OdbcCommand(consultaMovimientosDetalle))
                                                {
                                                    OdbcParameterCollection parameters = cmd.Parameters;

                                                    parameters.Add("@almacen", OdbcType.Numeric).Value = 999;
                                                    parameters.Add("@tipo_mov", OdbcType.Numeric).Value = 1;
                                                    parameters.Add("@remision", OdbcType.Numeric).Value = ultimoMovimiento[0].numero + 1;
                                                    parameters.Add("@partida", OdbcType.Numeric).Value = compDet.partida;
                                                    parameters.Add("@insumo", OdbcType.Numeric).Value = compDet.insumo;
                                                    parameters.Add("@comentarios", OdbcType.Char).Value = "";
                                                    parameters.Add("@area", OdbcType.Numeric).Value = compDet.area ?? (object)DBNull.Value;
                                                    parameters.Add("@cuenta", OdbcType.Numeric).Value = compDet.cuenta ?? (object)DBNull.Value;
                                                    parameters.Add("@cantidad", OdbcType.Numeric).Value = compDet.cantidad;
                                                    parameters.Add("@precio", OdbcType.Numeric).Value = compDet.precio;
                                                    parameters.Add("@importe", OdbcType.Numeric).Value = importe;
                                                    parameters.Add("@partida_oc", OdbcType.Numeric).Value = compDet.partida;
                                                    parameters.Add("@costo_prom", OdbcType.Numeric).Value = DBNull.Value;
                                                    parameters.Add("@remision2", OdbcType.Char).Value = ultimoMovimiento[0].numero + 1;

                                                    cmd.Connection = trans.Connection;
                                                    cmd.Transaction = trans;

                                                    count += cmd.ExecuteNonQuery();
                                                }
                                                #endregion

                                                #region Actualizar Explosión
                                                var registroExplosionEK = consultaCheckProductivo(
                                                    string.Format(@"SELECT * FROM so_explos_mat WHERE cc = '{0}' AND insumo = {1} AND year_explos = {2}", compra.cc, compDet.insumo, DateTime.Now.Year)
                                                );

                                                if (registroExplosionEK != null)
                                                {
                                                    var registroExplosion = ((List<dynamic>)registroExplosionEK.ToObject<List<dynamic>>())[0];

                                                    var nuevaCantidadRecibida = Convert.ToDecimal(registroExplosion.cant_recibida, CultureInfo.InvariantCulture) + compDet.cantidad;
                                                    var nuevoImporteRecibido = Convert.ToDecimal(registroExplosion.imp_recibido, CultureInfo.InvariantCulture) + (compDet.cantidad * compDet.precio);

                                                    var consultaExplosionUpdate = @"
                                                        UPDATE so_explos_mat 
                                                        SET cant_recibida = ?, imp_recibido = ? 
                                                        WHERE cc = ? AND insumo = ? AND year_explos = ?";

                                                    using (var cmd = new OdbcCommand(consultaExplosionUpdate))
                                                    {
                                                        OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                        parametersExplosion.Add("@cant_recibida", OdbcType.Numeric).Value = nuevaCantidadRecibida;
                                                        parametersExplosion.Add("@imp_recibido", OdbcType.Numeric).Value = nuevoImporteRecibido;

                                                        parametersExplosion.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                        parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = compDet.insumo;
                                                        parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;

                                                        cmd.Connection = trans.Connection;
                                                        cmd.Transaction = trans;

                                                        count += cmd.ExecuteNonQuery();
                                                    }
                                                }
                                                else
                                                {
                                                    var consultaExplosionInsert = @"INSERT INTO so_explos_mat 
                                                        (cc, insumo, cantidad, precio, aditiva_cant, aditiva_imp, deduc_cant, deduc_imp, cant_requerida, 
                                                        comp_cant, comp_imp, ajuste_cant, ajuste_imp, traspaso_cant, traspaso_imp, cant_recibida, imp_recibido, 
                                                        aditiva_cant_fecha, deduc_cant_fecha, aditiva_precio_fecha, deduc_precio_fecha, aditiva_precio, deductiva_precio, 
                                                        traspaso_cant_entrada, traspaso_imp_entrada, importe, year_explos, periodo, bit_auto_presu, cantidad_aditiva_sun, 
                                                        cantidad_deductiva_sun, cantidad_extra_sun) 
                                                        VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                                    using (var cmd = new OdbcCommand(consultaExplosionInsert))
                                                    {
                                                        OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                                        parametersExplosion.Add("@cc", OdbcType.Char).Value = compra.cc;
                                                        parametersExplosion.Add("@insumo", OdbcType.Numeric).Value = compDet.insumo;
                                                        parametersExplosion.Add("@cantidad", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@precio", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@aditiva_cant", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@aditiva_imp", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@deduc_cant", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@deduc_imp", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@cant_requerida", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@comp_cant", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@comp_imp", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@ajuste_cant", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@ajuste_imp", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@traspaso_cant", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@traspaso_imp", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@cant_recibida", OdbcType.Numeric).Value = compDet.cantidad;
                                                        parametersExplosion.Add("@imp_recibido", OdbcType.Numeric).Value = (compDet.cantidad * compDet.precio);
                                                        parametersExplosion.Add("@aditiva_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                                        parametersExplosion.Add("@deduc_cant_fecha", OdbcType.Date).Value = DBNull.Value;
                                                        parametersExplosion.Add("@aditiva_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                                        parametersExplosion.Add("@deduc_precio_fecha", OdbcType.Date).Value = DBNull.Value;
                                                        parametersExplosion.Add("@aditiva_precio", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@deductiva_precio", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@traspaso_cant_entrada", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@traspaso_imp_entrada", OdbcType.Numeric).Value = 0;
                                                        parametersExplosion.Add("@importe", OdbcType.Numeric).Value = DBNull.Value;
                                                        parametersExplosion.Add("@year_explos", OdbcType.Numeric).Value = DateTime.Now.Year;
                                                        parametersExplosion.Add("@periodo", OdbcType.Char).Value = DBNull.Value;
                                                        parametersExplosion.Add("@bit_auto_presu", OdbcType.Char).Value = "N";
                                                        parametersExplosion.Add("@cantidad_aditiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                                        parametersExplosion.Add("@cantidad_deductiva_sun", OdbcType.Numeric).Value = DBNull.Value;
                                                        parametersExplosion.Add("@cantidad_extra_sun", OdbcType.Numeric).Value = DBNull.Value;

                                                        cmd.Connection = trans.Connection;
                                                        cmd.Transaction = trans;

                                                        count += cmd.ExecuteNonQuery();
                                                    }
                                                }
                                                #endregion
                                            }
                                        }

                                        trans.Commit();
                                        dbSigoplanTransaction.Commit();
                                    }
                                    catch (Exception e)
                                    {
                                        trans.Rollback();
                                        dbSigoplanTransaction.Rollback();

                                        result.Add(MESSAGE, e.Message);
                                        result.Add(SUCCESS, false);
                                    }
                                }
                            }
                        }
                    }
                }
            }


            result.Add(SUCCESS, true);
            return result;
        }

        public Dictionary<string, object> FillComboFormaPagoPeru()
        {
            var result = new Dictionary<string, object>();

            try
            {
                var data = new List<ComboDTO>();

                using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                {
                    data = _starsoft.FORMA_PAGO.Select(x => new ComboDTO
                    {
                        Value = x.COD_FP,
                        Text = x.COD_FP + " - " + x.DES_FP
                    }).ToList();
                }

                result.Add(ITEMS, data);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(SUCCESS, false);
            }

            return result;
        }

        public Dictionary<string, object> FillComboTipoDocumentoPeru()
        {
            var result = new Dictionary<string, object>();

            try
            {
                var data = new List<ComboDTO>();

                using (var _starsoft = new MainContextPeruStarSoft003BDCOMUN())
                {
                    data = _starsoft.TIPO_DOCU.Select(x => new ComboDTO
                    {
                        Value = x.TDO_TIPDOC,
                        Text = "[" + x.TDO_TIPDOC + "] " + x.TDO_DESCRI
                    }).ToList();
                }

                result.Add(ITEMS, data);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(SUCCESS, false);
            }

            return result;
        }

        public Dictionary<string, object> GetTipoCambioPeru()
        {
            var result = new Dictionary<string, object>();

            try
            {
                TIPO_CAMBIO data = null;
                var hoy = DateTime.Now;

                using (var _starsoftContabilidad = new MainContextPeruStarSoft003BDCONTABILIDAD())
                {
                    data = _starsoftContabilidad.TIPO_CAMBIO.ToList().FirstOrDefault(x => x.TIPOCAMB_FECHA.Year == hoy.Year && x.TIPOCAMB_FECHA.Month == hoy.Month && x.TIPOCAMB_FECHA.Day == hoy.Day);
                }

                result.Add("data", data);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(SUCCESS, false);
            }

            return result;
        }
    }
}