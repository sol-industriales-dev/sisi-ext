using Core.DAO.FileManager;
using Core.DTO;
using Core.DTO.FileManager;
using Core.DTO.Principal.Generales;
using Core.DTO.Principal.Usuarios;
using Core.Entity.FileManager;
using Core.Entity.Principal.Multiempresa;
using Core.Enum.FileManager;
using Core.Enum.Principal.Bitacoras;
using Data.DAO.Principal.Usuarios;
using Data.EntityFramework.Context;
using Data.EntityFramework.Generic;
using Infrastructure.Utils;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Linq.SqlClient;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Web;
using MoreLinq.Extensions;
using Core.DTO.Utils.Data;
using Core.Enum.Principal;
using Core.Entity.Principal.Usuarios;
using Core.Enum.Multiempresa;
using System.Threading;

namespace Data.DAO.FileManager
{
    public class FileManagerDAO : GenericDAO<tblFM_Archivo>, IFileManagerDAO
    {
        #region VARIABLES
        private const string _NOMBRE_CONTROLADOR = "FileManagerController";
        private const int _SISTEMA = (int)SistemasEnum.PMO;
        private readonly Dictionary<string, object> resultado = new Dictionary<string, object>();

        private const string FORMATO_FECHA_HORA = "dd/MM/yyyy hh:mm tt";
        private const string TIPO_DEFAULT_CARPETA = "folder";
        private const string PERMISO_ADMIN_GESTOR = "Administrar";
        private const string PERMISO_ENVIO_TODO = "VerTodo";
        private int USUARIO_ANDREA_FELIX_ID = 6574;
        private int USUARIO_MARTA_CHENO_ID = 1062;
        private int USUARIO_SCARLET_ID = 6463;
        private int USUARIO_GUADALUPE_TRINIDAD_ID = 24099;
        private int USUARIO_OMAR_NUNEZ_ID = 7939;
        private const string CORREO_OMAR_NUNEZ = "omar.nunez@construplan.com.mx";

        private int DIVISION_CONSTRUCCION_ID = 1;
        private int DIVISION_INDUSTRIAL_ID = 2;

        private readonly string RUTA_BASE = @"\\REPOSITORIO\Proyecto\FM";
        private string RUTA_ELIMINADOS;
        //private readonly string RUTA_TEMPORALES;
        private string RUTA_TEMPORALES;
        private readonly int VISTA_GESTOR_ID;
        private readonly int VISTA_ENVIO_ID;

        // Variante para hacer pruebas en local.
        private const string RUTA_LOCAL = @"C:\Proyecto\FM";

        /// <summary>
        /// Indica si el usuario actual no tiene privilegios de adminsitrador.
        /// </summary>
        private bool noEsAdmin = true;

        private List<int> listaAdminIds;

        /// <summary>
        /// Determina si el usuario logueado puede o no crear subdivisiones y obras dentro de ellas.
        /// </summary>
        private bool puedeCrearSubdivision;

        private bool puedeCargarMultiple;
        #endregion

        #region Constructor
        public FileManagerDAO()
        {
            resultado.Clear();

            // Producción.
            VISTA_GESTOR_ID = 7283;
            VISTA_ENVIO_ID = 7352;

            // Local
            //RUTA_BASE = RUTA_LOCAL;

            string carpetaEmpresa = "";

            switch (vSesiones.sesionEmpresaActual)
            {
                case (int)EmpresaEnum.Construplan:
                    carpetaEmpresa = @"\S";
                    break;
                case (int)EmpresaEnum.Arrendadora:
                    carpetaEmpresa = @"\A";
                    break;
                case (int)EmpresaEnum.Colombia:
                    carpetaEmpresa = @"\C";
                    break;
                case (int)EmpresaEnum.Peru:
                    carpetaEmpresa = @"\P";
                    break;
                default:
                    throw new NotImplementedException("Empresa indefinida");
            }

            RUTA_BASE += carpetaEmpresa;

            RUTA_ELIMINADOS = RUTA_BASE + @"\Eliminados";
            RUTA_TEMPORALES = RUTA_BASE + @"\Temporales";

            noEsAdmin = !(new UsuarioDAO().getViewAction(VISTA_GESTOR_ID, PERMISO_ADMIN_GESTOR));
#if DEBUG
            RUTA_BASE = RUTA_LOCAL;
            SandBox();
#endif
        }
        #endregion

        #region Métodos FileManager
        public Dictionary<string, object> VerificarAccesoGestorDeprecado()
        {
            try
            {
                if (!noEsAdmin)
                {
                    resultado.Add("acceso", true);
                }
                else
                {
                    var tienePermiso = _context.tblFM_Permiso.Any(x => (x.archivo.tipoCarpeta == TipoCarpetaEnum.Año && x.estatusVista != 0 && x.usuarioID == vSesiones.sesionUsuarioDTO.id));
                    resultado.Add("acceso", tienePermiso);
                }
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "VerificarAccesoGestor", e, AccionEnum.CONSULTA, 0, null);
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, "Ocurrió un error al intentar verificar si el usuario tenía acceso al gestor.");
            }
            return resultado;
        }
        public Dictionary<string, object> VerificarAccesoGestor()
        {
            try
            {
                if (!noEsAdmin)
                {
                    resultado.Add("acceso", true);
                }
                else
                {
                    var tienePermiso = _context.tblFM_Permisos_Usuario.Any(x => x.usuarioID == vSesiones.sesionUsuarioDTO.id);
                    resultado.Add("acceso", tienePermiso);
                }
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "VerificarAccesoGestor", e, AccionEnum.CONSULTA, 0, null);
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, "Ocurrió un error al intentar verificar si el usuario tenía acceso al gestor.");
            }
            return resultado;
        }
        public Dictionary<string, object> VerificarAccesoGestorHierarchy()
        {
            try
            {
                if (!noEsAdmin)
                {
                    resultado.Add("acceso", true);
                }
                else
                {
                    var tienePermiso = _context.tblFM_Permisos_Usuario.Any(x => x.usuarioID == vSesiones.sesionUsuarioDTO.id);
                    resultado.Add("acceso", tienePermiso);
                }
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "VerificarAccesoGestor", e, AccionEnum.CONSULTA, 0, null);
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, "Ocurrió un error al intentar verificar si el usuario tenía acceso al gestor.");
            }
            return resultado;
        }
        private List<tblFM_PermisoEspecialObra> ObtenerEstructuraDirectoriosArchivos(int usuarioID)
        {
            var permisosUsuario = getLstPermisoUsuario(usuarioID);
            var archivos = (from archivo in _context.tblFM_Archivo select archivo).ToList();
            permisosUsuario.ForEach(permiso =>
            {
                permiso.archivos = new List<tblFM_Archivo>();
                var padre = (from nodo in archivos where nodo.id == permiso.entidadID select nodo).FirstOrDefault();
                permiso.archivos.Add(padre);
                AsignarPermisoArchivoDesdePadre(padre, archivos, permiso);
            });
            return permisosUsuario;
        }
        private void AsignarPermisoArchivoDesdePadre(tblFM_Archivo padre, List<tblFM_Archivo> archivos, tblFM_PermisoEspecialObra permiso)
        {
            var hijos = (from nodo in archivos where nodo.padreID == padre.id select nodo).ToList();
            hijos.ForEach(hijo =>
            {
                permiso.archivos.Add(hijo);
            });
        }
        public DirectorioDTO ObtenerEstructuraDirectorios()
        {
            var contenedor = new DirectorioDTO();
            contenedor.data = new List<DirectorioDTO>();
            try
            {
                _context.Configuration.AutoDetectChangesEnabled = false;
                var index = 1;
                var usuarioID = vSesiones.sesionUsuarioDTO.id;
                var carpetasRaiz = ObtenerListaCarpetasAño();
                var nivelesIniciales = new List<int> { 0, 1 };
                var versiones = (from version in _context.tblFM_Version select version).ToList();
                var permisos = ObtenerEstructuraDirectoriosArchivos(usuarioID);
                puedeCrearSubdivision = PuedeCrearSubdivision(usuarioID);
                puedeCargarMultiple = PuedeCargarMultiple(usuarioID);
                ObtenerEstructuraDirectoriosArchivos(usuarioID);
                List<tblFM_ArchivotblFM_TipoArchivo> lstTipoArchivos = _context.tblFM_ArchivotblFM_TipoArchivo.ToList();
                foreach (var carpetaAño in carpetasRaiz)
                {
                    // Si no es admin, verifica si tiene acceso a la carpeta.
                    if (noEsAdmin)
                    {
                        var permisoCarpeta = permisos.Any(permiso => permiso.archivos.Any(archivo => archivo.id == carpetaAño.archivo.id));

                        // Si no tiene permiso a esa carpeta, salta la iteración.
                        if (!permisoCarpeta)
                        {
                            continue;
                        }
                    }

                    var listaVersionesIniciales = versiones
                        .Where(version => version.activo && EsTipoCarpetaCargaInicial(version.archivo.tipoCarpeta) &&
                            !noEsAdmin ? true :
                                permisos.Any(permiso =>
                                    permiso.archivos.Any(archivo =>
                                        archivo.id == version.archivoID &&
                                        permiso.usuarioID == usuarioID &&
                                        archivo.año == carpetaAño.archivo.año &&
                                        nivelesIniciales.Contains(archivo.nivel)
                                        )
                                    )
                                )
                        .ToList();

                    var directorioTemp = new DirectorioDTO
                    {
                        index = index++,
                        value = carpetaAño.nombre,
                        type = TIPO_DEFAULT_CARPETA,
                        date = ObtenerCadenaFechaArchivo(carpetaAño),
                        id = carpetaAño.archivoID,
                        pId = 0,
                        level = carpetaAño.archivo.nivel,
                        open = true,
                        data = new List<DirectorioDTO>(),
                        permisos = ObtenerPermisosArchivo(carpetaAño.archivoID, usuarioID, true, ref permisos),
                        listaTiposArchivosID = ObtenerListaTiposArchivosIds(carpetaAño.archivoID, lstTipoArchivos),
                        año = carpetaAño.archivo.año,
                        //tipoCarpeta = carpetaAño.archivo.tipoCarpeta.GetDescription()
                    };

                    directorioTemp.data = ObtenerEstructuraSubcarpetas(directorioTemp, ref index, ref listaVersionesIniciales, ref permisos, puedeCrearSubdivision, puedeCargarMultiple);

                    contenedor.data.Add(directorioTemp);
                }
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "ObtenerEstructuraDirectorios", e, AccionEnum.CONSULTA, 0, null);
                return new DirectorioDTO();
            }

            return contenedor;
        }
        /// <summary>
        /// version anterior con niveles de permiso a nivel registro
        /// </summary>
        public DirectorioDTO ObtenerEstructuraDirectoriosDeprecado()
        {
            try
            {
                #region VERSION ACTUAL // TODO
                var contenedor = new DirectorioDTO();
                contenedor.data = new List<DirectorioDTO>();

                using (var _ctx = new MainContext(vSesiones.sesionEmpresaActual))
                {
                    _ctx.Configuration.AutoDetectChangesEnabled = false;
                    List<tblFM_ArchivotblFM_TipoArchivo> lstTipoArchivos = _context.tblFM_ArchivotblFM_TipoArchivo.ToList();

                    int index = 1;
                    int usuarioID = vSesiones.sesionUsuarioDTO.id;
                    var listaCarpetasRaiz = ObtenerListaCarpetasAño();
                    var allVersion = _ctx.tblFM_Version;
                    var allArchivo = _ctx.tblFM_Archivo.ToList();
                    var listaPermisosUsuario = getLstPermisoUsuarioDeprecado(usuarioID);
                    listaPermisosUsuario.ForEach(s =>
                    {
                        s.archivo = allArchivo.FirstOrDefault(a => a.id == s.archivoID);
                    });

                    puedeCrearSubdivision = PuedeCrearSubdivision(usuarioID);
                    puedeCargarMultiple = PuedeCargarMultiple(usuarioID);

                    foreach (var carpetaAño in listaCarpetasRaiz)
                    {
                        // Si no es admin, verifica si tiene acceso a la carpeta.
                        if (noEsAdmin)
                        {
                            var permisoCarpeta = listaPermisosUsuario.Any(permiso => permiso.archivoID == carpetaAño.archivo.id);

                            // Si no tiene permiso a esa carpeta, salta la iteración.
                            if (!permisoCarpeta)
                                continue;
                        }

                        var listaVersionesIniciales = allVersion.ToList()
                            .Where(version => version.activo && EsTipoCarpetaCargaInicial(version.archivo.tipoCarpeta) &&
                                !noEsAdmin ? true :
                                    listaPermisosUsuario.Any(permiso =>
                                        permiso.archivoID == version.archivoID &&
                                        permiso.usuarioID == usuarioID &&
                                        permiso.archivo.año == carpetaAño.archivo.año &&
                                        (permiso.archivo.nivel == 0 || permiso.archivo.nivel == 1) &&
                                        permiso.estatusVista > 0))
                            .ToList();

                        var directorioTemp = new DirectorioDTO
                        {
                            index = index++,
                            value = carpetaAño.nombre,
                            type = TIPO_DEFAULT_CARPETA,
                            date = ObtenerCadenaFechaArchivo(carpetaAño),
                            id = carpetaAño.archivoID,
                            pId = 0,
                            level = carpetaAño.archivo.nivel,
                            open = true,
                            data = new List<DirectorioDTO>(),
                            permisos = ObtenerPermisosArchivoDeprecado(carpetaAño.archivoID, usuarioID, true, ref listaPermisosUsuario),
                            listaTiposArchivosID = ObtenerListaTiposArchivosIds(carpetaAño.archivoID, lstTipoArchivos),
                            año = carpetaAño.archivo.año,
                            //tipoCarpeta = carpetaAño.archivo.tipoCarpeta.GetDescription()
                        };

                        directorioTemp.data = ObtenerEstructuraSubcarpetasDeprecado(directorioTemp, ref index, ref listaVersionesIniciales, ref listaPermisosUsuario, puedeCrearSubdivision, puedeCargarMultiple);
                        contenedor.data.Add(directorioTemp);
                    }
                    return contenedor;
                }
                #endregion

                //#region VERSION ANTERIOR
                //var contenedor = new DirectorioDTO();
                //contenedor.data = new List<DirectorioDTO>();
                //using (var _ctx = new MainContext(vSesiones.sesionEmpresaActual))
                //    try
                //    {
                //        _ctx.Configuration.AutoDetectChangesEnabled = false;

                //        int index = 1;
                //        int usuarioID = vSesiones.sesionUsuarioDTO.id;
                //        var listaCarpetasRaiz = ObtenerListaCarpetasAño();
                //        var allVersion = _ctx.tblFM_Version;
                //        var allArchivo = _ctx.tblFM_Archivo.ToList();
                //        var listaPermisosUsuario = getLstPermisoUsuarioDeprecado(usuarioID);
                //        listaPermisosUsuario.ForEach(s =>
                //        {
                //            s.archivo = allArchivo.FirstOrDefault(a => a.id == s.archivoID);
                //        });

                //        puedeCrearSubdivision = PuedeCrearSubdivision(usuarioID);
                //        puedeCargarMultiple = PuedeCargarMultiple(usuarioID);

                //        foreach (var carpetaAño in listaCarpetasRaiz)
                //        {
                //            // Si no es admin, verifica si tiene acceso a la carpeta.
                //            if (noEsAdmin)
                //            {
                //                var permisoCarpeta = listaPermisosUsuario.Any(permiso => permiso.archivoID == carpetaAño.archivo.id);

                //                // Si no tiene permiso a esa carpeta, salta la iteración.
                //                if (!permisoCarpeta)
                //                {
                //                    continue;
                //                }
                //            }

                //            var listaVersionesIniciales = allVersion.ToList()
                //                .Where(version => version.activo && EsTipoCarpetaCargaInicial(version.archivo.tipoCarpeta) &&
                //                    !noEsAdmin ? true :
                //                        listaPermisosUsuario.Any(permiso =>
                //                            permiso.archivoID == version.archivoID &&
                //                            permiso.usuarioID == usuarioID &&
                //                            permiso.archivo.año == carpetaAño.archivo.año &&
                //                            (permiso.archivo.nivel == 0 || permiso.archivo.nivel == 1) &&
                //                            permiso.estatusVista > 0))
                //                .ToList();

                //            var directorioTemp = new DirectorioDTO
                //            {
                //                index = index++,
                //                value = carpetaAño.nombre,
                //                type = TIPO_DEFAULT_CARPETA,
                //                date = ObtenerCadenaFechaArchivo(carpetaAño),
                //                id = carpetaAño.archivoID,
                //                pId = 0,
                //                level = carpetaAño.archivo.nivel,
                //                open = true,
                //                data = new List<DirectorioDTO>(),
                //                permisos = ObtenerPermisosArchivoDeprecado(carpetaAño.archivoID, usuarioID, true, ref listaPermisosUsuario),
                //                listaTiposArchivosID = ObtenerListaTiposArchivosIds(carpetaAño.archivoID),
                //                año = carpetaAño.archivo.año,
                //                //tipoCarpeta = carpetaAño.archivo.tipoCarpeta.GetDescription()
                //            };

                //            directorioTemp.data = ObtenerEstructuraSubcarpetasDeprecado(directorioTemp, ref index, ref listaVersionesIniciales, ref listaPermisosUsuario, puedeCrearSubdivision, puedeCargarMultiple);

                //            contenedor.data.Add(directorioTemp);
                //        }
                //    }
                //    catch (Exception e)
                //    {
                //        LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "ObtenerEstructuraDirectorios", e, AccionEnum.CONSULTA, 0, null);
                //        return new DirectorioDTO();
                //    }

                //return contenedor;
                //#endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "ObtenerEstructuraDirectorios", e, AccionEnum.CONSULTA, 0, null);
                return new DirectorioDTO();
            }
        }

        /// <summary>
        /// version anterior con niveles de permiso a nivel registro
        /// </summary>
        public DirectorioDTO ObtenerEstructuraDirectoriosHierarchy()
        {
            try
            {
                #region VERSION ACTUAL // TODO
                //var contenedor = new DirectorioDTO();
                //contenedor.data = new List<DirectorioDTO>();
                //var parentStack = new Stack<DirectorioDTO>();
                //var parent = default(DirectorioDTO);
                //var prevNode = default(DirectorioDTO);
                //var rootNodes = new List<DirectorioDTO>();
                //var usuarioID = vSesiones.sesionUsuarioDTO.id;
                //var puedeCrearSubdivision = PuedeCrearSubdivision(usuarioID);
                //var puedeCargarMultiple = PuedeCargarMultiple(usuarioID);

                //using (var _ctx = new MainContext(vSesiones.sesionEmpresaActual))
                //{
                //    _ctx.Configuration.AutoDetectChangesEnabled = false;
                //    var lstFolders = getLstPermisoUsuarioParentsHierarchy(usuarioID);

                //    List<tblFM_Permisos_Usuario> lstPermisos = _ctx.tblFM_Permisos_Usuario.Where(w => w.usuarioID == vSesiones.sesionUsuarioDTO.id && w.registroActivo).ToList();
                //    List<long> lstArchivosID = GetPermisosArchivosID_Usuario(lstPermisos);
                //    if (lstArchivosID != null && lstArchivosID.Count() > 0)
                //        lstFolders = lstFolders.Where(w => lstArchivosID.Contains(w.id)).ToList();

                //    for (int i = 0; i < lstFolders.Count(); i++)
                //    {
                //        var item = lstFolders[i];
                //        item.index = i;
                //        item.date = ObtenerCadenaFechaArchivo(item);
                //        item.data = new List<DirectorioDTO>();
                //        item.permisos = ObtenerPermisosArchivoHierarchy(item);
                //        item.listaTiposArchivosID = ObtenerListaTiposArchivosIds(item.id);
                //        item.tipoCarpeta = ((TipoCarpetaEnum)int.Parse(item.tipoCarpeta)).GetDescription();
                //        if (puedeCrearSubdivision && (item.tipoCarpeta.Equals(TipoCarpetaEnum.Division.GetDescription()) || item.tipoCarpeta.Equals(TipoCarpetaEnum.Subdivision.GetDescription())))
                //        {
                //            item.permisos.puedeCrearSubdivision = true;
                //        }
                //        if (parent == null || item.pId == 0)
                //        {
                //            rootNodes.Add(item);

                //            parent = item;
                //        }
                //        else if (item.pId == parent.id)
                //        {
                //            if (parent.data == null)
                //                parent.data = new List<DirectorioDTO>();

                //            parent.data.Add(item);
                //        }
                //        else if (item.pId == prevNode.id)
                //        {
                //            parentStack.Push(parent);

                //            parent = prevNode;

                //            if (parent.data == null)
                //                parent.data = new List<DirectorioDTO>();

                //            parent.data.Add(item);
                //        }
                //        else
                //        {
                //            var parentFound = false;

                //            while (parentStack.Count > 0 && parentFound == false)
                //            {
                //                parent = parentStack.Pop();

                //                if (item.pId != 0 && item.pId == parent.id)
                //                {
                //                    parent.data.Add(item);
                //                    parentFound = true;
                //                }
                //            }

                //            if (parentFound == false)
                //            {
                //                rootNodes.Add(item);

                //                parent = item;
                //            }
                //        }

                //        prevNode = item;
                //    }

                //    //contenedor.data = rootNodes;
                //    //contenedor.data = contenedor.data.Where(w => lstArchivosID.Contains(w.id)).ToList();
                //    //return contenedor;
                //    contenedor.data = rootNodes;
                //    return contenedor;
                //}
                #endregion

                #region VERSION ANTERIOR
                var contenedor = new DirectorioDTO();
                contenedor.data = new List<DirectorioDTO>();
                var parentStack = new Stack<DirectorioDTO>();
                var parent = default(DirectorioDTO);
                var prevNode = default(DirectorioDTO);
                var rootNodes = new List<DirectorioDTO>();
                var usuarioID = vSesiones.sesionUsuarioDTO.id;
                var puedeCrearSubdivision = PuedeCrearSubdivision(usuarioID);
                var puedeCargarMultiple = PuedeCargarMultiple(usuarioID);

                using (var _ctx = new MainContext(vSesiones.sesionEmpresaActual))
                {
                    List<tblFM_ArchivotblFM_TipoArchivo> lstTipoArchivos = _ctx.Select<tblFM_ArchivotblFM_TipoArchivo>(new DapperDTO
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = @"SELECT * FROM tblFM_ArchivotblFM_TipoArchivo"
                    }).ToList();

                    _ctx.Configuration.AutoDetectChangesEnabled = false;

                    var folders = getLstPermisoUsuarioParentsHierarchy(usuarioID);

                    var counts = folders.Count();
                    for (int i = 0; i < counts; i++)
                    {
                        var item = folders[i];
                        item.index = i;
                        item.date = ObtenerCadenaFechaArchivo(item);
                        item.data = new List<DirectorioDTO>();
                        item.permisos = ObtenerPermisosArchivoHierarchy(item);
                        item.listaTiposArchivosID = ObtenerListaTiposArchivosIds(item.id, lstTipoArchivos);
                        item.tipoCarpeta = ((TipoCarpetaEnum)int.Parse(item.tipoCarpeta)).GetDescription();
                        if (puedeCrearSubdivision && (item.tipoCarpeta.Equals(TipoCarpetaEnum.Division.GetDescription()) || item.tipoCarpeta.Equals(TipoCarpetaEnum.Subdivision.GetDescription())))
                            item.permisos.puedeCrearSubdivision = true;
                        if (parent == null || item.pId == 0)
                        {
                            rootNodes.Add(item);
                            parent = item;
                        }
                        else if (item.pId == parent.id)
                        {
                            if (parent.data == null)
                                parent.data = new List<DirectorioDTO>();

                            parent.data.Add(item);
                        }
                        else if (item.pId == prevNode.id)
                        {
                            parentStack.Push(parent);
                            parent = prevNode;

                            if (parent.data == null)
                                parent.data = new List<DirectorioDTO>();

                            parent.data.Add(item);
                        }
                        else
                        {
                            var parentFound = false;
                            while (parentStack.Count > 0 && parentFound == false)
                            {
                                parent = parentStack.Pop();
                                if (item.pId != 0 && item.pId == parent.id)
                                {
                                    parent.data.Add(item);
                                    parentFound = true;
                                }
                            }
                            if (parentFound == false)
                            {
                                rootNodes.Add(item);
                                parent = item;
                            }
                        }
                        prevNode = item;
                    }
                }
                contenedor.data = rootNodes;
                return contenedor;
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "ObtenerEstructuraDirectoriosHierarchy", e, AccionEnum.CONSULTA, 0, null);
                return new DirectorioDTO();
            }
        }


        private List<long> GetPermisosArchivosID_Usuario(List<tblFM_Permisos_Usuario> lstPermisos)
        {
            List<long> lstArchivosID = new List<long>();
            try
            {
                using (var _ctx = new MainContext())
                {
                    lstArchivosID = lstPermisos.Select(s => s.archivoID).ToList();
                }
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetPermisosArchivosID_Usuario", e, AccionEnum.CONSULTA, 0, new { usuarioID = vSesiones.sesionUsuarioDTO.id });
                return lstArchivosID;
            }
            return lstArchivosID;
        }

        public DirectorioDTO ObtenerEstructuraDirectoriosChildsHierarchy(long padreID, int obraCerrada)
        {
            #region VERSION ACTUAL // TODO
            //var contenedor = new DirectorioDTO();
            //contenedor.data = new List<DirectorioDTO>();
            //var parentStack = new Stack<DirectorioDTO>();
            //var parent = default(DirectorioDTO);
            //var prevNode = default(DirectorioDTO);
            //var rootNodes = new List<DirectorioDTO>();
            //var usuarioID = vSesiones.sesionUsuarioDTO.id;
            //var puedeCrearSubdivision = PuedeCrearSubdivision(usuarioID);
            //var puedeCargarMultiple = PuedeCargarMultiple(usuarioID);

            //using (var _ctx = new MainContext(vSesiones.sesionEmpresaActual))
            //{
            //    try
            //    {
            //        _ctx.Configuration.AutoDetectChangesEnabled = false;

            //        var lstFolders = getLstPermisoUsuarioChildsHierarchy(usuarioID, padreID);

            //        List<tblFM_Permisos_Usuario> lstPermisos = _ctx.tblFM_Permisos_Usuario.Where(w => w.usuarioID == vSesiones.sesionUsuarioDTO.id && w.registroActivo).ToList();
            //        List<long> lstArchivosID = GetPermisosArchivosID_Usuario(lstPermisos);
            //        if (lstArchivosID != null && lstArchivosID.Count() > 0)
            //            lstFolders = lstFolders.Where(w => lstArchivosID.Contains(w.id)).ToList();

            //        for (int i = 0; i < lstFolders.Count(); i++)
            //        {
            //            var item = lstFolders[i];
            //            item.index = i;
            //            item.date = ObtenerCadenaFechaArchivo(item);
            //            item.data = new List<DirectorioDTO>();
            //            item.permisos = ObtenerPermisosArchivoHierarchy(item);
            //            item.listaTiposArchivosID = ObtenerListaTiposArchivosIds(item.id);
            //            item.tipoCarpeta = ((TipoCarpetaEnum)int.Parse(item.tipoCarpeta)).GetDescription();
            //            if (puedeCrearSubdivision && (item.tipoCarpeta.Equals(TipoCarpetaEnum.Division.GetDescription()) || item.tipoCarpeta.Equals(TipoCarpetaEnum.Subdivision.GetDescription())))
            //                item.permisos.puedeCrearSubdivision = true;

            //            if (parent == null || item.pId == 0)
            //            {
            //                rootNodes.Add(item);
            //                parent = item;
            //            }
            //            else if (item.pId == parent.id)
            //            {
            //                if (parent.data == null)
            //                    parent.data = new List<DirectorioDTO>();

            //                parent.data.Add(item);
            //            }
            //            else if (item.pId == prevNode.id)
            //            {
            //                parentStack.Push(parent);
            //                parent = prevNode;
            //                if (parent.data == null)
            //                    parent.data = new List<DirectorioDTO>();

            //                parent.data.Add(item);
            //            }
            //            else
            //            {
            //                var parentFound = false;
            //                while (parentStack.Count > 0 && parentFound == false)
            //                {
            //                    parent = parentStack.Pop();
            //                    if (item.pId != 0 && item.pId == parent.id)
            //                    {
            //                        parent.data.Add(item);
            //                        parentFound = true;
            //                    }
            //                }

            //                if (parentFound == false)
            //                {
            //                    rootNodes.Add(item);
            //                    parent = item;
            //                }
            //            }
            //            prevNode = item;
            //        }

            //        tblFM_Version objCarpetaPadre = _context.tblFM_Version.Where(version => version.archivoID == padreID && version.activo).FirstOrDefault();
            //        contenedor.id = objCarpetaPadre.archivoID;
            //        contenedor.data = new List<DirectorioDTO>();
            //        contenedor.año = objCarpetaPadre.archivo.año;
            //        contenedor.divisionID = objCarpetaPadre.archivo.divisionID;
            //        contenedor.ccID = objCarpetaPadre.archivo.ccID;
            //        contenedor.parent = padreID.ToString();
            //        contenedor.data = rootNodes;
            //        return contenedor;
            //    }
            //    catch (Exception e)
            //    {
            //        LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "ObtenerEstructuraDirectoriosChildsHierarchy", e, AccionEnum.CONSULTA, 0, null);
            //        return new DirectorioDTO();
            //    }
            //}
            #endregion

            #region VERSION ANTERIOR
            var contenedor = new DirectorioDTO();
            contenedor.data = new List<DirectorioDTO>();
            var parentStack = new Stack<DirectorioDTO>();
            var parent = default(DirectorioDTO);
            var prevNode = default(DirectorioDTO);
            var rootNodes = new List<DirectorioDTO>();
            var usuarioID = vSesiones.sesionUsuarioDTO.id;
            var puedeCrearSubdivision = PuedeCrearSubdivision(usuarioID);
            var puedeCargarMultiple = PuedeCargarMultiple(usuarioID);
            using (var _ctx = new MainContext(vSesiones.sesionEmpresaActual))
            {
                try
                {
                    _ctx.Configuration.AutoDetectChangesEnabled = false;

                    List<DirectorioDTO> folders = getLstPermisoUsuarioChildsHierarchy(usuarioID, padreID);
                    if (obraCerrada != (int)EstatusObraEnum.todo)
                        folders = folders.Where(w => w.obraCerrada == obraCerrada).ToList();

                    List<long> lstArchivosID = folders.Select(s => s.id).ToList();
                    List<tblFM_Archivo> lstDocumentos = _ctx.tblFM_Archivo.Where(w => lstArchivosID.Contains(w.id)).ToList();
                    List<tblFM_ArchivotblFM_TipoArchivo> lstTipoArchivos = _ctx.Select<tblFM_ArchivotblFM_TipoArchivo>(new DapperDTO
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = @"SELECT * FROM tblFM_ArchivotblFM_TipoArchivo"
                    }).ToList();

                    var count = folders.Count;
                    for (int i = 0; i < count; i++)
                    {
                        var item = folders[i];
                        string nombreArchivo = item.value;
                        item.value = nombreArchivo.Replace("22-", string.Empty);
                        item.index = i;
                        item.date = ObtenerCadenaFechaArchivo(item);
                        item.data = new List<DirectorioDTO>();
                        item.permisos = ObtenerPermisosArchivoHierarchy(item);
                        item.listaTiposArchivosID = ObtenerListaTiposArchivosIds(item.id, lstTipoArchivos);
                        item.tipoCarpeta = ((TipoCarpetaEnum)int.Parse(item.tipoCarpeta)).GetDescription();
                        if (puedeCrearSubdivision && (item.tipoCarpeta.Equals(TipoCarpetaEnum.Division.GetDescription()) || item.tipoCarpeta.Equals(TipoCarpetaEnum.Subdivision.GetDescription())))
                        {
                            item.permisos.puedeCrearSubdivision = true;
                        }
                        if (parent == null || item.pId == 0)
                        {
                            rootNodes.Add(item);

                            parent = item;
                        }
                        else if (item.pId == parent.id)
                        {
                            if (parent.data == null)
                                parent.data = new List<DirectorioDTO>();

                            parent.data.Add(item);
                        }
                        else if (item.pId == prevNode.id)
                        {
                            parentStack.Push(parent);

                            parent = prevNode;

                            if (parent.data == null)
                                parent.data = new List<DirectorioDTO>();

                            parent.data.Add(item);
                        }
                        else
                        {
                            var parentFound = false;

                            while (parentStack.Count > 0 && parentFound == false)
                            {
                                parent = parentStack.Pop();

                                if (item.pId != 0 && item.pId == parent.id)
                                {
                                    parent.data.Add(item);
                                    parentFound = true;
                                }
                            }

                            if (parentFound == false)
                            {
                                rootNodes.Add(item);

                                parent = item;
                            }
                        }

                        prevNode = item;
                    }

                    var carpetaPadre = _context.tblFM_Version.FirstOrDefault(version => version.archivoID == padreID && version.activo);

                    contenedor.id = carpetaPadre.archivoID;
                    contenedor.data = new List<DirectorioDTO>();
                    contenedor.año = carpetaPadre.archivo.año;
                    contenedor.divisionID = carpetaPadre.archivo.divisionID;
                    contenedor.ccID = carpetaPadre.archivo.ccID;
                    contenedor.parent = padreID.ToString();
                    contenedor.data = rootNodes;
                    return contenedor;
                }
                catch (Exception e)
                {
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "ObtenerEstructuraDirectoriosChildsHierarchy", e, AccionEnum.CONSULTA, 0, null);
                    return new DirectorioDTO();
                }
            }
            #endregion
        }

        /// <summary>
        /// Indica si el usuario logueado puede o no crear subdivisiones y obras dentro de ellas.
        /// </summary>
        /// <param name="usuarioID"></param>
        /// <returns></returns>
        private bool PuedeCrearSubdivision(int usuarioID)
        {
            if (noEsAdmin == false)
            {
                return true;
            }

            return _context.tblFM_UsuariosPerfil.Any(x => x.perfilID == (int)TipoPermisoEnum.CrearSubdivisionYObra && x.usuarioID == usuarioID);
        }
        /// <summary>
        /// Indica si el usuario logueado puede o no crear subdivisiones y obras dentro de ellas.
        /// </summary>
        /// <param name="usuarioID"></param>
        /// <returns></returns>
        private bool PuedeCrearSubdivisionDeprecado(int usuarioID)
        {
            if (noEsAdmin == false)
            {
                return true;
            }

            return _context.tblFM_PermisoEspecial.Any(x => x.tipoPermiso == TipoPermisoEnum.CrearSubdivisionYObra && x.usuarioID == usuarioID);
        }
        private bool PuedeCargarMultiple(int usuarioID)
        {
            if (noEsAdmin == false)
            {
                return true;
            }

            return new UsuarioDAO().getViewAction(vSesiones.sesionCurrentView, "cargaMultiple");
        }

        public Dictionary<string, object> SubirArchivo(List<HttpPostedFileBase> lstArchivos, long padreID, int tipoArchivoID)
        {
            try
            {
                #region VALIDACIONES
                if (lstArchivos == null) { throw new Exception("Es necesario cargar al menos un archivo."); }
                if (padreID <= 0) { throw new Exception(string.Format("Ocurrió un error al cargar {0} archivos", lstArchivos.Count() == 1 ? "el" : "los")); }
                if (tipoArchivoID <= 0) { throw new Exception("Es necesario indicar el tipo de archivo."); }

                tblFM_Archivo objArchivo = _context.tblFM_Archivo.Where(w => w.id == padreID).FirstOrDefault();
                if (objArchivo == null)
                    throw new Exception("Ocurrió un error al obtener la información de la carpeta padre.");
                else
                    if (!VerificarPermisoSubirArchivos(objArchivo.ccID, objArchivo.divisionID)) { throw new Exception("No cuenta con los permisos para subir archivos."); }

                tblFM_Version objCarpetaPadre = _context.tblFM_Version.Where(w => w.archivoID == padreID && w.activo).FirstOrDefault();
                if (objCarpetaPadre == null)
                    throw new Exception("Ocurrió une error al obtener la carpeta padre.");
                else
                    if (!VerificarCarpetaContrato(objCarpetaPadre, padreID)) { throw new Exception("No cuenta con los permisos para manejar contratos."); }
                #endregion

                #region SE REGISTRA ARCHIVOS EN BASE DE DATOS
                // INIT 
                DirectorioDTO objNuevoArchivoDTO = new DirectorioDTO();
                List<tblFM_Version> lstVersiones = new List<tblFM_Version>();
                List<tblFM_Archivo> lstArchivosEF = new List<tblFM_Archivo>();
                tblFM_Archivo objCE_Archivo = new tblFM_Archivo();
                tblFM_Version objCE_Version = new tblFM_Version();
                tblFM_ArchivotblFM_TipoArchivo objCE_TipoArchivo = new tblFM_ArchivotblFM_TipoArchivo();
                int numConsecutivoArchivo = ObtenerConsecutivoArchivo(0, tipoArchivoID);
                using (var dbContextTransaction = _context.Database.BeginTransaction())
                {
                    try
                    {
                        foreach (var itemArchivo in lstArchivos)
                        {
                            // ARCHIVO
                            objCE_Archivo = new tblFM_Archivo();
                            objCE_Archivo.padreID = padreID;
                            objCE_Archivo.nivel = objCarpetaPadre.archivo.nivel + 1;
                            objCE_Archivo.año = objCarpetaPadre.archivo.año;
                            objCE_Archivo.divisionID = objCarpetaPadre.archivo.divisionID;
                            objCE_Archivo.subdivisionID = objCarpetaPadre.archivo.subdivisionID;
                            objCE_Archivo.ccID = objCarpetaPadre.archivo.ccID;
                            objCE_Archivo.orden = ObtenerOrdenArchivo(padreID);
                            objCE_Archivo.perteneceSeguridad = objCarpetaPadre.archivo.perteneceSeguridad;
                            objCE_Archivo.tipoCarpeta = TipoCarpetaEnum.NA;
                            _context.tblFM_Archivo.Add(objCE_Archivo);
                            _context.SaveChanges();
                            lstArchivosEF.Add(objCE_Archivo);
                            // END: ARCHIVO

                            // VERSION
                            objCE_Version = new tblFM_Version();
                            objCE_Version.archivoID = objCE_Archivo.id;
                            objCE_Version.activo = true;
                            objCE_Version.version = 1;
                            objCE_Version.usuarioCreadorID = vSesiones.sesionUsuarioDTO.id;
                            objCE_Version.numeroArchivo = numConsecutivoArchivo;
                            objCE_Version.ruta = objCarpetaPadre.ruta == null ? Path.Combine(objCarpetaPadre.nombre) : Path.Combine(objCarpetaPadre.ruta, objCarpetaPadre.nombre);
                            objCE_Version.fechaCreacion = DateTime.Now;

                            bool esDivisionIndustrial = objCE_Archivo.divisionID == DIVISION_INDUSTRIAL_ID;
                            objCE_Version.nombre = (ObtenerNombreArchivo(tipoArchivoID, itemArchivo.FileName, objCE_Version.numeroArchivo, objCarpetaPadre, esDivisionIndustrial)).Replace("22-", string.Empty);
                            if (!VerificarNombreCarpetaDisponible(objCE_Version.nombre, padreID))
                                throw new Exception("El nombre del archivo ya se encuentra en uso. Favor de verificarlo en el listado de archivos para corroborar.");

                            _context.tblFM_Version.Add(objCE_Version);
                            _context.SaveChanges();
                            lstVersiones.Add(objCE_Version);
                            // END: VERSION

                            // TIPO ARCHIVO
                            objCE_TipoArchivo = new tblFM_ArchivotblFM_TipoArchivo();
                            objCE_TipoArchivo.archivoID = objCE_Archivo.id;
                            objCE_TipoArchivo.tipoArchivoID = tipoArchivoID;
                            _context.tblFM_ArchivotblFM_TipoArchivo.Add(objCE_TipoArchivo);
                            _context.SaveChanges();
                            // END: TIPO ARCHIVO
                        }
                        AsignarPermisosUsuarios(lstArchivosEF.Select(s => s.id).ToList(), padreID);

                        #region SE SUBE ARCHIVOS AL SERVIDOR
                        for (int i = 0; i < lstVersiones.Count(); i++)
                        {
                            string numVersion = string.Format("{0:00}-", lstVersiones[i].version);
                            string ruta = string.Format(@"{0}\{1}\{2}", RUTA_BASE, lstVersiones[i].ruta, (numVersion + lstVersiones[i].nombre));
                            var RUTA_FISICA = ruta;
                            if (RUTA_FISICA.Length >= 500)
                                throw new Exception("El nombre del archivo es demasiado largo, por favor renombre el archivo con un nombre más breve.");
                            else if (!GlobalUtils.SaveCompressedFile(lstArchivos[i], RUTA_FISICA))
                                throw new Exception("Ocurrió un error al intentar guardar el archivo físico en el servidor.");
                            else
                            {
                                tblFM_Archivo objArchivoEF = lstArchivosEF.Where(w => w.id == lstVersiones[i].archivoID).FirstOrDefault();
                                if (objArchivoEF == null)
                                    throw new Exception("Ocurrió un error al obtener información del archivo a guardar.");

                                objNuevoArchivoDTO = new DirectorioDTO
                                {
                                    id = lstVersiones[i].archivoID,
                                    value = lstVersiones[i].nombre,
                                    type = Path.GetExtension(lstVersiones[i].nombre).Substring(1),
                                    tipoArchivo = ObtenerTipoArchivo(lstVersiones[i].archivoID),
                                    date = lstVersiones[i].fechaCreacion.ToString(FORMATO_FECHA_HORA),
                                    pId = padreID,
                                    divisionID = objArchivoEF.divisionID,
                                    subdivisionID = objArchivoEF.subdivisionID,
                                    ccID = objArchivoEF.ccID,
                                    listaTiposArchivosID = new List<int> { tipoArchivoID },
                                    permisos = new PermisosDTO()
                                    {
                                        puedeSubir = true,
                                        puedeEliminar = true,
                                        puedeDescargarArchivo = true,
                                        puedeDescargarCarpeta = true,
                                        puedeActualizar = true,
                                        puedeCrear = true,
                                        estatusVista = 2
                                    }
                                };
                            }

                            #region SE VERIFICA SI EXISTE EL ARCHIVO EN EL SERVIDOR, QUE FUE CREADO ANTERIORMENTE
                            string rutaArchivo = string.Format(@"{0}\{1}\{2}.zip", RUTA_BASE, lstVersiones[i].ruta, (numVersion + Path.GetFileNameWithoutExtension(lstVersiones[i].nombre)));
                            Dictionary<string, object> resVerificarExisteArchivo = VerificarExisteArchivo(rutaArchivo);
                            if (!(bool)resVerificarExisteArchivo[SUCCESS])
                                throw new Exception((string)resVerificarExisteArchivo[MESSAGE]);
                            #endregion
                        }
                        #endregion

                        dbContextTransaction.Commit();
                    }
                    catch (Exception e)
                    {
                        dbContextTransaction.Rollback();
                        var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                        LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.AGREGAR, 0, new { lstArchivos = lstArchivos, padreID = padreID, tipoArchivoID = tipoArchivoID });
                        throw new Exception(e.Message);
                    }
                }
                #endregion

                #region ACTUALIZAR H ARCHIVO
                foreach (var itemArchivoID in lstArchivosEF.Select(s => s.id).ToList())
                {
                    SetIndicarHArchivosNuevos(padreID, itemArchivoID, vSesiones.sesionUsuarioDTO.id);
                }
                #endregion

                resultado.Clear();
                resultado.Add(SUCCESS, true);
                resultado.Add("archivo", objNuevoArchivoDTO);
                resultado.Add(MESSAGE, "Se ha registrado con éxito");
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.AGREGAR, 0, new { lstArchivos = lstArchivos, padreID = padreID, tipoArchivoID = tipoArchivoID });
                resultado.Clear();
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }
            return resultado;
        }

        private void AsignarPermisosUsuarioLogueado(List<long> lstArchivosID)
        {
            try
            {
                List<tblFM_Permisos_Usuario> lstPermisosUsuario = new List<tblFM_Permisos_Usuario>();
                tblFM_Permisos_Usuario objPermisoUsuario = new tblFM_Permisos_Usuario();
                List<tblFM_Permiso> lstPermisos = new List<tblFM_Permiso>();
                tblFM_Permiso objPermiso = new tblFM_Permiso();
                foreach (var archivoID in lstArchivosID)
                {
                    objPermisoUsuario = new tblFM_Permisos_Usuario();
                    objPermisoUsuario.usuarioID = vSesiones.sesionUsuarioDTO.id;
                    objPermisoUsuario.archivoID = archivoID;
                    objPermisoUsuario.tipoPermiso = TipoPermisoEnum.GeneralObra;
                    objPermisoUsuario.puedeSubir = true;
                    objPermisoUsuario.puedeEliminar = true;
                    objPermisoUsuario.puedeDescargarArchivo = true;
                    objPermisoUsuario.puedeDescargarCarpeta = true;
                    objPermisoUsuario.puedeActualizar = true;
                    objPermisoUsuario.puedeCrear = true;
                    objPermisoUsuario.estatusVista = 2;
                    objPermisoUsuario.FK_UsuarioCreacion = vSesiones.sesionUsuarioDTO.id;
                    objPermisoUsuario.fechaCreacion = DateTime.Now;
                    objPermisoUsuario.registroActivo = true;
                    lstPermisosUsuario.Add(objPermisoUsuario);

                    objPermiso = new tblFM_Permiso();
                    objPermiso.usuarioID = vSesiones.sesionUsuarioDTO.id;
                    objPermiso.archivoID = archivoID;
                    objPermiso.puedeSubir = true;
                    objPermiso.puedeEliminar = true;
                    objPermiso.puedeDescargarArchivo = true;
                    objPermiso.puedeDescargarCarpeta = true;
                    objPermiso.puedeActualizar = true;
                    objPermiso.puedeCrear = true;
                    objPermiso.estatusVista = 2;
                    objPermiso.FK_UsuarioCreacion = vSesiones.sesionUsuarioDTO.id;
                    objPermiso.fechaCreacion = DateTime.Now;
                    objPermiso.registroActivo = true;
                    lstPermisos.Add(objPermiso);
                }
                _context.tblFM_Permiso.AddRange(lstPermisos);
                _context.tblFM_Permisos_Usuario.AddRange(lstPermisosUsuario);
                _context.SaveChanges();
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.AGREGAR, 0, new { lstArchivosID = lstArchivosID });
            }
        }

        private void AsignarPermisosUsuarios(List<long> lstArchivosID, long padreID)
        {
            try
            {
                List<int> lstUsuariosPermisoPadre = _context.Select<int>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = @"SELECT DISTINCT usuarioID FROM tblFM_Permisos_Usuario WHERE archivoID = @padreID AND registroActivo = @registroActivo",
                    parametros = new { padreID = padreID, registroActivo = true }
                }).ToList();

                List<tblFM_Permisos_Usuario> lstPermisosUsuario = new List<tblFM_Permisos_Usuario>();
                tblFM_Permisos_Usuario objPermisoUsuario = new tblFM_Permisos_Usuario();
                List<tblFM_Permiso> lstPermisos = new List<tblFM_Permiso>();
                tblFM_Permiso objPermiso = new tblFM_Permiso();
                foreach (var usuarioID in lstUsuariosPermisoPadre)
                {
                    foreach (var archivoID in lstArchivosID)
                    {
                        objPermisoUsuario = new tblFM_Permisos_Usuario();
                        objPermisoUsuario.usuarioID = usuarioID;
                        objPermisoUsuario.archivoID = archivoID;
                        objPermisoUsuario.tipoPermiso = TipoPermisoEnum.GeneralObra;
                        objPermisoUsuario.puedeSubir = true;
                        objPermisoUsuario.puedeEliminar = true;
                        objPermisoUsuario.puedeDescargarArchivo = true;
                        objPermisoUsuario.puedeDescargarCarpeta = true;
                        objPermisoUsuario.puedeActualizar = true;
                        objPermisoUsuario.puedeCrear = true;
                        objPermisoUsuario.estatusVista = 2;
                        objPermisoUsuario.FK_UsuarioCreacion = vSesiones.sesionUsuarioDTO.id;
                        objPermisoUsuario.fechaCreacion = DateTime.Now;
                        objPermisoUsuario.registroActivo = true;
                        lstPermisosUsuario.Add(objPermisoUsuario);

                        objPermiso = new tblFM_Permiso();
                        objPermiso.usuarioID = usuarioID;
                        objPermiso.archivoID = archivoID;
                        objPermiso.puedeSubir = true;
                        objPermiso.puedeEliminar = true;
                        objPermiso.puedeDescargarArchivo = true;
                        objPermiso.puedeDescargarCarpeta = true;
                        objPermiso.puedeActualizar = true;
                        objPermiso.puedeCrear = true;
                        objPermiso.estatusVista = 2;
                        objPermiso.FK_UsuarioCreacion = vSesiones.sesionUsuarioDTO.id;
                        objPermiso.fechaCreacion = DateTime.Now;
                        objPermiso.registroActivo = true;
                        lstPermisos.Add(objPermiso);
                    }
                }
                _context.tblFM_Permiso.AddRange(lstPermisos);
                _context.tblFM_Permisos_Usuario.AddRange(lstPermisosUsuario);
                _context.SaveChanges();
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.AGREGAR, 0, new { lstArchivosID = lstArchivosID });
            }
        }

        private bool VerificarPermisoSubirArchivos(int ccID, int divisionID)
        {
            bool puedeSubirArchivos = true;
            try
            {
                tblFM_Permisos_Usuario objPermisoUsuario =
                    _context.tblFM_Permisos_Usuario.Where(w => w.usuarioID == vSesiones.sesionUsuarioDTO.id && w.puedeSubir && (w.archivo.ccID == ccID || w.archivo.divisionID == divisionID)).FirstOrDefault();
                if (objPermisoUsuario == null)
                    puedeSubirArchivos = false;
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                puedeSubirArchivos = false;
            }
            return puedeSubirArchivos;
        }

        private void RegistrarPermisosAdicionales(long padreID, List<long> lstArchivosID)
        {
            try
            {
                #region ASIGNAR PERMISOS ADICIONALES
                List<int> lstUsuariosID = _context.Select<int>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = @"SELECT usuarioID FROM tblFM_Permisos_Usuario WHERE archivoID = @padreID AND registroActivo = @registroActivo",
                    parametros = new { padreID = padreID, registroActivo = true }
                }).ToList();

                // INIT DATATABLE
                DataTable dtPermisos = new DataTable();
                dtPermisos.Columns.Add("id", System.Type.GetType("System.Int32"));
                dtPermisos.Columns.Add("usuarioID", System.Type.GetType("System.Int32"));
                dtPermisos.Columns.Add("archivoID", System.Type.GetType("System.Int32"));
                dtPermisos.Columns.Add("puedeSubir", System.Type.GetType("System.Int32"));
                dtPermisos.Columns.Add("puedeEliminar", System.Type.GetType("System.Int32"));
                dtPermisos.Columns.Add("puedeDescargarArchivo", System.Type.GetType("System.Int32"));
                dtPermisos.Columns.Add("puedeDescargarCarpeta", System.Type.GetType("System.Int32"));
                dtPermisos.Columns.Add("puedeActualizar", System.Type.GetType("System.Int32"));
                dtPermisos.Columns.Add("puedeCrear", System.Type.GetType("System.Int32"));
                dtPermisos.Columns.Add("estatusVista", System.Type.GetType("System.Int32"));
                dtPermisos.Columns.Add("FK_UsuarioCreacion", System.Type.GetType("System.Int32"));
                dtPermisos.Columns.Add("FK_UsuarioModificacion", System.Type.GetType("System.Int32"));
                dtPermisos.Columns.Add("fechaCreacion", System.Type.GetType("System.DateTime"));
                dtPermisos.Columns.Add("fechaModificacion", System.Type.GetType("System.DateTime"));
                dtPermisos.Columns.Add("registroActivo", System.Type.GetType("System.Boolean"));

                DataTable dtPermisosUsuario = new DataTable();
                dtPermisosUsuario.Columns.Add("id", System.Type.GetType("System.Int32"));
                dtPermisosUsuario.Columns.Add("usuarioID", System.Type.GetType("System.Int32"));
                dtPermisosUsuario.Columns.Add("archivoID", System.Type.GetType("System.Int32"));
                dtPermisosUsuario.Columns.Add("tipoPermiso", System.Type.GetType("System.Int32"));
                dtPermisosUsuario.Columns.Add("puedeSubir", System.Type.GetType("System.Int32"));
                dtPermisosUsuario.Columns.Add("puedeEliminar", System.Type.GetType("System.Int32"));
                dtPermisosUsuario.Columns.Add("puedeDescargarArchivo", System.Type.GetType("System.Int32"));
                dtPermisosUsuario.Columns.Add("puedeDescargarCarpeta", System.Type.GetType("System.Int32"));
                dtPermisosUsuario.Columns.Add("puedeActualizar", System.Type.GetType("System.Int32"));
                dtPermisosUsuario.Columns.Add("puedeCrear", System.Type.GetType("System.Int32"));
                dtPermisosUsuario.Columns.Add("estatusVista", System.Type.GetType("System.Int32"));
                dtPermisosUsuario.Columns.Add("FK_UsuarioCreacion", System.Type.GetType("System.Int32"));
                dtPermisosUsuario.Columns.Add("FK_UsuarioModificacion", System.Type.GetType("System.Int32"));
                dtPermisosUsuario.Columns.Add("fechaCreacion", System.Type.GetType("System.DateTime"));
                dtPermisosUsuario.Columns.Add("fechaModificacion", System.Type.GetType("System.DateTime"));
                dtPermisosUsuario.Columns.Add("registroActivo", System.Type.GetType("System.Boolean"));

                foreach (var usuarioID in lstUsuariosID)
                {
                    foreach (var archivoID in lstArchivosID)
                    {
                        DataRow rowPermisos = dtPermisos.NewRow();
                        rowPermisos["id"] = 0;
                        rowPermisos["usuarioID"] = usuarioID;
                        rowPermisos["archivoID"] = archivoID;
                        rowPermisos["puedeSubir"] = true;
                        rowPermisos["puedeEliminar"] = true;
                        rowPermisos["puedeDescargarArchivo"] = true;
                        rowPermisos["puedeDescargarCarpeta"] = true;
                        rowPermisos["puedeActualizar"] = true;
                        rowPermisos["puedeCrear"] = true;
                        rowPermisos["estatusVista"] = 2;
                        rowPermisos["FK_UsuarioCreacion"] = vSesiones.sesionUsuarioDTO.id;
                        rowPermisos["FK_UsuarioModificacion"] = 0;
                        rowPermisos["fechaCreacion"] = (object)DBNull.Value;
                        rowPermisos["fechaModificacion"] = (object)DBNull.Value;
                        rowPermisos["registroActivo"] = true;
                        dtPermisos.Rows.Add(rowPermisos);

                        DataRow rowPermisosUsuario = dtPermisosUsuario.NewRow();
                        rowPermisosUsuario["id"] = 0;
                        rowPermisosUsuario["usuarioID"] = usuarioID;
                        rowPermisosUsuario["archivoID"] = archivoID;
                        rowPermisosUsuario["tipoPermiso"] = TipoPermisoEnum.GeneralObra;
                        rowPermisosUsuario["puedeSubir"] = true;
                        rowPermisosUsuario["puedeEliminar"] = true;
                        rowPermisosUsuario["puedeDescargarArchivo"] = true;
                        rowPermisosUsuario["puedeDescargarCarpeta"] = true;
                        rowPermisosUsuario["puedeActualizar"] = true;
                        rowPermisosUsuario["puedeCrear"] = true;
                        rowPermisosUsuario["estatusVista"] = 2;
                        rowPermisosUsuario["FK_UsuarioCreacion"] = vSesiones.sesionUsuarioDTO.id;
                        rowPermisosUsuario["FK_UsuarioModificacion"] = 0;
                        rowPermisosUsuario["fechaCreacion"] = (object)DBNull.Value;
                        rowPermisosUsuario["fechaModificacion"] = (object)DBNull.Value;
                        rowPermisosUsuario["registroActivo"] = true;
                        dtPermisosUsuario.Rows.Add(rowPermisosUsuario);
                    }
                }

                string stringCon = string.Empty;
                switch (vSesiones.sesionEmpresaActual)
                {
                    case (int)EmpresaEnum.Construplan:
                        stringCon = System.Configuration.ConfigurationManager.ConnectionStrings["MainContext"].ConnectionString;
                        break;
                    case (int)EmpresaEnum.Arrendadora:
                        stringCon = System.Configuration.ConfigurationManager.ConnectionStrings["MainContextArrendadora"].ConnectionString;
                        break;
                    case (int)EmpresaEnum.Colombia:
                        stringCon = System.Configuration.ConfigurationManager.ConnectionStrings["MainContextColombia"].ConnectionString;
                        break;
                    case (int)EmpresaEnum.Peru:
                        stringCon = System.Configuration.ConfigurationManager.ConnectionStrings["MainContextPeru"].ConnectionString;
                        break;
                }

                using (SqlConnection cn = new SqlConnection(stringCon))
                {
                    cn.Open();
                    using (SqlBulkCopy bulkCopy = new SqlBulkCopy(cn))
                    {
                        bulkCopy.DestinationTableName = "dbo.tblFM_Permiso";
                        bulkCopy.WriteToServer(dtPermisos);
                    }
                    cn.Close();

                    cn.Open();
                    using (SqlBulkCopy bulkCopy = new SqlBulkCopy(cn))
                    {
                        bulkCopy.DestinationTableName = "dbo.tblFM_Permisos_Usuario";
                        bulkCopy.WriteToServer(dtPermisosUsuario);
                    }
                    cn.Close();
                }
                #endregion
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.AGREGAR, padreID, new { padreID = padreID });
            }
        }

        private bool EsCarpetaContrato(tblFM_Version carpetaPadre)
        {
            if (carpetaPadre.archivo.nivel >= 3)
            {
                var versionTemp = carpetaPadre;
                while (versionTemp.archivo.nivel >= 3)
                {
                    var tipoCarpeta = versionTemp.archivo.tipoCarpeta;
                    if (tipoCarpeta == TipoCarpetaEnum.Subcontratos || tipoCarpeta == TipoCarpetaEnum.SubcontratosIndustrial)
                    {
                        return true;
                    }
                    else
                    {
                        versionTemp = _context.tblFM_Version.First(x => x.archivoID == versionTemp.archivo.padreID);
                    }
                }
                return false;
            }
            else
            {
                return false;
            }
        }

        public Dictionary<string, object> SubirVariosArchivos(List<ArchivoPorSubirDTO> archivosPorSubir, long padreID)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    var carpetaPadre = _context.tblFM_Version.FirstOrDefault(version => version.archivoID.Equals(padreID) && version.activo);

                    // Si es una carpeta de construcción o industrial se hace verificación especial
                    // para ver si es una carpeta de contrato.
                    if ((carpetaPadre.archivo.divisionID == DIVISION_CONSTRUCCION_ID || carpetaPadre.archivo.divisionID == DIVISION_INDUSTRIAL_ID) && carpetaPadre.archivo.nivel >= 3)
                    {
                        // Verifica si el usuario está subiendo un archivo a una carpeta tipo subcontrato.
                        var esContrato = EsCarpetaContrato(carpetaPadre);

                        // Verifica si el usuario es Andrea Felix (Única con permiso de subir y eliminar contratos.)
                        var usuariosSubContratos = _context.tblFM_UsuariosPerfil.Any(x => x.usuarioID == vSesiones.sesionUsuarioDTO.id && x.perfilID == (int)TipoPermisoEnum.SubContrastos);
                        if (!usuariosSubContratos && esContrato)
                        {
                            dbContextTransaction.Rollback();
                            resultado.Add(SUCCESS, false);
                            resultado.Add(MESSAGE, "El usuario no cuenta con los permisos suficientes para manejar contratos.");
                            return resultado;
                        }
                    }

                    var listaArchivosPorCrear = new Dictionary<HttpPostedFileBase, string>();

                    int usuarioID = vSesiones.sesionUsuarioDTO.id;

                    // Verifica que el usuario tenga permiso de subir archivos en la carpeta padre.
                    if (noEsAdmin)
                    {
                        puedeCargarMultiple = PuedeCargarMultiple(usuarioID);

                        if (puedeCargarMultiple == false)
                        {
                            dbContextTransaction.Rollback();
                            resultado.Add(SUCCESS, false);
                            resultado.Add(MESSAGE, "El usuario no cuenta con los permisos suficientes para realizar esta acción.");
                            return resultado;
                        }
                    }

                    // Se actualiza la fecha de edicion de la carpeta padre.
                    carpetaPadre.fechaEdicion = DateTime.Now;

                    // Verifica si el archivo es de la división industrial, para que el tipo de archivo se considere libre.
                    bool esDivisionIndustrial = carpetaPadre.archivo.divisionID == DIVISION_INDUSTRIAL_ID;

                    foreach (var archivoPorSubir in archivosPorSubir)
                    {
                        /////////////////////// Se actualiza el archivo /////////////////////////////////////////
                        if (archivoPorSubir.versionArchivoID != 0)
                        {
                            var versionActual = _context.tblFM_Version.FirstOrDefault(version => version.archivoID == archivoPorSubir.versionArchivoID && version.activo);

                            var tipoArchivoVersionActual = _context.tblFM_ArchivotblFM_TipoArchivo.FirstOrDefault(x => x.archivoID == versionActual.archivoID);

                            // Si falla al guardar el archivo
                            if (tipoArchivoVersionActual.tipoArchivoID != archivoPorSubir.tipoArchivoID)
                            {
                                dbContextTransaction.Rollback();
                                resultado.Add(SUCCESS, false);
                                resultado.Add(MESSAGE, "Al momento de actualizar un archivo, este debe de ser del mismo tipo que el anterior.");
                                return resultado;
                            }

                            // Se desactiva a la versión actual.
                            versionActual.activo = false;

                            string nuevoNombreArchivo = String.Format("{0}{1}",
                                Path.GetFileNameWithoutExtension(versionActual.nombre),
                                Path.GetExtension(archivoPorSubir.archivo.FileName));

                            // Se crea la nueva versión del archivo.
                            var versionNueva = new tblFM_Version
                            {
                                archivoID = versionActual.archivoID,
                                ruta = versionActual.ruta,
                                nombre = nuevoNombreArchivo,
                                version = versionActual.version + 1,
                                usuarioCreadorID = usuarioID,
                                activo = true,
                                numeroArchivo = versionActual.numeroArchivo,
                                fechaCreacion = DateTime.Now
                            };
                            _context.tblFM_Version.Add(versionNueva);
                            _context.SaveChanges();

                            var numeroVersion = String.Format("{0:00}-", versionNueva.version);
                            var rutaFisicaNuevaVersion = Path.Combine(RUTA_BASE, versionNueva.ruta, (numeroVersion + versionNueva.nombre));

                            listaArchivosPorCrear.Add(archivoPorSubir.archivo, rutaFisicaNuevaVersion);
                        }

                        /////////////////////// Se crea un nuevo archivo /////////////////////////////////////////
                        else
                        {
                            var nuevoArchivo = new tblFM_Archivo
                            {
                                padreID = padreID,
                                nivel = carpetaPadre.archivo.nivel + 1,
                                año = carpetaPadre.archivo.año,
                                divisionID = carpetaPadre.archivo.divisionID,
                                subdivisionID = carpetaPadre.archivo.subdivisionID,
                                ccID = carpetaPadre.archivo.ccID,
                                orden = ObtenerOrdenArchivo(padreID),
                                perteneceSeguridad = carpetaPadre.archivo.perteneceSeguridad,
                                tipoCarpeta = TipoCarpetaEnum.NA
                            };
                            _context.tblFM_Archivo.Add(nuevoArchivo);
                            _context.SaveChanges();

                            AñadirTiposArchivoCarpeta(nuevoArchivo.id, new int[] { archivoPorSubir.tipoArchivoID });
                            _context.SaveChanges();

                            var nuevaVersion = new tblFM_Version
                            {
                                archivoID = nuevoArchivo.id,
                                activo = true,
                                version = 1,
                                usuarioCreadorID = usuarioID,
                                numeroArchivo = ObtenerConsecutivoArchivo(nuevoArchivo.id, archivoPorSubir.tipoArchivoID),
                                ruta = carpetaPadre.ruta == null ? Path.Combine(carpetaPadre.nombre) : Path.Combine(carpetaPadre.ruta, carpetaPadre.nombre),
                                fechaCreacion = DateTime.Now
                            };

                            nuevaVersion.nombre = ObtenerNombreArchivo(archivoPorSubir.tipoArchivoID, archivoPorSubir.archivo.FileName, nuevaVersion.numeroArchivo, carpetaPadre, esDivisionIndustrial);

                            // Se valida que no exista otro archivo con el mismo nombre en la misma carpeta (En caso de ser nombre libre)
                            bool existeNombre = _context.tblFM_Version.Any(x => x.archivo.padreID == padreID && x.nombre == nuevaVersion.nombre && x.activo);

                            if (existeNombre)
                            {
                                dbContextTransaction.Rollback();
                                resultado.Add(SUCCESS, false);
                                resultado.Add(MESSAGE, "Ya existe un archivo en la carpeta indicada con ese nombre.");
                                return resultado;
                            }

                            _context.tblFM_Version.Add(nuevaVersion);
                            _context.SaveChanges();

                            // Si es admin, no se le crea registro de permiso.
                            // No crear permiso
                            //if(noEsAdmin)
                            //{
                            //    // Crea el registro de permisos del archivo.
                            //    var nuevoPermiso = new tblFM_Permiso
                            //    {
                            //        usuarioID = usuarioID,
                            //        archivoID = nuevaVersion.archivoID,
                            //        puedeActualizar = true,
                            //        puedeEliminar = true,
                            //        puedeDescargarArchivo = true,
                            //        estatusVista = 2
                            //    };
                            //    _context.tblFM_Permiso.Add(nuevoPermiso);
                            //    _context.SaveChanges();
                            //}

                            // Se crea el registro del permiso y se actualiza el estatus de las vistas para los demás usuarios.
                            //CrearNuevosPermisosUsuariosSinActualizarEstatus(nuevoArchivo, padreID);

                            var numeroVersion = String.Format("{0:00}-", nuevaVersion.version);
                            var rutaFisica = Path.Combine(RUTA_BASE, nuevaVersion.ruta, (numeroVersion + nuevaVersion.nombre));

                            // Si falla al guardar el archivo
                            if (rutaFisica.Length >= 254)
                            {
                                dbContextTransaction.Rollback();
                                resultado.Add(SUCCESS, false);
                                resultado.Add(MESSAGE, "El nombre de uno de los archivos es demasiado largo para ser guardado en el servidor. Por favor, renombre el archivo con un nombre más corto.");
                                return resultado;
                            }

                            listaArchivosPorCrear.Add(archivoPorSubir.archivo, rutaFisica);
                        }
                    }

                    // Se actualiza el estatus de las carpetas padre.
                    var listaUsuariosID = ObtenerUsuariosIdsConPermisosGestor()
                        .Where(x => x != usuarioID)
                        .ToList();

                    foreach (var usuarioPermisoID in listaUsuariosID)
                    {
                        ActualizarEstatusVistasPadreNuevoArchivo(padreID, usuarioPermisoID);
                    }

                    // Se crean los archivos
                    foreach (var archivo in listaArchivosPorCrear)
                    {
                        if (GlobalUtils.SaveCompressedFile(archivo.Key, archivo.Value) == false)
                        {
                            dbContextTransaction.Rollback();
                            resultado.Add(SUCCESS, false);
                            resultado.Add(MESSAGE, "Ocurrió un error al estar guardando los archivos en el servidor.");
                            return resultado;
                        }
                    }

                    resultado.Add(SUCCESS, true);
                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "SubirVariosArchivos", e, AccionEnum.AGREGAR, padreID, null);
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, "Ocurrió un error interno al intentar guardar los archivos en el servidor.");
                }
            }

            return resultado;
        }

        public Dictionary<string, object> ActualizarArchivo(HttpPostedFileBase archivo, long archivoID)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    var versionActual = _context.tblFM_Version.FirstOrDefault(version => version.archivoID.Equals(archivoID) && version.activo);

                    // Verifica que el usuario tenga permiso de actualizar el archivo.
                    if (noEsAdmin)
                    {
                        //    var permisoActualizar = _context.tblFM_Permiso
                        //.FirstOrDefault(x =>
                        //    (x.archivoID == archivoID &&
                        //    x.usuarioID == vSesiones.sesionUsuarioDTO.id &&
                        //    x.puedeActualizar &&
                        //    x.estatusVista == 2));

                        var ccID = _context.tblFM_Archivo.FirstOrDefault(x => x.id == archivoID).ccID;
                        var permisoActualizar = _context.tblFM_Permisos_Usuario
                        .FirstOrDefault(x =>
                            x.usuarioID == vSesiones.sesionUsuarioDTO.id &&
                            x.puedeActualizar &&
                            x.archivo.ccID == ccID);

                        if (permisoActualizar == null)
                        {
                            dbContextTransaction.Rollback();
                            resultado.Add(SUCCESS, false);
                            resultado.Add(MESSAGE, "El usuario no cuenta con los permisos suficientes para realizar esta acción.");
                            return resultado;
                        }
                    }

                    // Se desactiva a la versión actual.
                    versionActual.activo = false;

                    string nuevoNombreArchivo = String.Format("{0}{1}",
                        Path.GetFileNameWithoutExtension(versionActual.nombre),
                        Path.GetExtension(archivo.FileName));

                    // Se crea la nueva versión del archivo.
                    var versionNueva = new tblFM_Version
                    {
                        archivoID = versionActual.archivoID,
                        ruta = versionActual.ruta,
                        nombre = nuevoNombreArchivo,
                        version = versionActual.version + 1,
                        usuarioCreadorID = vSesiones.sesionUsuarioDTO.id,
                        activo = true,
                        numeroArchivo = versionActual.numeroArchivo,
                        fechaCreacion = DateTime.Now
                    };
                    _context.tblFM_Version.Add(versionNueva);
                    _context.SaveChanges();

                    // Se actualiza la fecha edición de la carpeta padre.
                    var carpetaPadre = _context.tblFM_Version.FirstOrDefault(x => x.archivoID == versionActual.archivo.padreID && x.activo);
                    carpetaPadre.fechaEdicion = DateTime.Now;

                    // Si es una carpeta de construcción o industrial se hace verificación especial
                    // para ver si es una carpeta de contrato.
                    if ((carpetaPadre.archivo.divisionID == DIVISION_CONSTRUCCION_ID || carpetaPadre.archivo.divisionID == DIVISION_INDUSTRIAL_ID) && carpetaPadre.archivo.nivel >= 3)
                    {
                        // Verifica si el usuario está subiendo un archivo a una carpeta tipo subcontrato.
                        var esContrato = EsCarpetaContrato(carpetaPadre);

                        // Verifica si el usuario es Andrea Felix (Única con permiso de manejar contratos.)
                        var usuariosSubContratos = _context.tblFM_UsuariosPerfil.Any(x => x.usuarioID == vSesiones.sesionUsuarioDTO.id && x.perfilID == (int)TipoPermisoEnum.SubContrastos);
                        if (!usuariosSubContratos && esContrato)
                        {
                            dbContextTransaction.Rollback();
                            resultado.Add(SUCCESS, false);
                            resultado.Add(MESSAGE, "El usuario no cuenta con los permisos suficientes para manejar contratos.");
                            return resultado;
                        }
                    }

                    var numeroVersion = String.Format("{0:00}-", versionNueva.version);
                    var rutaFisicaNuevaVersion = Path.Combine(RUTA_BASE, versionNueva.ruta, (numeroVersion + versionNueva.nombre));

                    // Si la ruta final es muy larga
                    if (rutaFisicaNuevaVersion.Length >= 254)
                    {
                        dbContextTransaction.Rollback();
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "No se pudo guardar el archivo en el servidor. La ruta es muy larga.");
                    }
                    // Si falla al guardar el archivo
                    else if (!GlobalUtils.SaveCompressedFile(archivo, rutaFisicaNuevaVersion))
                    {
                        dbContextTransaction.Rollback();
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "No se pudo guardar el archivo en el servidor.");
                    }
                    // Si creó el archivo.
                    else
                    {
                        var archivoActualizadoDTO = new DirectorioDTO
                        {
                            value = versionNueva.nombre,
                            date = versionNueva.fechaCreacion.ToString(FORMATO_FECHA_HORA)
                        };

                        resultado.Add(SUCCESS, true);
                        resultado.Add("archivo", archivoActualizadoDTO);
                        dbContextTransaction.Commit();

                        // Una vez actualizado el archivo se envía el correo de notificación a los usuarios correspondientes.
                        try
                        {
                            //List<string> listaCorreosUsuarios = _context.tblFM_Permiso
                            //    .Where(x => (x.archivoID == versionActual.archivoID && x.usuarioID != vSesiones.sesionUsuarioDTO.id && x.estatusVista == 2))
                            //    .Select(x => x.usuario.correo)
                            //    .ToList();

                            //PrepararDatosCorreo(AccionEnum.ACTUALIZAR, versionActual, versionActual.archivo.padreID, listaCorreosUsuarios);
                        }
                        catch (Exception e)
                        {
                            LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "ActualizarArchivo", e, AccionEnum.ACTUALIZAR, archivoID, null);
                            resultado[SUCCESS] = false;
                            resultado.Add(MESSAGE, "El archivo fue actualizado correctamente pero ocurrió un error al enviar los correos de notificación.");
                        }
                    }

                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "ActualizarArchivo", e, AccionEnum.ACTUALIZAR, archivoID, null);
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, "Ocurrió un error interno al intentar actualizar el archivo en el servidor.");
                }

                return resultado;
            }
        }

        public Dictionary<string, object> EliminarArchivo(long archivoID)
        {
            #region VERION NUEVA
            //            using (var _ctx = new MainContext(vSesiones.sesionEmpresaActual))
            //            {
            //                using (var dbContextTransaction = _ctx.Database.BeginTransaction())
            //                {
            //                    try
            //                    {
            //                        tblFM_Version objVersion = _ctx.tblFM_Version.Where(w => w.archivoID == archivoID && w.activo).FirstOrDefault();
            //                        if (objVersion == null)
            //                            throw new Exception("No se encontró el archivo que se intentó eliminar.");

            //                        // Verifica que el usuario tenga permiso de eliminar el archivo.
            //                        if (noEsAdmin)
            //                        {
            //                            var ccID = _ctx.tblFM_Archivo.FirstOrDefault(x => x.id == archivoID).ccID;
            //                            var permisoEliminar = _ctx.tblFM_Permisos_Usuario.Where(w => w.usuarioID == vSesiones.sesionUsuarioDTO.id && w.puedeEliminar && w.archivo.ccID == ccID).FirstOrDefault();
            //                            if (permisoEliminar == null)
            //                                throw new Exception("El usuario no cuenta con los permisos suficientes para realizar esta acción.");
            //                        }

            //                        long padreID = objVersion.archivo.padreID;
            //                        bool esArchivo = !objVersion.archivo.esCarpeta;

            //                        // Se actualiza la fecha edición de la carpeta padre.
            //                        var carpetaPadre = _ctx.tblFM_Version.FirstOrDefault(x => x.archivoID == padreID && x.activo);
            //                        carpetaPadre.fechaEdicion = DateTime.Now;

            //                        // Si es una carpeta de construcción o industrial se hace verificación especial para ver si es una carpeta de contrato.
            //                        if ((carpetaPadre.archivo.divisionID == DIVISION_CONSTRUCCION_ID || carpetaPadre.archivo.divisionID == DIVISION_INDUSTRIAL_ID) && carpetaPadre.archivo.nivel >= 3)
            //                        {
            //                            // Verifica si el usuario está subiendo un archivo a una carpeta tipo subcontrato.
            //                            var esContrato = EsCarpetaContrato(carpetaPadre);

            //                            // Verifica si el usuario es Andrea Felix (Única con permiso de subir y eliminar contratos.)
            //                            var usuariosSubContratos = _ctx.tblFM_UsuariosPerfil.Any(x => x.usuarioID == vSesiones.sesionUsuarioDTO.id && x.perfilID == (int)TipoPermisoEnum.SubContrastos);
            //                            if (!usuariosSubContratos && esContrato)
            //                                throw new Exception("El usuario no cuenta con los permisos suficientes para manejar contratos.");
            //                        }

            //                        objVersion.archivo.padreID = 0;
            //                        objVersion.activo = false;
            //                        objVersion.fechaEdicion = DateTime.Now;
            //                        _ctx.SaveChanges();

            //                        var listaCorreosUsuarios = new List<string>();

            //                        if (objVersion.archivo.esCarpeta)
            //                        {
            //                            // Verifica si la carpeta no tiene archivos activos.
            //                            List<tblFM_Version> lstArchivosHijosActivos = _ctx.tblFM_Version.Where(w => w.archivo.padreID == objVersion.archivoID && w.activo).ToList();

            //                            if (lstArchivosHijosActivos != null && lstArchivosHijosActivos.Count > 0)
            //                                throw new Exception("Esta carpeta aún contiene archivos activos y por lo tanto no se puede eliminar.");

            //                            var rutaFisicaCarpeta = Path.Combine(RUTA_BASE, objVersion.ruta, objVersion.nombre);
            //                            rutaFisicaCarpeta = rutaFisicaCarpeta.Replace("\\ \\", "\\");
            //                            rutaFisicaCarpeta = rutaFisicaCarpeta.Replace("\\\\", "\\");
            //                            if (Directory.Exists(rutaFisicaCarpeta))
            //                            {
            //                                if (Directory.EnumerateFileSystemEntries(rutaFisicaCarpeta).Any())
            //                                    throw new Exception("La carpeta aún tiene archivos.");

            //                                EliminarPermisosUsuarios(archivoID, padreID, ref listaCorreosUsuarios);

            //                                Directory.Delete(rutaFisicaCarpeta, true);
            //                            }
            //                            else
            //                            {
            //                                try
            //                                {
            //                                    EliminarPermisosUsuarios(archivoID, padreID, ref listaCorreosUsuarios);
            //                                }
            //                                catch (Exception)
            //                                {
            //                                    throw new Exception("La carpeta no existe en el servidor.");
            //                                }
            //                            }
            //                        }
            //                        else
            //                        {
            //                            // Se obtiene la lista de archivos (diferentes versiones)
            //                            List<tblFM_Version> listaVersionesArchivos = _ctx.tblFM_Version.Where(w => w.archivoID == archivoID).ToList();
            //                            foreach (var archivoPorEliminar in listaVersionesArchivos)
            //                            {
            //#if DEBUG
            //                                RUTA_ELIMINADOS = @"C:\\Proyecto\\FM\\C\\ELIMINADOS";
            //#endif
            //                                string numeroVersion = string.Format("{0:00}-", archivoPorEliminar.version);
            //                                string nombreArchivoServidor = numeroVersion + archivoPorEliminar.nombre.Replace(Path.GetExtension(archivoPorEliminar.nombre), ".zip");
            //                                var rutaFisicaArchivo = Path.Combine(RUTA_BASE, archivoPorEliminar.ruta, nombreArchivoServidor);
            //                                try
            //                                {
            //                                    if (File.Exists(rutaFisicaArchivo))
            //                                        File.Move(rutaFisicaArchivo, Path.Combine(RUTA_ELIMINADOS, (DateTime.Now.ToString("[dd_MM_HH_mm_ss] ") + nombreArchivoServidor)));
            //                                }
            //                                catch (Exception)
            //                                {
            //                                    string rutaArchivo = string.Format("{0}{1}", RUTA_BASE, archivoPorEliminar.ruta.Trim());
            //                                    rutaFisicaArchivo = Path.Combine(RUTA_BASE, rutaArchivo, nombreArchivoServidor);
            //                                    if (File.Exists(rutaFisicaArchivo))
            //                                        File.Move(rutaFisicaArchivo, Path.Combine(RUTA_ELIMINADOS, (DateTime.Now.ToString("[dd_MM_HH_mm_ss] ") + nombreArchivoServidor)));
            //                                    else
            //                                        throw new Exception("El archivo no existe en el servidor.");
            //                                }
            //                            }
            //                        }

            //                        resultado.Add(SUCCESS, true);
            //                        dbContextTransaction.Commit();
            //                    }
            //                    catch (Exception e)
            //                    {
            //                        dbContextTransaction.Rollback();
            //                        var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
            //                        LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.ELIMINAR, archivoID, null);
            //                        resultado.Clear();
            //                        resultado.Add(SUCCESS, false);
            //                        resultado.Add(MESSAGE, e.Message);
            //                    }
            //                }
            //                return resultado;
            //            }
            #endregion

            if (vSesiones.sesionUsuarioDTO.id != USUARIO_OMAR_NUNEZ_ID)
            {
                #region VERSION RESPALDO
                using (var dbContextTransaction = _context.Database.BeginTransaction())
                {
                    try
                    {
                        tblFM_Version objVersion = _context.tblFM_Version.Where(w => w.archivoID == archivoID && w.activo).FirstOrDefault();
                        if (objVersion == null)
                            throw new Exception("No se encontró al archivo que se intentó eliminar.");

                        // Verifica que el usuario tenga permiso de eliminar el archivo.
                        if (noEsAdmin)
                        {
                            int ccID = _context.tblFM_Archivo.Where(w => w.id == archivoID).Select(s => s.ccID).FirstOrDefault();
                            tblFM_Permisos_Usuario objPermisoEliminar = _context.tblFM_Permisos_Usuario.Where(w => w.usuarioID == vSesiones.sesionUsuarioDTO.id && w.puedeEliminar && w.archivo.ccID == ccID).FirstOrDefault();
                            if (objPermisoEliminar == null)
                                throw new Exception("El usuario no cuenta con los permisos suficientes para realizar esta acción.");
                        }

                        long padreID = objVersion.archivo.padreID;
                        bool esArchivo = !objVersion.archivo.esCarpeta;

                        // Se actualiza la fecha edición de la carpeta padre.
                        tblFM_Version objCarpetaPadre = _context.tblFM_Version.Where(w => w.archivoID == padreID && w.activo).FirstOrDefault();
                        objCarpetaPadre.fechaEdicion = DateTime.Now;

                        // Si es una carpeta de construcción o industrial se hace verificación especial para ver si es una carpeta de contrato.
                        if ((objCarpetaPadre.archivo.divisionID == DIVISION_CONSTRUCCION_ID || objCarpetaPadre.archivo.divisionID == DIVISION_INDUSTRIAL_ID) && objCarpetaPadre.archivo.nivel >= 3)
                        {
                            // Verifica si el usuario está subiendo un archivo a una carpeta tipo subcontrato.
                            var esContrato = EsCarpetaContrato(objCarpetaPadre);

                            // Verifica si el usuario es Andrea Felix (Única con permiso de subir y eliminar contratos.)
                            bool usuariosSubContratos = _context.tblFM_UsuariosPerfil.Any(w => w.usuarioID == vSesiones.sesionUsuarioDTO.id && w.perfilID == (int)TipoPermisoEnum.SubContrastos);
                            if (!usuariosSubContratos && esContrato)
                                throw new Exception("El usuario no cuenta con los permisos suficientes para manejar contratos.");
                        }

                        objVersion.archivo.padreID = 0;
                        objVersion.activo = false;
                        objVersion.fechaEdicion = DateTime.Now;
                        _context.SaveChanges();

                        List<string> lstCorreosUsuarios = new List<string>();

                        if (objVersion.archivo.esCarpeta)
                        {
                            // Verifica si la carpeta no tiene archivos activos.
                            List<tblFM_Version> lstArchivosHijosActivos = _context.tblFM_Version.Where(w => w.archivo.padreID == objVersion.archivoID && w.activo).ToList();
                            if (lstArchivosHijosActivos != null && lstArchivosHijosActivos.Count > 0)
                                throw new Exception("Esta carpeta aún contiene archivos activos y por lo tanto no se puede eliminar.");

                            string ruta = string.Format(@"{0}\{1}\{2}", RUTA_BASE, objVersion.ruta, objVersion.nombre);
                            string rutaFisicaCarpeta = ruta; // Path.Combine(RUTA_BASE, objVersion.ruta, objVersion.nombre);
                            rutaFisicaCarpeta = rutaFisicaCarpeta.Replace("\\ \\", "\\");
                            rutaFisicaCarpeta = rutaFisicaCarpeta.Replace("\\\\", "\\");
                            if (Directory.Exists(rutaFisicaCarpeta))
                            {
                                if (Directory.EnumerateFileSystemEntries(rutaFisicaCarpeta).Any())
                                    throw new Exception("La carpeta aún tiene archivos.");

                                EliminarPermisosUsuarios(archivoID, padreID);

                                resultado.Clear();
                                resultado.Add(SUCCESS, true);
                                Directory.Delete(rutaFisicaCarpeta, true);
                            }
                            else
                            {
                                try
                                {
                                    EliminarPermisosUsuarios(archivoID, padreID);
                                    resultado.Clear();
                                    resultado.Add(SUCCESS, true);
                                }
                                catch (Exception)
                                {
                                    throw new Exception("La carpeta no existe en el servidor.");
                                }
                            }
                        }
                        else
                        {
                            // Se obtiene la lista de archivos (diferentes versiones)
                            List<tblFM_Version> lstVersionesArchivos = _context.tblFM_Version.Where(w => w.archivoID == archivoID).ToList();
                            foreach (var archivoPorEliminar in lstVersionesArchivos)
                            {
#if DEBUG
                                RUTA_ELIMINADOS = @"C:\\Proyecto\\FM\\C\\ELIMINADOS";
#endif
                                string numeroVersion = string.Format("{0:00}-", archivoPorEliminar.version);
                                string nombreArchivoServidor = numeroVersion + archivoPorEliminar.nombre.Replace(Path.GetExtension(archivoPorEliminar.nombre), ".zip");
                                string rutaFisicaArchivo = Path.Combine(RUTA_BASE, archivoPorEliminar.ruta, nombreArchivoServidor);
                                try
                                {
                                    if (File.Exists(rutaFisicaArchivo))
                                        File.Move(rutaFisicaArchivo, Path.Combine(RUTA_ELIMINADOS, (DateTime.Now.ToString("[dd_MM_HH_mm_ss] ") + nombreArchivoServidor)));
                                }
                                catch (Exception)
                                {
                                    string rutaArchivo = string.Format("{0}{1}", RUTA_BASE, archivoPorEliminar.ruta.Trim());
                                    rutaFisicaArchivo = Path.Combine(RUTA_BASE, rutaArchivo, nombreArchivoServidor);
                                    if (File.Exists(rutaFisicaArchivo))
                                        File.Move(rutaFisicaArchivo, Path.Combine(RUTA_ELIMINADOS, (DateTime.Now.ToString("[dd_MM_HH_mm_ss] ") + nombreArchivoServidor)));
                                    else
                                        throw new Exception("El archivo no existe en el servidor.");
                                }
                            }
                            resultado.Clear();
                            resultado.Add(SUCCESS, true);
                        }

                        dbContextTransaction.Commit();
                    }
                    catch (Exception e)
                    {
                        dbContextTransaction.Rollback();
                        var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                        LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.ELIMINAR, archivoID, null);
                        resultado.Clear();
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "Ocurrió un error interno al intentar eliminar el archivo en el servidor.");
                    }
                    return resultado;
                }
                #endregion
            }
            else
            {
                #region VERSION ANTERIOR
                using (var dbContextTransaction = _context.Database.BeginTransaction())
                {
                    try
                    {
                        #region VALIDACIONES
                        if (archivoID <= 0) { throw new Exception("Ocurrió un error al eliminar el registro seleccionado."); }
                        #endregion

                        tblFM_Version objVersion = _context.tblFM_Version.Where(w => w.archivoID == archivoID && w.activo).FirstOrDefault();
                        if (objVersion == null)
                            throw new Exception("Ocurrió un error al eliminar el registro seleccionado.");

                        long padreID = objVersion.archivo.padreID;

                        if (objVersion.archivo.esCarpeta)
                        {
                            // Se verifica si la carpeta a eliminar, tiene archivos activos.
                            if (_context.tblFM_Version.Any(w => w.archivo.padreID == objVersion.archivoID && w.activo))
                                throw new Exception("Esta carpeta aún contiene archivos activos y por lo tanto no se puede eliminar.");

                            string rutaFisicaCarpeta = Path.Combine(RUTA_BASE, objVersion.ruta, objVersion.nombre);
                            rutaFisicaCarpeta = rutaFisicaCarpeta.Replace("\\ \\", "\\");
                            rutaFisicaCarpeta = rutaFisicaCarpeta.Replace("\\\\", "\\");
                            if (Directory.Exists(rutaFisicaCarpeta))
                            {
                                if (Directory.EnumerateFileSystemEntries(rutaFisicaCarpeta).Any())
                                    throw new Exception("La carpeta aún tiene archivos.");

                                Dictionary<string, object> resEliminarPermisosUsuarios = EliminarPermisosUsuarios(archivoID, padreID);
                                if (!(bool)resEliminarPermisosUsuarios[SUCCESS])
                                    throw new Exception((string)resEliminarPermisosUsuarios[MESSAGE]);

                                Directory.Delete(rutaFisicaCarpeta, true);
                            }
                            else
                            {
                                try
                                {
                                    Dictionary<string, object> resEliminarPermisosUsuarios = EliminarPermisosUsuarios(archivoID, padreID);
                                    if (!(bool)resEliminarPermisosUsuarios[SUCCESS])
                                        throw new Exception((string)resEliminarPermisosUsuarios[MESSAGE]);

                                    GlobalUtils.sendEmail("FileManager", string.Format("Se trato de eliminar el registro con ID: {0}", archivoID), new List<string> { CORREO_OMAR_NUNEZ });
                                }
                                catch (Exception)
                                {
                                    throw new Exception("La carpeta no existe en el servidor.");
                                }
                            }
                        }
                        else
                        {
                            // Se obtiene la lista de archivos (diferentes versiones)
                            List<tblFM_Version> lstVersionesArchivos = _context.tblFM_Version.Where(w => w.archivoID == archivoID).ToList();
                            foreach (var item in lstVersionesArchivos)
                            {
#if DEBUG
                                RUTA_ELIMINADOS = @"C:\\Proyecto\\FM\\C\\ELIMINADOS";
#endif
                                string numeroVersion = string.Format("{0:00}-", item.version);
                                string nombreArchivoServidor = numeroVersion + item.nombre.Replace(Path.GetExtension(item.nombre), ".zip");
                                string rutaFisicaArchivo = Path.Combine(RUTA_BASE, item.ruta, nombreArchivoServidor);
                                try
                                {
                                    if (File.Exists(rutaFisicaArchivo))
                                        File.Move(rutaFisicaArchivo, Path.Combine(RUTA_ELIMINADOS, (DateTime.Now.ToString("[dd_MM_HH_mm_ss] ") + nombreArchivoServidor)));
                                }
                                catch (Exception)
                                {
                                    string rutaArchivo = string.Format("{0}{1}", RUTA_BASE, item.ruta.Trim());
                                    rutaFisicaArchivo = Path.Combine(RUTA_BASE, rutaArchivo, nombreArchivoServidor);
                                    if (File.Exists(rutaFisicaArchivo))
                                        File.Move(rutaFisicaArchivo, Path.Combine(RUTA_ELIMINADOS, (DateTime.Now.ToString("[dd_MM_HH_mm_ss] ") + nombreArchivoServidor)));
                                    else
                                        throw new Exception("El archivo no existe en el servidor.");
                                }
                            }
                        }

                        resultado.Clear();
                        resultado.Add(SUCCESS, true);
                        resultado.Add(MESSAGE, string.Format("Se ha eliminado con éxito {0}", true ? "la carpeta" : "el archivo."));
                        dbContextTransaction.Commit();
                    }
                    catch (Exception e)
                    {
                        dbContextTransaction.Rollback();
                        var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                        LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.ELIMINAR, archivoID, null);
                        resultado.Clear();
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, e.Message);
                    }
                    return resultado;
                }
                #endregion
            }
        }

        public Dictionary<string, object> CrearCarpeta(string nombreCarpeta, long padreID, List<int> listaTiposArchivosID, bool considerarse, string abreviacion)
        {
            try
            {
                #region VALIDACIONES
                if (string.IsNullOrEmpty(nombreCarpeta)) { throw new Exception("Es necesario indicar el nombre de la carpeta."); }
                if (padreID <= 0) { throw new Exception("Ocurrió un error al crear la carpeta nueva."); }
                if (listaTiposArchivosID.Count() <= 0) { throw new Exception("Ocurrió un error al crear la carpeta nueva."); }
                if (!VerificarPermisoCrearCarpeta(padreID)) { throw new Exception("No cuenta con los permisos para crear una carpeta."); }
                if (!VerificarNombreCarpeta(nombreCarpeta)) { throw new Exception("El nombre de la carpeta es inválido."); }
                if (!VerificarNombreCarpetaDisponible(nombreCarpeta, padreID)) { throw new Exception("El nombre de la carpeta ya existe"); }
                if (considerarse)
                    if (!VerificarAbreviacionValida(abreviacion)) { throw new Exception("La abreviación para la carpeta es inválida."); }

                tblFM_Version objCarpetaPadre = _context.tblFM_Version.Where(w => w.archivoID == padreID && w.activo).FirstOrDefault();
                if (objCarpetaPadre == null)
                    throw new Exception("Ocurrió une error al obtener la carpeta padre.");
                else
                    if (!VerificarCarpetaContrato(objCarpetaPadre, padreID)) { throw new Exception("No cuenta con los permisos para manejar contratos."); }
                #endregion

                tblFM_Archivo objCE_Archivo = new tblFM_Archivo();
                tblFM_Version objCE_Version = new tblFM_Version();
                tblFM_ArchivotblFM_TipoArchivo objCE_TipoArchivo = new tblFM_ArchivotblFM_TipoArchivo();
                List<tblFM_ArchivotblFM_TipoArchivo> lstCE_TipoArchivos = new List<tblFM_ArchivotblFM_TipoArchivo>();
                using (var dbContextTransaction = _context.Database.BeginTransaction())
                {
                    try
                    {
                        #region SE REGISTRA CARPETA EN BASE DE DATOS
                        // ARCHIVO
                        objCE_Archivo = new tblFM_Archivo();
                        objCE_Archivo.padreID = padreID;
                        objCE_Archivo.nivel = objCarpetaPadre.archivo.nivel + 1;
                        objCE_Archivo.año = objCarpetaPadre.archivo.año;
                        objCE_Archivo.divisionID = objCarpetaPadre.archivo.divisionID;
                        objCE_Archivo.subdivisionID = objCarpetaPadre.archivo.subdivisionID;
                        objCE_Archivo.ccID = objCarpetaPadre.archivo.ccID;
                        objCE_Archivo.esCarpeta = true;
                        objCE_Archivo.orden = ObtenerOrdenArchivo(padreID);
                        objCE_Archivo.perteneceSeguridad = objCarpetaPadre.archivo.perteneceSeguridad;
                        objCE_Archivo.tipoCarpeta =
                            (objCarpetaPadre.archivo.tipoCarpeta == TipoCarpetaEnum.Obra || objCarpetaPadre.archivo.tipoCarpeta == TipoCarpetaEnum.Proyecto) ? TipoCarpetaEnum.BaseObra : TipoCarpetaEnum.Normal;
                        _context.tblFM_Archivo.Add(objCE_Archivo);
                        _context.SaveChanges();
                        // END: ARCHIVO

                        // TIPO ARCHIVO
                        if (!listaTiposArchivosID.Any(x => x == 1)) { listaTiposArchivosID.Add(1); }
                        foreach (var tipoArchivoID in listaTiposArchivosID)
                        {
                            objCE_TipoArchivo = new tblFM_ArchivotblFM_TipoArchivo();
                            objCE_TipoArchivo.archivoID = objCE_Archivo.id;
                            objCE_TipoArchivo.tipoArchivoID = tipoArchivoID;
                            lstCE_TipoArchivos.Add(objCE_TipoArchivo);
                        }
                        _context.tblFM_ArchivotblFM_TipoArchivo.AddRange(lstCE_TipoArchivos);
                        _context.SaveChanges();
                        // END: TIPO ARCHIVO

                        // VERSION
                        objCE_Version = new tblFM_Version();
                        objCE_Version.archivoID = objCE_Archivo.id;
                        objCE_Version.usuarioCreadorID = vSesiones.sesionUsuarioDTO.id;
                        objCE_Version.version = 1;
                        objCE_Version.ruta = Path.Combine(objCarpetaPadre.ruta, objCarpetaPadre.nombre);
                        objCE_Version.nombre = nombreCarpeta;
                        objCE_Version.fechaCreacion = DateTime.Now;
                        objCE_Version.activo = true;
                        objCE_Version.considerarse = considerarse;
                        objCE_Version.abreviacion = abreviacion;
                        _context.tblFM_Version.Add(objCE_Version);
                        _context.SaveChanges();
                        // END: VERSION

                        AsignarPermisosUsuarios(new List<long> { objCE_Archivo.id }, padreID);

                        #region SE CREA CARPETA EN SERVIDOR
                        string ruta = string.Format(@"{0}\{1}\{2}", RUTA_BASE, objCE_Version.ruta, objCE_Version.nombre);
                        var rutaFisicaCarpeta = ruta; //Path.Combine(RUTA_BASE, objCE_Version.ruta, objCE_Version.nombre);
                        Directory.CreateDirectory(rutaFisicaCarpeta);
                        #endregion

                        #region SE VERIFICA SI EXISTE LA CARPETA EN EL SERVIDOR, QUE FUE CREADA ANTERIORMENTE
                        Dictionary<string, object> resVerificarExisteCarpeta = VerificarExisteCarpeta(rutaFisicaCarpeta);
                        if (!(bool)resVerificarExisteCarpeta[SUCCESS])
                            throw new Exception((string)resVerificarExisteCarpeta[MESSAGE]);
                        #endregion

                        dbContextTransaction.Commit();
                        #endregion
                    }
                    catch (Exception e)
                    {
                        dbContextTransaction.Rollback();
                        throw new Exception(e.Message);
                    }
                }

                #region ACTUALIZAR H ARCHIVO
                SetIndicarHArchivosNuevos(padreID, objCE_Archivo.id, vSesiones.sesionUsuarioDTO.id);
                #endregion

                resultado.Clear();
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.AGREGAR, 0,
                    new { nombreCarpeta = nombreCarpeta, padreID = padreID, listaTiposArchivosID = listaTiposArchivosID, considerarse = considerarse, abreviacion = abreviacion });
                resultado.Clear();
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }
            return resultado;
        }

        #region VALIDACIONES CREAR CARPETA
        private bool VerificarPermisoCrearCarpeta(long padreID)
        {
            using (var _ctx = new MainContext(vSesiones.sesionEmpresaActual))
            {
                bool puedeCrearCarpeta = false;
                try
                {
                    int ccID = _context.tblFM_Archivo.Where(w => w.id == padreID).Select(s => s.ccID).FirstOrDefault();
                    tblFM_Permisos_Usuario objPermiso = _ctx.tblFM_Permisos_Usuario.Where(w => w.usuarioID == vSesiones.sesionUsuarioDTO.id && w.puedeCrear && w.archivo.ccID == ccID).FirstOrDefault();
                    if (objPermiso != null)
                        puedeCrearCarpeta = true;
                }
                catch (Exception e)
                {
                    var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                    puedeCrearCarpeta = false;
                }
                return puedeCrearCarpeta;
            }
        }

        private bool VerificarNombreCarpeta(string nombreCarpeta)
        {
            bool nombreCarpetaValido = true;
            try
            {
                if (string.IsNullOrEmpty(nombreCarpeta) || nombreCarpeta.Trim().Length < 2 || EsNombreCarpetaInvalido(nombreCarpeta))
                    nombreCarpetaValido = false;
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, new { nombreCarpeta = nombreCarpeta });
                nombreCarpetaValido = false;
            }
            return nombreCarpetaValido;
        }

        private bool VerificarNombreCarpetaDisponible(string nombreCarpeta, long padreID)
        {
            bool nombreCarpetaDisponible = true;
            try
            {
                tblFM_Version objVersion = _context.tblFM_Version.Where(w => w.archivo.padreID == padreID && w.nombre == nombreCarpeta && w.activo).FirstOrDefault();
                if (objVersion != null)
                    nombreCarpetaDisponible = false;
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, new { nombreCarpeta = nombreCarpeta });
                nombreCarpetaDisponible = false;
            }
            return nombreCarpetaDisponible;
        }

        private bool VerificarCarpetaContrato(tblFM_Version objCarpetaPadre, long padreID)
        {
            bool permisosSuficientes = true;
            try
            {
                // Si es una carpeta de construcción o industrial se hace verificación especial, para ver si es una carpeta de contrato.
                if ((objCarpetaPadre.archivo.divisionID == DIVISION_CONSTRUCCION_ID || objCarpetaPadre.archivo.divisionID == DIVISION_INDUSTRIAL_ID) && objCarpetaPadre.archivo.nivel >= 3)
                {
                    // Verifica si el usuario está subiendo un archivo a una carpeta tipo subcontrato.
                    var esContrato = EsCarpetaContrato(objCarpetaPadre);

                    // Verifica si el usuario es Andrea Felix (Única con permiso de subir y eliminar contratos.)
                    var usuariosSubContratos = _context.tblFM_UsuariosPerfil.Any(x => x.usuarioID == vSesiones.sesionUsuarioDTO.id && x.perfilID == (int)TipoPermisoEnum.SubContrastos);
                    if (!usuariosSubContratos && esContrato)
                        permisosSuficientes = false;
                }
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                permisosSuficientes = false;
            }
            return permisosSuficientes;
        }

        private bool VerificarAbreviacionValida(string abreviacion)
        {
            bool abreviacionValida = true;
            try
            {
                if ((string.IsNullOrEmpty(abreviacion) || abreviacion.Trim().Length < 2 || abreviacion.Trim().Length > 5))
                    abreviacionValida = false;
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, new { abreviacion });
                abreviacionValida = false;
            }
            return abreviacionValida;
        }

        private Dictionary<string, object> VerificarExisteCarpeta(string path)
        {
            resultado.Clear();
            try
            {
                if (!Directory.Exists(path))
                    throw new Exception("Ocurrió un error al crear la carpeta en la ruta proporcionada.");

                resultado.Clear();
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                resultado.Clear();
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }
            return resultado;
        }

        private Dictionary<string, object> VerificarExisteArchivo(string path)
        {
            resultado.Clear();
            try
            {
                if (!File.Exists(path))
                    throw new Exception("Ocurrió un error al guardar el archivo proporcionado.");

                resultado.Clear();
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, new { path = path });
                resultado.Clear();
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }
            return resultado;
        }
        #endregion

        public Dictionary<string, object> CrearCarpetaContratista(long padreID)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    // Verifica que el usuario tenga permiso de crear carpetas.
                    if (noEsAdmin)
                    {
                        //var permisoCrearCarpeta = _context.tblFM_Permiso
                        //    .FirstOrDefault(x =>
                        //        (x.archivoID == padreID &&
                        //        x.usuarioID == vSesiones.sesionUsuarioDTO.id &&
                        //        x.puedeCrear &&
                        //        x.estatusVista != 0));

                        var ccID = _context.tblFM_Archivo.FirstOrDefault(x => x.id == padreID).ccID;
                        var permisoCrearCarpeta = _context.tblFM_Permisos_Usuario
                        .FirstOrDefault(x =>
                            x.usuarioID == vSesiones.sesionUsuarioDTO.id &&
                            x.puedeCrear &&
                            x.archivo.ccID == ccID);
                        if (permisoCrearCarpeta == null)
                        {
                            dbContextTransaction.Rollback();
                            resultado.Add(SUCCESS, false);
                            resultado.Add(MESSAGE, "El usuario no cuenta con los permisos suficientes para realizar esta acción.");
                            return resultado;
                        }
                    }

                    tblFM_Version carpetaPadre = _context.tblFM_Version.FirstOrDefault(x => x.archivoID == padreID && x.activo);

                    // Si es una carpeta de construcción o industrial se hace verificación especial
                    // para ver si es una carpeta de contrato.
                    if ((carpetaPadre.archivo.divisionID == DIVISION_CONSTRUCCION_ID || carpetaPadre.archivo.divisionID == DIVISION_INDUSTRIAL_ID) && carpetaPadre.archivo.nivel >= 3)
                    {
                        // Verifica si el usuario está subiendo un archivo a una carpeta tipo subcontrato.
                        var esContrato = EsCarpetaContrato(carpetaPadre);

                        // Verifica si el usuario es Andrea Felix (Única con permiso de subir y eliminar contratos.)
                        var usuariosSubContratos = _context.tblFM_UsuariosPerfil.Any(x => x.usuarioID == vSesiones.sesionUsuarioDTO.id && x.perfilID == (int)TipoPermisoEnum.SubContrastos);
                        if (!usuariosSubContratos && esContrato)
                        {
                            dbContextTransaction.Rollback();
                            resultado.Add(SUCCESS, false);
                            resultado.Add(MESSAGE, "El usuario no cuenta con los permisos suficientes para manejar contratos.");
                            return resultado;
                        }
                    }

                    // Se actualiza la fecha edición de la carpeta padre.
                    carpetaPadre.fechaEdicion = DateTime.Now;

                    var carpetaNueva = new tblFM_Archivo
                    {
                        padreID = padreID,
                        nivel = carpetaPadre.archivo.nivel + 1,
                        año = carpetaPadre.archivo.año,
                        divisionID = carpetaPadre.archivo.divisionID,
                        subdivisionID = carpetaPadre.archivo.subdivisionID,
                        ccID = carpetaPadre.archivo.ccID,
                        esCarpeta = true,
                        tipoCarpeta = TipoCarpetaEnum.Normal
                    };
                    _context.tblFM_Archivo.Add(carpetaNueva);
                    _context.SaveChanges();

                    List<int> listaTiposArchivosID = new List<int> { 1, 37, 38, 39, 40, 22, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52 };

                    // Se agregan los tipos de archivos predeterminados para la carpeta de contratista.
                    foreach (var tipoArchivoID in listaTiposArchivosID)
                    {
                        _context.tblFM_ArchivotblFM_TipoArchivo.Add(
                            new tblFM_ArchivotblFM_TipoArchivo { archivoID = carpetaNueva.id, tipoArchivoID = tipoArchivoID }
                        );
                    }

                    var carpetaObra = ObtenerCarpetaObraPorCCID(carpetaPadre);
                    var numeroContratistas = _context.tblFM_Version
                        .Where(x => x.archivo.padreID == padreID && x.activo && x.archivo.esCarpeta)
                        .OrderByDescending(x => x.numeroArchivo)
                        .ToList();
                    int numeroContratista = (numeroContratistas != null && numeroContratistas.Count > 0 ? numeroContratistas.First().numeroArchivo + 1 : 1);
                    string nombreContratista = String.Format("Contratista {0}-{1:000}-{2}", carpetaObra.abreviacion, numeroContratista, carpetaObra.archivo.año.ToString().Substring(2));

                    // Se verifica que no exista alguna carpeta con ese nombre en la ubicación indicada.
                    var nombreExistente = _context.tblFM_Version.Where(x => x.archivo.padreID == padreID && x.activo).Any(x => x.nombre == nombreContratista);
                    if (nombreExistente)
                    {
                        dbContextTransaction.Rollback();
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "Ya existe una carpeta con el nombre que tendría la nueva carpeta generada automáticamente.");
                        return resultado;
                    }

                    // Se asigna el orden de la carpeta en base al número de contratista.
                    carpetaNueva.orden = numeroContratista;

                    var nuevaVersion = new tblFM_Version
                    {
                        archivoID = carpetaNueva.id,
                        usuarioCreadorID = vSesiones.sesionUsuarioDTO.id,
                        version = 1,
                        ruta = Path.Combine(carpetaPadre.ruta, carpetaPadre.nombre),
                        nombre = nombreContratista,
                        fechaCreacion = DateTime.Now,
                        activo = true,
                        considerarse = true,
                        abreviacion = String.Format("{0:000}", numeroContratista),
                        numeroArchivo = numeroContratista
                    };
                    _context.tblFM_Version.Add(nuevaVersion);
                    _context.SaveChanges();
                    // No crear permiso
                    //if(noEsAdmin)
                    //{
                    //    // Crea el registro de permisos de la carpeta.
                    //    var nuevoPermiso = new tblFM_Permiso
                    //    {
                    //        usuarioID = vSesiones.sesionUsuarioDTO.id,
                    //        archivoID = nuevaVersion.archivoID,
                    //        puedeSubir = true,
                    //        puedeCrear = true,
                    //        puedeDescargarCarpeta = true,
                    //        puedeEliminar = true,
                    //        estatusVista = 2
                    //    };

                    //    _context.tblFM_Permiso.Add(nuevoPermiso);
                    //    _context.SaveChanges();
                    //}

                    // Se crea el registro del permiso y se actualiza el estatus de las vistas para los demás usuarios.
                    //CrearNuevosPermisosUsuarios(carpetaNueva, padreID);

                    var rutaFisicaCarpeta = Path.Combine(RUTA_BASE, nuevaVersion.ruta, nuevaVersion.nombre);
                    Directory.CreateDirectory(rutaFisicaCarpeta);

                    resultado.Add(SUCCESS, true);
                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "CrearCarpetaContratista", e, AccionEnum.AGREGAR, padreID, null);
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, "Ocurrió un error interno al intentar crear la carpeta del contratista en el servidor.");
                }
            }
            return resultado;
        }

        public Dictionary<string, object> CrearCarpetaContratistaIndustrial(long padreID)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                string rutaFisicaCarpetaBaseContratista = "";
                try
                {
                    // Verifica que el usuario tenga permiso de crear carpetas.
                    if (noEsAdmin)
                    {
                        //var permisoCrearCarpeta = _context.tblFM_Permiso
                        //    .FirstOrDefault(x =>
                        //        (x.archivoID == padreID &&
                        //        x.usuarioID == vSesiones.sesionUsuarioDTO.id &&
                        //        x.puedeCrear &&
                        //        x.estatusVista != 0));

                        var ccID = _context.tblFM_Archivo.FirstOrDefault(x => x.id == padreID).ccID;
                        var permisoCrearCarpeta = _context.tblFM_Permisos_Usuario
                        .FirstOrDefault(x =>
                            x.usuarioID == vSesiones.sesionUsuarioDTO.id &&
                            x.puedeCrear &&
                            x.archivo.ccID == ccID);

                        if (permisoCrearCarpeta == null)
                        {
                            dbContextTransaction.Rollback();
                            resultado.Add(SUCCESS, false);
                            resultado.Add(MESSAGE, "El usuario no cuenta con los permisos suficientes para realizar esta acción.");
                            return resultado;
                        }
                    }

                    tblFM_Version carpetaPadre = _context.tblFM_Version.FirstOrDefault(x => x.archivoID == padreID && x.activo);

                    // Si es una carpeta de construcción o industrial se hace verificación especial
                    // para ver si es una carpeta de contrato.
                    if ((carpetaPadre.archivo.divisionID == DIVISION_CONSTRUCCION_ID || carpetaPadre.archivo.divisionID == DIVISION_INDUSTRIAL_ID) && carpetaPadre.archivo.nivel >= 3)
                    {
                        // Verifica si el usuario está subiendo un archivo a una carpeta tipo subcontrato.
                        var esContrato = EsCarpetaContrato(carpetaPadre);

                        // Verifica si el usuario es Andrea Felix (Única con permiso de subir y eliminar contratos.)
                        var usuariosSubContratos = _context.tblFM_UsuariosPerfil.Any(x => x.usuarioID == vSesiones.sesionUsuarioDTO.id && x.perfilID == (int)TipoPermisoEnum.SubContrastos);
                        if (!usuariosSubContratos && esContrato)
                        {
                            dbContextTransaction.Rollback();
                            resultado.Add(SUCCESS, false);
                            resultado.Add(MESSAGE, "El usuario no cuenta con los permisos suficientes para manejar contratos.");
                            return resultado;
                        }
                    }

                    // Se actualiza la fecha edición de la carpeta padre.
                    carpetaPadre.fechaEdicion = DateTime.Now;

                    var listaArchivosCreados = new List<tblFM_Version>();

                    var carpetaBaseContratista = new tblFM_Archivo
                    {
                        padreID = padreID,
                        nivel = carpetaPadre.archivo.nivel + 1,
                        año = carpetaPadre.archivo.año,
                        divisionID = carpetaPadre.archivo.divisionID,
                        subdivisionID = carpetaPadre.archivo.subdivisionID,
                        ccID = carpetaPadre.archivo.ccID,
                        esCarpeta = true,
                        tipoCarpeta = TipoCarpetaEnum.Normal
                    };
                    _context.tblFM_Archivo.Add(carpetaBaseContratista);
                    _context.SaveChanges();
                    AñadirTiposArchivoCarpeta(carpetaBaseContratista.id, new int[] { 1 });

                    var numeroContratistas = _context.tblFM_Version
                        .Where(x => x.archivo.padreID == padreID && x.activo && x.archivo.esCarpeta)
                        .OrderByDescending(x => x.numeroArchivo)
                        .ToList();
                    int numeroContratista = (numeroContratistas.Count > 0 ? numeroContratistas.First().numeroArchivo + 1 : 1);
                    string nombreContratista = String.Format("Subcontrato {0:000}", numeroContratista);

                    // Se verifica que no exista alguna carpeta con ese nombre en la ubicación indicada.
                    var nombreExistente = _context.tblFM_Version.Where(x => x.archivo.padreID == padreID && x.activo).Any(x => x.nombre == nombreContratista);
                    if (nombreExistente)
                    {
                        dbContextTransaction.Rollback();
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "Ya existe una carpeta con el nombre que tendría la nueva carpeta generada automáticamente.");
                        return resultado;
                    }

                    // Se asigna el orden de la carpeta en base al número de contratista.
                    carpetaBaseContratista.orden = numeroContratista;

                    rutaFisicaCarpetaBaseContratista = Path.Combine(carpetaPadre.ruta, carpetaPadre.nombre);

                    var nuevaVersionBaseContratista = new tblFM_Version
                    {
                        archivoID = carpetaBaseContratista.id,
                        usuarioCreadorID = vSesiones.sesionUsuarioDTO.id,
                        version = 1,
                        ruta = rutaFisicaCarpetaBaseContratista,
                        nombre = nombreContratista,
                        fechaCreacion = DateTime.Now,
                        activo = true,
                        considerarse = false,/*
                        abreviacion = String.Format("{0:000}", numeroContratista),*/
                        numeroArchivo = numeroContratista
                    };
                    _context.tblFM_Version.Add(nuevaVersionBaseContratista);
                    _context.SaveChanges();
                    listaArchivosCreados.Add(nuevaVersionBaseContratista);

                    int ordenCarpetasHijas = 0;

                    #region Cotización
                    {
                        var carpetaCotizacion = new tblFM_Archivo
                        {
                            padreID = carpetaBaseContratista.id,
                            nivel = carpetaBaseContratista.nivel + 1,
                            año = carpetaBaseContratista.año,
                            divisionID = carpetaBaseContratista.divisionID,
                            subdivisionID = carpetaBaseContratista.subdivisionID,
                            ccID = carpetaBaseContratista.ccID,
                            esCarpeta = true,
                            orden = ordenCarpetasHijas++,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaCotizacion);
                        _context.SaveChanges();
                        AñadirTiposArchivoCarpeta(carpetaCotizacion.id, new int[] { 1, 96 });

                        var nuevaVersionCotizacion = new tblFM_Version
                        {
                            archivoID = carpetaCotizacion.id,
                            usuarioCreadorID = vSesiones.sesionUsuarioDTO.id,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionBaseContratista.ruta, nuevaVersionBaseContratista.nombre),
                            nombre = "Cotización",
                            fechaCreacion = DateTime.Now,
                            activo = true,
                            considerarse = true,
                            abreviacion = "COT SUB"
                        };
                        _context.tblFM_Version.Add(nuevaVersionCotizacion);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(nuevaVersionCotizacion);
                    }
                    #endregion

                    #region SPR (Subcontractor Proposal Review)
                    {
                        var carpetaSPR = new tblFM_Archivo
                        {
                            padreID = carpetaBaseContratista.id,
                            nivel = carpetaBaseContratista.nivel + 1,
                            año = carpetaBaseContratista.año,
                            divisionID = carpetaBaseContratista.divisionID,
                            subdivisionID = carpetaBaseContratista.subdivisionID,
                            ccID = carpetaBaseContratista.ccID,
                            esCarpeta = true,
                            orden = ordenCarpetasHijas++,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaSPR);
                        _context.SaveChanges();
                        AñadirTiposArchivoCarpeta(carpetaSPR.id, new int[] { 1, 97 });

                        var nuevaVersionSPR = new tblFM_Version
                        {
                            archivoID = carpetaSPR.id,
                            usuarioCreadorID = vSesiones.sesionUsuarioDTO.id,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionBaseContratista.ruta, nuevaVersionBaseContratista.nombre),
                            nombre = "SPR (Subcontractor Proposal Review)",
                            fechaCreacion = DateTime.Now,
                            activo = true,
                            considerarse = true,
                            abreviacion = "SPR"
                        };
                        _context.tblFM_Version.Add(nuevaVersionSPR);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(nuevaVersionSPR);
                    }
                    #endregion

                    #region Organigrama
                    {
                        var carpetaOrganigrama = new tblFM_Archivo
                        {
                            padreID = carpetaBaseContratista.id,
                            nivel = carpetaBaseContratista.nivel + 1,
                            año = carpetaBaseContratista.año,
                            divisionID = carpetaBaseContratista.divisionID,
                            subdivisionID = carpetaBaseContratista.subdivisionID,
                            ccID = carpetaBaseContratista.ccID,
                            esCarpeta = true,
                            orden = ordenCarpetasHijas++,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaOrganigrama);
                        _context.SaveChanges();
                        AñadirTiposArchivoCarpeta(carpetaOrganigrama.id, new int[] { 1, 98 });

                        var nuevaVersionOrganigrama = new tblFM_Version
                        {
                            archivoID = carpetaOrganigrama.id,
                            usuarioCreadorID = vSesiones.sesionUsuarioDTO.id,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionBaseContratista.ruta, nuevaVersionBaseContratista.nombre),
                            nombre = "Organigrama",
                            fechaCreacion = DateTime.Now,
                            activo = true,
                            considerarse = true,
                            abreviacion = "ORG SUB"
                        };
                        _context.tblFM_Version.Add(nuevaVersionOrganigrama);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(nuevaVersionOrganigrama);
                    }
                    #endregion

                    #region Cronograma
                    {
                        var carpetaCronograma = new tblFM_Archivo
                        {
                            padreID = carpetaBaseContratista.id,
                            nivel = carpetaBaseContratista.nivel + 1,
                            año = carpetaBaseContratista.año,
                            divisionID = carpetaBaseContratista.divisionID,
                            subdivisionID = carpetaBaseContratista.subdivisionID,
                            ccID = carpetaBaseContratista.ccID,
                            esCarpeta = true,
                            orden = ordenCarpetasHijas++,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaCronograma);
                        _context.SaveChanges();
                        AñadirTiposArchivoCarpeta(carpetaCronograma.id, new int[] { 1, 99 });

                        var nuevaVersionCronograma = new tblFM_Version
                        {
                            archivoID = carpetaCronograma.id,
                            usuarioCreadorID = vSesiones.sesionUsuarioDTO.id,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionBaseContratista.ruta, nuevaVersionBaseContratista.nombre),
                            nombre = "Cronograma",
                            fechaCreacion = DateTime.Now,
                            activo = true,
                            considerarse = true,
                            abreviacion = "CRON SUB"
                        };
                        _context.tblFM_Version.Add(nuevaVersionCronograma);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(nuevaVersionCronograma);
                    }
                    #endregion

                    #region Contrato u orden de compra
                    {
                        var carpetaCUOC = new tblFM_Archivo
                        {
                            padreID = carpetaBaseContratista.id,
                            nivel = carpetaBaseContratista.nivel + 1,
                            año = carpetaBaseContratista.año,
                            divisionID = carpetaBaseContratista.divisionID,
                            subdivisionID = carpetaBaseContratista.subdivisionID,
                            ccID = carpetaBaseContratista.ccID,
                            esCarpeta = true,
                            orden = ordenCarpetasHijas++,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaCUOC);
                        _context.SaveChanges();
                        AñadirTiposArchivoCarpeta(carpetaCUOC.id, new int[] { 1, 39 });

                        var nuevaVersionCUOC = new tblFM_Version
                        {
                            archivoID = carpetaCUOC.id,
                            usuarioCreadorID = vSesiones.sesionUsuarioDTO.id,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionBaseContratista.ruta, nuevaVersionBaseContratista.nombre),
                            nombre = "Contrato u orden de compra",
                            fechaCreacion = DateTime.Now,
                            activo = true,
                            considerarse = true,
                            abreviacion = "CONT SUB"
                        };
                        _context.tblFM_Version.Add(nuevaVersionCUOC);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(nuevaVersionCUOC);
                    }
                    #endregion

                    #region Estimaciones subcontratista
                    {
                        var carpetaESUB = new tblFM_Archivo
                        {
                            padreID = carpetaBaseContratista.id,
                            nivel = carpetaBaseContratista.nivel + 1,
                            año = carpetaBaseContratista.año,
                            divisionID = carpetaBaseContratista.divisionID,
                            subdivisionID = carpetaBaseContratista.subdivisionID,
                            ccID = carpetaBaseContratista.ccID,
                            esCarpeta = true,
                            orden = ordenCarpetasHijas++,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaESUB);
                        _context.SaveChanges();
                        AñadirTiposArchivoCarpeta(carpetaESUB.id, new int[] { 1, 48 });

                        var nuevaVersionESUB = new tblFM_Version
                        {
                            archivoID = carpetaESUB.id,
                            usuarioCreadorID = vSesiones.sesionUsuarioDTO.id,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionBaseContratista.ruta, nuevaVersionBaseContratista.nombre),
                            nombre = "Estimaciones subcontratista",
                            fechaCreacion = DateTime.Now,
                            activo = true,
                            considerarse = true,
                            abreviacion = "EST SUB"
                        };
                        _context.tblFM_Version.Add(nuevaVersionESUB);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(nuevaVersionESUB);
                    }
                    #endregion

                    #region Fianza
                    {
                        var carpetaFZ = new tblFM_Archivo
                        {
                            padreID = carpetaBaseContratista.id,
                            nivel = carpetaBaseContratista.nivel + 1,
                            año = carpetaBaseContratista.año,
                            divisionID = carpetaBaseContratista.divisionID,
                            subdivisionID = carpetaBaseContratista.subdivisionID,
                            ccID = carpetaBaseContratista.ccID,
                            esCarpeta = true,
                            orden = ordenCarpetasHijas++,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaFZ);
                        _context.SaveChanges();
                        AñadirTiposArchivoCarpeta(carpetaFZ.id, new int[] { 1, 100 });

                        var nuevaVersionFZ = new tblFM_Version
                        {
                            archivoID = carpetaFZ.id,
                            usuarioCreadorID = vSesiones.sesionUsuarioDTO.id,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionBaseContratista.ruta, nuevaVersionBaseContratista.nombre),
                            nombre = "Fianzas",
                            fechaCreacion = DateTime.Now,
                            activo = true,
                            considerarse = true,
                            abreviacion = "FIANZA SUB"
                        };
                        _context.tblFM_Version.Add(nuevaVersionFZ);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(nuevaVersionFZ);
                    }
                    #endregion

                    #region Seguro de RC
                    {
                        var carpetaRC = new tblFM_Archivo
                        {
                            padreID = carpetaBaseContratista.id,
                            nivel = carpetaBaseContratista.nivel + 1,
                            año = carpetaBaseContratista.año,
                            divisionID = carpetaBaseContratista.divisionID,
                            subdivisionID = carpetaBaseContratista.subdivisionID,
                            ccID = carpetaBaseContratista.ccID,
                            esCarpeta = true,
                            orden = ordenCarpetasHijas++,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaRC);
                        _context.SaveChanges();
                        AñadirTiposArchivoCarpeta(carpetaRC.id, new int[] { 1, 101 });

                        var nuevaVersionRC = new tblFM_Version
                        {
                            archivoID = carpetaRC.id,
                            usuarioCreadorID = vSesiones.sesionUsuarioDTO.id,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionBaseContratista.ruta, nuevaVersionBaseContratista.nombre),
                            nombre = "Seguro de RC",
                            fechaCreacion = DateTime.Now,
                            activo = true,
                            considerarse = true,
                            abreviacion = "SEG RC SUB"
                        };
                        _context.tblFM_Version.Add(nuevaVersionRC);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(nuevaVersionRC);
                    }
                    #endregion

                    #region Orden de cambio contrato
                    {
                        var carpetaOCC = new tblFM_Archivo
                        {
                            padreID = carpetaBaseContratista.id,
                            nivel = carpetaBaseContratista.nivel + 1,
                            año = carpetaBaseContratista.año,
                            divisionID = carpetaBaseContratista.divisionID,
                            subdivisionID = carpetaBaseContratista.subdivisionID,
                            ccID = carpetaBaseContratista.ccID,
                            esCarpeta = true,
                            orden = ordenCarpetasHijas++,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaOCC);
                        _context.SaveChanges();
                        AñadirTiposArchivoCarpeta(carpetaOCC.id, new int[] { 1, 49 });

                        var nuevaVersionOCC = new tblFM_Version
                        {
                            archivoID = carpetaOCC.id,
                            usuarioCreadorID = vSesiones.sesionUsuarioDTO.id,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionBaseContratista.ruta, nuevaVersionBaseContratista.nombre),
                            nombre = "Orden de cambio contrato",
                            fechaCreacion = DateTime.Now,
                            activo = true,
                            considerarse = true,
                            abreviacion = "ORD CAM SUB"
                        };
                        _context.tblFM_Version.Add(nuevaVersionOCC);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(nuevaVersionOCC);
                    }
                    #endregion

                    #region Close out checklist
                    {
                        var carpetaCHECK = new tblFM_Archivo
                        {
                            padreID = carpetaBaseContratista.id,
                            nivel = carpetaBaseContratista.nivel + 1,
                            año = carpetaBaseContratista.año,
                            divisionID = carpetaBaseContratista.divisionID,
                            subdivisionID = carpetaBaseContratista.subdivisionID,
                            ccID = carpetaBaseContratista.ccID,
                            esCarpeta = true,
                            orden = ordenCarpetasHijas++,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaCHECK);
                        _context.SaveChanges();
                        AñadirTiposArchivoCarpeta(carpetaCHECK.id, new int[] { 1, 114 });

                        var nuevaVersionCHECK = new tblFM_Version
                        {
                            archivoID = carpetaCHECK.id,
                            usuarioCreadorID = vSesiones.sesionUsuarioDTO.id,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionBaseContratista.ruta, nuevaVersionBaseContratista.nombre),
                            nombre = "Close out checklist",
                            fechaCreacion = DateTime.Now,
                            activo = true,
                            considerarse = true,
                            abreviacion = "CLOSE OUT SUB"
                        };
                        _context.tblFM_Version.Add(nuevaVersionCHECK);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(nuevaVersionCHECK);
                    }
                    #endregion

                    #region Acta de entrega
                    {
                        var carpetaAENT = new tblFM_Archivo
                        {
                            padreID = carpetaBaseContratista.id,
                            nivel = carpetaBaseContratista.nivel + 1,
                            año = carpetaBaseContratista.año,
                            divisionID = carpetaBaseContratista.divisionID,
                            subdivisionID = carpetaBaseContratista.subdivisionID,
                            ccID = carpetaBaseContratista.ccID,
                            esCarpeta = true,
                            orden = ordenCarpetasHijas++,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaAENT);
                        _context.SaveChanges();
                        AñadirTiposArchivoCarpeta(carpetaAENT.id, new int[] { 1, 102 });

                        var nuevaVersionCHECK = new tblFM_Version
                        {
                            archivoID = carpetaAENT.id,
                            usuarioCreadorID = vSesiones.sesionUsuarioDTO.id,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionBaseContratista.ruta, nuevaVersionBaseContratista.nombre),
                            nombre = "Acta de entrega",
                            fechaCreacion = DateTime.Now,
                            activo = true,
                            considerarse = true,
                            abreviacion = "ACTA ENT SUB"
                        };
                        _context.tblFM_Version.Add(nuevaVersionCHECK);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(nuevaVersionCHECK);
                    }
                    #endregion

                    // No crear permiso
                    //if(noEsAdmin)
                    //{
                    //    foreach(var archivoCreado in listaArchivosCreados)
                    //    {
                    //        // Crea el registro de permisos de la carpeta.
                    //        var nuevoPermiso = new tblFM_Permiso
                    //        {
                    //            usuarioID = vSesiones.sesionUsuarioDTO.id,
                    //            archivoID = archivoCreado.archivoID,
                    //            puedeSubir = true,
                    //            puedeCrear = true,
                    //            puedeDescargarCarpeta = true,
                    //            puedeEliminar = true,
                    //            estatusVista = 2
                    //        };

                    //        _context.tblFM_Permiso.Add(nuevoPermiso);
                    //    }
                    //    _context.SaveChanges();
                    //}

                    foreach (var archivoCreado in listaArchivosCreados)
                    {
                        // Se crea el registro del permiso y se actualiza el estatus de las vistas para los demás usuarios.
                        CrearNuevosPermisosUsuarios(archivoCreado.archivo, padreID);
                        var rutaFisicaCarpeta = Path.Combine(RUTA_BASE, archivoCreado.ruta, archivoCreado.nombre);
                        Directory.CreateDirectory(rutaFisicaCarpeta);
                    }

                    resultado.Add(SUCCESS, true);
                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "CrearCarpetaContratistaIndustrial", e, AccionEnum.AGREGAR, padreID, null);
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, "Ocurrió un error interno al intentar crear la carpeta del contratista en el servidor.");
                }
            }
            return resultado;
        }

        public Dictionary<string, object> CrearCarpetaEstimacion(long padreID)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    // Verifica que el usuario tenga permiso de crear carpetas.
                    if (noEsAdmin)
                    {
                        //var permisoCrearCarpeta = _context.tblFM_Permiso
                        //    .FirstOrDefault(x =>
                        //        (x.archivoID == padreID &&
                        //        x.usuarioID == vSesiones.sesionUsuarioDTO.id &&
                        //        x.puedeCrear &&
                        //        x.estatusVista != 0));

                        var ccID = _context.tblFM_Archivo.FirstOrDefault(x => x.id == padreID).ccID;
                        var permisoCrearCarpeta = _context.tblFM_Permisos_Usuario
                        .FirstOrDefault(x =>
                            x.usuarioID == vSesiones.sesionUsuarioDTO.id &&
                            x.puedeCrear &&
                            x.archivo.ccID == ccID);

                        if (permisoCrearCarpeta == null)
                        {
                            dbContextTransaction.Rollback();
                            resultado.Add(SUCCESS, false);
                            resultado.Add(MESSAGE, "El usuario no cuenta con los permisos suficientes para realizar esta acción.");
                            return resultado;
                        }
                    }

                    tblFM_Version carpetaPadre = _context.tblFM_Version.FirstOrDefault(x => x.archivoID == padreID && x.activo);

                    // Se actualiza la fecha edición de la carpeta padre.
                    carpetaPadre.fechaEdicion = DateTime.Now;

                    var carpetaNueva = new tblFM_Archivo
                    {
                        padreID = padreID,
                        nivel = carpetaPadre.archivo.nivel + 1,
                        año = carpetaPadre.archivo.año,
                        divisionID = carpetaPadre.archivo.divisionID,
                        subdivisionID = carpetaPadre.archivo.subdivisionID,
                        ccID = carpetaPadre.archivo.ccID,
                        esCarpeta = true,
                        tipoCarpeta = TipoCarpetaEnum.Normal
                    };
                    _context.tblFM_Archivo.Add(carpetaNueva);
                    _context.SaveChanges();

                    List<int> listaTiposArchivosID = new List<int> { 1, 31, 32, 33, 34, 35, 36 };

                    // Se agregan los tipos de archivos predeterminados para la carpeta de estimaciones.
                    foreach (var tipoArchivoID in listaTiposArchivosID)
                    {
                        _context.tblFM_ArchivotblFM_TipoArchivo.Add(
                            new tblFM_ArchivotblFM_TipoArchivo
                            {
                                archivoID = carpetaNueva.id,
                                tipoArchivoID = tipoArchivoID
                            }
                        );
                    }

                    var carpetaObra = ObtenerCarpetaObraPorCCID(carpetaPadre);
                    var numeroEstimaciones = _context.tblFM_Version
                        .Where(x => x.archivo.padreID == padreID && x.activo && x.archivo.esCarpeta)
                        .OrderByDescending(x => x.numeroArchivo)
                        .ToList();
                    int numeroEstimacion = (numeroEstimaciones != null && numeroEstimaciones.Count > 0 ? numeroEstimaciones.First().numeroArchivo + 1 : 1);
                    string nombreEstimacion = String.Format("Estimación {0}-{1:000}-{2}", carpetaObra.abreviacion, numeroEstimacion, carpetaObra.archivo.año.ToString().Substring(2));

                    // Se verifica que no exista alguna carpeta con ese nombre en la ubicación indicada.
                    var nombreExistente = _context.tblFM_Version.Where(x => x.archivo.padreID == padreID && x.activo).Any(x => x.nombre == nombreEstimacion);
                    if (nombreExistente)
                    {
                        dbContextTransaction.Rollback();
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "Ya existe una carpeta con el nombre que tendría la nueva carpeta generada automáticamente.");
                        return resultado;
                    }

                    // Se asigna el orden de la carpeta en base al número de contratista.
                    carpetaNueva.orden = numeroEstimacion;

                    var nuevaVersion = new tblFM_Version
                    {
                        archivoID = carpetaNueva.id,
                        usuarioCreadorID = vSesiones.sesionUsuarioDTO.id,
                        version = 1,
                        ruta = Path.Combine(carpetaPadre.ruta, carpetaPadre.nombre),
                        nombre = nombreEstimacion,
                        fechaCreacion = DateTime.Now,
                        activo = true,
                        considerarse = true,
                        abreviacion = String.Format("{0:000}", numeroEstimacion),
                        numeroArchivo = numeroEstimacion
                    };
                    _context.tblFM_Version.Add(nuevaVersion);
                    _context.SaveChanges();

                    // No crear permiso
                    //if(noEsAdmin)
                    //{
                    //    // Crea el registro de permisos de la carpeta.
                    //    var nuevoPermiso = new tblFM_Permiso
                    //    {
                    //        usuarioID = vSesiones.sesionUsuarioDTO.id,
                    //        archivoID = nuevaVersion.archivoID,
                    //        puedeSubir = true,
                    //        puedeCrear = true,
                    //        puedeDescargarCarpeta = true,
                    //        puedeEliminar = true,
                    //        estatusVista = 2
                    //    };

                    //    _context.tblFM_Permiso.Add(nuevoPermiso);
                    //    _context.SaveChanges();
                    //}

                    // Se crea el registro del permiso y se actualiza el estatus de las vistas para los demás usuarios.
                    //CrearNuevosPermisosUsuarios(carpetaNueva, padreID);

                    var rutaFisicaCarpeta = Path.Combine(RUTA_BASE, nuevaVersion.ruta, nuevaVersion.nombre);
                    Directory.CreateDirectory(rutaFisicaCarpeta);

                    resultado.Add(SUCCESS, true);
                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "CrearCarpetaEstimacion", e, AccionEnum.AGREGAR, padreID, null);
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, "Ocurrió un error interno al intentar crear la carpeta de estimación en el servidor.");
                }
            }
            return resultado;
        }

        public Dictionary<string, object> CrearCarpetaEstimacionIndustrial(long padreID)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                string rutaFisicaCarpetaBaseEstimacion = "";
                try
                {
                    // Verifica que el usuario tenga permiso de crear carpetas.
                    if (noEsAdmin)
                    {
                        //var permisoCrearCarpeta = _context.tblFM_Permiso
                        //    .FirstOrDefault(x =>
                        //        (x.archivoID == padreID &&
                        //        x.usuarioID == vSesiones.sesionUsuarioDTO.id &&
                        //        x.puedeCrear &&
                        //        x.estatusVista != 0));

                        var ccID = _context.tblFM_Archivo.FirstOrDefault(x => x.id == padreID).ccID;
                        var permisoCrearCarpeta = _context.tblFM_Permisos_Usuario
                        .FirstOrDefault(x =>
                            x.usuarioID == vSesiones.sesionUsuarioDTO.id &&
                            x.puedeCrear &&
                            x.archivo.ccID == ccID);

                        if (permisoCrearCarpeta == null)
                        {
                            dbContextTransaction.Rollback();
                            resultado.Add(SUCCESS, false);
                            resultado.Add(MESSAGE, "El usuario no cuenta con los permisos suficientes para realizar esta acción.");
                            return resultado;
                        }
                    }

                    tblFM_Version carpetaPadre = _context.tblFM_Version.FirstOrDefault(x => x.archivoID == padreID && x.activo);

                    // Se actualiza la fecha edición de la carpeta padre.
                    carpetaPadre.fechaEdicion = DateTime.Now;

                    var listaArchivosCreados = new List<tblFM_Version>();

                    var carpetaBaseEstimacion = new tblFM_Archivo
                    {
                        padreID = padreID,
                        nivel = carpetaPadre.archivo.nivel + 1,
                        año = carpetaPadre.archivo.año,
                        divisionID = carpetaPadre.archivo.divisionID,
                        subdivisionID = carpetaPadre.archivo.subdivisionID,
                        ccID = carpetaPadre.archivo.ccID,
                        esCarpeta = true,
                        tipoCarpeta = TipoCarpetaEnum.Normal
                    };
                    _context.tblFM_Archivo.Add(carpetaBaseEstimacion);
                    _context.SaveChanges();
                    AñadirTiposArchivoCarpeta(carpetaBaseEstimacion.id, new int[] { 1 });

                    var numeroEstimaciones = _context.tblFM_Version
                        .Where(x => x.archivo.padreID == padreID && x.activo && x.archivo.esCarpeta)
                        .OrderByDescending(x => x.numeroArchivo)
                        .ToList();
                    int numeroEstimacion = (numeroEstimaciones.Count > 0 ? numeroEstimaciones.First().numeroArchivo + 1 : 1);
                    string nombreEstimacion = String.Format("Estimación {0:000}", numeroEstimacion);

                    // Se verifica que no exista alguna carpeta con ese nombre en la ubicación indicada.
                    var nombreExistente = _context.tblFM_Version.Where(x => x.archivo.padreID == padreID && x.activo).Any(x => x.nombre == nombreEstimacion);
                    if (nombreExistente)
                    {
                        dbContextTransaction.Rollback();
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "Ya existe una carpeta con el nombre que tendría la nueva carpeta generada automáticamente.");
                        return resultado;
                    }

                    // Se asigna el orden de la carpeta en base al número de contratista.
                    carpetaBaseEstimacion.orden = numeroEstimacion;

                    rutaFisicaCarpetaBaseEstimacion = Path.Combine(carpetaPadre.ruta, carpetaPadre.nombre);

                    var nuevaVersionBaseEstimacion = new tblFM_Version
                    {
                        archivoID = carpetaBaseEstimacion.id,
                        usuarioCreadorID = vSesiones.sesionUsuarioDTO.id,
                        version = 1,
                        ruta = rutaFisicaCarpetaBaseEstimacion,
                        nombre = nombreEstimacion,
                        fechaCreacion = DateTime.Now,
                        activo = true,
                        considerarse = true,
                        abreviacion = String.Format("EST {0}", numeroEstimacion),
                        numeroArchivo = numeroEstimacion
                    };
                    _context.tblFM_Version.Add(nuevaVersionBaseEstimacion);
                    _context.SaveChanges();
                    listaArchivosCreados.Add(nuevaVersionBaseEstimacion);

                    #region Estimación
                    {
                        var carpetaEstimacion = new tblFM_Archivo
                        {
                            padreID = carpetaBaseEstimacion.id,
                            nivel = carpetaBaseEstimacion.nivel + 1,
                            año = carpetaBaseEstimacion.año,
                            divisionID = carpetaBaseEstimacion.divisionID,
                            subdivisionID = carpetaBaseEstimacion.subdivisionID,
                            ccID = carpetaBaseEstimacion.ccID,
                            esCarpeta = true,
                            orden = 0,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaEstimacion);
                        _context.SaveChanges();
                        AñadirTiposArchivoCarpeta(carpetaEstimacion.id, new int[] { 1, 93 });

                        var nuevaVersionEstimacion = new tblFM_Version
                        {
                            archivoID = carpetaEstimacion.id,
                            usuarioCreadorID = vSesiones.sesionUsuarioDTO.id,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionBaseEstimacion.ruta, nuevaVersionBaseEstimacion.nombre),
                            nombre = "Estimación",
                            fechaCreacion = DateTime.Now,
                            activo = true,
                            considerarse = false/*,
                            abreviacion = "EST"*/
                        };
                        _context.tblFM_Version.Add(nuevaVersionEstimacion);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(nuevaVersionEstimacion);
                    }
                    #endregion

                    #region Factura
                    {
                        var carpetaFactura = new tblFM_Archivo
                        {
                            padreID = carpetaBaseEstimacion.id,
                            nivel = carpetaBaseEstimacion.nivel + 1,
                            año = carpetaBaseEstimacion.año,
                            divisionID = carpetaBaseEstimacion.divisionID,
                            subdivisionID = carpetaBaseEstimacion.subdivisionID,
                            ccID = carpetaBaseEstimacion.ccID,
                            esCarpeta = true,
                            orden = 1,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaFactura);
                        _context.SaveChanges();
                        AñadirTiposArchivoCarpeta(carpetaFactura.id, new int[] { 1, 31 });

                        var nuevaVersionFactura = new tblFM_Version
                        {
                            archivoID = carpetaFactura.id,
                            usuarioCreadorID = vSesiones.sesionUsuarioDTO.id,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionBaseEstimacion.ruta, nuevaVersionBaseEstimacion.nombre),
                            nombre = "Factura",
                            fechaCreacion = DateTime.Now,
                            activo = true,
                            considerarse = false/*,
                            abreviacion = "FACT"*/
                        };
                        _context.tblFM_Version.Add(nuevaVersionFactura);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(nuevaVersionFactura);
                    }
                    #endregion

                    #region Soporte a estimación
                    {
                        var carpetaSoporteEstimacion = new tblFM_Archivo
                        {
                            padreID = carpetaBaseEstimacion.id,
                            nivel = carpetaBaseEstimacion.nivel + 1,
                            año = carpetaBaseEstimacion.año,
                            divisionID = carpetaBaseEstimacion.divisionID,
                            subdivisionID = carpetaBaseEstimacion.subdivisionID,
                            ccID = carpetaBaseEstimacion.ccID,
                            esCarpeta = true,
                            orden = 0,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaSoporteEstimacion);
                        _context.SaveChanges();
                        AñadirTiposArchivoCarpeta(carpetaSoporteEstimacion.id, new int[] { 1, 94 });

                        var nuevaVersionSoporteEstimacion = new tblFM_Version
                        {
                            archivoID = carpetaSoporteEstimacion.id,
                            usuarioCreadorID = vSesiones.sesionUsuarioDTO.id,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionBaseEstimacion.ruta, nuevaVersionBaseEstimacion.nombre),
                            nombre = "Soporte a estimación",
                            fechaCreacion = DateTime.Now,
                            activo = true,
                            considerarse = false,/*
                            abreviacion = "SEST"*/
                        };
                        _context.tblFM_Version.Add(nuevaVersionSoporteEstimacion);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(nuevaVersionSoporteEstimacion);
                    }
                    #endregion

                    // No crear permiso
                    //if(noEsAdmin)
                    //{
                    //    foreach(var archivoCreado in listaArchivosCreados)
                    //    {
                    //        // Crea el registro de permisos de la carpeta.
                    //        var nuevoPermiso = new tblFM_Permiso
                    //        {
                    //            usuarioID = vSesiones.sesionUsuarioDTO.id,
                    //            archivoID = archivoCreado.archivoID,
                    //            puedeSubir = true,
                    //            puedeCrear = true,
                    //            puedeDescargarCarpeta = true,
                    //            puedeEliminar = true,
                    //            estatusVista = 2
                    //        };

                    //        _context.tblFM_Permiso.Add(nuevoPermiso);
                    //    }
                    //    _context.SaveChanges();
                    //}

                    foreach (var archivoCreado in listaArchivosCreados)
                    {
                        // Se crea el registro del permiso y se actualiza el estatus de las vistas para los demás usuarios.
                        CrearNuevosPermisosUsuarios(archivoCreado.archivo, padreID);
                        var rutaFisicaCarpeta = Path.Combine(RUTA_BASE, archivoCreado.ruta, archivoCreado.nombre);
                        Directory.CreateDirectory(rutaFisicaCarpeta);
                    }

                    resultado.Add(SUCCESS, true);
                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    // Intenta eliminar la carpeta obra en caso de algún error para que no queden archivos basura.
                    try
                    {
                        Directory.Delete(rutaFisicaCarpetaBaseEstimacion, true);
                    }
                    catch (Exception) { }

                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "CrearCarpetaEstimacionIndustrial", e, AccionEnum.AGREGAR, padreID, null);
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, "Ocurrió un error interno al intentar crear la carpeta de estimación en el servidor.");
                }
            }
            return resultado;
        }

        public Dictionary<string, object> RenombrarArchivo(string nuevoNombre, long archivoID)
        {
            #region VERSION ANTERIOR
            //using (var dbContextTransaction = _context.Database.BeginTransaction())
            //{
            //    try
            //    {
            //        // Verifica que el usuario tenga permiso de editar carpetas.
            //        if (noEsAdmin)
            //        {
            //            var ccID = _context.tblFM_Archivo.FirstOrDefault(x => x.id == archivoID).ccID;
            //            var permisoEditarCarpeta = _context.tblFM_Permisos_Usuario.FirstOrDefault(x => x.usuarioID == vSesiones.sesionUsuarioDTO.id && x.puedeCrear && x.archivo.ccID == ccID);

            //            if (permisoEditarCarpeta == null)
            //                throw new Exception("El usuario no cuenta con los permisos suficientes para realizar esta acción.");
            //        }

            //        tblFM_Version version = _context.tblFM_Version.FirstOrDefault(x => x.archivoID == archivoID && x.activo);

            //        if (version.nombre == nuevoNombre.Trim() || nuevoNombre == String.Empty)
            //            throw new Exception("El nuevo nombre es igual al anterior.");
            //        else if (!version.archivo.esCarpeta)
            //            throw new Exception("Solo se pueden renombrar carpetas.");
            //        else if (EsNombreCarpetaInvalido(nuevoNombre))
            //            throw new Exception("El nombre contiene caracteres inválidos.");
            //        else
            //        {
            //            try
            //            {
            //                bool rutasActualizadas;
            //                string nombreAnterior = version.nombre;
            //                string nuevaRuta = version.ruta.Replace(string.Format(@"\{0}", nombreAnterior), string.Empty);
            //                string rutaAntes = Path.Combine(nuevaRuta, nombreAnterior);
            //                string rutaDespues = Path.Combine(nuevaRuta, nuevoNombre);

            //                try
            //                {
            //                    ActualizarRutasArchivosHijos(version.archivoID, rutaAntes, rutaDespues);
            //                    rutasActualizadas = true;
            //                }
            //                catch (Exception e)
            //                {
            //                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "RenombrarArchivo", e, AccionEnum.ACTUALIZAR, 0, new { archivoID = version.archivoID, nombreAnterior = nombreAnterior, rutaAntes = rutaAntes });
            //                    rutasActualizadas = false;
            //                }

            //                if (rutasActualizadas)
            //                {
            //                    version.nombre = nuevoNombre;
            //                    _context.SaveChanges();

            //                    resultado.Add(SUCCESS, true);
            //                    resultado.Add("archivoID", archivoID);

            //                    string rutaNombreAnterior = string.Empty;
            //                    string rutaNombreNuevo = string.Empty;
            //                    string ruta = string.Format("{0}\\{1}", RUTA_BASE, nuevaRuta);
            //                    try
            //                    {
            //                        ruta = ruta.Replace("\\\\", "\\");
            //                        rutaNombreAnterior = Path.Combine(RUTA_BASE, rutaAntes);
            //                        rutaNombreNuevo = Path.Combine(RUTA_BASE, rutaDespues);
            //                        Directory.Move(rutaNombreAnterior, rutaNombreNuevo);
            //                    }
            //                    catch (Exception e)
            //                    {
            //                        rutaNombreAnterior = Path.Combine(RUTA_BASE, rutaAntes);
            //                        rutaNombreNuevo = Path.Combine(RUTA_BASE, rutaDespues);
            //                        Directory.Move(rutaNombreAnterior, rutaNombreNuevo);
            //                        LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "RenombrarArchivo", e, AccionEnum.ACTUALIZAR, 0, new { ruta = ruta, rutaNombreAnterior = rutaNombreAnterior, rutaNombreNuevo = rutaNombreNuevo });
            //                    }
            //                    dbContextTransaction.Commit();
            //                }
            //                else
            //                    throw new Exception("No se pudo renombrar a los archivos hijos de la carpeta.");
            //            }
            //            catch (Exception e)
            //            {
            //                dbContextTransaction.Rollback();
            //                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "RenombrarArchivo", e, AccionEnum.ACTUALIZAR, 0, null);
            //                resultado.Clear();
            //                resultado.Add(SUCCESS, false);
            //                resultado.Add(MESSAGE, "Ocurrió un error interno al intentar crear la carpeta.");
            //            }
            //        }
            //    }
            //    catch (Exception e)
            //    {
            //        dbContextTransaction.Rollback();
            //        LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "RenombrarArchivo", e, AccionEnum.ACTUALIZAR, archivoID, new { nuevoNombre = nuevoNombre, archivoID = archivoID });
            //        resultado.Clear();
            //        resultado.Add(SUCCESS, false);
            //        resultado.Add(MESSAGE, e.Message);
            //    }
            //}
            //return resultado;
            #endregion

            #region VERSION ACTUAL
            Dictionary<string, object> resultado = new Dictionary<string, object>();
            try
            {
                #region VALIDACIONES
                if (string.IsNullOrEmpty(nuevoNombre)) { throw new Exception("Es necesario indicar el nombre de la carpeta."); }
                if (archivoID <= 0) { throw new Exception("Ocurrió un error al actualizar el nombre de la carpeta."); }
                #endregion

                #region ACTUALIZAR NOMBRE CARPETA
                tblFM_Version objActualizarCarpeta = _context.tblFM_Version.Where(w => w.archivoID == archivoID && w.activo).FirstOrDefault();
                if (objActualizarCarpeta == null)
                    throw new Exception("Ocurrió un error al actualizar el nombre de la carpeta.");

                objActualizarCarpeta.nombre = nuevoNombre.Trim();
                objActualizarCarpeta.fechaEdicion = DateTime.Now;
                _context.SaveChanges();
                #endregion

                resultado.Add(SUCCESS, true);
                resultado.Add(MESSAGE, "Se ha actualizado con éxito el nombre de la carpeta.");
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.ACTUALIZAR, archivoID, new { nuevoNombre = nuevoNombre, archivoID = archivoID });
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }
            return resultado;
            #endregion
        }

        public Dictionary<string, object> DescargarArchivo(long archivoID, bool esVersion)
        {
            tblFM_Version version;
            try
            {
                _context.Configuration.AutoDetectChangesEnabled = false;

                if (esVersion)
                {
                    version = _context.tblFM_Version.FirstOrDefault(x => x.id.Equals(archivoID));
                }
                else
                {
                    version = _context.tblFM_Version.FirstOrDefault(x => x.archivoID.Equals(archivoID) && x.activo);
                }

                // Verifica que el usuario tenga permiso de descargar el archivo.
                if (noEsAdmin)
                {
                    //var permisoDescargarArchivo = _context.tblFM_Permiso
                    //    .FirstOrDefault(x =>
                    //        (x.archivoID == (esVersion ? version.archivoID : archivoID) &&
                    //        x.usuarioID == vSesiones.sesionUsuarioDTO.id &&
                    //        x.puedeDescargarArchivo &&
                    //        x.estatusVista == 2));

                    var ccID = _context.tblFM_Archivo.FirstOrDefault(x => x.id == archivoID).divisionID;
                    var permisoDescargarArchivo = _context.tblFM_Permisos_Usuario
                    .FirstOrDefault(x =>
                        x.usuarioID == vSesiones.sesionUsuarioDTO.id &&
                        x.puedeDescargarArchivo &&
                        x.archivo.divisionID == ccID);

                    if (permisoDescargarArchivo == null)
                    {
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "El usuario no cuenta con los permisos suficientes para realizar esta acción.");
                        return resultado;
                    }
                }

                string numeroVersion = String.Format("{0:00}-", version.version);
                string nombreServidor = numeroVersion + version.nombre.Replace(Path.GetExtension(version.nombre), ".zip");
                string rutaFisicaZip = Path.Combine(RUTA_BASE, version.ruta, nombreServidor);
                Stream fileStream = GlobalUtils.GetFileFromZipAsStream(rutaFisicaZip, (numeroVersion + version.nombre));
                resultado.Add("archivo", fileStream);
                resultado.Add("nombreDescarga", version.nombre);
                resultado.Add(SUCCESS, true);
            }

            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "DescargarArchivo", e, AccionEnum.DESCARGAR, archivoID, null);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> DescargarCarpeta(long carpetaID)
        {
            #region VERSION ANTERIOR
            //            string rutaFolderTemporal = "";
            //            try
            //            {
            //                _context.Configuration.AutoDetectChangesEnabled = false;

            //                var versionFolder = _context.tblFM_Version.FirstOrDefault(x => x.archivoID == carpetaID);

            //                // Verifica que el usuario tenga permiso de descargar la carpeta.
            //                if (noEsAdmin)
            //                {
            //                    //var permisoDescargarCarpeta = _context.tblFM_Permiso
            //                    //    .FirstOrDefault(x =>
            //                    //        (x.archivoID == carpetaID &&
            //                    //        x.usuarioID == vSesiones.sesionUsuarioDTO.id &&
            //                    //        x.puedeDescargarCarpeta &&
            //                    //        x.estatusVista != 0));

            //                    var ccID = _context.tblFM_Archivo.FirstOrDefault(x => x.id == carpetaID).ccID;
            //                    var permisoDescargarCarpeta = _context.tblFM_Permisos_Usuario
            //                    .FirstOrDefault(x =>
            //                        x.usuarioID == vSesiones.sesionUsuarioDTO.id &&
            //                        x.puedeDescargarCarpeta &&
            //                        x.archivo.ccID == ccID);

            //                    if (permisoDescargarCarpeta == null)
            //                    {
            //                        resultado.Add(SUCCESS, false);
            //                        resultado.Add(MESSAGE, "El usuario no cuenta con los permisos suficientes para realizar esta acción.");
            //                        return resultado;
            //                    }
            //                }

            //                var listaArchivosHijos = _context.tblFM_Version
            //                    .Where(version => version.archivo.padreID == carpetaID && version.activo)
            //                    .ToList();

            //                if (!versionFolder.archivo.esCarpeta || listaArchivosHijos.Count == 0)
            //                {
            //                    resultado.Add(SUCCESS, false);
            //                    return resultado;
            //                }

            //#if DEBUG
            //                RUTA_TEMPORALES = @"C:\\Proyecto\\FM\\C\\Temporales";
            //#endif
            //                string nombreFolderTemporal = String.Format("{0} [{1}]", "tmp", DateTime.Now.ToString("dd-MM-yyyy HH:mm:ss").Replace(":", "-"));
            //                rutaFolderTemporal = Path.Combine(RUTA_TEMPORALES, nombreFolderTemporal);
            //                Directory.CreateDirectory(rutaFolderTemporal);

            //                // Función rescursiva para crear archivos hijos.
            //                CrearArchivosHijos(rutaFolderTemporal, listaArchivosHijos);

            //                // Ya que esta la carpeta temporal creada, se crea el zip
            //                string rutaNuevoZip = Path.Combine(RUTA_TEMPORALES, nombreFolderTemporal + ".zip");
            //                GlobalUtils.ComprimirCarpeta(rutaFolderTemporal, rutaNuevoZip);

            //                // Una vez creado el zip, se elimina el folder temporal.
            //                Directory.Delete(rutaFolderTemporal, true);

            //                resultado.Add(SUCCESS, true);
            //                resultado.Add("rutaDescarga", rutaNuevoZip);
            //                resultado.Add("nombreDescarga", Path.GetFileNameWithoutExtension(versionFolder.nombre) + ".zip");
            //            }
            //            catch (Exception e)
            //            {
            //                // Intenta eliminar la carpeta temporal
            //                try
            //                {
            //                    File.Delete((rutaFolderTemporal + ".zip"));
            //                }
            //                catch (Exception) { }

            //                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "DescargarCarpeta", e, AccionEnum.DESCARGAR, carpetaID, null);
            //                resultado.Add(SUCCESS, false);
            //            }

            //            return resultado;
            #endregion

            #region OMAR
            string rutaFolderTemporal = string.Empty;
            try
            {
                List<tblFM_Archivo> lstArchivos = _context.Select<tblFM_Archivo>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = @"SELECT t1.*
	                                FROM tblFM_Archivo AS t1
	                                INNER JOIN tblFM_Version AS t2 ON t2.archivoID = t1.id
		                                WHERE t2.activo = @activo",
                    parametros = new { activo = true }
                }).ToList();

                _context.Configuration.AutoDetectChangesEnabled = false;

                var versionFolder = _context.tblFM_Version.FirstOrDefault(x => x.archivoID == carpetaID);

                #region Verifica que el usuario tenga permiso de descargar la carpeta.
                if (noEsAdmin)
                {
                    var ccID = _context.tblFM_Archivo.FirstOrDefault(x => x.id == carpetaID).ccID;
                    var permisoDescargarCarpeta = _context.tblFM_Permisos_Usuario
                    .FirstOrDefault(x =>
                        x.usuarioID == vSesiones.sesionUsuarioDTO.id &&
                        x.puedeDescargarCarpeta &&
                        x.archivo.ccID == ccID);

                    if (permisoDescargarCarpeta == null)
                        throw new Exception("El usuario no cuenta con los permisos suficientes para realizar esta acción.");
                }
                #endregion

                var listaArchivosHijos = _context.tblFM_Version.Where(version => version.archivo.padreID == carpetaID && version.activo).ToList();
                if (!versionFolder.archivo.esCarpeta || listaArchivosHijos.Count == 0)
                    throw new Exception("Ocurrió un error al descargar la carpeta.");
#if DEBUG
                RUTA_TEMPORALES = @"C:\\Proyecto\\FM\\C\\Temporales";
#endif
                string nombreFolderTemporal = String.Format("{0} [{1}]", "tmp", DateTime.Now.ToString("dd-MM-yyyy HH:mm:ss").Replace(":", "-"));
                rutaFolderTemporal = Path.Combine(RUTA_TEMPORALES, nombreFolderTemporal);
                Directory.CreateDirectory(rutaFolderTemporal);

                // Función rescursiva para crear archivos hijos.
                CrearArchivosHijos(rutaFolderTemporal, listaArchivosHijos, lstArchivos);

                // Ya que esta la carpeta temporal creada, se crea el zip
                string rutaNuevoZip = Path.Combine(RUTA_TEMPORALES, string.Format("{0}.zip", nombreFolderTemporal));
                GlobalUtils.ComprimirCarpeta(rutaFolderTemporal, rutaNuevoZip);

                // Una vez creado el zip, se elimina el folder temporal.
                Directory.Delete(rutaFolderTemporal, true);

                resultado.Add(SUCCESS, true);
                resultado.Add("rutaDescarga", rutaNuevoZip);
                resultado.Add("nombreDescarga", Path.GetFileNameWithoutExtension(versionFolder.nombre) + ".zip");
            }
            catch (Exception e)
            {
                // Intenta eliminar la carpeta temporal
                try
                {
                    File.Delete((rutaFolderTemporal + ".zip"));
                }
                catch (Exception)
                {
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "DescargarCarpeta", e, AccionEnum.DESCARGAR, carpetaID, new { carpetaID = carpetaID });
                }

                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "DescargarCarpeta", e, AccionEnum.DESCARGAR, carpetaID, new { carpetaID = carpetaID });
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }
            return resultado;
            #endregion
        }

        public Dictionary<string, object> ObtenerHistorialVersiones(long archivoID)
        {
            try
            {
                _context.Configuration.AutoDetectChangesEnabled = false;

                if (noEsAdmin)
                {
                    // Verifica que el usuario tenga permiso de descargar el archivo.
                    //var permisoDescargarArchivo = _context.tblFM_Permiso
                    //    .FirstOrDefault(x =>
                    //        (x.archivoID == archivoID &&
                    //        x.usuarioID == vSesiones.sesionUsuarioDTO.id &&
                    //        x.puedeDescargarArchivo &&
                    //        x.estatusVista == 2));

                    var ccID = _context.tblFM_Archivo.FirstOrDefault(x => x.id == archivoID).ccID;
                    var permisoDescargarArchivo = _context.tblFM_Permisos_Usuario
                    .FirstOrDefault(x =>
                        x.usuarioID == vSesiones.sesionUsuarioDTO.id &&
                        x.puedeDescargarArchivo &&
                        x.archivo.ccID == ccID);

                    if (permisoDescargarArchivo == null)
                    {
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "El usuario no cuenta con los permisos suficientes para realizar esta acción.");
                        return resultado;
                    }
                }

                List<DirectorioDTO> listaVersiones =
                _context.tblFM_Version.Where(x => x.archivoID.Equals(archivoID))
                .ToList()
                .OrderByDescending(x => x.version)
                .Select(x => new DirectorioDTO
                {
                    id = x.id,
                    value = x.nombre,
                    version = x.version,
                    usuario = x.usuario.nombre + " " + x.usuario.apellidoPaterno + " " + x.usuario.apellidoMaterno,
                    date = x.fechaCreacion.ToString(FORMATO_FECHA_HORA)
                }).ToList();
                resultado.Add("listaVersiones", listaVersiones);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "ObtenerHistorialVersiones", e, AccionEnum.CONSULTA, archivoID, null);
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, "Ocurrió un error interno al intentar obtener el historial de versiones.");
            }
            return resultado;
        }

        public Dictionary<string, object> ObtenerTiposArchivos(long archivoID)
        {
            try
            {
                _context.Configuration.AutoDetectChangesEnabled = false;

                List<ComboDTO> listaTipoArchivos = _context.tblFM_ArchivotblFM_TipoArchivo
                    .Where(x => x.archivoID == archivoID)
                    .Select(archivo => new ComboDTO
                    {
                        Text = archivo.tipoArchivo.nombre + (archivo.tipoArchivo.nombreLibre ? " (Libre)" : String.Empty),
                        Value = archivo.tipoArchivo.id.ToString()
                    }).ToList();

                if (listaTipoArchivos.Count == 0)
                {
                    resultado.Add(SUCCESS, "False");
                    resultado.Add(MESSAGE, "No se encontraron tipos de archivos para esta carpeta.");
                    return resultado;
                }

                resultado.Add(ITEMS, listaTipoArchivos);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                resultado.Add(SUCCESS, "False");
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "ObtenerTiposArchivos", e, AccionEnum.CONSULTA, 0, null);
            }
            return resultado;
        }

        public Dictionary<string, object> ObtenerTodosTiposArchivos()
        {
            try
            {
                _context.Configuration.AutoDetectChangesEnabled = false;

                List<ComboDTO> listaTipoArchivos = _context.tblFM_TipoArchivo
                    .Select(archivo => new ComboDTO
                    {
                        Text = archivo.nombre + (archivo.nombreLibre ? " (Libre)" : String.Empty),
                        Value = archivo.id.ToString()
                    }).ToList();

                if (listaTipoArchivos.Count == 0)
                {
                    resultado.Add(SUCCESS, "False");
                    resultado.Add(MESSAGE, "No se encontraron los tipos de archivos.");
                    return resultado;
                }

                resultado.Add(ITEMS, listaTipoArchivos);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                resultado.Add(SUCCESS, "False");
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "ObtenerTodosTiposArchivos", e, AccionEnum.CONSULTA, 0, null);
            }
            return resultado;
        }

        public Dictionary<string, object> ObtenerArchivosActualizables(long padreID)
        {
            try
            {
                _context.Configuration.AutoDetectChangesEnabled = false;

                // Verifica que el usuario tenga permiso de subir archivos en la carpeta padre.
                if (noEsAdmin)
                {
                    var permisoSubir = _context.tblFM_Permiso
                    .FirstOrDefault(x =>
                        (x.archivoID == padreID &&
                        x.usuarioID == vSesiones.sesionUsuarioDTO.id &&
                        x.puedeSubir &&
                        x.estatusVista != 0));
                    if (permisoSubir == null)
                    {
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "El usuario no cuenta con los permisos suficientes para realizar esta acción.");
                        return resultado;
                    }
                }

                var listaArchivosActualizables = (from version in _context.tblFM_Version
                                                  join permiso in _context.tblFM_Permiso on version.archivoID equals permiso.archivoID
                                                  where version.activo &&
                                                         (noEsAdmin ? permiso.usuarioID == vSesiones.sesionUsuarioDTO.id && permiso.puedeActualizar : true) &&
                                                          version.archivo.padreID == padreID
                                                  select new
                                                  {
                                                      version.archivoID,
                                                      version.nombre,
                                                      version.version
                                                  }).ToList();

                resultado.Add(ITEMS, listaArchivosActualizables);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "ObtenerArchivosActualizables", e, AccionEnum.CONSULTA, padreID, null);
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, "Ocurrió un error interno al intentar obtener el historial de versiones.");
            }
            return resultado;
        }

        public Dictionary<string, object> CargarUsuariosAsignados(long archivoID)
        {
            try
            {
                _context.Configuration.AutoDetectChangesEnabled = false;

                var listaUsuarios = _context.tblFM_Permiso
                    .Where(x => (x.archivoID == archivoID &&
                                x.estatusVista == 2 &&
                                x.usuarioID != vSesiones.sesionUsuarioDTO.id))
                    .Select(x => new PermisosDTO
                    {
                        puedeDescargarArchivo = x.puedeDescargarArchivo,
                        puedeActualizar = x.puedeActualizar,
                        puedeEliminar = x.puedeEliminar,
                        nombreUsuario = x.usuario.nombre + " " + x.usuario.apellidoPaterno + " " + x.usuario.apellidoMaterno,
                        usuarioID = x.usuarioID
                    }).ToList();

                resultado.Add("listaUsuarios", listaUsuarios);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "CargarUsuariosAsignados", e, AccionEnum.CONSULTA, archivoID, null);
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, "Ocurrió un error interno al intentar obtener los usuarios asignados.");
            }
            return resultado;
        }

        public Dictionary<string, object> GuardarCambiosPermisos(List<PermisosDTO> nuevaListaPermisosUsuarios, long archivoID)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    if (archivoID == 0)
                    {
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "No se pudo identificar al archivo seleccionado.");
                        return resultado;
                    }

                    var version = _context.tblFM_Version.FirstOrDefault(x => (x.archivoID == archivoID && x.activo));

                    // Verifica que el usuario tenga permiso de subir archivos en la carpeta padre.
                    if (noEsAdmin)
                    {
                        var permisoSubir = _context.tblFM_Permiso
                    .FirstOrDefault(x =>
                        (x.archivoID == version.archivo.padreID &&
                        x.usuarioID == vSesiones.sesionUsuarioDTO.id &&
                        x.puedeSubir &&
                        x.estatusVista != 0));
                        if (permisoSubir == null)
                        {
                            dbContextTransaction.Rollback();
                            resultado.Add(SUCCESS, false);
                            resultado.Add(MESSAGE, "El usuario no cuenta con los permisos suficientes para realizar esta acción.");
                            return resultado;
                        }
                    }

                    listaAdminIds = ObtenerAdminsIdsGestor();

                    if (nuevaListaPermisosUsuarios.Any(x => listaAdminIds.Contains(x.usuarioID)))
                    {
                        dbContextTransaction.Rollback();
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "No se puede asignar permisos a usuarios que sean administradores.");
                        return resultado;
                    }

                    var listaPermisosUsuariosActual = _context.tblFM_Permiso
                        .Where(x => (x.archivoID == archivoID && x.usuarioID != vSesiones.sesionUsuarioDTO.id))
                        .ToList();

                    var listaCorreosUsuarios = new List<string>();

                    /**
                     * L1 = Lista de registros de permisos usuarios actuales (listaPermisosUsuariosActual) 
                     * L2 = Nueva lista de usuarios (nuevaListaPermisosUsuarios)
                     */

                    try
                    {
                        ActualizarRegistrosPermisos(listaPermisosUsuariosActual, nuevaListaPermisosUsuarios, archivoID, ref listaCorreosUsuarios);
                    }
                    catch (Exception e)
                    {
                        dbContextTransaction.Rollback();
                        LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "ActualizarRegistrosPermisos", e, AccionEnum.ACTUALIZAR, archivoID, null);
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "Ocurrió un error interno al intentar actualizar o eliminar los permisos asignados.");
                        return resultado;
                    }

                    try
                    {
                        CrearRegistrosPermisos(listaPermisosUsuariosActual, nuevaListaPermisosUsuarios, archivoID, ref listaCorreosUsuarios);
                    }
                    catch (Exception e)
                    {
                        dbContextTransaction.Rollback();
                        LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "CrearRegistrosPermisos", e, AccionEnum.AGREGAR, archivoID, null);
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "Ocurrió un error interno al intentar agregar los nuevos permisos asignados.");
                        return resultado;
                    }

                    _context.SaveChanges();
                    resultado.Add(SUCCESS, true);
                    dbContextTransaction.Commit();

                    // Si hubo nuevas personas asignadas, se envía correo.
                    if (listaCorreosUsuarios.Count > 0)
                    {
                        try
                        {
                            //PrepararDatosCorreo(AccionEnum.ASIGNAR, version, version.archivo.padreID, listaCorreosUsuarios);
                        }
                        catch (Exception e)
                        {
                            LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GuardarCambiosPermisos", e, AccionEnum.ASIGNAR, archivoID, null);
                            resultado[SUCCESS] = false;
                            resultado.Add(MESSAGE, "Los permisos fueron asignados correctamente pero ocurrió un error al enviar los correos de notificación.");
                        }
                    }

                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GuardarCambiosPermisos", e, AccionEnum.ACTUALIZAR, archivoID, null);
                    resultado.Clear();
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, "Ocurrió un error interno al intentar actualizar los usuarios asignados en el servidor.");
                }
            }

            return resultado;
        }

        public DirectorioDTO ObtenerEstructuraCarpeta(long padreID)
        {
            try
            {
                _context.Configuration.AutoDetectChangesEnabled = false;

                int index = 1;
                int usuarioID = vSesiones.sesionUsuarioDTO.id;

                var carpetaPadre = _context.tblFM_Version.FirstOrDefault(version => version.archivoID == padreID && version.activo);

                var listaPermisosUsuario = _context.tblFM_Permiso
                    .Where(x => x.archivo.padreID == padreID)
                    .ToList()
                    .Where(x =>
                        (x.archivo.divisionID == carpetaPadre.archivo.divisionID) &&
                        (x.archivo.nivel == carpetaPadre.archivo.nivel || x.archivo.nivel == carpetaPadre.archivo.nivel + 1) &&
                        (x.usuarioID == usuarioID))
                    .ToList();

                var listaVersionesArchivos = _context.tblFM_Version
                    .Where(version => version.archivo.padreID == padreID &&
                        version.archivo.divisionID == carpetaPadre.archivo.divisionID &&
                        (version.archivo.nivel == carpetaPadre.archivo.nivel || version.archivo.nivel == carpetaPadre.archivo.nivel + 1) &&
                        version.activo)
                    .ToList();

                puedeCrearSubdivision = PuedeCrearSubdivision(usuarioID);
                puedeCargarMultiple = PuedeCargarMultiple(usuarioID);

                // Si no es admin, verifica si tiene acceso a la carpeta.
                if (noEsAdmin)
                {
                    var permisoCarpeta = _context.tblFM_Permiso.Any(permiso =>
                        permiso.archivoID == carpetaPadre.archivoID &&
                        permiso.archivo.divisionID == carpetaPadre.archivo.divisionID &&
                        permiso.usuarioID == usuarioID);

                    // Si no tiene permiso a esa carpeta, salta la iteración.
                    if (!permisoCarpeta)
                    {
                        return new DirectorioDTO();
                    }
                }

                var directorioTemp = new DirectorioDTO
                {
                    id = carpetaPadre.archivoID,
                    data = new List<DirectorioDTO>(),
                    año = carpetaPadre.archivo.año,
                    divisionID = carpetaPadre.archivo.divisionID,
                    ccID = carpetaPadre.archivo.ccID,
                    parent = padreID.ToString()
                };

                directorioTemp.data = ObtenerEstructuraSubcarpetasDeprecado(directorioTemp, ref index, ref listaVersionesArchivos, ref listaPermisosUsuario, puedeCrearSubdivision, puedeCargarMultiple);

                return directorioTemp;
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "ObtenerEstructuraCarpeta", e, AccionEnum.CONSULTA, 0, null);
                return new DirectorioDTO();
            }
        }

        public Dictionary<string, object> ObtenerSubdivisiones(int divisionID)
        {
            try
            {
                _context.Configuration.AutoDetectChangesEnabled = false;

                var listaSubdivisiones = _context.tblP_Subdivision
                    .Where(x => x.divisionID == divisionID && x.activo)
                    .ToList();

                var listaSubdivisionesCreadas = _context.tblFM_Version
                    .Where(x => x.archivo.tipoCarpeta == TipoCarpetaEnum.Subdivision && x.activo && x.archivo.año == DateTime.Now.Year)
                    .Select(x => x.archivo.subdivisionID)
                    .ToList();

                if (listaSubdivisionesCreadas.Count > 0)
                {
                    listaSubdivisiones.RemoveAll(x => listaSubdivisionesCreadas.Contains(x.id));
                }

                List<ComboDTO> listaSubdivisionesDTO = listaSubdivisiones
                    .Select(archivo => new ComboDTO
                    {
                        Text = archivo.abreviacion + " - " + archivo.descripcion,
                        Value = archivo.id.ToString()
                    }).ToList();

                resultado.Add(ITEMS, listaSubdivisionesDTO);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                resultado.Add(SUCCESS, false);
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "ObtenerSubdivisiones", e, AccionEnum.CONSULTA, divisionID, null);
            }
            return resultado;
        }

        public Dictionary<string, object> CrearSubdivision(int subdivisionID, long padreID)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    // Verifica que el usuario tenga permiso de crear subdivisiones.
                    puedeCrearSubdivision = PuedeCrearSubdivision(vSesiones.sesionUsuarioDTO.id);

                    if (puedeCrearSubdivision == false)
                    {
                        dbContextTransaction.Rollback();
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "El usuario no cuenta con los permisos suficientes para realizar esta acción.");
                        return resultado;
                    }

                    tblFM_Version carpetaPadre = _context.tblFM_Version.FirstOrDefault(x => x.archivoID == padreID && x.activo);

                    // Se actualiza la fecha edición de la carpeta padre.
                    carpetaPadre.fechaEdicion = DateTime.Now;

                    var carpetaNueva = new tblFM_Archivo
                    {
                        padreID = padreID,
                        nivel = carpetaPadre.archivo.nivel + 1,
                        año = carpetaPadre.archivo.año,
                        divisionID = carpetaPadre.archivo.divisionID,
                        subdivisionID = subdivisionID,
                        ccID = carpetaPadre.archivo.ccID,
                        esCarpeta = true,
                        orden = ObtenerOrdenArchivo(padreID),
                        perteneceSeguridad = carpetaPadre.archivo.perteneceSeguridad,
                        tipoCarpeta = TipoCarpetaEnum.Subdivision // Se marca como tipo de carpeta subdivisión
                    };
                    _context.tblFM_Archivo.Add(carpetaNueva);
                    _context.SaveChanges();

                    // Se agrega el tipo de archivo "otros" a la carpeta subdivisión.
                    _context.tblFM_ArchivotblFM_TipoArchivo.Add(new tblFM_ArchivotblFM_TipoArchivo { archivoID = carpetaNueva.id, tipoArchivoID = 1 });

                    tblP_Subdivision subdivision = _context.tblP_Subdivision.FirstOrDefault(x => x.id == subdivisionID);

                    var nuevaVersion = new tblFM_Version
                    {
                        archivoID = carpetaNueva.id,
                        usuarioCreadorID = vSesiones.sesionUsuarioDTO.id,
                        version = 1,
                        ruta = Path.Combine(carpetaPadre.ruta, carpetaPadre.nombre),
                        nombre = subdivision.descripcion,
                        fechaCreacion = DateTime.Now,
                        activo = true,
                        considerarse = true,
                        abreviacion = subdivision.abreviacion
                    };
                    _context.tblFM_Version.Add(nuevaVersion);
                    _context.SaveChanges();

                    if (noEsAdmin)
                    {
                        // Crea el registro de permisos de la carpeta.
                        var nuevoPermiso = new tblFM_Permiso
                        {
                            usuarioID = vSesiones.sesionUsuarioDTO.id,
                            archivoID = nuevaVersion.archivoID,
                            puedeSubir = true,
                            puedeCrear = true,
                            puedeDescargarCarpeta = true,
                            puedeEliminar = true,
                            estatusVista = 2,
                            FK_UsuarioCreacion = vSesiones.sesionUsuarioDTO.id,
                            fechaCreacion = DateTime.Now,
                            registroActivo = true
                        };

                        _context.tblFM_Permiso.Add(nuevoPermiso);
                        _context.SaveChanges();
                    }

                    // Se crea el registro del permiso y se actualiza el estatus de las vistas para los demás usuarios.
                    CrearNuevosPermisosUsuarios(carpetaNueva, padreID);

                    var rutaFisicaCarpeta = Path.Combine(RUTA_BASE, nuevaVersion.ruta, nuevaVersion.nombre);
                    Directory.CreateDirectory(rutaFisicaCarpeta);

                    if (Directory.Exists(rutaFisicaCarpeta))
                    {
                        resultado.Add(SUCCESS, true);
                        dbContextTransaction.Commit();
                    }
                    else
                    {
                        dbContextTransaction.Rollback();
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "No se pudo crear la carpeta en el servidor.");
                    }
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "CrearSubdivision", e, AccionEnum.ELIMINAR, padreID, null);
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, "Ocurrió un error interno al intentar crear la carpeta en el servidor.");
                }
            }
            return resultado;
        }

        public Dictionary<string, object> CargarDatosArchivoVisor(long archivoID)
        {
            tblFM_Version version;
            try
            {
                _context.Configuration.AutoDetectChangesEnabled = false;

                version = _context.tblFM_Version.FirstOrDefault(x => x.archivoID == archivoID && x.activo);

                // Verifica que el usuario tenga permiso de descargar el archivo.
                if (noEsAdmin)
                {
                    //var permisoDescargarArchivo = _context.tblFM_Permiso
                    //    .FirstOrDefault(x =>
                    //        x.archivoID == archivoID &&
                    //        x.usuarioID == vSesiones.sesionUsuarioDTO.id &&
                    //        x.puedeDescargarArchivo &&
                    //        x.estatusVista == 2);

                    var ccID = _context.tblFM_Archivo.FirstOrDefault(x => x.id == archivoID).divisionID;
                    var permisoDescargarArchivo = _context.tblFM_Permisos_Usuario
                    .FirstOrDefault(x =>
                        x.usuarioID == vSesiones.sesionUsuarioDTO.id &&
                        x.puedeDescargarArchivo &&
                        x.archivo.divisionID == ccID);

                    if (permisoDescargarArchivo == null)
                    {
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "El usuario no cuenta con los permisos suficientes para realizar esta acción.");
                        return resultado;
                    }
                }

                // Se valida la extensión del archivo:
                if (EsExtensionInvalidaVisor(version.nombre))
                {
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, "Archivo inválido. Este tipo de archivo no es compatible con el visor de documentos.");
                    return resultado;
                }

                string numeroVersion = String.Format("{0:00}-", version.version);
                string nombreServidor = numeroVersion + version.nombre.Replace(Path.GetExtension(version.nombre), ".zip");
                string rutaFisicaZip = Path.Combine(RUTA_BASE, version.ruta, nombreServidor);

                Stream fileStream = GlobalUtils.GetFileFromZipAsStream(rutaFisicaZip, (numeroVersion + version.nombre));

                var byteArray = GlobalUtils.ConvertFileToByte(fileStream);

                resultado.Add("archivo", byteArray);
                resultado.Add("extension", Path.GetExtension(version.nombre).ToUpper());
                resultado.Add(SUCCESS, true);
            }

            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "CargarDatosArchivoVisor", e, AccionEnum.CONSULTA, archivoID, null);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        private bool EsExtensionInvalidaVisor(string nombreArchivo)
        {
            var extension = Path.GetExtension(nombreArchivo).ToUpper();

            var extensionesValidasVisor = GlobalUtils.ObtenerExtensionesValidasVisor();

            return !extensionesValidasVisor.Contains(extension);
        }

        #endregion

        #region Métodos Permisos
        public List<AutocompleteDTO> ObtenerUsuariosAutocompletado(string term)
        {
            List<AutocompleteDTO> listaPosiblesUsuarios;
            try
            {
                if (term == null || term.Length == 0)
                    return new List<AutocompleteDTO>();

                listaPosiblesUsuarios = _context.tblP_Usuario.Where(x => ((x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno).Contains(term)) && x.estatus).Take(10).Select(x => new AutocompleteDTO
                {
                    id = x.id,
                    label = x.nombre + " " + x.apellidoPaterno + " " + x.apellidoMaterno
                }).Select(x => new AutocompleteDTO
                {
                    id = x.id,
                    label = x.label.ToUpper()
                }).OrderBy(x => x.label).ToList();
            }
            catch (Exception)
            {
                listaPosiblesUsuarios = new List<AutocompleteDTO>();
            }

            return listaPosiblesUsuarios;
        }

        public Dictionary<string, object> ObtenerDivisiones()
        {
            try
            {
                _context.Configuration.AutoDetectChangesEnabled = false;
                List<ComboDTO> listaDivisiones = _context.tblP_Division
                    .Where(x => x.activo)
                    .Select(archivo => new ComboDTO
                    {
                        Text = archivo.abreviacion + " - " + archivo.descripcion,
                        Value = archivo.id.ToString()
                    }).ToList();

                resultado.Add(ITEMS, listaDivisiones);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                resultado.Add(SUCCESS, false);
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "ObtenerDivisiones", e, AccionEnum.CONSULTA, 0, null);
            }
            return resultado;
        }

        public Dictionary<string, object> ObtenerSubdivisiones()
        {
            try
            {
                _context.Configuration.AutoDetectChangesEnabled = false;

                var listaSubdivisiones = _context.tblP_Subdivision.Where(x => x.activo).ToList();

                var subdivisionesCreadas = _context.tblFM_Archivo
                    .Where(x => x.tipoCarpeta == TipoCarpetaEnum.Subdivision && x.subdivisionID != 0)
                    .Select(x => x.subdivisionID).Distinct()
                    .ToList();


                listaSubdivisiones.RemoveAll(x => !subdivisionesCreadas.Contains(x.id));

                var listaRestantes = listaSubdivisiones
                    .OrderBy(x => x.abreviacion)
                    .Select(subdivision => new ComboDTO
                    {
                        Text = subdivision.abreviacion + " - " + subdivision.descripcion,
                        Value = subdivision.id.ToString()
                    }).ToList();

                resultado.Add(ITEMS, listaRestantes);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                resultado.Add(SUCCESS, false);
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "ObtenerSubdivisiones", e, AccionEnum.CONSULTA, 0, null);
            }
            return resultado;
        }

        public Dictionary<string, object> ObtenerObras()
        {
            try
            {
                _context.Configuration.AutoDetectChangesEnabled = false;

                List<tblP_CC> listaObras = _context.tblP_CC.Where(x => x.estatus).ToList();
                List<int> obrasCreadas = _context.tblFM_Archivo.Where(x => x.tipoCarpeta == TipoCarpetaEnum.Obra && x.año == DateTime.Now.Year).Select(x => x.ccID).Distinct().ToList();
                listaObras.RemoveAll(x => obrasCreadas.Contains(x.id));

                var listaRestantes = listaObras.OrderBy(x => x.cc).Select(obra => new ComboDTO
                {
                    Text = String.Format("{0} - {1}", obra.cc, obra.descripcion),
                    Value = obra.id.ToString()
                }).ToList();

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, listaRestantes);
            }
            catch (Exception e)
            {
                resultado.Add(SUCCESS, false);
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "ObtenerObras", e, AccionEnum.CONSULTA, 0, null);
            }
            return resultado;
        }

        public Dictionary<string, object> ObtenerObrasPorDivision(List<int> listaDivisionesIDs)
        {
            var listaObras = new List<ComboDTO>();
            try
            {
                _context.Configuration.AutoDetectChangesEnabled = false;

                if (listaDivisionesIDs == null || listaDivisionesIDs.Count == 0)
                {
                    resultado.Add(SUCCESS, false);
                }

                listaDivisionesIDs.ForEach(divisionID =>
                {
                    // Se obtienen las obras pertenecientes a esa division.
                    var obras = _context.tblFM_Version
                        .Where(x =>
                            x.archivo.tipoCarpeta == TipoCarpetaEnum.Obra &&
                            x.activo &&
                            x.archivo.divisionID == divisionID)
                        .ToList()
                        .DistinctBy(x => x.archivo.ccID).ToList();

                    listaObras.AddRange(
                        obras.Select(obra => new ComboDTO
                        {
                            Text = obra.nombre,
                            Value = obra.archivo.ccID.ToString()
                        }
                        ).Distinct().ToList());
                });
                resultado.Add(ITEMS, listaObras);
                resultado.Add(SUCCESS, listaObras.Count > 0);
            }
            catch (Exception e)
            {
                resultado.Add(SUCCESS, false);
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "ObtenerObrasPorDivision", e, AccionEnum.CONSULTA, 0, null);
            }
            return resultado;
        }
        List<tblFM_PermisoEspecialObra> getLstPermisoUsuario(int idUsuario)
        {
            var consulta = new StoreProcedureDTO { nombre = "spFM_Permiso_Especial_Obra_usuarioID" };
            consulta.parametros.Add(new OdbcParameterDTO { nombre = "usuarioID", tipoSql = SqlDbType.Int, valor = idUsuario });
            var lst = _context.sp_Select<tblFM_PermisoEspecialObra>(consulta);
            return lst;
        }
        private List<tblFM_PermisoEspecialObra> GetCarpetasInicialesPermisosUsuario(int idUsuario, int anio)
        {
            //var consulta = new StoreProcedureDTO { nombre = "spFM_Get_Carpetas_Iniciales_Permisos_usuarioID" };
            //consulta.parametros.Add(new OdbcParameterDTO { nombre = "usuarioID", tipoSql = SqlDbType.Int, valor = idUsuario });
            //consulta.parametros.Add(new OdbcParameterDTO { nombre = "anio", tipoSql = SqlDbType.Int, valor = anio });
            //var lst = _context.sp_Select<tblFM_Permiso>(consulta);
            //return lst;
            var permisos = (from permiso in ObtenerEstructuraDirectoriosArchivos(idUsuario)
                            where permiso.archivos.Any(archivo => archivo.año == anio)
                            select permiso).ToList();
            return permisos;
        }
        private List<tblFM_Permiso> GetPermisosCarpetaUsuarioID(int idUsuario, long archivoID)
        {
            var consulta = new StoreProcedureDTO { nombre = "spFM_Get_Permisos_Carpeta_usuarioID" };
            consulta.parametros.Add(new OdbcParameterDTO { nombre = "usuarioID", tipoSql = SqlDbType.Int, valor = idUsuario });
            consulta.parametros.Add(new OdbcParameterDTO { nombre = "archivoID", tipoSql = SqlDbType.Int, valor = archivoID });
            var lst = _context.sp_Select<tblFM_Permiso>(consulta);
            return lst;
        }
        List<tblFM_Permiso> getLstPermisoUsuarioDeprecado(int idUsuario)
        {
            var consulta = new StoreProcedureDTO { nombre = "spFM_Permiso_usuarioID" };
            consulta.parametros.Add(new OdbcParameterDTO { nombre = "usuarioID", tipoSql = SqlDbType.Int, valor = idUsuario });
            var lst = _context.sp_Select<tblFM_Permiso>(consulta);
            return lst;
        }
        List<DirectorioDTO> getLstPermisoUsuarioParentsHierarchy(int idUsuario)
        {
            try
            {
                #region VERSION ACTUAL // TODO
                //                using (var _ctx = new MainContext())
                //                {
                //                    List<DirectorioDTO> lstPermisosUsuario = _context.Select<DirectorioDTO>(new DapperDTO
                //                    {
                //                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                //                        consulta = @"SELECT 
                //                		                                    tblArchivos.año,
                //                		                                    tblArchivos.ccID,
                //                		                                    tblArchivos.divisionID,
                //                		                                    tblPermisos.estatusVista,
                //                		                                    tblArchivos.id,
                //                		                                    tblArchivos.nivel AS level,
                //                		                                    tblArchivos.padreID AS pId,
                //                		                                    tblPermisos.puedeActualizar,
                //                		                                    tblPermisos.puedeCrear,
                //                		                                    tblPermisos.puedeDescargarArchivo,
                //                		                                    tblPermisos.puedeDescargarCarpeta,
                //                		                                    tblPermisos.puedeEliminar,
                //                		                                    tblPermisos.puedeSubir,
                //                		                                    tblArchivos.subdivisionID,
                //                		                                    (CASE tblArchivos.esCarpeta WHEN 1 THEN 'FOLDER' ELSE tblVersiones.nombre END) AS tipoArchivo,
                //                		                                    tblArchivos.tipoCarpeta,
                //                		                                    (CASE tblArchivos.esCarpeta WHEN 1 THEN 'folder' ELSE substring(tblVersiones.nombre, 1, 1) END) AS type,
                //                		                                    NULL AS usuario,
                //                		                                    tblVersiones.nombre AS value
                //                	                                    FROM tblFM_Permisos_Usuario AS tblPermisos
                //                	                                    INNER JOIN tblFM_Version AS tblVersiones ON tblVersiones.archivoID = tblPermisos.archivoID
                //                	                                    INNER JOIN tblFM_Archivo AS tblArchivos ON tblArchivos.id = tblVersiones.archivoID
                //                		                                    WHERE tblPermisos.usuarioID = @usuarioID AND tblPermisos.registroActivo = @registroActivo AND tblVersiones.activo = @registroActivo
                //                			                                    ORDER BY tblVersiones.fechaCreacion ",
                //                        parametros = new { usuarioID = idUsuario, registroActivo = true }
                //                    }).ToList();

                //                    List<DirectorioDTO> lstDirectorios = new List<DirectorioDTO>();
                //                    DirectorioDTO objDirectorio = new DirectorioDTO();
                //                    foreach (var item in lstPermisosUsuario)
                //                    {
                //                        objDirectorio = new DirectorioDTO();
                //                        objDirectorio.año = item.año;
                //                        objDirectorio.ccID = item.ccID;
                //                        objDirectorio.divisionID = item.divisionID;
                //                        objDirectorio.estatusVista = item.estatusVista;
                //                        objDirectorio.id = item.id;
                //                        objDirectorio.level = item.level;
                //                        objDirectorio.pId = item.pId;
                //                        objDirectorio.puedeActualizar = item.puedeActualizar;
                //                        objDirectorio.puedeCrear = item.puedeCrear;
                //                        objDirectorio.puedeDescargarArchivo = item.puedeDescargarArchivo;
                //                        objDirectorio.puedeDescargarCarpeta = item.puedeDescargarCarpeta;
                //                        objDirectorio.puedeEliminar = item.puedeEliminar;
                //                        objDirectorio.puedeSubir = item.puedeSubir;
                //                        objDirectorio.subdivisionID = item.subdivisionID;
                //                        objDirectorio.tipoArchivo = item.tipoArchivo;
                //                        objDirectorio.tipoCarpeta = item.tipoCarpeta;
                //                        objDirectorio.type = item.type;
                //                        //objDirectorio.usuario = item.usuario;
                //                        objDirectorio.value = item.value;
                //                        lstDirectorios.Add(objDirectorio);
                //                    }
                //                    return lstDirectorios.ToList();
                //                }
                #endregion

                #region VERSION ANTERIOR
                var consulta = new StoreProcedureDTO { nombre = "spFM_GetHierarchyParentsBy_userID" };
                consulta.parametros.Add(new OdbcParameterDTO { nombre = "userID", tipoSql = SqlDbType.Int, valor = idUsuario });
                var lst = _context.sp_Select<DirectorioDTO>(consulta);
                return lst;
                #endregion
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "getLstPermisoUsuarioParentsHierarchy", e, AccionEnum.CONSULTA, idUsuario, idUsuario);
                return null;
            }
        }
        List<DirectorioDTO> getLstPermisoUsuarioChildsHierarchy(int idUsuario, long padreID)
        {
            var consulta = new StoreProcedureDTO { nombre = "spFM_GetHierarchyChildsBy_userID" };
            consulta.parametros.Add(new OdbcParameterDTO { nombre = "userID", tipoSql = SqlDbType.Int, valor = idUsuario });
            consulta.parametros.Add(new OdbcParameterDTO { nombre = "nodeID", tipoSql = SqlDbType.Int, valor = padreID });
            var lst = _context.sp_Select<DirectorioDTO>(consulta);
            return lst;
        }
        private List<tblFM_Permiso> GetCarpetasInicialesPermisosUsuarioDeprecado(int idUsuario, int anio)
        {
            var consulta = new StoreProcedureDTO { nombre = "spFM_Get_Carpetas_Iniciales_Permisos_usuarioID" };
            consulta.parametros.Add(new OdbcParameterDTO { nombre = "usuarioID", tipoSql = SqlDbType.Int, valor = idUsuario });
            consulta.parametros.Add(new OdbcParameterDTO { nombre = "anio", tipoSql = SqlDbType.Int, valor = anio });
            var lst = _context.sp_Select<tblFM_Permiso>(consulta);
            return lst;
        }
        private List<tblFM_Permiso> GetPermisosCarpetaUsuarioIDDeprecado(int idUsuario, long archivoID)
        {
            var consulta = new StoreProcedureDTO { nombre = "spFM_Get_Permisos_Carpeta_usuarioID" };
            consulta.parametros.Add(new OdbcParameterDTO { nombre = "usuarioID", tipoSql = SqlDbType.Int, valor = idUsuario });
            consulta.parametros.Add(new OdbcParameterDTO { nombre = "archivoID", tipoSql = SqlDbType.Int, valor = archivoID });
            var lst = _context.sp_Select<tblFM_Permiso>(consulta);
            return lst;
        }
        public Dictionary<string, object> ObtenerEstructuraPermisos(int usuarioID)
        {
            List<EstructuraVistasDTO> contenedor = new List<EstructuraVistasDTO>();
            try
            {
                _context.Configuration.AutoDetectChangesEnabled = false;

                List<tblFM_Version> listaCarpetasRaiz = ObtenerListaCarpetasAño();
                //List<tblFM_Version> lstVersiones = _context.tblFM_Version.Where(w => w.activo).ToList();
                //List<tblFM_Version> lstVersiones = _context.Select<tblFM_Version>(new DapperDTO
                //{
                //    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                //    consulta = @"SELECT * FROM tblFM_Version WHERE activo = @activo",
                //    parametros = new { activo = true }
                //}).ToList();

                foreach (var carpetaAño in listaCarpetasRaiz)
                {
                    var listaPermisosUsuario = GetCarpetasInicialesPermisosUsuarioDeprecado(usuarioID, carpetaAño.archivo.año);

                    List<tblFM_Version> listaVersionesIniciales = new List<tblFM_Version>();

                    if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                    {
                        listaVersionesIniciales = _context.tblFM_Version
                            .Where(x => x.archivo.tipoCarpeta == TipoCarpetaEnum.Año || x.archivo.tipoCarpeta == TipoCarpetaEnum.Division)
                            .Where(x => x.archivo.año == 2022)
                            .Where(x => !x.obraCerrada)
                            .Where(x => x.archivo.nivel == 1)
                            .Where(x => x.activo).ToList();
                    }
                    else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
                    {
                        listaVersionesIniciales = _context.tblFM_Version
                            .Where(x => x.archivo.tipoCarpeta == TipoCarpetaEnum.Año || x.archivo.tipoCarpeta == TipoCarpetaEnum.Division)
                            .Where(x => x.archivo.año == carpetaAño.archivo.año)
                            .Where(x => x.activo).ToList();
                    }
                    else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                    {
                        listaVersionesIniciales = _context.tblFM_Version
                            .Where(x => x.archivo.tipoCarpeta == TipoCarpetaEnum.Año || x.archivo.tipoCarpeta == TipoCarpetaEnum.Division)
                            .Where(x => x.archivo.año == carpetaAño.archivo.año)
                            .Where(x => x.activo).ToList();
                    }

                    var permisoDTO = ObtenerPermisosArchivoDeprecado(carpetaAño.archivoID, usuarioID, false, ref listaPermisosUsuario);

                    var directorioTemp = new EstructuraVistasDTO
                    {
                        title = carpetaAño.nombre,
                        folder = true,
                        id = carpetaAño.archivoID,
                        key = carpetaAño.archivoID,
                        expanded = true,
                        permisos = permisoDTO,
                        selected = permisoDTO.estatusVista < 2 ? false : true,
                        partsel = permisoDTO.estatusVista > 0 ? true : false,
                        checkbox = true,
                        children = new List<EstructuraVistasDTO>()
                    };

                    directorioTemp.children = ObtenerEstructuraSubpermisos(directorioTemp, usuarioID, ref listaVersionesIniciales, ref listaPermisosUsuario);

                    contenedor.Add(directorioTemp);
                }
                resultado.Add(SUCCESS, true);
                resultado.Add("contenedor", contenedor);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "ObtenerEstructuraPermisosInicial", e, AccionEnum.CONSULTA, usuarioID, null);
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, "Ocurrió un error al cargar la estructura de archivos.");
            }

            return resultado;
        }

        private bool EsTipoCarpetaCargaInicial(TipoCarpetaEnum tipoCarpeta)
        {
            return tipoCarpeta == TipoCarpetaEnum.Año || tipoCarpeta == TipoCarpetaEnum.Division;
        }

        public List<EstructuraVistasDTO> ObtenerEstructuraCarpetaPermisos(int usuarioID, long folderID)
        {
            try
            {
                _context.Configuration.AutoDetectChangesEnabled = false;

                var listaPermisosUsuario = GetPermisosCarpetaUsuarioID(usuarioID, folderID);

                var listaVersioneArchivos = _context.tblFM_Version
                    .Where(x => x.archivo.padreID == folderID)
                    .Where(x => x.activo)
                    .ToList();

                var directorioTemp = new EstructuraVistasDTO
                {
                    id = folderID,
                    children = new List<EstructuraVistasDTO>(),
                    checkbox = true
                };

                directorioTemp.children = ObtenerEstructuraSubpermisos(directorioTemp, usuarioID, ref listaVersioneArchivos, ref listaPermisosUsuario);

                return directorioTemp.children;
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "ObtenerEstructuraCarpetaPermisos", e, AccionEnum.CONSULTA, usuarioID, null);
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, "Ocurrió un error al cargar la estructura de archivos.");
            }

            return new List<EstructuraVistasDTO>();
        }

        public Dictionary<string, object> GuardarPermisos(int usuarioID, List<EstructuraVistasDTO> archivos)
        {
            #region PRIMERA VERSION
            //try
            //{
            //    if (archivos == null || archivos.Count == 0)
            //    {
            //        resultado.Add(SUCCESS, false);
            //        resultado.Add(MESSAGE, "La lista de permisos viene vacía.");
            //        return resultado;
            //    }

            //    listaAdminIds = ObtenerAdminsIdsGestor();
            //    if (listaAdminIds.Contains(usuarioID))
            //    {
            //        resultado.Add(SUCCESS, false);
            //        resultado.Add(MESSAGE, "No se pueden asignar permisos a un usuario tipo Administrador.");
            //        return resultado;
            //    }

            //    // Crea la nueva lista de permiso al tipo entity
            //    var listaNuevosPermisos = archivos.Select(archivo => new tblFM_Permiso
            //    {
            //        usuarioID = usuarioID,
            //        archivoID = archivo.key,
            //        puedeSubir = archivo.permisos.puedeSubir,
            //        puedeEliminar = archivo.permisos.puedeEliminar,
            //        puedeDescargarArchivo = archivo.permisos.puedeDescargarArchivo,
            //        puedeDescargarCarpeta = archivo.permisos.puedeDescargarCarpeta,
            //        puedeActualizar = archivo.permisos.puedeActualizar,
            //        puedeCrear = archivo.permisos.puedeCrear,
            //        estatusVista = (archivo.partsel && archivo.selected) ? 2 : (archivo.partsel && !archivo.selected) ? 1 : 0
            //    }).ToList();

            //    // Si ya tiene permisos, los actualiza.
            //    var permisosUsuario = _context.tblFM_Permiso.Where(x => x.usuarioID == usuarioID).ToList();
            //    if (permisosUsuario.Count > 0)
            //    {
            //        var permisosRepetidos = permisosUsuario.Select(x => x.archivoID).Intersect(listaNuevosPermisos.Select(x => x.archivoID)).ToList();
            //        foreach (var permisoPorEditarID in permisosRepetidos)
            //        {
            //            var permisoPorEditar = permisosUsuario.FirstOrDefault(x => x.archivoID == permisoPorEditarID);
            //            var permisoEditado = listaNuevosPermisos.FirstOrDefault(x => x.archivoID == permisoPorEditar.archivoID);
            //            if (permisoEditado != null)
            //            {
            //                permisoPorEditar.puedeSubir = permisoEditado.puedeSubir;
            //                permisoPorEditar.puedeCrear = permisoEditado.puedeCrear;
            //                permisoPorEditar.puedeDescargarCarpeta = permisoEditado.puedeDescargarCarpeta;
            //                permisoPorEditar.puedeEliminar = permisoEditado.puedeEliminar;
            //                permisoPorEditar.puedeActualizar = permisoEditado.puedeActualizar;
            //                permisoPorEditar.puedeDescargarArchivo = permisoEditado.puedeDescargarArchivo;
            //                permisoPorEditar.estatusVista = permisoEditado.estatusVista;
            //            }
            //            else
            //            {
            //                dbContextTransaction.Rollback();
            //                resultado.Add(SUCCESS, false);
            //                resultado.Add(MESSAGE, "Sucedió un error al actualizar los permisos del usuario.");
            //                return resultado;
            //            }
            //        }
            //    }
            //    // Si no, le crea permisos para cada archivo y asigna los que le indicó.
            //    else
            //    {
            //        var listaPermisosVacios = _context.tblFM_Version
            //            .Where(x => x.activo)
            //            .ToList()
            //            .Where(x => listaNuevosPermisos.Exists(y => y.archivoID == x.archivoID) == false)
            //            .Select(archivo => new tblFM_Permiso { usuarioID = usuarioID, archivoID = archivo.archivoID })
            //            .ToList();

            //        listaNuevosPermisos.AddRange(listaPermisosVacios);

            //        _context.tblFM_Permiso.AddRange(listaNuevosPermisos);
            //    }

            //    // Se guardan los cambios.
            //    _context.SaveChanges();

            //    resultado.Add(SUCCESS, true);
            //    dbContextTransaction.Commit();
            //}
            //catch (Exception e)
            //{
            //    dbContextTransaction.Rollback();
            //    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GuardarPermisos", e, AccionEnum.ACTUALIZAR, usuarioID, null);
            //    resultado.Add(SUCCESS, false);
            //    resultado.Add(MESSAGE, "Ocurrió un error interno al intentar guardar los permisos en el servidor.");
            //}
            #endregion

            #region SEGUNDA VERSION
            //try
            //{
            //    // VALIDACIONES
            //    if (usuarioID <= 0)
            //        throw new Exception("Ocurrió un error al registrar los permisos.");

            //    if (archivos == null || archivos.Count() <= 0)
            //        throw new Exception("Ocurrió un error al registrar los permisos.");
            //    // END: VALIDACIONES

            //    #region SE ELIMINA LOS PERMISOS ACTUALES / COMENTADO
            //    // SE ELIMINA LOS PERMISOS ACTUALES
            //    List<tblFM_Permiso> lstPermisosAnteriores = _ctx.tblFM_Permiso.Where(w => w.usuarioID == usuarioID && w.registroActivo).ToList();
            //    foreach (var item in lstPermisosAnteriores)
            //    {
            //        item.FK_UsuarioModificacion = vSesiones.sesionUsuarioDTO.id;
            //        item.fechaModificacion = DateTime.Now;
            //        item.registroActivo = false;
            //    }
            //    _ctx.SaveChanges();

            //    List<tblFM_Permisos_Usuario> lstPermisosUsuarioAnteriores = _ctx.tblFM_Permisos_Usuario.Where(w => w.usuarioID == usuarioID && w.registroActivo).ToList();
            //    foreach (var item in lstPermisosUsuarioAnteriores)
            //    {
            //        item.FK_UsuarioModificacion = vSesiones.sesionUsuarioDTO.id;
            //        item.fechaModificacion = DateTime.Now;
            //        item.registroActivo = false;
            //    }
            //    _ctx.SaveChanges();
            //    // END: SE ELIMINA LOS PERMISOS ACTUALES
            //    #endregion

            //    #region SE OBTIENE LOS HIJOS DE LAS CARPETAS SELECCIONADAS Y SUS ARCHIVOS
            //    List<tblFM_Archivo> lstArchivos = _ctx.tblFM_Archivo.ToList();
            //    List<tblFM_Version> lstDocumentosCargados = _ctx.tblFM_Version.Where(w => w.activo).ToList();
            //    List<EstructuraVistasDTO> lstEstructurasVistasDTO = new List<EstructuraVistasDTO>();
            //    EstructuraVistasDTO objEstructuraVistaDTO = new EstructuraVistasDTO();
            //    List<long> lstArbol = new List<long>();
            //    int contador = archivos.Count();
            //    for (int i = 0; i < contador; i++)
            //    {
            //        if (archivos[i].partsel && archivos[i].selected)
            //        {
            //            bool hijosCompletos = false;
            //            while (!hijosCompletos)
            //            {
            //                long archivoID = archivos[i].key;
            //                List<long> lstHijosID = lstArchivos.Where(w => w.padreID == archivoID).Select(s => s.id).ToList();
            //                for (int y = 0; y < lstHijosID.Count(); y++)
            //                {
            //                    objEstructuraVistaDTO = new EstructuraVistasDTO();
            //                    objEstructuraVistaDTO.key = lstHijosID[y];
            //                    objEstructuraVistaDTO.partsel = true;
            //                    objEstructuraVistaDTO.selected = true;
            //                    objEstructuraVistaDTO.permisos = new PermisosDTO();
            //                    objEstructuraVistaDTO.permisos.puedeSubir = true;
            //                    objEstructuraVistaDTO.permisos.puedeEliminar = true;
            //                    objEstructuraVistaDTO.permisos.puedeDescargarArchivo = true;
            //                    objEstructuraVistaDTO.permisos.puedeDescargarCarpeta = true;
            //                    objEstructuraVistaDTO.permisos.puedeActualizar = true;
            //                    objEstructuraVistaDTO.permisos.puedeCrear = true;
            //                    archivos.Add(objEstructuraVistaDTO);
            //                    contador += 1;
            //                }
            //                hijosCompletos = true;
            //            }
            //        }
            //    }
            //    #endregion

            //    #region SE REGISTRA LOS NUEVOS PERMISOS
            //    List<tblFM_Permiso> lstPermisos = new List<tblFM_Permiso>();
            //    tblFM_Permiso objPermiso = new tblFM_Permiso();

            //    List<tblFM_Permisos_Usuario> lstPermisosUsuario = new List<tblFM_Permisos_Usuario>();
            //    tblFM_Permisos_Usuario objPermisoUsuario = new tblFM_Permisos_Usuario();
            //    foreach (var item in archivos)
            //    {
            //        objPermiso = new tblFM_Permiso();
            //        objPermiso.usuarioID = usuarioID;
            //        objPermiso.archivoID = item.key;
            //        objPermiso.puedeSubir = item.permisos.puedeSubir;
            //        objPermiso.puedeEliminar = item.permisos.puedeEliminar;
            //        objPermiso.puedeDescargarArchivo = item.permisos.puedeDescargarArchivo;
            //        objPermiso.puedeDescargarCarpeta = item.permisos.puedeDescargarCarpeta;
            //        objPermiso.puedeActualizar = item.permisos.puedeActualizar;
            //        objPermiso.puedeCrear = item.permisos.puedeCrear;
            //        objPermiso.estatusVista = 2;
            //        objPermiso.FK_UsuarioCreacion = vSesiones.sesionUsuarioDTO.id;
            //        objPermiso.fechaCreacion = DateTime.Now;
            //        objPermiso.registroActivo = true;
            //        lstPermisos.Add(objPermiso);

            //        objPermisoUsuario = new tblFM_Permisos_Usuario();
            //        objPermisoUsuario.usuarioID = usuarioID;
            //        objPermisoUsuario.archivoID = item.key;
            //        objPermisoUsuario.tipoPermiso = TipoPermisoEnum.GeneralObra;
            //        objPermisoUsuario.puedeSubir = item.permisos.puedeSubir;
            //        objPermisoUsuario.puedeEliminar = item.permisos.puedeEliminar;
            //        objPermisoUsuario.puedeDescargarArchivo = item.permisos.puedeDescargarArchivo;
            //        objPermisoUsuario.puedeDescargarCarpeta = item.permisos.puedeDescargarCarpeta;
            //        objPermisoUsuario.puedeActualizar = item.permisos.puedeActualizar;
            //        objPermisoUsuario.puedeCrear = item.permisos.puedeCrear;
            //        objPermisoUsuario.estatusVista = 2;
            //        objPermisoUsuario.FK_UsuarioCreacion = vSesiones.sesionUsuarioDTO.id;
            //        objPermisoUsuario.fechaCreacion = DateTime.Now;
            //        objPermisoUsuario.registroActivo = true;
            //        lstPermisosUsuario.Add(objPermisoUsuario);
            //    }

            //    _ctx.tblFM_Permiso.AddRange(lstPermisos);
            //    _ctx.tblFM_Permisos_Usuario.AddRange(lstPermisosUsuario);
            //    _ctx.SaveChanges();
            //    #endregion

            //    // SE FINALIZA LA TRANSACCIÓN
            //    resultado.Add(SUCCESS, true);
            //    dbContextTransaction.Commit();

            //    // SE REGISTRA BITACORA
            //    SaveBitacora(0, (int)AccionEnum.AGREGAR, 0, JsonUtils.convertNetObjectToJson(archivos));
            //}
            //catch (Exception e)
            //{
            //    dbContextTransaction.Rollback();
            //    var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
            //    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.AGREGAR, 0, new { usuarioID = usuarioID, archivos = archivos });
            //    resultado.Add(SUCCESS, false);
            //    resultado.Add(MESSAGE, e.Message);
            //}
            #endregion

            #region TERCERA VERSION (SE UTILIZA BULK) - OMAR
            //                using (var _ctx = new MainContext())
            //                {
            //                    List<long> lstPermisosAnteriores = new List<long>();
            //                    List<long> lstPermisosUsuarioAnteriores = new List<long>();
            //                    try
            //                    {
            //                        #region VALIDACIONES
            //                        if (usuarioID <= 0)
            //                            throw new Exception("Ocurrió un error al registrar los permisos.");

            //                        if (archivos == null || archivos.Count() <= 0)
            //                            throw new Exception("Ocurrió un error al registrar los permisos.");
            //                        #endregion

            //                        #region SE ELIMINA LOS PERMISOS ACTUALES
            //                        lstPermisosAnteriores = _ctx.tblFM_Permiso.Where(w => w.usuarioID == usuarioID && w.registroActivo).Select(s => s.id).ToList();
            //                        lstPermisosUsuarioAnteriores = _ctx.tblFM_Permisos_Usuario.Where(w => w.usuarioID == usuarioID && w.registroActivo).Select(s => s.id).ToList();
            //                        StoreProcedureDTO queryEliminarPermisos = new StoreProcedureDTO { nombre = "spFM_EliminarPermisosUsuario" };
            //                        queryEliminarPermisos.parametros.Add(new OdbcParameterDTO { nombre = "userID", tipoSql = SqlDbType.Int, valor = usuarioID });
            //                        queryEliminarPermisos.parametros.Add(new OdbcParameterDTO { nombre = "FK_UsuarioModificacion", tipoSql = SqlDbType.Int, valor = vSesiones.sesionUsuarioDTO.id });
            //                        List<int> cantPermisosExistentes = _ctx.sp_Select<int>(queryEliminarPermisos);
            //                        #endregion

            //                        if ((vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan && archivos[0].key == 2205577 && archivos[0].partsel && archivos[0].selected) ||
            //                             vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia && archivos[0].key == 2937 && archivos[0].partsel && archivos[0].selected ||
            //                             vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru && archivos[0].key == 1 && archivos[0].partsel && archivos[0].selected)
            //                        {
            //                            #region SE OTORGA PERMISO TOTAL AL GESTOR DOCUMENTAL
            //                            StoreProcedureDTO queryPermisoTotalGestorDocumental = new StoreProcedureDTO { nombre = "spFM_PermisoTotalGestorDocumental" };
            //                            queryPermisoTotalGestorDocumental.parametros.Add(new OdbcParameterDTO { nombre = "userID", tipoSql = SqlDbType.Int, valor = usuarioID });
            //                            queryPermisoTotalGestorDocumental.parametros.Add(new OdbcParameterDTO { nombre = "FK_UsuarioCreacion", tipoSql = SqlDbType.Int, valor = vSesiones.sesionUsuarioDTO.id });
            //                            cantPermisosExistentes = _ctx.sp_Select<int>(queryPermisoTotalGestorDocumental);
            //                            #endregion
            //                        }
            //                        else
            //                        {
            //                            #region SE OBTIENE LOS HIJOS DE LAS CARPETAS SELECCIONADAS Y SUS ARCHIVOS
            //                            List<tblFM_Archivo> lstArchivos = _ctx.Select<tblFM_Archivo>(new DapperDTO
            //                            {
            //                                baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
            //                                consulta = @"SELECT t1.id, t1.padreID
            //                	                                        FROM tblFM_Archivo AS t1
            //                	                                        INNER JOIN tblFM_Version AS t2 ON t2.archivoID = t1.id
            //                		                                        WHERE t2.activo = @activo AND t2.obraCerrada = 0",
            //                                parametros = new { activo = true }
            //                            }).ToList();
            //                            List<tblFM_Version> lstDocumentosCargados = _ctx.tblFM_Version.Where(w => w.activo).ToList();
            //                            List<EstructuraVistasDTO> lstEstructurasVistasDTO = new List<EstructuraVistasDTO>();
            //                            EstructuraVistasDTO objEstructuraVistaDTO = new EstructuraVistasDTO();
            //                            int contador = archivos.Count();
            //                            for (int i = 0; i < contador; i++)
            //                            {
            //                                if (archivos[i].partsel && archivos[i].selected)
            //                                {
            //                                    bool hijosCompletos = false;
            //                                    while (!hijosCompletos)
            //                                    {
            //                                        long archivoID = archivos[i].key;
            //                                        List<long> lstHijosID = lstArchivos.Where(w => w.padreID == archivoID).Select(s => s.id).ToList();
            //                                        for (int y = 0; y < lstHijosID.Count(); y++)
            //                                        {
            //                                            // SE VALIDA QUE EL ARCHIVO_ID NO SE ENCUENTRE EN LA LISTA
            //                                            bool yaConsultado = archivos.Any(w => w.key == lstHijosID[y]);
            //                                            if (!yaConsultado)
            //                                            {
            //                                                objEstructuraVistaDTO = new EstructuraVistasDTO();
            //                                                objEstructuraVistaDTO.key = lstHijosID[y];
            //                                                objEstructuraVistaDTO.partsel = true;
            //                                                objEstructuraVistaDTO.selected = true;
            //                                                objEstructuraVistaDTO.permisos = new PermisosDTO();
            //                                                objEstructuraVistaDTO.permisos.puedeSubir = true;
            //                                                objEstructuraVistaDTO.permisos.puedeEliminar = true;
            //                                                objEstructuraVistaDTO.permisos.puedeDescargarArchivo = true;
            //                                                objEstructuraVistaDTO.permisos.puedeDescargarCarpeta = true;
            //                                                objEstructuraVistaDTO.permisos.puedeActualizar = true;
            //                                                objEstructuraVistaDTO.permisos.puedeCrear = true;
            //                                                archivos.Add(objEstructuraVistaDTO);
            //                                                contador += 1;
            //                                            }
            //                                        }
            //                                        hijosCompletos = true;
            //                                    }
            //                                }
            //                            }
            //                            #endregion

            //                            #region SE REGISTRA LOS NUEVOS PERMISOS
            //                            DataTable dtPermisos = new DataTable();
            //                            dtPermisos.Columns.Add("id", System.Type.GetType("System.Int32"));
            //                            dtPermisos.Columns.Add("usuarioID", System.Type.GetType("System.Int32"));
            //                            dtPermisos.Columns.Add("archivoID", System.Type.GetType("System.Int32"));
            //                            dtPermisos.Columns.Add("puedeSubir", System.Type.GetType("System.Int32"));
            //                            dtPermisos.Columns.Add("puedeEliminar", System.Type.GetType("System.Int32"));
            //                            dtPermisos.Columns.Add("puedeDescargarArchivo", System.Type.GetType("System.Int32"));
            //                            dtPermisos.Columns.Add("puedeDescargarCarpeta", System.Type.GetType("System.Int32"));
            //                            dtPermisos.Columns.Add("puedeActualizar", System.Type.GetType("System.Int32"));
            //                            dtPermisos.Columns.Add("puedeCrear", System.Type.GetType("System.Int32"));
            //                            dtPermisos.Columns.Add("estatusVista", System.Type.GetType("System.Int32"));
            //                            dtPermisos.Columns.Add("FK_UsuarioCreacion", System.Type.GetType("System.Int32"));
            //                            dtPermisos.Columns.Add("FK_UsuarioModificacion", System.Type.GetType("System.Int32"));
            //                            dtPermisos.Columns.Add("fechaCreacion", System.Type.GetType("System.DateTime"));
            //                            dtPermisos.Columns.Add("fechaModificacion", System.Type.GetType("System.DateTime"));
            //                            dtPermisos.Columns.Add("registroActivo", System.Type.GetType("System.Boolean"));

            //                            DataTable dtPermisosUsuario = new DataTable();
            //                            dtPermisosUsuario.Columns.Add("id", System.Type.GetType("System.Int32"));
            //                            dtPermisosUsuario.Columns.Add("usuarioID", System.Type.GetType("System.Int32"));
            //                            dtPermisosUsuario.Columns.Add("archivoID", System.Type.GetType("System.Int32"));
            //                            dtPermisosUsuario.Columns.Add("tipoPermiso", System.Type.GetType("System.Int32"));
            //                            dtPermisosUsuario.Columns.Add("puedeSubir", System.Type.GetType("System.Int32"));
            //                            dtPermisosUsuario.Columns.Add("puedeEliminar", System.Type.GetType("System.Int32"));
            //                            dtPermisosUsuario.Columns.Add("puedeDescargarArchivo", System.Type.GetType("System.Int32"));
            //                            dtPermisosUsuario.Columns.Add("puedeDescargarCarpeta", System.Type.GetType("System.Int32"));
            //                            dtPermisosUsuario.Columns.Add("puedeActualizar", System.Type.GetType("System.Int32"));
            //                            dtPermisosUsuario.Columns.Add("puedeCrear", System.Type.GetType("System.Int32"));
            //                            dtPermisosUsuario.Columns.Add("estatusVista", System.Type.GetType("System.Int32"));
            //                            dtPermisosUsuario.Columns.Add("FK_UsuarioCreacion", System.Type.GetType("System.Int32"));
            //                            dtPermisosUsuario.Columns.Add("FK_UsuarioModificacion", System.Type.GetType("System.Int32"));
            //                            dtPermisosUsuario.Columns.Add("fechaCreacion", System.Type.GetType("System.DateTime"));
            //                            dtPermisosUsuario.Columns.Add("fechaModificacion", System.Type.GetType("System.DateTime"));
            //                            dtPermisosUsuario.Columns.Add("registroActivo", System.Type.GetType("System.Boolean"));

            //                            foreach (var item in archivos)
            //                            {
            //                                DataRow rowPermisos = dtPermisos.NewRow();
            //                                rowPermisos["id"] = 0;
            //                                rowPermisos["usuarioID"] = usuarioID;
            //                                rowPermisos["archivoID"] = item.key;
            //                                rowPermisos["puedeSubir"] = item.permisos.puedeSubir;
            //                                rowPermisos["puedeEliminar"] = item.permisos.puedeEliminar;
            //                                rowPermisos["puedeDescargarArchivo"] = item.permisos.puedeDescargarArchivo;
            //                                rowPermisos["puedeDescargarCarpeta"] = item.permisos.puedeDescargarCarpeta;
            //                                rowPermisos["puedeActualizar"] = item.permisos.puedeActualizar;
            //                                rowPermisos["puedeCrear"] = item.permisos.puedeCrear;
            //                                rowPermisos["estatusVista"] = item.partsel && item.selected ? 2 : 1;
            //                                rowPermisos["FK_UsuarioCreacion"] = vSesiones.sesionUsuarioDTO.id;
            //                                rowPermisos["FK_UsuarioModificacion"] = 0;
            //                                rowPermisos["fechaCreacion"] = (object)DBNull.Value;
            //                                rowPermisos["fechaModificacion"] = (object)DBNull.Value;
            //                                rowPermisos["registroActivo"] = true;
            //                                dtPermisos.Rows.Add(rowPermisos);

            //                                DataRow rowPermisosUsuario = dtPermisosUsuario.NewRow();
            //                                rowPermisosUsuario["id"] = 0;
            //                                rowPermisosUsuario["usuarioID"] = usuarioID;
            //                                rowPermisosUsuario["archivoID"] = item.key;
            //                                rowPermisosUsuario["tipoPermiso"] = TipoPermisoEnum.GeneralObra;
            //                                rowPermisosUsuario["puedeSubir"] = item.permisos.puedeSubir;
            //                                rowPermisosUsuario["puedeEliminar"] = item.permisos.puedeEliminar;
            //                                rowPermisosUsuario["puedeDescargarArchivo"] = item.permisos.puedeDescargarArchivo;
            //                                rowPermisosUsuario["puedeDescargarCarpeta"] = item.permisos.puedeDescargarCarpeta;
            //                                rowPermisosUsuario["puedeActualizar"] = item.permisos.puedeActualizar;
            //                                rowPermisosUsuario["puedeCrear"] = item.permisos.puedeCrear;
            //                                rowPermisosUsuario["estatusVista"] = item.partsel && item.selected ? 2 : 1;
            //                                rowPermisosUsuario["FK_UsuarioCreacion"] = vSesiones.sesionUsuarioDTO.id;
            //                                rowPermisosUsuario["FK_UsuarioModificacion"] = 0;
            //                                rowPermisosUsuario["fechaCreacion"] = (object)DBNull.Value;
            //                                rowPermisosUsuario["fechaModificacion"] = (object)DBNull.Value;
            //                                rowPermisosUsuario["registroActivo"] = true;
            //                                dtPermisosUsuario.Rows.Add(rowPermisosUsuario);
            //                            }

            //                            string stringCon = string.Empty;
            //                            switch (vSesiones.sesionEmpresaActual)
            //                            {
            //                                case (int)EmpresaEnum.Construplan:
            //                                    stringCon = System.Configuration.ConfigurationManager.ConnectionStrings["MainContext"].ConnectionString;
            //                                    break;
            //                                case (int)EmpresaEnum.Arrendadora:
            //                                    stringCon = System.Configuration.ConfigurationManager.ConnectionStrings["MainContextArrendadora"].ConnectionString;
            //                                    break;
            //                                case (int)EmpresaEnum.Colombia:
            //                                    stringCon = System.Configuration.ConfigurationManager.ConnectionStrings["MainContextColombia"].ConnectionString;
            //                                    break;
            //                                case (int)EmpresaEnum.Peru:
            //                                    stringCon = System.Configuration.ConfigurationManager.ConnectionStrings["MainContextPeru"].ConnectionString;
            //                                    break;
            //                            }

            //                            using (SqlConnection cn = new SqlConnection(stringCon))
            //                            {
            //                                cn.Open();
            //                                using (SqlBulkCopy bulkCopy = new SqlBulkCopy(cn))
            //                                {
            //                                    bulkCopy.DestinationTableName = "dbo.tblFM_Permiso";
            //                                    bulkCopy.WriteToServer(dtPermisos);
            //                                }
            //                                cn.Close();

            //                                cn.Open();
            //                                using (SqlBulkCopy bulkCopy = new SqlBulkCopy(cn))
            //                                {
            //                                    bulkCopy.DestinationTableName = "dbo.tblFM_Permisos_Usuario";
            //                                    bulkCopy.WriteToServer(dtPermisosUsuario);
            //                                }
            //                                cn.Close();
            //                            }
            //                            #endregion
            //                        }

            //                        resultado.Add(SUCCESS, true);
            //                        resultado.Add(MESSAGE, "Se ha registrado con éxito los permisos.");

            //                        // SE REGISTRA BITACORA
            //                        SaveBitacora(0, (int)AccionEnum.AGREGAR, 0, JsonUtils.convertNetObjectToJson(archivos));
            //                    }
            //                    catch (Exception e)
            //                    {
            //                        // SE ACTIVA DE NUEVO LOS PERMISOS AL USUARIO, PORQUE NO SE PUDO REGISTRAR LOS NUEVOS PERMISOS
            //                        RestablecerPermisosUsuario(lstPermisosAnteriores, lstPermisosUsuarioAnteriores);

            //                        var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
            //                        LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.AGREGAR, 0, new { usuarioID = usuarioID, archivos = archivos });
            //                        resultado.Add(SUCCESS, false);
            //                        resultado.Add(MESSAGE, e.Message);
            //                    }
            //                }
            //                return resultado;
            #endregion

            #region TERCERA VERSION (SE UTILIZA BULK)
            using (var _ctx = new MainContext())
            {
                List<long> lstPermisosAnteriores = new List<long>();
                List<long> lstPermisosUsuarioAnteriores = new List<long>();
                try
                {
                    #region VALIDACIONES
                    if (usuarioID <= 0)
                        throw new Exception("Ocurrió un error al registrar los permisos.");
                    #endregion

                    #region SE ELIMINA LOS PERMISOS ACTUALES
                    lstPermisosAnteriores = _ctx.tblFM_Permiso.Where(w => w.usuarioID == usuarioID && w.registroActivo).Select(s => s.id).ToList();
                    lstPermisosUsuarioAnteriores = _ctx.tblFM_Permisos_Usuario.Where(w => w.usuarioID == usuarioID && w.registroActivo).Select(s => s.id).ToList();
                    StoreProcedureDTO queryEliminarPermisos = new StoreProcedureDTO { nombre = "spFM_EliminarPermisosUsuario" };
                    queryEliminarPermisos.parametros.Add(new OdbcParameterDTO { nombre = "userID", tipoSql = SqlDbType.Int, valor = usuarioID });
                    queryEliminarPermisos.parametros.Add(new OdbcParameterDTO { nombre = "FK_UsuarioModificacion", tipoSql = SqlDbType.Int, valor = vSesiones.sesionUsuarioDTO.id });
                    List<int> cantPermisosExistentes = _ctx.sp_Select<int>(queryEliminarPermisos);
                    #endregion

                    if (archivos != null)
                    {
                        if ((vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan && archivos[0].key == 2205577 && archivos[0].partsel && archivos[0].selected) ||
                                vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia && archivos[0].key == 2937 && archivos[0].partsel && archivos[0].selected ||
                                vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru && archivos[0].key == 1 && archivos[0].partsel && archivos[0].selected)
                        {
                            #region SE OTORGA PERMISO TOTAL AL GESTOR DOCUMENTAL
                            StoreProcedureDTO queryPermisoTotalGestorDocumental = new StoreProcedureDTO { nombre = "spFM_PermisoTotalGestorDocumental" };
                            queryPermisoTotalGestorDocumental.parametros.Add(new OdbcParameterDTO { nombre = "userID", tipoSql = SqlDbType.Int, valor = usuarioID });
                            queryPermisoTotalGestorDocumental.parametros.Add(new OdbcParameterDTO { nombre = "FK_UsuarioCreacion", tipoSql = SqlDbType.Int, valor = vSesiones.sesionUsuarioDTO.id });
                            cantPermisosExistentes = _ctx.sp_Select<int>(queryPermisoTotalGestorDocumental);
                            #endregion
                        }
                        else
                        {
                            #region SE OBTIENE LOS HIJOS DE LAS CARPETAS SELECCIONADAS Y SUS ARCHIVO VERSION PRUEBA CON H
                            List<EstructuraVistasDTO> listaTemporalDeArchivos = new List<EstructuraVistasDTO>();
                            List<long> listaDeIDSProcesados = new List<long>();
                            foreach (var folder in archivos.Where(w => w.partsel && w.selected))
                            {
                                if (listaDeIDSProcesados.Contains(folder.key))
                                    continue;

                                List<EstructuraVistasDTO> arbol = _context.Select<EstructuraVistasDTO>(new DapperDTO
                                {
                                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                                    consulta = @"
                                    DECLARE @carpeta HIERARCHYID
                                    SELECT
                                        @carpeta = h
                                    FROM
                                        tblFM_Archivo
                                    WHERE
                                        id = @paramArchivoID
                                    SELECT
                                        id AS [key],
                                        1 AS partsel,
                                        1 AS selected,
                                        @paramPuedeSubir AS puedeSubir,
                                        @paramPuedeEliminar AS puedeEliminar,
                                        @paramPuedeDescargarArchivo AS puedeDescargarArchivo,
                                        @paramPuedeDescargarCarpeta AS puedeDescargarCarpeta,
                                        @paramPuedeActualizar AS puedeActualizar,
                                        @paramPuedeCrear AS puedeCrear
                                    FROM
                                        tblFM_Archivo
                                    WHERE
                                        h.IsDescendantOf(@carpeta) = 1",
                                    parametros = new
                                    {
                                        paramPuedeSubir = folder.permisos.puedeSubir,
                                        paramPuedeEliminar = folder.permisos.puedeEliminar,
                                        paramPuedeDescargarArchivo = folder.permisos.puedeDescargarArchivo,
                                        paramPuedeDescargarCarpeta = folder.permisos.puedeDescargarCarpeta,
                                        paramPuedeActualizar = folder.permisos.puedeActualizar,
                                        paramPuedeCrear = folder.permisos.puedeCrear,
                                        paramArchivoID = folder.key
                                    }
                                });

                                if (arbol.Count > 0)
                                {
                                    arbol.RemoveAt(0);
                                    listaDeIDSProcesados.AddRange(arbol.Select(x => x.key).ToList());
                                    listaTemporalDeArchivos.AddRange(arbol);
                                }
                            }
                            archivos.AddRange(listaTemporalDeArchivos);
                            #endregion

                            #region SE REGISTRA LOS NUEVOS PERMISOS
                            List<tblFM_Permiso> lstPermisos = new List<tblFM_Permiso>();
                            tblFM_Permiso objPermiso = new tblFM_Permiso();

                            List<tblFM_Permisos_Usuario> lstPermisosUsuario = new List<tblFM_Permisos_Usuario>();
                            tblFM_Permisos_Usuario objPermisoUsuario = new tblFM_Permisos_Usuario();
                            foreach (var item in archivos)
                            {
                                objPermiso = new tblFM_Permiso();
                                objPermisoUsuario = new tblFM_Permisos_Usuario();

                                if (item.permisos != null)
                                {
                                    objPermiso.puedeSubir = item.permisos.puedeSubir;
                                    objPermiso.puedeEliminar = item.permisos.puedeEliminar;
                                    objPermiso.puedeDescargarArchivo = item.permisos.puedeDescargarArchivo;
                                    objPermiso.puedeDescargarCarpeta = item.permisos.puedeDescargarCarpeta;
                                    objPermiso.puedeActualizar = item.permisos.puedeActualizar;
                                    objPermiso.puedeCrear = item.permisos.puedeCrear;

                                    objPermisoUsuario.puedeSubir = item.permisos.puedeSubir;
                                    objPermisoUsuario.puedeEliminar = item.permisos.puedeEliminar;
                                    objPermisoUsuario.puedeDescargarArchivo = item.permisos.puedeDescargarArchivo;
                                    objPermisoUsuario.puedeDescargarCarpeta = item.permisos.puedeDescargarCarpeta;
                                    objPermisoUsuario.puedeActualizar = item.permisos.puedeActualizar;
                                    objPermisoUsuario.puedeCrear = item.permisos.puedeCrear;
                                }
                                else
                                {
                                    objPermiso.puedeSubir = item.permisos != null ? item.permisos.puedeSubir : item.puedeSubir;
                                    objPermiso.puedeEliminar = item.puedeEliminar;
                                    objPermiso.puedeDescargarArchivo = item.puedeDescargarArchivo;
                                    objPermiso.puedeDescargarCarpeta = item.puedeDescargarCarpeta;
                                    objPermiso.puedeActualizar = item.puedeActualizar;
                                    objPermiso.puedeCrear = item.puedeCrear;

                                    objPermisoUsuario.puedeSubir = item.puedeSubir;
                                    objPermisoUsuario.puedeEliminar = item.puedeEliminar;
                                    objPermisoUsuario.puedeDescargarArchivo = item.puedeDescargarArchivo;
                                    objPermisoUsuario.puedeDescargarCarpeta = item.puedeDescargarCarpeta;
                                    objPermisoUsuario.puedeActualizar = item.puedeActualizar;
                                    objPermisoUsuario.puedeCrear = item.puedeCrear;
                                }

                                objPermiso.usuarioID = usuarioID;
                                objPermiso.archivoID = item.key;
                                objPermiso.estatusVista = item.partsel && item.selected ? 2 : 1;
                                objPermiso.FK_UsuarioCreacion = vSesiones.sesionUsuarioDTO.id;
                                objPermiso.fechaCreacion = DateTime.Now;
                                objPermiso.registroActivo = true;
                                lstPermisos.Add(objPermiso);

                                objPermisoUsuario.usuarioID = usuarioID;
                                objPermisoUsuario.archivoID = item.key;
                                objPermisoUsuario.tipoPermiso = TipoPermisoEnum.GeneralObra;
                                objPermisoUsuario.estatusVista = item.partsel && item.selected ? 2 : 1;
                                objPermisoUsuario.FK_UsuarioCreacion = vSesiones.sesionUsuarioDTO.id;
                                objPermisoUsuario.fechaCreacion = DateTime.Now;
                                objPermisoUsuario.registroActivo = true;
                                lstPermisosUsuario.Add(objPermisoUsuario);
                            }

                            #region INIT DATATABLE
                            DataTable dtPermisos = new DataTable();
                            dtPermisos.Columns.Add("id", System.Type.GetType("System.Int32"));
                            dtPermisos.Columns.Add("usuarioID", System.Type.GetType("System.Int32"));
                            dtPermisos.Columns.Add("archivoID", System.Type.GetType("System.Int32"));
                            dtPermisos.Columns.Add("puedeSubir", System.Type.GetType("System.Int32"));
                            dtPermisos.Columns.Add("puedeEliminar", System.Type.GetType("System.Int32"));
                            dtPermisos.Columns.Add("puedeDescargarArchivo", System.Type.GetType("System.Int32"));
                            dtPermisos.Columns.Add("puedeDescargarCarpeta", System.Type.GetType("System.Int32"));
                            dtPermisos.Columns.Add("puedeActualizar", System.Type.GetType("System.Int32"));
                            dtPermisos.Columns.Add("puedeCrear", System.Type.GetType("System.Int32"));
                            dtPermisos.Columns.Add("estatusVista", System.Type.GetType("System.Int32"));
                            dtPermisos.Columns.Add("FK_UsuarioCreacion", System.Type.GetType("System.Int32"));
                            dtPermisos.Columns.Add("FK_UsuarioModificacion", System.Type.GetType("System.Int32"));
                            dtPermisos.Columns.Add("fechaCreacion", System.Type.GetType("System.DateTime"));
                            dtPermisos.Columns.Add("fechaModificacion", System.Type.GetType("System.DateTime"));
                            dtPermisos.Columns.Add("registroActivo", System.Type.GetType("System.Boolean"));

                            DataTable dtPermisosUsuario = new DataTable();
                            dtPermisosUsuario.Columns.Add("id", System.Type.GetType("System.Int32"));
                            dtPermisosUsuario.Columns.Add("usuarioID", System.Type.GetType("System.Int32"));
                            dtPermisosUsuario.Columns.Add("archivoID", System.Type.GetType("System.Int32"));
                            dtPermisosUsuario.Columns.Add("tipoPermiso", System.Type.GetType("System.Int32"));
                            dtPermisosUsuario.Columns.Add("puedeSubir", System.Type.GetType("System.Int32"));
                            dtPermisosUsuario.Columns.Add("puedeEliminar", System.Type.GetType("System.Int32"));
                            dtPermisosUsuario.Columns.Add("puedeDescargarArchivo", System.Type.GetType("System.Int32"));
                            dtPermisosUsuario.Columns.Add("puedeDescargarCarpeta", System.Type.GetType("System.Int32"));
                            dtPermisosUsuario.Columns.Add("puedeActualizar", System.Type.GetType("System.Int32"));
                            dtPermisosUsuario.Columns.Add("puedeCrear", System.Type.GetType("System.Int32"));
                            dtPermisosUsuario.Columns.Add("estatusVista", System.Type.GetType("System.Int32"));
                            dtPermisosUsuario.Columns.Add("FK_UsuarioCreacion", System.Type.GetType("System.Int32"));
                            dtPermisosUsuario.Columns.Add("FK_UsuarioModificacion", System.Type.GetType("System.Int32"));
                            dtPermisosUsuario.Columns.Add("fechaCreacion", System.Type.GetType("System.DateTime"));
                            dtPermisosUsuario.Columns.Add("fechaModificacion", System.Type.GetType("System.DateTime"));
                            dtPermisosUsuario.Columns.Add("registroActivo", System.Type.GetType("System.Boolean"));
                            #endregion

                            foreach (var item in lstPermisos)
                            {
                                DataRow rowPermisos = dtPermisos.NewRow();
                                rowPermisos["id"] = 0;
                                rowPermisos["usuarioID"] = usuarioID;
                                rowPermisos["archivoID"] = item.archivoID;
                                rowPermisos["puedeSubir"] = item.puedeSubir;
                                rowPermisos["puedeEliminar"] = item.puedeEliminar;
                                rowPermisos["puedeDescargarArchivo"] = item.puedeDescargarArchivo;
                                rowPermisos["puedeDescargarCarpeta"] = item.puedeDescargarCarpeta;
                                rowPermisos["puedeActualizar"] = item.puedeActualizar;
                                rowPermisos["puedeCrear"] = item.puedeCrear;
                                rowPermisos["estatusVista"] = item.estatusVista;
                                rowPermisos["FK_UsuarioCreacion"] = vSesiones.sesionUsuarioDTO.id;
                                rowPermisos["FK_UsuarioModificacion"] = 0;
                                rowPermisos["fechaCreacion"] = (object)DBNull.Value;
                                rowPermisos["fechaModificacion"] = (object)DBNull.Value;
                                rowPermisos["registroActivo"] = true;
                                dtPermisos.Rows.Add(rowPermisos);
                            }

                            foreach (var item in lstPermisosUsuario)
                            {
                                DataRow rowPermisosUsuario = dtPermisosUsuario.NewRow();
                                rowPermisosUsuario["id"] = 0;
                                rowPermisosUsuario["usuarioID"] = usuarioID;
                                rowPermisosUsuario["archivoID"] = item.archivoID;
                                rowPermisosUsuario["tipoPermiso"] = TipoPermisoEnum.GeneralObra;
                                rowPermisosUsuario["puedeSubir"] = item.puedeSubir;
                                rowPermisosUsuario["puedeEliminar"] = item.puedeEliminar;
                                rowPermisosUsuario["puedeDescargarArchivo"] = item.puedeDescargarArchivo;
                                rowPermisosUsuario["puedeDescargarCarpeta"] = item.puedeDescargarCarpeta;
                                rowPermisosUsuario["puedeActualizar"] = item.puedeActualizar;
                                rowPermisosUsuario["puedeCrear"] = item.puedeCrear;
                                rowPermisosUsuario["estatusVista"] = item.estatusVista;
                                rowPermisosUsuario["FK_UsuarioCreacion"] = vSesiones.sesionUsuarioDTO.id;
                                rowPermisosUsuario["FK_UsuarioModificacion"] = 0;
                                rowPermisosUsuario["fechaCreacion"] = (object)DBNull.Value;
                                rowPermisosUsuario["fechaModificacion"] = (object)DBNull.Value;
                                rowPermisosUsuario["registroActivo"] = true;
                                dtPermisosUsuario.Rows.Add(rowPermisosUsuario);
                            }

                            string stringCon = string.Empty;
                            switch (vSesiones.sesionEmpresaActual)
                            {
                                case (int)EmpresaEnum.Construplan:
                                    stringCon = System.Configuration.ConfigurationManager.ConnectionStrings["MainContext"].ConnectionString;
                                    break;
                                case (int)EmpresaEnum.Arrendadora:
                                    stringCon = System.Configuration.ConfigurationManager.ConnectionStrings["MainContextArrendadora"].ConnectionString;
                                    break;
                                case (int)EmpresaEnum.Colombia:
                                    stringCon = System.Configuration.ConfigurationManager.ConnectionStrings["MainContextColombia"].ConnectionString;
                                    break;
                                case (int)EmpresaEnum.Peru:
                                    stringCon = System.Configuration.ConfigurationManager.ConnectionStrings["MainContextPeru"].ConnectionString;
                                    break;
                            }

                            using (SqlConnection cn = new SqlConnection(stringCon))
                            {
                                cn.Open();
                                using (SqlBulkCopy bulkCopy = new SqlBulkCopy(cn))
                                {
                                    bulkCopy.DestinationTableName = "dbo.tblFM_Permiso";
                                    bulkCopy.WriteToServer(dtPermisos);
                                }
                                cn.Close();

                                cn.Open();
                                using (SqlBulkCopy bulkCopy = new SqlBulkCopy(cn))
                                {
                                    bulkCopy.DestinationTableName = "dbo.tblFM_Permisos_Usuario";
                                    bulkCopy.WriteToServer(dtPermisosUsuario);
                                }
                                cn.Close();
                            }
                            #endregion
                        }
                    }

                    resultado.Add(SUCCESS, true);
                    resultado.Add(MESSAGE, "Se ha registrado con éxito los permisos.");

                    // SE REGISTRA BITACORA
                    SaveBitacora(0, (int)AccionEnum.AGREGAR, 0, JsonUtils.convertNetObjectToJson(archivos));
                }
                catch (Exception e)
                {
                    // SE ACTIVA DE NUEVO LOS PERMISOS AL USUARIO, PORQUE NO SE PUDO REGISTRAR LOS NUEVOS PERMISOS
                    RestablecerPermisosUsuario(usuarioID, lstPermisosAnteriores, lstPermisosUsuarioAnteriores);

                    var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.AGREGAR, 0, new { usuarioID = usuarioID, archivos = archivos });
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                }
            }
            return resultado;
            #endregion
        }

        private void RestablecerPermisosUsuario(int usuarioID, List<long> lstPermisosAnteriores, List<long> lstPermisosUsuarioAnteriores)
        {
            //try
            //{
            //    using (var _ctx = new MainContext(vSesiones.sesionEmpresaActual))
            //    {
            //        List<tblFM_Permiso> lstPermisos = _context.Select<tblFM_Permiso>(new DapperDTO
            //        {
            //            baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
            //            consulta = @"SELECT * FROM tblFM_Permiso WHERE registroActivo = @registroActivo AND archivoID IN (@archivoID)",
            //            parametros = new { registroActivo = 0, archivoID = string.Join(",", lstPermisosAnteriores) }
            //        }).ToList();

            //        List<tblFM_Permisos_Usuario> lstPermisosUsuario = _context.Select<tblFM_Permisos_Usuario>(new DapperDTO
            //        {
            //            baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
            //            consulta = @"SELECT * FROM tblFM_Permisos_Usuario WHERE registroActivo = @registroActivo AND archivoID IN (@archivoID)",
            //            parametros = new { registroActivo = 0, archivoID = string.Join(",", lstPermisosUsuarioAnteriores) }
            //        }).ToList();

            //        lstPermisos.ForEach(f => f.registroActivo = true);
            //        lstPermisosUsuario.ForEach(f => f.registroActivo = true);

            //        _ctx.SaveChanges();
            //    }
            //}
            //catch (Exception e)
            //{
            //    var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
            //    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.ACTUALIZAR, 0, new { lstPermisosAnteriores = lstPermisosAnteriores, lstPermisosUsuarioAnteriores = lstPermisosUsuarioAnteriores });
            //}
        }

        public Dictionary<string, object> GuardarPermisosEspeciales(List<tblFM_PermisoEspecial> permisosEspeciales)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                int usuarioActualID = vSesiones.sesionUsuarioDTO.id;
                //try
                //{
                if (permisosEspeciales == null || permisosEspeciales.Count == 0)
                {
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, "Información para guardar permisos especiales incompleta.");
                    return resultado;
                }

                int usuarioID = permisosEspeciales.First().usuarioID;
                TipoPermisoEnum tipoPermiso = permisosEspeciales.First().tipoPermiso;

                listaAdminIds = ObtenerAdminsIdsGestor();
                if (listaAdminIds.Contains(usuarioID))
                {
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, "No se pueden asignar permisos a un usuario tipo Administrador.");
                    return resultado;
                }

                // Verifica si se le puede agregar el permiso al usuario.
                var permisosExistentes = _context.tblFM_PermisoEspecial.Where(x => x.usuarioID == usuarioID).ToList();

                foreach (var permiso in permisosEspeciales)
                {
                    var noPuedeTenerPermiso = NoPuedeTenerPermiso(permiso, permisosExistentes);
                    if (noPuedeTenerPermiso.Item1)
                    {
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, noPuedeTenerPermiso.Item2);
                        return resultado;
                    }
                }

                // Si el usuario ya tenía permisos, se verifica sí se actualiza alguno.
                if (permisosExistentes.Count > 0)
                {
                    foreach (var nuevoPermiso in permisosEspeciales)
                    {
                        var permisoExistente = permisosExistentes
                            .FirstOrDefault(x => x.usuarioID == usuarioID &&
                                x.tipoPermiso == nuevoPermiso.tipoPermiso &&
                                x.entidadID == nuevoPermiso.entidadID);

                        // Si el registro ya existe, lo elimina, y se da de alta el nuevo 
                        // (para actualizar los privilegios).
                        if (permisoExistente != null)
                        {
                            _context.tblFM_PermisoEspecial.Remove(permisoExistente);
                            _context.SaveChanges();
                        }
                    }
                }

                permisosEspeciales.ForEach(permisoEspecial =>
                {
                    permisoEspecial.usuarioCreadorID = usuarioActualID;
                    permisoEspecial.fechaCreacion = DateTime.Now;
                });

                // En caso de ser permiso a nivel división, subdivisión u obra, se actualizan los registros de permiso de los archivos
                if (tipoPermiso == TipoPermisoEnum.GeneralDivision || tipoPermiso == TipoPermisoEnum.GeneralSubdivision || tipoPermiso == TipoPermisoEnum.GeneralObra)
                {
                    permisosEspeciales.ForEach(permisoEspecial =>
                    {
                        ActualizarPermisosPorPermisoGeneral(permisoEspecial);
                    });


                    // Dependiendo del permiso (división, subdivisión u obra) se actualiza el estatus de 
                    // la vista padre de la carpeta raíz.
                    if (tipoPermiso == TipoPermisoEnum.GeneralDivision)
                    {
                        var versiones = _context.tblFM_Version.Where(x => x.activo && x.archivo.tipoCarpeta == TipoCarpetaEnum.Año).ToList();
                        foreach (var version in versiones)
                        {
                            ActualizarEstatusVistasPadresAsignacion(version.archivoID, usuarioID);
                        }
                    }
                    else if (tipoPermiso == TipoPermisoEnum.GeneralObra)
                    {
                        var obras = permisosEspeciales.Select(x => x.entidadID).ToList();

                        var versiones = _context.tblFM_Version
                            .Where(x =>
                                x.activo &&
                                x.archivo.tipoCarpeta == TipoCarpetaEnum.Obra &&
                                x.archivo.ccID != 0 &&
                                obras.Contains(x.archivo.ccID))
                            .ToList();

                        foreach (var version in versiones)
                        {
                            ActualizarEstatusVistasPadresAsignacion(version.archivoID, usuarioID);
                        }
                    }
                    else if (tipoPermiso == TipoPermisoEnum.GeneralSubdivision)
                    {
                        var subdivisiones = permisosEspeciales.Select(x => x.entidadID).ToList();

                        var versiones = _context.tblFM_Version
                            .Where(x =>
                                x.activo &&
                                x.archivo.tipoCarpeta == TipoCarpetaEnum.Subdivision
                                && x.archivo.ccID != 0 &&
                                subdivisiones.Contains(x.archivo.subdivisionID))
                            .ToList();

                        foreach (var version in versiones)
                        {
                            ActualizarEstatusVistasPadresAsignacion(version.archivoID, usuarioID);
                        }
                    }
                }
                // Si el tipo de permiso es de seguridad, se actualizan los registros de los archivos que pertenezcan a seguridad.
                else if (tipoPermiso == TipoPermisoEnum.Seguridad || tipoPermiso == TipoPermisoEnum.SeguridadAdmin)
                {
                    ActualizarPermisosPorPermisoSeguridad(permisosEspeciales.FirstOrDefault());

                    var listaPermisosUsuario = _context.tblFM_Permiso.Where(x => x.usuarioID == usuarioID).ToList();

                    bool puedeEliminar = permisosEspeciales.FirstOrDefault().tipoPermiso == TipoPermisoEnum.SeguridadAdmin;

                    foreach (var permisoEspecial in permisosEspeciales)
                    {
                        permisoEspecial.puedeSubir = true;
                        permisoEspecial.puedeEliminar = puedeEliminar;
                        permisoEspecial.puedeDescargarArchivo = true;
                        permisoEspecial.puedeDescargarCarpeta = true;
                        permisoEspecial.puedeActualizar = true;
                        permisoEspecial.puedeCrear = true;
                    }

                    // Se actualiza el estatus de las vistas padres (a partir de la carpeta seguridad).
                    List<tblFM_Archivo> listaArchivos = (from archivo in _context.tblFM_Archivo
                                                         where archivo.tipoCarpeta == TipoCarpetaEnum.BaseObra && archivo.perteneceSeguridad
                                                         select archivo)
                                                        .ToList();
                    foreach (var archivo in listaArchivos)
                    {
                        ActualizarEstatusVistasPadresAsignacion(archivo.padreID, usuarioID);
                    }
                }

                // Se agregan los nuevos permisos para el usuario.
                _context.tblFM_PermisoEspecial.AddRange(permisosEspeciales);

                _context.SaveChanges();
                resultado.Add(SUCCESS, true);
                dbContextTransaction.Commit();
                //}
                //catch (Exception e)
                //{
                //    dbContextTransaction.Rollback();
                //    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR,"GuardarPermisosEspeciales", e, AccionEnum.ACTUALIZAR, usuarioActualID, null);
                //    resultado.Add(SUCCESS, false);
                //    resultado.Add(MESSAGE, "Ocurrió un error interno al intentar guardar los permisos especiales en el servidor.");
                //}
            }

            return resultado;
        }

        private Tuple<bool, string> NoPuedeTenerPermiso(tblFM_PermisoEspecial nuevoPermiso, List<tblFM_PermisoEspecial> permisosUsuario)
        {
            if (nuevoPermiso.tipoPermiso == TipoPermisoEnum.Seguridad || nuevoPermiso.tipoPermiso == TipoPermisoEnum.SeguridadAdmin)
            {
                if (permisosUsuario.Count > 0)
                {
                    return Tuple.Create(true, "No se puede asignar un permiso de seguridad si ya tiene otro permiso especial.");
                }
            }
            else if (nuevoPermiso.tipoPermiso == TipoPermisoEnum.GeneralDivision || nuevoPermiso.tipoPermiso == TipoPermisoEnum.GeneralObra || nuevoPermiso.tipoPermiso == TipoPermisoEnum.GeneralSubdivision)
            {
                if (permisosUsuario.Any(x => x.tipoPermiso == TipoPermisoEnum.Seguridad || x.tipoPermiso == TipoPermisoEnum.SeguridadAdmin))
                {
                    return Tuple.Create(true, "No se puede asignar un permiso especial si ya tiene un permiso de seguridad.");
                }
            }

            return Tuple.Create(false, String.Empty);
        }

        public Dictionary<string, object> EliminarPermisoEspecial(int permisoID)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    if (permisoID == 0)
                    {
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "Información para eliminar permiso especial incompleta.");
                        return resultado;
                    }

                    var permisoPorEliminar = _context.tblFM_PermisoEspecial
                        .FirstOrDefault(x => x.id == permisoID);

                    if (permisoPorEliminar == null)
                    {
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "No se encontró el permiso a eliminar del usuario.");
                        return resultado;
                    }

                    var listaPermisosUsuario = _context.tblFM_Permiso.Where(x => x.usuarioID == permisoPorEliminar.usuarioID).ToList();

                    if (permisoPorEliminar.tipoPermiso == TipoPermisoEnum.GeneralDivision || permisoPorEliminar.tipoPermiso == TipoPermisoEnum.GeneralSubdivision || permisoPorEliminar.tipoPermiso == TipoPermisoEnum.GeneralObra)
                    {
                        EliminarPermisoGeneral(permisoPorEliminar);

                        if (permisoPorEliminar.tipoPermiso == TipoPermisoEnum.GeneralDivision)
                        {
                            var version = _context.tblFM_Version.FirstOrDefault(x => x.activo && x.archivo.tipoCarpeta == TipoCarpetaEnum.Division);
                            ActualizarEstatusVistasPadresDesasignacion(version.archivo.padreID, permisoPorEliminar.usuarioID);
                        }
                        else
                        {
                            var divisionesIds = _context.tblFM_Version.Where(x => x.activo && ((x.archivo.tipoCarpeta == TipoCarpetaEnum.Obra && x.archivo.ccID != 0) || x.archivo.tipoCarpeta == TipoCarpetaEnum.Subdivision))
                                .Select(x => x.archivo.padreID)
                                .Distinct()
                                .ToList();
                            foreach (var obra in divisionesIds)
                            {
                                ActualizarEstatusVistasPadresDesasignacion(obra, permisoPorEliminar.usuarioID);
                            }
                        }

                    }
                    else if (permisoPorEliminar.tipoPermiso == TipoPermisoEnum.Seguridad || permisoPorEliminar.tipoPermiso == TipoPermisoEnum.SeguridadAdmin)
                    {
                        EliminarPermisoSeguridad(permisoPorEliminar);

                        // Se actualiza el estatus de las vistas padres (a partir de la carpeta seguridad).
                        List<tblFM_Archivo> listaArchivos = (from archivo in _context.tblFM_Archivo
                                                             where archivo.tipoCarpeta == TipoCarpetaEnum.BaseObra && archivo.perteneceSeguridad
                                                             select archivo)
                                                            .ToList();
                        foreach (var archivo in listaArchivos)
                        {
                            ActualizarEstatusVistasPadresDesasignacion(archivo.padreID, permisoPorEliminar.usuarioID);
                        }
                    }

                    _context.SaveChanges();
                    resultado.Add(SUCCESS, true);
                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "EliminarPermisoEspecial", e, AccionEnum.ELIMINAR, vSesiones.sesionUsuarioDTO.id, null);
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, "Ocurrió un error interno al intentar eliminar el permiso especial en el servidor.");
                }
            }

            return resultado;
        }

        public Dictionary<string, object> ObtenerUsuariosPermisosEspeciales()
        {
            try
            {
                _context.Configuration.AutoDetectChangesEnabled = false;

                List<ComboDTO> permisosEspeciales = new List<ComboDTO>();

                _context.tblFM_PermisoEspecial.ToList().ForEach(permisoEspecial =>
                {
                    tblP_Usuario objUsuario = _context.tblP_Usuario.FirstOrDefault(x => permisoEspecial.usuarioID == x.id);

                    var nombreUsuario = String.Format("{0} {1} {2}",
                                                        !string.IsNullOrEmpty(objUsuario.nombre) ? objUsuario.nombre : string.Empty,
                                                        !string.IsNullOrEmpty(objUsuario.apellidoPaterno) ? objUsuario.apellidoPaterno : string.Empty,
                                                        !string.IsNullOrEmpty(objUsuario.apellidoMaterno) ? objUsuario.apellidoMaterno : string.Empty);
                    var nombrePermiso = permisoEspecial.tipoPermiso.GetDescription();
                    if (nombrePermiso == null)
                        throw new Exception("Ocurrió un error al obtener el nombrePermiso.");

                    string nombreEntidad = string.Empty;
                    if (permisoEspecial.tipoPermiso == TipoPermisoEnum.GeneralDivision)
                    {
                        tblP_Division division = _context.tblP_Division.FirstOrDefault(x => x.id == permisoEspecial.entidadID);
                        if (division != null)
                        {
                            if (!string.IsNullOrEmpty(division.descripcion))
                                nombreEntidad = String.Format("({0})", division.descripcion);
                        }
                    }
                    else if (permisoEspecial.tipoPermiso == TipoPermisoEnum.GeneralSubdivision)
                    {
                        tblP_Subdivision subdivision = _context.tblP_Subdivision.FirstOrDefault(x => x.id == permisoEspecial.entidadID);
                        if (subdivision != null)
                        {
                            if (!string.IsNullOrEmpty(subdivision.descripcion))
                                nombreEntidad = String.Format("({0})", subdivision.descripcion);
                        }
                    }
                    else if (permisoEspecial.tipoPermiso == TipoPermisoEnum.GeneralObra)
                    {
                        tblP_CC obra = _context.tblP_CC.FirstOrDefault(x => x.id == permisoEspecial.entidadID);
                        if (obra != null)
                        {
                            if (!string.IsNullOrEmpty(obra.cc) && !string.IsNullOrEmpty(obra.descripcion))
                                nombreEntidad = String.Format("({0} - {1})", obra.cc, obra.descripcion);
                        }
                    }

                    if (!string.IsNullOrEmpty(nombreUsuario) && !string.IsNullOrEmpty(nombrePermiso) && !string.IsNullOrEmpty(nombreEntidad))
                    {
                        permisosEspeciales.Add(new ComboDTO
                        {
                            Text = String.Format("{0} {1} {2}", !string.IsNullOrEmpty(nombreUsuario) ? nombreUsuario : string.Empty,
                                                                !string.IsNullOrEmpty(nombrePermiso) ? nombrePermiso : string.Empty,
                                                                !string.IsNullOrEmpty(nombreEntidad) ? nombreEntidad : string.Empty).Trim(),
                            Value = permisoEspecial.id.ToString()
                        });
                    }
                });


                if (permisosEspeciales.Count == 0)
                {
                    resultado.Add(SUCCESS, "False");
                    resultado.Add(MESSAGE, "No se encontraron permisos especiales para eliminar.");
                    return resultado;
                }

                resultado.Add(ITEMS, permisosEspeciales.OrderBy(x => x.Text));
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                resultado.Add(SUCCESS, "False");
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "ObtenerUsuariosPermisosEspeciales", e, AccionEnum.CONSULTA, 0, null);
            }
            return resultado;
        }
        #endregion

        #region helper methods
        private void PrepararDatosCorreo(AccionEnum accion, tblFM_Version version, long padreID, List<string> listaCorreosUsuarios)
        {
            var versionPadre = _context.tblFM_Version.FirstOrDefault(x => x.archivoID == padreID);

            var ccNombre = "";
            try
            {
                var reg = _context.tblFM_Archivo.FirstOrDefault(x => x.padreID == padreID);
                var cc = _context.tblP_CC.FirstOrDefault(x => x.id == reg.ccID);
                ccNombre = cc.cc + " - " + cc.descripcion;
            }
            catch (Exception e) { }
            if (listaCorreosUsuarios.Count > 0)
            {
                EnviarCorreoAccion(accion, version.nombre, versionPadre.nombre, listaCorreosUsuarios, ccNombre);
            }
        }

        private List<int> ObtenerListaTiposArchivosIds(long archivoID, List<tblFM_ArchivotblFM_TipoArchivo> lstTipoArchivos)
        {
            return lstTipoArchivos.Where(x => x.archivoID == archivoID).Select(x => x.tipoArchivoID).ToList();
        }

        private void CrearNuevosPermisosUsuarios(tblFM_Archivo archivo, long padreID)
        {
            // Obtiene a todos los usuarios que tengan permisos asignados al gestor de archivos.
            var listaUsuariosID = ObtenerUsuariosIdsConPermisosGestor()
                .Where(x => x != vSesiones.sesionUsuarioDTO.id)
                .ToList();

            // Se obtiene una lista de todas las personas que tienen permiso especial.
            var listaPermisosEspeciales = _context.tblFM_PermisoEspecial.ToList();

            foreach (var usuarioID in listaUsuariosID)
            {
                // Se crea el registro del permiso para el usuario.
                var nuevoPermiso = new tblFM_Permiso { usuarioID = usuarioID, archivoID = archivo.id, FK_UsuarioCreacion = vSesiones.sesionUsuarioDTO.id, fechaCreacion = DateTime.Now, registroActivo = true };

                // Si el usuario tiene permisos especiales, se le crea el permiso correspondiente.
                var permisosEspecialesUsuario = listaPermisosEspeciales.Where(x => x.usuarioID == usuarioID).ToList();
                bool noAplicaPermisoEspecial = true;
                foreach (var permisoEspecial in permisosEspecialesUsuario)
                {
                    AsignarPermisoEspecialArchivo(archivo, ref nuevoPermiso, permisoEspecial, ref noAplicaPermisoEspecial);
                }

                _context.tblFM_Permiso.Add(nuevoPermiso);
                _context.SaveChanges();

                // Se actualiza las vistas padres si es necesario.
                if (noAplicaPermisoEspecial)
                {
                    ActualizarEstatusVistasPadreNuevoArchivo(padreID, usuarioID);
                }
            }
        }

        private void CrearNuevosPermisosUsuariosSinActualizarEstatus(tblFM_Archivo archivo, long padreID)
        {
            // Obtiene a todos los usuarios que tengan permisos asignados al gestor de archivos.
            var listaUsuariosID = ObtenerUsuariosIdsConPermisosGestor()
                .Where(x => x != vSesiones.sesionUsuarioDTO.id)
                .ToList();

            // Se obtiene una lista de todas las personas que tienen permiso especial.
            var listaPermisosEspeciales = _context.tblFM_PermisoEspecial.ToList();

            foreach (var usuarioID in listaUsuariosID)
            {
                // Se crea el registro del permiso para el usuario.
                var nuevoPermiso = new tblFM_Permiso { usuarioID = usuarioID, archivoID = archivo.id, FK_UsuarioCreacion = vSesiones.sesionUsuarioDTO.id, fechaCreacion = DateTime.Now, registroActivo = true };

                // Si el usuario tiene permisos especiales, se le crea el permiso correspondiente.
                var permisosEspecialesUsuario = listaPermisosEspeciales.Where(x => x.usuarioID == usuarioID).ToList();
                foreach (var permisoEspecial in permisosEspecialesUsuario)
                {
                    AsignarPermisoEspecialArchivo(archivo, ref nuevoPermiso, permisoEspecial);
                }

                _context.tblFM_Permiso.Add(nuevoPermiso);
                _context.SaveChanges();
            }
        }

        private static void AsignarPermisoEspecialArchivo(tblFM_Archivo archivo, ref tblFM_Permiso nuevoPermiso, tblFM_PermisoEspecial permisoEspecial, ref bool noAplicaPermisoEspecial)
        {
            if (
                // Permiso división
                    (permisoEspecial.tipoPermiso == TipoPermisoEnum.GeneralDivision && permisoEspecial.entidadID == archivo.divisionID) ||
                // Permiso subdivisión
                    (permisoEspecial.tipoPermiso == TipoPermisoEnum.GeneralSubdivision && permisoEspecial.entidadID == archivo.subdivisionID) ||
                // Permiso obra
                    (permisoEspecial.tipoPermiso == TipoPermisoEnum.GeneralObra && permisoEspecial.entidadID == archivo.ccID) ||
                // Permiso de seguridad (normal y admin)
                    ((permisoEspecial.tipoPermiso == TipoPermisoEnum.Seguridad || permisoEspecial.tipoPermiso == TipoPermisoEnum.SeguridadAdmin)
                    && archivo.perteneceSeguridad)
                )
            {
                nuevoPermiso.puedeSubir = permisoEspecial.puedeSubir;
                nuevoPermiso.puedeEliminar = permisoEspecial.puedeEliminar;
                nuevoPermiso.puedeDescargarArchivo = permisoEspecial.puedeDescargarArchivo;
                nuevoPermiso.puedeDescargarCarpeta = permisoEspecial.puedeDescargarCarpeta;
                nuevoPermiso.puedeActualizar = permisoEspecial.puedeActualizar;
                nuevoPermiso.puedeCrear = permisoEspecial.puedeCrear;
                nuevoPermiso.estatusVista = 2;
                noAplicaPermisoEspecial = false;
            }
        }

        private static void AsignarPermisoEspecialArchivo(tblFM_Archivo archivo, ref tblFM_Permiso nuevoPermiso, tblFM_PermisoEspecial permisoEspecial)
        {
            if (
                // Permiso división
                    (permisoEspecial.tipoPermiso == TipoPermisoEnum.GeneralDivision && permisoEspecial.entidadID == archivo.divisionID) ||
                // Permiso subdivisión
                    (permisoEspecial.tipoPermiso == TipoPermisoEnum.GeneralSubdivision && permisoEspecial.entidadID == archivo.subdivisionID) ||
                // Permiso obra
                    (permisoEspecial.tipoPermiso == TipoPermisoEnum.GeneralObra && permisoEspecial.entidadID == archivo.ccID) ||
                // Permiso de seguridad (normal y admin)
                    ((permisoEspecial.tipoPermiso == TipoPermisoEnum.Seguridad || permisoEspecial.tipoPermiso == TipoPermisoEnum.SeguridadAdmin)
                    && archivo.perteneceSeguridad)
                )
            {
                nuevoPermiso.puedeSubir = permisoEspecial.puedeSubir;
                nuevoPermiso.puedeEliminar = permisoEspecial.puedeEliminar;
                nuevoPermiso.puedeDescargarArchivo = permisoEspecial.puedeDescargarArchivo;
                nuevoPermiso.puedeDescargarCarpeta = permisoEspecial.puedeDescargarCarpeta;
                nuevoPermiso.puedeActualizar = permisoEspecial.puedeActualizar;
                nuevoPermiso.puedeCrear = permisoEspecial.puedeCrear;
                nuevoPermiso.estatusVista = 2;
            }
        }

        private void ActualizarEstatusVistasPadreNuevoArchivo(long padreID, int usuarioID)
        {
            // Se obtiene el permiso del folder padre.
            var permisoPadre = _context.tblFM_Permiso
                .FirstOrDefault(x => (x.archivoID == padreID && x.usuarioID == usuarioID));
            if (permisoPadre != null)
            {
                // Se actualiza el estatus de la vista padre.
                permisoPadre.estatusVista = permisoPadre.estatusVista == 2 ? 1 : permisoPadre.estatusVista;
                _context.SaveChanges();

                // Si el folder tiene padre, se actualiza el estatus de su padre igualmente.
                if (permisoPadre.archivo.padreID != 0)
                {
                    ActualizarEstatusVistasPadreNuevoArchivo(permisoPadre.archivo.padreID, usuarioID);
                }
            }
        }

        /// <summary>
        /// Elimina los permisos de los usuarios cuando se elimina algún archivo.
        /// </summary>
        /// <param name="archivoID">Identificador del archivo que se eliminó.</param>
        /// <param name="padreID">Identificador del folder padre.</param>
        private Dictionary<string, object> EliminarPermisosUsuarios(long archivoID, long padreID)
        {
            #region VERSION ANTERIOR
            //// Obtiene a todos los usuarios que tengan permisos asignados al archivo eliminado.
            //var listaPermisosUsuarios = _context.tblFM_Permiso
            //    .Where(x => x.archivoID == archivoID)
            //    .Distinct()
            //    .ToList();

            //// Se elimina el registro de permiso para cada usuario.
            //foreach (var permiso in listaPermisosUsuarios)
            //{
            //    if (permiso.estatusVista == 2 && permiso.usuarioID != vSesiones.sesionUsuarioDTO.id)
            //    {
            //        listaCorreosUsuarios.Add(permiso.usuario.correo);
            //    }
            //    _context.tblFM_Permiso.Remove(permiso);
            //    _context.SaveChanges();

            //    // Se actualiza las vistas padres.
            //    ActualizarEstatusVistasPadresEliminacion(padreID, permiso.usuarioID);
            //}
            #endregion

            #region VERSION ACTUAL
            try
            {
                List<tblFM_Permiso> lstPermisoUsuarios = _context.tblFM_Permiso.Where(w => w.archivoID == archivoID && w.registroActivo).ToList();
                List<tblFM_Permisos_Usuario> lstPermisosUsuarios = _context.tblFM_Permisos_Usuario.Where(w => w.archivoID == archivoID && w.registroActivo).ToList();

                foreach (var item in lstPermisoUsuarios)
                {
                    item.FK_UsuarioModificacion = vSesiones.sesionUsuarioDTO.id;
                    item.fechaModificacion = DateTime.Now;
                    item.registroActivo = false;
                }
                _context.SaveChanges();

                foreach (var item in lstPermisosUsuarios)
                {
                    item.FK_UsuarioModificacion = vSesiones.sesionUsuarioDTO.id;
                    item.fechaModificacion = DateTime.Now;
                    item.registroActivo = false;
                }
                _context.SaveChanges();

                resultado.Clear();
                resultado.Add(SUCCESS, true);
                SaveBitacora(0, (int)AccionEnum.ELIMINAR, 0, JsonUtils.convertNetObjectToJson(new { archivoID = archivoID }));
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.ELIMINAR, archivoID, new { archivoID = archivoID, padreID = padreID });
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }
            return resultado;
            #endregion
        }

        /// <summary>
        /// Actualiza el estatus de las carpetas padres cuando se elimina un archivo.
        /// </summary>
        /// <param name="padreID">Identificador de la carpeta padre del archivo que se eliminó.</param>
        /// <param name="usuarioID">Identificador del usuario al que se le actualizará el estatus.</param>
        private void ActualizarEstatusVistasPadresEliminacion(long padreID, int usuarioID)
        {
            // Se obtiene el permiso del folder padre.
            var permisoPadre = _context.tblFM_Permiso
                .FirstOrDefault(x => (x.archivoID == padreID && x.usuarioID == usuarioID));

            // Se busca al número de permisos restantes.
            var archivosRestantes = _context.tblFM_Permiso
                .Where(x => (x.archivo.padreID == padreID && x.usuarioID == usuarioID))
                .ToList();

            int archivosSel = archivosRestantes.Where(x => x.estatusVista == 2).ToList().Count;
            int archivosPartSel = archivosRestantes.Where(x => x.estatusVista == 1).ToList().Count;

            // Se actualiza el estatus de la vista padre.
            if (archivosRestantes.Count > 0 && archivosRestantes.Count == archivosSel)
            {
                permisoPadre.estatusVista = 2;
            }
            else if (archivosRestantes.Count > 0 && archivosRestantes.Count > archivosSel)
            {
                if (archivosSel == 0 && archivosPartSel == 0)
                {
                    permisoPadre.estatusVista = 0;
                }
                else if (archivosSel > 0 || archivosPartSel > 0)
                {
                    permisoPadre.estatusVista = 1;
                }
            }
            else if (archivosRestantes.Count == 0)
            {
                permisoPadre.estatusVista = permisoPadre.estatusVista == 2 ? 2 : 0;
            }

            _context.SaveChanges();

            // Se obtiene el permiso del folder padre del padre.
            var archivoPadre = _context.tblFM_Archivo.FirstOrDefault(x => x.id == permisoPadre.archivoID);

            // Si el folder tiene padre, se actualiza el estatus de su padre igualmente.
            if (archivoPadre.padreID != 0)
            {
                ActualizarEstatusVistasPadresEliminacion(archivoPadre.padreID, usuarioID);
            }
        }
        private List<DirectorioDTO> ObtenerEstructuraSubcarpetas(DirectorioDTO directorioPadre, ref int index, ref List<tblFM_Version> tablaVersion,
            ref List<tblFM_PermisoEspecialObra> permisosUsuario, bool puedeCrearSubdivision, bool puedeCargarMultiple)
        {
            //List<tblFM_Version> versionHijos = tablaVersion
            //    .Where(version => version.archivo.padreID == directorioPadre.id)
            //    .OrderBy(version => version.archivo.esCarpeta).ThenBy(version => version.archivo.orden)
            //    .ToList();
            var versionHijos = (from version in tablaVersion
                                where version.archivo.padreID == directorioPadre.id
                                orderby version.archivo.esCarpeta, version.archivo.orden
                                select version).ToList();
            int usuarioID = vSesiones.sesionUsuarioDTO.id;
            List<tblFM_ArchivotblFM_TipoArchivo> lstTipoArchivos = _context.tblFM_ArchivotblFM_TipoArchivo.ToList();
            foreach (var version in versionHijos)
            {
                // Si no es admin, verifica si tiene acceso a la carpeta.
                if (noEsAdmin)
                {
                    var permisoArchivo = permisosUsuario.FirstOrDefault(x => x.archivos.Any(archivo => archivo.id == version.archivoID));
                    // Si no tiene permiso a ese archivo, salta a la siguiente iteración.
                    if (permisoArchivo == null)
                    {
                        continue;
                    }
                }
                var directorioTemp = new DirectorioDTO
                {
                    index = index++,
                    value = version.nombre,
                    date = ObtenerCadenaFechaArchivo(version),
                    id = version.archivoID,
                    pId = version.archivo.padreID,
                    data = new List<DirectorioDTO>(),
                    permisos = ObtenerPermisosArchivo(version.archivoID, usuarioID, true, ref permisosUsuario),
                    listaTiposArchivosID = ObtenerListaTiposArchivosIds(version.archivoID, lstTipoArchivos),
                    año = version.archivo.año,
                    divisionID = version.archivo.divisionID,
                    subdivisionID = version.archivo.subdivisionID,
                    ccID = version.archivo.ccID,
                    //tipoCarpeta = version.archivo.tipoCarpeta.GetDescription()
                };
                if (version.archivo.esCarpeta)
                {
                    var tipoCarpeta = version.archivo.tipoCarpeta;
                    directorioTemp.type = TIPO_DEFAULT_CARPETA;
                    directorioTemp.tipoArchivo = TIPO_DEFAULT_CARPETA.ToUpper();
                    directorioTemp.permisos.puedeCargarMultiple = puedeCargarMultiple;
                    directorioTemp.open = version.archivo.tipoCarpeta == TipoCarpetaEnum.Año;
                    switch (tipoCarpeta)
                    {
                        case TipoCarpetaEnum.Division:
                        case TipoCarpetaEnum.Subdivision:
                        case TipoCarpetaEnum.Obra:
                        case TipoCarpetaEnum.BaseObra:
                        case TipoCarpetaEnum.Estimaciones:
                        case TipoCarpetaEnum.Subcontratos:
                        case TipoCarpetaEnum.Normal:
                        case TipoCarpetaEnum.NA:
                        case TipoCarpetaEnum.EstimacionesIndustrial:
                        case TipoCarpetaEnum.SubcontratosIndustrial:
                        case TipoCarpetaEnum.Proyecto:
                            directorioTemp.cargaDinamica = TieneCargaDinamica(version);
                            break;
                        case TipoCarpetaEnum.Año:
                        default:
                            directorioTemp.cargaDinamica = false;
                            break;
                    }
                    if (puedeCrearSubdivision && (tipoCarpeta == TipoCarpetaEnum.Division || tipoCarpeta == TipoCarpetaEnum.Subdivision))
                    {
                        directorioTemp.permisos.puedeCrearSubdivision = true;
                    }
                }
                else
                {
                    directorioTemp.type = Path.GetExtension(version.nombre).Substring(1);
                    directorioTemp.tipoArchivo = ObtenerTipoArchivo(version.archivoID);
                }
                if (version.archivo.esCarpeta && tablaVersion.Any(x => x.archivo.padreID == version.archivoID))
                {
                    directorioTemp.data = ObtenerEstructuraSubcarpetas(directorioTemp, ref index, ref tablaVersion, ref permisosUsuario, puedeCrearSubdivision, puedeCargarMultiple);
                }
                directorioPadre.data.Add(directorioTemp);
            }

            return directorioPadre.data;
        }
        private List<DirectorioDTO> ObtenerEstructuraSubcarpetasDeprecado(DirectorioDTO directorioPadre, ref int index, ref List<tblFM_Version> tablaVersion,
            ref List<tblFM_Permiso> listaPermisosUsuario, bool puedeCrearSubdivision, bool puedeCargarMultiple)
        {

            List<tblFM_Version> versionHijos = tablaVersion
                .Where(version => version.archivo.padreID == directorioPadre.id)
                .OrderBy(version => version.archivo.esCarpeta).ThenBy(version => version.archivo.orden)
                .ToList();

            int usuarioID = vSesiones.sesionUsuarioDTO.id;
            List<tblFM_ArchivotblFM_TipoArchivo> lstTipoArchivos = _context.tblFM_ArchivotblFM_TipoArchivo.ToList();
            foreach (var version in versionHijos)
            {
                // Si no es admin, verifica si tiene acceso a la carpeta.
                if (noEsAdmin)
                {
                    var permisoArchivo = listaPermisosUsuario.FirstOrDefault(x => x.estatusVista != 0 && x.archivoID == version.archivoID);

                    // Si no tiene permiso a ese archivo, salta a la siguiente iteración.
                    if (permisoArchivo == null)
                    {
                        continue;
                    }
                }

                var directorioTemp = new DirectorioDTO
                {
                    index = index++,
                    value = version.nombre,
                    date = ObtenerCadenaFechaArchivo(version),
                    id = version.archivoID,
                    pId = version.archivo.padreID,
                    data = new List<DirectorioDTO>(),
                    permisos = ObtenerPermisosArchivoDeprecado(version.archivoID, usuarioID, true, ref listaPermisosUsuario),
                    listaTiposArchivosID = ObtenerListaTiposArchivosIds(version.archivoID, lstTipoArchivos),
                    año = version.archivo.año,
                    divisionID = version.archivo.divisionID,
                    subdivisionID = version.archivo.subdivisionID,
                    ccID = version.archivo.ccID,
                    //tipoCarpeta = version.archivo.tipoCarpeta.GetDescription()
                };

                if (version.archivo.esCarpeta)
                {
                    var tipoCarpeta = version.archivo.tipoCarpeta;

                    directorioTemp.type = TIPO_DEFAULT_CARPETA;
                    directorioTemp.tipoArchivo = TIPO_DEFAULT_CARPETA.ToUpper();

                    directorioTemp.permisos.puedeCargarMultiple = puedeCargarMultiple;

                    directorioTemp.open = version.archivo.tipoCarpeta == TipoCarpetaEnum.Año;

                    switch (tipoCarpeta)
                    {
                        case TipoCarpetaEnum.Division:
                        case TipoCarpetaEnum.Subdivision:
                        case TipoCarpetaEnum.Obra:
                        case TipoCarpetaEnum.BaseObra:
                        case TipoCarpetaEnum.Estimaciones:
                        case TipoCarpetaEnum.Subcontratos:
                        case TipoCarpetaEnum.Normal:
                        case TipoCarpetaEnum.NA:
                        case TipoCarpetaEnum.EstimacionesIndustrial:
                        case TipoCarpetaEnum.SubcontratosIndustrial:
                        case TipoCarpetaEnum.Proyecto:
                            directorioTemp.cargaDinamica = TieneCargaDinamica(version);
                            break;
                        case TipoCarpetaEnum.Año:
                        default:
                            directorioTemp.cargaDinamica = false;
                            break;
                    }

                    if (puedeCrearSubdivision && (tipoCarpeta == TipoCarpetaEnum.Division || tipoCarpeta == TipoCarpetaEnum.Subdivision))
                    {
                        directorioTemp.permisos.puedeCrearSubdivision = true;
                    }
                }
                else
                {
                    directorioTemp.type = Path.GetExtension(version.nombre).Substring(1);
                    directorioTemp.tipoArchivo = ObtenerTipoArchivo(version.archivoID);
                }

                if (version.archivo.esCarpeta && tablaVersion.Any(x => x.archivo.padreID == version.archivoID))
                {
                    directorioTemp.data = ObtenerEstructuraSubcarpetasDeprecado(directorioTemp, ref index, ref tablaVersion, ref listaPermisosUsuario, puedeCrearSubdivision, puedeCargarMultiple);
                }

                directorioPadre.data.Add(directorioTemp);
            }

            return directorioPadre.data;
        }

        private bool TieneCargaDinamica(tblFM_Version version)
        {
            if (noEsAdmin == false)
            {
                return _context.tblFM_Permiso.Any(x => x.archivo.padreID == version.archivoID);
            }
            int usuarioID = vSesiones.sesionUsuarioDTO.id;
            return _context.tblFM_Permiso.Any(x => x.usuarioID == usuarioID && x.archivo.padreID == version.archivoID && x.estatusVista != 0);
        }

        private bool TieneCargaDinamicaPermiso(long archivoID)
        {
            return _context.Select<tblFM_Permiso>(new DapperDTO
            {
                baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                consulta = @"SELECT t1.id 
	                                FROM tblFM_Permiso AS t1
	                                INNER JOIN tblFM_Archivo AS t2 ON t2.id = t1.archivoID
		                                WHERE t2.padreID = @archivoID",
                parametros = new { archivoID = archivoID }
            }).Any();
            //return lstPermisos.Any(w => w.archivo.padreID == archivoID);
        }

        /// <summary>
        /// Retorna una cadena con la fecha de creación o edición de una versión de un archivo.
        /// </summary>
        /// <param name="version">Versión del archivo del cuál se formará la cadena.</param>
        /// <returns>Retorna una cadena con el formato dd/MM/yyyy hh:mm tt.</returns>
        private static string ObtenerCadenaFechaArchivo(tblFM_Version version)
        {
            return version.fechaEdicion.HasValue ?
                    version.fechaEdicion.Value.ToString(FORMATO_FECHA_HORA) :
                    version.fechaCreacion.ToString(FORMATO_FECHA_HORA);
        }
        private static string ObtenerCadenaFechaArchivo(DirectorioDTO version)
        {
            return version.fechaEdicion.HasValue ?
                    version.fechaEdicion.Value.ToString(FORMATO_FECHA_HORA) :
                    version.fechaCreacion.ToString(FORMATO_FECHA_HORA);
        }
        private string ObtenerTipoArchivo(long archivoID)
        {
            var nombreArchivo = (from archivoTipoArchivo in _context.tblFM_ArchivotblFM_TipoArchivo
                                 join tipoArchivo in _context.tblFM_TipoArchivo
                                     on archivoTipoArchivo.tipoArchivoID equals tipoArchivo.id
                                 where archivoTipoArchivo.archivoID == archivoID
                                 select tipoArchivo.nombre).FirstOrDefault();
            return nombreArchivo ?? "INDEFINIDO";
        }

        private string ObtenerNombreArchivo(int tipoArchivoID, string nombreArchivo, int numeroArchivo, tblFM_Version carpetaPadre, bool esDivisionIndustrial)
        {
            string nombreFinal = string.Empty;
            try
            {
                var tipoArchivo = _context.tblFM_TipoArchivo.FirstOrDefault(tipo => tipo.id == tipoArchivoID);

                bool esNombreLibre = tipoArchivo.nombreLibre || esDivisionIndustrial;

                string nombreAbreviacion = esNombreLibre ? Path.GetFileNameWithoutExtension(nombreArchivo) : tipoArchivo.nombre;

                var listaAbreviaciones = new List<string> { nombreAbreviacion };
                ObtenerAbreviacionesPadre(carpetaPadre, ref listaAbreviaciones);
                string prefijos = listaAbreviaciones.Reverse<string>().Select(x => x + "-").Aggregate((a, b) => a + b);
                nombreArchivo = string.Join("_", nombreArchivo.Split(Path.GetInvalidFileNameChars()));

                nombreFinal = String.Format("{0}{1}{2}",
                (esNombreLibre ? prefijos.Substring(0, prefijos.Length - 1) : prefijos),
                (esNombreLibre ? String.Empty : String.Format("[{0:0000}]", numeroArchivo)),
                Path.GetExtension(nombreArchivo).ToLower());
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0,
                    new { tipoArchivoID = tipoArchivoID, nombreArchivo = nombreArchivo, numeroArchivo = numeroArchivo, carpetaPadre = carpetaPadre, esDivisionIndustrial = esDivisionIndustrial });
            }
            return nombreFinal;
        }

        private void ObtenerAbreviacionesPadre(tblFM_Version carpetaPadre, ref List<string> listaAbreviaciones)
        {
            if (carpetaPadre.considerarse)
            {
                listaAbreviaciones.Add(carpetaPadre.abreviacion);
            }

            if (carpetaPadre.archivo.padreID != 0)
            {
                var versionPadre = _context.tblFM_Version.FirstOrDefault(x => x.archivoID == carpetaPadre.archivo.padreID && x.activo);
                ObtenerAbreviacionesPadre(versionPadre, ref listaAbreviaciones);
            }
        }

        private static string FormatearNombreArchivoActualizado(string nombre)
        {
            return Path.GetFileNameWithoutExtension(nombre) + " [ACT]" + Path.GetExtension(nombre);
        }

        private static string ObtenerNombreNuevaCarpeta()
        {
            return String.Format("{0} ({1})",
                "nueva carpeta",
                DateTime.Now.ToString("dd-MM-y HH:mm:ss").Replace(":", "-"));
        }

        /// <summary>
        /// Verifica si el nombre contiene caracteres inválidos para carpetas.
        /// </summary>
        /// <param name="nombreCarpeta">Nombre de la carpeta a verificar.</param>
        /// <returns>Verdadero si la carpeta contiene caracteres inválidos.</returns>
        private bool EsNombreCarpetaInvalido(string nombreCarpeta)
        {
            string invalidFileNameRegex = @"[^a-zA-Z0-9áéíóúüñÑ_.\- ]+";
            return Regex.Match(nombreCarpeta, invalidFileNameRegex, RegexOptions.IgnoreCase).Success;
        }

        private void ActualizarRutasArchivosHijos(long archivoID, string rutaNombreViejo, string rutaNombreNuevo)
        {
            List<tblFM_Version> archivosHijos = _context.tblFM_Version.Where(x => x.archivo.padreID == archivoID).ToList();
            foreach (var archivoHijo in archivosHijos)
            {
                archivoHijo.ruta = archivoHijo.ruta.Replace(rutaNombreViejo, rutaNombreNuevo);
                if (archivoHijo.archivo.esCarpeta)
                {
                    ActualizarRutasArchivosHijos(archivoHijo.archivoID, rutaNombreViejo, rutaNombreNuevo);
                }
            }
        }

        private void CrearArchivosHijos(string rutaPadre, List<tblFM_Version> archivosHijos, List<tblFM_Archivo> lstArchivos)
        {
            #region VERSION ANTERIOR
            //foreach (var archivoHijo in archivosHijos)
            //{
            //    string nuevaRutaArchivo;

            //    // Verifica si el usuario tiene acceso al archivo.
            //    var tienePermiso = _context.tblFM_Permiso.FirstOrDefault(x => x.archivoID == archivoHijo.archivoID && x.estatusVista != 0 && x.usuarioID == vSesiones.sesionUsuarioDTO.id);

            //    // Si está nulo, significa que no tiene acceso al archivo y salta a la siguiente iteración.
            //    if (tienePermiso == null)
            //    {
            //        if (noEsAdmin)
            //        {
            //            continue;
            //        }
            //    }

            //    // Si el archivo es una carpeta, simplemente la crea en la nueva ruta.
            //    if (archivoHijo.archivo.esCarpeta)
            //    {
            //        nuevaRutaArchivo = Path.Combine(rutaPadre, archivoHijo.nombre);
            //        Directory.CreateDirectory(nuevaRutaArchivo);

            //        // Verifica si la carpeta tiene hijos.
            //        var listaArchivosHijos = _context.tblFM_Version
            //            .Where(version => version.archivo.padreID == archivoHijo.archivoID && version.activo)
            //            .ToList();

            //        // Si la carpeta tiene hijos, se llama a la función recursivamente.
            //        if (listaArchivosHijos.Count > 0)
            //        {
            //            CrearArchivosHijos(nuevaRutaArchivo, listaArchivosHijos);
            //        }
            //    }
            //    else
            //    {
            //        string numeroVersion = String.Format("{0:00}-", archivoHijo.version);
            //        string nombreArchivoServidor = numeroVersion + Path.GetFileNameWithoutExtension(archivoHijo.nombre) + ".zip";

            //        string rutaArchivoServidor = Path.Combine(RUTA_BASE, archivoHijo.ruta, nombreArchivoServidor);
            //        nuevaRutaArchivo = Path.Combine(rutaPadre, archivoHijo.nombre);

            //        // Crea el archivo en el folder temporal.
            //        try
            //        {
            //            GlobalUtils.SaveFileFromZip(rutaArchivoServidor, (numeroVersion + archivoHijo.nombre), nuevaRutaArchivo);
            //        }
            //        catch (Exception ex)
            //        {
            //            LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "DescargarCarpeta", ex, AccionEnum.DESCARGAR, 0, new { rutaArchivoServidor, nombre = (numeroVersion + archivoHijo.nombre), nuevaRutaArchivo });
            //            continue;
            //        }
            //    }
            //}
            #endregion

            #region VERSION ACTUAL
            try
            {
                foreach (var archivoHijo in archivosHijos)
                {
                    string nuevaRutaArchivo;

                    // Si el archivo es una carpeta, simplemente la crea en la nueva ruta.
                    if (archivoHijo.archivo.esCarpeta)
                    {
                        nuevaRutaArchivo = Path.Combine(rutaPadre, archivoHijo.nombre);
                        Directory.CreateDirectory(nuevaRutaArchivo);

                        // Verifica si la carpeta tiene hijos.
                        List<tblFM_Version> lstArchivosHijos = _context.Select<tblFM_Version>(new DapperDTO
                        {
                            baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                            consulta = @"SELECT t2.*
	                                        FROM tblFM_Archivo AS t1
	                                        INNER JOIN tblFM_Version AS t2 ON t2.archivoID = t1.id
		                                        WHERE t2.activo = @activo AND t1.padreID = @padreID",
                            parametros = new { activo = true, padreID = archivoHijo.archivoID }
                        }).ToList();

                        foreach (var item in lstArchivosHijos)
                            item.archivo = lstArchivos.Where(w => w.id == item.archivoID).FirstOrDefault();

                        // Si la carpeta tiene hijos, se llama a la función recursivamente.
                        if (lstArchivosHijos.Count > 0)
                            CrearArchivosHijos(nuevaRutaArchivo, lstArchivosHijos, lstArchivos);
                    }
                    else
                    {
                        string numeroVersion = string.Format("{0:00}-", archivoHijo.version);
                        string nombreArchivoServidor = string.Format("{0}{1}.zip", numeroVersion, Path.GetFileNameWithoutExtension(archivoHijo.nombre));
                        string rutaArchivoServidor = Path.Combine(RUTA_BASE, archivoHijo.ruta, nombreArchivoServidor);
                        nuevaRutaArchivo = Path.Combine(rutaPadre, archivoHijo.nombre);

                        #region Crea el archivo en el folder temporal.
                        try
                        {
                            GlobalUtils.SaveFileFromZip(rutaArchivoServidor, string.Format("{0}{1}", numeroVersion, archivoHijo.nombre), nuevaRutaArchivo);
                        }
                        catch (Exception ex)
                        {
                            var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                            LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, ex, AccionEnum.DESCARGAR, 0,
                                new { rutaArchivoServidor, nombre = string.Format("{0}{1}", numeroVersion, archivoHijo.nombre), nuevaRutaArchivo });
                            continue;
                        }
                        #endregion
                    }
                }
            }
            catch (Exception ex)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, ex, AccionEnum.DESCARGAR, 0, new { rutaPadre = rutaPadre, archivosHijos = archivosHijos });
            }
            #endregion
        }

        private int ObtenerConsecutivoArchivo(long archivoID, int tipoArchivoID)
        {
            var consulta = new StoreProcedureDTO { nombre = "spFM_GetCountFile" };
            consulta.parametros.Add(new OdbcParameterDTO { nombre = "tipo", tipoSql = SqlDbType.Int, valor = tipoArchivoID });
            var lst = _context.sp_Select<FileCountDTO>(consulta);
            int contador = lst.FirstOrDefault().contador;
            return contador;
        }

        private List<EstructuraVistasDTO> ObtenerEstructuraSubpermisos(EstructuraVistasDTO directorioPadre, int usuarioID, ref List<tblFM_Version> tablaVersion, ref List<tblFM_Permiso> listaPermisosUsuario)
        {
            List<tblFM_Version> versionHijos = tablaVersion.Where(w => w.archivo.padreID == directorioPadre.id && w.activo).OrderBy(o => o.archivo.esCarpeta).ThenBy(x => x.archivo.orden).ToList();

            foreach (var version in versionHijos)
            {
                var permisoDTO = ObtenerPermisosArchivoDeprecado(version.archivoID, usuarioID, false, ref listaPermisosUsuario);
                bool esCarpeta = version.archivo.esCarpeta;

                var tipoCarpeta = version.archivo.tipoCarpeta;

                var directorioTemp = new EstructuraVistasDTO
                {
                    permisos = permisoDTO,
                    title = version.nombre,
                    selected = permisoDTO.estatusVista == 2,
                    id = version.archivoID,
                    key = version.archivoID,
                    expanded = tipoCarpeta == TipoCarpetaEnum.Año,
                    folder = esCarpeta,
                    partsel = esCarpeta ? permisoDTO.estatusVista > 0 : false,
                    checkbox = true,
                    lazy = tipoCarpeta != TipoCarpetaEnum.Año ? TieneCargaDinamicaPermiso(version.archivoID) : false
                };

                if (esCarpeta && directorioTemp.lazy == false)
                {
                    directorioTemp.children = new List<EstructuraVistasDTO>();
                    directorioTemp.children = ObtenerEstructuraSubpermisos(directorioTemp, usuarioID, ref tablaVersion, ref listaPermisosUsuario);
                }

                directorioPadre.children.Add(directorioTemp);
            }

            return directorioPadre.children;
        }

        private PermisosDTO ObtenerPermisosArchivo(long obraID, int usuarioID, bool desdeGestor, ref List<tblFM_PermisoEspecialObra> listaPermisosUsuario)
        {
            if (desdeGestor)
            {
                // Si el usuario tiene permiso de admin...
                if (!noEsAdmin)
                {
                    return new PermisosDTO()
                    {
                        puedeSubir = true,
                        puedeEliminar = true,
                        puedeDescargarArchivo = true,
                        puedeDescargarCarpeta = true,
                        puedeActualizar = true,
                        puedeCrear = true,
                        estatusVista = 2
                    };
                }
            }

            PermisosDTO permisos = listaPermisosUsuario
                                    .Where(permiso => (permiso.entidadID == obraID && permiso.usuarioID == usuarioID))
                                    .Select(x => new PermisosDTO
                                    {
                                        puedeSubir = x.puedeSubir,
                                        puedeEliminar = x.puedeEliminar,
                                        puedeDescargarArchivo = x.puedeDescargarArchivo,
                                        puedeDescargarCarpeta = x.puedeDescargarCarpeta,
                                        puedeActualizar = x.puedeActualizar,
                                        puedeCrear = x.puedeCrear,
                                        estatusVista = 0,
                                        //estatusVista = x.estatusVista
                                    })
                                    .FirstOrDefault();

            return permisos ?? new PermisosDTO();
        }
        private PermisosDTO ObtenerPermisosArchivoDeprecado(long archivoID, int usuarioID, bool desdeGestor, ref List<tblFM_Permiso> listaPermisosUsuario)
        {
            if (desdeGestor)
            {
                // Si el usuario tiene permiso de admin...
                if (!noEsAdmin)
                {
                    return new PermisosDTO()
                    {
                        puedeSubir = true,
                        puedeEliminar = true,
                        puedeDescargarArchivo = true,
                        puedeDescargarCarpeta = true,
                        puedeActualizar = true,
                        puedeCrear = true,
                        estatusVista = 2
                    };
                }
            }

            PermisosDTO permisos = listaPermisosUsuario
                                    .Where(permiso => (permiso.archivoID == archivoID && permiso.usuarioID == usuarioID))
                                    .Select(x => new PermisosDTO
                                    {
                                        puedeSubir = x.puedeSubir,
                                        puedeEliminar = x.puedeEliminar,
                                        puedeDescargarArchivo = x.puedeDescargarArchivo,
                                        puedeDescargarCarpeta = x.puedeDescargarCarpeta,
                                        puedeActualizar = x.puedeActualizar,
                                        puedeCrear = x.puedeCrear,
                                        estatusVista = x.estatusVista
                                    })
                                    .FirstOrDefault();

            return permisos ?? new PermisosDTO();
        }
        private PermisosDTO ObtenerPermisosArchivoHierarchy(DirectorioDTO permiso)
        {
            if (!noEsAdmin)
            {
                return new PermisosDTO()
                {
                    puedeSubir = true,
                    puedeEliminar = true,
                    puedeDescargarArchivo = true,
                    puedeDescargarCarpeta = true,
                    puedeActualizar = true,
                    puedeCrear = true,
                    estatusVista = 2
                };
            }
            else
            {
                return new PermisosDTO()
                {
                    puedeSubir = permiso.puedeSubir,
                    puedeEliminar = permiso.puedeEliminar,
                    puedeDescargarArchivo = permiso.puedeDescargarArchivo,
                    puedeDescargarCarpeta = permiso.puedeDescargarCarpeta,
                    puedeActualizar = permiso.puedeActualizar,
                    puedeCrear = permiso.puedeCrear,
                    estatusVista = permiso.estatusVista
                };
            }
        }
        /// <summary>
        /// Se itera L2 y se compara cada registro con L1 para obtener los nuevos registros.
        /// </summary>
        /// <param name="listaPermisosUsuariosActual"></param>
        /// <param name="nuevaListaPermisosUsuarios"></param>
        /// <param name="archivoID"></param>
        private void CrearRegistrosPermisos(List<tblFM_Permiso> listaPermisosUsuariosActual, List<PermisosDTO> nuevaListaPermisosUsuarios, long archivoID, ref List<string> listaCorreosUsuarios)
        {
            if (nuevaListaPermisosUsuarios == null)
            {
                return;
            }

            // Se obtiene la entidad de permiso del archivo actual.
            var archivo = _context.tblFM_Archivo.FirstOrDefault(x => x.id == archivoID);

            foreach (var nuevoPermisoUsuario in nuevaListaPermisosUsuarios)
            {
                // Se busca al usuario de L2 en L1.
                var usuarioExistente = listaPermisosUsuariosActual
                        .FirstOrDefault(x => (x.usuarioID == nuevoPermisoUsuario.usuarioID && x.archivoID == archivoID && x.estatusVista == 2));

                // Si el usuario de L2 no existe en L1, significa que es un registro nuevo.
                if (usuarioExistente == null)
                {
                    // Si no existe algún registro con vista activa, busca con vista inactiva.
                    var registroExistente = listaPermisosUsuariosActual.FirstOrDefault(x => (x.usuarioID == nuevoPermisoUsuario.usuarioID && x.archivoID == archivoID && x.estatusVista == 0));

                    // Si ya existe lo actualiza.
                    if (registroExistente != null)
                    {
                        registroExistente.usuarioID = nuevoPermisoUsuario.usuarioID;
                        registroExistente.archivoID = archivoID;
                        registroExistente.puedeDescargarArchivo = nuevoPermisoUsuario.puedeDescargarArchivo;
                        registroExistente.puedeActualizar = nuevoPermisoUsuario.puedeActualizar;
                        registroExistente.puedeEliminar = nuevoPermisoUsuario.puedeEliminar;
                        registroExistente.estatusVista = 2;
                    }
                    else
                    {
                        // Si no existe, significa que ese usuario no tiene ningún registro de permisos.
                        // Se le crean registros nuevos excepto del archivo seleccionado.
                        var listaArchivos = _context.tblFM_Version.Where(x => x.activo && x.archivoID != archivoID).ToList();
                        foreach (var version in listaArchivos)
                        {
                            var permisoNuevoVersion = new tblFM_Permiso
                            {
                                usuarioID = nuevoPermisoUsuario.usuarioID,
                                archivoID = version.archivoID,
                                FK_UsuarioCreacion = vSesiones.sesionUsuarioDTO.id,
                                fechaCreacion = DateTime.Now,
                                registroActivo = true
                            };
                            _context.tblFM_Permiso.Add(permisoNuevoVersion);
                        }

                        // Se crea el nuevo permiso del archivo seleccionado.
                        var permisoNuevo = new tblFM_Permiso
                        {
                            usuarioID = nuevoPermisoUsuario.usuarioID,
                            archivoID = archivoID,
                            puedeDescargarArchivo = nuevoPermisoUsuario.puedeDescargarArchivo,
                            puedeActualizar = nuevoPermisoUsuario.puedeActualizar,
                            puedeEliminar = nuevoPermisoUsuario.puedeEliminar,
                            estatusVista = 2,
                            FK_UsuarioCreacion = vSesiones.sesionUsuarioDTO.id,
                            fechaCreacion = DateTime.Now,
                            registroActivo = true
                        };
                        _context.tblFM_Permiso.Add(permisoNuevo);
                    }

                    _context.SaveChanges();

                    // Se actualiza estatus vista padre.
                    ActualizarEstatusVistasPadresAsignacion(archivo.padreID, nuevoPermisoUsuario.usuarioID);

                    //string correoUsuario = _context.tblP_Usuario
                    //    .Where(x => x.id == nuevoPermisoUsuario.usuarioID)
                    //    .Select(x => x.correo)
                    //    .FirstOrDefault();

                    //listaCorreosUsuarios.Add(correoUsuario);
                }
            }
        }

        /// <summary>
        /// Se itera L1 y se compara cada registro con L2 para obtener los registros actualizados y los eliminados.
        /// </summary>
        /// <param name="listaPermisosUsuariosActual"></param>
        /// <param name="nuevaListaPermisosUsuarios"></param>
        /// <param name="archivoID"></param>
        private void ActualizarRegistrosPermisos(List<tblFM_Permiso> listaPermisosUsuariosActual, List<PermisosDTO> nuevaListaPermisosUsuarios, long archivoID, ref List<string> listaCorreosUsuarios)
        {
            foreach (var permisoUsuarioActual in listaPermisosUsuariosActual)
            {
                PermisosDTO usuarioExistente;

                if (nuevaListaPermisosUsuarios == null)
                {
                    usuarioExistente = null;
                }
                else
                {
                    // Se busca al usuario actual en la nueva lista                    
                    usuarioExistente = nuevaListaPermisosUsuarios
                        .FirstOrDefault(nuevoUsuario => nuevoUsuario.usuarioID == permisoUsuarioActual.usuarioID);
                }

                // Si el usuario existe en ambas listas, se actualizó su registro. Se actualiza la información.
                if (usuarioExistente != null)
                {
                    // Si ya tenía registro de permiso pero no tenía acceso al archivo, 
                    // se actualiza el estatus de las vistas padres.
                    if (permisoUsuarioActual.estatusVista == 0)
                    {
                        permisoUsuarioActual.estatusVista = 2;
                        _context.SaveChanges();

                        ActualizarEstatusVistasPadresAsignacion(permisoUsuarioActual.archivo.padreID, permisoUsuarioActual.usuarioID);
                        listaCorreosUsuarios.Add(permisoUsuarioActual.usuario.correo);
                    }

                    permisoUsuarioActual.puedeDescargarArchivo = usuarioExistente.puedeDescargarArchivo;
                    permisoUsuarioActual.puedeActualizar = usuarioExistente.puedeActualizar;
                    permisoUsuarioActual.puedeEliminar = usuarioExistente.puedeEliminar;
                    _context.SaveChanges();
                }
                // Si el usuario de L1 no existe en L2, significa que se eliminó.
                // Se borra registro de permiso y se actualiza el estatus de la vista para la carpeta padre.
                else
                {
                    if (permisoUsuarioActual.estatusVista == 2)
                    {
                        // Se desactiva el permiso.
                        permisoUsuarioActual.puedeDescargarArchivo = false;
                        permisoUsuarioActual.puedeActualizar = false;
                        permisoUsuarioActual.puedeEliminar = false;
                        permisoUsuarioActual.estatusVista = 0;
                        _context.SaveChanges();

                        // Se actualiza estatus vista padre.
                        ActualizarEstatusVistasPadresDesasignacion(permisoUsuarioActual.archivo.padreID, permisoUsuarioActual.usuarioID);
                    }
                }
            }
        }

        /// <summary>
        /// Actualiza el estatus de las carpetas padres cuando se desasigna un archivo a algún usuario (se le quita el permiso de vista).
        /// </summary>
        /// <param name="padreID">Identificador del folder padre.</param>
        /// <param name="usuarioID">Identificador del usuario al que se le desasignó el permiso.</param>
        private void ActualizarEstatusVistasPadresDesasignacion(long padreID, int usuarioID)
        {
            // Se obtiene el permiso del folder padre.
            var permisoPadre = _context.tblFM_Permiso
                .FirstOrDefault(x => (x.archivoID == padreID && x.usuarioID == usuarioID));

            // Se busca al número de permisos restantes activos.
            var archivosActivosRestantes = _context.tblFM_Permiso
                .Where(x => (x.archivo.padreID == padreID && x.estatusVista != 0 && x.usuarioID == usuarioID))
                .ToList();

            // Se actualiza el estatus de la vista padre.
            permisoPadre.estatusVista = archivosActivosRestantes.Count >= 1 ? 1 : 0;
            _context.SaveChanges();

            // Si el folder tiene padre, se actualiza el estatus de su padre igualmente.
            if (permisoPadre.archivo.padreID != 0)
            {
                ActualizarEstatusVistasPadresDesasignacion(permisoPadre.archivo.padreID, usuarioID);
            }
        }

        /// <summary>
        /// Actualiza el estatus de las carpetas padres cuando se asigna un archivo a algún usuario (se le agrega el permiso de vista).
        /// </summary>
        /// <param name="padreID">Identificador del folder padre.</param>
        /// <param name="usuarioID">Identificador del usuario al que se le desasignó el permiso.</param>
        /// 
        private void ActualizarEstatusVistasPadresAsignacion(long padreID, int usuarioID)
        {
            // Se obtiene el permiso del folder padre.
            var permisoPadre = _context.tblFM_Permiso
                .FirstOrDefault(x => (x.archivoID == padreID && x.usuarioID == usuarioID));

            // Se busca al número de permisos restantes.
            var archivosHijosRestantes = _context.tblFM_Version.Where(x => x.activo && x.archivo.padreID == padreID).ToList();
            int archivosRestantesActivos = 0;
            foreach (var a in archivosHijosRestantes)
            {
                var archivoActivo = _context.tblFM_Permiso
                    .FirstOrDefault(x => (x.archivoID == a.archivoID && x.usuarioID == usuarioID && x.estatusVista == 2));
                if (archivoActivo != null)
                {
                    archivosRestantesActivos++;
                }
            }

            bool todosActivos = archivosHijosRestantes.Count == archivosRestantesActivos;

            // Se actualiza el estatus de la vista padre.
            permisoPadre.estatusVista = todosActivos ? 2 : 1;
            _context.SaveChanges();

            var archivo = _context.tblFM_Archivo.FirstOrDefault(x => x.id == padreID);

            if (archivo.padreID != 0)
            {
                ActualizarEstatusVistasPadresAsignacion(archivo.padreID, usuarioID);
            }
        }

        /// <summary>
        /// Envía un correo sobre la acción realizada a todos los usuarios con acceso al archivo.
        /// </summary>
        /// <param name="accionArchivo">Tipo de acción realizada.</param>
        /// <param name="nombreArchivo">Nombre del archivo al que se le realizó la acción.</param>
        /// <param name="nombrePadre">Nombre del folder padre del archivo modificado.</param>
        private void EnviarCorreoAccion(AccionEnum accionArchivo, string nombreArchivo, string nombrePadre, List<string> listaCorreos, string cc)
        {
            string accion;
            switch (accionArchivo)
            {
                case AccionEnum.AGREGAR:
                    accion = "creó";
                    break;
                case AccionEnum.ACTUALIZAR:
                    accion = "actualizó";
                    break;
                case AccionEnum.ELIMINAR:
                    accion = "eliminó";
                    break;
                case AccionEnum.ASIGNAR:
                    accion = "le dio acceso a";
                    break;
                default:
                    accion = "modificó";
                    break;
            }

            string nombreCompletoUsuario = GlobalUtils.ObtenerNombreCompletoUsuarioActual();

            string cuerpoCorreo = @"<html>
                                        <head>
                                            <style>
                                                p {
                                                    font-family: arial, sans-serif;
                                                }
                                            </style>
                                        </head>
                                        <body lang=ES-MX link='#0563C1' vlink='#954F72'>
                                            <div class=WordSection1>" +
                                                @"<p class=MsoNormal>Notificación autogenerada por el Gestor Documental.<o:p></o:p></p>" +
                                                @"<p class=MsoNormal>Se informa que se <strong>" + accion + @"</strong> el archivo <strong>" + nombreArchivo +
                                                @"</strong> en la carpeta <strong>" + nombrePadre + @"</strong><br> por el usuario " + nombreCompletoUsuario + @".<o:p></o:p></p>" +
                                                @"<p class=MsoNormal>
                                                    <strong>Centro de Costo:</strong> " + cc.ToUpper() +
                                                    @"<br><strong>Fecha de creación:</strong> " + DateTime.Now.ToLongDateString().ToUpper() +
                                                    @"<br><strong>Hora:</strong> " + DateTime.Now.ToLongTimeString().ToUpper() + @"<o:p></o:p>
                                                </p>
                                                <p class=MsoNormal>
                                                    PD. Se informa que esta notificación es autogenerada por el sistema SIGOPLAN y no es necesario dar una respuesta.<o:p></o:p>
                                                </p>
                                                <p class=MsoNormal>
                                                    Gracias.<o:p></o:p>
                                                </p>
                                            </div>
                                        </body>
                                    </html>";
#if DEBUG
            listaCorreos = new List<string>();
            listaCorreos.Add("omar.nunez@construplan.com.mx");
#endif
            //GlobalUtils.sendEmail(string.Format("{0}: Notificación Gestor Documental", PersonalUtilities.GetNombreEmpresa()), cuerpoCorreo, listaCorreos);
        }

        private int ObtenerOrdenArchivo(long padreID)
        {
            int cantHijos = 0;
            try
            {
                List<tblFM_Archivo> lstArchivosHijos = _context.tblFM_Archivo.Where(w => w.padreID == padreID).ToList();
                cantHijos = lstArchivosHijos.Count > 0 ? (lstArchivosHijos.Max(x => x.orden) + 1) : 0;
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, new { padreID = padreID });
            }
            return cantHijos;
        }

        private void ActualizarPermisosPorPermisoGeneral(tblFM_PermisoEspecial permisoEspecial)
        {
            int usuarioID = permisoEspecial.usuarioID;
            var tipoPermiso = permisoEspecial.tipoPermiso;

            // Verifica si el usuario ya tiene registros de permiso o no
            var permisosUsuario = _context.tblFM_Permiso.Where(x => x.usuarioID == usuarioID).ToList();

            // Si el usuario ya tiene registros, se le actualizan.
            if (permisosUsuario.Count > 0)
            {
                var listaPermisosAplicables = permisosUsuario.Where(x =>
                {
                    switch (tipoPermiso)
                    {
                        case TipoPermisoEnum.GeneralDivision:
                            return x.archivo.divisionID == permisoEspecial.entidadID;
                        case TipoPermisoEnum.GeneralSubdivision:
                            return x.archivo.subdivisionID == permisoEspecial.entidadID;
                        case TipoPermisoEnum.GeneralObra:
                            return x.archivo.ccID == permisoEspecial.entidadID;
                        default:
                            return false;
                    }
                }).ToList();

                foreach (var permiso in listaPermisosAplicables)
                {
                    permiso.puedeSubir = permisoEspecial.puedeSubir;
                    permiso.puedeEliminar = permisoEspecial.puedeEliminar;
                    permiso.puedeDescargarArchivo = permisoEspecial.puedeDescargarArchivo;
                    permiso.puedeDescargarCarpeta = permisoEspecial.puedeDescargarCarpeta;
                    permiso.puedeActualizar = permisoEspecial.puedeActualizar;
                    permiso.puedeCrear = permisoEspecial.puedeCrear;
                    permiso.estatusVista = 2;
                }
            }
            // Si no, se le crea un registro de permiso nuevo por cada archivo activo existente.
            else
            {
                var listaNuevosPermisos = new List<tblFM_Permiso>();
                var versionArchivosActivos = _context.tblFM_Version.Where(x => x.activo).ToList();

                foreach (var versionArchivo in versionArchivosActivos)
                {
                    var nuevoPermiso = new tblFM_Permiso { usuarioID = usuarioID, archivoID = versionArchivo.archivoID, FK_UsuarioCreacion = vSesiones.sesionUsuarioDTO.id, fechaCreacion = DateTime.Now, registroActivo = true };

                    if (tipoPermiso == TipoPermisoEnum.GeneralDivision)
                    {
                        if (versionArchivo.archivo.divisionID == permisoEspecial.entidadID)
                        {
                            PasarValoresPermisoEspecial(ref nuevoPermiso, permisoEspecial);
                        }
                    }
                    else if (tipoPermiso == TipoPermisoEnum.GeneralSubdivision)
                    {
                        if (versionArchivo.archivo.subdivisionID == permisoEspecial.entidadID)
                        {
                            PasarValoresPermisoEspecial(ref nuevoPermiso, permisoEspecial);
                        }
                    }
                    else
                    {
                        if (versionArchivo.archivo.ccID == permisoEspecial.entidadID)
                        {
                            PasarValoresPermisoEspecial(ref nuevoPermiso, permisoEspecial);
                        }
                    }

                    // Se agrega el nuevo permiso a la lista de permisos por agregar.
                    listaNuevosPermisos.Add(nuevoPermiso);
                }

                _context.tblFM_Permiso.AddRange(listaNuevosPermisos);
            }

            _context.SaveChanges();
        }

        /// <summary>
        /// Pasa los valores de un permiso de tipo especial a un permiso normal y pone el estatus de la vista como seleccionado (2).
        /// </summary>
        /// <param name="nuevoPermiso"></param>
        /// <param name="permisoEspecial"></param>
        private void PasarValoresPermisoEspecial(ref tblFM_Permiso nuevoPermiso, tblFM_PermisoEspecial permisoEspecial)
        {
            nuevoPermiso.puedeSubir = permisoEspecial.puedeSubir;
            nuevoPermiso.puedeEliminar = permisoEspecial.puedeEliminar;
            nuevoPermiso.puedeDescargarArchivo = permisoEspecial.puedeDescargarArchivo;
            nuevoPermiso.puedeDescargarCarpeta = permisoEspecial.puedeDescargarCarpeta;
            nuevoPermiso.puedeActualizar = permisoEspecial.puedeActualizar;
            nuevoPermiso.puedeCrear = permisoEspecial.puedeCrear;
            nuevoPermiso.estatusVista = 2;
        }

        private void ActualizarPermisosPorPermisoSeguridad(tblFM_PermisoEspecial permisoEspecial)
        {
            int usuarioID = permisoEspecial.usuarioID;

            // Verifica si el usuario ya tiene registros de permiso o no
            var tienePermisos = _context.tblFM_Permiso.Any(x => x.usuarioID == usuarioID);

            bool puedeEliminar = permisoEspecial.tipoPermiso == TipoPermisoEnum.SeguridadAdmin;

            // Si el usuario ya tiene registros, se le actualizan.
            if (tienePermisos)
            {
                //var versionArchivosSeguridad = _context.tblFM_Permiso.Where(x => x.archivo.perteneceSeguridad).ToList();
                var listaPermisosUsuario = (from permiso in _context.tblFM_Permiso
                                            join version in _context.tblFM_Version
                                                on permiso.archivoID equals version.archivoID
                                            where
                                                version.activo &&
                                                version.archivo.perteneceSeguridad &&
                                                permiso.usuarioID == usuarioID
                                            select permiso)
                                            .ToList();
                foreach (var permisoArchivo in listaPermisosUsuario)
                {
                    permisoArchivo.puedeSubir = true;
                    permisoArchivo.puedeEliminar = puedeEliminar;
                    permisoArchivo.puedeDescargarArchivo = true;
                    permisoArchivo.puedeDescargarCarpeta = true;
                    permisoArchivo.puedeActualizar = true;
                    permisoArchivo.puedeCrear = true;
                    permisoArchivo.estatusVista = 2;
                }
            }
            // Si no, se le crea un registro de permiso nuevo por cada archivo activo existente.
            else
            {
                var listaNuevosPermisos = new List<tblFM_Permiso>();
                var versionArchivosActivos = _context.tblFM_Version.Where(x => x.activo).ToList();

                foreach (var versionArchivo in versionArchivosActivos)
                {
                    var nuevoPermiso = new tblFM_Permiso { usuarioID = usuarioID, archivoID = versionArchivo.archivoID };

                    if (versionArchivo.archivo.perteneceSeguridad)
                    {
                        nuevoPermiso.puedeSubir = true;
                        nuevoPermiso.puedeEliminar = puedeEliminar;
                        nuevoPermiso.puedeDescargarArchivo = true;
                        nuevoPermiso.puedeDescargarCarpeta = true;
                        nuevoPermiso.puedeActualizar = true;
                        nuevoPermiso.puedeCrear = true;
                        nuevoPermiso.estatusVista = 2;
                        nuevoPermiso.FK_UsuarioCreacion = vSesiones.sesionUsuarioDTO.id;
                        nuevoPermiso.fechaCreacion = DateTime.Now;
                        nuevoPermiso.registroActivo = true;
                    }

                    // Se agrega el nuevo permiso a la lista de permisos por agregar.
                    listaNuevosPermisos.Add(nuevoPermiso);
                }

                _context.tblFM_Permiso.AddRange(listaNuevosPermisos);
            }

            _context.SaveChanges();
        }

        private void EliminarPermisoGeneral(tblFM_PermisoEspecial permisoEspecial)
        {
            int usuarioID = permisoEspecial.usuarioID;
            var tipoPermiso = permisoEspecial.tipoPermiso;

            var permisosUsuario = _context.tblFM_Permiso.Where(x => x.usuarioID == usuarioID).ToList();

            var permisosDivision = permisosUsuario.Where(x =>
            {
                switch (tipoPermiso)
                {
                    case TipoPermisoEnum.GeneralDivision:
                        return x.archivo.divisionID == permisoEspecial.entidadID;
                    case TipoPermisoEnum.GeneralSubdivision:
                        return x.archivo.subdivisionID == permisoEspecial.entidadID;
                    case TipoPermisoEnum.GeneralObra:
                        return x.archivo.ccID == permisoEspecial.entidadID;
                    default:
                        return false;
                }
            }).ToList();


            foreach (var registroPermiso in permisosDivision)
            {
                registroPermiso.puedeSubir = false;
                registroPermiso.puedeEliminar = false;
                registroPermiso.puedeDescargarArchivo = false;
                registroPermiso.puedeDescargarCarpeta = false;
                registroPermiso.puedeActualizar = false;
                registroPermiso.puedeCrear = false;
                registroPermiso.estatusVista = 0;
            }

            _context.tblFM_PermisoEspecial.Remove(permisoEspecial);
            _context.SaveChanges();
        }

        private void EliminarPermisoSeguridad(tblFM_PermisoEspecial permisoEspecial)
        {
            int usuarioID = permisoEspecial.usuarioID;
            //var versionArchivosSeguridad = _context.tblFM_Permiso.Where(x => x.archivo.perteneceSeguridad).ToList();
            var listaPermisosUsuario = (from permiso in _context.tblFM_Permiso
                                        join version in _context.tblFM_Version
                                            on permiso.archivoID equals version.archivoID
                                        where
                                            version.activo &&
                                            version.archivo.perteneceSeguridad &&
                                            permiso.usuarioID == usuarioID
                                        select permiso)
                                        .ToList();
            foreach (var permisoArchivo in listaPermisosUsuario)
            {
                permisoArchivo.puedeSubir = false;
                permisoArchivo.puedeEliminar = false;
                permisoArchivo.puedeDescargarArchivo = false;
                permisoArchivo.puedeDescargarCarpeta = false;
                permisoArchivo.puedeActualizar = false;
                permisoArchivo.puedeCrear = false;
                permisoArchivo.estatusVista = 0;
            }

            _context.tblFM_PermisoEspecial.Remove(permisoEspecial);

            _context.SaveChanges();
        }

        /// <summary>
        /// Obtiene una lista con los ids de todas las personas que tienen permiso de admin en el gestor documental.
        /// </summary>
        /// 
        /// 
        /// <returns></returns>
        private List<int> ObtenerAdminsIdsGestor()
        {
            return (from a in _context.tblP_AccionesVista
                    join b in _context.tblP_AccionesVistatblP_Usuario
                        on a.id equals b.tblP_AccionesVista_id
                    where a.vistaID == VISTA_GESTOR_ID && a.Accion == PERMISO_ADMIN_GESTOR
                    select b.tblP_Usuario_id)
                    .ToList();
        }

        private List<tblFM_Version> ObtenerListaCarpetasAño()
        {
            try
            {
                List<tblFM_Version> lstVersion = new List<tblFM_Version>();
                switch (vSesiones.sesionEmpresaActual)
                {
                    case (int)EmpresaEnum.Construplan:
                        lstVersion = _context.tblFM_Version.Where(x => x.activo && x.archivo.tipoCarpeta == TipoCarpetaEnum.Año && x.archivo.año == 2022).OrderByDescending(x => x.archivo.año).ToList();
                        break;
                    case (int)EmpresaEnum.Colombia:
                        lstVersion = _context.tblFM_Version.Where(x => x.activo && x.archivo.tipoCarpeta == TipoCarpetaEnum.Año).OrderByDescending(x => x.archivo.año).ToList();
                        break;
                    case (int)EmpresaEnum.Peru:
                        lstVersion = _context.tblFM_Version.Where(x => x.activo && x.archivo.tipoCarpeta == TipoCarpetaEnum.Año).OrderByDescending(x => x.archivo.año).ToList();
                        break;
                    default:
                        break;
                }

                return lstVersion;
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                return null;
            }
        }

        private tblFM_Version ObtenerCarpetaDivisionPorDivisionIdYAño(int divisionID, int año)
        {
            return _context.tblFM_Version
                        .FirstOrDefault(x =>
                            x.archivo.tipoCarpeta == TipoCarpetaEnum.Division &&
                            x.archivo.divisionID == divisionID &&
                            x.archivo.año == año &&
                            x.activo
                            );
        }

        private tblFM_Version ObtenerCarpetaSubdivisionPorSubdivisionIdYAño(int subdivisionID, int año)
        {
            return _context.tblFM_Version
                        .FirstOrDefault(x =>
                            x.archivo.tipoCarpeta == TipoCarpetaEnum.Subdivision &&
                            x.archivo.subdivisionID == subdivisionID &&
                            x.archivo.año == año &&
                            x.activo
                            );
        }

        /// <summary>
        /// Obtiene una lista con los id de todos los usuarios que tengan registros de permiso en el gestor.
        /// </summary>
        /// <returns></returns>
        private List<int> ObtenerUsuariosIdsConPermisosGestor()
        {
            return _context.tblFM_Permiso
                .Where(x => x.archivo.tipoCarpeta == TipoCarpetaEnum.Año)
                .Select(x => x.usuarioID)
                .Distinct()
                .ToList();
        }

        private tblFM_Version ObtenerCarpetaObraPorCCID(tblFM_Version carpetaPadre)
        {
            return _context.tblFM_Version.FirstOrDefault(x => (x.archivo.tipoCarpeta == TipoCarpetaEnum.Obra && x.archivo.ccID == carpetaPadre.archivo.ccID && x.activo));
        }
        #endregion

        /////// CREAR ESTRUCTURA OBRAS ///////

        #region Crear Estructura de Obra
        public Dictionary<string, object> CrearEstructuraObra(int divisionID, int ccID)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                string rutaFisicaCarpetaObra = "";
                try
                {
                    var rutasFisicasCarpetas = new List<string>();
                    var listaArchivosCreados = new List<tblFM_Archivo>();
                    int añoActual = DateTime.Now.Year;
                    int usuarioID = vSesiones.sesionUsuarioDTO.id;

                    // Verifica que no haya carpetas de esa obra.
                    var obrasCreadas = _context.tblFM_Archivo.Where(x =>
                        x.tipoCarpeta == TipoCarpetaEnum.Obra && x.año == añoActual)
                        .Select(x => x.ccID).Distinct().ToList();

                    if (obrasCreadas.Contains(ccID))
                    {
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "Ya hay una estructura de carpetas para esta obra.");
                        return resultado;
                    }

                    var carpetaDivision = ObtenerCarpetaDivisionPorDivisionIdYAño(divisionID, añoActual);

                    if (carpetaDivision == null)
                    {
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "No se encontró la carpeta división.");
                        return resultado;
                    }

                    var cc = _context.tblP_CC.First(x => x.id == ccID);

                    #region Carpeta Obra
                    var carpetaObra = new tblFM_Archivo
                    {
                        padreID = carpetaDivision.archivoID,
                        nivel = carpetaDivision.archivo.nivel + 1,
                        año = añoActual,
                        divisionID = divisionID,
                        ccID = ccID,
                        esCarpeta = true,
                        tipoCarpeta = TipoCarpetaEnum.Obra
                    };
                    _context.tblFM_Archivo.Add(carpetaObra);
                    _context.SaveChanges();

                    _context.tblFM_ArchivotblFM_TipoArchivo.Add(
                        new tblFM_ArchivotblFM_TipoArchivo
                        {
                            archivoID = carpetaObra.id,
                            tipoArchivoID = 1
                        }
                    );

                    var nuevaVersionObra = new tblFM_Version
                    {
                        archivoID = carpetaObra.id,
                        usuarioCreadorID = usuarioID,
                        version = 1,
                        ruta = Path.Combine(carpetaDivision.ruta, carpetaDivision.nombre),
                        nombre = cc.cc.Trim() + " - " + cc.descripcion.Trim(),
                        activo = true,
                        fechaCreacion = DateTime.Now,
                        abreviacion = cc.cc.Trim(),
                        considerarse = true
                    };
                    _context.tblFM_Version.Add(nuevaVersionObra);
                    _context.SaveChanges();

                    rutaFisicaCarpetaObra = Path.Combine(RUTA_BASE, nuevaVersionObra.ruta, nuevaVersionObra.nombre);
                    rutasFisicasCarpetas.Add(rutaFisicaCarpetaObra);
                    #endregion

                    #region  0 Licitación
                    {
                        var carpetaLicitacion = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 0,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaLicitacion);
                        _context.SaveChanges();

                        // Se agregan los tipos de archivos IDs
                        var tiposArchivosIDs = new List<int> { 1, 2, 3, 4 };

                        tiposArchivosIDs.ForEach(tipoArchivoID =>
                        {
                            _context.tblFM_ArchivotblFM_TipoArchivo.Add(
                                new tblFM_ArchivotblFM_TipoArchivo
                                {
                                    archivoID = carpetaLicitacion.id,
                                    tipoArchivoID = tipoArchivoID
                                }
                            );
                        });

                        var nuevaVersionLicitacion = new tblFM_Version
                        {
                            archivoID = carpetaLicitacion.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Licitación",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "LIC",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionLicitacion);
                        _context.SaveChanges();

                        listaArchivosCreados.Add(carpetaLicitacion);

                        var rutaFisicaCarpetaLicitacion = Path.Combine(RUTA_BASE, nuevaVersionLicitacion.ruta, nuevaVersionLicitacion.nombre);
                        rutasFisicasCarpetas.Add(rutaFisicaCarpetaLicitacion);

                        #region Bases y Anexos
                        var carpetaBasesAnexos = new tblFM_Archivo
                        {
                            padreID = nuevaVersionLicitacion.archivoID,
                            nivel = carpetaLicitacion.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 0,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaBasesAnexos);
                        _context.SaveChanges();

                        // Se agregan los tipos de archivos IDs
                        _context.tblFM_ArchivotblFM_TipoArchivo.Add(
                            new tblFM_ArchivotblFM_TipoArchivo
                            {
                                archivoID = carpetaBasesAnexos.id,
                                tipoArchivoID = 1
                            }
                        );

                        var nuevaVersionBasesAnexos = new tblFM_Version
                        {
                            archivoID = carpetaBasesAnexos.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionLicitacion.ruta, nuevaVersionLicitacion.nombre),
                            nombre = "Bases y Anexos",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "BA",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionBasesAnexos);
                        _context.SaveChanges();

                        listaArchivosCreados.Add(carpetaBasesAnexos);

                        var rutaFisicaCarpetaBasesAnexos = Path.Combine(RUTA_BASE, nuevaVersionBasesAnexos.ruta, nuevaVersionBasesAnexos.nombre);
                        rutasFisicasCarpetas.Add(rutaFisicaCarpetaBasesAnexos);
                        #endregion

                    }
                    #endregion

                    #region 1 Presupuesto
                    {
                        var carpetaPresupuesto = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 1,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaPresupuesto);
                        _context.SaveChanges();

                        // Se agregan los tipos de archivos IDs
                        var tiposArchivosIDs = new List<int> { 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 };

                        tiposArchivosIDs.ForEach(tipoArchivoID =>
                        {
                            _context.tblFM_ArchivotblFM_TipoArchivo.Add(
                                new tblFM_ArchivotblFM_TipoArchivo
                                {
                                    archivoID = carpetaPresupuesto.id,
                                    tipoArchivoID = tipoArchivoID
                                }
                            );
                        });

                        var nuevaVersionPresupuesto = new tblFM_Version
                        {
                            archivoID = carpetaPresupuesto.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Presupuesto",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "PRES",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionPresupuesto);
                        _context.SaveChanges();

                        listaArchivosCreados.Add(carpetaPresupuesto);

                        var rutaFisicaCarpetaPresupuesto = Path.Combine(RUTA_BASE, nuevaVersionPresupuesto.ruta, nuevaVersionPresupuesto.nombre);
                        rutasFisicasCarpetas.Add(rutaFisicaCarpetaPresupuesto);
                    }
                    #endregion

                    #region 2 Cotizaciones principales
                    {
                        var carpetaCotizacionesP = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 2,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaCotizacionesP);
                        _context.SaveChanges();

                        // Se agregan los tipos de archivos IDs
                        var tiposArchivosIDs = new List<int> { 1, 15 };

                        tiposArchivosIDs.ForEach(tipoArchivoID =>
                        {
                            _context.tblFM_ArchivotblFM_TipoArchivo.Add(
                                new tblFM_ArchivotblFM_TipoArchivo
                                {
                                    archivoID = carpetaCotizacionesP.id,
                                    tipoArchivoID = tipoArchivoID
                                }
                            );
                        });

                        var nuevaVersionCotizacionesP = new tblFM_Version
                        {
                            archivoID = carpetaCotizacionesP.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Cotizaciones Principales",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "COPR",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionCotizacionesP);
                        _context.SaveChanges();

                        listaArchivosCreados.Add(carpetaCotizacionesP);

                        var rutaFisicaCarpetaCotizacionP = Path.Combine(RUTA_BASE, nuevaVersionCotizacionesP.ruta, nuevaVersionCotizacionesP.nombre);
                        rutasFisicasCarpetas.Add(rutaFisicaCarpetaCotizacionP);
                    }
                    #endregion

                    #region 3 Junta de Arranque
                    {
                        var carpetaJuntaArranque = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 3,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaJuntaArranque);
                        _context.SaveChanges();

                        // Se agregan los tipos de archivos IDs
                        var tiposArchivosIDs = new List<int> { 1, 16, 17, 18, 19 };

                        tiposArchivosIDs.ForEach(tipoArchivoID =>
                        {
                            _context.tblFM_ArchivotblFM_TipoArchivo.Add(
                                new tblFM_ArchivotblFM_TipoArchivo
                                {
                                    archivoID = carpetaJuntaArranque.id,
                                    tipoArchivoID = tipoArchivoID
                                }
                            );
                        });

                        var nuevaVersionJuntaArranque = new tblFM_Version
                        {
                            archivoID = carpetaJuntaArranque.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Junta de Arranque",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "JA",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionJuntaArranque);
                        _context.SaveChanges();

                        listaArchivosCreados.Add(carpetaJuntaArranque);

                        var rutaFisicaCarpetaJuntaArranque = Path.Combine(RUTA_BASE, nuevaVersionJuntaArranque.ruta, nuevaVersionJuntaArranque.nombre);
                        rutasFisicasCarpetas.Add(rutaFisicaCarpetaJuntaArranque);
                    }
                    #endregion

                    #region 4 Documentación Legal
                    {
                        var carpetaDocLegal = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 4,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaDocLegal);
                        _context.SaveChanges();

                        // Se agregan los tipos de archivos IDs
                        var tiposArchivosIDs = new List<int> { 1, 20, 21, 22, 23, 24, 25 };

                        tiposArchivosIDs.ForEach(tipoArchivoID =>
                        {
                            _context.tblFM_ArchivotblFM_TipoArchivo.Add(
                                new tblFM_ArchivotblFM_TipoArchivo
                                {
                                    archivoID = carpetaDocLegal.id,
                                    tipoArchivoID = tipoArchivoID
                                }
                            );
                        });

                        var nuevaVersionDocLegal = new tblFM_Version
                        {
                            archivoID = carpetaDocLegal.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Documentación Legal",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "DL",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionDocLegal);
                        _context.SaveChanges();

                        listaArchivosCreados.Add(carpetaDocLegal);

                        var rutaFisicaCarpetaDocLegal = Path.Combine(RUTA_BASE, nuevaVersionDocLegal.ruta, nuevaVersionDocLegal.nombre);
                        rutasFisicasCarpetas.Add(rutaFisicaCarpetaDocLegal);
                    }
                    #endregion

                    #region 5 Documentos Oficiales
                    {
                        var carpetaDocOficiales = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 5,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaDocOficiales);
                        _context.SaveChanges();

                        // Se agregan los tipos de archivos IDs
                        var tiposArchivosIDs = new List<int> { 1, 26, 27, 28 };

                        tiposArchivosIDs.ForEach(tipoArchivoID =>
                        {
                            _context.tblFM_ArchivotblFM_TipoArchivo.Add(
                                new tblFM_ArchivotblFM_TipoArchivo
                                {
                                    archivoID = carpetaDocOficiales.id,
                                    tipoArchivoID = tipoArchivoID
                                }
                            );
                        });

                        var nuevaVersionDocOficiales = new tblFM_Version
                        {
                            archivoID = carpetaDocOficiales.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Documentos Oficiales",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "DO",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionDocOficiales);
                        _context.SaveChanges();

                        listaArchivosCreados.Add(carpetaDocOficiales);

                        var rutaFisicaCarpetaDocOficiales = Path.Combine(RUTA_BASE, nuevaVersionDocOficiales.ruta, nuevaVersionDocOficiales.nombre);
                        rutasFisicasCarpetas.Add(rutaFisicaCarpetaDocOficiales);
                    }
                    #endregion

                    #region 6 Planos de Ingeniería
                    {
                        var carpetaPI = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 6,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaPI);
                        _context.SaveChanges();

                        // Se agregan los tipos de archivos IDs
                        var tiposArchivosIDs = new List<int> { 1, 29, 30 };

                        tiposArchivosIDs.ForEach(tipoArchivoID =>
                        {
                            _context.tblFM_ArchivotblFM_TipoArchivo.Add(
                                new tblFM_ArchivotblFM_TipoArchivo
                                {
                                    archivoID = carpetaPI.id,
                                    tipoArchivoID = tipoArchivoID
                                }
                            );
                        });

                        var nuevaVersionPI = new tblFM_Version
                        {
                            archivoID = carpetaPI.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Planos de Ingeniería",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "PI",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionPI);
                        _context.SaveChanges();

                        listaArchivosCreados.Add(carpetaPI);

                        var rutaFisicaCarpetaPI = Path.Combine(RUTA_BASE, nuevaVersionPI.ruta, nuevaVersionPI.nombre);
                        rutasFisicasCarpetas.Add(rutaFisicaCarpetaPI);
                    }
                    #endregion

                    #region 7 Estimaciones de Obra
                    {
                        var carpetaEO = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 7,
                            tipoCarpeta = TipoCarpetaEnum.Estimaciones
                        };
                        _context.tblFM_Archivo.Add(carpetaEO);
                        _context.SaveChanges();

                        // Se agregan los tipos de archivos IDs
                        var tiposArchivosIDs = new List<int> { 1 };

                        tiposArchivosIDs.ForEach(tipoArchivoID =>
                        {
                            _context.tblFM_ArchivotblFM_TipoArchivo.Add(
                                new tblFM_ArchivotblFM_TipoArchivo
                                {
                                    archivoID = carpetaEO.id,
                                    tipoArchivoID = tipoArchivoID
                                }
                            );
                        });

                        var nuevaVersionEO = new tblFM_Version
                        {
                            archivoID = carpetaEO.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Estimaciones de Obra",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "EST",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionEO);
                        _context.SaveChanges();

                        listaArchivosCreados.Add(carpetaEO);

                        var rutaFisicaCarpetaEO = Path.Combine(RUTA_BASE, nuevaVersionEO.ruta, nuevaVersionEO.nombre);
                        rutasFisicasCarpetas.Add(rutaFisicaCarpetaEO);
                    }
                    #endregion

                    #region 8 Subcontratos
                    {
                        var carpetaSubcontratos = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 8,
                            tipoCarpeta = TipoCarpetaEnum.Subcontratos
                        };
                        _context.tblFM_Archivo.Add(carpetaSubcontratos);
                        _context.SaveChanges();

                        // Se agregan los tipos de archivos IDs
                        var tiposArchivosIDs = new List<int> { 1 };

                        tiposArchivosIDs.ForEach(tipoArchivoID =>
                        {
                            _context.tblFM_ArchivotblFM_TipoArchivo.Add(
                                new tblFM_ArchivotblFM_TipoArchivo
                                {
                                    archivoID = carpetaSubcontratos.id,
                                    tipoArchivoID = tipoArchivoID
                                }
                            );
                        });

                        var nuevaVersionSubcontratos = new tblFM_Version
                        {
                            archivoID = carpetaSubcontratos.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Subcontratos",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "SUBC",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionSubcontratos);
                        _context.SaveChanges();

                        listaArchivosCreados.Add(carpetaSubcontratos);

                        var rutaFisicaCarpetaSubcontratos = Path.Combine(RUTA_BASE, nuevaVersionSubcontratos.ruta, nuevaVersionSubcontratos.nombre);
                        rutasFisicasCarpetas.Add(rutaFisicaCarpetaSubcontratos);
                    }
                    #endregion

                    #region 9 Contratos de renta de equipos
                    {
                        var carpetaContrato_Renta = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 9,
                            tipoCarpeta = TipoCarpetaEnum.Contrato_Renta_Equipo
                        };
                        _context.tblFM_Archivo.Add(carpetaContrato_Renta);
                        _context.SaveChanges();

                        // Se agregan los tipos de archivos IDs
                        var tiposArchivosIDs = new List<int> { 1, 118 };

                        tiposArchivosIDs.ForEach(tipoArchivoID =>
                        {
                            _context.tblFM_ArchivotblFM_TipoArchivo.Add(
                                new tblFM_ArchivotblFM_TipoArchivo
                                {
                                    archivoID = carpetaContrato_Renta.id,
                                    tipoArchivoID = tipoArchivoID
                                }
                            );
                        });

                        var nuevaVersionContrato_Renta = new tblFM_Version
                        {
                            archivoID = carpetaContrato_Renta.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Contratos de renta de equipos",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "CRE",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionContrato_Renta);
                        _context.SaveChanges();

                        listaArchivosCreados.Add(carpetaContrato_Renta);

                        var rutaFisicaCarpetaContrato_Renta = Path.Combine(RUTA_BASE, nuevaVersionContrato_Renta.ruta, nuevaVersionContrato_Renta.nombre);
                        rutasFisicasCarpetas.Add(rutaFisicaCarpetaContrato_Renta);
                    }
                    #endregion

                    #region 10 Minutas Semanales
                    {
                        var carpetaMinutasSemanales = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 10,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaMinutasSemanales);
                        _context.SaveChanges();

                        // Se agregan los tipos de archivos IDs
                        var tiposArchivosIDs = new List<int> { 1, 53 };

                        tiposArchivosIDs.ForEach(tipoArchivoID =>
                        {
                            _context.tblFM_ArchivotblFM_TipoArchivo.Add(
                                new tblFM_ArchivotblFM_TipoArchivo
                                {
                                    archivoID = carpetaMinutasSemanales.id,
                                    tipoArchivoID = tipoArchivoID
                                }
                            );
                        });

                        var nuevaVersionMinutaSemanal = new tblFM_Version
                        {
                            archivoID = carpetaMinutasSemanales.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Minutas Semanales",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "MINUTAS",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionMinutaSemanal);
                        _context.SaveChanges();

                        listaArchivosCreados.Add(carpetaMinutasSemanales);

                        var rutaFisicaCarpetaMinutasSemanales = Path.Combine(RUTA_BASE, nuevaVersionMinutaSemanal.ruta, nuevaVersionMinutaSemanal.nombre);
                        rutasFisicasCarpetas.Add(rutaFisicaCarpetaMinutasSemanales);
                    }
                    #endregion

                    #region 11 Validación de Volúmenes Contractuales
                    {
                        var carpetaVVC = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 11,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaVVC);
                        _context.SaveChanges();

                        // Se agregan los tipos de archivos IDs
                        var tiposArchivosIDs = new List<int> { 1, 54, 55, 56 };

                        tiposArchivosIDs.ForEach(tipoArchivoID =>
                        {
                            _context.tblFM_ArchivotblFM_TipoArchivo.Add(
                                new tblFM_ArchivotblFM_TipoArchivo
                                {
                                    archivoID = carpetaVVC.id,
                                    tipoArchivoID = tipoArchivoID
                                }
                            );
                        });

                        var nuevaVersionVVC = new tblFM_Version
                        {
                            archivoID = carpetaVVC.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Validación de Volúmenes Contractuales",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "VVC",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionVVC);
                        _context.SaveChanges();

                        listaArchivosCreados.Add(carpetaVVC);

                        var rutaFisicaCarpetaVVC = Path.Combine(RUTA_BASE, nuevaVersionVVC.ruta, nuevaVersionVVC.nombre);
                        rutasFisicasCarpetas.Add(rutaFisicaCarpetaVVC);
                    }
                    #endregion

                    #region 12 Reportes de Obra
                    {
                        var carpetaRO = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 12,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaRO);
                        _context.SaveChanges();

                        // Se agregan los tipos de archivos IDs
                        var tiposArchivosIDs = new List<int> { 1, 57, 58, 59, 60 };

                        tiposArchivosIDs.ForEach(tipoArchivoID =>
                        {
                            _context.tblFM_ArchivotblFM_TipoArchivo.Add(
                                new tblFM_ArchivotblFM_TipoArchivo
                                {
                                    archivoID = carpetaRO.id,
                                    tipoArchivoID = tipoArchivoID
                                }
                            );
                        });

                        var nuevaVersionRO = new tblFM_Version
                        {
                            archivoID = carpetaRO.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Reportes de Obra",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "RO",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionRO);
                        _context.SaveChanges();

                        listaArchivosCreados.Add(carpetaRO);

                        var rutaFisicaCarpetaRO = Path.Combine(RUTA_BASE, nuevaVersionRO.ruta, nuevaVersionRO.nombre);
                        rutasFisicasCarpetas.Add(rutaFisicaCarpetaRO);
                    }
                    #endregion

                    #region 13 Calidad
                    {
                        var carpetaCalidad = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 13,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaCalidad);
                        _context.SaveChanges();

                        // Se agregan los tipos de archivos IDs
                        var tiposArchivosIDs = new List<int> { 1, 61, 62, 63, 64, 116, 117 };

                        tiposArchivosIDs.ForEach(tipoArchivoID =>
                        {
                            _context.tblFM_ArchivotblFM_TipoArchivo.Add(
                                new tblFM_ArchivotblFM_TipoArchivo
                                {
                                    archivoID = carpetaCalidad.id,
                                    tipoArchivoID = tipoArchivoID
                                }
                            );
                        });

                        var nuevaVersionCalidad = new tblFM_Version
                        {
                            archivoID = carpetaCalidad.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Calidad",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "CALIDAD",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionCalidad);
                        _context.SaveChanges();

                        listaArchivosCreados.Add(carpetaCalidad);

                        var rutaFisicaCarpetaRO = Path.Combine(RUTA_BASE, nuevaVersionCalidad.ruta, nuevaVersionCalidad.nombre);
                        rutasFisicasCarpetas.Add(rutaFisicaCarpetaRO);
                    }
                    #endregion

                    #region 14 Seguridad
                    {
                        var carpetaSeguridad = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 14,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaSeguridad);
                        _context.SaveChanges();

                        // Se agregan los tipos de archivos IDs
                        var tiposArchivosSeguridadIDs = new int[] { 1, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74 };
                        AñadirTiposArchivoCarpeta(carpetaSeguridad.id, tiposArchivosSeguridadIDs);

                        var nuevaVersionSeguridad = new tblFM_Version
                        {
                            archivoID = carpetaSeguridad.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Seguridad",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "SEG",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionSeguridad);
                        _context.SaveChanges();

                        listaArchivosCreados.Add(carpetaSeguridad);

                        var rutaFisicaCarpetaRO = Path.Combine(RUTA_BASE, nuevaVersionSeguridad.ruta, nuevaVersionSeguridad.nombre);
                        rutasFisicasCarpetas.Add(rutaFisicaCarpetaRO);

                        #region Protocolos de Fatalidad
                        var carpetaProtocolosFatalidad = new tblFM_Archivo
                        {
                            padreID = nuevaVersionSeguridad.archivoID,
                            nivel = carpetaSeguridad.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 0,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaProtocolosFatalidad);
                        _context.SaveChanges();

                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaProtocolosFatalidad.id, tiposArchivosSeguridadIDs);

                        var nuevaVersionProtocolosFatalidad = new tblFM_Version
                        {
                            archivoID = carpetaProtocolosFatalidad.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionSeguridad.ruta, nuevaVersionSeguridad.nombre),
                            nombre = "Protocolos de Fatalidad",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "PF",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionProtocolosFatalidad);
                        _context.SaveChanges();

                        listaArchivosCreados.Add(carpetaProtocolosFatalidad);

                        var rutaFisicaCarpetaProtocolosFatalidad = Path.Combine(RUTA_BASE, nuevaVersionProtocolosFatalidad.ruta, nuevaVersionProtocolosFatalidad.nombre);
                        rutasFisicasCarpetas.Add(rutaFisicaCarpetaProtocolosFatalidad);

                        #region Actividades de Excavaciones
                        var carpetaActividadesExcavaciones = new tblFM_Archivo
                        {
                            padreID = nuevaVersionProtocolosFatalidad.archivoID,
                            nivel = carpetaProtocolosFatalidad.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 0,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaActividadesExcavaciones);
                        _context.SaveChanges();

                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaActividadesExcavaciones.id, tiposArchivosSeguridadIDs);

                        var nuevaVersionActividadesExcavaciones = new tblFM_Version
                        {
                            archivoID = carpetaActividadesExcavaciones.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionProtocolosFatalidad.ruta, nuevaVersionProtocolosFatalidad.nombre),
                            nombre = "Actividades de Excavaciones",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "ACTEX",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionActividadesExcavaciones);
                        _context.SaveChanges();

                        listaArchivosCreados.Add(carpetaActividadesExcavaciones);

                        var rutaFisicaCarpetaActividadExcavaciones = Path.Combine(RUTA_BASE, nuevaVersionActividadesExcavaciones.ruta, nuevaVersionActividadesExcavaciones.nombre);
                        rutasFisicasCarpetas.Add(rutaFisicaCarpetaActividadExcavaciones);
                        CrearCarpetasMesesSeguridad(carpetaActividadesExcavaciones, nuevaVersionActividadesExcavaciones,
                            tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Estabalización de Taludes
                        var carpetaEstabalizacionTaludes = new tblFM_Archivo
                        {
                            padreID = nuevaVersionProtocolosFatalidad.archivoID,
                            nivel = carpetaProtocolosFatalidad.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 1,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaEstabalizacionTaludes);
                        _context.SaveChanges();

                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaEstabalizacionTaludes.id, tiposArchivosSeguridadIDs);

                        var nuevaVersionEstabilizacionTaludes = new tblFM_Version
                        {
                            archivoID = carpetaEstabalizacionTaludes.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionProtocolosFatalidad.ruta, nuevaVersionProtocolosFatalidad.nombre),
                            nombre = "Estabilización de Taludes",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "ET",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionEstabilizacionTaludes);
                        _context.SaveChanges();

                        listaArchivosCreados.Add(carpetaEstabalizacionTaludes);

                        var rutaFisicaCarpetaEstabilizacionTaludes = Path.Combine(RUTA_BASE, nuevaVersionEstabilizacionTaludes.ruta, nuevaVersionEstabilizacionTaludes.nombre);
                        rutasFisicasCarpetas.Add(rutaFisicaCarpetaEstabilizacionTaludes);
                        CrearCarpetasMesesSeguridad(carpetaEstabalizacionTaludes, nuevaVersionEstabilizacionTaludes,
                            tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Manipulación de Explosivos
                        var carpetaManipulacionExplosivos = new tblFM_Archivo
                        {
                            padreID = nuevaVersionProtocolosFatalidad.archivoID,
                            nivel = carpetaProtocolosFatalidad.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 2,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaManipulacionExplosivos);
                        _context.SaveChanges();

                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaManipulacionExplosivos.id, tiposArchivosSeguridadIDs);

                        var nuevaVersionManipulacionExplosivos = new tblFM_Version
                        {
                            archivoID = carpetaManipulacionExplosivos.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionProtocolosFatalidad.ruta, nuevaVersionProtocolosFatalidad.nombre),
                            nombre = "Manipulación de Explosivos",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "MEXP",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionManipulacionExplosivos);
                        _context.SaveChanges();

                        listaArchivosCreados.Add(carpetaManipulacionExplosivos);

                        var rutaFisicaCarpetaManipulacionExplosivos = Path.Combine(RUTA_BASE, nuevaVersionManipulacionExplosivos.ruta, nuevaVersionManipulacionExplosivos.nombre);
                        rutasFisicasCarpetas.Add(rutaFisicaCarpetaManipulacionExplosivos);
                        CrearCarpetasMesesSeguridad(carpetaManipulacionExplosivos, nuevaVersionManipulacionExplosivos,
                            tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Revisión y Mantenimiento de Instalaciones de Gas
                        var carpetaRMIG = new tblFM_Archivo
                        {
                            padreID = nuevaVersionProtocolosFatalidad.archivoID,
                            nivel = carpetaProtocolosFatalidad.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 3,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaRMIG);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaRMIG.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaRMIG);

                        var nuevaVersionRMIG = new tblFM_Version
                        {
                            archivoID = carpetaRMIG.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionProtocolosFatalidad.ruta, nuevaVersionProtocolosFatalidad.nombre),
                            nombre = "Revisión y Mantenimiento de Instalaciones de Gas",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "RMIG",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionRMIG);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionRMIG.ruta, nuevaVersionRMIG.nombre));
                        CrearCarpetasMesesSeguridad(carpetaRMIG, nuevaVersionRMIG,
                            tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Revisión y Mantenimiento de Instalaciones de Eléctricas
                        var carpetaRMIE = new tblFM_Archivo
                        {
                            padreID = nuevaVersionProtocolosFatalidad.archivoID,
                            nivel = carpetaProtocolosFatalidad.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 4,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaRMIE);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaRMIE.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaRMIE);

                        var nuevaVersionRMIE = new tblFM_Version
                        {
                            archivoID = carpetaRMIE.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionProtocolosFatalidad.ruta, nuevaVersionProtocolosFatalidad.nombre),
                            nombre = "Revisión y Mantenimiento de Instalaciones de Eléctricas",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "RMIE",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionRMIE);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionRMIE.ruta, nuevaVersionRMIE.nombre));
                        CrearCarpetasMesesSeguridad(carpetaRMIE, nuevaVersionRMIE,
                            tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Revisión y Operación de Cama Baja
                        var carpetaROCB = new tblFM_Archivo
                        {
                            padreID = nuevaVersionProtocolosFatalidad.archivoID,
                            nivel = carpetaProtocolosFatalidad.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 5,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaROCB);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaROCB.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaROCB);

                        var nuevaVersionROCB = new tblFM_Version
                        {
                            archivoID = carpetaROCB.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionProtocolosFatalidad.ruta, nuevaVersionProtocolosFatalidad.nombre),
                            nombre = "Revisión y Operación de Cama Baja",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "ROCB",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionROCB);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionROCB.ruta, nuevaVersionROCB.nombre));
                        CrearCarpetasMesesSeguridad(carpetaROCB, nuevaVersionROCB,
                            tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Revisión y Operación de Camión Articulado
                        var carpetaROCA = new tblFM_Archivo
                        {
                            padreID = nuevaVersionProtocolosFatalidad.archivoID,
                            nivel = carpetaProtocolosFatalidad.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 6,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaROCA);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaROCA.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaROCA);

                        var nuevaVersionROCA = new tblFM_Version
                        {
                            archivoID = carpetaROCA.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionProtocolosFatalidad.ruta, nuevaVersionProtocolosFatalidad.nombre),
                            nombre = "Revisión y Operación de Camión Articulado",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "ROCAR",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionROCA);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionROCA.ruta, nuevaVersionROCA.nombre));
                        CrearCarpetasMesesSeguridad(carpetaROCA, nuevaVersionROCA,
                            tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Revisión y Operación de Camión de Acarreo
                        var carpetaROCAC = new tblFM_Archivo
                        {
                            padreID = nuevaVersionProtocolosFatalidad.archivoID,
                            nivel = carpetaProtocolosFatalidad.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 7,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaROCAC);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaROCAC.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaROCAC);

                        var nuevaVersionROCAC = new tblFM_Version
                        {
                            archivoID = carpetaROCAC.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionProtocolosFatalidad.ruta, nuevaVersionProtocolosFatalidad.nombre),
                            nombre = "Revisión y Operación de Camión de Acarreo",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "ROCA",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionROCAC);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionROCAC.ruta, nuevaVersionROCAC.nombre));
                        CrearCarpetasMesesSeguridad(carpetaROCAC, nuevaVersionROCAC,
                            tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Revisión y Operación de Camión de Pasajeros
                        var carpetaROCP = new tblFM_Archivo
                        {
                            padreID = nuevaVersionProtocolosFatalidad.archivoID,
                            nivel = carpetaProtocolosFatalidad.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 8,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaROCP);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaROCP.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaROCP);

                        var nuevaVersionROCP = new tblFM_Version
                        {
                            archivoID = carpetaROCP.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionProtocolosFatalidad.ruta, nuevaVersionProtocolosFatalidad.nombre),
                            nombre = "Revisión y Operación de Camión de Pasajeros",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "ROCP",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionROCP);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionROCP.ruta, nuevaVersionROCP.nombre));
                        CrearCarpetasMesesSeguridad(carpetaROCP, nuevaVersionROCP,
                            tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Revisión y Operación de Camión Llantera
                        var carpetaROCL = new tblFM_Archivo
                        {
                            padreID = nuevaVersionProtocolosFatalidad.archivoID,
                            nivel = carpetaProtocolosFatalidad.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 9,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaROCL);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaROCL.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaROCL);

                        var nuevaVersionROCL = new tblFM_Version
                        {
                            archivoID = carpetaROCL.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionProtocolosFatalidad.ruta, nuevaVersionProtocolosFatalidad.nombre),
                            nombre = "Revisión y Operación de Camión Llantera",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "ROCL",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionROCL);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionROCL.ruta, nuevaVersionROCL.nombre));
                        CrearCarpetasMesesSeguridad(carpetaROCL, nuevaVersionROCL,
                            tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Revisión y Operación de Camión Pipa de Agua
                        var carpetaROCPA = new tblFM_Archivo
                        {
                            padreID = nuevaVersionProtocolosFatalidad.archivoID,
                            nivel = carpetaProtocolosFatalidad.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 10,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaROCPA);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaROCPA.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaROCPA);

                        var nuevaVersionROCPA = new tblFM_Version
                        {
                            archivoID = carpetaROCPA.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionProtocolosFatalidad.ruta, nuevaVersionProtocolosFatalidad.nombre),
                            nombre = "Revisión y Operación de Camión Pipa de Agua",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "ROCPA",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionROCPA);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionROCPA.ruta, nuevaVersionROCPA.nombre));
                        CrearCarpetasMesesSeguridad(carpetaROCPA, nuevaVersionROCPA,
                            tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Revisión y Operación Pipa Diésel
                        var carpetaROPD = new tblFM_Archivo
                        {
                            padreID = nuevaVersionProtocolosFatalidad.archivoID,
                            nivel = carpetaProtocolosFatalidad.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 11,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaROPD);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaROPD.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaROPD);

                        var nuevaVersionROPD = new tblFM_Version
                        {
                            archivoID = carpetaROPD.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionProtocolosFatalidad.ruta, nuevaVersionProtocolosFatalidad.nombre),
                            nombre = "Revisión y Operación Pipa Diésel",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "ROCPD",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionROPD);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionROPD.ruta, nuevaVersionROPD.nombre));
                        CrearCarpetasMesesSeguridad(carpetaROPD, nuevaVersionROPD,
                            tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Revisión y Operación de Cargador Frontal
                        var carpetaROCF = new tblFM_Archivo
                        {
                            padreID = nuevaVersionProtocolosFatalidad.archivoID,
                            nivel = carpetaProtocolosFatalidad.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 12,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaROCF);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaROCF.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaROCF);

                        var nuevaVersionROCF = new tblFM_Version
                        {
                            archivoID = carpetaROCF.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionProtocolosFatalidad.ruta, nuevaVersionProtocolosFatalidad.nombre),
                            nombre = "Revisión y Operación de Cargador Frontal",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "ROCF",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionROCF);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionROCF.ruta, nuevaVersionROCF.nombre));
                        CrearCarpetasMesesSeguridad(carpetaROCF, nuevaVersionROCF,
                            tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Revisión y Operación de Elevador Articulado
                        var carpetaROEA = new tblFM_Archivo
                        {
                            padreID = nuevaVersionProtocolosFatalidad.archivoID,
                            nivel = carpetaProtocolosFatalidad.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 13,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaROEA);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaROEA.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaROEA);

                        var nuevaVersionROEA = new tblFM_Version
                        {
                            archivoID = carpetaROEA.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionProtocolosFatalidad.ruta, nuevaVersionProtocolosFatalidad.nombre),
                            nombre = "Revisión y Operación de Elevador Articulado",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "ROEA",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionROEA);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionROEA.ruta, nuevaVersionROEA.nombre));
                        CrearCarpetasMesesSeguridad(carpetaROEA, nuevaVersionROEA,
                            tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Revisión y Operación de Excavadora
                        var carpetaROE = new tblFM_Archivo
                        {
                            padreID = nuevaVersionProtocolosFatalidad.archivoID,
                            nivel = carpetaProtocolosFatalidad.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 14,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaROE);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaROE.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaROE);

                        var nuevaVersionROE = new tblFM_Version
                        {
                            archivoID = carpetaROE.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionProtocolosFatalidad.ruta, nuevaVersionProtocolosFatalidad.nombre),
                            nombre = "Revisión y Operación de Excavadora",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "ROE",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionROE);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionROE.ruta, nuevaVersionROE.nombre));
                        CrearCarpetasMesesSeguridad(carpetaROE, nuevaVersionROE,
                           tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Revisión y Operación de Grúas
                        var carpetaROG = new tblFM_Archivo
                        {
                            padreID = nuevaVersionProtocolosFatalidad.archivoID,
                            nivel = carpetaProtocolosFatalidad.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 15,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaROG);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaROG.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaROG);

                        var nuevaVersionROG = new tblFM_Version
                        {
                            archivoID = carpetaROG.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionProtocolosFatalidad.ruta, nuevaVersionProtocolosFatalidad.nombre),
                            nombre = "Revisión y Operación de Grúas",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "ROG",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionROG);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionROG.ruta, nuevaVersionROG.nombre));
                        CrearCarpetasMesesSeguridad(carpetaROG, nuevaVersionROG,
                           tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Revisión y Operación de Manipuladores
                        var carpetaROM = new tblFM_Archivo
                        {
                            padreID = nuevaVersionProtocolosFatalidad.archivoID,
                            nivel = carpetaProtocolosFatalidad.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 16,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaROM);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaROM.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaROM);

                        var nuevaVersionROM = new tblFM_Version
                        {
                            archivoID = carpetaROM.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionProtocolosFatalidad.ruta, nuevaVersionProtocolosFatalidad.nombre),
                            nombre = "Revisión y Operación de Manipuladores",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "ROMAN",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionROM);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionROM.ruta, nuevaVersionROM.nombre));
                        CrearCarpetasMesesSeguridad(carpetaROM, nuevaVersionROM,
                           tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Revisión y Operación de Minicargadores
                        var carpetaROMC = new tblFM_Archivo
                        {
                            padreID = nuevaVersionProtocolosFatalidad.archivoID,
                            nivel = carpetaProtocolosFatalidad.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 17,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaROMC);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaROMC.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaROMC);

                        var nuevaVersionROMC = new tblFM_Version
                        {
                            archivoID = carpetaROMC.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionProtocolosFatalidad.ruta, nuevaVersionProtocolosFatalidad.nombre),
                            nombre = "Revisión y Operación de Minicargadores",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "ROM",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionROMC);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionROMC.ruta, nuevaVersionROMC.nombre));
                        CrearCarpetasMesesSeguridad(carpetaROMC, nuevaVersionROMC,
                           tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Revisión y Operación de Motoconformadora
                        var carpetaROMCF = new tblFM_Archivo
                        {
                            padreID = nuevaVersionProtocolosFatalidad.archivoID,
                            nivel = carpetaProtocolosFatalidad.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 18,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaROMCF);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaROMCF.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaROMCF);

                        var nuevaVersionROMCF = new tblFM_Version
                        {
                            archivoID = carpetaROMCF.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionProtocolosFatalidad.ruta, nuevaVersionProtocolosFatalidad.nombre),
                            nombre = "Revisión y Operación de Motoconformadora",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "ROMOT",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionROMCF);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionROMCF.ruta, nuevaVersionROMCF.nombre));
                        CrearCarpetasMesesSeguridad(carpetaROMCF, nuevaVersionROMCF,
                           tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Revisión y Operación de Orquesta
                        var carpetaROO = new tblFM_Archivo
                        {
                            padreID = nuevaVersionProtocolosFatalidad.archivoID,
                            nivel = carpetaProtocolosFatalidad.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 19,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaROO);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaROO.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaROO);

                        var nuevaVersionROO = new tblFM_Version
                        {
                            archivoID = carpetaROO.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionProtocolosFatalidad.ruta, nuevaVersionProtocolosFatalidad.nombre),
                            nombre = "Revisión y Operación de Orquesta",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "ROO",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionROO);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionROO.ruta, nuevaVersionROO.nombre));
                        CrearCarpetasMesesSeguridad(carpetaROO, nuevaVersionROO,
                           tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Revisión y Operación de Retroexcavadora
                        var carpetaROR = new tblFM_Archivo
                        {
                            padreID = nuevaVersionProtocolosFatalidad.archivoID,
                            nivel = carpetaProtocolosFatalidad.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 20,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaROR);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaROR.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaROR);

                        var nuevaVersionROR = new tblFM_Version
                        {
                            archivoID = carpetaROR.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionProtocolosFatalidad.ruta, nuevaVersionProtocolosFatalidad.nombre),
                            nombre = "Revisión y Operación de Retroexcavadora",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "ROR",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionROR);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionROR.ruta, nuevaVersionROR.nombre));
                        CrearCarpetasMesesSeguridad(carpetaROR, nuevaVersionROR,
                           tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Revisión y Operación de Tractor
                        var carpetaROT = new tblFM_Archivo
                        {
                            padreID = nuevaVersionProtocolosFatalidad.archivoID,
                            nivel = carpetaProtocolosFatalidad.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 21,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaROT);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaROT.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaROT);

                        var nuevaVersionROT = new tblFM_Version
                        {
                            archivoID = carpetaROT.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionProtocolosFatalidad.ruta, nuevaVersionProtocolosFatalidad.nombre),
                            nombre = "Revisión y Operación de Tractor",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "ROTR",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionROT);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionROT.ruta, nuevaVersionROT.nombre));
                        CrearCarpetasMesesSeguridad(carpetaROT, nuevaVersionROT,
                           tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Revisión y Operación de Transportadores
                        var carpetaROTP = new tblFM_Archivo
                        {
                            padreID = nuevaVersionProtocolosFatalidad.archivoID,
                            nivel = carpetaProtocolosFatalidad.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 22,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaROTP);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaROTP.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaROTP);

                        var nuevaVersionROTP = new tblFM_Version
                        {
                            archivoID = carpetaROTP.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionProtocolosFatalidad.ruta, nuevaVersionProtocolosFatalidad.nombre),
                            nombre = "Revisión y Operación de Transportadores",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "ROT",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionROTP);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionROTP.ruta, nuevaVersionROTP.nombre));
                        CrearCarpetasMesesSeguridad(carpetaROTP, nuevaVersionROTP,
                           tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Revisión y Operación de Vehículo de Explosivos
                        var carpetaROVE = new tblFM_Archivo
                        {
                            padreID = nuevaVersionProtocolosFatalidad.archivoID,
                            nivel = carpetaProtocolosFatalidad.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 23,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaROVE);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaROVE.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaROVE);

                        var nuevaVersionROVE = new tblFM_Version
                        {
                            archivoID = carpetaROVE.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionProtocolosFatalidad.ruta, nuevaVersionProtocolosFatalidad.nombre),
                            nombre = "Revisión y Operación de Vehículo de Explosivos",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "ROVE",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionROVE);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionROVE.ruta, nuevaVersionROVE.nombre));
                        CrearCarpetasMesesSeguridad(carpetaROVE, nuevaVersionROVE,
                           tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Revisión y Operación de Vehículo Ligero
                        var carpetaROVL = new tblFM_Archivo
                        {
                            padreID = nuevaVersionProtocolosFatalidad.archivoID,
                            nivel = carpetaProtocolosFatalidad.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 24,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaROVL);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaROVL.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaROVL);

                        var nuevaVersionROVL = new tblFM_Version
                        {
                            archivoID = carpetaROVL.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionProtocolosFatalidad.ruta, nuevaVersionProtocolosFatalidad.nombre),
                            nombre = "Revisión y Operación de Vehículo Ligero",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "ROVL",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionROVL);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionROVL.ruta, nuevaVersionROVL.nombre));
                        CrearCarpetasMesesSeguridad(carpetaROVL, nuevaVersionROVL,
                           tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Trabajo en Espacios Confinados
                        var carpetaTEC = new tblFM_Archivo
                        {
                            padreID = nuevaVersionProtocolosFatalidad.archivoID,
                            nivel = carpetaProtocolosFatalidad.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 25,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaTEC);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaTEC.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaTEC);

                        var nuevaVersionTEC = new tblFM_Version
                        {
                            archivoID = carpetaTEC.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionProtocolosFatalidad.ruta, nuevaVersionProtocolosFatalidad.nombre),
                            nombre = "Trabajo en Espacios Confinados",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "TEC",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionTEC);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionTEC.ruta, nuevaVersionTEC.nombre));
                        CrearCarpetasMesesSeguridad(carpetaTEC, nuevaVersionTEC,
                           tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Trabajos en Alturas
                        var carpetaTA = new tblFM_Archivo
                        {
                            padreID = nuevaVersionProtocolosFatalidad.archivoID,
                            nivel = carpetaProtocolosFatalidad.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 26,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaTA);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaTA.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaTA);

                        var nuevaVersionTA = new tblFM_Version
                        {
                            archivoID = carpetaTA.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionProtocolosFatalidad.ruta, nuevaVersionProtocolosFatalidad.nombre),
                            nombre = "Trabajos en Alturas",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "TA",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionTA);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionTA.ruta, nuevaVersionTA.nombre));
                        CrearCarpetasMesesSeguridad(carpetaTA, nuevaVersionTA,
                           tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Trabajos en Caliente
                        var carpetaTC = new tblFM_Archivo
                        {
                            padreID = nuevaVersionProtocolosFatalidad.archivoID,
                            nivel = carpetaProtocolosFatalidad.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 27,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaTC);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaTC.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaTC);

                        var nuevaVersionTC = new tblFM_Version
                        {
                            archivoID = carpetaTC.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionProtocolosFatalidad.ruta, nuevaVersionProtocolosFatalidad.nombre),
                            nombre = "Trabajos en Caliente",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "TC",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionTC);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionTC.ruta, nuevaVersionTC.nombre));
                        CrearCarpetasMesesSeguridad(carpetaTC, nuevaVersionTC,
                        tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #endregion

                        #region Reportes de Accidentes
                        var carpetaRA = new tblFM_Archivo
                        {
                            padreID = nuevaVersionSeguridad.archivoID,
                            nivel = carpetaSeguridad.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 1,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaRA);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaRA);
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaRA.id, tiposArchivosSeguridadIDs);

                        var nuevaVersionRA = new tblFM_Version
                        {
                            archivoID = carpetaRA.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionSeguridad.ruta, nuevaVersionSeguridad.nombre),
                            nombre = "Reportes de Accidentes",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "RACC",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionRA);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionRA.ruta, nuevaVersionRA.nombre));

                        #region Registrables
                        var carpetaREG = new tblFM_Archivo
                        {
                            padreID = nuevaVersionRA.archivoID,
                            nivel = carpetaRA.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 0,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaREG);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaREG.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaREG);

                        var nuevaVersionREG = new tblFM_Version
                        {
                            archivoID = carpetaREG.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionRA.ruta, nuevaVersionRA.nombre),
                            nombre = "Registrables",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "REG",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionREG);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionREG.ruta, nuevaVersionREG.nombre));
                        CrearCarpetasMesesSeguridad(carpetaREG, nuevaVersionREG,
                        tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Reportables
                        var carpetaREP = new tblFM_Archivo
                        {
                            padreID = nuevaVersionRA.archivoID,
                            nivel = carpetaRA.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 1,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaREP);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaREP.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaREP);

                        var nuevaVersionREP = new tblFM_Version
                        {
                            archivoID = carpetaREP.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionRA.ruta, nuevaVersionRA.nombre),
                            nombre = "Reportables",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "REP",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionREP);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionREP.ruta, nuevaVersionREP.nombre));
                        CrearCarpetasMesesSeguridad(carpetaREP, nuevaVersionREP,
                        tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #endregion

                        #region SGC
                        var carpetaSGC = new tblFM_Archivo
                        {
                            padreID = nuevaVersionSeguridad.archivoID,
                            nivel = carpetaSeguridad.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 2,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaSGC);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaSGC);
                        AñadirTiposArchivoCarpeta(carpetaSGC.id, tiposArchivosSeguridadIDs);

                        var nuevaVersionSGC = new tblFM_Version
                        {
                            archivoID = carpetaSGC.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionSeguridad.ruta, nuevaVersionSeguridad.nombre),
                            nombre = "SGC",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "SGC",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionSGC);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionSGC.ruta, nuevaVersionSGC.nombre));

                        #region Análisis de Riesgos
                        var carpetaAR = new tblFM_Archivo
                        {
                            padreID = nuevaVersionSGC.archivoID,
                            nivel = carpetaSGC.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 0,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaAR);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaAR.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaAR);

                        var nuevaVersionAR = new tblFM_Version
                        {
                            archivoID = carpetaAR.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionSGC.ruta, nuevaVersionSGC.nombre),
                            nombre = "Análisis de Riesgos",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "AR",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionAR);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionAR.ruta, nuevaVersionAR.nombre));

                        #region ASPT
                        var carpetaASPT = new tblFM_Archivo
                        {
                            padreID = nuevaVersionAR.archivoID,
                            nivel = carpetaAR.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 0,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaASPT);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaASPT.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaASPT);

                        var nuevaVersionASPT = new tblFM_Version
                        {
                            archivoID = carpetaASPT.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionAR.ruta, nuevaVersionAR.nombre),
                            nombre = "ASPT",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "ASPT",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionASPT);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionASPT.ruta, nuevaVersionASPT.nombre));
                        CrearCarpetasMesesSeguridad(carpetaASPT, nuevaVersionASPT,
                        tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Registro y Control de ASPT
                        var carpetaRASPT = new tblFM_Archivo
                        {
                            padreID = nuevaVersionAR.archivoID,
                            nivel = carpetaAR.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 1,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaRASPT);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaRASPT.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaRASPT);

                        var nuevaVersionRASPT = new tblFM_Version
                        {
                            archivoID = carpetaRASPT.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionAR.ruta, nuevaVersionAR.nombre),
                            nombre = "Registro y Control de ASPT",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "RCAST",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionRASPT);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionRASPT.ruta, nuevaVersionRASPT.nombre));
                        CrearCarpetasMesesSeguridad(carpetaRASPT, nuevaVersionRASPT,
                        tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #endregion

                        #region Campamentos y Comedores
                        var carpetaCampamentosComedores = new tblFM_Archivo
                        {
                            padreID = nuevaVersionSGC.archivoID,
                            nivel = carpetaSGC.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 1,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaCampamentosComedores);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaCampamentosComedores.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaCampamentosComedores);

                        var nuevaVersionCampamentosComedores = new tblFM_Version
                        {
                            archivoID = carpetaCampamentosComedores.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionSGC.ruta, nuevaVersionSGC.nombre),
                            nombre = "Campamentos y Comedores",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "CC",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionCampamentosComedores);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionCampamentosComedores.ruta, nuevaVersionCampamentosComedores.nombre));

                        #region Asignación de Insumos
                        var carpetaAI = new tblFM_Archivo
                        {
                            padreID = nuevaVersionCampamentosComedores.archivoID,
                            nivel = carpetaCampamentosComedores.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 0,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaAI);
                        _context.SaveChanges();
                        AñadirTiposArchivoCarpeta(carpetaAI.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaAI);

                        var nuevaVersionAI = new tblFM_Version
                        {
                            archivoID = carpetaAI.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionCampamentosComedores.ruta, nuevaVersionCampamentosComedores.nombre),
                            nombre = "Asignación de Insumos",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "AI",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionAI);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionAI.ruta, nuevaVersionAI.nombre));
                        CrearCarpetasMesesSeguridad(carpetaAI, nuevaVersionAI,
                        tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Encuesta de Satisfacción de Campamentos
                        var carpetaESCA = new tblFM_Archivo
                        {
                            padreID = nuevaVersionCampamentosComedores.archivoID,
                            nivel = carpetaCampamentosComedores.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 1,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaESCA);
                        _context.SaveChanges();
                        AñadirTiposArchivoCarpeta(carpetaESCA.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaESCA);

                        var nuevaVersionESCA = new tblFM_Version
                        {
                            archivoID = carpetaESCA.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionCampamentosComedores.ruta, nuevaVersionCampamentosComedores.nombre),
                            nombre = "Encuesta de Satisfacción de Campamentos",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "ESCA",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionESCA);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionESCA.ruta, nuevaVersionESCA.nombre));
                        CrearCarpetasMesesSeguridad(carpetaESCA, nuevaVersionESCA,
                        tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Encuesta de Satisfacción de Comedores
                        var carpetaESCO = new tblFM_Archivo
                        {
                            padreID = nuevaVersionCampamentosComedores.archivoID,
                            nivel = carpetaCampamentosComedores.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 2,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaESCO);
                        _context.SaveChanges();
                        AñadirTiposArchivoCarpeta(carpetaESCO.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaESCO);

                        var nuevaVersionESCO = new tblFM_Version
                        {
                            archivoID = carpetaESCO.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionCampamentosComedores.ruta, nuevaVersionCampamentosComedores.nombre),
                            nombre = "Encuesta de Satisfacción de Comedores",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "ESCO",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionESCO);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionESCO.ruta, nuevaVersionESCO.nombre));
                        CrearCarpetasMesesSeguridad(carpetaESCO, nuevaVersionESCO,
                        tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Inspección de Campamentos
                        var carpetaICA = new tblFM_Archivo
                        {
                            padreID = nuevaVersionCampamentosComedores.archivoID,
                            nivel = carpetaCampamentosComedores.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 3,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaICA);
                        _context.SaveChanges();
                        AñadirTiposArchivoCarpeta(carpetaICA.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaICA);

                        var nuevaVersionICA = new tblFM_Version
                        {
                            archivoID = carpetaICA.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionCampamentosComedores.ruta, nuevaVersionCampamentosComedores.nombre),
                            nombre = "Inspección de Campamentos",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "ICA",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionICA);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionICA.ruta, nuevaVersionICA.nombre));
                        CrearCarpetasMesesSeguridad(carpetaICA, nuevaVersionICA,
                        tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Inspección de Comedores
                        var carpetaICO = new tblFM_Archivo
                        {
                            padreID = nuevaVersionCampamentosComedores.archivoID,
                            nivel = carpetaCampamentosComedores.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 4,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaICO);
                        _context.SaveChanges();
                        AñadirTiposArchivoCarpeta(carpetaICO.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaICO);

                        var nuevaVersionICO = new tblFM_Version
                        {
                            archivoID = carpetaICO.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionCampamentosComedores.ruta, nuevaVersionCampamentosComedores.nombre),
                            nombre = "Inspección de Comedores",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "ICO",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionICO);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionICO.ruta, nuevaVersionICO.nombre));
                        CrearCarpetasMesesSeguridad(carpetaICO, nuevaVersionICO,
                        tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Registro de Personal en Campamento
                        var carpetaRPC = new tblFM_Archivo
                        {
                            padreID = nuevaVersionCampamentosComedores.archivoID,
                            nivel = carpetaCampamentosComedores.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 5,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaRPC);
                        _context.SaveChanges();
                        AñadirTiposArchivoCarpeta(carpetaRPC.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaRPC);

                        var nuevaVersionRPC = new tblFM_Version
                        {
                            archivoID = carpetaRPC.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionCampamentosComedores.ruta, nuevaVersionCampamentosComedores.nombre),
                            nombre = "Registro de Personal en Campamento",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "RPCA",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionRPC);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionRPC.ruta, nuevaVersionRPC.nombre));
                        CrearCarpetasMesesSeguridad(carpetaRPC, nuevaVersionRPC,
                        tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Reglamento para Campamentos
                        var carpetaRCA = new tblFM_Archivo
                        {
                            padreID = nuevaVersionCampamentosComedores.archivoID,
                            nivel = carpetaCampamentosComedores.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 6,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaRCA);
                        _context.SaveChanges();
                        AñadirTiposArchivoCarpeta(carpetaRCA.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaRCA);

                        var nuevaVersionRCA = new tblFM_Version
                        {
                            archivoID = carpetaRCA.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionCampamentosComedores.ruta, nuevaVersionCampamentosComedores.nombre),
                            nombre = "Reglamento para Campamentos",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "RCA",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionRCA);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionRCA.ruta, nuevaVersionRCA.nombre));
                        CrearCarpetasMesesSeguridad(carpetaRCA, nuevaVersionRCA,
                        tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Reglamento para Comedores
                        var carpetaRCO = new tblFM_Archivo
                        {
                            padreID = nuevaVersionCampamentosComedores.archivoID,
                            nivel = carpetaCampamentosComedores.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 7,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaRCO);
                        _context.SaveChanges();
                        AñadirTiposArchivoCarpeta(carpetaRCO.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaRCO);

                        var nuevaVersionRCO = new tblFM_Version
                        {
                            archivoID = carpetaRCO.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionCampamentosComedores.ruta, nuevaVersionCampamentosComedores.nombre),
                            nombre = "Reglamento para Comedores",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "RCO",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionRCO);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionRCO.ruta, nuevaVersionRCO.nombre));
                        CrearCarpetasMesesSeguridad(carpetaRCO, nuevaVersionRCO,
                        tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #endregion

                        #region Evaluación de Operadores
                        var carpetaEOP = new tblFM_Archivo
                        {
                            padreID = nuevaVersionSGC.archivoID,
                            nivel = carpetaSGC.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 2,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaEOP);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaEOP.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaEOP);

                        var nuevaVersionEOP = new tblFM_Version
                        {
                            archivoID = carpetaEOP.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionSGC.ruta, nuevaVersionSGC.nombre),
                            nombre = "Evaluación de Operadores",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "EO",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionEOP);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionEOP.ruta, nuevaVersionEOP.nombre));

                        #region Cambio de Categoría
                        var carpetaCCAT = new tblFM_Archivo
                        {
                            padreID = nuevaVersionEOP.archivoID,
                            nivel = carpetaEOP.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 0,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };

                        _context.tblFM_Archivo.Add(carpetaCCAT);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaCCAT.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaCCAT);

                        var nuevaVersionCCAT = new tblFM_Version
                        {
                            archivoID = carpetaCCAT.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionEOP.ruta, nuevaVersionEOP.nombre),
                            nombre = "Cambio de Categoría",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "CCAT",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionCCAT);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionCCAT.ruta, nuevaVersionCCAT.nombre));
                        CrearCarpetasMesesSeguridad(carpetaCCAT, nuevaVersionCCAT,
                        tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Detección de Necesidades de Capacitación
                        var carpetaDNC = new tblFM_Archivo
                        {
                            padreID = nuevaVersionEOP.archivoID,
                            nivel = carpetaEOP.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 1,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaDNC);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaDNC.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaDNC);

                        var nuevaVersionDNC = new tblFM_Version
                        {
                            archivoID = carpetaDNC.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionEOP.ruta, nuevaVersionEOP.nombre),
                            nombre = "Detección de Necesidades de Capacitación",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "DNC",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionDNC);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionDNC.ruta, nuevaVersionDNC.nombre));
                        CrearCarpetasMesesSeguridad(carpetaDNC, nuevaVersionDNC,
                        tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Entrega de DC3
                        var carpetaEDC3 = new tblFM_Archivo
                        {
                            padreID = nuevaVersionEOP.archivoID,
                            nivel = carpetaEOP.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 2,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaEDC3);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaEDC3.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaEDC3);

                        var nuevaVersionEDC3 = new tblFM_Version
                        {
                            archivoID = carpetaEDC3.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionEOP.ruta, nuevaVersionEOP.nombre),
                            nombre = "Entrega de DC3",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "DC3",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionEDC3);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionEDC3.ruta, nuevaVersionEDC3.nombre));
                        CrearCarpetasMesesSeguridad(carpetaEDC3, nuevaVersionEDC3,
                        tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Evaluación de Campo
                        var carpetaEC = new tblFM_Archivo
                        {
                            padreID = nuevaVersionEOP.archivoID,
                            nivel = carpetaEOP.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 3,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaEC);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaEC.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaEC);

                        var nuevaVersionEC = new tblFM_Version
                        {
                            archivoID = carpetaEC.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionEOP.ruta, nuevaVersionEOP.nombre),
                            nombre = "Evaluación de Campo",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "EC",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionEC);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionEC.ruta, nuevaVersionEC.nombre));
                        CrearCarpetasMesesSeguridad(carpetaEC, nuevaVersionEC,
                        tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Evaluación de Teórica
                        var carpetaEVT = new tblFM_Archivo
                        {
                            padreID = nuevaVersionEOP.archivoID,
                            nivel = carpetaEOP.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 4,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaEVT);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaEVT.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaEVT);

                        var nuevaVersionEVT = new tblFM_Version
                        {
                            archivoID = carpetaEVT.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionEOP.ruta, nuevaVersionEOP.nombre),
                            nombre = "Evaluación de Teórica",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "ET",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionEVT);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionEVT.ruta, nuevaVersionEVT.nombre));
                        CrearCarpetasMesesSeguridad(carpetaEVT, nuevaVersionEVT,
                        tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Programa Mensual de Capacitación
                        var carpetaPMC = new tblFM_Archivo
                        {
                            padreID = nuevaVersionEOP.archivoID,
                            nivel = carpetaEOP.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 5,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaPMC);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaPMC.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaPMC);

                        var nuevaVersionPMC = new tblFM_Version
                        {
                            archivoID = carpetaPMC.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionEOP.ruta, nuevaVersionEOP.nombre),
                            nombre = "Programa Mensual de Capacitación",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "PMC",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionPMC);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionPMC.ruta, nuevaVersionPMC.nombre));
                        CrearCarpetasMesesSeguridad(carpetaPMC, nuevaVersionPMC,
                        tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Registro de Horas de Capacitación
                        var carpetaRHC = new tblFM_Archivo
                        {
                            padreID = nuevaVersionEOP.archivoID,
                            nivel = carpetaEOP.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 6,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaRHC);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaRHC.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaRHC);

                        var nuevaVersionRHC = new tblFM_Version
                        {
                            archivoID = carpetaRHC.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionEOP.ruta, nuevaVersionEOP.nombre),
                            nombre = "Registro de Horas de Capacitación",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "RHC",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionRHC);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionRHC.ruta, nuevaVersionRHC.nombre));
                        CrearCarpetasMesesSeguridad(carpetaRHC, nuevaVersionRHC,
                        tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Reporte de Evaluación
                        var carpetaRE = new tblFM_Archivo
                        {
                            padreID = nuevaVersionEOP.archivoID,
                            nivel = carpetaEOP.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 7,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaRE);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaRE.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaRE);

                        var nuevaVersionRE = new tblFM_Version
                        {
                            archivoID = carpetaRE.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionEOP.ruta, nuevaVersionEOP.nombre),
                            nombre = "Reporte de Evaluación",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "RE",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionRE);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionRE.ruta, nuevaVersionRE.nombre));
                        CrearCarpetasMesesSeguridad(carpetaRE, nuevaVersionRE,
                        tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #endregion

                        #region Indicadores de Seguridad
                        var carpetaISEG = new tblFM_Archivo
                        {
                            padreID = nuevaVersionSGC.archivoID,
                            nivel = carpetaSGC.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 3,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaISEG);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaISEG.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaISEG);

                        var nuevaVersionISEG = new tblFM_Version
                        {
                            archivoID = carpetaISEG.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionSGC.ruta, nuevaVersionSGC.nombre),
                            nombre = "Indicadores de Seguridad",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "ISEG",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionISEG);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionISEG.ruta, nuevaVersionISEG.nombre));

                        #region Base de Datos de Accidentes
                        var carpetaBDA = new tblFM_Archivo
                        {
                            padreID = nuevaVersionISEG.archivoID,
                            nivel = carpetaISEG.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 0,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaBDA);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaBDA.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaBDA);

                        var nuevaVersionBDA = new tblFM_Version
                        {
                            archivoID = carpetaBDA.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionISEG.ruta, nuevaVersionISEG.nombre),
                            nombre = "Base de Datos de Accidentes",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "BDA",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionBDA);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionBDA.ruta, nuevaVersionBDA.nombre));
                        CrearCarpetasMesesSeguridad(carpetaBDA, nuevaVersionBDA,
                        tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #region Programa Mensual
                        var carpetaPM = new tblFM_Archivo
                        {
                            padreID = nuevaVersionISEG.archivoID,
                            nivel = carpetaISEG.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 1,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaPM);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaPM.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaPM);

                        var nuevaVersionPM = new tblFM_Version
                        {
                            archivoID = carpetaPM.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionISEG.ruta, nuevaVersionISEG.nombre),
                            nombre = "Programa Mensual",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "PM",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionPM);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionPM.ruta, nuevaVersionPM.nombre));
                        CrearCarpetasMesesSeguridad(carpetaPM, nuevaVersionPM,
                        tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                        #endregion

                        #endregion
                        #endregion

                        #region SGSST
                        var carpetaSGSST = new tblFM_Archivo
                        {
                            padreID = nuevaVersionSeguridad.archivoID,
                            nivel = carpetaSeguridad.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 3,
                            perteneceSeguridad = true,
                            tipoCarpeta = TipoCarpetaEnum.Normal
                        };
                        _context.tblFM_Archivo.Add(carpetaSGSST);
                        _context.SaveChanges();
                        // Se agregan los tipos de archivos IDs
                        AñadirTiposArchivoCarpeta(carpetaSGSST.id, tiposArchivosSeguridadIDs);
                        listaArchivosCreados.Add(carpetaSGSST);

                        var nuevaVersionSGSST = new tblFM_Version
                        {
                            archivoID = carpetaSGSST.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionSeguridad.ruta, nuevaVersionSeguridad.nombre),
                            nombre = "SGSST",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "SGSST",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionSGSST);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionSGSST.ruta, nuevaVersionSGSST.nombre));
                        #endregion
                    }
                    #endregion

                    #region 15 Matriz de Comunicación
                    {
                        var carpetaMatriz = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = nuevaVersionObra.archivo.nivel + 1,
                            año = añoActual,
                            divisionID = nuevaVersionObra.archivo.divisionID,
                            ccID = nuevaVersionObra.archivo.ccID,
                            esCarpeta = true,
                            orden = 15,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaMatriz);
                        _context.SaveChanges();

                        listaArchivosCreados.Add(carpetaMatriz);

                        AñadirTiposArchivoCarpeta(carpetaMatriz.id, new int[] { 1, 75 });

                        var nuevaVersionMatriz = new tblFM_Version
                        {
                            archivoID = carpetaMatriz.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Matriz de Comunicación",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "MATRIZC",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionMatriz);
                        _context.SaveChanges();

                        var rutaFisicaCarpetaMatriz = Path.Combine(RUTA_BASE, nuevaVersionMatriz.ruta, nuevaVersionMatriz.nombre);
                        rutasFisicasCarpetas.Add(rutaFisicaCarpetaMatriz);
                    }
                    #endregion

                    #region 16 Bitácora de Obra General
                    {
                        var carpetaBitacoraG = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = nuevaVersionObra.archivo.nivel + 1,
                            año = añoActual,
                            divisionID = nuevaVersionObra.archivo.divisionID,
                            ccID = nuevaVersionObra.archivo.ccID,
                            esCarpeta = true,
                            orden = 16,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaBitacoraG);
                        _context.SaveChanges();

                        listaArchivosCreados.Add(carpetaBitacoraG);

                        // Cambiar por nuevos tipos de archivos
                        AñadirTiposArchivoCarpeta(carpetaBitacoraG.id, new int[] { 1, 76 });

                        var nuevaVersionBitacoraG = new tblFM_Version
                        {
                            archivoID = carpetaBitacoraG.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Bitácora de Obra",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "BITÁCORA",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionBitacoraG);
                        _context.SaveChanges();

                        var rutaFisicaCarpetaBitacoraG = Path.Combine(RUTA_BASE, nuevaVersionBitacoraG.ruta, nuevaVersionBitacoraG.nombre);
                        rutasFisicasCarpetas.Add(rutaFisicaCarpetaBitacoraG);
                    }
                    #endregion

                    // Obtiene a todos los usuarios que tengan permisos asignados al gestor de archivos.
                    var listaUsuariosID = ObtenerUsuariosIdsConPermisosGestor();

                    // Se obtiene una lista de todas las personas que tienen permiso especial.
                    var listaPermisosEspeciales = _context.tblFM_PermisoEspecial.ToList();

                    // Crea los registro de permiso a los demás usuarios de los archivos creados (todos menos la carpeta obra).
                    CrearRegistrosPermisosEstructura(listaArchivosCreados, listaUsuariosID, listaPermisosEspeciales);

                    // Se crea el registro del permiso de la carpeta obra y se actualiza el estatus de las vistas para los demás usuarios.
                    CrearNuevosPermisosUsuariosCarpetaObra(carpetaObra, listaUsuariosID, listaPermisosEspeciales);

                    resultado.Add(SUCCESS, true);
                    _context.SaveChanges();

                    // Se crean las carpetas físicas
                    foreach (var rutaCarpeta in rutasFisicasCarpetas)
                    {
                        Directory.CreateDirectory(rutaCarpeta);
                    }

                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    // Intenta eliminar la carpeta obra en caso de algún error para que no queden archivos basura.
                    try
                    {
                        Directory.Delete(rutaFisicaCarpetaObra, true);
                    }
                    catch (Exception) { }

                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "CrearEstructuraObra", e, AccionEnum.AGREGAR, ccID, null);
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, "Ocurrió un error interno al intentar crear la estructura de la obra.");
                }
            }

            return resultado;
        }
        #endregion

        #region Crear Estructura de Obra Industrial
        public Dictionary<string, object> CrearEstructuraObraSubdivision(int subdivisionID, int ccID)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                string rutaFisicaCarpetaObra = "";
                try
                {
                    var rutasFisicasCarpetas = new List<string>();
                    var listaArchivosCreados = new List<tblFM_Archivo>();
                    int añoActual = DateTime.Now.Year;
                    int usuarioID = vSesiones.sesionUsuarioDTO.id;

                    // Verifica que no haya carpetas de esa obra.
                    var obrasCreadas = _context.tblFM_Archivo.Where(x =>
                        x.tipoCarpeta == TipoCarpetaEnum.Obra && x.año == añoActual)
                        .Select(x => x.ccID).Distinct().ToList();

                    if (obrasCreadas.Contains(ccID))
                    {
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "Ya hay una estructura de carpetas para esta obra.");
                        return resultado;
                    }

                    var carpetaSubdivision = ObtenerCarpetaSubdivisionPorSubdivisionIdYAño(subdivisionID, añoActual);

                    int divisionID = carpetaSubdivision.archivo.divisionID;

                    if (carpetaSubdivision == null)
                    {
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "No se encontró la carpeta subdivisión.");
                        return resultado;
                    }

                    var cc = _context.tblP_CC.First(x => x.id == ccID);

                    #region Carpeta Obra
                    var carpetaObra = new tblFM_Archivo
                    {
                        padreID = carpetaSubdivision.archivoID,
                        nivel = carpetaSubdivision.archivo.nivel + 1,
                        año = añoActual,
                        divisionID = divisionID,
                        subdivisionID = subdivisionID,
                        ccID = ccID,
                        esCarpeta = true,
                        tipoCarpeta = TipoCarpetaEnum.Obra
                    };
                    _context.tblFM_Archivo.Add(carpetaObra);
                    _context.SaveChanges();

                    AñadirTiposArchivoCarpeta(carpetaObra.id, new int[] { 1 });

                    var nuevaVersionObra = new tblFM_Version
                    {
                        archivoID = carpetaObra.id,
                        usuarioCreadorID = usuarioID,
                        version = 1,
                        ruta = Path.Combine(carpetaSubdivision.ruta, carpetaSubdivision.nombre),
                        nombre = cc.cc.Trim() + " - " + cc.descripcion.Trim(),
                        activo = true,
                        fechaCreacion = DateTime.Now,
                        abreviacion = cc.cc.Trim(),
                        considerarse = true
                    };
                    _context.tblFM_Version.Add(nuevaVersionObra);
                    _context.SaveChanges();

                    rutaFisicaCarpetaObra = Path.Combine(RUTA_BASE, nuevaVersionObra.ruta, nuevaVersionObra.nombre);
                    rutasFisicasCarpetas.Add(rutaFisicaCarpetaObra);
                    #endregion

                    #region  1 Licitación
                    {
                        var carpetaLicitacion = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            subdivisionID = subdivisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 0,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaLicitacion);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaLicitacion);
                        AñadirTiposArchivoCarpeta(carpetaLicitacion.id, new int[] { 1 });

                        var nuevaVersionLicitacion = new tblFM_Version
                        {
                            archivoID = carpetaLicitacion.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Licitación",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "LIC",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionLicitacion);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionLicitacion.ruta, nuevaVersionLicitacion.nombre));

                        #region Bases de licitaciones
                        {
                            var carpetaBasesLicitaciones = new tblFM_Archivo
                            {
                                padreID = carpetaLicitacion.id,
                                nivel = carpetaLicitacion.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 0,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaBasesLicitaciones);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaBasesLicitaciones);
                            AñadirTiposArchivoCarpeta(carpetaBasesLicitaciones.id, new int[] { 1, 77, 78 });

                            var nuevaVersionBasesAnexos = new tblFM_Version
                            {
                                archivoID = carpetaBasesLicitaciones.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionLicitacion.ruta, nuevaVersionLicitacion.nombre),
                                nombre = "Bases de licitaciones",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "BL",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionBasesAnexos);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionBasesAnexos.ruta, nuevaVersionBasesAnexos.nombre));
                        }
                        #endregion

                        #region Minutas
                        {
                            var carpetaMinutas = new tblFM_Archivo
                            {
                                padreID = carpetaLicitacion.id,
                                nivel = carpetaLicitacion.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 1,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaMinutas);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaMinutas);
                            AñadirTiposArchivoCarpeta(carpetaMinutas.id, new int[] { 1, 79 });

                            var nuevaVersionMinutas = new tblFM_Version
                            {
                                archivoID = carpetaMinutas.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionLicitacion.ruta, nuevaVersionLicitacion.nombre),
                                nombre = "Minutas",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "MIN CLIENT",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionMinutas);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionMinutas.ruta, nuevaVersionMinutas.nombre));
                        }
                        #endregion

                        #region Questions and Answers
                        {
                            var carpetaQA = new tblFM_Archivo
                            {
                                padreID = carpetaLicitacion.id,
                                nivel = carpetaLicitacion.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 2,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaQA);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaQA);
                            AñadirTiposArchivoCarpeta(carpetaQA.id, new int[] { 1, 80 });

                            var nuevaVersionQA = new tblFM_Version
                            {
                                archivoID = carpetaQA.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionLicitacion.ruta, nuevaVersionLicitacion.nombre),
                                nombre = "Questions and Answers",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "Q&A",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionQA);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionQA.ruta, nuevaVersionQA.nombre));
                        }
                        #endregion

                        #region Addendums
                        {
                            var carpetaADD = new tblFM_Archivo
                            {
                                padreID = carpetaLicitacion.id,
                                nivel = carpetaLicitacion.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 3,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaADD);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaADD);
                            AñadirTiposArchivoCarpeta(carpetaADD.id, new int[] { 1, 81 });

                            var nuevaVersionADD = new tblFM_Version
                            {
                                archivoID = carpetaADD.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionLicitacion.ruta, nuevaVersionLicitacion.nombre),
                                nombre = "Addendums",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "ADDENDUM",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionADD);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionADD.ruta, nuevaVersionADD.nombre));
                        }
                        #endregion

                    }
                    #endregion

                    #region 2 Presupuesto
                    {
                        var carpetaPresupuesto = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            subdivisionID = subdivisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 1,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaPresupuesto);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaPresupuesto);
                        AñadirTiposArchivoCarpeta(carpetaPresupuesto.id, new int[] { 1 });

                        var nuevaVersionPresupuesto = new tblFM_Version
                        {
                            archivoID = carpetaPresupuesto.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Presupuesto",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "PRES",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionPresupuesto);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionPresupuesto.ruta, nuevaVersionPresupuesto.nombre));

                        #region Presupuesto a costo directo
                        {
                            var carpetaCACD = new tblFM_Archivo
                            {
                                padreID = carpetaPresupuesto.id,
                                nivel = carpetaPresupuesto.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 0,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaCACD);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaCACD);
                            AñadirTiposArchivoCarpeta(carpetaCACD.id, new int[] { 1, 82 });

                            var nuevaVersionCACD = new tblFM_Version
                            {
                                archivoID = carpetaCACD.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionPresupuesto.ruta, nuevaVersionPresupuesto.nombre),
                                nombre = "Presupuesto a costo directo",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "CD",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionCACD);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionCACD.ruta, nuevaVersionCACD.nombre));
                        }
                        #endregion

                        #region Condiciones generales
                        {
                            var carpetaCG = new tblFM_Archivo
                            {
                                padreID = carpetaPresupuesto.id,
                                nivel = carpetaPresupuesto.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 1,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaCG);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaCG);
                            AñadirTiposArchivoCarpeta(carpetaCG.id, new int[] { 1, 83 });

                            var nuevaVersionCG = new tblFM_Version
                            {
                                archivoID = carpetaCG.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionPresupuesto.ruta, nuevaVersionPresupuesto.nombre),
                                nombre = "Condiciones generales",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "CG",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionCG);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionCG.ruta, nuevaVersionCG.nombre));
                        }
                        #endregion

                        #region Presupuesto final
                        {
                            var carpetaPF = new tblFM_Archivo
                            {
                                padreID = carpetaPresupuesto.id,
                                nivel = carpetaPresupuesto.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 2,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaPF);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaPF);
                            AñadirTiposArchivoCarpeta(carpetaPF.id, new int[] { 1, 84 });

                            var nuevaVersionCG = new tblFM_Version
                            {
                                archivoID = carpetaPF.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionPresupuesto.ruta, nuevaVersionPresupuesto.nombre),
                                nombre = "Presupuesto final",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "FINAL",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionCG);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionCG.ruta, nuevaVersionCG.nombre));
                        }
                        #endregion

                    }
                    #endregion

                    #region 3 Organigrama
                    {
                        var carpetaOrganigrama = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            subdivisionID = subdivisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 2,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaOrganigrama);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaOrganigrama);
                        AñadirTiposArchivoCarpeta(carpetaOrganigrama.id, new int[] { 1, 85 });

                        var nuevaVersionOrganigrama = new tblFM_Version
                        {
                            archivoID = carpetaOrganigrama.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Organigrama",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "ORG",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionOrganigrama);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionOrganigrama.ruta, nuevaVersionOrganigrama.nombre));
                    }
                    #endregion

                    #region 4 Cronograma
                    {
                        var carpetaCronograma = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            subdivisionID = subdivisionID,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 3,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaCronograma);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaCronograma);
                        AñadirTiposArchivoCarpeta(carpetaCronograma.id, new int[] { 1, 86 });

                        var nuevaVersionCronograma = new tblFM_Version
                        {
                            archivoID = carpetaCronograma.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Cronograma",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "CRON",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionCronograma);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionCronograma.ruta, nuevaVersionCronograma.nombre));
                    }
                    #endregion

                    #region 5 Junta de Arranque
                    {
                        var carpetaJA = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            subdivisionID = subdivisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 4,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaJA);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaJA);
                        AñadirTiposArchivoCarpeta(carpetaJA.id, new int[] { 1 });

                        var nuevaVersionJA = new tblFM_Version
                        {
                            archivoID = carpetaJA.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Junta de Arranque",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "JA",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionJA);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionJA.ruta, nuevaVersionJA.nombre));

                        #region Plantilla de personal
                        {
                            var carpetaPLP = new tblFM_Archivo
                            {
                                padreID = carpetaJA.id,
                                nivel = carpetaJA.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 0,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaPLP);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaPLP);
                            AñadirTiposArchivoCarpeta(carpetaPLP.id, new int[] { 1, 16 });

                            var nuevaVersionPLP = new tblFM_Version
                            {
                                archivoID = carpetaPLP.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionJA.ruta, nuevaVersionJA.nombre),
                                nombre = "Plantilla de personal",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "PLANT PERS",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionPLP);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionPLP.ruta, nuevaVersionPLP.nombre));
                        }
                        #endregion

                        #region Solicitud de equipo
                        {
                            var carpetaSE = new tblFM_Archivo
                            {
                                padreID = carpetaJA.id,
                                nivel = carpetaJA.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 1,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaSE);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaSE);
                            AñadirTiposArchivoCarpeta(carpetaSE.id, new int[] { 1, 17 });

                            var nuevaVersionSE = new tblFM_Version
                            {
                                archivoID = carpetaSE.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionJA.ruta, nuevaVersionJA.nombre),
                                nombre = "Solicitud de equipo",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "SOLIC EQ",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionSE);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionSE.ruta, nuevaVersionSE.nombre));
                        }
                        #endregion

                        #region Minuta y lista de asistencia
                        {
                            var carpetaMYLA = new tblFM_Archivo
                            {
                                padreID = carpetaJA.id,
                                nivel = carpetaJA.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 2,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaMYLA);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaMYLA);
                            AñadirTiposArchivoCarpeta(carpetaMYLA.id, new int[] { 1, 87 });

                            var nuevaVersionMYLA = new tblFM_Version
                            {
                                archivoID = carpetaMYLA.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionJA.ruta, nuevaVersionJA.nombre),
                                nombre = "Minuta y lista de asistencia",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "MIN CPLAN",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionMYLA);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionMYLA.ruta, nuevaVersionMYLA.nombre));
                        }
                        #endregion

                        #region Cuadro de facultamiento
                        {
                            var carpetaCF = new tblFM_Archivo
                            {
                                padreID = carpetaJA.id,
                                nivel = carpetaJA.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 3,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaCF);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaCF);
                            AñadirTiposArchivoCarpeta(carpetaCF.id, new int[] { 1, 19 });

                            var nuevaVersionMYLA = new tblFM_Version
                            {
                                archivoID = carpetaCF.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionJA.ruta, nuevaVersionJA.nombre),
                                nombre = "Cuadro de facultamiento",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "CUA FAC",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionMYLA);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionMYLA.ruta, nuevaVersionMYLA.nombre));
                        }
                        #endregion

                    }
                    #endregion

                    #region 6 Minutas de Obra Semanal
                    {
                        var carpetaMOS = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            subdivisionID = subdivisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 5,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaMOS);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaMOS);
                        AñadirTiposArchivoCarpeta(carpetaMOS.id, new int[] { 1, 53 });

                        var nuevaVersionMOS = new tblFM_Version
                        {
                            archivoID = carpetaMOS.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Minutas de Obra Semanal",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "MIN SEM",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionMOS);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionMOS.ruta, nuevaVersionMOS.nombre));
                    }
                    #endregion

                    #region 7 Documentos Legales
                    {
                        var carpetaDL = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            subdivisionID = subdivisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 6,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaDL);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaDL);
                        AñadirTiposArchivoCarpeta(carpetaDL.id, new int[] { 1 });

                        var nuevaVersionDL = new tblFM_Version
                        {
                            archivoID = carpetaDL.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Documentos Legales",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "DOC LEG",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionDL);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionDL.ruta, nuevaVersionDL.nombre));

                        #region Contrato u orden de compra
                        {
                            var carpetaCUOC = new tblFM_Archivo
                            {
                                padreID = carpetaDL.id,
                                nivel = carpetaDL.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 0,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaCUOC);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaCUOC);
                            AñadirTiposArchivoCarpeta(carpetaCUOC.id, new int[] { 1, 88 });

                            var nuevaVersionCUOC = new tblFM_Version
                            {
                                archivoID = carpetaCUOC.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionDL.ruta, nuevaVersionDL.nombre),
                                nombre = "Contrato u orden de compra",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "CONT",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionCUOC);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionCUOC.ruta, nuevaVersionCUOC.nombre));
                        }
                        #endregion

                        #region Fianzas
                        {
                            var carpetaFZ = new tblFM_Archivo
                            {
                                padreID = carpetaDL.id,
                                nivel = carpetaDL.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 1,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaFZ);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaFZ);
                            AñadirTiposArchivoCarpeta(carpetaFZ.id, new int[] { 1, 21, 22, 23 });

                            var nuevaVersionFZ = new tblFM_Version
                            {
                                archivoID = carpetaFZ.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionDL.ruta, nuevaVersionDL.nombre),
                                nombre = "Fianzas",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "FIANZAS",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionFZ);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionFZ.ruta, nuevaVersionFZ.nombre));
                        }
                        #endregion

                        #region Seguro RC
                        {
                            var carpetaRC = new tblFM_Archivo
                            {
                                padreID = carpetaDL.id,
                                nivel = carpetaDL.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 2,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaRC);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaRC);
                            AñadirTiposArchivoCarpeta(carpetaRC.id, new int[] { 1, 24 });

                            var nuevaVersionRC = new tblFM_Version
                            {
                                archivoID = carpetaRC.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionDL.ruta, nuevaVersionDL.nombre),
                                nombre = "Seguro RC",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "SEG RC",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionRC);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionRC.ruta, nuevaVersionRC.nombre));
                        }
                        #endregion

                        #region SIROC
                        {
                            var carpetaSIROC = new tblFM_Archivo
                            {
                                padreID = carpetaDL.id,
                                nivel = carpetaDL.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 3,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaSIROC);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaSIROC);
                            AñadirTiposArchivoCarpeta(carpetaSIROC.id, new int[] { 1, 89, 90 });

                            var nuevaVersionSIROC = new tblFM_Version
                            {
                                archivoID = carpetaSIROC.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionDL.ruta, nuevaVersionDL.nombre),
                                nombre = "SIROC",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "SIROC",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionSIROC);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionSIROC.ruta, nuevaVersionSIROC.nombre));
                        }
                        #endregion

                        #region Cartas garantía
                        {
                            var carpetaCGT = new tblFM_Archivo
                            {
                                padreID = carpetaDL.id,
                                nivel = carpetaDL.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 4,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaCGT);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaCGT);
                            AñadirTiposArchivoCarpeta(carpetaCGT.id, new int[] { 1, 91 });

                            var nuevaVersionCGT = new tblFM_Version
                            {
                                archivoID = carpetaCGT.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionDL.ruta, nuevaVersionDL.nombre),
                                nombre = "Cartas garantía",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "CART GAR",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionCGT);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionCGT.ruta, nuevaVersionCGT.nombre));
                        }
                        #endregion

                    }
                    #endregion

                    #region 8 Documentación para acceso
                    {
                        var carpetaDA = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            subdivisionID = subdivisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 7,
                            tipoCarpeta = TipoCarpetaEnum.Estimaciones
                        };
                        _context.tblFM_Archivo.Add(carpetaDA);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaDA);
                        AñadirTiposArchivoCarpeta(carpetaDA.id, new int[] { 1, 25 });

                        var nuevaVersionDA = new tblFM_Version
                        {
                            archivoID = carpetaDA.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Documentación para acceso",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "DOC ACC",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionDA);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionDA.ruta, nuevaVersionDA.nombre));
                    }
                    #endregion

                    #region 9 Ingeniería
                    {
                        var carpetaPI = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            subdivisionID = subdivisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 8,
                            tipoCarpeta = TipoCarpetaEnum.Estimaciones
                        };
                        _context.tblFM_Archivo.Add(carpetaPI);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaPI);
                        AñadirTiposArchivoCarpeta(carpetaPI.id, new int[] { 1, 29 });

                        var nuevaVersionPI = new tblFM_Version
                        {
                            archivoID = carpetaPI.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Ingeniería",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "ING",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionPI);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionPI.ruta, nuevaVersionPI.nombre));
                    }
                    #endregion

                    #region 10 Submittals
                    {
                        var carpetaSUB = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            subdivisionID = subdivisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 9,
                            tipoCarpeta = TipoCarpetaEnum.Estimaciones
                        };
                        _context.tblFM_Archivo.Add(carpetaSUB);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaSUB);
                        AñadirTiposArchivoCarpeta(carpetaSUB.id, new int[] { 1, 92 });

                        var nuevaVersionSUB = new tblFM_Version
                        {
                            archivoID = carpetaSUB.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Submittals",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "SUB",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionSUB);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionSUB.ruta, nuevaVersionSUB.nombre));
                    }
                    #endregion

                    #region 11 Estimaciones de Obra
                    {
                        var carpetaEO = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            subdivisionID = subdivisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 10,
                            tipoCarpeta = TipoCarpetaEnum.EstimacionesIndustrial
                        };
                        _context.tblFM_Archivo.Add(carpetaEO);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaEO);
                        AñadirTiposArchivoCarpeta(carpetaEO.id, new int[] { 1 });

                        var nuevaVersionEO = new tblFM_Version
                        {
                            archivoID = carpetaEO.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Estimaciones de obra",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "EST",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionEO);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionEO.ruta, nuevaVersionEO.nombre));
                    }
                    #endregion

                    #region 12 Documentos Oficiales
                    {
                        var carpetaDOF = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            subdivisionID = subdivisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 11,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaDOF);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaDOF);
                        AñadirTiposArchivoCarpeta(carpetaDOF.id, new int[] { 1 });

                        var nuevaVersionDOF = new tblFM_Version
                        {
                            archivoID = carpetaDOF.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Documentos Oficiales",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "DOC OF",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionDOF);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionDOF.ruta, nuevaVersionDOF.nombre));

                        #region Orden de cambio contrato
                        {
                            var carpetaOCC = new tblFM_Archivo
                            {
                                padreID = carpetaDOF.id,
                                nivel = carpetaDOF.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 0,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaOCC);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaOCC);
                            AñadirTiposArchivoCarpeta(carpetaOCC.id, new int[] { 1, 28 });

                            var nuevaVersionOCC = new tblFM_Version
                            {
                                archivoID = carpetaOCC.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionDOF.ruta, nuevaVersionDOF.nombre),
                                nombre = "Orden de cambio contrato",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "ORD CAM",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionOCC);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionOCC.ruta, nuevaVersionOCC.nombre));
                        }
                        #endregion

                        #region Acta de entrega
                        {
                            var carpetaACEN = new tblFM_Archivo
                            {
                                padreID = carpetaDOF.id,
                                nivel = carpetaDOF.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 1,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaACEN);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaACEN);
                            AñadirTiposArchivoCarpeta(carpetaACEN.id, new int[] { 1, 26 });

                            var nuevaVersionACEN = new tblFM_Version
                            {
                                archivoID = carpetaACEN.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionDOF.ruta, nuevaVersionDOF.nombre),
                                nombre = "Acta de entrega",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "ACTA ENT",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionACEN);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionACEN.ruta, nuevaVersionACEN.nombre));
                        }
                        #endregion

                        #region Close out checklist
                        {
                            var carpetaCLIST = new tblFM_Archivo
                            {
                                padreID = carpetaDOF.id,
                                nivel = carpetaDOF.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 2,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaCLIST);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaCLIST);
                            AñadirTiposArchivoCarpeta(carpetaCLIST.id, new int[] { 1, 95 });

                            var nuevaVersionCLIST = new tblFM_Version
                            {
                                archivoID = carpetaCLIST.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionDOF.ruta, nuevaVersionDOF.nombre),
                                nombre = "Close out checklist",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "CLOSE OUT",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionCLIST);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionCLIST.ruta, nuevaVersionCLIST.nombre));
                        }
                        #endregion

                    }
                    #endregion

                    #region 13 Subcontratos
                    {
                        var carpetaSUBC = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            subdivisionID = subdivisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 12,
                            tipoCarpeta = TipoCarpetaEnum.SubcontratosIndustrial
                        };
                        _context.tblFM_Archivo.Add(carpetaSUBC);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaSUBC);
                        AñadirTiposArchivoCarpeta(carpetaSUBC.id, new int[] { 1 });

                        var nuevaVersionSUBC = new tblFM_Version
                        {
                            archivoID = carpetaSUBC.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Subcontratos",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "SUBC",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionSUBC);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionSUBC.ruta, nuevaVersionSUBC.nombre));
                    }
                    #endregion

                    #region 14 Contratos de renta de equipos
                    {
                        var carpetaContratos_Renta = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            subdivisionID = subdivisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 13,
                            tipoCarpeta = TipoCarpetaEnum.Contrato_Renta_Equipo
                        };
                        _context.tblFM_Archivo.Add(carpetaContratos_Renta);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaContratos_Renta);
                        AñadirTiposArchivoCarpeta(carpetaContratos_Renta.id, new int[] { 1, 118 });

                        var nuevaVersionContratos_Renta = new tblFM_Version
                        {
                            archivoID = carpetaContratos_Renta.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Contratos de renta de equipos",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "CRE",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionContratos_Renta);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionContratos_Renta.ruta, nuevaVersionContratos_Renta.nombre));
                    }
                    #endregion

                    #region 15 Calidad
                    {
                        var carpetaCAL = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            subdivisionID = subdivisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 14,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaCAL);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaCAL);
                        AñadirTiposArchivoCarpeta(carpetaCAL.id, new int[] { 1, 116, 117 });

                        var nuevaVersionCAL = new tblFM_Version
                        {
                            archivoID = carpetaCAL.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Calidad",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "CAL",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionCAL);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionCAL.ruta, nuevaVersionCAL.nombre));

                        #region Laboratorio de compactación
                        {
                            var carpetaLCOMP = new tblFM_Archivo
                            {
                                padreID = carpetaCAL.id,
                                nivel = carpetaCAL.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 0,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaLCOMP);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaLCOMP);
                            AñadirTiposArchivoCarpeta(carpetaLCOMP.id, new int[] { 1, 103 });

                            var nuevaVersionLCOMP = new tblFM_Version
                            {
                                archivoID = carpetaLCOMP.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionCAL.ruta, nuevaVersionCAL.nombre),
                                nombre = "Laboratio de compactación",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "LAB COMP",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionLCOMP);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionLCOMP.ruta, nuevaVersionLCOMP.nombre));
                        }
                        #endregion

                        #region Laboratorio de concretos
                        {
                            var carpetaLCONC = new tblFM_Archivo
                            {
                                padreID = carpetaCAL.id,
                                nivel = carpetaCAL.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 1,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaLCONC);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaLCONC);
                            AñadirTiposArchivoCarpeta(carpetaLCONC.id, new int[] { 1, 104 });

                            var nuevaVersionLCONC = new tblFM_Version
                            {
                                archivoID = carpetaLCONC.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionCAL.ruta, nuevaVersionCAL.nombre),
                                nombre = "Laboratio de concretos",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "LAB CONC",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionLCONC);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionLCONC.ruta, nuevaVersionLCONC.nombre));
                        }
                        #endregion

                        #region Pruebas de soldadura
                        {
                            var carpetaPSOLD = new tblFM_Archivo
                            {
                                padreID = carpetaCAL.id,
                                nivel = carpetaCAL.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 2,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaPSOLD);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaPSOLD);
                            AñadirTiposArchivoCarpeta(carpetaPSOLD.id, new int[] { 1, 105 });

                            var nuevaVersionPSOLD = new tblFM_Version
                            {
                                archivoID = carpetaPSOLD.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionCAL.ruta, nuevaVersionCAL.nombre),
                                nombre = "Pruebas de soldadura",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "PRUE SOLD",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionPSOLD);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionPSOLD.ruta, nuevaVersionPSOLD.nombre));
                        }
                        #endregion

                        #region Pruebas de hermeticidad
                        {
                            var carpetaPHERM = new tblFM_Archivo
                            {
                                padreID = carpetaCAL.id,
                                nivel = carpetaCAL.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 3,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaPHERM);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaPHERM);
                            AñadirTiposArchivoCarpeta(carpetaPHERM.id, new int[] { 1, 106 });

                            var nuevaVersionPHERM = new tblFM_Version
                            {
                                archivoID = carpetaPHERM.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionCAL.ruta, nuevaVersionCAL.nombre),
                                nombre = "Pruebas de hermeticidad",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "PRUE HERM",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionPHERM);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionPHERM.ruta, nuevaVersionPHERM.nombre));
                        }
                        #endregion

                        #region Dictamen tuberías gas
                        {
                            var carpetaDTG = new tblFM_Archivo
                            {
                                padreID = carpetaCAL.id,
                                nivel = carpetaCAL.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 4,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaDTG);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaDTG);
                            AñadirTiposArchivoCarpeta(carpetaDTG.id, new int[] { 1, 107 });

                            var nuevaVersionDTG = new tblFM_Version
                            {
                                archivoID = carpetaDTG.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionCAL.ruta, nuevaVersionCAL.nombre),
                                nombre = "Dictamen tuberías gas",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "DICT GAS",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionDTG);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionDTG.ruta, nuevaVersionDTG.nombre));
                        }
                        #endregion

                        #region Uvie eléctrica
                        {
                            var carpetaUE = new tblFM_Archivo
                            {
                                padreID = carpetaCAL.id,
                                nivel = carpetaCAL.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 5,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaUE);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaUE);
                            AñadirTiposArchivoCarpeta(carpetaUE.id, new int[] { 1, 108 });

                            var nuevaVersionUE = new tblFM_Version
                            {
                                archivoID = carpetaUE.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionCAL.ruta, nuevaVersionCAL.nombre),
                                nombre = "Uvie eléctrica",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "UVIE",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionUE);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionUE.ruta, nuevaVersionUE.nombre));
                        }
                        #endregion

                        #region Certificado de materiales
                        {
                            var carpetaCM = new tblFM_Archivo
                            {
                                padreID = carpetaCAL.id,
                                nivel = carpetaCAL.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 6,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaCM);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaCM);
                            AñadirTiposArchivoCarpeta(carpetaCM.id, new int[] { 1, 109 });

                            var nuevaVersionCM = new tblFM_Version
                            {
                                archivoID = carpetaCM.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionCAL.ruta, nuevaVersionCAL.nombre),
                                nombre = "Certificado de materiales",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "CERT MAT",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionCM);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionCM.ruta, nuevaVersionCM.nombre));
                        }
                        #endregion

                        #region Evaluación a subcontratistas
                        {
                            var carpetaES = new tblFM_Archivo
                            {
                                padreID = carpetaCAL.id,
                                nivel = carpetaCAL.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 7,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaES);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaES);
                            AñadirTiposArchivoCarpeta(carpetaES.id, new int[] { 1, 51 });

                            var nuevaVersionES = new tblFM_Version
                            {
                                archivoID = carpetaES.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionCAL.ruta, nuevaVersionCAL.nombre),
                                nombre = "Evaluación a subcontratistas",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "EVAL SUB",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionES);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionES.ruta, nuevaVersionES.nombre));
                        }
                        #endregion

                    }
                    #endregion

                    #region 16 Seguridad
                    {
                        var carpetaSeguridad = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            subdivisionID = subdivisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 15,
                            perteneceSeguridad = false,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaSeguridad);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaSeguridad);
                        AñadirTiposArchivoCarpeta(carpetaSeguridad.id, new int[] { 1 });

                        var nuevaVersionSeguridad = new tblFM_Version
                        {
                            archivoID = carpetaSeguridad.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Seguridad",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "SEG",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionSeguridad);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionSeguridad.ruta, nuevaVersionSeguridad.nombre));

                        #region Reporte semanal
                        {
                            var carpetaRS = new tblFM_Archivo
                            {
                                padreID = carpetaSeguridad.id,
                                nivel = carpetaSeguridad.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 0,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaRS);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaRS);
                            AñadirTiposArchivoCarpeta(carpetaRS.id, new int[] { 1, 110 });

                            var nuevaVersionLCOMP = new tblFM_Version
                            {
                                archivoID = carpetaRS.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionSeguridad.ruta, nuevaVersionSeguridad.nombre),
                                nombre = "Reporte semanal",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "REP SEM",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionLCOMP);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionLCOMP.ruta, nuevaVersionLCOMP.nombre));
                        }
                        #endregion

                        #region Listado de químicos
                        {
                            var carpetaLQ = new tblFM_Archivo
                            {
                                padreID = carpetaSeguridad.id,
                                nivel = carpetaSeguridad.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 1,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaLQ);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaLQ);
                            AñadirTiposArchivoCarpeta(carpetaLQ.id, new int[] { 1, 111 });

                            var nuevaVersionLQ = new tblFM_Version
                            {
                                archivoID = carpetaLQ.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionSeguridad.ruta, nuevaVersionSeguridad.nombre),
                                nombre = "Listado de químicos",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "LIST QUIM",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionLQ);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionLQ.ruta, nuevaVersionLQ.nombre));
                        }
                        #endregion

                        #region Análisis de riesgo por actividad
                        {
                            var carpetaAR = new tblFM_Archivo
                            {
                                padreID = carpetaSeguridad.id,
                                nivel = carpetaSeguridad.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 1,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaAR);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaAR);
                            AñadirTiposArchivoCarpeta(carpetaAR.id, new int[] { 1, 112 });

                            var nuevaVersionLQ = new tblFM_Version
                            {
                                archivoID = carpetaAR.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionSeguridad.ruta, nuevaVersionSeguridad.nombre),
                                nombre = "Análisis de riesgo por actividad",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "PRETASK",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionLQ);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionLQ.ruta, nuevaVersionLQ.nombre));
                        }
                        #endregion

                    }
                    #endregion

                    #region 17 Directorio de contactos
                    {
                        var carpetaDCON = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            subdivisionID = subdivisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 16,
                            tipoCarpeta = TipoCarpetaEnum.Estimaciones
                        };
                        _context.tblFM_Archivo.Add(carpetaDCON);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaDCON);
                        AñadirTiposArchivoCarpeta(carpetaDCON.id, new int[] { 1, 113 });

                        var nuevaVersionDCON = new tblFM_Version
                        {
                            archivoID = carpetaDCON.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Directorio de contactos",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "DIR CONT",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionDCON);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionDCON.ruta, nuevaVersionDCON.nombre));
                    }
                    #endregion

                    #region 18 Bitácora de obra
                    {
                        var carpetaBO = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            subdivisionID = subdivisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 17,
                            tipoCarpeta = TipoCarpetaEnum.Estimaciones
                        };
                        _context.tblFM_Archivo.Add(carpetaBO);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaBO);
                        AñadirTiposArchivoCarpeta(carpetaBO.id, new int[] { 1, 35 });

                        var nuevaVersionBO = new tblFM_Version
                        {
                            archivoID = carpetaBO.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Bitácora de obra",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "BITACORA",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionBO);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionBO.ruta, nuevaVersionBO.nombre));
                    }
                    #endregion

                    // Obtiene a todos los usuarios que tengan permisos asignados al gestor de archivos.
                    var listaUsuariosID = ObtenerUsuariosIdsConPermisosGestor();

                    // Se agrega permiso especial a nivel obra al usuario logueado.
                    var nuevoPermisoObra = new tblFM_PermisoEspecial
                    {
                        usuarioID = usuarioID,
                        usuarioCreadorID = usuarioID,
                        entidadID = ccID,
                        fechaCreacion = DateTime.Now,
                        tipoPermiso = TipoPermisoEnum.GeneralObra,
                        puedeActualizar = true,
                        puedeCrear = true,
                        puedeDescargarArchivo = true,
                        puedeDescargarCarpeta = true,
                        puedeEliminar = true,
                        puedeSubir = true
                    };
                    _context.tblFM_PermisoEspecial.Add(nuevoPermisoObra);
                    _context.SaveChanges();

                    // Se obtiene una lista de todas las personas que tienen permiso especial.
                    var listaPermisosEspeciales = _context.tblFM_PermisoEspecial.ToList();

                    // Crea los registro de permiso a los demás usuarios de los archivos creados (todos menos la carpeta obra).
                    CrearRegistrosPermisosEstructura(listaArchivosCreados, listaUsuariosID, listaPermisosEspeciales);

                    // Se crea el registro del permiso de la carpeta obra y se actualiza el estatus de las vistas para los demás usuarios.
                    CrearNuevosPermisosUsuariosCarpetaObra(carpetaObra, listaUsuariosID, listaPermisosEspeciales);

                    resultado.Add(SUCCESS, true);
                    _context.SaveChanges();

                    // Se crean las carpetas físicas
                    foreach (var rutaCarpeta in rutasFisicasCarpetas)
                    {
                        Directory.CreateDirectory(rutaCarpeta);
                    }

                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    // Intenta eliminar la carpeta obra en caso de algún error para que no queden archivos basura.
                    try
                    {
                        Directory.Delete(rutaFisicaCarpetaObra, true);
                    }
                    catch (Exception) { }

                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "CrearEstructuraObraSubdivision", e, AccionEnum.AGREGAR, ccID, null);
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, "Ocurrió un error interno al intentar crear la estructura de la obra.");
                }
            }

            return resultado;
        }

        public Dictionary<string, object> CrearEstructuraObraSubdivisionPorNombre(int subdivisionID, string nombre, string abreviacion)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                string rutaFisicaCarpetaObra = "";
                try
                {
                    var rutasFisicasCarpetas = new List<string>();
                    var listaArchivosCreados = new List<tblFM_Archivo>();
                    int añoActual = DateTime.Now.Year;
                    int usuarioID = vSesiones.sesionUsuarioDTO.id;

                    var carpetaSubdivision = ObtenerCarpetaSubdivisionPorSubdivisionIdYAño(subdivisionID, añoActual);

                    if (carpetaSubdivision == null)
                    {
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "No se encontró la carpeta subdivisión.");
                        return resultado;
                    }

                    int divisionID = carpetaSubdivision.archivo.divisionID;
                    int ccID = 0;

                    // Se valida el nombre de la carpeta
                    if (nombre == null || nombre.Trim().Length < 2 || EsNombreCarpetaInvalido(nombre) || abreviacion == null || abreviacion.Trim().Length < 1)
                    {
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "El nombre o abreviación de la carpeta es inválido.");
                        return resultado;
                    }

                    nombre = abreviacion.Trim() + " - " + nombre.Trim();

                    // Se verifica que no exista alguna carpeta con ese nombre en la ubicación indicada.
                    var nombreExistente = _context.tblFM_Version
                        .Where(x => x.archivo.padreID == carpetaSubdivision.archivoID && x.activo)
                        .Any(x => x.nombre == nombre);
                    if (nombreExistente)
                    {
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "Ya existe una carpeta con ese nombre.");
                        return resultado;
                    }

                    #region Carpeta Obra
                    var carpetaObra = new tblFM_Archivo
                    {
                        padreID = carpetaSubdivision.archivoID,
                        nivel = carpetaSubdivision.archivo.nivel + 1,
                        año = añoActual,
                        divisionID = divisionID,
                        subdivisionID = subdivisionID,
                        ccID = 0, // Se deja en 0 ya que no es un centro de costo existente.
                        esCarpeta = true,
                        tipoCarpeta = TipoCarpetaEnum.Proyecto
                    };
                    _context.tblFM_Archivo.Add(carpetaObra);
                    _context.SaveChanges();

                    AñadirTiposArchivoCarpeta(carpetaObra.id, new int[] { 1 });

                    var nuevaVersionObra = new tblFM_Version
                    {
                        archivoID = carpetaObra.id,
                        usuarioCreadorID = usuarioID,
                        version = 1,
                        ruta = Path.Combine(carpetaSubdivision.ruta, carpetaSubdivision.nombre),
                        nombre = nombre,
                        activo = true,
                        fechaCreacion = DateTime.Now,
                        abreviacion = abreviacion.Trim(),
                        considerarse = true
                    };
                    _context.tblFM_Version.Add(nuevaVersionObra);
                    _context.SaveChanges();

                    rutaFisicaCarpetaObra = Path.Combine(RUTA_BASE, nuevaVersionObra.ruta, nuevaVersionObra.nombre);
                    rutasFisicasCarpetas.Add(rutaFisicaCarpetaObra);
                    #endregion

                    #region  1 Licitación
                    {
                        var carpetaLicitacion = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            subdivisionID = subdivisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 0,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaLicitacion);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaLicitacion);
                        AñadirTiposArchivoCarpeta(carpetaLicitacion.id, new int[] { 1 });

                        var nuevaVersionLicitacion = new tblFM_Version
                        {
                            archivoID = carpetaLicitacion.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Licitación",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "LIC",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionLicitacion);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionLicitacion.ruta, nuevaVersionLicitacion.nombre));

                        #region Bases de licitaciones
                        {
                            var carpetaBasesLicitaciones = new tblFM_Archivo
                            {
                                padreID = carpetaLicitacion.id,
                                nivel = carpetaLicitacion.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 0,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaBasesLicitaciones);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaBasesLicitaciones);
                            AñadirTiposArchivoCarpeta(carpetaBasesLicitaciones.id, new int[] { 1, 77, 78 });

                            var nuevaVersionBasesAnexos = new tblFM_Version
                            {
                                archivoID = carpetaBasesLicitaciones.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionLicitacion.ruta, nuevaVersionLicitacion.nombre),
                                nombre = "Bases de licitaciones",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "BL",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionBasesAnexos);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionBasesAnexos.ruta, nuevaVersionBasesAnexos.nombre));
                        }
                        #endregion

                        #region Minutas
                        {
                            var carpetaMinutas = new tblFM_Archivo
                            {
                                padreID = carpetaLicitacion.id,
                                nivel = carpetaLicitacion.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 1,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaMinutas);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaMinutas);
                            AñadirTiposArchivoCarpeta(carpetaMinutas.id, new int[] { 1, 79 });

                            var nuevaVersionMinutas = new tblFM_Version
                            {
                                archivoID = carpetaMinutas.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionLicitacion.ruta, nuevaVersionLicitacion.nombre),
                                nombre = "Minutas",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "MIN CLIENT",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionMinutas);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionMinutas.ruta, nuevaVersionMinutas.nombre));
                        }
                        #endregion

                        #region Questions and Answers
                        {
                            var carpetaQA = new tblFM_Archivo
                            {
                                padreID = carpetaLicitacion.id,
                                nivel = carpetaLicitacion.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 2,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaQA);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaQA);
                            AñadirTiposArchivoCarpeta(carpetaQA.id, new int[] { 1, 80 });

                            var nuevaVersionQA = new tblFM_Version
                            {
                                archivoID = carpetaQA.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionLicitacion.ruta, nuevaVersionLicitacion.nombre),
                                nombre = "Questions and Answers",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "Q&A",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionQA);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionQA.ruta, nuevaVersionQA.nombre));
                        }
                        #endregion

                        #region Addendums
                        {
                            var carpetaADD = new tblFM_Archivo
                            {
                                padreID = carpetaLicitacion.id,
                                nivel = carpetaLicitacion.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 3,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaADD);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaADD);
                            AñadirTiposArchivoCarpeta(carpetaADD.id, new int[] { 1, 81 });

                            var nuevaVersionADD = new tblFM_Version
                            {
                                archivoID = carpetaADD.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionLicitacion.ruta, nuevaVersionLicitacion.nombre),
                                nombre = "Addendums",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "ADDENDUM",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionADD);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionADD.ruta, nuevaVersionADD.nombre));
                        }
                        #endregion

                    }
                    #endregion

                    #region 2 Presupuesto
                    {
                        var carpetaPresupuesto = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            subdivisionID = subdivisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 1,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaPresupuesto);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaPresupuesto);
                        AñadirTiposArchivoCarpeta(carpetaPresupuesto.id, new int[] { 1 });

                        var nuevaVersionPresupuesto = new tblFM_Version
                        {
                            archivoID = carpetaPresupuesto.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Presupuesto",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "PRES",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionPresupuesto);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionPresupuesto.ruta, nuevaVersionPresupuesto.nombre));

                        #region Presupuesto a costo directo
                        {
                            var carpetaCACD = new tblFM_Archivo
                            {
                                padreID = carpetaPresupuesto.id,
                                nivel = carpetaPresupuesto.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 0,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaCACD);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaCACD);
                            AñadirTiposArchivoCarpeta(carpetaCACD.id, new int[] { 1, 82 });

                            var nuevaVersionCACD = new tblFM_Version
                            {
                                archivoID = carpetaCACD.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionPresupuesto.ruta, nuevaVersionPresupuesto.nombre),
                                nombre = "Presupuesto a costo directo",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "CD",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionCACD);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionCACD.ruta, nuevaVersionCACD.nombre));
                        }
                        #endregion

                        #region Condiciones generales
                        {
                            var carpetaCG = new tblFM_Archivo
                            {
                                padreID = carpetaPresupuesto.id,
                                nivel = carpetaPresupuesto.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 1,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaCG);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaCG);
                            AñadirTiposArchivoCarpeta(carpetaCG.id, new int[] { 1, 83 });

                            var nuevaVersionCG = new tblFM_Version
                            {
                                archivoID = carpetaCG.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionPresupuesto.ruta, nuevaVersionPresupuesto.nombre),
                                nombre = "Condiciones generales",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "CG",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionCG);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionCG.ruta, nuevaVersionCG.nombre));
                        }
                        #endregion

                        #region Presupuesto final
                        {
                            var carpetaPF = new tblFM_Archivo
                            {
                                padreID = carpetaPresupuesto.id,
                                nivel = carpetaPresupuesto.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 2,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaPF);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaPF);
                            AñadirTiposArchivoCarpeta(carpetaPF.id, new int[] { 1, 84 });

                            var nuevaVersionCG = new tblFM_Version
                            {
                                archivoID = carpetaPF.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionPresupuesto.ruta, nuevaVersionPresupuesto.nombre),
                                nombre = "Presupuesto final",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "FINAL",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionCG);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionCG.ruta, nuevaVersionCG.nombre));
                        }
                        #endregion

                    }
                    #endregion

                    #region 3 Organigrama
                    {
                        var carpetaOrganigrama = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            subdivisionID = subdivisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 2,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaOrganigrama);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaOrganigrama);
                        AñadirTiposArchivoCarpeta(carpetaOrganigrama.id, new int[] { 1, 85 });

                        var nuevaVersionOrganigrama = new tblFM_Version
                        {
                            archivoID = carpetaOrganigrama.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Organigrama",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "ORG",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionOrganigrama);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionOrganigrama.ruta, nuevaVersionOrganigrama.nombre));
                    }
                    #endregion

                    #region 4 Cronograma
                    {
                        var carpetaCronograma = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            subdivisionID = subdivisionID,
                            divisionID = divisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 3,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaCronograma);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaCronograma);
                        AñadirTiposArchivoCarpeta(carpetaCronograma.id, new int[] { 1, 86 });

                        var nuevaVersionCronograma = new tblFM_Version
                        {
                            archivoID = carpetaCronograma.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Cronograma",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "CRON",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionCronograma);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionCronograma.ruta, nuevaVersionCronograma.nombre));
                    }
                    #endregion

                    #region 5 Junta de Arranque
                    {
                        var carpetaJA = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            subdivisionID = subdivisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 4,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaJA);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaJA);
                        AñadirTiposArchivoCarpeta(carpetaJA.id, new int[] { 1 });

                        var nuevaVersionJA = new tblFM_Version
                        {
                            archivoID = carpetaJA.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Junta de Arranque",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "JA",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionJA);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionJA.ruta, nuevaVersionJA.nombre));

                        #region Plantilla de personal
                        {
                            var carpetaPLP = new tblFM_Archivo
                            {
                                padreID = carpetaJA.id,
                                nivel = carpetaJA.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 0,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaPLP);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaPLP);
                            AñadirTiposArchivoCarpeta(carpetaPLP.id, new int[] { 1, 16 });

                            var nuevaVersionPLP = new tblFM_Version
                            {
                                archivoID = carpetaPLP.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionJA.ruta, nuevaVersionJA.nombre),
                                nombre = "Plantilla de personal",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "PLANT PERS",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionPLP);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionPLP.ruta, nuevaVersionPLP.nombre));
                        }
                        #endregion

                        #region Solicitud de equipo
                        {
                            var carpetaSE = new tblFM_Archivo
                            {
                                padreID = carpetaJA.id,
                                nivel = carpetaJA.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 1,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaSE);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaSE);
                            AñadirTiposArchivoCarpeta(carpetaSE.id, new int[] { 1, 17 });

                            var nuevaVersionSE = new tblFM_Version
                            {
                                archivoID = carpetaSE.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionJA.ruta, nuevaVersionJA.nombre),
                                nombre = "Solicitud de equipo",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "SOLIC EQ",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionSE);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionSE.ruta, nuevaVersionSE.nombre));
                        }
                        #endregion

                        #region Minuta y lista de asistencia
                        {
                            var carpetaMYLA = new tblFM_Archivo
                            {
                                padreID = carpetaJA.id,
                                nivel = carpetaJA.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 2,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaMYLA);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaMYLA);
                            AñadirTiposArchivoCarpeta(carpetaMYLA.id, new int[] { 1, 87 });

                            var nuevaVersionMYLA = new tblFM_Version
                            {
                                archivoID = carpetaMYLA.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionJA.ruta, nuevaVersionJA.nombre),
                                nombre = "Minuta y lista de asistencia",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "MIN CPLAN",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionMYLA);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionMYLA.ruta, nuevaVersionMYLA.nombre));
                        }
                        #endregion

                        #region Cuadro de facultamiento
                        {
                            var carpetaCF = new tblFM_Archivo
                            {
                                padreID = carpetaJA.id,
                                nivel = carpetaJA.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 3,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaCF);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaCF);
                            AñadirTiposArchivoCarpeta(carpetaCF.id, new int[] { 1, 19 });

                            var nuevaVersionMYLA = new tblFM_Version
                            {
                                archivoID = carpetaCF.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionJA.ruta, nuevaVersionJA.nombre),
                                nombre = "Cuadro de facultamiento",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "CUA FAC",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionMYLA);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionMYLA.ruta, nuevaVersionMYLA.nombre));
                        }
                        #endregion

                    }
                    #endregion

                    #region 6 Minutas de Obra Semanal
                    {
                        var carpetaMOS = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            subdivisionID = subdivisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 5,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaMOS);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaMOS);
                        AñadirTiposArchivoCarpeta(carpetaMOS.id, new int[] { 1, 53 });

                        var nuevaVersionMOS = new tblFM_Version
                        {
                            archivoID = carpetaMOS.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Minutas de Obra Semanal",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "MIN SEM",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionMOS);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionMOS.ruta, nuevaVersionMOS.nombre));
                    }
                    #endregion

                    #region 7 Documentos Legales
                    {
                        var carpetaDL = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            subdivisionID = subdivisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 6,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaDL);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaDL);
                        AñadirTiposArchivoCarpeta(carpetaDL.id, new int[] { 1 });

                        var nuevaVersionDL = new tblFM_Version
                        {
                            archivoID = carpetaDL.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Documentos Legales",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "DOC LEG",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionDL);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionDL.ruta, nuevaVersionDL.nombre));

                        #region Contrato u orden de compra
                        {
                            var carpetaCUOC = new tblFM_Archivo
                            {
                                padreID = carpetaDL.id,
                                nivel = carpetaDL.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 0,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaCUOC);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaCUOC);
                            AñadirTiposArchivoCarpeta(carpetaCUOC.id, new int[] { 1, 88 });

                            var nuevaVersionCUOC = new tblFM_Version
                            {
                                archivoID = carpetaCUOC.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionDL.ruta, nuevaVersionDL.nombre),
                                nombre = "Contrato u orden de compra",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "CONT",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionCUOC);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionCUOC.ruta, nuevaVersionCUOC.nombre));
                        }
                        #endregion

                        #region Fianzas
                        {
                            var carpetaFZ = new tblFM_Archivo
                            {
                                padreID = carpetaDL.id,
                                nivel = carpetaDL.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 1,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaFZ);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaFZ);
                            AñadirTiposArchivoCarpeta(carpetaFZ.id, new int[] { 1, 21, 22, 23 });

                            var nuevaVersionFZ = new tblFM_Version
                            {
                                archivoID = carpetaFZ.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionDL.ruta, nuevaVersionDL.nombre),
                                nombre = "Fianzas",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "FIANZAS",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionFZ);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionFZ.ruta, nuevaVersionFZ.nombre));
                        }
                        #endregion

                        #region Seguro RC
                        {
                            var carpetaRC = new tblFM_Archivo
                            {
                                padreID = carpetaDL.id,
                                nivel = carpetaDL.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 2,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaRC);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaRC);
                            AñadirTiposArchivoCarpeta(carpetaRC.id, new int[] { 1, 24 });

                            var nuevaVersionRC = new tblFM_Version
                            {
                                archivoID = carpetaRC.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionDL.ruta, nuevaVersionDL.nombre),
                                nombre = "Seguro RC",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "SEG RC",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionRC);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionRC.ruta, nuevaVersionRC.nombre));
                        }
                        #endregion

                        #region SIROC
                        {
                            var carpetaSIROC = new tblFM_Archivo
                            {
                                padreID = carpetaDL.id,
                                nivel = carpetaDL.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 3,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaSIROC);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaSIROC);
                            AñadirTiposArchivoCarpeta(carpetaSIROC.id, new int[] { 1, 89, 90 });

                            var nuevaVersionSIROC = new tblFM_Version
                            {
                                archivoID = carpetaSIROC.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionDL.ruta, nuevaVersionDL.nombre),
                                nombre = "SIROC",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "SIROC",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionSIROC);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionSIROC.ruta, nuevaVersionSIROC.nombre));
                        }
                        #endregion

                        #region Cartas garantía
                        {
                            var carpetaCGT = new tblFM_Archivo
                            {
                                padreID = carpetaDL.id,
                                nivel = carpetaDL.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 4,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaCGT);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaCGT);
                            AñadirTiposArchivoCarpeta(carpetaCGT.id, new int[] { 1, 91 });

                            var nuevaVersionCGT = new tblFM_Version
                            {
                                archivoID = carpetaCGT.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionDL.ruta, nuevaVersionDL.nombre),
                                nombre = "Cartas garantía",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "CART GAR",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionCGT);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionCGT.ruta, nuevaVersionCGT.nombre));
                        }
                        #endregion

                    }
                    #endregion

                    #region 8 Documentación para acceso
                    {
                        var carpetaDA = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            subdivisionID = subdivisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 7,
                            tipoCarpeta = TipoCarpetaEnum.Estimaciones
                        };
                        _context.tblFM_Archivo.Add(carpetaDA);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaDA);
                        AñadirTiposArchivoCarpeta(carpetaDA.id, new int[] { 1, 25 });

                        var nuevaVersionDA = new tblFM_Version
                        {
                            archivoID = carpetaDA.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Documentación para acceso",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "DOC ACC",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionDA);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionDA.ruta, nuevaVersionDA.nombre));
                    }
                    #endregion

                    #region 9 Ingeniería
                    {
                        var carpetaPI = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            subdivisionID = subdivisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 8,
                            tipoCarpeta = TipoCarpetaEnum.Estimaciones
                        };
                        _context.tblFM_Archivo.Add(carpetaPI);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaPI);
                        AñadirTiposArchivoCarpeta(carpetaPI.id, new int[] { 1, 29 });

                        var nuevaVersionPI = new tblFM_Version
                        {
                            archivoID = carpetaPI.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Ingeniería",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "ING",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionPI);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionPI.ruta, nuevaVersionPI.nombre));
                    }
                    #endregion

                    #region 10 Submittals
                    {
                        var carpetaSUB = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            subdivisionID = subdivisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 9,
                            tipoCarpeta = TipoCarpetaEnum.Estimaciones
                        };
                        _context.tblFM_Archivo.Add(carpetaSUB);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaSUB);
                        AñadirTiposArchivoCarpeta(carpetaSUB.id, new int[] { 1, 92 });

                        var nuevaVersionSUB = new tblFM_Version
                        {
                            archivoID = carpetaSUB.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Submittals",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "SUB",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionSUB);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionSUB.ruta, nuevaVersionSUB.nombre));
                    }
                    #endregion

                    #region 11 Estimaciones de Obra
                    {
                        var carpetaEO = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            subdivisionID = subdivisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 10,
                            tipoCarpeta = TipoCarpetaEnum.EstimacionesIndustrial
                        };
                        _context.tblFM_Archivo.Add(carpetaEO);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaEO);
                        AñadirTiposArchivoCarpeta(carpetaEO.id, new int[] { 1 });

                        var nuevaVersionEO = new tblFM_Version
                        {
                            archivoID = carpetaEO.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Estimaciones de obra",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "EST",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionEO);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionEO.ruta, nuevaVersionEO.nombre));
                    }
                    #endregion

                    #region 12 Documentos Oficiales
                    {
                        var carpetaDOF = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            subdivisionID = subdivisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 11,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaDOF);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaDOF);
                        AñadirTiposArchivoCarpeta(carpetaDOF.id, new int[] { 1 });

                        var nuevaVersionDOF = new tblFM_Version
                        {
                            archivoID = carpetaDOF.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Documentos Oficiales",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "DOC OF",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionDOF);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionDOF.ruta, nuevaVersionDOF.nombre));

                        #region Orden de cambio contrato
                        {
                            var carpetaOCC = new tblFM_Archivo
                            {
                                padreID = carpetaDOF.id,
                                nivel = carpetaDOF.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 0,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaOCC);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaOCC);
                            AñadirTiposArchivoCarpeta(carpetaOCC.id, new int[] { 1, 28 });

                            var nuevaVersionOCC = new tblFM_Version
                            {
                                archivoID = carpetaOCC.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionDOF.ruta, nuevaVersionDOF.nombre),
                                nombre = "Orden de cambio contrato",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "ORD CAM",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionOCC);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionOCC.ruta, nuevaVersionOCC.nombre));
                        }
                        #endregion

                        #region Acta de entrega
                        {
                            var carpetaACEN = new tblFM_Archivo
                            {
                                padreID = carpetaDOF.id,
                                nivel = carpetaDOF.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 1,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaACEN);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaACEN);
                            AñadirTiposArchivoCarpeta(carpetaACEN.id, new int[] { 1, 26 });

                            var nuevaVersionACEN = new tblFM_Version
                            {
                                archivoID = carpetaACEN.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionDOF.ruta, nuevaVersionDOF.nombre),
                                nombre = "Acta de entrega",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "ACTA ENT",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionACEN);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionACEN.ruta, nuevaVersionACEN.nombre));
                        }
                        #endregion

                        #region Close out checklist
                        {
                            var carpetaCLIST = new tblFM_Archivo
                            {
                                padreID = carpetaDOF.id,
                                nivel = carpetaDOF.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 2,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaCLIST);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaCLIST);
                            AñadirTiposArchivoCarpeta(carpetaCLIST.id, new int[] { 1, 95 });

                            var nuevaVersionCLIST = new tblFM_Version
                            {
                                archivoID = carpetaCLIST.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionDOF.ruta, nuevaVersionDOF.nombre),
                                nombre = "Close out checklist",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "CLOSE OUT",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionCLIST);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionCLIST.ruta, nuevaVersionCLIST.nombre));
                        }
                        #endregion

                    }
                    #endregion

                    #region 13 Subcontratos
                    {
                        var carpetaSUBC = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            subdivisionID = subdivisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 12,
                            tipoCarpeta = TipoCarpetaEnum.SubcontratosIndustrial
                        };
                        _context.tblFM_Archivo.Add(carpetaSUBC);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaSUBC);
                        AñadirTiposArchivoCarpeta(carpetaSUBC.id, new int[] { 1 });

                        var nuevaVersionSUBC = new tblFM_Version
                        {
                            archivoID = carpetaSUBC.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Subcontratos",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "SUBC",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionSUBC);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionSUBC.ruta, nuevaVersionSUBC.nombre));
                    }
                    #endregion

                    #region 14 Calidad
                    {
                        var carpetaCAL = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            subdivisionID = subdivisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 13,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaCAL);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaCAL);
                        AñadirTiposArchivoCarpeta(carpetaCAL.id, new int[] { 1 });

                        var nuevaVersionCAL = new tblFM_Version
                        {
                            archivoID = carpetaCAL.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Calidad",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "CAL",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionCAL);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionCAL.ruta, nuevaVersionCAL.nombre));

                        #region Laboratorio de compactación
                        {
                            var carpetaLCOMP = new tblFM_Archivo
                            {
                                padreID = carpetaCAL.id,
                                nivel = carpetaCAL.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 0,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaLCOMP);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaLCOMP);
                            AñadirTiposArchivoCarpeta(carpetaLCOMP.id, new int[] { 1, 103 });

                            var nuevaVersionLCOMP = new tblFM_Version
                            {
                                archivoID = carpetaLCOMP.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionCAL.ruta, nuevaVersionCAL.nombre),
                                nombre = "Laboratio de compactación",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "LAB COMP",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionLCOMP);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionLCOMP.ruta, nuevaVersionLCOMP.nombre));
                        }
                        #endregion

                        #region Laboratorio de concretos
                        {
                            var carpetaLCONC = new tblFM_Archivo
                            {
                                padreID = carpetaCAL.id,
                                nivel = carpetaCAL.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 1,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaLCONC);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaLCONC);
                            AñadirTiposArchivoCarpeta(carpetaLCONC.id, new int[] { 1, 104 });

                            var nuevaVersionLCONC = new tblFM_Version
                            {
                                archivoID = carpetaLCONC.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionCAL.ruta, nuevaVersionCAL.nombre),
                                nombre = "Laboratio de concretos",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "LAB CONC",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionLCONC);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionLCONC.ruta, nuevaVersionLCONC.nombre));
                        }
                        #endregion

                        #region Pruebas de soldadura
                        {
                            var carpetaPSOLD = new tblFM_Archivo
                            {
                                padreID = carpetaCAL.id,
                                nivel = carpetaCAL.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 2,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaPSOLD);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaPSOLD);
                            AñadirTiposArchivoCarpeta(carpetaPSOLD.id, new int[] { 1, 105 });

                            var nuevaVersionPSOLD = new tblFM_Version
                            {
                                archivoID = carpetaPSOLD.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionCAL.ruta, nuevaVersionCAL.nombre),
                                nombre = "Pruebas de soldadura",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "PRUE SOLD",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionPSOLD);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionPSOLD.ruta, nuevaVersionPSOLD.nombre));
                        }
                        #endregion

                        #region Pruebas de hermeticidad
                        {
                            var carpetaPHERM = new tblFM_Archivo
                            {
                                padreID = carpetaCAL.id,
                                nivel = carpetaCAL.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 3,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaPHERM);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaPHERM);
                            AñadirTiposArchivoCarpeta(carpetaPHERM.id, new int[] { 1, 106 });

                            var nuevaVersionPHERM = new tblFM_Version
                            {
                                archivoID = carpetaPHERM.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionCAL.ruta, nuevaVersionCAL.nombre),
                                nombre = "Pruebas de hermeticidad",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "PRUE HERM",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionPHERM);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionPHERM.ruta, nuevaVersionPHERM.nombre));
                        }
                        #endregion

                        #region Dictamen tuberías gas
                        {
                            var carpetaDTG = new tblFM_Archivo
                            {
                                padreID = carpetaCAL.id,
                                nivel = carpetaCAL.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 4,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaDTG);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaDTG);
                            AñadirTiposArchivoCarpeta(carpetaDTG.id, new int[] { 1, 107 });

                            var nuevaVersionDTG = new tblFM_Version
                            {
                                archivoID = carpetaDTG.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionCAL.ruta, nuevaVersionCAL.nombre),
                                nombre = "Dictamen tuberías gas",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "DICT GAS",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionDTG);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionDTG.ruta, nuevaVersionDTG.nombre));
                        }
                        #endregion

                        #region Uvie eléctrica
                        {
                            var carpetaUE = new tblFM_Archivo
                            {
                                padreID = carpetaCAL.id,
                                nivel = carpetaCAL.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 5,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaUE);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaUE);
                            AñadirTiposArchivoCarpeta(carpetaUE.id, new int[] { 1, 108 });

                            var nuevaVersionUE = new tblFM_Version
                            {
                                archivoID = carpetaUE.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionCAL.ruta, nuevaVersionCAL.nombre),
                                nombre = "Uvie eléctrica",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "UVIE",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionUE);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionUE.ruta, nuevaVersionUE.nombre));
                        }
                        #endregion

                        #region Certificado de materiales
                        {
                            var carpetaCM = new tblFM_Archivo
                            {
                                padreID = carpetaCAL.id,
                                nivel = carpetaCAL.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 6,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaCM);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaCM);
                            AñadirTiposArchivoCarpeta(carpetaCM.id, new int[] { 1, 109 });

                            var nuevaVersionCM = new tblFM_Version
                            {
                                archivoID = carpetaCM.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionCAL.ruta, nuevaVersionCAL.nombre),
                                nombre = "Certificado de materiales",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "CERT MAT",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionCM);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionCM.ruta, nuevaVersionCM.nombre));
                        }
                        #endregion

                        #region Evaluación a subcontratistas
                        {
                            var carpetaES = new tblFM_Archivo
                            {
                                padreID = carpetaCAL.id,
                                nivel = carpetaCAL.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 7,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaES);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaES);
                            AñadirTiposArchivoCarpeta(carpetaES.id, new int[] { 1, 51 });

                            var nuevaVersionES = new tblFM_Version
                            {
                                archivoID = carpetaES.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionCAL.ruta, nuevaVersionCAL.nombre),
                                nombre = "Evaluación a subcontratistas",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "EVAL SUB",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionES);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionES.ruta, nuevaVersionES.nombre));
                        }
                        #endregion

                    }
                    #endregion

                    #region 15 Seguridad
                    {
                        var carpetaSeguridad = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            subdivisionID = subdivisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 14,
                            perteneceSeguridad = false,
                            tipoCarpeta = TipoCarpetaEnum.BaseObra
                        };
                        _context.tblFM_Archivo.Add(carpetaSeguridad);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaSeguridad);
                        AñadirTiposArchivoCarpeta(carpetaSeguridad.id, new int[] { 1 });

                        var nuevaVersionSeguridad = new tblFM_Version
                        {
                            archivoID = carpetaSeguridad.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Seguridad",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "SEG",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionSeguridad);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionSeguridad.ruta, nuevaVersionSeguridad.nombre));

                        #region Reporte semanal
                        {
                            var carpetaRS = new tblFM_Archivo
                            {
                                padreID = carpetaSeguridad.id,
                                nivel = carpetaSeguridad.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 0,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaRS);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaRS);
                            AñadirTiposArchivoCarpeta(carpetaRS.id, new int[] { 1, 110 });

                            var nuevaVersionLCOMP = new tblFM_Version
                            {
                                archivoID = carpetaRS.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionSeguridad.ruta, nuevaVersionSeguridad.nombre),
                                nombre = "Reporte semanal",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "REP SEM",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionLCOMP);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionLCOMP.ruta, nuevaVersionLCOMP.nombre));
                        }
                        #endregion

                        #region Listado de químicos
                        {
                            var carpetaLQ = new tblFM_Archivo
                            {
                                padreID = carpetaSeguridad.id,
                                nivel = carpetaSeguridad.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 1,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaLQ);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaLQ);
                            AñadirTiposArchivoCarpeta(carpetaLQ.id, new int[] { 1, 111 });

                            var nuevaVersionLQ = new tblFM_Version
                            {
                                archivoID = carpetaLQ.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionSeguridad.ruta, nuevaVersionSeguridad.nombre),
                                nombre = "Listado de químicos",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "LIST QUIM",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionLQ);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionLQ.ruta, nuevaVersionLQ.nombre));
                        }
                        #endregion

                        #region Análisis de riesgo por actividad
                        {
                            var carpetaAR = new tblFM_Archivo
                            {
                                padreID = carpetaSeguridad.id,
                                nivel = carpetaSeguridad.nivel + 1,
                                año = añoActual,
                                divisionID = divisionID,
                                subdivisionID = subdivisionID,
                                ccID = ccID,
                                esCarpeta = true,
                                orden = 1,
                                tipoCarpeta = TipoCarpetaEnum.Normal
                            };
                            _context.tblFM_Archivo.Add(carpetaAR);
                            _context.SaveChanges();
                            listaArchivosCreados.Add(carpetaAR);
                            AñadirTiposArchivoCarpeta(carpetaAR.id, new int[] { 1, 112 });

                            var nuevaVersionLQ = new tblFM_Version
                            {
                                archivoID = carpetaAR.id,
                                usuarioCreadorID = usuarioID,
                                version = 1,
                                ruta = Path.Combine(nuevaVersionSeguridad.ruta, nuevaVersionSeguridad.nombre),
                                nombre = "Análisis de riesgo por actividad",
                                activo = true,
                                fechaCreacion = DateTime.Now,
                                abreviacion = "PRETASK",
                                considerarse = true
                            };
                            _context.tblFM_Version.Add(nuevaVersionLQ);
                            _context.SaveChanges();

                            rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionLQ.ruta, nuevaVersionLQ.nombre));
                        }
                        #endregion

                    }
                    #endregion

                    #region 16 Directorio de contactos
                    {
                        var carpetaDCON = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            subdivisionID = subdivisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 15,
                            tipoCarpeta = TipoCarpetaEnum.Estimaciones
                        };
                        _context.tblFM_Archivo.Add(carpetaDCON);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaDCON);
                        AñadirTiposArchivoCarpeta(carpetaDCON.id, new int[] { 1, 113 });

                        var nuevaVersionDCON = new tblFM_Version
                        {
                            archivoID = carpetaDCON.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Directorio de contactos",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "DIR CONT",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionDCON);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionDCON.ruta, nuevaVersionDCON.nombre));
                    }
                    #endregion

                    #region 17 Bitácora de obra
                    {
                        var carpetaBO = new tblFM_Archivo
                        {
                            padreID = nuevaVersionObra.archivoID,
                            nivel = carpetaObra.nivel + 1,
                            año = añoActual,
                            divisionID = divisionID,
                            subdivisionID = subdivisionID,
                            ccID = ccID,
                            esCarpeta = true,
                            orden = 16,
                            tipoCarpeta = TipoCarpetaEnum.Estimaciones
                        };
                        _context.tblFM_Archivo.Add(carpetaBO);
                        _context.SaveChanges();
                        listaArchivosCreados.Add(carpetaBO);
                        AñadirTiposArchivoCarpeta(carpetaBO.id, new int[] { 1, 35 });

                        var nuevaVersionBO = new tblFM_Version
                        {
                            archivoID = carpetaBO.id,
                            usuarioCreadorID = usuarioID,
                            version = 1,
                            ruta = Path.Combine(nuevaVersionObra.ruta, nuevaVersionObra.nombre),
                            nombre = "Bitácora de obra",
                            activo = true,
                            fechaCreacion = DateTime.Now,
                            abreviacion = "BITACORA",
                            considerarse = true
                        };
                        _context.tblFM_Version.Add(nuevaVersionBO);
                        _context.SaveChanges();

                        rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionBO.ruta, nuevaVersionBO.nombre));
                    }
                    #endregion

                    // Obtiene a todos los usuarios que tengan permisos asignados al gestor de archivos.
                    var listaUsuariosID = ObtenerUsuariosIdsConPermisosGestor();

                    // Se obtiene una lista de todas las personas que tienen permiso especial.
                    var listaPermisosEspeciales = _context.tblFM_PermisoEspecial.ToList();

                    // Crea los registro de permiso a los demás usuarios de los archivos creados (todos menos la carpeta proyecto).
                    //CrearRegistrosPermisosEstructuraProyecto(listaArchivosCreados, listaUsuariosID, listaPermisosEspeciales);

                    // Se crea el registro del permiso de la carpeta proyecto y se actualiza el estatus de las vistas para los demás usuarios.
                    //CrearNuevosPermisosUsuariosCarpetaProyecto(carpetaObra, listaUsuariosID, listaPermisosEspeciales);

                    resultado.Add(SUCCESS, true);
                    _context.SaveChanges();

                    // Se crean las carpetas físicas
                    foreach (var rutaCarpeta in rutasFisicasCarpetas)
                    {
                        Directory.CreateDirectory(rutaCarpeta);
                    }

                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    // Intenta eliminar la carpeta obra en caso de algún error para que no queden archivos basura.
                    try
                    {
                        Directory.Delete(rutaFisicaCarpetaObra, true);
                    }
                    catch (Exception) { }

                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "CrearEstructuraObraSubdivisionPorNombre", e, AccionEnum.AGREGAR, subdivisionID, null);
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, "Ocurrió un error interno al intentar crear la estructura del proyecto.");
                }
            }

            return resultado;
        }

        #endregion

        #region Helper methdos nueva estructura obra
        private void CrearCarpetasMesesSeguridad(tblFM_Archivo padre, tblFM_Version versionPadre, int[] tiposArchivosSeguridadIDs, ref List<tblFM_Archivo> listaArchivosCreados, ref List<string> rutasFisicasCarpetas)
        {
            int usuarioID = vSesiones.sesionUsuarioDTO.id;
            int añoActual = DateTime.Now.Year;

            #region Agosto
            {
                var carpetaAgosto = new tblFM_Archivo
                {
                    padreID = padre.id,
                    nivel = padre.nivel + 1,
                    año = añoActual,
                    divisionID = padre.divisionID,
                    ccID = padre.ccID,
                    esCarpeta = true,
                    orden = 0,
                    perteneceSeguridad = true,
                    tipoCarpeta = TipoCarpetaEnum.Normal
                };
                _context.tblFM_Archivo.Add(carpetaAgosto);
                _context.SaveChanges();
                listaArchivosCreados.Add(carpetaAgosto);

                // Se agregan los tipos de archivos IDs
                AñadirTiposArchivoCarpeta(carpetaAgosto.id, tiposArchivosSeguridadIDs);

                var nuevaVersionAgosto = new tblFM_Version
                {
                    archivoID = carpetaAgosto.id,
                    usuarioCreadorID = usuarioID,
                    version = 1,
                    ruta = Path.Combine(versionPadre.ruta, versionPadre.nombre),
                    nombre = "Agosto " + añoActual,
                    activo = true,
                    fechaCreacion = DateTime.Now,
                    abreviacion = ""
                };
                _context.tblFM_Version.Add(nuevaVersionAgosto);
                _context.SaveChanges();

                rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionAgosto.ruta, nuevaVersionAgosto.nombre));
            }
            #endregion

            #region Septiembre
            {
                var carpetaSeptiembre = new tblFM_Archivo
                {
                    padreID = padre.id,
                    nivel = padre.nivel + 1,
                    año = añoActual,
                    divisionID = padre.divisionID,
                    ccID = padre.ccID,
                    esCarpeta = true,
                    orden = 1,
                    perteneceSeguridad = true,
                    tipoCarpeta = TipoCarpetaEnum.Normal
                };
                _context.tblFM_Archivo.Add(carpetaSeptiembre);
                _context.SaveChanges();
                listaArchivosCreados.Add(carpetaSeptiembre);

                // Se agregan los tipos de archivos IDs
                AñadirTiposArchivoCarpeta(carpetaSeptiembre.id, tiposArchivosSeguridadIDs);

                var nuevaVersionSeptiembre = new tblFM_Version
                {
                    archivoID = carpetaSeptiembre.id,
                    usuarioCreadorID = usuarioID,
                    version = 1,
                    ruta = Path.Combine(versionPadre.ruta, versionPadre.nombre),
                    nombre = "Septiembre " + añoActual,
                    activo = true,
                    fechaCreacion = DateTime.Now,
                    abreviacion = ""
                };
                _context.tblFM_Version.Add(nuevaVersionSeptiembre);
                _context.SaveChanges();

                rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionSeptiembre.ruta, nuevaVersionSeptiembre.nombre));
            }
            #endregion

            #region Octubre
            {
                var carpetaOctubre = new tblFM_Archivo
                {
                    padreID = padre.id,
                    nivel = padre.nivel + 1,
                    año = añoActual,
                    divisionID = padre.divisionID,
                    ccID = padre.ccID,
                    esCarpeta = true,
                    orden = 2,
                    perteneceSeguridad = true,
                    tipoCarpeta = TipoCarpetaEnum.Normal
                };
                _context.tblFM_Archivo.Add(carpetaOctubre);
                _context.SaveChanges();
                listaArchivosCreados.Add(carpetaOctubre);

                // Se agregan los tipos de archivos IDs
                AñadirTiposArchivoCarpeta(carpetaOctubre.id, tiposArchivosSeguridadIDs);

                var nuevaVersionOctubre = new tblFM_Version
                {
                    archivoID = carpetaOctubre.id,
                    usuarioCreadorID = usuarioID,
                    version = 1,
                    ruta = Path.Combine(versionPadre.ruta, versionPadre.nombre),
                    nombre = "Octubre " + añoActual,
                    activo = true,
                    fechaCreacion = DateTime.Now,
                    abreviacion = ""
                };
                _context.tblFM_Version.Add(nuevaVersionOctubre);
                _context.SaveChanges();

                rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionOctubre.ruta, nuevaVersionOctubre.nombre));
            }
            #endregion

            #region Noviembre
            {
                var carpetaNoviembre = new tblFM_Archivo
                {
                    padreID = padre.id,
                    nivel = padre.nivel + 1,
                    año = añoActual,
                    divisionID = padre.divisionID,
                    ccID = padre.ccID,
                    esCarpeta = true,
                    orden = 3,
                    perteneceSeguridad = true,
                    tipoCarpeta = TipoCarpetaEnum.Normal
                };
                _context.tblFM_Archivo.Add(carpetaNoviembre);
                _context.SaveChanges();
                listaArchivosCreados.Add(carpetaNoviembre);

                // Se agregan los tipos de archivos IDs
                AñadirTiposArchivoCarpeta(carpetaNoviembre.id, tiposArchivosSeguridadIDs);

                var nuevaVersionNoviembre = new tblFM_Version
                {
                    archivoID = carpetaNoviembre.id,
                    usuarioCreadorID = usuarioID,
                    version = 1,
                    ruta = Path.Combine(versionPadre.ruta, versionPadre.nombre),
                    nombre = "Noviembre " + añoActual,
                    activo = true,
                    fechaCreacion = DateTime.Now,
                    abreviacion = ""
                };
                _context.tblFM_Version.Add(nuevaVersionNoviembre);
                _context.SaveChanges();

                rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionNoviembre.ruta, nuevaVersionNoviembre.nombre));
            }
            #endregion

            #region Diciembre
            {
                var carpetaDiciembre = new tblFM_Archivo
                {
                    padreID = padre.id,
                    nivel = padre.nivel + 1,
                    año = añoActual,
                    divisionID = padre.divisionID,
                    ccID = padre.ccID,
                    esCarpeta = true,
                    orden = 4,
                    perteneceSeguridad = true,
                    tipoCarpeta = TipoCarpetaEnum.Normal
                };
                _context.tblFM_Archivo.Add(carpetaDiciembre);
                _context.SaveChanges();
                listaArchivosCreados.Add(carpetaDiciembre);

                // Se agregan los tipos de archivos IDs
                AñadirTiposArchivoCarpeta(carpetaDiciembre.id, tiposArchivosSeguridadIDs);

                var nuevaVersionDiciembre = new tblFM_Version
                {
                    archivoID = carpetaDiciembre.id,
                    usuarioCreadorID = usuarioID,
                    version = 1,
                    ruta = Path.Combine(versionPadre.ruta, versionPadre.nombre),
                    nombre = "Diciembre " + añoActual,
                    activo = true,
                    fechaCreacion = DateTime.Now,
                    abreviacion = ""
                };
                _context.tblFM_Version.Add(nuevaVersionDiciembre);
                _context.SaveChanges();

                rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionDiciembre.ruta, nuevaVersionDiciembre.nombre));
            }
            #endregion
        }

        private void CrearCarpetasMesesSeguridadSGSST(tblFM_Archivo padre, tblFM_Version versionPadre, int[] tiposArchivosSeguridadIDs, ref List<tblFM_Archivo> listaArchivosCreados, ref List<string> rutasFisicasCarpetas)
        {
            int usuarioID = vSesiones.sesionUsuarioDTO.id;
            int añoActual = DateTime.Now.Year;

            int ordenCarpetaMes = 0;

            #region Enero
            {
                var carpetaEnero = new tblFM_Archivo
                {
                    padreID = padre.id,
                    nivel = padre.nivel + 1,
                    año = añoActual,
                    divisionID = padre.divisionID,
                    ccID = padre.ccID,
                    esCarpeta = true,
                    orden = ordenCarpetaMes++,
                    perteneceSeguridad = true,
                    tipoCarpeta = TipoCarpetaEnum.Normal
                };
                _context.tblFM_Archivo.Add(carpetaEnero);
                _context.SaveChanges();
                listaArchivosCreados.Add(carpetaEnero);

                // Se agregan los tipos de archivos IDs
                AñadirTiposArchivoCarpeta(carpetaEnero.id, tiposArchivosSeguridadIDs);

                var nuevaVersionEnero = new tblFM_Version
                {
                    archivoID = carpetaEnero.id,
                    usuarioCreadorID = usuarioID,
                    version = 1,
                    ruta = Path.Combine(versionPadre.ruta, versionPadre.nombre),
                    nombre = "Enero",
                    activo = true,
                    fechaCreacion = DateTime.Now,
                    abreviacion = "ENE"
                };
                _context.tblFM_Version.Add(nuevaVersionEnero);
                _context.SaveChanges();

                rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionEnero.ruta, nuevaVersionEnero.nombre));

                CrearCarpetasProcedimientosSeguridad(carpetaEnero, nuevaVersionEnero, tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
            }
            #endregion

            #region Febrero
            {
                var carpetaFebrero = new tblFM_Archivo
                {
                    padreID = padre.id,
                    nivel = padre.nivel + 1,
                    año = añoActual,
                    divisionID = padre.divisionID,
                    ccID = padre.ccID,
                    esCarpeta = true,
                    orden = ordenCarpetaMes++,
                    perteneceSeguridad = true,
                    tipoCarpeta = TipoCarpetaEnum.Normal
                };
                _context.tblFM_Archivo.Add(carpetaFebrero);
                _context.SaveChanges();
                listaArchivosCreados.Add(carpetaFebrero);

                // Se agregan los tipos de archivos IDs
                AñadirTiposArchivoCarpeta(carpetaFebrero.id, tiposArchivosSeguridadIDs);

                var nuevaVersionFebrero = new tblFM_Version
                {
                    archivoID = carpetaFebrero.id,
                    usuarioCreadorID = usuarioID,
                    version = 1,
                    ruta = Path.Combine(versionPadre.ruta, versionPadre.nombre),
                    nombre = "Febrero",
                    activo = true,
                    fechaCreacion = DateTime.Now,
                    abreviacion = "FEB"
                };
                _context.tblFM_Version.Add(nuevaVersionFebrero);
                _context.SaveChanges();

                rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionFebrero.ruta, nuevaVersionFebrero.nombre));

                CrearCarpetasProcedimientosSeguridad(carpetaFebrero, nuevaVersionFebrero, tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
            }
            #endregion

            #region Marzo
            {
                var carpetaMarzo = new tblFM_Archivo
                {
                    padreID = padre.id,
                    nivel = padre.nivel + 1,
                    año = añoActual,
                    divisionID = padre.divisionID,
                    ccID = padre.ccID,
                    esCarpeta = true,
                    orden = ordenCarpetaMes++,
                    perteneceSeguridad = true,
                    tipoCarpeta = TipoCarpetaEnum.Normal
                };
                _context.tblFM_Archivo.Add(carpetaMarzo);
                _context.SaveChanges();
                listaArchivosCreados.Add(carpetaMarzo);

                // Se agregan los tipos de archivos IDs
                AñadirTiposArchivoCarpeta(carpetaMarzo.id, tiposArchivosSeguridadIDs);

                var nuevaVersionMarzo = new tblFM_Version
                {
                    archivoID = carpetaMarzo.id,
                    usuarioCreadorID = usuarioID,
                    version = 1,
                    ruta = Path.Combine(versionPadre.ruta, versionPadre.nombre),
                    nombre = "Marzo",
                    activo = true,
                    fechaCreacion = DateTime.Now,
                    abreviacion = "MAR"
                };
                _context.tblFM_Version.Add(nuevaVersionMarzo);
                _context.SaveChanges();

                rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionMarzo.ruta, nuevaVersionMarzo.nombre));

                CrearCarpetasProcedimientosSeguridad(carpetaMarzo, nuevaVersionMarzo, tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
            }
            #endregion

            #region Abril
            {
                var carpetaAbril = new tblFM_Archivo
                {
                    padreID = padre.id,
                    nivel = padre.nivel + 1,
                    año = añoActual,
                    divisionID = padre.divisionID,
                    ccID = padre.ccID,
                    esCarpeta = true,
                    orden = ordenCarpetaMes++,
                    perteneceSeguridad = true,
                    tipoCarpeta = TipoCarpetaEnum.Normal
                };
                _context.tblFM_Archivo.Add(carpetaAbril);
                _context.SaveChanges();
                listaArchivosCreados.Add(carpetaAbril);

                // Se agregan los tipos de archivos IDs
                AñadirTiposArchivoCarpeta(carpetaAbril.id, tiposArchivosSeguridadIDs);

                var nuevaVersionAbril = new tblFM_Version
                {
                    archivoID = carpetaAbril.id,
                    usuarioCreadorID = usuarioID,
                    version = 1,
                    ruta = Path.Combine(versionPadre.ruta, versionPadre.nombre),
                    nombre = "Abril",
                    activo = true,
                    fechaCreacion = DateTime.Now,
                    abreviacion = "ABR"
                };
                _context.tblFM_Version.Add(nuevaVersionAbril);
                _context.SaveChanges();

                rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionAbril.ruta, nuevaVersionAbril.nombre));

                CrearCarpetasProcedimientosSeguridad(carpetaAbril, nuevaVersionAbril, tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
            }
            #endregion

            #region Mayo
            {
                var carpetaMayo = new tblFM_Archivo
                {
                    padreID = padre.id,
                    nivel = padre.nivel + 1,
                    año = añoActual,
                    divisionID = padre.divisionID,
                    ccID = padre.ccID,
                    esCarpeta = true,
                    orden = ordenCarpetaMes++,
                    perteneceSeguridad = true,
                    tipoCarpeta = TipoCarpetaEnum.Normal
                };
                _context.tblFM_Archivo.Add(carpetaMayo);
                _context.SaveChanges();
                listaArchivosCreados.Add(carpetaMayo);

                // Se agregan los tipos de archivos IDs
                AñadirTiposArchivoCarpeta(carpetaMayo.id, tiposArchivosSeguridadIDs);

                var nuevaVersionMayo = new tblFM_Version
                {
                    archivoID = carpetaMayo.id,
                    usuarioCreadorID = usuarioID,
                    version = 1,
                    ruta = Path.Combine(versionPadre.ruta, versionPadre.nombre),
                    nombre = "Mayo",
                    activo = true,
                    fechaCreacion = DateTime.Now,
                    abreviacion = "MAY"
                };
                _context.tblFM_Version.Add(nuevaVersionMayo);
                _context.SaveChanges();

                rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionMayo.ruta, nuevaVersionMayo.nombre));

                CrearCarpetasProcedimientosSeguridad(carpetaMayo, nuevaVersionMayo, tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
            }
            #endregion

            #region Junio
            {
                var carpetaJunio = new tblFM_Archivo
                {
                    padreID = padre.id,
                    nivel = padre.nivel + 1,
                    año = añoActual,
                    divisionID = padre.divisionID,
                    ccID = padre.ccID,
                    esCarpeta = true,
                    orden = ordenCarpetaMes++,
                    perteneceSeguridad = true,
                    tipoCarpeta = TipoCarpetaEnum.Normal
                };
                _context.tblFM_Archivo.Add(carpetaJunio);
                _context.SaveChanges();
                listaArchivosCreados.Add(carpetaJunio);

                // Se agregan los tipos de archivos IDs
                AñadirTiposArchivoCarpeta(carpetaJunio.id, tiposArchivosSeguridadIDs);

                var nuevaVersionJunio = new tblFM_Version
                {
                    archivoID = carpetaJunio.id,
                    usuarioCreadorID = usuarioID,
                    version = 1,
                    ruta = Path.Combine(versionPadre.ruta, versionPadre.nombre),
                    nombre = "Junio",
                    activo = true,
                    fechaCreacion = DateTime.Now,
                    abreviacion = "JUN"
                };
                _context.tblFM_Version.Add(nuevaVersionJunio);
                _context.SaveChanges();

                rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionJunio.ruta, nuevaVersionJunio.nombre));

                CrearCarpetasProcedimientosSeguridad(carpetaJunio, nuevaVersionJunio, tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
            }
            #endregion

            #region Julio
            {
                var carpetaJulio = new tblFM_Archivo
                {
                    padreID = padre.id,
                    nivel = padre.nivel + 1,
                    año = añoActual,
                    divisionID = padre.divisionID,
                    ccID = padre.ccID,
                    esCarpeta = true,
                    orden = ordenCarpetaMes++,
                    perteneceSeguridad = true,
                    tipoCarpeta = TipoCarpetaEnum.Normal
                };
                _context.tblFM_Archivo.Add(carpetaJulio);
                _context.SaveChanges();
                listaArchivosCreados.Add(carpetaJulio);

                // Se agregan los tipos de archivos IDs
                AñadirTiposArchivoCarpeta(carpetaJulio.id, tiposArchivosSeguridadIDs);

                var nuevaVersionJulio = new tblFM_Version
                {
                    archivoID = carpetaJulio.id,
                    usuarioCreadorID = usuarioID,
                    version = 1,
                    ruta = Path.Combine(versionPadre.ruta, versionPadre.nombre),
                    nombre = "Julio",
                    activo = true,
                    fechaCreacion = DateTime.Now,
                    abreviacion = "JUL"
                };
                _context.tblFM_Version.Add(nuevaVersionJulio);
                _context.SaveChanges();

                rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionJulio.ruta, nuevaVersionJulio.nombre));

                CrearCarpetasProcedimientosSeguridad(carpetaJulio, nuevaVersionJulio, tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
            }
            #endregion

            #region Agosto
            {
                var carpetaAgosto = new tblFM_Archivo
                {
                    padreID = padre.id,
                    nivel = padre.nivel + 1,
                    año = añoActual,
                    divisionID = padre.divisionID,
                    ccID = padre.ccID,
                    esCarpeta = true,
                    orden = ordenCarpetaMes++,
                    perteneceSeguridad = true,
                    tipoCarpeta = TipoCarpetaEnum.Normal
                };
                _context.tblFM_Archivo.Add(carpetaAgosto);
                _context.SaveChanges();
                listaArchivosCreados.Add(carpetaAgosto);

                // Se agregan los tipos de archivos IDs
                AñadirTiposArchivoCarpeta(carpetaAgosto.id, tiposArchivosSeguridadIDs);

                var nuevaVersionAgosto = new tblFM_Version
                {
                    archivoID = carpetaAgosto.id,
                    usuarioCreadorID = usuarioID,
                    version = 1,
                    ruta = Path.Combine(versionPadre.ruta, versionPadre.nombre),
                    nombre = "Agosto",
                    activo = true,
                    fechaCreacion = DateTime.Now,
                    abreviacion = "AGO"
                };
                _context.tblFM_Version.Add(nuevaVersionAgosto);
                _context.SaveChanges();

                rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionAgosto.ruta, nuevaVersionAgosto.nombre));

                CrearCarpetasProcedimientosSeguridad(carpetaAgosto, nuevaVersionAgosto, tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
            }
            #endregion

            #region Septiembre
            {
                var carpetaSeptiembre = new tblFM_Archivo
                {
                    padreID = padre.id,
                    nivel = padre.nivel + 1,
                    año = añoActual,
                    divisionID = padre.divisionID,
                    ccID = padre.ccID,
                    esCarpeta = true,
                    orden = ordenCarpetaMes++,
                    perteneceSeguridad = true,
                    tipoCarpeta = TipoCarpetaEnum.Normal
                };
                _context.tblFM_Archivo.Add(carpetaSeptiembre);
                _context.SaveChanges();
                listaArchivosCreados.Add(carpetaSeptiembre);

                // Se agregan los tipos de archivos IDs
                AñadirTiposArchivoCarpeta(carpetaSeptiembre.id, tiposArchivosSeguridadIDs);

                var nuevaVersionSeptiembre = new tblFM_Version
                {
                    archivoID = carpetaSeptiembre.id,
                    usuarioCreadorID = usuarioID,
                    version = 1,
                    ruta = Path.Combine(versionPadre.ruta, versionPadre.nombre),
                    nombre = "Septiembre",
                    activo = true,
                    fechaCreacion = DateTime.Now,
                    abreviacion = "SEP"
                };
                _context.tblFM_Version.Add(nuevaVersionSeptiembre);
                _context.SaveChanges();

                rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionSeptiembre.ruta, nuevaVersionSeptiembre.nombre));

                CrearCarpetasProcedimientosSeguridad(carpetaSeptiembre, nuevaVersionSeptiembre, tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
            }
            #endregion

            #region Octubre
            {
                var carpetaOctubre = new tblFM_Archivo
                {
                    padreID = padre.id,
                    nivel = padre.nivel + 1,
                    año = añoActual,
                    divisionID = padre.divisionID,
                    ccID = padre.ccID,
                    esCarpeta = true,
                    orden = ordenCarpetaMes++,
                    perteneceSeguridad = true,
                    tipoCarpeta = TipoCarpetaEnum.Normal
                };
                _context.tblFM_Archivo.Add(carpetaOctubre);
                _context.SaveChanges();
                listaArchivosCreados.Add(carpetaOctubre);

                // Se agregan los tipos de archivos IDs
                AñadirTiposArchivoCarpeta(carpetaOctubre.id, tiposArchivosSeguridadIDs);

                var nuevaVersionOctubre = new tblFM_Version
                {
                    archivoID = carpetaOctubre.id,
                    usuarioCreadorID = usuarioID,
                    version = 1,
                    ruta = Path.Combine(versionPadre.ruta, versionPadre.nombre),
                    nombre = "Octubre",
                    activo = true,
                    fechaCreacion = DateTime.Now,
                    abreviacion = "OCT"
                };
                _context.tblFM_Version.Add(nuevaVersionOctubre);
                _context.SaveChanges();

                rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionOctubre.ruta, nuevaVersionOctubre.nombre));

                CrearCarpetasProcedimientosSeguridad(carpetaOctubre, nuevaVersionOctubre, tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
            }
            #endregion

            #region Noviembre
            {
                var carpetaNoviembre = new tblFM_Archivo
                {
                    padreID = padre.id,
                    nivel = padre.nivel + 1,
                    año = añoActual,
                    divisionID = padre.divisionID,
                    ccID = padre.ccID,
                    esCarpeta = true,
                    orden = ordenCarpetaMes++,
                    perteneceSeguridad = true,
                    tipoCarpeta = TipoCarpetaEnum.Normal
                };
                _context.tblFM_Archivo.Add(carpetaNoviembre);
                _context.SaveChanges();
                listaArchivosCreados.Add(carpetaNoviembre);

                // Se agregan los tipos de archivos IDs
                AñadirTiposArchivoCarpeta(carpetaNoviembre.id, tiposArchivosSeguridadIDs);

                var nuevaVersionNoviembre = new tblFM_Version
                {
                    archivoID = carpetaNoviembre.id,
                    usuarioCreadorID = usuarioID,
                    version = 1,
                    ruta = Path.Combine(versionPadre.ruta, versionPadre.nombre),
                    nombre = "Noviembre",
                    activo = true,
                    fechaCreacion = DateTime.Now,
                    abreviacion = "NOV"
                };
                _context.tblFM_Version.Add(nuevaVersionNoviembre);
                _context.SaveChanges();

                rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionNoviembre.ruta, nuevaVersionNoviembre.nombre));

                CrearCarpetasProcedimientosSeguridad(carpetaNoviembre, nuevaVersionNoviembre, tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
            }
            #endregion

            #region Diciembre
            {
                var carpetaDiciembre = new tblFM_Archivo
                {
                    padreID = padre.id,
                    nivel = padre.nivel + 1,
                    año = añoActual,
                    divisionID = padre.divisionID,
                    ccID = padre.ccID,
                    esCarpeta = true,
                    orden = ordenCarpetaMes++,
                    perteneceSeguridad = true,
                    tipoCarpeta = TipoCarpetaEnum.Normal
                };
                _context.tblFM_Archivo.Add(carpetaDiciembre);
                _context.SaveChanges();
                listaArchivosCreados.Add(carpetaDiciembre);

                // Se agregan los tipos de archivos IDs
                AñadirTiposArchivoCarpeta(carpetaDiciembre.id, tiposArchivosSeguridadIDs);

                var nuevaVersionDiciembre = new tblFM_Version
                {
                    archivoID = carpetaDiciembre.id,
                    usuarioCreadorID = usuarioID,
                    version = 1,
                    ruta = Path.Combine(versionPadre.ruta, versionPadre.nombre),
                    nombre = "Diciembre",
                    activo = true,
                    fechaCreacion = DateTime.Now,
                    abreviacion = "DIC"
                };
                _context.tblFM_Version.Add(nuevaVersionDiciembre);
                _context.SaveChanges();

                rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionDiciembre.ruta, nuevaVersionDiciembre.nombre));

                CrearCarpetasProcedimientosSeguridad(carpetaDiciembre, nuevaVersionDiciembre, tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
            }
            #endregion
        }

        private void CrearCarpetasProcedimientosSeguridad(tblFM_Archivo padre, tblFM_Version versionPadre, int[] tiposArchivosSeguridadIDs, ref List<tblFM_Archivo> listaArchivosCreados, ref List<string> rutasFisicasCarpetas)
        {
            int usuarioID = vSesiones.sesionUsuarioDTO.id;
            int añoActual = DateTime.Now.Year;

            for (int i = 1; i < 46; i++)
            {
                string formatoNumero = string.Format("{0:00}", i);

                var carpetaProcedimiento = new tblFM_Archivo
                {
                    padreID = padre.id,
                    nivel = padre.nivel + 1,
                    año = añoActual,
                    divisionID = padre.divisionID,
                    ccID = padre.ccID,
                    esCarpeta = true,
                    orden = i,
                    perteneceSeguridad = true,
                    tipoCarpeta = TipoCarpetaEnum.Normal
                };
                _context.tblFM_Archivo.Add(carpetaProcedimiento);
                _context.SaveChanges();
                listaArchivosCreados.Add(carpetaProcedimiento);

                // Se agregan los tipos de archivos IDs
                AñadirTiposArchivoCarpeta(carpetaProcedimiento.id, tiposArchivosSeguridadIDs);

                var nuevaVersionProcedimiento = new tblFM_Version
                {
                    archivoID = carpetaProcedimiento.id,
                    usuarioCreadorID = usuarioID,
                    version = 1,
                    ruta = Path.Combine(versionPadre.ruta, versionPadre.nombre),
                    nombre = "SEG-PRO-" + formatoNumero,
                    activo = true,
                    fechaCreacion = DateTime.Now,
                    abreviacion = "PRO" + formatoNumero
                };
                _context.tblFM_Version.Add(nuevaVersionProcedimiento);
                _context.SaveChanges();

                rutasFisicasCarpetas.Add(Path.Combine(RUTA_BASE, nuevaVersionProcedimiento.ruta, nuevaVersionProcedimiento.nombre));
            }

        }

        private void AñadirTiposArchivoCarpeta(long carpetaID, int[] tiposArchivosIDs)
        {
            for (int i = 0; i < tiposArchivosIDs.Length; i++)
            {
                _context.tblFM_ArchivotblFM_TipoArchivo.Add(
                    new tblFM_ArchivotblFM_TipoArchivo { archivoID = carpetaID, tipoArchivoID = tiposArchivosIDs[i] }
                );
            }
        }

        private void CrearRegistrosPermisosEstructura(List<tblFM_Archivo> archivos, List<int> usuariosIds, List<tblFM_PermisoEspecial> permisosEspeciales)
        {
            var listaNuevosPermisos = new List<tblFM_Permiso>();
            foreach (var usuarioId in usuariosIds)
            {
                // Si el usuario tiene permiso especial, se le crea el permiso correspondiente.
                var permisosEspecialesUsuario = permisosEspeciales.Where(x => x.usuarioID == usuarioId).ToList();

                foreach (var archivo in archivos)
                {
                    // Se crea el registro del permiso para el usuario.
                    var nuevoPermiso = new tblFM_Permiso { usuarioID = usuarioId, archivoID = archivo.id, FK_UsuarioCreacion = vSesiones.sesionUsuarioDTO.id, fechaCreacion = DateTime.Now, registroActivo = true };

                    foreach (var permisoEspecial in permisosEspecialesUsuario)
                    {
                        AsignarPermisoEspecialArchivo(archivo, ref nuevoPermiso, permisoEspecial);
                    }

                    listaNuevosPermisos.Add(nuevoPermiso);
                }
            }
            _context.tblFM_Permiso.AddRange(listaNuevosPermisos);
            _context.SaveChanges();
        }

        private void CrearRegistrosPermisosEstructuraProyecto(List<tblFM_Archivo> archivos, List<int> usuariosIds, List<tblFM_PermisoEspecial> permisosEspeciales)
        {
            var listaNuevosPermisos = new List<tblFM_Permiso>();

            foreach (var usuarioId in usuariosIds)
            {
                // Si el usuario tiene permiso especial, se le crea el permiso correspondiente.
                var permisosEspecialesUsuario = permisosEspeciales.Where(x => x.usuarioID == usuarioId).ToList();

                foreach (var archivo in archivos)
                {
                    // Se crea el registro del permiso para el usuario.
                    tblFM_Permiso nuevoPermiso = new tblFM_Permiso { usuarioID = usuarioId, archivoID = archivo.id };

                    // Si es el usuario actual, le pone todos los permisos.
                    if (usuarioId == vSesiones.sesionUsuarioDTO.id)
                    {
                        nuevoPermiso.puedeActualizar = true;
                        nuevoPermiso.puedeCrear = true;
                        nuevoPermiso.puedeDescargarArchivo = true;
                        nuevoPermiso.puedeDescargarCarpeta = true;
                        nuevoPermiso.puedeEliminar = true;
                        nuevoPermiso.puedeSubir = true;
                        nuevoPermiso.estatusVista = 2;
                        nuevoPermiso.FK_UsuarioCreacion = vSesiones.sesionUsuarioDTO.id;
                        nuevoPermiso.fechaCreacion = DateTime.Now;
                        nuevoPermiso.registroActivo = true;
                    }
                    else
                    {
                        foreach (var permisoEspecial in permisosEspecialesUsuario)
                        {
                            AsignarPermisoEspecialArchivo(archivo, ref nuevoPermiso, permisoEspecial);
                        }
                    }

                    listaNuevosPermisos.Add(nuevoPermiso);
                }
            }
            _context.tblFM_Permiso.AddRange(listaNuevosPermisos);
            _context.SaveChanges();
        }

        private void CrearNuevosPermisosUsuariosCarpetaObra(tblFM_Archivo archivoObra, List<int> usuariosIds, List<tblFM_PermisoEspecial> listaPermisosEspeciales)
        {
            foreach (var usuarioID in usuariosIds)
            {
                // Se crea el registro del permiso para el usuario.
                var nuevoPermiso = new tblFM_Permiso { usuarioID = usuarioID, archivoID = archivoObra.id };

                // Si el usuario tiene permiso especial, se asigna el estatus de la vista correspondiente.
                var permisosEspecialesUsuario = listaPermisosEspeciales.Where(x => x.usuarioID == usuarioID).ToList();
                foreach (var permisoEspecial in permisosEspecialesUsuario)
                {
                    if (permisosEspecialesUsuario.Count > 0)
                    {
                        if (permisoEspecial.tipoPermiso == TipoPermisoEnum.GeneralDivision && permisoEspecial.entidadID == archivoObra.divisionID)
                        {
                            nuevoPermiso.estatusVista = 2;
                            nuevoPermiso.puedeSubir = permisoEspecial.puedeSubir;
                            nuevoPermiso.puedeEliminar = permisoEspecial.puedeEliminar;
                            nuevoPermiso.puedeDescargarArchivo = permisoEspecial.puedeDescargarArchivo;
                            nuevoPermiso.puedeDescargarCarpeta = permisoEspecial.puedeDescargarCarpeta;
                            nuevoPermiso.puedeActualizar = permisoEspecial.puedeActualizar;
                            nuevoPermiso.puedeCrear = permisoEspecial.puedeCrear;
                            nuevoPermiso.FK_UsuarioCreacion = vSesiones.sesionUsuarioDTO.id;
                            nuevoPermiso.fechaCreacion = DateTime.Now;
                            nuevoPermiso.registroActivo = true;
                        }
                        else if (permisoEspecial.tipoPermiso == TipoPermisoEnum.GeneralSubdivision && permisoEspecial.entidadID == archivoObra.subdivisionID)
                        {
                            nuevoPermiso.estatusVista = 1;
                        }
                        else if (permisoEspecial.tipoPermiso == TipoPermisoEnum.GeneralObra && permisoEspecial.entidadID == archivoObra.ccID)
                        {
                            nuevoPermiso.estatusVista = 1;
                        }
                        else if (permisoEspecial.tipoPermiso == TipoPermisoEnum.Seguridad || permisoEspecial.tipoPermiso == TipoPermisoEnum.SeguridadAdmin)
                        {
                            nuevoPermiso.estatusVista = 1;
                        }
                    }
                }

                _context.tblFM_Permiso.Add(nuevoPermiso);
                _context.SaveChanges();

                // Se actualiza las vistas padres si es necesario.
                ActualizarEstatusVistasPadreNuevoArchivo(archivoObra.padreID, usuarioID);
            }
        }

        private void CrearNuevosPermisosUsuariosCarpetaProyecto(tblFM_Archivo archivoObra, List<int> usuariosIds, List<tblFM_PermisoEspecial> listaPermisosEspeciales)
        {
            foreach (var usuarioID in usuariosIds)
            {
                // Se crea el registro del permiso para el usuario.
                tblFM_Permiso nuevoPermiso = new tblFM_Permiso { usuarioID = usuarioID, archivoID = archivoObra.id };

                // Si es el usuario actual, le pone todos los permisos.
                if (usuarioID == vSesiones.sesionUsuarioDTO.id)
                {
                    nuevoPermiso.puedeActualizar = true;
                    nuevoPermiso.puedeCrear = true;
                    nuevoPermiso.puedeDescargarArchivo = true;
                    nuevoPermiso.puedeDescargarCarpeta = true;
                    nuevoPermiso.puedeEliminar = true;
                    nuevoPermiso.puedeSubir = true;
                    nuevoPermiso.estatusVista = 2;
                }
                else
                {
                    // Si el usuario tiene permiso especial, se asigna el estatus de la vista correspondiente.
                    var permisosEspecialesUsuario = listaPermisosEspeciales.Where(x => x.usuarioID == usuarioID).ToList();
                    foreach (var permisoEspecial in permisosEspecialesUsuario)
                    {
                        if (permisosEspecialesUsuario.Count > 0)
                        {
                            if (permisoEspecial.tipoPermiso == TipoPermisoEnum.GeneralDivision && permisoEspecial.entidadID == archivoObra.divisionID)
                            {
                                nuevoPermiso.estatusVista = 2;
                                nuevoPermiso.puedeSubir = permisoEspecial.puedeSubir;
                                nuevoPermiso.puedeEliminar = permisoEspecial.puedeEliminar;
                                nuevoPermiso.puedeDescargarArchivo = permisoEspecial.puedeDescargarArchivo;
                                nuevoPermiso.puedeDescargarCarpeta = permisoEspecial.puedeDescargarCarpeta;
                                nuevoPermiso.puedeActualizar = permisoEspecial.puedeActualizar;
                                nuevoPermiso.puedeCrear = permisoEspecial.puedeCrear;
                                nuevoPermiso.FK_UsuarioCreacion = vSesiones.sesionUsuarioDTO.id;
                                nuevoPermiso.fechaCreacion = DateTime.Now;
                                nuevoPermiso.registroActivo = true;
                            }
                            else if (permisoEspecial.tipoPermiso == TipoPermisoEnum.GeneralSubdivision && permisoEspecial.entidadID == archivoObra.subdivisionID)
                            {
                                nuevoPermiso.estatusVista = 1;
                            }
                            else if (permisoEspecial.tipoPermiso == TipoPermisoEnum.GeneralObra && permisoEspecial.entidadID == archivoObra.ccID)
                            {
                                nuevoPermiso.estatusVista = 1;
                            }
                            else if (permisoEspecial.tipoPermiso == TipoPermisoEnum.Seguridad || permisoEspecial.tipoPermiso == TipoPermisoEnum.SeguridadAdmin)
                            {
                                nuevoPermiso.estatusVista = 1;
                            }
                        }
                    }
                }

                _context.tblFM_Permiso.Add(nuevoPermiso);
                _context.SaveChanges();

                // Se actualiza las vistas padres si es necesario.
                ActualizarEstatusVistasPadreNuevoArchivo(archivoObra.padreID, usuarioID);
            }
        }
        #endregion

        #region Crear carpetas meses seguridad
        public string CrearMesesSeguridad(int carpetaObraArchivoID)
        {
            return "Método desactivado";
            try
            {
                var obra = _context.tblFM_Version.FirstOrDefault(x => x.archivoID == carpetaObraArchivoID && x.activo);

                if (obra == null)
                {
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "CrearMesesSeguridad", new Exception("No se encontró la carpeta archivoID: " + carpetaObraArchivoID), AccionEnum.AGREGAR, carpetaObraArchivoID, null);
                    return "No se encontró la carpeta.";
                }

                var tiposArchivosSeguridadIDs = new int[] { 1, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74 };

                var rutasFisicasCarpetas = new List<string>();
                var listaArchivosCreados = new List<tblFM_Archivo>();

                var listaCarpetasSeguridad = _context.tblFM_Version
                    .Where(x => x.archivo.nivel > 4 && x.archivo.perteneceSeguridad && x.archivo.ccID == obra.archivo.ccID && x.activo && x.archivo.esCarpeta)
                    .ToList();

                listaCarpetasSeguridad.RemoveAll(x =>
                {
                    switch (x.nombre)
                    {
                        case "Análisis de Riesgos":
                            return true;
                        case "Campamentos y Comedores":
                            return true;
                        case "Evaluación de Operadores":
                            return true;
                        case "Indicadores de Seguridad":
                            return true;
                        default:
                            return false;
                    }
                });
                foreach (var carpetaSeguridad in listaCarpetasSeguridad)
                {
                    CrearCarpetasMesesSeguridad(carpetaSeguridad.archivo, carpetaSeguridad, tiposArchivosSeguridadIDs, ref listaArchivosCreados, ref rutasFisicasCarpetas);
                }

                // Obtiene a todos los usuarios que tengan permisos asignados al gestor de archivos.
                var listaUsuariosID = ObtenerUsuariosIdsConPermisosGestor();

                // Se obtiene una lista de todas las personas que tienen permiso especial.
                var listaPermisosEspeciales = _context.tblFM_PermisoEspecial.ToList();

                // Crea los registro de permiso a los demás usuarios de los archivos creados (todos menos la carpeta obra).
                CrearRegistrosPermisosEstructura(listaArchivosCreados, listaUsuariosID, listaPermisosEspeciales);

                _context.SaveChanges();
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "CrearMesesSeguridad", new Exception("Carpeta creada con éxito archivoID: " + carpetaObraArchivoID), AccionEnum.AGREGAR, carpetaObraArchivoID, null);
                return "Carpetas de meses creadas con éxito para la obra " + obra.nombre;
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "CrearMesesSeguridad", e, AccionEnum.AGREGAR, carpetaObraArchivoID, null);
                return "Error al crear las carpetas: " + e.Message;
            }
        }
        #endregion

        #region Métodos Envio
        public List<tblFM_EnvioDocumento> CargarTblEnvios(int tipoDocumento, string descripcion, int usuarioID)
        {
            List<tblFM_EnvioDocumento> data = new List<tblFM_EnvioDocumento>();
            var verTodoUsuariosID = ObtenerVerTodoIds();
            data = _context.tblFM_EnvioDocumento
                .Where(x => (tipoDocumento == -1 ? true : x.tipoDocumento == tipoDocumento) && x.empresa != null
                    && x.descripcion.Contains(descripcion) && x.estatus == 0 && (verTodoUsuariosID.Contains(usuarioID) ? true : x.usuarioID == usuarioID)).ToList();
            return data;
        }

        private List<int> ObtenerVerTodoIds()
        {
            return (from a in _context.tblP_AccionesVista
                    join b in _context.tblP_AccionesVistatblP_Usuario
                        on a.id equals b.tblP_AccionesVista_id
                    where a.vistaID == VISTA_ENVIO_ID && a.Accion == PERMISO_ENVIO_TODO
                    select b.tblP_Usuario_id)
                    .ToList();
        }

        public tblFM_EnvioDocumento GetEnvioByID(int id)
        {
            var data = _context.tblFM_EnvioDocumento.FirstOrDefault(x => x.id == id);
            return data;
        }

        public Dictionary<string, object> SubirArchivoAuto(List<Byte[]> archivosPorSubir, long padreID, int tipoArchivoID, int envioID)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    var carpetaPadre = _context.tblFM_Version.FirstOrDefault(version => version.archivoID.Equals(padreID) && version.activo);
                    var envio = _context.tblFM_EnvioDocumento.FirstOrDefault(x => x.id == envioID);

                    var listaArchivosPorCrear = new Dictionary<Byte[], string>();

                    int usuarioID = vSesiones.sesionUsuarioDTO.id;

                    // Verifica que el usuario tenga permiso de subir archivos en la carpeta padre.

                    // Se actualiza la fecha de edicion de la carpeta padre.
                    carpetaPadre.fechaEdicion = DateTime.Now;

                    // Verifica si el archivo es de la división industrial, para que el tipo de archivo se considere libre.
                    bool esDivisionIndustrial = carpetaPadre.archivo.divisionID == DIVISION_INDUSTRIAL_ID;
                    var auxNombre = "";
                    var i = 0;

                    foreach (var archivoPorSubir in archivosPorSubir)
                    {
                        var nuevoArchivo = new tblFM_Archivo
                        {
                            padreID = padreID,
                            nivel = carpetaPadre.archivo.nivel + 1,
                            año = carpetaPadre.archivo.año,
                            divisionID = carpetaPadre.archivo.divisionID,
                            subdivisionID = carpetaPadre.archivo.subdivisionID,
                            ccID = carpetaPadre.archivo.ccID,
                            orden = ObtenerOrdenArchivo(padreID),
                            perteneceSeguridad = carpetaPadre.archivo.perteneceSeguridad,
                            tipoCarpeta = TipoCarpetaEnum.NA
                        };
                        _context.tblFM_Archivo.Add(nuevoArchivo);
                        _context.SaveChanges();

                        AñadirTiposArchivoCarpeta(nuevoArchivo.id, new int[] { tipoArchivoID });
                        _context.SaveChanges();

                        var auxArchivoID = _context.tblFM_ArchivotblFM_TipoArchivo.Where(x => x.tipoArchivoID == tipoArchivoID).Select(x => x.archivoID).ToList();

                        List<int> numeroArchivo = (from version in _context.tblFM_Version
                                                   join archivo in _context.tblFM_Archivo on version.archivoID equals archivo.id
                                                   where !archivo.esCarpeta && version.activo && (auxArchivoID.Contains(version.archivoID))
                                                   select version.numeroArchivo).ToList();
                        var auxNumeroArchivo = 1;

                        if (numeroArchivo.Count() > 0) auxNumeroArchivo = numeroArchivo.Max() + 1;

                        var nuevaVersion = new tblFM_Version
                        {
                            archivoID = nuevoArchivo.id,
                            activo = true,
                            version = 1,
                            usuarioCreadorID = usuarioID,
                            numeroArchivo = auxNumeroArchivo,
                            ruta = carpetaPadre.ruta == null ? Path.Combine(carpetaPadre.nombre) : Path.Combine(carpetaPadre.ruta, carpetaPadre.nombre),
                            fechaCreacion = DateTime.Now
                        };
                        auxNombre = "";
                        if (tipoArchivoID == 18 && i == 1)
                        {
                            auxNombre = "ListaAsistencia";
                        }
                        nuevaVersion.nombre = ObtenerNombreArchivo(tipoArchivoID, auxNombre + envio.descripcion + ".pdf", nuevaVersion.numeroArchivo, carpetaPadre, esDivisionIndustrial);

                        // Se valida que no exista otro archivo con el mismo nombre en la misma carpeta (En caso de ser nombre libre)

                        bool existeNombre = _context.tblFM_Version.Any(x => x.archivo.padreID == padreID && x.nombre == nuevaVersion.nombre && x.activo);

                        if (existeNombre)
                        {
                            dbContextTransaction.Rollback();
                            resultado.Add(SUCCESS, false);
                            resultado.Add(MESSAGE, "Ya existe un archivo en la carpeta indicada con ese nombre.");
                            return resultado;
                        }

                        _context.tblFM_Version.Add(nuevaVersion);
                        _context.SaveChanges();

                        // Si es admin, no se le crea registro de permiso.
                        if (noEsAdmin)
                        {
                            // Crea el registro de permisos del archivo.
                            var nuevoPermiso = new tblFM_Permiso
                            {
                                usuarioID = usuarioID,
                                archivoID = nuevaVersion.archivoID,
                                puedeActualizar = true,
                                puedeEliminar = true,
                                puedeDescargarArchivo = true,
                                estatusVista = 2,
                                FK_UsuarioCreacion = vSesiones.sesionUsuarioDTO.id,
                                fechaCreacion = DateTime.Now,
                                registroActivo = true
                            };
                            _context.tblFM_Permiso.Add(nuevoPermiso);
                            _context.SaveChanges();
                        }

                        // Se crea el registro del permiso y se actualiza el estatus de las vistas para los demás usuarios.
                        CrearNuevosPermisosUsuariosSinActualizarEstatus(nuevoArchivo, padreID);

                        var numeroVersion = String.Format("{0:00}-", nuevaVersion.version);
                        var rutaFisica = Path.Combine(RUTA_BASE, nuevaVersion.ruta, (numeroVersion + nuevaVersion.nombre));

                        // Si falla al guardar el archivo
                        if (rutaFisica.Length >= 254)
                        {
                            dbContextTransaction.Rollback();
                            resultado.Add(SUCCESS, false);
                            resultado.Add(MESSAGE, "El nombre de uno de los archivos es demasiado largo para ser guardado en el servidor. Por favor, renombre el archivo con un nombre más corto.");
                            return resultado;
                        }

                        listaArchivosPorCrear.Add(archivoPorSubir, rutaFisica);
                        i++;
                    }

                    // Se actualiza el estatus de las carpetas padre.
                    var listaUsuariosID = ObtenerUsuariosIdsConPermisosGestor()
                        .Where(x => x != usuarioID)
                        .ToList();

                    foreach (var usuarioPermisoID in listaUsuariosID)
                    {
                        ActualizarEstatusVistasPadreNuevoArchivo(padreID, usuarioPermisoID);
                    }

                    // Se crean los archivos
                    foreach (var archivo in listaArchivosPorCrear)
                    {
                        if (GlobalUtils.SaveCompressedByteArray(archivo.Key, archivo.Value) == false)
                        {
                            dbContextTransaction.Rollback();
                            resultado.Add(SUCCESS, false);
                            resultado.Add(MESSAGE, "Ocurrió un error al estar guardando los archivos en el servidor.");
                            return resultado;
                        }
                    }
                    envio.estatus = 1;
                    _context.SaveChanges();
                    resultado.Add(SUCCESS, true);
                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "SubirVariosArchivos", e, AccionEnum.AGREGAR, padreID, null);
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, "Ocurrió un error interno al intentar guardar los archivos en el servidor.");
                }
            }

            return resultado;
        }

        public bool EliminarEnvioDoc(int index)
        {
            try
            {
                var envio = _context.tblFM_EnvioDocumento.FirstOrDefault(x => x.id == index);
                _context.tblFM_EnvioDocumento.Remove(envio);
                _context.SaveChanges();
                return true;
            }
            catch (Exception e)
            {
                return false;
            }
        }

        #endregion

        #region DUPLICAR CARPETAS
        /// <summary>
        /// Se obtiene listado de carpetas bases para que el usuario pueda seleccionar la ubicación de la nueva carpeta base a trabajar.
        /// </summary>
        /// <returns>Retorna listado de carpetas bases.</returns>
        public Dictionary<string, object> FillCboCarpetasBases()
        {
            try
            {
                #region FILL COMBO CARPETAS BASES
                List<ComboDTO> lstCarpetasBase = new List<ComboDTO>();
                switch (vSesiones.sesionEmpresaActual)
                {
                    case (int)EmpresaEnum.Construplan:
                        lstCarpetasBase = _context.Select<ComboDTO>(new DapperDTO
                        {
                            baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                            consulta = @"SELECT archivoID AS Value, UPPER(TRIM(nombre)) AS Text FROM tblFM_Version WHERE archivoID IN (SELECT id FROM tblFM_Archivo WHERE tipoCarpeta = @tipoCarpeta AND año = @anio) ORDER BY nombre",
                            parametros = new { tipoCarpeta = (int)TipoCarpetaEnum.Division, anio = 2022 }
                        }).ToList();
                        break;
                    case (int)EmpresaEnum.Colombia:
                        lstCarpetasBase = _context.Select<ComboDTO>(new DapperDTO
                        {
                            baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                            consulta = @"SELECT archivoID AS Value, UPPER(TRIM(nombre)) AS Text FROM tblFM_Version WHERE archivoID IN (SELECT id FROM tblFM_Archivo WHERE tipoCarpeta = @tipoCarpeta AND año = @anio) ORDER BY nombre",
                            parametros = new { tipoCarpeta = (int)TipoCarpetaEnum.Division, anio = 2022 }
                        }).ToList();
                        break;
                    case (int)EmpresaEnum.Peru:
                        lstCarpetasBase = _context.Select<ComboDTO>(new DapperDTO
                        {
                            baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                            consulta = @"SELECT archivoID AS Value, UPPER(TRIM(nombre)) AS Text FROM tblFM_Version WHERE archivoID IN (SELECT id FROM tblFM_Archivo WHERE tipoCarpeta = @tipoCarpeta AND año = @anio) ORDER BY nombre",
                            parametros = new { tipoCarpeta = (int)TipoCarpetaEnum.Division, anio = 2022 }
                        }).ToList();
                        break;
                    default:
                        break;
                }

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, lstCarpetasBase);
                #endregion
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }
            return resultado;
        }

        /// <summary>
        /// Se genera el duplicado de una carpeta nueva, se toma como ejemplo la carpeta base.
        /// </summary>
        /// <returns>Retorna mensaje de éxito al generar duplicado de nueva carpeta.</returns>
        public Dictionary<string, object> GenerarCarpetaDuplicado(CarpetaBaseDTO objParamsDTO)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                using (var _ctx = new MainContext(vSesiones.sesionEmpresaActual))
                {
                    #region VARIABLES
                    string rutaFisica = string.Empty;
                    string rutaVersion = string.Empty;
                    string nombreCarpeta = string.Empty;
                    List<string> lstRutasFisicasCarpetas = new List<string>();
                    #endregion

                    try
                    {
                        #region VALIDACIONES
                        if (objParamsDTO.padreID <= 0)
                            throw new Exception("Es necesario seleccionar una división destino.");

                        if (string.IsNullOrEmpty(objParamsDTO.nombreCarpetaBase))
                            throw new Exception("Es necesario indicar el nombre de la carpeta.");
                        #endregion VALIDACIONES

                        #region SE OBTIENE EL NOMBRE DE LA DIVISIÓN DONDE SE VA GUARDAR LA NUEVA CARPETA BASE.
                        string nombreDivision = _ctx.tblFM_Version.Where(w => w.archivoID == objParamsDTO.padreID).Select(s => s.nombre).FirstOrDefault();
                        if (string.IsNullOrEmpty(nombreDivision))
                            throw new Exception("Ocurrió un error al obtener el nombre de la división.");
                        #endregion

                        switch (vSesiones.sesionEmpresaActual)
                        {
                            case (int)EmpresaEnum.Construplan:
                                {
                                    #region SE CREAN CARPETAS INICIALES
                                    tblFM_Archivo objArchivo = new tblFM_Archivo();
                                    rutaVersion = string.Format(@"2022\{0}", nombreDivision);
                                    DuplicadoCarpetas(objParamsDTO.padreID, 2, rutaVersion, objParamsDTO.nombreCarpetaBase);
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreCarpetaInicial = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();
                                    #endregion

                                    #region 1.CLIENTE
                                    rutaVersion = string.Format(@"{0}\{1}\{2}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase);
                                    DuplicadoCarpetas(padreCarpetaInicial, 3, rutaVersion, "1.CLIENTE");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreClienteID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 1.1.Presupuestos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE");
                                    DuplicadoCarpetas(padreClienteID, 4, rutaVersion, "1.1.Presupuestos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long presupuestosPadreID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 1.1.1.Presupuesto
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.1.Presupuestos");
                                    DuplicadoCarpetas(presupuestosPadreID, 5, rutaVersion, "1.1.1.Presupuesto");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.1.1.Presupuesto");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.1.2.Mano de Obra
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.1.Presupuestos");
                                    DuplicadoCarpetas(presupuestosPadreID, 5, rutaVersion, "1.1.2.Mano de Obra");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.1.2.Mano de Obra");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.1.3.Auxiliares
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.1.Presupuestos");
                                    DuplicadoCarpetas(presupuestosPadreID, 5, rutaVersion, "1.1.3.Auxiliares");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.1.3.Auxiliares");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.1.4.Desglose Conceptos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.1.Presupuestos");
                                    DuplicadoCarpetas(presupuestosPadreID, 5, rutaVersion, "1.1.4.Desglose Conceptos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.1.4.Desglose Conceptos");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.1.5.Explosión Insumos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.1.Presupuestos");
                                    DuplicadoCarpetas(presupuestosPadreID, 5, rutaVersion, "1.1.5.Explosión Insumos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.1.5.Explosión Insumos");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.1.6.Análisis Precios Unitarios
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.1.Presupuestos");
                                    DuplicadoCarpetas(presupuestosPadreID, 5, rutaVersion, "1.1.6.Análisis Precios Unitarios");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.1.6.Análisis Precios Unitarios");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.1.7.Análisis Costos Horarios
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.1.Presupuestos");
                                    DuplicadoCarpetas(presupuestosPadreID, 5, rutaVersion, "1.1.7.Análisis Costos Horarios");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.1.7.Análisis Costos Horarios");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.1.8.Análisis Indirectos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.1.Presupuestos");
                                    DuplicadoCarpetas(presupuestosPadreID, 5, rutaVersion, "1.1.8.Análisis Indirectos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.1.8.Análisis Indirectos");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.1.9.Programa Obra
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.1.Presupuestos");
                                    DuplicadoCarpetas(presupuestosPadreID, 5, rutaVersion, "1.1.9.Programa Obra");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.1.9.Programa Obra");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.1.10.Precios Fuera de Presupuestos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.1.Presupuestos");
                                    DuplicadoCarpetas(presupuestosPadreID, 5, rutaVersion, "1.1.10.Precios Fuera de Presupuestos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.1.10.Precios Fuera de Presupuestos");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 1.2.Licitación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE");
                                    DuplicadoCarpetas(padreClienteID, 4, rutaVersion, "1.2.Licitación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long licitacionPadreID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 1.2.1.Acta Visita Obra
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.2.Licitación");
                                    DuplicadoCarpetas(licitacionPadreID, 5, rutaVersion, "1.2.1.Acta Visita Obra");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.2.1.Acta Visita Obra");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.2.2.Junta Aclaraciones
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.2.Licitación");
                                    DuplicadoCarpetas(licitacionPadreID, 5, rutaVersion, "1.2.2.Junta Aclaraciones");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.2.2.Junta Aclaraciones");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.2.3.Reporte Visita Obra
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.2.Licitación");
                                    DuplicadoCarpetas(licitacionPadreID, 5, rutaVersion, "1.2.3.Reporte Visita Obra");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.2.3.Reporte Visita Obra");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.2.4.Bases-Anexos Concurso
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.2.Licitación");
                                    DuplicadoCarpetas(licitacionPadreID, 5, rutaVersion, "1.2.4.Bases-Anexos Concurso");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.2.4.Bases-Anexos Concurso");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 1.3.Cotizaciones Principales
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE");
                                    DuplicadoCarpetas(padreClienteID, 4, rutaVersion, "1.3.Cotizaciones Principales");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.3.Cotizaciones Principales");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.4.Junta Arranque
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE");
                                    DuplicadoCarpetas(padreClienteID, 4, rutaVersion, "1.4.Junta Arranque");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long juntaArranquePadreID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 1.4.1.Cuadro Facultamiento
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.4.Junta Arranque");
                                    DuplicadoCarpetas(juntaArranquePadreID, 5, rutaVersion, "1.4.1.Cuadro Facultamiento");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.4.1.Cuadro Facultamiento");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.4.2.Minuta y Lista Asistencia
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.4.Junta Arranque");
                                    DuplicadoCarpetas(juntaArranquePadreID, 5, rutaVersion, "1.4.2.Minuta y Lista Asistencia");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.4.2.Minuta y Lista Asistencia");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.4.3.Solicitud Equipo
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.4.Junta Arranque");
                                    DuplicadoCarpetas(juntaArranquePadreID, 5, rutaVersion, "1.4.3.Solicitud Equipo");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.4.3.Solicitud Equipo");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.4.4.Plantilla Personal
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.4.Junta Arranque");
                                    DuplicadoCarpetas(juntaArranquePadreID, 5, rutaVersion, "1.4.4.Plantilla Personal");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.4.4.Plantilla Personal");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 1.5.Contrato Cliente
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE");
                                    DuplicadoCarpetas(padreClienteID, 4, rutaVersion, "1.5.Contrato Cliente");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long contratoClientePadreID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 1.5.1.Contrato Firmado
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.5.Contrato Cliente");
                                    DuplicadoCarpetas(contratoClientePadreID, 5, rutaVersion, "1.5.1.Contrato Firmado");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.5.2.Alcance
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.5.Contrato Cliente");
                                    DuplicadoCarpetas(contratoClientePadreID, 5, rutaVersion, "1.5.2.Alcance");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.5.3.Fianzas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.5.Contrato Cliente");
                                    DuplicadoCarpetas(contratoClientePadreID, 5, rutaVersion, "1.5.3.Fianzas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.5.4.Seguros
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.5.Contrato Cliente");
                                    DuplicadoCarpetas(contratoClientePadreID, 5, rutaVersion, "1.5.4.Seguros");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.5.5.Ordenes Cambio
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.5.Contrato Cliente");
                                    DuplicadoCarpetas(contratoClientePadreID, 5, rutaVersion, "1.5.5.Ordenes Cambio");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.5.6.Estimaciones
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.5.Contrato Cliente");
                                    DuplicadoCarpetas(contratoClientePadreID, 5, rutaVersion, "1.5.6.Estimaciones");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 1.6.Comunicación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE");
                                    DuplicadoCarpetas(padreClienteID, 4, rutaVersion, "1.6.Comunicación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long comunicacionPadreID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 1.6.1.Minutas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.6.Comunicación");
                                    DuplicadoCarpetas(comunicacionPadreID, 5, rutaVersion, "1.6.1.Minutas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.6.1.Minutas");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.6.2.Transmittal
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.6.Comunicación");
                                    DuplicadoCarpetas(comunicacionPadreID, 5, rutaVersion, "1.6.2.Transmittal");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.6.2.Transmittal");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.6.3.RFIs
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.6.Comunicación");
                                    DuplicadoCarpetas(comunicacionPadreID, 5, rutaVersion, "1.6.3.RFIs");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.6.3.RFIs");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.6.4.Submittal
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.6.Comunicación");
                                    DuplicadoCarpetas(comunicacionPadreID, 5, rutaVersion, "1.6.4.Submittal");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.6.4.Submittal");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 1.7.Dependencias
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE");
                                    DuplicadoCarpetas(padreClienteID, 4, rutaVersion, "1.7.Dependencias");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long dependenciasPadreID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 1.7.1.Permisos Gobierno
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.7.Dependencias");
                                    DuplicadoCarpetas(dependenciasPadreID, 5, rutaVersion, "1.7.1.Permisos Gobierno");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.7.1.Permisos Gobierno");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion
                                    #endregion

                                    #region 2.SUBCONTRATOS
                                    rutaVersion = string.Format(@"{0}\{1}\{2}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase);
                                    DuplicadoCarpetas(padreCarpetaInicial, 3, rutaVersion, "2.SUBCONTRATOS");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreSubcontratosID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.1.Subcontrato 1
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS");
                                    DuplicadoCarpetas(padreSubcontratosID, 4, rutaVersion, "2.1.Subcontrato 1");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreSubcontrato1 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.1.1.Licitación-Procura
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1");
                                    DuplicadoCarpetas(padreSubcontrato1, 5, rutaVersion, "2.1.1.Licitación-Procura");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreLicitacionProcuraID_Subcontrato1 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.1.1.1.Lista Aprobada Licitaciones
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato1, 6, rutaVersion, "2.1.1.1.Lista Aprobada Licitaciones");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.1.2.Paquete RFP
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato1, 6, rutaVersion, "2.1.1.2.Paquete RFP");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.1.3.Reunión Pre-Licitación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato1, 6, rutaVersion, "2.1.1.3.Reunión Pre-Licitación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.1.4.Evaluaciones Comerciales y Técnicas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato1, 6, rutaVersion, "2.1.1.4.Evaluaciones Comerciales y Técnicas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 2.1.2.Control Cambios
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1");
                                    DuplicadoCarpetas(padreSubcontrato1, 5, rutaVersion, "2.1.2.Control Cambios");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreControlCambiosID_Subcontrato1 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.1.2.1.Contrato Firmado
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato1, 6, rutaVersion, "2.1.2.1.Contrato Firmado");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.2.2.Alcance
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato1, 6, rutaVersion, "2.1.2.2.Alcance");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.2.3.Acuerdo Confidencialidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato1, 6, rutaVersion, "2.1.2.3.Acuerdo Confidencialidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.2.4.Fianzas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato1, 6, rutaVersion, "2.1.2.4.Fianzas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.2.5.Seguros
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato1, 6, rutaVersion, "2.1.2.5.Seguros");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.2.6.Ordenes Cambio
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato1, 6, rutaVersion, "2.1.2.6.Ordenes Cambio");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.2.7.Ordenes Trabajo Campo
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato1, 6, rutaVersion, "2.1.2.7.Ordenes Trabajo Campo");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.2.8.Estimaciones
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato1, 6, rutaVersion, "2.1.2.8.Estimaciones");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 2.1.3.Comunicación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1");
                                    DuplicadoCarpetas(padreSubcontrato1, 5, rutaVersion, "2.1.3.Comunicación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreComunicacion_Subcontrato1 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.1.3.1.Minutas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato1, 6, rutaVersion, "2.1.3.1.Minutas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.3.2.Transmittal
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato1, 6, rutaVersion, "2.1.3.2.Transmittal");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.3.3.RFIs
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato1, 6, rutaVersion, "2.1.3.3.RFIs");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.3.4.Submittal
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato1, 6, rutaVersion, "2.1.3.4.Submittal");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.3.5.Reportes
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato1, 6, rutaVersion, "2.1.3.5.Reportes");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 2.1.4.Integración Subcontratista
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1");
                                    DuplicadoCarpetas(padreSubcontrato1, 5, rutaVersion, "2.1.4.Integración Subcontratista");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.5.Cierre Contrato
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1");
                                    DuplicadoCarpetas(padreSubcontrato1, 5, rutaVersion, "2.1.5.Cierre Contrato");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreCierreContratoID_Subcontrato1 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.1.5.1.Acuerdo Terminación Construcción
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato1, 6, rutaVersion, "2.1.5.1.Acuerdo Terminación Construcción");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.5.2.Punch List
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato1, 6, rutaVersion, "2.1.5.2.Punch List");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.5.3.Lista Defectos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato1, 6, rutaVersion, "2.1.5.3.Lista Defectos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.5.4.Acta Terminación-Entrega Construcción
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato1, 6, rutaVersion, "2.1.5.4.Acta Terminación-Entrega Construcción");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.5.5.Documentación As-Built
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato1, 6, rutaVersion, "2.1.5.5.Documentación As-Built");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.5.6.Desmovilización
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato1, 6, rutaVersion, "2.1.5.6.Desmovilización");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.5.7.Lecciones Aprendidas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato1, 6, rutaVersion, "2.1.5.7.Lecciones Aprendidas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.5.8.Reporte Final
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato1, 6, rutaVersion, "2.1.5.8.Reporte Final");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.5.9.Checklist Cierre x Disciplina
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato1, 6, rutaVersion, "2.1.5.9.Checklist Cierre x Disciplina");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.5.10.Dossier Calidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato1, 6, rutaVersion, "2.1.5.10.Dossier Calidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion
                                    #endregion

                                    #region 2.2.Subcontrato 2
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS");
                                    DuplicadoCarpetas(padreSubcontratosID, 4, rutaVersion, "2.2.Subcontrato 2");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreSubcontrato2 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.2.1.Licitación-Procura
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2");
                                    DuplicadoCarpetas(padreSubcontrato2, 5, rutaVersion, "2.2.1.Licitación-Procura");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreLicitacionProcuraID_Subcontrato2 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.2.1.1.Lista Aprobada Licitaciones
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato2, 6, rutaVersion, "2.2.1.1.Lista Aprobada Licitaciones");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.1.2.Paquete RFP
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato2, 6, rutaVersion, "2.2.1.2.Paquete RFP");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.1.3.Reunión Pre-Licitación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato2, 6, rutaVersion, "2.2.1.3.Reunión Pre-Licitación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.1.4.Evaluaciones Comerciales y Técnicas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato2, 6, rutaVersion, "2.2.1.4.Evaluaciones Comerciales y Técnicas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 2.2.2.Control Cambios
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2");
                                    DuplicadoCarpetas(padreSubcontrato2, 5, rutaVersion, "2.2.2.Control Cambios");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreControlCambiosID_Subcontrato2 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.2.2.1.Contrato Firmado
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato2, 6, rutaVersion, "2.2.2.1.Contrato Firmado");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.2.2.Alcance
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato2, 6, rutaVersion, "2.2.2.2.Alcance");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.2.3.Acuerdo Confidencialidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato2, 6, rutaVersion, "2.2.2.3.Acuerdo Confidencialidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.2.4.Fianzas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato2, 6, rutaVersion, "2.2.2.4.Fianzas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.2.5.Seguros
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato2, 6, rutaVersion, "2.2.2.5.Seguros");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.2.6.Ordenes Cambio
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato2, 6, rutaVersion, "2.2.2.6.Ordenes Cambio");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.2.7.Ordenes Trabajo Campo
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato2, 6, rutaVersion, "2.2.2.7.Ordenes Trabajo Campo");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.2.8.Estimaciones
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato2, 6, rutaVersion, "2.2.2.8.Estimaciones");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 2.2.3.Comunicación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2");
                                    DuplicadoCarpetas(padreSubcontrato2, 5, rutaVersion, "2.2.3.Comunicación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreComunicacion_Subcontrato2 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.2.3.1.Minutas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato2, 6, rutaVersion, "2.2.3.1.Minutas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.3.2.Transmittal
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato2, 6, rutaVersion, "2.2.3.2.Transmittal");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.3.3.RFIs
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato2, 6, rutaVersion, "2.2.3.3.RFIs");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.3.4.Submittal
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato2, 6, rutaVersion, "2.2.3.4.Submittal");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.3.5.Reportes
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato2, 6, rutaVersion, "2.2.3.5.Reportes");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 2.2.4.Integración Subcontratista
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2");
                                    DuplicadoCarpetas(padreSubcontrato1, 5, rutaVersion, "2.2.4.Integración Subcontratista");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.5.Cierre Contrato
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2");
                                    DuplicadoCarpetas(padreSubcontrato2, 5, rutaVersion, "2.2.5.Cierre Contrato");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreCierreContratoID_Subcontrato2 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.2.5.1.Acuerdo Terminación Construcción
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato2, 6, rutaVersion, "2.2.5.1.Acuerdo Terminación Construcción");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.5.2.Punch List
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato2, 6, rutaVersion, "2.2.5.2.Punch List");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.5.3.Lista Defectos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato2, 6, rutaVersion, "2.2.5.3.Lista Defectos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.5.4.Acta Terminación-Entrega Construcción
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato2, 6, rutaVersion, "2.2.5.4.Acta Terminación-Entrega Construcción");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.5.5.Documentación As-Built
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato2, 6, rutaVersion, "2.2.5.5.Documentación As-Built");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.5.6.Desmovilización
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato2, 6, rutaVersion, "2.2.5.6.Desmovilización");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.5.7.Lecciones Aprendidas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato2, 6, rutaVersion, "2.2.5.7.Lecciones Aprendidas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.5.8.Reporte Final
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato2, 6, rutaVersion, "2.2.5.8.Reporte Final");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.5.9.Checklist Cierre x Disciplina
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato2, 6, rutaVersion, "2.2.5.9.Checklist Cierre x Disciplina");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.5.10.Dossier Calidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato2, 6, rutaVersion, "2.2.5.10.Dossier Calidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion
                                    #endregion

                                    #region 2.3.Subcontrato 3
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS");
                                    DuplicadoCarpetas(padreSubcontratosID, 4, rutaVersion, "2.3.Subcontrato 3");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreSubcontrato3 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.3.1.Licitación-Procura
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3");
                                    DuplicadoCarpetas(padreSubcontrato3, 5, rutaVersion, "2.3.1.Licitación-Procura");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreLicitacionProcuraID_Subcontrato3 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.3.1.1.Lista Aprobada Licitaciones
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato3, 6, rutaVersion, "2.3.1.1.Lista Aprobada Licitaciones");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.1.2.Paquete RFP
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato3, 6, rutaVersion, "2.3.1.2.Paquete RFP");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.1.3.Reunión Pre-Licitación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato3, 6, rutaVersion, "2.3.1.3.Reunión Pre-Licitación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.1.4.Evaluaciones Comerciales y Técnicas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato3, 6, rutaVersion, "2.3.1.4.Evaluaciones Comerciales y Técnicas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 2.3.2.Control Cambios
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3");
                                    DuplicadoCarpetas(padreSubcontrato3, 5, rutaVersion, "2.3.2.Control Cambios");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreControlCambiosID_Subcontrato3 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.3.2.1.Contrato Firmado
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato3, 6, rutaVersion, "2.3.2.1.Contrato Firmado");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.2.3.Alcance
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato3, 6, rutaVersion, "2.3.2.3.Alcance");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.2.3.Acuerdo Confidencialidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato3, 6, rutaVersion, "2.3.2.3.Acuerdo Confidencialidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.2.4.Fianzas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato3, 6, rutaVersion, "2.3.2.4.Fianzas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.2.5.Seguros
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato3, 6, rutaVersion, "2.3.2.5.Seguros");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.2.6.Ordenes Cambio
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato3, 6, rutaVersion, "2.3.2.6.Ordenes Cambio");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.2.7.Ordenes Trabajo Campo
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato3, 6, rutaVersion, "2.3.2.7.Ordenes Trabajo Campo");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.2.8.Estimaciones
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato3, 6, rutaVersion, "2.3.2.8.Estimaciones");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 2.3.3.Comunicación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3");
                                    DuplicadoCarpetas(padreSubcontrato3, 5, rutaVersion, "2.3.3.Comunicación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreComunicacion_Subcontrato3 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.3.3.1.Minutas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato3, 6, rutaVersion, "2.3.3.1.Minutas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.3.2.Transmittal
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato3, 6, rutaVersion, "2.3.3.2.Transmittal");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.3.3.RFIs
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato3, 6, rutaVersion, "2.3.3.3.RFIs");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.3.4.Submittal
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato3, 6, rutaVersion, "2.3.3.4.Submittal");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.3.5.Reportes
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato3, 6, rutaVersion, "2.3.3.5.Reportes");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 2.3.4.Integración Subcontratista
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3");
                                    DuplicadoCarpetas(padreSubcontrato1, 5, rutaVersion, "2.3.4.Integración Subcontratista");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.5.Cierre Contrato
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3");
                                    DuplicadoCarpetas(padreSubcontrato3, 5, rutaVersion, "2.3.5.Cierre Contrato");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreCierreContratoID_Subcontrato3 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.3.5.1.Acuerdo Terminación Construcción
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato3, 6, rutaVersion, "2.3.5.1.Acuerdo Terminación Construcción");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.5.2.Punch List
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato3, 6, rutaVersion, "2.3.5.2.Punch List");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.5.3.Lista Defectos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato3, 6, rutaVersion, "2.3.5.3.Lista Defectos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.5.4.Acta Terminación-Entrega Construcción
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato3, 6, rutaVersion, "2.3.5.4.Acta Terminación-Entrega Construcción");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.5.5.Documentación As-Built
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato3, 6, rutaVersion, "2.3.5.5.Documentación As-Built");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.5.6.Desmovilización
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato3, 6, rutaVersion, "2.3.5.6.Desmovilización");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.5.7.Lecciones Aprendidas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato3, 6, rutaVersion, "2.3.5.7.Lecciones Aprendidas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.5.8.Reporte Final
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato3, 6, rutaVersion, "2.3.5.8.Reporte Final");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.5.9.Checklist Cierre x Disciplina
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato3, 6, rutaVersion, "2.3.5.9.Checklist Cierre x Disciplina");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.5.10.Dossier Calidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato3, 6, rutaVersion, "2.3.5.10.Dossier Calidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion
                                    #endregion
                                    #endregion

                                    #region 3.GERENCIA
                                    rutaVersion = string.Format(@"{0}\{1}\{2}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase);
                                    DuplicadoCarpetas(padreCarpetaInicial, 3, rutaVersion, "3.GERENCIA");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreGerenciaID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.1.Dirección de Proyecto
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.1.Dirección de Proyecto");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreDireccionProyectoID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.1.1.Plan de Dirección
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.1.Dirección de Proyecto");
                                    DuplicadoCarpetas(padreDireccionProyectoID, 5, rutaVersion, "3.1.1.Plan de Dirección");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.1.2.Acta Inicio Obra
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.1.Dirección de Proyecto");
                                    DuplicadoCarpetas(padreDireccionProyectoID, 5, rutaVersion, "3.1.2.Acta Inicio Obra");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.1.3.MAC
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.1.Dirección de Proyecto");
                                    DuplicadoCarpetas(padreDireccionProyectoID, 5, rutaVersion, "3.1.3.MAC");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.2.Seguridad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.2.Seguridad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreSeguridadID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.2.1.Plan de Seguridad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.2.Seguridad");
                                    DuplicadoCarpetas(padreSeguridadID, 5, rutaVersion, "3.2.1.Plan de Seguridad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.2.2.IDS
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.2.Seguridad");
                                    DuplicadoCarpetas(padreSeguridadID, 5, rutaVersion, "3.2.2.IDS");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.2.3.Análisis Seguridad x Constructabilidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.2.Seguridad");
                                    DuplicadoCarpetas(padreSeguridadID, 5, rutaVersion, "3.2.3.Análisis Seguridad x Constructabilidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.3.Calidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.3.Calidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreCalidadID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.3.1.Plan de Calidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.3.Calidad");
                                    DuplicadoCarpetas(padreCalidadID, 5, rutaVersion, "3.3.1.Plan de Calidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.3.2.Formatos Calidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.3.Calidad");
                                    DuplicadoCarpetas(padreCalidadID, 5, rutaVersion, "3.3.2.Formatos Calidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.3.3.Acreditación Laboratorios
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.3.Calidad");
                                    DuplicadoCarpetas(padreCalidadID, 5, rutaVersion, "3.3.3.Acreditación Laboratorios");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.3.4.Respaldo Topográfico
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.3.Calidad");
                                    DuplicadoCarpetas(padreCalidadID, 5, rutaVersion, "3.3.4.Respaldo Topográfico");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.3.5.Calibración Equipos de Topografía
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.3.Calidad");
                                    DuplicadoCarpetas(padreCalidadID, 5, rutaVersion, "3.3.5.Calibración Equipos de Topografía");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.3.6.Pruebas Compactación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.3.Calidad");
                                    DuplicadoCarpetas(padreCalidadID, 5, rutaVersion, "3.3.6.Pruebas Compactación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.3.7.Pruebas Resistencia Materiales
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.3.Calidad");
                                    DuplicadoCarpetas(padreCalidadID, 5, rutaVersion, "3.3.7.Pruebas Resistencia Materiales");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.3.8.Calidad Agregados
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.3.Calidad");
                                    DuplicadoCarpetas(padreCalidadID, 5, rutaVersion, "3.3.8.Calidad Agregados");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.3.9.Calidad Materiales
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.3.Calidad");
                                    DuplicadoCarpetas(padreCalidadID, 5, rutaVersion, "3.3.9.Calidad Materiales");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.3.10.Otros Reportes
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.3.Calidad");
                                    DuplicadoCarpetas(padreCalidadID, 5, rutaVersion, "3.3.10.Otros Reportes");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.4.Programación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.4.Programación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreProgramacionID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.4.1.Plan de Programación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.4.Programación");
                                    DuplicadoCarpetas(padreProgramacionID, 5, rutaVersion, "3.4.1.Plan de Programación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.4.2.Cronograma
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.4.Programación");
                                    DuplicadoCarpetas(padreProgramacionID, 5, rutaVersion, "3.4.2.Cronograma");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.4.3.Línea Base
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.4.Programación");
                                    DuplicadoCarpetas(padreProgramacionID, 5, rutaVersion, "3.4.3.Línea Base");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.4.4.Programa a 2 Semanas Adelante
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.4.Programación");
                                    DuplicadoCarpetas(padreProgramacionID, 5, rutaVersion, "3.4.4.Programa a 2 Semanas Adelante");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.4.5.Programa Nivel 3 Subcontratistas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.4.Programación");
                                    DuplicadoCarpetas(padreProgramacionID, 5, rutaVersion, "3.4.5.Programa Nivel 3 Subcontratistas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.4.6.Archivo Seguimiento
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.4.Programación");
                                    DuplicadoCarpetas(padreProgramacionID, 5, rutaVersion, "3.4.6.Archivo Seguimiento");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.4.7.Análisis Ruta Crítica
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.4.Programación");
                                    DuplicadoCarpetas(padreProgramacionID, 5, rutaVersion, "3.4.7.Análisis Ruta Crítica");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.4.8.Curva S
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.4.Programación");
                                    DuplicadoCarpetas(padreProgramacionID, 5, rutaVersion, "3.4.8.Curva S");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.4.9.Reuniones Seguimiento-Análisis Avance
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.4.Programación");
                                    DuplicadoCarpetas(padreProgramacionID, 5, rutaVersion, "3.4.9.Reuniones Seguimiento-Análisis Avance");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.5.Constructabilidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.5.Constructabilidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreConstructabilidadID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.5.1.Plan de Constructabilidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.5.Constructabilidad");
                                    DuplicadoCarpetas(padreConstructabilidadID, 5, rutaVersion, "3.5.1.Plan de Constructabilidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.5.2.Constructabilidad del Proyecto
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.5.Constructabilidad");
                                    DuplicadoCarpetas(padreConstructabilidadID, 5, rutaVersion, "3.5.2.Constructabilidad del Proyecto");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.5.3.Actualización Semanal Constructabilidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.5.Constructabilidad");
                                    DuplicadoCarpetas(padreConstructabilidadID, 5, rutaVersion, "3.5.3.Actualización Semanal Constructabilidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.6.Control Documentos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.6.Control Documentos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreControlDocumentosID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.6.1.Plan Control Documentos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.6.Control Documentos");
                                    DuplicadoCarpetas(padreControlDocumentosID, 5, rutaVersion, "3.6.1.Plan Control Documentos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.6.2.Matriz Codificación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.6.Control Documentos");
                                    DuplicadoCarpetas(padreControlDocumentosID, 5, rutaVersion, "3.6.2.Matriz Codificación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.6.3.Lista Maestra Documentos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.6.Control Documentos");
                                    DuplicadoCarpetas(padreControlDocumentosID, 5, rutaVersion, "3.6.3.Lista Maestra Documentos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.6.4.Manuales Operación y Mantenimiento
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.6.Control Documentos");
                                    DuplicadoCarpetas(padreControlDocumentosID, 5, rutaVersion, "3.6.4.Manuales Operación y Mantenimiento");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.7.Comunicación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.7.Comunicación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreComunicacionID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.7.1.Comunicación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.7.Comunicación");
                                    DuplicadoCarpetas(padreComunicacionID, 5, rutaVersion, "3.7.1.Comunicación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.7.2.Directorio Proyecto
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.7.Comunicación");
                                    DuplicadoCarpetas(padreComunicacionID, 5, rutaVersion, "3.7.2.Directorio Proyecto");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.7.3.Matriz Comunicación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.7.Comunicación");
                                    DuplicadoCarpetas(padreComunicacionID, 5, rutaVersion, "3.7.3.Matriz Comunicación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.7.4.Reporte Ejecutivo
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.7.Comunicación");
                                    DuplicadoCarpetas(padreComunicacionID, 5, rutaVersion, "3.7.4.Reporte Ejecutivo");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.7.5.Organigrama Equipo Proyecto
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.7.Comunicación");
                                    DuplicadoCarpetas(padreComunicacionID, 5, rutaVersion, "3.7.5.Organigrama Equipo Proyecto");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.7.6.Pizarrón Proyecto
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.7.Comunicación");
                                    DuplicadoCarpetas(padreComunicacionID, 5, rutaVersion, "3.7.6.Pizarrón Proyecto");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.7.7.Reporte Fotográfico
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.7.Comunicación");
                                    DuplicadoCarpetas(padreComunicacionID, 5, rutaVersion, "3.7.7.Reporte Fotográfico");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.7.8.Relación Reuniones
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.7.Comunicación");
                                    DuplicadoCarpetas(padreComunicacionID, 5, rutaVersion, "3.7.8.Relación Reuniones");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.7.9.Bitácora Obra Cliente
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.7.Comunicación");
                                    DuplicadoCarpetas(padreComunicacionID, 5, rutaVersion, "3.7.9.Bitácora Obra Cliente");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.8.Control Cambios y Costos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.8.Control Cambios y Costos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreControlCambiosCostosID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.8.1.Plan Control de Cambios
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.8.Control Cambios y Costos");
                                    DuplicadoCarpetas(padreControlCambiosCostosID, 5, rutaVersion, "3.8.1.Plan Control de Cambios");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.8.2.Relación Ordenes Cambio
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.8.Control Cambios y Costos");
                                    DuplicadoCarpetas(padreControlCambiosCostosID, 5, rutaVersion, "3.8.2.Relación Ordenes Cambio");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.9.Roles y Responsabilidades
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.9.Roles y Responsabilidades");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreRolesResponsabilidadesID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.9.1.Plan Roles y Responsabilidades
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.9.Roles y Responsabilidades");
                                    DuplicadoCarpetas(padreRolesResponsabilidadesID, 5, rutaVersion, "3.9.1.Plan Roles y Responsabilidades");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.9.2.Roles y Responsabilidades
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.9.Roles y Responsabilidades");
                                    DuplicadoCarpetas(padreRolesResponsabilidadesID, 5, rutaVersion, "3.9.2.Roles y Responsabilidades");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.9.3.Matriz CARS
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.9.Roles y Responsabilidades");
                                    DuplicadoCarpetas(padreRolesResponsabilidadesID, 5, rutaVersion, "3.9.3.Matriz CARS");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.9.4.Evaluación Gerente Proyecto
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.9.Roles y Responsabilidades");
                                    DuplicadoCarpetas(padreRolesResponsabilidadesID, 5, rutaVersion, "3.9.4.Evaluación Gerente Proyecto");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.9.5.Evaluación Desempeño Equipo Proyecto
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.9.Roles y Responsabilidades");
                                    DuplicadoCarpetas(padreRolesResponsabilidadesID, 5, rutaVersion, "3.9.5.Evaluación Desempeño Equipo Proyecto");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.10.Suministros
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.10.Suministros");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreSuministrosID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.10.1.Plan Suministros
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.10.Suministros");
                                    DuplicadoCarpetas(padreSuministrosID, 5, rutaVersion, "3.10.1.Plan Suministros");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "3.10.1.Plan Suministros");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.10.2.Contrato Renta Maquinaria y Equipo
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.10.Suministros");
                                    DuplicadoCarpetas(padreSuministrosID, 5, rutaVersion, "3.10.2.Contrato Renta Maquinaria y Equipo");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "3.10.2.Contrato Renta Maquinaria y Equipo");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.10.3.Validación Volúmenes Contractuales
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.10.Suministros");
                                    DuplicadoCarpetas(padreSuministrosID, 5, rutaVersion, "3.10.3.Validación Volúmenes Contractuales");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "3.10.3.Validación Volúmenes Contractuales");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreValidacionVolumnesContractualesID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.10.3.1.Bancos Nivel Autorizados
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.10.Suministros", "3.10.3.Validación Volúmenes Contractuales");
                                    DuplicadoCarpetas(padreValidacionVolumnesContractualesID, 6, rutaVersion, "3.10.3.1.Bancos Nivel Autorizados");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "3.10.3.1.Bancos Nivel Autorizados");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.10.3.2.Validación Volúmenes
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.10.Suministros", "3.10.3.Validación Volúmenes Contractuales");
                                    DuplicadoCarpetas(padreValidacionVolumnesContractualesID, 6, rutaVersion, "3.10.3.2.Validación Volúmenes");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "3.10.3.2.Validación Volúmenes");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.10.4.Matriz Suministros
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.10.Suministros");
                                    DuplicadoCarpetas(padreSuministrosID, 5, rutaVersion, "3.10.4.Matriz Suministros");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "3.10.4.Matriz Suministros");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.10.5.Evaluación Plan Suministros
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.10.Suministros");
                                    DuplicadoCarpetas(padreSuministrosID, 5, rutaVersion, "3.10.5.Evaluación Plan Suministros");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "3.10.5.Evaluación Plan Suministros");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.11.Movilización
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.11.Movilización");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreMovilizacionID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.11.1.Plan Movilización
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.11.Movilización");
                                    DuplicadoCarpetas(padreMovilizacionID, 5, rutaVersion, "3.11.1.Plan Movilización");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.11.2.Checklist Movilización
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.11.Movilización");
                                    DuplicadoCarpetas(padreMovilizacionID, 5, rutaVersion, "3.11.2.Checklist Movilización");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.12.Ingeniería
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.12.Ingeniería");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreIngenieria = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.12.1.Plan Ingeniería
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.12.Ingeniería");
                                    DuplicadoCarpetas(padreIngenieria, 5, rutaVersion, "3.12.1.Plan Ingeniería");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.12.2.Listados Ingeniería
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.12.Ingeniería");
                                    DuplicadoCarpetas(padreIngenieria, 5, rutaVersion, "3.12.2.Listados Ingeniería");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.12.3.Especificaciones
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.12.Ingeniería");
                                    DuplicadoCarpetas(padreIngenieria, 5, rutaVersion, "3.12.3.Especificaciones");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.12.4.Memorias Cálculo
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.12.Ingeniería");
                                    DuplicadoCarpetas(padreIngenieria, 5, rutaVersion, "3.12.4.Memorias Cálculo");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.12.5.Dibujos de Referencia
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.12.Ingeniería");
                                    DuplicadoCarpetas(padreIngenieria, 5, rutaVersion, "3.12.5.Dibujos de Referencia");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.12.6.Dibujos As-Built
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.12.Ingeniería");
                                    DuplicadoCarpetas(padreIngenieria, 5, rutaVersion, "3.12.6.Dibujos As-Built");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.13.Gestión de Riesgos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.13.Gestión de Riesgos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreGestionRiesgos = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.13.1.Plan Gestión de Riesgos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.13.Gestión de Riesgos");
                                    DuplicadoCarpetas(padreGestionRiesgos, 5, rutaVersion, "3.13.1.Plan Gestión de Riesgos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.13.2.Matriz Riesgos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.13.Gestión de Riesgos");
                                    DuplicadoCarpetas(padreGestionRiesgos, 5, rutaVersion, "3.13.2.Matriz Riesgos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.14.Integración Subcontratistas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.14.Integración Subcontratistas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreIntegracionSubcontratistasID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.14.1.Plan Integración Subcontratista
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.14.Integración Subcontratistas");
                                    DuplicadoCarpetas(padreIntegracionSubcontratistasID, 5, rutaVersion, "3.14.1.Plan Integración Subcontratista");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.14.2.Checklist Integración Subcontratista
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.14.Integración Subcontratistas");
                                    DuplicadoCarpetas(padreIntegracionSubcontratistasID, 5, rutaVersion, "3.14.2.Checklist Integración Subcontratista");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.14.3.Responsabilidades Residente Subcontratista
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.14.Integración Subcontratistas");
                                    DuplicadoCarpetas(padreIntegracionSubcontratistasID, 5, rutaVersion, "3.14.3.Responsabilidades Residente Subcontratista");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.14.4.Evaluaciones Subcontratistas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.14.Integración Subcontratistas");
                                    DuplicadoCarpetas(padreIntegracionSubcontratistasID, 5, rutaVersion, "3.14.4.Evaluaciones Subcontratistas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.14.5.Relación Evaluaciones Subcontratistas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.14.Integración Subcontratistas");
                                    DuplicadoCarpetas(padreIntegracionSubcontratistasID, 5, rutaVersion, "3.14.5.Relación Evaluaciones Subcontratistas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.15.Cierre Proyecto
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.15.Cierre Proyecto");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreCierreProyectoID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.15.1.Plan Cierre Proyecto
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.15.Cierre Proyecto");
                                    DuplicadoCarpetas(padreCierreProyectoID, 5, rutaVersion, "3.15.1.Plan Cierre Proyecto");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.15.2.Acuerdo Terminación Construcción
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.15.Cierre Proyecto");
                                    DuplicadoCarpetas(padreCierreProyectoID, 5, rutaVersion, "3.15.2.Acuerdo Terminación Construcción");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.15.3.Punch Lists
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.15.Cierre Proyecto");
                                    DuplicadoCarpetas(padreCierreProyectoID, 5, rutaVersion, "3.15.3.Punch Lists");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.15.4.Lista Defectos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.15.Cierre Proyecto");
                                    DuplicadoCarpetas(padreCierreProyectoID, 5, rutaVersion, "3.15.4.Lista Defectos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.15.5.Acta Terminación-Entrega Construcción
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.15.Cierre Proyecto");
                                    DuplicadoCarpetas(padreCierreProyectoID, 5, rutaVersion, "3.15.5.Acta Terminación-Entrega Construcción");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.15.6.Documentación As-Built
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.15.Cierre Proyecto");
                                    DuplicadoCarpetas(padreCierreProyectoID, 5, rutaVersion, "3.15.6.Documentación As-Built");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.15.7.Desmovilización
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.15.Cierre Proyecto");
                                    DuplicadoCarpetas(padreCierreProyectoID, 5, rutaVersion, "3.15.7.Desmovilización");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.15.8.Lecciones Aprendidas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.15.Cierre Proyecto");
                                    DuplicadoCarpetas(padreCierreProyectoID, 5, rutaVersion, "3.15.8.Lecciones Aprendidas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.15.9.Reporte Final
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.15.Cierre Proyecto");
                                    DuplicadoCarpetas(padreCierreProyectoID, 5, rutaVersion, "3.15.9.Reporte Final");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.15.10.Checklist Cierre x Disciplina
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.15.Cierre Proyecto");
                                    DuplicadoCarpetas(padreCierreProyectoID, 5, rutaVersion, "3.15.10.Checklist Cierre x Disciplina");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.15.11.Dossier Calidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.15.Cierre Proyecto");
                                    DuplicadoCarpetas(padreCierreProyectoID, 5, rutaVersion, "3.15.11.Dossier Calidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.16.Intervención Áreas Operativas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.16.Intervención Áreas Operativas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreIntervencionAreasOperativasID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.16.1.Plan Intervención Áreas Operativas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.16.Intervención Áreas Operativas");
                                    DuplicadoCarpetas(padreIntervencionAreasOperativasID, 5, rutaVersion, "3.16.1.Plan Intervención Áreas Operativas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.16.2.Calificación de Instalación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.16.Intervención Áreas Operativas");
                                    DuplicadoCarpetas(padreIntervencionAreasOperativasID, 5, rutaVersion, "3.16.2.Calificación de Instalación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.16.3.Protocolo Intervención Áreas Operativas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.16.Intervención Áreas Operativas");
                                    DuplicadoCarpetas(padreIntervencionAreasOperativasID, 5, rutaVersion, "3.16.3.Protocolo Intervención Áreas Operativas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion
                                    #endregion
                                }
                                break;
                            case (int)EmpresaEnum.Colombia:
                                {
                                    #region SE CREAN CARPETAS INICIALES
                                    tblFM_Archivo objArchivo = new tblFM_Archivo();
                                    rutaVersion = string.Format(@"2022\{0}", nombreDivision);
                                    DuplicadoCarpetas(objParamsDTO.padreID, 2, rutaVersion, objParamsDTO.nombreCarpetaBase);
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreCarpetaInicial = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();
                                    #endregion

                                    #region 1.CLIENTE
                                    rutaVersion = string.Format(@"{0}\{1}\{2}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase);
                                    DuplicadoCarpetas(padreCarpetaInicial, 3, rutaVersion, "1.CLIENTE");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreClienteID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 1.1.Presupuestos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE");
                                    DuplicadoCarpetas(padreClienteID, 4, rutaVersion, "1.1.Presupuestos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long presupuestosPadreID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 1.1.1.Presupuesto
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.1.Presupuestos");
                                    DuplicadoCarpetas(presupuestosPadreID, 5, rutaVersion, "1.1.1.Presupuesto");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.1.1.Presupuesto");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.1.2.Mano de Obra
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.1.Presupuestos");
                                    DuplicadoCarpetas(presupuestosPadreID, 5, rutaVersion, "1.1.2.Mano de Obra");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.1.2.Mano de Obra");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.1.3.Auxiliares
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.1.Presupuestos");
                                    DuplicadoCarpetas(presupuestosPadreID, 5, rutaVersion, "1.1.3.Auxiliares");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.1.3.Auxiliares");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.1.4.Desglose Conceptos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.1.Presupuestos");
                                    DuplicadoCarpetas(presupuestosPadreID, 5, rutaVersion, "1.1.4.Desglose Conceptos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.1.4.Desglose Conceptos");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.1.5.Explosión Insumos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.1.Presupuestos");
                                    DuplicadoCarpetas(presupuestosPadreID, 5, rutaVersion, "1.1.5.Explosión Insumos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.1.5.Explosión Insumos");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.1.6.Análisis Precios Unitarios
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.1.Presupuestos");
                                    DuplicadoCarpetas(presupuestosPadreID, 5, rutaVersion, "1.1.6.Análisis Precios Unitarios");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.1.6.Análisis Precios Unitarios");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.1.7.Análisis Costos Horarios
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.1.Presupuestos");
                                    DuplicadoCarpetas(presupuestosPadreID, 5, rutaVersion, "1.1.7.Análisis Costos Horarios");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.1.7.Análisis Costos Horarios");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.1.8.Análisis Indirectos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.1.Presupuestos");
                                    DuplicadoCarpetas(presupuestosPadreID, 5, rutaVersion, "1.1.8.Análisis Indirectos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.1.8.Análisis Indirectos");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.1.9.Programa Obra
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.1.Presupuestos");
                                    DuplicadoCarpetas(presupuestosPadreID, 5, rutaVersion, "1.1.9.Programa Obra");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.1.9.Programa Obra");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.1.10.Precios Fuera de Presupuestos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.1.Presupuestos");
                                    DuplicadoCarpetas(presupuestosPadreID, 5, rutaVersion, "1.1.10.Precios Fuera de Presupuestos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.1.10.Precios Fuera de Presupuestos");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 1.2.Licitación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE");
                                    DuplicadoCarpetas(padreClienteID, 4, rutaVersion, "1.2.Licitación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long licitacionPadreID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 1.2.1.Acta Visita Obra
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.2.Licitación");
                                    DuplicadoCarpetas(licitacionPadreID, 5, rutaVersion, "1.2.1.Acta Visita Obra");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.2.1.Acta Visita Obra");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.2.2.Junta Aclaraciones
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.2.Licitación");
                                    DuplicadoCarpetas(licitacionPadreID, 5, rutaVersion, "1.2.2.Junta Aclaraciones");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.2.2.Junta Aclaraciones");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.2.3.Reporte Visita Obra
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.2.Licitación");
                                    DuplicadoCarpetas(licitacionPadreID, 5, rutaVersion, "1.2.3.Reporte Visita Obra");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.2.3.Reporte Visita Obra");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.2.4.Bases-Anexos Concurso
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.2.Licitación");
                                    DuplicadoCarpetas(licitacionPadreID, 5, rutaVersion, "1.2.4.Bases-Anexos Concurso");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.2.4.Bases-Anexos Concurso");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 1.3.Cotizaciones Principales
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE");
                                    DuplicadoCarpetas(padreClienteID, 4, rutaVersion, "1.3.Cotizaciones Principales");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.3.Cotizaciones Principales");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.4.Junta Arranque
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE");
                                    DuplicadoCarpetas(padreClienteID, 4, rutaVersion, "1.4.Junta Arranque");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long juntaArranquePadreID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 1.4.1.Cuadro Facultamiento
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.4.Junta Arranque");
                                    DuplicadoCarpetas(juntaArranquePadreID, 5, rutaVersion, "1.4.1.Cuadro Facultamiento");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.4.1.Cuadro Facultamiento");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.4.2.Minuta y Lista Asistencia
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.4.Junta Arranque");
                                    DuplicadoCarpetas(juntaArranquePadreID, 5, rutaVersion, "1.4.2.Minuta y Lista Asistencia");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.4.2.Minuta y Lista Asistencia");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.4.3.Solicitud Equipo
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.4.Junta Arranque");
                                    DuplicadoCarpetas(juntaArranquePadreID, 5, rutaVersion, "1.4.3.Solicitud Equipo");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.4.3.Solicitud Equipo");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.4.4.Plantilla Personal
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.4.Junta Arranque");
                                    DuplicadoCarpetas(juntaArranquePadreID, 5, rutaVersion, "1.4.4.Plantilla Personal");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.4.4.Plantilla Personal");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 1.5.Contrato Cliente
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE");
                                    DuplicadoCarpetas(padreClienteID, 4, rutaVersion, "1.5.Contrato Cliente");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long contratoClientePadreID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 1.5.1.Contrato Firmado
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.5.Contrato Cliente");
                                    DuplicadoCarpetas(contratoClientePadreID, 5, rutaVersion, "1.5.1.Contrato Firmado");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.5.2.Alcance
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.5.Contrato Cliente");
                                    DuplicadoCarpetas(contratoClientePadreID, 5, rutaVersion, "1.5.2.Alcance");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.5.3.Fianzas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.5.Contrato Cliente");
                                    DuplicadoCarpetas(contratoClientePadreID, 5, rutaVersion, "1.5.3.Fianzas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.5.4.Seguros
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.5.Contrato Cliente");
                                    DuplicadoCarpetas(contratoClientePadreID, 5, rutaVersion, "1.5.4.Seguros");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.5.5.Ordenes Cambio
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.5.Contrato Cliente");
                                    DuplicadoCarpetas(contratoClientePadreID, 5, rutaVersion, "1.5.5.Ordenes Cambio");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.5.6.Estimaciones
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.5.Contrato Cliente");
                                    DuplicadoCarpetas(contratoClientePadreID, 5, rutaVersion, "1.5.6.Estimaciones");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 1.6.Comunicación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE");
                                    DuplicadoCarpetas(padreClienteID, 4, rutaVersion, "1.6.Comunicación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long comunicacionPadreID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 1.6.1.Minutas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.6.Comunicación");
                                    DuplicadoCarpetas(comunicacionPadreID, 5, rutaVersion, "1.6.1.Minutas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.6.1.Minutas");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.6.2.Transmittal
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.6.Comunicación");
                                    DuplicadoCarpetas(comunicacionPadreID, 5, rutaVersion, "1.6.2.Transmittal");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.6.2.Transmittal");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.6.3.RFIs
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.6.Comunicación");
                                    DuplicadoCarpetas(comunicacionPadreID, 5, rutaVersion, "1.6.3.RFIs");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.6.3.RFIs");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.6.4.Submittal
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.6.Comunicación");
                                    DuplicadoCarpetas(comunicacionPadreID, 5, rutaVersion, "1.6.4.Submittal");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.6.4.Submittal");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 1.7.Dependencias
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE");
                                    DuplicadoCarpetas(padreClienteID, 4, rutaVersion, "1.7.Dependencias");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long dependenciasPadreID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 1.7.1.Permisos Gobierno
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.7.Dependencias");
                                    DuplicadoCarpetas(dependenciasPadreID, 5, rutaVersion, "1.7.1.Permisos Gobierno");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.7.1.Permisos Gobierno");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion
                                    #endregion

                                    #region 2.SUBCONTRATOS
                                    rutaVersion = string.Format(@"{0}\{1}\{2}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase);
                                    DuplicadoCarpetas(padreCarpetaInicial, 3, rutaVersion, "2.SUBCONTRATOS");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreSubcontratosID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.1.Subcontrato 1
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS");
                                    DuplicadoCarpetas(padreSubcontratosID, 4, rutaVersion, "2.1.Subcontrato 1");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreSubcontrato1 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.1.1.Licitación-Procura
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1");
                                    DuplicadoCarpetas(padreSubcontrato1, 5, rutaVersion, "2.1.1.Licitación-Procura");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreLicitacionProcuraID_Subcontrato1 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.1.1.1.Lista Aprobada Licitaciones
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato1, 6, rutaVersion, "2.1.1.1.Lista Aprobada Licitaciones");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.1.2.Paquete RFP
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato1, 6, rutaVersion, "2.1.1.2.Paquete RFP");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.1.3.Reunión Pre-Licitación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato1, 6, rutaVersion, "2.1.1.3.Reunión Pre-Licitación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.1.4.Evaluaciones Comerciales y Técnicas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato1, 6, rutaVersion, "2.1.1.4.Evaluaciones Comerciales y Técnicas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 2.1.2.Control Cambios
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1");
                                    DuplicadoCarpetas(padreSubcontrato1, 5, rutaVersion, "2.1.2.Control Cambios");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreControlCambiosID_Subcontrato1 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.1.2.1.Contrato Firmado
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato1, 6, rutaVersion, "2.1.2.1.Contrato Firmado");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.2.2.Alcance
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato1, 6, rutaVersion, "2.1.2.2.Alcance");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.2.3.Acuerdo Confidencialidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato1, 6, rutaVersion, "2.1.2.3.Acuerdo Confidencialidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.2.4.Fianzas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato1, 6, rutaVersion, "2.1.2.4.Fianzas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.2.5.Seguros
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato1, 6, rutaVersion, "2.1.2.5.Seguros");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.2.6.Ordenes Cambio
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato1, 6, rutaVersion, "2.1.2.6.Ordenes Cambio");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.2.7.Ordenes Trabajo Campo
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato1, 6, rutaVersion, "2.1.2.7.Ordenes Trabajo Campo");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.2.8.Estimaciones
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato1, 6, rutaVersion, "2.1.2.8.Estimaciones");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 2.1.3.Comunicación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1");
                                    DuplicadoCarpetas(padreSubcontrato1, 5, rutaVersion, "2.1.3.Comunicación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreComunicacion_Subcontrato1 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.1.3.1.Minutas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato1, 6, rutaVersion, "2.1.3.1.Minutas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.3.2.Transmittal
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato1, 6, rutaVersion, "2.1.3.2.Transmittal");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.3.3.RFIs
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato1, 6, rutaVersion, "2.1.3.3.RFIs");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.3.4.Submittal
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato1, 6, rutaVersion, "2.1.3.4.Submittal");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.3.5.Reportes
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato1, 6, rutaVersion, "2.1.3.5.Reportes");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 2.1.4.Integración Subcontratista
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1");
                                    DuplicadoCarpetas(padreSubcontrato1, 5, rutaVersion, "2.1.4.Integración Subcontratista");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.5.Cierre Contrato
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1");
                                    DuplicadoCarpetas(padreSubcontrato1, 5, rutaVersion, "2.1.5.Cierre Contrato");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreCierreContratoID_Subcontrato1 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.1.5.1.Acuerdo Terminación Construcción
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato1, 6, rutaVersion, "2.1.5.1.Acuerdo Terminación Construcción");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.5.2.Punch List
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato1, 6, rutaVersion, "2.1.5.2.Punch List");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.5.3.Lista Defectos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato1, 6, rutaVersion, "2.1.5.3.Lista Defectos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.5.4.Acta Terminación-Entrega Construcción
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato1, 6, rutaVersion, "2.1.5.4.Acta Terminación-Entrega Construcción");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.5.5.Documentación As-Built
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato1, 6, rutaVersion, "2.1.5.5.Documentación As-Built");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.5.6.Desmovilización
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato1, 6, rutaVersion, "2.1.5.6.Desmovilización");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.5.7.Lecciones Aprendidas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato1, 6, rutaVersion, "2.1.5.7.Lecciones Aprendidas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.5.8.Reporte Final
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato1, 6, rutaVersion, "2.1.5.8.Reporte Final");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.5.9.Checklist Cierre x Disciplina
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato1, 6, rutaVersion, "2.1.5.9.Checklist Cierre x Disciplina");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.5.10.Dossier Calidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato1, 6, rutaVersion, "2.1.5.10.Dossier Calidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion
                                    #endregion

                                    #region 2.2.Subcontrato 2
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS");
                                    DuplicadoCarpetas(padreSubcontratosID, 4, rutaVersion, "2.2.Subcontrato 2");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreSubcontrato2 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.2.1.Licitación-Procura
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2");
                                    DuplicadoCarpetas(padreSubcontrato2, 5, rutaVersion, "2.2.1.Licitación-Procura");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreLicitacionProcuraID_Subcontrato2 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.2.1.1.Lista Aprobada Licitaciones
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato2, 6, rutaVersion, "2.2.1.1.Lista Aprobada Licitaciones");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.1.2.Paquete RFP
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato2, 6, rutaVersion, "2.2.1.2.Paquete RFP");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.1.3.Reunión Pre-Licitación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato2, 6, rutaVersion, "2.2.1.3.Reunión Pre-Licitación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.1.4.Evaluaciones Comerciales y Técnicas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato2, 6, rutaVersion, "2.2.1.4.Evaluaciones Comerciales y Técnicas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 2.2.2.Control Cambios
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2");
                                    DuplicadoCarpetas(padreSubcontrato2, 5, rutaVersion, "2.2.2.Control Cambios");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreControlCambiosID_Subcontrato2 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.2.2.1.Contrato Firmado
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato2, 6, rutaVersion, "2.2.2.1.Contrato Firmado");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.2.2.Alcance
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato2, 6, rutaVersion, "2.2.2.2.Alcance");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.2.3.Acuerdo Confidencialidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato2, 6, rutaVersion, "2.2.2.3.Acuerdo Confidencialidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.2.4.Fianzas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato2, 6, rutaVersion, "2.2.2.4.Fianzas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.2.5.Seguros
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato2, 6, rutaVersion, "2.2.2.5.Seguros");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.2.6.Ordenes Cambio
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato2, 6, rutaVersion, "2.2.2.6.Ordenes Cambio");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.2.7.Ordenes Trabajo Campo
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato2, 6, rutaVersion, "2.2.2.7.Ordenes Trabajo Campo");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.2.8.Estimaciones
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato2, 6, rutaVersion, "2.2.2.8.Estimaciones");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 2.2.3.Comunicación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2");
                                    DuplicadoCarpetas(padreSubcontrato2, 5, rutaVersion, "2.2.3.Comunicación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreComunicacion_Subcontrato2 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.2.3.1.Minutas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato2, 6, rutaVersion, "2.2.3.1.Minutas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.3.2.Transmittal
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato2, 6, rutaVersion, "2.2.3.2.Transmittal");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.3.3.RFIs
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato2, 6, rutaVersion, "2.2.3.3.RFIs");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.3.4.Submittal
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato2, 6, rutaVersion, "2.2.3.4.Submittal");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.3.5.Reportes
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato2, 6, rutaVersion, "2.2.3.5.Reportes");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 2.2.4.Integración Subcontratista
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2");
                                    DuplicadoCarpetas(padreSubcontrato1, 5, rutaVersion, "2.2.4.Integración Subcontratista");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.5.Cierre Contrato
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2");
                                    DuplicadoCarpetas(padreSubcontrato2, 5, rutaVersion, "2.2.5.Cierre Contrato");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreCierreContratoID_Subcontrato2 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.2.5.1.Acuerdo Terminación Construcción
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato2, 6, rutaVersion, "2.2.5.1.Acuerdo Terminación Construcción");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.5.2.Punch List
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato2, 6, rutaVersion, "2.2.5.2.Punch List");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.5.3.Lista Defectos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato2, 6, rutaVersion, "2.2.5.3.Lista Defectos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.5.4.Acta Terminación-Entrega Construcción
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato2, 6, rutaVersion, "2.2.5.4.Acta Terminación-Entrega Construcción");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.5.5.Documentación As-Built
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato2, 6, rutaVersion, "2.2.5.5.Documentación As-Built");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.5.6.Desmovilización
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato2, 6, rutaVersion, "2.2.5.6.Desmovilización");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.5.7.Lecciones Aprendidas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato2, 6, rutaVersion, "2.2.5.7.Lecciones Aprendidas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.5.8.Reporte Final
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato2, 6, rutaVersion, "2.2.5.8.Reporte Final");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.5.9.Checklist Cierre x Disciplina
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato2, 6, rutaVersion, "2.2.5.9.Checklist Cierre x Disciplina");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.5.10.Dossier Calidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato2, 6, rutaVersion, "2.2.5.10.Dossier Calidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion
                                    #endregion

                                    #region 2.3.Subcontrato 3
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS");
                                    DuplicadoCarpetas(padreSubcontratosID, 4, rutaVersion, "2.3.Subcontrato 3");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreSubcontrato3 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.3.1.Licitación-Procura
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3");
                                    DuplicadoCarpetas(padreSubcontrato3, 5, rutaVersion, "2.3.1.Licitación-Procura");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreLicitacionProcuraID_Subcontrato3 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.3.1.1.Lista Aprobada Licitaciones
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato3, 6, rutaVersion, "2.3.1.1.Lista Aprobada Licitaciones");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.1.2.Paquete RFP
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato3, 6, rutaVersion, "2.3.1.2.Paquete RFP");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.1.3.Reunión Pre-Licitación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato3, 6, rutaVersion, "2.3.1.3.Reunión Pre-Licitación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.1.4.Evaluaciones Comerciales y Técnicas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato3, 6, rutaVersion, "2.3.1.4.Evaluaciones Comerciales y Técnicas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 2.3.2.Control Cambios
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3");
                                    DuplicadoCarpetas(padreSubcontrato3, 5, rutaVersion, "2.3.2.Control Cambios");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreControlCambiosID_Subcontrato3 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.3.2.1.Contrato Firmado
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato3, 6, rutaVersion, "2.3.2.1.Contrato Firmado");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.2.3.Alcance
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato3, 6, rutaVersion, "2.3.2.3.Alcance");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.2.3.Acuerdo Confidencialidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato3, 6, rutaVersion, "2.3.2.3.Acuerdo Confidencialidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.2.4.Fianzas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato3, 6, rutaVersion, "2.3.2.4.Fianzas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.2.5.Seguros
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato3, 6, rutaVersion, "2.3.2.5.Seguros");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.2.6.Ordenes Cambio
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato3, 6, rutaVersion, "2.3.2.6.Ordenes Cambio");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.2.7.Ordenes Trabajo Campo
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato3, 6, rutaVersion, "2.3.2.7.Ordenes Trabajo Campo");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.2.8.Estimaciones
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato3, 6, rutaVersion, "2.3.2.8.Estimaciones");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 2.3.3.Comunicación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3");
                                    DuplicadoCarpetas(padreSubcontrato3, 5, rutaVersion, "2.3.3.Comunicación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreComunicacion_Subcontrato3 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.3.3.1.Minutas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato3, 6, rutaVersion, "2.3.3.1.Minutas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.3.2.Transmittal
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato3, 6, rutaVersion, "2.3.3.2.Transmittal");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.3.3.RFIs
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato3, 6, rutaVersion, "2.3.3.3.RFIs");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.3.4.Submittal
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato3, 6, rutaVersion, "2.3.3.4.Submittal");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.3.5.Reportes
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato3, 6, rutaVersion, "2.3.3.5.Reportes");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 2.3.4.Integración Subcontratista
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3");
                                    DuplicadoCarpetas(padreSubcontrato1, 5, rutaVersion, "2.3.4.Integración Subcontratista");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.5.Cierre Contrato
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3");
                                    DuplicadoCarpetas(padreSubcontrato3, 5, rutaVersion, "2.3.5.Cierre Contrato");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreCierreContratoID_Subcontrato3 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.3.5.1.Acuerdo Terminación Construcción
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato3, 6, rutaVersion, "2.3.5.1.Acuerdo Terminación Construcción");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.5.2.Punch List
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato3, 6, rutaVersion, "2.3.5.2.Punch List");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.5.3.Lista Defectos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato3, 6, rutaVersion, "2.3.5.3.Lista Defectos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.5.4.Acta Terminación-Entrega Construcción
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato3, 6, rutaVersion, "2.3.5.4.Acta Terminación-Entrega Construcción");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.5.5.Documentación As-Built
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato3, 6, rutaVersion, "2.3.5.5.Documentación As-Built");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.5.6.Desmovilización
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato3, 6, rutaVersion, "2.3.5.6.Desmovilización");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.5.7.Lecciones Aprendidas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato3, 6, rutaVersion, "2.3.5.7.Lecciones Aprendidas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.5.8.Reporte Final
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato3, 6, rutaVersion, "2.3.5.8.Reporte Final");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.5.9.Checklist Cierre x Disciplina
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato3, 6, rutaVersion, "2.3.5.9.Checklist Cierre x Disciplina");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.5.10.Dossier Calidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato3, 6, rutaVersion, "2.3.5.10.Dossier Calidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion
                                    #endregion
                                    #endregion

                                    #region 3.GERENCIA
                                    rutaVersion = string.Format(@"{0}\{1}\{2}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase);
                                    DuplicadoCarpetas(padreCarpetaInicial, 3, rutaVersion, "3.GERENCIA");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreGerenciaID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.1.Dirección de Proyecto
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.1.Dirección de Proyecto");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreDireccionProyectoID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.1.1.Plan de Dirección
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.1.Dirección de Proyecto");
                                    DuplicadoCarpetas(padreDireccionProyectoID, 5, rutaVersion, "3.1.1.Plan de Dirección");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.1.2.Acta Inicio Obra
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.1.Dirección de Proyecto");
                                    DuplicadoCarpetas(padreDireccionProyectoID, 5, rutaVersion, "3.1.2.Acta Inicio Obra");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.1.3.MAC
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.1.Dirección de Proyecto");
                                    DuplicadoCarpetas(padreDireccionProyectoID, 5, rutaVersion, "3.1.3.MAC");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.2.Seguridad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.2.Seguridad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreSeguridadID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.2.1.Plan de Seguridad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.2.Seguridad");
                                    DuplicadoCarpetas(padreSeguridadID, 5, rutaVersion, "3.2.1.Plan de Seguridad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.2.2.IDS
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.2.Seguridad");
                                    DuplicadoCarpetas(padreSeguridadID, 5, rutaVersion, "3.2.2.IDS");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.2.3.Análisis Seguridad x Constructabilidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.2.Seguridad");
                                    DuplicadoCarpetas(padreSeguridadID, 5, rutaVersion, "3.2.3.Análisis Seguridad x Constructabilidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.3.Calidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.3.Calidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreCalidadID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.3.1.Plan de Calidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.3.Calidad");
                                    DuplicadoCarpetas(padreCalidadID, 5, rutaVersion, "3.3.1.Plan de Calidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.3.2.Formatos Calidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.3.Calidad");
                                    DuplicadoCarpetas(padreCalidadID, 5, rutaVersion, "3.3.2.Formatos Calidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.3.3.Acreditación Laboratorios
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.3.Calidad");
                                    DuplicadoCarpetas(padreCalidadID, 5, rutaVersion, "3.3.3.Acreditación Laboratorios");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.3.4.Respaldo Topográfico
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.3.Calidad");
                                    DuplicadoCarpetas(padreCalidadID, 5, rutaVersion, "3.3.4.Respaldo Topográfico");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.3.5.Calibración Equipos de Topografía
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.3.Calidad");
                                    DuplicadoCarpetas(padreCalidadID, 5, rutaVersion, "3.3.5.Calibración Equipos de Topografía");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.3.6.Pruebas Compactación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.3.Calidad");
                                    DuplicadoCarpetas(padreCalidadID, 5, rutaVersion, "3.3.6.Pruebas Compactación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.3.7.Pruebas Resistencia Materiales
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.3.Calidad");
                                    DuplicadoCarpetas(padreCalidadID, 5, rutaVersion, "3.3.7.Pruebas Resistencia Materiales");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.3.8.Calidad Agregados
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.3.Calidad");
                                    DuplicadoCarpetas(padreCalidadID, 5, rutaVersion, "3.3.8.Calidad Agregados");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.3.9.Calidad Materiales
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.3.Calidad");
                                    DuplicadoCarpetas(padreCalidadID, 5, rutaVersion, "3.3.9.Calidad Materiales");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.3.10.Otros Reportes
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.3.Calidad");
                                    DuplicadoCarpetas(padreCalidadID, 5, rutaVersion, "3.3.10.Otros Reportes");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.4.Programación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.4.Programación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreProgramacionID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.4.1.Plan de Programación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.4.Programación");
                                    DuplicadoCarpetas(padreProgramacionID, 5, rutaVersion, "3.4.1.Plan de Programación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.4.2.Cronograma
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.4.Programación");
                                    DuplicadoCarpetas(padreProgramacionID, 5, rutaVersion, "3.4.2.Cronograma");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.4.3.Línea Base
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.4.Programación");
                                    DuplicadoCarpetas(padreProgramacionID, 5, rutaVersion, "3.4.3.Línea Base");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.4.4.Programa a 2 Semanas Adelante
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.4.Programación");
                                    DuplicadoCarpetas(padreProgramacionID, 5, rutaVersion, "3.4.4.Programa a 2 Semanas Adelante");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.4.5.Programa Nivel 3 Subcontratistas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.4.Programación");
                                    DuplicadoCarpetas(padreProgramacionID, 5, rutaVersion, "3.4.5.Programa Nivel 3 Subcontratistas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.4.6.Archivo Seguimiento
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.4.Programación");
                                    DuplicadoCarpetas(padreProgramacionID, 5, rutaVersion, "3.4.6.Archivo Seguimiento");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.4.7.Análisis Ruta Crítica
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.4.Programación");
                                    DuplicadoCarpetas(padreProgramacionID, 5, rutaVersion, "3.4.7.Análisis Ruta Crítica");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.4.8.Curva S
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.4.Programación");
                                    DuplicadoCarpetas(padreProgramacionID, 5, rutaVersion, "3.4.8.Curva S");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.4.9.Reuniones Seguimiento-Análisis Avance
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.4.Programación");
                                    DuplicadoCarpetas(padreProgramacionID, 5, rutaVersion, "3.4.9.Reuniones Seguimiento-Análisis Avance");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.5.Constructabilidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.5.Constructabilidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreConstructabilidadID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.5.1.Plan de Constructabilidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.5.Constructabilidad");
                                    DuplicadoCarpetas(padreConstructabilidadID, 5, rutaVersion, "3.5.1.Plan de Constructabilidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.5.2.Constructabilidad del Proyecto
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.5.Constructabilidad");
                                    DuplicadoCarpetas(padreConstructabilidadID, 5, rutaVersion, "3.5.2.Constructabilidad del Proyecto");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.5.3.Actualización Semanal Constructabilidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.5.Constructabilidad");
                                    DuplicadoCarpetas(padreConstructabilidadID, 5, rutaVersion, "3.5.3.Actualización Semanal Constructabilidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.6.Control Documentos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.6.Control Documentos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreControlDocumentosID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.6.1.Plan Control Documentos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.6.Control Documentos");
                                    DuplicadoCarpetas(padreControlDocumentosID, 5, rutaVersion, "3.6.1.Plan Control Documentos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.6.2.Matriz Codificación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.6.Control Documentos");
                                    DuplicadoCarpetas(padreControlDocumentosID, 5, rutaVersion, "3.6.2.Matriz Codificación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.6.3.Lista Maestra Documentos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.6.Control Documentos");
                                    DuplicadoCarpetas(padreControlDocumentosID, 5, rutaVersion, "3.6.3.Lista Maestra Documentos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.6.4.Manuales Operación y Mantenimiento
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.6.Control Documentos");
                                    DuplicadoCarpetas(padreControlDocumentosID, 5, rutaVersion, "3.6.4.Manuales Operación y Mantenimiento");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.7.Comunicación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.7.Comunicación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreComunicacionID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.7.1.Comunicación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.7.Comunicación");
                                    DuplicadoCarpetas(padreComunicacionID, 5, rutaVersion, "3.7.1.Comunicación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.7.2.Directorio Proyecto
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.7.Comunicación");
                                    DuplicadoCarpetas(padreComunicacionID, 5, rutaVersion, "3.7.2.Directorio Proyecto");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.7.3.Matriz Comunicación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.7.Comunicación");
                                    DuplicadoCarpetas(padreComunicacionID, 5, rutaVersion, "3.7.3.Matriz Comunicación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.7.4.Reporte Ejecutivo
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.7.Comunicación");
                                    DuplicadoCarpetas(padreComunicacionID, 5, rutaVersion, "3.7.4.Reporte Ejecutivo");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.7.5.Organigrama Equipo Proyecto
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.7.Comunicación");
                                    DuplicadoCarpetas(padreComunicacionID, 5, rutaVersion, "3.7.5.Organigrama Equipo Proyecto");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.7.6.Pizarrón Proyecto
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.7.Comunicación");
                                    DuplicadoCarpetas(padreComunicacionID, 5, rutaVersion, "3.7.6.Pizarrón Proyecto");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.7.7.Reporte Fotográfico
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.7.Comunicación");
                                    DuplicadoCarpetas(padreComunicacionID, 5, rutaVersion, "3.7.7.Reporte Fotográfico");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.7.8.Relación Reuniones
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.7.Comunicación");
                                    DuplicadoCarpetas(padreComunicacionID, 5, rutaVersion, "3.7.8.Relación Reuniones");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.7.9.Bitácora Obra Cliente
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.7.Comunicación");
                                    DuplicadoCarpetas(padreComunicacionID, 5, rutaVersion, "3.7.9.Bitácora Obra Cliente");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.8.Control Cambios y Costos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.8.Control Cambios y Costos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreControlCambiosCostosID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.8.1.Plan Control de Cambios
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.8.Control Cambios y Costos");
                                    DuplicadoCarpetas(padreControlCambiosCostosID, 5, rutaVersion, "3.8.1.Plan Control de Cambios");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.8.2.Relación Ordenes Cambio
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.8.Control Cambios y Costos");
                                    DuplicadoCarpetas(padreControlCambiosCostosID, 5, rutaVersion, "3.8.2.Relación Ordenes Cambio");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.9.Roles y Responsabilidades
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.9.Roles y Responsabilidades");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreRolesResponsabilidadesID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.9.1.Plan Roles y Responsabilidades
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.9.Roles y Responsabilidades");
                                    DuplicadoCarpetas(padreRolesResponsabilidadesID, 5, rutaVersion, "3.9.1.Plan Roles y Responsabilidades");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.9.2.Roles y Responsabilidades
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.9.Roles y Responsabilidades");
                                    DuplicadoCarpetas(padreRolesResponsabilidadesID, 5, rutaVersion, "3.9.2.Roles y Responsabilidades");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.9.3.Matriz CARS
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.9.Roles y Responsabilidades");
                                    DuplicadoCarpetas(padreRolesResponsabilidadesID, 5, rutaVersion, "3.9.3.Matriz CARS");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.9.4.Evaluación Gerente Proyecto
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.9.Roles y Responsabilidades");
                                    DuplicadoCarpetas(padreRolesResponsabilidadesID, 5, rutaVersion, "3.9.4.Evaluación Gerente Proyecto");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.9.5.Evaluación Desempeño Equipo Proyecto
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.9.Roles y Responsabilidades");
                                    DuplicadoCarpetas(padreRolesResponsabilidadesID, 5, rutaVersion, "3.9.5.Evaluación Desempeño Equipo Proyecto");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.10.Suministros
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.10.Suministros");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreSuministrosID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.10.1.Plan Suministros
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.10.Suministros");
                                    DuplicadoCarpetas(padreSuministrosID, 5, rutaVersion, "3.10.1.Plan Suministros");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "3.10.1.Plan Suministros");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.10.2.Contrato Renta Maquinaria y Equipo
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.10.Suministros");
                                    DuplicadoCarpetas(padreSuministrosID, 5, rutaVersion, "3.10.2.Contrato Renta Maquinaria y Equipo");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "3.10.2.Contrato Renta Maquinaria y Equipo");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.10.3.Validación Volúmenes Contractuales
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.10.Suministros");
                                    DuplicadoCarpetas(padreSuministrosID, 5, rutaVersion, "3.10.3.Validación Volúmenes Contractuales");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "3.10.3.Validación Volúmenes Contractuales");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreValidacionVolumnesContractualesID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.10.3.1.Bancos Nivel Autorizados
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.10.Suministros", "3.10.3.Validación Volúmenes Contractuales");
                                    DuplicadoCarpetas(padreValidacionVolumnesContractualesID, 6, rutaVersion, "3.10.3.1.Bancos Nivel Autorizados");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "3.10.3.1.Bancos Nivel Autorizados");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.10.3.2.Validación Volúmenes
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.10.Suministros", "3.10.3.Validación Volúmenes Contractuales");
                                    DuplicadoCarpetas(padreValidacionVolumnesContractualesID, 6, rutaVersion, "3.10.3.2.Validación Volúmenes");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "3.10.3.2.Validación Volúmenes");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.10.4.Matriz Suministros
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.10.Suministros");
                                    DuplicadoCarpetas(padreSuministrosID, 5, rutaVersion, "3.10.4.Matriz Suministros");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "3.10.4.Matriz Suministros");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.10.5.Evaluación Plan Suministros
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.10.Suministros");
                                    DuplicadoCarpetas(padreSuministrosID, 5, rutaVersion, "3.10.5.Evaluación Plan Suministros");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "3.10.5.Evaluación Plan Suministros");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.11.Movilización
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.11.Movilización");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreMovilizacionID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.11.1.Plan Movilización
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.11.Movilización");
                                    DuplicadoCarpetas(padreMovilizacionID, 5, rutaVersion, "3.11.1.Plan Movilización");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.11.2.Checklist Movilización
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.11.Movilización");
                                    DuplicadoCarpetas(padreMovilizacionID, 5, rutaVersion, "3.11.2.Checklist Movilización");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.12.Ingeniería
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.12.Ingeniería");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreIngenieria = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.12.1.Plan Ingeniería
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.12.Ingeniería");
                                    DuplicadoCarpetas(padreIngenieria, 5, rutaVersion, "3.12.1.Plan Ingeniería");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.12.2.Listados Ingeniería
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.12.Ingeniería");
                                    DuplicadoCarpetas(padreIngenieria, 5, rutaVersion, "3.12.2.Listados Ingeniería");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.12.3.Especificaciones
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.12.Ingeniería");
                                    DuplicadoCarpetas(padreIngenieria, 5, rutaVersion, "3.12.3.Especificaciones");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.12.4.Memorias Cálculo
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.12.Ingeniería");
                                    DuplicadoCarpetas(padreIngenieria, 5, rutaVersion, "3.12.4.Memorias Cálculo");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.12.5.Dibujos de Referencia
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.12.Ingeniería");
                                    DuplicadoCarpetas(padreIngenieria, 5, rutaVersion, "3.12.5.Dibujos de Referencia");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.12.6.Dibujos As-Built
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.12.Ingeniería");
                                    DuplicadoCarpetas(padreIngenieria, 5, rutaVersion, "3.12.6.Dibujos As-Built");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.13.Gestión de Riesgos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.13.Gestión de Riesgos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreGestionRiesgos = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.13.1.Plan Gestión de Riesgos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.13.Gestión de Riesgos");
                                    DuplicadoCarpetas(padreGestionRiesgos, 5, rutaVersion, "3.13.1.Plan Gestión de Riesgos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.13.2.Matriz Riesgos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.13.Gestión de Riesgos");
                                    DuplicadoCarpetas(padreGestionRiesgos, 5, rutaVersion, "3.13.2.Matriz Riesgos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.14.Integración Subcontratistas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.14.Integración Subcontratistas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreIntegracionSubcontratistasID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.14.1.Plan Integración Subcontratista
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.14.Integración Subcontratistas");
                                    DuplicadoCarpetas(padreIntegracionSubcontratistasID, 5, rutaVersion, "3.14.1.Plan Integración Subcontratista");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.14.2.Checklist Integración Subcontratista
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.14.Integración Subcontratistas");
                                    DuplicadoCarpetas(padreIntegracionSubcontratistasID, 5, rutaVersion, "3.14.2.Checklist Integración Subcontratista");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.14.3.Responsabilidades Residente Subcontratista
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.14.Integración Subcontratistas");
                                    DuplicadoCarpetas(padreIntegracionSubcontratistasID, 5, rutaVersion, "3.14.3.Responsabilidades Residente Subcontratista");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.14.4.Evaluaciones Subcontratistas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.14.Integración Subcontratistas");
                                    DuplicadoCarpetas(padreIntegracionSubcontratistasID, 5, rutaVersion, "3.14.4.Evaluaciones Subcontratistas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.14.5.Relación Evaluaciones Subcontratistas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.14.Integración Subcontratistas");
                                    DuplicadoCarpetas(padreIntegracionSubcontratistasID, 5, rutaVersion, "3.14.5.Relación Evaluaciones Subcontratistas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.15.Cierre Proyecto
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.15.Cierre Proyecto");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreCierreProyectoID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.15.1.Plan Cierre Proyecto
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.15.Cierre Proyecto");
                                    DuplicadoCarpetas(padreCierreProyectoID, 5, rutaVersion, "3.15.1.Plan Cierre Proyecto");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.15.2.Acuerdo Terminación Construcción
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.15.Cierre Proyecto");
                                    DuplicadoCarpetas(padreCierreProyectoID, 5, rutaVersion, "3.15.2.Acuerdo Terminación Construcción");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.15.3.Punch Lists
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.15.Cierre Proyecto");
                                    DuplicadoCarpetas(padreCierreProyectoID, 5, rutaVersion, "3.15.3.Punch Lists");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.15.4.Lista Defectos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.15.Cierre Proyecto");
                                    DuplicadoCarpetas(padreCierreProyectoID, 5, rutaVersion, "3.15.4.Lista Defectos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.15.5.Acta Terminación-Entrega Construcción
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.15.Cierre Proyecto");
                                    DuplicadoCarpetas(padreCierreProyectoID, 5, rutaVersion, "3.15.5.Acta Terminación-Entrega Construcción");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.15.6.Documentación As-Built
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.15.Cierre Proyecto");
                                    DuplicadoCarpetas(padreCierreProyectoID, 5, rutaVersion, "3.15.6.Documentación As-Built");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.15.7.Desmovilización
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.15.Cierre Proyecto");
                                    DuplicadoCarpetas(padreCierreProyectoID, 5, rutaVersion, "3.15.7.Desmovilización");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.15.8.Lecciones Aprendidas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.15.Cierre Proyecto");
                                    DuplicadoCarpetas(padreCierreProyectoID, 5, rutaVersion, "3.15.8.Lecciones Aprendidas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.15.9.Reporte Final
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.15.Cierre Proyecto");
                                    DuplicadoCarpetas(padreCierreProyectoID, 5, rutaVersion, "3.15.9.Reporte Final");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.15.10.Checklist Cierre x Disciplina
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.15.Cierre Proyecto");
                                    DuplicadoCarpetas(padreCierreProyectoID, 5, rutaVersion, "3.15.10.Checklist Cierre x Disciplina");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.15.11.Dossier Calidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.15.Cierre Proyecto");
                                    DuplicadoCarpetas(padreCierreProyectoID, 5, rutaVersion, "3.15.11.Dossier Calidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.16.Intervención Áreas Operativas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.16.Intervención Áreas Operativas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreIntervencionAreasOperativasID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.16.1.Plan Intervención Áreas Operativas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.16.Intervención Áreas Operativas");
                                    DuplicadoCarpetas(padreIntervencionAreasOperativasID, 5, rutaVersion, "3.16.1.Plan Intervención Áreas Operativas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.16.2.Calificación de Instalación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.16.Intervención Áreas Operativas");
                                    DuplicadoCarpetas(padreIntervencionAreasOperativasID, 5, rutaVersion, "3.16.2.Calificación de Instalación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.16.3.Protocolo Intervención Áreas Operativas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.16.Intervención Áreas Operativas");
                                    DuplicadoCarpetas(padreIntervencionAreasOperativasID, 5, rutaVersion, "3.16.3.Protocolo Intervención Áreas Operativas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion
                                    #endregion
                                }
                                break;
                            case (int)EmpresaEnum.Peru:
                                {
                                    #region SE CREAN CARPETAS INICIALES
                                    tblFM_Archivo objArchivo = new tblFM_Archivo();
                                    rutaVersion = string.Format(@"2022\{0}", nombreDivision);
                                    DuplicadoCarpetas(objParamsDTO.padreID, 2, rutaVersion, objParamsDTO.nombreCarpetaBase);
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreCarpetaInicial = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();
                                    #endregion

                                    #region 1.CLIENTE
                                    rutaVersion = string.Format(@"{0}\{1}\{2}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase);
                                    DuplicadoCarpetas(padreCarpetaInicial, 3, rutaVersion, "1.CLIENTE");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreClienteID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 1.1.Presupuestos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE");
                                    DuplicadoCarpetas(padreClienteID, 4, rutaVersion, "1.1.Presupuestos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long presupuestosPadreID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 1.1.1.Presupuesto
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.1.Presupuestos");
                                    DuplicadoCarpetas(presupuestosPadreID, 5, rutaVersion, "1.1.1.Presupuesto");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.1.1.Presupuesto");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.1.2.Mano de Obra
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.1.Presupuestos");
                                    DuplicadoCarpetas(presupuestosPadreID, 5, rutaVersion, "1.1.2.Mano de Obra");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.1.2.Mano de Obra");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.1.3.Auxiliares
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.1.Presupuestos");
                                    DuplicadoCarpetas(presupuestosPadreID, 5, rutaVersion, "1.1.3.Auxiliares");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.1.3.Auxiliares");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.1.4.Desglose Conceptos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.1.Presupuestos");
                                    DuplicadoCarpetas(presupuestosPadreID, 5, rutaVersion, "1.1.4.Desglose Conceptos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.1.4.Desglose Conceptos");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.1.5.Explosión Insumos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.1.Presupuestos");
                                    DuplicadoCarpetas(presupuestosPadreID, 5, rutaVersion, "1.1.5.Explosión Insumos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.1.5.Explosión Insumos");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.1.6.Análisis Precios Unitarios
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.1.Presupuestos");
                                    DuplicadoCarpetas(presupuestosPadreID, 5, rutaVersion, "1.1.6.Análisis Precios Unitarios");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.1.6.Análisis Precios Unitarios");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.1.7.Análisis Costos Horarios
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.1.Presupuestos");
                                    DuplicadoCarpetas(presupuestosPadreID, 5, rutaVersion, "1.1.7.Análisis Costos Horarios");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.1.7.Análisis Costos Horarios");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.1.8.Análisis Indirectos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.1.Presupuestos");
                                    DuplicadoCarpetas(presupuestosPadreID, 5, rutaVersion, "1.1.8.Análisis Indirectos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.1.8.Análisis Indirectos");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.1.9.Programa Obra
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.1.Presupuestos");
                                    DuplicadoCarpetas(presupuestosPadreID, 5, rutaVersion, "1.1.9.Programa Obra");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.1.9.Programa Obra");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.1.10.Precios Fuera de Presupuestos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.1.Presupuestos");
                                    DuplicadoCarpetas(presupuestosPadreID, 5, rutaVersion, "1.1.10.Precios Fuera de Presupuestos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.1.10.Precios Fuera de Presupuestos");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 1.2.Licitación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE");
                                    DuplicadoCarpetas(padreClienteID, 4, rutaVersion, "1.2.Licitación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long licitacionPadreID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 1.2.1.Acta Visita Obra
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.2.Licitación");
                                    DuplicadoCarpetas(licitacionPadreID, 5, rutaVersion, "1.2.1.Acta Visita Obra");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.2.1.Acta Visita Obra");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.2.2.Junta Aclaraciones
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.2.Licitación");
                                    DuplicadoCarpetas(licitacionPadreID, 5, rutaVersion, "1.2.2.Junta Aclaraciones");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.2.2.Junta Aclaraciones");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.2.3.Reporte Visita Obra
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.2.Licitación");
                                    DuplicadoCarpetas(licitacionPadreID, 5, rutaVersion, "1.2.3.Reporte Visita Obra");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.2.3.Reporte Visita Obra");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.2.4.Bases-Anexos Concurso
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.2.Licitación");
                                    DuplicadoCarpetas(licitacionPadreID, 5, rutaVersion, "1.2.4.Bases-Anexos Concurso");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.2.4.Bases-Anexos Concurso");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 1.3.Cotizaciones Principales
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE");
                                    DuplicadoCarpetas(padreClienteID, 4, rutaVersion, "1.3.Cotizaciones Principales");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.3.Cotizaciones Principales");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.4.Junta Arranque
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE");
                                    DuplicadoCarpetas(padreClienteID, 4, rutaVersion, "1.4.Junta Arranque");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long juntaArranquePadreID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 1.4.1.Cuadro Facultamiento
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.4.Junta Arranque");
                                    DuplicadoCarpetas(juntaArranquePadreID, 5, rutaVersion, "1.4.1.Cuadro Facultamiento");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.4.1.Cuadro Facultamiento");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.4.2.Minuta y Lista Asistencia
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.4.Junta Arranque");
                                    DuplicadoCarpetas(juntaArranquePadreID, 5, rutaVersion, "1.4.2.Minuta y Lista Asistencia");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.4.2.Minuta y Lista Asistencia");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.4.3.Solicitud Equipo
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.4.Junta Arranque");
                                    DuplicadoCarpetas(juntaArranquePadreID, 5, rutaVersion, "1.4.3.Solicitud Equipo");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.4.3.Solicitud Equipo");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.4.4.Plantilla Personal
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.4.Junta Arranque");
                                    DuplicadoCarpetas(juntaArranquePadreID, 5, rutaVersion, "1.4.4.Plantilla Personal");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.4.4.Plantilla Personal");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 1.5.Contrato Cliente
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE");
                                    DuplicadoCarpetas(padreClienteID, 4, rutaVersion, "1.5.Contrato Cliente");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long contratoClientePadreID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 1.5.1.Contrato Firmado
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.5.Contrato Cliente");
                                    DuplicadoCarpetas(contratoClientePadreID, 5, rutaVersion, "1.5.1.Contrato Firmado");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.5.2.Alcance
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.5.Contrato Cliente");
                                    DuplicadoCarpetas(contratoClientePadreID, 5, rutaVersion, "1.5.2.Alcance");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.5.3.Fianzas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.5.Contrato Cliente");
                                    DuplicadoCarpetas(contratoClientePadreID, 5, rutaVersion, "1.5.3.Fianzas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.5.4.Seguros
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.5.Contrato Cliente");
                                    DuplicadoCarpetas(contratoClientePadreID, 5, rutaVersion, "1.5.4.Seguros");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.5.5.Ordenes Cambio
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.5.Contrato Cliente");
                                    DuplicadoCarpetas(contratoClientePadreID, 5, rutaVersion, "1.5.5.Ordenes Cambio");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.5.6.Estimaciones
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.5.Contrato Cliente");
                                    DuplicadoCarpetas(contratoClientePadreID, 5, rutaVersion, "1.5.6.Estimaciones");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 1.6.Comunicación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE");
                                    DuplicadoCarpetas(padreClienteID, 4, rutaVersion, "1.6.Comunicación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long comunicacionPadreID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 1.6.1.Minutas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.6.Comunicación");
                                    DuplicadoCarpetas(comunicacionPadreID, 5, rutaVersion, "1.6.1.Minutas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.6.1.Minutas");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.6.2.Transmittal
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.6.Comunicación");
                                    DuplicadoCarpetas(comunicacionPadreID, 5, rutaVersion, "1.6.2.Transmittal");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.6.2.Transmittal");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.6.3.RFIs
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.6.Comunicación");
                                    DuplicadoCarpetas(comunicacionPadreID, 5, rutaVersion, "1.6.3.RFIs");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.6.3.RFIs");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 1.6.4.Submittal
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.6.Comunicación");
                                    DuplicadoCarpetas(comunicacionPadreID, 5, rutaVersion, "1.6.4.Submittal");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.6.4.Submittal");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 1.7.Dependencias
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE");
                                    DuplicadoCarpetas(padreClienteID, 4, rutaVersion, "1.7.Dependencias");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long dependenciasPadreID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 1.7.1.Permisos Gobierno
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "1.CLIENTE", "1.7.Dependencias");
                                    DuplicadoCarpetas(dependenciasPadreID, 5, rutaVersion, "1.7.1.Permisos Gobierno");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "1.7.1.Permisos Gobierno");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion
                                    #endregion

                                    #region 2.SUBCONTRATOS
                                    rutaVersion = string.Format(@"{0}\{1}\{2}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase);
                                    DuplicadoCarpetas(padreCarpetaInicial, 3, rutaVersion, "2.SUBCONTRATOS");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreSubcontratosID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.1.Subcontrato 1
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS");
                                    DuplicadoCarpetas(padreSubcontratosID, 4, rutaVersion, "2.1.Subcontrato 1");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreSubcontrato1 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.1.1.Licitación-Procura
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1");
                                    DuplicadoCarpetas(padreSubcontrato1, 5, rutaVersion, "2.1.1.Licitación-Procura");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreLicitacionProcuraID_Subcontrato1 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.1.1.1.Lista Aprobada Licitaciones
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato1, 6, rutaVersion, "2.1.1.1.Lista Aprobada Licitaciones");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.1.2.Paquete RFP
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato1, 6, rutaVersion, "2.1.1.2.Paquete RFP");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.1.3.Reunión Pre-Licitación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato1, 6, rutaVersion, "2.1.1.3.Reunión Pre-Licitación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.1.4.Evaluaciones Comerciales y Técnicas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato1, 6, rutaVersion, "2.1.1.4.Evaluaciones Comerciales y Técnicas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 2.1.2.Control Cambios
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1");
                                    DuplicadoCarpetas(padreSubcontrato1, 5, rutaVersion, "2.1.2.Control Cambios");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreControlCambiosID_Subcontrato1 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.1.2.1.Contrato Firmado
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato1, 6, rutaVersion, "2.1.2.1.Contrato Firmado");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.2.2.Alcance
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato1, 6, rutaVersion, "2.1.2.2.Alcance");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.2.3.Acuerdo Confidencialidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato1, 6, rutaVersion, "2.1.2.3.Acuerdo Confidencialidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.2.4.Fianzas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato1, 6, rutaVersion, "2.1.2.4.Fianzas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.2.5.Seguros
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato1, 6, rutaVersion, "2.1.2.5.Seguros");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.2.6.Ordenes Cambio
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato1, 6, rutaVersion, "2.1.2.6.Ordenes Cambio");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.2.7.Ordenes Trabajo Campo
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato1, 6, rutaVersion, "2.1.2.7.Ordenes Trabajo Campo");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.2.8.Estimaciones
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato1, 6, rutaVersion, "2.1.2.8.Estimaciones");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 2.1.3.Comunicación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1");
                                    DuplicadoCarpetas(padreSubcontrato1, 5, rutaVersion, "2.1.3.Comunicación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreComunicacion_Subcontrato1 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.1.3.1.Minutas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato1, 6, rutaVersion, "2.1.3.1.Minutas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.3.2.Transmittal
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato1, 6, rutaVersion, "2.1.3.2.Transmittal");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.3.3.RFIs
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato1, 6, rutaVersion, "2.1.3.3.RFIs");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.3.4.Submittal
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato1, 6, rutaVersion, "2.1.3.4.Submittal");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.3.5.Reportes
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato1, 6, rutaVersion, "2.1.3.5.Reportes");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 2.1.4.Integración Subcontratista
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1");
                                    DuplicadoCarpetas(padreSubcontrato1, 5, rutaVersion, "2.1.4.Integración Subcontratista");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.5.Cierre Contrato
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1");
                                    DuplicadoCarpetas(padreSubcontrato1, 5, rutaVersion, "2.1.5.Cierre Contrato");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreCierreContratoID_Subcontrato1 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.1.5.1.Acuerdo Terminación Construcción
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato1, 6, rutaVersion, "2.1.5.1.Acuerdo Terminación Construcción");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.5.2.Punch List
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato1, 6, rutaVersion, "2.1.5.2.Punch List");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.5.3.Lista Defectos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato1, 6, rutaVersion, "2.1.5.3.Lista Defectos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.5.4.Acta Terminación-Entrega Construcción
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato1, 6, rutaVersion, "2.1.5.4.Acta Terminación-Entrega Construcción");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.5.5.Documentación As-Built
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato1, 6, rutaVersion, "2.1.5.5.Documentación As-Built");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.5.6.Desmovilización
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato1, 6, rutaVersion, "2.1.5.6.Desmovilización");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.5.7.Lecciones Aprendidas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato1, 6, rutaVersion, "2.1.5.7.Lecciones Aprendidas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.5.8.Reporte Final
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato1, 6, rutaVersion, "2.1.5.8.Reporte Final");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.5.9.Checklist Cierre x Disciplina
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato1, 6, rutaVersion, "2.1.5.9.Checklist Cierre x Disciplina");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.1.5.10.Dossier Calidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.1.Subcontrato 1", "2.1.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato1, 6, rutaVersion, "2.1.5.10.Dossier Calidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion
                                    #endregion

                                    #region 2.2.Subcontrato 2
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS");
                                    DuplicadoCarpetas(padreSubcontratosID, 4, rutaVersion, "2.2.Subcontrato 2");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreSubcontrato2 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.2.1.Licitación-Procura
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2");
                                    DuplicadoCarpetas(padreSubcontrato2, 5, rutaVersion, "2.2.1.Licitación-Procura");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreLicitacionProcuraID_Subcontrato2 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.2.1.1.Lista Aprobada Licitaciones
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato2, 6, rutaVersion, "2.2.1.1.Lista Aprobada Licitaciones");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.1.2.Paquete RFP
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato2, 6, rutaVersion, "2.2.1.2.Paquete RFP");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.1.3.Reunión Pre-Licitación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato2, 6, rutaVersion, "2.2.1.3.Reunión Pre-Licitación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.1.4.Evaluaciones Comerciales y Técnicas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato2, 6, rutaVersion, "2.2.1.4.Evaluaciones Comerciales y Técnicas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 2.2.2.Control Cambios
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2");
                                    DuplicadoCarpetas(padreSubcontrato2, 5, rutaVersion, "2.2.2.Control Cambios");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreControlCambiosID_Subcontrato2 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.2.2.1.Contrato Firmado
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato2, 6, rutaVersion, "2.2.2.1.Contrato Firmado");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.2.2.Alcance
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato2, 6, rutaVersion, "2.2.2.2.Alcance");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.2.3.Acuerdo Confidencialidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato2, 6, rutaVersion, "2.2.2.3.Acuerdo Confidencialidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.2.4.Fianzas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato2, 6, rutaVersion, "2.2.2.4.Fianzas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.2.5.Seguros
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato2, 6, rutaVersion, "2.2.2.5.Seguros");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.2.6.Ordenes Cambio
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato2, 6, rutaVersion, "2.2.2.6.Ordenes Cambio");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.2.7.Ordenes Trabajo Campo
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato2, 6, rutaVersion, "2.2.2.7.Ordenes Trabajo Campo");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.2.8.Estimaciones
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato2, 6, rutaVersion, "2.2.2.8.Estimaciones");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 2.2.3.Comunicación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2");
                                    DuplicadoCarpetas(padreSubcontrato2, 5, rutaVersion, "2.2.3.Comunicación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreComunicacion_Subcontrato2 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.2.3.1.Minutas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato2, 6, rutaVersion, "2.2.3.1.Minutas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.3.2.Transmittal
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato2, 6, rutaVersion, "2.2.3.2.Transmittal");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.3.3.RFIs
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato2, 6, rutaVersion, "2.2.3.3.RFIs");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.3.4.Submittal
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato2, 6, rutaVersion, "2.2.3.4.Submittal");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.3.5.Reportes
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato2, 6, rutaVersion, "2.2.3.5.Reportes");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 2.2.4.Integración Subcontratista
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2");
                                    DuplicadoCarpetas(padreSubcontrato1, 5, rutaVersion, "2.2.4.Integración Subcontratista");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.5.Cierre Contrato
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2");
                                    DuplicadoCarpetas(padreSubcontrato2, 5, rutaVersion, "2.2.5.Cierre Contrato");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreCierreContratoID_Subcontrato2 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.2.5.1.Acuerdo Terminación Construcción
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato2, 6, rutaVersion, "2.2.5.1.Acuerdo Terminación Construcción");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.5.2.Punch List
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato2, 6, rutaVersion, "2.2.5.2.Punch List");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.5.3.Lista Defectos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato2, 6, rutaVersion, "2.2.5.3.Lista Defectos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.5.4.Acta Terminación-Entrega Construcción
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato2, 6, rutaVersion, "2.2.5.4.Acta Terminación-Entrega Construcción");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.5.5.Documentación As-Built
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato2, 6, rutaVersion, "2.2.5.5.Documentación As-Built");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.5.6.Desmovilización
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato2, 6, rutaVersion, "2.2.5.6.Desmovilización");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.5.7.Lecciones Aprendidas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato2, 6, rutaVersion, "2.2.5.7.Lecciones Aprendidas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.5.8.Reporte Final
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato2, 6, rutaVersion, "2.2.5.8.Reporte Final");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.5.9.Checklist Cierre x Disciplina
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato2, 6, rutaVersion, "2.2.5.9.Checklist Cierre x Disciplina");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.2.5.10.Dossier Calidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.2.Subcontrato 2", "2.2.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato2, 6, rutaVersion, "2.2.5.10.Dossier Calidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion
                                    #endregion

                                    #region 2.3.Subcontrato 3
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS");
                                    DuplicadoCarpetas(padreSubcontratosID, 4, rutaVersion, "2.3.Subcontrato 3");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreSubcontrato3 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.3.1.Licitación-Procura
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3");
                                    DuplicadoCarpetas(padreSubcontrato3, 5, rutaVersion, "2.3.1.Licitación-Procura");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreLicitacionProcuraID_Subcontrato3 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.3.1.1.Lista Aprobada Licitaciones
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato3, 6, rutaVersion, "2.3.1.1.Lista Aprobada Licitaciones");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.1.2.Paquete RFP
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato3, 6, rutaVersion, "2.3.1.2.Paquete RFP");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.1.3.Reunión Pre-Licitación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato3, 6, rutaVersion, "2.3.1.3.Reunión Pre-Licitación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.1.4.Evaluaciones Comerciales y Técnicas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.1.Licitación-Procura");
                                    DuplicadoCarpetas(padreLicitacionProcuraID_Subcontrato3, 6, rutaVersion, "2.3.1.4.Evaluaciones Comerciales y Técnicas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 2.3.2.Control Cambios
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3");
                                    DuplicadoCarpetas(padreSubcontrato3, 5, rutaVersion, "2.3.2.Control Cambios");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreControlCambiosID_Subcontrato3 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.3.2.1.Contrato Firmado
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato3, 6, rutaVersion, "2.3.2.1.Contrato Firmado");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.2.3.Alcance
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato3, 6, rutaVersion, "2.3.2.3.Alcance");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.2.3.Acuerdo Confidencialidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato3, 6, rutaVersion, "2.3.2.3.Acuerdo Confidencialidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.2.4.Fianzas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato3, 6, rutaVersion, "2.3.2.4.Fianzas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.2.5.Seguros
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato3, 6, rutaVersion, "2.3.2.5.Seguros");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.2.6.Ordenes Cambio
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato3, 6, rutaVersion, "2.3.2.6.Ordenes Cambio");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.2.7.Ordenes Trabajo Campo
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato3, 6, rutaVersion, "2.3.2.7.Ordenes Trabajo Campo");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.2.8.Estimaciones
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.2.Control Cambios");
                                    DuplicadoCarpetas(padreControlCambiosID_Subcontrato3, 6, rutaVersion, "2.3.2.8.Estimaciones");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 2.3.3.Comunicación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3");
                                    DuplicadoCarpetas(padreSubcontrato3, 5, rutaVersion, "2.3.3.Comunicación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreComunicacion_Subcontrato3 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.3.3.1.Minutas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato3, 6, rutaVersion, "2.3.3.1.Minutas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.3.2.Transmittal
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato3, 6, rutaVersion, "2.3.3.2.Transmittal");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.3.3.RFIs
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato3, 6, rutaVersion, "2.3.3.3.RFIs");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.3.4.Submittal
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato3, 6, rutaVersion, "2.3.3.4.Submittal");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.3.5.Reportes
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.3.Comunicación");
                                    DuplicadoCarpetas(padreComunicacion_Subcontrato3, 6, rutaVersion, "2.3.3.5.Reportes");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 2.3.4.Integración Subcontratista
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3");
                                    DuplicadoCarpetas(padreSubcontrato1, 5, rutaVersion, "2.3.4.Integración Subcontratista");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.5.Cierre Contrato
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3");
                                    DuplicadoCarpetas(padreSubcontrato3, 5, rutaVersion, "2.3.5.Cierre Contrato");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreCierreContratoID_Subcontrato3 = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 2.3.5.1.Acuerdo Terminación Construcción
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato3, 6, rutaVersion, "2.3.5.1.Acuerdo Terminación Construcción");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.5.2.Punch List
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato3, 6, rutaVersion, "2.3.5.2.Punch List");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.5.3.Lista Defectos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato3, 6, rutaVersion, "2.3.5.3.Lista Defectos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.5.4.Acta Terminación-Entrega Construcción
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato3, 6, rutaVersion, "2.3.5.4.Acta Terminación-Entrega Construcción");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.5.5.Documentación As-Built
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato3, 6, rutaVersion, "2.3.5.5.Documentación As-Built");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.5.6.Desmovilización
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato3, 6, rutaVersion, "2.3.5.6.Desmovilización");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.5.7.Lecciones Aprendidas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato3, 6, rutaVersion, "2.3.5.7.Lecciones Aprendidas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.5.8.Reporte Final
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato3, 6, rutaVersion, "2.3.5.8.Reporte Final");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.5.9.Checklist Cierre x Disciplina
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato3, 6, rutaVersion, "2.3.5.9.Checklist Cierre x Disciplina");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 2.3.5.10.Dossier Calidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "2.SUBCONTRATOS", "2.3.Subcontrato 3", "2.3.5.Cierre Contrato");
                                    DuplicadoCarpetas(padreCierreContratoID_Subcontrato3, 6, rutaVersion, "2.3.5.10.Dossier Calidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion
                                    #endregion
                                    #endregion

                                    #region 3.GERENCIA
                                    rutaVersion = string.Format(@"{0}\{1}\{2}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase);
                                    DuplicadoCarpetas(padreCarpetaInicial, 3, rutaVersion, "3.GERENCIA");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreGerenciaID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.1.Dirección de Proyecto
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.1.Dirección de Proyecto");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreDireccionProyectoID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.1.1.Plan de Dirección
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.1.Dirección de Proyecto");
                                    DuplicadoCarpetas(padreDireccionProyectoID, 5, rutaVersion, "3.1.1.Plan de Dirección");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.1.2.Acta Inicio Obra
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.1.Dirección de Proyecto");
                                    DuplicadoCarpetas(padreDireccionProyectoID, 5, rutaVersion, "3.1.2.Acta Inicio Obra");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.1.3.MAC
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.1.Dirección de Proyecto");
                                    DuplicadoCarpetas(padreDireccionProyectoID, 5, rutaVersion, "3.1.3.MAC");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.2.Seguridad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.2.Seguridad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreSeguridadID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.2.1.Plan de Seguridad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.2.Seguridad");
                                    DuplicadoCarpetas(padreSeguridadID, 5, rutaVersion, "3.2.1.Plan de Seguridad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.2.2.IDS
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.2.Seguridad");
                                    DuplicadoCarpetas(padreSeguridadID, 5, rutaVersion, "3.2.2.IDS");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.2.3.Análisis Seguridad x Constructabilidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.2.Seguridad");
                                    DuplicadoCarpetas(padreSeguridadID, 5, rutaVersion, "3.2.3.Análisis Seguridad x Constructabilidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.3.Calidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.3.Calidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreCalidadID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.3.1.Plan de Calidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.3.Calidad");
                                    DuplicadoCarpetas(padreCalidadID, 5, rutaVersion, "3.3.1.Plan de Calidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.3.2.Formatos Calidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.3.Calidad");
                                    DuplicadoCarpetas(padreCalidadID, 5, rutaVersion, "3.3.2.Formatos Calidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.3.3.Acreditación Laboratorios
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.3.Calidad");
                                    DuplicadoCarpetas(padreCalidadID, 5, rutaVersion, "3.3.3.Acreditación Laboratorios");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.3.4.Respaldo Topográfico
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.3.Calidad");
                                    DuplicadoCarpetas(padreCalidadID, 5, rutaVersion, "3.3.4.Respaldo Topográfico");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.3.5.Calibración Equipos de Topografía
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.3.Calidad");
                                    DuplicadoCarpetas(padreCalidadID, 5, rutaVersion, "3.3.5.Calibración Equipos de Topografía");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.3.6.Pruebas Compactación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.3.Calidad");
                                    DuplicadoCarpetas(padreCalidadID, 5, rutaVersion, "3.3.6.Pruebas Compactación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.3.7.Pruebas Resistencia Materiales
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.3.Calidad");
                                    DuplicadoCarpetas(padreCalidadID, 5, rutaVersion, "3.3.7.Pruebas Resistencia Materiales");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.3.8.Calidad Agregados
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.3.Calidad");
                                    DuplicadoCarpetas(padreCalidadID, 5, rutaVersion, "3.3.8.Calidad Agregados");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.3.9.Calidad Materiales
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.3.Calidad");
                                    DuplicadoCarpetas(padreCalidadID, 5, rutaVersion, "3.3.9.Calidad Materiales");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.3.10.Otros Reportes
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.3.Calidad");
                                    DuplicadoCarpetas(padreCalidadID, 5, rutaVersion, "3.3.10.Otros Reportes");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.4.Programación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.4.Programación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreProgramacionID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.4.1.Plan de Programación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.4.Programación");
                                    DuplicadoCarpetas(padreProgramacionID, 5, rutaVersion, "3.4.1.Plan de Programación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.4.2.Cronograma
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.4.Programación");
                                    DuplicadoCarpetas(padreProgramacionID, 5, rutaVersion, "3.4.2.Cronograma");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.4.3.Línea Base
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.4.Programación");
                                    DuplicadoCarpetas(padreProgramacionID, 5, rutaVersion, "3.4.3.Línea Base");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.4.4.Programa a 2 Semanas Adelante
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.4.Programación");
                                    DuplicadoCarpetas(padreProgramacionID, 5, rutaVersion, "3.4.4.Programa a 2 Semanas Adelante");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.4.5.Programa Nivel 3 Subcontratistas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.4.Programación");
                                    DuplicadoCarpetas(padreProgramacionID, 5, rutaVersion, "3.4.5.Programa Nivel 3 Subcontratistas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.4.6.Archivo Seguimiento
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.4.Programación");
                                    DuplicadoCarpetas(padreProgramacionID, 5, rutaVersion, "3.4.6.Archivo Seguimiento");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.4.7.Análisis Ruta Crítica
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.4.Programación");
                                    DuplicadoCarpetas(padreProgramacionID, 5, rutaVersion, "3.4.7.Análisis Ruta Crítica");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.4.8.Curva S
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.4.Programación");
                                    DuplicadoCarpetas(padreProgramacionID, 5, rutaVersion, "3.4.8.Curva S");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.4.9.Reuniones Seguimiento-Análisis Avance
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.4.Programación");
                                    DuplicadoCarpetas(padreProgramacionID, 5, rutaVersion, "3.4.9.Reuniones Seguimiento-Análisis Avance");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.5.Constructabilidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.5.Constructabilidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreConstructabilidadID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.5.1.Plan de Constructabilidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.5.Constructabilidad");
                                    DuplicadoCarpetas(padreConstructabilidadID, 5, rutaVersion, "3.5.1.Plan de Constructabilidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.5.2.Constructabilidad del Proyecto
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.5.Constructabilidad");
                                    DuplicadoCarpetas(padreConstructabilidadID, 5, rutaVersion, "3.5.2.Constructabilidad del Proyecto");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.5.3.Actualización Semanal Constructabilidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.5.Constructabilidad");
                                    DuplicadoCarpetas(padreConstructabilidadID, 5, rutaVersion, "3.5.3.Actualización Semanal Constructabilidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.6.Control Documentos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.6.Control Documentos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreControlDocumentosID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.6.1.Plan Control Documentos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.6.Control Documentos");
                                    DuplicadoCarpetas(padreControlDocumentosID, 5, rutaVersion, "3.6.1.Plan Control Documentos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.6.2.Matriz Codificación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.6.Control Documentos");
                                    DuplicadoCarpetas(padreControlDocumentosID, 5, rutaVersion, "3.6.2.Matriz Codificación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.6.3.Lista Maestra Documentos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.6.Control Documentos");
                                    DuplicadoCarpetas(padreControlDocumentosID, 5, rutaVersion, "3.6.3.Lista Maestra Documentos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.6.4.Manuales Operación y Mantenimiento
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.6.Control Documentos");
                                    DuplicadoCarpetas(padreControlDocumentosID, 5, rutaVersion, "3.6.4.Manuales Operación y Mantenimiento");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.7.Comunicación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.7.Comunicación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreComunicacionID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.7.1.Comunicación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.7.Comunicación");
                                    DuplicadoCarpetas(padreComunicacionID, 5, rutaVersion, "3.7.1.Comunicación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.7.2.Directorio Proyecto
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.7.Comunicación");
                                    DuplicadoCarpetas(padreComunicacionID, 5, rutaVersion, "3.7.2.Directorio Proyecto");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.7.3.Matriz Comunicación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.7.Comunicación");
                                    DuplicadoCarpetas(padreComunicacionID, 5, rutaVersion, "3.7.3.Matriz Comunicación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.7.4.Reporte Ejecutivo
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.7.Comunicación");
                                    DuplicadoCarpetas(padreComunicacionID, 5, rutaVersion, "3.7.4.Reporte Ejecutivo");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.7.5.Organigrama Equipo Proyecto
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.7.Comunicación");
                                    DuplicadoCarpetas(padreComunicacionID, 5, rutaVersion, "3.7.5.Organigrama Equipo Proyecto");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.7.6.Pizarrón Proyecto
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.7.Comunicación");
                                    DuplicadoCarpetas(padreComunicacionID, 5, rutaVersion, "3.7.6.Pizarrón Proyecto");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.7.7.Reporte Fotográfico
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.7.Comunicación");
                                    DuplicadoCarpetas(padreComunicacionID, 5, rutaVersion, "3.7.7.Reporte Fotográfico");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.7.8.Relación Reuniones
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.7.Comunicación");
                                    DuplicadoCarpetas(padreComunicacionID, 5, rutaVersion, "3.7.8.Relación Reuniones");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.7.9.Bitácora Obra Cliente
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.7.Comunicación");
                                    DuplicadoCarpetas(padreComunicacionID, 5, rutaVersion, "3.7.9.Bitácora Obra Cliente");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.8.Control Cambios y Costos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.8.Control Cambios y Costos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreControlCambiosCostosID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.8.1.Plan Control de Cambios
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.8.Control Cambios y Costos");
                                    DuplicadoCarpetas(padreControlCambiosCostosID, 5, rutaVersion, "3.8.1.Plan Control de Cambios");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.8.2.Relación Ordenes Cambio
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.8.Control Cambios y Costos");
                                    DuplicadoCarpetas(padreControlCambiosCostosID, 5, rutaVersion, "3.8.2.Relación Ordenes Cambio");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.9.Roles y Responsabilidades
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.9.Roles y Responsabilidades");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreRolesResponsabilidadesID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.9.1.Plan Roles y Responsabilidades
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.9.Roles y Responsabilidades");
                                    DuplicadoCarpetas(padreRolesResponsabilidadesID, 5, rutaVersion, "3.9.1.Plan Roles y Responsabilidades");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.9.2.Roles y Responsabilidades
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.9.Roles y Responsabilidades");
                                    DuplicadoCarpetas(padreRolesResponsabilidadesID, 5, rutaVersion, "3.9.2.Roles y Responsabilidades");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.9.3.Matriz CARS
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.9.Roles y Responsabilidades");
                                    DuplicadoCarpetas(padreRolesResponsabilidadesID, 5, rutaVersion, "3.9.3.Matriz CARS");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.9.4.Evaluación Gerente Proyecto
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.9.Roles y Responsabilidades");
                                    DuplicadoCarpetas(padreRolesResponsabilidadesID, 5, rutaVersion, "3.9.4.Evaluación Gerente Proyecto");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.9.5.Evaluación Desempeño Equipo Proyecto
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.9.Roles y Responsabilidades");
                                    DuplicadoCarpetas(padreRolesResponsabilidadesID, 5, rutaVersion, "3.9.5.Evaluación Desempeño Equipo Proyecto");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.10.Suministros
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.10.Suministros");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreSuministrosID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.10.1.Plan Suministros
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.10.Suministros");
                                    DuplicadoCarpetas(padreSuministrosID, 5, rutaVersion, "3.10.1.Plan Suministros");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "3.10.1.Plan Suministros");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.10.2.Contrato Renta Maquinaria y Equipo
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.10.Suministros");
                                    DuplicadoCarpetas(padreSuministrosID, 5, rutaVersion, "3.10.2.Contrato Renta Maquinaria y Equipo");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "3.10.2.Contrato Renta Maquinaria y Equipo");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.10.3.Validación Volúmenes Contractuales
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.10.Suministros");
                                    DuplicadoCarpetas(padreSuministrosID, 5, rutaVersion, "3.10.3.Validación Volúmenes Contractuales");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "3.10.3.Validación Volúmenes Contractuales");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreValidacionVolumnesContractualesID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.10.3.1.Bancos Nivel Autorizados
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.10.Suministros", "3.10.3.Validación Volúmenes Contractuales");
                                    DuplicadoCarpetas(padreValidacionVolumnesContractualesID, 6, rutaVersion, "3.10.3.1.Bancos Nivel Autorizados");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "3.10.3.1.Bancos Nivel Autorizados");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.10.3.2.Validación Volúmenes
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}\{5}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.10.Suministros", "3.10.3.Validación Volúmenes Contractuales");
                                    DuplicadoCarpetas(padreValidacionVolumnesContractualesID, 6, rutaVersion, "3.10.3.2.Validación Volúmenes");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "3.10.3.2.Validación Volúmenes");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.10.4.Matriz Suministros
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.10.Suministros");
                                    DuplicadoCarpetas(padreSuministrosID, 5, rutaVersion, "3.10.4.Matriz Suministros");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "3.10.4.Matriz Suministros");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.10.5.Evaluación Plan Suministros
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.10.Suministros");
                                    DuplicadoCarpetas(padreSuministrosID, 5, rutaVersion, "3.10.5.Evaluación Plan Suministros");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, "3.10.5.Evaluación Plan Suministros");
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.11.Movilización
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.11.Movilización");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreMovilizacionID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.11.1.Plan Movilización
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.11.Movilización");
                                    DuplicadoCarpetas(padreMovilizacionID, 5, rutaVersion, "3.11.1.Plan Movilización");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.11.2.Checklist Movilización
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.11.Movilización");
                                    DuplicadoCarpetas(padreMovilizacionID, 5, rutaVersion, "3.11.2.Checklist Movilización");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.12.Ingeniería
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.12.Ingeniería");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreIngenieria = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.12.1.Plan Ingeniería
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.12.Ingeniería");
                                    DuplicadoCarpetas(padreIngenieria, 5, rutaVersion, "3.12.1.Plan Ingeniería");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.12.2.Listados Ingeniería
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.12.Ingeniería");
                                    DuplicadoCarpetas(padreIngenieria, 5, rutaVersion, "3.12.2.Listados Ingeniería");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.12.3.Especificaciones
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.12.Ingeniería");
                                    DuplicadoCarpetas(padreIngenieria, 5, rutaVersion, "3.12.3.Especificaciones");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.12.4.Memorias Cálculo
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.12.Ingeniería");
                                    DuplicadoCarpetas(padreIngenieria, 5, rutaVersion, "3.12.4.Memorias Cálculo");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.12.5.Dibujos de Referencia
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.12.Ingeniería");
                                    DuplicadoCarpetas(padreIngenieria, 5, rutaVersion, "3.12.5.Dibujos de Referencia");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.12.6.Dibujos As-Built
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.12.Ingeniería");
                                    DuplicadoCarpetas(padreIngenieria, 5, rutaVersion, "3.12.6.Dibujos As-Built");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.13.Gestión de Riesgos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.13.Gestión de Riesgos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreGestionRiesgos = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.13.1.Plan Gestión de Riesgos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.13.Gestión de Riesgos");
                                    DuplicadoCarpetas(padreGestionRiesgos, 5, rutaVersion, "3.13.1.Plan Gestión de Riesgos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.13.2.Matriz Riesgos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.13.Gestión de Riesgos");
                                    DuplicadoCarpetas(padreGestionRiesgos, 5, rutaVersion, "3.13.2.Matriz Riesgos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.14.Integración Subcontratistas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.14.Integración Subcontratistas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreIntegracionSubcontratistasID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.14.1.Plan Integración Subcontratista
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.14.Integración Subcontratistas");
                                    DuplicadoCarpetas(padreIntegracionSubcontratistasID, 5, rutaVersion, "3.14.1.Plan Integración Subcontratista");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.14.2.Checklist Integración Subcontratista
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.14.Integración Subcontratistas");
                                    DuplicadoCarpetas(padreIntegracionSubcontratistasID, 5, rutaVersion, "3.14.2.Checklist Integración Subcontratista");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.14.3.Responsabilidades Residente Subcontratista
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.14.Integración Subcontratistas");
                                    DuplicadoCarpetas(padreIntegracionSubcontratistasID, 5, rutaVersion, "3.14.3.Responsabilidades Residente Subcontratista");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.14.4.Evaluaciones Subcontratistas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.14.Integración Subcontratistas");
                                    DuplicadoCarpetas(padreIntegracionSubcontratistasID, 5, rutaVersion, "3.14.4.Evaluaciones Subcontratistas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.14.5.Relación Evaluaciones Subcontratistas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.14.Integración Subcontratistas");
                                    DuplicadoCarpetas(padreIntegracionSubcontratistasID, 5, rutaVersion, "3.14.5.Relación Evaluaciones Subcontratistas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.15.Cierre Proyecto
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.15.Cierre Proyecto");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreCierreProyectoID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.15.1.Plan Cierre Proyecto
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.15.Cierre Proyecto");
                                    DuplicadoCarpetas(padreCierreProyectoID, 5, rutaVersion, "3.15.1.Plan Cierre Proyecto");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.15.2.Acuerdo Terminación Construcción
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.15.Cierre Proyecto");
                                    DuplicadoCarpetas(padreCierreProyectoID, 5, rutaVersion, "3.15.2.Acuerdo Terminación Construcción");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.15.3.Punch Lists
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.15.Cierre Proyecto");
                                    DuplicadoCarpetas(padreCierreProyectoID, 5, rutaVersion, "3.15.3.Punch Lists");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.15.4.Lista Defectos
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.15.Cierre Proyecto");
                                    DuplicadoCarpetas(padreCierreProyectoID, 5, rutaVersion, "3.15.4.Lista Defectos");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.15.5.Acta Terminación-Entrega Construcción
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.15.Cierre Proyecto");
                                    DuplicadoCarpetas(padreCierreProyectoID, 5, rutaVersion, "3.15.5.Acta Terminación-Entrega Construcción");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.15.6.Documentación As-Built
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.15.Cierre Proyecto");
                                    DuplicadoCarpetas(padreCierreProyectoID, 5, rutaVersion, "3.15.6.Documentación As-Built");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.15.7.Desmovilización
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.15.Cierre Proyecto");
                                    DuplicadoCarpetas(padreCierreProyectoID, 5, rutaVersion, "3.15.7.Desmovilización");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.15.8.Lecciones Aprendidas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.15.Cierre Proyecto");
                                    DuplicadoCarpetas(padreCierreProyectoID, 5, rutaVersion, "3.15.8.Lecciones Aprendidas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.15.9.Reporte Final
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.15.Cierre Proyecto");
                                    DuplicadoCarpetas(padreCierreProyectoID, 5, rutaVersion, "3.15.9.Reporte Final");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.15.10.Checklist Cierre x Disciplina
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.15.Cierre Proyecto");
                                    DuplicadoCarpetas(padreCierreProyectoID, 5, rutaVersion, "3.15.10.Checklist Cierre x Disciplina");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.15.11.Dossier Calidad
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.15.Cierre Proyecto");
                                    DuplicadoCarpetas(padreCierreProyectoID, 5, rutaVersion, "3.15.11.Dossier Calidad");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion

                                    #region 3.16.Intervención Áreas Operativas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA");
                                    DuplicadoCarpetas(padreGerenciaID, 4, rutaVersion, "3.16.Intervención Áreas Operativas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);

                                    long padreIntervencionAreasOperativasID = _ctx.tblFM_Archivo.Select(s => s.id).OrderByDescending(o => o).FirstOrDefault();

                                    #region 3.16.1.Plan Intervención Áreas Operativas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.16.Intervención Áreas Operativas");
                                    DuplicadoCarpetas(padreIntervencionAreasOperativasID, 5, rutaVersion, "3.16.1.Plan Intervención Áreas Operativas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.16.2.Calificación de Instalación
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.16.Intervención Áreas Operativas");
                                    DuplicadoCarpetas(padreIntervencionAreasOperativasID, 5, rutaVersion, "3.16.2.Calificación de Instalación");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion

                                    #region 3.16.3.Protocolo Intervención Áreas Operativas
                                    rutaVersion = string.Format(@"{0}\{1}\{2}\{3}\{4}", 2022, nombreDivision, objParamsDTO.nombreCarpetaBase, "3.GERENCIA", "3.16.Intervención Áreas Operativas");
                                    DuplicadoCarpetas(padreIntervencionAreasOperativasID, 5, rutaVersion, "3.16.3.Protocolo Intervención Áreas Operativas");
                                    rutaFisica = Path.Combine(RUTA_BASE, rutaVersion, string.Empty);
                                    lstRutasFisicasCarpetas.Add(rutaFisica);
                                    #endregion
                                    #endregion
                                    #endregion
                                }
                                break;
                            default:
                                throw new Exception("Ocurrió un error al generar la carpeta.");
                        }

                        #region SE CREAN LAS CARPETAS FISICAS
                        foreach (var rutaCarpeta in lstRutasFisicasCarpetas)
                        {
                            Directory.CreateDirectory(rutaCarpeta);
                        }
                        #endregion

                        // INDICAR H A LAS CARPETAS
                        StoreProcedureDTO spFM_IndicarHArchivosNuevos = new StoreProcedureDTO { nombre = "spFM_IndicarHArchivosNuevos" };
                        spFM_IndicarHArchivosNuevos.parametros.Add(new OdbcParameterDTO { nombre = "padreID", tipoSql = SqlDbType.Int, valor = objParamsDTO.padreID });
                        List<int> cant = _ctx.sp_Select<int>(spFM_IndicarHArchivosNuevos);

                        resultado.Add(SUCCESS, true);
                        resultado.Add(MESSAGE, "Se ha registrado con éxito la nueva carpeta.");
                        dbContextTransaction.Commit();
                    }
                    catch (Exception e)
                    {
                        #region SE ELIMINAN LAS CARPETAS FISICAS
                        try
                        {
                            Directory.Delete(rutaFisica, true);
                        }
                        catch (Exception ex)
                        {
                            LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "SE ELIMINAN LAS CARPETAS FISICAS", ex, AccionEnum.ELIMINAR, 0, null);
                        }
                        #endregion

                        dbContextTransaction.Rollback();
                        LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GenerarCarpetaDuplicado", e, AccionEnum.AGREGAR, objParamsDTO.padreID, objParamsDTO);
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, e.Message);
                    }
                }
            }
            return resultado;
        }

        /// <summary>
        /// Se guarda la información en la tabla Archivos, Versiones, Tipo archivos y se genera los permisos al usuario a las carpetas creadas
        /// </summary>
        /// <returns>Retorna mensaje de éxito al generar duplicado de nueva carpeta.</returns>
        public void DuplicadoCarpetas(long padreID, int nivel, string ruta, string nombre)
        {
            using (var _ctx = new MainContext(vSesiones.sesionEmpresaActual))
            {
                try
                {
                    tblFM_Archivo objArchivo = new tblFM_Archivo();
                    objArchivo.padreID = padreID;
                    objArchivo.nivel = nivel;
                    objArchivo.año = 2022;
                    objArchivo.esCarpeta = true;
                    objArchivo.orden = 0;
                    objArchivo.tipoCarpeta = TipoCarpetaEnum.Normal;
                    _ctx.tblFM_Archivo.Add(objArchivo);
                    _ctx.SaveChanges();

                    tblFM_Version objVersion = new tblFM_Version();
                    objVersion.archivoID = objArchivo.id;
                    objVersion.usuarioCreadorID = vSesiones.sesionUsuarioDTO.id;
                    objVersion.version = 1;
                    objVersion.ruta = ruta;
                    objVersion.nombre = nombre;
                    objVersion.fechaCreacion = DateTime.Now;
                    objVersion.activo = true;
                    _ctx.tblFM_Version.Add(objVersion);
                    _ctx.SaveChanges();

                    tblFM_ArchivotblFM_TipoArchivo objTipoArchivo = new tblFM_ArchivotblFM_TipoArchivo();
                    objTipoArchivo.archivoID = objArchivo.id;
                    objTipoArchivo.tipoArchivoID = 1;
                    _ctx.tblFM_ArchivotblFM_TipoArchivo.Add(objTipoArchivo);
                    _ctx.SaveChanges();

                    tblFM_Permiso objPermiso = new tblFM_Permiso();
                    objPermiso.usuarioID = vSesiones.sesionUsuarioDTO.id;
                    objPermiso.archivoID = objArchivo.id;
                    objPermiso.puedeSubir = true;
                    objPermiso.puedeEliminar = true;
                    objPermiso.puedeDescargarArchivo = true;
                    objPermiso.puedeDescargarCarpeta = true;
                    objPermiso.puedeActualizar = true;
                    objPermiso.puedeCrear = true;
                    objPermiso.estatusVista = 2;
                    objPermiso.FK_UsuarioCreacion = vSesiones.sesionUsuarioDTO.id;
                    objPermiso.fechaCreacion = DateTime.Now;
                    objPermiso.registroActivo = true;
                    _ctx.tblFM_Permiso.Add(objPermiso);
                    _ctx.SaveChanges();

                    tblFM_Permisos_Usuario objPermisoUsuario = new tblFM_Permisos_Usuario();
                    objPermisoUsuario.usuarioID = vSesiones.sesionUsuarioDTO.id;
                    objPermisoUsuario.archivoID = objArchivo.id;
                    objPermisoUsuario.tipoPermiso = TipoPermisoEnum.GeneralObra;
                    objPermisoUsuario.puedeSubir = true;
                    objPermisoUsuario.puedeEliminar = true;
                    objPermisoUsuario.puedeDescargarArchivo = true;
                    objPermisoUsuario.puedeDescargarCarpeta = true;
                    objPermisoUsuario.puedeActualizar = true;
                    objPermisoUsuario.puedeCrear = true;
                    objPermisoUsuario.estatusVista = 2;
                    objPermisoUsuario.FK_UsuarioCreacion = vSesiones.sesionUsuarioDTO.id;
                    objPermisoUsuario.fechaCreacion = DateTime.Now;
                    objPermisoUsuario.registroActivo = true;
                    _ctx.tblFM_Permisos_Usuario.Add(objPermisoUsuario);
                    _ctx.SaveChanges();
                }
                catch (Exception e)
                {
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "DuplicadoCarpetas", e, AccionEnum.AGREGAR, 0, new { padreID = padreID, nivel = nivel, ruta = ruta, nombre = nombre });
                }
            }
        }
        #endregion

        #region CERRAR OBRAS
        /// <summary>
        /// Se crea listado de obras para ComboBox para identificar cual se desea cerrar.
        /// </summary>
        /// <returns>Se retorna listado de obras nivel 2</returns>
        public Dictionary<string, object> FillCboCarpetasObras()
        {
            try
            {
                using (var _ctx = new MainContext(vSesiones.sesionEmpresaActual))
                {
                    #region FILL COMBO CARPETAS BASES
                    List<ComboDTO> lstCarpetasBase = _ctx.Select<ComboDTO>(new DapperDTO
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = @"SELECT t1.archivoID AS VALUE, UPPER(t1.nombre) AS TEXT, t1.ruta AS PREFIJO
	                                        FROM tblFM_Version AS t1 
	                                        INNER JOIN tblFM_Archivo AS t2 ON t2.id = t1.archivoID
		                                        WHERE t1.activo = @activo AND t2.año = @anio AND esCarpeta = @esCarpeta AND t2.nivel = @nivel AND t1.obraCerrada = @obraCerrada 
                                                    ORDER BY t1.ruta",
                        parametros = new { activo = true, anio = 2022, esCarpeta = true, nivel = 2, obraCerrada = false }
                    }).ToList();

                    foreach (var item in lstCarpetasBase)
                    {
                        string[] arrRuta = item.Prefijo.Split('\\');
                        if (arrRuta.Length >= 1)
                            item.Prefijo = arrRuta[1];
                    }

                    resultado.Add(SUCCESS, true);
                    resultado.Add(ITEMS, lstCarpetasBase);
                    #endregion
                }
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "FillCboCarpetasBases", e, AccionEnum.CONSULTA, 0, null);
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }
            return resultado;
        }

        /// <summary>
        /// Se agrega al nombre de la carpeta: " | Obra Cerrada" y se cambia su estatus a obra cerrada.
        /// </summary>
        /// <param name="idArchivo"></param>
        /// <returns>Retorna diccionario indicando la respuesta si se cerro con éxito o no la obra.</returns>
        public Dictionary<string, object> CerrarObra(int idArchivo)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                using (var _ctx = new MainContext(vSesiones.sesionEmpresaActual))
                {
                    try
                    {
                        #region SE CIERRA LA OBRA SELECCIONADA
                        tblFM_Archivo objArchivo = _ctx.tblFM_Archivo.Where(w => w.id == idArchivo).FirstOrDefault();
                        if (objArchivo == null)
                            throw new Exception("Ocurrió un error al obtener la información de la obra a cerrar.");

                        tblFM_Version objVersion = _ctx.tblFM_Version.Where(w => w.archivoID == objArchivo.id && w.activo).FirstOrDefault();
                        if (objVersion == null)
                            throw new Exception("Ocurrió un error al obtener la información de la obra a cerrar.");

                        objVersion.nombre = string.Format("{0} {1}", objVersion.nombre, "| OBRA CERRADA");
                        objVersion.obraCerrada = true;
                        _ctx.SaveChanges();

                        resultado.Add(SUCCESS, true);
                        resultado.Add(MESSAGE, "Se ha cerrado la obra con éxito.");
                        dbContextTransaction.Commit();
                        #endregion

                        #region SE REGISTRA BITACORA
                        SaveBitacora(0, idArchivo <= 0 ? (int)AccionEnum.AGREGAR : (int)AccionEnum.ACTUALIZAR, idArchivo, JsonUtils.convertNetObjectToJson(idArchivo));
                        #endregion
                    }
                    catch (Exception e)
                    {
                        dbContextTransaction.Rollback();
                        LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "CerrarObra", e, AccionEnum.ACTUALIZAR, idArchivo, new { idArchivo = idArchivo });
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, e.Message);
                    }
                }
            }
            return resultado;
        }
        #endregion

        #region GENERAL
        private void SetIndicarHArchivosNuevos(long padreID, long idArchivo, int idUsuario)
        {
            try
            {
                StoreProcedureDTO spFM_IndicarHArchivosNuevos = new StoreProcedureDTO { nombre = "spFM_IndicarHArchivosNuevosV2" };
                spFM_IndicarHArchivosNuevos.parametros.Add(new OdbcParameterDTO { nombre = "padreID", tipoSql = SqlDbType.Int, valor = padreID });
                spFM_IndicarHArchivosNuevos.parametros.Add(new OdbcParameterDTO { nombre = "idArchivo", tipoSql = SqlDbType.Int, valor = idArchivo });
                spFM_IndicarHArchivosNuevos.parametros.Add(new OdbcParameterDTO { nombre = "idUsuario", tipoSql = SqlDbType.Int, valor = idUsuario });
                List<int> cant = _context.sp_Select<int>(spFM_IndicarHArchivosNuevos);
            }
            catch (Exception e)
            {
                var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.ACTUALIZAR, 0, new { padreID = padreID });
            }
        }

        public Dictionary<string, object> GetPermisoAcciones()
        {
            try
            {
                bool puedeGenerarCarpetaBase = false;
                bool puedeCerrarObra = false;
                if (vSesiones.sesionUsuarioDTO.idPerfil == 1 || vSesiones.sesionUsuarioDTO.id == USUARIO_GUADALUPE_TRINIDAD_ID)
                {
                    puedeGenerarCarpetaBase = true;
                    puedeCerrarObra = true;
                }

                resultado.Add(SUCCESS, true);
                resultado.Add("puedeGenerarCarpetaBase", puedeGenerarCarpetaBase);
                resultado.Add("puedeCerrarObra", puedeCerrarObra);
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetPermisoAcciones", e, AccionEnum.CONSULTA, 0, null);
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }
            return resultado;
        }
        #endregion

        public Dictionary<string, object> copiadoBase()
        {
            using (var transaccion = _context.Database.BeginTransaction())
            {
                try
                {
                    var fecha = DateTime.Now.Date;

                    string nombreNuevaCarpeta = "XYX - PRUEBA";
                    int idDelArchivoDondeSeCrearaLaCarpeta = 1;
                    var padreBase = _context.tblFM_Archivo.FirstOrDefault(x => x.id == 7);
                    var padreBaseVersion = _context.tblFM_Version.FirstOrDefault(x => x.archivoID == 7);

                    var nuevoArchivoPadre = new tblFM_Archivo();
                    var nuevoArchivoPadreVersion = new tblFM_Version();

                    var rutasFisicasCarpetas = new List<string>();

                    var archivoDondeSeCrearaLaNuevaCarpeta = _context.tblFM_Archivo.FirstOrDefault(x => x.id == idDelArchivoDondeSeCrearaLaCarpeta);
                    var archivoDondeSeCrearaLaNuevaCarpetaVersion = _context.tblFM_Version.FirstOrDefault(x => x.archivoID == idDelArchivoDondeSeCrearaLaCarpeta);

                    int ordenSiguiente = _context.tblFM_Archivo.Where(x => x.padreID == idDelArchivoDondeSeCrearaLaCarpeta).Select(x => x.orden).OrderByDescending(x => x).FirstOrDefault();

                    nuevoArchivoPadre.padreID = idDelArchivoDondeSeCrearaLaCarpeta;
                    nuevoArchivoPadre.nivel = archivoDondeSeCrearaLaNuevaCarpeta.nivel + 1;
                    nuevoArchivoPadre.año = archivoDondeSeCrearaLaNuevaCarpeta.año;
                    nuevoArchivoPadre.divisionID = archivoDondeSeCrearaLaNuevaCarpeta.divisionID;
                    nuevoArchivoPadre.subdivisionID = archivoDondeSeCrearaLaNuevaCarpeta.subdivisionID;
                    nuevoArchivoPadre.ccID = 0;
                    nuevoArchivoPadre.esCarpeta = padreBase.esCarpeta;
                    nuevoArchivoPadre.orden = ordenSiguiente;
                    nuevoArchivoPadre.perteneceSeguridad = padreBase.perteneceSeguridad;
                    nuevoArchivoPadre.tipoCarpeta = padreBase.tipoCarpeta;
                    _context.tblFM_Archivo.Add(nuevoArchivoPadre);
                    _context.SaveChanges();

                    var tipoArchivo = new tblFM_ArchivotblFM_TipoArchivo();
                    tipoArchivo.archivoID = nuevoArchivoPadre.id;
                    tipoArchivo.tipoArchivoID = 1;
                    _context.tblFM_ArchivotblFM_TipoArchivo.Add(tipoArchivo);
                    _context.SaveChanges();

                    nuevoArchivoPadreVersion.archivoID = nuevoArchivoPadre.id;
                    nuevoArchivoPadreVersion.usuarioCreadorID = 6571;
                    nuevoArchivoPadreVersion.version = 1;
                    nuevoArchivoPadreVersion.ruta = archivoDondeSeCrearaLaNuevaCarpetaVersion.ruta;
                    nuevoArchivoPadreVersion.nombre = nombreNuevaCarpeta;
                    nuevoArchivoPadreVersion.fechaCreacion = fecha;
                    nuevoArchivoPadreVersion.fechaEdicion = fecha;
                    nuevoArchivoPadreVersion.numeroArchivo = 0;
                    nuevoArchivoPadreVersion.activo = true;
                    nuevoArchivoPadreVersion.abreviacion = "";
                    nuevoArchivoPadreVersion.considerarse = false;
                    _context.tblFM_Version.Add(nuevoArchivoPadreVersion);
                    _context.SaveChanges();

                    var rutaFisicaCarpetaObra = Path.Combine(RUTA_BASE, nuevoArchivoPadreVersion.ruta, nuevoArchivoPadreVersion.nombre);
                    rutasFisicasCarpetas.Add(rutaFisicaCarpetaObra);

                    var hijosBase = _context.tblFM_Archivo.Where(x => x.padreID == padreBase.id).ToList();

                    var relacion = new List<CopiadoBaseIdsDTO>();

                    do
                    {
                        foreach (var hijoBase in hijosBase)
                        {
                            var nuevoArchivoHijo = new tblFM_Archivo();
                            var nuevoArchivoHijoVersion = new tblFM_Version();

                            var padreDelHijo = relacion.FirstOrDefault(x => x.idBase == hijoBase.padreID);
                            relacion.Remove(padreDelHijo);

                            var hijoBaseVersion = _context.tblFM_Version.FirstOrDefault(x => x.archivoID == hijoBase.id);

                            if (padreDelHijo != null)
                            {
                                var idNueva = padreDelHijo.idNueva;
                                var entidadPadreDelHijo = _context.tblFM_Archivo.FirstOrDefault(x => x.id == idNueva);
                                nuevoArchivoHijo.padreID = entidadPadreDelHijo.id;
                                nuevoArchivoHijo.nivel = entidadPadreDelHijo.nivel + 1;
                                nuevoArchivoHijo.año = hijoBase.año;
                                nuevoArchivoHijo.divisionID = hijoBase.divisionID;
                                nuevoArchivoHijo.subdivisionID = hijoBase.subdivisionID;
                                nuevoArchivoHijo.ccID = 0;
                                nuevoArchivoHijo.esCarpeta = hijoBase.esCarpeta;
                                nuevoArchivoHijo.orden = hijoBase.orden;
                                nuevoArchivoHijo.tipoCarpeta = hijoBase.tipoCarpeta;
                                _context.tblFM_Archivo.Add(nuevoArchivoHijo);
                                _context.SaveChanges();

                                var entidadPadreDelHijoVersion = _context.tblFM_Version.FirstOrDefault(x => x.archivoID == idNueva);
                                nuevoArchivoHijoVersion.archivoID = nuevoArchivoHijo.id;
                                nuevoArchivoHijoVersion.usuarioCreadorID = 6571;
                                nuevoArchivoHijoVersion.version = 1;
                                nuevoArchivoHijoVersion.ruta = entidadPadreDelHijoVersion.ruta + @"\" + entidadPadreDelHijoVersion.nombre;
                                nuevoArchivoHijoVersion.nombre = hijoBaseVersion != null ? hijoBaseVersion.nombre : "7939OMAR";
                                nuevoArchivoHijoVersion.fechaCreacion = fecha;
                                nuevoArchivoHijoVersion.fechaEdicion = fecha;
                                nuevoArchivoHijoVersion.numeroArchivo = 0;
                                nuevoArchivoHijoVersion.activo = true;
                                nuevoArchivoHijoVersion.abreviacion = "";
                                nuevoArchivoHijoVersion.considerarse = false;
                                _context.tblFM_Version.Add(nuevoArchivoHijoVersion);
                                _context.SaveChanges();
                            }
                            else
                            {
                                nuevoArchivoHijo.padreID = nuevoArchivoPadre.id;
                                nuevoArchivoHijo.nivel = nuevoArchivoPadre.nivel + 1;
                                nuevoArchivoHijo.año = nuevoArchivoPadre.año;
                                nuevoArchivoHijo.divisionID = nuevoArchivoPadre.divisionID;
                                nuevoArchivoHijo.subdivisionID = nuevoArchivoPadre.subdivisionID;
                                nuevoArchivoHijo.ccID = 0;
                                nuevoArchivoHijo.esCarpeta = hijoBase.esCarpeta;
                                nuevoArchivoHijo.orden = hijoBase.orden;
                                nuevoArchivoHijo.tipoCarpeta = hijoBase.tipoCarpeta;
                                _context.tblFM_Archivo.Add(nuevoArchivoHijo);
                                _context.SaveChanges();

                                nuevoArchivoHijoVersion.archivoID = nuevoArchivoHijo.id;
                                nuevoArchivoHijoVersion.usuarioCreadorID = 6571;
                                nuevoArchivoHijoVersion.version = 1;
                                nuevoArchivoHijoVersion.ruta = nuevoArchivoPadreVersion.ruta + @"\" + nuevoArchivoPadreVersion.nombre;
                                nuevoArchivoHijoVersion.nombre = hijoBaseVersion != null ? hijoBaseVersion.nombre : "7939OMAR";
                                nuevoArchivoHijoVersion.fechaCreacion = fecha;
                                nuevoArchivoHijoVersion.fechaEdicion = fecha;
                                nuevoArchivoHijoVersion.numeroArchivo = 0;
                                nuevoArchivoHijoVersion.activo = true;
                                nuevoArchivoHijoVersion.abreviacion = "";
                                nuevoArchivoHijoVersion.considerarse = false;
                                _context.tblFM_Version.Add(nuevoArchivoHijoVersion);
                                _context.SaveChanges();
                            }

                            var rutaFisicaSubCarpetaObra = Path.Combine(RUTA_BASE, nuevoArchivoHijoVersion.ruta, nuevoArchivoHijoVersion.nombre);
                            rutasFisicasCarpetas.Add(rutaFisicaSubCarpetaObra);

                            var tipoArchivoHijo = new tblFM_ArchivotblFM_TipoArchivo();
                            tipoArchivoHijo.archivoID = nuevoArchivoHijo.id;
                            tipoArchivoHijo.tipoArchivoID = 1;
                            _context.tblFM_ArchivotblFM_TipoArchivo.Add(tipoArchivoHijo);
                            _context.SaveChanges();

                            relacion.Add(new CopiadoBaseIdsDTO
                            {
                                idBase = hijoBase.id,
                                idNueva = nuevoArchivoHijo.id
                            });
                        }

                        var relacionIds = relacion.Select(x => x.idBase).ToList();

                        hijosBase = _context.tblFM_Archivo.Where(x => relacionIds.Contains(x.padreID)).ToList();
                    } while (hijosBase.Count > 0);

                    foreach (var rutaCarpeta in rutasFisicasCarpetas)
                    {
                        Directory.CreateDirectory(rutaCarpeta);
                    }

                    var xyx = true;
                    resultado.Add(SUCCESS, true);
                    resultado.Add(MESSAGE, "Éxito");
                    transaccion.Commit();
                }
                catch (Exception ex)
                {
                    transaccion.Rollback();
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, ex);
                }
                return resultado;
            }
        }

        public void SandBox()
        {
            //using (var dbContextTransaction = _context.Database.BeginTransaction())
            //{
            //    try
            //    {
            //        using (var _ctx = new MainContext(vSesiones.sesionEmpresaActual))
            //        {
            // SE RENOMBRA LA RUTA, AGREGANDO COMO INICIO LA CARPETA 2022
            //List<tblFM_Version> lstVersiones = _ctx.tblFM_Version.ToList();
            //foreach (var item in lstVersiones)
            //{
            //    string ruta = item.ruta;
            //    if (!string.IsNullOrEmpty(ruta))
            //        item.ruta = ruta.Replace(@"CONSTRUCCIÓN PESADA", @"2022");

            //    _ctx.SaveChanges();
            //}

            // SE INCREMENTA EN 1 EL NIVEL DE TODAS LAS CARPETAS Y ARCHIVOS
            //List<tblFM_Archivo> lstArchivos = _ctx.tblFM_Archivo.ToList();
            //foreach (var item in lstArchivos)
            //{
            //    int nivel = item.nivel;
            //    item.nivel += 1;
            //    _ctx.SaveChanges();
            //}
            //dbContextTransaction.Commit();
            //        }
            //    }
            //    catch (Exception e)
            //    {
            //        dbContextTransaction.Rollback();
            //        LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "SandBox", e, AccionEnum.CONSULTA, 0, null);
            //    }
            //}
        }
    }
}