using Core.DAO.Enkontrol.General.CC;
using Core.DAO.RecursosHumanos.Reclutamientos;
using Core.DTO;
using Core.DTO.Enkontrol.Tablas.CC;
using Core.DTO.Enkontrol.Tablas.RH.Empleado;
using Core.DTO.Maquinaria.Mantenimiento;
using Core.DTO.Principal.Generales;
using Core.DTO.RecursosHumanos.Enkontrol;
using Core.DTO.RecursosHumanos.Reclutamientos;
using Core.DTO.RecursosHumanos.Reclutamientos.Requisicion;
using Core.DTO.Utils.Data;
using Core.Entity.Administrativo.RecursosHumanos.Enkontrol;
using Core.Entity.Administrativo.RecursosHumanos.Reclutamientos;
using Core.Entity.Maquinaria.Mantenimiento;
using Core.Entity.Administrativo.Seguridad.Capacitacion;
using Core.Entity.Principal.Alertas;
using Core.Entity.Principal.Catalogos;
using Core.Entity.Principal.Multiempresa;
using Core.Entity.Principal.Usuarios;
using Core.Entity.RecursosHumanos.Captura;
using Core.Entity.RecursosHumanos.Catalogo;
using Core.Entity.RecursosHumanos.Reclutamientos;
using Core.Enum;
using Core.Enum.Multiempresa;
using Core.Enum.Principal;
using Core.Enum.Principal.Bitacoras;
using Core.Enum.Principal.Usuario;
using Core.Enum.RecursosHumanos.Reclutamientos;
using Data.EntityFramework;
using Data.EntityFramework.Context;
using Data.EntityFramework.Generic;
using Data.Factory.Enkontrol.General.CC;
using Infrastructure.Utils;
using OfficeOpenXml;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Odbc;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Web;
using Core.Entity.Principal.Menus;
using System.Data;
using NPOI.SS.UserModel;
using Core.DTO.Utils;
using System.Data.SqlClient;
using Core.Entity.Administrativo.FacultamientosDpto;
using Core.Entity.Administrativo.RecursosHumanos.Tabuladores;
using Core.Enum.RecursosHumanos.Tabuladores;
using Core.DTO.RecursosHumanos.Tabuladores;
using Core.Entity.RecursosHumanos.Bajas;
using Core.DTO.RecursosHumanos.Starsoft;
using Core.Enum.Administracion.Seguridad.Capacitacion;
using OfficeOpenXml.Table;
using Core.Enum.RecursosHumanos.CatNotificantes;

namespace Data.DAO.RecursosHumanos.Reclutamientos
{
    public class ReclutamientosDAO : GenericDAO<tblRH_REC_Solicitudes>, IReclutamientosDAO
    {
        private Dictionary<string, object> resultado = new Dictionary<string, object>();
        private string NombreControlador = "ReclutamientosController";
        private string _NOMBRE_CONTROLADOR = "ReclutamientosController";
        private int _SISTEMA = (int)SistemasEnum.RH;
        private bool productivo = Convert.ToString(System.Web.Configuration.WebConfigurationManager.AppSettings["enkontrolProductivo"]) == "1";

        ICCDAO _ccFS = new CCFactoryService().getCCService();
        ICCDAO _ccFS_SP = new CCFactoryService().getCCServiceSP();

        #region RUTAS CARPETAS

        #region ARCHIVOS | CONTRATOS FIRMADOS
        private readonly string RutaContratosFirmados = @"C:\dev\sisi_ext\DOCUMENTOS\CAPITALHUMANO\RECLUTAMIENTOS\CONTRATOS_FIRMADOS";
        private const string RutaLocalContratosFirmados = @"C:\dev\sisi_ext\DOCUMENTOS\CAPITALHUMANO\RECLUTAMIENTOS\CONTRATOS_FIRMADOS";
        private readonly string RutaExpedientesDigitales = @"C:\dev\sisi_ext\DOCUMENTOS\CAPITALHUMANO\RECLUTAMIENTOS\EXPEDIENTES_DIGITALES";
        private readonly string RutaExpedientesDigitalesLocal = @"C:\dev\sisi_ext\DOCUMENTOS\CAPITALHUMANO\RECLUTAMIENTOS\EXPEDIENTES_DIGITALES";
        private readonly string RutaFotosEmpleadosLocal = @"C:\dev\sisi_ext\DOCUMENTOS\CAPITALHUMANO\RECLUTAMIENTOS\FOTOS_EMPLEADOS";
        private readonly string RutaFotosEmpleados = @"C:\dev\sisi_ext\DOCUMENTOS\CAPITALHUMANO\RECLUTAMIENTOS\FOTOS_EMPLEADOS";
        private readonly string RutaDescriptores = @"C:\dev\sisi_ext\DOCUMENTOS\CAPITALHUMANO\RECLUTAMIENTOS\PUESTOS\DESCRIPTORES";
        private readonly string RutaDescriptoresLocal = @"C:\dev\sisi_ext\DOCUMENTOS\CAPITALHUMANO\RECLUTAMIENTOS\PUESTOS\DESCRIPTORES";
        private readonly string _RUTA_SUSTENTO_HIJOS = @"C:\dev\sisi_ext\DOCUMENTOS\CAPITALHUMANO\RECLUTAMIENTO\SUSTENTO_HIJOS";
        private readonly string RutaBaseRegPat = @"C:\dev\sisi_ext\DOCUMENTOS\CAPITALHUMANO\RECLUTAMIENTOS\REGISTRO_PATRONAL";
        private readonly string RutaLocalRegPat = @"C:\dev\sisi_ext\DOCUMENTOS\CAPITALHUMANO\RECLUTAMIENTOS\REGISTRO_PATRONAL";
        #endregion

        #endregion

        #region RUTAS PARA SUBIR ARCHIVOS
        private readonly string RutaServidor;
        public ReclutamientosDAO()
        {
            resultado.Clear();

#if DEBUG
            RutaServidor = @"C:\Proyectos\SIGOPLANv2\RECLUTAMIENTOS";
            _RUTA_SUSTENTO_HIJOS = @"C:\Proyecto\SIGOPLANPERU\CAPITAL_HUMANO\SUSTENTO_HIJOS";
#else
            RutaServidor = @"C:\dev\sisi_ext\DOCUMENTOS\CAPITALHUMANO\RECLUTAMIENTOS";
#endif
        }
        #endregion

        #region SOLICITUDES
        public List<SolicitudesDTO> GetSolicitudes(SolicitudesDTO objFiltro)
        {
            try
            {
                string strQuery = string.Empty;

                bool solicitudesConclusas = objFiltro.solicitudesConclusas;

                #region SE OBTIENE LISTADO DE PAISES, ESTADOS Y CIUDADES
                //PAISES
                //strQuery = string.Empty;
                //strQuery = @"SELECT clave_pais, descripcion, nacionalidad FROM sn_paises";
                var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                //odbc.consulta = String.Format(strQuery);
                //List<dynamic> lstPaises = Data.EntityFramework.Context._contextEnkontrol.Select<dynamic>((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? EnkontrolAmbienteEnum.Rh : EnkontrolAmbienteEnum.RhArre, odbc);
                var lstPaises = _context.tblRH_EK_Paises.ToList();

                //ESTADOS
                //strQuery = string.Empty;
                //strQuery = @"SELECT clave_pais, clave_estado, desc_edo_curp, descripcion FROM sn_estados";
                //odbc = new OdbcConsultaDTO() { consulta = strQuery };
                //odbc.consulta = String.Format(strQuery);
                //List<dynamic> lstEstados = Data.EntityFramework.Context._contextEnkontrol.Select<dynamic>((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? EnkontrolAmbienteEnum.Rh : EnkontrolAmbienteEnum.RhArre, odbc);
                var lstEstados = _context.tblRH_EK_Estados.ToList();

                //CIUDADES
                //strQuery = string.Empty;
                //strQuery = @"SELECT clave_pais, clave_estado, clave_ciudad, descripcion FROM sn_ciudades";
                //odbc = new OdbcConsultaDTO() { consulta = strQuery };
                //odbc.consulta = String.Format(strQuery);
                //List<dynamic> lstMunicipios = Data.EntityFramework.Context._contextEnkontrol.Select<dynamic>((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? EnkontrolAmbienteEnum.Rh : EnkontrolAmbienteEnum.RhArre, odbc);
                var lstMunicipios = _context.tblRH_EK_Cuidades.ToList();
                #endregion

                #region SE OBTIENE LISTADO DE PUESTOS ENKONTROL
                //strQuery = string.Empty;
                //List<PuestosDTO> lstPuestos = new List<PuestosDTO>();
                //strQuery = @"SELECT puesto, descripcion FROM si_puestos";
                //odbc = new OdbcConsultaDTO() { consulta = strQuery };
                //odbc.consulta = String.Format(strQuery);
                //lstPuestos = Data.EntityFramework.Context._contextEnkontrol.Select<PuestosDTO>(EnkontrolAmbienteEnum.Rh, odbc);
                var lstPuestos = _context.tblRH_EK_Puestos.Select(x => new PuestosDTO { puesto = x.puesto.ToString(), descripcion = x.descripcion }).ToList();
                #endregion

                #region SE OBTIENE LISTADO DE CC ENKONTOL
                //List<Core.DTO.RecursosHumanos.CCDTO> lstCC = new List<Core.DTO.RecursosHumanos.CCDTO>();
                //strQuery = @"SELECT cc, descripcion FROM cc";
                //odbc = new OdbcConsultaDTO() { consulta = strQuery };
                //odbc.consulta = String.Format(strQuery);
                //lstCC = Data.EntityFramework.Context._contextEnkontrol.Select<Core.DTO.RecursosHumanos.CCDTO>(EnkontrolAmbienteEnum.Prod, odbc);

                //var lstCC = _ccFS_SP.GetCCs().Select(x => new Core.DTO.RecursosHumanos.CCDTO 
                var lstCC = _ccFS_SP.GetCCsNomina(null).Select(x => new Core.DTO.RecursosHumanos.CCDTO
                {
                    cc = x.cc,
                    descripcion = x.descripcion
                });
                #endregion

                #region SE OBTIENE LAS SOLICITUDES QUE FUERON RECHAZADAS
                List<tblRH_REC_GestionSolicitudes> lstSolicitudesRechazadas = _context.tblRH_REC_GestionSolicitudes.Where(w => !w.esAutorizada && w.esActivo).ToList();
                #endregion

                #region LISTADO DE SOLICITUDES
                List<SolicitudesDTO> lstSolicitudes = _context.tblRH_REC_Solicitudes
                    .Where(x => x.esActivo &&
                        (objFiltro.cc != null ? x.cc == objFiltro.cc : true) &&
                        (objFiltro.idPuesto > 0 ? x.idPuesto == objFiltro.idPuesto : objFiltro.idPuesto == 0 && !string.IsNullOrEmpty(objFiltro.puesto) ? x.puesto.Contains(objFiltro.puesto) : true) &&
                        (!solicitudesConclusas ? x.cantVacantes > x.cantVacantesCubiertas : x.cantVacantes <= x.cantVacantesCubiertas))
                    .Select(x => new SolicitudesDTO
                    {
                        id = x.id,
                        cc = x.cc,
                        idPuesto = x.idPuesto,
                        puesto = x.puesto,
                        //clave_depto = x.clave_depto,
                        esGeneral = x.esGeneral,
                        idMotivo = x.idMotivo,
                        motivo = x.idMotivo > 0 ? x.virtualLstMotivos.motivo : string.Empty,
                        sexo = x.sexo,
                        rangoInicioEdad = x.rangoInicioEdad,
                        rangoFinEdad = x.rangoFinEdad,
                        idEscolaridad = x.idEscolaridad,
                        escolaridad = x.idEscolaridad > 0 ? x.virtualLstEscolaridades.escolaridad : string.Empty,
                        clave_pais_nac = x.clave_pais_nac,
                        pais = string.Empty,
                        clave_estado_nac = x.clave_estado_nac,
                        estado = string.Empty,
                        clave_ciudad_nac = x.clave_ciudad_nac,
                        ciudad = string.Empty,
                        aniosExp = x.aniosExp,
                        conocimientoGen = x.conocimientoGen,
                        expEspecializada = x.expEspecializada,
                        cantVacantes = x.cantVacantes,
                        cantVacantesCubiertas = x.cantVacantesCubiertas,
                        esPuestoNuevo = x.esPuestoNuevo,
                        fechaCreacion = x.fechaCreacion,
                        fechaAltaUltimaVacante = x.fechaAltaUltimaVacante,
                        solicitudesConclusas = solicitudesConclusas
                    }).ToList();
                foreach (var item in lstSolicitudes)
                {
                    #region SE OBTIENE LA DESCRIPCIÓN DEL CC
                    string descripcion = string.Empty;
                    if (!string.IsNullOrEmpty(item.cc))
                        descripcion = lstCC.Where(w => w.cc == item.cc).Select(s => s.descripcion).FirstOrDefault();

                    if (!string.IsNullOrEmpty(descripcion))
                        item.ccDescripcion = string.Format("[{0}] {1}", item.cc, descripcion);
                    #endregion

                    #region SE OBTIENE LA DESCRIPCIÓN DEL PUESTO EN CASO QUE idPuesto SEA MAYOR A 0
                    if (item.idPuesto > 0)
                    {
                        string idPuesto = item.idPuesto.ToString();
                        item.puesto = lstPuestos.Where(w => w.puesto == idPuesto).Count() > 0 ? lstPuestos.Where(w => w.puesto == idPuesto).Select(s => s.descripcion).FirstOrDefault() : "-";
                    }
                    #endregion

                    #region SE OBTIENE EL PAIS, ESTADO Y CIUDAD
                    if (item.clave_pais_nac > 0 && item.clave_estado_nac > 0 && item.clave_ciudad_nac > 0)
                    {
                        string pais = string.Empty;
                        pais = lstPaises.Where(w => w.clave_pais == item.clave_pais_nac).Select(s => s.descripcion).FirstOrDefault();
                        item.pais = pais.ToUpper();

                        string estado = string.Empty;
                        estado = lstEstados.Where(w => w.clave_pais == item.clave_pais_nac && w.clave_estado == item.clave_estado_nac).Select(s => s.descripcion).FirstOrDefault();
                        item.estado = estado.ToUpper();

                        string ciudad = string.Empty;
                        ciudad = lstMunicipios.Where(w => w.clave_pais == item.clave_pais_nac && w.clave_estado == item.clave_estado_nac && w.clave_cuidad == item.clave_ciudad_nac).Select(s => s.descripcion).FirstOrDefault();
                        item.ciudad = ciudad.ToUpper();
                    }
                    #endregion
                }
                #endregion

                #region SE OBTIENE SOLAMENTE LAS SOLICITUDES QUE SIGUEN AUTORIZADAS
                List<SolicitudesDTO> lstSolicitudesAprobadas = lstSolicitudes.Where(w => !lstSolicitudesRechazadas.Select(s => s.id).Contains(w.id)).ToList();
                #endregion

                #region SE CREA BITACORA
                SaveBitacora(16, (int)AccionEnum.CONSULTA, 0, JsonUtils.convertNetObjectToJson(objFiltro));
                #endregion

                var permisosUsuarioCC = _context.tblRH_BN_Usuario_CC.Where(x => x.usuarioID == vSesiones.sesionUsuarioDTO.id).ToList();

                lstSolicitudesAprobadas = lstSolicitudesAprobadas.Where(x => (permisosUsuarioCC.Count() > 0 ? !permisosUsuarioCC.Any(y => y.cc == "*") ? permisosUsuarioCC.Select(y => y.cc).ToList().Contains(x.cc) : true : false)).ToList();

                return lstSolicitudesAprobadas;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "GetSolicitudes", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }

        public bool CrearSolicitud(tblRH_REC_Solicitudes objSolicitud)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
                try
                {
                    #region SE CREA LA SOLICITUD
                    tblRH_REC_Solicitudes objGuardar = new tblRH_REC_Solicitudes();
                    objGuardar.cc = objSolicitud.cc.Trim();
                    objGuardar.idPuesto = objSolicitud.idPuesto;
                    objGuardar.puesto = !string.IsNullOrEmpty(objSolicitud.puesto) ? objSolicitud.puesto.Trim() : string.Empty;
                    //objGuardar.clave_depto = objSolicitud.clave_depto > 0 ? objSolicitud.clave_depto : 0; //clave_depto
                    objGuardar.esGeneral = objSolicitud.esGeneral;
                    objGuardar.idMotivo = objSolicitud.idMotivo;
                    objGuardar.sexo = !string.IsNullOrEmpty(objSolicitud.sexo) ? objSolicitud.sexo.Trim() : string.Empty;
                    objGuardar.rangoInicioEdad = objSolicitud.rangoInicioEdad;
                    objGuardar.rangoFinEdad = objSolicitud.rangoFinEdad;
                    objGuardar.idEscolaridad = objSolicitud.idEscolaridad;
                    objGuardar.clave_pais_nac = objSolicitud.clave_pais_nac > 0 ? objSolicitud.clave_pais_nac : 0;
                    objGuardar.clave_estado_nac = objSolicitud.clave_estado_nac > 0 ? objSolicitud.clave_estado_nac : 0;
                    objGuardar.clave_ciudad_nac = objSolicitud.clave_ciudad_nac > 0 ? objSolicitud.clave_ciudad_nac : 0;
                    objGuardar.aniosExp = objSolicitud.aniosExp;
                    objGuardar.conocimientoGen = !string.IsNullOrEmpty(objSolicitud.conocimientoGen) ? objSolicitud.conocimientoGen.Trim() : string.Empty;
                    objGuardar.expEspecializada = !string.IsNullOrEmpty(objSolicitud.expEspecializada) ? objSolicitud.expEspecializada.Trim() : string.Empty;
                    objGuardar.cantVacantes = objSolicitud.cantVacantes;
                    objGuardar.esPuestoNuevo = objSolicitud.esPuestoNuevo;
                    objGuardar.fechaCreacion = DateTime.Now;
                    objGuardar.fechaModificacion = new DateTime(2000, 01, 01);
                    objGuardar.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                    objGuardar.esActivo = true;
                    _context.tblRH_REC_Solicitudes.Add(objGuardar);
                    _context.SaveChanges();
                    #endregion

                    #region SE OBTIENE EL ID DE LA SOLICITUD QUE SE ACABA DE REGISTRAR
                    int idSolicitud = _context.tblRH_REC_Solicitudes.Where(w => w.esActivo).OrderByDescending(o => o.id).Select(s => s.id).FirstOrDefault();
                    #endregion

                    #region SE CREA LA GESTIÓN
                    tblRH_REC_GestionSolicitudes objGuardarGestion = new tblRH_REC_GestionSolicitudes();
                    objGuardarGestion.idSolicitud = idSolicitud;
                    objGuardarGestion.esAutorizada = true;
                    objGuardarGestion.fechaCreacion = DateTime.Now;
                    objGuardarGestion.fechaModificacion = new DateTime(2000, 01, 01);
                    objGuardarGestion.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                    objGuardarGestion.esActivo = true;
                    _context.tblRH_REC_GestionSolicitudes.Add(objGuardarGestion);
                    _context.SaveChanges();
                    #endregion

                    #region SE CREA BITACORA
                    dbContextTransaction.Commit();
                    SaveBitacora(16, (int)AccionEnum.AGREGAR, idSolicitud, JsonUtils.convertNetObjectToJson(objSolicitud));
                    #endregion

                    return true;
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(16, 16, "ReclutamientosController", "CrearSolicitud", e, AccionEnum.AGREGAR, 0, objSolicitud);
                    return false;
                }
        }

        public bool ActualizarSolicitud(tblRH_REC_Solicitudes objSolicitud)
        {
            try
            {
                #region SE ACTUALIZA LA SOLICITUD
                tblRH_REC_Solicitudes objActualizar = _context.tblRH_REC_Solicitudes.Where(w => w.id == objSolicitud.id).FirstOrDefault();
                objActualizar.cc = objSolicitud.cc.Trim();
                objActualizar.idPuesto = objSolicitud.idPuesto;
                objActualizar.puesto = !string.IsNullOrEmpty(objSolicitud.puesto) ? objSolicitud.puesto.Trim() : string.Empty;
                //objActualizar.clave_depto = objSolicitud.clave_depto > 0 ? objSolicitud.clave_depto : 0;
                objActualizar.esGeneral = objSolicitud.esGeneral;
                objActualizar.idMotivo = objSolicitud.idMotivo;
                objActualizar.sexo = !string.IsNullOrEmpty(objSolicitud.sexo) ? objSolicitud.sexo.Trim() : string.Empty;
                objActualizar.rangoInicioEdad = objSolicitud.rangoInicioEdad;
                objActualizar.rangoFinEdad = objSolicitud.rangoFinEdad;
                objActualizar.idEscolaridad = objSolicitud.idEscolaridad;
                objActualizar.clave_pais_nac = objSolicitud.clave_pais_nac > 0 ? objSolicitud.clave_pais_nac : 0;
                objActualizar.clave_estado_nac = objSolicitud.clave_estado_nac > 0 ? objSolicitud.clave_estado_nac : 0;
                objActualizar.clave_ciudad_nac = objSolicitud.clave_ciudad_nac > 0 ? objSolicitud.clave_ciudad_nac : 0;
                objActualizar.aniosExp = objSolicitud.aniosExp;
                objActualizar.conocimientoGen = !string.IsNullOrEmpty(objSolicitud.conocimientoGen) ? objSolicitud.conocimientoGen.Trim() : string.Empty;
                objActualizar.expEspecializada = !string.IsNullOrEmpty(objSolicitud.expEspecializada) ? objSolicitud.expEspecializada.Trim() : string.Empty;
                objActualizar.cantVacantes = objSolicitud.cantVacantes;
                objActualizar.esPuestoNuevo = objSolicitud.esPuestoNuevo;
                objActualizar.fechaModificacion = DateTime.Now;
                objActualizar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                _context.SaveChanges();
                #endregion

                #region SE CREA BITACORA
                SaveBitacora(16, (int)AccionEnum.ACTUALIZAR, objActualizar.id, JsonUtils.convertNetObjectToJson(objSolicitud));
                #endregion

                return true;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "ActualizarSolicitud", e, AccionEnum.ACTUALIZAR, objSolicitud.id, objSolicitud);
                return false;
            }
        }

        public bool EliminarSolicitud(int idSolicitud)
        {
            try
            {
                #region SE ELIMINA LA SOLICITUD
                tblRH_REC_Solicitudes objEliminar = _context.tblRH_REC_Solicitudes.Where(w => w.id == idSolicitud).FirstOrDefault();
                objEliminar.esActivo = false;
                objEliminar.fechaModificacion = DateTime.Now;
                objEliminar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                _context.SaveChanges();
                #endregion

                #region SE ELIMINA LA GESTIÓN SOLICITUD
                tblRH_REC_GestionSolicitudes objEliminarGestion = _context.tblRH_REC_GestionSolicitudes.Where(w => w.idSolicitud == idSolicitud && w.esActivo).FirstOrDefault();
                if (objEliminarGestion != null)
                {
                    objEliminarGestion.esActivo = false;
                    objEliminarGestion.fechaModificacion = DateTime.Now;
                    objEliminarGestion.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                    _context.SaveChanges();
                }
                #endregion

                #region SE CREA BITACORA
                SaveBitacora(16, (int)AccionEnum.ELIMINAR, idSolicitud, JsonUtils.convertNetObjectToJson(objEliminar));
                SaveBitacora(16, (int)AccionEnum.ELIMINAR, idSolicitud, JsonUtils.convertNetObjectToJson(objEliminarGestion));
                #endregion

                return true;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "EliminarSolicitud", e, AccionEnum.ELIMINAR, idSolicitud, idSolicitud);
                return false;
            }
        }

        public bool ExisteSolicitudRelCandidato(int idSolicitud)
        {
            try
            {
                #region SE VERIFICA SI LA SOLICITUD NO SE ENCUENTRA ASIGNADA A UN CANDIDATO, EN CASO QUE NO, SE PUEDE ELIMINAR LA SOLICITUD
                int idGestion = 0;
                idGestion = _context.tblRH_REC_GestionSolicitudes.Where(w => w.idSolicitud == idSolicitud && w.esActivo).Select(s => s.id).FirstOrDefault();

                int idCandidato = 0;
                idCandidato = _context.tblRH_REC_GestionCandidatos.Where(w => w.idGestionSolicitud == idGestion && w.esActivo).Select(s => s.id).FirstOrDefault();

                if (idGestion > 0 && idCandidato > 0)
                    return true;
                else
                    return false;
                #endregion
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "ExisteSolicitudRelCandidato", e, AccionEnum.CONSULTA, idSolicitud, idSolicitud);
                return false;
            }
        }

        int id_plantilla = 0;
        public List<Core.Entity.RecursosHumanos.Catalogo.tblRH_CatPuestos> FillCboPuestosSolicitudes(string cc)
        {
            if (!string.IsNullOrEmpty(cc))
            {
                id_plantilla = ObtenerPlantilla(cc).id_plantilla;
                //var odbc = new OdbcConsultaDTO()
                //{
                //    consulta = "SELECT a.puesto, b.descripcion, b.tipo_nomina from sn_plantilla_puesto as a inner join si_puestos as b on  a.puesto= b.puesto where id_plantilla=? and b.descripcion not like '%NO USA%'",
                //    parametros = new List<OdbcParameterDTO>() { new OdbcParameterDTO() { nombre = "id_plantilla", tipo = OdbcType.Int, valor = id_plantilla } }
                //};
                //var lst = _contextEnkontrol.Select<Core.Entity.RecursosHumanos.Catalogo.tblRH_CatPuestos>(EnkontrolAmbienteEnum.Rh, odbc);
                var lst = _context.tblRH_TAB_PlantillasPersonalDet.Where(x => x.FK_Plantilla == id_plantilla && !x.puesto.descripcion.Contains("NO USAR")).Select(x => new Core.Entity.RecursosHumanos.Catalogo.tblRH_CatPuestos
                {
                    puesto = x.puesto.puesto,
                    descripcion = x.puesto.descripcion,
                    tipo_nomina = x.puesto.FK_TipoNomina
                }).ToList();
                return lst;
            }
            else
                return null;
        }

        public Core.DTO.RecursosHumanos.AditivaPersonalPlantillaDTO ObtenerPlantilla(string cC)
        {
            //var odbc = new OdbcConsultaDTO()
            //{
            //    consulta = "SELECT id_plantilla FROM sn_plantilla_personal WHERE cc = ?",
            //    parametros = new List<OdbcParameterDTO>() { new OdbcParameterDTO() { nombre = "cc", tipo = OdbcType.VarChar, valor = cC } }
            //};
            //var lst = _contextEnkontrol.Select<Core.DTO.RecursosHumanos.AditivaPersonalPlantillaDTO>(EnkontrolAmbienteEnum.Rh, odbc);
            var lst = _context.tblRH_TAB_PlantillasPersonal.Where(x => x.cc == cC && x.registroActivo).Select(x => new Core.DTO.RecursosHumanos.AditivaPersonalPlantillaDTO
            {
                id_plantilla = x.id
            }).ToList();
            return lst.LastOrDefault();
        }

        public List<string> GetCategoriasRelPuesto(string _cc, string _strPuesto)
        {
            try
            {
                #region SE VERIFICA QUE EMPRESA SE ENCUENTRA LOGUEADA PARA PREPARAR EL CONTEXT DE EK
                EnkontrolAmbienteEnum idEmpresa = (int)EmpresaEnum.Construplan == (int)vSesiones.sesionEmpresaActual ? EnkontrolAmbienteEnum.Rh : EnkontrolAmbienteEnum.RhArre;
                #endregion

                #region SE OBTIENE id_plantilla EN BASE AL CC
                decimal idPlantilla = 0;
                if (!string.IsNullOrEmpty(_cc))
                {
                    //string strQuery = string.Empty;
                    //strQuery = @"SELECT id_plantilla FROM sn_plantilla_personal WHERE cc = '{0}'";
                    //var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                    //odbc.consulta = String.Format(strQuery, _cc);
                    //List<dynamic> lstPlantillas = _contextEnkontrol.Select<dynamic>(idEmpresa, odbc);
                    var lstPlantillas = _context.tblRH_TAB_PlantillasPersonal.Where(x => x.cc == _cc).ToList();
                    if (lstPlantillas.Count() > 0)
                        idPlantilla = lstPlantillas[0].id;
                }
                #endregion

                #region SE OBTIENE LISTADO DE PUESTOS EN BASE AL idPlantilla
                //                List<dynamic> lstPuestos = new List<dynamic>();
                //                if (idPlantilla > 0)
                //                {
                ////                    string strQuery = string.Empty;
                ////                    strQuery = @"SELECT t1.puesto, t2.descripcion, t2.tipo_nomina
                ////                                        FROM sn_plantilla_puesto AS t1 
                ////                                        INNER JOIN si_puestos AS t2 ON t1.puesto= t2.puesto 
                ////                                            WHERE id_plantilla = {0} AND t2.descripcion NOT LIKE '%{1}%' AND t2.descripcion LIKE '%{2}%'";
                ////                    var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                ////                    odbc.consulta = String.Format(strQuery, idPlantilla, "NO USA", _strPuesto);
                ////                    lstPuestos = _contextEnkontrol.Select<dynamic>(idEmpresa, odbc);

                //                }
                var lstPuestos = _context.tblRH_TAB_PlantillasPersonalDet.Where(x => x.FK_Plantilla == idPlantilla && !x.puesto.descripcion.Contains("NO USA") && x.puesto.descripcion.Contains(_strPuesto)).Select(x => new
                {
                    puesto = x.puesto.puesto,
                    descripcion = x.puesto.descripcion,
                    tipo_nomina = x.puesto.FK_TipoNomina
                }).ToList();
                #endregion

                #region SE OBTIENE LA CATEGORIA DE LOS PUESTOS
                List<string> lstCategoriasRelPuesto = new List<string>();
                foreach (var item in lstPuestos)
                {
                    string puestoFinal = item.descripcion, categoriaFinal = "", Cadena = item.descripcion;
                    int LongUltEspacio = Cadena.LastIndexOf(' '), longitudPuesto = Cadena.Length;
                    if (LongUltEspacio != -1)
                    {
                        int longUltPalabra = longitudPuesto - (LongUltEspacio);
                        string ultPalabra = (Cadena.Substring(LongUltEspacio, longUltPalabra));
                        Char delimiter = ' ';
                        String[] substrings = ultPalabra.Split(delimiter);
                        foreach (var palabra in substrings)
                        {
                            ultPalabra = substrings[1];
                            break;
                        }
                        if (ultPalabra.Length == 1)
                        {
                            puestoFinal = (Cadena.Substring(0, LongUltEspacio));
                            categoriaFinal = ultPalabra;
                            bool existeCategoria = false;
                            foreach (var item2 in lstCategoriasRelPuesto)
                            {
                                if (categoriaFinal == item2)
                                    existeCategoria = true;
                            }
                            if (!existeCategoria)
                                lstCategoriasRelPuesto.Add(categoriaFinal);
                        }
                    }
                }
                #endregion

                return lstCategoriasRelPuesto;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "GetCategoriasRelPuesto", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }

        public Dictionary<string, object> GetSolicitudesConclusas(SolicitudesDTO objDTO)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region SE OBTIENE LISTADO DE SOLICITUDES CONCLUSAS
                string strQuery = string.Empty;


                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(0, 0, NombreControlador, "GetSolicitudesConclusas", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }
        #endregion

        #region GESTIÓN DE SOLICITUDES
        public List<GestionSolicitudesDTO> GetGestionSolicitudes(GestionSolicitudesDTO objFiltro)
        {
            try
            {
                string strQuery = string.Empty;

                #region SE OBTIENE LISTADO DE PAISES, ESTADOS Y CIUDADES
                //PAISES
                //strQuery = string.Empty;
                //strQuery = @"SELECT clave_pais, descripcion, nacionalidad FROM sn_paises";
                var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                //odbc.consulta = String.Format(strQuery);
                //List<dynamic> lstPaises = Data.EntityFramework.Context._contextEnkontrol.Select<dynamic>((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? EnkontrolAmbienteEnum.Rh : EnkontrolAmbienteEnum.RhArre, odbc);
                var lstPaises = _context.tblRH_EK_Paises.ToList();

                //ESTADOS
                //strQuery = string.Empty;
                //strQuery = @"SELECT clave_pais, clave_estado, desc_edo_curp, descripcion FROM sn_estados";
                //odbc = new OdbcConsultaDTO() { consulta = strQuery };
                //odbc.consulta = String.Format(strQuery);
                //List<dynamic> lstEstados = Data.EntityFramework.Context._contextEnkontrol.Select<dynamic>((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? EnkontrolAmbienteEnum.Rh : EnkontrolAmbienteEnum.RhArre, odbc);
                var lstEstados = _context.tblRH_EK_Estados.ToList();

                //CIUDADES
                //strQuery = string.Empty;
                //strQuery = @"SELECT clave_pais, clave_estado, clave_ciudad, descripcion FROM sn_ciudades";

                //odbc = new OdbcConsultaDTO() { consulta = strQuery };
                //odbc.consulta = String.Format(strQuery);
                //List<dynamic> lstMunicipios = Data.EntityFramework.Context._contextEnkontrol.Select<dynamic>((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? EnkontrolAmbienteEnum.Rh : EnkontrolAmbienteEnum.RhArre, odbc);
                var lstMunicipios = _context.tblRH_EK_Cuidades.ToList();
                #endregion

                #region SE OBTIENE LISTADO DE PUESTOS ENKONTROL
                //strQuery = string.Empty;
                //List<PuestosDTO> lstPuestos = new List<PuestosDTO>();
                //strQuery = @"SELECT puesto, descripcion FROM si_puestos";
                //odbc = new OdbcConsultaDTO() { consulta = strQuery };
                //odbc.consulta = String.Format(strQuery);
                //lstPuestos = Data.EntityFramework.Context._contextEnkontrol.Select<PuestosDTO>(EnkontrolAmbienteEnum.Rh, odbc);
                var lstPuestos = _context.tblRH_EK_Puestos.Select(x => new PuestosDTO { puesto = x.puesto.ToString(), descripcion = x.descripcion }).ToList();
                #endregion

                #region SE OBTIENE LISTADO DE CC ENKONTOL
                //strQuery = string.Empty;
                //List<Core.DTO.RecursosHumanos.CCDTO> lstCC = new List<Core.DTO.RecursosHumanos.CCDTO>();
                //strQuery = @"SELECT cc, descripcion FROM cc";
                //odbc = new OdbcConsultaDTO() { consulta = strQuery };
                //odbc.consulta = String.Format(strQuery);
                //lstCC = Data.EntityFramework.Context._contextEnkontrol.Select<Core.DTO.RecursosHumanos.CCDTO>(EnkontrolAmbienteEnum.Prod, odbc);
                var lstCC = _ccFS_SP.GetCCsNomina(null);
                #endregion

                #region SE OBTIENE LISTADO DE SOLICITUDES
                List<tblRH_REC_Solicitudes> lstSolicitudesVacantes = _context.tblRH_REC_Solicitudes.Where(w => w.esActivo).ToList();
                #endregion

                #region LISTADO DE GESTION DE SOLICITUDES
                List<GestionSolicitudesDTO> lstSolicitudes = _context.tblRH_REC_GestionSolicitudes
                    .Where(x => x.esActivo &&
                        (objFiltro.esAutorizada ? x.esAutorizada == true : x.esAutorizada == false) &&
                        (objFiltro.cc != null ? x.virtualLstSolicitudes.cc == objFiltro.cc : true) &&
                        (objFiltro.idPuesto > 0 ? x.virtualLstSolicitudes.idPuesto == objFiltro.idPuesto : objFiltro.idPuesto == 0 && !string.IsNullOrEmpty(objFiltro.puesto) ? x.virtualLstSolicitudes.puesto.Contains(objFiltro.puesto) : true))
                    .Select(x => new GestionSolicitudesDTO
                    {
                        id = x.id,
                        idSolicitud = x.idSolicitud,
                        cc = x.virtualLstSolicitudes.cc,
                        idPuesto = x.virtualLstSolicitudes.idPuesto,
                        puesto = x.virtualLstSolicitudes.puesto,
                        idMotivo = x.virtualLstSolicitudes.idMotivo,
                        motivo = x.virtualLstSolicitudes.idMotivo > 0 ? x.virtualLstSolicitudes.virtualLstMotivos.motivo : string.Empty,
                        sexo = x.virtualLstSolicitudes.sexo,
                        rangoInicioEdad = x.virtualLstSolicitudes.rangoInicioEdad,
                        rangoFinEdad = x.virtualLstSolicitudes.rangoFinEdad,
                        idEscolaridad = x.virtualLstSolicitudes.idEscolaridad,
                        escolaridad = x.virtualLstSolicitudes.idEscolaridad > 0 ? x.virtualLstSolicitudes.virtualLstEscolaridades.escolaridad : string.Empty,
                        clave_pais_nac = x.virtualLstSolicitudes.clave_pais_nac,
                        pais = string.Empty,
                        clave_estado_nac = x.virtualLstSolicitudes.clave_estado_nac,
                        estado = string.Empty,
                        clave_ciudad_nac = x.virtualLstSolicitudes.clave_ciudad_nac,
                        ciudad = string.Empty,
                        aniosExp = x.virtualLstSolicitudes.aniosExp,
                        conocimientoGen = x.virtualLstSolicitudes.conocimientoGen,
                        expEspecializada = x.virtualLstSolicitudes.expEspecializada,
                        cantVacantes = x.virtualLstSolicitudes.cantVacantes,
                        cantVacantesCubiertas = x.virtualLstSolicitudes.cantVacantesCubiertas,
                        esPuestoNuevo = x.virtualLstSolicitudes.esPuestoNuevo,
                        esAutorizada = x.esAutorizada,
                        strAutorizada = x.esAutorizada ? "Autorizada" : "Rechazada",
                        motivoRechazo = x.motivoRechazo,
                        personalExistente = 0,
                        personalRequerido = 0,
                        cantVacantesPendientes = 0
                    }).ToList();
                foreach (var item in lstSolicitudes)
                {
                    #region SE OBTIENE LA DESCRIPCIÓN DEL CC
                    string descripcion = string.Empty;
                    if (!string.IsNullOrEmpty(item.cc))
                        descripcion = lstCC.Where(w => w.cc == item.cc).Select(s => s.descripcion).FirstOrDefault();

                    if (!string.IsNullOrEmpty(descripcion))
                        item.ccDescripcion = string.Format("[{0}] {1}", item.cc, descripcion);
                    #endregion

                    #region SE OBTIENE LA DESCRIPCIÓN DEL PUESTO
                    if (item.idPuesto > 0)
                    {
                        string idPuesto = item.idPuesto.ToString();
                        item.puesto = lstPuestos.Where(w => w.puesto == idPuesto).Count() > 0 ? lstPuestos.Where(w => w.puesto == idPuesto).Select(s => s.descripcion).FirstOrDefault() : "-";
                    }
                    #endregion

                    #region SE OBTIENE EL PAIS, ESTADO Y CIUDAD
                    string pais = string.Empty;
                    pais = lstPaises.Where(w => w.clave_pais == item.clave_pais_nac).Select(s => s.descripcion).FirstOrDefault();
                    item.pais = !string.IsNullOrEmpty(pais) ? pais.Trim().ToUpper() : string.Empty;

                    string estado = string.Empty;
                    estado = lstEstados.Where(w => w.clave_pais == item.clave_pais_nac && w.clave_estado == item.clave_estado_nac).Select(s => s.descripcion).FirstOrDefault();
                    item.estado = !string.IsNullOrEmpty(estado) ? estado.Trim().ToUpper() : string.Empty;

                    string ciudad = string.Empty;
                    ciudad = lstMunicipios.Where(w => w.clave_pais == item.clave_pais_nac && w.clave_estado == item.clave_estado_nac && w.clave_cuidad == item.clave_ciudad_nac).Select(s => s.descripcion).FirstOrDefault();
                    item.ciudad = !string.IsNullOrEmpty(ciudad) ? ciudad.Trim().ToUpper() : string.Empty;
                    #endregion

                    #region SE OBTIENE LA CANTIDAD DE VACANTES PENDIENTES
                    int cantVacantesCubiertas = lstSolicitudesVacantes.Where(w => w.id == item.idSolicitud).Select(s => s.cantVacantesCubiertas).FirstOrDefault();
                    int cantVacantesSolicitadas = lstSolicitudesVacantes.Where(w => w.id == item.idSolicitud).Select(s => s.cantVacantes).FirstOrDefault();
                    item.cantVacantesPendientes = (int)cantVacantesSolicitadas - (int)cantVacantesCubiertas;
                    #endregion
                }
                #endregion

                #region SE VERIFICA SI LA SOLICITUD REQUIERE CREARSE UNA ADITIVA
                #endregion

                #region SE CREA BITACORA
                SaveBitacora(16, (int)AccionEnum.CONSULTA, 0, JsonUtils.convertNetObjectToJson(objFiltro));
                #endregion

                var permisosUsuarioCC = _context.tblRH_BN_Usuario_CC.Where(x => x.usuarioID == vSesiones.sesionUsuarioDTO.id).ToList();

                lstSolicitudes = lstSolicitudes.Where(x => (permisosUsuarioCC.Count() > 0 ? !permisosUsuarioCC.Any(y => y.cc == "*") ? permisosUsuarioCC.Select(y => y.cc).Contains(x.cc) : true : false)).ToList();

                return lstSolicitudes;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "GetGestionSolicitudes", e, AccionEnum.CONSULTA, 0, objFiltro);
                return null;
            }
        }

        public bool RechazarSolicitud(GestionSolicitudesDTO objGestionSolicitud)
        {
            try
            {
                #region SE RECHAZA LA SOLICITUD
                tblRH_REC_GestionSolicitudes objEliminar = _context.tblRH_REC_GestionSolicitudes.Where(w => w.idSolicitud == objGestionSolicitud.idSolicitud).FirstOrDefault();
                objEliminar.motivoRechazo = !string.IsNullOrEmpty(objGestionSolicitud.motivoRechazo) ? objGestionSolicitud.motivoRechazo.Trim() : string.Empty;
                objEliminar.esAutorizada = false;
                objEliminar.fechaModificacion = DateTime.Now;
                objEliminar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                _context.SaveChanges();
                #endregion

                #region SE CREA BITACORA
                SaveBitacora(16, (int)AccionEnum.CONSULTA, objGestionSolicitud.id, JsonUtils.convertNetObjectToJson(objGestionSolicitud));
                #endregion

                return true;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "RechazarSolicitud", e, AccionEnum.ACTUALIZAR, objGestionSolicitud.idSolicitud, objGestionSolicitud);
                return false;
            }
        }
        #endregion

        #region GESTIÓN DE CANDIDATOS
        public List<CandidatosDTO> GetCandidatos(CandidatosDTO objCandidatos)
        {
            //try
            //{
            string strQuery = string.Empty;

            var odbc = new OdbcConsultaDTO() { consulta = strQuery };

            #region SE OBTIENE LISTADO DE PUESTOS ENKONTROL
            //strQuery = string.Empty;
            //List<PuestosDTO> lstPuestos = new List<PuestosDTO>();
            //strQuery = @"SELECT puesto, descripcion FROM si_puestos";
            //odbc = new OdbcConsultaDTO() { consulta = strQuery };
            //odbc.consulta = String.Format(strQuery);
            //lstPuestos = Data.EntityFramework.Context._contextEnkontrol.Select<PuestosDTO>(EnkontrolAmbienteEnum.Rh, odbc);
            var lstPuestos = _context.tblRH_EK_Puestos.Select(x => new PuestosDTO
            {
                puesto = x.puesto.ToString(),
                descripcion = x.descripcion
            }).ToList();
            #endregion

            var ccs = FillFiltroCboCC().Select(x => x.Value).ToList();

            var lstSolicitudes = _context.tblRH_REC_Solicitudes.Where(e => ccs.Contains(e.cc)).ToList();
            var lstIdsSolicitudes = lstSolicitudes.Select(e => e.id).ToList();

            //var lstEntrevistas = _context.tblRH_REC_EntrevistasIniciales.Any(x => x.idCandidato == s.id)
            var lstEntrevistas = _context.tblRH_REC_EntrevistasIniciales.Where(e => e.esActivo).ToList();
            var lstArchivos = _context.tblRH_REC_Archivos.Where(e => e.esActivo).ToList();

            //Actividad
            var objActividadVitae = _context.tblRH_REC_Actividades.FirstOrDefault(e => e.esActivo && e.tipoArchivo == 5);

            #region SE OBTIENE LISTADO DE CANDIDATOS
            var candidatos = _context.tblRH_REC_GestionCandidatos.Where(e => e.esActivo
                && (objCandidatos.idGestionSolicitud != 0 ? e.idGestionSolicitud == objCandidatos.idGestionSolicitud : true)
                && (objCandidatos.idEstatus != 0 ? e.estatus == objCandidatos.idEstatus : true) && lstIdsSolicitudes.Contains(e.idGestionSolicitud)).ToList().Select(s => new CandidatosDTO
                {
                    id = s.id,
                    nombreCompleto = string.Empty,
                    nombre = s.nombre,
                    apePaterno = s.apePaterno,
                    apeMaterno = s.apeMaterno,
                    correo = s.correo,
                    telefono = s.telefono,
                    celular = s.celular,
                    nss = s.nss,
                    pais = s.pais,
                    paisDesc = s.paisDesc,
                    estado = s.estado,
                    estadoDesc = s.estadoDesc,
                    municipio = s.municipio,
                    municipioDesc = s.municipioDesc,
                    idGestionSolicitud = s.idGestionSolicitud,
                    idEstatus = s.estatus,
                    estatus = string.Empty,
                    fechaNacimiento = s.fechaNacimiento,
                    altura = s.altura,
                    peso = s.peso,
                    notasReclutador = s.notasReclutador,
                    edad = 0,
                    fechaCreacion = s.fechaCreacion,
                    puesto = s.idGestionSolicitud,
                    puestoDesc = s.puestoDesc,
                    sexo = s.sexo,
                    clave_empleado = s.clave_empleado,
                    esReingreso = s.esReingreso,
                    cuspp = s.cuspp,
                    PERU_departamento = s.PERU_departamento,
                    PERU_descDepartamento = s.PERU_descDepartamento,
                }).ToList();
            
            //List<CandidatosDTO> lstCandidatos = _context.tblRH_REC_GestionCandidatos.Select(s => new CandidatosDTO
            //{
            //    id = s.id,
            //    nombreCompleto = string.Empty,
            //    nombre = s.nombre,
            //    apePaterno = s.apePaterno,
            //    apeMaterno = s.apeMaterno,
            //    correo = s.correo,
            //    telefono = s.telefono,
            //    celular = s.celular,
            //    nss = s.nss,
            //    pais = s.pais,
            //    paisDesc = s.paisDesc,
            //    estado = s.estado,
            //    estadoDesc = s.estadoDesc,
            //    municipio = s.municipio,
            //    municipioDesc = s.municipioDesc,
            //    idGestionSolicitud = s.idGestionSolicitud,
            //    idEstatus = s.estatus,
            //    estatus = string.Empty,
            //    fechaNacimiento = s.fechaNacimiento,
            //    altura = s.altura,
            //    peso = s.peso,
            //    notasReclutador = s.notasReclutador,
            //    edad = 0,
            //    fechaCreacion = s.fechaCreacion,
            //    puesto = s.virtualLstGestionSolicitudes.virtualLstSolicitudes.idPuesto,
            //    puestoDesc = s.puestoDesc
            //}).ToList();

            foreach (var item in candidatos)
            {
                item.tieneEntrevista = lstEntrevistas.Any(x => x.idCandidato == item.id);

                var objSolicitud = lstSolicitudes.Where(e => e.id == item.idGestionSolicitud).FirstOrDefault();

                item.nombreCompleto = item.apePaterno + " " + item.apeMaterno + " " + item.nombre;
                string nombreCandidato = item.nombreCompleto;
                item.nombreCompleto = nombreCandidato.Trim().ToUpper();

                string correo = item.correo;
                item.correo = correo.Trim().ToUpper();

                string estatus = string.Empty;
                if (item.idEstatus == (int)EstatusEmpleadoEnum.pendiente)
                    item.estatus = "PENDIENTE";
                else if (item.idEstatus == (int)EstatusEmpleadoEnum.contratado)
                    item.estatus = "CONTRATADO";
                else if (item.idEstatus == (int)EstatusEmpleadoEnum.noContratado)
                    item.estatus = "NO CONTRATADO";

                #region SE OBTIENE LA EDAD DEL CANDIDATO
                int edad = DateTime.Now.Year - item.fechaNacimiento.Year;
                if ((item.fechaNacimiento.Month > DateTime.Now.Month) || (item.fechaNacimiento.Month == DateTime.Now.Month && item.fechaNacimiento.Day > DateTime.Now.Day))
                    edad--;

                item.edad = edad;
                #endregion

                #region SE OBTIENE LA DESCRIPCIÓN DEL PUESTO EN CASO QUE idPuesto SEA MAYOR A 0
                if (objSolicitud.idPuesto > 0)
                {
                    string idPuesto = objSolicitud.idPuesto.ToString();
                    item.puestoDesc = lstPuestos.Where(w => w.puesto == idPuesto).Count() > 0 ? lstPuestos.Where(w => w.puesto == idPuesto).Select(s => s.descripcion).FirstOrDefault() : "-";

                    item.idPuesto = objSolicitud.idPuesto;
                }
                #endregion

                #region ARCHIVO
                var archivo = lstArchivos.Where(x => x.esActivo && x.idCandidato == item.id && x.idActividad == objActividadVitae.id).OrderByDescending(x => x.id).FirstOrDefault();
                if (archivo != null)
                {
                    item.tieneArchivo = true;
                }
                else
                {
                    item.tieneArchivo = false;

                }
                #endregion
            }
            #endregion

            #region SE CREA BITACORA
            SaveBitacora(16, (int)AccionEnum.CONSULTA, 0, JsonUtils.convertNetObjectToJson(objCandidatos));
            #endregion

            return candidatos;
            //}
            //catch (Exception e)
            //{
            //    LogError(16, 16, "ReclutamientosController", "GetCandidatos", e, AccionEnum.CONSULTA, 0, objCandidatos);
            //    return null;
            //}
        }

        public Dictionary<string, object> CrearCandidato(GestionCandidatosDTO objCandidato, HttpPostedFileBase objFile)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
                try
                {
                    //if (objCandidato.telefono.Count() != 10 || objCandidato.celular.Count() != 10)
                    //{
                    //    throw new Exception("Debe capturar un número válido de teléfono y de celular (10 dígitos).");
                    //}

                    //VERIFICAR SI LA INFO DEL CANDIDADTO HACE MATCH CON UN EMPLEADO EN LA EMPRESA

                    if (!objCandidato.esCandiReingreso)
                    {
                        if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru || (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia || objCandidato.pais != 1)
                        {
                            //CHECAR POR DNI / CEDULA CIUDADANIA
                        }
                        else
                        {
                            string curpCandi = GenerarCURP(objCandidato.nombre, objCandidato.apePaterno, objCandidato.apeMaterno, (SexoEnum)(objCandidato.sexo == "M" ? 'H' : 'M'), objCandidato.fechaNacimiento, (EstadoEnum)objCandidato.estado);

                            var objEmpleado = _context.tblRH_EK_Empleados.FirstOrDefault(e => e.curp == curpCandi);

                            if (objEmpleado != null)
                            {
                                //throw new Exception("El candidato a crear existe en la empresa con estatus:" + objEmpleado.estatus_empleado);
                                resultado.Add(SUCCESS, false);
                                resultado.Add(MESSAGE, "El candidato a crear existe en la empresa con estatus:" + objEmpleado.estatus_empleado);
                                resultado.Add("esReingreso", true);

                                return resultado;
                            }
                        }
                    }
                    else
                    {
                        if (!(objCandidato.clave_empleado > 0))
                        {
                            resultado.Add(SUCCESS, false);
                            resultado.Add(MESSAGE, "Ingrese un empleado a reingresar");
                            resultado.Add("esReingresoClave", true);

                            return resultado;
                            //throw new Exception("Ingrese un empleado a reingresar");
                        }
                        else
                        {
                            var objEmpleado = _context.tblRH_EK_Empleados.FirstOrDefault(e => 
                                e.esActivo && e.estatus_empleado != "A" && e.estatus_empleado != "P" && e.clave_empleado == objCandidato.clave_empleado);

                            if (objEmpleado == null)
                            {
                                resultado.Add(SUCCESS, false);
                                resultado.Add(MESSAGE, "Ya existe un empleado activo con esta informacion favor de verificar los datos");
                                resultado.Add("esReingresoClave", true);

                                return resultado;
                            }
                        }
                    }

                    #region SE CREA AL CANDIDATO
                    tblRH_REC_GestionCandidatos objGuardar = new tblRH_REC_GestionCandidatos();
                    objGuardar.nombre = !string.IsNullOrEmpty(objCandidato.nombre) ? objCandidato.nombre.Trim() : string.Empty;
                    objGuardar.apePaterno = !string.IsNullOrEmpty(objCandidato.apePaterno) ? objCandidato.apePaterno.Trim() : string.Empty;
                    objGuardar.apeMaterno = !string.IsNullOrEmpty(objCandidato.apeMaterno) ? objCandidato.apeMaterno.Trim() : string.Empty;
                    objGuardar.correo = !string.IsNullOrEmpty(objCandidato.correo) ? objCandidato.correo.Trim() : string.Empty;
                    objGuardar.telefono = !string.IsNullOrEmpty(objCandidato.telefono) ? objCandidato.telefono.Trim() : string.Empty;
                    objGuardar.celular = !string.IsNullOrEmpty(objCandidato.celular) ? objCandidato.celular.Trim() : string.Empty;
                    objGuardar.nss = !string.IsNullOrEmpty(objCandidato.nss) ? objCandidato.nss.Trim().ToUpper() : string.Empty;
                    objGuardar.pais = objCandidato.pais;
                    objGuardar.paisDesc = !string.IsNullOrEmpty(objCandidato.paisDesc) ? objCandidato.paisDesc.Trim().ToUpper() : string.Empty;
                    objGuardar.estado = objCandidato.estado;
                    objGuardar.estadoDesc = !string.IsNullOrEmpty(objCandidato.estadoDesc) ? objCandidato.estadoDesc.Trim().ToUpper() : string.Empty;
                    objGuardar.municipio = objCandidato.municipio;
                    objGuardar.municipioDesc = !string.IsNullOrEmpty(objCandidato.municipioDesc) ? objCandidato.municipioDesc.Trim().ToUpper() : string.Empty;
                    objGuardar.idGestionSolicitud = objCandidato.idGestionSolicitud > 0 ? objCandidato.idGestionSolicitud : 0;
                    objGuardar.estatus = (int)EstatusEmpleadoEnum.pendiente;
                    objGuardar.fechaNacimiento = objCandidato.fechaNacimiento.Year > 1000 ? objCandidato.fechaNacimiento : new DateTime(2000, 01, 01);
                    objGuardar.altura = objCandidato.altura > 0 ? objCandidato.altura : 0;
                    objGuardar.peso = objCandidato.peso > 0 ? objCandidato.peso : 0;
                    objGuardar.notasReclutador = !string.IsNullOrEmpty(objCandidato.notasReclutador) ? objCandidato.notasReclutador.Trim() : string.Empty;
                    objGuardar.sexo = !string.IsNullOrEmpty(objCandidato.sexo) ? objCandidato.sexo.Trim() : string.Empty;
                    objGuardar.fechaCreacion = DateTime.Now;
                    objGuardar.fechaModificacion = new DateTime(2000, 01, 01);
                    objGuardar.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                    objGuardar.esActivo = true;
                    objGuardar.puestoDesc = objCandidato.puestoDesc;
                    objGuardar.idPuesto = objCandidato.idPuesto;
                    objGuardar.cuspp = objCandidato.cuspp;
                    objGuardar.PERU_departamento = objCandidato.PERU_departamento;
                    objGuardar.PERU_descDepartamento = objCandidato.PERU_descDepartamento;

                    if (objCandidato.esCandiReingreso)
                    {
                        objGuardar.clave_empleado = objCandidato.clave_empleado;
                        objGuardar.esReingreso = objCandidato.esCandiReingreso;
                    }

                    _context.tblRH_REC_GestionCandidatos.Add(objGuardar);
                    _context.SaveChanges();
                    #endregion

                    #region SE OBTIENE EL ID DEL CANDIDATO REGISTRADO
                    int idCandidato = _context.tblRH_REC_GestionCandidatos.OrderByDescending(o => o.id).Select(s => s.id).FirstOrDefault();
                    #endregion

                    if (objFile != null)
                    {
                        #region SE GUARDAR EL ARCHIVO
                        List<Tuple<HttpPostedFileBase, string>> listaRutaArchivos = new List<Tuple<HttpPostedFileBase, string>>();
                        var CarpetaNueva = Path.Combine(RutaServidor, idCandidato.ToString());
                        ExisteCarpeta(CarpetaNueva, true);

                        var objActividadVitae = _context.tblRH_REC_Actividades.FirstOrDefault(e => e.esActivo && e.tipoArchivo == 5);

                        string nombreArchivo = ObtenerFormatoNombreArchivoA("Reclutamiento-", objFile.FileName);
                        string rutaArchivo = Path.Combine(CarpetaNueva, nombreArchivo);
                        listaRutaArchivos.Add(Tuple.Create(objFile, rutaArchivo));

                        tblRH_REC_Archivos objArchivo = new tblRH_REC_Archivos();
                        objArchivo.idCandidato = idCandidato;
                        objArchivo.claveEmpleado = 0;
                        objArchivo.idFase = 1016;
                        objArchivo.idActividad = objActividadVitae != null ? objActividadVitae.id : 0;
                        objArchivo.tipoArchivo = 1;
                        objArchivo.nombreArchivo = nombreArchivo;
                        objArchivo.ubicacionArchivo = rutaArchivo;
                        objArchivo.fechaCreacion = DateTime.Now;
                        objArchivo.fechaModificacion = new DateTime(2000, 01, 01);
                        objArchivo.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                        objArchivo.esActivo = true;
                        _context.tblRH_REC_Archivos.Add(objArchivo);
                        _context.SaveChanges();

                        if (GlobalUtils.SaveHTTPPostedFile(objFile, rutaArchivo) == false)
                            throw new Exception("Ocurrió un error al registrar al candidato.");
                        #endregion
                    }

                    #region SE CREA BITACORA
                    SaveBitacora(16, (int)AccionEnum.AGREGAR, idCandidato, JsonUtils.convertNetObjectToJson(objCandidato));
                    #endregion

                    dbContextTransaction.Commit();
                    //return Tuple.Create<bool, string>(true, "");}
                    resultado.Add(SUCCESS, true);

                    return resultado;
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(16, 16, "ReclutamientosController", "CrearCandidato", e, AccionEnum.AGREGAR, 0, objCandidato);
                    //return Tuple.Create<bool, string>(false, e.Message);
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);

                    return resultado;

                }
        }

        private string ObtenerFormatoNombreArchivoA(string nombreBase, string fileName)
        {
            return String.Format("{0} {1}{2}", nombreBase, fileName.Split('.')[0], Path.GetExtension(fileName));
        }

        private static bool ExisteCarpeta(string path, bool crear = false)
        {
            bool existe = false;
            try
            {
                existe = Directory.Exists(path);
                if (!existe && crear)
                {
                    Directory.CreateDirectory(path);
                    existe = true;
                }
            }
            catch (Exception e)
            {
                existe = false;
            }
            return existe;
        }

        public Tuple<bool, string> ActualizarCandidato(GestionCandidatosDTO objCandidato, HttpPostedFileBase objFile)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
                try
                {
                    if ((MainContextEnum)vSesiones.sesionEmpresaActual != MainContextEnum.PERU)
                    {
                        if (objCandidato.telefono.Count() != 10 || objCandidato.celular.Count() != 10)
                        {
                            throw new Exception("Debe capturar un número válido de teléfono y de celular (10 dígitos).");
                        }
                    }

                    #region SE ACTUALIZA AL CANDIDATO
                    tblRH_REC_GestionCandidatos objActualizar = _context.tblRH_REC_GestionCandidatos.Where(w => w.id == objCandidato.id && w.esActivo).FirstOrDefault();
                    objActualizar.nombre = !string.IsNullOrEmpty(objCandidato.nombre) ? objCandidato.nombre.Trim() : string.Empty;
                    objActualizar.apePaterno = !string.IsNullOrEmpty(objCandidato.apePaterno) ? objCandidato.apePaterno.Trim() : string.Empty;
                    objActualizar.apeMaterno = !string.IsNullOrEmpty(objCandidato.apeMaterno) ? objCandidato.apeMaterno.Trim() : string.Empty;
                    objActualizar.correo = !string.IsNullOrEmpty(objCandidato.correo) ? objCandidato.correo.Trim() : string.Empty;
                    objActualizar.telefono = !string.IsNullOrEmpty(objCandidato.telefono) ? objCandidato.telefono.Trim() : string.Empty;
                    objActualizar.celular = !string.IsNullOrEmpty(objCandidato.celular) ? objCandidato.celular.Trim() : string.Empty;
                    objActualizar.nss = !string.IsNullOrEmpty(objCandidato.nss) ? objCandidato.nss.Trim().ToUpper() : string.Empty;
                    objActualizar.pais = objCandidato.pais;
                    objActualizar.paisDesc = !string.IsNullOrEmpty(objCandidato.paisDesc) ? objCandidato.paisDesc.Trim().ToUpper() : string.Empty;
                    objActualizar.estado = objCandidato.estado;
                    objActualizar.estadoDesc = !string.IsNullOrEmpty(objCandidato.estadoDesc) ? objCandidato.estadoDesc.Trim().ToUpper() : string.Empty;
                    objActualizar.municipio = objCandidato.municipio;
                    objActualizar.municipioDesc = !string.IsNullOrEmpty(objCandidato.municipioDesc) ? objCandidato.municipioDesc.Trim().ToUpper() : string.Empty;
                    objActualizar.fechaNacimiento = objCandidato.fechaNacimiento.Year > 1000 ? objCandidato.fechaNacimiento : new DateTime(2000, 01, 01);
                    objActualizar.idGestionSolicitud = objCandidato.idGestionSolicitud > 0 ? objCandidato.idGestionSolicitud : 0;
                    objActualizar.altura = objCandidato.altura > 0 ? objCandidato.altura : 0;
                    objActualizar.peso = objCandidato.peso > 0 ? objCandidato.peso : 0;
                    objActualizar.notasReclutador = !string.IsNullOrEmpty(objCandidato.notasReclutador) ? objCandidato.notasReclutador.Trim() : string.Empty;
                    objActualizar.sexo = !string.IsNullOrEmpty(objCandidato.sexo) ? objCandidato.sexo.Trim() : string.Empty;
                    objActualizar.fechaModificacion = DateTime.Now;
                    objActualizar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                    objActualizar.idPuesto = objCandidato.idPuesto;
                    objActualizar.puestoDesc = objCandidato.puestoDesc;
                    objActualizar.cuspp = objCandidato.cuspp;
                    objActualizar.PERU_departamento = objCandidato.PERU_departamento;
                    objActualizar.PERU_descDepartamento = objCandidato.PERU_descDepartamento;
                    _context.SaveChanges();
                    #endregion

                    if (objFile != null)
                    {
                        #region SE GUARDAR EL ARCHIVO
                        List<Tuple<HttpPostedFileBase, string>> listaRutaArchivos = new List<Tuple<HttpPostedFileBase, string>>();
                        var CarpetaNueva = Path.Combine(RutaServidor, objCandidato.id.ToString());
                        ExisteCarpeta(CarpetaNueva, true);

                        var objActividadVitae = _context.tblRH_REC_Actividades.FirstOrDefault(e => e.esActivo && e.tipoArchivo == 5);

                        string nombreArchivo = ObtenerFormatoNombreArchivoA("Reclutamiento -", objFile.FileName);
                        string rutaArchivo = Path.Combine(CarpetaNueva, nombreArchivo);
                        listaRutaArchivos.Add(Tuple.Create(objFile, rutaArchivo));

                        //tblRH_REC_Archivos objArchivo = new tblRH_REC_Archivos();
                        //objArchivo.idCandidato = objCandidato.id;
                        //objArchivo.claveEmpleado = 0;
                        //objArchivo.idFase = 0;
                        //objArchivo.idActividad = 0;
                        //objArchivo.tipoArchivo = 5;
                        //objArchivo.nombreArchivo = nombreArchivo;
                        //objArchivo.ubicacionArchivo = rutaArchivo;
                        //objArchivo.fechaCreacion = DateTime.Now;
                        //objArchivo.fechaModificacion = new DateTime(2000, 01, 01);
                        //objArchivo.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                        //objArchivo.esActivo = true;
                        //_context.tblRH_REC_Archivos.Add(objArchivo);
                        //_context.SaveChanges();

                        tblRH_REC_Archivos objArchivo = new tblRH_REC_Archivos();
                        objArchivo.idCandidato = objCandidato.id;
                        objArchivo.claveEmpleado = 0;
                        objArchivo.idFase = 1016;
                        objArchivo.idActividad = objActividadVitae != null ? objActividadVitae.id : 0;
                        objArchivo.tipoArchivo = 1;
                        objArchivo.nombreArchivo = nombreArchivo;
                        objArchivo.ubicacionArchivo = rutaArchivo;
                        objArchivo.fechaCreacion = DateTime.Now;
                        objArchivo.fechaModificacion = new DateTime(2000, 01, 01);
                        objArchivo.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                        objArchivo.esActivo = true;
                        _context.tblRH_REC_Archivos.Add(objArchivo);
                        _context.SaveChanges();

                        if (GlobalUtils.SaveHTTPPostedFile(objFile, rutaArchivo) == false)
                            throw new Exception("Ocurrió un error al registrar al candidato.");
                        #endregion
                    }

                    #region SE CREA BITACORA
                    SaveBitacora(16, (int)AccionEnum.ACTUALIZAR, objCandidato.id, JsonUtils.convertNetObjectToJson(objCandidato));
                    #endregion

                    dbContextTransaction.Commit();
                    return Tuple.Create<bool, string>(true, "");
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(16, 16, "ReclutamientosController", "ActualizarCandidato", e, AccionEnum.ACTUALIZAR, objCandidato.id, objCandidato);
                    return Tuple.Create<bool, string>(false, e.Message);
                }
        }

        public bool EliminarCandidato(int idCandidato)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
                try
                {
                    #region SE ELIMINA AL CANDIDATO
                    tblRH_REC_GestionCandidatos objEliminar = _context.tblRH_REC_GestionCandidatos.Where(w => w.id == idCandidato).FirstOrDefault();
                    objEliminar.esActivo = false;
                    objEliminar.fechaModificacion = DateTime.Now;
                    objEliminar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                    _context.SaveChanges();
                    #endregion

                    #region SE ELIMINA EL SEGUIMIENTO DEL CANDIDATO
                    // CODE ...
                    #endregion

                    #region SE CREA BITACORA
                    dbContextTransaction.Commit();
                    SaveBitacora(16, (int)AccionEnum.ELIMINAR, idCandidato, JsonUtils.convertNetObjectToJson(idCandidato));
                    #endregion

                    return true;
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(16, 16, "ReclutamientosController", "EliminarCandidato", e, AccionEnum.ELIMINAR, idCandidato, idCandidato);
                    return false;
                }
        }

        public List<ComboDTO> FillFiltroCboPuestosDisponibles()
        {
            try
            {
                #region SE OBTIENE LISTADO DE PUESTOS
                string strQuery = @"SELECT puesto AS Value, descripcion AS Text FROM si_puestos";
                var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                odbc.consulta = String.Format(strQuery);
                var lstPuestos = Data.EntityFramework.Context._contextEnkontrol.Select<Core.DTO.Principal.Generales.ComboDTO>(EnkontrolAmbienteEnum.Rh, odbc);
                #endregion

                #region SE OBTIENE LISTADO DE GESTIÓN DE SOLICITUDES
                List<ComboDTO> lstGestionSolicitudes = _context.tblRH_REC_GestionSolicitudes.Where(w => w.esAutorizada && w.esActivo).Select(s => new ComboDTO
                {
                    Value = s.id.ToString(),
                    Text = string.Empty,
                    Prefijo = s.virtualLstSolicitudes.puesto,
                    Id = s.virtualLstSolicitudes.idPuesto.ToString()
                }).ToList();
                foreach (var item in lstGestionSolicitudes)
                {
                    if (!string.IsNullOrEmpty(item.Prefijo))
                        item.Text = item.Prefijo;
                    else if (item.Id != "0")
                        item.Text = lstPuestos.Where(w => w.Value == item.Id).Select(s => s.Text).FirstOrDefault();
                }
                #endregion

                #region SE CREA BITACORA
                SaveBitacora(16, (int)AccionEnum.CONSULTA, 0, JsonUtils.convertNetObjectToJson(0));
                #endregion

                return lstGestionSolicitudes;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "FillFiltroCboPuestosDisponibles", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }

        public EntrevistaInicialDTO GetEntrevistaInicial(EntrevistaInicialDTO objEntrevistaInicialDTO)
        {
            try
            {
                #region SE OBTIENE LA ENTREVISTA INICIAL DEL CANDIDATO, EN CASO DE EXISTIR
                var lstEntrevistaInicial = new List<EntrevistaInicialDTO>();
                var objEntrevistaInicial = new EntrevistaInicialDTO();
                lstEntrevistaInicial = _context.Select<EntrevistaInicialDTO>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = @"SELECT t1.id, t1.idCandidato, t2.nombre, t2.apePaterno, t2.apeMaterno, t2.fechaNacimiento, t1.idEscolaridad, t1.estadoCivil, t1.expectativaSalarial, t1.tipoSalario, t1.puestoSolicitado, t1.expLaboral, t1.sectorCiudad, 
		                                t1.tiempoEnLaCiudad, t1.entrevistasAnteriores, t1.idPlataforma, t1.documentacion, t1.familiarEnEmpresa, t1.telefono, t1.familia, t1.empleos, 
		                                t1.caracteristicasCandidato, t1.comentarioEntrevistador, t1.fechaEntrevista, t1.disposicionHorario, t1.avanza, t1.comentariosAvanza, t1.idUsuarioEntrevisto, t1.resultado, t2.paisDesc, 
                                        t2.estadoDesc, t2.municipioDesc, t1.familiaEnLaEmpresa
		                                FROM tblRH_REC_EntrevistasIniciales AS t1
			                                INNER JOIN tblRH_REC_GestionCandidatos AS t2 ON t1.idCandidato = t2.id
				                                WHERE t1.esActivo = 1 AND t2.esActivo = 1 AND t1.idCandidato = @idCandidato",
                    parametros = new { objEntrevistaInicialDTO.idCandidato }
                });

                if (lstEntrevistaInicial != null && lstEntrevistaInicial.Count > 0)
                {
                    objEntrevistaInicial = lstEntrevistaInicial.OrderByDescending(e => e.id).FirstOrDefault();
                    if (objEntrevistaInicial.puestoSolicitado != "0" && objEntrevistaInicial.puestoSolicitado != "")
                    {
                        objEntrevistaInicial.lugarNacimiento = objEntrevistaInicial.paisDesc + ", " + objEntrevistaInicial.estadoDesc + ", " + objEntrevistaInicial.municipioDesc;
                        //objEntrevistaInicial.puestoSolicitadoDesc = (_contextEnkontrol.Select<dynamic>(EnkontrolEnum.CplanRh, new OdbcConsultaDTO()
                        //{
                        //    consulta = @"SELECT descripcion FROM si_puestos WHERE puesto = " + Convert.ToInt32(objEntrevistaInicial.puestoSolicitado)
                        //}))[0].descripcion ?? objEntrevistaInicial.puestoSolicitadoDesc;
                        var puestoInt = Convert.ToInt32(objEntrevistaInicial.puestoSolicitado);
                        var puesto = _context.tblRH_EK_Puestos.FirstOrDefault(x => x.puesto == puestoInt);
                        objEntrevistaInicial.puestoSolicitadoDesc = puesto != null ? puesto.descripcion : "";
                    }
                    objEntrevistaInicial.edad = DateTime.Now.Year - objEntrevistaInicial.fechaNacimiento.Year;
                }

                return objEntrevistaInicial;
                #endregion
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "GetEntrevistaInicial", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }

        public Dictionary<string, object> CrearEditarEntrevistaInicial(EntrevistaInicialDTO objEntrevistaInicialDTO)
        {
            Dictionary<string, object> dicResultado = new Dictionary<string, object>();
            try
            {
                if (objEntrevistaInicialDTO.id > 0)
                {
                    #region SE ACTUALIZA LA ENTREVISTA INICIAL DEL CANDIDATO
                    tblRH_REC_EntrevistasIniciales objActualizar = _context.tblRH_REC_EntrevistasIniciales.Where(w => w.id == objEntrevistaInicialDTO.id && w.idCandidato == objEntrevistaInicialDTO.idCandidato && w.esActivo).FirstOrDefault();
                    if (objActualizar == null)
                        throw new Exception("Ocurrió un error al consultar la entrevista inicial del candidato para poder actualizarla.");

                    objActualizar.idEscolaridad = objEntrevistaInicialDTO.idEscolaridad > 0 ? objEntrevistaInicialDTO.idEscolaridad : 0;
                    objActualizar.estadoCivil = !string.IsNullOrEmpty(objEntrevistaInicialDTO.estadoCivil) ? objEntrevistaInicialDTO.estadoCivil.Trim() : string.Empty;
                    objActualizar.lugarNacimiento = !string.IsNullOrEmpty(objEntrevistaInicialDTO.lugarNacimiento) ? objEntrevistaInicialDTO.lugarNacimiento.Trim() : string.Empty;
                    objActualizar.expectativaSalarial = !string.IsNullOrEmpty(objEntrevistaInicialDTO.expectativaSalarial) ? objEntrevistaInicialDTO.expectativaSalarial.Trim() : string.Empty;
                    objActualizar.tipoSalario = objEntrevistaInicialDTO.tipoSalario;
                    objActualizar.puestoSolicitado = !string.IsNullOrEmpty(objEntrevistaInicialDTO.puestoSolicitado) ? objEntrevistaInicialDTO.puestoSolicitado.Trim() : string.Empty;
                    objActualizar.expLaboral = !string.IsNullOrEmpty(objEntrevistaInicialDTO.expLaboral) ? objEntrevistaInicialDTO.expLaboral.Trim() : string.Empty;
                    objActualizar.sectorCiudad = !string.IsNullOrEmpty(objEntrevistaInicialDTO.sectorCiudad) ? objEntrevistaInicialDTO.sectorCiudad.Trim() : string.Empty;
                    objActualizar.tiempoEnLaCiudad = !string.IsNullOrEmpty(objEntrevistaInicialDTO.tiempoEnLaCiudad) ? objEntrevistaInicialDTO.tiempoEnLaCiudad.Trim() : string.Empty;
                    objActualizar.entrevistasAnteriores = objEntrevistaInicialDTO.entrevistasAnteriores;
                    objActualizar.idPlataforma = objEntrevistaInicialDTO.idPlataforma > 0 ? objEntrevistaInicialDTO.idPlataforma : 0;
                    objActualizar.documentacion = !string.IsNullOrEmpty(objEntrevistaInicialDTO.documentacion) ? objEntrevistaInicialDTO.documentacion.Trim() : string.Empty;
                    objActualizar.familiarEnEmpresa = objEntrevistaInicialDTO.familiarEnEmpresa;
                    objActualizar.familiaEnLaEmpresa = !string.IsNullOrEmpty(objEntrevistaInicialDTO.familiaEnLaEmpresa) ? objEntrevistaInicialDTO.familiaEnLaEmpresa.Trim() : string.Empty;
                    objActualizar.telefono = !string.IsNullOrEmpty(objEntrevistaInicialDTO.telefono) ? objEntrevistaInicialDTO.telefono.Trim() : string.Empty;
                    objActualizar.familia = !string.IsNullOrEmpty(objEntrevistaInicialDTO.familia) ? objEntrevistaInicialDTO.familia.Trim() : string.Empty;
                    objActualizar.empleos = !string.IsNullOrEmpty(objEntrevistaInicialDTO.empleos) ? objEntrevistaInicialDTO.empleos.Trim() : string.Empty;
                    objActualizar.caracteristicasCandidato = !string.IsNullOrEmpty(objEntrevistaInicialDTO.caracteristicasCandidato) ? objEntrevistaInicialDTO.caracteristicasCandidato.Trim() : string.Empty;
                    objActualizar.comentarioEntrevistador = !string.IsNullOrEmpty(objEntrevistaInicialDTO.comentarioEntrevistador) ? objEntrevistaInicialDTO.comentarioEntrevistador.Trim() : string.Empty;
                    objActualizar.fechaEntrevista = objEntrevistaInicialDTO.fechaEntrevista.Year > 1000 ? objEntrevistaInicialDTO.fechaEntrevista : new DateTime(1000, 01, 01);
                    objActualizar.disposicionHorario = objEntrevistaInicialDTO.disposicionHorario;
                    objActualizar.avanza = objEntrevistaInicialDTO.avanza;
                    objActualizar.comentariosAvanza = !string.IsNullOrEmpty(objEntrevistaInicialDTO.comentariosAvanza) ? objEntrevistaInicialDTO.comentariosAvanza.Trim() : string.Empty;
                    objActualizar.idUsuarioEntrevisto = objEntrevistaInicialDTO.idUsuarioEntrevisto > 0 ? objEntrevistaInicialDTO.idUsuarioEntrevisto : 0;
                    objActualizar.resultado = !string.IsNullOrEmpty(objEntrevistaInicialDTO.resultado) ? objEntrevistaInicialDTO.resultado.Trim() : string.Empty;
                    objActualizar.fechaModificacion = DateTime.Now;
                    objActualizar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                    _context.SaveChanges();
                    #endregion

                    objEntrevistaInicialDTO.idRegistrado = objActualizar.id;
                    dicResultado.Add("esCrearEditar", true);
                    dicResultado.Add("strMensaje", "Se ha actualizado con éxito la entrevista inicial.");
                    return dicResultado;
                }
                else
                {
                    #region SE REGISTRA LA ENTREVISTA INICIAL DEL CANDIDATO
                    tblRH_REC_EntrevistasIniciales objGuardar = new tblRH_REC_EntrevistasIniciales();
                    objGuardar.idCandidato = objEntrevistaInicialDTO.idCandidato > 0 ? objEntrevistaInicialDTO.idCandidato : 0;
                    objGuardar.idEscolaridad = objEntrevistaInicialDTO.idEscolaridad > 0 ? objEntrevistaInicialDTO.idEscolaridad : 0;
                    objGuardar.estadoCivil = !string.IsNullOrEmpty(objEntrevistaInicialDTO.estadoCivil) ? objEntrevistaInicialDTO.estadoCivil.Trim() : string.Empty;
                    objGuardar.lugarNacimiento = !string.IsNullOrEmpty(objEntrevistaInicialDTO.lugarNacimiento) ? objEntrevistaInicialDTO.lugarNacimiento.Trim() : string.Empty;
                    objGuardar.expectativaSalarial = !string.IsNullOrEmpty(objEntrevistaInicialDTO.expectativaSalarial) ? objEntrevistaInicialDTO.expectativaSalarial.Trim() : string.Empty;
                    objGuardar.tipoSalario = objEntrevistaInicialDTO.tipoSalario;
                    objGuardar.puestoSolicitado = !string.IsNullOrEmpty(objEntrevistaInicialDTO.puestoSolicitado) ? objEntrevistaInicialDTO.puestoSolicitado.Trim() : string.Empty;
                    objGuardar.expLaboral = !string.IsNullOrEmpty(objEntrevistaInicialDTO.expLaboral) ? objEntrevistaInicialDTO.expLaboral.Trim() : string.Empty;
                    objGuardar.sectorCiudad = !string.IsNullOrEmpty(objEntrevistaInicialDTO.sectorCiudad) ? objEntrevistaInicialDTO.sectorCiudad.Trim() : string.Empty;
                    objGuardar.tiempoEnLaCiudad = !string.IsNullOrEmpty(objEntrevistaInicialDTO.tiempoEnLaCiudad) ? objEntrevistaInicialDTO.tiempoEnLaCiudad.Trim() : string.Empty;
                    objGuardar.entrevistasAnteriores = objEntrevistaInicialDTO.entrevistasAnteriores;
                    objGuardar.idPlataforma = objEntrevistaInicialDTO.idPlataforma > 0 ? objEntrevistaInicialDTO.idPlataforma : 0;
                    objGuardar.documentacion = !string.IsNullOrEmpty(objEntrevistaInicialDTO.documentacion) ? objEntrevistaInicialDTO.documentacion.Trim() : string.Empty;
                    objGuardar.familiarEnEmpresa = objEntrevistaInicialDTO.familiarEnEmpresa;
                    objGuardar.familiaEnLaEmpresa = !string.IsNullOrEmpty(objEntrevistaInicialDTO.familiaEnLaEmpresa) ? objEntrevistaInicialDTO.familiaEnLaEmpresa.Trim() : string.Empty;
                    objGuardar.telefono = !string.IsNullOrEmpty(objEntrevistaInicialDTO.telefono) ? objEntrevistaInicialDTO.telefono.Trim() : string.Empty;
                    objGuardar.familia = !string.IsNullOrEmpty(objEntrevistaInicialDTO.familia) ? objEntrevistaInicialDTO.familia.Trim() : string.Empty;
                    objGuardar.empleos = !string.IsNullOrEmpty(objEntrevistaInicialDTO.empleos) ? objEntrevistaInicialDTO.empleos.Trim() : string.Empty;
                    objGuardar.caracteristicasCandidato = !string.IsNullOrEmpty(objEntrevistaInicialDTO.caracteristicasCandidato) ? objEntrevistaInicialDTO.caracteristicasCandidato.Trim() : string.Empty;
                    objGuardar.comentarioEntrevistador = !string.IsNullOrEmpty(objEntrevistaInicialDTO.comentarioEntrevistador) ? objEntrevistaInicialDTO.comentarioEntrevistador.Trim() : string.Empty;
                    objGuardar.fechaEntrevista = objEntrevistaInicialDTO.fechaEntrevista.Year > 1000 ? objEntrevistaInicialDTO.fechaEntrevista : new DateTime(1000, 01, 01);
                    objGuardar.disposicionHorario = objEntrevistaInicialDTO.disposicionHorario;
                    objGuardar.avanza = objEntrevistaInicialDTO.avanza;
                    objGuardar.comentariosAvanza = !string.IsNullOrEmpty(objEntrevistaInicialDTO.comentariosAvanza) ? objEntrevistaInicialDTO.comentariosAvanza.Trim() : string.Empty;
                    objGuardar.idUsuarioEntrevisto = objEntrevistaInicialDTO.idUsuarioEntrevisto > 0 ? objEntrevistaInicialDTO.idUsuarioEntrevisto : 0;
                    objGuardar.resultado = !string.IsNullOrEmpty(objEntrevistaInicialDTO.resultado) ? objEntrevistaInicialDTO.resultado.Trim() : string.Empty;
                    objGuardar.fechaCreacion = DateTime.Now;
                    objGuardar.fechaModificacion = new DateTime(2000, 01, 01);
                    objGuardar.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                    objGuardar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                    objGuardar.esActivo = true;
                    _context.tblRH_REC_EntrevistasIniciales.Add(objGuardar);
                    _context.SaveChanges();
                    #endregion

                    #region SE OBTIENE EL ID DE LA ENTREVISTA INICIAL REGISTRADA
                    objEntrevistaInicialDTO.idRegistrado = _context.Select<tblRH_REC_EntrevistasIniciales>(new DapperDTO
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = @"SELECT id AS Value, plataforma AS Text FROM tblRH_REC_CatPlataformas WHERE esActivo = 1",
                    }).Select(s => s.id).FirstOrDefault();
                    #endregion

                    dicResultado.Add("esCrearEditar", true);
                    dicResultado.Add("strMensaje", "Se ha registrado con éxito la entrevista inicial.");
                    return dicResultado;
                }

                #region SE CREA BITACORA
                SaveBitacora(16, objEntrevistaInicialDTO.id > 0 ? (int)AccionEnum.ACTUALIZAR : (int)AccionEnum.AGREGAR, objEntrevistaInicialDTO.idRegistrado, JsonUtils.convertNetObjectToJson(objEntrevistaInicialDTO));
                #endregion
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "CrearEditarEntrevistaInicial", e,
                    objEntrevistaInicialDTO.id > 0 ? AccionEnum.ACTUALIZAR : AccionEnum.AGREGAR, objEntrevistaInicialDTO.id > 0 ? objEntrevistaInicialDTO.id : 0, objEntrevistaInicialDTO);
                dicResultado.Add("esCrearEditar", false);

                string accionPeticion = objEntrevistaInicialDTO.id > 0 ? "actualizar" : "registrar";
                dicResultado.Add("strMensaje", "Ocurrió un error al " + accionPeticion + " la entrevista inicial");
                return dicResultado;
            }
        }

        public Tuple<Stream, string> DescargarArchivoCV(int candidatoID)
        {
            try
            {
                var objActividadVitae = _context.tblRH_REC_Actividades.FirstOrDefault(e => e.esActivo && e.tipoArchivo == 5);

                var archivo = _context.tblRH_REC_Archivos.Where(x => x.esActivo && x.idCandidato == candidatoID && x.idActividad == objActividadVitae.id).OrderByDescending(x => x.id).FirstOrDefault();

                var fileStream = GlobalUtils.GetFileAsStream(archivo.ubicacionArchivo);
                string name = Path.GetFileName(archivo.ubicacionArchivo);

                return Tuple.Create(fileStream, name);
            }
            catch (Exception e)
            {
                LogError(3, 0, "ReclutamientosController", "DescargarArchivoCV", e, AccionEnum.CONSULTA, 0, candidatoID);
                return null;
            }
        }

        public Dictionary<string, object> GetUsuarioEntrevistaActual()
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region SE OBTIENE EL USUARIO LOGUEADO, PARA INDICAR EN EL MODAL DE ENTREVISTA INICIAL, QUIEN LO ESTA ENTREVISTANDO.
                resultado.Add("idUsuario", (int)vSesiones.sesionUsuarioDTO.id);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(0, 0, NombreControlador, "GetUsuarioEntrevistaActual", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> NotificarActividad(int idCandidato, int idActividad, int estatus, int? idNotificante)
        {
            resultado.Clear();
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    var correos = new List<string>();
                    var listaUsuariosCorreos = new List<int>();
                    var objCandidato = _context.tblRH_REC_GestionCandidatos.FirstOrDefault(e => e.id == idCandidato);
                    var objSolicitud = _context.tblRH_REC_Solicitudes.FirstOrDefault(e => e.id == objCandidato.idGestionSolicitud);
                    var objActividad = _context.tblRH_REC_Actividades.FirstOrDefault(e => e.id == idActividad);

                    // AHORA SE USA EL USUARIO A NOTIFICAR PARA NOTIFICAR AL ASIGANR COMO APTA UNA ACTIVIDAD
                    listaUsuariosCorreos = _context.tblRH_REC_Notificantes_Actividades.Where(e => e.idActividad == idActividad).Select(e => e.idUsuario).ToList();

                    var asunto = "S/N";
                    var mensaje = "S/N";

                    if (estatus == 0)
                    {

                        //SE CAPTURA EL USUARIO A NOTIFICAR AL NOTIFICAR ACTIVIDAD

                        //if (idNotificante.HasValue)
                        //{
                        //    if (objNoti == null)
                        //    {
                        //        _context.tblRH_REC_Notificantes_Rel_Candidato.Add(new tblRH_REC_Notificantes_Rel_Candidato
                        //        {
                        //            idUsuario = idNotificante.Value,
                        //            idActividad = idActividad,
                        //            idCandidato = idCandidato,
                        //            idNotificarApto = vSesiones.sesionUsuarioDTO.id,
                        //            registroActivo = true,
                        //        });
                        //        _context.SaveChanges();
                        //    }
                        //    else
                        //    {
                        //        objNoti.idUsuario = idNotificante.Value;
                        //        objNoti.idNotificarApto = vSesiones.sesionUsuarioDTO.id;
                        //        _context.SaveChanges();
                        //    }
                        //}


                        asunto = objActividad.tituloActividad + " PENDIENTE DE APROBAR";

                        if (idActividad == 76)
                        {
                            asunto = asunto + "(RESPONDER)";
                            mensaje = "FAVOR DE RESPONDER SOBRE ESTE CORREO (RESPONDER A TODOS) SUS OBSERVACIONES SOBRE LA ENTREVISTA QUE REALIZO AL CANDIDATO<br/><br/>";
                        }

                        mensaje += @"El siguiente candidat@ necesita aprobacion: 
                                " + objCandidato.apePaterno + " " + objCandidato.apeMaterno + " " + objCandidato.nombre + " PUESTO: " + objCandidato.puestoDesc;

                    }
                    else
                    {


                        asunto = objActividad.tituloActividad + " APROBADA";
                        mensaje = @"El siguiente candidat@ ha sido aprobad@: 
                                " + objCandidato.apePaterno + " " + objCandidato.apeMaterno + " " + objCandidato.nombre + " PUESTO: " + objCandidato.puestoDesc;
                    }

                    #region V1
                    //objNoti = _context.tblRH_REC_Notificantes_Rel_Candidato.OrderByDescending(e => e.id).FirstOrDefault(e => e.idActividad == idActividad && e.idCandidato == idCandidato);

                    //if (objNoti != null)
                    //{
                    //    //USUARIO A VALIDAR
                    //    correos.Add(_context.tblP_Usuario.FirstOrDefault(x => x.id == objNoti.idUsuario).correo);
                    //    //USUARIO NOTIFICA
                    //    correos.Add(_context.tblP_Usuario.FirstOrDefault(x => x.id == objNoti.idNotificarApto).correo);

                    //}
                    //else
                    //{
                    //    //DEFAULT
                    //    foreach (var usu in listaUsuariosCorreos)
                    //    {
                    //        correos.Add(_context.tblP_Usuario.FirstOrDefault(x => x.id == usu).correo);
                    //    }
                    //    correos.Add(_context.tblP_Usuario.FirstOrDefault(x => x.id == vSesiones.sesionUsuarioDTO.id).correo);
                    //}
                    #endregion

                    //TOMAR USUARIOS DE FACULTAMIENTOS
                    var clavesNotificates = new List<int>();

                    var plantillasRequisiciones = new List<int>();


                    if (idActividad == 73)
                    {
                        plantillasRequisiciones.Add(129);
                    }
                    else if (idActividad == 74)
                    {
                        plantillasRequisiciones.Add(130);
                    }
                    else
                    {
                        correos.Add(_context.tblP_Usuario.FirstOrDefault(x => x.id == idNotificante).correo);
                        //Sin facultamientos (Entrevista jefe inmediato)
                    }

                    var paquete = _context.tblFA_Paquete.Where(x => x.cc.cc == objSolicitud.cc).OrderByDescending(x => x.fechaCreacion).FirstOrDefault();

                    //
                    if ((EmpresaEnum)vSesiones.sesionEmpresaActual != EmpresaEnum.Construplan && (EmpresaEnum)vSesiones.sesionEmpresaActual != EmpresaEnum.GCPLAN)
                    {
                        var ccPaquete = _context.tblC_Nom_CatalogoCC.FirstOrDefault(x => x.cc == objSolicitud.cc);
                        paquete = _context.tblFA_Paquete.Where(x => x.ccID == ccPaquete.id).OrderByDescending(x => x.fechaCreacion).FirstOrDefault();
                    }
                    //

                    if (paquete != null)
                    {
                        foreach (var facultamiento in paquete.facultamientos.Where(x => plantillasRequisiciones.Contains(x.plantillaID) && x.aplica))
                        {
                            foreach (var item in facultamiento.empleados.Where(x => x.esActivo && x.aplica))
                            {
                                clavesNotificates.Add(item.claveEmpleado.Value);
                            }
                        }
                    }

                    var usuariosSinRepetir = clavesNotificates.Distinct();


                    correos.Add(_context.tblP_Usuario.FirstOrDefault(x => x.id == vSesiones.sesionUsuarioDTO.id).correo);

                    if (estatus == 1)
                    {
                        var lstChProyecto = _context.tblRH_REC_Notificantes_Altas.Where(e => e.esActivo && e.esAuth && e.cc == objSolicitud.cc).ToList();

                        if (lstChProyecto.Count() > 0)
                        {
                            foreach (var item in lstChProyecto)
                            {
                                correos.Add(_context.tblP_Usuario.FirstOrDefault(x => x.id == item.idUsuario).correo);
                                //USUARIO NOTIFICA
                            }
                        }

                    }


                    foreach (var item in usuariosSinRepetir)
                    {
                        var objUsu = _context.tblP_Usuario.FirstOrDefault(x => x.cveEmpleado == item.ToString());

                        if (objUsu != null)
                        {
                            correos.Add(objUsu.correo);
                        }
                        else
                        {
                            continue;
                        }
                    }
#if DEBUG
                    correos = new List<string> { "miguel.buzani@construplan.com.mx" };
#endif
                    correos = correos.Distinct().ToList();

                    GlobalUtils.sendEmail(string.Format("{0}: {1}", PersonalUtilities.GetNombreEmpresa(), asunto), mensaje, correos);

                    resultado.Add(SUCCESS, true);

                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);

                }
            }

            return resultado;
        }

        public List<tblRH_CatEmpleados> getCatUsuariosGeneral(string term)
        {
            var palabraArr = term.Split(' ');
            var palabra = string.Join("%", palabraArr);
            //var getCatEmpleado = "SELECT TOP 10 clave_empleado, (LTRIM(RTRIM(nombre))+' '+replace(ape_paterno, ' ', '')+' '+replace(ape_materno, ' ', '')) AS Nombre, puesto FROM DBA.sn_empleados WHERE  (LTRIM(RTRIM(nombre))+' '+replace(ape_paterno, ' ', '')+' '+replace(ape_materno, ' ', '')) LIKE '%" + palabra + "%'";
            try
            {
                //var resultado = (List<tblRH_CatEmpleados>)ContextEnKontrolNominaArrendadora.Where(getCatEmpleado, 1).ToObject<List<tblRH_CatEmpleados>>();
                var resultado = _context.Select<tblRH_CatEmpleados>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = @"SELECT TOP 10 id as clave_empleado, (LTRIM(RTRIM(nombre))+' '+replace(apellidoPaterno, ' ', '')+' '+replace(apellidoMaterno, ' ', '')) AS Nombre
                                FROM tblP_Usuario WHERE  (LTRIM(RTRIM(nombre))+' '+replace(apellidoPaterno, ' ', '')+' '+replace(apellidoMaterno, ' ', '')) LIKE @term",
                    parametros = new { term = ("%" + term + "%") }
                }).ToList();
                return resultado;
            }
            catch (Exception o_O)
            {
                return new List<tblRH_CatEmpleados>();
            }
        }

        public List<tblRH_CatEmpleados> getAutoCompleteEmpleadosBaja(string term)
        {
            var palabraArr = term.Split(' ');
            var palabra = string.Join("%", palabraArr);
            //var getCatEmpleado = "SELECT TOP 10 clave_empleado, (LTRIM(RTRIM(nombre))+' '+replace(ape_paterno, ' ', '')+' '+replace(ape_materno, ' ', '')) AS Nombre, puesto FROM DBA.sn_empleados WHERE  (LTRIM(RTRIM(nombre))+' '+replace(ape_paterno, ' ', '')+' '+replace(ape_materno, ' ', '')) LIKE '%" + palabra + "%'";
            try
            {
                //var resultado = (List<tblRH_CatEmpleados>)ContextEnKontrolNominaArrendadora.Where(getCatEmpleado, 1).ToObject<List<tblRH_CatEmpleados>>();
                var resultado = _context.Select<tblRH_CatEmpleados>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = "SELECT TOP 10 clave_empleado, (LTRIM(RTRIM(nombre))+' '+replace(ape_paterno, ' ', '')+' '+replace(ape_materno, ' ', '')) AS Nombre, puesto FROM tblRH_EK_Empleados WHERE estatus_empleado = 'B' AND (LTRIM(RTRIM(nombre))+' '+replace(ape_paterno, ' ', '')+' '+replace(ape_materno, ' ', '')) LIKE '%" + palabra + "%'"
                }).ToList();
                return resultado;
            }
            catch (Exception o_O)
            {
                return new List<tblRH_CatEmpleados>();
            }
        }

        public List<tblRH_CatEmpleados> getAutoCompleteCandidatos(string term)
        {
            var palabraArr = term.Split(' ');
            var palabra = string.Join("%", palabraArr);
            //var getCatEmpleado = "SELECT TOP 10 clave_empleado, (LTRIM(RTRIM(nombre))+' '+replace(ape_paterno, ' ', '')+' '+replace(ape_materno, ' ', '')) AS Nombre, puesto FROM DBA.sn_empleados WHERE  (LTRIM(RTRIM(nombre))+' '+replace(ape_paterno, ' ', '')+' '+replace(ape_materno, ' ', '')) LIKE '%" + palabra + "%'";
            try
            {
                //var resultado = (List<tblRH_CatEmpleados>)ContextEnKontrolNominaArrendadora.Where(getCatEmpleado, 1).ToObject<List<tblRH_CatEmpleados>>();
                var resultado = _context.Select<tblRH_CatEmpleados>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = @"SELECT TOP 10 clave_empleado, (LTRIM(RTRIM(t1.nombre))+' '+replace(t1.ape_paterno, ' ', '')+' '+replace(t1.ape_materno, ' ', '')) AS Nombre, t1.puesto, fechaBaja
                                FROM tblRH_EK_Empleados as t1
                                INNER JOIN tblRH_Baja_Registro as t2 ON t2.registroActivo = 1 AND t2.est_baja = 'A'  AND t2.est_inventario = 'A'  AND t2.est_compras = 'A'  AND t2.est_contabilidad = 'A' AND t1.clave_empleado = t2.numeroEmpleado
                                WHERE (LTRIM(RTRIM(t1.nombre))+' '+replace(t1.ape_paterno, ' ', '')+' '+replace(t1.ape_materno, ' ', '')) LIKE '%" + palabra + "%'"
                }).ToList();

                var lstEmpleadosLiberados = new List<tblRH_CatEmpleados>();

                foreach (var item in resultado)
                {
                    var objEmpleadoU = lstEmpleadosLiberados.FirstOrDefault(e => e.clave_empleado == item.clave_empleado);

                    if (objEmpleadoU != null)
                    {
                        if (item.fechaBaja > objEmpleadoU.fechaBaja)
                        {
                            lstEmpleadosLiberados.Remove(objEmpleadoU);
                            lstEmpleadosLiberados.Add(item);
                        }
                    }
                    else
                    {
                        lstEmpleadosLiberados.Add(item);
                    }
                }
                return lstEmpleadosLiberados;
            }
            catch (Exception o_O)
            {
                return new List<tblRH_CatEmpleados>();
            }
        }
        #endregion

        #region FASES
        public List<FasesDTO> GetFases()
        {
            try
            {
                List<tblRH_REC_Actividades> lstActividades = _context.tblRH_REC_Actividades.Where(w => w.esActivo).ToList();

                #region SE OBTIENE LISTADO DE FASES
                List<FasesDTO> lstFases = _context.tblRH_REC_Fases.Where(w => w.esActivo).Select(s => new FasesDTO
                {
                    id = s.id,
                    nombreFase = s.nombreFase,
                    cantActividades = 0
                }).ToList();

                foreach (var item in lstFases)
                {
                    int cantActividades = lstActividades.Where(w => w.idFase == item.id).Count();
                    item.cantActividades = cantActividades;
                }
                #endregion

                #region SE CREA BITACORA
                SaveBitacora(16, (int)AccionEnum.CONSULTA, 0, JsonUtils.convertNetObjectToJson(0));
                #endregion

                return lstFases;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "GetFases", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }

        public bool CrearFase(tblRH_REC_Fases objFase)
        {
            try
            {
                #region SE CREA LA FASE
                tblRH_REC_Fases objGuardar = new tblRH_REC_Fases();
                objGuardar.nombreFase = !string.IsNullOrEmpty(objFase.nombreFase) ? objFase.nombreFase.Trim() : string.Empty;
                objGuardar.fechaCreacion = DateTime.Now;
                objGuardar.fechaModificacion = new DateTime(2000, 01, 01);
                objGuardar.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                objGuardar.esActivo = true;
                _context.tblRH_REC_Fases.Add(objGuardar);
                _context.SaveChanges();
                #endregion

                #region SE OBTIENE ID DE LA FASE CREADA
                int idFase = _context.tblRH_REC_Fases.OrderByDescending(o => o.id).Select(s => s.id).FirstOrDefault();
                #endregion

                #region SE CREA BITACORA
                SaveBitacora(16, (int)AccionEnum.AGREGAR, idFase, JsonUtils.convertNetObjectToJson(objFase));
                #endregion

                return true;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "CrearFase", e, AccionEnum.AGREGAR, 0, objFase);
                return false;
            }
        }

        public bool ActualizarFase(tblRH_REC_Fases objFase)
        {
            try
            {
                #region SE ACTUALIZA LA FASE
                tblRH_REC_Fases objActualizar = _context.tblRH_REC_Fases.Where(w => w.id == objFase.id && w.esActivo).FirstOrDefault();
                objActualizar.nombreFase = !string.IsNullOrEmpty(objFase.nombreFase) ? objFase.nombreFase.Trim() : string.Empty;
                objActualizar.fechaModificacion = DateTime.Now;
                objActualizar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                _context.SaveChanges();
                #endregion

                #region SE CREA BITACORA
                SaveBitacora(16, (int)AccionEnum.ACTUALIZAR, objFase.id, JsonUtils.convertNetObjectToJson(objFase));
                #endregion

                return true;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "ActualizarFase", e, AccionEnum.ACTUALIZAR, objFase.id, objFase);
                return false;
            }
        }

        public bool EliminarFase(int idFase)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
                try
                {
                    #region SE ELIMINA LAS ACTIVIDADES LIGADAS A LA FASE A ELIMINAR
                    List<tblRH_REC_Actividades> objEliminarActividades = _context.tblRH_REC_Actividades.Where(w => w.idFase == idFase && w.esActivo).ToList();
                    foreach (var item in objEliminarActividades)
                    {
                        item.esActivo = false;
                    }
                    _context.SaveChanges();
                    #endregion

                    #region SE ELIMINA LOS PUESTOS RELACIONADOS A LA FASE
                    List<tblRH_REC_PuestosRelFases> objEliminarPuestosRelFase = _context.tblRH_REC_PuestosRelFases.Where(w => w.idFase == idFase && w.esActivo).ToList();
                    foreach (var item in objEliminarPuestosRelFase)
                    {
                        item.esActivo = false;
                    }
                    _context.SaveChanges();
                    #endregion

                    #region SE ELIMINA LA FASE
                    tblRH_REC_Fases objEliminar = _context.tblRH_REC_Fases.Where(w => w.id == idFase).FirstOrDefault();
                    objEliminar.esActivo = false;
                    objEliminar.fechaModificacion = DateTime.Now;
                    objEliminar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                    _context.SaveChanges();
                    #endregion

                    #region SE CREA BITACORA
                    dbContextTransaction.Commit();
                    SaveBitacora(16, (int)AccionEnum.ELIMINAR, idFase, JsonUtils.convertNetObjectToJson(idFase));
                    #endregion

                    return true;
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(16, 16, "ReclutamientosController", "EliminarFase", e, AccionEnum.ELIMINAR, idFase, idFase);
                    return false;
                }
        }
        #endregion

        #region FASES RELACIÓN ACTIVIDADES
        public Dictionary<string, object> GetActividades(SegCandidatosDTO objSegCandidatosDTO)
        {
            resultado.Clear();
            using (var transaccionSP = _context.Database.BeginTransaction())
            {

                try
                {
                    #region COMENTADO
                    //if (objSegCandidatosDTO.clave_empleado != null)
                    //{
                    //    var lstCandidatos = _context.tblRH_REC_GestionCandidatos.Where(e => e.clave_empleado == objSegCandidatosDTO.clave_empleado).OrderByDescending(e => e.id).ToList();
                    //    List<int> numArchivos = new List<int>();

                    //    if (lstCandidatos.Count() > 1)
                    //    {
                    //        foreach (var candi in lstCandidatos)
                    //        {
                    //            List<int> lstCandSegID = _context.tblRH_REC_SegCandidatos.Where(w => w.idCandidato == candi.id && w.idFase == objSegCandidatosDTO.idFase && w.esActivo).Select(s => s.id).ToList();
                    //            List<tblRH_REC_SegDetCandidatos> lstCandSegDetCandidatos = _context.tblRH_REC_SegDetCandidatos.Where(w => lstCandSegID.Contains(w.idSeg) && w.esActivo).ToList();
                    //            numArchivos.Add(lstCandSegDetCandidatos.Count());
                    //        }

                    //        var maxNum = numArchivos.Max();

                    //        var index = numArchivos.IndexOf(maxNum);

                    //        objSegCandidatosDTO.idCandidato = lstCandidatos[index].id;
                    //    }
                    //}
                    #endregion

                    bool esOficina = false;

                    #region SE OBTIENE LISTADO DE ACTIVIDADES
                    List<ActividadesDTO> lstActividades = _context.tblRH_REC_Actividades.Where(w => (objSegCandidatosDTO.idFase > 0 ? w.idFase == objSegCandidatosDTO.idFase : true) && w.esActivo).Select(s => new ActividadesDTO
                    {
                        id = s.id,
                        idFase = s.idFase,
                        nombreFase = s.virtualLstFases.nombreFase,
                        tituloActividad = s.tituloActividad,
                        descActividad = s.descActividad,
                        esArchivos = s.esArchivos,
                        esObligatoria = s.esObligatoria,
                        esGeneral = s.esGeneral,
                        esCalificacion = s.esCalificacion,
                        esNecesarioAprobar = s.esNecesarioAprobar,
                        estatus = "PENDIENTE",
                        tipoArchivo = s.tipoArchivo,
                        idUsuarioEncargado = s.idUsuarioEncargado,
                        nombreEncargado = string.Empty
                    }).OrderBy(o => o.idFase).ToList();

                    List<int> lstFasesID = _context.tblRH_REC_Fases.Where(w => w.esActivo).Select(e => e.id).ToList();
                    List<int> lstSegID = _context.tblRH_REC_SegCandidatos.Where(w => w.idCandidato == objSegCandidatosDTO.idCandidato && w.idFase == objSegCandidatosDTO.idFase && w.esActivo).Select(s => s.id).ToList();
                    List<tblRH_REC_SegDetCandidatos> lstSegDetCandidatos = _context.tblRH_REC_SegDetCandidatos.Where(w => lstSegID.Contains(w.idSeg) && w.esActivo).ToList();
                    //int cantTotalActividades = _context.tblRH_REC_Actividades.Where(w => lstFasesID.Contains(w.idFase) && w.esActivo && w.esObligatoria == true).Count();
                    var actividadesObligatorias = _context.tblRH_REC_Actividades.Where(w => lstFasesID.Contains(w.idFase) && w.esActivo && w.esObligatoria == true).Select(e => e.id);

                    //VERIFICAR SI TIENE ENTREVISTA EL CANDIDATO
                    var objEntrevista = _context.tblRH_REC_EntrevistasIniciales.FirstOrDefault(e => e.idCandidato == objSegCandidatosDTO.idCandidato);

                    //VERFICIAR SI TIENE CV EL CANIDADTO
                    var objVitae = _context.tblRH_REC_Archivos.FirstOrDefault(e => e.esActivo && e.idCandidato == objSegCandidatosDTO.idCandidato && e.tipoArchivo == 5);
                    //OBTENER ACTIVIDAD DEL CV
                    var objActividadVitae = _context.tblRH_REC_Actividades.FirstOrDefault(e => e.esActivo && e.tipoArchivo == 5);

                    var objFasesUsuario = _context.tblRH_REC_FasesUsuarios.FirstOrDefault(e => e.esActivo && e.idUsuario == vSesiones.sesionUsuarioDTO.id && e.idFase == objSegCandidatosDTO.idFase);

                    var objValidar = _context.tblRH_REC_Notificantes_Actividades.FirstOrDefault(e => e.idUsuario == vSesiones.sesionUsuarioDTO.id);

                    var lstIdOfi = _context.tblRH_REC_Notificantes_Altas.Where(e => e.esActivo).Select(e => e.idUsuario).Distinct().ToList();

                    var objPuesto = _context.tblRH_EK_Puestos.FirstOrDefault(e => e.registroActivo && e.puesto == objSegCandidatosDTO.idPuesto);

                    if (objPuesto == null)
                    {
                        throw new Exception("El puesto del candito a dar seguimiento es invalido, favor de contactarse con sistemas.");
                    }

                    if (objFasesUsuario != null)
                    {
                        if (lstIdOfi.Contains(vSesiones.sesionUsuarioDTO.id) || vSesiones.sesionUsuarioDTO.idPerfil == (int)PerfilUsuarioEnum.ADMINISTRADOR)
                        {
                            esOficina = true;

                        }

                    }

                    foreach (var item in lstActividades)
                    {
                        //PERMISO PARA VER/ACCEDER TODAS LAS ACTIVIDADES
                        item.esTodasActividades =
                            vSesiones.sesionUsuarioDTO.id == 1041 ||
                            vSesiones.sesionUsuarioDTO.id == 1019 ||
                            vSesiones.sesionUsuarioDTO.id == 79377 ||
                            vSesiones.sesionUsuarioDTO.id == 1041 ||
                            vSesiones.sesionUsuarioDTO.id == 3383 ||
                            vSesiones.sesionUsuarioDTO.id == 3381 //Maricela
                            ? true : false; //1041 → Manuel Cruz

                        //PERMISO CH
                        item.esOfi = esOficina;
                        objSegCandidatosDTO.idActividad = item.id;

                        tblRH_REC_SegDetCandidatos objSeg = lstSegDetCandidatos.Where(w => w.idActividad == item.id).OrderByDescending(e => e.id).FirstOrDefault();
                        var lstArchivos = GetArchivosActividadesRelFase(objSegCandidatosDTO);

                        if (objSeg != null)
                        {
                            item.calificacion = objSeg.calificacion;
                            item.comentario = objSeg.comentario;
                            item.estatus = objSeg.esAprobada == 1 ? "APROBADA" : objSeg.esAprobada == 0 ? "NO APROBADA" : objSeg.esAprobada == 3 ? "NO APLICA" : "PENDIENTE";
                            item.firma = objSeg.firma ?? "";
                            item.esNotificada = objSeg.esNotificada;
                        }
                        else
                        {
                            item.esNotificada = false;
                        }

                        if (lstArchivos != null)
                        {
                            item.numEvidencia = lstArchivos.Count();
                        }

                        #region ENTREVISTA
                        
                        if (item.id == 71 && objEntrevista != null && item.estatus == "PENDIENTE")
                        {
                            item.estatus = "APROBADA";
                            item.firma = GlobalUtils.CrearFirmaDigital(item.id, DocumentosEnum.ActividadesSeguimiento, vSesiones.sesionUsuarioDTO.id);
                            if (objSeg != null)
                            {
                                objSeg.esAprobada = (int)EstatusActividadEnum.aprobado;
                                objSeg.firma = item.firma;
                                _context.SaveChanges();
                            }
                            else
                            {
                                objSegCandidatosDTO.esAprobada = (int)EstatusActividadEnum.aprobado;
                                CrearEditarSegCandidatos(objSegCandidatosDTO);
                            }

                        }
                        #endregion

                        #region CV
                        
                        if (item.id == objActividadVitae.id && objVitae != null && item.estatus == "PENDIENTE")
                        {
                            item.estatus = "APROBADA";
                            item.firma = GlobalUtils.CrearFirmaDigital(item.id, DocumentosEnum.ActividadesSeguimiento, vSesiones.sesionUsuarioDTO.id);
                            if (objSeg != null)
                            {
                                objSeg.esAprobada = (int)EstatusActividadEnum.aprobado;
                                objSeg.firma = item.firma;
                                _context.SaveChanges();
                            }
                            else
                            {
                                objSegCandidatosDTO.esAprobada = (int)EstatusActividadEnum.aprobado;
                                CrearEditarSegCandidatos(objSegCandidatosDTO);
                            }

                        }
                        #endregion

                        #region EVALUACION TEORICA
                        if (item.id == 74 && !(objPuesto.esEvaluacion) && item.estatus == "PENDIENTE")
                        {
                            item.estatus = "APROBADA";
                            item.firma = GlobalUtils.CrearFirmaDigital(item.id, DocumentosEnum.ActividadesSeguimiento, vSesiones.sesionUsuarioDTO.id);
                            if (objSeg != null)
                            {
                                objSeg.esAprobada = (int)EstatusActividadEnum.aprobado;
                                objSeg.firma = item.firma;
                                _context.SaveChanges();
                            }
                            else
                            {
                                objSegCandidatosDTO.esAprobada = (int)EstatusActividadEnum.aprobado;
                                CrearEditarSegCandidatos(objSegCandidatosDTO);
                            }

                        }
                        #endregion

                        if (objValidar != null)
                        {
                            if (item.id == objValidar.idActividad)
                            {
                                item.esValidar = true;
                                item.actividadValidar = item.id;
                            }
                        }
                        else
                        {
                            if (item.id == 73 || item.id == 74)
                            {
                                item.esValidar = false;
                            }
                            else
                            {
                                item.esValidar = true;
                                item.actividadValidar = item.id;

                            }
                        }

                        // SE OBTIENE EL NOMBRE DEL ENCARGADO
                        item.nombreEncargado = _context.tblP_Usuario.Where(w => w.id == item.idUsuarioEncargado).Select(s => s.nombre + " " + s.apellidoPaterno + " " + s.apellidoMaterno).FirstOrDefault();

                    }
                    #endregion

                    int idCandidato = objSegCandidatosDTO.idCandidato;
                    lstSegID = _context.tblRH_REC_SegCandidatos.Where(w => w.idCandidato == idCandidato).Select(s => s.id).ToList();
                    lstSegDetCandidatos = _context.tblRH_REC_SegDetCandidatos.Where(w => lstSegID.Contains(w.idSeg) && w.esActivo).ToList();
                    int cantActividadesFinalizadas = 0;
                    var actsU = lstSegDetCandidatos.Where(w => lstSegID.Contains(w.idSeg) && (w.esAprobada == (int)EstatusActividadEnum.aprobado || w.esAprobada == (int)EstatusActividadEnum.noAplica) && actividadesObligatorias.Contains(w.idActividad)).Select(e => e.idActividad);
                    cantActividadesFinalizadas = actsU.Distinct().Count();
                    decimal progresoSeguimiento = ((decimal)cantActividadesFinalizadas / (decimal)actividadesObligatorias.Count()) * 100;
                    if (progresoSeguimiento > 100)
                    {
                        progresoSeguimiento = 100;
                    }

                    var objCandidato = _context.tblRH_REC_GestionCandidatos.FirstOrDefault(e => e.id == objSegCandidatosDTO.idCandidato);

                    transaccionSP.Commit();
                    SaveBitacora(16, (int)AccionEnum.CONSULTA, 0, JsonUtils.convertNetObjectToJson(objSegCandidatosDTO.idFase));

                    foreach (var item in lstActividades)
                    {
                        #region SE VERIFICA SI HAY PENDIENTES EN LA FASE

                        int cantActividades = lstActividades.Count();
                        int cantPendientes = lstActividades.Where(w => w.estatus.Contains("PENDIENTE")).Count();

                        switch (cantPendientes)
                        {
                            case 0:
                                item.colorFase = "green";
                                item.color = "white";
                                break;
                            case 1:
                                item.colorFase = "yellow";
                                item.color = "black";
                                break;
                            default:
                                item.colorFase = "orange";
                                item.color = "black";
                                break;
                        }

                        if (item.idFase == 1020)
                        {
                            if (objCandidato.estatus == 2)
                            {
                                item.colorFase = "green";
                                item.color = "white";
                            }
                            else
                            {
                                item.colorFase = "orange";
                                item.color = "black";
                            }

                        }

                        #endregion
                    }

                    resultado.Add("lstActividades", lstActividades);
                    resultado.Add("progresoVal", progresoSeguimiento);

                    if (objCandidato != null)
                    {
                        resultado.Add("esAlta", objCandidato.clave_empleado != null ? true : false);
                        resultado.Add("esReingreso", objCandidato.esReingreso);
                    }
                    else
                    {
                        resultado.Add("esAlta", false);
                        resultado.Add("esReingreso", false);
                    }

                    resultado.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    transaccionSP.Rollback();
                    LogError(16, 16, "ReclutamientosController", "GetActividades", e, AccionEnum.CONSULTA, objSegCandidatosDTO.idFase, objSegCandidatosDTO.idFase);
                    //return null;
                    resultado.Add(MESSAGE, e.Message);
                    resultado.Add(SUCCESS, false);
                }
            }
            return resultado;
        }

        public bool CrearActividad(tblRH_REC_Actividades objActividad)
        {
            try
            {
                #region SE CREA LA ACTIVIDAD
                tblRH_REC_Actividades objGuardar = new tblRH_REC_Actividades();
                objGuardar.idFase = objActividad.idFase > 0 ? objActividad.idFase : 0;
                objGuardar.tituloActividad = !string.IsNullOrEmpty(objActividad.tituloActividad) ? objActividad.tituloActividad.Trim() : string.Empty;
                objGuardar.descActividad = !string.IsNullOrEmpty(objActividad.descActividad) ? objActividad.descActividad.Trim() : string.Empty;
                objGuardar.esArchivos = objActividad.esArchivos;
                objGuardar.esObligatoria = objActividad.esObligatoria;
                objGuardar.esGeneral = objActividad.esGeneral;
                objGuardar.esCalificacion = objActividad.esCalificacion;
                objGuardar.esNecesarioAprobar = objActividad.esNecesarioAprobar;
                objGuardar.tipoArchivo = objActividad.tipoArchivo;
                objGuardar.fechaCreacion = DateTime.Now;
                objGuardar.fechaModificacion = new DateTime(2000, 01, 01);
                objGuardar.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                objGuardar.esActivo = true;
                _context.tblRH_REC_Actividades.Add(objGuardar);
                _context.SaveChanges();
                #endregion

                #region SE OBTIENE ID DE LA ACTIVIDAD REGISTRADA
                int idActividad = _context.tblRH_REC_Actividades.OrderByDescending(o => o.id).Select(s => s.id).FirstOrDefault();
                #endregion

                #region SE CREA BITACORA
                SaveBitacora(16, (int)AccionEnum.AGREGAR, idActividad, JsonUtils.convertNetObjectToJson(objActividad));
                #endregion

                return true;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "CrearActividad", e, AccionEnum.AGREGAR, 0, objActividad);
                return false;
            }
        }

        public bool ActualizarActividad(tblRH_REC_Actividades objActividad)
        {
            try
            {
                #region SE ACTUALIZA LA ACTIVIDAD
                tblRH_REC_Actividades objActualizar = _context.tblRH_REC_Actividades.Where(w => w.id == objActividad.id && w.esActivo).FirstOrDefault();
                objActualizar.idFase = objActividad.idFase;
                objActualizar.tituloActividad = !string.IsNullOrEmpty(objActividad.tituloActividad) ? objActividad.tituloActividad.Trim() : string.Empty;
                objActualizar.descActividad = !string.IsNullOrEmpty(objActividad.descActividad) ? objActividad.descActividad.Trim() : string.Empty;
                objActualizar.esArchivos = objActividad.esArchivos;
                objActualizar.esObligatoria = objActividad.esObligatoria;
                objActualizar.esGeneral = objActividad.esGeneral;
                objActualizar.esCalificacion = objActividad.esCalificacion;
                objActualizar.esNecesarioAprobar = objActividad.esNecesarioAprobar;
                objActualizar.tipoArchivo = objActividad.tipoArchivo;
                objActualizar.fechaModificacion = DateTime.Now;
                objActualizar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                _context.SaveChanges();
                #endregion

                #region SE CREA BITACORA
                SaveBitacora(16, (int)AccionEnum.ACTUALIZAR, objActividad.id, JsonUtils.convertNetObjectToJson(objActividad));
                #endregion

                return true;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "ActualizarActividad", e, AccionEnum.ACTUALIZAR, objActividad.id, objActividad);
                return false;
            }
        }

        public bool EliminarActividad(int idActividad)
        {
            try
            {
                #region SE ELIMINA LA ACTIVIDAD
                tblRH_REC_Actividades objEliminar = _context.tblRH_REC_Actividades.Where(w => w.id == idActividad).FirstOrDefault();
                objEliminar.esActivo = false;
                objEliminar.fechaModificacion = DateTime.Now;
                objEliminar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                _context.SaveChanges();
                #endregion

                #region SE CREA BITACORA
                SaveBitacora(16, (int)AccionEnum.CONSULTA, idActividad, JsonUtils.convertNetObjectToJson(idActividad));
                #endregion

                return true;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "EliminarActividad", e, AccionEnum.ELIMINAR, idActividad, idActividad);
                return false;
            }
        }

        public bool AsignarEncargadoFase(ActividadesDTO objActividadDTO)
        {
            try
            {
                #region SE ASIGNA AL USUARIO COMO ENCARGADO A TODAS LAS ACTIVIDADES DE LA FASE SELECCIONADA
                if (objActividadDTO.id > 0)
                    objActividadDTO.idFase = 0;

                List<tblRH_REC_Actividades> lstActividades = _context.tblRH_REC_Actividades
                    .Where(w => (objActividadDTO.idFase > 0 ? w.idFase == objActividadDTO.idFase : true) && (objActividadDTO.id > 0 ? w.id == objActividadDTO.id : true) && w.esActivo).ToList();
                foreach (var item in lstActividades)
                {
                    item.idUsuarioEncargado = objActividadDTO.idUsuarioEncargado;
                    item.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                    item.fechaModificacion = DateTime.Now;
                }
                _context.SaveChanges();
                #endregion

                #region SE CREA BITACORA
                SaveBitacora(16, (int)AccionEnum.ACTUALIZAR, objActividadDTO.id, JsonUtils.convertNetObjectToJson(objActividadDTO));
                #endregion

                return true;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "ActualizarActividad", e, AccionEnum.ACTUALIZAR, objActividadDTO.idFase, objActividadDTO);
                return false;
            }
        }
        #endregion

        #region PUESTOS RELACIONADOS A FASES
        public List<PuestosRelFasesDTO> GetPuestosRelFase(int idFase)
        {
            try
            {
                #region SE OBTIENE LOS PUESTOS RELACIONADOS A LA FASE SELECCIONADA
                List<PuestosRelFasesDTO> lstPuestosRelFase = _context.tblRH_REC_PuestosRelFases.Where(w => w.idFase == idFase && w.esActivo).Select(s => new PuestosRelFasesDTO
                {
                    id = s.id,
                    idFase = s.idFase,
                    fase = s.virtualLstFases.nombreFase,
                    idPuesto = s.idPuesto,
                    puesto = s.puesto
                }).ToList();
                #endregion

                #region SE CREA BITACORA
                SaveBitacora(16, (int)AccionEnum.CONSULTA, idFase, JsonUtils.convertNetObjectToJson(idFase));
                #endregion

                return lstPuestosRelFase;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "GetPuestosRelFase", e, AccionEnum.CONSULTA, idFase, idFase);
                return null;
            }
        }

        public bool CrearPuestoRelFase(tblRH_REC_PuestosRelFases objPuestoRelFase)
        {
            try
            {
                #region SE REGISTRA EL PUESTO REL A LA FASE
                tblRH_REC_PuestosRelFases objGuardar = new tblRH_REC_PuestosRelFases();
                objGuardar.idFase = objPuestoRelFase.idFase > 0 ? objPuestoRelFase.idFase : 0;
                objGuardar.idPuesto = objPuestoRelFase.idPuesto > 0 ? objPuestoRelFase.idPuesto : 0;
                objGuardar.puesto = !string.IsNullOrEmpty(objPuestoRelFase.puesto) ? objPuestoRelFase.puesto : string.Empty;
                objGuardar.fechaCreacion = DateTime.Now;
                objGuardar.fechaModificacion = new DateTime(2000, 01, 01);
                objGuardar.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                objGuardar.esActivo = true;
                _context.tblRH_REC_PuestosRelFases.Add(objGuardar);
                _context.SaveChanges();
                #endregion

                #region SE OBTIENE EL ID DEL PUESTO RELACIONADO A LA FASE REGISTRADO
                int idPuestoRelFase = _context.tblRH_REC_PuestosRelFases.OrderByDescending(o => o.id).Select(s => s.id).FirstOrDefault();
                #endregion

                #region SE CREA BITACORA
                SaveBitacora(16, (int)AccionEnum.AGREGAR, 16, JsonUtils.convertNetObjectToJson(objPuestoRelFase));
                #endregion

                return true;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "CrearPuestoRelFase", e, AccionEnum.AGREGAR, 0, objPuestoRelFase);
                return false;
            }
        }

        public bool EliminarPuestoRelFase(int idPuestoRelFase)
        {
            try
            {
                #region SE ELIMINA EL PUESTO REL A LA FASE
                tblRH_REC_PuestosRelFases objEliminar = _context.tblRH_REC_PuestosRelFases.Where(w => w.id == idPuestoRelFase).FirstOrDefault();
                objEliminar.esActivo = false;
                objEliminar.fechaModificacion = DateTime.Now;
                objEliminar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                _context.SaveChanges();
                #endregion

                #region SE CREA BITACORA
                SaveBitacora(16, (int)AccionEnum.ELIMINAR, idPuestoRelFase, JsonUtils.convertNetObjectToJson(idPuestoRelFase));
                #endregion

                return true;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "EliminarPuestoRelFase", e, AccionEnum.ELIMINAR, idPuestoRelFase, idPuestoRelFase);
                return false;
            }
        }

        public bool ExistePuestoEnFase(int idFase, int idPuesto)
        {
            try
            {
                #region SE VERIFICA SI EL PUESTO A REGISTRAR EN LA FASE EXISTE
                int existePuestoEnFase = _context.tblRH_REC_PuestosRelFases.Where(w => w.idFase == idFase && w.idPuesto == idPuesto && w.esActivo).Count();
                if (existePuestoEnFase > 0)
                    return false;
                else
                    return true;
                #endregion
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "ExistePuestoEnFase", e, AccionEnum.CONSULTA, 0, 0);
                return false;
            }
        }
        #endregion

        #region SEGUIMIENTO DE CANDIDATOS
        public List<SegCandidatosDTO> GetSegCandidatos(SegCandidatosDTO objFiltro)
        {
            //try
            //{

            var permisosCC = FillFiltroCboCC().Select(x => x.Value).ToList();

            List<tblRH_REC_Solicitudes> lstSolicitudes = _context.tblRH_REC_Solicitudes.Where(w => w.esActivo).ToList();
            List<tblRH_REC_GestionSolicitudes> lstGestionSolicitudes = _context.tblRH_REC_GestionSolicitudes.Where(w => w.esActivo).ToList();
            List<tblRH_REC_PuestosRelFases> lstPuestosRelFases = _context.tblRH_REC_PuestosRelFases.Where(w => w.esActivo).ToList();
            List<tblRH_REC_Actividades> lstActividades = _context.tblRH_REC_Actividades.Where(w => w.esActivo).ToList();
            List<tblRH_REC_Fases> lstFases = _context.tblRH_REC_Fases.Where(w => w.esActivo).ToList();
            List<tblRH_REC_SegCandidatos> lstSegCandidatos = _context.tblRH_REC_SegCandidatos.Where(w => w.esActivo).ToList();
            List<tblRH_REC_SegDetCandidatos> lstSegDetCandidatos = _context.tblRH_REC_SegDetCandidatos.Where(w => w.esActivo).ToList();
            List<int> lstCanditos_Entrevista = _context.tblRH_REC_EntrevistasIniciales.Select(w => w.idCandidato).ToList();
            List<int> lstFasesID = lstFases.Select(s => s.id).ToList();
            List<string> lstFasesStr = lstFases.Select(s => s.nombreFase).ToList();
            var actividadesObligatorias = _context.tblRH_REC_Actividades.Where(w => lstFasesID.Contains(w.idFase) && w.esActivo && w.esObligatoria == true).Select(e => e.id);

            #region SE OBTIENE LISTADO DE PUESTOS DE EK
            //List<dynamic> lstPuestos = new List<dynamic>();
            //string strQuery = @"SELECT puesto, descripcion FROM si_puestos";
            //var odbc = new OdbcConsultaDTO() { consulta = strQuery };
            //odbc.consulta = String.Format(strQuery);
            //lstPuestos = _contextEnkontrol.Select<dynamic>(EnkontrolEnum.CplanRh, odbc);
            var lstPuestos = _context.tblRH_EK_Puestos.ToList();
            #endregion

            if (objFiltro.lstFiltroCC == null || objFiltro.lstFiltroCC.Count == 0)
            {
                objFiltro.lstFiltroCC = new List<string>();
            }

            #region SE OBTIENE LISTADO DE CANDIDATOS ACTIVOS
            List<SegCandidatosDTO> lstSegCandidatosDTO = _context.tblRH_REC_GestionCandidatos.Where(w => 
                w.esActivo && lstCanditos_Entrevista.Contains(w.id)
                && permisosCC.Contains(w.virtualLstSolicitudes.cc)
                && objFiltro.lstFiltroCC.Contains(w.virtualLstSolicitudes.cc)
                && (objFiltro.estatus > 0 ? w.estatus == objFiltro.estatus : true)
                ).Select(s => new SegCandidatosDTO
                {
                    id = s.id,
                    nombreCandidato = string.Empty,
                    nombre = s.nombre,
                    apePaterno = s.apePaterno,
                    apeMaterno = s.apeMaterno,
                    correo = s.correo,
                    celular = s.celular,
                    idPuesto = s.idPuesto,
                    puesto = s.puestoDesc,
                    puestoGeneral = s.virtualLstSolicitudes.esGeneral,
                    cantFases = 0,
                    lstFasesID = lstFasesID,
                    lstFasesStr = lstFasesStr,
                    progresoSeguimiento = 0,
                    seguimientoCancelado = false,
                    esSeguimientoCancelado = "ACTIVO",
                    clave_empleado = s.clave_empleado,
                    esReingreso = s.esReingreso,
                    fechaNacimiento = s.fechaNacimiento,
                    telefono = s.telefono,
                    estatus = s.estatus
                }).ToList();
            #endregion

            #region SE OBTIENE LAS FASES RELACIONADAS AL PUESTO DEL CANDIDATO
            foreach (var item in lstSegCandidatosDTO)
            {
                #region SE OBTIENE NOMBRE DEL CANDIDATO
                item.nombreCandidato = item.apePaterno + " " + item.apeMaterno + " " + item.nombre;
                string nombreCandidato = item.nombreCandidato;
                item.nombreCandidato = nombreCandidato.Trim().ToUpper();
                #endregion

                #region SE OBTIENE CORREO DEL CANDIDATO
                string correo = item.correo;
                item.correo = correo.Trim().ToUpper();
                #endregion

                #region SE OBTIENE PUESTO DEL CANDIDATO
                int idPuesto = item.idPuesto;
                string puesto = item.puesto;
                if (!string.IsNullOrEmpty(puesto))
                    item.puesto = puesto ?? "";
                else
                    puesto = lstPuestos.Where(w => w.puesto == idPuesto).Select(s => s.descripcion).FirstOrDefault() ?? "";

                item.puesto = puesto.Trim().ToUpper();
                #endregion

                #region SE VERIFICA SI LA ACTIVIDAD ES GENERAL
                bool esGeneral = item.puestoGeneral;
                #endregion

                #region SE OBTIENE LA CANTIDAD DE FASES ASIGNADAS AL CANDIDATO
                item.cantFases = lstFases.Count();
                #endregion

                #region SE OBTIENE EL PROGRESO EN % DEL CANDIDATO
                int idCandidato = item.id;
                List<int> lstSegID = lstSegCandidatos.Where(w => w.idCandidato == idCandidato).Select(s => s.id).ToList();
                int cantActividadesFinalizadas = 0;
                var actsU = lstSegDetCandidatos.Where(w => lstSegID.Contains(w.idSeg) && (w.esAprobada == (int)EstatusActividadEnum.aprobado || w.esAprobada == (int)EstatusActividadEnum.noAplica) && actividadesObligatorias.Contains(w.idActividad)).Select(e => e.idActividad);
                cantActividadesFinalizadas = actsU.Distinct().Count();
                decimal progresoSeguimiento = ((decimal)cantActividadesFinalizadas / (decimal)actividadesObligatorias.Count()) * 100;
                item.progresoSeguimiento = (decimal)progresoSeguimiento;
                if (item.progresoSeguimiento > 100)
                {
                    item.progresoSeguimiento = 100;
                }
                #endregion

                #region SE VERIFICA SI EL CANDIDATO TIENE UNA ACTIVIDAD NO APROBADA, QUE ES NECESARIO APROBAR PARA CONTINUAR CON EL PROCESO
                if (!item.seguimientoCancelado)
                {
                    List<tblRH_REC_SegDetCandidatos> lstEstatusActividadRelFase = lstSegDetCandidatos.Where(w => lstSegID.Contains(w.idSeg) && w.esActivo).ToList();
                    foreach (var itemEstatusActividad in lstEstatusActividadRelFase)
                    {
                        if (itemEstatusActividad.esAprobada == (int)EstatusActividadEnum.noAprobado)
                        {
                            bool esNecesarioAprobar = lstActividades.Where(w => w.id == itemEstatusActividad.idActividad).Select(s => s.esNecesarioAprobar).FirstOrDefault();
                            if (esNecesarioAprobar)
                            {
                                item.seguimientoCancelado = true;
                                item.esSeguimientoCancelado = "SE DETIENE EL PROCESO DE ESTE CANDIDATO.";
                            }
                        }
                    }
                }
                #endregion

                var age = DateTime.Now.Year - item.fechaNacimiento.Year;
                if (item.fechaNacimiento.Date > DateTime.Now.AddYears(-age)) age--;
                item.edad = age;
                item.telefono = item.telefono;
            }

            #endregion

            #region SE CREA BITACORA
            SaveBitacora(16, (int)AccionEnum.CONSULTA, 0, JsonUtils.convertNetObjectToJson(objFiltro));
            #endregion

            return lstSegCandidatosDTO;
            //}
            //catch (Exception e)
            //{
            //    LogError(16, 16, "ReclutamientosController", "GetSegCandidatos", e, AccionEnum.CONSULTA, 0, objFiltro);
            //    return null;
            //}
        }

        public List<SegCandidatosDTO> GetSegDetCandidatos(SegCandidatosDTO objFiltro)
        {
            try
            {
                List<tblRH_REC_SegCandidatos> lstSegCandidatos = _context.tblRH_REC_SegCandidatos.Where(w => w.esActivo).ToList();
                List<tblRH_REC_SegDetCandidatos> lstSegDetCandidatos = _context.tblRH_REC_SegDetCandidatos.Where(w => w.esActivo).ToList();

                return null;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "GetSegDetCandidatos", e, AccionEnum.CONSULTA, 0, objFiltro);
                return null;
            }
        }

        public bool CrearEditarSegCandidatos(SegCandidatosDTO objSegCandidatoDTO)
        {
            try
            {
                #region SE VERIFICA SI HAY UN SEGUIMIENTO DE LA ACTIVIDAD A EVALUAR DEL CANDIDATO SELECCIONADO
                //tblRH_REC_SegCandidatos objSegCandidatos = _context.tblRH_REC_SegCandidatos.Where(w => w.idCandidato == objSegCandidatoDTO.idCandidato && w.idFase == objSegCandidatoDTO.idFase && w.esActivo).FirstOrDefault();

                int idSegCandidato = _context.tblRH_REC_SegCandidatos.Where(w => w.idCandidato == objSegCandidatoDTO.idCandidato && w.idFase == objSegCandidatoDTO.idFase && w.esActivo).Select(s => s.id).FirstOrDefault();
                tblRH_REC_SegDetCandidatos objActualizarSegDet = _context.tblRH_REC_SegDetCandidatos.Where(w => w.idSeg == idSegCandidato && w.idActividad == objSegCandidatoDTO.idActividad && w.esActivo).FirstOrDefault();
                if (objActualizarSegDet != null)
                {
                    #region SE ACTUALIZA LA EVALUACIÓN DEL CANDIDATO DE LA ACTIVIDAD SELECCIONADA
                    objActualizarSegDet.calificacion = objSegCandidatoDTO.calificacion > 0 ? objSegCandidatoDTO.calificacion : 0;
                    objActualizarSegDet.esAprobada = objSegCandidatoDTO.esAprobada == 0 ? (int)EstatusActividadEnum.noAprobado : objSegCandidatoDTO.esAprobada == 1 ? (int)EstatusActividadEnum.aprobado : objSegCandidatoDTO.esAprobada == 3 ? (int)EstatusActividadEnum.noAplica : (int)EstatusActividadEnum.pendiente;
                    objActualizarSegDet.firma = GlobalUtils.CrearFirmaDigital(objActualizarSegDet.id, DocumentosEnum.ActividadesSeguimiento, vSesiones.sesionUsuarioDTO.id);
                    objActualizarSegDet.fechaModificacion = DateTime.Now;
                    objActualizarSegDet.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                    _context.SaveChanges();
                    #endregion
                }
                else
                {
                    #region SE CREA LA EVALUACIÓN DEL CANDIDATO DE LA ACTIVIDAD SELECCIONADA
                    objSegCandidatoDTO.idSeg = _context.tblRH_REC_SegCandidatos.Where(w => w.idCandidato == objSegCandidatoDTO.idCandidato && w.idFase == objSegCandidatoDTO.idFase && w.esActivo).Select(s => s.id).FirstOrDefault();
                    if (objSegCandidatoDTO.idSeg <= 0)
                    {
                        objSegCandidatoDTO.idSeg = CrearSegCandidato(objSegCandidatoDTO);
                    }

                    tblRH_REC_SegDetCandidatos objCrearSegDetCandidato = new tblRH_REC_SegDetCandidatos();
                    objCrearSegDetCandidato.idSeg = objSegCandidatoDTO.idSeg > 0 ? objSegCandidatoDTO.idSeg : 0;
                    objCrearSegDetCandidato.idActividad = objSegCandidatoDTO.idActividad > 0 ? objSegCandidatoDTO.idActividad : 0;
                    objCrearSegDetCandidato.calificacion = objSegCandidatoDTO.calificacion > 0 ? objSegCandidatoDTO.calificacion : 0;
                    objCrearSegDetCandidato.esAprobada = objSegCandidatoDTO.esAprobada == 0 ? (int)EstatusActividadEnum.noAprobado : objSegCandidatoDTO.esAprobada == 1 ? (int)EstatusActividadEnum.aprobado : objSegCandidatoDTO.esAprobada == 3 ? (int)EstatusActividadEnum.noAplica : (int)EstatusActividadEnum.pendiente;
                    objCrearSegDetCandidato.esOmitida = objSegCandidatoDTO.esOmitida;
                    objCrearSegDetCandidato.comentario = !string.IsNullOrEmpty(objSegCandidatoDTO.comentario) ? objSegCandidatoDTO.comentario.Trim().ToUpper() : string.Empty;
                    objCrearSegDetCandidato.fechaActividad = objSegCandidatoDTO.fechaActividad.Year > 1000 ? objSegCandidatoDTO.fechaActividad : new DateTime(2000, 01, 01);
                    objCrearSegDetCandidato.firma = GlobalUtils.CrearFirmaDigital(objSegCandidatoDTO.idSeg, DocumentosEnum.ActividadesSeguimiento, vSesiones.sesionUsuarioDTO.id);
                    objCrearSegDetCandidato.fechaCreacion = DateTime.Now;
                    objCrearSegDetCandidato.fechaModificacion = new DateTime(2000, 01, 01);
                    objCrearSegDetCandidato.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                    objCrearSegDetCandidato.idUsuarioModificacion = 0;
                    objCrearSegDetCandidato.esActivo = true;
                    _context.tblRH_REC_SegDetCandidatos.Add(objCrearSegDetCandidato);
                    _context.SaveChanges();
                    #endregion
                }
                #endregion

                #region SE CREA BITACORA
                SaveBitacora(16, (int)AccionEnum.AGREGAR, 0, JsonUtils.convertNetObjectToJson(objSegCandidatoDTO));
                #endregion

                return true;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "CrearEditarSegCandidatos", e, AccionEnum.AGREGAR, 0, objSegCandidatoDTO);
                return false;
            }
        }

        private int CrearSegCandidato(SegCandidatosDTO objSegCandidatoDTO)
        {
            try
            {
                tblRH_REC_SegCandidatos objCrearSegCandidato = new tblRH_REC_SegCandidatos();
                objCrearSegCandidato.idCandidato = objSegCandidatoDTO.idCandidato > 0 ? objSegCandidatoDTO.idCandidato : 0;
                objCrearSegCandidato.idFase = objSegCandidatoDTO.idFase > 0 ? objSegCandidatoDTO.idFase : 0;
                objCrearSegCandidato.fechaCreacion = DateTime.Now;
                objCrearSegCandidato.fechaModificacion = new DateTime(2000, 01, 01);
                objCrearSegCandidato.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                objCrearSegCandidato.idUsuarioModificacion = 0;
                objCrearSegCandidato.esActivo = true;
                _context.tblRH_REC_SegCandidatos.Add(objCrearSegCandidato);
                _context.SaveChanges();

                objSegCandidatoDTO.idSeg = _context.tblRH_REC_SegCandidatos.Where(w => w.idCandidato == objSegCandidatoDTO.idCandidato && w.idFase == objSegCandidatoDTO.idFase && w.esActivo)
                                                                           .OrderByDescending(o => o.id).Select(s => s.id).FirstOrDefault();

                return objSegCandidatoDTO.idSeg;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "CrearSegCandidato", e, AccionEnum.AGREGAR, 0, objSegCandidatoDTO);
                return 0;
            }
        }

        public bool CrearEditarComentarioActividad(SegCandidatosDTO objSegCandidatoDTO)
        {
            try
            {
                int idSegCandidato = _context.tblRH_REC_SegCandidatos.Where(w => w.idCandidato == objSegCandidatoDTO.idCandidato && w.idFase == objSegCandidatoDTO.idFase && w.esActivo).Select(s => s.id).FirstOrDefault();
                tblRH_REC_SegDetCandidatos objActualizarSegDet = _context.tblRH_REC_SegDetCandidatos.Where(w => w.idSeg == idSegCandidato && w.idActividad == objSegCandidatoDTO.idActividad && w.esActivo).FirstOrDefault();
                if (objActualizarSegDet != null)
                {
                    objActualizarSegDet.comentario = !string.IsNullOrEmpty(objSegCandidatoDTO.comentario) ? objSegCandidatoDTO.comentario.Trim().ToUpper() : string.Empty;
                    objActualizarSegDet.fechaModificacion = DateTime.Now;
                    objActualizarSegDet.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                    _context.SaveChanges();
                }
                else
                {
                    #region SE CREA LA EVALUACIÓN DEL CANDIDATO DE LA ACTIVIDAD SELECCIONADA
                    objSegCandidatoDTO.idSeg = _context.tblRH_REC_SegCandidatos.Where(w => w.idCandidato == objSegCandidatoDTO.idCandidato && w.idFase == objSegCandidatoDTO.idFase && w.esActivo).Select(s => s.id).FirstOrDefault();
                    if (objSegCandidatoDTO.idSeg <= 0)
                    {
                        objSegCandidatoDTO.idSeg = CrearSegCandidato(objSegCandidatoDTO);
                    }

                    tblRH_REC_SegDetCandidatos objCrearSegDetCandidato = new tblRH_REC_SegDetCandidatos();
                    objCrearSegDetCandidato.idSeg = objSegCandidatoDTO.idSeg > 0 ? objSegCandidatoDTO.idSeg : 0;
                    objCrearSegDetCandidato.idActividad = objSegCandidatoDTO.idActividad > 0 ? objSegCandidatoDTO.idActividad : 0;
                    objCrearSegDetCandidato.comentario = !string.IsNullOrEmpty(objSegCandidatoDTO.comentario) ? objSegCandidatoDTO.comentario.Trim().ToUpper() : string.Empty;
                    objCrearSegDetCandidato.fechaActividad = objSegCandidatoDTO.fechaActividad.Year > 1000 ? objSegCandidatoDTO.fechaActividad : new DateTime(2000, 01, 01);
                    objCrearSegDetCandidato.fechaCreacion = DateTime.Now;
                    objCrearSegDetCandidato.fechaModificacion = new DateTime(2000, 01, 01);
                    objCrearSegDetCandidato.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                    objCrearSegDetCandidato.idUsuarioModificacion = 0;
                    objCrearSegDetCandidato.esActivo = true;
                    _context.tblRH_REC_SegDetCandidatos.Add(objCrearSegDetCandidato);
                    _context.SaveChanges();
                    #endregion
                }
                return true;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "CrearEditarComentarioActividad", e, AccionEnum.AGREGAR, 0, objSegCandidatoDTO);
                return false;
            }
        }

        public string GetObservacionActividad(SegCandidatosDTO objSegCandidatoDTO)
        {
            try
            {
                int idSegCandidato = _context.tblRH_REC_SegCandidatos.Where(w => w.idCandidato == objSegCandidatoDTO.idCandidato && w.idFase == objSegCandidatoDTO.idFase && w.esActivo).Select(s => s.id).FirstOrDefault();
                //var objSegDet = _context.tblRH_REC_SegDetCandidatos.Where(w => w.idSeg == idSegCandidato && w.idActividad == objSegCandidatoDTO.idActividad && w.esActivo).FirstOrDefault();
                tblRH_REC_SegDetCandidatos objSegDet = _context.tblRH_REC_SegDetCandidatos.Where(w => w.idSeg == idSegCandidato && w.idActividad == objSegCandidatoDTO.idActividad && w.esActivo).FirstOrDefault();

                if (objSegDet != null)
                {
                    return objSegDet.comentario;

                }
                else
                {
                    return string.Empty;
                }
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "GetObservacionActividad", e, AccionEnum.CONSULTA, 0, objSegCandidatoDTO);
                return null;
            }
        }

        public bool CrearArchivoActividad(SegCandidatosDTO objSegCandidatoDTO, List<HttpPostedFileBase> lstFiles)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
                try
                {
                    //var archivoExistente = _context.tblRH_REC_Archivos.FirstOrDefault(x => x.esActivo && x.idCandidato == objSegCandidatoDTO.idCandidato && x.idActividad == objSegCandidatoDTO.idActividad);

                    //if (archivoExistente != null)
                    //{
                    //    throw new Exception("Ya se ha cargado un archivo para ese actividad.");
                    //}

                    if (lstFiles != null && lstFiles.Count > 0)
                    {
                        foreach (var objFile in lstFiles)
                        {

                            #region SE GUARDAR EL ARCHIVO
                            List<Tuple<HttpPostedFileBase, string>> listaRutaArchivos = new List<Tuple<HttpPostedFileBase, string>>();
                            var CarpetaNueva = Path.Combine(RutaServidor, objSegCandidatoDTO.idCandidato.ToString());
                            ExisteCarpeta(CarpetaNueva, true);

                            string nombreArchivo = ObtenerFormatoNombreArchivoA("Reclutamiento -", objFile.FileName);
                            string rutaArchivo = Path.Combine(CarpetaNueva, nombreArchivo);
                            listaRutaArchivos.Add(Tuple.Create(objFile, rutaArchivo));

                            tblRH_REC_Archivos objArchivo = new tblRH_REC_Archivos();
                            objArchivo.idCandidato = objSegCandidatoDTO.idCandidato;
                            objArchivo.claveEmpleado = 0;
                            objArchivo.idFase = objSegCandidatoDTO.idFase;
                            objArchivo.idActividad = objSegCandidatoDTO.idActividad;
                            objArchivo.tipoArchivo = (int)TipoArchivoEnum.seguimientoFases;
                            objArchivo.nombreArchivo = nombreArchivo;
                            objArchivo.ubicacionArchivo = rutaArchivo;
                            objArchivo.fechaCreacion = DateTime.Now;
                            objArchivo.fechaModificacion = new DateTime(2000, 01, 01);
                            objArchivo.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                            objArchivo.idUsuarioModificacion = 0;
                            objArchivo.esActivo = true;
                            _context.tblRH_REC_Archivos.Add(objArchivo);
                            _context.SaveChanges();

                            if (GlobalUtils.SaveHTTPPostedFile(objFile, rutaArchivo) == false)
                                throw new Exception("Ocurrió un error al registrar el archivo.");
                            #endregion
                        }

                    }

                    #region SE CREA BITACORA
                    SaveBitacora(16, (int)AccionEnum.AGREGAR, objSegCandidatoDTO.id, JsonUtils.convertNetObjectToJson(objSegCandidatoDTO));
                    #endregion

                    dbContextTransaction.Commit();
                    return true;
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(16, 16, "ReclutamientosController", "CrearCandidato", e, AccionEnum.AGREGAR, 0, objSegCandidatoDTO);
                    return false;
                }
        }

        public List<ArchivosDTO> GetArchivosActividadesRelFase(SegCandidatosDTO objSegCandidatoDTO)
        {
            try
            {
                List<tblRH_REC_Archivos> lstArchivos = _context.tblRH_REC_Archivos.Where(w => w.idCandidato == objSegCandidatoDTO.idCandidato &&
                                                                                              w.idFase == objSegCandidatoDTO.idFase &&
                                                                                              w.idActividad == objSegCandidatoDTO.idActividad &&
                                                                                              w.tipoArchivo == (int)TipoArchivoEnum.seguimientoFases && w.esActivo).ToList();
                List<ArchivosDTO> lstArchivosDTO = lstArchivos.Select(s => new ArchivosDTO
                {
                    id = s.id,
                    nombreArchivo = s.nombreArchivo,
                    descripcion = s.descripcion,
                    ubicacionArchivo = s.ubicacionArchivo,
                }).ToList();
                return lstArchivosDTO;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "GetArchivosActividadesRelFase", e, AccionEnum.CONSULTA, 0, objSegCandidatoDTO);
                return null;
            }
        }

        public string GetArchivoEvidencia(int id_file)
        {
            string ruta = "";

            try
            {
                var objArchivo = _context.tblRH_REC_Archivos.FirstOrDefault(e => e.id == id_file);

                if (objArchivo != null)
                {
                    ruta = objArchivo.ubicacionArchivo;
                }
            }
            catch (Exception e)
            {

            }

            return ruta;
        }

        public bool EliminarArchivoActividad(int idArchivo)
        {
            try
            {
                tblRH_REC_Archivos objEliminar = _context.tblRH_REC_Archivos.Where(w => w.id == idArchivo && w.esActivo).FirstOrDefault();
                objEliminar.esActivo = false;
                objEliminar.fechaModificacion = DateTime.Now;
                objEliminar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                _context.SaveChanges();

                return true;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "EliminarArchivoActividad", e, AccionEnum.ELIMINAR, 0, idArchivo);
                return false;
            }
        }

        public bool CrearEditarCalificacionActividad(SegCandidatosDTO objSegCandidatoDTO)
        {
            try
            {
                int idSegCandidato = _context.tblRH_REC_SegCandidatos.Where(w => w.idCandidato == objSegCandidatoDTO.idCandidato && w.idFase == objSegCandidatoDTO.idFase && w.esActivo).Select(s => s.id).FirstOrDefault();
                tblRH_REC_SegDetCandidatos objActualizarSegDet = _context.tblRH_REC_SegDetCandidatos.Where(w => w.idSeg == idSegCandidato && w.idActividad == objSegCandidatoDTO.idActividad && w.esActivo).FirstOrDefault();
                if (objActualizarSegDet != null)
                {
                    objActualizarSegDet.calificacion = objSegCandidatoDTO.calificacion > 0 ? objSegCandidatoDTO.calificacion : 0;
                    objActualizarSegDet.fechaModificacion = DateTime.Now;
                    objActualizarSegDet.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                    _context.SaveChanges();
                }
                else
                {
                    #region SE CREA LA EVALUACIÓN DEL CANDIDATO DE LA ACTIVIDAD SELECCIONADA
                    objSegCandidatoDTO.idSeg = _context.tblRH_REC_SegCandidatos.Where(w => w.idCandidato == objSegCandidatoDTO.idCandidato && w.idFase == objSegCandidatoDTO.idFase && w.esActivo).Select(s => s.id).FirstOrDefault();
                    if (objSegCandidatoDTO.idSeg <= 0)
                    {
                        objSegCandidatoDTO.idSeg = CrearSegCandidato(objSegCandidatoDTO);
                    }

                    tblRH_REC_SegDetCandidatos objCrearSegDetCandidato = new tblRH_REC_SegDetCandidatos();
                    objCrearSegDetCandidato.idSeg = objSegCandidatoDTO.idSeg > 0 ? objSegCandidatoDTO.idSeg : 0;
                    objCrearSegDetCandidato.idActividad = objSegCandidatoDTO.idActividad > 0 ? objSegCandidatoDTO.idActividad : 0;
                    objCrearSegDetCandidato.calificacion = objSegCandidatoDTO.calificacion > 0 ? objSegCandidatoDTO.calificacion : 0;
                    objCrearSegDetCandidato.fechaActividad = objSegCandidatoDTO.fechaActividad.Year > 1000 ? objSegCandidatoDTO.fechaActividad : new DateTime(2000, 01, 01);
                    objCrearSegDetCandidato.fechaCreacion = DateTime.Now;
                    objCrearSegDetCandidato.fechaModificacion = new DateTime(2000, 01, 01);
                    objCrearSegDetCandidato.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                    objCrearSegDetCandidato.idUsuarioModificacion = 0;
                    objCrearSegDetCandidato.esActivo = true;
                    _context.tblRH_REC_SegDetCandidatos.Add(objCrearSegDetCandidato);
                    _context.SaveChanges();
                    #endregion
                }
                return true;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "CrearEditarCalificacionActividad", e, AccionEnum.AGREGAR, 0, objSegCandidatoDTO);
                return false;
            }
        }

        public Dictionary<string, object> GetFasesAutorizadas(int idPuesto)
        {
            resultado = new Dictionary<string, object>();

            try
            {
                var fasesPermitidas = _context.tblRH_REC_FasesUsuarios.Where(x => x.idUsuario == vSesiones.sesionUsuarioDTO.id && x.esActivo)
                    .Select(x => new
                    {
                        id = x.idFase
                    }).ToList();

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, fasesPermitidas);
                //string cc = _context.tblRH_REC_Solicitudes.FirstOrDefault(e => e.esActivo && e.idPuesto == idPuesto).cc;
                //int idCC = _context.tblP_CC.FirstOrDefault(e => e.cc == cc).id;
                //List<tblRH_REC_Fases> lstFases = _context.tblRH_REC_Fases.Where(w => w.esActivo).ToList();
                //List<tblRH_REC_Fases> lstFasesFiltered = new List<tblRH_REC_Fases>();
                //List<tblRH_REC_FasesCC> lstFasesCC = _context.tblRH_REC_FasesCC.Where(e => e.esActivo && e.idCC == idCC).ToList();
                //List<tblRH_REC_FasesUsuarios> lstFasesUsuario = _context.tblRH_REC_FasesUsuarios.Where(e => e.esActivo && e.idUsuario == vSesiones.sesionUsuarioDTO.id).ToList();

                //lstFasesFiltered.AddRange(lstFases);

                //foreach (var item in lstFases)
                //{
                //    var lstPermitidasCC = lstFasesCC.FirstOrDefault(e => e.idFase == item.id);
                //    var lstPermitidasUsuarios = lstFasesUsuario.FirstOrDefault(e => e.idFase == item.id);

                //    if (lstPermitidasCC != null)
                //    {

                //    }
                //    else
                //    {
                //        lstFasesFiltered.Remove(item);    
                //        continue;
                //    }

                //    if (lstPermitidasUsuarios != null)
                //    {

                //    }
                //    else
                //    {
                //        lstFasesFiltered.Remove(item);
                //        continue;
                //    }
                //}

                //resultado.Add(ITEMS, lstFasesFiltered);
                //resultado.Add(SUCCESS, true);

            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "GetFasesAutorizadas", e, AccionEnum.CONSULTA, 0, new { idPuesto = idPuesto });

                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }

            return resultado;
        }

        public bool SetNotiEstatusActividad(int idCandidato, int idFase, int idActividad)
        {
            using (var transaccionSP = _context.Database.BeginTransaction())
            {
                try
                {
                    var lstIdSeg = _context.tblRH_REC_SegCandidatos.Where(e => e.idCandidato == idCandidato && e.esActivo).Select(e => e.id).ToList();
                    var objActividad = _context.tblRH_REC_SegDetCandidatos.FirstOrDefault(e => lstIdSeg.Contains(e.idSeg) && e.idActividad == idActividad);

                    //SI NO TIENE LA FASE Y EL DETALLE DELA FASE (registro en tblRH_REC_SegCandiadtos/tblRH_REC_SegDetCandidatos) SE CREAN DEFAULT PARA PODER NOTIFICARSE
                    if (objActividad == null)
                    {

                        CrearEditarSegCandidatos(new SegCandidatosDTO
                        {
                            idFase = idFase,
                            idActividad = idActividad,
                            idCandidato = idCandidato,
                            calificacion = 0,
                            esAprobada = 2,
                            esOmitida = false,
                            fechaActividad = DateTime.Now,
                        });

                        var objNewSeg = _context.tblRH_REC_SegCandidatos.FirstOrDefault(e => e.idCandidato == idCandidato && e.idFase == 1017 && e.esActivo);
                        var objNewActividad = _context.tblRH_REC_SegDetCandidatos.FirstOrDefault(e => e.idSeg == objNewSeg.id && e.idActividad == idActividad && e.esActivo);

                        objNewActividad.esNotificada = true;
                        _context.SaveChanges();

                    }
                    else
                    {
                        objActividad.esNotificada = true;
                        _context.SaveChanges();
                    }

                    transaccionSP.Commit();
                }
                catch (Exception e)
                {
                    transaccionSP.Rollback();
                    return false;
                }
            }

            return true;
        }
        #endregion

        #region EMPLEADOS EK
        public List<EmpleadosDTO> GetEmpleadosEK(List<string> cc, List<string> lstEstatusEmpleado)
        {
            try
            {
                bool permisoGerencia = (_context.tblP_AccionesVistatblP_Usuario.Where(x => x.tblP_Usuario_id == vSesiones.sesionUsuarioDTO.id && x.tblP_AccionesVista_id == 4054).Count()) > 0;
                bool permisoGerenciaSinSueldos = (_context.tblP_AccionesVistatblP_Usuario.Where(x => x.tblP_Usuario_id == vSesiones.sesionUsuarioDTO.id && x.tblP_AccionesVista_id == 4057).Count()) > 0;

                //MOSTRAR GERENTES Y DIRECTORES PERO OCULTAR EL HISTORIAL DE TABULADORES
                if (permisoGerenciaSinSueldos)
                {
                    permisoGerencia = true;
                }

                List<string> ccsPermitidos = new List<string>();

                if (lstEstatusEmpleado[0] == "B")
                {
                    if (cc == null || cc.Count == 0)
                    {
                        if (vSesiones.sesionUsuarioDTO.idPerfil == (int)PerfilUsuarioEnum.ADMINISTRADOR || vSesiones.sesionUsuarioDTO.esAuditor)
                            cc = null;

                    }

                    permisoGerencia = true;
                }
                else
                {
                    if (cc == null || cc.Count == 0)
                    {
                        if (vSesiones.sesionUsuarioDTO.idPerfil == (int)PerfilUsuarioEnum.ADMINISTRADOR || vSesiones.sesionUsuarioDTO.esAuditor)
                            cc = null;
                        else
                        {
                            ccsPermitidos = ccPermitidos().Select(x => x.cc).ToList();
                            cc = ccsPermitidos.ToList();
                        }
                    }
                    else
                    {
                        ccsPermitidos = ccPermitidos().Select(x => x.cc).ToList();
                        cc = cc.Where(x => ccsPermitidos.Contains(x)).ToList();
                    }
                }

                List<EmpleadosDTO> lstEmpleadosEK = new List<EmpleadosDTO>();

                // SE ELIMINA QUITA SELECCION "Todos"
                if (lstEstatusEmpleado.Count() == 4)
                    lstEstatusEmpleado.Remove("Todos");

                var clave_empleado = 0;
                if (!string.IsNullOrEmpty(vSesiones.sesionUsuarioDTO.cveEmpleado))
                    clave_empleado = Convert.ToInt32(vSesiones.sesionUsuarioDTO.cveEmpleado);

                string estatusJOIN = string.Empty;
                if (lstEstatusEmpleado.Count() > 0)
                {
                    estatusJOIN += "(";
                    for (int i = 0; i < lstEstatusEmpleado.Count(); i++)
                    {
                        if (i == lstEstatusEmpleado.Count() - 1)
                            estatusJOIN += "'" + lstEstatusEmpleado[i] + "'";
                        else
                            estatusJOIN += "'" + lstEstatusEmpleado[i] + "', ";
                    }
                    estatusJOIN += ")";
                }

                var filtroCCString = "";
                if (cc != null && cc.Count() > 0)
                    filtroCCString = "AND t1.cc_contable IN (" + string.Join(", ", cc.Select(x => "'" + x + "'").ToList()) + ")";
                else
                {
                    if (cc != null)
                        return new List<EmpleadosDTO>();
                }

                var empleados = _context.Select<EmpleadosDTO>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = string.Format(@"
                    SELECT
                        t1.cc_contable,
                        t1.clave_empleado,
                        t1.contratable,
                        t1.nombre,
                        t1.ape_paterno,
                        t1.ape_materno,
                        t1.puesto,
	                    t1.fecha_alta as fecha_primer_contrato,
                        t1.fecha_antiguedad,
	                    t1.fecha_alta,
	                    t1.fecha_nac,
                        t1.clave_pais_nac,
                        t1.clave_estado_nac,
                        t1.clave_ciudad_nac,
                        t1.estatus_empleado,
                        t1.localidad_nacimiento,
                        t1.sexo,
                        t1.rfc,
                        t1.curp,
                        t1.autoriza,
                        t2.descripcion,
                        t3.cc,
                        t1.id_regpat,
	                    t4.nombre_corto as desc_reg_pat,
                        t5.descripcion AS paisNac,
                        t6.descripcion AS estadoNac,
                        t7.descripcion AS lugarNac,					                    
	                    (
                            SELECT COUNT(*)  
		                    FROM tblRH_EK_Empl_CC_Historial as t8
		                    WHERE t1.clave_empleado = t8.clave_empleado

	                    ) as cantidadCCHistorial,
	                    (CASE WHEN t1.estatus_empleado = 'B' THEN t10.fechaBaja ELSE NULL END) as fechaBaja,
	                    (CASE WHEN t1.estatus_empleado = 'B' THEN t11.desc_motivo_baja ELSE NULL END) as motivoBaja,
	                    (SELECT TOP 1 ubicacionArchivo FROM tblRH_REC_Archivos as t13 WHERE t1.clave_empleado = t13.claveEmpleado AND t13.tipoArchivo = 30 ORDER BY id DESC) as fotoEmpleado,
                        t10.est_contabilidad,
                        CASE
                            WHEN t1.autoriza = {2} OR {2} = 113 OR {2} = 71 THEN 1 ELSE 0 /*113 == manuel cruz, 71 == diana alvarez*/
                        END AS esAutorizante,
						(
                            SELECT TOP 1 id
		                    FROM tblRH_REC_GestionCandidatos as t14
		                    WHERE t1.clave_empleado = t14.clave_empleado AND t14.esActivo = 1 AND t14.estatus = 1
							ORDER BY id DESC
	                    ) as idCandidato,
                        tabCat.concepto AS categoriaDescripcion
                    FROM
                        tblRH_EK_Empleados AS t1
                    LEFT JOIN
                        tblRH_EK_Puestos AS t2 ON t1.puesto = t2.puesto
                    LEFT JOIN
                        tblRH_EK_Departamentos AS t3 ON t1.clave_depto = t3.clave_depto AND t1.cc_contable = t3.cc
                    LEFT JOIN
                        tblRH_EK_Registros_Patronales AS t4 ON t1.id_regpat = t4.clave_reg_pat
                    INNER JOIN
                        tblRH_EK_Paises AS t5 ON t1.clave_pais_nac = t5.clave_pais
                    INNER JOIN
                        tblRH_EK_Estados AS t6 ON t1.clave_pais_nac = t6.clave_pais AND t1.clave_estado_nac = t6.clave_estado
                    INNER JOIN
                        tblRH_EK_Ciudades AS t7 ON t1.clave_pais_nac = t7.clave_pais AND t1.clave_estado_nac = t7.clave_estado AND t1.clave_ciudad_nac = t7.clave_cuidad		
                    LEFT JOIN
                        tblRH_Baja_Registro AS t10
                        ON
                            t1.clave_empleado = t10.numeroEmpleado AND
			                t10.fechaBaja =
                                (
				                    SELECT MAX(fechaBaja)
				                    FROM tblRH_Baja_Registro as t12
				                    WHERE t12.numeroEmpleado = t10.numeroEmpleado
			                    ) AND
                            t10.registroActivo = 1 AND
                            t1.estatus_empleado = 'B' AND
                            t10.fechaBaja >= t1.fecha_antiguedad AND
                            t10.est_baja = 'A'
                    LEFT JOIN
                        tblRH_EK_Razones_Baja AS t11 ON t10.motivoBajaDeSistema = t11.clave_razon_baja
					LEFT JOIN tblRH_REC_Requisicion req ON req.id = t1.requisicion and req.cc = t1.cc_contable
					LEFT JOIN tblRH_TAB_TabuladoresDet tabDet ON req.idTabuladorDet = tabDet.id
					LEFT JOIN tblRH_TAB_CatCategorias tabCat ON tabDet.FK_Categoria = tabCat.id
                    WHERE
                        {1} {0} {3}
                    ORDER BY
                        clave_empleado DESC",
                        filtroCCString,
                        lstEstatusEmpleado.Count() > 0 ? "t1.estatus_empleado IN " + estatusJOIN + "" : "t1.estatus_empleado != ''",
                        clave_empleado,
                        (permisoGerencia ? "" : " AND (t2.descripcion NOT LIKE '%GERENCIA%' AND t2.descripcion NOT LIKE '%GERENTE%' AND t2.descripcion NOT LIKE '%DIRECCI%' AND t2.descripcion NOT LIKE '%DIRECTOR%')"))
                                        
                }).ToList();

                var listaCCDescripciones = new List<ccDTO>();

                bool esDiana = false;
                if (esDiana != null)
                {
                    if (vSesiones.sesionUsuarioDTO.idPerfil == (int)PerfilUsuarioEnum.ADMINISTRADOR)
                        esDiana = true;
                    else
                    {
                        if (vSesiones.sesionUsuarioDTO.id == 1019 || vSesiones.sesionUsuarioDTO.id == 79377 || vSesiones.sesionUsuarioDTO.id == 1041 || vSesiones.sesionUsuarioDTO.id == 79552 || vSesiones.sesionUsuarioDTO.id == 3381) //Diana Alvarez o Luis Sanches, Maricela
                            esDiana = true;
                        else
                            esDiana = false;
                    }
                }

                if (empleados.Count > 0)
                {
                    listaCCDescripciones = _ccFS_SP.GetCCsNominaFiltrados(empleados.Select(x => x.cc_contable).ToList());
                    foreach (var emp in empleados)
                    {
                        emp.cc_contableDesc = "[" + emp.cc_contable + "] " + listaCCDescripciones.Where(x => x.cc == emp.cc_contable).Select(x => x.descripcion).FirstOrDefault();
                        emp.esDiana = esDiana;
                        emp.fecha_antiguedadStr = emp.fecha_antiguedad.ToString("dd/MM/yyyy");
                        emp.fecha_altaStr = emp.fecha_alta.ToString("dd/MM/yyyy");
                    }
                }
                return empleados;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "GetEmpleadosEK", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }

        public Dictionary<string, object> CambiarContratable(string claveEmpleado, string esContratable)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                //                string strQuery = @"UPDATE sn_empleados SET contratable='S' WHERE clave_empleado='" + claveEmpleado + "'";
                //                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                //                {
                //#if DEBUG
                //                    var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                //                    var obj = _contextEnkontrol.Select<EmpleadosDTO>(EnkontrolAmbienteEnum.CpRhPruebas, odbc);
                //#else
                //                    var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                //                    var obj = _contextEnkontrol.Select<EmpleadosDTO>(EnkontrolAmbienteEnum.Rh, odbc);
                //#endif
                //                }
                //                else
                //                {

                //                    var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                //                    var obj = _contextEnkontrol.Select<EmpleadosDTO>(EnkontrolAmbienteEnum.RhArre, odbc);
                //                }

                #region V1
                //var cveEmp = Convert.ToInt32(claveEmpleado);
                //var empleado = _context.tblRH_EK_Empleados.First(x => x.clave_empleado == cveEmp);
                //empleado.contratable = "S";

                ////Cambiar recontratable
                //var objBaja = _context.tblRH_Baja_Registro.FirstOrDefault(e => e.registroActivo && e.numeroEmpleado == cveEmp);

                //if (objBaja != null)
                //{
                //    objBaja.esContratable = true;
                //}
                //_context.SaveChanges();
                #endregion

                var cveEmp = Convert.ToInt32(claveEmpleado);
                var empleado = _context.tblRH_EK_Empleados.First(x => x.clave_empleado == cveEmp);
                empleado.contratable = esContratable;

                //Cambiar recontratable
                var objBaja = _context.tblRH_Baja_Registro.FirstOrDefault(e => e.registroActivo && e.numeroEmpleado == cveEmp);

                if (objBaja != null)
                {
                    objBaja.esContratable = esContratable == "S" ? true : false;
                }

                _context.SaveChanges();

                resultado.Add(ITEMS, null);
                resultado.Add(SUCCESS, true);
                resultado.Add(MESSAGE, "Este usuario fue modificado con exito.");
            }
            catch (Exception ex)
            {
                resultado.Add(ITEMS, null);
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);

            }
            return resultado;
        }

        public List<dynamic> GetDatosEmpleadoDocumentos(int claveEmpleado)
        {
            try
            {
                List<tblP_CatTipoSangre> lstTipoSangre = _context.tblP_CatTipoSangre.Where(w => w.esActivo).ToList();

                var lstEmpleadosEK = _context.Select<dynamic>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta =
                        @"SELECT
                            t3.descripcion AS puesto,
                            t1.curp,
                            t1.nss,
                            t2.nombre_ben,
                            t2.parentesco_ben, 
                            CONVERT(VARCHAR(20), t1.nombre) + ' ' + CONVERT(VARCHAR(20), t1.ape_paterno) + ' ' + CONVERT(VARCHAR(20), t1.ape_materno) AS nombreCompleto, 
                            t1.clave_empleado,
                            t1.nss,
                            t1.rfc,
                            t2.tipo_sangre,
                            t2.en_accidente_nombre,
                            t2.en_accidente_telefono,
                            t2.en_accidente_direccion,
                            (CASE WHEN EXISTS (SELECT * FROM tblRH_EK_Empl_Recontratacion AS t4 WHERE t1.clave_empleado = t4.clave_empleado AND t4.esActivo = 1) THEN 1 ELSE 0 END) AS recontratado,
                            t2.cedula_cuidadania as cedula_ciudadania,
                            t2.num_dni
                        FROM
                            tblRH_EK_Empleados AS t1
                        INNER JOIN
                            tblRH_EK_Empl_Grales AS t2 ON t2.clave_empleado = t1.clave_empleado
                        LEFT JOIN tblRH_EK_Puestos AS t3 ON t1.puesto = t3.puesto
                        WHERE
                            t1.clave_empleado = @paramCve",
                    parametros = new { paramCve = claveEmpleado }
                }).ToList();

                //                var conexionEK = new Conexion().ConexionEKRh();
                //                List<dynamic> lstEmpleadosEK = new List<dynamic>();

                //                string strQuery = string.Empty;
                //                if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                //                {
                //                    #region SE OBTIENE LOS EMPLEADOS DE CP EK
                //                    strQuery = string.Empty;
                //                    strQuery = @"SELECT t3.descripcion AS puesto, t1.curp, t1.nss, t2.nombre_ben, t2.parentesco_ben, 
                //                                        CONVERT(VARCHAR(20), t1.nombre) + ' ' + CONVERT(VARCHAR(20), t1.ape_paterno) + ' ' + CONVERT(VARCHAR(20), t1.ape_materno) AS nombreCompleto, 
                //                                        t1.clave_empleado, t1.nss, t1.rfc, t2.tipo_sangre, t2.en_accidente_nombre, t2.en_accidente_telefono, t2.en_accidente_direccion FROM sn_empleados AS t1
                //                                            INNER JOIN sn_empl_grales AS t2 ON t2.clave_empleado = t1.clave_empleado
                //                                            LEFT JOIN si_puestos AS t3 ON t1.puesto = t3.puesto
                //                                                WHERE t1.clave_empleado = {0}";

                //                    var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                //                    odbc.consulta = String.Format(strQuery, claveEmpleado);
                //                    lstEmpleadosEK = _contextEnkontrol.Select<dynamic>(EnkontrolAmbienteEnum.Rh, odbc);

                //                    //foreach (var item in lstEmpleadosEK)
                //                    //{
                //                    //    if (item.tipo_sangre > 0)
                //                    //        item.tipo_sangre = lstTipoSangre.Where(w => w.id == item.tipo_sangre).Select(s => s.tipoSangre).FirstOrDefault();
                //                    //}
                //                    #endregion
                //                }
                //                else if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                //                {
                //                    #region SE OBTIENE LOS EMPLEADOS DE ARR EK

                //                    #endregion
                //                }

                return lstEmpleadosEK;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "GetDatosEmpleadoDocumentos", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }

        public Dictionary<string, object> CrearEditarInformacionEmpleado(EmpleadosDTO objEmpleadoDTO, GeneralesContactoDTO objGenContactoDTO, BeneficiariosDTO objBeneficiariosDTO, ContEmergenciasDTO objContEmergenciasDTO, CompaniaDTO objCompaniaDTO, List<FamiliaresDTO> lstFamiliares, UniformesDTO objUniforme, NuevoTabuladorDTO objTabulador, ContratoDTO objContrato, InfoEmpleadoPeruDTO objDatosPeru)
        {
            using (var transaccionSP = _context.Database.BeginTransaction())
            {
                Dictionary<string, object> resultado = new Dictionary<string, object>();
                try
                {
                    #region SE OBTIENE CLAVE DE EMPLEADO DISPONIBLE EN EK
                    int claveEmpleado = 0;
                    if (objEmpleadoDTO.clave_empleado == 0)
                    {
                        claveEmpleado = GetClaveEmpleadoDisponible();
                        if (claveEmpleado <= 0)
                            throw new Exception("Ocurrió un error al obtener la clave empleado.");
                        else
                        {
                            objEmpleadoDTO.clave_empleado = claveEmpleado;
                            objGenContactoDTO.clave_empleado = claveEmpleado;
                            objBeneficiariosDTO.clave_empleado = claveEmpleado;
                            objContEmergenciasDTO.clave_empleado = claveEmpleado;
                            objCompaniaDTO.clave_empleado = claveEmpleado;
                        }
                    }
                    else
                    {
                        claveEmpleado = objEmpleadoDTO.clave_empleado;
                        objGenContactoDTO.clave_empleado = claveEmpleado;
                        objBeneficiariosDTO.clave_empleado = claveEmpleado;
                        objContEmergenciasDTO.clave_empleado = claveEmpleado;
                        objCompaniaDTO.clave_empleado = claveEmpleado;
                    }

                    #endregion

                    #region SE CREA/EDITA LOS DATOS DEL EMPLEADO EN SIGOPLAN Y EK
                    if (objEmpleadoDTO.clave_empleado != 0)
                    {
                        var objEmpleado = new tblRH_EK_Empleados();

                        if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                        {
                            var objEmpleadoGrales = _context.tblRH_EK_Empl_Grales.FirstOrDefault(e => e.num_dni == objGenContactoDTO.num_dni);

                            if (objEmpleadoGrales != null)
                            {
                                objEmpleado = _context.tblRH_EK_Empleados.FirstOrDefault(e => e.clave_empleado == objEmpleadoGrales.clave_empleado);

                            }
                            else
                            {
                                objEmpleado = null;
                            }
                        }
                        else if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
                        {
                            var objEmpleadoGrales = _context.tblRH_EK_Empl_Grales.FirstOrDefault(e => e.cedula_cuidadania == objGenContactoDTO.cedula_cuidadania);

                            if (objEmpleadoGrales != null)
                            {
                                objEmpleado = _context.tblRH_EK_Empleados.FirstOrDefault(e => e.clave_empleado == objEmpleadoGrales.clave_empleado);

                            }
                            else
                            {
                                objEmpleado = null;
                            }

                        }
                        else
                        {
                            objEmpleado = _context.tblRH_EK_Empleados.FirstOrDefault(e => e.curp == objEmpleadoDTO.curp || e.rfc == objEmpleadoDTO.rfc || e.nss == objCompaniaDTO.nss);

                        }


                        if ((!objEmpleadoDTO.esActualizar) && objEmpleado != null)
                        {
                            throw new Exception("El empleado ya se encuentra dado de alta con la clave: " + objEmpleado.clave_empleado + " y Estatus: " + objEmpleado.estatus_empleado);
                        }

                        bool esCrearEditarExito = CrearEditarEmpleado(objEmpleadoDTO, objGenContactoDTO, objBeneficiariosDTO, objContEmergenciasDTO, objCompaniaDTO, transaccionSP, null, lstFamiliares, objUniforme, objTabulador, objContrato, objDatosPeru);
                        if (!esCrearEditarExito)
                            throw new Exception("Ocurrió un error al registrar los datos del empleado.");
                    }
                    #endregion

                    #region SE OBTIENE EL ID DEL EMPLEADO REGISTRADO
                    int idEmpleado = _context.tblRH_REC_Empleados.Where(w => w.clave_empleado == objEmpleadoDTO.clave_empleado && w.esActivo).Select(s => s.id).FirstOrDefault();
                    #endregion

                    #region SE CAMBIA EL ESTATUS DEL CANDIDATO DE PENDIENTE A CONTRATADO
                    if (!objEmpleadoDTO.esActualizar)
                    {
                        int idGestionSolicitud = EstatusCandidatoAEmpleado(objEmpleadoDTO);

                        #region INCREMENTA EN 1 LA CANTIDAD DE VACANTES CUBIERTAS EN BASE A LA SOLICITUD QUE CONTENGA EL CANDIDATO QUE SE ACABA DE REGISTRAR
                        IncrementarVacantesCubiertas(idGestionSolicitud);
                        #endregion
                    }
                    else
                    {
                        if (objEmpleadoDTO.esReingresoEmpleado && objEmpleadoDTO.idCandidato != null)
                        {
                            int idGestionSolicitud = EstatusCandidatoAEmpleado(objEmpleadoDTO);

                            #region INCREMENTA EN 1 LA CANTIDAD DE VACANTES CUBIERTAS EN BASE A LA SOLICITUD QUE CONTENGA EL CANDIDATO QUE SE ACABA DE REGISTRAR
                            IncrementarVacantesCubiertas(idGestionSolicitud);
                            #endregion
                        }
                    }
                    #endregion

                    transaccionSP.Commit();
                    resultado.Add(SUCCESS, true);
                    resultado.Add(MESSAGE, objEmpleadoDTO.id > 0 ? "Se ha actualizado con éxito." : "Se ha registrado con éxito.");
                    resultado.Add("claveEmpleado", claveEmpleado);
                }
                catch (Exception ex)
                {

                    transaccionSP.Rollback();

                    LogError(12, 12, "ReclutamientosController", "CrearEditarInformacionEmpleado", ex, !objEmpleadoDTO.esActualizar ? AccionEnum.AGREGAR : AccionEnum.ACTUALIZAR, 0, objEmpleadoDTO);
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, ex.Message);
                }
                return resultado;
            }
        }

        public bool EliminarEmpleado(int claveEmpleado)
        {
            using (var transaccionSP = _context.Database.BeginTransaction())
            {
                using (var conexionEK = new Conexion().ConexionEKRh())
                {
                    using (var transaccionEK = conexionEK.BeginTransaction())
                    {
                        try
                        {
                            #region SE ELIMINA AL EMPLEADO EN SIGOPLAN
                            #region SE ELIMINA EN SECCIÓN: DATOS EMPLEADO
                            tblRH_REC_Empleados objEliminarDatosEmpleado = _context.tblRH_REC_Empleados.Where(w => w.clave_empleado == claveEmpleado && w.esActivo).FirstOrDefault();
                            if (objEliminarDatosEmpleado != null)
                            {
                                objEliminarDatosEmpleado.esActivo = false;
                                objEliminarDatosEmpleado.fechaModificacion = DateTime.Now;
                                objEliminarDatosEmpleado.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                                _context.SaveChanges();
                            }
                            #endregion

                            #region SE ELIMINA EN SECCIÓN: GENERALES Y CONTACTO
                            tblRH_REC_EmplGenContacto objEliminarGenContacto = _context.tblRH_REC_EmplGenContacto.Where(w => w.clave_empleado == claveEmpleado && w.esActivo).FirstOrDefault();
                            if (objEliminarGenContacto != null)
                            {
                                objEliminarGenContacto.esActivo = false;
                                objEliminarGenContacto.fechaModificacion = DateTime.Now;
                                objEliminarGenContacto.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                                _context.SaveChanges();
                            }
                            #endregion

                            #region SE ELIMINA EN SECCIÓN: BENEFICIARIO
                            tblRH_REC_EmplBeneficiarios objEliminarBeneficiario = _context.tblRH_REC_EmplBeneficiarios.Where(w => w.clave_empleado == claveEmpleado && w.esActivo).FirstOrDefault();
                            if (objEliminarBeneficiario != null)
                            {
                                objEliminarBeneficiario.esActivo = false;
                                objEliminarBeneficiario.fechaModificacion = DateTime.Now;
                                objEliminarBeneficiario.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                                _context.SaveChanges();
                            }
                            #endregion

                            #region SE ELIMINA EN SECCIÓN: CASO DE ACCIDENTE
                            tblRH_REC_EmplContEmergencias objEliminarContEmergencias = _context.tblRH_REC_EmplContEmergencias.Where(w => w.clave_empleado == claveEmpleado && w.esActivo).FirstOrDefault();
                            if (objEliminarContEmergencias != null)
                            {
                                objEliminarContEmergencias.esActivo = false;
                                objEliminarContEmergencias.fechaModificacion = DateTime.Now;
                                objEliminarContEmergencias.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                                _context.SaveChanges();
                            }
                            #endregion

                            #region SE ELIMINA EN SECCIÓN: COMPAÑIA
                            tblRH_REC_EmplCompania objEliminarCompania = _context.tblRH_REC_EmplCompania.Where(w => w.clave_empleado == claveEmpleado && w.esActivo).FirstOrDefault();
                            if (objEliminarCompania != null)
                            {
                                objEliminarCompania.esActivo = false;
                                objEliminarCompania.fechaModificacion = DateTime.Now;
                                objEliminarCompania.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                                _context.SaveChanges();
                            }
                            #endregion
                            #endregion

                            #region SE ELIMINA AL EMPLEADO EN EK
                            if (claveEmpleado > 0)
                            {
                                #region SE ELIMINA EN SECCIÓN: sn_empleados
                                string strQuery = string.Empty;
                                strQuery = @"DELETE sn_empleados WHERE clave_empleado = ?";
                                using (var cmd = new OdbcCommand(strQuery))
                                {
                                    OdbcParameterCollection parameters = cmd.Parameters;
                                    parameters.Add("@clave_empleado", OdbcType.Decimal).Value = claveEmpleado;
                                    cmd.ExecuteNonQuery();
                                }
                                #endregion

                                #region SE ELIMINA EN SECCIÓN: DATOS EMPLEADO
                                strQuery = string.Empty;
                                strQuery = @"DELETE sn_empl_grales WHERE clave_empleado = ?";
                                using (var cmd = new OdbcCommand(strQuery))
                                {
                                    OdbcParameterCollection parameters = cmd.Parameters;
                                    parameters.Add("@clave_empleado", OdbcType.Decimal).Value = claveEmpleado;
                                    cmd.ExecuteNonQuery();
                                }
                                #endregion
                            }
                            #endregion

                            transaccionEK.Commit();
                            transaccionSP.Commit();

                            #region SE CREA BITACORA
                            SaveBitacora(16, (int)AccionEnum.ELIMINAR, claveEmpleado, JsonUtils.convertNetObjectToJson(claveEmpleado));
                            #endregion

                            return true;
                        }
                        catch (Exception ex)
                        {
                            transaccionEK.Rollback();
                            transaccionSP.Rollback();

                            LogError(12, 12, "ReclutamientosController", "EliminarEmpleado", ex, AccionEnum.ELIMINAR, claveEmpleado, claveEmpleado);
                            return false;
                        }
                    }
                }
            }
        }

        private int GetClaveEmpleadoDisponible()
        {
            try
            {
                #region SE OBTIENE UNA CLAVE EMPLEADO DISPONIBLE
                var ultimaClaveEmpleadoPorEmpresa = new List<int>();

                var empresas = new List<int>();
                using (var _ctxCplan = new MainContext(EmpresaEnum.Construplan))
                {
                    empresas = _ctxCplan.tblP_Empresas.Select(x => x.id).ToList();
                }

                using (var _ctxCplan = new MainContext(EmpresaEnum.Construplan))
                {
                    int ultimaClaveEmpleado = _ctxCplan.tblRH_EK_Empleados.Select(x => x.clave_empleado).OrderByDescending(x => x).FirstOrDefault();
                    ultimaClaveEmpleadoPorEmpresa.Add(ultimaClaveEmpleado);
                }

                using (var _ctxArre = new MainContext(EmpresaEnum.Arrendadora))
                {
                    int ultimaClaveEmpleado = _ctxArre.tblRH_EK_Empleados.Select(x => x.clave_empleado).OrderByDescending(x => x).FirstOrDefault();
                    ultimaClaveEmpleadoPorEmpresa.Add(ultimaClaveEmpleado);
                }

                using (var _ctxColombia = new MainContext(EmpresaEnum.Colombia))
                {
                    int ultimaClaveEmpleado = _ctxColombia.tblRH_EK_Empleados.Select(x => x.clave_empleado).OrderByDescending(x => x).FirstOrDefault();
                    ultimaClaveEmpleadoPorEmpresa.Add(ultimaClaveEmpleado);
                }

                using (var _ctxPeru = new MainContext(EmpresaEnum.Peru))
                {
                    int ultimaClaveEmpleado = _ctxPeru.tblRH_EK_Empleados.Select(x => x.clave_empleado).OrderByDescending(x => x).FirstOrDefault();
                    ultimaClaveEmpleadoPorEmpresa.Add(ultimaClaveEmpleado);
                }

                using (var _ctxGcplan = new MainContext(EmpresaEnum.GCPLAN))
                {
                    int ultimaClaveEmpleado = _ctxGcplan.tblRH_EK_Empleados.Select(x => x.clave_empleado).OrderByDescending(x => x).FirstOrDefault();
                    ultimaClaveEmpleadoPorEmpresa.Add(ultimaClaveEmpleado);
                }

                return ultimaClaveEmpleadoPorEmpresa.OrderByDescending(x => x).FirstOrDefault() + 1;
                #endregion
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "GetClaveEmpleadoDisponible", e, AccionEnum.AGREGAR, 0, 0);
                return 0;
            }
        }

        private int GetIdFamiliarDisponible()
        {
            try
            {
                #region SE OBTIENE UNA CLAVE DE FAMILIAR DISPONIBLE
                int idFamiliar = 0;
                //string strQuery = @"SELECT id_familia FROM sn_empl_familia ORDER BY id_familia DESC";
                //var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                //odbc.consulta = String.Format(strQuery);
                //List<dynamic> lstClaveEmpleados = new List<dynamic>();
                //lstClaveEmpleados = _contextEnkontrol.Select<dynamic>(EnkontrolEnum.CplanRh, odbc); //2590
                var lstClaveEmpleados = _context.Select<dynamic>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = @"SELECT id_familia FROM tblRH_EK_Empl_Familia ORDER BY id_familia DESC"
                }).ToList();

                if (lstClaveEmpleados.Count() > 0)
                    idFamiliar = Convert.ToInt32(lstClaveEmpleados[0].id_familia) + 1;

                return idFamiliar;
                #endregion
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "GetIdFamiliarDisponible", e, AccionEnum.AGREGAR, 0, 0);
                return 0;
            }
        }

        private bool CrearEditarEmpleado(EmpleadosDTO objEmpleadoDTO, GeneralesContactoDTO objGenContactoDTO, BeneficiariosDTO objBeneficiariosDTO, ContEmergenciasDTO objContEmergenciasDTO, CompaniaDTO objCompaniaDTO, DbContextTransaction transaccionSP, OdbcTransaction transaccionEK, List<FamiliaresDTO> lstFamiliares, UniformesDTO objUniforme, NuevoTabuladorDTO objTabulador, ContratoDTO objContrato, InfoEmpleadoPeruDTO objDatosPeru)
        {
            string strMensajeError = string.Empty;
            if (!objEmpleadoDTO.esActualizar)
            {
                #region se valida fechas de dias de ingresos permitidas
                var fechaActual = DateTimeOffset.UtcNow.DateTime;
                //var fechaActualOffset = DateTimeOffset.UtcNow;

                var periodosPermitidos = _context.tblRH_REC_DiasPermitidos.FirstOrDefault(x => x.registroActivo);
                if (periodosPermitidos != null)
                {
                    var fechaMin = fechaActual.AddDays(-periodosPermitidos.anteriores);
                    var fechaMax = fechaActual.AddDays(periodosPermitidos.posteriores + 1);

                    if (objEmpleadoDTO.fecha_alta.Date >= fechaMin.Date && objEmpleadoDTO.fecha_alta.Date < fechaMax.Date)
                    {

                    }
                    else
                    {
                        throw new Exception("La fecha de ingreso tiene que estar entre: " + fechaMin.ToShortDateString() + " y " + fechaMax.AddDays(-1).ToShortDateString());
                    }
                }
                else
                {
                    if (objEmpleadoDTO.fecha_alta.Date != fechaActual.Date)
                    {
                        throw new Exception("La fecha de ingreso tiene que ser la actual: " + fechaActual.ToShortDateString());
                    }
                }
                #endregion

                string strQuery = string.Empty;

                #region SE CREA EL EMPLEADO EN SIGOPLAN
                #region DATOS EMPLEADO
                tblRH_REC_Empleados objCrearDatosEmpleado = new tblRH_REC_Empleados();
                objCrearDatosEmpleado.clave_empleado = objEmpleadoDTO.clave_empleado > 0 ? objEmpleadoDTO.clave_empleado : 0;
                objCrearDatosEmpleado.idEstatus = (int)EstatusEmpleadoEnum.pendiente;
                objCrearDatosEmpleado.nombre = !string.IsNullOrEmpty(objEmpleadoDTO.nombre) ? objEmpleadoDTO.nombre.Trim().ToUpper() : string.Empty;
                objCrearDatosEmpleado.ape_paterno = !string.IsNullOrEmpty(objEmpleadoDTO.ape_paterno) ? objEmpleadoDTO.ape_paterno.Trim().ToUpper() : string.Empty;
                objCrearDatosEmpleado.ape_materno = !string.IsNullOrEmpty(objEmpleadoDTO.ape_materno) ? objEmpleadoDTO.ape_materno.Trim().ToUpper() : string.Empty;
                objCrearDatosEmpleado.fecha_nac = objEmpleadoDTO.fecha_nac;
                objCrearDatosEmpleado.clave_pais_nac = objEmpleadoDTO.clave_pais_nac > 0 ? objEmpleadoDTO.clave_pais_nac : 0;
                objCrearDatosEmpleado.clave_estado_nac = objEmpleadoDTO.clave_estado_nac > 0 ? objEmpleadoDTO.clave_estado_nac : 0;
                objCrearDatosEmpleado.clave_ciudad_nac = objEmpleadoDTO.clave_ciudad_nac > 0 ? objEmpleadoDTO.clave_ciudad_nac : 0;
                objCrearDatosEmpleado.localidad_nacimiento = !string.IsNullOrEmpty(objEmpleadoDTO.localidad_nacimiento) ? objEmpleadoDTO.localidad_nacimiento.Trim().ToUpper() : string.Empty;
                objCrearDatosEmpleado.fecha_alta = objEmpleadoDTO.fecha_alta;
                objCrearDatosEmpleado.sexo = !string.IsNullOrEmpty(objEmpleadoDTO.sexo) ? (string)objEmpleadoDTO.sexo.Trim().ToUpper() : string.Empty;
                objCrearDatosEmpleado.rfc = !string.IsNullOrEmpty(objEmpleadoDTO.rfc) ? objEmpleadoDTO.rfc.Trim().ToUpper() : string.Empty;
                objCrearDatosEmpleado.curp = !string.IsNullOrEmpty(objEmpleadoDTO.curp) ? objEmpleadoDTO.curp.Trim().ToUpper() : string.Empty;
                objCrearDatosEmpleado.idCandidato = objEmpleadoDTO.idCandidato.HasValue ? objEmpleadoDTO.idCandidato.Value : 0;
                objCrearDatosEmpleado.esPendiente = true;
                objCrearDatosEmpleado.esReingresoEmpleado = false;
                objCrearDatosEmpleado.fechaCreacion = DateTime.Now;
                objCrearDatosEmpleado.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                objCrearDatosEmpleado.esActivo = true;
                _context.tblRH_REC_Empleados.Add(objCrearDatosEmpleado);
                _context.SaveChanges();
                #endregion

                #region GENERALES Y CONTACTO
                tblRH_REC_EmplGenContacto objCrearGenContacto = new tblRH_REC_EmplGenContacto();
                objCrearGenContacto.clave_empleado = objGenContactoDTO.clave_empleado > 0 ? objGenContactoDTO.clave_empleado : 0;
                objCrearGenContacto.estado_civil = !string.IsNullOrEmpty(objGenContactoDTO.estado_civil) && objGenContactoDTO.estado_civil != "--Seleccione--" ? objGenContactoDTO.estado_civil.Trim() : string.Empty;
                objCrearGenContacto.fecha_planta = objGenContactoDTO.fecha_planta.Year > 1000 ? objGenContactoDTO.fecha_planta : new DateTime(2000, 01, 01);
                objCrearGenContacto.ocupacion = !string.IsNullOrEmpty(objGenContactoDTO.ocupacion) ? objGenContactoDTO.ocupacion.Trim().ToUpper() : string.Empty;
                objCrearGenContacto.ocupacion_abrev = !string.IsNullOrEmpty(objGenContactoDTO.ocupacion_abrev) ? objGenContactoDTO.ocupacion_abrev.Trim().ToUpper() : string.Empty;
                objCrearGenContacto.num_cred_elector = !string.IsNullOrEmpty(objGenContactoDTO.num_cred_elector) ? objGenContactoDTO.num_cred_elector.Trim().ToUpper() : string.Empty;
                objCrearGenContacto.domicilio = !string.IsNullOrEmpty(objGenContactoDTO.domicilio) ? objGenContactoDTO.domicilio.Trim().ToUpper() : string.Empty;
                objCrearGenContacto.numero_exterior = !string.IsNullOrEmpty(objGenContactoDTO.numero_exterior) ? objGenContactoDTO.numero_exterior.Trim().ToUpper() : string.Empty;
                objCrearGenContacto.numero_interior = !string.IsNullOrEmpty(objGenContactoDTO.numero_interior) ? objGenContactoDTO.numero_interior.Trim().ToUpper() : string.Empty;
                objCrearGenContacto.colonia = !string.IsNullOrEmpty(objGenContactoDTO.colonia) ? objGenContactoDTO.colonia.Trim().ToUpper() : string.Empty;
                objCrearGenContacto.pais_dom = objGenContactoDTO.pais_dom > 0 ? objGenContactoDTO.pais_dom : 0;
                objCrearGenContacto.estado_dom = objGenContactoDTO.estado_dom > 0 ? objGenContactoDTO.estado_dom : 0;
                objCrearGenContacto.ciudad_dom = objGenContactoDTO.ciudad_dom > 0 ? objGenContactoDTO.ciudad_dom : 0;
                objCrearGenContacto.codigo_postal = objGenContactoDTO.codigo_postal > 0 ? objGenContactoDTO.codigo_postal : 0;
                objCrearGenContacto.tel_casa = !string.IsNullOrEmpty(objGenContactoDTO.tel_casa) ? objGenContactoDTO.tel_casa.Trim().ToUpper() : string.Empty;
                objCrearGenContacto.tel_cel = !string.IsNullOrEmpty(objGenContactoDTO.tel_cel) ? objGenContactoDTO.tel_cel.Trim().ToUpper() : string.Empty;
                objCrearGenContacto.email = !string.IsNullOrEmpty(objGenContactoDTO.email) ? objGenContactoDTO.email.Trim().ToUpper() : string.Empty;
                objCrearGenContacto.tipo_casa = objGenContactoDTO.tipo_casa.HasValue ? objGenContactoDTO.tipo_casa.ToString().Trim().ToUpper() : string.Empty;
                objCrearGenContacto.tipo_sangre = !string.IsNullOrEmpty(objGenContactoDTO.tipo_sangre) ? objGenContactoDTO.tipo_sangre.Trim().ToUpper() : string.Empty;
                objCrearGenContacto.alergias = !string.IsNullOrEmpty(objGenContactoDTO.alergias) ? objGenContactoDTO.alergias.Trim().ToUpper() : string.Empty;
                objCrearGenContacto.esActivo = true;
                objCrearGenContacto.fechaCreacion = DateTime.Now;
                objCrearGenContacto.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                _context.tblRH_REC_EmplGenContacto.Add(objCrearGenContacto);
                _context.SaveChanges();
                #endregion

                #region BENEFICIARIOS
                if (!string.IsNullOrEmpty(objBeneficiariosDTO.nombre_ben))
                {
                    tblRH_REC_EmplBeneficiarios objCrearBeneficiario = new tblRH_REC_EmplBeneficiarios();
                    objCrearBeneficiario.clave_empleado = objBeneficiariosDTO.clave_empleado > 0 ? objBeneficiariosDTO.clave_empleado : 0;
                    objCrearBeneficiario.codigo_postal_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.codigo_postal_ben) ? objBeneficiariosDTO.codigo_postal_ben.Trim().ToUpper() : string.Empty;
                    objCrearBeneficiario.parentesco_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.parentesco_ben) ? objBeneficiariosDTO.parentesco_ben.Trim().ToUpper() : string.Empty;
                    objCrearBeneficiario.fecha_nac_ben = objBeneficiariosDTO.fecha_nac_ben.Year > 1000 ? objBeneficiariosDTO.fecha_nac_ben : new DateTime(2000, 01, 01);
                    objCrearBeneficiario.paterno_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.paterno_ben) ? objBeneficiariosDTO.paterno_ben.Trim().ToUpper() : string.Empty;
                    objCrearBeneficiario.materno_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.materno_ben) ? objBeneficiariosDTO.materno_ben.Trim().ToUpper() : string.Empty;
                    objCrearBeneficiario.nombre_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.nombre_ben) ? objBeneficiariosDTO.nombre_ben.Trim().ToUpper() : string.Empty;
                    objCrearBeneficiario.pais_ben = objBeneficiariosDTO.pais_ben > 0 ? objBeneficiariosDTO.pais_ben : 0;
                    objCrearBeneficiario.estado_ben = objBeneficiariosDTO.estado_ben > 0 ? objBeneficiariosDTO.estado_ben : 0;
                    objCrearBeneficiario.ciudad_ben = objBeneficiariosDTO.ciudad_ben > 0 ? objBeneficiariosDTO.ciudad_ben : 0;
                    objCrearBeneficiario.colonia_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.colonia_ben) ? objBeneficiariosDTO.colonia_ben.Trim().ToUpper() : string.Empty;
                    objCrearBeneficiario.domicilio_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.domicilio_ben) ? objBeneficiariosDTO.domicilio_ben.Trim().ToUpper() : string.Empty;
                    objCrearBeneficiario.num_ext_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.num_ext_ben) ? objBeneficiariosDTO.num_ext_ben.Trim().ToUpper() : string.Empty;
                    objCrearBeneficiario.num_int_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.num_int_ben) ? objBeneficiariosDTO.num_int_ben.Trim().ToUpper() : string.Empty;
                    objCrearBeneficiario.cel = objBeneficiariosDTO.cel;
                    objCrearBeneficiario.esActivo = true;
                    objCrearBeneficiario.fechaCreacion = DateTime.Now;
                    objCrearBeneficiario.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                    _context.tblRH_REC_EmplBeneficiarios.Add(objCrearBeneficiario);
                    _context.SaveChanges();
                }
                #endregion

                #region CONTACTO EN CASO DE EMERGENCIA
                if (!string.IsNullOrEmpty(objContEmergenciasDTO.en_accidente_nombre))
                {
                    tblRH_REC_EmplContEmergencias objCrearContEmergencias = new tblRH_REC_EmplContEmergencias();
                    objCrearContEmergencias.clave_empleado = objContEmergenciasDTO.clave_empleado > 0 ? objContEmergenciasDTO.clave_empleado : 0;
                    objCrearContEmergencias.en_accidente_nombre = !string.IsNullOrEmpty(objContEmergenciasDTO.en_accidente_nombre) ? objContEmergenciasDTO.en_accidente_nombre.Trim().ToUpper() : string.Empty;
                    objCrearContEmergencias.en_accidente_telefono = !string.IsNullOrEmpty(objContEmergenciasDTO.en_accidente_telefono) ? objContEmergenciasDTO.en_accidente_telefono.Trim().ToUpper() : string.Empty;
                    objCrearContEmergencias.en_accidente_direccion = !string.IsNullOrEmpty(objContEmergenciasDTO.en_accidente_direccion) ? objContEmergenciasDTO.en_accidente_direccion.Trim().ToUpper() : string.Empty;
                    objCrearContEmergencias.esActivo = true;
                    objCrearContEmergencias.fechaCreacion = DateTime.Now;
                    objCrearContEmergencias.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                    _context.tblRH_REC_EmplContEmergencias.Add(objCrearContEmergencias);
                    _context.SaveChanges();
                }
                #endregion

                #region COMPAÑIA
                tblRH_REC_EmplCompania objCrearCompania = new tblRH_REC_EmplCompania();
                objCrearCompania.clave_empleado = objCompaniaDTO.clave_empleado > 0 ? objCompaniaDTO.clave_empleado : 0;
                objCrearCompania.requisicion = objCompaniaDTO.requisicion > 0 ? objCompaniaDTO.requisicion : 0;
                objCrearCompania.id_regpat = objCompaniaDTO.id_regpat > 0 ? objCompaniaDTO.id_regpat : 0;
                objCrearCompania.cc_contable = !string.IsNullOrEmpty(objCompaniaDTO.cc_contable) ? objCompaniaDTO.cc_contable.Trim().ToUpper() : string.Empty;
                objCrearCompania.puesto = objCompaniaDTO.puesto > 0 ? objCompaniaDTO.puesto : 0;
                objCrearCompania.duracion_contrato = objCompaniaDTO.duracion_contrato > 0 ? objCompaniaDTO.duracion_contrato : 0;
                objCrearCompania.jefe_inmediato = objCompaniaDTO.jefe_inmediato > 0 ? objCompaniaDTO.jefe_inmediato : 0;
                objCrearCompania.autoriza = objCompaniaDTO.autoriza > 0 ? objCompaniaDTO.autoriza : 0;
                objCrearCompania.usuario_compras = objCompaniaDTO.usuario_compras > 0 ? objCompaniaDTO.usuario_compras : 0;
                objCrearCompania.sindicato = objCompaniaDTO.chkSindicato ? "S" : "N";
                objCrearCompania.clave_depto = objCompaniaDTO.clave_depto > 0 ? objCompaniaDTO.clave_depto : 0;
                objCrearCompania.nss = !string.IsNullOrEmpty(objCompaniaDTO.nss) ? objCompaniaDTO.nss.Trim().ToUpper() : string.Empty;
                objCrearCompania.unidad_medica = GetUnidadMedica(objGenContactoDTO.codigo_postal);
                objCrearCompania.tipo_formula_imss = !string.IsNullOrEmpty(objCompaniaDTO.tipo_formula_imss) ? objCompaniaDTO.tipo_formula_imss.Trim().ToUpper() : string.Empty;
                objCrearCompania.fecha_contrato = objCompaniaDTO.fecha_contrato.Year > 1000 ? objCompaniaDTO.fecha_contrato : new DateTime(2000, 01, 01);
                objCrearCompania.tipoEmpleado = objCompaniaDTO.tipoEmpleado;
                objCrearCompania.esActivo = true;
                objCrearCompania.fechaCreacion = DateTime.Now;
                objCrearCompania.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                _context.tblRH_REC_EmplCompania.Add(objCrearCompania);
                _context.SaveChanges();
                #endregion

                #region TABULADOR
                //var objSigoplanTabulador = _context.tblRH_EK_Tabulador_Historial.Where(e => e.esActivo && e.clave_empleado == objEmpleadoDTO.clave_empleado).OrderByDescending(e => e.id).FirstOrDefault();

                if (objTabulador != null)
                {

                    var tblTabuladorID = _context.tblRH_TAB_TabuladoresDet.FirstOrDefault(x => x.id == objCompaniaDTO.idTabuladorDet.Value);

                    _context.tblRH_EK_Tabulador_Historial.Add(new tblRH_EK_Tabulador_Historial
                    {
                        clave_empleado = objEmpleadoDTO.clave_empleado,
                        tabulador = objTabulador.tabulador,
                        FK_Tabulador = tblTabuladorID != null ? tblTabuladorID.FK_Tabulador : 0,
                        FK_TabuladorDet = objCompaniaDTO.idTabuladorDet.HasValue ? objCompaniaDTO.idTabuladorDet.Value : 0,
                        fecha_cambio = DateTime.Now,
                        fechaAplicaCambio = objTabulador.tabulador == 1 || (objTabulador.motivoCambio.HasValue && objTabulador.motivoCambio.Value == 4) ? objTabulador.fechaAplicaCambio ?? DateTime.Now : DateTime.Now,
                        hora = DateTime.Now.TimeOfDay,
                        suma = (objTabulador.bono_de_zona + objTabulador.complemento + objTabulador.salario_base),
                        salario_base = objTabulador.salario_base,
                        complemento = objTabulador.complemento,
                        bono_zona = objTabulador.bono_de_zona,
                        motivoCambio = objTabulador.motivoCambio,
                        FK_UsuarioCreacion = vSesiones.sesionUsuarioDTO.id,
                        FK_UsuarioModificacion = vSesiones.sesionUsuarioDTO.id,
                        fechaCreacion = DateTime.Now,
                        fechaModificacion = DateTime.Now,
                        esActivo = true,
                    });
                    _context.SaveChanges();
                }
                #endregion

                #endregion

                #region SE CREA EL EMPLEADO EN EK
                var regEmpleadoEK = new tblRH_EK_Empleados();
                regEmpleadoEK.estatus_empleado = "P";
                regEmpleadoEK.clave_empleado = objEmpleadoDTO.clave_empleado;
                regEmpleadoEK.nombre = !string.IsNullOrEmpty(objEmpleadoDTO.nombre) ? objEmpleadoDTO.nombre.Trim().ToUpper() : null;
                regEmpleadoEK.ape_paterno = !string.IsNullOrEmpty(objEmpleadoDTO.ape_paterno) ? objEmpleadoDTO.ape_paterno.Trim().ToUpper() : string.Empty;
                regEmpleadoEK.ape_materno = !string.IsNullOrEmpty(objEmpleadoDTO.ape_materno) ? objEmpleadoDTO.ape_materno.Trim().ToUpper() : string.Empty;
                regEmpleadoEK.fecha_nac = objEmpleadoDTO.fecha_nac;
                regEmpleadoEK.clave_pais_nac = objEmpleadoDTO.clave_pais_nac;
                regEmpleadoEK.clave_departamento_nac_PERU = objEmpleadoDTO.clave_departamento_nac_PERU;
                regEmpleadoEK.clave_estado_nac = objEmpleadoDTO.clave_estado_nac;
                regEmpleadoEK.clave_ciudad_nac = objEmpleadoDTO.clave_ciudad_nac;
                regEmpleadoEK.localidad_nacimiento = !string.IsNullOrEmpty(objEmpleadoDTO.localidad_nacimiento) ? objEmpleadoDTO.localidad_nacimiento.Trim().ToUpper() : null;
                regEmpleadoEK.fecha_alta = objEmpleadoDTO.fecha_alta;
                regEmpleadoEK.fecha_contrato = objEmpleadoDTO.fecha_alta;
                regEmpleadoEK.fecha_antiguedad = objEmpleadoDTO.fecha_alta;
                regEmpleadoEK.sexo = !string.IsNullOrEmpty(objEmpleadoDTO.sexo) ? objEmpleadoDTO.sexo.Trim().ToUpper() : null;
                regEmpleadoEK.rfc = !string.IsNullOrEmpty(objEmpleadoDTO.rfc) ? objEmpleadoDTO.rfc.Trim().ToUpper() : null;
                regEmpleadoEK.CPCIF = !string.IsNullOrEmpty(objEmpleadoDTO.CPCIF) ? objEmpleadoDTO.CPCIF.Trim().ToUpper() : null;
                regEmpleadoEK.curp = !string.IsNullOrEmpty(objEmpleadoDTO.curp) ? objEmpleadoDTO.curp.Trim().ToUpper() : null;
                regEmpleadoEK.cuspp = !string.IsNullOrEmpty(objEmpleadoDTO.cuspp) ? objEmpleadoDTO.cuspp.Trim().ToUpper() : null;
                regEmpleadoEK.requisicion = (int?)objCompaniaDTO.requisicion;
                regEmpleadoEK.id_regpat = (int?)objCompaniaDTO.id_regpat;
                regEmpleadoEK.cc_contable = objCompaniaDTO.cc_contable;
                regEmpleadoEK.puesto = objCompaniaDTO.puesto;
                regEmpleadoEK.idTabuladorDet = objCompaniaDTO.idTabuladorDet;
                regEmpleadoEK.duracion_contrato = (int?)objCompaniaDTO.duracion_contrato;
                regEmpleadoEK.fecha_fin = objCompaniaDTO.fecha_fin;
                regEmpleadoEK.jefe_inmediato = (int?)objCompaniaDTO.jefe_inmediato;
                regEmpleadoEK.autoriza = (int?)objCompaniaDTO.autoriza;
                regEmpleadoEK.usuario_compras = (int?)objCompaniaDTO.usuario_compras;
                regEmpleadoEK.sindicato = !objCompaniaDTO.chkSindicato ? "N" : "S";
                regEmpleadoEK.clave_depto = objCompaniaDTO.clave_depto > 0 ? objCompaniaDTO.clave_depto.ToString() : 0.ToString();
                regEmpleadoEK.nss = !string.IsNullOrEmpty(objCompaniaDTO.nss) ? objCompaniaDTO.nss : null;
                regEmpleadoEK.unidad_medica = GetUnidadMedica(objGenContactoDTO.codigo_postal); ;
                regEmpleadoEK.tipo_formula_imss = !string.IsNullOrEmpty(objCompaniaDTO.tipo_formula_imss) ? objCompaniaDTO.tipo_formula_imss : null;
                regEmpleadoEK.desc_puesto = !string.IsNullOrEmpty(objCompaniaDTO.actividades) ? objCompaniaDTO.actividades.Trim().ToUpper() : null;
                regEmpleadoEK.banco = objEmpleadoDTO.bancoNomina;
                regEmpleadoEK.num_cta_pago = objEmpleadoDTO.num_cta_pago;
                regEmpleadoEK.num_cta_fondo_aho = objEmpleadoDTO.num_cta_fondo_aho;
                regEmpleadoEK.tipo_nomina = objEmpleadoDTO.tipo_nomina;
                regEmpleadoEK.tabulador = objEmpleadoDTO.tabulador;
                regEmpleadoEK.desc_puesto = objEmpleadoDTO.desc_puesto;
                regEmpleadoEK.esActivo = true;
                regEmpleadoEK.fechaCreacion = DateTime.Now;
                regEmpleadoEK.idUsuarioCreacion = vSesiones.sesionUsuarioDTO.id;
                regEmpleadoEK.estatusEnvioCorreo = objEmpleadoDTO.estatusEnvioCorreo ? (int)EstatusEnvioCorreoEnum.pendientePorEnviar : (int)EstatusEnvioCorreoEnum.noPendientePorEnviar;
                _context.tblRH_EK_Empleados.Add(regEmpleadoEK);
                _context.SaveChanges();

                var contratoAnterior = _context.tblRH_EK_Contratos_Empleados.Where(x => x.clave_empleado == objEmpleadoDTO.clave_empleado && x.esActivo.HasValue && x.esActivo.Value).OrderByDescending(x => x.id_contrato_empleado).FirstOrDefault();
                var contratoIdNuevo = _context.tblRH_EK_Contratos_Empleados.OrderByDescending(x => x.id_contrato_empleado).FirstOrDefault();

                _context.tblRH_EK_Contratos_Empleados.Add(new tblRH_EK_Contratos_Empleados
                {
                    clave_empleado = objEmpleadoDTO.clave_empleado,
                    clave_duracion = (int)objCompaniaDTO.duracion_contrato,
                    fecha = DateTime.Now,
                    fecha_aplicacion = objEmpleadoDTO.fecha_alta,
                    id_contrato_empleado = contratoIdNuevo != null ? contratoIdNuevo.id_contrato_empleado + 1 : 1,
                    clave_duracion_ant = contratoAnterior != null ? contratoAnterior.clave_duracion : 0,
                    fechaCreacion = DateTime.Now,
                    fechaModificacion = DateTime.Now,
                    fecha_fin = objCompaniaDTO.fecha_fin,
                    idUsuarioCreacion = vSesiones.sesionUsuarioDTO.id,
                    idUsuarioModificacion = vSesiones.sesionUsuarioDTO.id,
                    esActivo = true,
                });
                _context.SaveChanges();

                #region GENERALES Y CONTACTO - BENEFICIARIO - EN CASO DE EMERGENCIA || TO:DO VERIFICAR QUE EL DTO LLEGUE CON LA INFORMACIÓN.
                var empGrales = new tblRH_EK_Empl_Grales();
                empGrales.clave_empleado = objEmpleadoDTO.clave_empleado;
                empGrales.estado_civil = !string.IsNullOrEmpty(objGenContactoDTO.estado_civil) ? objGenContactoDTO.estado_civil.Trim() : string.Empty;
                empGrales.fecha_planta = null;
                empGrales.ocupacion = !string.IsNullOrEmpty(objGenContactoDTO.ocupacion) ? objGenContactoDTO.ocupacion.Trim().ToUpper() : string.Empty;
                empGrales.ocupacion_abrev = !string.IsNullOrEmpty(objGenContactoDTO.ocupacion_abrev) ? objGenContactoDTO.ocupacion_abrev.Trim().ToUpper() : string.Empty;
                empGrales.num_cred_elector = !string.IsNullOrEmpty(objGenContactoDTO.num_cred_elector) ? objGenContactoDTO.num_cred_elector.Trim().ToUpper() : string.Empty;
                empGrales.num_dni = !string.IsNullOrEmpty(objGenContactoDTO.num_dni) ? objGenContactoDTO.num_dni.Trim().ToUpper() : string.Empty;
                empGrales.cedula_cuidadania = !string.IsNullOrEmpty(objGenContactoDTO.cedula_cuidadania) ? objGenContactoDTO.cedula_cuidadania.Trim().ToUpper() : string.Empty;
                empGrales.domicilio = !string.IsNullOrEmpty(objGenContactoDTO.domicilio) ? objGenContactoDTO.domicilio.Trim().ToUpper() : string.Empty;
                empGrales.numero_exterior = !string.IsNullOrEmpty(objGenContactoDTO.numero_exterior) ? objGenContactoDTO.numero_exterior.Trim().ToUpper() : string.Empty;
                empGrales.numero_interior = !string.IsNullOrEmpty(objGenContactoDTO.numero_interior) ? objGenContactoDTO.numero_interior.Trim().ToUpper() : string.Empty;
                empGrales.colonia = !string.IsNullOrEmpty(objGenContactoDTO.colonia) ? objGenContactoDTO.colonia.Trim().ToUpper() : string.Empty;
                empGrales.pais_dom = objGenContactoDTO.pais_dom > 0 ? objGenContactoDTO.pais_dom : 0;
                empGrales.estado_dom = objGenContactoDTO.estado_dom > 0 ? objGenContactoDTO.estado_dom : 0;
                empGrales.cuidado_dom = objGenContactoDTO.ciudad_dom > 0 ? objGenContactoDTO.ciudad_dom : 0;
                empGrales.codigo_postal = objGenContactoDTO.codigo_postal.ToString();
                empGrales.tel_casa = !string.IsNullOrEmpty(objGenContactoDTO.tel_casa) ? objGenContactoDTO.tel_casa.Trim().ToUpper() : string.Empty;
                empGrales.tel_cel = !string.IsNullOrEmpty(objGenContactoDTO.tel_cel) ? objGenContactoDTO.tel_cel.Trim().ToUpper() : string.Empty;
                empGrales.email = !string.IsNullOrEmpty(objGenContactoDTO.email) ? objGenContactoDTO.email.Trim().ToUpper() : string.Empty;
                empGrales.tipo_casa = objGenContactoDTO.tipo_casa;
                empGrales.tipo_sangre = !string.IsNullOrEmpty(objGenContactoDTO.tipo_sangre) ? objGenContactoDTO.tipo_sangre.Trim().ToUpper() : string.Empty;
                empGrales.alergias = !string.IsNullOrEmpty(objGenContactoDTO.alergias) ? objGenContactoDTO.alergias.Trim().ToUpper() : string.Empty;
                empGrales.parentesco_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.parentesco_ben) ? objBeneficiariosDTO.parentesco_ben.Trim().ToUpper() : string.Empty;
                empGrales.fecha_nac_ben = objBeneficiariosDTO.fecha_nac_ben.Year >= 1900 ? objBeneficiariosDTO.fecha_nac_ben : (DateTime?)null;
                empGrales.codigo_postal_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.codigo_postal_ben) ? objBeneficiariosDTO.codigo_postal_ben.Trim().ToUpper() : string.Empty;
                empGrales.parterno_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.paterno_ben) ? objBeneficiariosDTO.paterno_ben.Trim().ToUpper() : string.Empty;
                empGrales.materno_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.materno_ben) ? objBeneficiariosDTO.materno_ben.Trim().ToUpper() : string.Empty;
                empGrales.nombre_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.nombre_ben) ? objBeneficiariosDTO.nombre_ben.Trim().ToUpper() : string.Empty;
                empGrales.pais_ben = objBeneficiariosDTO.pais_ben > 0 ? objBeneficiariosDTO.pais_ben : 0;
                empGrales.estado_ben = objBeneficiariosDTO.estado_ben > 0 ? objBeneficiariosDTO.estado_ben : 0;
                empGrales.cuidad_ben = objBeneficiariosDTO.ciudad_ben > 0 ? objBeneficiariosDTO.ciudad_ben : 0;
                empGrales.colonia_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.colonia_ben) ? objBeneficiariosDTO.colonia_ben.Trim().ToUpper() : string.Empty;
                empGrales.domicilio_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.domicilio_ben) ? objBeneficiariosDTO.domicilio_ben.Trim().ToUpper() : string.Empty;
                empGrales.num_ext_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.num_ext_ben) ? objBeneficiariosDTO.num_ext_ben.Trim().ToUpper() : string.Empty;
                empGrales.num_int_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.num_int_ben) ? objBeneficiariosDTO.num_int_ben.Trim().ToUpper() : string.Empty;
                empGrales.en_accidente_nombre = !string.IsNullOrEmpty(objContEmergenciasDTO.en_accidente_nombre) ? objContEmergenciasDTO.en_accidente_nombre.Trim().ToUpper() : string.Empty;
                empGrales.en_accidente_telefono = !string.IsNullOrEmpty(objContEmergenciasDTO.en_accidente_telefono) ? objContEmergenciasDTO.en_accidente_telefono.Trim().ToUpper() : string.Empty;
                empGrales.en_accidente_direccion = !string.IsNullOrEmpty(objContEmergenciasDTO.en_accidente_direccion) ? objContEmergenciasDTO.en_accidente_direccion.Trim().ToUpper() : string.Empty;
                empGrales.ben_num_dni = !string.IsNullOrEmpty(objBeneficiariosDTO.ben_num_dni) ? objBeneficiariosDTO.ben_num_dni.Trim().ToUpper() : string.Empty;
                empGrales.PERU_departamento_ben = objBeneficiariosDTO.PERU_departamento_ben != null ? objBeneficiariosDTO.PERU_departamento_ben : 0;
                empGrales.PERU_departamento_dom = objGenContactoDTO.PERU_departamento_dom != null ? objGenContactoDTO.PERU_departamento_dom : 0;
                empGrales.fechaCreacion = DateTime.Now;
                empGrales.idUsuarioCreacion = vSesiones.sesionUsuarioDTO.id;
                _context.tblRH_EK_Empl_Grales.Add(empGrales);
                _context.SaveChanges();

                #endregion

                #region UNIFORMES EK
                var objSigoUniforme = _context.tblRH_REC_Uniformes.FirstOrDefault(x => x.id == objUniforme.id);
                if (objSigoUniforme != null)
                {
                    objSigoUniforme.clave_empleado = objEmpleadoDTO.clave_empleado;
                    _context.SaveChanges();
                }

                if (objUniforme != null && objSigoUniforme != null && objSigoUniforme.clave_empleado != 0)
                {
                    var empUniforme = new tblRH_EK_Empl_Complementaria();
                    empUniforme.clave_empleado = objEmpleadoDTO.clave_empleado;
                    empUniforme.calzado = !string.IsNullOrEmpty(objUniforme.calzado) ? objUniforme.calzado.Trim().ToUpper() : string.Empty;
                    empUniforme.camisa = !string.IsNullOrEmpty(objUniforme.camisa) ? objUniforme.camisa.Trim().ToUpper() : string.Empty;
                    empUniforme.pantalon = !string.IsNullOrEmpty(objUniforme.pantalon) ? objUniforme.pantalon.Trim().ToUpper() : string.Empty;
                    empUniforme.overol = !string.IsNullOrEmpty(objUniforme.overol) ? objUniforme.overol.Trim().ToUpper() : string.Empty;
                    empUniforme.fecha_entrega = null;
                    empUniforme.entrego_calzado = objUniforme.entrego_calzado;
                    empUniforme.entrego_camisa = objUniforme.entrego_camisa;
                    empUniforme.entrego_pantalon = objUniforme.entrego_pantalon;
                    empUniforme.entregro_overol = objUniforme.entrego_overol;
                    empUniforme.comentarios = !string.IsNullOrEmpty(objUniforme.comentarios) ? objUniforme.comentarios.Trim().ToUpper() : string.Empty;
                    empUniforme.uniforme_dama = !string.IsNullOrEmpty(objUniforme.uniforme_dama) ? objUniforme.uniforme_dama.Trim().ToUpper() : string.Empty;
                    empUniforme.entrego_uniforme_dama = objUniforme.entrego_uniforme_dama;
                    empUniforme.otros = !string.IsNullOrEmpty(objUniforme.otros) ? objUniforme.otros.Trim().ToUpper() : string.Empty;
                    empUniforme.fechaCreacion = DateTime.Now;
                    empUniforme.esActivo = true;
                    empUniforme.idUsuarioCreacion = vSesiones.sesionUsuarioDTO.id;
                    _context.tblRH_EK_Empl_Complementaria.Add(empUniforme);
                    _context.SaveChanges();
                }
                #endregion

                #region SE CREA EL FAMILIAR EN EK
                if (lstFamiliares != null)
                {
                    foreach (var objFamiliarDTO in lstFamiliares)
                    {
                        int nextIdFam = GetIdFamiliarDisponible();

                        var empFam = new tblRH_EK_Empl_Familia();
                        empFam.clave_empleado = objEmpleadoDTO.clave_empleado;
                        empFam.id_familia = nextIdFam;
                        empFam.nombre = !string.IsNullOrEmpty(objFamiliarDTO.nombre) ? objFamiliarDTO.nombre.Trim().ToUpper() : string.Empty;
                        empFam.apellido_paterno = !string.IsNullOrEmpty(objFamiliarDTO.apellido_paterno) ? objFamiliarDTO.apellido_paterno.Trim().ToUpper() : string.Empty;
                        empFam.apellido_materno = !string.IsNullOrEmpty(objFamiliarDTO.apellido_materno) ? objFamiliarDTO.apellido_materno.Trim().ToUpper() : string.Empty;
                        empFam.fecha_de_nacimiento = objFamiliarDTO.fecha_de_nacimiento;
                        empFam.parentesco = objFamiliarDTO.parentesco;
                        empFam.grado_de_estudios = !string.IsNullOrEmpty(objFamiliarDTO.grado_de_estudios) ? objFamiliarDTO.grado_de_estudios.Trim().ToUpper() : string.Empty;
                        empFam.estado_civil = !string.IsNullOrEmpty(objFamiliarDTO.estado_civil) ? objFamiliarDTO.estado_civil.Trim() : string.Empty;
                        empFam.estudia = !objFamiliarDTO.esEstudia ? "N" : "S";
                        empFam.genero = objFamiliarDTO.genero;
                        empFam.vive = objFamiliarDTO.esVive ? "S" : "N";
                        empFam.fecha_matrimonio = null;
                        empFam.beneficiario = !objFamiliarDTO.esBeneficiario ? "N" : "S";
                        empFam.trabaja = !objFamiliarDTO.esTrabaja ? "N" : "S";
                        empFam.comentarios = !string.IsNullOrEmpty(objFamiliarDTO.comentarios) ? objFamiliarDTO.comentarios.Trim().ToUpper() : string.Empty;
                        empFam.num_dni = objFamiliarDTO.num_dni;
                        empFam.cedula_cuidadania = objFamiliarDTO.cedula_cuidadania;
                        empFam.fechaCreacion = DateTime.Now;
                        empFam.fechaModificacion = DateTime.Now;
                        empFam.idUsuarioCreacion = vSesiones.sesionUsuarioDTO.id;
                        empFam.idUsuarioModificacion = vSesiones.sesionUsuarioDTO.id;
                        empFam.esActivo = true;
                        _context.tblRH_EK_Empl_Familia.Add(empFam);
                        _context.SaveChanges();
                    }
                }

                _context.SaveChanges();
                #endregion

                #region SE ASIGNA EL ID AL CANDIDATO VALIDADO SI EXISTE.
                tblRH_REC_GestionCandidatos objCandidato = _context.tblRH_REC_GestionCandidatos.Where(e => e.esActivo && objEmpleadoDTO.idCandidato.HasValue && e.id == objEmpleadoDTO.idCandidato).FirstOrDefault();

                if (objCandidato != null)
                {
                    objCandidato.clave_empleado = objEmpleadoDTO.clave_empleado;
                    _context.SaveChanges();
                }
                #endregion
                #endregion

                #region ADD DATOS PERU
                using (var dbStartSoft = new MainContextPeruStarSoftPLCONSTRU())// MIGRAR
                {
                    if ((MainContextEnum)vSesiones.sesionEmpresaActual == MainContextEnum.PERU)
                    {
                        decimal APOROBLI = 0;
                        decimal TOPESEGURO = 0;
                        decimal COMISIONRA = 0;

                        if (!string.IsNullOrEmpty(objDatosPeru.codafp))
                        {
                            var objAFPS = dbStartSoft.AFPS.FirstOrDefault(e => e.CODAFP == objDatosPeru.codafp);// MIGRAR
                            APOROBLI = objAFPS.APOROBLI;
                            TOPESEGURO = objAFPS.TOPESEGURO;
                            COMISIONRA = objAFPS.COMISIONRA;
                        }

                        var objCEDatosPeru = new tblRH_REC_InfoEmpleadoPeru();

                        objCEDatosPeru.claveEmpleado = objEmpleadoDTO.clave_empleado;
                        objCEDatosPeru.codafp = objDatosPeru.codafp;// MIGRAR
                        objCEDatosPeru.aporobli = APOROBLI; // MIGRAR
                        objCEDatosPeru.topeseguro = TOPESEGURO;// MIGRAR
                        objCEDatosPeru.comisionra = COMISIONRA;// MIGRAR
                        objCEDatosPeru.ctbasico = objDatosPeru.ctbasico;
                        objCEDatosPeru.basico = objDatosPeru.basico;
                        objCEDatosPeru.asigfam = objDatosPeru.asigfam;
                        objCEDatosPeru.fondopens = objDatosPeru.codafp;
                        objCEDatosPeru.ubigeo = "";
                        objCEDatosPeru.tipotrab = objDatosPeru.tipotrab;
                        objCEDatosPeru.situacion = objDatosPeru.situacion;
                        objCEDatosPeru.essaludvida = objDatosPeru.essaludvida ? 1 : 0;
                        objCEDatosPeru.ruceps = objDatosPeru.ruceps;
                        objCEDatosPeru.nopdt = objDatosPeru.nopdt ? 1 : 0;
                        objCEDatosPeru.opcion01 = objDatosPeru.opcion01 ? 1 : 0;
                        objCEDatosPeru.opcion02 = objDatosPeru.opcion02 ? 1 : 0;
                        objCEDatosPeru.opciona = objDatosPeru.opciona;
                        objCEDatosPeru.opcionb = objDatosPeru.opcionb;
                        objCEDatosPeru.nocalculo = objDatosPeru.nocalculo;
                        objCEDatosPeru.afectoquinta = objDatosPeru.afectoquinta;
                        objCEDatosPeru.afiliado_eps = objDatosPeru.afiliado_eps;
                        objCEDatosPeru.codsctr = objDatosPeru.codsctr;
                        objCEDatosPeru.sctr_pension = objDatosPeru.sctr_pension;
                        objCEDatosPeru.sctr_salud = objDatosPeru.sctr_salud;
                        objCEDatosPeru.es_comision_mixta = objDatosPeru.es_comision_mixta;
                        objCEDatosPeru.factor_familiar_eps = objDatosPeru.factor_familiar_eps;
                        objCEDatosPeru.trabajador_regimen = objDatosPeru.trabajador_regimen;
                        objCEDatosPeru.trabajador_jornada = objDatosPeru.trabajador_jornada;
                        objCEDatosPeru.trabajador_nocturno = objDatosPeru.trabajador_nocturno;
                        objCEDatosPeru.otros_ingresos = objDatosPeru.otros_ingresos;
                        objCEDatosPeru.sindicalizado = objDatosPeru.sindicalizado;
                        objCEDatosPeru.discapacitado = objDatosPeru.discapacitado;
                        objCEDatosPeru.domiciliado = objDatosPeru.domiciliado;
                        objCEDatosPeru.aseg_pension = objDatosPeru.aseg_pension;
                        objCEDatosPeru.rentas_exoneradas = objDatosPeru.rentas_exoneradas;
                        objCEDatosPeru.bancocts = objDatosPeru.bancocts;
                        objCEDatosPeru.ctacts = objDatosPeru.ctacts;
                        objCEDatosPeru.regimen_laboral = objDatosPeru.regimen_laboral;
                        objCEDatosPeru.fechaRegistro = DateTime.Now;
                        objCEDatosPeru.fechaModificacion = DateTime.Now;
                        objCEDatosPeru.usuarioRegistroId = vSesiones.sesionUsuarioDTO.id;
                        objCEDatosPeru.usuarioModificacionId = vSesiones.sesionUsuarioDTO.id;
                        objCEDatosPeru.registroActivo = true;

                        _context.tblRH_REC_InfoEmpleadoPeru.Add(objCEDatosPeru);
                        _context.SaveChanges();
                    }
                }                
                
                #endregion

                #region SE NOTIFICA EL NUEVO EMPLEADO A DIANA Y AL QUE CAPTURO

                var correos = new List<string>();

                string descRegPat = "";

                if (objCompaniaDTO.id_regpat > 0)
                {
                    var objRegPat = _context.tblRH_EK_Registros_Patronales.FirstOrDefault(e => e.clave_reg_pat == objCompaniaDTO.id_regpat);
                    if (objRegPat != null)
                    {
                        descRegPat = objRegPat.nombre_corto;
                    }
                }

                var ccCambio = _context.tblC_Nom_CatalogoCC.FirstOrDefault(x => x.cc == objCompaniaDTO.cc_contable);
                var puestoCambio = _context.tblRH_EK_Puestos.FirstOrDefault(x => x.puesto == objCompaniaDTO.puesto);

                var asunto = @"SOLICITUD DE ALTA en el CC " + (ccCambio != null ? ccCambio.cc + " " + ccCambio.ccDescripcion.Trim() : "") + "(" + descRegPat + ")";
                var mensaje = string.Format(@"
                            El siguiente empleado necesita autorizacion para ser dado de alta: <br/><br/>" +
                                                                         "{0} – {1}, para el centro de costos: {2} – {3}, con el puesto de: {4}", objEmpleadoDTO.clave_empleado, (objEmpleadoDTO.ape_paterno + " " + objEmpleadoDTO.ape_materno + " " + objEmpleadoDTO.nombre), ccCambio != null ? ccCambio.cc : "", ccCambio != null ? ccCambio.ccDescripcion.Trim() : "", puestoCambio.descripcion);

                var listaUsuariosCorreos = _context.tblRH_REC_Notificantes_Tabulador.Where(x => x.registroActivo).Select(x => x.idUsuario).ToList();
                var listaUsuariosCC = _context.tblRH_BN_Usuario_CC.Where(x => x.cc == ccCambio.cc).Select(x => x.usuarioID).ToList();

                listaUsuariosCorreos.Add(vSesiones.sesionUsuarioDTO.id);
                listaUsuariosCorreos.AddRange(listaUsuariosCC);

                foreach (var usu in listaUsuariosCorreos)
                {
                    correos.Add(_context.tblP_Usuario.FirstOrDefault(x => x.id == usu).correo);
                }

                correos = correos.Distinct().ToList();
#if DEBUG
                correos = new List<string> { "miguel.buzani@construplan.com.mx" };
#endif
                //GlobalUtils.sendEmail(asunto, mensaje, correos); // SE REALIZO ENDPOINT NUEVO.
                #endregion

                #region SE CREA EXPEDIENTE DEL NUEVO EMPLEADO
                _context.tblRH_REC_ED_Expediente.Add(new tblRH_REC_ED_Expediente
                {
                    claveEmpleado = objEmpleadoDTO.clave_empleado,
                    usuarioCreacion_id = vSesiones.sesionUsuarioDTO.id,
                    fechaCreacion = DateTime.Now,
                    usuarioModificacion_id = vSesiones.sesionUsuarioDTO.id,
                    registroActivo = true,
                });
                _context.SaveChanges();
                #endregion

                return true;
            }
            else if (objEmpleadoDTO.esActualizar)
            {
                string strQuery = string.Empty;

                #region SE ACTUALIZA LOS DATOS DEL EMPLEADO EN SIGOPLAN
                #region DATOS EMPLEADO
                tblRH_REC_Empleados objActualizarDatosEmpleado = _context.tblRH_REC_Empleados.Where(w => w.clave_empleado == objEmpleadoDTO.clave_empleado && w.esActivo).FirstOrDefault();
                if (objActualizarDatosEmpleado != null)
                {
                    objActualizarDatosEmpleado.nombre = !string.IsNullOrEmpty(objEmpleadoDTO.nombre) ? objEmpleadoDTO.nombre.Trim().ToUpper() : string.Empty;
                    objActualizarDatosEmpleado.ape_paterno = !string.IsNullOrEmpty(objEmpleadoDTO.ape_paterno) ? objEmpleadoDTO.ape_paterno.Trim().ToUpper() : string.Empty;
                    objActualizarDatosEmpleado.ape_materno = !string.IsNullOrEmpty(objEmpleadoDTO.ape_materno) ? objEmpleadoDTO.ape_materno.Trim().ToUpper() : string.Empty;
                    objActualizarDatosEmpleado.fecha_nac = objEmpleadoDTO.fecha_nac;
                    objActualizarDatosEmpleado.clave_pais_nac = objEmpleadoDTO.clave_pais_nac > 0 ? objEmpleadoDTO.clave_pais_nac : 0;
                    objActualizarDatosEmpleado.clave_estado_nac = objEmpleadoDTO.clave_estado_nac > 0 ? objEmpleadoDTO.clave_estado_nac : 0;
                    objActualizarDatosEmpleado.clave_ciudad_nac = objEmpleadoDTO.clave_ciudad_nac > 0 ? objEmpleadoDTO.clave_ciudad_nac : 0;
                    objActualizarDatosEmpleado.localidad_nacimiento = !string.IsNullOrEmpty(objEmpleadoDTO.localidad_nacimiento) ? objEmpleadoDTO.localidad_nacimiento.Trim().ToUpper() : string.Empty;
                    objActualizarDatosEmpleado.fecha_alta = objEmpleadoDTO.fecha_alta;
                    objActualizarDatosEmpleado.sexo = !string.IsNullOrEmpty(objEmpleadoDTO.sexo) ? (string)objEmpleadoDTO.sexo.Trim().ToUpper() : string.Empty;
                    objActualizarDatosEmpleado.rfc = !string.IsNullOrEmpty(objEmpleadoDTO.rfc) ? objEmpleadoDTO.rfc.Trim().ToUpper() : string.Empty;
                    objActualizarDatosEmpleado.curp = !string.IsNullOrEmpty(objEmpleadoDTO.curp) ? objEmpleadoDTO.curp.Trim().ToUpper() : string.Empty;
                    objActualizarDatosEmpleado.esReingresoEmpleado = objEmpleadoDTO.esReingresoEmpleado;
                    objActualizarDatosEmpleado.fechaModificacion = DateTime.Now;
                    objActualizarDatosEmpleado.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                    _context.SaveChanges();
                }
                else
                {
                    tblRH_REC_Empleados objCrearDatosEmpleado = new tblRH_REC_Empleados();
                    objCrearDatosEmpleado.clave_empleado = objEmpleadoDTO.clave_empleado > 0 ? objEmpleadoDTO.clave_empleado : 0;
                    objCrearDatosEmpleado.idEstatus = (int)EstatusEmpleadoEnum.pendiente;
                    objCrearDatosEmpleado.nombre = !string.IsNullOrEmpty(objEmpleadoDTO.nombre) ? objEmpleadoDTO.nombre.Trim().ToUpper() : string.Empty;
                    objCrearDatosEmpleado.ape_paterno = !string.IsNullOrEmpty(objEmpleadoDTO.ape_paterno) ? objEmpleadoDTO.ape_paterno.Trim().ToUpper() : string.Empty;
                    objCrearDatosEmpleado.ape_materno = !string.IsNullOrEmpty(objEmpleadoDTO.ape_materno) ? objEmpleadoDTO.ape_materno.Trim().ToUpper() : string.Empty;
                    objCrearDatosEmpleado.fecha_nac = objEmpleadoDTO.fecha_nac;
                    objCrearDatosEmpleado.clave_pais_nac = objEmpleadoDTO.clave_pais_nac > 0 ? objEmpleadoDTO.clave_pais_nac : 0;
                    objCrearDatosEmpleado.clave_estado_nac = objEmpleadoDTO.clave_estado_nac > 0 ? objEmpleadoDTO.clave_estado_nac : 0;
                    objCrearDatosEmpleado.clave_ciudad_nac = objEmpleadoDTO.clave_ciudad_nac > 0 ? objEmpleadoDTO.clave_ciudad_nac : 0;
                    objCrearDatosEmpleado.localidad_nacimiento = !string.IsNullOrEmpty(objEmpleadoDTO.localidad_nacimiento) ? objEmpleadoDTO.localidad_nacimiento.Trim().ToUpper() : string.Empty;
                    objCrearDatosEmpleado.fecha_alta = objEmpleadoDTO.fecha_alta;
                    objCrearDatosEmpleado.sexo = !string.IsNullOrEmpty(objEmpleadoDTO.sexo) ? (string)objEmpleadoDTO.sexo.Trim().ToUpper() : string.Empty;
                    objCrearDatosEmpleado.rfc = !string.IsNullOrEmpty(objEmpleadoDTO.rfc) ? objEmpleadoDTO.rfc.Trim().ToUpper() : string.Empty;
                    objCrearDatosEmpleado.curp = !string.IsNullOrEmpty(objEmpleadoDTO.curp) ? objEmpleadoDTO.curp.Trim().ToUpper() : string.Empty;
                    objCrearDatosEmpleado.idCandidato = objEmpleadoDTO.idCandidato.HasValue ? objEmpleadoDTO.idCandidato.Value : 0;
                    objCrearDatosEmpleado.esPendiente = true;
                    objCrearDatosEmpleado.esReingresoEmpleado = objEmpleadoDTO.esReingresoEmpleado;
                    objCrearDatosEmpleado.fechaCreacion = DateTime.Now;
                    objCrearDatosEmpleado.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                    objCrearDatosEmpleado.esActivo = true;
                    _context.tblRH_REC_Empleados.Add(objCrearDatosEmpleado);
                    _context.SaveChanges();
                }
                #endregion

                #region GENERALES Y CONTACTO
                tblRH_REC_EmplGenContacto objActualizarGenContacto = _context.tblRH_REC_EmplGenContacto.Where(w => w.clave_empleado == objGenContactoDTO.clave_empleado && w.esActivo).FirstOrDefault();
                if (objActualizarGenContacto != null)
                {
                    objActualizarGenContacto.estado_civil = !string.IsNullOrEmpty(objGenContactoDTO.estado_civil) ? objGenContactoDTO.estado_civil.Trim() : string.Empty;
                    objActualizarGenContacto.fecha_planta = objGenContactoDTO.fecha_planta.Year > 1000 ? objGenContactoDTO.fecha_planta : new DateTime(2000, 01, 01);
                    objActualizarGenContacto.ocupacion = !string.IsNullOrEmpty(objGenContactoDTO.ocupacion) ? objGenContactoDTO.ocupacion.Trim().ToUpper() : string.Empty;
                    objActualizarGenContacto.ocupacion_abrev = !string.IsNullOrEmpty(objGenContactoDTO.ocupacion_abrev) ? objGenContactoDTO.ocupacion_abrev.Trim().ToUpper() : string.Empty;
                    objActualizarGenContacto.num_cred_elector = !string.IsNullOrEmpty(objGenContactoDTO.num_cred_elector) ? objGenContactoDTO.num_cred_elector.Trim().ToUpper() : string.Empty;
                    objActualizarGenContacto.domicilio = !string.IsNullOrEmpty(objGenContactoDTO.domicilio) ? objGenContactoDTO.domicilio.Trim().ToUpper() : string.Empty;
                    objActualizarGenContacto.numero_exterior = !string.IsNullOrEmpty(objGenContactoDTO.numero_exterior) ? objGenContactoDTO.numero_exterior.Trim().ToUpper() : string.Empty;
                    objActualizarGenContacto.numero_interior = !string.IsNullOrEmpty(objGenContactoDTO.numero_interior) ? objGenContactoDTO.numero_interior.Trim().ToUpper() : string.Empty;
                    objActualizarGenContacto.colonia = !string.IsNullOrEmpty(objGenContactoDTO.colonia) ? objGenContactoDTO.colonia.Trim().ToUpper() : string.Empty;
                    objActualizarGenContacto.pais_dom = objGenContactoDTO.pais_dom > 0 ? objGenContactoDTO.pais_dom : 0;
                    objActualizarGenContacto.estado_dom = objGenContactoDTO.estado_dom > 0 ? objGenContactoDTO.estado_dom : 0;
                    objActualizarGenContacto.ciudad_dom = objGenContactoDTO.ciudad_dom > 0 ? objGenContactoDTO.ciudad_dom : 0;
                    objActualizarGenContacto.codigo_postal = objGenContactoDTO.codigo_postal > 0 ? objGenContactoDTO.codigo_postal : 0;
                    objActualizarGenContacto.tel_casa = !string.IsNullOrEmpty(objGenContactoDTO.tel_casa) ? objGenContactoDTO.tel_casa.Trim().ToUpper() : string.Empty;
                    objActualizarGenContacto.tel_cel = !string.IsNullOrEmpty(objGenContactoDTO.tel_cel) ? objGenContactoDTO.tel_cel.Trim().ToUpper() : string.Empty;
                    objActualizarGenContacto.email = !string.IsNullOrEmpty(objGenContactoDTO.email) ? objGenContactoDTO.email.Trim().ToUpper() : string.Empty;
                    objActualizarGenContacto.tipo_casa = objGenContactoDTO.tipo_casa.HasValue ? objGenContactoDTO.tipo_casa.Value.ToString().Trim().ToUpper() : string.Empty;
                    objActualizarGenContacto.tipo_sangre = !string.IsNullOrEmpty(objGenContactoDTO.tipo_sangre) ? objGenContactoDTO.tipo_sangre.Trim().ToUpper() : string.Empty;
                    objActualizarGenContacto.alergias = !string.IsNullOrEmpty(objGenContactoDTO.alergias) ? objGenContactoDTO.alergias.Trim().ToUpper() : string.Empty;
                    objActualizarGenContacto.fechaModificacion = DateTime.Now;
                    objActualizarGenContacto.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                    _context.SaveChanges();
                }
                else
                {
                    tblRH_REC_EmplGenContacto objCrearGenContacto = new tblRH_REC_EmplGenContacto();
                    objCrearGenContacto.clave_empleado = objGenContactoDTO.clave_empleado > 0 ? objGenContactoDTO.clave_empleado : 0;
                    objCrearGenContacto.estado_civil = !string.IsNullOrEmpty(objGenContactoDTO.estado_civil) ? objGenContactoDTO.estado_civil.Trim() : string.Empty;
                    objCrearGenContacto.fecha_planta = objGenContactoDTO.fecha_planta.Year > 1000 ? objGenContactoDTO.fecha_planta : new DateTime(2000, 01, 01);
                    objCrearGenContacto.ocupacion = !string.IsNullOrEmpty(objGenContactoDTO.ocupacion) ? objGenContactoDTO.ocupacion.Trim().ToUpper() : string.Empty;
                    objCrearGenContacto.ocupacion_abrev = !string.IsNullOrEmpty(objGenContactoDTO.ocupacion_abrev) ? objGenContactoDTO.ocupacion_abrev.Trim().ToUpper() : string.Empty;
                    objCrearGenContacto.num_cred_elector = !string.IsNullOrEmpty(objGenContactoDTO.num_cred_elector) ? objGenContactoDTO.num_cred_elector.Trim().ToUpper() : string.Empty;
                    objCrearGenContacto.domicilio = !string.IsNullOrEmpty(objGenContactoDTO.domicilio) ? objGenContactoDTO.domicilio.Trim().ToUpper() : string.Empty;
                    objCrearGenContacto.numero_exterior = !string.IsNullOrEmpty(objGenContactoDTO.numero_exterior) ? objGenContactoDTO.numero_exterior.Trim().ToUpper() : string.Empty;
                    objCrearGenContacto.numero_interior = !string.IsNullOrEmpty(objGenContactoDTO.numero_interior) ? objGenContactoDTO.numero_interior.Trim().ToUpper() : string.Empty;
                    objCrearGenContacto.colonia = !string.IsNullOrEmpty(objGenContactoDTO.colonia) ? objGenContactoDTO.colonia.Trim().ToUpper() : string.Empty;
                    objCrearGenContacto.pais_dom = objGenContactoDTO.pais_dom > 0 ? objGenContactoDTO.pais_dom : 0;
                    objCrearGenContacto.estado_dom = objGenContactoDTO.estado_dom > 0 ? objGenContactoDTO.estado_dom : 0;
                    objCrearGenContacto.ciudad_dom = objGenContactoDTO.ciudad_dom > 0 ? objGenContactoDTO.ciudad_dom : 0;
                    objCrearGenContacto.codigo_postal = objGenContactoDTO.codigo_postal > 0 ? objGenContactoDTO.codigo_postal : 0;
                    objCrearGenContacto.tel_casa = !string.IsNullOrEmpty(objGenContactoDTO.tel_casa) ? objGenContactoDTO.tel_casa.Trim().ToUpper() : string.Empty;
                    objCrearGenContacto.tel_cel = !string.IsNullOrEmpty(objGenContactoDTO.tel_cel) ? objGenContactoDTO.tel_cel.Trim().ToUpper() : string.Empty;
                    objCrearGenContacto.email = !string.IsNullOrEmpty(objGenContactoDTO.email) ? objGenContactoDTO.email.Trim().ToUpper() : string.Empty;
                    objCrearGenContacto.tipo_casa = objGenContactoDTO.tipo_casa.HasValue ? objGenContactoDTO.tipo_casa.ToString().Trim().ToUpper() : string.Empty;
                    objCrearGenContacto.tipo_sangre = !string.IsNullOrEmpty(objGenContactoDTO.tipo_sangre) ? objGenContactoDTO.tipo_sangre.Trim().ToUpper() : string.Empty;
                    objCrearGenContacto.alergias = !string.IsNullOrEmpty(objGenContactoDTO.alergias) ? objGenContactoDTO.alergias.Trim().ToUpper() : string.Empty;
                    objCrearGenContacto.esActivo = true;
                    objCrearGenContacto.fechaCreacion = DateTime.Now;
                    objCrearGenContacto.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                    _context.tblRH_REC_EmplGenContacto.Add(objCrearGenContacto);
                    _context.SaveChanges();
                }
                #endregion

                #region BENEFICIARIOS
                tblRH_REC_EmplBeneficiarios objActualizarBeneficiario = _context.tblRH_REC_EmplBeneficiarios.Where(w => w.clave_empleado == objBeneficiariosDTO.clave_empleado && w.esActivo).FirstOrDefault();
                if (objActualizarBeneficiario != null)
                {
                    objActualizarBeneficiario.codigo_postal_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.codigo_postal_ben) ? objBeneficiariosDTO.codigo_postal_ben.Trim().ToUpper() : string.Empty;
                    objActualizarBeneficiario.parentesco_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.parentesco_ben) ? objBeneficiariosDTO.parentesco_ben.Trim().ToUpper() : string.Empty;
                    objActualizarBeneficiario.fecha_nac_ben = objBeneficiariosDTO.fecha_nac_ben.Year >= 1900 ? objBeneficiariosDTO.fecha_nac_ben : (DateTime?)null;
                    objActualizarBeneficiario.paterno_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.paterno_ben) ? objBeneficiariosDTO.paterno_ben.Trim().ToUpper() : string.Empty;
                    objActualizarBeneficiario.materno_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.materno_ben) ? objBeneficiariosDTO.materno_ben.Trim().ToUpper() : string.Empty;
                    objActualizarBeneficiario.nombre_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.nombre_ben) ? objBeneficiariosDTO.nombre_ben : string.Empty;
                    objActualizarBeneficiario.pais_ben = objBeneficiariosDTO.pais_ben > 0 ? objBeneficiariosDTO.pais_ben : 0;
                    objActualizarBeneficiario.estado_ben = objBeneficiariosDTO.estado_ben > 0 ? objBeneficiariosDTO.estado_ben : 0;
                    objActualizarBeneficiario.ciudad_ben = objBeneficiariosDTO.ciudad_ben > 0 ? objBeneficiariosDTO.ciudad_ben : 0;
                    objActualizarBeneficiario.colonia_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.colonia_ben) ? objBeneficiariosDTO.colonia_ben.Trim().ToUpper() : string.Empty;
                    objActualizarBeneficiario.domicilio_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.domicilio_ben) ? objBeneficiariosDTO.domicilio_ben.Trim().ToUpper() : string.Empty;
                    objActualizarBeneficiario.num_ext_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.num_ext_ben) ? objBeneficiariosDTO.num_ext_ben.Trim().ToUpper() : string.Empty;
                    objActualizarBeneficiario.num_int_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.num_int_ben) ? objBeneficiariosDTO.num_int_ben.Trim().ToUpper() : string.Empty;
                    objActualizarBeneficiario.cel = objBeneficiariosDTO.cel;
                    objActualizarBeneficiario.fechaModificacion = DateTime.Now;
                    objActualizarBeneficiario.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                    _context.SaveChanges();
                }
                else
                {
                    tblRH_REC_EmplBeneficiarios objCrearBeneficiario = new tblRH_REC_EmplBeneficiarios();
                    objCrearBeneficiario.clave_empleado = objBeneficiariosDTO.clave_empleado > 0 ? objBeneficiariosDTO.clave_empleado : 0;
                    objCrearBeneficiario.codigo_postal_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.codigo_postal_ben) ? objBeneficiariosDTO.codigo_postal_ben.Trim().ToUpper() : string.Empty;
                    objCrearBeneficiario.parentesco_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.parentesco_ben) ? objBeneficiariosDTO.parentesco_ben.Trim().ToUpper() : string.Empty;
                    objCrearBeneficiario.fecha_nac_ben = objBeneficiariosDTO.fecha_nac_ben.Year > 1900 ? objBeneficiariosDTO.fecha_nac_ben : (DateTime?)null;
                    objCrearBeneficiario.paterno_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.paterno_ben) ? objBeneficiariosDTO.paterno_ben.Trim().ToUpper() : string.Empty;
                    objCrearBeneficiario.materno_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.materno_ben) ? objBeneficiariosDTO.materno_ben.Trim().ToUpper() : string.Empty;
                    objCrearBeneficiario.nombre_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.nombre_ben) ? objBeneficiariosDTO.nombre_ben.Trim().ToUpper() : string.Empty;
                    objCrearBeneficiario.pais_ben = objBeneficiariosDTO.pais_ben > 0 ? objBeneficiariosDTO.pais_ben : 0;
                    objCrearBeneficiario.estado_ben = objBeneficiariosDTO.estado_ben > 0 ? objBeneficiariosDTO.estado_ben : 0;
                    objCrearBeneficiario.ciudad_ben = objBeneficiariosDTO.ciudad_ben > 0 ? objBeneficiariosDTO.ciudad_ben : 0;
                    objCrearBeneficiario.colonia_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.colonia_ben) ? objBeneficiariosDTO.colonia_ben.Trim().ToUpper() : string.Empty;
                    objCrearBeneficiario.domicilio_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.domicilio_ben) ? objBeneficiariosDTO.domicilio_ben.Trim().ToUpper() : string.Empty;
                    objCrearBeneficiario.num_ext_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.num_ext_ben) ? objBeneficiariosDTO.num_ext_ben.Trim().ToUpper() : string.Empty;
                    objCrearBeneficiario.num_int_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.num_int_ben) ? objBeneficiariosDTO.num_int_ben.Trim().ToUpper() : string.Empty;
                    objCrearBeneficiario.cel = objBeneficiariosDTO.cel;
                    objCrearBeneficiario.esActivo = true;
                    objCrearBeneficiario.fechaCreacion = DateTime.Now;
                    objCrearBeneficiario.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                    _context.tblRH_REC_EmplBeneficiarios.Add(objCrearBeneficiario);
                    _context.SaveChanges();
                }
                #endregion

                #region CONTACTO EN CASO DE EMERGENCIA
                tblRH_REC_EmplContEmergencias objActualizarContEmergencias = _context.tblRH_REC_EmplContEmergencias.Where(w => w.clave_empleado == objContEmergenciasDTO.clave_empleado && w.esActivo).FirstOrDefault();
                if (objActualizarContEmergencias != null)
                {
                    objActualizarContEmergencias.en_accidente_nombre = !string.IsNullOrEmpty(objContEmergenciasDTO.en_accidente_nombre) ? objContEmergenciasDTO.en_accidente_nombre.Trim().ToUpper() : string.Empty;
                    objActualizarContEmergencias.en_accidente_telefono = !string.IsNullOrEmpty(objContEmergenciasDTO.en_accidente_telefono) ? objContEmergenciasDTO.en_accidente_telefono.Trim().ToUpper() : string.Empty;
                    objActualizarContEmergencias.en_accidente_direccion = !string.IsNullOrEmpty(objContEmergenciasDTO.en_accidente_direccion) ? objContEmergenciasDTO.en_accidente_direccion.Trim().ToUpper() : string.Empty;
                    objActualizarContEmergencias.fechaModificacion = DateTime.Now;
                    objActualizarContEmergencias.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                    _context.SaveChanges();
                }
                else
                {
                    tblRH_REC_EmplContEmergencias objCrearContEmergencias = new tblRH_REC_EmplContEmergencias();
                    objCrearContEmergencias.clave_empleado = objContEmergenciasDTO.clave_empleado > 0 ? objContEmergenciasDTO.clave_empleado : 0;
                    objCrearContEmergencias.en_accidente_nombre = !string.IsNullOrEmpty(objContEmergenciasDTO.en_accidente_nombre) ? objContEmergenciasDTO.en_accidente_nombre.Trim().ToUpper() : string.Empty;
                    objCrearContEmergencias.en_accidente_telefono = !string.IsNullOrEmpty(objContEmergenciasDTO.en_accidente_telefono) ? objContEmergenciasDTO.en_accidente_telefono.Trim().ToUpper() : string.Empty;
                    objCrearContEmergencias.en_accidente_direccion = !string.IsNullOrEmpty(objContEmergenciasDTO.en_accidente_direccion) ? objContEmergenciasDTO.en_accidente_direccion.Trim().ToUpper() : string.Empty;
                    objCrearContEmergencias.esActivo = true;
                    objCrearContEmergencias.fechaCreacion = DateTime.Now;
                    objCrearContEmergencias.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                    _context.tblRH_REC_EmplContEmergencias.Add(objCrearContEmergencias);
                    _context.SaveChanges();
                }
                #endregion

                #region COMPAÑIA
                tblRH_REC_EmplCompania objActualizarCompania = _context.tblRH_REC_EmplCompania.Where(w => w.clave_empleado == objEmpleadoDTO.clave_empleado && w.esActivo).FirstOrDefault();
                if (objActualizarCompania != null)
                {
                    objActualizarCompania.requisicion = objCompaniaDTO.requisicion > 0 ? objCompaniaDTO.requisicion : 0;
                    objActualizarCompania.id_regpat = objCompaniaDTO.id_regpat > 0 ? objCompaniaDTO.id_regpat : 0;
                    objActualizarCompania.cc_contable = !string.IsNullOrEmpty(objCompaniaDTO.cc_contable) ? objCompaniaDTO.cc_contable.Trim().ToUpper() : string.Empty;
                    objActualizarCompania.puesto = objCompaniaDTO.puesto > 0 ? objCompaniaDTO.puesto : 0;
                    objActualizarCompania.duracion_contrato = objCompaniaDTO.duracion_contrato > 0 ? objCompaniaDTO.duracion_contrato : 0;
                    objActualizarCompania.jefe_inmediato = objCompaniaDTO.jefe_inmediato > 0 ? objCompaniaDTO.jefe_inmediato : 0;
                    objActualizarCompania.autoriza = objCompaniaDTO.autoriza > 0 ? objCompaniaDTO.autoriza : 0;
                    objActualizarCompania.usuario_compras = objCompaniaDTO.usuario_compras > 0 ? objCompaniaDTO.usuario_compras : 0;
                    objActualizarCompania.sindicato = objCompaniaDTO.chkSindicato ? "S" : "N";
                    objActualizarCompania.clave_depto = objCompaniaDTO.clave_depto > 0 ? objCompaniaDTO.clave_depto : 0;
                    objActualizarCompania.nss = !string.IsNullOrEmpty(objCompaniaDTO.nss) ? objCompaniaDTO.nss.Trim().ToUpper() : string.Empty;
                    objActualizarCompania.unidad_medica = GetUnidadMedica(objGenContactoDTO.codigo_postal);
                    objActualizarCompania.tipo_formula_imss = !string.IsNullOrEmpty(objCompaniaDTO.tipo_formula_imss) ? objCompaniaDTO.tipo_formula_imss.Trim().ToUpper() : string.Empty;
                    objActualizarCompania.fecha_contrato = objCompaniaDTO.fecha_contrato.Year > 1000 ? objCompaniaDTO.fecha_contrato : new DateTime(2000, 01, 01);
                    objActualizarCompania.fechaModificacion = DateTime.Now;
                    objActualizarCompania.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                    objActualizarCompania.tipoEmpleado = objCompaniaDTO.tipoEmpleado;
                    _context.SaveChanges();
                }
                else
                {
                    tblRH_REC_EmplCompania objCrearCompania = new tblRH_REC_EmplCompania();
                    objCrearCompania.clave_empleado = objCompaniaDTO.clave_empleado > 0 ? objCompaniaDTO.clave_empleado : 0;
                    objCrearCompania.requisicion = objCompaniaDTO.requisicion > 0 ? objCompaniaDTO.requisicion : 0;
                    objCrearCompania.id_regpat = objCompaniaDTO.id_regpat > 0 ? objCompaniaDTO.id_regpat : 0;
                    objCrearCompania.cc_contable = !string.IsNullOrEmpty(objCompaniaDTO.cc_contable) ? objCompaniaDTO.cc_contable.Trim().ToUpper() : string.Empty;
                    objCrearCompania.puesto = objCompaniaDTO.puesto > 0 ? objCompaniaDTO.puesto : 0;
                    objCrearCompania.duracion_contrato = objCompaniaDTO.duracion_contrato > 0 ? objCompaniaDTO.duracion_contrato : 0;
                    objCrearCompania.jefe_inmediato = objCompaniaDTO.jefe_inmediato > 0 ? objCompaniaDTO.jefe_inmediato : 0;
                    objCrearCompania.autoriza = objCompaniaDTO.autoriza > 0 ? objCompaniaDTO.autoriza : 0;
                    objCrearCompania.usuario_compras = objCompaniaDTO.usuario_compras > 0 ? objCompaniaDTO.usuario_compras : 0;
                    objCrearCompania.sindicato = objCompaniaDTO.chkSindicato ? "S" : "N";
                    objCrearCompania.clave_depto = objCompaniaDTO.clave_depto > 0 ? objCompaniaDTO.clave_depto : 0;
                    objCrearCompania.nss = !string.IsNullOrEmpty(objCompaniaDTO.nss) ? objCompaniaDTO.nss.Trim().ToUpper() : string.Empty;
                    objCrearCompania.unidad_medica = GetUnidadMedica(objGenContactoDTO.codigo_postal);
                    objCrearCompania.tipo_formula_imss = !string.IsNullOrEmpty(objCompaniaDTO.tipo_formula_imss) ? objCompaniaDTO.tipo_formula_imss.Trim().ToUpper() : string.Empty;
                    objCrearCompania.fecha_contrato = /*objCompaniaDTO.fecha_contrato*/ DateTime.Now;
                    objCrearCompania.esActivo = true;
                    objCrearCompania.fechaCreacion = DateTime.Now;
                    objCrearCompania.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                    objCrearCompania.idUsuarioModificacion = vSesiones.sesionUsuarioDTO.id;
                    _context.tblRH_REC_EmplCompania.Add(objCrearCompania);
                    _context.SaveChanges();
                }
                #endregion

                #region TABULADOR
                var objSigoplanTabulador = _context.tblRH_EK_Tabulador_Historial.Where(e => e.esActivo && e.clave_empleado == objEmpleadoDTO.clave_empleado).OrderByDescending(e => e.id).FirstOrDefault();

                if (objTabulador != null && objTabulador.tabulador == 1)
                {
                    objCompaniaDTO.idTabuladorDet = 0;
                }

                var tblTabuladorID = _context.tblRH_TAB_TabuladoresDet.FirstOrDefault(x => x.id == objCompaniaDTO.idTabuladorDet.Value);

                if (objTabulador != null)
                {
                    #region SE VALIDA QUE EL NUEVO TAB FECHA CAMBIO, SEA MAYOR AL ULTIMO CAMBIO
                    DateTime fechaCambioTab = Convert.ToDateTime(objTabulador.fechaAplicaCambio);
                    DateTime fechaCambioUltimoTab = objSigoplanTabulador == null ? new DateTime() : Convert.ToDateTime(objSigoplanTabulador.fechaAplicaCambio);

                    //if (objSigoplanTabulador != null && fechaCambioUltimoTab >= fechaCambioTab)
                    //{
                    //    strMensajeError = "La fecha indicada debe ser mayor en base al ultimo tabulador capturado.";
                    //    throw new Exception(strMensajeError);
                    //}
                    #endregion

                    _context.tblRH_EK_Tabulador_Historial.Add(new tblRH_EK_Tabulador_Historial
                    {
                        clave_empleado = objEmpleadoDTO.clave_empleado,
                        tabulador = objTabulador.tabulador,
                        tabulador_anterior = objSigoplanTabulador != null ? (objSigoplanTabulador.tabulador ?? 0) : 0,
                        FK_Tabulador = tblTabuladorID != null ? tblTabuladorID.FK_Tabulador : 0,
                        FK_TabuladorDet = objCompaniaDTO.idTabuladorDet.HasValue ? objCompaniaDTO.idTabuladorDet.Value : 0,
                        fechaAplicaCambio = objTabulador.tabulador == 1 || (objTabulador.motivoCambio.HasValue && objTabulador.motivoCambio.Value == 4) ? objTabulador.fechaAplicaCambio ?? DateTime.Now : DateTime.Now,
                        fecha_cambio = DateTime.Now,
                        hora = DateTime.Now.TimeOfDay,
                        suma = (objTabulador.bono_de_zona + objTabulador.complemento + objTabulador.salario_base),
                        salario_base = objTabulador.salario_base,
                        complemento = objTabulador.complemento,
                        bono_zona = objTabulador.bono_de_zona,
                        motivoCambio = objTabulador.motivoCambio,
                        FK_UsuarioCreacion = vSesiones.sesionUsuarioDTO.id,
                        FK_UsuarioModificacion = vSesiones.sesionUsuarioDTO.id,
                        fechaCreacion = DateTime.Now,
                        fechaModificacion = DateTime.Now,
                        esActivo = true,
                    });
                    _context.SaveChanges();
                }
                #endregion
                #endregion

                #region SE ACTUALIZA LOS DATOS DEL EMPLEADO EN EK
                #region DATOS EMPLEADO
                var tblEmpleadoEK = _context.tblRH_EK_Empleados.FirstOrDefault(x => x.clave_empleado == objEmpleadoDTO.clave_empleado);

                //AÑADIR HISTORIAL CC CUANDO SE CAMBIE LA REQUISICION
                if (tblEmpleadoEK.cc_contable != objCompaniaDTO.cc_contable)
                {
                    #region CORREO CAMBIO
                    
                    var objCEHistorial = new tblRH_EK_Empl_CC_Historial();

                    objCEHistorial.clave_empleado = objEmpleadoDTO.clave_empleado;
                    objCEHistorial.cc = objCompaniaDTO.cc_contable;
                    objCEHistorial.cc_anterior = tblEmpleadoEK.cc_contable;
                    objCEHistorial.fecha_cambio = DateTime.Now;
                    _context.tblRH_EK_Empl_CC_Historial.Add(objCEHistorial);
                    _context.SaveChanges();


                    if (tblEmpleadoEK.estatus_empleado == "A")
                    {
                        
                        var puestoDesc = _context.tblRH_EK_Puestos.Where(x => x.puesto == objCompaniaDTO.puesto).Select(x => x.descripcion).FirstOrDefault();
                        var ccAnteriorDesc = _context.tblC_Nom_CatalogoCC.Where(x => x.cc == tblEmpleadoEK.cc_contable).Select(x => x.ccDescripcion).FirstOrDefault();
                        var ccNuevoDesc = _context.tblC_Nom_CatalogoCC.Where(x => x.cc == objCompaniaDTO.cc_contable).Select(x => x.ccDescripcion).FirstOrDefault();

                        //var objUltimaBaja = _context.tblRH_Baja_Registro.Where(e => e.registroActivo && e.numeroEmpleado == objEmpleadoDTO.clave_empleado && e.est_baja == "A").OrderByDescending(e => e.fechaBaja).FirstOrDefault();

                        //Enviar correo a Maricela y Jesús Gaytan cuando se haga un cambio de centro de costo.
                        var listaCorreos = new List<string> { "maricela.ortiz@construplan.com.mx", "jesus.gaytan@construplan.com.mx" };

#if DEBUG
                        //listaCorreos = new List<string> { "oscar.valencia@construplan.com.mx" };
                        listaCorreos = new List<string> { "miguel.buzani@construplan.com.mx" };
#endif

                        GlobalUtils.sendEmail(
                            string.Format(@"{0}: CAMBIO DE CENTRO DE COSTO [EMPLEADO: {1}]", PersonalUtilities.GetNombreEmpresa(), objEmpleadoDTO.clave_empleado),
                            string.Format(@"
                                CLAVE EMPLEADO: {0}<br/>
                                NOMBRE: {1}<br/>
                                PUESTO: {2}<br/>
                                CC ANTERIOR: {3}<br/>
                                CC NUEVO: {4}<br/>
                                FECHA ALTA: {5}<br/>
                                ",
                                objEmpleadoDTO.clave_empleado,
                                ((objEmpleadoDTO.nombre ?? "") + " " + (objEmpleadoDTO.ape_paterno ?? "") + " " + (objEmpleadoDTO.ape_materno ?? "")),
                                puestoDesc,
                                ("[" + tblEmpleadoEK.cc_contable + "] " + ccAnteriorDesc),
                                ("[" + objCompaniaDTO.cc_contable + "] " + ccNuevoDesc),
                                objEmpleadoDTO.fecha_alta.ToString("dd/MM/yyyy")
                                //(objUltimaBaja != null ? objUltimaBaja.fechaBaja.Value.ToString("dd/MM/yyyy") : "")
                            ),
                            listaCorreos
                        );
                    }

                    #endregion
                }

                tblEmpleadoEK.nombre = !string.IsNullOrEmpty(objEmpleadoDTO.nombre) ? objEmpleadoDTO.nombre.Trim().ToUpper() : null;
                tblEmpleadoEK.ape_paterno = !string.IsNullOrEmpty(objEmpleadoDTO.ape_paterno) ? objEmpleadoDTO.ape_paterno.Trim().ToUpper() : string.Empty;
                tblEmpleadoEK.ape_materno = !string.IsNullOrEmpty(objEmpleadoDTO.ape_materno) ? objEmpleadoDTO.ape_materno.Trim().ToUpper() : string.Empty;
                tblEmpleadoEK.fecha_nac = objEmpleadoDTO.fecha_nac;
                tblEmpleadoEK.clave_pais_nac = objEmpleadoDTO.clave_pais_nac;
                tblEmpleadoEK.clave_estado_nac = objEmpleadoDTO.clave_estado_nac;
                tblEmpleadoEK.clave_departamento_nac_PERU = objEmpleadoDTO.clave_departamento_nac_PERU;
                tblEmpleadoEK.clave_ciudad_nac = objEmpleadoDTO.clave_ciudad_nac;
                tblEmpleadoEK.localidad_nacimiento = !string.IsNullOrEmpty(objEmpleadoDTO.localidad_nacimiento) ? objEmpleadoDTO.localidad_nacimiento.Trim().ToUpper() : null;
                tblEmpleadoEK.fecha_antiguedad = objEmpleadoDTO.fecha_alta;
                tblEmpleadoEK.fecha_contrato = objContrato != null ? objContrato.fecha_aplicacion : tblEmpleadoEK.fecha_contrato;
                tblEmpleadoEK.sexo = !string.IsNullOrEmpty(objEmpleadoDTO.sexo) ? objEmpleadoDTO.sexo.Trim().ToUpper() : null;
                tblEmpleadoEK.rfc = !string.IsNullOrEmpty(objEmpleadoDTO.rfc) ? objEmpleadoDTO.rfc.Trim().ToUpper() : null;
                tblEmpleadoEK.CPCIF = !string.IsNullOrEmpty(objEmpleadoDTO.CPCIF) ? objEmpleadoDTO.CPCIF.Trim().ToUpper() : null;
                tblEmpleadoEK.curp = !string.IsNullOrEmpty(objEmpleadoDTO.curp) ? objEmpleadoDTO.curp.Trim().ToUpper() : null;
                tblEmpleadoEK.cuspp = !string.IsNullOrEmpty(objEmpleadoDTO.cuspp) ? objEmpleadoDTO.cuspp.Trim().ToUpper() : null;
                tblEmpleadoEK.requisicion = (int?)objCompaniaDTO.requisicion;
                tblEmpleadoEK.id_regpat = (int?)objCompaniaDTO.id_regpat;
                tblEmpleadoEK.cc_contable = objCompaniaDTO.cc_contable;
                tblEmpleadoEK.puesto = objCompaniaDTO.puesto;
                tblEmpleadoEK.idTabuladorDet = objCompaniaDTO.idTabuladorDet;
                
                //tblEmpleadoEK.duracion_contrato = (int?)objCompaniaDTO.duracion_contrato;
                if (objContrato != null)
                {
                    tblEmpleadoEK.duracion_contrato = objContrato.clave_duracion;
                    tblEmpleadoEK.fecha_fin = objContrato.fecha_fin;

                }
                tblEmpleadoEK.jefe_inmediato = (int?)objCompaniaDTO.jefe_inmediato;
                tblEmpleadoEK.autoriza = (int?)objCompaniaDTO.autoriza;
                tblEmpleadoEK.usuario_compras = (int?)objCompaniaDTO.usuario_compras;
                tblEmpleadoEK.sindicato = !objCompaniaDTO.chkSindicato ? "N" : "S";
                tblEmpleadoEK.clave_depto = objCompaniaDTO.clave_depto > 0 ? objCompaniaDTO.clave_depto.ToString() : 0.ToString();
                tblEmpleadoEK.nss = !string.IsNullOrEmpty(objCompaniaDTO.nss) ? objCompaniaDTO.nss : null;
                tblEmpleadoEK.unidad_medica = GetUnidadMedica(objGenContactoDTO.codigo_postal);
                tblEmpleadoEK.tipo_formula_imss = !string.IsNullOrEmpty(objCompaniaDTO.tipo_formula_imss) ? objCompaniaDTO.tipo_formula_imss : null;
                tblEmpleadoEK.desc_puesto = !string.IsNullOrEmpty(objCompaniaDTO.actividades) ? objCompaniaDTO.actividades.Trim().ToUpper() : null;
                tblEmpleadoEK.banco = objEmpleadoDTO.bancoNomina;
                tblEmpleadoEK.num_cta_pago = objEmpleadoDTO.num_cta_pago;
                tblEmpleadoEK.num_cta_fondo_aho = objEmpleadoDTO.num_cta_fondo_aho;
                tblEmpleadoEK.tipo_nomina = objEmpleadoDTO.tipo_nomina;
                tblEmpleadoEK.tabulador = objEmpleadoDTO.tabulador;
                tblEmpleadoEK.desc_puesto = objEmpleadoDTO.desc_puesto;
                if (objEmpleadoDTO.esReingresoEmpleado)
                {
                    tblEmpleadoEK.estatus_empleado = "P";
                }
                tblEmpleadoEK.fechaModificacion = DateTime.Now;
                tblEmpleadoEK.idUsuarioModificacion = vSesiones.sesionUsuarioDTO.id;
                tblEmpleadoEK.estatusEnvioCorreo = objEmpleadoDTO.estatusEnvioCorreo ? (int)EstatusEnvioCorreoEnum.pendientePorEnviar : (int)EstatusEnvioCorreoEnum.noPendientePorEnviar;
                _context.SaveChanges();

                #region se valida fechas de dias de ingresos permitidas
                var fechaActual = DateTime.Now;

                var periodosPermitidos = _context.tblRH_REC_DiasPermitidos.FirstOrDefault(x => x.registroActivo);
                if (periodosPermitidos != null)
                {
                    var fechaMin = fechaActual.AddDays(-periodosPermitidos.anteriores);
                    var fechaMax = fechaActual.AddDays(periodosPermitidos.posteriores);

                    if (objEmpleadoDTO.esReingresoEmpleado)
                    {
                        if (objEmpleadoDTO.fecha_alta.Date >= fechaMin.Date && objEmpleadoDTO.fecha_alta.Date <= fechaMax.Date)
                        {

                        }
                        else
                        {
                            throw new Exception("La fecha de ingreso tiene que estar entre: " + fechaMin.ToShortDateString() + " y " + fechaMax.ToShortDateString());
                        }
                    }
                    else
                    {
                        if (_context.tblP_AccionesVistatblP_Usuario.Any(x => x.tblP_AccionesVista_id == 4031 && x.tblP_Usuario_id == vSesiones.sesionUsuarioDTO.id) || vSesiones.sesionUsuarioDTO.idPerfil == (int)PerfilUsuarioEnum.ADMINISTRADOR ||
                            tblEmpleadoEK.fecha_antiguedad == objEmpleadoDTO.fecha_alta)
                        {

                        }
                        else
                        {
                            throw new Exception("La fecha de ingreso tiene que estar entre: " + fechaMin.ToShortDateString() + " y " + fechaMax.ToShortDateString());
                        }
                    }
                }
                else
                {
                    if (objEmpleadoDTO.fecha_alta.Date != fechaActual.Date)
                    {
                        throw new Exception("La fecha de ingreso tiene que ser la actual: " + fechaActual.ToShortDateString());
                    }
                }
                #endregion
                #endregion

                #region REINGRESO EMPLEADO
                if (objEmpleadoDTO.esReingresoEmpleado)
                {
                    if (objContrato != null)
                    {
                        var recontratacion = new tblRH_EK_Empl_Recontratacion();
                        recontratacion.clave_empleado = objEmpleadoDTO.clave_empleado;
                        recontratacion.cc = objCompaniaDTO.cc_contable;
                        recontratacion.tabulador = objEmpleadoDTO.tabulador;
                        recontratacion.puesto = objCompaniaDTO.puesto;
                        recontratacion.duracion_contrato = objContrato.clave_duracion;
                        recontratacion.fecha_reingreso = DateTime.Now;
                        recontratacion.fechaCreacion = DateTime.Now;
                        recontratacion.fechaModificacion = DateTime.Now;
                        recontratacion.idUsuarioCreacion = vSesiones.sesionUsuarioDTO.id;
                        recontratacion.idUsuarioModificacion = vSesiones.sesionUsuarioDTO.id;
                        recontratacion.esActivo = true;
                        _context.tblRH_EK_Empl_Recontratacion.Add(recontratacion);
                        _context.SaveChanges();
                    }
                    else
                    {
                        throw new Exception("Cuando se esta realizando una recontratación es necesario capturar la información del nuevo contrato");
                    }
                }
                #endregion

                #region GENERALES Y CONTACTO - BENEFICIARIO - EN CASO DE EMERGENCIA
                var empGrales = _context.tblRH_EK_Empl_Grales.FirstOrDefault(x => x.clave_empleado == objEmpleadoDTO.clave_empleado);
                empGrales.estado_civil = !string.IsNullOrEmpty(objGenContactoDTO.estado_civil) ? objGenContactoDTO.estado_civil.Trim() : string.Empty;
                empGrales.fecha_planta = null;
                empGrales.ocupacion = !string.IsNullOrEmpty(objGenContactoDTO.ocupacion) ? objGenContactoDTO.ocupacion.Trim().ToUpper() : string.Empty;
                empGrales.ocupacion_abrev = !string.IsNullOrEmpty(objGenContactoDTO.ocupacion_abrev) ? objGenContactoDTO.ocupacion_abrev.Trim().ToUpper() : string.Empty;
                empGrales.num_cred_elector = !string.IsNullOrEmpty(objGenContactoDTO.num_cred_elector) ? objGenContactoDTO.num_cred_elector.Trim().ToUpper() : string.Empty;
                empGrales.num_dni = !string.IsNullOrEmpty(objGenContactoDTO.num_dni) ? objGenContactoDTO.num_dni.Trim().ToUpper() : string.Empty;
                empGrales.cedula_cuidadania = !string.IsNullOrEmpty(objGenContactoDTO.cedula_cuidadania) ? objGenContactoDTO.cedula_cuidadania.Trim().ToUpper() : string.Empty;
                empGrales.domicilio = !string.IsNullOrEmpty(objGenContactoDTO.domicilio) ? objGenContactoDTO.domicilio.Trim().ToUpper() : string.Empty;
                empGrales.numero_exterior = !string.IsNullOrEmpty(objGenContactoDTO.numero_exterior) ? objGenContactoDTO.numero_exterior.Trim().ToUpper() : string.Empty;
                empGrales.numero_interior = !string.IsNullOrEmpty(objGenContactoDTO.numero_interior) ? objGenContactoDTO.numero_interior.Trim().ToUpper() : string.Empty;
                empGrales.colonia = !string.IsNullOrEmpty(objGenContactoDTO.colonia) ? objGenContactoDTO.colonia.Trim().ToUpper() : string.Empty;
                empGrales.pais_dom = objGenContactoDTO.pais_dom > 0 ? objGenContactoDTO.pais_dom : 0;
                empGrales.estado_dom = objGenContactoDTO.estado_dom > 0 ? objGenContactoDTO.estado_dom : 0;
                empGrales.cuidado_dom = objGenContactoDTO.ciudad_dom > 0 ? objGenContactoDTO.ciudad_dom : 0;
                empGrales.codigo_postal = objGenContactoDTO.codigo_postal.ToString();
                empGrales.tel_casa = !string.IsNullOrEmpty(objGenContactoDTO.tel_casa) ? objGenContactoDTO.tel_casa.Trim().ToUpper() : string.Empty;
                empGrales.tel_cel = !string.IsNullOrEmpty(objGenContactoDTO.tel_cel) ? objGenContactoDTO.tel_cel.Trim().ToUpper() : string.Empty;
                empGrales.email = !string.IsNullOrEmpty(objGenContactoDTO.email) ? objGenContactoDTO.email.Trim().ToUpper() : string.Empty;
                empGrales.tipo_casa = objGenContactoDTO.tipo_casa;
                empGrales.tipo_sangre = !string.IsNullOrEmpty(objGenContactoDTO.tipo_sangre) ? objGenContactoDTO.tipo_sangre.Trim().ToUpper() : string.Empty;
                empGrales.alergias = !string.IsNullOrEmpty(objGenContactoDTO.alergias) ? objGenContactoDTO.alergias.Trim().ToUpper() : string.Empty;
                empGrales.parentesco_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.parentesco_ben) ? objBeneficiariosDTO.parentesco_ben.Trim().ToUpper() : string.Empty;
                empGrales.fecha_nac_ben = objBeneficiariosDTO.fecha_nac_ben.Year > 1900 ? objBeneficiariosDTO.fecha_nac_ben : (DateTime?)null;
                empGrales.codigo_postal_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.codigo_postal_ben) ? objBeneficiariosDTO.codigo_postal_ben.Trim().ToUpper() : string.Empty;
                empGrales.parterno_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.paterno_ben) ? objBeneficiariosDTO.paterno_ben.Trim().ToUpper() : string.Empty;
                empGrales.materno_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.materno_ben) ? objBeneficiariosDTO.materno_ben.Trim().ToUpper() : string.Empty;
                empGrales.nombre_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.nombre_ben) ? objBeneficiariosDTO.nombre_ben.Trim().ToUpper() : string.Empty;
                empGrales.pais_ben = objBeneficiariosDTO.pais_ben > 0 ? objBeneficiariosDTO.pais_ben : 0;
                empGrales.estado_ben = objBeneficiariosDTO.estado_ben > 0 ? objBeneficiariosDTO.estado_ben : 0;
                empGrales.cuidad_ben = objBeneficiariosDTO.ciudad_ben > 0 ? objBeneficiariosDTO.ciudad_ben : 0;
                empGrales.colonia_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.colonia_ben) ? objBeneficiariosDTO.colonia_ben.Trim().ToUpper() : string.Empty;
                empGrales.domicilio_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.domicilio_ben) ? objBeneficiariosDTO.domicilio_ben.Trim().ToUpper() : string.Empty;
                empGrales.num_ext_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.num_ext_ben) ? objBeneficiariosDTO.num_ext_ben.Trim().ToUpper() : string.Empty;
                empGrales.num_int_ben = !string.IsNullOrEmpty(objBeneficiariosDTO.num_int_ben) ? objBeneficiariosDTO.num_int_ben.Trim().ToUpper() : string.Empty;
                empGrales.en_accidente_nombre = !string.IsNullOrEmpty(objContEmergenciasDTO.en_accidente_nombre) ? objContEmergenciasDTO.en_accidente_nombre.Trim().ToUpper() : string.Empty;
                empGrales.en_accidente_telefono = !string.IsNullOrEmpty(objContEmergenciasDTO.en_accidente_telefono) ? objContEmergenciasDTO.en_accidente_telefono.Trim().ToUpper() : string.Empty;
                empGrales.en_accidente_direccion = !string.IsNullOrEmpty(objContEmergenciasDTO.en_accidente_direccion) ? objContEmergenciasDTO.en_accidente_direccion.Trim().ToUpper() : string.Empty;
                empGrales.ben_num_dni = !string.IsNullOrEmpty(objBeneficiariosDTO.ben_num_dni) ? objBeneficiariosDTO.ben_num_dni.Trim().ToUpper() : string.Empty;
                empGrales.PERU_departamento_ben = objBeneficiariosDTO.PERU_departamento_ben != null ? objBeneficiariosDTO.PERU_departamento_ben : 0;
                empGrales.PERU_departamento_dom = objGenContactoDTO.PERU_departamento_dom != null ? objGenContactoDTO.PERU_departamento_dom : 0;
                empGrales.fechaModificacion = DateTime.Now;
                empGrales.idUsuarioModificacion = vSesiones.sesionUsuarioDTO.id;
                _context.SaveChanges();
                #endregion

                #region UNIFORMES EK
                var objSigoUniforme = _context.tblRH_EK_Empl_Complementaria.FirstOrDefault(x => x.clave_empleado == objEmpleadoDTO.clave_empleado);
                if (objSigoUniforme != null && objUniforme != null)
                {
                    objSigoUniforme.calzado = !string.IsNullOrEmpty(objUniforme.calzado) ? objUniforme.calzado.Trim().ToUpper() : string.Empty;
                    objSigoUniforme.camisa = !string.IsNullOrEmpty(objUniforme.camisa) ? objUniforme.camisa.Trim().ToUpper() : string.Empty;
                    objSigoUniforme.pantalon = !string.IsNullOrEmpty(objUniforme.pantalon) ? objUniforme.pantalon.Trim().ToUpper() : string.Empty;
                    objSigoUniforme.overol = !string.IsNullOrEmpty(objUniforme.overol) ? objUniforme.overol.Trim().ToUpper() : string.Empty;
                    objSigoUniforme.fecha_entrega = null;
                    objSigoUniforme.entrego_calzado = objUniforme.entrego_calzado;
                    objSigoUniforme.entrego_camisa = objUniforme.entrego_camisa;
                    objSigoUniforme.entrego_pantalon = objUniforme.entrego_pantalon;
                    objSigoUniforme.entregro_overol = objUniforme.entrego_overol;
                    objSigoUniforme.comentarios = !string.IsNullOrEmpty(objUniforme.comentarios) ? objUniforme.comentarios.Trim().ToUpper() : string.Empty;
                    objSigoUniforme.uniforme_dama = !string.IsNullOrEmpty(objUniforme.uniforme_dama) ? objUniforme.uniforme_dama.Trim().ToUpper() : string.Empty;
                    objSigoUniforme.entrego_uniforme_dama = objUniforme.entrego_uniforme_dama;
                    objSigoUniforme.otros = !string.IsNullOrEmpty(objUniforme.otros) ? objUniforme.otros.Trim().ToUpper() : string.Empty;
                    objUniforme.fechaModificacion = DateTime.Now;
                    objUniforme.idUsuarioModificacion = vSesiones.sesionUsuarioDTO.id;
                    _context.SaveChanges();
                }
                else if (objUniforme != null)
                {
                    var empUniforme = new tblRH_EK_Empl_Complementaria();
                    empUniforme.clave_empleado = objEmpleadoDTO.clave_empleado;
                    empUniforme.calzado = !string.IsNullOrEmpty(objUniforme.calzado) ? objUniforme.calzado.Trim().ToUpper() : string.Empty;
                    empUniforme.camisa = !string.IsNullOrEmpty(objUniforme.camisa) ? objUniforme.camisa.Trim().ToUpper() : string.Empty;
                    empUniforme.pantalon = !string.IsNullOrEmpty(objUniforme.pantalon) ? objUniforme.pantalon.Trim().ToUpper() : string.Empty;
                    empUniforme.overol = !string.IsNullOrEmpty(objUniforme.overol) ? objUniforme.overol.Trim().ToUpper() : string.Empty;
                    empUniforme.fecha_entrega = null;
                    empUniforme.entrego_calzado = objUniforme.entrego_calzado;
                    empUniforme.entrego_camisa = objUniforme.entrego_camisa;
                    empUniforme.entrego_pantalon = objUniforme.entrego_pantalon;
                    empUniforme.entregro_overol = objUniforme.entrego_overol;
                    empUniforme.comentarios = !string.IsNullOrEmpty(objUniforme.comentarios) ? objUniforme.comentarios.Trim().ToUpper() : string.Empty;
                    empUniforme.uniforme_dama = !string.IsNullOrEmpty(objUniforme.uniforme_dama) ? objUniforme.uniforme_dama.Trim().ToUpper() : string.Empty;
                    empUniforme.entrego_uniforme_dama = objUniforme.entrego_uniforme_dama;
                    empUniforme.otros = !string.IsNullOrEmpty(objUniforme.otros) ? objUniforme.otros.Trim().ToUpper() : string.Empty;
                    empUniforme.fechaCreacion = DateTime.Now;
                    empUniforme.idUsuarioCreacion = vSesiones.sesionUsuarioDTO.id;
                    empUniforme.esActivo = true;
                    _context.tblRH_EK_Empl_Complementaria.Add(empUniforme);
                    _context.SaveChanges();
                }
                #endregion

                #region FAMILIAR EK
                if (lstFamiliares != null)
                {
                    foreach (var objFamiliarDTO in lstFamiliares)
                    {
                        int nextIdFam = GetIdFamiliarDisponible();
                        var empFam = new tblRH_EK_Empl_Familia();
                        empFam.clave_empleado = objEmpleadoDTO.clave_empleado;
                        empFam.id_familia = nextIdFam;
                        empFam.nombre = !string.IsNullOrEmpty(objFamiliarDTO.nombre) ? objFamiliarDTO.nombre.Trim().ToUpper() : string.Empty;
                        empFam.apellido_paterno = !string.IsNullOrEmpty(objFamiliarDTO.apellido_paterno) ? objFamiliarDTO.apellido_paterno.Trim().ToUpper() : string.Empty;
                        empFam.apellido_materno = !string.IsNullOrEmpty(objFamiliarDTO.apellido_materno) ? objFamiliarDTO.apellido_materno.Trim().ToUpper() : string.Empty;
                        empFam.fecha_de_nacimiento = objFamiliarDTO.fecha_de_nacimiento;
                        empFam.parentesco = objFamiliarDTO.parentesco;
                        empFam.grado_de_estudios = !string.IsNullOrEmpty(objFamiliarDTO.grado_de_estudios) ? objFamiliarDTO.grado_de_estudios.Trim().ToUpper() : string.Empty;
                        empFam.estado_civil = !string.IsNullOrEmpty(objFamiliarDTO.estado_civil) ? objFamiliarDTO.estado_civil.Trim() : string.Empty;
                        empFam.estudia = !objFamiliarDTO.esEstudia ? "N" : "S";
                        empFam.genero = objFamiliarDTO.genero;
                        empFam.vive = !objFamiliarDTO.esVive ? "N" : "S";
                        empFam.fecha_matrimonio = null;
                        empFam.beneficiario = !objFamiliarDTO.esBeneficiario ? "N" : "S";
                        empFam.trabaja = !objFamiliarDTO.esTrabaja ? "N" : "S";
                        empFam.comentarios = !string.IsNullOrEmpty(objFamiliarDTO.comentarios) ? objFamiliarDTO.comentarios.Trim().ToUpper() : string.Empty;
                        empFam.fechaCreacion = DateTime.Now;
                        empFam.idUsuarioCreacion = vSesiones.sesionUsuarioDTO.id;
                        empFam.esActivo = true;
                        empFam.num_dni = objFamiliarDTO.num_dni;
                        empFam.cedula_cuidadania = objFamiliarDTO.cedula_cuidadania;
                        _context.tblRH_EK_Empl_Familia.Add(empFam);
                        _context.SaveChanges();
                    }
                }
                #endregion
                #endregion

                #region UPDATE DATOS PERU
                using (var dbStartSoft = new MainContextPeruStarSoftPLCONSTRU())// MIGRAR
                {
                    if ((MainContextEnum)vSesiones.sesionEmpresaActual == MainContextEnum.PERU)
                    {
                        decimal APOROBLI = 0;
                        decimal TOPESEGURO = 0;
                        decimal COMISIONRA = 0;

                        if (!string.IsNullOrEmpty(objDatosPeru.codafp))
                        {
                            var objAFPS = dbStartSoft.AFPS.FirstOrDefault(e => e.CODAFP == objDatosPeru.codafp);// MIGRAR
                            APOROBLI = objAFPS.APOROBLI;
                            TOPESEGURO = objAFPS.TOPESEGURO;
                            COMISIONRA = objAFPS.COMISIONRA;
                        }

                        var objCEDatosPeru = _context.tblRH_REC_InfoEmpleadoPeru.FirstOrDefault(e => e.registroActivo && e.claveEmpleado == objEmpleadoDTO.clave_empleado);

                        if (objCEDatosPeru != null)
                        {
                            #region UPDATE

                            objCEDatosPeru.claveEmpleado = objEmpleadoDTO.clave_empleado;
                            objCEDatosPeru.codafp = objDatosPeru.codafp;
                            objCEDatosPeru.aporobli = APOROBLI;
                            objCEDatosPeru.topeseguro = TOPESEGURO;
                            objCEDatosPeru.comisionra = COMISIONRA;
                            objCEDatosPeru.ctbasico = objDatosPeru.ctbasico;
                            objCEDatosPeru.basico = objDatosPeru.basico;
                            objCEDatosPeru.asigfam = objDatosPeru.asigfam;
                            objCEDatosPeru.fondopens = objDatosPeru.codafp;
                            objCEDatosPeru.ubigeo = "";
                            objCEDatosPeru.tipotrab = objDatosPeru.tipotrab;
                            objCEDatosPeru.situacion = objDatosPeru.situacion;
                            objCEDatosPeru.essaludvida = objDatosPeru.essaludvida ? 1 : 0;
                            objCEDatosPeru.ruceps = objDatosPeru.ruceps;
                            objCEDatosPeru.nopdt = objDatosPeru.nopdt ? 1 : 0;
                            objCEDatosPeru.opcion01 = objDatosPeru.opcion01 ? 1 : 0;
                            objCEDatosPeru.opcion02 = objDatosPeru.opcion02 ? 1 : 0;
                            objCEDatosPeru.opciona = objDatosPeru.opciona;
                            objCEDatosPeru.opcionb = objDatosPeru.opcionb;
                            objCEDatosPeru.nocalculo = objDatosPeru.nocalculo;
                            objCEDatosPeru.afectoquinta = objDatosPeru.afectoquinta;
                            objCEDatosPeru.afiliado_eps = objDatosPeru.afiliado_eps;
                            objCEDatosPeru.codsctr = objDatosPeru.codsctr;
                            objCEDatosPeru.sctr_pension = objDatosPeru.sctr_pension;
                            objCEDatosPeru.sctr_salud = objDatosPeru.sctr_salud;
                            objCEDatosPeru.es_comision_mixta = objDatosPeru.es_comision_mixta;
                            objCEDatosPeru.factor_familiar_eps = objDatosPeru.factor_familiar_eps;
                            objCEDatosPeru.trabajador_regimen = objDatosPeru.trabajador_regimen;
                            objCEDatosPeru.trabajador_jornada = objDatosPeru.trabajador_jornada;
                            objCEDatosPeru.trabajador_nocturno = objDatosPeru.trabajador_nocturno;
                            objCEDatosPeru.otros_ingresos = objDatosPeru.otros_ingresos;
                            objCEDatosPeru.sindicalizado = objDatosPeru.sindicalizado;
                            objCEDatosPeru.discapacitado = objDatosPeru.discapacitado;
                            objCEDatosPeru.domiciliado = objDatosPeru.domiciliado;
                            objCEDatosPeru.aseg_pension = objDatosPeru.aseg_pension;
                            objCEDatosPeru.rentas_exoneradas = objDatosPeru.rentas_exoneradas;
                            objCEDatosPeru.bancocts = objDatosPeru.bancocts;
                            objCEDatosPeru.ctacts = objDatosPeru.ctacts;
                            objCEDatosPeru.regimen_laboral = objDatosPeru.regimen_laboral;
                            objCEDatosPeru.fechaRegistro = DateTime.Now;
                            objCEDatosPeru.fechaModificacion = DateTime.Now;
                            objCEDatosPeru.usuarioRegistroId = vSesiones.sesionUsuarioDTO.id;
                            objCEDatosPeru.usuarioModificacionId = vSesiones.sesionUsuarioDTO.id;
                            objCEDatosPeru.registroActivo = true;

                            _context.SaveChanges();
                            #endregion
                        }
                        else
                        {
                            #region ADD
                            objCEDatosPeru = new tblRH_REC_InfoEmpleadoPeru();

                            objCEDatosPeru.claveEmpleado = objEmpleadoDTO.clave_empleado;
                            objCEDatosPeru.codafp = objDatosPeru.codafp;
                            objCEDatosPeru.aporobli = APOROBLI;
                            objCEDatosPeru.topeseguro = TOPESEGURO;
                            objCEDatosPeru.comisionra = COMISIONRA;
                            objCEDatosPeru.ctbasico = objDatosPeru.ctbasico;
                            objCEDatosPeru.basico = objDatosPeru.basico;
                            objCEDatosPeru.asigfam = objDatosPeru.asigfam;
                            objCEDatosPeru.fondopens = objDatosPeru.codafp;
                            objCEDatosPeru.ubigeo = "";
                            objCEDatosPeru.tipotrab = objDatosPeru.tipotrab;
                            objCEDatosPeru.situacion = objDatosPeru.situacion;
                            objCEDatosPeru.essaludvida = objDatosPeru.essaludvida ? 1 : 0;
                            objCEDatosPeru.ruceps = objDatosPeru.ruceps;
                            objCEDatosPeru.nopdt = objDatosPeru.nopdt ? 1 : 0;
                            objCEDatosPeru.opcion01 = objDatosPeru.opcion01 ? 1 : 0;
                            objCEDatosPeru.opcion02 = objDatosPeru.opcion02 ? 1 : 0;
                            objCEDatosPeru.opciona = objDatosPeru.opciona;
                            objCEDatosPeru.opcionb = objDatosPeru.opcionb;
                            objCEDatosPeru.nocalculo = objDatosPeru.nocalculo;
                            objCEDatosPeru.afectoquinta = objDatosPeru.afectoquinta;
                            objCEDatosPeru.afiliado_eps = objDatosPeru.afiliado_eps;
                            objCEDatosPeru.codsctr = objDatosPeru.codsctr;
                            objCEDatosPeru.sctr_pension = objDatosPeru.sctr_pension;
                            objCEDatosPeru.sctr_salud = objDatosPeru.sctr_salud;
                            objCEDatosPeru.es_comision_mixta = objDatosPeru.es_comision_mixta;
                            objCEDatosPeru.factor_familiar_eps = objDatosPeru.factor_familiar_eps;
                            objCEDatosPeru.trabajador_regimen = objDatosPeru.trabajador_regimen;
                            objCEDatosPeru.trabajador_jornada = objDatosPeru.trabajador_jornada;
                            objCEDatosPeru.trabajador_nocturno = objDatosPeru.trabajador_nocturno;
                            objCEDatosPeru.otros_ingresos = objDatosPeru.otros_ingresos;
                            objCEDatosPeru.sindicalizado = objDatosPeru.sindicalizado;
                            objCEDatosPeru.discapacitado = objDatosPeru.discapacitado;
                            objCEDatosPeru.domiciliado = objDatosPeru.domiciliado;
                            objCEDatosPeru.aseg_pension = objDatosPeru.aseg_pension;
                            objCEDatosPeru.rentas_exoneradas = objDatosPeru.rentas_exoneradas;
                            objCEDatosPeru.bancocts = objDatosPeru.bancocts;
                            objCEDatosPeru.ctacts = objDatosPeru.ctacts;
                            objCEDatosPeru.regimen_laboral = objDatosPeru.regimen_laboral;
                            objCEDatosPeru.fechaRegistro = DateTime.Now;
                            objCEDatosPeru.fechaModificacion = DateTime.Now;
                            objCEDatosPeru.usuarioRegistroId = vSesiones.sesionUsuarioDTO.id;
                            objCEDatosPeru.usuarioModificacionId = vSesiones.sesionUsuarioDTO.id;
                            objCEDatosPeru.registroActivo = true;

                            _context.tblRH_REC_InfoEmpleadoPeru.Add(objCEDatosPeru);
                            _context.SaveChanges();
                            #endregion
                        }
                    }
                }
                #endregion

                #region MIGRADO EK (SIGOPLAN)

                var contratoAnterior = _context.tblRH_EK_Contratos_Empleados.Where(x => x.clave_empleado == objEmpleadoDTO.clave_empleado && x.esActivo.HasValue && x.esActivo.Value).OrderByDescending(x => x.id_contrato_empleado).FirstOrDefault();
                var contratoIdNuevo = _context.tblRH_EK_Contratos_Empleados.OrderByDescending(x => x.id_contrato_empleado).FirstOrDefault();

                if (objContrato != null)
                {
                    _context.tblRH_EK_Contratos_Empleados.Add(new tblRH_EK_Contratos_Empleados
                    {
                        id_contrato_empleado = contratoIdNuevo != null ? contratoIdNuevo.id_contrato_empleado + 1 : 1,
                        clave_empleado = objEmpleadoDTO.clave_empleado,
                        clave_duracion = objContrato.clave_duracion,
                        fecha = objContrato.fecha,
                        fecha_aplicacion = objContrato.fecha_aplicacion,
                        clave_duracion_ant = contratoAnterior != null ? contratoAnterior.clave_duracion : 0,
                        fechaCreacion = DateTime.Now,
                        fechaModificacion = DateTime.Now,
                        fecha_fin = objContrato.fecha_fin ?? DateTime.Now,
                        idUsuarioCreacion = vSesiones.sesionUsuarioDTO.id,
                        idUsuarioModificacion = vSesiones.sesionUsuarioDTO.id,
                        esActivo = true,
                    });
                    _context.SaveChanges();
                }
                #endregion

                #region CORREO CUANDO ES CAMBIO
                if (objTabulador != null)
                {
                    if (objTabulador.motivoCambio.HasValue && objTabulador.motivoCambio.Value == 4)
                    {
                        var correos = new List<string>();

                        string descRegPat = "";

                        if (objCompaniaDTO.id_regpat > 0)
                        {
                            var objRegPat = _context.tblRH_EK_Registros_Patronales.FirstOrDefault(e => e.clave_reg_pat == objCompaniaDTO.id_regpat);
                            if (objRegPat != null)
                            {
                                descRegPat = objRegPat.nombre_corto;
                            }
                        }

                        var ccCambio = _context.tblC_Nom_CatalogoCC.FirstOrDefault(x => x.cc == objCompaniaDTO.cc_contable);
                        var puestoCambio = _context.tblRH_EK_Puestos.FirstOrDefault(x => x.puesto == objCompaniaDTO.puesto);

                        var asunto = @"CAMBIO en el CC " + (ccCambio != null ? ccCambio.cc + " " + ccCambio.ccDescripcion : "") + "(" + descRegPat + ")";
                        var mensaje = string.Format(@"
                            El siguiente empleado ha sido modificado: <br/><br/>" +
                                                                                 "{0} – {1}, para el centro de costos: {2} – {3}, con el puesto de: {4}", objEmpleadoDTO.clave_empleado, (objEmpleadoDTO.ape_paterno + " " + objEmpleadoDTO.ape_materno + " " + objEmpleadoDTO.nombre), ccCambio != null ? ccCambio.cc : "", ccCambio != null ? ccCambio.ccDescripcion.Trim() : "", puestoCambio.descripcion);

                        var listaUsuariosCorreos = _context.tblRH_REC_Notificantes_Tabulador.Where(x => x.registroActivo).Select(x => x.idUsuario).ToList();

                        foreach (var usu in listaUsuariosCorreos)
                        {
                            correos.Add(_context.tblP_Usuario.FirstOrDefault(x => x.id == usu).correo);
                        }

#if DEBUG
                        correos = new List<string> { "miguel.buzani@construplan.com.mx" };
#endif

                        GlobalUtils.sendEmail(string.Format("{0}: {1}", PersonalUtilities.GetNombreEmpresa(), asunto), mensaje, correos);
                    }
                }

                #endregion

                return true;
            }

            throw new Exception(strMensajeError);
        }

        public Dictionary<string, object> EnviarCorreos(List<int> lstClaveEmpleado)
        {
            resultado = new Dictionary<string, object>();
            using (var transaccion = _context.Database.BeginTransaction())
            {
                try
                {
                    #region VALIDACIONES
                    if (lstClaveEmpleado.Count() <= 0) { throw new Exception("Es necesario seleccionar al menos un empleado para notificar."); }
                    #endregion

                    #region SE ENVIA CORREO A LOS EMPLEADOS QUE TENGAN EL ESTATUS 2 (PENDIENTE POR ENVIAR CORREO)
                    List<string> lstCorreos = new List<string>();

                    // SE OBTIENE LISTADO DE EMPLEADOS QUE CUENTAN CON EL ESTATUS PENDIENTE
                    List<tblRH_EK_Empleados> lstEmpleadosPendientePorEnviarCorreo = _context.tblRH_EK_Empleados.Where(w => w.estatus_empleado == "P" && lstClaveEmpleado.Contains(w.clave_empleado) && w.esActivo).ToList();

                    // SE OBTIENE ID DE LOS USUARIOS DEL TABULADOR UNA VEZ
                    //List<int> lstNotificantesTabulador = _context.tblRH_REC_Notificantes_Tabulador.Where(w => w.registroActivo).Select(s => s.idUsuario).ToList();

                    foreach (var item in lstEmpleadosPendientePorEnviarCorreo)
                    {

                        List<int> lstNotificantes = _context.tblRH_Notis_RelConceptoUsuario.
                            Where(e => e.cc == item.cc_contable && (e.idConcepto == (int)ConceptosNotificantesEnum.Altas
                                || e.idConcepto == (int)ConceptosNotificantesEnum.CH)).
                            Select(e => e.idUsuario).ToList();

                        foreach (var usu in lstNotificantes)
                        {
                            lstCorreos.Add(_context.tblP_Usuario.FirstOrDefault(x => x.id == usu).correo);
                        }

                        List<string> lstCorreoGenerales = _context.tblRH_Notis_RelConceptoCorreo.
                            Where(e => (e.cc == "*" || e.cc == item.cc_contable) && (e.idConcepto == (int)ConceptosNotificantesEnum.Altas
                                || e.idConcepto == (int)ConceptosNotificantesEnum.CH)).
                            Select(e => e.correo).ToList();

                        foreach (var correo in lstCorreoGenerales)
                        {
                            lstCorreos.Add(correo);
                        }

                        // SE OBTIENE DESCRIPCIÓN REG PAT
                        string descRegPat = string.Empty;
                        if (item.id_regpat > 0)
                        {
                            tblRH_EK_Registros_Patronales objRegPat = _context.tblRH_EK_Registros_Patronales.Where(w => w.clave_reg_pat == item.id_regpat).FirstOrDefault();
                            if (objRegPat != null)
                                descRegPat = objRegPat.nombre_corto.Trim();
                        }

                        // SE OBTIEN PUESTO DESCRIPCIÓN
                        tblRH_EK_Puestos objPuesto = _context.tblRH_EK_Puestos.Where(w => w.puesto == item.puesto).FirstOrDefault();
                        if (objPuesto == null)
                            throw new Exception("Ocurrió un error al obtener la descripción del puesto.");

                        // SE OBTIENE OBJETO CC
                        var objCC = _context.tblC_Nom_CatalogoCC.Where(w => w.cc == item.cc_contable).FirstOrDefault();
                        if (objCC == null)
                            throw new Exception("Ocurrió un error al obtener el CC.");

                        string asunto = string.Format("SOLICITUD DE ALTA en el CC [{0}] {1} ({2})",
                                                        !string.IsNullOrEmpty(objCC.cc) ? objCC.cc.Trim().ToUpper() : string.Empty,
                                                        !string.IsNullOrEmpty(objCC.ccDescripcion) ? objCC.ccDescripcion : string.Empty, descRegPat);

                        string mensaje = string.Format("El siguiente empleado necesita autorización para ser dado de alta: <br/><br/>" +
                                                        "{0} – {1}, para el centro de costos: {2} – {3}, con el puesto de: {4}<p>Notificado por: {5}</p>",
                                                            item.clave_empleado,
                                                            (item.ape_paterno + " " + item.ape_materno + " " + item.nombre),
                                                            !string.IsNullOrEmpty(objCC.cc) ? objCC.cc.Trim().ToUpper() : string.Empty,
                                                            !string.IsNullOrEmpty(objCC.ccDescripcion) ? objCC.ccDescripcion : string.Empty,
                                                            !string.IsNullOrEmpty(objPuesto.descripcion) ? objPuesto.descripcion.Trim().ToUpper() : string.Empty,
                                                            vSesiones.sesionUsuarioDTO.correo);

                        lstCorreos.Add("diana.alvarez@construplan.com.mx");
                        lstCorreos.Add("keyla.vasquez@construplan.com.mx");

                        lstCorreos = lstCorreos.Distinct().ToList(); // SE ELIMINA LOS CORREOS DUPLICADOS

#if DEBUG
                        lstCorreos = new List<string> { "omar.nunez@construplan.com.mx" };
#endif
                        GlobalUtils.sendEmail(string.Format("{0}: {1}", PersonalUtilities.GetNombreEmpresa(), asunto), mensaje, lstCorreos);
                    }

                    transaccion.Commit();

                    resultado.Add(SUCCESS, true);
                    resultado.Add(MESSAGE, "Se ha notificado con éxito");
                    #endregion
                }
                catch (Exception e)
                {
                    transaccion.Rollback();

                    var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                    resultado.Add(MESSAGE, e.Message);
                    resultado.Add(SUCCESS, false);
                } //omaromar
            }
            return resultado;
        }

        private int GetUnidadMedica(int codigoPostal)
        {
            int unidadMedica = 0;
            if (codigoPostal > 0)
            {
                //string strQuery = string.Format("SELECT umf FROM sn_unidad_medica WHERE codigo_postal = {0}", codigoPostal);
                //var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                //odbc.consulta = String.Format(strQuery, codigoPostal);
                //List<dynamic> lstUnidadMedica = Data.EntityFramework.Context._contextEnkontrol.Select<dynamic>(vSesiones.sesionAmbienteEnkontrolRh, odbc);
                var lstUnidadMedica = _context.tblRH_EK_Unidad_Medica.Where(x => x.codigo_postal == codigoPostal).ToList();
                if (lstUnidadMedica.Count() > 0)
                    unidadMedica = Convert.ToInt32(lstUnidadMedica[0].umf);
            }

            return unidadMedica;
        }

        private int EstatusCandidatoAEmpleado(EmpleadosDTO objEmpleadoDTO)
        {
            try
            {
                #region SE CAMBIA EL ESTATUS DEL CANDIDATO DE PENDIENTE A CONTRATADO
                tblRH_REC_GestionCandidatos objActualizarCandidato = _context.tblRH_REC_GestionCandidatos.Where(w => w.id == objEmpleadoDTO.idCandidato).FirstOrDefault();
                objActualizarCandidato.estatus = (int)EstatusEmpleadoEnum.contratado;
                objActualizarCandidato.fechaModificacion = DateTime.Now;
                objActualizarCandidato.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                _context.SaveChanges();
                return objActualizarCandidato.idGestionSolicitud;
                #endregion
            }
            catch (Exception ex)
            {
                LogError(12, 12, "ReclutamientosController", "EstatusCandidatoAEmpleado", ex, AccionEnum.ACTUALIZAR, 0, objEmpleadoDTO);
                return 0;
            }
        }

        private bool IncrementarVacantesCubiertas(int idGestionSolicitud)
        {
            try
            {
                #region INCREMENTA EN 1 LA CANTIDAD DE VACANTES CUBIERTAS EN BASE A LA SOLICITUD QUE CONTENGA EL CANDIDATO QUE SE ACABA DE REGISTRAR
                int idSolicitud = _context.tblRH_REC_GestionSolicitudes.Where(w => w.id == idGestionSolicitud).Select(s => s.idSolicitud).FirstOrDefault();
                if (idSolicitud > 0)
                {
                    tblRH_REC_Solicitudes objActualizarSolicitud = _context.tblRH_REC_Solicitudes.Where(w => w.id == idSolicitud).FirstOrDefault();
                    if (objActualizarSolicitud == null)
                        throw new Exception("Ocurrió un error al incrementar la cantidad de vacantes cubiertas en la solicitud.");

                    int cantVacantesCubiertas = objActualizarSolicitud.cantVacantesCubiertas;
                    cantVacantesCubiertas++;
                    objActualizarSolicitud.cantVacantesCubiertas = cantVacantesCubiertas;
                    _context.SaveChanges();
                }
                #endregion

                #region SE VERIFICA SI LA SOLICTUD YA CUENTA CON LAS VACANTES YA CUBIERTAS, EN BASE A SOLICITADAS
                if (idSolicitud > 0)
                {
                    tblRH_REC_Solicitudes objSolicitud = _context.tblRH_REC_Solicitudes.Where(w => w.id == idSolicitud).FirstOrDefault();
                    if (objSolicitud == null)
                        throw new Exception("Ocurrió un error al obtener la información de la solicitud.");

                    if (objSolicitud.cantVacantes == objSolicitud.cantVacantesCubiertas)
                    {
                        objSolicitud.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                        objSolicitud.fechaModificacion = DateTime.Now;
                        objSolicitud.fechaAltaUltimaVacante = DateTime.Now;
                        _context.SaveChanges();
                    }
                }
                #endregion

                return true;
            }
            catch (Exception ex)
            {
                LogError(12, 12, "ReclutamientosController", "IncrementarVacantesCubiertas", ex, AccionEnum.ACTUALIZAR, idGestionSolicitud, 0);
                return false;
            }
        }

        public List<FamiliaresDTO> GetFamiliares(int clave_empleado)
        {
            try
            {
                string strQuery = string.Empty;
                #region SE OBTIENE LISTADO DEL TIPO PARENTESCO
                //List<dynamic> lstParentesco = new List<dynamic>();
                //strQuery = "SELECT id, descripcion FROM sn_parentesco";
                //var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                //odbc.consulta = String.Format(strQuery);
                //lstParentesco = _contextEnkontrol.Select<dynamic>(EnkontrolAmbienteEnum.Rh, odbc);
                var lstParentesco = _context.tblRH_EK_Parentesco.Select(x => new { id = x.id, descripcion = x.descripcion }).ToList();
                #endregion

                #region SE OBTIENE LOS FAMILAIRES
                //                strQuery = string.Empty;
                //                List<FamiliaresDTO> lstFamiliaresEK = new List<FamiliaresDTO>();
                //                strQuery = @"SELECT id_familia as idEKFam, clave_empleado, nombre, apellido_paterno, apellido_materno, fecha_de_nacimiento, parentesco, grado_de_estudios, estado_civil, estudia, genero, vive, beneficiario, trabaja, comentarios 
                //                                FROM sn_empl_familia 
                //                                    WHERE clave_empleado = '{0}'";
                //                odbc = new OdbcConsultaDTO() { consulta = strQuery };
                //                odbc.consulta = String.Format(strQuery, clave_empleado);
                #endregion

                //if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan)
                //    lstFamiliaresEK = _contextEnkontrol.Select<FamiliaresDTO>(EnkontrolAmbienteEnum.Rh, odbc);
                //else if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                //    lstFamiliaresEK = _contextEnkontrol.Select<FamiliaresDTO>(EnkontrolAmbienteEnum.RhArre, odbc);
                var lstFamiliaresEK = _context.Select<FamiliaresDTO>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = @"SELECT id, id_familia as idEKFam, clave_empleado, nombre, apellido_paterno, apellido_materno, fecha_de_nacimiento, parentesco, grado_de_estudios, estado_civil, estudia, genero, vive, beneficiario, trabaja, comentarios, num_dni, cedula_cuidadania
                                FROM tblRH_EK_Empl_Familia 
                                  WHERE clave_empleado = @paramC AND esActivo = 1",
                    parametros = new { paramC = clave_empleado }
                }).ToList();

                foreach (var item in lstFamiliaresEK)
                {
                    //var objSigoFam = _context.tblRH_REC_EmplFamiliares.FirstOrDefault(e => e.idEKFam == item.idEKFam && e.esActivo == true);

                    //if (objSigoFam != null)
                    //{
                    //    item.id = objSigoFam.id;
                    //}

                    //if (item.fecha_de_nacimiento.HasValue item.fecha_de_nacimiento.Year < 1000)
                    //    item.fecha_de_nacimiento = new DateTime(2000, 01, 01);

                    int idParentesco = Convert.ToInt32(item.parentesco);
                    item.strParentesco = lstParentesco.Where(w => w.id == idParentesco).Select(s => s.descripcion).FirstOrDefault();
                }

                return lstFamiliaresEK;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "GetFamiliares", e, AccionEnum.CONSULTA, clave_empleado, 0);
                return null;
            }
        }

        public List<ContratoDTO> GetContratos(int clave_empleado)
        {
            try
            {
                //var contratos = _contextEnkontrol.Select<ContratoDTO>((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? EnkontrolAmbienteEnum.RhCplan : EnkontrolAmbienteEnum.RhArre, new OdbcConsultaDTO
                //{
                //    consulta = @"SELECT * FROM sn_contratos_empleados WHERE clave_empleado = " + clave_empleado
                //});
                var contratos = _context.tblRH_EK_Contratos_Empleados.Where(x => x.clave_empleado == clave_empleado && x.esActivo.HasValue && x.esActivo.Value).Select(x => new ContratoDTO
                {
                    id_contrato_empleado = x.id_contrato_empleado,
                    fecha = x.fecha,
                    fecha_aplicacion = x.fecha_aplicacion,
                    clave_duracion = x.clave_duracion,
                    fecha_fin = x.fecha_fin
                }).ToList();

                List<tblRH_EK_Empl_Duracion_Contrato> lstTipoDuracion = _context.tblRH_EK_Empl_Duracion_Contrato.Where(e => e.esActivo).ToList();

                foreach (var con in contratos)
                {
                    con.fechaString = con.fecha.ToShortDateString();
                    con.fecha_aplicacionString = con.fecha_aplicacion.HasValue ? con.fecha_aplicacion.Value.ToString("dd/MM/yyyy") : "";
                    con.desc_duracion = lstTipoDuracion.Where(e => e.clave_duracion == con.clave_duracion).FirstOrDefault().nombre;
                    con.esNuevoContrato = false;
                }

                return contratos.OrderByDescending(x => x.fecha_aplicacion).ToList();
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "GetContratos", e, AccionEnum.CONSULTA, clave_empleado, 0);
                return null;
            }
        }

        public Dictionary<string, object> CrearEditarInformacionFamiliar(FamiliaresDTO objFamiliarDTO)
        {
            resultado = new Dictionary<string, object>();

            try
            {
                var fm = _context.tblRH_EK_Empl_Familia.FirstOrDefault(x => x.id == objFamiliarDTO.id);
                if (fm != null)
                {
                    fm.nombre = !string.IsNullOrEmpty(objFamiliarDTO.nombre) ? objFamiliarDTO.nombre.Trim().ToUpper() : string.Empty;
                    fm.apellido_paterno = !string.IsNullOrEmpty(objFamiliarDTO.apellido_paterno) ? objFamiliarDTO.apellido_paterno.Trim().ToUpper() : string.Empty;
                    fm.apellido_materno = !string.IsNullOrEmpty(objFamiliarDTO.apellido_materno) ? objFamiliarDTO.apellido_materno.Trim().ToUpper() : string.Empty;
                    fm.fecha_de_nacimiento = objFamiliarDTO.fecha_de_nacimiento;
                    fm.parentesco = objFamiliarDTO.parentesco;
                    fm.grado_de_estudios = !string.IsNullOrEmpty(objFamiliarDTO.grado_de_estudios) ? objFamiliarDTO.grado_de_estudios.Trim().ToUpper() : string.Empty;
                    fm.estado_civil = !string.IsNullOrEmpty(objFamiliarDTO.estado_civil) ? objFamiliarDTO.estado_civil.Trim() : string.Empty;
                    fm.estudia = !objFamiliarDTO.esEstudia ? "N" : "S";
                    fm.genero = objFamiliarDTO.genero;
                    fm.vive = !objFamiliarDTO.esVive ? "N" : "S";
                    fm.fecha_matrimonio = null;
                    fm.beneficiario = !objFamiliarDTO.esBeneficiario ? "N" : "S";
                    fm.trabaja = !objFamiliarDTO.esTrabaja ? "N" : "S";
                    fm.comentarios = !string.IsNullOrEmpty(objFamiliarDTO.comentarios) ? objFamiliarDTO.comentarios.Trim().ToUpper() : string.Empty;
                    fm.fechaModificacion = DateTime.Now;
                    fm.idUsuarioModificacion = vSesiones.sesionUsuarioDTO.id;
                    fm.esActivo = true;
                    fm.num_dni = objFamiliarDTO.num_dni;
                    fm.cedula_cuidadania = objFamiliarDTO.cedula_cuidadania;
                    _context.SaveChanges();

                    resultado.Add(SUCCESS, true);
                }
                else
                {
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, "No se encontró el familiar a modificar");
                }
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);
            }

            return resultado;

            //            using (var transaccionSP = _context.Database.BeginTransaction())
            //            {
            //                try
            //                {
            //                    bool esTrue = false;
            //                    bool esActualizar = false;

            //                    if (objFamiliarDTO.id == 0)
            //                    {
            //                        #region SE CREA EL FAMILIAR EN SIGOPLAN CP/ARR
            //                        tblRH_REC_EmplFamiliares objCrearFamiliar = new tblRH_REC_EmplFamiliares();
            //                        objCrearFamiliar.clave_empleado = objFamiliarDTO.clave_empleado;
            //                        objCrearFamiliar.nombre = !string.IsNullOrEmpty(objFamiliarDTO.nombre) ? objFamiliarDTO.nombre.Trim().ToUpper() : string.Empty;
            //                        objCrearFamiliar.apellido_paterno = !string.IsNullOrEmpty(objFamiliarDTO.apellido_paterno) ? objFamiliarDTO.apellido_paterno.Trim().ToUpper() : string.Empty;
            //                        objCrearFamiliar.apellido_materno = !string.IsNullOrEmpty(objFamiliarDTO.apellido_materno) ? objFamiliarDTO.apellido_materno.Trim().ToUpper() : string.Empty;
            //                        objCrearFamiliar.fecha_de_nacimiento = objFamiliarDTO.fecha_de_nacimiento;
            //                        objCrearFamiliar.parentesco = objFamiliarDTO.parentesco.HasValue ? objFamiliarDTO.parentesco.Value.ToString() : null;
            //                        objCrearFamiliar.grado_de_estudios = !string.IsNullOrEmpty(objFamiliarDTO.grado_de_estudios) ? objFamiliarDTO.grado_de_estudios.Trim().ToUpper() : string.Empty;
            //                        objCrearFamiliar.estado_civil = !string.IsNullOrEmpty(objFamiliarDTO.estado_civil) ? objFamiliarDTO.estado_civil.Trim() : string.Empty;
            //                        objCrearFamiliar.estudia = !objFamiliarDTO.esEstudia ? "N" : "S";
            //                        objCrearFamiliar.genero = objFamiliarDTO.genero;
            //                        objCrearFamiliar.vive = !objFamiliarDTO.esVive ? "N" : "S";
            //                        objCrearFamiliar.beneficiario = !objFamiliarDTO.esBeneficiario ? "N" : "S";
            //                        objCrearFamiliar.trabaja = !objFamiliarDTO.esTrabaja ? "N" : "S";
            //                        objCrearFamiliar.comentarios = !string.IsNullOrEmpty(objFamiliarDTO.comentarios) ? objFamiliarDTO.comentarios.Trim().ToUpper() : string.Empty;
            //                        objCrearFamiliar.esActivo = true;
            //                        objCrearFamiliar.idEKFam = objFamiliarDTO.idEKFam;
            //                        objCrearFamiliar.fechaCreacion = DateTime.Now;
            //                        objCrearFamiliar.fechaModificacion = new DateTime(2000, 01, 01);
            //                        objCrearFamiliar.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
            //                        objCrearFamiliar.idUsuarioModificacion = 0;
            //                        _context.tblRH_REC_EmplFamiliares.Add(objCrearFamiliar);
            //                        _context.SaveChanges();
            //                        #endregion

            //                        #region SE CREA EL FAMILIAR EN EK
            //                        //                                string strQuery = @"INSERT INTO sn_empl_familia 
            //                        //                                        (clave_empleado, nombre, apellido_paterno, apellido_materno, fecha_de_nacimiento, parentesco, grado_de_estudios, estado_civil, estudia, genero, vive, fecha_matrimonio, beneficiario, trabaja, comentarios)
            //                        //                                        VALUES 
            //                        //                                        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

            //                        //                                using (var cmd = new OdbcCommand(strQuery))
            //                        //                                {
            //                        //                                    OdbcParameterCollection parameters = cmd.Parameters;
            //                        //                                    parameters.Add("@clave_empleado", OdbcType.Decimal).Value = Convert.ToDecimal(objFamiliarDTO.clave_empleado);
            //                        //                                    parameters.Add("@nombre", OdbcType.VarChar).Value = !string.IsNullOrEmpty(objFamiliarDTO.nombre) ? objFamiliarDTO.nombre.Trim().ToUpper() : string.Empty;
            //                        //                                    parameters.Add("@apellido_paterno", OdbcType.VarChar).Value = !string.IsNullOrEmpty(objFamiliarDTO.apellido_paterno) ? objFamiliarDTO.apellido_paterno.Trim().ToUpper() : string.Empty;
            //                        //                                    parameters.Add("@apellido_materno", OdbcType.VarChar).Value = !string.IsNullOrEmpty(objFamiliarDTO.apellido_materno) ? objFamiliarDTO.apellido_materno.Trim().ToUpper() : string.Empty;
            //                        //                                    parameters.Add("@fecha_de_nacimiento", OdbcType.Date).Value = objFamiliarDTO.fecha_de_nacimiento;
            //                        //                                    parameters.Add("@parentesco", OdbcType.VarChar).Value = !string.IsNullOrEmpty(objFamiliarDTO.parentesco) ? objFamiliarDTO.parentesco.Trim().ToUpper() : string.Empty;
            //                        //                                    parameters.Add("@grado_de_estudios", OdbcType.VarChar).Value = !string.IsNullOrEmpty(objFamiliarDTO.grado_de_estudios) ? objFamiliarDTO.grado_de_estudios.Trim().ToUpper() : string.Empty;
            //                        //                                    parameters.Add("@estado_civil", OdbcType.VarChar).Value = !string.IsNullOrEmpty(objFamiliarDTO.estado_civil) ? objFamiliarDTO.estado_civil.Trim().ToUpper() : string.Empty;
            //                        //                                    parameters.Add("@estudia", OdbcType.Char).Value = !objFamiliarDTO.esEstudia ? "N" : "S";
            //                        //                                    parameters.Add("@genero", OdbcType.Char).Value = objFamiliarDTO.genero;
            //                        //                                    parameters.Add("@vive", OdbcType.Char).Value = !objFamiliarDTO.esVive ? "N" : "S";
            //                        //                                    parameters.Add("@fecha_matrimonio", OdbcType.Date).Value = DateTime.Now;
            //                        //                                    parameters.Add("@beneficiario", OdbcType.Char).Value = !objFamiliarDTO.esBeneficiario ? "N" : "S";
            //                        //                                    parameters.Add("@trabaja", OdbcType.Char).Value = !objFamiliarDTO.esTrabaja ? "N" : "S";
            //                        //                                    parameters.Add("@comentarios", OdbcType.VarChar).Value = !string.IsNullOrEmpty(objFamiliarDTO.comentarios) ? objFamiliarDTO.comentarios.Trim().ToUpper() : string.Empty;

            //                        //                                    cmd.Connection = transaccionEK.Connection;
            //                        //                                    cmd.Transaction = transaccionEK;
            //                        //                                    cmd.ExecuteNonQuery();
            //                        //                                }
            //                        #endregion

            //                        SaveBitacora(16, (int)AccionEnum.AGREGAR, Convert.ToInt32(objFamiliarDTO.clave_empleado), JsonUtils.convertNetObjectToJson(objFamiliarDTO));
            //                        esTrue = true;

            //                    }
            //                    else
            //                    {
            //                        #region SE ACTUALIZA LOS DATOS DEL FAMILIAR EN SIGOPLAN CP/ARR

            //                        tblRH_REC_EmplFamiliares objActualizarFamiliar = _context.tblRH_REC_EmplFamiliares.Where(w => w.id == objFamiliarDTO.id).FirstOrDefault();
            //                        if (objActualizarFamiliar != null)
            //                        {
            //                            objActualizarFamiliar.nombre = !string.IsNullOrEmpty(objFamiliarDTO.nombre) ? objFamiliarDTO.nombre.Trim().ToUpper() : string.Empty;
            //                            objActualizarFamiliar.apellido_paterno = !string.IsNullOrEmpty(objFamiliarDTO.apellido_paterno) ? objFamiliarDTO.apellido_paterno.Trim().ToUpper() : string.Empty;
            //                            objActualizarFamiliar.apellido_materno = !string.IsNullOrEmpty(objFamiliarDTO.apellido_materno) ? objFamiliarDTO.apellido_materno.Trim().ToUpper() : string.Empty;
            //                            objActualizarFamiliar.fecha_de_nacimiento = objFamiliarDTO.fecha_de_nacimiento;
            //                            objActualizarFamiliar.parentesco = objFamiliarDTO.parentesco.HasValue ? objFamiliarDTO.parentesco.Value.ToString() : null;
            //                            objActualizarFamiliar.grado_de_estudios = !string.IsNullOrEmpty(objFamiliarDTO.grado_de_estudios) ? objFamiliarDTO.grado_de_estudios.Trim().ToUpper() : string.Empty;
            //                            objActualizarFamiliar.estado_civil = !string.IsNullOrEmpty(objFamiliarDTO.estado_civil) ? objFamiliarDTO.estado_civil.Trim() : string.Empty;
            //                            objActualizarFamiliar.estudia = !objFamiliarDTO.esEstudia ? "N" : "S";
            //                            objActualizarFamiliar.genero = objFamiliarDTO.genero;
            //                            objActualizarFamiliar.vive = !objFamiliarDTO.esVive ? "N" : "S";
            //                            objActualizarFamiliar.beneficiario = !objFamiliarDTO.esBeneficiario ? "N" : "S";
            //                            objActualizarFamiliar.trabaja = !objFamiliarDTO.esTrabaja ? "N" : "S";
            //                            objActualizarFamiliar.comentarios = !string.IsNullOrEmpty(objFamiliarDTO.comentarios) ? objFamiliarDTO.comentarios.Trim().ToUpper() : string.Empty;
            //                            objActualizarFamiliar.fechaModificacion = DateTime.Now;
            //                            objActualizarFamiliar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
            //                            _context.SaveChanges();
            //                        }
            //                        #endregion

            //                        SaveBitacora(16, (int)AccionEnum.ACTUALIZAR, Convert.ToInt32(objFamiliarDTO.clave_empleado), JsonUtils.convertNetObjectToJson(objFamiliarDTO));
            //                        esTrue = true;
            //                        esActualizar = true;
            //                    }

            //                    if (objFamiliarDTO.idEKFam != 0)
            //                    {
            //                        #region SE ACTUALIZA LOS DATOS DEL FAMILIAR EN SIGOPLAN CP/ARR

            //                        tblRH_REC_EmplFamiliares objActualizarFamiliar = _context.tblRH_REC_EmplFamiliares.Where(w => w.idEKFam == objFamiliarDTO.idEKFam).FirstOrDefault();
            //                        if (objActualizarFamiliar != null)
            //                        {
            //                            objActualizarFamiliar.nombre = !string.IsNullOrEmpty(objFamiliarDTO.nombre) ? objFamiliarDTO.nombre.Trim().ToUpper() : string.Empty;
            //                            objActualizarFamiliar.apellido_paterno = !string.IsNullOrEmpty(objFamiliarDTO.apellido_paterno) ? objFamiliarDTO.apellido_paterno.Trim().ToUpper() : string.Empty;
            //                            objActualizarFamiliar.apellido_materno = !string.IsNullOrEmpty(objFamiliarDTO.apellido_materno) ? objFamiliarDTO.apellido_materno.Trim().ToUpper() : string.Empty;
            //                            objActualizarFamiliar.fecha_de_nacimiento = objFamiliarDTO.fecha_de_nacimiento;
            //                            objActualizarFamiliar.parentesco = objFamiliarDTO.parentesco.HasValue ? objFamiliarDTO.parentesco.Value.ToString() : null;
            //                            objActualizarFamiliar.grado_de_estudios = !string.IsNullOrEmpty(objFamiliarDTO.grado_de_estudios) ? objFamiliarDTO.grado_de_estudios.Trim().ToUpper() : string.Empty;
            //                            objActualizarFamiliar.estado_civil = !string.IsNullOrEmpty(objFamiliarDTO.estado_civil) ? objFamiliarDTO.estado_civil.Trim() : string.Empty;
            //                            objActualizarFamiliar.estudia = !objFamiliarDTO.esEstudia ? "N" : "S";
            //                            objActualizarFamiliar.genero = objFamiliarDTO.genero;
            //                            objActualizarFamiliar.vive = !objFamiliarDTO.esVive ? "N" : "S";
            //                            objActualizarFamiliar.beneficiario = !objFamiliarDTO.esBeneficiario ? "N" : "S";
            //                            objActualizarFamiliar.trabaja = !objFamiliarDTO.esTrabaja ? "N" : "S";
            //                            objActualizarFamiliar.comentarios = !string.IsNullOrEmpty(objFamiliarDTO.comentarios) ? objFamiliarDTO.comentarios.Trim().ToUpper() : string.Empty;
            //                            objActualizarFamiliar.fechaModificacion = DateTime.Now;
            //                            objActualizarFamiliar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
            //                            _context.SaveChanges();
            //                        }

            //                        var famEk = _context.tblRH_EK_Empl_Familia.FirstOrDefault(x => x.id_familia == objFamiliarDTO.idEKFam);
            //                        if (famEk != null)
            //                        {
            //                            famEk.nombre = !string.IsNullOrEmpty(objFamiliarDTO.nombre) ? objFamiliarDTO.nombre.Trim().ToUpper() : null;
            //                            famEk.apellido_paterno = !string.IsNullOrEmpty(objFamiliarDTO.apellido_paterno) ? objFamiliarDTO.apellido_paterno.Trim().ToUpper() : null;
            //                            famEk.apellido_materno = !string.IsNullOrEmpty(objFamiliarDTO.apellido_materno) ? objFamiliarDTO.apellido_materno.Trim().ToUpper() : null;
            //                            famEk.fecha_de_nacimiento = objFamiliarDTO.fecha_de_nacimiento;
            //                            famEk.parentesco = objFamiliarDTO.parentesco;
            //                            famEk.grado_de_estudios = !string.IsNullOrEmpty(objFamiliarDTO.grado_de_estudios) ? objFamiliarDTO.grado_de_estudios.Trim().ToUpper() : null;
            //                            famEk.estado_civil = !string.IsNullOrEmpty(objFamiliarDTO.estado_civil) ? objFamiliarDTO.estado_civil.Trim() : null;
            //                            famEk.estudia = !objFamiliarDTO.esEstudia ? "N" : "S";
            //                            famEk.genero = objFamiliarDTO.genero;
            //                            famEk.vive = !objFamiliarDTO.esVive ? "N" : "S";
            //                            famEk.fecha_matrimonio = null;
            //                            famEk.beneficiario = !objFamiliarDTO.esBeneficiario ? "N" : "S";
            //                            famEk.trabaja = !objFamiliarDTO.esTrabaja ? "N" : "S";
            //                            famEk.comentarios = !string.IsNullOrEmpty(objFamiliarDTO.comentarios) ? objFamiliarDTO.comentarios.Trim().ToUpper() : null;
            //                            famEk.fechaModificacion = DateTime.Now;
            //                            famEk.idUsuarioModificacion = vSesiones.sesionUsuarioDTO.id;
            //                            _context.tblRH_EK_Empl_Familia.Add(famEk);
            //                            _context.SaveChanges();
            //                        }
            //                        //var famEk = new tblRH_EK_Empl_Familia();
            //                        //famEk.clave_empleado = objFamiliarDTO.clave_empleado;
            //                        //famEk.nombre = !string.IsNullOrEmpty(objFamiliarDTO.nombre) ? objFamiliarDTO.nombre.Trim().ToUpper() : null;
            //                        //famEk.apellido_paterno = !string.IsNullOrEmpty(objFamiliarDTO.apellido_paterno) ? objFamiliarDTO.apellido_paterno.Trim().ToUpper() : null;
            //                        //famEk.apellido_materno = !string.IsNullOrEmpty(objFamiliarDTO.apellido_materno) ? objFamiliarDTO.apellido_materno.Trim().ToUpper() : null;
            //                        //famEk.fecha_de_nacimiento = objFamiliarDTO.fecha_de_nacimiento;
            //                        //famEk.parentesco = objFamiliarDTO.parentesco;
            //                        //famEk.grado_de_estudios = !string.IsNullOrEmpty(objFamiliarDTO.grado_de_estudios) ? objFamiliarDTO.grado_de_estudios.Trim().ToUpper() : null;
            //                        //famEk.estado_civil = !string.IsNullOrEmpty(objFamiliarDTO.estado_civil) ? objFamiliarDTO.estado_civil.Trim() : null;
            //                        //famEk.estudia = !objFamiliarDTO.esEstudia ? "N" : "S";
            //                        //famEk.genero = objFamiliarDTO.genero;
            //                        //famEk.vive = !objFamiliarDTO.esVive ? "N" : "S";
            //                        //famEk.beneficiario = !objFamiliarDTO.esBeneficiario ? "N" : "S";
            //                        //famEk.trabaja = !objFamiliarDTO.esTrabaja ? "N" : "S";
            //                        //famEk.comentarios = !string.IsNullOrEmpty(objFamiliarDTO.comentarios) ? objFamiliarDTO.comentarios.Trim().ToUpper() : null;
            //                        //famEk.id_familia = objFamiliarDTO.idEKFam;

            //                        //_context.tblRH_EK_Empl_Familia.Add(famEk);
            //                        //_context.SaveChanges();
            //                        #endregion

            //                        #region SE ACTUALIZA LOS DATOS DEL FAMILIAR EN EK
            ////                        string strQuery = @"UPDATE sn_empl_familia 
            ////                                                                        SET clave_empleado = ?, 
            ////                                                                            nombre = ?, 
            ////                                                                            apellido_paterno = ?, 
            ////                                                                            apellido_materno = ?, 
            ////                                                                            fecha_de_nacimiento = ?, 
            ////                                                                            parentesco = ?, 
            ////                                                                            grado_de_estudios = ?, 
            ////                                                                            estado_civil = ?, 
            ////                                                                            estudia = ?, 
            ////                                                                            genero = ?, 
            ////                                                                            vive = ?, 
            ////                                                                            beneficiario = ?, 
            ////                                                                            trabaja = ?, 
            ////                                                                            comentarios = ?
            ////                                                                                WHERE id_familia = ?";

            ////                        using (var cmd = new OdbcCommand(strQuery))
            ////                        {
            ////                            OdbcParameterCollection parameters = cmd.Parameters;
            ////                            parameters.Add("@clave_empleado", OdbcType.Decimal).Value = Convert.ToDecimal(objFamiliarDTO.clave_empleado);
            ////                            parameters.Add("@nombre", OdbcType.VarChar).Value = !string.IsNullOrEmpty(objFamiliarDTO.nombre) ? objFamiliarDTO.nombre.Trim().ToUpper() : string.Empty;
            ////                            parameters.Add("@apellido_paterno", OdbcType.VarChar).Value = !string.IsNullOrEmpty(objFamiliarDTO.apellido_paterno) ? objFamiliarDTO.apellido_paterno.Trim().ToUpper() : string.Empty;
            ////                            parameters.Add("@apellido_materno", OdbcType.VarChar).Value = !string.IsNullOrEmpty(objFamiliarDTO.apellido_materno) ? objFamiliarDTO.apellido_materno.Trim().ToUpper() : string.Empty;
            ////                            parameters.Add("@fecha_de_nacimiento", OdbcType.Date).Value = objFamiliarDTO.fecha_de_nacimiento;
            ////                            parameters.Add("@parentesco", OdbcType.VarChar).Value = !string.IsNullOrEmpty(objFamiliarDTO.parentesco) ? objFamiliarDTO.parentesco.Trim().ToUpper() : string.Empty;
            ////                            parameters.Add("@grado_de_estudios", OdbcType.VarChar).Value = !string.IsNullOrEmpty(objFamiliarDTO.grado_de_estudios) ? objFamiliarDTO.grado_de_estudios.Trim().ToUpper() : string.Empty;
            ////                            parameters.Add("@estado_civil", OdbcType.VarChar).Value = !string.IsNullOrEmpty(objFamiliarDTO.estado_civil) ? objFamiliarDTO.estado_civil.Trim().ToUpper() : string.Empty;
            ////                            parameters.Add("@estudia", OdbcType.Char).Value = !objFamiliarDTO.esEstudia ? "N" : "S";
            ////                            parameters.Add("@genero", OdbcType.Char).Value = objFamiliarDTO.genero;
            ////                            parameters.Add("@vive", OdbcType.Char).Value = !objFamiliarDTO.esVive ? "N" : "S";
            ////                            parameters.Add("@beneficiario", OdbcType.Char).Value = !objFamiliarDTO.esBeneficiario ? "N" : "S";
            ////                            parameters.Add("@trabaja", OdbcType.Char).Value = !objFamiliarDTO.esTrabaja ? "N" : "S";
            ////                            parameters.Add("@comentarios", OdbcType.VarChar).Value = !string.IsNullOrEmpty(objFamiliarDTO.comentarios) ? objFamiliarDTO.comentarios.Trim().ToUpper() : string.Empty;
            ////                            parameters.Add("@id_familia", OdbcType.Decimal).Value = Convert.ToDecimal(objFamiliarDTO.idEKFam);

            ////                            cmd.Connection = transaccionEK.Connection;
            ////                            cmd.Transaction = transaccionEK;
            ////                            cmd.ExecuteNonQuery();
            ////                        }
            //                        #endregion

            //                        SaveBitacora(16, (int)AccionEnum.ACTUALIZAR, Convert.ToInt32(objFamiliarDTO.clave_empleado), JsonUtils.convertNetObjectToJson(objFamiliarDTO));
            //                        esTrue = true;
            //                        esActualizar = true;
            //                    }

            //                    if (esTrue)
            //                    {
            //                        transaccionSP.Commit();
            //                        //return true;
            //                    }
            //                    //string[] lstParentescos = new string[] { "Padre", "Madre", "Conyuge", "Hijo", "Hermano", "Otro" };
            //                    string[] lstParentescos = new string[12];
            //                    lstParentescos[1] = "Padre";
            //                    lstParentescos[2] = "Madre";
            //                    lstParentescos[3] = "Conyuge";
            //                    lstParentescos[4] = "Hijo";
            //                    lstParentescos[5] = "Hermano";
            //                    lstParentescos[11] = "Otro";
            //                    FamiliaresDTO objUltimoFam = _context.tblRH_REC_EmplFamiliares.Where(e => e.esActivo).Select(e => new FamiliaresDTO
            //                    {
            //                        id = e.id,
            //                        clave_empleado = e.clave_empleado,
            //                        nombre = e.nombre,
            //                        apellido_paterno = e.apellido_paterno,
            //                        apellido_materno = e.apellido_materno,
            //                        parentescoStr = e.parentesco,
            //                        grado_de_estudios = e.grado_de_estudios,
            //                        estado_civil = e.estado_civil,
            //                        estudia = e.estudia,
            //                        genero = e.genero,
            //                        vive = e.vive,
            //                        beneficiario = e.beneficiario,
            //                        trabaja = e.trabaja,
            //                        comentarios = e.comentarios,
            //                        fecha_de_nacimiento = e.fecha_de_nacimiento,
            //                        idEKFam = e.idEKFam,
            //                        esActualizar = esActualizar,
            //                    }).OrderByDescending(e => e.id).FirstOrDefault();

            //                    int numParentesco = Convert.ToInt32(objUltimoFam.parentescoStr);

            //                    objUltimoFam.strParentesco = lstParentescos[numParentesco];

            //                    resultado.Add(SUCCESS, true);
            //                    resultado.Add(ITEMS, objUltimoFam);
            //                }
            //                catch (Exception ex)
            //                {
            //                    //transaccionSP.Rollback();
            //                    LogError(12, 12, "ReclutamientosController", "CrearEditarFamiliares", ex, !objFamiliarDTO.esActualizar ? AccionEnum.AGREGAR : AccionEnum.ACTUALIZAR, 0, objFamiliarDTO);
            //                    //return false;
            //                    resultado.Add(SUCCESS, false);
            //                    resultado.Add(MESSAGE, ex.Message);
            //                }

            //                return resultado;
            //            }
        }

        public Dictionary<string, object> EliminarContrato(int id_contrato_empleado)
        {
            resultado = new Dictionary<string, object>();

            try
            {
                var contratoEmpleado = _context.tblRH_EK_Contratos_Empleados.FirstOrDefault(x => x.id_contrato_empleado == id_contrato_empleado && x.esActivo.HasValue && x.esActivo.Value);
                if (contratoEmpleado != null)
                {
                    contratoEmpleado.esActivo = false;
                    contratoEmpleado.fechaModificacion = DateTime.Now;
                    contratoEmpleado.idUsuarioModificacion = vSesiones.sesionUsuarioDTO.id;
                    _context.SaveChanges();

                    resultado.Add(SUCCESS, true);
                }
                else
                {
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, "Hubo un problema al obtener eliminar el contrato");
                }
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);
            }

            return resultado;
        }

        public bool EliminarFamiliar(int idFamiliar, int clave_empleado)
        {
            using (var _ctx = new MainContext(vSesiones.sesionEmpresaActual))
            {
                using (var dbContextTransaction = _ctx.Database.BeginTransaction())
                {
                    bool exito = true;
                    try
                    {
                        tblRH_EK_Empl_Familia objFamiliar = _ctx.tblRH_EK_Empl_Familia.Where(w => w.id_familia == idFamiliar && w.esActivo).FirstOrDefault();
                        if (objFamiliar == null)
                            throw new Exception("Ocurrió un error al eliminar el familiar.");

                        objFamiliar.esActivo = false;
                        _ctx.SaveChanges();

                        List<tblRH_EK_SustentosHijos> lstSustentos = _ctx.tblRH_EK_SustentosHijos.Where(w => w.FK_EmplFamilia == objFamiliar.id && w.registroActivo).ToList();
                        foreach (var item in lstSustentos)
	                    {
		                    item.FK_UsuarioModificacion = vSesiones.sesionUsuarioDTO.id;
                            item.fechaModificacion = DateTime.Now;
                            item.registroActivo = false;
	                    }
                        _ctx.SaveChanges();

                        dbContextTransaction.Commit();

                        SaveBitacora(0, (int)AccionEnum.ELIMINAR, idFamiliar, JsonUtils.convertNetObjectToJson(new { idFamiliar = idFamiliar, clave_empleado = clave_empleado }));
                    }
                    catch (Exception e)
                    {
                        dbContextTransaction.Rollback();
                        var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                        LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.ELIMINAR, idFamiliar, new { idFamiliar = idFamiliar, clave_empleado = clave_empleado });
                        exito = false;
                    }
                    return exito;
                }
            }
        }

        public List<ComboDTO> FillCboCandidatosAprobados()
        {
            try
            {
                #region CATALOGOS
                List<tblRH_REC_Fases> lstFases = _context.tblRH_REC_Fases.Where(w => w.esActivo).ToList();
                List<int> lstFasesID = lstFases.Select(s => s.id).ToList();
                List<int> actividadesObligatorias = _context.tblRH_REC_Actividades.Where(w => lstFasesID.Contains(w.idFase) && w.esActivo && w.esObligatoria == true).Select(s => s.id).ToList();
                List<tblRH_REC_SegDetCandidatos> lstSegDetCandidatos = _context.tblRH_REC_SegDetCandidatos.Where(w => w.esActivo).ToList();
                List<tblRH_REC_SegCandidatos> lstSegCandidatos = _context.tblRH_REC_SegCandidatos.Where(w => w.esActivo).ToList();
                List<tblRH_Baja_Registro> lstBajasRegistros = _context.tblRH_Baja_Registro.Where(w => w.registroActivo).ToList();
                List<tblRH_EK_Empleados> lstEmpleados = _context.tblRH_EK_Empleados.ToList();
                #endregion

                #region FILL COMBO CANDIDATOS APROBADOS
                List<ComboDTO> lstCandidatosAprobados = new List<ComboDTO>();
                List<ComboDTO> lstFiltAprobados = new List<ComboDTO>();
                lstCandidatosAprobados = _context.tblRH_REC_GestionCandidatos.Where(w => w.estatus == (int)EstatusEmpleadoEnum.pendiente && w.esActivo).Select(s => new ComboDTO
                {
                    Value = s.id.ToString(),
                    Text = s.apePaterno.Trim().ToUpper() + " " + s.apeMaterno.Trim().ToUpper() + " " + s.nombre.Trim().ToUpper() + " - (" + (s.puestoDesc ?? "") + ") ",
                    Prefijo = s.apePaterno.Trim().ToUpper() + "|" + s.apeMaterno.Trim().ToUpper() + "|" + s.nombre.Trim().ToUpper() + "|" + (s.esReingreso == true ? s.clave_empleado.Value.ToString() : "0"),
                    Id = s.esReingreso == true && s.clave_empleado != null ? s.clave_empleado.ToString() : null,
                }).OrderBy(e => e.Text).ToList();

                List<ComboDTO> lstCandidatosAprobadosValidos = lstCandidatosAprobados;
                foreach (var item in lstCandidatosAprobadosValidos)
                {
                    List<int> lstSegID = lstSegCandidatos.Where(w => w.idCandidato == Convert.ToInt32(item.Value)).Select(s => s.id).ToList();
                    var actsU = lstSegDetCandidatos.Where(w => lstSegID.Contains(w.idSeg) && (w.esAprobada == (int)EstatusActividadEnum.aprobado || 
                                w.esAprobada == (int)EstatusActividadEnum.noAplica) && actividadesObligatorias.Contains(w.idActividad)).Select(e => e.idActividad);
                    int cantActividadesFinalizadas = actsU.Distinct().Count();
                    decimal progresoSeguimiento = ((decimal)cantActividadesFinalizadas / (decimal)actividadesObligatorias.Count()) * 100;

                    if (progresoSeguimiento >= 100)
                    {
                        //CHECAR SI EL CANDIDADO A REINGRESO TIENE CONTABILIDAD LIBERADA
                        if (!string.IsNullOrEmpty(item.Id))
                        {
                            int numEmpleadoCandi = Convert.ToInt32(item.Id);
                            var objBaja = lstBajasRegistros.Where(x => x.numeroEmpleado == numEmpleadoCandi && x.registroActivo).OrderByDescending(e => e.fechaBaja).FirstOrDefault();

                            if (objBaja != null)
                            {
                                if (objBaja.est_contabilidad == "A")
                                    lstFiltAprobados.Add(item);
                            }
                            else if (lstEmpleados.Any(x => x.esActivo && x.estatus_empleado == "C"))
                                lstFiltAprobados.Add(item);
                        }
                        else
                            lstFiltAprobados.Add(item);
                    }
                }
                return lstFiltAprobados;
                #endregion
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "FillCboEscolaridades", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }

        public List<ComboDTO> FillCboParentesco()
        {
            try
            {
                #region FILL COMBO PARENTESCO
                //string strQuery = @"SELECT id AS Value, descripcion AS Text FROM sn_parentesco";
                //var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                //odbc.consulta = String.Format(strQuery);
                //List<ComboDTO> lstParentesco = Data.EntityFramework.Context._contextEnkontrol.Select<ComboDTO>(EnkontrolAmbienteEnum.Rh, odbc);
                var lstParentesco = _context.tblRH_EK_Parentesco.Select(x => new ComboDTO
                {
                    Value = x.id.ToString(),
                    Text = x.descripcion
                }).ToList();
                return lstParentesco;
                #endregion
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "FillCboParentesco", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }

        public List<ComboDTO> FillCboTipoSangre()
        {
            try
            {
                #region FILL COMBO TIPO DE SANGRE
                List<ComboDTO> lstTipoSangre = new List<ComboDTO>();
                lstTipoSangre = _context.tblP_CatTipoSangre.Where(w => w.esActivo).Select(s => new ComboDTO
                {
                    Value = s.id.ToString(),
                    Text = s.tipoSangre.Trim()
                }).ToList();
                return lstTipoSangre;
                #endregion
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "FillCboTipoSangre", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }

        public List<ComboDTO> FillCboTipoCasa()
        {
            try
            {
                #region FILL COMBO TIPO DE CASA
                List<ComboDTO> lstTipoCasa = new List<ComboDTO>();
                lstTipoCasa = _context.tblP_CatTipoCasa.Where(w => w.esActivo).Select(s => new ComboDTO
                {
                    Value = s.id.ToString(),
                    Text = s.tipoCasa.Trim()
                }).ToList();
                return lstTipoCasa;
                #endregion
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "FillCboTipoCasa", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }

        public UniformesDTO GetUniformes(int claveEmpleado)
        {
            try
            {
                string strQuery = string.Empty;

                //var requisiciones = _contextEnkontrol.Select<GetRequisicionesDTO>(vSesiones.sesionAmbienteEnkontrolRh, query_requi);
                //UniformesDTO objUniformes = new UniformesDTO();

                //                strQuery = string.Format(@"SELECT clave_empleado, calzado, camisa, pantalon, overol, fecha_entrega as fechaEntrega, entrego_calzado, entrego_camisa, entrego_pantalon, entrego_overol, comentarios, uniforme_dama, entrego_uniforme_dama, otros
                //                                            FROM sn_empl_complementaria 
                //                                            WHERE clave_empleado = '{0}'",claveEmpleado);

                //                var uniformes = _contextEnkontrol.Select<UniformesDTO>(vSesiones.sesionAmbienteEnkontrolRh, strQuery).FirstOrDefault();
                var objUniformes = _context.Select<UniformesDTO>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = @"SELECT id, clave_empleado, calzado, camisa, pantalon, overol, fecha_entrega as fechaEntrega, entrego_calzado, entrego_camisa, entrego_pantalon, entregro_overol as entrego_overol, comentarios, uniforme_dama, entrego_uniforme_dama, otros
                                           FROM tblRH_EK_Empl_Complementaria 
                                           WHERE clave_empleado = @paramCve AND esActivo = 1",
                    parametros = new { paramCve = claveEmpleado }
                }).FirstOrDefault();

                if (objUniformes != null)
                {
                    if (objUniformes.fechaEntrega.Year < 1000)
                        objUniformes.fechaEntrega = new DateTime(2000, 01, 01);

                    //var objUniformeSIGO = _context.tblRH_REC_Uniformes.FirstOrDefault(w => w.clave_empleado == claveEmpleado && w.esActivo);

                    //if (objUniformeSIGO != null)
                    //{
                    //    objUniformes.id = objUniformeSIGO.id;
                    //}
                }

                #region SE CREA BITACORA
                SaveBitacora(16, (int)AccionEnum.CONSULTA, 0, JsonUtils.convertNetObjectToJson(claveEmpleado));
                #endregion

                return objUniformes;
                //return uniformes;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "GetUniformes", e, AccionEnum.CONSULTA, 0, claveEmpleado);
                return null;
            }
        }

        public Dictionary<string, object> CrearEditarUniforme(UniformesDTO objUniformeDTO) // ALMENOS UNO COMO ENTREGRADO 
        {
            resultado.Clear();
            using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    tblRH_REC_Uniformes objCrearUniforme = new tblRH_REC_Uniformes();
                    UniformesDTO objLastUniforme = new UniformesDTO();

                    if (!objUniformeDTO.esActualizar)
                    {
                        #region SE CREA EL UNIFORME LIGADO AL EMPLEADO
                        objCrearUniforme.clave_empleado = objUniformeDTO.clave_empleado.Value;
                        objCrearUniforme.fechaEntrega = objUniformeDTO.fechaEntrega.Year > 1000 ? objUniformeDTO.fechaEntrega : new DateTime(2000, 01, 01);
                        objCrearUniforme.calzado = objUniformeDTO.calzado;
                        objCrearUniforme.camisa = objUniformeDTO.camisa;
                        objCrearUniforme.pantalon = objUniformeDTO.pantalon;
                        objCrearUniforme.overol = objUniformeDTO.overol;
                        objCrearUniforme.uniforme_dama = objUniformeDTO.uniforme_dama;
                        objCrearUniforme.otros = objUniformeDTO.otros;
                        objCrearUniforme.comentarios = objUniformeDTO.comentarios;
                        objCrearUniforme.entrego_calzado = objUniformeDTO.entrego_calzado == "S" ? true : false;
                        objCrearUniforme.entrego_camisa = objUniformeDTO.entrego_camisa == "S" ? true : false;
                        objCrearUniforme.entrego_pantalon = objUniformeDTO.entrego_pantalon == "S" ? true : false;
                        objCrearUniforme.entrego_overol = objUniformeDTO.entrego_overol == "S" ? true : false;
                        objCrearUniforme.entrego_uniforme_dama = objUniformeDTO.entrego_uniforme_dama == "S" ? true : false;
                        objCrearUniforme.esActivo = true;
                        objCrearUniforme.fechaCreacion = DateTime.Now;
                        objCrearUniforme.fechaModificacion = new DateTime(2000, 01, 01);
                        objCrearUniforme.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                        objCrearUniforme.idUsuarioModificacion = 0;
                        _context.tblRH_REC_Uniformes.Add(objCrearUniforme);
                        _context.SaveChanges();

                        //resultado.Add(ITEMS, objCrearUniforme);
                        //resultado.Add(SUCCESS, true);
                        #endregion
                    }
                    else if (objUniformeDTO.esActualizar && objUniformeDTO.id > 0)
                    {
                        var uniformeEK = _context.tblRH_EK_Empl_Complementaria.FirstOrDefault(x => x.clave_empleado == objUniformeDTO.clave_empleado);
                        if (uniformeEK != null)
                        {
                            uniformeEK.calzado = !string.IsNullOrEmpty(objUniformeDTO.calzado) ? objUniformeDTO.calzado.Trim().ToUpper() : null;
                            uniformeEK.camisa = !string.IsNullOrEmpty(objUniformeDTO.camisa) ? objUniformeDTO.camisa.Trim().ToUpper() : null;
                            uniformeEK.pantalon = !string.IsNullOrEmpty(objUniformeDTO.pantalon) ? objUniformeDTO.pantalon.Trim().ToUpper() : null;
                            uniformeEK.overol = !string.IsNullOrEmpty(objUniformeDTO.overol) ? objUniformeDTO.overol.Trim().ToUpper() : null;
                            uniformeEK.fecha_entrega = objUniformeDTO.fechaEntrega;
                            uniformeEK.entrego_calzado = "N";
                            uniformeEK.entrego_camisa = "N";
                            uniformeEK.entrego_pantalon = "N";
                            uniformeEK.entregro_overol = "N";
                            uniformeEK.comentarios = !string.IsNullOrEmpty(objUniformeDTO.comentarios) ? objUniformeDTO.comentarios.Trim().ToUpper() : null;
                            uniformeEK.uniforme_dama = !string.IsNullOrEmpty(objUniformeDTO.uniforme_dama) ? objUniformeDTO.uniforme_dama.Trim().ToUpper() : null;
                            uniformeEK.entrego_uniforme_dama = objUniformeDTO.entrego_uniforme_dama;
                            uniformeEK.otros = !string.IsNullOrEmpty(objUniformeDTO.otros) ? objUniformeDTO.otros.Trim().ToUpper() : null;
                            uniformeEK.fechaModificacion = DateTime.Now;
                            uniformeEK.idUsuarioModificacion = vSesiones.sesionUsuarioDTO.id;
                            _context.SaveChanges();
                        }

                        #region SE ACTUALIZA LOS DATOS DEL UNIFORME DEL EMPLEADO
                        //tblRH_REC_Uniformes objActualizarUniforme = _context.tblRH_REC_Uniformes.Where(w => w.id == objUniformeDTO.id).FirstOrDefault();
                        //if (objActualizarUniforme != null)
                        //{
                        //    objActualizarUniforme.fechaEntrega = objUniformeDTO.fechaEntrega.Year > 1000 ? objUniformeDTO.fechaEntrega : new DateTime(2000, 01, 01);
                        //    objActualizarUniforme.calzado = objUniformeDTO.calzado;
                        //    objActualizarUniforme.camisa = objUniformeDTO.camisa;
                        //    objActualizarUniforme.pantalon = objUniformeDTO.pantalon;
                        //    objActualizarUniforme.overol = objUniformeDTO.overol;
                        //    objActualizarUniforme.uniforme_dama = objUniformeDTO.uniforme_dama;
                        //    objActualizarUniforme.otros = objUniformeDTO.otros;
                        //    objActualizarUniforme.comentarios = objUniformeDTO.comentarios;
                        //    objActualizarUniforme.entrego_calzado = objUniformeDTO.entrego_calzado == "S" ? true : false;
                        //    objActualizarUniforme.entrego_camisa = objUniformeDTO.entrego_camisa == "S" ? true : false;
                        //    objActualizarUniforme.entrego_pantalon = objUniformeDTO.entrego_pantalon == "S" ? true : false;
                        //    objActualizarUniforme.entrego_overol = objUniformeDTO.entrego_overol == "S" ? true : false;
                        //    objActualizarUniforme.entrego_uniforme_dama = objUniformeDTO.entrego_uniforme_dama == "S" ? true : false;
                        //    objActualizarUniforme.esActivo = true;
                        //    objActualizarUniforme.fechaModificacion = DateTime.Now;
                        //    objActualizarUniforme.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                        //    _context.SaveChanges();
                        //}
                        //if (objUniformeDTO.clave_empleado > 0)
                        //{
                        //    #region UNIFORMES EK ALMENOS 1 UNIFORME DEBE ESTAR ENTREGADO
                        //    //                            string strQuery = @"UPDATE sn_empl_complementaria 
                        //    //                                                        SET calzado = ?,
                        //    //                                                            camisa = ?,
                        //    //                                                            pantalon = ?,
                        //    //                                                            overol = ?,
                        //    //                                                            fecha_entrega = ?,
                        //    //                                                            entrego_calzado = ?,
                        //    //                                                            entrego_camisa = ?,
                        //    //                                                            entrego_pantalon = ?,
                        //    //                                                            entrego_overol = ?,
                        //    //                                                            comentarios = ?,
                        //    //                                                            uniforme_dama = ?,
                        //    //                                                            entrego_uniforme_dama = ?,
                        //    //                                                            otros = ?,
                        //    //                                                        WHERE clave_empleado = ?";

                        //    //                            using (var cmd = new OdbcCommand(strQuery))
                        //    //                            {
                        //    //                                OdbcParameterCollection parameters = cmd.Parameters;

                        //    //                                //SET
                        //    //                                parameters.Add("@calzado", OdbcType.VarChar).Value = !string.IsNullOrEmpty(objUniformeDTO.calzado) ? objUniformeDTO.calzado.Trim().ToUpper() : string.Empty;
                        //    //                                parameters.Add("@camisa", OdbcType.VarChar).Value = !string.IsNullOrEmpty(objUniformeDTO.camisa) ? objUniformeDTO.camisa.Trim().ToUpper() : string.Empty;
                        //    //                                parameters.Add("@pantalon", OdbcType.VarChar).Value = !string.IsNullOrEmpty(objUniformeDTO.pantalon) ? objUniformeDTO.pantalon.Trim().ToUpper() : string.Empty;
                        //    //                                parameters.Add("@overol", OdbcType.VarChar).Value = !string.IsNullOrEmpty(objUniformeDTO.overol) ? objUniformeDTO.overol.Trim().ToUpper() : string.Empty;
                        //    //                                parameters.Add("@fecha_entrega", OdbcType.Date).Value = objUniformeDTO.fechaEntrega;
                        //    //                                parameters.Add("@entrego_calzado", OdbcType.Char).Value = objUniformeDTO.entrego_calzado;
                        //    //                                parameters.Add("@entrego_camisa", OdbcType.Char).Value = objUniformeDTO.entrego_camisa;
                        //    //                                parameters.Add("@entrego_pantalon", OdbcType.Char).Value = objUniformeDTO.entrego_pantalon;
                        //    //                                parameters.Add("@entrego_overol", OdbcType.Char).Value = objUniformeDTO.entrego_overol;
                        //    //                                parameters.Add("@comentarios", OdbcType.VarChar).Value = !string.IsNullOrEmpty(objUniformeDTO.comentarios) ? objUniformeDTO.comentarios.Trim().ToUpper() : string.Empty;
                        //    //                                parameters.Add("@uniforme_dama", OdbcType.VarChar).Value = !string.IsNullOrEmpty(objUniformeDTO.uniforme_dama) ? objUniformeDTO.uniforme_dama.Trim().ToUpper() : string.Empty;
                        //    //                                parameters.Add("@entrego_uniforme_dama", OdbcType.Char).Value = objUniformeDTO.entrego_uniforme_dama;
                        //    //                                parameters.Add("@otros", OdbcType.VarChar).Value = !string.IsNullOrEmpty(objUniformeDTO.otros) ? objUniformeDTO.otros.Trim().ToUpper() : string.Empty;

                        //    //                                //WHERE
                        //    //                                parameters.Add("@clave_empleado", OdbcType.Decimal).Value = objUniformeDTO.clave_empleado > 0 ? objUniformeDTO.clave_empleado : 0;

                        //    //                                cmd.Connection = trans.Connection;
                        //    //                                cmd.Transaction = trans;
                        //    //                                cmd.ExecuteNonQuery();
                        //    //                            }

                        //    #endregion
                        //}
                        #endregion

                        //trans.Commit();
                        //dbSigoplanTransaction.Commit();
                        //SaveBitacora(16, (int)AccionEnum.ACTUALIZAR, Convert.ToInt32(objUniformeDTO.clave_empleado), JsonUtils.convertNetObjectToJson(objUniformeDTO));
                        //return true;



                    }
                    else
                    {
                        throw new Exception();
                    }

                    objLastUniforme = _context.tblRH_REC_Uniformes.Select(e => new UniformesDTO
                    {

                        id = e.id,
                        clave_empleado = e.clave_empleado,
                        fechaEntrega = e.fechaEntrega,
                        calzado = e.calzado,
                        camisa = e.camisa,
                        pantalon = e.pantalon,
                        overol = e.overol,
                        uniforme_dama = e.uniforme_dama,
                        otros = e.otros,
                        comentarios = e.comentarios,
                        entrego_calzado = e.entrego_calzado == true ? "S" : "N",
                        entrego_camisa = e.entrego_camisa == true ? "S" : "N",
                        entrego_pantalon = e.entrego_pantalon == true ? "S" : "N",
                        entrego_overol = e.entrego_overol == true ? "S" : "N",
                        entrego_uniforme_dama = e.entrego_uniforme_dama == true ? "S" : "N"

                    }).OrderByDescending(e => e.id).FirstOrDefault();
                    resultado.Add(ITEMS, objLastUniforme);
                    resultado.Add(SUCCESS, true);

                    //trans.Commit();
                    dbSigoplanTransaction.Commit();
                    SaveBitacora(16, (int)AccionEnum.ACTUALIZAR, Convert.ToInt32(objUniformeDTO.clave_empleado), JsonUtils.convertNetObjectToJson(objUniformeDTO));

                    //return true;

                }
                catch (Exception ex)
                {
                    dbSigoplanTransaction.Rollback();
                    LogError(12, 12, "ReclutamientosController", "CrearEditarFamiliares", ex, !objUniformeDTO.esActualizar ? AccionEnum.AGREGAR : AccionEnum.ACTUALIZAR, 0, objUniformeDTO);
                    resultado.Add(SUCCESS, false);
                }
                return resultado;
            }

        }

        public bool EliminarUniforme(int idUniforme)
        {
            using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    #region SE ELIMINA EL UNIFORME DEL EMPLEADO
                    //tblRH_REC_Uniformes objEliminar = _context.tblRH_REC_Uniformes.Where(w => w.id == idUniforme).FirstOrDefault();
                    //if (objEliminar != null)
                    //{
                    //    objEliminar.esActivo = false;
                    //    objEliminar.fechaModificacion = DateTime.Now;
                    //    objEliminar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                    //    _context.SaveChanges();

                    //    #region SE CREA BITACORA
                    //    SaveBitacora(16, (int)AccionEnum.ELIMINAR, idUniforme, JsonUtils.convertNetObjectToJson(objEliminar));
                    //    #endregion
                    //}

                    var objUniforme = _context.tblRH_EK_Empl_Complementaria.FirstOrDefault(e => e.esActivo && e.clave_empleado == idUniforme);

                    if (objUniforme != null)
                    {
                        objUniforme.esActivo = false;
                        _context.SaveChanges();
                    }

                    dbSigoplanTransaction.Commit();
                    #endregion
                    return true;
                }
                catch (Exception e)
                {
                    dbSigoplanTransaction.Rollback();
                    LogError(16, 16, "ReclutamientosController", "EliminarUniforme", e, AccionEnum.ELIMINAR, idUniforme, idUniforme);
                    return false;
                }
            }
        }

        public List<ArchivosDTO> GetArchivoExamenMedico(int claveEmpleado)
        {
            try
            {
                string strQuery = string.Empty;

                #region LISTADO DE EXAMEN MEDICO DEL EMPLEADO SELECCIONADO
                List<ArchivosDTO> lstArchivos = _context.tblRH_REC_Archivos.Where(w => w.claveEmpleado == claveEmpleado && w.idActividad == 73 && w.esActivo).Select(s => new ArchivosDTO
                {
                    id = s.id,
                    nombreArchivo = s.nombreArchivo,
                    descripcion = s.descripcion
                }).ToList();
                #endregion

                #region SE CREA BITACORA
                SaveBitacora(16, (int)AccionEnum.CONSULTA, 0, JsonUtils.convertNetObjectToJson(claveEmpleado));
                #endregion

                return lstArchivos;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "GetArchivoExamenMedico", e, AccionEnum.CONSULTA, 0, claveEmpleado);
                return null;
            }
        }

        public bool CrearArchivoExamenMedico(ArchivosDTO objArchivoDTO, HttpPostedFileBase objFile)
        {
            try
            {
                if (objFile != null)
                {
                    #region SE GUARDAR EL ARCHIVO
                    List<Tuple<HttpPostedFileBase, string>> listaRutaArchivos = new List<Tuple<HttpPostedFileBase, string>>();
                    var CarpetaNueva = Path.Combine(RutaServidor, objArchivoDTO.claveEmpleado.ToString());
                    ExisteCarpeta(CarpetaNueva, true);

                    string nombreArchivo = ObtenerFormatoNombreArchivoA("Reclutamiento -", objFile.FileName);
                    string rutaArchivo = Path.Combine(CarpetaNueva, nombreArchivo);
                    listaRutaArchivos.Add(Tuple.Create(objFile, rutaArchivo));

                    tblRH_REC_Archivos objArchivo = new tblRH_REC_Archivos();
                    objArchivo.idCandidato = 0;
                    objArchivo.claveEmpleado = objArchivoDTO.claveEmpleado;
                    objArchivo.idFase = 0;
                    objArchivo.idActividad = 0;
                    objArchivo.tipoArchivo = (int)TipoArchivoEnum.examenMedico;
                    objArchivo.nombreArchivo = nombreArchivo;
                    objArchivo.descripcion = objArchivoDTO.descripcion;
                    objArchivo.ubicacionArchivo = rutaArchivo;
                    objArchivo.fechaCreacion = DateTime.Now;
                    objArchivo.fechaModificacion = new DateTime(2000, 01, 01);
                    objArchivo.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                    objArchivo.idUsuarioModificacion = 0;
                    objArchivo.esActivo = true;
                    _context.tblRH_REC_Archivos.Add(objArchivo);
                    _context.SaveChanges();

                    if (GlobalUtils.SaveHTTPPostedFile(objFile, rutaArchivo) == false)
                        throw new Exception("Ocurrió un error al registrar el archivo.");
                    #endregion
                }

                #region SE CREA BITACORA
                SaveBitacora(16, (int)AccionEnum.AGREGAR, objArchivoDTO.id, JsonUtils.convertNetObjectToJson(objArchivoDTO));
                #endregion

                return true;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "CrearArchivoExamenMedico", e, AccionEnum.AGREGAR, 0, objArchivoDTO);
                return false;
            }
        }

        public bool EliminarExamenMedico(int idExamenMedico)
        {
            try
            {
                #region SE ELIMINA ARCHIVO MEDICO
                tblRH_REC_Archivos objEliminar = _context.tblRH_REC_Archivos.Where(w => w.id == idExamenMedico).FirstOrDefault();
                objEliminar.esActivo = false;
                objEliminar.fechaModificacion = DateTime.Now;
                objEliminar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                _context.SaveChanges();
                #endregion

                #region SE CREA BITACORA
                SaveBitacora(16, (int)AccionEnum.ELIMINAR, idExamenMedico, JsonUtils.convertNetObjectToJson(idExamenMedico));
                #endregion

                return true;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "EliminarExamenMedico", e, AccionEnum.ELIMINAR, idExamenMedico, idExamenMedico);
                return false;
            }
        }

        public List<ArchivosDTO> GetArchivoMaquinaria(int claveEmpleado)
        {
            try
            {
                string strQuery = string.Empty;

                #region LISTADO DE ARCHIVOS DE MAQUINARIA EMPLEADO SELECCIONADO
                List<ArchivosDTO> lstArchivos = _context.tblRH_REC_Archivos.Where(w => w.claveEmpleado == claveEmpleado && w.tipoArchivo == (int)TipoArchivoEnum.archivoMaquinaria && w.esActivo).Select(s => new ArchivosDTO
                {
                    id = s.id,
                    nombreArchivo = s.nombreArchivo,
                    descripcion = s.descripcion
                }).ToList();
                #endregion

                #region SE CREA BITACORA
                SaveBitacora(16, (int)AccionEnum.CONSULTA, 0, JsonUtils.convertNetObjectToJson(claveEmpleado));
                #endregion

                return lstArchivos;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "GetArchivoMaquinaria", e, AccionEnum.CONSULTA, 0, claveEmpleado);
                return null;
            }
        }

        public bool CrearArchivoMaquinaria(ArchivosDTO objArchivoDTO, HttpPostedFileBase objFile)
        {
            try
            {
                if (objFile != null)
                {
                    #region SE GUARDAR EL ARCHIVO
                    List<Tuple<HttpPostedFileBase, string>> listaRutaArchivos = new List<Tuple<HttpPostedFileBase, string>>();
                    var CarpetaNueva = Path.Combine(RutaServidor, objArchivoDTO.claveEmpleado.ToString());
                    ExisteCarpeta(CarpetaNueva, true);

                    string nombreArchivo = ObtenerFormatoNombreArchivoA("Reclutamiento -", objFile.FileName);
                    string rutaArchivo = Path.Combine(CarpetaNueva, nombreArchivo);
                    listaRutaArchivos.Add(Tuple.Create(objFile, rutaArchivo));

                    tblRH_REC_Archivos objArchivo = new tblRH_REC_Archivos();
                    objArchivo.idCandidato = 0;
                    objArchivo.claveEmpleado = objArchivoDTO.claveEmpleado;
                    objArchivo.idFase = 0;
                    objArchivo.idActividad = 0;
                    objArchivo.tipoArchivo = (int)TipoArchivoEnum.archivoMaquinaria;
                    objArchivo.nombreArchivo = nombreArchivo;
                    objArchivo.descripcion = objArchivoDTO.descripcion;
                    objArchivo.ubicacionArchivo = rutaArchivo;
                    objArchivo.fechaCreacion = DateTime.Now;
                    objArchivo.fechaModificacion = new DateTime(2000, 01, 01);
                    objArchivo.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                    objArchivo.idUsuarioModificacion = 0;
                    objArchivo.esActivo = true;
                    _context.tblRH_REC_Archivos.Add(objArchivo);
                    _context.SaveChanges();

                    if (GlobalUtils.SaveHTTPPostedFile(objFile, rutaArchivo) == false)
                        throw new Exception("Ocurrió un error al registrar el archivo.");
                    #endregion
                }

                #region SE CREA BITACORA
                SaveBitacora(16, (int)AccionEnum.AGREGAR, objArchivoDTO.id, JsonUtils.convertNetObjectToJson(objArchivoDTO));
                #endregion

                return true;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "CrearArchivoMaquinaria", e, AccionEnum.AGREGAR, 0, objArchivoDTO);
                return false;
            }
        }

        public bool EliminarMaquinaria(int idMaquinaria)
        {
            try
            {
                #region SE ELIMINA ARCHIVO MAQUINARIA
                tblRH_REC_Archivos objEliminar = _context.tblRH_REC_Archivos.Where(w => w.id == idMaquinaria).FirstOrDefault();
                objEliminar.esActivo = false;
                objEliminar.fechaModificacion = DateTime.Now;
                objEliminar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                _context.SaveChanges();
                #endregion

                #region SE CREA BITACORA
                SaveBitacora(16, (int)AccionEnum.ELIMINAR, idMaquinaria, JsonUtils.convertNetObjectToJson(idMaquinaria));
                #endregion

                return true;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "EliminarMaquinaria", e, AccionEnum.ELIMINAR, idMaquinaria, idMaquinaria);
                return false;
            }
        }

        public List<TabuladoresDTO> GetTabuladores(TabuladoresDTO objTabDTO)
        {
            try
            {

                #region SE OBTIENE LA NOMINA DEL EMPLEADO
                int clv_emp = Convert.ToInt32(objTabDTO.clave_empleado);

                List<TabuladoresDTO> lstNomina = _context.tblRH_EK_Tabulador_Historial.Where(x => x.clave_empleado == clv_emp && x.esActivo).OrderByDescending(x => x.id).Select(x => new TabuladoresDTO
                {
                    id = x.id,
                    fecha_cambio = x.fecha_cambio,
                    fechaAplicaCambioDate = x.fechaAplicaCambio,
                    suma = x.suma,
                    salario_base = x.salario_base,
                    complemento = x.complemento,
                    bono_de_zona = x.bono_zona,
                    motivoCambio = x.motivoCambio,
                    esNuevoTabulador = false,
                    claveEmpleado = x.clave_empleado,
                    fk_tabulador = x.FK_Tabulador,
                    fk_tabuladorDet = x.FK_TabuladorDet
                }).ToList();

                #region SE OBTIENE EL TABULADOR DEL PUESTO DEL EMPLEADO
                //int FK_Puesto = Convert.ToInt32(_context.tblRH_EK_Empleados.Where(w => w.clave_empleado == clv_emp && w.estatus_empleado == "A" && w.esActivo).Select(s => s.puesto).FirstOrDefault());
                //tblRH_TAB_Tabuladores objTabulador = _context.tblRH_TAB_Tabuladores.Where(w => w.FK_Puesto == FK_Puesto && w.tabuladorAutorizado == EstatusGestionAutorizacionEnum.AUTORIZADO && w.registroActivo).FirstOrDefault();
                //List<tblRH_TAB_TabuladoresDet> lstTabuladorDet = new List<tblRH_TAB_TabuladoresDet>();
                //if (objTabulador != null)
                //    lstTabuladorDet = _context.tblRH_TAB_TabuladoresDet.Where(w => w.FK_Tabulador == objTabulador.id && w.tabuladorDetAutorizado == EstatusGestionAutorizacionEnum.AUTORIZADO && w.registroActivo).ToList();
                #endregion

                foreach (var item in lstNomina)
                {
                    item.fechaRealNomina = item.fecha_cambio.ToShortDateString();
                    item.fechaAplicaCambio = item.fechaAplicaCambioDate.HasValue ? item.fechaAplicaCambioDate.Value.ToShortDateString() : null;

                    #region SE VERIFICA QUE TABULADOR DETALLE SE ENCUENTRA RELACIONADO AL EMPLEADO EN BASE A SU SUELDO ACTUAL
                    //decimal sueldoBase_Historial = (decimal)item.salario_base;
                    //decimal complemento_Historial = (decimal)item.complemento;
                    //decimal totalNominal_Historial = (decimal)item.suma;

                    //tblRH_TAB_TabuladoresDet objTabuladorDet = lstTabuladorDet.Where(w => w.sueldoBase == sueldoBase_Historial && w.complemento == complemento_Historial && w.totalNominal == totalNominal_Historial).FirstOrDefault();
                    //if (objTabuladorDet != null)
                    //    item.fk_tabulador = objTabuladorDet.FK_Tabulador;
                    #endregion
                }
                #endregion

                return lstNomina;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "GetTabuladores", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }

        public Dictionary<string, object> CrearTabuladorPuesto(TabuladoresPuestoDTO objTabuladorPuestoDTO)
        {
            resultado = new Dictionary<string, object>();

            using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
            {
                using (var con = getEnkontrolConexion())
                {
                    using (var trans = con.BeginTransaction())
                    {
                        try
                        {
                            if (objTabuladorPuestoDTO.tabulador <= 0)
                            {
                                throw new Exception("Debe indicar el tabulador.");
                            }

                            #region SIGOPLAN
                            #region SE OBTIENE EL PUESTO DEL EMPLEADO
                            string strQuery = string.Empty;
                            strQuery = @"SELECT puesto FROM sn_empleados WHERE clave_empleado = {0}";
                            var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                            odbc.consulta = String.Format(strQuery, objTabuladorPuestoDTO.claveEmpleado);

                            List<dynamic> lstPuesto = Data.EntityFramework.Context._contextEnkontrol
                                .Select<dynamic>(!productivo ? EnkontrolAmbienteEnum.PruebaRh : (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? EnkontrolAmbienteEnum.Rh : EnkontrolAmbienteEnum.RhArre, odbc);

                            int idPuesto = 0;
                            if (lstPuesto.Count() > 0)
                                idPuesto = Convert.ToInt32(lstPuesto[0].puesto);
                            #endregion

                            #region SE CREA TABULADOR PUESTO
                            tblRH_REC_TabuladoresPuesto objTabPuesto = new tblRH_REC_TabuladoresPuesto();
                            objTabPuesto.tabulador = objTabuladorPuestoDTO.tabulador > 0 ? objTabuladorPuestoDTO.tabulador : 0;
                            objTabPuesto.puesto = idPuesto > 0 ? idPuesto : 0;
                            objTabPuesto.salario_base = objTabuladorPuestoDTO.salario_base > 0 ? objTabuladorPuestoDTO.salario_base : 0;
                            objTabPuesto.complemento = objTabuladorPuestoDTO.complemento > 0 ? objTabuladorPuestoDTO.complemento : 0;
                            objTabPuesto.bono_de_zona = objTabuladorPuestoDTO.bono_de_zona > 0 ? objTabuladorPuestoDTO.bono_de_zona : 0;
                            objTabPuesto.year = DateTime.Now.Year;
                            objTabPuesto.esActivo = true;
                            objTabPuesto.fechaCreacion = DateTime.Now;
                            objTabPuesto.fechaModificacion = new DateTime(2000, 01, 01);
                            objTabPuesto.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                            objTabPuesto.idUsuarioModificacion = 0;
                            _context.tblRH_REC_TabuladoresPuesto.Add(objTabPuesto);
                            _context.SaveChanges();
                            #endregion
                            #endregion

                            #region Enkontrol
                            using (var cmd = new OdbcCommand(@"INSERT INTO sn_tabulador_puesto (tabulador, puesto, salario_base, complemento, bono_de_zona, year) VALUES (?, ?, ?, ?, ?, ?)"))
                            {
                                OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                parametersExplosion.Add("@tabulador", OdbcType.Numeric).Value = objTabuladorPuestoDTO.tabulador > 0 ? objTabuladorPuestoDTO.tabulador : 0;
                                parametersExplosion.Add("@puesto", OdbcType.Numeric).Value = idPuesto > 0 ? idPuesto : 0;
                                parametersExplosion.Add("@salario_base", OdbcType.Numeric).Value = objTabuladorPuestoDTO.salario_base > 0 ? objTabuladorPuestoDTO.salario_base : 0;
                                parametersExplosion.Add("@complemento", OdbcType.Numeric).Value = objTabuladorPuestoDTO.complemento > 0 ? objTabuladorPuestoDTO.complemento : 0;
                                parametersExplosion.Add("@bono_de_zona", OdbcType.Numeric).Value = objTabuladorPuestoDTO.bono_de_zona > 0 ? objTabuladorPuestoDTO.bono_de_zona : 0;
                                parametersExplosion.Add("@year", OdbcType.Numeric).Value = DateTime.Now.Year;

                                cmd.Connection = trans.Connection;
                                cmd.Transaction = trans;
                                cmd.ExecuteNonQuery();
                            }
                            #endregion

                            trans.Commit();
                            dbSigoplanTransaction.Commit();
                            SaveBitacora(0, (int)AccionEnum.AGREGAR, 0, JsonUtils.convertNetObjectToJson(objTabuladorPuestoDTO));

                            resultado.Add(SUCCESS, true);
                        }
                        catch (Exception e)
                        {
                            trans.Rollback();
                            dbSigoplanTransaction.Rollback();

                            LogError(0, 0, NombreControlador, "CrearTabuladorPuesto", e, AccionEnum.AGREGAR, 0, objTabuladorPuestoDTO);

                            resultado.Add(SUCCESS, false);
                            resultado.Add(MESSAGE, e.Message);
                        }
                    }
                }
            }

            return resultado;
        }

        public Dictionary<string, object> CrearTabulador(TabuladoresDTO objTabuladorDTO)
        {
            resultado = new Dictionary<string, object>();

            using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
            {
                using (var con = getEnkontrolConexion())
                {
                    using (var trans = con.BeginTransaction())
                    {
                        try
                        {
                            #region SIGOPLAN
                            #region SE OBTIENE LA CLAVE DEL DEPTO DEL EMPLEADO
                            string strQuery = string.Empty;
                            strQuery = @"SELECT clave_depto, puesto FROM sn_empleados WHERE clave_empleado = {0}";
                            var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                            odbc.consulta = String.Format(strQuery, objTabuladorDTO.claveEmpleado);
                            List<dynamic> lstClaveDepto = Data.EntityFramework.Context._contextEnkontrol
                                .Select<dynamic>(!productivo ? EnkontrolAmbienteEnum.PruebaRh : (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? EnkontrolAmbienteEnum.Rh : EnkontrolAmbienteEnum.RhArre, odbc);
                            int clave_depto = 0;
                            int puesto = 0;
                            if (lstClaveDepto.Count() > 0)
                            {
                                clave_depto = Convert.ToInt32(lstClaveDepto[0].clave_depto);
                                puesto = Convert.ToInt32(lstClaveDepto[0].puesto);
                            }
                            #endregion

                            #region SE OBTIENE EL CC DEL EMPLEADO
                            strQuery = string.Empty;
                            strQuery = @"SELECT cc FROM sn_departamentos WHERE clave_depto = {0}";
                            odbc = new OdbcConsultaDTO() { consulta = strQuery };
                            odbc.consulta = String.Format(strQuery, clave_depto);
                            //List<dynamic> lstCC = Data.EntityFramework.Context._contextEnkontrol.Select<dynamic>((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? EnkontrolAmbienteEnum.Rh : EnkontrolAmbienteEnum.RhArre, odbc);

                            var lstCC = _context.Select<dynamic>(new DapperDTO
                            {
                                baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                                consulta = @"SELECT cc FROM tblRH_EK_Departamentos WHERE clave_depto = @clave_depto",
                                parametros = new { clave_depto }
                            });

                            string cc = string.Empty;
                            if (lstCC.Count() > 0)
                                cc = lstCC[0].cc;
                            #endregion

                            #region SE CREA TABULADOR PUESTO
                            tblRH_REC_Tabuladores objTab = new tblRH_REC_Tabuladores();
                            objTab.idEK = 0;
                            objTab.cc = !string.IsNullOrEmpty(cc) ? cc : string.Empty;
                            objTab.fecha = DateTime.Now;
                            objTab.id_puesto = 0;
                            objTab.salario_base = 0;
                            objTab.complemento = 0;
                            objTab.bono_de_zona = 0;
                            objTab.bono_trab_especiales = 0;
                            objTab.bono_por_produccion = 0;
                            objTab.bono_otros = 0;
                            objTab.hora_extra = 0;
                            objTab.observaciones = string.Empty;
                            objTab.nomina = objTabuladorDTO.nomina > 0 ? objTabuladorDTO.nomina : 0;
                            objTab.libre = objTabuladorDTO.libre;
                            objTab.esActivo = true;
                            objTab.fechaCreacion = DateTime.Now;
                            objTab.fechaModificacion = new DateTime(2000, 01, 01);
                            objTab.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                            objTab.idUsuarioModificacion = 0;
                            _context.tblRH_REC_Tabuladores.Add(objTab);
                            _context.SaveChanges();
                            #endregion

                            #region SE ACTUALIZA LOS CAMPOS DE BANCO AL EMPLEADO EN BASE A LA CLAVE EMPLEADO
                            tblRH_REC_Empleados objActualizarEmpleado = _context.tblRH_REC_Empleados.Where(w => w.clave_empleado == objTabuladorDTO.claveEmpleado && w.esActivo).FirstOrDefault();
                            if (objActualizarEmpleado != null)
                            {
                                objActualizarEmpleado.banco = objTabuladorDTO.banco > 0 ? objTabuladorDTO.banco : 0;
                                objActualizarEmpleado.num_cta_pago = objTabuladorDTO.num_cta_pago > 0 ? objTabuladorDTO.num_cta_pago : 0;
                                objActualizarEmpleado.num_cta_pago_aho = objTabuladorDTO.num_cta_pago_aho > 0 ? objTabuladorDTO.num_cta_pago_aho : 0;
                                objActualizarEmpleado.fechaModificacion = DateTime.Now;
                                objActualizarEmpleado.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                                _context.SaveChanges();
                            }
                            #endregion
                            #endregion

                            #region Enkontrol
                            using (var cmd = new OdbcCommand(@"INSERT INTO sn_tabuladores (cc, fecha, observaciones, nomina, libre) VALUES (?, ?, ?, ?, ?)"))
                            {
                                OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                parametersExplosion.Add("@cc", OdbcType.VarChar).Value = !string.IsNullOrEmpty(cc) ? cc : string.Empty;
                                parametersExplosion.Add("@fecha", OdbcType.Date).Value = DateTime.Now;
                                parametersExplosion.Add("@observaciones", OdbcType.VarChar).Value = string.Empty;
                                parametersExplosion.Add("@nomina", OdbcType.Numeric).Value = objTabuladorDTO.nomina > 0 ? objTabuladorDTO.nomina : 0;
                                parametersExplosion.Add("@libre", OdbcType.Bit).Value = objTabuladorDTO.libre;

                                cmd.Connection = trans.Connection;
                                cmd.Transaction = trans;
                                cmd.ExecuteNonQuery();
                            }
                            #endregion

                            trans.Commit();
                            dbSigoplanTransaction.Commit();
                            SaveBitacora(0, (int)AccionEnum.AGREGAR, 0, JsonUtils.convertNetObjectToJson(objTabuladorDTO));

                            resultado.Add(SUCCESS, true);
                        }
                        catch (Exception e)
                        {
                            trans.Rollback();
                            dbSigoplanTransaction.Rollback();

                            LogError(0, 0, NombreControlador, "CrearTabulador", e, AccionEnum.AGREGAR, 0, objTabuladorDTO);

                            resultado.Add(SUCCESS, false);
                            resultado.Add(MESSAGE, e.Message);
                        }
                    }
                }
            }

            return resultado;
        }

        public Dictionary<string, object> CambiarFechaCambioTabulador(int id, DateTime fecha_cambio, int claveEmpleado)
        {
            resultado = new Dictionary<string, object>();

            using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    #region VALIDACIONES
                    if (id <= 0) { throw new Exception("Ocurrió un error al obtener la información del tabulador."); }
                    if (claveEmpleado <= 0) { throw new Exception("Ocurrió un error al obtener la información del tabulador."); }
                    #endregion

                    #region
                    // SE OBTIENE TODOS LOS TABULADORES QUE HA TENIDO EL EMPLEADO.
                    List<tblRH_EK_Tabulador_Historial> lstTabHistorialEmpleado = _context.tblRH_EK_Tabulador_Historial.Where(w => w.clave_empleado == claveEmpleado).OrderByDescending(o => o.fechaAplicaCambio).ToList();
                    if (lstTabHistorialEmpleado != null)
                    {
                        if (lstTabHistorialEmpleado.Count() >= 2)
                        {
                            // SE VERIFICA QUE EL ULTIMO CAMBIO, NO SEA MENOR AL REGISTRO DEL PENULTIO TABULADOR
                            DateTime fechaPenultimoFechaCambio = Convert.ToDateTime(lstTabHistorialEmpleado[1].fechaAplicaCambio);
                            if (fechaPenultimoFechaCambio >= fecha_cambio)
                                throw new Exception("La fecha indicada debe ser mayor en base al ultimo tabulador capturado.");
                        }
                    }
                    #endregion

                    #region SE ACTUALIZA LA FECHA DEL TABULADOR
                    var registroHistorial = _context.tblRH_EK_Tabulador_Historial.FirstOrDefault(x => x.id == id);
                    if (registroHistorial == null)
                        throw new Exception("No se encuentra la información del historial.");

                    registroHistorial.fechaAplicaCambio = fecha_cambio;
                    _context.SaveChanges();
                    #endregion

                    dbSigoplanTransaction.Commit();
                    SaveBitacora(0, (int)AccionEnum.AGREGAR, 0, JsonUtils.convertNetObjectToJson(new { id = id, fecha_cambio = fecha_cambio }));
                    resultado.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    dbSigoplanTransaction.Rollback();
                    LogError(0, 0, NombreControlador, "CambiarFechaCambioTabulador", e, AccionEnum.ACTUALIZAR, 0, new { id = id, fecha_cambio = fecha_cambio });
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                }
            }
            return resultado;
        }

        public List<ComboDTO> FillCboBancos()
        {
            try
            {
                #region FILL COMBO CAT BANCOS
                List<ComboDTO> lstBancos = new List<ComboDTO>();
                lstBancos = _context.tblRH_REC_CatBancos.Where(w => w.esActivo).OrderBy(o => o.banco).Select(s => new ComboDTO
                {
                    Value = s.id.ToString(),
                    Text = s.banco.Trim().ToUpper()
                }).ToList();
                return lstBancos;
                #endregion
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "FillCboBancos", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }

        public Dictionary<string, object> GetReporteSegCandidatos(ReporteSegCandidatosDTO objFiltroDTO)
        {
            try
            {
                Dictionary<string, object> objDic = new Dictionary<string, object>();

                #region SE OBTIENE LISTADO DE PUESTOS
                //string strQuery = @"SELECT puesto, descripcion FROM si_puestos";
                //var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                //odbc.consulta = String.Format(strQuery);
                //List<dynamic> lstPuestos = Data.EntityFramework.Context._contextEnkontrol.Select<dynamic>(EnkontrolAmbienteEnum.Rh, odbc);


                var lstPuestos = _context.Select<dynamic>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = @"SELECT puesto, descripcion 
                                FROM tblRH_EK_Puestos 
                                WHERE (descripcion NOT LIKE '%NO USAR%') AND
                                    (descripcion NOT LIKE '%NOUSAR%') AND
                                    (descripcion NOT LIKE '%NO US%') AND
                                    (descripcion NOT LIKE '%NO USA%') AND 
                                    (descripcion NOT LIKE '%NOUSAR%')",
                });
                #endregion

                #region SE OBTIENE LISTADO DE DEPARTAMENTOS
                //strQuery = string.Empty;
                //strQuery = @"SELECT clave_depto, desc_depto FROM sn_departamentos";
                //odbc.consulta = String.Format(strQuery);
                //List<dynamic> lstDepartamentos = Data.EntityFramework.Context._contextEnkontrol.Select<dynamic>(EnkontrolAmbienteEnum.Rh, odbc);

                var lstDepartamentos = _context.Select<dynamic>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = @"SELECT clave_depto, clave_depto 
                                FROM tblRH_EK_Departamentos",
                });
                #endregion

                #region SE OBTIENE LISTADO DE FASES
                List<tblRH_REC_Fases> lstFases = _context.tblRH_REC_Fases.Where(w => w.esActivo).ToList();
                #endregion

                #region SE OBTIENE LISTADO DE ACTIVIDADES
                List<tblRH_REC_Actividades> lstActividades = _context.tblRH_REC_Actividades.Where(w => w.esActivo).ToList();
                #endregion

                #region SE OBTIENE EL SEGUIMIENTO DE LOS CANDADITOS
                List<tblRH_REC_SegCandidatos> lstSegCandidatos = _context.tblRH_REC_SegCandidatos.Where(w => w.esActivo).ToList();
                List<tblRH_REC_SegDetCandidatos> lstSegDetCandidatos = _context.tblRH_REC_SegDetCandidatos.Where(w => w.esActivo).ToList();
                #endregion

                #region SE OBTIENE LISTADO DE EMPLEADOS DE SIGOPLAN
                List<tblRH_REC_Empleados> lstEmpleados = _context.tblRH_REC_Empleados.Where(w => w.esActivo).ToList();
                #endregion

                #region SE OBTIENE LOS CANDIDATOS DEL CC SELECCIONADO
                string cc = string.Empty;
                if (!string.IsNullOrEmpty(objFiltroDTO.cc))
                    cc = objFiltroDTO.cc;

                List<int> lstCandidatosID = new List<int>();
                if (!string.IsNullOrEmpty(cc))
                {
                    // SE OBTIENE LOS ID DE LAS SOLICITUDES DEL CC
                    List<int> lstSolicitudesID = _context.tblRH_REC_Solicitudes.Where(w => w.esActivo && w.cc == cc).Select(s => s.id).ToList();

                    // SE OBTIENE LOS ID DE LA GESTION DE SOLICITUDES
                    List<int> lstGestionSolicitudesID = _context.tblRH_REC_GestionSolicitudes.Where(w => w.esActivo && w.esAutorizada && lstSolicitudesID.Contains(w.idSolicitud)).Select(s => s.id).ToList();

                    // SE OBTIENE LOS CANDIDATOS DEL CC SELECCIONADO
                    lstCandidatosID = _context.tblRH_REC_GestionCandidatos.Where(w => w.esActivo && lstGestionSolicitudesID.Contains(w.idGestionSolicitud)).Select(s => s.id).ToList();
                }
                #endregion

                #region SE OBTIENE LISTADO DE CANDIDATOS A MOSTRAR EN EL DATATABLE
                List<tblRH_REC_GestionCandidatos> lstCandidatos = _context.tblRH_REC_GestionCandidatos.Where(w => !string.IsNullOrEmpty(cc) ? lstCandidatosID.Contains(w.id) : true).ToList();

                List<ReporteSegCandidatosDTO> lstCandidatosDTO = lstCandidatos.Where(w => w.esActivo).Select(s => new ReporteSegCandidatosDTO
                {
                    idCandidato = s.id,
                    idPuesto = s.virtualLstSolicitudes.idPuesto,
                    puesto = s.virtualLstSolicitudes.puesto,
                    departamento = string.Empty,
                    nombre = s.apePaterno + " " + s.apeMaterno + " " + s.nombre,
                    edad = 0,
                    nss = s.nss,
                    residencia = s.paisDesc + ", " + s.estadoDesc + ", " + s.municipioDesc,
                    telefono = !string.IsNullOrEmpty(s.celular) ? s.celular : s.telefono,
                    fechaEntrevista = new DateTime(2000, 01, 01),
                    porcProceso = 0,
                    fechaLiberacion = new DateTime(2000, 01, 01),
                    tiempoTranscurrido = 0,
                    comentarios = string.Empty,
                    fechaNacimiento = s.fechaNacimiento,
                    //claveDepto = s.virtualLstSolicitudes.clave_depto, //aqui
                    estatusFase = string.Empty,
                    estatus = s.estatus,
                    fechaCreacion = s.fechaCreacion
                }).ToList();
                foreach (var item in lstCandidatosDTO)
                {
                    #region SE OBTIENE EL NOMBRE DEL PUESTO
                    if (item.idPuesto > 0)
                        item.puesto = lstPuestos.Where(w => w.puesto == item.idPuesto).Select(s => s.descripcion).FirstOrDefault();
                    #endregion

                    #region SE OBTIENE EL NOMBRE DEL DEPARTAMENTO QUE PERTENECE DICHO PUESTO
                    //if (item.claveDepto > 0)
                    //{
                    //    string claveDepto = item.claveDepto.ToString();
                    //    item.departamento = lstDepartamentos.Where(w => w.clave_depto == claveDepto).Select(s => s.desc_depto).FirstOrDefault();
                    //}
                    #endregion

                    #region SE OBTIENE EDAD DEL CANDIDATO
                    if (item.fechaNacimiento.Year > 1000)
                    {
                        int edad = DateTime.Now.Year - item.fechaNacimiento.Year;
                        if ((item.fechaNacimiento.Month > DateTime.Now.Month) || (item.fechaNacimiento.Month == DateTime.Now.Month && item.fechaNacimiento.Day > DateTime.Now.Day))
                            edad--;

                        item.edad = edad;
                    }
                    #endregion

                    #region SE OBTIENE EL ESTATUS DE LA FASE EN BASE A LAS ACTIVIDADES FINALIZADAS

                    int cantFases = lstFases.Count();
                    int cantFasesFinalizadas = 0;
                    int cantFasesPendientes = 0;

                    // SE OBTIENE LOS ID DE LAS FASES EXISTENTES
                    List<int> lstFasesID = lstFases.Select(s => s.id).ToList();
                    foreach (var itemFase in lstFases)
                    {
                        // SE OBTIENE LOS ID DE LAS ACTIVIDADES DE LA FASE DEL FOREACH
                        List<int> lstActividadesID = lstActividades.Where(w => w.idFase == itemFase.id).Select(s => s.id).ToList();

                        // SE OBTIENE EL ID DEL SEGUIMIENTO DEL CANDIDATO Y FASE CARGADOS
                        int idSeg = lstSegCandidatos.Where(w => w.idCandidato == item.idCandidato && w.idFase == itemFase.id).Select(s => s.id).FirstOrDefault();

                        // SE OBTIENE LOS ID DE LAS ACTIVIDADES QUE SEAN DIFERENTE A PENDIENTE (Estatus: 2) EN BASE AL idSeg DEL CANDIDATO Y FASE CARGADOS
                        List<tblRH_REC_SegDetCandidatos> lstActividadesSegDetCandidato = lstSegDetCandidatos.Where(w => w.idSeg == idSeg).ToList();

                        int cantActividadesAprobadas = lstActividadesSegDetCandidato.Where(w => w.esAprobada == (int)EstatusActividadEnum.aprobado || w.esAprobada == (int)EstatusActividadEnum.noAplica).Count();
                        int cantActividadesNoAprobadas = lstActividadesSegDetCandidato.Where(w => w.esAprobada == (int)EstatusActividadEnum.noAprobado).Count();
                        int cantActividadesPendientes = lstActividadesSegDetCandidato.Where(w => w.esAprobada == (int)EstatusActividadEnum.pendiente).Count();

                        if (lstActividadesID.Count() > 0)
                        {
                            if (lstActividadesID.Count() == cantActividadesAprobadas)
                            {
                                item.estatusFase += "|" + (int)EstatusActividadEnum.aprobado;
                                cantFasesFinalizadas++;
                            }
                            else if (lstActividadesID.Count() == cantActividadesNoAprobadas)
                            {
                                item.estatusFase += "|" + (int)EstatusActividadEnum.noAprobado;
                                cantFasesFinalizadas++;
                            }
                            else
                            {
                                item.estatusFase += "|" + (int)EstatusActividadEnum.pendiente;
                                cantFasesPendientes++;
                            }
                        }
                        else
                        {
                            item.estatusFase += "|" + (int)EstatusActividadEnum.pendiente;
                            cantFasesPendientes++;
                        }
                    }

                    #region SE OBTIENE EL PORCENTAJE DEL PROCESO DEL CANDIDATO
                    if (cantFases > 0 && cantFasesFinalizadas > 0)
                        item.porcProceso = ((decimal)cantFasesFinalizadas / (decimal)cantFases) * 100;
                    #endregion

                    #endregion

                    #region SE VERIFICA SI EL CANDIDATO SE ENCUENTRA CONTRATADO
                    if (item.estatus == (int)EstatusEmpleadoEnum.contratado)
                        item.fechaLiberacion = lstEmpleados.Where(w => w.idCandidato == item.idCandidato).Select(s => s.fecha_alta).FirstOrDefault();
                    #endregion

                    #region SE OBTIENE EL TIEMPO TRANSCURRIDO HASTA SU CONTRATACIÓN
                    if (item.fechaLiberacion.Year > 2000)
                        item.tiempoTranscurrido = (DateTime.Now - item.fechaLiberacion).Days;
                    else
                        item.tiempoTranscurrido = (DateTime.Now - item.fechaCreacion).Days;

                    if (item.tiempoTranscurrido == 0)
                        item.tiempoTranscurrido = 1;
                    #endregion
                }
                objDic.Add("lstCandidatosDTO", lstCandidatosDTO);
                #endregion

                #region SE OBTIENE COLUMNAS DINAMICAS DEL DATATABLE (FASES)
                List<DTFasesDTO> lstFasesDTO = _context.tblRH_REC_Fases.Where(w => w.esActivo).Select(s => new DTFasesDTO
                {
                    Item1 = "estatusFase",
                    Item2 = s.nombreFase.ToString()
                }).ToList();
                objDic.Add("lstFasesDTO", lstFasesDTO);
                #endregion

                return objDic;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "GetReporteSegCandidatos", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }

        public Dictionary<string, object> GetDatosActualizarEmpleado(int claveEmpleado, bool esReingresoEmpleado)
        {
            Dictionary<string, object> dicListas = new Dictionary<string, object>();

            try
            {
                string strQuery = string.Empty;

                #region SE OBTIENE LA INFORMACIÓN DEL EMPLEADO, DE LA SECCIÓN: DATOS EMPLEADO | COMPAÑIA
                var lstDatos = _context.Select<DatosActualizarEmpleadoDTO>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = string.Format(
                        @"SELECT
                            t1.estatus_empleado,
                            t1.clave_empleado,
                            t1.nombre,
                            t1.ape_paterno,
                            t1.ape_materno,
                            t1.fecha_nac,
                            t1.clave_pais_nac,
                            t1.clave_estado_nac,
                            t1.clave_ciudad_nac,
                            t1.localidad_nacimiento, 
                            t1.fecha_alta,
                            t1.fecha_antiguedad,
                            t1.sexo,
                            t1.rfc,
                            t1.curp,
                            t1.requisicion,
                            t1.id_regpat,
                            t1.cc_contable,
                            t1.puesto,
                            t1.duracion_contrato,
                            t1.jefe_inmediato,
                            t1.autoriza,
                            t1.usuario_compras,
                            t1.sindicato, 
                            t1.clave_depto,
                            t1.nss,
                            t1.unidad_medica,
                            t1.tipo_formula_imss,
                            t1.fecha_contrato,
                            t1.desc_puesto as actividades,
                            t1.banco,
                            t1.num_cta_pago,
                            t1.num_cta_fondo_aho,
                            t1.tipo_nomina,
                            t1.tabulador,
                            t1.solicita_tarjeta,
                            t1.autoriza,
                            t2.descripcion_puesto,
                            t2.descripcion,
                            antiguedad = 0,
                            nombreJefeInmediato = '',
                            nombreAutoriza = '',
                            nombreRegPat = '',
                            t4.nombre AS nombreTipoContrato,
                            t5.desc_depto,
                            t1.idUsuarioCreacion,
                            t1.idUsuarioModificacion,
                            t5.desc_depto,
                            t1.estatusEnvioCorreo,
                            CASE WHEN t6.idTabuladorDet IS NULL THEN 0 ELSE t6.idTabuladorDet END AS idCategoria,
                            t1.clave_departamento_nac_PERU,
                            t1.cuspp,
                            t1.CPCIF,
                            t1.fecha_fin
                        FROM tblRH_EK_Empleados AS t1
                        LEFT JOIN tblRH_EK_Puestos AS t2 ON t1.puesto = t2.puesto
                        LEFT JOIN tblRH_EK_Empl_Duracion_Contrato AS t4 ON t1.duracion_contrato = t4.clave_duracion
                        LEFT JOIN tblRH_EK_Departamentos AS t5 ON t1.clave_depto = t5.clave_depto AND t1.cc_contable = t5.cc
                        LEFT JOIN tblRH_REC_Requisicion AS t6 ON t6.id = t1.requisicion
                        WHERE
                            clave_empleado = @cEmpl"),
                    parametros = new { cEmpl = claveEmpleado }
                }).ToList();

                if (lstDatos.Count <= 0)
                    throw new Exception("Ocurrió un error al obtener la información del usuario.");

                foreach (var item in lstDatos)
                {
                    var ccDesc = _ccFS_SP.GetCCNomina(item.cc_contable);
                    item.nombreCC = ccDesc != null ? "[" + ccDesc.cc + "] " + ccDesc.descripcion : "";
                    item.fecha_nacString = item.fecha_nac.ToString("yyyy-MM-dd");
                }

                var _cc = lstDatos.First().cc_contable;
                //tblRH_EK_Plantilla_Personal plantilla = _context.tblRH_EK_Plantilla_Personal.FirstOrDefault(x => x.cc == _cc && x.estatus == "A" && x.esActivo);
                var plantilla = _context.tblRH_TAB_PlantillasPersonal.FirstOrDefault(x => x.cc == _cc && x.plantillaAutorizada == EstatusGestionAutorizacionEnum.AUTORIZADO && x.registroActivo);
                if (plantilla != null)
                    //dicListas.Add("plantilla", plantilla.id_plantilla);
                    dicListas.Add("plantilla", plantilla.id);

                var lstPuestos = _context.tblRH_EK_Puestos.ToList();

                int edad = DateTime.Now.Year - lstDatos[0].fecha_nac.Year;
                if ((lstDatos[0].fecha_nac.Month > DateTime.Now.Month) || (lstDatos[0].fecha_nac.Month == DateTime.Now.Month && lstDatos[0].fecha_nac.Day > DateTime.Now.Day))
                    edad--;

                lstDatos[0].edad = edad;

                foreach (var item in lstDatos)
                {
                    #region SE OBTIENE LA CANTIDAD DE DÍAS DE ANTIGUEDAD DEL EMPLEADO
                    DateTime fechaAlta = Convert.ToDateTime(item.fecha_alta);
                    int antiguedad = (DateTime.Now - fechaAlta).Days;
                    item.antiguedad = antiguedad.ToString();
                    #endregion

                    #region SE OBTIENE EL NOMBRE DEL JEFE INMEDIATO Y DEL AUTORIZANTE
                    if (item.jefe_inmediato > 0)
                    {
                        //strQuery = string.Empty;
                        //strQuery = @"SELECT nombre, ape_paterno, ape_materno FROM sn_empleados WHERE clave_empleado = {0}";
                        //odbc = new OdbcConsultaDTO() { consulta = strQuery };
                        //odbc.consulta = String.Format(strQuery, item.jefe_inmediato);
                        //List<dynamic> lstJefeInmediato = Data.EntityFramework.Context._contextEnkontrol.Select<dynamic>(EnkontrolAmbienteEnum.Rh, odbc);
                        var lstJefeInmediato = _context.tblRH_EK_Empleados.Where(x => x.clave_empleado == item.jefe_inmediato).ToList();


                        if (lstJefeInmediato.Count() == 1)
                        {
                            int puestoJefeIn = Convert.ToInt32(lstJefeInmediato[0].puesto);

                            item.nombreJefeInmediato = lstJefeInmediato[0].nombre + " " + lstJefeInmediato[0].ape_paterno + " " + lstJefeInmediato[0].ape_materno;
                            item.puestoJefeInmediato = lstPuestos.FirstOrDefault(e => e.puesto == puestoJefeIn).descripcion;
                        }

                    }

                    if (item.autoriza > 0)
                    {
                        //strQuery = string.Empty;
                        //strQuery = @"SELECT nombre, ape_paterno, ape_materno FROM sn_empleados WHERE clave_empleado = {0}";
                        //odbc = new OdbcConsultaDTO() { consulta = strQuery };
                        //odbc.consulta = String.Format(strQuery, item.autoriza);
                        //List<dynamic> lstAutorizante = Data.EntityFramework.Context._contextEnkontrol.Select<dynamic>(EnkontrolAmbienteEnum.Rh, odbc);
                        var lstAutorizante = _context.tblRH_EK_Empleados.Where(x => x.clave_empleado == item.autoriza).ToList();

                        if (lstAutorizante.Count() == 1)
                        {
                            int puestoautoriza = Convert.ToInt32(lstAutorizante[0].puesto);

                            item.nombreAutoriza = lstAutorizante[0].nombre + " " + lstAutorizante[0].ape_paterno + " " + lstAutorizante[0].ape_materno;
                            item.puestoAutoriza = lstPuestos.FirstOrDefault(e => e.puesto == puestoautoriza).descripcion;
                        }
                    }
                    #endregion

                    #region SE OBTIENE EL NOMBRE DEL REG. PATRONAL
                    if (item.id_regpat > 0)
                    {
                        //strQuery = string.Empty;
                        //strQuery = @"SELECT nombre_corto FROM sn_registros_patronales WHERE clave_reg_pat = {0}";
                        //odbc = new OdbcConsultaDTO() { consulta = strQuery };
                        //odbc.consulta = String.Format(strQuery, item.id_regpat);
                        //List<dynamic> lstNombreRegPat = Data.EntityFramework.Context._contextEnkontrol.Select<dynamic>(EnkontrolAmbienteEnum.Rh, odbc);
                        var lstNombreRegPat = _context.tblRH_EK_Registros_Patronales.Where(x => x.clave_reg_pat == item.id_regpat).ToList();

                        if (lstNombreRegPat.Count() == 1)
                        {
                            item.nombreRegPat = lstNombreRegPat[0].nombre_corto;
                            item.descripcionRegPat = lstNombreRegPat[0].desc_reg_pat;
                        }
                    }
                    #endregion

                    #region SE OBTIENE EL NOMBRE DEL USUARIO QUE REGISTRO AL EMPLEADO SELECCIONADO
                    if (item.usuario_compras > 0)
                    {
                        //strQuery = string.Empty;
                        //strQuery = @"SELECT descripcion FROM empleados WHERE empleado = {0}";
                        //odbc = new OdbcConsultaDTO() { consulta = strQuery };
                        //odbc.consulta = String.Format(strQuery, item.usuario_compras);
                        //List<dynamic> lstNombreUsuarioReg = Data.EntityFramework.Context._contextEnkontrol.Select<dynamic>(EnkontrolAmbienteEnum.Prod, odbc);
                        var idsUsuario = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.empleado == item.usuario_compras);
                        if (idsUsuario != null)
                        {
                            var usuarioReg = _context.tblP_Usuario.First(x => x.id == idsUsuario.idUsuario);
                            item.nombreUsuarioReg = (usuarioReg.apellidoPaterno + " " + usuarioReg.apellidoMaterno + " " + usuarioReg.nombre).ToUpper();
                        }
                    }

                    if (string.IsNullOrEmpty(item.nombreUsuarioReg))
                        item.nombreUsuarioReg = "N/A";
                    #endregion

                    if (item.estatus_empleado == "A")
                    {
                        item.estatusEnvioCorreo = EstatusEnvioCorreoEnum.enviado;
                    }
                }

                #region SE VERIFICA SI EL EMPLEADO A CONSULTAR, EXISTE EN SIGOPLAN CP/ARR
                int idUsuarioEK = 0;
                string usuarioModificacion = string.Empty;
                tblRH_REC_Empleados objEmpleado = _context.tblRH_REC_Empleados.Where(w => w.clave_empleado == claveEmpleado && w.esActivo).FirstOrDefault();
                if (objEmpleado != null)
                {
                    if (objEmpleado.idUsuarioModificacion == 0)
                    {
                        idUsuarioEK = _context.tblP_Usuario_Enkontrol.Where(w => w.idUsuario == objEmpleado.idUsuarioCreacion).Select(s => s.empleado).FirstOrDefault();
                        usuarioModificacion = _context.tblP_Usuario.Where(w => w.id == objEmpleado.idUsuarioCreacion).Select(s => s.apellidoPaterno + " " + s.apellidoMaterno + " " + s.nombre).FirstOrDefault();
                    }
                    else if (objEmpleado.idUsuarioModificacion > 0)
                    {
                        idUsuarioEK = _context.tblP_Usuario_Enkontrol.Where(w => w.idUsuario == objEmpleado.idUsuarioModificacion).Select(s => s.empleado).FirstOrDefault();
                        usuarioModificacion = _context.tblP_Usuario.Where(w => w.id == objEmpleado.idUsuarioModificacion).Select(s => s.apellidoPaterno + " " + s.apellidoMaterno + " " + s.nombre).FirstOrDefault();
                    }
                }
                else
                {
                    idUsuarioEK = lstDatos[0].usuario_compras;
                    usuarioModificacion = lstDatos[0].nombreUsuarioReg;
                }

                lstDatos[0].idUsuarioEK = idUsuarioEK;
                lstDatos[0].usuarioModificacion = !string.IsNullOrEmpty(usuarioModificacion) ? usuarioModificacion : "N/A";
                #endregion

                #endregion

                #region SE OBTIENE: GENERALES Y CONTACTO - BENEFICIARIO - EN CASO DE EMERGENCIA.
                //                strQuery = @"SELECT clave_empleado, estado_civil, fecha_planta, ocupacion, ocupacion_abrev, num_cred_elector, domicilio, numero_exterior, numero_interior, colonia, estado_dom, ciudad_dom, codigo_postal, 
                //                                    tel_casa, tel_cel, email, tipo_casa, tipo_sangre, alergias, parentesco_ben, fecha_nac_ben, codigo_postal_ben, paterno_ben, materno_ben, nombre_ben, estado_ben, ciudad_ben, colonia_ben, 
                //                                    domicilio_ben, num_ext_ben, num_int_ben, en_accidente_nombre, en_accidente_telefono, en_accidente_direccion
                //                                        FROM sn_empl_grales
                //                                            WHERE clave_empleado = {0}";
                //                odbc = new OdbcConsultaDTO() { consulta = strQuery };
                //                odbc.consulta = String.Format(strQuery, claveEmpleado);
                //                List<DatosActualizarEmpleadoDTO> lstGenerales = Data.EntityFramework.Context._contextEnkontrol.Select<DatosActualizarEmpleadoDTO>(EnkontrolAmbienteEnum.Rh, odbc);

                var lstGenerales = _context.Select<DatosActualizarEmpleadoDTO>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = @"SELECT clave_empleado, estado_civil, fecha_planta, ocupacion, ocupacion_abrev, num_cred_elector, num_dni, cedula_cuidadania, domicilio, numero_exterior, numero_interior, colonia, estado_dom, cuidado_dom as ciudad_dom, codigo_postal, 
                                    tel_casa, tel_cel, email, tipo_casa, tipo_sangre, alergias, parentesco_ben, fecha_nac_ben, codigo_postal_ben, parterno_ben as paterno_ben, materno_ben, nombre_ben, estado_ben, cuidad_ben as ciudad_ben, colonia_ben, 
                                    domicilio_ben, num_ext_ben, num_int_ben, en_accidente_nombre, en_accidente_telefono, en_accidente_direccion, pais_dom, pais_ben, ben_num_dni, PERU_departamento_ben, PERU_departamento_dom
                                        FROM tblRH_EK_Empl_Grales
                                            WHERE clave_empleado = @clvEmp",
                    parametros = new { clvEmp = claveEmpleado }
                }).ToList();

                //DESCRIPCIONES PARA REPORTE
                int idParentesco = lstGenerales.Count() > 0 ? Convert.ToInt32(!string.IsNullOrEmpty(lstGenerales[0].parentesco_ben) ? lstGenerales[0].parentesco_ben : "0") : 0;
                int idTipoSangre = lstGenerales.Count() > 0 ? Convert.ToInt32(!string.IsNullOrEmpty(lstGenerales[0].tipo_sangre) ? lstGenerales[0].tipo_sangre : "0") : 0;
                int idUMF = Convert.ToInt32(!string.IsNullOrEmpty(lstDatos[0].unidad_medica) ? lstDatos[0].unidad_medica : "0");
                int idPaisNac = lstGenerales.Count() > 0 ? Convert.ToInt32(lstGenerales[0].pais_ben) : 0;
                int idEstadoNac = Convert.ToInt32(lstDatos[0].clave_estado_nac);
                int idCuidadDom = lstGenerales.Count() > 0 ? Convert.ToInt32(lstGenerales[0].ciudad_dom) : 0;
                int idEstadoDom = lstGenerales.Count() > 0 ? Convert.ToInt32(lstGenerales[0].estado_dom) : 0;
                int idPaisDom = lstGenerales.Count() > 0 ? Convert.ToInt32(lstGenerales[0].pais_dom) : 0;
                int idTipoCasa = lstGenerales.Count() > 0 ? Convert.ToInt32(!string.IsNullOrEmpty(lstGenerales[0].tipo_casa) ? lstGenerales[0].tipo_casa : "0") : 0;
                int idBanco = lstDatos[0].banco ?? 0;
                int idDepartamentoNac = string.IsNullOrEmpty(lstDatos[0].clave_departamento_nac_PERU) ? Convert.ToInt32(lstDatos[0].clave_departamento_nac_PERU) : 0;
                int idDepartamentoNacDom = lstGenerales.Count() > 0 && lstGenerales[0].PERU_departamento_dom != null ? lstGenerales[0].PERU_departamento_dom.Value : 0;

                var objdescripcion = _context.tblRH_EK_Parentesco.FirstOrDefault(e => e.id == idParentesco);
                var objtipoSangre = _context.tblP_CatTipoSangre.FirstOrDefault(e => e.id == idTipoSangre);
                var objdesc_banco = _context.tblRH_EK_Bancos.FirstOrDefault(e => e.id == idBanco);
                var objdescripcionUMF = _context.tblRH_EK_Unidad_Medica.FirstOrDefault(e => e.id == idUMF);
                var objdescripcionEdoNac = _context.tblRH_EK_Estados.FirstOrDefault(e => e.clave_estado == idEstadoNac && e.clave_pais == idPaisNac);
                var objdescripcionCuidadDom = _context.tblRH_EK_Cuidades.FirstOrDefault(e => e.clave_cuidad == idCuidadDom && e.clave_estado == idEstadoDom && e.clave_pais == idPaisDom);
                var objdescripcionEdoDom = _context.tblRH_EK_Estados.FirstOrDefault(e => e.clave_estado == idEstadoDom && e.clave_pais == idPaisDom);
                var objtipoCasa = _context.tblP_CatTipoCasa.FirstOrDefault(e => e.id == idTipoCasa);
                var lstGeoDepartamentos = _context.tblRH_EK_Geo_Departamentos.ToList();

                var objDeparamentoNac = lstGeoDepartamentos.FirstOrDefault(e => e.clave_depto == idDepartamentoNac);
                var objDeparamentoDom = lstGeoDepartamentos.FirstOrDefault(e => e.clave_depto == idDepartamentoNacDom);

                if (lstGenerales.Count() > 0) { lstGenerales[0].strParentesco_ben = objdescripcion != null ? objdescripcion.descripcion : ""; }
                if (lstGenerales.Count() > 0) { lstGenerales[0].strTipo_sangre = objtipoSangre != null ? objtipoSangre.tipoSangre : ""; }
                if (lstDatos.Count() > 0) { lstDatos[0].strBanco = objdesc_banco != null ? objdesc_banco.desc_banco : ""; }
                if (lstDatos.Count() > 0) { lstDatos[0].strUnidad_medica = objdescripcionUMF != null ? objdescripcionUMF.descripcion : ""; }
                if (lstDatos.Count() > 0) { lstDatos[0].str_estado_nac = objdescripcionEdoNac != null ? objdescripcionEdoNac.descripcion : ""; }
                if (lstDatos.Count() > 0) { lstDatos[0].str_ciudad_dom = objdescripcionCuidadDom != null ? objdescripcionCuidadDom.descripcion : ""; }
                if (lstGenerales.Count() > 0) { lstGenerales[0].str_estado_dom = objdescripcionEdoDom != null ? objdescripcionEdoDom.descripcion : ""; }
                if (lstGenerales.Count() > 0) { lstGenerales[0].strTipo_casa = objtipoCasa != null ? objtipoCasa.tipoCasa : ""; }
                if (lstDatos.Count() > 0) { lstDatos[0].PERU_descDepartamento = objDeparamentoNac != null ? objDeparamentoNac.desc_depto : ""; }
                if (lstGenerales.Count() > 0) { lstGenerales[0].PERU_descDepartamento_dom = objDeparamentoDom != null ? objDeparamentoDom.desc_depto : ""; }
                //lstDatos[0].aut

                //OBTENER ID ESTADO CIVIL
                bool esDiana = false;
                if (esDiana != null)
                {
                    if (vSesiones.sesionUsuarioDTO.idPerfil == (int)PerfilUsuarioEnum.ADMINISTRADOR)
                        esDiana = true;
                    else
                    {
                        if (vSesiones.sesionUsuarioDTO.id == 1019 || vSesiones.sesionUsuarioDTO.id == 79377 || vSesiones.sesionUsuarioDTO.id == 1041 || vSesiones.sesionUsuarioDTO.id == 79552 || vSesiones.sesionUsuarioDTO.id == 3381) //Diana Alvarez, Maricela
                            esDiana = true;
                        else
                            esDiana = false;
                    }
                }
                #endregion

                #region SE OBTIENE DATOS STARSFOT EMPLEADO PERU
                tblRH_REC_InfoEmpleadoPeru objDatosPeru = null;

                if ((MainContextEnum)vSesiones.sesionEmpresaActual == MainContextEnum.PERU)
                {
                    objDatosPeru = _context.tblRH_REC_InfoEmpleadoPeru.FirstOrDefault(e => e.registroActivo && e.claveEmpleado == claveEmpleado);
                }

                #endregion

                dicListas.Add(SUCCESS, true);
                //CCS A OCULTAR
                lstDatos[0].lstCCOcultar = _context.tblRH_REC_OcultarCC.Where(e => e.esActivo).Select(e => e.cc).ToList();

                dicListas.Add("lstGenerales", lstGenerales);
                dicListas.Add("lstDatos", lstDatos);
                dicListas.Add("objDatosPeru", objDatosPeru);
                dicListas.Add("esDiana", esDiana);
                dicListas.Add("esSalarios", UsuarioVerSalarios());

                return dicListas;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "GetDatosActualizarEmpleado", e, AccionEnum.CONSULTA, claveEmpleado, 0);
                dicListas.Add(SUCCESS, false);
                dicListas.Add(MESSAGE, e.Message);
                return dicListas;
            }
        }

        public bool EliminarContratoFirmado(int idArchivo, int claveEmpleado)
        {
            try
            {
                #region SE ELIMINA EL CONTRATO DEL EMPLEADO
                tblRH_REC_Archivos objEliminar = _context.tblRH_REC_Archivos.Where(w => w.id == idArchivo && w.claveEmpleado == claveEmpleado && w.tipoArchivo == (int)TipoArchivoEnum.contratoFirmado).FirstOrDefault();
                if (objEliminar != null)
                {
                    objEliminar.esActivo = false;
                    objEliminar.fechaModificacion = DateTime.Now;
                    objEliminar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                    _context.SaveChanges();

                    #region SE CREA BITACORA
                    SaveBitacora(16, (int)AccionEnum.ELIMINAR, idArchivo, JsonUtils.convertNetObjectToJson(objEliminar));
                    #endregion
                }
                #endregion
                return true;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "EliminarContratoFirmado", e, AccionEnum.ELIMINAR, idArchivo, idArchivo);
                return false;
            }
        }

        public List<ArchivosDTO> GetContratosFirmados(int claveEmpleado)
        {
            try
            {
                #region LISTADO DE CONTRATOS FIRMADOS POR EL EMPLEADO
                List<ArchivosDTO> lstArchivos = _context.tblRH_REC_Archivos.Where(w => w.claveEmpleado == claveEmpleado && w.tipoArchivo == (int)TipoArchivoEnum.contratoFirmado && w.esActivo).Select(s => new ArchivosDTO
                {
                    id = s.id,
                    nombreArchivo = s.nombreArchivo,
                    descripcion = s.descripcion,
                    claveEmpleado = s.claveEmpleado
                }).ToList();
                #endregion

                #region SE CREA BITACORA
                SaveBitacora(16, (int)AccionEnum.CONSULTA, 0, JsonUtils.convertNetObjectToJson(lstArchivos));
                #endregion

                return lstArchivos;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "GetContratosFirmados", e, AccionEnum.CONSULTA, 0, claveEmpleado);
                return null;
            }
        }

        public Dictionary<string, object> GuardarExcelActoCondicionCargaMasiva(HttpPostedFileBase _archivoExcel)
        {
            var resultado = new Dictionary<string, object>();
            using (var excel = new ExcelPackage(_archivoExcel.InputStream))
            {
                try
                {
                    #region SE GUARDAR EL ARCHIVO
                    var fechaArchivo = DateTime.Now.ToString("yyyy-MM-ddTHHmmssfff");
                    var idUsuario = vSesiones.sesionUsuarioDTO.id.ToString();
                    var extension = System.IO.Path.GetExtension(_archivoExcel.FileName);
                    var archivoNombreNuevo = fechaArchivo + "_UsuarioID_" + (int)vSesiones.sesionUsuarioDTO.id + extension;

#if DEBUG
                    DirectoryInfo directorio = new DirectoryInfo(@"c:\CONTRATOS_FIRMADOS\" + idUsuario);
#else
                        DirectoryInfo directorio = new DirectoryInfo(RutaContratosFirmados);
#endif
                    if (!directorio.Exists)
                        directorio.Create();

                    var pathCompleto = System.IO.Path.Combine(directorio.ToString(), archivoNombreNuevo);

                    _archivoExcel.SaveAs(pathCompleto);
                    #endregion
                }
                catch (Exception ex)
                {
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, ex.Message);
                    LogError(0, 0, "ActoCondicionController", "CargarRaya", ex, AccionEnum.AGREGAR, 0, 0);
                }
            }
            return resultado;
        }

        #region METODOS PARA DESCARGAR EXCEL, SOLAMENTE EMPLEADOS CON ESTATUS PENDIENTE
        public List<LayoutAltasRHDTO> GetEmpleadosLayoutAlta(List<string> _lstClaveEmpleados)
        {
            try
            {
                #region SE OBTIENE LISTADO DE CC DE LOS EMPLEADOS SELECCIONADOS
                string strQuery = @"SELECT t2.cc FROM sn_empleados AS t1 INNER JOIN sn_departamentos AS t2 ON t1.clave_depto = t2.clave_depto WHERE t1.clave_empleado IN ({0})";
                var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                odbc.consulta = String.Format(strQuery, string.Join(",", _lstClaveEmpleados));
                //List<tblP_CC> lstCC = Data.EntityFramework.Context._contextEnkontrol.Select<tblP_CC>((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? EnkontrolAmbienteEnum.Rh : EnkontrolAmbienteEnum.RhArre, odbc);

                var lstCC = _context.Select<tblP_CC>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = @"SELECT t2.cc FROM tblRH_EK_Empleados AS t1 INNER JOIN tblRH_EK_Departamentos AS t2 ON t1.clave_depto = t2.clave_depto WHERE t1.clave_empleado IN @_lstClaveEmpleados",
                    parametros = new { _lstClaveEmpleados }
                });

                List<string> lstCCStr = new List<string>();
                foreach (var item in lstCC)
                {

                    lstCCStr.Add(item.cc.Trim());
                }
                #endregion

                #region
                DateTime fechaInicio = new DateTime(2000, 01, 01);
                int anioActual = DateTime.Now.Year;
                DateTime fechaFin = new DateTime(anioActual, 12, 31);

                string query = "SELECT ";
                query += " e.tipo_nomina AS dias , e.clave_empleado AS EMP_TRAB,";
                query += "CONVERT(CHAR(20) ,e.fecha_antiguedad ,103)AS EMP_ALTA, ";
                query += "(e.ape_paterno+'/'+e.ape_materno+'/'+e.nombre) AS EMP_NOM, ";
                query += "e.rfc AS EMP_RFC, ";
                query += "e.curp AS EMP_CURP,";
                query += "1 AS EMP_CC,";
                query += "e.cc_contable +' '+c.descripcion AS EMP_DP,";
                query += "2 AS EMP_SM,";
                query += "e.sexo AS EMP_SEXO,";
                query += "e.clave_estado_nac AS EMP_NAC_EF,";
                query += "CONVERT(CHAR(20), e.fecha_nac,103) AS EMP_NAC_FECHA,";
                query += "CONVERT(CHAR(20),(CASE WHEN";
                query += "(SELECT TOP 1 ser.fecha_reingreso ";
                query += "FROM sn_empl_recontratacion as ser where ser.clave_empleado = e.clave_empleado ";
                query += "AND ser.cc = e.cc_contable ";
                query += "AND ser.fecha_reingreso > e.fecha_alta  ";
                query += "ORDER BY ser.fecha_reingreso DESC) ";
                query += "IS NULL THEN null ELSE ";
                query += "(SELECT TOP 1 ser.fecha_reingreso ";
                query += "FROM sn_empl_recontratacion as ser where ser.clave_empleado = e.clave_empleado ";
                query += "AND ser.cc = e.cc_contable ";
                query += "AND ser.fecha_reingreso > e.fecha_alta  ";
                query += "ORDER BY ser.fecha_reingreso DESC) END) ,103) AS EMP_ULTIMO_REINGRESO,";
                query += "15 AS EMP_AGUINALDO,";
                query += "6 AS EMP_VACACIONES,";
                query += "(case e.tipo_nomina when 1 then 1 when 4 then 2 else 2 end) AS EMP_NOMINA,";
                query += "1 AS EMP_IMSS_TIPO,";
                query += "(SELECT top 1 ( case reg_pat when 31 then 5  when 33 then 6 when 24 then 2 when 30 then 4 when 23 then 1 else 1 end) as EMP_SUCURSAL FROM sn_empl_reg_pat_historial where clave_empleado=e.clave_empleado order by fecha_cambio desc),";
                query += "CASE e.sindicato WHEN 'S' THEN 1 WHEN 'N' THEN 2 ELSE 2 END  AS EMP_CL,";
                query += "1 AS EMP_TURNO,";
                query += "e.puesto AS EMP_PUESTO,";
                query += "pu.descripcion as EMP_PUESTO_DESCRIPCION,";
                query += "e.nss AS EMP_NSS,";
                query += "e.unidad_medica AS EMP_UMF,";
                query += "CONVERT(CHAR(20),(CASE WHEN";
                query += "(SELECT TOP 1 ser.fecha_reingreso ";
                query += "FROM sn_empl_recontratacion as ser where ser.clave_empleado = e.clave_empleado ";
                query += "AND ser.cc = e.cc_contable ";
                query += "AND ser.fecha_reingreso > e.fecha_alta  ";
                query += "ORDER BY ser.fecha_reingreso DESC) ";
                query += "IS NULL THEN e.fecha_alta ELSE ";
                query += "(SELECT TOP 1 ser.fecha_reingreso ";
                query += "FROM sn_empl_recontratacion as ser where ser.clave_empleado = e.clave_empleado ";
                query += "AND ser.cc = e.cc_contable ";
                query += "AND ser.fecha_reingreso > e.fecha_alta  ";
                query += "ORDER BY ser.fecha_reingreso DESC) END) ,103) AS EMP_FSUELDO,";
                query += "(SELECT top 1 salario_base FROM sn_tabulador_historial TBH WHERE TBH.clave_empleado =  e.clave_empleado ORDER BY id desc) AS EMP_SUELDO,";
                query += "(SELECT top 1 complemento FROM sn_tabulador_historial TBH WHERE TBH.clave_empleado =  e.clave_empleado ORDER BY id desc) AS EMP_SUELDO1,";
                query += "(SELECT top 1 bono_zona FROM sn_tabulador_historial TBH WHERE TBH.clave_empleado =  e.clave_empleado ORDER BY id desc) AS EMP_SUELDO2,";
                query += "'' AS EMP_SDI, ";
                query += "CASE empg.tel_casa WHEN NULL THEN '' ELSE empg.tel_casa END AS EMP_DIR_TELEFONO,  ";
                query += "CASE empg.tel_cel WHEN NULL THEN '' ELSE empg.tel_cel END AS EMP_DIR_CELULAR,  ";
                query += "empg.domicilio AS EMP_DIR_CALLE,empg.numero_exterior AS EMP_DIR_NO,empg.colonia AS EMP_DIR_COLONIA,empg.codigo_postal AS EMP_DIR_CP,";
                query += "cd.descripcion AS EMP_DIR_MUNICIPIO,cd.descripcion AS EMP_DIR_POBLACION, est.descripcion AS EMP_DIR_ESTADO,";
                query += "(empg.nombre_ben+'/'+empg.paterno_ben+'/'+empg.materno_ben) AS NOM_BENEF,(select top 1 SNP.descripcion FROM sn_parentesco SNP where SNP.id = empg.parentesco_ben) AS PARENT_BENEF, empg.fecha_nac_ben AS BENEF_NAC_FECHA ";
                query += "FROM sn_empleados AS e ";
                query += "INNER JOIN sn_empleados AS ne ON e.jefe_inmediato=ne.clave_empleado  ";
                query += "INNER JOIN DBA.cc AS c ON c.cc = e.cc_contable  ";
                query += "INNER JOIN si_puestos AS pu ON e.puesto = pu.puesto  ";
                query += "INNER JOIN sn_tipos_nomina AS tn ON e.tipo_nomina = tn.tipo_nomina  ";
                query += "INNER JOIN sn_departamentos AS dp ON dp.clave_depto = e.clave_depto ";
                query += "INNER JOIN sn_empl_grales AS empg ON empg.clave_empleado = e.clave_empleado  ";
                query += "INNER JOIN sn_estados AS est ON (est.clave_estado = empg.estado_dom and est.clave_pais=e.clave_pais_nac) ";
                query += "INNER JOIN sn_ciudades AS cd ON (cd.clave_ciudad = empg.ciudad_dom and cd.clave_pais=e.clave_pais_nac and cd.clave_estado=empg.estado_dom) ";
                query += "WHERE e.cc_contable in (" + string.Join(",", lstCCStr) + ") AND e.estatus_empleado = 'A'  AND ";
                query += "CASE WHEN EMP_ULTIMO_REINGRESO IS NULL THEN  convert(datetime, EMP_ALTA , 103) ELSE  convert(datetime, EMP_ULTIMO_REINGRESO , 103) END ";
                query += "BETWEEN '" + fechaInicio.ToString("yyyy-MM-dd") + "' AND '" + fechaFin.ToString("yyyy-MM-dd") + "'";
                //query += "BETWEEN '" + fechaInicio.ToString("yyyy-MM-dd") + "' AND '" + fechaFin.ToString("yyyy-MM-dd") + "' AND EMP_TRAB IN ("+string.Join(",", _lstClaveEmpleados)+")";

                //var result = (List<LayoutAltasRHDTO>)ContextEnKontrolNomina.Where(query).ToObject<List<LayoutAltasRHDTO>>();

                var resultFiltered = new List<LayoutAltasRHDTO>();

                var result = _context.Select<LayoutAltasRHDTO>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = @"SELECT 
                                    e.tipo_nomina AS dias , e.clave_empleado AS EMP_TRAB,
                                    CONVERT(CHAR(20) ,e.fecha_antiguedad ,103)AS EMP_ALTA, 
                                    (e.ape_paterno+'/'+e.ape_materno+'/'+e.nombre) AS EMP_NOM, 
                                    e.rfc AS EMP_RFC, 
                                    e.curp AS EMP_CURP,
                                    1 AS EMP_CC,
                                    e.cc_contable +' '+c.ccDescripcion AS EMP_DP,
                                    2 AS EMP_SM,
                                    e.sexo AS EMP_SEXO,
                                    e.clave_estado_nac AS EMP_NAC_EF,
                                    CONVERT(CHAR(20), e.fecha_nac,103) AS EMP_NAC_FECHA,
                                    CONVERT(CHAR(20),(CASE WHEN
                                    (SELECT TOP 1 ser.fecha_reingreso 
                                    FROM tblRH_EK_Empl_Recontratacion as ser where ser.clave_empleado = e.clave_empleado 
                                    AND ser.cc = e.cc_contable 
                                    AND ser.fecha_reingreso > e.fecha_alta  
                                    ORDER BY ser.fecha_reingreso DESC) 
                                    IS NULL THEN null ELSE 
                                    (SELECT TOP 1 ser.fecha_reingreso 
                                    FROM tblRH_EK_Empl_Recontratacion as ser where ser.clave_empleado = e.clave_empleado 
                                    AND ser.cc = e.cc_contable 
                                    AND ser.fecha_reingreso > e.fecha_alta  
                                    ORDER BY ser.fecha_reingreso DESC) END) ,103) AS EMP_ULTIMO_REINGRESO,
                                    15 AS EMP_AGUINALDO,
                                    6 AS EMP_VACACIONES,
                                    (case e.tipo_nomina when 1 then 1 when 4 then 2 else 2 end) AS EMP_NOMINA,
                                    1 AS EMP_IMSS_TIPO,
                                    (SELECT top 1 ( case reg_pat when 31 then 5  when 33 then 6 when 24 then 2 when 30 then 4 when 23 then 1 else 1 end) as EMP_SUCURSAL FROM tblRH_EK_Empl_Reg_Pat_Historial where clave_empleado=e.clave_empleado order by fecha_cambio desc),
                                    CASE e.sindicato WHEN 'S' THEN 1 WHEN 'N' THEN 2 ELSE 2 END  AS EMP_CL,
                                    1 AS EMP_TURNO,
                                    e.puesto AS EMP_PUESTO,
                                    pu.descripcion as EMP_PUESTO_DESCRIPCION,
                                    e.nss AS EMP_NSS,
                                    e.unidad_medica AS EMP_UMF,
                                    CONVERT(CHAR(20),(CASE WHEN
                                    (SELECT TOP 1 ser.fecha_reingreso 
                                    FROM tblRH_EK_Empl_Recontratacion as ser where ser.clave_empleado = e.clave_empleado 
                                    AND ser.cc = e.cc_contable 
                                    AND ser.fecha_reingreso > e.fecha_alta  
                                    ORDER BY ser.fecha_reingreso DESC) 
                                    IS NULL THEN e.fecha_alta ELSE 
                                    (SELECT TOP 1 ser.fecha_reingreso 
                                    FROM tblRH_EK_Empl_Recontratacion as ser where ser.clave_empleado = e.clave_empleado 
                                    AND ser.cc = e.cc_contable 
                                    AND ser.fecha_reingreso > e.fecha_alta  
                                    ORDER BY ser.fecha_reingreso DESC) END) ,103) AS EMP_FSUELDO,
                                    (SELECT top 1 salario_base FROM tblRH_EK_Tabulador_Historial TBH WHERE TBH.clave_empleado =  e.clave_empleado ORDER BY id desc) AS EMP_SUELDO,
                                    (SELECT top 1 complemento FROM tblRH_EK_Tabulador_Historial TBH WHERE TBH.clave_empleado =  e.clave_empleado ORDER BY id desc) AS EMP_SUELDO1,
                                    (SELECT top 1 bono_zona FROM tblRH_EK_Tabulador_Historial TBH WHERE TBH.clave_empleado =  e.clave_empleado ORDER BY id desc) AS EMP_SUELDO2,
                                    '' AS EMP_SDI, 
                                    CASE empg.tel_casa WHEN NULL THEN '' ELSE empg.tel_casa END AS EMP_DIR_TELEFONO,  
                                    CASE empg.tel_cel WHEN NULL THEN '' ELSE empg.tel_cel END AS EMP_DIR_CELULAR,  
                                    empg.domicilio AS EMP_DIR_CALLE,empg.numero_exterior AS EMP_DIR_NO,empg.colonia AS EMP_DIR_COLONIA,empg.codigo_postal AS EMP_DIR_CP,
                                    cd.descripcion AS EMP_DIR_MUNICIPIO,cd.descripcion AS EMP_DIR_POBLACION, est.descripcion AS EMP_DIR_ESTADO,
                                    (empg.nombre_ben+'/'+empg.parterno_ben+'/'+empg.materno_ben) AS NOM_BENEF,(select top 1 SNP.descripcion FROM tblRH_EK_Parentesco SNP where SNP.id = empg.parentesco_ben) AS PARENT_BENEF, empg.fecha_nac_ben AS BENEF_NAC_FECHA ,
                                    empg.email as EMP_MAIL
                                FROM tblRH_EK_Empleados AS e 
                                INNER JOIN tblRH_EK_Empleados AS ne ON e.jefe_inmediato=ne.clave_empleado  
                                INNER JOIN tblC_Nom_CatalogoCC AS c ON c.cc = e.cc_contable  
                                INNER JOIN tblRH_EK_Puestos AS pu ON e.puesto = pu.puesto  
                                INNER JOIN tblRH_EK_Tipos_Nomina AS tn ON e.tipo_nomina = tn.tipo_nomina  
                                INNER JOIN tblRH_EK_Departamentos AS dp ON dp.clave_depto = e.clave_depto 
                                INNER JOIN tblRH_EK_Empl_Grales AS empg ON empg.clave_empleado = e.clave_empleado  
                                INNER JOIN tblRH_EK_Estados AS est ON (est.clave_estado = empg.estado_dom and est.clave_pais=e.clave_pais_nac) 
                                INNER JOIN tblRH_EK_Ciudades AS cd ON (cd.clave_cuidad = empg.cuidado_dom and cd.clave_pais=e.clave_pais_nac and cd.clave_estado=empg.estado_dom)
                                WHERE e.cc_contable IN @lstCCStr AND e.estatus_empleado = 'A'",
                    parametros = new { lstCCStr }
                });

                foreach (var item in result)
                {
                    if (item.EMP_ULTIMO_REINGRESO == null)
                    {
                        item.EMP_ULTIMO_REINGRESO = item.EMP_ALTA;
                    }

                    if (item.EMP_ALTA != null)
                    {
                        DateTime fechaReingreso = new DateTime(Convert.ToInt32(item.EMP_ULTIMO_REINGRESO.Substring(6, 4)), Convert.ToInt32(item.EMP_ULTIMO_REINGRESO.Substring(3, 2)), Convert.ToInt32(item.EMP_ULTIMO_REINGRESO.Substring(0, 2)));
                        if (fechaReingreso <= fechaFin && fechaReingreso >= fechaInicio)
                        {
                            var objAlta = resultFiltered.Where(e => e.EMP_TRAB == item.EMP_TRAB && e.EMP_PUESTO == item.EMP_PUESTO).FirstOrDefault();

                            if (objAlta == null)
                            {
                                resultFiltered.Add(item);
                            }
                            //resultFiltered.Add(item);

                        }
                    }
                }

                int i = result.Where(w => _lstClaveEmpleados.Contains(w.EMP_TRAB)).Count();
                if (i > 0)
                {
                    var result2 = result.Where(w => _lstClaveEmpleados.Contains(w.EMP_TRAB)).ToList();
                    return result2.OrderBy(x => x.EMP_NOM).ToList();
                }
                else
                    return null;
                #endregion
            }
            catch (Exception e)
            {
                return null;
            }
        }

        public List<LayoutAltasRHDTO> GetEmpleadosLayoutPendendiente(List<string> _lstClaveEmpleados)
        {
            try
            {
                #region
                DateTime fechaInicio = new DateTime(2000, 01, 01);
                int anioActual = DateTime.Now.Year;
                DateTime fechaFin = new DateTime(anioActual, 12, 31);

                var resultFiltered = new List<LayoutAltasRHDTO>();

                var result = _context.Select<LayoutAltasRHDTO>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = @"SELECT 
                                    e.tipo_nomina AS dias , e.clave_empleado AS EMP_TRAB,
                                    CONVERT(CHAR(20) ,e.fecha_antiguedad ,103)AS EMP_ALTA, 
                                    (e.ape_paterno+'/'+e.ape_materno+'/'+e.nombre) AS EMP_NOM, 
                                    e.rfc AS EMP_RFC, 
                                    e.curp AS EMP_CURP,
                                    1 AS EMP_CC,
                                    e.cc_contable +' '+c.ccDescripcion AS EMP_DP,
                                    2 AS EMP_SM,
                                    e.sexo AS EMP_SEXO,
                                    e.clave_estado_nac AS EMP_NAC_EF,
                                    CONVERT(CHAR(20), e.fecha_nac,103) AS EMP_NAC_FECHA,
                                    CONVERT(CHAR(20),(CASE WHEN
                                    (SELECT TOP 1 ser.fecha_reingreso 
                                    FROM tblRH_EK_Empl_Recontratacion as ser where ser.clave_empleado = e.clave_empleado 
                                    AND ser.cc = e.cc_contable 
                                    AND ser.fecha_reingreso > e.fecha_alta  
                                    ORDER BY ser.fecha_reingreso DESC) 
                                    IS NULL THEN null ELSE 
                                    (SELECT TOP 1 ser.fecha_reingreso 
                                    FROM tblRH_EK_Empl_Recontratacion as ser where ser.clave_empleado = e.clave_empleado 
                                    AND ser.cc = e.cc_contable 
                                    AND ser.fecha_reingreso > e.fecha_alta  
                                    ORDER BY ser.fecha_reingreso DESC) END) ,103) AS EMP_ULTIMO_REINGRESO,
                                    15 AS EMP_AGUINALDO,
                                    6 AS EMP_VACACIONES,
                                    (case e.tipo_nomina when 1 then 1 when 4 then 2 else 2 end) AS EMP_NOMINA,
                                    1 AS EMP_IMSS_TIPO,
                                    (SELECT top 1 ( case reg_pat when 31 then 5  when 33 then 6 when 24 then 2 when 30 then 4 when 23 then 1 else 1 end) as EMP_SUCURSAL FROM tblRH_EK_Empl_Reg_Pat_Historial where clave_empleado=e.clave_empleado order by fecha_cambio desc),
                                    CASE e.sindicato WHEN 'S' THEN 1 WHEN 'N' THEN 2 ELSE 2 END  AS EMP_CL,
                                    1 AS EMP_TURNO,
                                    e.puesto AS EMP_PUESTO,
                                    pu.descripcion as EMP_PUESTO_DESCRIPCION,
                                    e.nss AS EMP_NSS,
                                    e.unidad_medica AS EMP_UMF,
                                    CONVERT(CHAR(20),(CASE WHEN
                                    (SELECT TOP 1 ser.fecha_reingreso 
                                    FROM tblRH_EK_Empl_Recontratacion as ser where ser.clave_empleado = e.clave_empleado 
                                    AND ser.cc = e.cc_contable 
                                    AND ser.fecha_reingreso > e.fecha_alta  
                                    ORDER BY ser.fecha_reingreso DESC) 
                                    IS NULL THEN e.fecha_alta ELSE 
                                    (SELECT TOP 1 ser.fecha_reingreso 
                                    FROM tblRH_EK_Empl_Recontratacion as ser where ser.clave_empleado = e.clave_empleado 
                                    AND ser.cc = e.cc_contable 
                                    AND ser.fecha_reingreso > e.fecha_alta  
                                    ORDER BY ser.fecha_reingreso DESC) END) ,103) AS EMP_FSUELDO,
                                    (SELECT top 1 salario_base FROM tblRH_EK_Tabulador_Historial TBH WHERE TBH.clave_empleado =  e.clave_empleado ORDER BY id desc) AS EMP_SUELDO,
                                    (SELECT top 1 complemento FROM tblRH_EK_Tabulador_Historial TBH WHERE TBH.clave_empleado =  e.clave_empleado ORDER BY id desc) AS EMP_SUELDO1,
                                    (SELECT top 1 bono_zona FROM tblRH_EK_Tabulador_Historial TBH WHERE TBH.clave_empleado =  e.clave_empleado ORDER BY id desc) AS EMP_SUELDO2,
                                    '' AS EMP_SDI, 
                                    CASE empg.tel_casa WHEN NULL THEN '' ELSE empg.tel_casa END AS EMP_DIR_TELEFONO,  
                                    CASE empg.tel_cel WHEN NULL THEN '' ELSE empg.tel_cel END AS EMP_DIR_CELULAR,  
                                    empg.domicilio AS EMP_DIR_CALLE,empg.numero_exterior AS EMP_DIR_NO,empg.colonia AS EMP_DIR_COLONIA,empg.codigo_postal AS EMP_DIR_CP,
                                    cd.descripcion AS EMP_DIR_MUNICIPIO,cd.descripcion AS EMP_DIR_POBLACION, est.descripcion AS EMP_DIR_ESTADO,
                                    (empg.nombre_ben+'/'+empg.parterno_ben+'/'+empg.materno_ben) AS NOM_BENEF,(select top 1 SNP.descripcion FROM tblRH_EK_Parentesco SNP where SNP.id = empg.parentesco_ben) AS PARENT_BENEF, empg.fecha_nac_ben AS BENEF_NAC_FECHA ,
                                    empg.email as EMP_MAIL
                                FROM tblRH_EK_Empleados AS e 
                                INNER JOIN tblRH_EK_Empleados AS ne ON e.jefe_inmediato=ne.clave_empleado  
                                INNER JOIN tblC_Nom_CatalogoCC AS c ON c.cc = e.cc_contable  
                                INNER JOIN tblRH_EK_Puestos AS pu ON e.puesto = pu.puesto  
                                INNER JOIN tblRH_EK_Tipos_Nomina AS tn ON e.tipo_nomina = tn.tipo_nomina  
                                INNER JOIN tblRH_EK_Departamentos AS dp ON dp.clave_depto = e.clave_depto 
                                INNER JOIN tblRH_EK_Empl_Grales AS empg ON empg.clave_empleado = e.clave_empleado  
                                INNER JOIN tblRH_EK_Estados AS est ON (est.clave_estado = empg.estado_dom and est.clave_pais=e.clave_pais_nac) 
                                INNER JOIN tblRH_EK_Ciudades AS cd ON (cd.clave_cuidad = empg.cuidado_dom and cd.clave_pais=e.clave_pais_nac and cd.clave_estado=empg.estado_dom)
                                WHERE e.clave_empleado IN @_lstClaveEmpleados",
                    parametros = new { _lstClaveEmpleados }
                });

                foreach (var item in result)
                {
                    if (item.EMP_ULTIMO_REINGRESO == null)
                    {
                        item.EMP_ULTIMO_REINGRESO = item.EMP_ALTA;
                    }

                    if (item.EMP_ALTA != null)
                    {
                        DateTime fechaReingreso = new DateTime(Convert.ToInt32(item.EMP_ULTIMO_REINGRESO.Substring(6, 4)), Convert.ToInt32(item.EMP_ULTIMO_REINGRESO.Substring(3, 2)), Convert.ToInt32(item.EMP_ULTIMO_REINGRESO.Substring(0, 2)));
                        if (fechaReingreso <= fechaFin && fechaReingreso >= fechaInicio)
                        {
                            var objAlta = resultFiltered.Where(e => e.EMP_TRAB == item.EMP_TRAB && e.EMP_PUESTO == item.EMP_PUESTO).FirstOrDefault();

                            if (objAlta == null)
                            {
                                resultFiltered.Add(item);
                            }
                            //resultFiltered.Add(item);

                        }
                    }
                }

                int i = result.Where(w => _lstClaveEmpleados.Contains(w.EMP_TRAB)).Count();
                if (i > 0)
                {
                    var result2 = result.Where(w => _lstClaveEmpleados.Contains(w.EMP_TRAB)).ToList();
                    return result2.OrderBy(x => x.EMP_NOM).ToList();
                }
                else
                    return null;
                #endregion
            }
            catch (Exception e)
            {
                return null;
            }
        }
        #endregion

        public Dictionary<string, object> GetDatosCandidatoAprobado(int idCandidatoAprobado)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                resultado = new Dictionary<string, object>();
                try
                {
                    #region SE OBTIENE INFORMACIÓN DEL CANDIDATO APROBADO SELECCIONADO

                    GestionCandidatosDTO objCandidato = _context.Select<GestionCandidatosDTO>(new DapperDTO
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = @"SELECT id, apePaterno, apeMaterno, nombre, fechaNacimiento, pais, estado, municipio, fechaNacimiento,
                                            idGestionSolicitud, telefono, celular, sexo, correo, cuspp, PERU_departamento, PERU_descDepartamento
                                    FROM tblRH_REC_GestionCandidatos WHERE id = @idCandidatoAprobado",
                        parametros = new { idCandidatoAprobado = idCandidatoAprobado }
                    }).FirstOrDefault();

                    //SE OBTIENEN LOS DEPARTAMENTOS
                    //string strQuery = string.Empty;
                    //strQuery = @"SELECT clave_depto, desc_depto FROM sn_departamentos";
                    //var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                    //List<dynamic> lstDepartamentos = Data.EntityFramework.Context._contextEnkontrol.Select<dynamic>(EnkontrolAmbienteEnum.Rh, odbc);
                    var lstDepartamentos = _context.Select<dynamic>(new DapperDTO
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = @"SELECT clave_depto, desc_depto FROM tblRH_EK_Departamentos"
                    }).ToList();

                    tblRH_REC_Solicitudes objSolicitud = _context.tblRH_REC_Solicitudes.Where(e => e.esActivo && e.id == objCandidato.idGestionSolicitud).FirstOrDefault();

                    //ALMACENAR DATOS DE DEPARTAMENTO
                    if (objSolicitud.clave_depto > 0)
                    {
                        objCandidato.idDepartamento = objSolicitud.clave_depto;
                        objCandidato.departamentoDesc = lstDepartamentos.Where(w => w.clave_depto == objSolicitud.clave_depto.ToString()).Select(s => s.desc_depto).FirstOrDefault();
                    }

                    objCandidato.RFC = GetRFC(objCandidato);

                    //GET CURP (MEXA / EXTRANGERE)
                    if (objCandidato.pais == 1)
                    {
                        objCandidato.CURP = GenerarCURP(objCandidato.nombre, objCandidato.apePaterno, objCandidato.apeMaterno, objCandidato.sexo == "F" ? SexoEnum.Mujer : SexoEnum.Hombre, objCandidato.fechaNacimiento, (EstadoEnum)objCandidato.estado);
                    }
                    else
                    {
                        objCandidato.CURP = GenerarCURP(objCandidato.nombre, objCandidato.apePaterno, objCandidato.apeMaterno, objCandidato.sexo == "F" ? SexoEnum.Mujer : SexoEnum.Hombre, objCandidato.fechaNacimiento, EstadoEnum.Extranjero);
                    }

                    var entrevistaCandidato = _context.tblRH_REC_EntrevistasIniciales.FirstOrDefault(x => x.idCandidato == objCandidato.id && x.esActivo);

                    if (entrevistaCandidato != null)
                    {
                        objCandidato.estadoCivil = entrevistaCandidato.estadoCivil;

                        var escolaridad = _context.tblRH_REC_CatEscolaridades.FirstOrDefault(x => x.id == entrevistaCandidato.idEscolaridad);
                        objCandidato.escolaridad = escolaridad.escolaridad;
                    }

                    var docsMedico = new List<DocumentoMedicoDTO>();
                    var archivosCandidato = _context.tblRH_REC_Archivos.FirstOrDefault(x => x.idCandidato == objCandidato.id && x.idActividad == 73 && x.esActivo);
                    //var archivosMedicos = archivosCandidato.Where(x => x.idFase == 1017).ToList();
                    //foreach (var item in archivosMedicos)
                    //{
                    //    var docMedico = new DocumentoMedicoDTO();
                    //    docMedico.idArchivo = item.id;
                    //    docMedico.nombreArchivo = item.nombreArchivo;
                    //    docsMedico.Add(docMedico);
                    //}

                    if (archivosCandidato != null)
                    {
                        var docMedico = new DocumentoMedicoDTO();
                        docMedico.idArchivo = archivosCandidato.id;
                        docMedico.nombreArchivo = archivosCandidato.nombreArchivo;
                        docsMedico.Add(docMedico);
                    }

                    objCandidato.documentosMedicos = docsMedico;

                    objCandidato.ccSolicitud = objSolicitud.cc;

                    #endregion

                    if (objCandidato != null)
                    {
                        if (vSesiones.sesionUsuarioDTO.idPerfil == (int)PerfilUsuarioEnum.ADMINISTRADOR)
                        {
                            objCandidato.esDiana = true;
                        }
                        else
                        {

                            if (vSesiones.sesionUsuarioDTO.id == 1019 || vSesiones.sesionUsuarioDTO.id == 3381) //Diana Alvarez, Maricela
                            {
                                objCandidato.esDiana = true;

                            }
                            else
                            {
                                objCandidato.esDiana = false;

                            }

                        }
                    }

                    if (objCandidato == null)
                        throw new Exception("Ocurrió un error al obtener la información del candidato.");

                    resultado.Add("objCandidato", objCandidato);
                    resultado.Add(SUCCESS, true);
                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(0, 0, NombreControlador, "GetDatosCandidatoAprobado", e, AccionEnum.CONSULTA, 0, 0);
                    resultado.Add(MESSAGE, e.Message);
                    resultado.Add(SUCCESS, false);
                }
            }
            return resultado;
        }

        public string GetRFC(GestionCandidatosDTO objCandidato)
        {
            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru || vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
            {
                return "XXXXXXXXXXXXX";
            }

            var lstVowels = new List<string>() { "a", "e", "i", "o", "u", };
            string firstVowelApePaterno = string.Empty;

            for (int i = 1; i < objCandidato.apePaterno.Count(); i++)
            {
                if (lstVowels.Contains(objCandidato.apePaterno[i].ToString().ToLower()))
                {
                    firstVowelApePaterno = objCandidato.apePaterno[i].ToString();
                    break;
                }
            }

            string RFC = string.Empty;
            string apePaterno = objCandidato.apePaterno.Substring(0, 1);
            string apeMaterno = objCandidato.apeMaterno.Substring(0, 1);
            string nombre = objCandidato.nombre.Substring(0, 1);
            string yyyy = objCandidato.fechaNacimiento.Year.ToString().Substring(2, 2);
            string dd = objCandidato.fechaNacimiento.ToString("dd");
            string MM = objCandidato.fechaNacimiento.ToString("MM");
            MM = MM.Substring(0, 2);
            RFC = string.Format("{0}{6}{1}{2}{3}{4}{5}", apePaterno, apeMaterno, nombre, yyyy, MM, dd, firstVowelApePaterno);
            return RFC.ToUpper();
        }

        public Dictionary<string, object> ReingresarEmpleado(int clave_empleado, int requisicion_id)
        {
            resultado = new Dictionary<string, object>();

            using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
            {
                using (var con = getEnkontrolConexion())
                {
                    using (var trans = con.BeginTransaction())
                    {
                        try
                        {
                            var requisicion = _contextEnkontrol.Select<RequisicionRHDTO>((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? EnkontrolAmbienteEnum.RhCplan : EnkontrolAmbienteEnum.RhArre, new OdbcConsultaDTO
                            {
                                consulta = @"SELECT * FROM sn_requisicion_personal WHERE id = " + requisicion_id
                            });

                            if (requisicion.Count() == 0)
                            {
                                throw new Exception("No se encuentra la información de la requisición.");
                            }

                            var empleadoEK = _contextEnkontrol.Select<EmpleadosDTO>((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? EnkontrolAmbienteEnum.RhCplan : EnkontrolAmbienteEnum.RhArre, new OdbcConsultaDTO
                            {
                                consulta = @"SELECT contratable FROM sn_empleados WHERE clave_empleado = " + clave_empleado
                            });

                            if (empleadoEK[0].contratable != "S")
                            {
                                throw new Exception("El empleado está como \"No contratable\". No se puede proceder con el reingreso.");
                            }

                            #region Enkontrol
                            var count = 0;

                            using (var cmd = new OdbcCommand(@"
                                UPDATE sn_empleados 
                                SET
                                    estatus_empleado = 'P',
                                    --fecha_antiguedad = ?,
                                    --tipo_nomina = ?,
                                    --id_regpat = ?,
                                    cc_contable = ?,
                                    puesto = ?,
                                    --duracion_contrato = ?,
                                    jefe_inmediato = ?
                                    --salario_base = ?,
                                    --complemento = ?,
                                    --bono_zona = ?
                                WHERE clave_empleado = ?"))
                            {
                                OdbcParameterCollection parametersExplosion = cmd.Parameters;

                                //parametersExplosion.Add("@fecha_antiguedad", OdbcType.Numeric).Value = ;
                                //parametersExplosion.Add("@tipo_nomina", OdbcType.Numeric).Value = ;
                                //parametersExplosion.Add("@id_regpat", OdbcType.Numeric).Value = ;
                                parametersExplosion.Add("@cc_contable", OdbcType.Numeric).Value = requisicion[0].cc;
                                parametersExplosion.Add("@puesto", OdbcType.Numeric).Value = requisicion[0].puesto;
                                //parametersExplosion.Add("@duracion_contrato", OdbcType.Numeric).Value = ;
                                parametersExplosion.Add("@jefe_inmediato", OdbcType.Numeric).Value = requisicion[0].jefe_inmediato;
                                //parametersExplosion.Add("@salario_base", OdbcType.Numeric).Value = ;
                                //parametersExplosion.Add("@complemento", OdbcType.Numeric).Value = ;
                                //parametersExplosion.Add("@bono_zona", OdbcType.Numeric).Value = ;

                                parametersExplosion.Add("@clave_empleado", OdbcType.Numeric).Value = clave_empleado;

                                cmd.Connection = trans.Connection;
                                cmd.Transaction = trans;
                                count += cmd.ExecuteNonQuery();
                            }
                            #endregion

                            trans.Commit();
                            dbSigoplanTransaction.Commit();
                            SaveBitacora(0, (int)AccionEnum.ACTUALIZAR, 0, JsonUtils.convertNetObjectToJson(new { clave_empleado = clave_empleado, requisicion_id = requisicion_id }));

                            resultado.Add(SUCCESS, true);
                        }
                        catch (Exception e)
                        {
                            trans.Rollback();
                            dbSigoplanTransaction.Rollback();

                            LogError(0, 0, NombreControlador, "ReingresarEmpleado", e, AccionEnum.ACTUALIZAR, 0, new { clave_empleado = clave_empleado, requisicion_id = requisicion_id });

                            resultado.Add(SUCCESS, false);
                            resultado.Add(MESSAGE, e.Message);
                        }
                    }
                }
            }

            return resultado;
        }

        public Dictionary<string, object> GetInformacionRequisicion(int requisicion_id)
        {
            resultado = new Dictionary<string, object>();

            try
            {
                //SELECT req.*, (c.cc + '-' + c.ccDescripcion) AS ccDesc, p.descripcion AS puestoDesc, p.tipo_nomina as puestoTipoNom, cont.descripcion AS tipo_contratoDesc, (emp.nombre + ' ' + emp.ape_paterno + ' ' + emp.ape_materno) AS jefe_inmediatoDesc
                //                        FROM tblRH_REC_requisicion req
                //                            LEFT JOIN tblC_Nom_CatalogoCC c ON req.cc = c.cc
                //                            LEFT JOIN tblRH_EK_Puestos p ON req.puesto = p.puesto
                //                            LEFT JOIN tblRH_EK_Requisicion_Tipo_Contrato cont ON req.tipo_contrato = cont.id
                //                            LEFT JOIN tblRH_EK_Empleados emp ON req.jefe_inmediato = emp.clave_empleado
                //                        WHERE req.id = @paramRequisicion

                var requisicion = _context.Select<RequisicionRHDTO>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = @"SELECT req.*, (c.cc + '-' + c.ccDescripcion) AS ccDesc, p.descripcion AS puestoDesc, p.FK_TipoNomina as puestoTipoNom, cont.descripcion AS tipo_contratoDesc,
                        (emp.nombre + ' ' + emp.ape_paterno + ' ' + emp.ape_materno) AS jefe_inmediatoDesc,
			            tabCat.id AS idCategoria,
			            tabCat.concepto descCategoria
                        FROM tblRH_REC_requisicion req
                            LEFT JOIN tblC_Nom_CatalogoCC c ON req.cc = c.cc
                            LEFT JOIN tblRH_EK_Puestos p ON req.puesto = p.puesto
                            LEFT JOIN tblRH_EK_Requisicion_Tipo_Contrato cont ON req.tipo_contrato = cont.id
                            LEFT JOIN tblRH_EK_Empleados emp ON req.jefe_inmediato = emp.clave_empleado
							LEFT JOIN tblRH_TAB_TabuladoresDet tabDet ON req.idTabuladorDet = tabDet.id
							LEFT JOIN tblRH_TAB_CatCategorias tabCat ON tabDet.FK_Categoria = tabCat.id
                        WHERE req.id = @paramRequisicion",
                    parametros = new { paramRequisicion = requisicion_id }
                }).ToList();

                if (requisicion.Count() == 0)
                {
                    throw new Exception("No se encuentra la información de la requisición.");
                }

                var puestoSindicalizado = _context.tblRH_REC_PuestoSindicato.ToList().FirstOrDefault(x => x.puesto == requisicion[0].puesto);

                if (puestoSindicalizado != null)
                {
                    requisicion[0].puesto_sindicalizado = puestoSindicalizado.sindicalizado == "S";
                }

                resultado.Add("data", requisicion[0]);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(0, 0, NombreControlador, "GetInformacionRequisicion", e, AccionEnum.CONSULTA, 0, new { requisicion_id = requisicion_id });

                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }

            return resultado;
        }

        private OdbcConnection getEnkontrolConexion()
        {
            if (productivo)
            {
                return new Conexion().ConnectRH();
            }
            else
            {
                return new Conexion().ConexionEKRh();
            }
        }

        public Dictionary<string, object> ChecarPermisoTabuladorLibre()
        {
            resultado = new Dictionary<string, object>();

            try
            {
                var permiso = _context.tblRH_REC_PermisoTabuladorLibre.FirstOrDefault(x => x.registroActivo && x.usuario_id == vSesiones.sesionUsuarioDTO.id);

                resultado.Add("tienePermiso", permiso != null);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(0, 0, NombreControlador, "ChecarPermisoTabuladorLibre", e, AccionEnum.CONSULTA, 0, null);

                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }

            return resultado;
        }

        public Dictionary<string, object> GetIDUsuarioEK()
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region SE OBTIENE ID DE ENCONTROL DEL USUARIO LOGUEADO
                int idEK = 0;
                tblP_Usuario_Enkontrol objUsuarioEK = _context.tblP_Usuario_Enkontrol.Where(w => w.idUsuario == (int)vSesiones.sesionUsuarioDTO.id).FirstOrDefault();
                if (objUsuarioEK != null)
                    idEK = objUsuarioEK.empleado;

                resultado.Add("idEK", idEK);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(0, 0, NombreControlador, "GetIDUsuarioEK", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> CambiarEstatusEmpleado(int claveEmpleado, string status)
        {
            resultado.Clear();


            try
            {
                var emp = _context.tblRH_EK_Empleados.FirstOrDefault(x => x.clave_empleado == claveEmpleado);

                using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
                {
                    try
                    {
                        #region CAMBIAR ESTATUS EN EK
                        //                            string strQuery = @"UPDATE sn_empleados 
                        //                                                SET 
                        //                                                    estatus_empleado = ?
                        //                                                WHERE 
                        //                                                    clave_empleado = ?";    

                        //                            using (var cmd = new OdbcCommand(strQuery))
                        //                            {
                        //                                OdbcParameterCollection parameters = cmd.Parameters;
                        //                                // SE REGISTRA LA SECCIÓN: DATOS EMPLEADO
                        //                                parameters.Add("@estatus_empleado", OdbcType.Char).Value = !string.IsNullOrEmpty(status) ? status.Trim().ToUpper() : string.Empty;

                        //                                //WHERE
                        //                                parameters.Add("@clave_empleado", OdbcType.Decimal).Value = claveEmpleado > 0 ? claveEmpleado : 0;

                        //                                cmd.Connection = trans.Connection;
                        //                                cmd.Transaction = trans;
                        //                                cmd.ExecuteNonQuery();
                        //                            }
                        if (emp != null)
                        {
                            emp.estatus_empleado = status.Trim().ToUpper();
                            _context.SaveChanges();
                        }
                        #endregion

                        #region Cerrar Solicitud & MANDAR CORREO CAPACITACION SI ES REINGRESO
                        if (status == "A")
                        {
                            var registroCandidato = _context.tblRH_REC_GestionCandidatos.FirstOrDefault(x => x.esActivo && x.clave_empleado == claveEmpleado);

                            if (registroCandidato != null)
                            {
                                var registroSolicitud = _context.tblRH_REC_Solicitudes.FirstOrDefault(x => x.esActivo && x.id == registroCandidato.idGestionSolicitud);

                                if (registroSolicitud != null)
                                {
                                    registroSolicitud.terminado = true;
                                    _context.SaveChanges();
                                }

                                if (registroCandidato.esReingreso.HasValue && registroCandidato.esReingreso.Value)
                                {
                                    #region CORREO CAMBIO

                                    var objCEHistorial = _context.tblRH_EK_Empl_CC_Historial.Where(e => e.clave_empleado == emp.clave_empleado).OrderByDescending(e => e.fecha_cambio).FirstOrDefault();

                                    var puestoDescCapacitacion = _context.tblRH_EK_Puestos.Where(x => x.puesto == emp.puesto).Select(x => x.descripcion).FirstOrDefault();
                                    var ccAnteriorDesc = _context.tblC_Nom_CatalogoCC.Where(x => x.cc == objCEHistorial.cc_anterior).Select(x => x.ccDescripcion).FirstOrDefault();
                                    var ccNuevoDesc = _context.tblC_Nom_CatalogoCC.Where(x => x.cc == emp.cc_contable).Select(x => x.ccDescripcion).FirstOrDefault();

                                    var objUltimaBaja = _context.tblRH_Baja_Registro.Where(e => e.registroActivo && e.numeroEmpleado == emp.clave_empleado && e.est_baja == "A").OrderByDescending(e => e.fechaBaja).FirstOrDefault();

                                    //Enviar correo a Maricela y Jesús Gaytan cuando se haga un cambio de centro de costo.
                                    var listaCorreos = new List<string> { "maricela.ortiz@construplan.com.mx", "jesus.gaytan@construplan.com.mx" };

#if DEBUG
                                    //listaCorreos = new List<string> { "oscar.valencia@construplan.com.mx" };
                                    listaCorreos = new List<string> { "miguel.buzani@construplan.com.mx" };
#endif

                                    GlobalUtils.sendEmail(
                                        string.Format(@"{0}: CAMBIO DE CENTRO DE COSTO [EMPLEADO: {1}]", PersonalUtilities.GetNombreEmpresa(), emp.clave_empleado),
                                        string.Format(@"
                                            CLAVE EMPLEADO: {0}<br/>
                                            NOMBRE: {1}<br/>
                                            PUESTO: {2}<br/>
                                            CC ANTERIOR: {3}<br/>
                                            CC NUEVO: {4}<br/>
                                            FECHA ALTA: {5}<br/>
                                            FECHA BAJA: {6}<br/>
                                            ",
                                            emp.clave_empleado,
                                            ((emp.nombre ?? "") + " " + (emp.ape_paterno ?? "") + " " + (emp.ape_materno ?? "")),
                                            puestoDescCapacitacion,
                                            ("[" + objCEHistorial.cc_anterior + "] " + ccAnteriorDesc),
                                            ("[" + emp.cc_contable + "] " + ccNuevoDesc),
                                            emp.fecha_antiguedad.Value.ToString("dd/MM/yyyy"),
                                            (objUltimaBaja != null ? objUltimaBaja.fechaBaja.Value.ToString("dd/MM/yyyy") : "")
                                        ),
                                        listaCorreos
                                    );
                                }

                                #endregion

                            }
                        }
                        #endregion
                        
                        dbSigoplanTransaction.Commit();
                    }
                    catch (Exception e)
                    {
                        dbSigoplanTransaction.Rollback();

                        throw e;
                    }
                }

                #region Correo Notificación Autorización
                List<string> correos = new List<string>();

                //var ccDesc = _ccFS.GetCC(emp.cc_contable);
                var ccDesc = _ccFS_SP.GetCCNomina(emp.cc_contable);
                var puestoDesc = _context.tblRH_EK_Puestos.FirstOrDefault(x => x.puesto == emp.puesto).descripcion;

                //var asunto = @"Se ha dado de alta un empleado en el centro de costos [" + emp.cc_contable + "]";

                string descRegPat = "";
                if (emp.id_regpat != null)
                {
                    var objRegPat = _context.tblRH_EK_Registros_Patronales.FirstOrDefault(e => e.clave_reg_pat == emp.id_regpat);
                    if (objRegPat != null)
                    {
                        descRegPat = objRegPat.nombre_corto;
                    }
                }

                string conceptoHead = "";
                string conceptoBody = "";

                if (status == "A")
                {
                    conceptoBody = "dado de alta";
                    conceptoHead = "ALTA";
                }
                else
                {
                    conceptoBody = "cancelado de las Altas de empleados";
                    conceptoHead = "CANCELACION de Alta de empleado";
                }

                var asunto = conceptoHead + @" en el CC " + emp.cc_contable + " " + descRegPat;
                var mensaje = string.Format(@"
                        El siguiente empleado ha sido " + conceptoBody + ": <br/><br/>" +
                    "{0} – {1}, para el centro de costos: {2} – {3}, con el puesto de: {4}", claveEmpleado, (emp.ape_paterno + " " + emp.ape_materno + " " + emp.nombre), emp.cc_contable, ccDesc.descripcion, puestoDesc);

                //var listaUsuariosCorreos = _context.tblRH_UsuariosCorreoAutorizacionAlta.Where(x => x.registroActivo).Select(x => x.usuario_id).ToList();

                //List<int> listaUsuarios = _context.tblRH_REC_Notificantes_Altas.Where(w => (w.cc == emp.cc_contable || w.cc == "*") && w.esAuth && w.esActivo).Select(s => s.idUsuario).ToList();

                //foreach (var usu in listaUsuarios)
                //{
                //    correos.Add(_context.tblP_Usuario.FirstOrDefault(x => x.id == usu).correo);
                //}

                List<int> lstNotificantes = _context.tblRH_Notis_RelConceptoUsuario.
                    Where(e => e.cc == emp.cc_contable && (e.idConcepto == (int)ConceptosNotificantesEnum.Altas
                         || e.idConcepto == (int)ConceptosNotificantesEnum.CH)).
                    Select(e => e.idUsuario).ToList();

                foreach (var usu in lstNotificantes)
                {
                    correos.Add(_context.tblP_Usuario.FirstOrDefault(x => x.id == usu).correo);
                }

                List<string> lstCorreoGenerales = _context.tblRH_Notis_RelConceptoCorreo.
                    Where(e => (e.cc == "*" || e.cc == emp.cc_contable) && (e.idConcepto == (int)ConceptosNotificantesEnum.Altas
                        || e.idConcepto == (int)ConceptosNotificantesEnum.CH)).
                    Select(e => e.correo).ToList();

                foreach (var correo in lstCorreoGenerales)
                {
                    correos.Add(correo);
                }

                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ||
                    vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora ||
                    vSesiones.sesionEmpresaActual == (int)EmpresaEnum.GCPLAN)
                {
                    correos.AddRange(new List<string> 
                        { 
                            "auxnominas.hmo@taxandlegal.com.mx",
                            "aux.seguridadsocialhmo@taxandlegal.com.mx",
                            "auxoperacionfiscal.hmo@taxandlegal.com.mx",
                            "seguridadsocial.hmo@taxandlegal.com.mx",
                            "operacionfiscalhmo@taxandlegal.com.mx",
                            "seguridadsocialhmo.taxandlegal@gmail.com",
                            "nominas.hmo@taxandlegal.com.mx",
                            "despacho@construplan.com.mx",
                        });
                }


                correos.Add("diana.alvarez@construplan.com.mx");
                correos.Add("keyla.vasquez@construplan.com.mx");

                correos = correos.Distinct().ToList();
#if DEBUG
                correos = new List<string> { "miguel.buzani@construplan.com.mx" };
#endif
                if (status == "A")
                {
                    var reporteLayout = _context.Select<LayoutAltasRHDTO>(new DapperDTO
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        #region QUERY

                        consulta = @"SELECT 
                                            e.tipo_nomina AS dias , e.clave_empleado AS EMP_TRAB,
                                            CONVERT(CHAR(20) ,e.fecha_antiguedad ,103)AS EMP_ALTA, 
                                            (e.ape_paterno+'/'+e.ape_materno+'/'+e.nombre) AS EMP_NOM, 
                                            e.rfc AS EMP_RFC, 
                                            e.curp AS EMP_CURP,
                                            1 AS EMP_CC,
                                            e.cc_contable +' '+c.ccDescripcion AS EMP_DP,
                                            2 AS EMP_SM,
                                            e.sexo AS EMP_SEXO,
                                            e.clave_estado_nac AS EMP_NAC_EF,
                                            CONVERT(CHAR(20), e.fecha_nac,103) AS EMP_NAC_FECHA,
                                            CONVERT(CHAR(20),(CASE WHEN
                                            (SELECT TOP 1 ser.fecha_reingreso 
                                            FROM tblRH_EK_Empl_Recontratacion as ser where ser.clave_empleado = e.clave_empleado 
                                            AND ser.cc = e.cc_contable 
                                            AND ser.fecha_reingreso > e.fecha_alta  
                                            ORDER BY ser.fecha_reingreso DESC) 
                                            IS NULL THEN null ELSE 
                                            (SELECT TOP 1 ser.fecha_reingreso 
                                            FROM tblRH_EK_Empl_Recontratacion as ser where ser.clave_empleado = e.clave_empleado 
                                            AND ser.cc = e.cc_contable 
                                            AND ser.fecha_reingreso > e.fecha_alta  
                                            ORDER BY ser.fecha_reingreso DESC) END) ,103) AS EMP_ULTIMO_REINGRESO,
                                            15 AS EMP_AGUINALDO,
                                            6 AS EMP_VACACIONES,
                                            (case e.tipo_nomina when 1 then 1 when 4 then 2 else 2 end) AS EMP_NOMINA,
                                            1 AS EMP_IMSS_TIPO,
                                            (SELECT top 1 ( case reg_pat when 31 then 5  when 33 then 6 when 24 then 2 when 30 then 4 when 23 then 1 else 1 end) FROM tblRH_EK_Empl_Reg_Pat_Historial where clave_empleado=e.clave_empleado order by fecha_cambio desc) as EMP_SUCURSAL,
                                            CASE e.sindicato WHEN 'S' THEN 1 WHEN 'N' THEN 2 ELSE 2 END  AS EMP_CL,
                                            1 AS EMP_TURNO,
                                            e.puesto AS EMP_PUESTO,
                                            pu.descripcion as EMP_PUESTO_DESCRIPCION,
                                            e.nss AS EMP_NSS,
                                            e.unidad_medica AS EMP_UMF,
                                            CONVERT(CHAR(20),(CASE WHEN
                                            (SELECT TOP 1 ser.fecha_reingreso 
                                            FROM tblRH_EK_Empl_Recontratacion as ser where ser.clave_empleado = e.clave_empleado 
                                            AND ser.cc = e.cc_contable 
                                            AND ser.fecha_reingreso > e.fecha_alta  
                                            ORDER BY ser.fecha_reingreso DESC) 
                                            IS NULL THEN e.fecha_alta ELSE 
                                            (SELECT TOP 1 ser.fecha_reingreso 
                                            FROM tblRH_EK_Empl_Recontratacion as ser where ser.clave_empleado = e.clave_empleado 
                                            AND ser.cc = e.cc_contable 
                                            AND ser.fecha_reingreso > e.fecha_alta  
                                            ORDER BY ser.fecha_reingreso DESC) END) ,103) AS EMP_FSUELDO,
                                            (SELECT top 1 salario_base FROM tblRH_EK_Tabulador_Historial TBH WHERE TBH.clave_empleado =  e.clave_empleado ORDER BY id desc) AS EMP_SUELDO,
                                            (SELECT top 1 complemento FROM tblRH_EK_Tabulador_Historial TBH WHERE TBH.clave_empleado =  e.clave_empleado ORDER BY id desc) AS EMP_SUELDO1,
                                            (SELECT top 1 bono_zona FROM tblRH_EK_Tabulador_Historial TBH WHERE TBH.clave_empleado =  e.clave_empleado ORDER BY id desc) AS EMP_SUELDO2,
                                            '' AS EMP_SDI, 
                                            CASE empg.tel_casa WHEN NULL THEN '' ELSE empg.tel_casa END AS EMP_DIR_TELEFONO,  
                                            CASE empg.tel_cel WHEN NULL THEN '' ELSE empg.tel_cel END AS EMP_DIR_CELULAR,  
                                            empg.domicilio AS EMP_DIR_CALLE,empg.numero_exterior AS EMP_DIR_NO,empg.colonia AS EMP_DIR_COLONIA,empg.codigo_postal AS EMP_DIR_CP,
                                            cd.descripcion AS EMP_DIR_MUNICIPIO,cd.descripcion AS EMP_DIR_POBLACION, est.descripcion AS EMP_DIR_ESTADO,
                                            (empg.nombre_ben+'/'+empg.parterno_ben+'/'+empg.materno_ben) AS NOM_BENEF,(select top 1 SNP.descripcion FROM tblRH_EK_Parentesco SNP where SNP.id = empg.parentesco_ben) AS PARENT_BENEF, empg.fecha_nac_ben AS BENEF_NAC_FECHA,
                                            empg.email as EMP_MAIL,
                                            e.CPCIF as AP
                                        FROM tblRH_EK_Empleados AS e 
                                        INNER JOIN tblRH_EK_Empleados AS ne ON e.jefe_inmediato=ne.clave_empleado  
                                        INNER JOIN tblC_Nom_CatalogoCC AS c ON c.cc = e.cc_contable  
                                        INNER JOIN tblRH_EK_Puestos AS pu ON e.puesto = pu.puesto  
                                        INNER JOIN tblRH_EK_Tipos_Nomina AS tn ON e.tipo_nomina = tn.tipo_nomina  
                                        INNER JOIN tblRH_EK_Departamentos AS dp ON dp.clave_depto = e.clave_depto 
                                        INNER JOIN tblRH_EK_Empl_Grales AS empg ON empg.clave_empleado = e.clave_empleado  
                                        INNER JOIN tblRH_EK_Estados AS est ON (est.clave_estado = empg.estado_dom and est.clave_pais=e.clave_pais_nac) 
                                        INNER JOIN tblRH_EK_Ciudades AS cd ON (cd.clave_cuidad = empg.cuidado_dom and cd.clave_pais=e.clave_pais_nac and cd.clave_estado=empg.estado_dom)
                                        WHERE e.clave_empleado IN @strClavesEmpleados",
                        #endregion
                        parametros = new { strClavesEmpleados = new List<int>() { claveEmpleado } }
                    });

                    byte[] archive = GetArchivoLayoutAltas(reporteLayout, new List<string>() { claveEmpleado.ToString() });

                    var lstArchives = new List<adjuntoCorreoDTO>();

                    lstArchives.Add(new adjuntoCorreoDTO
                    {
                        archivo = archive,
                        nombreArchivo = "layout",
                        extArchivo = ".xlsx"
                    });

                    GlobalUtils.sendMailWithFilesReclutamientos(string.Format("{0}: {1}", PersonalUtilities.GetNombreEmpresa(), asunto), mensaje, correos, lstArchives); // ENVIAR CORREO CON LAYOUT
                }
                else
                {

                    GlobalUtils.sendEmail(string.Format("{0}: {1}", PersonalUtilities.GetNombreEmpresa(), asunto), mensaje, correos);// ENVIAR CORREO SIN LAYOUT
                }
                #endregion

                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);

            }

            return resultado;
        }

        public Dictionary<string, object> AddContratos(int idEmpleado, int tipoDuracionContrato)
        {
            resultado.Clear();

            using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
            {

                try
                {
                    List<tblRH_EK_Contratos_Empleados> lstContratos = _context.tblRH_EK_Contratos_Empleados.Where(e => e.esActivo.Value && e.clave_empleado == idEmpleado).OrderByDescending(e => e.id_contrato_empleado).ToList();
                    tblRH_EK_Empl_Duracion_Contrato lstTipoDuracionContrato = _context.tblRH_EK_Empl_Duracion_Contrato.Where(e => e.esActivo && e.clave_duracion == tipoDuracionContrato).FirstOrDefault();

                    DateTime fechaInicio = new DateTime();
                    DateTime? fechaFin = new DateTime();

                    if (lstContratos.Count() > 0)
                    {
                        fechaInicio = lstContratos[0].fecha;

                    }
                    else
                    {
                        fechaInicio = DateTime.Now;
                    }

                    #region SWITCH PARA CALCULAR FECHA FINAL DEL CONTRATO
                    switch (tipoDuracionContrato)
                    {
                        case 2:
                            fechaFin = fechaInicio.AddMonths(3);

                            break;
                        case 3:
                            fechaFin = null;

                            break;
                        case 4:
                            fechaFin = null;

                            break;
                        case 5:
                            fechaFin = fechaInicio.AddDays(28);

                            break;
                        case 7:
                            fechaFin = fechaInicio.AddMonths(6);

                            break;
                        case 8:
                            fechaFin = fechaInicio.AddDays(13);

                            break;
                        case 9:
                            fechaFin = fechaInicio.AddMonths(1);

                            break;
                        case 10:
                            fechaFin = fechaInicio.AddDays(15);

                            break;
                        case 11:
                            fechaFin = fechaInicio.AddDays(16);

                            break;
                        case 12:
                            fechaFin = fechaInicio.AddDays(9);

                            break;
                        case 13:
                            fechaFin = fechaInicio.AddDays(25);

                            break;
                        case 14:
                            fechaFin = fechaInicio.AddDays(4);

                            break;
                        case 16:
                            fechaFin = fechaInicio.AddDays(5);

                            break;
                        case 18:
                            fechaFin = fechaInicio.AddMonths(2);

                            break;
                        case 19:
                            fechaFin = fechaInicio.AddYears(3);

                            break;

                        default:
                            break;
                    }
                    #endregion

                    _context.tblRH_EK_Contratos_Empleados.Add(new tblRH_EK_Contratos_Empleados
                    {
                        id_contrato_empleado = _context.tblRH_EK_Contratos_Empleados.Count() + 1,
                        clave_empleado = idEmpleado,
                        clave_duracion = tipoDuracionContrato,
                        fecha = fechaInicio,
                        fecha_aplicacion = fechaFin.Value,
                        esActivo = true,
                        fechaCreacion = DateTime.Now,
                        fechaModificacion = DateTime.Now,
                        idUsuarioCreacion = vSesiones.sesionUsuarioDTO.id,
                        idUsuarioModificacion = vSesiones.sesionUsuarioDTO.id
                    });

                    _context.SaveChanges();
                    dbSigoplanTransaction.Commit();
                    resultado.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    dbSigoplanTransaction.Rollback();
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                }

            }

            return resultado;
        }

        public Dictionary<string, object> GetDocs(int? clave_empleado, int? id_candidato)
        {
            resultado.Clear();

            try
            {
                var listaArchivos = _context.tblRH_REC_ED_Archivo.Where(x => x.registroActivo).ToList(); //Catalogo
                List<tblRH_REC_ED_RelacionExpedienteArchivo> listaRelacionExpedienteArchivo = new List<tblRH_REC_ED_RelacionExpedienteArchivo>();
                ExpedienteDigitalDTO objExpedientes = new ExpedienteDigitalDTO();

                #region GET ARCHIVOS DE EXPEDIENTE DIGITAL
                if (clave_empleado != null)
                {

                    objExpedientes = _context.tblRH_REC_ED_Expediente.Where(x => x.registroActivo && x.claveEmpleado == clave_empleado).Select(e => new ExpedienteDigitalDTO
                    {
                        id = e.id,
                        claveEmpleado = e.claveEmpleado,
                        //archivos = new List<ArchivoExpedienteDigitalDTO>()
                    }).FirstOrDefault();

                    if (objExpedientes != null)
                    {
                        objExpedientes.archivos = new List<ArchivoExpedienteDigitalDTO>();

                        listaRelacionExpedienteArchivo = _context.tblRH_REC_ED_RelacionExpedienteArchivo.Where(x => x.registroActivo && x.expediente_id == objExpedientes.id).ToList();


                        var archivosAplicables = listaRelacionExpedienteArchivo;
                        foreach (var arc in listaArchivos)
                        {
                            var archivoAplicable = archivosAplicables.FirstOrDefault(x => x.archivo_id == arc.id);

                            if (archivoAplicable != null)
                            {
                                objExpedientes.archivos.Add(new ArchivoExpedienteDigitalDTO
                                {
                                    expediente_id = objExpedientes.id,
                                    archivo_id = arc.id,
                                    archivoCargado_id = archivoAplicable.id,
                                    rutaArchivo = archivoAplicable.rutaArchivo,
                                    aplica = true,
                                    estado = true,
                                    archiveDesc = arc.descripcion,
                                });
                            }
                            else
                            {
                                objExpedientes.archivos.Add(new ArchivoExpedienteDigitalDTO
                                {
                                    expediente_id = objExpedientes.id,
                                    archivo_id = arc.id,
                                    archivoCargado_id = 0,
                                    rutaArchivo = null,
                                    aplica = false,
                                    estado = false,
                                    archiveDesc = arc.descripcion,

                                });
                            }
                        }
                    }
                }
                #endregion

                #region GET ARCHIVOS FASES

                tblRH_REC_GestionCandidatos objCandidato = new tblRH_REC_GestionCandidatos();
                List<tblRH_REC_Archivos> archivoSeg = new List<tblRH_REC_Archivos>() { };
                List<ArchivoExpedienteDigitalDTO> archivosSeguimiento = new List<ArchivoExpedienteDigitalDTO>();
                List<ArchivoExpedienteDigitalDTO> archivosSeguimientoFormatted = new List<ArchivoExpedienteDigitalDTO>();

                if (clave_empleado != null)
                {
                    // CANDIDATO DATO DE ALTA
                    objCandidato = _context.tblRH_REC_GestionCandidatos.Where(e => e.esActivo && e.clave_empleado == clave_empleado).FirstOrDefault();

                    if (objCandidato != null)
                    {
                        id_candidato = objCandidato.id;
                        archivoSeg = _context.tblRH_REC_Archivos.Where(e => e.esActivo && (e.idCandidato == objCandidato.id || e.claveEmpleado == clave_empleado)).ToList();
                    }

                }
                else
                {

                    // CANDIDATO NO DADO ALTA
                    if (id_candidato != null)
                    {
                        id_candidato = objCandidato.id;
                        archivoSeg = _context.tblRH_REC_Archivos.Where(e => e.esActivo && e.idCandidato == id_candidato).ToList();
                    }

                }

                foreach (var item in archivoSeg)
                {
                    tblRH_REC_Actividades objActividad = _context.tblRH_REC_Actividades.Where(e => e.esActivo && e.id == item.idActividad).FirstOrDefault();

                    if (objActividad != null)
                    {

                        if (clave_empleado != null)
                        {
                            //AÑADIR ARCHIVOS DE SEGUIMIENTO DE CANDIDATO AL EMPLEADO
                            ArchivoExpedienteDigitalDTO archive = objExpedientes.archivos.Where(e => e.archivo_id == objActividad.tipoArchivo).FirstOrDefault();

                            //archive.archivoCargado_id = objActividad.tipoArchivo.Value;
                            if (archive == null)
                            {
                                continue;
                            }

                            if (archive.rutaArchivo == null)
                            {
                                var archivoRel = listaRelacionExpedienteArchivo.FirstOrDefault(x => x.archivo_id == archive.archivo_id);
                                if (archivoRel != null)
                                {
                                    archive.rutaArchivo = item.ubicacionArchivo;
                                    archivoRel.rutaArchivo = item.ubicacionArchivo;
                                    archive.estado = true;
                                }
                            }

                        }
                        else
                        {
                            //CREAR LISTA SOLO CON LOS ARCHIVOS DE SEGUIMINETO DEL CANDIDATO
                            if (objActividad.tipoArchivo != null)
                            {
                                var objArchivo = archivosSeguimiento.FirstOrDefault(e => e.archivo_id == objActividad.tipoArchivo.Value);
                                if (objArchivo == null)
                                {
                                    archivosSeguimiento.Add(new ArchivoExpedienteDigitalDTO
                                    {
                                        archivo_id = objActividad.tipoArchivo.Value,
                                        rutaArchivo = item.ubicacionArchivo,
                                        estado = true,
                                    });
                                }

                            }

                        }
                    }
                    else
                    {
                        //AÑADIR CV Y FOTO DEL CANDIDATO (NO TIENEN ACTIVIDAD)
                        if (item.tipoArchivo == 5 || item.tipoArchivo == 30)
                        {
                            var objArchivo = archivosSeguimiento.FirstOrDefault(e => e.archivo_id == item.tipoArchivo);
                            if (objArchivo == null)
                            {
                                archivosSeguimiento.Add(new ArchivoExpedienteDigitalDTO
                                {
                                    archivo_id = item.tipoArchivo,
                                    rutaArchivo = item.ubicacionArchivo,
                                    estado = true,
                                });
                            }

                        }
                    }
                }

                #endregion

                if (clave_empleado != null && objExpedientes != null)
                {
                    //REGRESAR LISTA DE LOS ARCHIVOS DEL EMPLEADO CON EXPEDIENTE
                    foreach (var item in archivosSeguimiento)
                    {
                        var archivoSeguimiento = objExpedientes.archivos.FirstOrDefault(e => item.archivo_id == e.archivo_id);

                        if (archivoSeguimiento != null && archivoSeguimiento.estado == false)
                        {
                            archivoSeguimiento.estado = true;
                            archivoSeguimiento.rutaArchivo = item.rutaArchivo;
                        }
                    }

                    resultado.Add(ITEMS, objExpedientes.archivos);

                }
                else
                {
                    if (id_candidato != null && archivosSeguimiento.Count() > 0)
                    {
                        archivosSeguimientoFormatted.AddRange(archivosSeguimiento);

                        foreach (var item in listaArchivos)
                        {
                            var objArchivo = archivosSeguimiento.Where(e => e.archivo_id == item.id).FirstOrDefault();
                            if (objArchivo == null)
                            {
                                archivosSeguimientoFormatted.Add(new ArchivoExpedienteDigitalDTO
                                {
                                    archivo_id = item.id,
                                    archiveDesc = item.descripcion,
                                    estado = false,
                                });
                            }
                            else
                            {
                                objArchivo.archiveDesc = item.descripcion;
                            }
                        }

                        //REGRESAR LISTA DE LOS ARCHIVOS DEL CANDIDATO SIN EXPEDIENTE
                        resultado.Add(ITEMS, archivosSeguimientoFormatted);
                    }
                    else
                    {
                        foreach (var item in listaArchivos)
                        {

                            archivosSeguimientoFormatted.Add(new ArchivoExpedienteDigitalDTO
                            {
                                archivo_id = item.id,
                                archiveDesc = item.descripcion,
                                estado = false,
                            });

                        }


                        //REGRESAR LISTA DE LOS ARCHIVOS SIN RELACION
                        resultado.Add(ITEMS, archivosSeguimientoFormatted);
                    }
                }

                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {

                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }

            return resultado;
        }

        #region FOTO DEL EMPLEADO
        public Dictionary<string, object> GuardarFotoEmpleado(List<HttpPostedFileBase> objFotoEmpleado, ArchivosDTO objDTO)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                resultado = new Dictionary<string, object>();
                try
                {
                    #region VALIDACIONES
                    if (objDTO.claveEmpleado <= 0) throw new Exception("Ocurrió un error al guardar la foto del empleado.");
                    if (objFotoEmpleado == null) throw new Exception("Ocurrió un error al guardar la foto del empleado.");
                    #endregion

                    #region SE VERIFICA SI EXISTE LA CARPETA DONDE SE GUARDARAN LAS FOTOS DE LOS EMPLEADOS
                    var listaRutaArchivos = new List<Tuple<HttpPostedFileBase, string>>();
#if DEBUG
                    var CarpetaNueva = Path.Combine(RutaFotosEmpleadosLocal, objDTO.claveEmpleado.ToString());
#else
                    var CarpetaNueva = Path.Combine(RutaFotosEmpleados, objDTO.claveEmpleado.ToString());
#endif
                    VerificarExisteCarpeta(CarpetaNueva, true);
                    #endregion

                    #region SE GUARDA LA FOTO DEL EMPLEADO
                    string nombreArchivo = GenerarNombreFotoEmpleado("FotoEmpleado", objFotoEmpleado[0].FileName);
                    string rutaArchivo = Path.Combine(CarpetaNueva, nombreArchivo);
                    listaRutaArchivos.Add(Tuple.Create(objFotoEmpleado[0], rutaArchivo));

                    foreach (var arch in listaRutaArchivos)
                    {
                        //
                        #region SE OPTIMIZA IMAGEN
                        using (var imgAntes = Image.FromStream(arch.Item1.InputStream))
                        {
                            Bitmap myBitmap;
                            ImageCodecInfo myImageCodecInfo;
                            System.Drawing.Imaging.Encoder myEncoder;
                            EncoderParameter myEncoderParameter;
                            EncoderParameters myEncoderParameters;

                            myBitmap = new Bitmap(imgAntes, imgAntes.Width, imgAntes.Height);

                            const int ExifOrientationId = 0x112;
                            if (imgAntes.PropertyIdList.Contains(ExifOrientationId))
                            {
                                var prop = imgAntes.GetPropertyItem(ExifOrientationId);
                                var orient = BitConverter.ToInt16(prop.Value, 0);
                                prop.Value = BitConverter.GetBytes((short)1);
                                imgAntes.SetPropertyItem(prop);

                                switch (orient)
                                {
                                    case 1:
                                        //normal
                                        break;
                                    case 3:
                                        //abajo
                                        myBitmap.RotateFlip(RotateFlipType.Rotate180FlipNone);
                                        break;
                                    case 6:
                                        //izquierda
                                        myBitmap.RotateFlip(RotateFlipType.Rotate90FlipNone);
                                        break;
                                    case 8:
                                        //derecha
                                        myBitmap.RotateFlip(RotateFlipType.Rotate270FlipNone);
                                        break;
                                }
                            }

                            myImageCodecInfo = GetEncoderInfo("image/jpeg");
                            myEncoder = System.Drawing.Imaging.Encoder.Quality;
                            myEncoderParameters = new EncoderParameters(1);
                            myEncoderParameter = new EncoderParameter(myEncoder, 80L);
                            myEncoderParameters.Param[0] = myEncoderParameter;

                            using (MemoryStream memStream = new MemoryStream())
                            {
                                myBitmap.Save(memStream, myImageCodecInfo, myEncoderParameters);
                                Image newImage = Image.FromStream(memStream);
                                ImageAttributes imageAttributes = new ImageAttributes();
                                using (Graphics g = Graphics.FromImage(newImage))
                                {
                                    g.InterpolationMode =
                                      System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
                                    g.DrawImage(newImage, new Rectangle(Point.Empty, newImage.Size), 0, 0,
                                      newImage.Width, newImage.Height, GraphicsUnit.Pixel, imageAttributes);
                                }

                                var r = rutaArchivo.Substring(0, rutaArchivo.IndexOf('.'));
                                r += ".jpeg";
                                rutaArchivo = r;
                                nombreArchivo = nombreArchivo.Substring(0, nombreArchivo.IndexOf('.'));
                                nombreArchivo += ".jpeg";

                                newImage.Save(rutaArchivo);
                            }
                        }
                        #endregion
                        //
                    }
                    #endregion

                    #region SE VERIFICA SI YA CONTABA CON FOTO EL EMPLEADO
                    tblRH_REC_Archivos objFoto = _context.tblRH_REC_Archivos.Where(w => w.claveEmpleado == objDTO.claveEmpleado && w.esActivo && w.tipoArchivo == 30).FirstOrDefault();
                    #endregion

                    #region SE REGISTRA FOTO DEL EMPLEADO EN LA BASE DE DATOS
                    tblRH_REC_Archivos objArchivo = new tblRH_REC_Archivos();
                    objArchivo.idCandidato = 0;
                    objArchivo.claveEmpleado = objDTO.claveEmpleado;
                    objArchivo.idFase = 0;
                    objArchivo.idActividad = 0;
                    objArchivo.tipoArchivo = 30; // tblRH_REC_ED_Archivo: id 30 - FOTO EMPLEADO
                    objArchivo.nombreArchivo = !string.IsNullOrEmpty(nombreArchivo) ? nombreArchivo.Trim() : string.Empty;
                    objArchivo.ubicacionArchivo = rutaArchivo;
                    objArchivo.fechaCreacion = DateTime.Now;
                    objArchivo.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                    objArchivo.esActivo = true;
                    _context.tblRH_REC_Archivos.Add(objArchivo);
                    _context.SaveChanges();
                    #endregion

                    resultado.Add(SUCCESS, true);
                    resultado.Add(MESSAGE, objFoto == null ? "Se ha registrado con éxito la foto del empleado" : "Se ha actualizado con éxito la foto del empleado.");
                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(0, 0, NombreControlador, "GuardarFotoEmpleado", e, AccionEnum.AGREGAR, objDTO.id, objDTO);
                    resultado.Add(MESSAGE, e.Message);
                    resultado.Add(SUCCESS, false);
                }
            }
            return resultado;
        }

        private static ImageCodecInfo GetEncoderInfo(String mimeType)
        {
            int j;
            ImageCodecInfo[] encoders;
            encoders = ImageCodecInfo.GetImageEncoders();
            for (j = 0; j < encoders.Length; ++j)
            {
                if (encoders[j].MimeType == mimeType)
                    return encoders[j];
            }
            return null;
        }

        private static bool VerificarExisteCarpeta(string path, bool crear = false)
        {
            bool existe = false;
            try
            {
                existe = Directory.Exists(path);
                if (!existe && crear)
                {
                    Directory.CreateDirectory(path);
                    existe = true;
                }
            }
            catch (Exception e)
            {
                existe = false;
            }
            return existe;
        }

        private string GenerarNombreFotoEmpleado(string nombreBase, string fileName)
        {
            return String.Format("{0}_{1}{2}", nombreBase, fileName.Split('.')[0], Path.GetExtension(fileName));
        }

        public Dictionary<string, object> GetFotoEmpleado(ArchivosDTO objDTO)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                RelacionExpedienteArchivoDTO obj = new RelacionExpedienteArchivoDTO();

                #region SE OBTIENE LA ULTIMA FOTO DEL EMPLEADO CARGADA, SI NO TIENE, SE ENVIA VACIO.
                tblRH_REC_Archivos objFotoEmpleado = _context.tblRH_REC_Archivos.Where(w => w.claveEmpleado == objDTO.claveEmpleado && w.esActivo && w.tipoArchivo == 30).OrderByDescending(o => o.id).FirstOrDefault();

                if (objFotoEmpleado == null)
                {
                    //
                    var expediente = _context.tblRH_REC_ED_Expediente.FirstOrDefault(x => x.claveEmpleado == objDTO.claveEmpleado);
                    if (expediente != null)
                    {
                        var fotoExp = _context.tblRH_REC_ED_RelacionExpedienteArchivo.Where(x => x.expediente_id == expediente.id && x.archivo_id == 30).OrderByDescending(x => x.id).FirstOrDefault();
                        if (fotoExp != null)
                        {
                            obj.rutaArchivo = fotoExp.rutaArchivo;
#if DEBUG
                            var rutaLocal = RutaFotosEmpleadosLocal + "\\" + objDTO.claveEmpleado + "\\" + Path.GetFileName(obj.rutaArchivo);
                            obj.rutaArchivo = rutaLocal;
#endif
                            //
                            using (var imgAntes = Image.FromFile(obj.rutaArchivo))
                            {
                                Bitmap myBitmap;
                                ImageCodecInfo myImageCodecInfo;
                                System.Drawing.Imaging.Encoder myEncoder;
                                EncoderParameter myEncoderParameter;
                                EncoderParameters myEncoderParameters;

                                myBitmap = new Bitmap(imgAntes, (int)imgAntes.Width / 2, (int)imgAntes.Height / 2);

                                const int ExifOrientationId = 0x112;
                                if (imgAntes.PropertyIdList.Contains(ExifOrientationId))
                                {
                                    var prop = imgAntes.GetPropertyItem(ExifOrientationId);
                                    var orient = BitConverter.ToInt16(prop.Value, 0);
                                    prop.Value = BitConverter.GetBytes((short)1);
                                    imgAntes.SetPropertyItem(prop);

                                    switch (orient)
                                    {
                                        case 1:
                                            //normal
                                            break;
                                        case 3:
                                            //abajo
                                            myBitmap.RotateFlip(RotateFlipType.Rotate180FlipNone);
                                            break;
                                        case 6:
                                            //izquierda
                                            myBitmap.RotateFlip(RotateFlipType.Rotate90FlipNone);
                                            break;
                                        case 8:
                                            //derecha
                                            myBitmap.RotateFlip(RotateFlipType.Rotate270FlipNone);
                                            break;
                                    }
                                }

                                myImageCodecInfo = GetEncoderInfo("image/jpeg");
                                myEncoder = System.Drawing.Imaging.Encoder.Quality;
                                myEncoderParameters = new EncoderParameters(1);
                                myEncoderParameter = new EncoderParameter(myEncoder, 60L);
                                myEncoderParameters.Param[0] = myEncoderParameter;

                                using (MemoryStream memStream = new MemoryStream())
                                {
                                    myBitmap.Save(memStream, myImageCodecInfo, myEncoderParameters);
                                    Image newImage = Image.FromStream(memStream);
                                    ImageAttributes imageAttributes = new ImageAttributes();
                                    using (Graphics g = Graphics.FromImage(newImage))
                                    {
                                        g.InterpolationMode =
                                          System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
                                        g.DrawImage(newImage, new Rectangle(Point.Empty, newImage.Size), 0, 0,
                                          newImage.Width, newImage.Height, GraphicsUnit.Pixel, imageAttributes);
                                    }

                                    //var r = rutaArchivo.Substring(0, rutaArchivo.IndexOf('.'));
                                    //r += ".jpeg";
                                    //rutaArchivo = r;
                                    //nombreArchivo = nombreArchivo.Substring(0, nombreArchivo.IndexOf('.'));
                                    //nombreArchivo += ".jpeg";

                                    //newImage.Save(rutaArchivo);

                                    using (MemoryStream ms1 = new MemoryStream())
                                    {
                                        newImage.Save(ms1, newImage.RawFormat);
                                        byte[] imageBytes1 = ms1.ToArray();
                                        obj.imageToBase64 = Convert.ToBase64String(imageBytes1);
                                        resultado.Add("objRptFotoEmpleado", imageBytes1);
                                    }
                                }
                            }
                            //

                            //var imageArray = System.IO.File.ReadAllBytes(obj.rutaArchivo);
                            //var base64ImageRepresentation = Convert.ToBase64String(imageArray);
                            //obj.imageToBase64 = base64ImageRepresentation;
                            //resultado.Add("objRptFotoEmpleado", imageArray);
                        }
                        else
                        {
                            obj.rutaArchivo = string.Empty;
                            resultado.Add("objRptFotoEmpleado", new byte[0]);
                        }
                    }
                    else
                    {
                        obj.rutaArchivo = string.Empty;
                        resultado.Add("objRptFotoEmpleado", new byte[0]);
                    }
                    //
                }
                else
                {
                    if (objFotoEmpleado == null)
                        obj.rutaArchivo = string.Empty;
                    else
                        obj.rutaArchivo = objFotoEmpleado.ubicacionArchivo;

                    if (!string.IsNullOrEmpty(obj.rutaArchivo))
                    {
#if DEBUG
                        string rutaLocal = RutaFotosEmpleadosLocal + "\\" + objDTO.claveEmpleado + "\\" + Path.GetFileName(obj.rutaArchivo);
                        obj.rutaArchivo = rutaLocal;
#endif
                        //
                        using (var imgAntes = Image.FromFile(obj.rutaArchivo))
                        {
                            Bitmap myBitmap;
                            ImageCodecInfo myImageCodecInfo;
                            System.Drawing.Imaging.Encoder myEncoder;
                            EncoderParameter myEncoderParameter;
                            EncoderParameters myEncoderParameters;

                            myBitmap = new Bitmap(imgAntes, imgAntes.Width / 2, imgAntes.Height / 2);

                            const int ExifOrientationId = 0x112;
                            if (imgAntes.PropertyIdList.Contains(ExifOrientationId))
                            {
                                var prop = imgAntes.GetPropertyItem(ExifOrientationId);
                                var orient = BitConverter.ToInt16(prop.Value, 0);
                                prop.Value = BitConverter.GetBytes((short)1);
                                imgAntes.SetPropertyItem(prop);

                                switch (orient)
                                {
                                    case 1:
                                        //normal
                                        break;
                                    case 3:
                                        //abajo
                                        myBitmap.RotateFlip(RotateFlipType.Rotate180FlipNone);
                                        break;
                                    case 6:
                                        //izquierda
                                        myBitmap.RotateFlip(RotateFlipType.Rotate90FlipNone);
                                        break;
                                    case 8:
                                        //derecha
                                        myBitmap.RotateFlip(RotateFlipType.Rotate270FlipNone);
                                        break;
                                }
                            }

                            myImageCodecInfo = GetEncoderInfo("image/jpeg");
                            myEncoder = System.Drawing.Imaging.Encoder.Quality;
                            myEncoderParameters = new EncoderParameters(1);
                            myEncoderParameter = new EncoderParameter(myEncoder, 60L);
                            myEncoderParameters.Param[0] = myEncoderParameter;

                            using (MemoryStream memStream = new MemoryStream())
                            {
                                myBitmap.Save(memStream, myImageCodecInfo, myEncoderParameters);
                                Image newImage = Image.FromStream(memStream);
                                ImageAttributes imageAttributes = new ImageAttributes();
                                using (Graphics g = Graphics.FromImage(newImage))
                                {
                                    g.InterpolationMode =
                                      System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
                                    g.DrawImage(newImage, new Rectangle(Point.Empty, newImage.Size), 0, 0,
                                      newImage.Width, newImage.Height, GraphicsUnit.Pixel, imageAttributes);
                                }

                                //var r = rutaArchivo.Substring(0, rutaArchivo.IndexOf('.'));
                                //r += ".jpeg";
                                //rutaArchivo = r;
                                //nombreArchivo = nombreArchivo.Substring(0, nombreArchivo.IndexOf('.'));
                                //nombreArchivo += ".jpeg";

                                //newImage.Save(rutaArchivo);

                                using (MemoryStream ms1 = new MemoryStream())
                                {
                                    newImage.Save(ms1, newImage.RawFormat);
                                    byte[] imageBytes1 = ms1.ToArray();
                                    obj.imageToBase64 = Convert.ToBase64String(imageBytes1);
                                    resultado.Add("objRptFotoEmpleado", imageBytes1);
                                }
                            }
                        }
                        //

                        //byte[] imageArray = System.IO.File.ReadAllBytes(obj.rutaArchivo);
                        //string base64ImageRepresentation = Convert.ToBase64String(imageArray);
                        //obj.imageToBase64 = base64ImageRepresentation;
                        //resultado.Add("objRptFotoEmpleado", imageArray);
                    }
                    else
                    {
                        resultado.Add("objRptFotoEmpleado", new byte[0]);

                    }
                }

                resultado.Add("objFotoEmpleado", obj);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(0, 0, NombreControlador, "GetFotoEmpleado", e, AccionEnum.CONSULTA, objDTO.id, objDTO);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }
        #endregion

        public Dictionary<string, object> GetHistorialCC(int clave_empleado)
        {
            resultado.Clear();

            try
            {
                var lstHistorialCC = _context.tblRH_EK_Empl_CC_Historial.Where(e => e.clave_empleado == clave_empleado).ToList();

                resultado.Add(ITEMS, lstHistorialCC);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }

            return resultado;
        }

        public Dictionary<string, object> AutorizacionMultiple(List<int> claveEmpleados)
        {
            resultado.Clear();

            var usuariosAutorizadores = new List<int> {
                    Convert.ToInt32(vSesiones.sesionUsuarioDTO.cveEmpleado)
                };

            //Diana Alvarez tambien puede autorizar los empleados a los que se indica a Manuel Cruz como autorizante.
            if (vSesiones.sesionUsuarioDTO.id == 1019 || vSesiones.sesionUsuarioDTO.id == 3381) //1019 == Diana Alvarez, 1041 == Miguel Cruz. Maricela
            {
                usuariosAutorizadores.Add(113); //113 == cveEmpleado Manuel Cruz.
            }

            try
            {
                var lstCorreos = new List<string>();
                var lstCorreosBase = new List<string>();
                var lstIdsCorreos = new List<int>();
                var empleadosPendientesAutorizar = _context.tblRH_EK_Empleados
                    .Where(x =>
                        x.esActivo &&
                        claveEmpleados.Contains(x.clave_empleado) &&
                        x.estatus_empleado == "P" &&
                        x.autoriza.HasValue &&
                        usuariosAutorizadores.Contains(x.autoriza.Value)).ToList();
                var correosCC = new List<string>();

                var grpEmpleados = new List<List<tblRH_EK_Empleados>>();

                #region correo
                var ccs = empleadosPendientesAutorizar.Select(x => x.cc_contable).Distinct().ToList();
                var infoCcs = _ccFS_SP.GetCCsNominaFiltrados(ccs);
                var puestos = empleadosPendientesAutorizar.Select(x => x.puesto).Distinct().ToList();
                var infoPuestos = _context.tblRH_EK_Puestos.Where(x => x.registroActivo && puestos.Contains(x.puesto)).Select(x => new { x.puesto, x.descripcion }).ToList();
                var regPatronales = empleadosPendientesAutorizar.Select(x => x.id_regpat).ToList();
                var infoRegPatronales = _context.tblRH_EK_Registros_Patronales.Where(x => x.esActivo && regPatronales.Contains(x.clave_reg_pat)).Select(x => new { x.clave_reg_pat, x.nombre_corto }).ToList();

                //Agrupar
                var grpCC = empleadosPendientesAutorizar.GroupBy(e => e.cc_contable).ToList();
                correosCC = _context.tblP_Usuario.Where(x => x.estatus && lstIdsCorreos.Contains(x.id)).Select(x => x.correo).ToList();
                lstCorreosBase.AddRange(correosCC);

                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan 
                    || vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora
                    || vSesiones.sesionEmpresaActual == (int)EmpresaEnum.GCPLAN)
                {
                    lstCorreosBase.AddRange(new List<string> 
                    { 
                        "auxnominas.hmo@taxandlegal.com.mx",
                        "aux.seguridadsocialhmo@taxandlegal.com.mx",
                        "auxoperacionfiscal.hmo@taxandlegal.com.mx",
                        "seguridadsocial.hmo@taxandlegal.com.mx",
                        "operacionfiscalhmo@taxandlegal.com.mx",
                        "seguridadsocialhmo.taxandlegal@gmail.com",
                        "nominas.hmo@taxandlegal.com.mx",
                        "despacho@construplan.com.mx",
                    });
                }

                lstCorreosBase.Add("diana.alvarez@construplan.com.mx");
                lstCorreosBase.Add("keyla.vasquez@construplan.com.mx");
                lstCorreosBase = lstCorreosBase.Distinct().ToList();
#if DEBUG
                //lstCorreos = new List<string> { "martin.zayas@construplan.com.mx", "miguel.buzani@construplan.com.mx" };
                lstCorreosBase = new List<string> { "martin.zayas@construplan.com.mx", "miguel.buzani@construplan.com.mx" };
#endif

                var asuntoCorreo = "";
                var cuerpoCorreo = "";

                foreach (var item in grpCC)
                {
                    var empleados = new List<tblRH_EK_Empleados>();

                    foreach (var itemCC in item)
                    {
                        empleados.Add(itemCC);
                    }

                    var grpRegPat = empleados.GroupBy(e => e.id_regpat).ToList();

                    foreach (var itemRP in grpRegPat)
                    {
                        var grpEmpleadosRegPatCC = new List<tblRH_EK_Empleados>();

                        foreach (var itemRPEMP in itemRP)
                        {
                            grpEmpleadosRegPatCC.Add(itemRPEMP);
                        }

                        grpEmpleados.Add(grpEmpleadosRegPatCC);
                    }

                }

                foreach (var grp in grpEmpleados)
                {
                    lstCorreos = lstCorreosBase;

                    asuntoCorreo = "";
                    cuerpoCorreo = "<p>Los siguientes empleados han sido dados de alta:</p><p>";
                    foreach (var item in grp)
                    {
                        var ccEmpleado = _context.tblC_Nom_CatalogoCC.FirstOrDefault(x => x.cc == item.cc_contable);
                        var puestoEmpleado = _context.tblRH_EK_Puestos.FirstOrDefault(x => x.puesto == item.puesto);
                        var regPatEmpleado = _context.tblRH_EK_Registros_Patronales.FirstOrDefault(x => x.clave_reg_pat == item.id_regpat);

                        if (asuntoCorreo == "")
                        {
                            asuntoCorreo = "ALTAS en el CC " + ccEmpleado.cc + " " + regPatEmpleado.nombre_corto;
                        }

                        cuerpoCorreo += item.clave_empleado + " - " + item.ape_paterno + " " + item.ape_materno + " " + item.nombre;
                        cuerpoCorreo += ", para el centro de costos: " + (ccEmpleado != null ? ccEmpleado.cc + " - " + ccEmpleado.ccDescripcion : "");
                        cuerpoCorreo += ", con el puesto de: " + (puestoEmpleado != null ? puestoEmpleado.descripcion : "");
                        cuerpoCorreo += " y registro patronal: " + (regPatEmpleado != null ? regPatEmpleado.nombre_corto : "") + "<br>";
                    }
                    cuerpoCorreo += "</p>";

                    #region ADJUNTAR ARCHIVO DE LAYOUT
                    var strClavesEmpleados = new List<string>();

                    foreach (var item in grp.Select(x => x.clave_empleado))
                    {
                        strClavesEmpleados.Add(item.ToString());
                    }

                    //var reporteLayout = GetEmpleadosLayoutPendendiente(strClavesEmpleados);
                    var reporteLayout = _context.Select<LayoutAltasRHDTO>(new DapperDTO
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = @"SELECT 
                                        e.tipo_nomina AS dias , e.clave_empleado AS EMP_TRAB,
                                        CONVERT(CHAR(20) ,e.fecha_antiguedad ,103)AS EMP_ALTA, 
                                        (e.ape_paterno+'/'+e.ape_materno+'/'+e.nombre) AS EMP_NOM, 
                                        e.rfc AS EMP_RFC, 
                                        e.curp AS EMP_CURP,
                                        1 AS EMP_CC,
                                        e.cc_contable +' '+c.ccDescripcion AS EMP_DP,
                                        2 AS EMP_SM,
                                        e.sexo AS EMP_SEXO,
                                        e.clave_estado_nac AS EMP_NAC_EF,
                                        CONVERT(CHAR(20), e.fecha_nac,103) AS EMP_NAC_FECHA,
                                        CONVERT(CHAR(20),(CASE WHEN
                                        (SELECT TOP 1 ser.fecha_reingreso 
                                        FROM tblRH_EK_Empl_Recontratacion as ser where ser.clave_empleado = e.clave_empleado 
                                        AND ser.cc = e.cc_contable 
                                        AND ser.fecha_reingreso > e.fecha_alta  
                                        ORDER BY ser.fecha_reingreso DESC) 
                                        IS NULL THEN null ELSE 
                                        (SELECT TOP 1 ser.fecha_reingreso 
                                        FROM tblRH_EK_Empl_Recontratacion as ser where ser.clave_empleado = e.clave_empleado 
                                        AND ser.cc = e.cc_contable 
                                        AND ser.fecha_reingreso > e.fecha_alta  
                                        ORDER BY ser.fecha_reingreso DESC) END) ,103) AS EMP_ULTIMO_REINGRESO,
                                        15 AS EMP_AGUINALDO,
                                        6 AS EMP_VACACIONES,
                                        (case e.tipo_nomina when 1 then 1 when 4 then 2 else 2 end) AS EMP_NOMINA,
                                        1 AS EMP_IMSS_TIPO,
                                        (SELECT top 1 ( case reg_pat when 31 then 5  when 33 then 6 when 24 then 2 when 30 then 4 when 23 then 1 else 1 end) FROM tblRH_EK_Empl_Reg_Pat_Historial where clave_empleado=e.clave_empleado order by fecha_cambio desc) as EMP_SUCURSAL,
                                        CASE e.sindicato WHEN 'S' THEN 1 WHEN 'N' THEN 2 ELSE 2 END  AS EMP_CL,
                                        1 AS EMP_TURNO,
                                        e.puesto AS EMP_PUESTO,
                                        pu.descripcion as EMP_PUESTO_DESCRIPCION,
                                        e.nss AS EMP_NSS,
                                        e.unidad_medica AS EMP_UMF,
                                        CONVERT(CHAR(20),(CASE WHEN
                                        (SELECT TOP 1 ser.fecha_reingreso 
                                        FROM tblRH_EK_Empl_Recontratacion as ser where ser.clave_empleado = e.clave_empleado 
                                        AND ser.cc = e.cc_contable 
                                        AND ser.fecha_reingreso > e.fecha_alta  
                                        ORDER BY ser.fecha_reingreso DESC) 
                                        IS NULL THEN e.fecha_alta ELSE 
                                        (SELECT TOP 1 ser.fecha_reingreso 
                                        FROM tblRH_EK_Empl_Recontratacion as ser where ser.clave_empleado = e.clave_empleado 
                                        AND ser.cc = e.cc_contable 
                                        AND ser.fecha_reingreso > e.fecha_alta  
                                        ORDER BY ser.fecha_reingreso DESC) END) ,103) AS EMP_FSUELDO,
                                        (SELECT top 1 salario_base FROM tblRH_EK_Tabulador_Historial TBH WHERE TBH.clave_empleado =  e.clave_empleado ORDER BY id desc) AS EMP_SUELDO,
                                        (SELECT top 1 complemento FROM tblRH_EK_Tabulador_Historial TBH WHERE TBH.clave_empleado =  e.clave_empleado ORDER BY id desc) AS EMP_SUELDO1,
                                        (SELECT top 1 bono_zona FROM tblRH_EK_Tabulador_Historial TBH WHERE TBH.clave_empleado =  e.clave_empleado ORDER BY id desc) AS EMP_SUELDO2,
                                        '' AS EMP_SDI, 
                                        CASE empg.tel_casa WHEN NULL THEN '' ELSE empg.tel_casa END AS EMP_DIR_TELEFONO,  
                                        CASE empg.tel_cel WHEN NULL THEN '' ELSE empg.tel_cel END AS EMP_DIR_CELULAR,  
                                        empg.domicilio AS EMP_DIR_CALLE,empg.numero_exterior AS EMP_DIR_NO,empg.colonia AS EMP_DIR_COLONIA,empg.codigo_postal AS EMP_DIR_CP,
                                        cd.descripcion AS EMP_DIR_MUNICIPIO,cd.descripcion AS EMP_DIR_POBLACION, est.descripcion AS EMP_DIR_ESTADO,
                                        (empg.nombre_ben+'/'+empg.parterno_ben+'/'+empg.materno_ben) AS NOM_BENEF,(select top 1 SNP.descripcion FROM tblRH_EK_Parentesco SNP where SNP.id = empg.parentesco_ben) AS PARENT_BENEF, empg.fecha_nac_ben AS BENEF_NAC_FECHA ,
                                        empg.email as EMP_MAIL,
                                        e.CPCIF as AP
                                    FROM tblRH_EK_Empleados AS e 
                                    INNER JOIN tblRH_EK_Empleados AS ne ON e.jefe_inmediato=ne.clave_empleado  
                                    INNER JOIN tblC_Nom_CatalogoCC AS c ON c.cc = e.cc_contable  
                                    INNER JOIN tblRH_EK_Puestos AS pu ON e.puesto = pu.puesto  
                                    INNER JOIN tblRH_EK_Tipos_Nomina AS tn ON e.tipo_nomina = tn.tipo_nomina  
                                    INNER JOIN tblRH_EK_Departamentos AS dp ON dp.clave_depto = e.clave_depto 
                                    INNER JOIN tblRH_EK_Empl_Grales AS empg ON empg.clave_empleado = e.clave_empleado  
                                    INNER JOIN tblRH_EK_Estados AS est ON (est.clave_estado = empg.estado_dom and est.clave_pais=e.clave_pais_nac) 
                                    INNER JOIN tblRH_EK_Ciudades AS cd ON (cd.clave_cuidad = empg.cuidado_dom and cd.clave_pais=e.clave_pais_nac and cd.clave_estado=empg.estado_dom)
                                    WHERE e.clave_empleado IN @strClavesEmpleados",
                        parametros = new { strClavesEmpleados }
                    });

                    byte[] archive = GetArchivoLayoutAltas(reporteLayout, strClavesEmpleados);

                    var lstArchives = new List<adjuntoCorreoDTO>();

                    lstArchives.Add(new adjuntoCorreoDTO
                    {
                        archivo = archive,
                        nombreArchivo = "layout",
                        extArchivo = ".xlsx"
                    });
                    #endregion

                    //CAMBIAR EL ESTATUS DEL EMPLEADO
                    using (var tran = _context.Database.BeginTransaction())
                    {
                        try
                        {
                            var cveEmpleadosInt = grp.Select(x => x.clave_empleado).ToList();
                            var lstCCs = grp.Select(x => x.cc_contable).ToList();
                            foreach (var item in empleadosPendientesAutorizar.Where(x => cveEmpleadosInt.Contains(x.clave_empleado)))
                            {
                                item.estatus_empleado = "A";
                                item.fechaModificacion = DateTime.Now;
                                item.idUsuarioModificacion = vSesiones.sesionUsuarioDTO.id;

                                #region Cerrar Solicitud
                                var registroCandidato = _context.tblRH_REC_GestionCandidatos.FirstOrDefault(x => x.esActivo && x.clave_empleado == item.clave_empleado);

                                if (registroCandidato != null)
                                {

                                    var registroSolicitud = _context.tblRH_REC_Solicitudes.FirstOrDefault(x => x.esActivo && x.id == registroCandidato.idGestionSolicitud);

                                    if (registroSolicitud != null)
                                    {
                                        registroSolicitud.terminado = true;
                                        _context.SaveChanges();
                                    }
                                }
                                #endregion
                            }

                            List<int> lstNotificantes = _context.tblRH_Notis_RelConceptoUsuario.
                                Where(e => lstCCs.Contains(e.cc) && (e.idConcepto == (int)ConceptosNotificantesEnum.Altas
                                     || e.idConcepto == (int)ConceptosNotificantesEnum.CH)).
                                Select(e => e.idUsuario).ToList();

                            foreach (var usu in lstNotificantes)
                            {
                                lstCorreos.Add(_context.tblP_Usuario.FirstOrDefault(x => x.id == usu).correo);
                            }

                            List<string> lstCorreoGenerales = _context.tblRH_Notis_RelConceptoCorreo.
                                Where(e => lstCCs.Contains(e.cc) && (e.idConcepto == (int)ConceptosNotificantesEnum.Altas
                                    || e.idConcepto == (int)ConceptosNotificantesEnum.CH)).
                                Select(e => e.correo).ToList();

                            foreach (var correo in lstCorreoGenerales)
                            {
                                lstCorreos.Add(correo);
                            }

                            lstCorreos = lstCorreos.Distinct().ToList();

                            _context.SaveChanges();
                            tran.Commit();

                            GlobalUtils.sendMailWithFilesReclutamientos(string.Format("{0}: {1}", PersonalUtilities.GetNombreEmpresa(), asuntoCorreo), cuerpoCorreo, lstCorreos.Distinct().ToList(), lstArchives);
                        }
                        catch (Exception)
                        {
                            tran.Rollback();
                            throw;
                        }
                    }
                }
                #endregion

                //tran.Commit();

                resultado.Add(SUCCESS, true);
            }
            catch (Exception ex)
            {
                //tran.Rollback();

                LogError(16, 16, "ReclutamientosController", "AutorizacionMultiple", ex, AccionEnum.ACTUALIZAR, 0, claveEmpleados);

                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);
            }



            return resultado;
        }

        public Dictionary<string, object> GetHeaderEmpleados()
        {
            resultado.Clear();

            try
            {
                var objHead = _context.Select<HeaderEmpleadosDTO>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = @"SELECT  estatus_empleado, COUNT(estatus_empleado) as cant FROM tblRH_EK_Empleados WHERE esActivo = 1 AND cc_contable NOT IN ('000')  GROUP BY estatus_empleado ",
                }).ToList();

                resultado.Add(ITEMS, objHead);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }

            return resultado;
        }

        public Dictionary<string, object> CheckEmpleado(string curp, string rfc, string nss)
        {
            resultado.Clear();

            try
            {
                tblRH_EK_Empleados objEmpleado = null;
                if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                {
                    //objEmpleado = _context.tblRH_EK_Empleados.FirstOrDefault(e => !string.IsNullOrEmpty(e.nss) && e.nss == nss);
                    //DNI
                }
                else if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
                {
                    //CEDULA DE CUIDADA
                }
                else
                {
                    using (var _ctx = new MainContext(EmpresaEnum.Construplan))
                    {
                        objEmpleado = _context.tblRH_EK_Empleados.FirstOrDefault(e => (!string.IsNullOrEmpty(e.curp) && !string.IsNullOrEmpty(e.rfc) && !string.IsNullOrEmpty(e.nss)) && (e.curp == curp || e.rfc == rfc || e.nss == nss));
                    }
                    if (objEmpleado == null)
                    {
                        using (var _ctx = new MainContext(EmpresaEnum.Arrendadora))
                        {
                            objEmpleado = _context.tblRH_EK_Empleados.FirstOrDefault(e => (!string.IsNullOrEmpty(e.curp) && !string.IsNullOrEmpty(e.rfc) && !string.IsNullOrEmpty(e.nss)) && (e.curp == curp || e.rfc == rfc || e.nss == nss));
                        }
                    }
                }

                if (objEmpleado != null)
                {
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, "Los datos ingresados coinciden un empleado ya registrado\nClave: " + objEmpleado.clave_empleado + " Nombre: " + objEmpleado.ape_paterno + " " + objEmpleado.ape_materno + " " + objEmpleado.nombre);
                }
                else
                {
                    resultado.Add(SUCCESS, true);

                }
            }
            catch (Exception e)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }

            return resultado;
        }

        public Byte[] GetArchivoLayoutAltas(List<LayoutAltasRHDTO> reporte, List<string> lstClaves)
        {
            try
            {
                MemoryStream memStream = new MemoryStream();
                StreamWriter streamWriter = new StreamWriter(memStream);
                string Cadena = "EMP_TRAB|EMP_ALTA|EMP_NOM|EMP_RFC|EMP_CURP|EMP_CC|EMP_DP|EMP_SM|EMP_SEXO|EMP_NAC_EF|EMP_NAC_FECHA|EMP_ULTIMO_REINGRESO|EMP_AGUINALDO|EMP_VACACIONES|EMP_NOMINA|EMP_IMSS_TIPO|EMP_SUCURSAL|EMP_CL|EMP_TURNO|EMP_PUESTO|EMP_PUESTO_DESCRIPCION|EMP_NSS|EMP_UMF|EMP_FSUELDO|EMP_SUELDO|EMP_SUELDO1|EMP_SUELDO2|EMP_SDI|EMP_DIR_CALLE|EMP_DIR_NO|EMP_DIR_COLONIA|EMP_DIR_CP|EMP_DIR_MUNICIPIO|EMP_DIR_POBLACION|EMP_DIR_ESTADO|EMP_DIR_TELEFONO|EMP_DIR_CELULAR|NOM_BENEF|PARENT_BENEF|BENEF_NAC_FECHA|EMP_MAIL|AP";
                streamWriter.WriteLine(Cadena);
                //List<Core.DTO.RecursosHumanos.Reclutamientos.LayoutAltasRHDTO> listaIF = (List<Core.DTO.RecursosHumanos.Reclutamientos.LayoutAltasRHDTO>)Session["ListaLayoutAltasRHDTO"];
                var EmpleadosSEleccionados = lstClaves;
                DataTable dtLayout = new DataTable();
                var EncabezadoTabla = Cadena.Split('|');

                for (int i = 0; i < EncabezadoTabla.Length; i++)
                {
                    dtLayout.Columns.Add(EncabezadoTabla[i]);
                }

                foreach (var listaRow in reporte.Where(x => EmpleadosSEleccionados.Contains(x.EMP_TRAB)))
                {
                    int dias = listaRow.dias, diasSueldo = 0;
                    switch (dias)
                    {
                        case 1:
                            diasSueldo = 7;
                            break;
                        case 2:
                            diasSueldo = 10;
                            break;
                        case 3:
                            diasSueldo = 14;
                            break;
                        case 4:
                            diasSueldo = 15;
                            break;
                        case 5:
                            diasSueldo = 30;
                            break;
                        default:
                            break;
                    }
                    if (diasSueldo != 0)
                    {
                        double saldodiario = Math.Round((listaRow.EMP_SUELDO == "0" ? 0 : Convert.ToDouble(listaRow.EMP_SUELDO) / diasSueldo), 2);
                        double SDI = Math.Round(saldodiario * 1.0493, 2);
                        dtLayout.Rows.Add(
                            listaRow.EMP_TRAB,
                            listaRow.EMP_ALTA,
                            listaRow.EMP_NOM,
                            listaRow.EMP_RFC,
                            listaRow.EMP_CURP,
                            listaRow.EMP_CC,
                            listaRow.EMP_DP,
                            listaRow.EMP_SM,
                            listaRow.EMP_SEXO,
                            listaRow.EMP_NAC_EF,
                            listaRow.EMP_NAC_FECHA,
                            listaRow.EMP_ULTIMO_REINGRESO,
                            listaRow.EMP_AGUINALDO,
                            listaRow.EMP_VACACIONES,
                            listaRow.EMP_NOMINA,
                            listaRow.EMP_IMSS_TIPO,
                            listaRow.EMP_SUCURSAL,
                            listaRow.EMP_CL,
                            listaRow.EMP_TURNO,
                            listaRow.EMP_PUESTO,
                            listaRow.EMP_PUESTO_DESCRIPCION,
                            listaRow.EMP_NSS,
                            listaRow.EMP_UMF,
                            listaRow.EMP_FSUELDO,
                            saldodiario,
                            listaRow.EMP_SUELDO1,
                            listaRow.EMP_SUELDO2,
                            SDI,
                            listaRow.EMP_DIR_CALLE,
                            listaRow.EMP_DIR_NO,
                            listaRow.EMP_DIR_COLONIA,
                            listaRow.EMP_DIR_CP,
                            listaRow.EMP_DIR_MUNICIPIO,
                            listaRow.EMP_DIR_POBLACION,
                            listaRow.EMP_DIR_ESTADO,
                            listaRow.EMP_DIR_TELEFONO,
                            listaRow.EMP_DIR_CELULAR,
                            listaRow.NOM_BENEF,
                            listaRow.PARENT_BENEF,
                            listaRow.BENEF_NAC_FECHA,
                            listaRow.EMP_MAIL,
                            listaRow.AP
                       );
                    }
                }

                return WriteExcelWithNPOI(dtLayout);
            }
            catch (Exception e)
            {
                return null;
            }
        }

        private byte[] WriteExcelWithNPOI(DataTable table)
        {

            try
            {
                MemoryStream file = new MemoryStream();

                using (var pack = new ExcelPackage())
                {
                    ExcelWorksheet ws = pack.Workbook.Worksheets.Add("Layout");
                    ws.Cells["A1"].LoadFromDataTable(table, true);
                    //ms.WriteTo(file);
                    return pack.GetAsByteArray();

                }
            }
            catch (Exception e)
            {

                return null;
            }


        }

        public Dictionary<string, object> FillCboTipoEmpleados()
        {
            resultado = new Dictionary<string, object>();
            using (var _ctx = new MainContext(vSesiones.sesionEmpresaActual))
            {
                try
                {
                    #region FILL CBO
                    List<ComboDTO> lstTipoEmpleados = _ctx.Select<ComboDTO>(new DapperDTO
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = @"SELECT id AS VALUE, tipoEmpleado AS TEXT, porcentaje AS PREFIJO FROM tblRH_EK_CatTipoEmpleados WHERE registroActivo = @registroActivo",
                        parametros = new { registroActivo = true }
                    }).ToList();

                    resultado.Add(SUCCESS, true);
                    resultado.Add(ITEMS, lstTipoEmpleados);
                    #endregion
                }
                catch (Exception e)
                {
                    LogError(0, 0, "", "FillCboTipoEmpleado", e, AccionEnum.FILLCOMBO, 0, 0);
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                }
                return resultado;
            }
        }

        public Dictionary<string, object> GuardarSustentoHijo(List<HttpPostedFileBase> lstSustentos, int claveEmpleado, int FK_EmplFamilia)
        {
            resultado = new Dictionary<string, object>();
            using (var _ctx = new MainContext(vSesiones.sesionEmpresaActual))
            {
                try
                {
                    #region SE REGISTRA LAS EVIDENCIAS CARGADAS POR CADA EMPLEADO
                    var CarpetaNueva = Path.Combine(_RUTA_SUSTENTO_HIJOS, claveEmpleado.ToString());
                    VerificarCarpeta(CarpetaNueva, true);

                    string nombreArchivo = SetNombreArchivo(claveEmpleado, lstSustentos[0].FileName);
                    string rutaArchivo = Path.Combine(CarpetaNueva, nombreArchivo);
                    var listaRutaArchivos = new List<Tuple<HttpPostedFileBase, string>>();
                    listaRutaArchivos.Add(Tuple.Create(lstSustentos[0], rutaArchivo));

                    foreach (var item in listaRutaArchivos)
                    {
                        if (GlobalUtils.SaveHTTPPostedFile(item.Item1, item.Item2) == false) { }
                    }

                    tblRH_EK_SustentosHijos objSustentoHijo = new tblRH_EK_SustentosHijos();
                    objSustentoHijo.claveEmpleado = claveEmpleado;
                    objSustentoHijo.FK_EmplFamilia = FK_EmplFamilia;
                    objSustentoHijo.nombreArchivo = nombreArchivo;
                    objSustentoHijo.rutaArchivo = rutaArchivo;
                    objSustentoHijo.FK_UsuarioCreacion = vSesiones.sesionUsuarioDTO.id;
                    objSustentoHijo.fechaCreacion = DateTime.Now;
                    objSustentoHijo.registroActivo = true;
                    _ctx.tblRH_EK_SustentosHijos.Add(objSustentoHijo);
                    _ctx.SaveChanges();

                    resultado.Add(SUCCESS, true);
                    resultado.Add(MESSAGE, "Se ha registrado con éxito.");

                    // SE REGISTRA BITACORA
                    SaveBitacora(0, (int)AccionEnum.AGREGAR, 0, JsonUtils.convertNetObjectToJson(claveEmpleado));
                    #endregion
                }
                catch (Exception e)
                {
                    var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.AGREGAR, 0, null);
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                }
            }
            return resultado;
        }

        public Dictionary<string, object> GetSustentos(int claveEmpleado, int FK_EmplFamilia)
        {
            resultado = new Dictionary<string, object>();
            using (var _ctx = new MainContext(vSesiones.sesionEmpresaActual))
            {
                try
                {
                    List<tblRH_EK_SustentosHijos> lstSustentos = _ctx.tblRH_EK_SustentosHijos.Where(w => w.claveEmpleado == claveEmpleado && w.FK_EmplFamilia == FK_EmplFamilia && w.registroActivo).ToList();

                    List<SustentoHijoDTO> lstDTO = new List<SustentoHijoDTO>();
                    SustentoHijoDTO objDTO = new SustentoHijoDTO();
                    foreach (var item in lstSustentos)
                    {
                        objDTO = new SustentoHijoDTO();
                        objDTO.id = item.id;
                        objDTO.nombreArchivo = item.nombreArchivo;
                        objDTO.rutaArchivo = item.rutaArchivo;
                        lstDTO.Add(objDTO);
                    }

                    resultado.Add(SUCCESS, true);
                    resultado.Add(ITEMS, lstDTO);
                }
                catch (Exception e)
                {
                    var NOMBRE_FUNCION = System.Reflection.MethodBase.GetCurrentMethod().Name;
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_FUNCION, e, AccionEnum.CONSULTA, 0, null);
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                }
            }
            return resultado;
        }

        private static bool VerificarCarpeta(string path, bool crear = false)
        {
            bool existe = false;
            try
            {
                existe = Directory.Exists(path);
                if (!existe && crear)
                {
                    Directory.CreateDirectory(path);
                    existe = true;
                }
            }
            catch (Exception e)
            {
                existe = false;
            }
            return existe;
        }

        private string SetNombreArchivo(int claveEmpleado, string fileName)
        {
            string nombreArchivo = string.Empty;
            try
            {
                nombreArchivo = string.Format("{0}-{1}", claveEmpleado, fileName);//, Path.GetExtension(fileName));
            }
            catch (Exception e)
            {
                var NOMBRE_METODO = System.Reflection.MethodBase.GetCurrentMethod().Name;
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, NOMBRE_METODO, e, AccionEnum.CONSULTA, 0, null);
            }
            return nombreArchivo;
        }

        public Tuple<Stream, string> DescagarSustento(int id)
        {
            tblRH_EK_SustentosHijos objSustento = _context.tblRH_EK_SustentosHijos.Where(w => w.id == id).FirstOrDefault();
            var fileStream = GlobalUtils.GetFileAsStream(objSustento.rutaArchivo);
            string name = Path.GetFileName(objSustento.nombreArchivo);

            return Tuple.Create(fileStream, name);
        }
        #endregion

        #region GESTION DE ARCHIVOS DEL CANDIDATO/EMPLEADO
        public List<ArchivosDTO> GetArchivosCandidato(int idCandidato)
        {
            try
            {
                List<tblRH_REC_Archivos> lstArchivos = _context.tblRH_REC_Archivos.Where(w => w.tipoArchivo == (int)TipoArchivoEnum.CV && w.esActivo).ToList();

                #region SE OBTIENE LOS ARCHIVOS (CV) DEL CANDIDATO SELECCIONADO
                List<ArchivosDTO> lstArchivosCV = lstArchivos.Where(w => w.idCandidato == idCandidato).Select(s => new ArchivosDTO
                {
                    id = s.id,
                    idCandidato = s.idCandidato,
                    nombreArchivo = s.nombreArchivo
                }).ToList();
                return lstArchivosCV;
                #endregion
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "GetArchivosCandidato", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }

        public bool EliminarArchivoCandidato(int idArchivo)
        {
            try
            {
                #region SE ELIMINA EL ARCHIVO AL CANDIDATO SELECCIONADO
                tblRH_REC_Archivos objEliminar = _context.tblRH_REC_Archivos.Where(w => w.id == idArchivo).FirstOrDefault();
                objEliminar.fechaModificacion = DateTime.Now;
                objEliminar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                objEliminar.esActivo = false;
                _context.SaveChanges();
                return true;
                #endregion
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "EliminarArchivoCandidato", e, AccionEnum.ELIMINAR, 0, 0);
                return false;
            }
        }
        #endregion

        #region PLATAFORMAS
        public List<PlataformasDTO> GetPlataformas()
        {
            try
            {
                #region SE OBTIENE LISTADO DE PLATAFORMAS
                List<PlataformasDTO> lstPlataformas = _context.tblRH_REC_CatPlataformas.Where(w => w.esActivo).Select(s => new PlataformasDTO
                {
                    id = s.id,
                    plataforma = s.plataforma.Trim().ToUpper()
                }).OrderBy(o => o.plataforma).ToList();
                #endregion

                #region SE CREA BITACORA
                SaveBitacora(16, (int)AccionEnum.CONSULTA, 0, JsonUtils.convertNetObjectToJson(lstPlataformas));
                #endregion

                return lstPlataformas;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "GetPlataformas", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }

        public bool CrearEditarPlataforma(PlataformasDTO objCEDTO)
        {
            try
            {
                int idPlataforma = objCEDTO.id > 0 ? objCEDTO.id : 0;
                tblRH_REC_CatPlataformas objCEPlataforma = new tblRH_REC_CatPlataformas();
                if (!objCEDTO.esActualizar)
                {
                    #region SE CREA PLATAFORMA
                    objCEPlataforma = new tblRH_REC_CatPlataformas();
                    objCEPlataforma.plataforma = !string.IsNullOrEmpty(objCEDTO.plataforma) ? objCEDTO.plataforma.Trim().ToUpper() : string.Empty;
                    objCEPlataforma.esActivo = true;
                    objCEPlataforma.fechaCreacion = DateTime.Now;
                    objCEPlataforma.fechaModificacion = new DateTime(2000, 01, 01);
                    objCEPlataforma.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                    objCEPlataforma.idUsuarioModificacion = 0;
                    _context.tblRH_REC_CatPlataformas.Add(objCEPlataforma);
                    _context.SaveChanges();
                    #endregion

                    #region SE OBTIENE EL ID DE LA PLATAFORMA REGISTRADA
                    if (idPlataforma == 0)
                        idPlataforma = _context.tblRH_REC_CatPlataformas.OrderByDescending(o => o.id).Select(s => s.id).FirstOrDefault();
                    #endregion
                }
                else if (objCEDTO.id > 0 && objCEDTO.esActualizar)
                {
                    #region SE ACTUALIZA LA PLATAFORMA
                    objCEPlataforma = _context.tblRH_REC_CatPlataformas.Where(w => w.id == objCEDTO.id).FirstOrDefault();
                    if (objCEPlataforma != null)
                    {
                        objCEPlataforma.plataforma = !string.IsNullOrEmpty(objCEDTO.plataforma) ? objCEDTO.plataforma.Trim().ToUpper() : string.Empty;
                        objCEPlataforma.fechaModificacion = DateTime.Now;
                        objCEPlataforma.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                        _context.SaveChanges();
                    }
                    #endregion
                }
                else
                {
                    return false;
                }

                #region SE CREA BITACORA
                SaveBitacora(16, objCEDTO.esActualizar ? (int)AccionEnum.ACTUALIZAR : (int)AccionEnum.AGREGAR, idPlataforma, JsonUtils.convertNetObjectToJson(objCEPlataforma));
                #endregion

                return true;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "CrearEditarPlataforma", e, objCEDTO.esActualizar ? AccionEnum.ACTUALIZAR : AccionEnum.AGREGAR, objCEDTO.esActualizar ? objCEDTO.id : 0, objCEDTO);
                return false;
            }
        }

        public bool EliminarPlataforma(int idPlataforma)
        {
            try
            {
                #region SE ELIMINA LA PLATAFORMA
                tblRH_REC_CatPlataformas objEliminar = _context.tblRH_REC_CatPlataformas.Where(w => w.id == idPlataforma).FirstOrDefault();
                if (objEliminar != null)
                {
                    objEliminar.esActivo = false;
                    objEliminar.fechaModificacion = DateTime.Now;
                    objEliminar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                    _context.SaveChanges();
                }
                #endregion

                #region SE CREA BITACORA
                SaveBitacora(16, (int)AccionEnum.ELIMINAR, idPlataforma, JsonUtils.convertNetObjectToJson(objEliminar));
                #endregion

                return true;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "EliminarPlataforma", e, AccionEnum.ELIMINAR, idPlataforma, idPlataforma);
                return false;
            }
        }
        #endregion

        #region CATALOGO CORREOS
        public List<tblRH_REC_CatCorreos> GetCorreos(CatCorreosDTO objFiltroDTO)
        {
            try
            {
                #region SE OBTIENE LISTADO DE CORREOS
                List<tblRH_REC_CatCorreos> lstCorreos = _context.Select<tblRH_REC_CatCorreos>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = @"SELECT id, nombre, correo, esActivo, fechaCreacion, fechaModificacion, idUsuarioCreacion, idUsuarioModificacion FROM tblRH_REC_CatCorreos WHERE esActivo = 1"
                });
                return lstCorreos;
                #endregion
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "GetCorreos", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }

        public bool CrearEditarCorreo(CatCorreosDTO objCEDTO)
        {
            Dictionary<string, object> resultCECorreo = new Dictionary<string, object>();
            try
            {
                if (objCEDTO.id > 0)
                {
                    #region SE ACTUALIZA EL CORREO
                    tblRH_REC_CatCorreos objActualizar = _context.tblRH_REC_CatCorreos.Where(w => w.id == objCEDTO.id && w.esActivo).FirstOrDefault();
                    if (objActualizar != null)
                    {
                        objActualizar.nombre = !string.IsNullOrEmpty(objCEDTO.nombre) ? objCEDTO.nombre.Trim() : string.Empty;
                        objActualizar.correo = !string.IsNullOrEmpty(objCEDTO.correo) ? objCEDTO.correo.Trim() : string.Empty;
                        objActualizar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                        objActualizar.fechaModificacion = DateTime.Now;
                        _context.SaveChanges();
                    }
                    #endregion
                }
                else
                {
                    #region SE CREA EL CORREO
                    tblRH_REC_CatCorreos objGuardar = new tblRH_REC_CatCorreos();
                    objGuardar.nombre = !string.IsNullOrEmpty(objCEDTO.nombre) ? objCEDTO.nombre.Trim() : string.Empty;
                    objGuardar.correo = !string.IsNullOrEmpty(objCEDTO.correo) ? objCEDTO.correo.Trim() : string.Empty;
                    objGuardar.esActivo = true;
                    objGuardar.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                    objGuardar.idUsuarioModificacion = 0;
                    objGuardar.fechaCreacion = DateTime.Now;
                    objGuardar.fechaModificacion = new DateTime(2000, 01, 01);
                    _context.tblRH_REC_CatCorreos.Add(objGuardar);
                    _context.SaveChanges();
                    #endregion
                }
                return true;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "CrearEditarCorreo", e, objCEDTO.id > 0 ? AccionEnum.ACTUALIZAR : AccionEnum.AGREGAR, objCEDTO.id > 0 ? objCEDTO.id : 0, objCEDTO);
                return false;
            }
        }

        public bool EliminarCorreo(int idCorreo)
        {
            try
            {
                #region SE ELIMINA EL CORREO SELECCIONADO
                tblRH_REC_CatCorreos objEliminar = _context.tblRH_REC_CatCorreos.Where(w => w.id == idCorreo && w.esActivo).FirstOrDefault();
                if (objEliminar != null)
                {
                    objEliminar.esActivo = false;
                    objEliminar.fechaModificacion = DateTime.Now;
                    objEliminar.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                    _context.SaveChanges();
                    return true;
                }
                return false;
                #endregion
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "EliminarCorreo", e, AccionEnum.ELIMINAR, idCorreo, 0);
                return false;
            }
        }
        #endregion

        #region FILL COMBOS
        public List<ComboDTO> FillCboCC()
        {
            try
            {
                #region FILL COMBO CC
                //string strQuery = @"SELECT cc AS VALUE, descripcion AS TEXT FROM cc WHERE st_ppto != 'T'";
                //var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                //odbc.consulta = String.Format(strQuery);
                //List<ComboDTO> lstCC = Data.EntityFramework.Context._contextEnkontrol.Select<ComboDTO>(EnkontrolAmbienteEnum.Prod, odbc);

                //List<ComboDTO> lstComboDTO = new List<ComboDTO>();
                //List<string> lstContain = new List<string>();
                //for (int i = 0; i < 10; i++) { lstContain.Add(i.ToString()); }
                //foreach (var item in lstCC)
                //{
                //    string cc = item.Value;
                //    string descCC = item.Text;
                //    string subCC = cc.Substring(0, 1);

                //    if (lstContain.Contains(subCC))
                //    {
                //        if (!string.IsNullOrEmpty(cc) && !string.IsNullOrEmpty(descCC))
                //        {
                //            item.Value = cc.Trim().ToUpper();
                //            item.Text = string.Format("{0}{1}{2}{3}", "[", cc.Trim().ToUpper(), "] ", descCC.Trim().ToUpper());

                //            ComboDTO obj = new ComboDTO();
                //            obj.Value = item.Value;
                //            obj.Text = item.Text;
                //            lstComboDTO.Add(obj);
                //        }
                //    }
                //}

                //// SE MUESTRA LOS CC QUE TIENE PERMISO EL USUARIO LOGUEADO
                //List<tblRH_BN_Usuario_CC> permisosUsuarioCC = _context.tblRH_BN_Usuario_CC.Where(x => x.usuarioID == vSesiones.sesionUsuarioDTO.id).ToList();
                //lstComboDTO = lstComboDTO.Where(x => (permisosUsuarioCC.Count() > 0 ? !permisosUsuarioCC.Any(y => y.cc == "*") ? permisosUsuarioCC.Select(y => y.cc).Contains(x.Value) : true : false)).ToList();

                var ccs = new List<ComboDTO>();

                ccs = _ccFS_SP.GetCCsNominaInactivos().Select(x => new ComboDTO
                {
                    Value = x.cc,
                    Text = "[" + x.cc + "] " + x.descripcion.Trim()
                }).OrderBy(x => x.Value).ToList();

                //if (vSesiones.sesionUsuarioDTO.idPerfil == (int)PerfilUsuarioEnum.ADMINISTRADOR)
                //{
                //    //ccs = _ccFS.GetCCs().Select(x => new ComboDTO
                //    //{
                //    //    Value = x.cc,
                //    //    Text = "[" + x.cc + "] " + x.descripcion.Trim()
                //    //}).OrderBy(x => x.Value).ToList();

                //    ccs = _ccFS_SP.GetCCs().Select(x => new ComboDTO
                //    {
                //        Value = x.cc,
                //        Text = "[" + x.cc + "] " + x.descripcion.Trim()
                //    }).OrderBy(x => x.Value).ToList();

                //}
                //if (vSesiones.sesionUsuarioDTO.idPerfil == (int)PerfilUsuarioEnum.USUARIO)
                //{
                //    var usuarioCCs = _context.tblRH_BN_Usuario_CC.Where(x => x.usuarioID == vSesiones.sesionUsuarioDTO.id).Select(x => x.cc).ToList();
                //    if (usuarioCCs.Count > 0)
                //    {
                //        if (usuarioCCs.Any(x => x == "*"))
                //        {
                //            //ccs = _ccFS.GetCCs().Select(x => new ComboDTO
                //            //{
                //            //    Value = x.cc,
                //            //    Text = "[" + x.cc + "] " + x.descripcion.Trim()
                //            //}).OrderBy(x => x.Value).ToList();

                //            ccs = _ccFS_SP.GetCCs().Select(x => new ComboDTO
                //            {
                //                Value = x.cc,
                //                Text = "[" + x.cc + "] " + x.descripcion.Trim()
                //            }).OrderBy(x => x.Value).ToList();
                //        }
                //        else
                //        {
                //            //ccs = _ccFS.GetCCs(usuarioCCs).Select(x => new ComboDTO
                //            //{
                //            //    Value = x.cc,
                //            //    Text = "[" + x.cc + "] " + x.descripcion.Trim()
                //            //}).OrderBy(x => x.Value).ToList();

                //            ccs = _ccFS_SP.GetCCs(usuarioCCs).Select(x => new ComboDTO
                //            {
                //                Value = x.cc,
                //                Text = "[" + x.cc + "] " + x.descripcion.Trim()
                //            }).OrderBy(x => x.Value).ToList();
                //        }
                //    }
                //}

                if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                {
                    ccs = ccs.Where(e => Regex.IsMatch(e.Value, @"^\d+$")).ToList();
                }

                //return lstComboDTO.ToList();
                return ccs.ToList();
                #endregion
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "FillCboCC", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }

        public Dictionary<string, object> FillComboCCUnique()
        {
            resultado.Clear();

            try
            {
                var ccs = new List<ComboDTO>();

                var permisosUsuarioCC = _context.tblRH_BN_Usuario_CC.Where(x => x.usuarioID == vSesiones.sesionUsuarioDTO.id).ToList();
                ccs = _context.tblC_Nom_CatalogoCC.Where(e => e.estatus).Select(e => new ComboDTO { Value = e.cc, Text = e.cc + " - " + e.ccDescripcion }).Distinct().ToList().Where(x => permisosUsuarioCC.Select(y => y.cc).Contains("*") ? true : permisosUsuarioCC.Select(y => y.cc).Contains(x.Value)).ToList();

                var lstCCsUnicos = new List<ComboDTO>();

                foreach (var item in ccs)
                {
                    var objCCUnico = lstCCsUnicos.FirstOrDefault(e => e.Value == item.Value);
                    if (objCCUnico == null)
	                {
                        lstCCsUnicos.Add(item);
	                }
                }

                resultado.Add(ITEMS, lstCCsUnicos);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e )
            {
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }

            return resultado;
        }
        public List<ComboDTO> FillCboPuestos()
        {
            try
            {
                #region FILL COMBO PUESTOS
                //string strQuery = @"SELECT puesto AS Value, descripcion AS Text FROM si_puestos where descripcion not like '%(NO USAR)%'";
                //var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                //odbc.consulta = String.Format(strQuery);
                //var lstPuestos = Data.EntityFramework.Context._contextEnkontrol.Select<Core.DTO.Principal.Generales.ComboDTO>(EnkontrolAmbienteEnum.Rh, odbc);
                var lstPuestos = _context.tblRH_EK_Puestos.Where(x => !x.descripcion.Contains("NO USAR")).Select(x => new ComboDTO
                {
                    Value = x.puesto.ToString(),
                    Text = x.descripcion
                });
                return lstPuestos.ToList();
                #endregion
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "FillCboPuestos", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }

        public List<ComboDTO> FillCboPaises()
        {
            try
            {
                #region FILL COMBO PAISES
                //string strQuery = @"SELECT clave_pais, descripcion, nacionalidad FROM sn_paises";
                //var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                //odbc.consulta = String.Format(strQuery);
                //List<dynamic> lstPaises = Data.EntityFramework.Context._contextEnkontrol.Select<dynamic>((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? EnkontrolAmbienteEnum.Rh : EnkontrolAmbienteEnum.RhArre, odbc);
                var lstPaises = _context.tblRH_EK_Paises.ToList();

                List<ComboDTO> lstPaisesCboDTO = new List<ComboDTO>();
                foreach (var item in lstPaises)
                {
                    ComboDTO obj = new ComboDTO();
                    obj.Value = item.clave_pais.ToString();
                    obj.Text = item.descripcion.ToString();
                    lstPaisesCboDTO.Add(obj);
                }
                return lstPaisesCboDTO;
                #endregion
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "FillCboPaises", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }

        public List<ComboDTO> FillCboEstados(int _clavePais)
        {
            try
            {
                switch (vSesiones.sesionEmpresaActual)
                {
                    case (int)EmpresaEnum.Peru:
                        _clavePais = 7;
                        break;
                    case (int)EmpresaEnum.Colombia:
                        _clavePais = 8;
                        break;
                }
                #region FILL COMBO ESTADOS
                //string strQuery = string.Empty;
                //if (_clavePais > 0)
                //    strQuery = @"SELECT clave_estado AS Value, CONVERT(VARCHAR(10), desc_edo_curp) + ' - ' + CONVERT(VARCHAR(10), descripcion) AS Text FROM sn_estados WHERE clave_pais = {0}";
                //else
                //    strQuery = @"SELECT clave_estado AS Value, CONVERT(VARCHAR(10), desc_edo_curp) + ' - ' + CONVERT(VARCHAR(10), descripcion) AS Text FROM sn_estados";

                //var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                //odbc.consulta = String.Format(strQuery, _clavePais);
                //List<dynamic> lstEstados = Data.EntityFramework.Context._contextEnkontrol.Select<dynamic>((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? EnkontrolAmbienteEnum.Rh : EnkontrolAmbienteEnum.RhArre, odbc);
                var lstEstados = _context.tblRH_EK_Estados.Where(x => x.clave_pais == _clavePais).ToList();

                List<ComboDTO> lstEstadosDTO = new List<ComboDTO>();
                foreach (var item in lstEstados)
                {
                    ComboDTO obj = new ComboDTO();
                    //obj.Value = item.Value.ToString();
                    //obj.Text = item.Text.ToString();
                    obj.Value = item.clave_estado.ToString();
                    obj.Text = item.desc_edo_curp + " - " + item.descripcion;
                    lstEstadosDTO.Add(obj);
                }
                return lstEstadosDTO;
                #endregion
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "FillCboPaises", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }

        public List<ComboDTO> FillCboMunicipios(int _clavePais, int _claveEstado)
        {
            try
            {
                #region FILL COMBO MUNICIPIOS
                switch (vSesiones.sesionEmpresaActual)
                {
                    case (int)EmpresaEnum.Peru:
                        _clavePais = 7;
                        break;
                    case (int)EmpresaEnum.Colombia:
                        _clavePais = 8;
                        break;
                }

                var lstMunicipios = _context.tblRH_EK_Cuidades.Where(x => x.clave_pais == _clavePais && x.clave_estado == _claveEstado).ToList();

                List<ComboDTO> lstMunicipiosDTO = new List<ComboDTO>();
                foreach (var item in lstMunicipios)
                {
                    ComboDTO obj = new ComboDTO();
                    //obj.Value = item.Value.ToString();
                    //obj.Text = item.Text.ToString();
                    obj.Value = item.clave_cuidad.ToString();
                    obj.Text = item.descripcion;
                    lstMunicipiosDTO.Add(obj);
                }
                return lstMunicipiosDTO;
                #endregion
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "FillCboMunicipios", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }

        public List<ComboDTO> FillCboMotivos()
        {
            try
            {
                #region FILL COMBO MOTIVOS
                List<ComboDTO> lstMotivos = new List<ComboDTO>();
                lstMotivos = _context.tblRH_REC_CatMotivos.Where(w => w.esActivo).Select(s => new ComboDTO
                {
                    Value = s.id.ToString(),
                    Text = s.motivo.Trim()
                }).ToList();
                return lstMotivos;
                #endregion
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "FillCboMotivos", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }

        public List<ComboDTO> FillCboEscolaridades()
        {
            try
            {
                #region FILL COMBO ESCOLARIDADES
                List<ComboDTO> lstEscolaridades = new List<ComboDTO>();
                lstEscolaridades = _context.tblRH_REC_CatEscolaridades.Where(w => w.esActivo).OrderBy(o => o.orden).Select(s => new ComboDTO
                {
                    Value = s.id.ToString(),
                    Text = s.escolaridad.Trim()
                }).ToList();
                return lstEscolaridades;
                #endregion
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "FillCboEscolaridades", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }

        public List<ComboDTO> FillFiltroCboCC()
        {
            try
            {
                //                var query_ccs = new OdbcConsultaDTO();

                //                var filtroCCs = "";
                //                if (vSesiones.sesionUsuarioDTO.idPerfil == (int)PerfilUsuarioEnum.ADMINISTRADOR)
                //                {
                //                    filtroCCs = "1 = 1";
                //                }
                //                if (vSesiones.sesionUsuarioDTO.idPerfil == (int)PerfilUsuarioEnum.USUARIO)
                //                {
                //                    var usuarioCCs = _context.tblRH_BN_Usuario_CC.Where(x => x.usuarioID == vSesiones.sesionUsuarioDTO.id).Select(x => x.cc).ToList();
                //                    if (usuarioCCs.Count > 0)
                //                    {
                //                        if (usuarioCCs.Contains("*"))
                //                        {
                //                            filtroCCs = "1 = 1";
                //                        }
                //                        else
                //                        {
                //                            filtroCCs = string.Format("cc in {0}", usuarioCCs.ToParamInValue());
                //                            query_ccs.parametros.AddRange(usuarioCCs.Select(x => new OdbcParameterDTO
                //                            {
                //                                nombre = "cc",
                //                                tipo = OdbcType.NVarChar,
                //                                valor = x
                //                            }).ToList());
                //                        }
                //                    }
                //                    else
                //                    {
                //                        filtroCCs = "1 = 2";
                //                    }
                //                }

                //                query_ccs.consulta = string.Format(
                //                    @"SELECT
                //                        cc,
                //                        descripcion
                //                    FROM
                //                        cc
                //                    WHERE
                //                        {0}", filtroCCs);

                //                var ccs = _contextEnkontrol.Select<ccDTO>(vSesiones.sesionAmbienteEnkontrolAdm, query_ccs).Select(x => new ComboDTO
                //                {
                //                    Value = x.cc,
                //                    Text = "[" + x.cc + "] " + x.descripcion.Trim()
                //                }).OrderBy(x => x.Text).ToList();
                var ccs = new List<ComboDTO>();

                if (vSesiones.sesionUsuarioDTO.idPerfil == (int)PerfilUsuarioEnum.ADMINISTRADOR)
                {
                    //ccs = _ccFS.GetCCs().Select(x => new ComboDTO
                    //{
                    //    Value = x.cc,
                    //    Text = "[" + x.cc + "] " + x.descripcion.Trim()
                    //}).OrderBy(x => x.Value).ToList();

                    ccs = _ccFS_SP.GetCCsNomina(null).Select(x => new ComboDTO
                    {
                        Value = x.cc,
                        Text = "[" + x.cc + "] " + x.descripcion.Trim()
                    }).OrderBy(x => x.Value).ToList();

                }
                if (vSesiones.sesionUsuarioDTO.idPerfil == (int)PerfilUsuarioEnum.USUARIO || vSesiones.sesionUsuarioDTO.idPerfil == (int)PerfilUsuarioEnum.MEDICO)
                {
                    var usuarioCCs = _context.tblRH_BN_Usuario_CC.Where(x => x.usuarioID == vSesiones.sesionUsuarioDTO.id).Select(x => x.cc).ToList();
                    if (usuarioCCs.Count > 0)
                    {
                        if (usuarioCCs.Any(x => x == "*"))
                        {
                            //ccs = _ccFS.GetCCs().Select(x => new ComboDTO
                            //{
                            //    Value = x.cc,
                            //    Text = "[" + x.cc + "] " + x.descripcion.Trim()
                            //}).OrderBy(x => x.Value).ToList();

                            ccs = _ccFS_SP.GetCCsNomina(null).Select(x => new ComboDTO
                            {
                                Value = x.cc,
                                Text = "[" + x.cc + "] " + x.descripcion.Trim()
                            }).OrderBy(x => x.Value).ToList();
                        }
                        else
                        {
                            //ccs = _ccFS.GetCCs(usuarioCCs).Select(x => new ComboDTO
                            //{
                            //    Value = x.cc,
                            //    Text = "[" + x.cc + "] " + x.descripcion.Trim()
                            //}).OrderBy(x => x.Value).ToList();

                            ccs = _ccFS_SP.GetCCsNominaFiltrados(usuarioCCs).Select(x => new ComboDTO
                            {
                                Value = x.cc,
                                Text = "[" + x.cc + "] " + x.descripcion.Trim()
                            }).OrderBy(x => x.Value).ToList();
                        }
                    }
                }

                if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                {
                    ccs = ccs.Where(e => Regex.IsMatch(e.Value, @"^\d+$")).ToList();
                }

                //return lstComboDTO.ToList();

                return ccs;

                #region COMENTADO
                //#region SE OBTIENE LISTADO DE CC ENKONTOL
                //List<Core.DTO.RecursosHumanos.CCDTO> lstCC = new List<Core.DTO.RecursosHumanos.CCDTO>();
                //string strQuery = @"SELECT cc, descripcion FROM cc where st_ppto!='T'";
                //var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                //odbc.consulta = String.Format(strQuery);
                //lstCC = Data.EntityFramework.Context._contextEnkontrol.Select<Core.DTO.RecursosHumanos.CCDTO>(EnkontrolAmbienteEnum.Prod, odbc);
                //#endregion

                //#region SE OBTIENE LOS CC REGISTADOS EN SOLICITUDES
                //List<SolicitudesDTO> lstSolicitudesCC = new List<SolicitudesDTO>();
                //lstSolicitudesCC = _context.tblRH_REC_Solicitudes.Where(w => w.esActivo).GroupBy(g => g.cc).Select(s => new SolicitudesDTO
                //{
                //    cc = s.Key
                //}).ToList();
                //#endregion

                //#region FILL CBO FILTRO CC
                //List<ComboDTO> lstFiltroCC = new List<ComboDTO>();
                //lstFiltroCC = lstSolicitudesCC.Select(s => new ComboDTO
                //{
                //    Value = s.cc,
                //    Text = string.Empty
                //}).ToList();
                //foreach (var item in lstFiltroCC)
                //{
                //    #region SE OBTIENE LA DESCRIPCIÓN DEL CC
                //    string descripcion = string.Empty;
                //    if (!string.IsNullOrEmpty(item.Value))
                //        descripcion = lstCC.Where(w => w.cc == item.Value).Select(s => s.descripcion).FirstOrDefault();

                //    if (!string.IsNullOrEmpty(descripcion))
                //        item.Text = item.Value + " - " + descripcion;
                //    #endregion
                //}
                //#endregion

                //var permisosUsuarioCC = _context.tblRH_BN_Usuario_CC.Where(x => x.usuarioID == vSesiones.sesionUsuarioDTO.id).ToList();

                //lstFiltroCC = lstFiltroCC.Where(x => (permisosUsuarioCC.Count() > 0 ? !permisosUsuarioCC.Any(y => y.cc == "*") ? permisosUsuarioCC.Select(y => y.cc).Contains(x.Value) : true : false)).ToList();

                //return lstFiltroCC;
                #endregion
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "FillFiltroCboCC", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }

        public List<ComboDTO> FillFiltroCboPuestos()
        {
            try
            {
                var ccs = FillFiltroCboCC().Select(x => x.Value).ToList();

                return _context.tblRH_REC_Solicitudes.Where(x => ccs.Contains(x.cc) && x.esActivo)
                    .Select(x => new ComboDTO
                    {
                        Value = x.idPuesto.ToString(),
                        Text = x.puesto
                    }).Distinct().OrderBy(x => x.Text).ToList();

                #region COMENTADO
                //#region SE OBTIENE LISTADO DE PUESTOS ENKONTROL
                //string strQuery = string.Empty;
                ////List<PuestosDTO> lstPuestos = new List<PuestosDTO>();
                //strQuery = @"SELECT puesto, descripcion FROM si_puestos WHERE descripcion not like '%(NO USAR)%'";
                //var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                //odbc.consulta = String.Format(strQuery);
                //var lstPuestos = Data.EntityFramework.Context._contextEnkontrol.Select<PuestosDTO>(EnkontrolAmbienteEnum.Rh, odbc);
                //#endregion

                //#region SE OBTIENES LAS SOLICITUDES AUTORIZADAS
                //List<int> lstSolicitudesAutorizadas = _context.tblRH_REC_GestionSolicitudes.Where(w => w.esAutorizada && w.esActivo).Select(s => s.idSolicitud).ToList();
                //#endregion

                //#region FILL CBO FILTRO PUESTOS
                //List<ComboDTO> lstFiltroPuestos = new List<ComboDTO>();
                //lstFiltroPuestos = _context.tblRH_REC_Solicitudes.Where(w => lstSolicitudesAutorizadas.Contains(w.id) && w.esActivo).Select(s => new ComboDTO
                //{
                //    Value = s.idPuesto.ToString(),
                //    Text = !string.IsNullOrEmpty(s.puesto) ? s.puesto.Trim() : string.Empty
                //}).ToList();
                //foreach (var item in lstFiltroPuestos)
                //{
                //    #region SE OBTIENE LA DESCRIPCIÓN DEL PUESTO
                //    if (item.Value != "0")
                //    {
                //        string idPuesto = item.Value;
                //        item.Text = lstPuestos.Where(w => w.puesto == idPuesto).Count() > 0 ? lstPuestos.Where(w => w.puesto == idPuesto).Select(s => s.descripcion).FirstOrDefault() : "-";
                //    }
                //    #endregion
                //}
                //#endregion

                //return lstFiltroPuestos;
                #endregion
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "FillFiltroCboCC", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }

        public List<ComboDTO> FillFiltroCboPuestosGestion()
        {
            try
            {
                var ccs = FillFiltroCboCC().Select(x => x.Value).ToList();

                return _context.tblRH_REC_Solicitudes.Where(x => ccs.Contains(x.cc) && x.esActivo && !x.terminado)
                    .Select(x => new ComboDTO
                    {
                        Value = x.idPuesto.ToString(),
                        Text = "[Folio: " + x.id + "] [" + x.cc + "] " + x.puesto,
                        Prefijo = x.id.ToString()
                    }).Distinct().OrderBy(x => x.Text).ToList();

                #region COMENTADO
                #region SE OBTIENE LISTADO DE PUESTOS ENKONTROL
                //string strQuery = string.Empty;
                ////List<PuestosDTO> lstPuestos = new List<PuestosDTO>();
                //strQuery = @"SELECT puesto, descripcion FROM si_puestos WHERE descripcion not like '%(NO USAR)%'";
                //var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                //odbc.consulta = String.Format(strQuery);
                //var lstPuestos = Data.EntityFramework.Context._contextEnkontrol.Select<PuestosDTO>(EnkontrolAmbienteEnum.Rh, odbc);
                //#endregion

                //#region SE OBTIENES LAS SOLICITUDES AUTORIZADAS
                //List<int> lstSolicitudesAutorizadas = _context.tblRH_REC_GestionSolicitudes.Where(w => w.esAutorizada && w.esActivo).Select(s => s.idSolicitud).ToList();
                //#endregion

                //#region FILL CBO FILTRO PUESTOS
                //List<ComboDTO> lstFiltroPuestos = new List<ComboDTO>();
                //lstFiltroPuestos = _context.tblRH_REC_Solicitudes.Where(w => lstSolicitudesAutorizadas.Contains(w.id) && w.esActivo && w.cantVacantes > 0).Select(s => new ComboDTO
                //{
                //    Value = s.id.ToString(),
                //    Text = !string.IsNullOrEmpty(s.puesto) ? s.puesto.Trim() : string.Empty,
                //    Prefijo = s.idPuesto.ToString(),
                //}).ToList();
                ////foreach (var item in lstFiltroPuestos)
                ////{
                ////    #region SE OBTIENE LA DESCRIPCIÓN DEL PUESTO
                ////    if (item.Prefijo != "0")
                ////    {
                ////        string idPuesto = item.Value;
                ////        item.Text = lstPuestos.Where(w => w.puesto == idPuesto).Count() > 0 ? lstPuestos.Where(w => w.puesto == idPuesto).Select(s => s.descripcion).FirstOrDefault() : "-";
                ////    }

                ////    #endregion
                ////}
                #endregion
                //return lstFiltroPuestos;
                #endregion
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "FillFiltroCboCC", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }

        public List<ComboDTO> FillCboTipoFormulaIMSS()
        {
            try
            {
                #region FILL COMBO TIPO FORMULAS IMSS
                List<ComboDTO> lstTipoFormulaIMSS = new List<ComboDTO>();
                lstTipoFormulaIMSS = _context.tblRH_REC_CatTipoFormulaIMSS.Where(w => w.esActivo).Select(s => new ComboDTO
                {
                    Value = s.tipoFormula.Trim().ToUpper(),
                    Text = s.descripcion.Trim().ToUpper()
                }).ToList();
                return lstTipoFormulaIMSS;
                #endregion
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "FillCboTipoFormulaIMSS", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }

        public List<ComboDTO> FillCboDepartamentos(string cc)
        {
            try
            {
                #region FILL COMBO DEPARTAMENTOS
                //string strQuery = string.Empty;
                //if (!string.IsNullOrEmpty(cc))
                //    strQuery = @"SELECT clave_depto AS Value, desc_depto AS Text FROM sn_departamentos WHERE cc = '{0}'";
                //else
                //    strQuery = @"SELECT clave_depto AS Value, desc_depto AS Text FROM sn_departamentos";

                //var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                //if (!string.IsNullOrEmpty(cc))
                //    odbc.consulta = String.Format(strQuery, cc);
                //else
                //    odbc.consulta = String.Format(strQuery);

                //List<ComboDTO> lstDepartamentos = Data.EntityFramework.Context._contextEnkontrol.Select<Core.DTO.Principal.Generales.ComboDTO>(EnkontrolAmbienteEnum.Rh, odbc);
                var lstDepartamentos = _context.tblRH_EK_Departamentos.Where(x => x.cc == cc).Select(x => new ComboDTO
                {
                    Value = x.clave_depto.ToString(),
                    Text = x.desc_depto
                }).ToList();
                return lstDepartamentos;
                #endregion
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "FillCboDepartamentos", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }

        public List<ComboDTO> FillCboUsuarios()
        {
            try
            {
                #region FILL COMBO USUARIOS
                List<ComboDTO> lstUsuarios = _context.Select<ComboDTO>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = @"SELECT id AS Value, nombre + ' ' + apellidoPaterno + ' ' + apellidoMaterno AS Text FROM tblP_Usuario WHERE estatus = 1"
                });
                return lstUsuarios;
                #endregion
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "FillCboUsuarios", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }

        public List<ComboDTO> FillCboPlataformas()
        {
            try
            {
                #region FILL COMBO PLATAFORMAS
                List<ComboDTO> lstPlataformas = _context.Select<ComboDTO>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = @"SELECT id AS Value, plataforma AS Text FROM tblRH_REC_CatPlataformas WHERE esActivo = 1"
                });
                return lstPlataformas;
                #endregion
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "FillCboPlataformas", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }

        public List<ComboDTO> FillComboRegistroPatronal(string cc)
        {
            try
            {
                //var listaRegistrosPatronales = _contextEnkontrol.Select<ComboDTO>((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? EnkontrolAmbienteEnum.Rh : EnkontrolAmbienteEnum.RhArre, new OdbcConsultaDTO()
                //{
                //    consulta = @"SELECT clave_reg_pat AS Value, nombre_corto AS Text FROM sn_registros_patronales ORDER BY nombre_corto"
                //});
                var listaRegistrosPatronales = _context.tblRH_EK_Registros_Patronales.OrderBy(x => x.nombre_corto).Select(x => new ComboDTO
                {
                    Value = x.clave_reg_pat.ToString(),
                    Text = x.nombre_corto
                }).ToList();

                if (cc != "" && cc != null)
                {
                    var listaRelacionRegistrosPatronalesCC = _context.tblRH_REC_RelacionRegistroPatronalCC.Where(x => x.registroActivo && x.cc == cc).ToList();

                    listaRegistrosPatronales = listaRegistrosPatronales.Where(x => listaRelacionRegistrosPatronalesCC.Select(y => y.clave_reg_pat).Contains(Int32.Parse(x.Value))).ToList();
                }

                return listaRegistrosPatronales;
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "FillComboRegistroPatronal", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }

        public List<ComboDTO> FillComboDuracionContrato()
        {
            try
            {
                //return _contextEnkontrol.Select<ComboDTO>((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? EnkontrolAmbienteEnum.Rh : EnkontrolAmbienteEnum.RhArre, new OdbcConsultaDTO()
                //{
                //    consulta = @"SELECT clave_duracion AS Value, nombre AS Text FROM sn_empl_duracion_contrato"
                //});
                return _context.tblRH_EK_Empl_Duracion_Contrato.OrderBy(e => e.duracion_meses).Select(x => new ComboDTO
                {
                    Value = x.clave_duracion.ToString(),
                    Text = x.nombre
                }).ToList();
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "FillComboDuracionContrato", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }

        public Dictionary<string, object> FillEstatusFiltro()
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region FILL ESTATUS FILTRO
                List<ComboDTO> lstEstatus = new List<ComboDTO>();

                ComboDTO obj = new ComboDTO();
                obj.Value = "A";
                obj.Text = "ACTIVO";
                lstEstatus.Add(obj);

                obj = new ComboDTO();
                obj.Value = "P";
                obj.Text = "PENDIENTE";
                lstEstatus.Add(obj);

                obj = new ComboDTO();
                obj.Value = "B";
                obj.Text = "BAJA";
                lstEstatus.Add(obj);

                obj = new ComboDTO();
                obj.Value = "C";
                obj.Text = "CANCELADA";
                lstEstatus.Add(obj);

                resultado.Add(ITEMS, lstEstatus);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(0, 0, NombreControlador, "FillEstatusFiltro", e, AccionEnum.FILLCOMBO, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> FillDepartamentos(string cc)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region SE OBTIENE LISTADO DE DEPARTAMENTOS DE EK
                //string strQuery = string.Format("SELECT clave_depto AS VALUE, desc_depto AS TEXT FROM sn_departamentos WHERE TEXT NOT LIKE '%NO USAR%' {0} ORDER BY clave_depto", !string.IsNullOrEmpty(cc) ? "AND cc = '" + cc + "'" : string.Empty);
                //List<ComboDTO> lstDepartamentos = _contextEnkontrol.Select<ComboDTO>(vSesiones.sesionAmbienteEnkontrolRh, new OdbcConsultaDTO()
                //{
                //    consulta = strQuery
                //});
                var lstDepartamentos = _context.tblRH_EK_Departamentos.Where(x => x.cc == cc && !x.desc_depto.Contains("NO USAR")).Select(x => new ComboDTO
                {
                    Value = x.clave_depto.ToString(),
                    Text = x.desc_depto
                }).ToList();

                resultado.Add(ITEMS, lstDepartamentos);
                resultado.Add(SUCCESS, true);
                #endregion
            }
            catch (Exception e)
            {
                LogError(0, 0, NombreControlador, "FillDepartamentos", e, AccionEnum.FILLCOMBO, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> CargarTiposNomina()
        {
            resultado.Clear();

            try
            {
                //var query_tipoNomina = new OdbcConsultaDTO();
                //query_tipoNomina.consulta = "SELECT tipo_nomina, descripcion FROM sn_tipos_nomina";
                //List<ComboBoxDTO> tiposNomina = _contextEnkontrol.Select<dynamic>(vSesiones.sesionAmbienteEnkontrolRh, query_tipoNomina).Select(x => new ComboBoxDTO
                //{
                //    valor = x.tipo_nomina,
                //    texto = "[" + x.tipo_nomina + "] " + x.descripcion
                //}).OrderBy(x => x.valor).ToList();
                var tiposNomina = _context.tblRH_EK_Tipos_Nomina.ToList().Select(x => new ComboBoxDTO
                {
                    valor = x.tipo_nomina,
                    texto = "[" + x.tipo_nomina + "] " + x.descripcion
                }).ToList();

                ComboBoxDTO objDecenal = tiposNomina.Where(e => e.valor.ToString() == "2").FirstOrDefault();
                objDecenal.texto = objDecenal.texto + " (NO USAR)";

                ComboBoxDTO objCatorcenal = tiposNomina.Where(e => e.valor.ToString() == "3").FirstOrDefault();
                objCatorcenal.texto = objCatorcenal.texto + " (NO USAR)";

                resultado.Add(SUCCESS, tiposNomina);
                resultado.Add(ITEMS, tiposNomina);
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);
            }

            return resultado;
        }

        public Dictionary<string, object> CargarBancos()
        {
            resultado.Clear();

            try
            {
                //var query_bancos = new OdbcConsultaDTO();
                //query_bancos.consulta = "SELECT clave_banco, desc_banco FROM sn_bancos";
                //var bancos = _contextEnkontrol.Select<BancoDTO>(vSesiones.sesionAmbienteEnkontrolRh, query_bancos).Select(x => new ComboBoxDTO
                //{
                //    valor = x.clave_banco,
                //    texto = x.desc_banco
                //}).OrderBy(x => x.texto);
                var bancos = _context.tblRH_EK_Bancos.ToList().Select(x => new ComboBoxDTO
                {
                    valor = x.clave_banco,
                    texto = x.desc_banco
                }).ToList();

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, bancos);
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);
            }

            return resultado;
        }

        public Dictionary<string, object> FillComboEDArchivos()
        {
            resultado.Clear();

            try
            {
                var archivos = _context.tblRH_REC_ED_Archivo.Where(e => e.registroActivo).ToList().Select(e => new ComboDTO
                {
                    Text = e.descripcion,
                    Value = e.id.ToString(),
                });

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, archivos);
            }
            catch (Exception e)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }
            return resultado;
        }

        public Dictionary<string, object> FillCboCCRegistrosPatronales(int? clave_reg_pat)
        {
            resultado.Clear();

            try
            {
                var ccs = new List<ComboBoxDTO>();
                //var query_ccs = new OdbcConsultaDTO();

                //var filtroCCs = "";
                if (vSesiones.sesionUsuarioDTO.idPerfil == (int)PerfilUsuarioEnum.ADMINISTRADOR)
                {
                    //filtroCCs = "1 = 1";
                    ccs = _ccFS_SP.GetCCsNomina(null).Select(x => new ComboBoxDTO
                    {
                        valor = x.cc,
                        texto = "[" + x.cc + "] " + x.descripcion.Trim()
                    }).OrderBy(x => x.valor).ToList();
                }
                if (vSesiones.sesionUsuarioDTO.idPerfil == (int)PerfilUsuarioEnum.USUARIO)
                {
                    var usuarioCCs = _context.tblRH_BN_Usuario_CC.Where(x => x.usuarioID == vSesiones.sesionUsuarioDTO.id).Select(x => x.cc).ToList();
                    if (usuarioCCs.Count > 0)
                    {
                        if (usuarioCCs.Contains("*"))
                        {
                            //filtroCCs = "1 = 1";
                            ccs = _ccFS_SP.GetCCsNomina(null).Select(x => new ComboBoxDTO
                            {
                                valor = x.cc,
                                texto = "[" + x.cc + "] " + x.descripcion.Trim()
                            }).OrderBy(x => x.valor).ToList();
                        }
                        else
                        {
                            //filtroCCs = string.Format("cc in {0}", usuarioCCs.ToParamInValue());
                            //query_ccs.parametros.AddRange(usuarioCCs.Select(x => new OdbcParameterDTO
                            //{
                            //    nombre = "cc",
                            //    tipo = OdbcType.NVarChar,
                            //    valor = x
                            //}).ToList());
                            ccs = _ccFS_SP.GetCCsNominaFiltrados(usuarioCCs).Select(x => new ComboBoxDTO
                            {
                                valor = x.cc,
                                texto = "[" + x.cc + "] " + x.descripcion.Trim()
                            }).OrderBy(x => x.valor).ToList();
                        }
                    }
                    else
                    {
                        //filtroCCs = "1 = 2";
                    }
                }

                //                query_ccs.consulta = string.Format(
                //                    @"SELECT
                //                        cc,
                //                        descripcion
                //                    FROM
                //                        cc
                //                    WHERE
                //                        {0}", filtroCCs);

                //                List<ComboBoxDTO> ccs = _contextEnkontrol.Select<ccDTO>(vSesiones.sesionAmbienteEnkontrolAdm, query_ccs).Select(x => new ComboBoxDTO
                //                {
                //                    valor = x.cc,
                //                    texto = "[" + x.cc + "] " + x.descripcion.Trim()
                //                }).OrderBy(x => x.valor).ToList();

                if (clave_reg_pat != null)
                {
                    List<string> lstRelRegPat = _context.tblRH_REC_RelacionRegistroPatronalCC.Where(e => e.registroActivo && e.clave_reg_pat == clave_reg_pat).Select(e => e.cc).ToList();

                    if (lstRelRegPat.Count > 0)
                    {
                        ccs = ccs.Where(e => !lstRelRegPat.Contains(e.valor)).ToList();

                    }
                }

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, ccs);
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);
            }

            return resultado;
        }

        public Dictionary<string, object> FillComboRelFases()
        {
            resultado.Clear();

            try
            {
                var lstRelFases = _context.tblRH_REC_Fases.Where(e => e.esActivo).Select(e =>
                    new ComboDTO
                    {
                        Value = e.id.ToString(),
                        Text = e.nombreFase,
                    });

                resultado.Add(ITEMS, lstRelFases);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }

            return resultado;
        }

        public Dictionary<string, object> FillMotivoSueldo()
        {
            resultado.Clear();

            try
            {
                var motivos = _context.tblRH_REC_MotivoSueldo.Where(x => x.registroActivo).ToList().Select(x => new ComboBoxDTO
                {
                    valor = x.id,
                    texto = x.descripcion
                }).ToList();

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, motivos);
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);
            }

            return resultado;
        }

        public Dictionary<string, object> FillComboGeoDepartamentos()
        {
            resultado.Clear();

            try
            {
                var departamentosPeru = _context.tblRH_EK_Geo_Departamentos.ToList().Select(e => new ComboDTO()
                {
                    Value = e.clave_depto.ToString(),
                    Text = e.desc_depto
                });

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, departamentosPeru);
            }
            catch (Exception e)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);                
            }

            return resultado;
        }

        public Dictionary<string, object> FillCboEstadosPERU(int claveDepartamento)
        {
            resultado.Clear();

            try
            {
                #region FILL COMBO ESTADOS
                //string strQuery = string.Empty;
                //if (_clavePais > 0)
                //    strQuery = @"SELECT clave_estado AS Value, CONVERT(VARCHAR(10), desc_edo_curp) + ' - ' + CONVERT(VARCHAR(10), descripcion) AS Text FROM sn_estados WHERE clave_pais = {0}";
                //else
                //    strQuery = @"SELECT clave_estado AS Value, CONVERT(VARCHAR(10), desc_edo_curp) + ' - ' + CONVERT(VARCHAR(10), descripcion) AS Text FROM sn_estados";

                //var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                //odbc.consulta = String.Format(strQuery, _clavePais);
                //List<dynamic> lstEstados = Data.EntityFramework.Context._contextEnkontrol.Select<dynamic>((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? EnkontrolAmbienteEnum.Rh : EnkontrolAmbienteEnum.RhArre, odbc);
                var lstEstados = _context.tblRH_EK_Estados.Where(x => x.clave_departamento == claveDepartamento).ToList();

                List<ComboDTO> lstEstadosDTO = new List<ComboDTO>();
                foreach (var item in lstEstados)
                {
                    ComboDTO obj = new ComboDTO();
                    //obj.Value = item.Value.ToString();
                    //obj.Text = item.Text.ToString();
                    obj.Value = item.clave_estado.ToString();
                    obj.Text = item.desc_edo_curp + " - " + item.descripcion;
                    lstEstadosDTO.Add(obj);
                }
                #endregion

                resultado.Add(ITEMS, lstEstadosDTO);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);

                LogError(16, 16, "ReclutamientosController", "FillCboPaises", e, AccionEnum.CONSULTA, 0, 0);
            }

            return resultado;
        }
        #endregion

        #region EXPEDIENTE DIGITAL
        public Dictionary<string, object> CargarExpedientesDigitales(string estatus_emp, string cc, List<int> estado)
        {
            using (var transaccionSP = _context.Database.BeginTransaction())
            {
                try
                {
                    if (estado == null)
                    {
                        estado = new List<int>() { };
                    }

                    var listaArchivos = _context.tblRH_REC_ED_Archivo.Where(x => x.registroActivo).ToList();
                    var listaExpedientes = _context.tblRH_REC_ED_Expediente.Where(x => x.registroActivo).ToList();
                    var listaRelacionExpedienteArchivo = _context.tblRH_REC_ED_RelacionExpedienteArchivo.Where(x => x.registroActivo && x.rutaArchivo != null).ToList();
                    //var listaEmpleadosEK = _contextEnkontrol.Select<EmpleadosDTO>(vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? EnkontrolEnum.CplanRh : EnkontrolEnum.ArrenRh, new OdbcConsultaDTO()
                    //{
                    //    consulta = @"SELECT clave_empleado, nombre, ape_paterno, ape_materno, cc_contable FROM sn_empleados"
                    //});

                    var listaEmpleadosEK = _context.Select<EmpleadosDTO>(new DapperDTO
                    {

                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = @"SELECT t1.*, t2.descripcion as desc_puesto, t2.esEvaluacion
                                    FROM tblRH_EK_Empleados as t1 
                                    INNER JOIN tblRH_EK_Puestos as t2 ON t1.puesto = t2.puesto 
                                    WHERE estatus_empleado = @estatus_emp AND esActivo = 1",
                        parametros = new { estatus_emp }
                    });

                    List<EmpleadosDTO> empleadosFiltrados = new List<EmpleadosDTO>();

                    #region Filtro CC
                    if (cc != "" && cc != null)
                    {
                        empleadosFiltrados = listaEmpleadosEK.Where(x => (string)x.cc_contable == cc).ToList();
                        var clavesEmpleados = empleadosFiltrados.Select(e => e.clave_empleado).ToList();

                        listaExpedientes = listaExpedientes.Where(x => clavesEmpleados.Contains(x.claveEmpleado)).ToList();

                    }
                    else
                    {
                        var permisosUsuarioCC = _context.tblRH_BN_Usuario_CC.Where(x => x.usuarioID == vSesiones.sesionUsuarioDTO.id).ToList();
                        empleadosFiltrados = listaEmpleadosEK.Where(x => permisosUsuarioCC.Select(y => y.cc).Contains((string)x.cc_contable)).ToList();
                        var clavesEmpleados = empleadosFiltrados.Select(e => e.clave_empleado).ToList();


                        listaExpedientes = listaExpedientes.Where(x => clavesEmpleados.Contains(x.claveEmpleado)).ToList();

                    }
                    #endregion

                    //var expedientes = listaExpedientes.Select(x => new ExpedienteDigitalDTO
                    //{
                    //    id = x.id,
                    //    claveEmpleado = x.claveEmpleado,
                    //    empleadoDesc = listaEmpleadosEK.Where(y => y.clave_empleado == x.claveEmpleado).Select(z => z.nombre + " " + z.ape_paterno + " " + z.ape_materno).FirstOrDefault(),
                    //    archivos = new List<ArchivoExpedienteDigitalDTO>()
                    //}).ToList();

                    var expedientes = empleadosFiltrados.Select(x => new ExpedienteDigitalDTO
                    {
                        id = 0,
                        claveEmpleado = x.clave_empleado,
                        empleadoDesc = x.ape_paterno + " " + x.ape_materno + " " + x.nombre,
                        descPuesto = "[" + x.puesto + "] " + x.desc_puesto,
                        esEvaluacion = (x.esEvaluacion ?? false),
                        archivos = new List<ArchivoExpedienteDigitalDTO>()
                    }).OrderBy(e => e.empleadoDesc).ToList();

                    foreach (var exp in expedientes)
                    {
                        var objExpediente = listaExpedientes.FirstOrDefault(e => e.claveEmpleado == exp.claveEmpleado);

                        if (objExpediente != null)
                        {
                            exp.id = objExpediente.id;
                        }
                        else
                        {

                            _context.tblRH_REC_ED_Expediente.Add(new tblRH_REC_ED_Expediente
                            {
                                claveEmpleado = exp.claveEmpleado,
                                usuarioCreacion_id = vSesiones.sesionUsuarioDTO.id,
                                fechaCreacion = DateTime.Now,
                                usuarioModificacion_id = vSesiones.sesionUsuarioDTO.id,
                                registroActivo = true,
                            });
                            _context.SaveChanges();

                            objExpediente = _context.tblRH_REC_ED_Expediente.FirstOrDefault(e => e.registroActivo && e.claveEmpleado == exp.claveEmpleado);
                            exp.id = objExpediente.id;
                        }

                        var archivosAplicables = listaRelacionExpedienteArchivo.Where(x => x.expediente_id == exp.id).ToList();

                        foreach (var arc in listaArchivos)
                        {
                            if (archivosAplicables != null && exp.id > 0)
                            {
                                var archivoAplicable = archivosAplicables.FirstOrDefault(x => x.archivo_id == arc.id);

                                if (archivoAplicable != null)
                                {
                                    exp.archivos.Add(new ArchivoExpedienteDigitalDTO
                                    {
                                        expediente_id = exp.id,
                                        archivo_id = arc.id,
                                        archivoCargado_id = archivoAplicable.id,
                                        rutaArchivo = archivoAplicable.rutaArchivo,
                                        aplica = true,
                                        esNoAplica = false,
                                        registroActivo = true,
                                    });
                                }
                                else
                                {
                                    exp.archivos.Add(new ArchivoExpedienteDigitalDTO
                                    {
                                        expediente_id = exp.id,
                                        archivo_id = arc.id,
                                        archivoCargado_id = 0,
                                        rutaArchivo = null,
                                        aplica = false,
                                        esNoAplica = false,
                                        registroActivo = true,
                                    });
                                }
                            }
                            else
                            {
                                throw new Exception("Ocurrio algo mal.");
                            }
                        }

                        #region GET ARCHIVOS DE FASES

                        tblRH_REC_GestionCandidatos objCandidato = _context.tblRH_REC_GestionCandidatos.Where(e => e.esActivo && e.clave_empleado == exp.claveEmpleado).FirstOrDefault();
                        List<tblRH_REC_Archivos> archivoSeg = new List<tblRH_REC_Archivos>() { };
                        var lstSeguimientoDet = new List<tblRH_REC_SegDetCandidatos>();

                        if (objCandidato != null)
                        {
                            archivoSeg = _context.tblRH_REC_Archivos.Where(e => e.esActivo && e.idCandidato == objCandidato.id || e.claveEmpleado == exp.claveEmpleado).ToList();

                            var lstIdsSeg = _context.tblRH_REC_SegCandidatos.Where(e => e.esActivo && e.idCandidato == objCandidato.id).Select(e => e.id).ToList();

                            if (lstIdsSeg != null && lstIdsSeg.Count > 0)
                            {
                                lstSeguimientoDet = _context.tblRH_REC_SegDetCandidatos.Where(e => e.esActivo && lstIdsSeg.Contains(e.idSeg)).ToList();
                            }
                        }
                        else
                        {
                            archivoSeg = _context.tblRH_REC_Archivos.Where(e => e.esActivo && e.claveEmpleado == exp.claveEmpleado).ToList();

                        }

                        // TEST CON CC 012 MIGUEL BUZANI 
                        //if (exp.claveEmpleado == 27681)
                        //{
                        //    archivoSeg = _context.tblRH_REC_Archivos.Where(e => e.esActivo && e.idCandidato == 44).ToList();
                        //}

                        if (lstSeguimientoDet != null && lstSeguimientoDet.Count() > 0)
	                    {
		                    var lstAllActividades = _context.tblRH_REC_Actividades.Where(e => e.esActivo).ToList();

                            foreach (var item in lstAllActividades)
                            {
                                ArchivoExpedienteDigitalDTO archive = exp.archivos.Where(e => e.registroActivo && e.archivo_id == item.tipoArchivo).FirstOrDefault();

                                //CHECAR SI EL SEGUIMIENTO DE LA ACTIVIDAD ES EVALUADA COMO NO APLICA
                                var objSegDet = lstSeguimientoDet.FirstOrDefault(e => e.idActividad == item.id);
                                if (objSegDet != null && objSegDet.esAprobada == 3)
                                {
                                    if (archive != null)
                                    {
                                        archive.esNoAplica = true;
                                        
                                    }
                                }
                            }
	                    }

                        foreach (var item in archivoSeg)
                        {
                            tblRH_REC_Actividades objActividad = _context.tblRH_REC_Actividades.Where(e => e.esActivo && e.id == item.idActividad).FirstOrDefault();

                            if (objActividad != null)
                            {

                                ArchivoExpedienteDigitalDTO archive = exp.archivos.Where(e => e.registroActivo && e.archivo_id == objActividad.tipoArchivo).FirstOrDefault();
                                //archive.archivoCargado_id = objActividad.tipoArchivo.Value;

                                if (archive == null)
                                {
                                    continue;
                                }

                                if (archive.rutaArchivo == null)
                                {
                                    archive.rutaArchivo = item.ubicacionArchivo;

                                    var archivoRel = _context.tblRH_REC_ED_RelacionExpedienteArchivo.FirstOrDefault(x => x.archivo_id == archive.archivo_id && x.expediente_id == exp.id);

                                    if (archivoRel != null)
                                    {
                                        archive.archivoCargado_id = archivoRel.id;
                                        //archivoRel.rutaArchivo = item.ubicacionArchivo;
                                        //_context.SaveChanges();
                                    }
                                    else
                                    {
                                        _context.tblRH_REC_ED_RelacionExpedienteArchivo.Add(new tblRH_REC_ED_RelacionExpedienteArchivo
                                        {
                                            expediente_id = exp.id,
                                            archivo_id = archive.archivo_id,
                                            rutaArchivo = item.ubicacionArchivo,
                                            usuarioCreacion_id = vSesiones.sesionUsuarioDTO.id,
                                            fechaCreacion = DateTime.Now,
                                            usuarioModificacion_id = vSesiones.sesionUsuarioDTO.id,
                                            fechaModificacion = DateTime.Now,
                                            registroActivo = true,
                                        });
                                        _context.SaveChanges();

                                        archivoRel = _context.tblRH_REC_ED_RelacionExpedienteArchivo.FirstOrDefault(e => e.expediente_id == exp.id && e.archivo_id == item.tipoArchivo);

                                        if (archivoRel != null)
                                        {
                                            archive.archivoCargado_id = archivoRel.id;
                                        }
                                        //archive.archivoCargado_id = archive;
                                    }
                                }
                            }
                            else
                            {
                                //AÑADIR CV Y FOTO DEL CANDIDATO (NO TIENEN ACTIVIDAD)
                                if (item.tipoArchivo == 5 || item.tipoArchivo == 30)
                                {
                                    var archivoRel = archivosAplicables.FirstOrDefault(x => x.archivo_id == item.tipoArchivo);
                                    if (archivoRel != null)
                                    {
                                        //archive.rutaArchivo = item.ubicacionArchivo;
                                        archivoRel.rutaArchivo = item.ubicacionArchivo;
                                        _context.SaveChanges();
                                    }
                                    else
                                    {
                                        var archivoSeguimiento = exp.archivos.FirstOrDefault(e => e.archivo_id == item.tipoArchivo);

                                        if (archivoSeguimiento != null && archivoSeguimiento.estado == false)
                                        {
                                            _context.tblRH_REC_ED_RelacionExpedienteArchivo.Add(new tblRH_REC_ED_RelacionExpedienteArchivo
                                            {
                                                expediente_id = exp.id,
                                                archivo_id = item.tipoArchivo,
                                                rutaArchivo = item.ubicacionArchivo,
                                                usuarioCreacion_id = vSesiones.sesionUsuarioDTO.id,
                                                fechaCreacion = DateTime.Now,
                                                usuarioModificacion_id = vSesiones.sesionUsuarioDTO.id,
                                                fechaModificacion = DateTime.Now,
                                                registroActivo = true,
                                            });
                                            _context.SaveChanges();

                                            archivoRel = _context.tblRH_REC_ED_RelacionExpedienteArchivo.FirstOrDefault(e => e.expediente_id == exp.id && e.archivo_id == item.tipoArchivo);

                                            if (archivoRel != null)
                                            {
                                                archivoSeguimiento.estado = true;
                                                archivoSeguimiento.rutaArchivo = item.ubicacionArchivo;
                                                archivoSeguimiento.archivoCargado_id = archivoRel.id;
                                            }
                                        }

                                    }
                                    //archivosSeguimiento.Add(new ArchivoExpedienteDigitalDTO
                                    //{
                                    //    archivo_id = item.tipoArchivo,
                                    //    rutaArchivo = item.ubicacionArchivo,
                                    //    estado = true,
                                    //});
                                }
                            }
                        }

                        #endregion

                    }

                    #region Columnas
                    var listaColumnas = new List<Tuple<string, string>>();

                    foreach (var arc in listaArchivos)
                    {
                        listaColumnas.Add(new Tuple<string, string>(
                            "columnaArchivo" + arc.id, //data
                            arc.descripcion //title
                        ));
                    }
                    #endregion

                    #region Data
                    var data = new List<Dictionary<string, object>>();

                    foreach (var exp in expedientes)
                    {
                        var renglonDatatable = new Dictionary<string, object>();

                        bool tiene1 = false;
                        bool tiene2 = false;
                        renglonDatatable.Add("id", exp.id);
                        renglonDatatable.Add("claveEmpleado", exp.claveEmpleado);
                        renglonDatatable.Add("empleadoDesc", exp.empleadoDesc);
                        renglonDatatable.Add("descPuesto", exp.descPuesto);

                        foreach (var arc in listaArchivos)
                        {
                            var archivoExpediente = exp.archivos.FirstOrDefault(x => x.archivo_id == arc.id);

                            if (arc.id == 14 && string.IsNullOrEmpty(archivoExpediente.rutaArchivo)) // DC-3
                            {
                                // SE VERIFICA SI CUENTA CON UN DC-3
                                List<tblS_CapacitacionControlAsistenciaDetalle> lstArchivosDC3RelEmpleado = _context.tblS_CapacitacionControlAsistenciaDetalle.Where(w => w.claveEmpleado == exp.claveEmpleado && w.rutaDC3 != null).OrderByDescending(o => o.id).ToList();
                                if (lstArchivosDC3RelEmpleado.Count() > 0)
                                {
                                    archivoExpediente.rutaArchivo = lstArchivosDC3RelEmpleado[0].rutaDC3;
                                    archivoExpediente.archivoCargado_id = lstArchivosDC3RelEmpleado[0].id;
                                }
                            }

                            #region COMENTADO
                            //if (archivoExpediente.aplica)
                            //{
                            //    if (archivoExpediente.rutaArchivo != null)
                            //    {
                            //        tiene1 = true;

                            //        renglonDatatable.Add("columnaArchivo" + arc.id, new { estatus = 1, archivo_id = arc.id, archivoCargado_id = archivoExpediente.archivoCargado_id });
                            //    }
                            //    else
                            //    {
                            //        tiene2 = true;
                            //        renglonDatatable.Add("columnaArchivo" + arc.id, new { estatus = 2, archivo_id = arc.id });
                            //    }
                            //}
                            //else
                            //{
                            //    renglonDatatable.Add("columnaArchivo" + arc.id, new { estatus = 0, archivo_id = arc.id });
                            //}
                            #endregion

                            //NO APLICA EVALUACION SIGNIFICA QUE NO APLICA EN EXPEDIENTE
                            if (exp.esEvaluacion.HasValue && !exp.esEvaluacion.Value && arc.id == 3)
                            {

                                tiene2 = true;
                                renglonDatatable.Add("columnaArchivo" + arc.id, new { estatus = 0, archivo_id = arc.id });
                            }
                            else if (archivoExpediente.esNoAplica.HasValue && archivoExpediente.esNoAplica.Value)
                            {
                                tiene2 = true;
                                renglonDatatable.Add("columnaArchivo" + arc.id, new { estatus = 0, archivo_id = arc.id });
                            }
                            else
                            {
                                if (archivoExpediente.rutaArchivo != null)
                                {
                                    tiene1 = true;

                                    renglonDatatable.Add("columnaArchivo" + arc.id, new { estatus = 1, archivo_id = arc.id, archivoCargado_id = archivoExpediente.archivoCargado_id });
                                }
                                else
                                {
                                    tiene2 = true;
                                    renglonDatatable.Add("columnaArchivo" + arc.id, new { estatus = 2, archivo_id = arc.id });
                                }
                            }
                            
                        }

                        if (estado.Count() == 3)
                        {
                            data.Add(renglonDatatable);
                        }
                        else
                        {
                            if (!estado.Contains(2))
                            {
                                if (estado.Contains(1) && !tiene2)
                                {
                                    data.Add(renglonDatatable);
                                }
                                if (estado.Contains(0) && !tiene1)
                                {
                                    data.Add(renglonDatatable);
                                }
                            }
                            else
                            {
                                if (tiene1 && tiene2)
                                {
                                    data.Add(renglonDatatable);
                                }
                                else
                                    if (estado.Contains(1) && !tiene2)
                                    {
                                        data.Add(renglonDatatable);
                                    }
                                    else
                                        if (estado.Contains(0) && !tiene1)
                                        {
                                            data.Add(renglonDatatable);
                                        }
                            }
                        }

                    }
                    #endregion

                    resultado.Add("data", data);
                    resultado.Add("columnas", listaColumnas);
                    resultado.Add(SUCCESS, true);

                    transaccionSP.Commit();
                }
                catch (Exception e)
                {
                    transaccionSP.Rollback();
                    LogError(16, 0, "ReclutamientosController", "CargarExpedientesDigitales", e, AccionEnum.CONSULTA, 0, null);
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                }
            }

            return resultado;
        }

        public Dictionary<string, object> GetArchivosCombo()
        {
            try
            {
                var listaArchivos = _context.tblRH_REC_ED_Archivo.Where(x => x.registroActivo).Select(x => new ComboDTO
                {
                    Value = x.id.ToString(),
                    Text = x.descripcion
                }).ToList();

                resultado.Add(ITEMS, listaArchivos);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                resultado.Add(SUCCESS, false);
                LogError(0, 0, "ReclutamientosController", "GetArchivosCombo", e, AccionEnum.CONSULTA, 0, null);
            }

            return resultado;
        }

        public Dictionary<string, object> CargarInformacionEmpleado(int claveEmpleado)
        {
            try
            {
                resultado.Add("data", getInformacionEmpleado(claveEmpleado));
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(16, 0, "ReclutamientosController", "CargarInformacionEmpleado", e, AccionEnum.CONSULTA, 0, claveEmpleado);
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }

            return resultado;
        }

        private EmpleadosDTO getInformacionEmpleado(int claveEmpleado)
        {
            var empleado = new EmpleadosDTO();
            var odbc = new OdbcConsultaDTO()
            {
                consulta = @"
                    SELECT
                        emp.clave_empleado,
                        (emp.nombre + ' ' + emp.ape_paterno + ' ' + emp.ape_materno) AS nombre
                    FROM sn_empleados emp
                    WHERE emp.clave_empleado = ?",
                parametros = new List<OdbcParameterDTO> { new OdbcParameterDTO { nombre = "clave_empleado", tipo = OdbcType.Int, valor = claveEmpleado } }
            };
            var empleadoConstruplan = _contextEnkontrol.Select<EmpleadosDTO>(EnkontrolEnum.CplanRh, odbc);
            var empleadoArrendadora = _contextEnkontrol.Select<EmpleadosDTO>(EnkontrolEnum.ArrenRh, odbc);

            if (empleadoConstruplan.Count() > 0)
            {
                empleado = empleadoConstruplan[0];
            }
            else if (empleadoArrendadora.Count() > 0)
            {
                empleado = empleadoArrendadora[0];
            }
            else
            {
                throw new Exception("No se encuentra la información del empleado.");
            }

            return empleado;
        }

        public Dictionary<string, object> GuardarNuevoExpediente(int claveEmpleado, List<int> listaArchivosAplicables)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    var expediente = new tblRH_REC_ED_Expediente();
                    var listaArchivos = _context.tblRH_REC_ED_Archivo.Where(x => x.registroActivo).Select(e => e.id).ToList();

                    expediente.claveEmpleado = claveEmpleado;
                    expediente.usuarioCreacion_id = vSesiones.sesionUsuarioDTO.id;
                    expediente.fechaCreacion = DateTime.Now;
                    expediente.usuarioModificacion_id = 0;
                    expediente.fechaModificacion = null;
                    expediente.registroActivo = true;

                    _context.tblRH_REC_ED_Expediente.Add(expediente);
                    _context.SaveChanges();

                    foreach (var arc in listaArchivos)
                    {
                        _context.tblRH_REC_ED_RelacionExpedienteArchivo.Add(new tblRH_REC_ED_RelacionExpedienteArchivo
                        {
                            expediente_id = expediente.id,
                            archivo_id = arc,
                            rutaArchivo = null,
                            usuarioCreacion_id = vSesiones.sesionUsuarioDTO.id,
                            fechaCreacion = DateTime.Now,
                            usuarioModificacion_id = 0,
                            fechaModificacion = null,
                            registroActivo = true
                        });
                        _context.SaveChanges();
                    }

                    dbContextTransaction.Commit();
                    SaveBitacora(3, (int)AccionEnum.AGREGAR, expediente.id, JsonUtils.convertNetObjectToJson(new { claveEmpleado = claveEmpleado, listaArchivosAplicables = listaArchivosAplicables }));
                    resultado.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(3, 0, "ReclutamientosController", "GuardarNuevoExpediente", e, AccionEnum.AGREGAR, 0, new { claveEmpleado = claveEmpleado, listaArchivosAplicables = listaArchivosAplicables });
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                }
            }

            return resultado;
        }

        public Dictionary<string, object> EditarExpediente(int claveEmpleado, List<int> listaArchivosAplicables)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {

                    var objExpediente = _context.tblRH_REC_ED_Expediente.Where(e => e.claveEmpleado == claveEmpleado).FirstOrDefault();

                    if (objExpediente != null)
                    {
                        #region CREAR NUEVOS ARCHIVOS PENDIENTES

                        foreach (var arc in listaArchivosAplicables)
                        {
                            var objArchivo = _context.tblRH_REC_ED_RelacionExpedienteArchivo.Where(e => e.archivo_id == arc && e.expediente_id == objExpediente.id).FirstOrDefault();

                            if (objArchivo == null)
                            {
                                _context.tblRH_REC_ED_RelacionExpedienteArchivo.Add(new tblRH_REC_ED_RelacionExpedienteArchivo
                                {
                                    expediente_id = objExpediente.id,
                                    archivo_id = arc,
                                    rutaArchivo = null,
                                    usuarioCreacion_id = vSesiones.sesionUsuarioDTO.id,
                                    fechaCreacion = DateTime.Now,
                                    usuarioModificacion_id = 0,
                                    fechaModificacion = null,
                                    registroActivo = true
                                });
                            }


                            _context.SaveChanges();
                        }
                        #endregion

                        #region ELIMINAR (NO APLICAN) LOS ARCHIVOS

                        var expArchivos = _context.tblRH_REC_ED_RelacionExpedienteArchivo.Where(e => e.expediente_id == objExpediente.id).Select(e => e.archivo_id).ToList();

                        foreach (var item in expArchivos)
                        {
                            var objArchivo = _context.tblRH_REC_ED_RelacionExpedienteArchivo.Where(e => e.archivo_id == item && e.expediente_id == objExpediente.id).FirstOrDefault();
                            if (!listaArchivosAplicables.Contains(item) && objArchivo != null)
                            {
                                objArchivo.usuarioModificacion_id = vSesiones.sesionUsuarioDTO.id;
                                objArchivo.fechaModificacion = DateTime.Now;
                                objArchivo.registroActivo = false;
                            }
                            _context.SaveChanges();
                        }
                        #endregion

                    }
                    dbContextTransaction.Commit();
                    SaveBitacora(3, (int)AccionEnum.ACTUALIZAR, objExpediente.id, JsonUtils.convertNetObjectToJson(new { claveEmpleado = claveEmpleado, listaArchivosAplicables = listaArchivosAplicables }));
                    resultado.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(3, 0, "ReclutamientosController", "EditarExpediente", e, AccionEnum.ACTUALIZAR, 0, new { claveEmpleado = claveEmpleado, listaArchivosAplicables = listaArchivosAplicables });
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                }
            }

            return resultado;
        }

        public Dictionary<string, object> GuardarArchivoExpediente(int expediente_id, int archivo_id, HttpPostedFileBase archivo)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {

                    var expedienteSIGOPLAN = _context.tblRH_REC_ED_Expediente.FirstOrDefault(x => x.id == expediente_id);
                    var archivoRegistroSIGOPLAN = _context.tblRH_REC_ED_Archivo.FirstOrDefault(x => x.id == archivo_id);
                    var listaArchivosAnteriores = _context.tblRH_REC_ED_RelacionExpedienteArchivo.Where(x => x.registroActivo && x.expediente_id == expediente_id && x.archivo_id == archivo_id).ToList();

                    foreach (var archivoAnt in listaArchivosAnteriores)
                    {
                        archivoAnt.registroActivo = false;
                        _context.SaveChanges();
                    }

                    var RutaBase = "";

#if DEBUG
                    RutaBase = RutaExpedientesDigitalesLocal;
#else
                    RutaBase = RutaExpedientesDigitales;
#endif


                    var listaRutaArchivos = new List<Tuple<HttpPostedFileBase, string>>();
                    var rutaCarpetaEmpleado = Path.Combine(RutaBase, expedienteSIGOPLAN.claveEmpleado.ToString());

                    verificarExisteCarpeta(rutaCarpetaEmpleado, true);

                    archivoRegistroSIGOPLAN.descripcion = archivoRegistroSIGOPLAN.descripcion.Replace("*", string.Empty);
                    var rutaArchivo = ObtenerRutaArchivo(Path.Combine(rutaCarpetaEmpleado, ObtenerFormatoNombreArchivo(archivoRegistroSIGOPLAN.descripcion + " ", archivo.FileName)));

                    var nuevoRegistroArchivo = new tblRH_REC_ED_RelacionExpedienteArchivo();

                    nuevoRegistroArchivo.expediente_id = expediente_id;
                    nuevoRegistroArchivo.archivo_id = archivo_id;
                    nuevoRegistroArchivo.rutaArchivo = rutaArchivo;
                    nuevoRegistroArchivo.usuarioCreacion_id = vSesiones.sesionUsuarioDTO.id;
                    nuevoRegistroArchivo.fechaCreacion = DateTime.Now;
                    nuevoRegistroArchivo.usuarioModificacion_id = 0;
                    nuevoRegistroArchivo.fechaModificacion = null;
                    nuevoRegistroArchivo.registroActivo = true;

                    _context.tblRH_REC_ED_RelacionExpedienteArchivo.Add(nuevoRegistroArchivo);
                    _context.SaveChanges();

                    listaRutaArchivos.Add(Tuple.Create(archivo, rutaArchivo));

                    foreach (var arc in listaRutaArchivos)
                    {
                        var guardarArchivo = GlobalUtils.SaveHTTPPostedFileValidacion(arc.Item1, arc.Item2);

                        if (guardarArchivo.Item1 == false)
                        {
                            dbContextTransaction.Rollback();
                            resultado.Clear();
                            resultado.Add(SUCCESS, false);
                            resultado.Add(MESSAGE, "Ocurrió un error al guardar los archivos en el servidor.");
                            LogError(0, 0, "ReclutamientosController", "GuardarArchivoExpediente_GuardarArchivo", guardarArchivo.Item2, AccionEnum.AGREGAR, 0, new { nombreArchivo = arc.Item2 });
                            return resultado;
                        }
                    }

                    dbContextTransaction.Commit();
                    SaveBitacora(3, (int)AccionEnum.AGREGAR, nuevoRegistroArchivo.id, JsonUtils.convertNetObjectToJson(new { expediente_id = expediente_id, archivo_id = archivo_id }));
                    resultado.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                    LogError(0, 0, "ReclutamientosController", "GuardarArchivoExpediente", e, AccionEnum.AGREGAR, 0, new { expediente_id = expediente_id, archivo_id = archivo_id });
                }
            }

            return resultado;
        }

        private static bool verificarExisteCarpeta(string path, bool crear = false)
        {
            bool existe = false;
            try
            {
                existe = Directory.Exists(path);
                if (!existe && crear)
                {
                    Directory.CreateDirectory(path);
                    existe = true;
                }
            }
            catch (Exception e)
            {
                existe = false;
            }

            return existe;
        }

        private string ObtenerRutaArchivo(string ruta)
        {
            if (File.Exists(ruta))
            {
                int count = 1;

                string fileNameOnly = Path.GetFileNameWithoutExtension(ruta);
                string extension = Path.GetExtension(ruta);
                string path = Path.GetDirectoryName(ruta);
                string newFullPath = ruta;

                while (File.Exists(newFullPath))
                {
                    string tempFileName = string.Format("{0} ({1})", fileNameOnly, count++);
                    newFullPath = Path.Combine(path, tempFileName + extension);
                }

                ruta = newFullPath;
            }

            return ruta;
        }

        public Dictionary<string, object> EliminarArchivoExpediente(int expediente_id, int archivo_id)
        {
            Dictionary<string, object> result = new Dictionary<string, object>();
            tblRH_REC_ED_RelacionExpedienteArchivo relacionExpedienteArchivoSIGOPLAN = new tblRH_REC_ED_RelacionExpedienteArchivo();
            using (var dbContextTransaction = _context.Database.BeginTransaction())
                try
                {
                    relacionExpedienteArchivoSIGOPLAN = _context.tblRH_REC_ED_RelacionExpedienteArchivo.FirstOrDefault(x => x.registroActivo && x.expediente_id == expediente_id && x.archivo_id == archivo_id);
                    relacionExpedienteArchivoSIGOPLAN.rutaArchivo = null;

                    dbContextTransaction.Commit();
                    SaveBitacora(3, (int)AccionEnum.AGREGAR, 0, JsonUtils.convertNetObjectToJson(new { expediente_id = expediente_id, archivo_id = archivo_id }));
                    result.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                    LogError(0, 0, "ReclutamientosController", "EliminarArchivoExpediente", e, AccionEnum.AGREGAR, relacionExpedienteArchivoSIGOPLAN.id, new { expediente_id = expediente_id, archivo_id = archivo_id });
                }
            return result;
        }
        private string ObtenerFormatoNombreArchivo(string nombreBase, string fileName)
        {
            return String.Format("{0} {1}{2}", Path.GetFileNameWithoutExtension(fileName).Replace("/", "-"), DateTime.Now.ToString("dd-MM-y HH:mm:ss").Replace(":", "-"), Path.GetExtension(fileName));
        }

        public tblRH_REC_ED_RelacionExpedienteArchivo GetArchivoExpediente(int archivoCargado_id, int tipo_archivo)
        {
            tblRH_REC_ED_RelacionExpedienteArchivo objArchivoRH = new tblRH_REC_ED_RelacionExpedienteArchivo();

            if (tipo_archivo > 0)
            {
                objArchivoRH = _context.tblRH_REC_ED_RelacionExpedienteArchivo.Where(w => w.id == archivoCargado_id && w.archivo_id == tipo_archivo).FirstOrDefault();
                
            }else{
                objArchivoRH = _context.tblRH_REC_ED_RelacionExpedienteArchivo.Where(w => w.id == archivoCargado_id).FirstOrDefault();

            }

            if (objArchivoRH == null)
            {
                if (tipo_archivo == 14)
                {
                    tblRH_REC_ED_RelacionExpedienteArchivo objArchivoRH2 = new tblRH_REC_ED_RelacionExpedienteArchivo();
                    tblS_CapacitacionControlAsistenciaDetalle objArchivoDC3 = _context.tblS_CapacitacionControlAsistenciaDetalle.Where(w => w.id == archivoCargado_id).FirstOrDefault();

                    if (objArchivoDC3 != null)
                    {
                        string oldString = "REPOSITORIO";
                        string newString = "10.1.0.112";
                        string rutaArchivo = objArchivoDC3.rutaDC3.Replace(oldString, newString);

                        objArchivoRH2.rutaArchivo = rutaArchivo;
                    }
                    return objArchivoRH2;

                }
                else
                {
                    tblRH_REC_ED_RelacionExpedienteArchivo objArchivoRHSeg = new tblRH_REC_ED_RelacionExpedienteArchivo();
                    var objArchivo = _context.tblRH_REC_Archivos.FirstOrDefault(e => e.id == archivoCargado_id);

                    if (objArchivo != null)
                    {
                        objArchivoRHSeg.rutaArchivo = objArchivo.ubicacionArchivo;
                    }

                    return objArchivoRHSeg;
                }
            }
            else
                return objArchivoRH;

            // VERSIÓN 1
            //return _context.tblRH_REC_ED_RelacionExpedienteArchivo.FirstOrDefault(x => x.id == archivoCargado_id);
        }

        public Dictionary<string, object> GetArchivos()
        {
            var result = new Dictionary<string, object>();
            try
            {
                var lstArchivos = _context.tblRH_REC_ED_Archivo.Where(e => e.registroActivo == true).ToList();

                result.Add(ITEMS, lstArchivos);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }
            return result;
        }

        public Dictionary<string, object> CrearEditarArchivos(ExpedienteArchivosDTO objArchivo)
        {
            var result = new Dictionary<string, object>();
            using (var dbContextTransaction = _context.Database.BeginTransaction())
                try
                {

                    #region VALIDACIÓN DE CAMPOS VACIOS

                    bool errorCrearEditar = false;
                    string strMensajeError = string.Empty;
                    if (string.IsNullOrEmpty(objArchivo.descripcion))
                    {
                        errorCrearEditar = true;
                        strMensajeError += string.IsNullOrEmpty(objArchivo.descripcion) ? "Es necesario indicar la descripcion." : string.Empty;

                        result.Add(SUCCESS, false);
                        result.Add(MESSAGE, strMensajeError);
                    }

                    #endregion

                    #region EDITAR/CREAR

                    tblRH_REC_ED_Archivo objCEArchivos = new tblRH_REC_ED_Archivo();

                    if (objArchivo.id > 0 && !errorCrearEditar)
                    {
                        objCEArchivos = _context.tblRH_REC_ED_Archivo.Where(e => e.id == objArchivo.id).FirstOrDefault();

                        objCEArchivos.descripcion = objArchivo.descripcion;
                        objCEArchivos.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                        objCEArchivos.fechaModificacion = DateTime.Now;

                        _context.SaveChanges();

                        result.Add(MESSAGE, "Se actualizo el archivo con exito");
                        result.Add(SUCCESS, true);
                    }
                    else
                    {
                        objCEArchivos.descripcion = objArchivo.descripcion;
                        objCEArchivos.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                        objCEArchivos.fechaCreacion = DateTime.Now;
                        objCEArchivos.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                        objCEArchivos.fechaModificacion = DateTime.Now;
                        objCEArchivos.registroActivo = true;

                        _context.tblRH_REC_ED_Archivo.Add(objCEArchivos);
                        _context.SaveChanges();

                        result.Add(MESSAGE, "Se creo el archivo con exito");
                        result.Add(SUCCESS, true);
                    }

                    #endregion

                    dbContextTransaction.Commit();

                    #region SE CREA BITACORA
                    int idArchivo = objArchivo.id > 0 ? objArchivo.id : 0;
                    if (idArchivo == 0)
                    {
                        idArchivo = _context.tblS_SO_Medicos.Where(e => e.registroActivo == true).OrderByDescending(e => e.id).FirstOrDefault().id;
                    }
                    SaveBitacora(16, objArchivo.id > 0 ? (int)AccionEnum.ACTUALIZAR : (int)AccionEnum.AGREGAR, idArchivo, JsonUtils.convertNetObjectToJson(objArchivo));
                    #endregion


                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(16, 16, "ReclutamientosController", "CEArchivo", e, objArchivo.id > 0 ? AccionEnum.ACTUALIZAR : AccionEnum.AGREGAR, objArchivo.id > 0 ? objArchivo.id : 0, 0);

                    result.Add(MESSAGE, e.Message);
                    result.Add(SUCCESS, false);
                }
            return result;
        }

        public Dictionary<string, object> EliminarArchivo(int idArchivo)
        {
            Dictionary<string, object> result = new Dictionary<string, object>();

            using (var dbContextTransaction = _context.Database.BeginTransaction())
                try
                {
                    #region VALIDACIONES
                    if (idArchivo <= 0)
                        throw new Exception("Ocurrió un error al eliminar el archivo.");
                    #endregion

                    #region Eliminar
                    tblRH_REC_ED_Archivo objArchivo = _context.tblRH_REC_ED_Archivo.Where(e => e.id == idArchivo).FirstOrDefault();

                    if (objArchivo == null)
                    {
                        throw new Exception("Ocurrió un error al eliminar el archivo.");
                    }
                    else
                    {
                        objArchivo.idUsuarioModificacion = (int)vSesiones.sesionUsuarioDTO.id;
                        objArchivo.fechaModificacion = DateTime.Now;
                        objArchivo.registroActivo = false;
                        _context.SaveChanges();

                        result.Add(SUCCESS, true);
                        result.Add(MESSAGE, "Se ha eliminado el archivo con exito");
                    }

                    dbContextTransaction.Commit();
                    #endregion

                    #region SE CREA BITACORA
                    SaveBitacora(16, (int)AccionEnum.ELIMINAR, idArchivo, JsonUtils.convertNetObjectToJson(objArchivo));
                    #endregion
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(16, 16, "ReclutamientosController", "EliminarArchivo", e, AccionEnum.ELIMINAR, idArchivo, 0);

                    result.Add(MESSAGE, "Ocurrió un error al eliminar el archivo.");
                    result.Add(SUCCESS, false);
                }
            return result;
        }

        public Dictionary<string, object> VerHistorialExpediente(int expediente_id, int archivo_id)
        {
            var result = new Dictionary<string, object>();

            try
            {
                List<ArchivoExpedienteDigitalDTO> lstArchivos = new List<ArchivoExpedienteDigitalDTO>();

                #region ARCHIVOS RH
                var lstArchivosRH = _context.tblRH_REC_ED_RelacionExpedienteArchivo.Where(x => x.expediente_id == expediente_id && x.archivo_id == archivo_id && x.rutaArchivo != null).ToList().Select(x => new
                {
                    id = x.id,
                    expediente_id = expediente_id,
                    archivo_id = archivo_id,
                    rutaArchivo = x.rutaArchivo,
                    fechaCreacion = x.fechaCreacion,
                    fechaCreacionString = x.fechaCreacion.ToShortDateString() + " " + x.fechaCreacion.ToShortTimeString(),
                    registroActivo = x.registroActivo
                }).OrderByDescending(x => x.registroActivo).ToList();

                var objActividad = _context.tblRH_REC_Actividades.FirstOrDefault(e => e.esActivo && e.tipoArchivo == archivo_id);

                if (objActividad != null)
                {
                    var objExpediente = _context.tblRH_REC_ED_Expediente.FirstOrDefault(e => e.registroActivo &&  e.id == expediente_id);

                    if (objExpediente != null)
	                {
		                var objCandidato = _context.tblRH_REC_GestionCandidatos.FirstOrDefault(e => e.esActivo && e.clave_empleado == objExpediente.claveEmpleado);

                        if (objCandidato != null)
	                    {
                            var lstArchivosSeg = _context.tblRH_REC_Archivos.Where(e => e.esActivo && e.idActividad == objActividad.id && e.idCandidato == objCandidato.id).ToList();

                            if (lstArchivosSeg != null && lstArchivosSeg.Count > 0)
                            {
                                foreach (var item in lstArchivosSeg)
                                {
                                    var objArchivoExp = lstArchivosRH.FirstOrDefault(e => e.rutaArchivo == item.ubicacionArchivo);
                                    if (objArchivoExp == null)
                                    {
                                        lstArchivosRH.Add(new
                                        {
                                            id = item.id,
                                            expediente_id = expediente_id,
                                            archivo_id = archivo_id,
                                            rutaArchivo = item.ubicacionArchivo,
                                            fechaCreacion = item.fechaCreacion,
                                            fechaCreacionString = item.fechaCreacion.ToShortDateString() + " " + item.fechaCreacion.ToShortTimeString(),
                                            registroActivo = item.esActivo
                                        });
                                    }

                                }
                            }
	                    }
	                }
                }

                ArchivoExpedienteDigitalDTO objArchivo = new ArchivoExpedienteDigitalDTO();
                foreach (var item in lstArchivosRH)
                {
                    objArchivo = new ArchivoExpedienteDigitalDTO();
                    objArchivo.id = item.id;
                    objArchivo.expediente_id = item.expediente_id;
                    objArchivo.archivo_id = item.archivo_id;
                    objArchivo.fechaCreacion = item.fechaCreacion;
                    objArchivo.fechaCreacionString = item.fechaCreacion.ToShortDateString() + " " + item.fechaCreacion.ToShortTimeString();
                    objArchivo.rutaArchivo = item.rutaArchivo;
                    objArchivo.registroActivo = item.registroActivo;
                    objArchivo.esCargadoDesdeCapacitacionOperativa = false;
                    lstArchivos.Add(objArchivo);
                }
                #endregion

                #region ARCHIVOS DC-3
                tblRH_REC_ED_Expediente objEmpleado = _context.tblRH_REC_ED_Expediente.Where(w => w.id == expediente_id).FirstOrDefault();
                if (objEmpleado == null)
                    throw new Exception("Ocurrió un error al obtener la clave del empleado.");

                int claveEmpleado = objEmpleado.claveEmpleado;
                var lstArchivosDC3 = _context.tblS_CapacitacionControlAsistenciaDetalle.Where(w => w.rutaDC3 != null && w.claveEmpleado == claveEmpleado).ToList();

                objArchivo = new ArchivoExpedienteDigitalDTO();
                foreach (var item in lstArchivosDC3)
                {
                    objArchivo = new ArchivoExpedienteDigitalDTO();
                    objArchivo.id = item.id;
                    objArchivo.expediente_id = expediente_id;
                    objArchivo.archivo_id = item.id;

                    // SE OBTIENE LA FECHA CREACIÓN DEL ARCHIVO DC-3
                    string[] split = item.rutaDC3.Split(' ');
                    DateTime fechaCreacion = new DateTime();
                    foreach (var itemFechaCreacionDC3 in split)
                    {
                        try
                        {
                            fechaCreacion = Convert.ToDateTime(itemFechaCreacionDC3);
                        }
                        catch (Exception)
                        {
                        }
                    }

                    objArchivo.fechaCreacion = fechaCreacion;
                    objArchivo.fechaCreacionString = objArchivo.fechaCreacion.ToShortDateString() + " " + objArchivo.fechaCreacion.ToShortTimeString();
                    // END

                    objArchivo.rutaArchivo = item.rutaDC3;
                    objArchivo.registroActivo = true;
                    objArchivo.esCargadoDesdeCapacitacionOperativa = true;
                    lstArchivos.Add(objArchivo);
                }
                #endregion

                result.Add("data", lstArchivos);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "VerHistorialExpediente", e, AccionEnum.CONSULTA, 0, new { expediente_id = expediente_id, archivo_id = archivo_id });

                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return result;
        }

        public Dictionary<string, object> DescargarAvanceExcel(string estatus_emp, string cc)
        {
            try
            {
                switch ((EmpresaEnum)vSesiones.sesionEmpresaActual)
                {
                    case EmpresaEnum.GCPLAN:
                    case EmpresaEnum.Construplan:
                        {
                            #region QUERY
                            var avances = _context.Select<AvanceExpedienteDTO>(new DapperDTO
                            {
                                baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                                consulta = @"SELECT
	                            EMPLEADO.cc_contable AS 'cc',
	                            EMPLEADO.clave_empleado AS 'clave_empleado',
	                            EMPLEADO.nombre AS 'nombre',
	                            EMPLEADO.ape_paterno AS 'ape_paterno',
	                            EMPLEADO.ape_materno AS 'ape_materno',
	                            PUESTO.puesto AS 'puesto',
	                            PUESTO.descripcion AS 'descripcion',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 72 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 72 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 72 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id 
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 1 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'solicitudEmpleo',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 73 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 73 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 73 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 2 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'examenMedico',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN PUESTO.esEvaluacion = 0 THEN 'NO APLICA'
				                            when PUESTO.esEvaluacion = 1 AND COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 3 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'evaluacionOperador',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 75 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 75 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 75 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 4 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'evaluacionPsicometrico',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 102 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 102 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 102 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 5 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'cv',
								(
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 77 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 77 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 77 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 6 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'actaNacimiento',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 78 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 78 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 78 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 7 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'ine',
								(
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 79 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 79 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 79 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 8 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'nss',
								(
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 80 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 80 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 80 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 9 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'curp',
								(
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 81 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 81 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 81 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 10 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'rfc',
								(
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 82 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 82 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 82 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 11 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'comprobanteDomicilio',
								(
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 83 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 83 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 8 AND
							                            CANDIDATO.esActivo = 13
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 12 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'comprobanteEstudios',
								(
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 84 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 84 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 84 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 13 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'cartaTrabajo',
								(
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 85 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 85 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 85 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 14 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'dc3',
								(
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 86 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 86 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 86 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 15 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'cursoCapacitacion',
								(
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 87 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 87 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 87 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 16 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'cartaAntecedentes',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 88 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 88 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 88 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 17 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'comprobanteVacuna',
								(
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 89 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 89 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 89 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 18 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'cartaLiberacion',
								(
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 90 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 90 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 90 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 19 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'cuentaBancaria',
								(
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 91 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 91 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 91 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 20 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'retencionInfonavit',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 93 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 93 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 93 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 22 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'licenciaConducir',
								(
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 94 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 94 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 94 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 23 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'cursoCovid',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 96 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 96 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 96 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 25 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'formatoContratacion',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 30 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'fotoEmpleado',
								(
		                            SELECT TOP 1
			                            CASE
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 40 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'altaImss',
								(
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 101 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 101 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 101 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 41 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'referenciaLaboral',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 42 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'cambio',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 43 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'descriptor'
                            FROM
	                            tblRH_EK_Empleados AS EMPLEADO
                            INNER JOIN
	                            tblRH_EK_Puestos AS PUESTO
	                            ON
		                            PUESTO.puesto = EMPLEADO.puesto AND
		                            PUESTO.registroActivo = 1
                            WHERE
	                            EMPLEADO.estatus_empleado = @paramEstatus AND
	                            EMPLEADO.cc_contable = @paramCC AND
	                            EMPLEADO.esActivo = 1
                            ORDER BY
	                            EMPLEADO.cc_contable,
	                            EMPLEADO.puesto,
	                            EMPLEADO.clave_empleado",
                                parametros = new { paramEstatus = estatus_emp, paramCC = cc }
                            });
                            #endregion

                            #region EXCEL
                            using (ExcelPackage excel = new ExcelPackage())
                            {
                                var excelDetalles = excel.Workbook.Worksheets.Add("Avances");

                                var header = new List<string>
                    {
                        "CENTRO DE COSTO",
                        "CLAVE EMPLEADO",
                        "NOMBRE",
                        "APELLIDO PATERNO",
                        "APELLIDO MATERNO",
                        "PUESTO",
                        "DESCRIPCION PUESTO",
                        "SOLICITUD DE EMPLEO",
                        "EXAMEN MEDICO / ANTIDOPING",
                        "EVALUACION DE OPERADOR",
                        "EVALUACION PSICOMETRICOS",
                        "CV",
                        "ACTA DE NACIMIENTO",
                        "INE",
                        "NSS",
                        "CURP",
                        "RFC",
                        "COMPROBANTE DOMICILIO",
                        "COMPROBANTE ESTUDIOS",
                        "CARTA DE TRABAJO",
                        "DC3",
                        "CURSO CAPACITACIÓN",
                        "CARTA ANTECEDENTES",
                        "COMPROBANTE VACUNAS COVID 19",
                        "CARTA LIBERACIÓN",
                        "CUENTA BANCARIA",
                        "RETENCIÓN INFONAVIT",
                        "LICENCIA DE CONDUCIR",
                        "CURSO COVID",
                        "FORMATOS DE CONTRATACION",
                        "FOTO EMPLEADO",
                        "ALTA IMSS",
                        "REFERENCIAS LABORALES",
                        "CAMBIOS",
                        "DESCRIPTOR FIRMADO",
                        "NO APLICAN",
                        "CARGADAS",
                        "SIN CARGAR",
                        "TOTAL",
                        "PORCENTAJE"
                    };

                                for (int i = 1; i < header.Count; i++)
                                {
                                    excelDetalles.Cells[1, i].Value = header[i - 1];
                                }

                                var cellData = new List<object[]>();
                                foreach (var item in avances)
                                {
                                    cellData.Add(new object[]{
                            item.cc,
                            item.clave_empleado,
                            item.nombre,
                            item.ape_paterno,
                            item.ape_materno,
                            item.puesto,
                            item.descripcion,
                            item.solicitudEmpleo,
                            item.examenMedico,
                            item.evaluacionOperador,
                            item.evaluacionPsicometrico,
                            item.cv,
                            item.actaNacimiento,
                            item.ine,
                            item.nss,
                            item.curp,
                            item.rfc,
                            item.comprobanteDomicilio,
                            item.comprobanteEstudios,
                            item.cartaTrabajo,
                            item.dc3,
                            item.cursoCapacitacion,
                            item.cartaAntecedentes,
                            item.comprobanteVacuna,
                            item.cartaLiberacion,
                            item.cuentaBancaria,
                            item.retencionInfonavit,
                            item.licenciaConducir,
                            item.cursoCovid,
                            item.formatoContratacion,
                            item.fotoEmpleado,
                            item.altaImss,
                            item.referenciaLaboral,
                            item.cambio,
                            item.descriptor
                        });
                                }

                                excelDetalles.Cells[2, 1].LoadFromArrays(cellData);

                                for (int i = 0; i < avances.Count; i++)
                                {
                                    var renglon = i + 2;

                                    excelDetalles.Cells[renglon, 36].Formula = @"COUNTIF(H" + renglon + ":AI" + renglon + ", \"NO APLICA\")";
                                    excelDetalles.Cells[renglon, 37].Formula = @"COUNTIF(H" + renglon + ":AI" + renglon + ", \"CARGADA\")";
                                    excelDetalles.Cells[renglon, 38].Formula = @"COUNTIF(H" + renglon + ":AI" + renglon + ", \"SIN CARGAR\")";
                                    excelDetalles.Cells[renglon, 39].Formula = @"SUM(AK" + renglon + ", AL" + renglon + ")";
                                    excelDetalles.Cells[renglon, 40].Formula = @"(AK" + renglon + " * 100) / AM" + renglon;
                                }

                                ExcelRange range = excelDetalles.Cells[1, 1, excelDetalles.Dimension.End.Row, excelDetalles.Dimension.End.Column];
                                ExcelTable table = excelDetalles.Tables.Add(range, "Tabla");
                                table.TableStyle = TableStyles.Medium17;
                                excelDetalles.Cells[excelDetalles.Dimension.Address].AutoFitColumns();

                                var bytes = new MemoryStream();
                                using (var stream = new MemoryStream())
                                {
                                    excel.SaveAs(stream);
                                    bytes = stream;
                                }

                                resultado.Add(SUCCESS, true);
                                resultado.Add(ITEMS, bytes);
                            }
                            #endregion
                        }
                        break;
                    case EmpresaEnum.Arrendadora:
                        {

                        }
                        break;
                    case EmpresaEnum.Colombia:
                        {

                        }
                        break;
                    case EmpresaEnum.Peru:
                        {
                            #region QUERY
                            var avances = _context.Select<AvanceExpedienteDTO>(new DapperDTO
                            {
                                baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                                consulta = @"
                            SELECT
	                            EMPLEADO.cc_contable AS 'cc',
	                            EMPLEADO.clave_empleado AS 'clave_empleado',
	                            EMPLEADO.nombre AS 'nombre',
	                            EMPLEADO.ape_paterno AS 'ape_paterno',
	                            EMPLEADO.ape_materno AS 'ape_materno',
	                            PUESTO.puesto AS 'puesto',
	                            PUESTO.descripcion AS 'descripcion',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 72 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 72 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 72 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id 
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 1 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'solicitudEmpleo',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 73 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 73 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 73 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 2 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'examenMedico',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN PUESTO.esEvaluacion = 0 THEN 'NO APLICA'
				                            when PUESTO.esEvaluacion = 1 AND COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 3 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'evaluacionOperador',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 75 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 75 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 75 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 4 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'evaluacionPsicometrico',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 107 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 107 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 107 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 5 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'cv',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 78 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 78 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 78 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 7 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'dni',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 82 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 82 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 82 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 11 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'declaracionJurada',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 83 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 83 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 83 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 12 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'certificadoEducativo',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 85 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 85 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 85 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 14 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'constanciaHabilidades',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 88 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 88 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 88 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 17 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'comprobanteVacuna',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 93 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 93 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 93 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 22 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'licenciaConducir',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 96 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 96 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 96 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 25 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'formatoContratacion',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 30 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'fotoEmpleado',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 101 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 101 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 101 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 31 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'certificadoLaboral',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 102 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 102 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 102 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 32 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'certificadoUnicoLaboral',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 103 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 103 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 103 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 33 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'certificadoRemuneracion',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 104 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 104 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 104 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 34 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'dniFamiliar',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 105 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 105 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 105 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 35 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'pasaporte',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 36 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'referenciaLaboral',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 37 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'cambio',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 106 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 106 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 106 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 38 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'actaMatrimonio',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 90 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 90 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 90 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 39 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'cuentaSueldo',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 87 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'NO APLICA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 87 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 2 THEN 'RECHAZADA'
				                            WHEN
					                            (
						                            SELECT TOP 1
							                            SEGUIMIENTO_CANDIDATO_DET.esAprobada
						                            FROM
							                            tblRH_REC_SegDetCandidatos AS SEGUIMIENTO_CANDIDATO_DET
						                            INNER JOIN
							                            tblRH_REC_SegCandidatos AS SEGUIMIENTO_CANDIDATO
							                            ON
								                            SEGUIMIENTO_CANDIDATO.id = SEGUIMIENTO_CANDIDATO_DET.idSeg
						                            INNER JOIN
							                            tblRH_REC_GestionCandidatos AS CANDIDATO
							                            ON
								                            CANDIDATO.id = SEGUIMIENTO_CANDIDATO.idCandidato AND
								                            CANDIDATO.clave_empleado = EMPLEADO.clave_empleado
						                            WHERE
							                            SEGUIMIENTO_CANDIDATO_DET.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO.esActivo = 1 AND
							                            SEGUIMIENTO_CANDIDATO_DET.idActividad = 87 AND
							                            CANDIDATO.esActivo = 1
						                            ORDER BY
							                            CANDIDATO.id DESC
					                            ) = 3 THEN 'CARGADA'
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 40 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'carnet',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 41 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'altaSunat',
	                            (
		                            SELECT TOP 1
			                            CASE
				                            WHEN COUNT(ARCHIVO.id) > 0 THEN 'CARGADA' ELSE 'SIN CARGAR'
			                            END
		                            FROM
			                            tblRH_REC_ED_Archivo AS ARCHIVO
		                            INNER JOIN
			                            tblRH_REC_ED_RelacionExpedienteArchivo AS RELACION_EXPEDIENTE_ARCHIVO
			                            ON
				                            RELACION_EXPEDIENTE_ARCHIVO.archivo_id = ARCHIVO.id
		                            INNER JOIN
			                            tblRH_REC_ED_Expediente AS EXPEDIENTE
			                            ON
				                            EXPEDIENTE.id = RELACION_EXPEDIENTE_ARCHIVO.expediente_id
		                            WHERE
			                            ARCHIVO.registroActivo = 1 AND
			                            ARCHIVO.id = 42 AND
			                            RELACION_EXPEDIENTE_ARCHIVO.registroActivo = 1 AND
			                            EXPEDIENTE.claveEmpleado = EMPLEADO.clave_empleado
	                            ) AS 'descriptor'
                            FROM
	                            tblRH_EK_Empleados AS EMPLEADO
                            INNER JOIN
	                            tblRH_EK_Puestos AS PUESTO
	                            ON
		                            PUESTO.puesto = EMPLEADO.puesto AND
		                            PUESTO.registroActivo = 1
                            WHERE
	                            EMPLEADO.estatus_empleado = @paramEstatus AND
	                            EMPLEADO.cc_contable = @paramCC AND
	                            EMPLEADO.esActivo = 1
                            ORDER BY
	                            EMPLEADO.cc_contable,
	                            EMPLEADO.puesto,
	                            EMPLEADO.clave_empleado",
                                parametros = new { paramEstatus = estatus_emp, paramCC = cc }
                            });
                            #endregion

                            #region EXCEL
                            using (ExcelPackage excel = new ExcelPackage())
                            {
                                var excelDetalles = excel.Workbook.Worksheets.Add("Avances");

                                var header = new List<string>
                    {
                        "CENTRO DE COSTO",
                        "CLAVE EMPLEADO",
                        "NOMBRE",
                        "APELLIDO PATERNO",
                        "APELLIDO MATERNOR",
                        "PUESTO",
                        "DESCRIPCION PUESTO",
                        "SOLICITUD DE EMPLEO",
                        "EXAMEN MEDICO / ANTIDOPING",
                        "EVALUACION DE OPERADOR",
                        "EVALUACION PSICOMETRICOS",
                        "CV",
                        "DNI",
                        "DECLARACION JURADA DOMICILIARIA",
                        "CERTIFICADO EDUCATIVO",
                        "CONSTANCIA DE HABILIDADES",
                        "COMPROBANTE VACUNAS COVID 19",
                        "LICENCIA DE CONDUCIR",
                        "FORMATOS DE CONTRATACION",
                        "FOTO EMPLEADO",
                        "CERTIFICADO LABORAL",
                        "CERTIFICADO UNICO LABORAL",
                        "CERTIFICADO DE REMUNERACIONES Y RETENCIONES DE QUINTA CATEGORIA",
                        "DNI FAMILIAR",
                        "PASAPORTE",
                        "REFERENCIAS LABORALES",
                        "CAMBIOS",
                        "ACTA DE MATRIMONIO O CERTIFICADO DE UNION DE HECHOS",
                        "CUENTA SUELDO",
                        "CARNET RETCC",
                        "ALTA SUNAT",
                        "DESCRIPTOR FIRMADO",
                        "NO APLICAN",
                        "CARGADAS",
                        "SIN CARGAR",
                        "TOTAL",
                        "PORCENTAJE"
                    };

                                for (int i = 1; i < header.Count; i++)
                                {
                                    excelDetalles.Cells[1, i].Value = header[i - 1];
                                }

                                var cellData = new List<object[]>();
                                foreach (var item in avances)
                                {
                                    cellData.Add(new object[]{
                            item.cc,
                            item.clave_empleado,
                            item.nombre,
                            item.ape_paterno,
                            item.ape_materno,
                            item.puesto,
                            item.descripcion,
                            item.solicitudEmpleo,
                            item.examenMedico,
                            item.evaluacionOperador,
                            item.evaluacionPsicometrico,
                            item.cv,
                            item.dni,
                            item.declaracionJurada,
                            item.certificadoEducativo,
                            item.constanciaHabilidades,
                            item.comprobanteVacuna,
                            item.licenciaConducir,
                            item.formatoContratacion,
                            item.fotoEmpleado,
                            item.certificadoLaboral,
                            item.certificadoUnicoLaboral,
                            item.certificadoRemuneracion,
                            item.dniFamiliar,
                            item.pasaporte,
                            item.referenciaLaboral,
                            item.cambio,
                            item.actaMatrimonio,
                            item.cuentaSueldo,
                            item.carnet,
                            item.altaSunat,
                            item.descriptor
                        });
                                }

                                excelDetalles.Cells[2, 1].LoadFromArrays(cellData);

                                for (int i = 0; i < avances.Count; i++)
                                {
                                    var renglon = i + 2;

                                    excelDetalles.Cells[renglon, 33].Formula = @"COUNTIF(H" + renglon + ":AF" + renglon + ", \"NO APLICA\")";
                                    excelDetalles.Cells[renglon, 34].Formula = @"COUNTIF(H" + renglon + ":AF" + renglon + ", \"CARGADA\")";
                                    excelDetalles.Cells[renglon, 35].Formula = @"COUNTIF(H" + renglon + ":AF" + renglon + ", \"SIN CARGAR\")";
                                    excelDetalles.Cells[renglon, 36].Formula = @"SUM(AH" + renglon + ", AI" + renglon + ")";
                                    excelDetalles.Cells[renglon, 37].Formula = @"(AH" + renglon + " * 100) / AJ" + renglon;
                                }

                                ExcelRange range = excelDetalles.Cells[1, 1, excelDetalles.Dimension.End.Row, excelDetalles.Dimension.End.Column];
                                ExcelTable table = excelDetalles.Tables.Add(range, "Tabla");
                                table.TableStyle = TableStyles.Medium17;
                                excelDetalles.Cells[excelDetalles.Dimension.Address].AutoFitColumns();

                                var bytes = new MemoryStream();
                                using (var stream = new MemoryStream())
                                {
                                    excel.SaveAs(stream);
                                    bytes = stream;
                                }

                                resultado.Add(SUCCESS, true);
                                resultado.Add(ITEMS, bytes);
                            }
                            #endregion
                        }
                        break;
                }
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);
            }

            return resultado;
        }
        #endregion

        #region ALTA EMPLEADO (REGION TEMPORAL)
        public Dictionary<string, object> CargarRequisiciones()
        {
            resultado = new Dictionary<string, object>();

            try
            {
                //                List<RequisicionRHDTO> requisiciones = _contextEnkontrol.Select<RequisicionRHDTO>((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? EnkontrolAmbienteEnum.RhCplan : EnkontrolAmbienteEnum.RhArre, new OdbcConsultaDTO
                //                {
                //                    consulta = @"
                //                        SELECT
                //                            req.id, req.cc, req.puesto, req.jefe_inmediato, req.tipo_contrato, req.id_plantilla, (c.cc + '-' + c.descripcion) AS ccDesc, p.descripcion AS puestoDesc, cont.descripcion AS tipo_contratoDesc, (emp.nombre + ' ' + emp.ape_paterno + ' ' + emp.ape_materno) AS jefe_inmediatoDesc,
                //                            req.cantidad_solicitada AS solicitados, (req.cantidad_solicitada - (req.altas - req.bajas)) AS faltantes
                //                        FROM sn_requisicion_personal req
                //                            LEFT JOIN cc c ON req.cc = c.cc
                //                            LEFT JOIN si_puestos p ON req.puesto = p.puesto
                //                            LEFT JOIN sn_requisicion_tipo_contrato cont ON req.tipo_contrato = cont.id
                //                            LEFT JOIN sn_empleados emp ON req.jefe_inmediato = emp.clave_empleado
                //                        WHERE
                //                            req.estatus = 'A' AND
                //                            req.cantidad_solicitada > (req.altas - req.bajas) AND
                //                            req.fecha_vigencia >= ?",
                //                    parametros = new List<OdbcParameterDTO>
                //                    {
                //                        new OdbcParameterDTO { nombre = "fecha_vigencia", tipo = OdbcType.Date, valor = DateTime.Now.Date }
                //                    }
                //                });

                var fecha = DateTime.Now;
#if DEBUG
                fecha = DateTime.Now.AddMonths(-20);
#endif
                var requisicionesFiltradas = new List<RequisicionRHDTO>();
                var requisiciones = _context.Select<RequisicionRHDTO>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = @"
                        SELECT
                            req.id, req.cc, req.puesto, req.jefe_inmediato, req.tipo_contrato, req.id_plantilla, (c.cc + '-' + c.ccDescripcion) AS ccDesc, p.descripcion AS puestoDesc, cont.descripcion AS tipo_contratoDesc, (emp.nombre + ' ' + emp.ape_paterno + ' ' + emp.ape_materno) AS jefe_inmediatoDesc,
                            req.cantidad_solicitada AS solicitados, (req.cantidad_solicitada - (req.altas - req.bajas)) AS faltantes, req.idTabuladorDet,
			                tabCat.id AS idCategoria,
			                tabCat.concepto descCategoria
                        FROM tblRH_REC_Requisicion req
                            LEFT JOIN tblC_Nom_CatalogoCC c ON req.cc = c.cc
                            LEFT JOIN tblRH_EK_Puestos p ON req.puesto = p.puesto
                            LEFT JOIN tblRH_EK_Requisicion_Tipo_Contrato cont ON req.tipo_contrato = cont.id
                            LEFT JOIN tblRH_EK_Empleados emp ON req.jefe_inmediato = emp.clave_empleado
							LEFT JOIN tblRH_TAB_TabuladoresDet tabDet ON req.idTabuladorDet = tabDet.id
							LEFT JOIN tblRH_TAB_CatCategorias tabCat ON tabDet.FK_Categoria = tabCat.id
                        WHERE
                            req.estatus = 'A' AND
                            req.cantidad_solicitada > (req.altas - req.bajas) AND
                            req.fecha_vigencia >= @paramFechaVigencia",
                    parametros = new { paramFechaVigencia = fecha.Date }
                }).ToList();

                List<tblRH_REC_PuestoSindicato> listaPuestosSindicalizados = _context.tblRH_REC_PuestoSindicato.ToList();

                var lstIdReqs = requisiciones.Select(e => e.id).ToList();

                var empleadosRequi = _context.tblRH_EK_Empleados.Where(e => e.esActivo && (e.estatus_empleado == "A" || e.estatus_empleado == "P") && e.requisicion.HasValue && lstIdReqs.Contains(e.requisicion.Value)).Select(e => e.requisicion).ToList();

                requisiciones.RemoveAll(e => empleadosRequi.Contains(e.id));

                foreach (var req in requisiciones)
                {
                    tblRH_REC_PuestoSindicato puestoSindicalizado = listaPuestosSindicalizados.FirstOrDefault(x => x.puesto == req.puesto);

                    if (puestoSindicalizado != null)
                        req.puesto_sindicalizado = puestoSindicalizado.sindicalizado == "S";
                }

                resultado.Add("data", requisiciones);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(0, 0, NombreControlador, "ReingresarEmpleado", e, AccionEnum.CONSULTA, 0, null);

                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }

            return resultado;
        }

        public Dictionary<string, object> CargarTabulador(string cc, int puesto, int? idTabuladorDet)
        {
            resultado.Clear();

            try
            {
#if DEBUG
                var fecha = new DateTime(2021, 1, 1);
#else
                var fecha = new DateTime(DateTime.Now.Year, 1, 1);
#endif

                //                var query_tabulador = new OdbcConsultaDTO();
                //                query_tabulador.consulta = string.Format(
                //                    @"SELECT
                //                        p.tipo_nomina,
                //                        tab.id AS tabuladorId,
                //                        GETDATE() AS fecha_real,
                //                        tabP.salario_base,
                //                        tabP.complemento,
                //                        tabP.bono_de_zona,
                //                        (tabP.salario_base + tabP.complemento + tabP.bono_de_zona) AS total
                //                    FROM
                //                        sn_tabulador_puesto AS tabP
                //                    INNER JOIN
                //                        sn_tabuladores AS tab ON tab.id = tabP.tabulador
                //                    INNER JOIN
                //                        si_puestos AS p ON p.puesto = tabP.puesto
                //                    WHERE
                //                        tab.cc = ? AND
                //                        p.puesto = ? AND
                //                        tab.fecha >= {0}", fecha.ToString("yyyyMMdd"));
                //                query_tabulador.parametros.Add(new OdbcParameterDTO
                //                {
                //                    nombre = "cc",
                //                    tipo = OdbcType.NVarChar,
                //                    valor = cc
                //                });
                //                query_tabulador.parametros.Add(new OdbcParameterDTO
                //                {
                //                    nombre = "puesto",
                //                    tipo = OdbcType.Int,
                //                    valor = puesto
                //                });
                //                var tabulador = _contextEnkontrol.Select<TabuladorEmpleadoDTO>(vSesiones.sesionAmbienteEnkontrolRh, query_tabulador).FirstOrDefault();

                #region V1
                //                    tabulador = _context.Select<TabuladorEmpleadoDTO>(new DapperDTO
                //                    {
                //                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                //                        consulta = string.Format(
                //                                    @"SELECT
                //                                    p.tipo_nomina,
                //                                    tab.id AS tabuladorId,
                //                                    tabP.salario_base,
                //                                    tabP.complemento,
                //                                    tabP.bono_de_zona,
                //                                    (tabP.salario_base + tabP.complemento + tabP.bono_de_zona) AS total
                //                                FROM
                //                                    tblRH_EK_Tabulador_Puesto AS tabP
                //                                INNER JOIN
                //                                    tblRH_EK_Tabuladores AS tab ON tab.id = tabP.tabulador
                //                                INNER JOIN
                //                                    tblRH_EK_Puestos AS p ON p.puesto = tabP.puesto
                //                                WHERE
                //                                    tab.cc = @paramTab AND
                //                                    p.puesto = @paramPuesto"),
                //                        parametros = new { paramTab = cc, paramPuesto = puesto }
                //                    }).FirstOrDefault();

                #endregion

                var tabulador = _context.Select<TabuladorEmpleadoDTO>(new DapperDTO
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = string.Format(
                                    @"SELECT
                                        tabP.FK_TipoNomina AS tipo_nomina,
                                        tabDet.id AS tabuladorId,
                                        tabDet.sueldoBase as salario_base,
                                        tabDet.complemento,
                                        0 as bono_de_zona,
                                        (tabDet.sueldoBase + tabDet.complemento) AS total
                                    FROM
	                                    tblRH_TAB_TabuladoresDet AS tabDet
                                    INNER JOIN
                                        tblRH_TAB_Tabuladores AS tab ON tab.id = tabDet.FK_Tabulador
                                    INNER JOIN
                                        tblRH_EK_Puestos AS tabP ON tabP.puesto = tab.FK_Puesto
	                                WHERE tabDet.id = @idTabuldaorDet"),
                        parametros = new { idTabuldaorDet = idTabuladorDet ?? 0 }
                    }).FirstOrDefault();
                

                if (tabulador != null)
                {
                    tabulador.fecha_real = DateTime.Now;
                    tabulador.esNuevoTabulador = true;
                }

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, tabulador);
            }
            catch (Exception ex)
            {
                LogError(0, 0, NombreControlador, "CargarTabulador", ex, AccionEnum.CONSULTA, 0, null);

                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex);
            }

            return resultado;
        }

        public Dictionary<string, object> CargarAutoriza(int autoriza)
        {
            try
            {
                //var autorizaEK = _contextEnkontrol.Select<dynamic>((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? EnkontrolAmbienteEnum.RhCplan : EnkontrolAmbienteEnum.RhArre, new OdbcConsultaDTO
                //{
                //    consulta = @"SELECT clave_empleado, (nombre + ' ' + ape_paterno + ' ' + ape_materno) AS nombre FROM sn_empleados WHERE clave_empleado = " + autoriza
                //});

                var u = new tblP_Usuario();
                var usuario = _context.tblP_Usuario_Enkontrol.FirstOrDefault(x => x.sn_empleado == autoriza);
                if (usuario != null)
                {
                    u = _context.tblP_Usuario.FirstOrDefault(x => x.id == usuario.idUsuario);
                }

                resultado.Add("data", u.nombre + " " + u.apellidoPaterno + " " + u.apellidoMaterno);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(16, 0, "ReclutamientosController", "CargarAutoriza", e, AccionEnum.CONSULTA, 0, new { autoriza = autoriza });
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }

            return resultado;
        }

        public Dictionary<string, object> CargarUsuarioResg(int usuarioResg)
        {
            try
            {
                //var usuarioResgEK = _contextEnkontrol.Select<dynamic>((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? EnkontrolAmbienteEnum.RhCplan : EnkontrolAmbienteEnum.RhArre, new OdbcConsultaDTO
                //{
                //    consulta = @"SELECT empleado, descripcion AS nombre FROM empleados WHERE empleado = " + usuarioResg
                //});
                var usuarioResgEK = _context.tblP_Usuario.Where(x => x.id == vSesiones.sesionUsuarioDTO.id).ToList();

                resultado.Add("data", (string)usuarioResgEK[0].nombre);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(16, 0, "ReclutamientosController", "CargarUsuarioResg", e, AccionEnum.CONSULTA, 0, new { usuarioResg = usuarioResg });
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }

            return resultado;
        }

        public Dictionary<string, object> CargarDepto(int depto)
        {
            try
            {
                //var deptoEK = _contextEnkontrol.Select<dynamic>((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? EnkontrolAmbienteEnum.RhCplan : EnkontrolAmbienteEnum.RhArre, new OdbcConsultaDTO
                //{
                //    consulta = @"SELECT clave_depto, desc_depto AS descripcion FROM sn_departamentos WHERE clave_depto = " + depto
                //});
                var deptoEK = _context.Select<dynamic>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = @"SELECT clave_depto, desc_depto AS descripcion FROM tblRH_EK_Departamentos WHERE clave_depto = @paramDepto",
                    parametros = new { paramDepto = depto }
                }).ToList();


                resultado.Add("data", (string)deptoEK[0].descripcion);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(16, 0, "ReclutamientosController", "CargarDepto", e, AccionEnum.CONSULTA, 0, new { depto = depto });
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }

            return resultado;
        }

        public Tuple<Stream, string> DescargarArchivoEmpleado(int id)
        {
            var archivo = _context.tblRH_REC_Archivos.First(x => x.id == id);

#if DEBUG
            var fileStream = GlobalUtils.GetFileAsStream(@"C:\Proyecto\SIGOPLAN\RECLUTAMIENTOS\Doge - dreams.jpg");
#else
            var fileStream = GlobalUtils.GetFileAsStream(archivo.ubicacionArchivo);
#endif
            string name = Path.GetFileName(archivo.nombreArchivo);

            return Tuple.Create(fileStream, name);
        }
        #endregion

        #region REQUISICION
        public Dictionary<string, object> GetCCs()
        {
            resultado.Clear();

            try
            {
                var ccs = new List<ComboBoxDTO>();

                if (vSesiones.sesionUsuarioDTO.idPerfil == (int)PerfilUsuarioEnum.ADMINISTRADOR)
                {
                    //ccs = _ccFS.GetCCs().Select(x => new ComboBoxDTO
                    //{
                    //    valor = x.cc,
                    //    texto = "[" + x.cc + "] " + x.descripcion.Trim()
                    //}).OrderBy(x => x.valor).ToList();

                    ccs = _ccFS_SP.GetCCsNomina(null).Select(x => new ComboBoxDTO
                    {
                        valor = x.cc,
                        texto = "[" + x.cc + "] " + x.descripcion.Trim()
                    }).OrderBy(x => x.valor).ToList();

                }
                if (vSesiones.sesionUsuarioDTO.idPerfil == (int)PerfilUsuarioEnum.USUARIO)
                {
                    var usuarioCCs = _context.tblRH_BN_Usuario_CC.Where(x => x.usuarioID == vSesiones.sesionUsuarioDTO.id).Select(x => x.cc).ToList();
                    if (usuarioCCs.Count > 0)
                    {
                        if (usuarioCCs.Any(x => x == "*"))
                        {
                            //ccs = _ccFS.GetCCs().Select(x => new ComboBoxDTO
                            //{
                            //    valor = x.cc,
                            //    texto = "[" + x.cc + "] " + x.descripcion.Trim()
                            //}).OrderBy(x => x.valor).ToList();

                            ccs = _ccFS_SP.GetCCsNomina(null).Select(x => new ComboBoxDTO
                            {
                                valor = x.cc,
                                texto = "[" + x.cc + "] " + x.descripcion.Trim()
                            }).OrderBy(x => x.valor).ToList();
                        }
                        else
                        {
                            //ccs = _ccFS.GetCCs(usuarioCCs).Select(x => new ComboBoxDTO
                            //{
                            //    valor = x.cc,
                            //    texto = "[" + x.cc + "] " + x.descripcion.Trim()
                            //}).OrderBy(x => x.valor).ToList();

                            ccs = _ccFS_SP.GetCCsNominaFiltrados(usuarioCCs).Select(x => new ComboBoxDTO
                            {
                                valor = x.cc,
                                texto = "[" + x.cc + "] " + x.descripcion.Trim()
                            }).OrderBy(x => x.valor).ToList();
                        }
                    }
                }

                if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Arrendadora)
                {
                    ccs = ccs.Where(e => Regex.IsMatch(e.valor.ToString(), @"^\d+$")).ToList();
                }

                ccs.RemoveAll(x => x.valor.ToString() == "0");

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, ccs);
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);
            }

            //
            //            using (var transaccion = _context.Database.BeginTransaction())
            //            {
            //                try
            //                {
            //                    var fechaInicio = new DateTime(2022, 3, 1, 0, 0, 0);
            //                    var fechaFin = new DateTime(2022, 3, 31, 23, 59, 59);

            //                    var pmsExcel = _context.Select<PMExcelDTO>(new DapperDTO
            //                    {
            //                        baseDatos = MainContextEnum.Arrendadora,
            //                        consulta = @"SELECT
            //                                *
            //                            FROM
            //                                tblM_PMExcel
            //                            ORDER BY
            //                                fechaProgramado,
            //                                economico"
            //                    });

            //                    foreach (var pmExcel in pmsExcel.GroupBy(x => x.economico).OrderBy(x => x.First().fechaProgramado))
            //                    {
            //                        var noEconomico = pmExcel.First().economico;

            //                        var pms = _context.tblM_MatenimientoPm
            //                            .Where(x =>
            //                                x.economicoID == noEconomico &&
            //                                x.fechaPM >= fechaInicio &&
            //                                x.fechaPM <= fechaFin)
            //                            .OrderBy(x => x.fechaPM).ToList();

            //                        var cantidad = pmExcel.Count();

            //                        if (cantidad == pms.Count)
            //                        {
            //                            var contador = 0;
            //                            foreach (var economicoExcel in pmExcel)
            //                            {
            //                                pms[contador].horometroPM = economicoExcel.horometroEjecutado;
            //                                pms[contador].horometroProy = economicoExcel.horometroProgramado;
            //                                pms[contador].fechaPM = economicoExcel.fechaEjecutado;
            //                                pms[contador].fechaProy = economicoExcel.fechaProgramado;

            //                                if (economicoExcel == pmExcel.Last())
            //                                {
            //                                    pms[contador].estatus = true;
            //                                }
            //                                else
            //                                {
            //                                    pms[contador].estatus = false;
            //                                }

            //                                contador++;
            //                            }

            //                            _context.SaveChanges();
            //                        }
            //                        else if (cantidad < pms.Count)
            //                        {
            //                            var contador = 0;
            //                            foreach (var economicoExcel in pmExcel)
            //                            {
            //                                pms[contador].horometroPM = economicoExcel.horometroEjecutado;
            //                                pms[contador].horometroProy = economicoExcel.horometroProgramado;
            //                                pms[contador].fechaPM = economicoExcel.fechaEjecutado;
            //                                pms[contador].fechaProy = economicoExcel.fechaProgramado;

            //                                if (economicoExcel == pmExcel.Last())
            //                                {
            //                                    pms[contador].estatus = true;
            //                                }
            //                                else
            //                                {
            //                                    pms[contador].estatus = false;
            //                                }

            //                                contador++;
            //                            }

            //                            var aEliminar = new List<tblM_MatenimientoPm>();
            //                            for (int i = contador; i < pms.Count; i++)
            //                            {
            //                                aEliminar.Add(pms[i]);
            //                            }

            //                            _context.tblM_MatenimientoPm.RemoveRange(aEliminar);
            //                            _context.SaveChanges();
            //                        }
            //                        else
            //                        {
            //                            var contador = 0;
            //                            var ultimoContador = 0;
            //                            foreach (var economicoExcel in pmExcel)
            //                            {
            //                                if (contador < pms.Count)
            //                                {
            //                                    pms[contador].horometroPM = economicoExcel.horometroEjecutado;
            //                                    pms[contador].horometroProy = economicoExcel.horometroProgramado;
            //                                    pms[contador].fechaPM = economicoExcel.fechaEjecutado;
            //                                    pms[contador].fechaProy = economicoExcel.fechaProgramado;
            //                                    pms[contador].estatus = false;
            //                                    ultimoContador = contador;
            //                                }
            //                                else if (pms.Count > 0)
            //                                {
            //                                    var nuevoPm = new tblM_MatenimientoPm();
            //                                    nuevoPm.economicoID = economicoExcel.economico;
            //                                    nuevoPm.horometroUltCapturado = pms[ultimoContador].horometroUltCapturado;
            //                                    nuevoPm.fechaUltCapturado = pms[ultimoContador].fechaUltCapturado;
            //                                    switch (economicoExcel.servicioProgramado)
            //                                    {
            //                                        case "PM1":
            //                                            nuevoPm.tipoPM = 1;
            //                                            break;
            //                                        case "PM2":
            //                                            nuevoPm.tipoPM = 2;
            //                                            break;
            //                                        case "PM3":
            //                                            nuevoPm.tipoPM = 3;
            //                                            break;
            //                                        case "PM4":
            //                                            nuevoPm.tipoPM = 4;
            //                                            break;
            //                                    }
            //                                    nuevoPm.fechaPM = economicoExcel.fechaEjecutado;
            //                                    nuevoPm.horometroPM = economicoExcel.horometroEjecutado;
            //                                    nuevoPm.personalRealizo = pms[ultimoContador].personalRealizo;
            //                                    nuevoPm.observaciones = "";
            //                                    nuevoPm.horometroProy = economicoExcel.horometroProgramado;
            //                                    nuevoPm.fechaProy = economicoExcel.fechaProgramado;
            //                                    nuevoPm.tipoMantenimientoProy = (nuevoPm.tipoPM + 1) > 8 ? 1 : (nuevoPm.tipoPM + 1);
            //                                    nuevoPm.actual = true;
            //                                    nuevoPm.fechaProyFin = economicoExcel.fechaProgramado;
            //                                    nuevoPm.fechaCaptura = nuevoPm.fechaUltCapturado;
            //                                    nuevoPm.idMaquina = _context.tblM_CatMaquina.FirstOrDefault(x => x.noEconomico == economicoExcel.economico).id;
            //                                    nuevoPm.planeador = pms[ultimoContador].planeador;
            //                                    nuevoPm.UsuarioCap = pms[ultimoContador].UsuarioCap;
            //                                    nuevoPm.horometroPMEjecutado = nuevoPm.horometroPM;

            //                                    if (economicoExcel == pmExcel.Last())
            //                                    {
            //                                        nuevoPm.estatus = true;
            //                                        nuevoPm.estadoMantenimiento = 1;
            //                                    }
            //                                    else
            //                                    {
            //                                        nuevoPm.estatus = false;
            //                                        nuevoPm.estadoMantenimiento = 3;
            //                                    }

            //                                    _context.tblM_MatenimientoPm.Add(nuevoPm);
            //                                    _context.SaveChanges();
            //                                }
            //                                else
            //                                {
            //                                    var nuevoPm = new tblM_MatenimientoPm();
            //                                    nuevoPm.economicoID = economicoExcel.economico;
            //                                    nuevoPm.horometroUltCapturado = economicoExcel.horometroEjecutado;
            //                                    nuevoPm.fechaUltCapturado = economicoExcel.fechaEjecutado;
            //                                    switch (economicoExcel.servicioProgramado)
            //                                    {
            //                                        case "PM1":
            //                                            nuevoPm.tipoPM = 1;
            //                                            break;
            //                                        case "PM2":
            //                                            nuevoPm.tipoPM = 2;
            //                                            break;
            //                                        case "PM3":
            //                                            nuevoPm.tipoPM = 3;
            //                                            break;
            //                                        case "PM4":
            //                                            nuevoPm.tipoPM = 4;
            //                                            break;
            //                                    }
            //                                    nuevoPm.fechaPM = economicoExcel.fechaEjecutado;
            //                                    nuevoPm.horometroPM = economicoExcel.horometroEjecutado;
            //                                    nuevoPm.personalRealizo = 850;
            //                                    nuevoPm.observaciones = "";
            //                                    nuevoPm.horometroProy = economicoExcel.horometroProgramado;
            //                                    nuevoPm.fechaProy = economicoExcel.fechaProgramado;
            //                                    nuevoPm.tipoMantenimientoProy = (nuevoPm.tipoPM + 1) > 8 ? 1 : (nuevoPm.tipoPM + 1);
            //                                    nuevoPm.actual = true;
            //                                    nuevoPm.fechaProyFin = economicoExcel.fechaProgramado;
            //                                    nuevoPm.fechaCaptura = nuevoPm.fechaUltCapturado;
            //                                    nuevoPm.idMaquina = _context.tblM_CatMaquina.FirstOrDefault(x => x.noEconomico == economicoExcel.economico).id;
            //                                    nuevoPm.planeador = 20086;
            //                                    nuevoPm.UsuarioCap = 3305;
            //                                    nuevoPm.horometroPMEjecutado = nuevoPm.horometroPM;

            //                                    if (economicoExcel == pmExcel.Last())
            //                                    {
            //                                        nuevoPm.estatus = true;
            //                                        nuevoPm.estadoMantenimiento = 1;
            //                                    }
            //                                    else
            //                                    {
            //                                        nuevoPm.estatus = false;
            //                                        nuevoPm.estadoMantenimiento = 3;
            //                                    }

            //                                    _context.tblM_MatenimientoPm.Add(nuevoPm);
            //                                    _context.SaveChanges();
            //                                }

            //                                contador++;
            //                            }
            //                        }
            //                    }

            //                    transaccion.Commit();
            //                }
            //                catch (Exception ex)
            //                {
            //                    transaccion.Rollback();
            //                }
            //            }
            //            //

            return resultado;
        }

        public Dictionary<string, object> GetRequisiciones(List<string> ccs, string estatus)
        {
            resultado.Clear();
            try
            {
                if (((ccs.Count == 1 && ccs.Contains("")) || ccs == null || ccs.Count == 0) && estatus != "P")
                    throw new Exception("Para consultar todos los centros de costo debe seleccionar el filtro de estatus \"PENDIENTE\".");

                List<GetRequisicionesDTO> requisiciones = _context.tblRH_REC_Requisicion
                    .Where(x => (ccs.Count == 1 && ccs.Contains("") ? true : ccs.Contains(x.cc)) && (!string.IsNullOrEmpty(estatus) ? x.estatus == estatus : true))
                    .Select(x => new GetRequisicionesDTO
                    {
                        id = x.id,
                        idSigoplan = x.idSigoplan,
                        cc = x.cc,
                        puestoDescripcion = x.virtualPuesto.descripcion,
                        categoriaDescripcion = x.tabuladorDet != null ? x.tabuladorDet.categoria.concepto : "",
                        cantidad_solicitada = x.cantidad_solicitada,
                        razon_solicitud = x.razon_solicitud,
                        fecha_contratacion = x.fecha_contratacion.Value,
                        tipo_contrato = x.tipo_contrato,
                        estatus = x.estatus,
                        autoriza = x.autoriza,
                        jefe_inmediato = x.jefe_inmediato,
                        solicitante = x.solicitante,
                        puedeEliminar = (vSesiones.sesionUsuarioDTO.id == 1019 || vSesiones.sesionUsuarioDTO.id == 1041 || vSesiones.sesionUsuarioDTO.id == 3381), //Usuarios de Diana Alvarez y Manuel Cruz pueden eliminar. Maricela
                    }).OrderByDescending(x => x.id).ToList();

                var lstJefesClaves = requisiciones.Select(e => e.jefe_inmediato);
                var lstSolicitaClaves = requisiciones.Select(e => e.autoriza);
                var lstAutorizaClaves = requisiciones.Select(e => e.solicitante);

                var lstEmpleado = _context.tblRH_EK_Empleados.Where(e => lstJefesClaves.Contains(e.clave_empleado) || lstSolicitaClaves.Contains(e.clave_empleado) || lstAutorizaClaves.Contains(e.clave_empleado)).ToList();

                if (requisiciones.Count > 0)
                {
                    var ccEnRequisiciones = requisiciones.Select(x => x.cc).Distinct().ToList();

                    //var infoDeLosCCs = _ccFS.GetCCs(ccEnRequisiciones);
                    var infoDeLosCCs = _ccFS_SP.GetCCsNominaFiltrados(ccEnRequisiciones);

                    var clave_empleado = 0;
                    if (!string.IsNullOrEmpty(vSesiones.sesionUsuarioDTO.cveEmpleado))
                    {
                        clave_empleado = Convert.ToInt32(vSesiones.sesionUsuarioDTO.cveEmpleado);
                    }

                    foreach (var item in requisiciones)
                    {
                        var objUsr = lstEmpleado.FirstOrDefault(e => e.clave_empleado == item.jefe_inmediato);
                        if (objUsr != null)
                            item.nombreJefeInmediato = objUsr.ape_paterno + " " + objUsr.ape_materno + " " + objUsr.nombre;

                        var objUsrSol = lstEmpleado.FirstOrDefault(e => e.clave_empleado == item.solicitante);
                        if (objUsrSol != null)
                            item.nombreSolicita = objUsrSol.ape_paterno + " " + objUsrSol.ape_materno + " " + objUsrSol.nombre;

                        var objUsrAutoriza = lstEmpleado.FirstOrDefault(e => e.clave_empleado == item.autoriza);
                        if (objUsrAutoriza != null)
                            item.nombreAutoriza = objUsrAutoriza.ape_paterno + " " + objUsrAutoriza.ape_materno + " " + objUsrAutoriza.nombre;

                        var ccDescripcion = infoDeLosCCs.FirstOrDefault(x => x.cc == item.cc);
                        item.ccDescripcion = ccDescripcion != null ? ccDescripcion.descripcion : "";
                        item.esAutorizante = item.autoriza == clave_empleado || clave_empleado == 17803 || clave_empleado == 21852 || clave_empleado == 113 || clave_empleado == 71 || clave_empleado == 28691;
                    }
                }

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, requisiciones);
            }
            catch (Exception ex)
            {
                LogError(0, 0, NombreControlador, "GetRequisiciones", ex, AccionEnum.CONSULTA, 0, new { ccs = ccs, estatus = estatus });
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);
            }

            return resultado;
        }

        public Dictionary<string, object> GetIdRequisicionDisponible()
        {
            resultado.Clear();

            try
            {
                var requisicionDisponible = _context.tblRH_REC_Requisicion.OrderByDescending(x => x.idSigoplan).FirstOrDefault();
                var numRequiDisponible = (requisicionDisponible != null ? requisicionDisponible.id : 0) + 1;

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, numRequiDisponible);
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);
            }

            return resultado;
        }

        public Dictionary<string, object> GetPlantilla(string cc, int? puesto)
        {
            resultado.Clear();

            try
            {
                if (!string.IsNullOrEmpty(cc))
                {
                    //GET USUARIOS ADMINISTRADORES
                    var objUsuarioAdmn = _context.tblRH_REC_Requisicion_UsuariosAdmn.FirstOrDefault(e => e.registroActivo && e.idUsuario == vSesiones.sesionUsuarioDTO.id);

                    if (vSesiones.sesionUsuarioDTO.idPerfil == (int)PerfilUsuarioEnum.ADMINISTRADOR ||
                        _context.tblRH_BN_Usuario_CC.Any(x => x.usuarioID == vSesiones.sesionUsuarioDTO.id && (cc == x.cc || x.cc == "*")))
                    {
                        var puestos = _context.tblRH_EK_Puestos.Where(e => e.registroActivo).ToList();
                        var lstIdPuestos = puestos.Select(e => e.puesto).ToList();

                        var empleados = _context.tblRH_EK_Empleados
                            .Where(x =>
                                x.cc_contable == cc &&
                                x.estatus_empleado == "A" &&
                                x.puesto.HasValue &&
                                lstIdPuestos.Contains(x.puesto.Value))
                            .Select(x => new sn_empleadosDTO
                            {
                                clave_empleado = x.clave_empleado,
                                puesto = x.puesto.Value
                            }).ToList();

                        //var plantilla = _context.tblRH_EK_Plantilla_Puesto
                        //    .Where(x =>
                        //        x.estatus == "A" &&
                        //        x.virtualPlantilla.cc == cc &&
                        //        x.virtualPlantilla.estatus == "A" /*&&
                        //        x.virtualPlantilla.fecha_fin >= DateTime.Now*/)
                        //    .Select(x => new
                        //    {
                        //        id_plantilla = x.virtualPlantilla.id_plantilla,
                        //        puesto = x.puesto,
                        //        cantidad = x.cantidad,
                        //        altas = x.altas,
                        //        puestoDescripcion = x.virtualPuesto.descripcion
                        //    }).ToList();

                        var plantillaPersonal = _context.tblRH_TAB_PlantillasPersonal.FirstOrDefault(e => e.registroActivo && e.plantillaAutorizada == EstatusGestionAutorizacionEnum.AUTORIZADO && e.cc == cc);

                        var plantilla = _context.tblRH_TAB_PlantillasPersonalDet
                            .Where(x =>
                                x.registroActivo &&
                                x.FK_Plantilla == plantillaPersonal.id &&
                                x.puesto.registroActivo &&
                                !x.puesto.descripcion.Contains("no usar")).ToList()
                            .Select(x => new
                            {
                                id_plantilla = plantillaPersonal.id,
                                puesto = x.FK_Puesto,
                                cantidad = x.personalNecesario,
                                altas = empleados.Where(e => e.puesto == x.FK_Puesto).Count(),
                                puestoDescripcion = x.puesto.descripcion
                            }).ToList();

                        if (plantilla.Count > 0)
                        {
                            //var id_plantilla = _context.tblRH_EK_Plantilla_Personal.First(e => e.esActivo && e.estatus == "A" && e.cc == cc).id_plantilla;

                            var aditivas = _context.tblRH_EK_Plantilla_Aditiva
                                .Where(x =>
                                    x.estatus == "A" &&
                                    x.cc == plantillaPersonal.cc)
                                .GroupBy(x => x.puesto).ToList()
                                .Select(x => new
                                {
                                    puesto = x.First().puesto,
                                    cantidad = x.Sum(y => y.cantidad)
                                }).ToList();

                            //var infoCC = _ccFS.GetCC(cc);
                            var infoCC = _ccFS_SP.GetCCNomina(cc);
                            var puestosPlantilla = new List<PlantillaDTO>();
                            foreach (var item in plantilla)
                            {
                                var solicitados = (int)item.cantidad;
                                var aditivasPuesto = aditivas.FirstOrDefault(x => x.puesto == item.puesto);
                                if (aditivasPuesto != null)
                                {
                                    solicitados += (int)aditivasPuesto.cantidad;
                                }

                                var puestoPlantilla = new PlantillaDTO();
                                puestoPlantilla.id_plantilla = (int)item.id_plantilla;
                                puestoPlantilla.cc = cc;
                                puestoPlantilla.ccDescripcion = infoCC.descripcion.Trim();
                                puestoPlantilla.puesto = (int)item.puesto;
                                puestoPlantilla.puestoDescripcion = item.puestoDescripcion;
                                puestoPlantilla.solicitados = (int)solicitados;
                                puestoPlantilla.faltantes = solicitados - empleados.Where(x => x.puesto == item.puesto).Count();

                                if (objUsuarioAdmn != null || vSesiones.sesionUsuarioDTO.idPerfil == 1)
                                {
                                    if (puestoPlantilla.faltantes >= 0)
                                    {
                                        puestosPlantilla.Add(puestoPlantilla);
                                    }
                                }
                                else
                                {
                                    if (puestoPlantilla.faltantes > 0)
                                    {
                                        puestosPlantilla.Add(puestoPlantilla);
                                    }
                                }
                            }

                            if (puesto != null)
                            {
                                puestosPlantilla = puestosPlantilla.Where(e => e.puesto == puesto).ToList();
                            }

                            resultado.Add(SUCCESS, true);
                            resultado.Add(ITEMS, puestosPlantilla.OrderBy(x => x.puestoDescripcion));
                        }
                        else
                        {
                            resultado.Add(SUCCESS, false);
                            resultado.Add(MESSAGE, "No se encontró información de la plantilla");
                        }
                    }
                    else
                    {
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "No cuenta con permisos para este CC");
                    }
                }
                else
                {
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, "Debe seleccionar un CC");
                }
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);
            }

            return resultado;
        }

        public Dictionary<string, object> GetTipoContrato()
        {
            resultado.Clear();

            try
            {
                var tiposContrato = _context.tblRH_EK_Requisicion_Tipo_Contrato.Where(x => x.esActivo).ToList()
                    .Select(x => new ComboBoxDTO
                    {
                        valor = x.id,
                        texto = x.descripcion
                    }).ToList();

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, tiposContrato);
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);
            }

            return resultado;
        }

        public Dictionary<string, object> GetRazonSolicitud()
        {
            resultado.Clear();

            try
            {
                var razonSolicitud = _context.tblRH_EK_Requisicion_Razon.Where(x => x.esActivo).ToList()
                    .Select(x => new ComboBoxDTO
                    {
                        valor = x.id,
                        texto = x.descripcion
                    }).ToList();

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, razonSolicitud);
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);
            }

            return resultado;
        }

        public Dictionary<string, object> GetJefeInmediato(string cc)
        {
            resultado.Clear();

            try
            {
                var usuarios = new List<ComboBoxDTO>();

                var plantillasRequisiciones = new List<int>();

                tblFA_Paquete paquete = null;

                switch (vSesiones.sesionEmpresaActual)
                {
                    case (int)EmpresaEnum.Construplan:
                    case (int)EmpresaEnum.GCPLAN:
                        //plantillasRequisiciones = new List<int> { 111, 112 };
                        plantillasRequisiciones = new List<int> { 123 };
                        paquete = _context.tblFA_Paquete.Where(x => x.cc.cc == cc).OrderByDescending(x => x.fechaCreacion).FirstOrDefault();
                        break;
                    case (int)EmpresaEnum.Arrendadora:
                        //plantillasRequisiciones = new List<int> { 111, 112 };
                        //plantillasRequisiciones = new List<int> { 123 };
                        //paquete = _context.tblFA_Paquete.Where(x => x.cc.cc == cc).OrderByDescending(x => x.fechaCreacion).FirstOrDefault();
                        //break;

                        plantillasRequisiciones = new List<int> { 123 };
                        if (!string.IsNullOrEmpty(cc))
                        {
                            var ccPaquete = _context.tblC_Nom_CatalogoCC.FirstOrDefault(x => x.cc == cc);
                            paquete = _context.tblFA_Paquete.Where(x => x.ccID == ccPaquete.id).OrderByDescending(x => x.fechaCreacion).FirstOrDefault();
                        }
                        break;
                    case (int)EmpresaEnum.Colombia:
                        //plantillasRequisiciones = new List<int> { 111, 112 };
                        plantillasRequisiciones = new List<int> { 123 };
                        if (!string.IsNullOrEmpty(cc))
                        {
                            var ccPaquete = _context.tblC_Nom_CatalogoCC.FirstOrDefault(x => x.cc == cc);
                            paquete = _context.tblFA_Paquete.Where(x => x.ccID == ccPaquete.id).OrderByDescending(x => x.fechaCreacion).FirstOrDefault();
                        }
                        break;
                    case (int)EmpresaEnum.Peru:
                        //plantillasRequisiciones = new List<int> { 124 };
                        plantillasRequisiciones = new List<int> { 123 };
                        if (!string.IsNullOrEmpty(cc))
                        {
                            var ccPaquete = _context.tblC_Nom_CatalogoCC.FirstOrDefault(x => x.cc == cc);
                            paquete = _context.tblFA_Paquete.Where(x => x.ccID == ccPaquete.id).OrderByDescending(x => x.fechaCreacion).FirstOrDefault();
                        }
                        break;
                }

                if (paquete != null)
                {
                    foreach (var facultamiento in paquete.facultamientos.Where(x => plantillasRequisiciones.Contains(x.plantillaID) && x.aplica))
                    {
                        foreach (var item in facultamiento.empleados.Where(x => x.esActivo && x.aplica))
                        {
                            var usuario = new ComboBoxDTO();
                            usuario.valor = item.claveEmpleado;
                            usuario.texto = item.nombreEmpleado;
                            usuarios.Add(usuario);
                        }
                    }
                }

                var usuariosSinRepetir = new List<ComboBoxDTO>();
                foreach (var item in usuarios.GroupBy(x => x.valor))
                {
                    usuariosSinRepetir.Add(item.First());
                }

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, usuariosSinRepetir);
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);
            }

            return resultado;
        }

        public Dictionary<string, object> GetAutoriza(string cc)
        {
            resultado.Clear();

            try
            {
                var usuarios = new List<ComboBoxDTO>();

                var plantillasRequisiciones = new List<int>();

                tblFA_Paquete paquete = null;

                switch (vSesiones.sesionEmpresaActual)
                {
                    case (int)EmpresaEnum.Construplan:
                    case (int)EmpresaEnum.GCPLAN:
                        //plantillasRequisiciones = new List<int> { 111, 112 };
                        plantillasRequisiciones = new List<int> { 111 };
                        paquete = _context.tblFA_Paquete.Where(x => x.cc.cc == cc).OrderByDescending(x => x.fechaCreacion).FirstOrDefault();
                        break;
                    case (int)EmpresaEnum.Arrendadora:
                        //plantillasRequisiciones = new List<int> { 111, 112 };
                        plantillasRequisiciones = new List<int> { 111 };
                        //paquete = _context.tblFA_Paquete.Where(x => x.cc.cc == cc).OrderByDescending(x => x.fechaCreacion).FirstOrDefault();
                        if (!string.IsNullOrEmpty(cc))
                        {
                            var ccPaquete = _context.tblC_Nom_CatalogoCC.FirstOrDefault(x => x.cc == cc);
                            paquete = _context.tblFA_Paquete.Where(x => x.ccID == ccPaquete.id).OrderByDescending(x => x.fechaCreacion).FirstOrDefault();
                        }
                        break;
                        break;
                    case (int)EmpresaEnum.Colombia:
                        //plantillasRequisiciones = new List<int> { 111, 112 };
                        plantillasRequisiciones = new List<int> { 111 };
                        if (!string.IsNullOrEmpty(cc))
                        {
                            var ccPaquete = _context.tblC_Nom_CatalogoCC.FirstOrDefault(x => x.cc == cc);
                            paquete = _context.tblFA_Paquete.Where(x => x.ccID == ccPaquete.id).OrderByDescending(x => x.fechaCreacion).FirstOrDefault();
                        }
                        break;
                    case (int)EmpresaEnum.Peru:
                        //plantillasRequisiciones = new List<int> { 124 };
                        plantillasRequisiciones = new List<int> { 111 };
                        if (!string.IsNullOrEmpty(cc))
                        {
                            var ccPaquete = _context.tblC_Nom_CatalogoCC.FirstOrDefault(x => x.cc == cc);
                            paquete = _context.tblFA_Paquete.Where(x => x.ccID == ccPaquete.id).OrderByDescending(x => x.fechaCreacion).FirstOrDefault();
                        }
                        break;
                }

                if (paquete != null)
                {
                    foreach (var facultamiento in paquete.facultamientos.Where(x => plantillasRequisiciones.Contains(x.plantillaID) && x.aplica))
                    {
                        foreach (var item in facultamiento.empleados.Where(x => x.esActivo && x.aplica))
                        {
                            var usuario = new ComboBoxDTO();
                            usuario.valor = item.claveEmpleado;
                            usuario.texto = item.nombreEmpleado;
                            usuarios.Add(usuario);
                        }
                    }
                }

                var usuariosSinRepetir = new List<ComboBoxDTO>();
                foreach (var item in usuarios.GroupBy(x => x.valor))
                {
                    usuariosSinRepetir.Add(item.First());
                }

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, usuariosSinRepetir);
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);
            }

            return resultado;
        }

        /*SE SUSTITUYE POR GetJefeInmediato*/
        public List<AutocompleteDTO> GetAutocompleteJefe(string term)
        {
            var empleados = new List<AutocompleteDTO>();

            try
            {
                //                var query_empleados = new OdbcConsultaDTO();
                //                query_empleados.consulta = string.Format(
                //                    @"SELECT TOP 7
                //                        clave_empleado AS id,
                //                        (nombre + ' ' + ape_paterno + ' ' + ape_materno) AS label
                //                    FROM
                //                        sn_empleados
                //                    WHERE
                //                        (nombre + ' ' + ape_paterno + ' ' + ape_materno) like ? AND
                //                        estatus_empleado = 'A'");
                //                query_empleados.parametros.Add(new OdbcParameterDTO
                //                {
                //                    nombre = "nombreCompleto",
                //                    tipo = OdbcType.NVarChar,
                //                    valor = "%" + term.Trim() + "%"
                //                });

                //                empleados = _contextEnkontrol.Select<AutocompleteDTO>(vSesiones.sesionAmbienteEnkontrolRh, query_empleados);

                empleados = _context.Select<AutocompleteDTO>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = @"SELECT TOP 7
                                    clave_empleado AS id,
                                    (nombre + ' ' + ape_paterno + ' ' + ape_materno) AS label
                                FROM
                                    tblRH_EK_Empleados
                                WHERE
                                    (nombre + ' ' + ape_paterno + ' ' + ape_materno) like CONCAT('%',@term,'%') AND
                                    estatus_empleado = 'A'",
                    parametros = new { term }
                });

                return empleados;
            }
            catch (Exception ex)
            {

            }

            return empleados;
        }

        public Dictionary<string, object> GetSolicita()
        {
            resultado.Clear();

            try
            {
                var usuarioSolicita = _context.tblP_Usuario.FirstOrDefault(x => x.id == vSesiones.sesionUsuarioDTO.id);

                if (usuarioSolicita != null)
                {
                    var cveEmpleado = Convert.ToInt32(usuarioSolicita.cveEmpleado);
                    var empleado = _context.tblRH_EK_Empleados
                        .Where(x =>
                            x.clave_empleado == cveEmpleado)
                        .Select(x => new
                        {
                            empleado = x.clave_empleado,
                            descripcion = x.ape_paterno + " " + x.ape_materno + " " + x.nombre
                        }).FirstOrDefault();

                    if (empleado != null)
                    {
                        var comboBox = new List<ComboBoxDTO>()
                        {
                            new ComboBoxDTO { valor = empleado.empleado, texto = empleado.descripcion }
                        };

                        resultado.Add(SUCCESS, true);
                        resultado.Add(ITEMS, comboBox);
                    }
                    else
                    {
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "No se encontro informacion del empleado");
                    }
                }
                else
                {
                    resultado.Add(SUCCESS, true);
                    resultado.Add(MESSAGE, "No se encontro informacion del empleado");
                }
            }
            catch (Exception ex)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, ex.Message);
            }

            return resultado;
        }

        /*SE SUSTITUYE POR GetSolicita*/
        public List<AutocompleteDTO> GetAutocompleteSolicita(string term)
        {
            var empleados = new List<AutocompleteDTO>();

            try
            {
                //                var query_empleados = new OdbcConsultaDTO();
                //                query_empleados.consulta = string.Format(
                //                    @"SELECT TOP 7
                //                        clave_empleado AS id,
                //                        (nombre + ' ' + ape_paterno + ' ' + ape_materno) AS label
                //                    FROM
                //                        sn_empleados
                //                    WHERE
                //                        (nombre + ' ' + ape_paterno + ' ' + ape_materno) like ? AND
                //                        estatus_empleado = 'A'");
                //                query_empleados.parametros.Add(new OdbcParameterDTO
                //                {
                //                    nombre = "nombreCompleto",
                //                    tipo = OdbcType.NVarChar,
                //                    valor = "%" + term.Trim() + "%"
                //                });

                //                empleados = _contextEnkontrol.Select<AutocompleteDTO>(vSesiones.sesionAmbienteEnkontrolRh, query_empleados);

                empleados = _context.Select<AutocompleteDTO>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = @"SELECT TOP 7
                                    clave_empleado AS id,
                                    (nombre + ' ' + ape_paterno + ' ' + ape_materno) AS label
                                FROM
                                    tblRH_EK_Empleados
                                WHERE
                                    (nombre + ' ' + ape_paterno + ' ' + ape_materno) like CONCAT('%',@term,'%') AND
                                    estatus_empleado = 'A'",
                    parametros = new { term }
                });

                return empleados;
            }
            catch (Exception ex)
            {

            }

            return empleados;
        }

        /*SE SUSTITUYE POR GetJefeInmediato*/
        public List<AutocompleteDTO> GetAutocompleteAutoriza(string term, string cc)
        {
            var empleados = new List<AutocompleteDTO>();

            try
            {
                if (!string.IsNullOrEmpty(cc))
                {
                    //                    var query_empleados = new OdbcConsultaDTO();
                    //                    query_empleados.consulta = string.Format(
                    //                        @"SELECT TOP 7
                    //                        emp.clave_empleado AS id,
                    //                        (emp.nombre + ' ' + emp.ape_paterno + ' ' + emp.ape_materno) AS label
                    //                    FROM
                    //                        sn_empleados AS emp
                    //                    INNER JOIN
                    //                        ek010ab AS ek
                    //                        ON
                    //                            ek.empleado_rh = emp.clave_empleado
                    //                    WHERE
                    //                        (emp.nombre + ' ' + emp.ape_paterno + ' ' + emp.ape_materno) like ? AND
                    //                        emp.estatus_empleado = 'A' AND
                    //                        ek.estatus = 'A' AND
                    //                        (
                    //                            (cc_exclusivo IS NULL AND nivelcc in (1, 5)) OR
                    //                            (cc_exclusivo = ? AND nivel in (1, 5))
                    //                        )");
                    //                    query_empleados.parametros.Add(new OdbcParameterDTO
                    //                    {
                    //                        nombre = "nombreCompleto",
                    //                        tipo = OdbcType.NVarChar,
                    //                        valor = "%" + term.Trim() + "%"
                    //                    });
                    //                    query_empleados.parametros.Add(new OdbcParameterDTO
                    //                    {
                    //                        nombre = "cc",
                    //                        tipo = OdbcType.NVarChar,
                    //                        valor = cc
                    //                    });

                    //                    empleados = _contextEnkontrol.Select<AutocompleteDTO>(vSesiones.sesionAmbienteEnkontrolRh, query_empleados);

                    empleados = _context.Select<AutocompleteDTO>(new DapperDTO
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = @"SELECT TOP 7
                                        emp.clave_empleado AS id,
                                        (emp.nombre + ' ' + emp.ape_paterno + ' ' + emp.ape_materno) AS label
                                    FROM
                                        tblRH_EK_Empleados AS emp
                                    INNER JOIN
                                        tblRH_EK_ek010ab AS ek
                                        ON
                                            ek.empleado_rh = emp.clave_empleado
                                    WHERE
                                        (emp.nombre + ' ' + emp.ape_paterno + ' ' + emp.ape_materno) like CONCAT('%',@term,'%') AND
                                        emp.estatus_empleado = 'A' AND
                                        ek.estatus = 'A' AND
                                        (
                                            (cc_exclusivo IS NULL AND nivelcc in (1, 5)) OR
                                            (cc_exclusivo = @cc AND nivel in (1, 5))
                                        )",
                        parametros = new { term, cc }
                    });

                    return empleados;
                }
            }
            catch (Exception ex)
            {

            }

            return empleados;
        }

        public Dictionary<string, object> GuardarRequisicion(sn_requisicion_personal requisicion)
        {
            resultado.Clear();

            using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    var nuevaRequisicion = new tblRH_REC_Requisicion();
                    nuevaRequisicion.id = 0;
                    nuevaRequisicion.cc = requisicion.cc;
                    nuevaRequisicion.puesto = requisicion.puesto;
                    nuevaRequisicion.cantidad_solicitada = requisicion.cantidad_solicitada;
                    nuevaRequisicion.solicitante = requisicion.solicitante;
                    nuevaRequisicion.fecha_solicitante = null;
                    nuevaRequisicion.autoriza = requisicion.autoriza;
                    nuevaRequisicion.fecha_autoriza = null;
                    nuevaRequisicion.visto_bueno = 0;
                    nuevaRequisicion.fecha_visto_bueno = null;
                    nuevaRequisicion.estatus = "P";
                    nuevaRequisicion.sueldo_base = 0;
                    nuevaRequisicion.jefe_inmediato = requisicion.jefe_inmediato;
                    nuevaRequisicion.razon_solicitud = requisicion.razon_solicitud;
                    nuevaRequisicion.sustituye = requisicion.sustituye ?? 0;
                    nuevaRequisicion.fecha_baja = null;
                    nuevaRequisicion.fecha_contratacion = requisicion.fecha_contratacion;
                    nuevaRequisicion.justificacion = null;
                    nuevaRequisicion.tipo_contrato = requisicion.tipo_contrato;
                    nuevaRequisicion.edad = null;
                    nuevaRequisicion.sexo = null;
                    nuevaRequisicion.estado_civil = null;
                    nuevaRequisicion.presentacion = null;
                    nuevaRequisicion.escolaridad = null;
                    nuevaRequisicion.especialidad = null;
                    nuevaRequisicion.experiencia = null;
                    nuevaRequisicion.horario = null;
                    nuevaRequisicion.habilidades = null;
                    nuevaRequisicion.actividades = null;
                    nuevaRequisicion.conocimientos = null;
                    nuevaRequisicion.altas = 0;
                    nuevaRequisicion.bajas = 0;
                    nuevaRequisicion.id_plantilla = requisicion.id_plantilla;
                    nuevaRequisicion.fecha_vigencia = requisicion.fecha_vigencia;
                    nuevaRequisicion.idTabuladorDet = requisicion.idTabuladorDet;
                    nuevaRequisicion.comentarioRechazo = null;
                    nuevaRequisicion.usuarioCreacion_id = vSesiones.sesionUsuarioDTO.id;
                    nuevaRequisicion.fechaCreacion = DateTime.Now;
                    nuevaRequisicion.usuarioModificacion_id = null;
                    nuevaRequisicion.fechaModificacion = null;
                    nuevaRequisicion.registroActivo = true;

                    _context.tblRH_REC_Requisicion.Add(nuevaRequisicion);
                    _context.SaveChanges();
                    nuevaRequisicion.id = nuevaRequisicion.idSigoplan;
                    _context.SaveChanges();

                    #region Mandar correo
                    var autorizaString = requisicion.autoriza.ToString();
                    var usuarioSIGOPLAN = _context.tblP_Usuario.FirstOrDefault(x => x.cveEmpleado == autorizaString);
                    var flagCorreoEnviado = false;

                    if (usuarioSIGOPLAN != null)
                    {
                        if (usuarioSIGOPLAN.correo != null && usuarioSIGOPLAN.correo.Contains("@construplan.com.mx"))
                        {
                            var listaCorreos = new List<string> { usuarioSIGOPLAN.correo, vSesiones.sesionUsuarioDTO.correo };
#if DEBUG
                            listaCorreos = new List<string> { "omar.nunez@construplan.com.mx", "martin.zayas@construplan.com.mx" };
#endif
                            var puesto = _context.tblRH_EK_Puestos.FirstOrDefault(x => x.puesto == nuevaRequisicion.puesto);

                            string descCategoria = "S/N";
                            if (requisicion.idTabuladorDet > 0)
                            {
                                var objTabuladorDet = _context.tblRH_TAB_TabuladoresDet.FirstOrDefault(e => e.id == requisicion.idTabuladorDet);
                                var objCategoria = _context.tblRH_TAB_CatCategorias.FirstOrDefault(e => e.id == objTabuladorDet.FK_Categoria);

                                descCategoria = objCategoria.concepto;
                            }

                            var asunto = string.Format(@"Requisición Pendiente para Autorización [{0}]", requisicion.cc);
                            var mensaje = string.Format(@"Se ha registrado una requisición y está pendiente su autorización.<br/><br/>ID: {3} <br/>Centro de Costo: [{0}] <br/> Puesto: {1} <br/> Categoria: {4} <br/>Usuario que capturo: {2}", requisicion.cc, puesto != null ? puesto.descripcion : "",
                                vSesiones.sesionUsuarioDTO.apellidoMaterno + " " + vSesiones.sesionUsuarioDTO.apellidoMaterno + " " + vSesiones.sesionUsuarioDTO.nombre, nuevaRequisicion.id, descCategoria);

                            if (string.IsNullOrEmpty(asunto))
                                asunto = "EMPTY";

                            if (string.IsNullOrEmpty(mensaje))
                                mensaje = "EMPTY";

                            flagCorreoEnviado = GlobalUtils.sendEmail(string.Format("{0}: {1}", PersonalUtilities.GetNombreEmpresa(), asunto), mensaje, listaCorreos);
                        }
                    }
                    #endregion

                    #region Alerta SIGOPLAN
                    tblP_Alerta objNuevaAlerta = new tblP_Alerta();
                    objNuevaAlerta.userEnviaID = (int)vSesiones.sesionUsuarioDTO.id;
                    objNuevaAlerta.userRecibeID = (int)usuarioSIGOPLAN.id;
#if DEBUG
                    //objNuevaAlerta.userRecibeID = 7939; //USUARIO ID: Omar Nuñez.
                    objNuevaAlerta.userRecibeID = 6571; //USUARIO ID: Martín Zayas.
#endif
                    objNuevaAlerta.tipoAlerta = 2;
                    objNuevaAlerta.sistemaID = 16;
                    objNuevaAlerta.visto = false;
                    objNuevaAlerta.url = "/Administrativo/Reclutamientos/RequisicionEmpleado";
                    objNuevaAlerta.objID = nuevaRequisicion.idSigoplan;
                    objNuevaAlerta.obj = "AutorizacionRequisicion";
                    objNuevaAlerta.msj = "Requisición Pendiente de Autorizar - ID: " + nuevaRequisicion.idSigoplan;
                    objNuevaAlerta.documentoID = 0;
                    objNuevaAlerta.moduloID = 0;
                    _context.tblP_Alerta.Add(objNuevaAlerta);
                    _context.SaveChanges();
                    #endregion

                    dbSigoplanTransaction.Commit();

                    resultado.Add("correoEnviado", flagCorreoEnviado);
                    resultado.Add(SUCCESS, true);
                }
                catch (Exception ex)
                {
                    dbSigoplanTransaction.Rollback();

                    LogError(0, 0, NombreControlador, "GuardarRequisicion", ex, AccionEnum.AGREGAR, 0, requisicion);

                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, ex.Message);
                }
            }

            return resultado;
        }

        public Dictionary<string, object> GetInformacionRequisicionConsulta(int requisicion_id, string cc)
        {
            resultado.Clear();

            try
            {
                var requisicionEK = _context.tblRH_REC_Requisicion
                    .Where(x =>
                        x.id == requisicion_id &&
                        x.cc == cc)
                    .Select(x => new sn_requisicion_personal
                    {
                        id = x.id,
                        cc = x.cc,
                        puesto = x.puesto,
                        cantidad_solicitada = x.cantidad_solicitada,
                        solicitante = x.solicitante,
                        fecha_solicitante = x.fecha_solicitante,
                        autoriza = x.autoriza,
                        fecha_autoriza = x.fecha_autoriza,
                        visto_bueno = x.visto_bueno,
                        fecha_visto_bueno = x.fecha_visto_bueno,
                        estatus = x.estatus,
                        sueldo_base = x.sueldo_base,
                        jefe_inmediato = x.jefe_inmediato,
                        razon_solicitud = x.razon_solicitud,
                        sustituye = x.sustituye,
                        fecha_baja = x.fecha_baja,
                        fecha_contratacion = x.fecha_contratacion.Value,
                        justificacion = x.justificacion,
                        tipo_contrato = x.tipo_contrato,
                        edad = x.edad,
                        sexo = x.sexo,
                        estado_civil = x.estado_civil,
                        presentacion = x.presentacion,
                        escolaridad = x.escolaridad,
                        especialidad = x.especialidad,
                        experiencia = x.experiencia,
                        horario = x.horario,
                        habilidades = x.habilidades,
                        actividades = x.actividades,
                        conocimientos = x.conocimientos,
                        altas = x.altas,
                        bajas = x.bajas,
                        id_plantilla = x.id_plantilla,
                        fecha_vigencia = x.fecha_vigencia,
                        comentarioRechazo = x.comentarioRechazo,
                        puestoDesc = x.virtualPuesto.descripcion,
                        idTabuladorDet = x.idTabuladorDet.HasValue ? x.idTabuladorDet.Value : 0,
                        //jefe_inmediatoDesc = x.virtualEmpleadoJefeInmediato.ape_paterno + " " + x.virtualEmpleadoJefeInmediato.ape_materno + " " + x.virtualEmpleadoJefeInmediato.nombre,
                        //solicitanteDesc = x.virtualEmpleadoSolicitante.ape_paterno + " " + x.virtualEmpleadoSolicitante.ape_materno + " " + x.virtualEmpleadoSolicitante.nombre,
                        //autorizaDesc = x.virtualEmpleadoAutoriza.ape_paterno + " " + x.virtualEmpleadoAutoriza.ape_materno + " " + x.virtualEmpleadoAutoriza.nombre
                    }).FirstOrDefault();

                if (requisicionEK == null)
                {
                    throw new Exception("No se encuentra la información de la requisición.");
                }

                requisicionEK.fecha_contratacionString = requisicionEK.fecha_contratacion.ToShortDateString();
                requisicionEK.fecha_vigenciaString = requisicionEK.fecha_vigencia.ToShortDateString();

                var solicita = _context.tblRH_EK_Empleados.First(x => x.clave_empleado == requisicionEK.solicitante);

                requisicionEK.solicitanteDesc = solicita.ape_paterno + " " + solicita.ape_materno + " " + solicita.nombre;

                resultado.Add("data", requisicionEK);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                LogError(0, 0, NombreControlador, "GetInformacionRequisicionConsulta", e, AccionEnum.AGREGAR, 0, new { requisicion_id = requisicion_id, cc = cc });

                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }

            return resultado;
        }

        public Dictionary<string, object> AutorizarRechazarRequisicion(RequisicionRHDTO objDTO)
        {
            using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
            {
                resultado = new Dictionary<string, object>();
                try
                {
                    #region VALIDACIONES
                    if (objDTO.lstID_Requisiciones == null) { throw new Exception("Es necesario seleccionar al menos un empleado."); }
                    if (objDTO.estatus == "C" && string.IsNullOrEmpty(objDTO.comentarioRechazo)) { throw new Exception("Debe agregar un comentario sobre el rechazo de la requisición."); }
                    #endregion

                    List<tblRH_REC_Requisicion> lstRequisicionesSIGOPLAN = _context.tblRH_REC_Requisicion.Where(w => objDTO.lstID_Requisiciones.Contains(w.idSigoplan) && w.registroActivo).ToList();
                    if (lstRequisicionesSIGOPLAN != null)
                    {
                        foreach (var item in lstRequisicionesSIGOPLAN)
                        {
                            tblRH_REC_Requisicion objRequisicion = _context.tblRH_REC_Requisicion.Where(w => w.idSigoplan == item.idSigoplan).FirstOrDefault();
                            if (objRequisicion == null)
                                throw new Exception("Ocurrió un error al obtener la información de la requisición.");

                            if (objDTO.estatus == "C")
                                objRequisicion.comentarioRechazo = objDTO.comentarioRechazo;

                            objRequisicion.estatus = objDTO.estatus;
                            _context.SaveChanges();

                            #region MANDA CORREO Y ALERTA
                            string cveSolicitanteStr = item.solicitante.ToString();
                            tblP_Usuario objUsuarioSIGOPLAN = _context.tblP_Usuario.Where(w => w.cveEmpleado == cveSolicitanteStr).FirstOrDefault();
                            if (objUsuarioSIGOPLAN != null)
                            {
                                List<string> listaCorreos = new List<string> { objUsuarioSIGOPLAN.correo };

                                #region SE OBTIENE EL CORREO DEL USUARIO LOGUEADO
                                string correoUsuarioLogueado = string.Empty;
                                tblP_Usuario objUsuarioLogueado = _context.tblP_Usuario.Where(w => w.id == (int)vSesiones.sesionUsuarioDTO.id && w.estatus).FirstOrDefault();
                                if (objUsuarioLogueado != null)
                                    correoUsuarioLogueado = !string.IsNullOrEmpty(objUsuarioLogueado.correo) ? objUsuarioLogueado.correo.Trim() : null;

                                listaCorreos.Add(correoUsuarioLogueado);
                                #endregion

                                #region SE OBTIENE EL CORREO DEL QUE AUTORIZA ESTA REQUISICIÓN
                                if (item.autoriza > 0)
                                {
                                    string correoAutorizante = string.Empty;
                                    string cveAutorizaStr = item.autoriza.ToString();
                                    tblP_Usuario objUsuarioAutorizante = _context.tblP_Usuario.Where(w => w.cveEmpleado == cveAutorizaStr && w.estatus).FirstOrDefault();
                                    if (objUsuarioAutorizante != null)
                                        correoAutorizante = !string.IsNullOrEmpty(objUsuarioAutorizante.correo) ? objUsuarioAutorizante.correo.Trim() : null;

                                    listaCorreos.Add(correoAutorizante);
                                }
                                #endregion

                                // SE OBTIENE LA DESCRIPCIÓN DEL CC
                                var infoCC = _ccFS_SP.GetCCNomina(item.cc);
                                string descripcionCC = infoCC.descripcion;

                                string asunto = string.Format("Requisición del CC [{0}] {1} - Puesto {2}", item.cc, descripcionCC, item.virtualPuesto.descripcion);
                                string mensaje = string.Format(@"La requisición ID: {2} del puesto {0} fue {1}", item.virtualPuesto.descripcion, item.estatus == "A" ? "autorizada" : ("rechazada<br>Motivo: " + (item.comentarioRechazo ?? "Ninguno")), item.id);
#if DEBUG
                                listaCorreos = new List<string> { "omar.nunez@construplan.com.mx", "martin.zayas@construplan.com.mx" };
#endif
                                GlobalUtils.sendEmail(string.Format("{0}: {1}", PersonalUtilities.GetNombreEmpresa(), asunto), mensaje, listaCorreos);

                                #region SE ELIMINA ALERTA AL AUTORIZAR/RECHAZAR REQUISICIÓN.
                                tblP_Alerta alertaSIGOPLAN = _context.tblP_Alerta.FirstOrDefault(x => x.sistemaID == 16 && x.visto == false && x.objID == item.id && x.obj == "AutorizacionRequisicion");
                                if (alertaSIGOPLAN != null)
                                {
                                    alertaSIGOPLAN.visto = true;
                                    _context.SaveChanges();
                                }
                                #endregion
                            }
                            SaveBitacora(0, (int)AccionEnum.ACTUALIZAR, 0, JsonUtils.convertNetObjectToJson(new { lstID_Requisiciones = objDTO.lstID_Requisiciones, estatus = objDTO.estatus, comentarioRechazo = objDTO.comentarioRechazo }));
                            #endregion
                        }

                        dbSigoplanTransaction.Commit();
                        resultado.Add(SUCCESS, true);
                        resultado.Add(MESSAGE, objDTO.estatus == "C" ? "Se ha rechazado con éxito la requisición" : objDTO.lstID_Requisiciones.Count() > 0 ? "Se ha autorizado con éxito las requisiciones" : "Se ha autorizado con éxito la requisición");
                    }
                    else
                    {
                        dbSigoplanTransaction.Rollback();
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "No se encontró información del solicitante (clave-empleado/usuarioSigoplan");
                    }
                }
                catch (Exception ex)
                {
                    dbSigoplanTransaction.Rollback();
                    LogError(0, 0, NombreControlador, "AutorizarRechazarRequisicion", ex, AccionEnum.ACTUALIZAR, 0, new { lstID_Requisiciones = objDTO.lstID_Requisiciones, estatus = objDTO.estatus, comentarioRechazo = objDTO.comentarioRechazo });
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, ex.Message);
                }
            }
            return resultado;
        }

        public Dictionary<string, object> GetFechaVigencia7DiasNaturales()
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region SE OBTIENE LA FECHA ACTUAL + 7 DÍAS NATURALES
                DateTime fecha7DiasNaturales = DateTime.Now.AddDays(6);

                resultado.Add(ITEMS, fecha7DiasNaturales);
                resultado.Add(SUCCESS, true);
                #endregion

            }
            catch (Exception e)
            {
                LogError(0, 0, NombreControlador, "GetFechaVigencia7DiasNaturales", e, AccionEnum.CONSULTA, 0, 0);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        public Dictionary<string, object> EliminarRequisicion(int requisicion_id)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    var registroRequisicion = _context.tblRH_REC_Requisicion.FirstOrDefault(x => x.id == requisicion_id);

                    if (registroRequisicion != null)
                    {
                        #region Validaciones
                        var existeRegistroEmpleadoEK = _context.tblRH_EK_Empleados.Any(x => x.esActivo && x.requisicion == registroRequisicion.id);

                        if (existeRegistroEmpleadoEK)
                        {
                            throw new Exception("La requisición se está utilizando. No se puede proceder con la eliminación.");
                        }
                        #endregion

                        registroRequisicion.registroActivo = false;
                        registroRequisicion.estatus = "C";
                        _context.SaveChanges();
                    }
                    else
                    {
                        throw new Exception("No se encuentra la información de la requisición.");
                    }

                    dbContextTransaction.Commit();
                    SaveBitacora(0, (int)AccionEnum.ELIMINAR, 0, JsonUtils.convertNetObjectToJson(requisicion_id));
                    resultado.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(16, 16, NombreControlador, "EliminarRequisicion", e, AccionEnum.ELIMINAR, 0, requisicion_id);
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                }
            }

            return resultado;
        }

        public Dictionary<string, object> GetCategoriasPuesto(int idPuesto, string cc)
        {
            resultado.Clear();

            try
            {
                var lstCategorias = _context.tblRH_TAB_CatCategorias.Where(e => e.registroActivo).ToList();

                var lstTabuladores = _context.tblRH_TAB_Tabuladores.Where(e => e.registroActivo && e.FK_Puesto == idPuesto && e.tabuladorAutorizado == EstatusGestionAutorizacionEnum.AUTORIZADO).ToList();
                if (lstTabuladores.Count() <= 0)
                    throw new Exception("El puesto seleccionado no cuenta con un tabulador autorizado.");

                var lstIdsTabuladores = lstTabuladores.Select(e => e.id);

                var lstLineasNegocio = _context.tblRH_TAB_CatLineaNegocioDet.Where(e => e.registroActivo && e.cc == cc).ToList();
                var lstIdsLineasNegocio = lstLineasNegocio.Select(e => e.FK_LineaNegocio);

                var lstTabuladoresDet = _context.tblRH_TAB_TabuladoresDet
                                                .Where(e => e.registroActivo && lstIdsLineasNegocio.Contains(e.FK_LineaNegocio) && 
                                                            lstIdsTabuladores.Contains(e.FK_Tabulador) && e.tabuladorDetAutorizado == EstatusGestionAutorizacionEnum.AUTORIZADO).ToList();

                if (lstTabuladoresDet.Count() <= 0)
                    throw new Exception("No se encuentra algún tabulador en base al puesto y su línea de negocio.");

                var grpTabuladores = lstTabuladoresDet.GroupBy(e => e.FK_Categoria);

                var lstCboTabuladores = new List<ComboBoxDTO>();

                foreach (var item in grpTabuladores)
                {
                    var objTabDet = item.OrderByDescending(e => e.fechaCreacion).FirstOrDefault();
                    string descCat = lstCategorias.FirstOrDefault(e => e.id == objTabDet.FK_Categoria).concepto;

                    lstCboTabuladores.Add(new ComboBoxDTO
                    {
                        texto = descCat,
                        valor = objTabDet.id,
                    });
                }

                resultado.Add(ITEMS, lstCboTabuladores);
                resultado.Add(SUCCESS, true);

            }
            catch (Exception e)
            {
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
                resultado.Add(ITEMS, null);
            }

            return resultado;
        }

        public Dictionary<string, object> GetCategoriaPuesto(int tabuladorDetID)
        {
            try
            {
                var categoria = _context.tblRH_TAB_TabuladoresDet.Where(x => x.registroActivo && x.id == tabuladorDetID).Select(x => new ComboBoxDTO
                {
                    texto = x.categoria.concepto,
                    valor = x.id.ToString()
                }).ToList();
                resultado.Add(ITEMS, categoria);

                resultado.Add(SUCCESS, true);
            }
            catch (Exception ex)
            {
                resultado.Add(MESSAGE, ex.Message);
                resultado.Add(SUCCESS, false);
            }

            return resultado;
        }

        public Dictionary<string, object> GetTabuladorCategoria(int categoriaID)
        {
            using (var ctx = new MainContext())
            {
                try
                {
                    var categoria = ctx.tblRH_TAB_TabuladoresDet.FirstOrDefault(x => x.id == categoriaID);
                    if (categoria != null)
                    {
                        var tipoNomina = ctx.tblRH_EK_Tipos_Nomina.FirstOrDefault(x => x.tipo_nomina == categoria.tabulador.puesto.FK_TipoNomina);

                        resultado.Add(SUCCESS, true);
                        resultado.Add(ITEMS, new
                        {
                            sueldoBase = categoria.sueldoBase,
                            sueldoComplemento = categoria.complemento,
                            totalNominal = categoria.totalNominal,
                            tipoNomina = tipoNomina != null ? tipoNomina.descripcion : ""
                        });
                    }
                    else
                    {
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "No se encontró la categoría");
                    }
                }
                catch (Exception ex)
                {
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, ex.Message);
                }
            }

            return resultado;
        }
        #endregion

        #region GENERALES
        private List<ccDTO> ccPermitidos()
        {
            var ccs = new List<ccDTO>();

            if (vSesiones.sesionUsuarioDTO.idPerfil == (int)PerfilUsuarioEnum.ADMINISTRADOR || vSesiones.sesionUsuarioDTO.esAuditor)
            {
                //ccs = _ccFS.GetCCs().OrderBy(x => x.cc).ToList();
                ccs = _ccFS_SP.GetCCsNomina(null).OrderBy(x => x.cc).ToList();
            }
            else
            {
                var usuarioCCs = _context.tblRH_BN_Usuario_CC.Where(x => x.usuarioID == vSesiones.sesionUsuarioDTO.id).Select(x => x.cc).ToList();
                if (usuarioCCs.Count > 0)
                {
                    if (usuarioCCs.Any(x => x == "*"))
                    {
                        //ccs = _ccFS.GetCCs().OrderBy(x => x.cc).ToList();
                        ccs = _ccFS_SP.GetCCsNomina(null).OrderBy(x => x.cc).ToList();
                    }
                    else
                    {
                        //ccs = _ccFS.GetCCs(usuarioCCs).OrderBy(x => x.cc).ToList();
                        ccs = _ccFS_SP.GetCCsNominaFiltrados(usuarioCCs).OrderBy(x => x.cc).ToList();
                    }
                }
            }

            return ccs;
        }

        #region CURP
        private readonly Dictionary<EstadoEnum, string> CodigosEstado = new Dictionary<EstadoEnum, string>
        {
            { EstadoEnum.Aguascalientes, "AS" },
            { EstadoEnum.Baja_California, "BC" },
            { EstadoEnum.Baja_California_Sur, "BS" },
            { EstadoEnum.Campeche, "CC" },
            { EstadoEnum.Chiapas, "CS" },
            { EstadoEnum.Chihuahua, "CH" },
            { EstadoEnum.Coahuila, "CL" },
            { EstadoEnum.Colima, "CM" },
            { EstadoEnum.Distrito_Federal, "DF" },
            { EstadoEnum.Durango, "DG" },
            { EstadoEnum.Guanajuato, "GT" },
            { EstadoEnum.Guerrero, "GR" },
            { EstadoEnum.Hidalgo, "HG" },
            { EstadoEnum.Jalisco, "JC" },
            { EstadoEnum.Mexico, "MC" },
            { EstadoEnum.Morelos, "MS" },
            { EstadoEnum.Michoacan, "MN" },
            { EstadoEnum.Nayarit, "NT" },
            { EstadoEnum.Nuevo_Leon, "NL" },
            { EstadoEnum.Oaxaca, "OC" },
            { EstadoEnum.Puebla, "PL" },
            { EstadoEnum.Queretaro, "QT" },
            { EstadoEnum.Quintana_Roo, "QR" },
            { EstadoEnum.San_Luis_Potosi, "SP" },
            { EstadoEnum.Sinaloa, "SL" },
            { EstadoEnum.Sonora, "SR" },
            { EstadoEnum.Tabasco, "TC" },
            { EstadoEnum.Tamaulipas, "TS" },
            { EstadoEnum.Tlaxcala, "TL" },
            { EstadoEnum.Veracruz, "VZ" },
            { EstadoEnum.Yucatan, "YN" },
            { EstadoEnum.Zacatecas, "ZS" },
            { EstadoEnum.Extranjero, "NE" }
        };

        /// <summary>
        ///     Las Palabras inconvenientes.
        /// </summary>
        private readonly HashSet<string> PalabrasInconvenientes = new HashSet<string>
        {
            "BACA", "BAKA", "BUEI", "BUEY",
            "CACA", "CACO", "CAGA", "CAGO", "CAKA", "CAKO", "COGE", "COGI", "COJA", "COJE", "COJI", "COJO", "COLA", "CULO",
            "FALO", "FETO",
            "GETA", "GUEI", "GUEY",
            "JETA", "JOTO",
            "KACA", "KACO", "KAGA", "KAGO", "KAKA", "KAKO", "KOGE", "KOGI", "KOJA", "KOJE", "KOJI", "KOJO", "KOLA", "KULO",
            "LILO", "LOCA", "LOCO", "LOKA", "LOKO",
            "MAME", "MAMO", "MEAR", "MEAS", "MEON", "MIAR", "MION", "MOCO", "MOKO", "MULA", "MULO",
            "NACA", "NACO",
            "PEDA", "PEDO", "PENE", "PIPI", "PITO", "POPO", "PUTA", "PUTO",
            "QULO",
            "RATA", "ROBA", "ROBE", "ROBO", "RUIN",
            "SENO",
            "TETA",
            "VACA", "VAGA", "VAGO", "VAKA", "VUEI", "VUEY",
            "WUEI", "WUEY"
        };

        /// <summary>
        ///     Genera la CURP.
        /// </summary>
        /// <param name="nombres"> Los nombres.</param>
        /// <param name="paterno"> El apellido paterno.</param>
        /// <param name="materno"> El apellido materno.</param>
        /// <param name="sexo"> El sexo.</param>
        /// <param name="fechaNacimiento"> La fecha de nacimiento.</param>
        /// <param name="estado"> El estado o entidad federativa de nacimiento.</param>
        /// <returns>La CURP.</returns>
        public string GenerarCURP(string nombres, string paterno, string materno, SexoEnum sexo, DateTime fechaNacimiento, EstadoEnum estado)
        {
            if (vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru || vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Colombia)
            {
                return "XXXXXXXXXXXXXXXXXX";
            }

            // Aplicar filtros
            var nombreTemp = Filtrar(nombres);
            var paternoTemp = Filtrar(paterno);
            var maternoTemp = Filtrar(materno);

            // Posicion 1-4
            var uno = paternoTemp[0] == 'Ñ' ? 'X' : paternoTemp[0];
            var dos = InternalVowel(paternoTemp, 1) ?? 'X';
            var tres = string.IsNullOrWhiteSpace(maternoTemp) ? 'X' : (maternoTemp[0] == 'Ñ' ? 'X' : maternoTemp[0]);
            var cuatro = nombreTemp[0] == 'Ñ' ? 'X' : nombreTemp[0];

            var fecha = string.Format(@"{0}{1}{2}", fechaNacimiento.ToString("yy"), fechaNacimiento.Month.ToString("D2"), fechaNacimiento.Day.ToString("D2"));
            var estadoCodigo = CodigosEstado[estado];

            // Posicion 14-16
            var x = InternalConsonant(paternoTemp, 1);
            var y = InternalConsonant(maternoTemp, 1);
            var z = InternalConsonant(nombreTemp, 1);

            var catorce = x == null ? 'X' : x == 'Ñ' ? 'X' : x;
            var quince = y == null ? 'X' : y == 'Ñ' ? 'X' : y;
            var dieciseis = z == null ? 'X' : z == 'Ñ' ? 'X' : z;

            // Pre CURP
            var preCURP = string.Format(@"{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}", uno, dos, tres, cuatro, fecha, (char)sexo, estadoCodigo, catorce, quince, dieciseis);

            // Reemplaza el 2do caracter por una X donde comience con alguna de las palabras de la lisa de "Palabras Inconvenientes"
            if (PalabrasInconvenientes.Contains(preCURP.Substring(0, 4)))
            {
                preCURP = preCURP[0] + "X" + preCURP.Substring(2);
            }

            // Digito diferenciador de homonimia y siglo
            var diferenciador = fechaNacimiento.Year < 2000 ? "0" : "A";

            // Digito verificador
            var codigoVerificador = CodigoVerificador(preCURP);

            return string.Format(@"{0}{1}{2}", preCURP, diferenciador, codigoVerificador).ToUpper();
        }

        /// <summary>
        ///     Calcula el codigo verificador en base a la pre CURP.
        /// </summary>
        /// <param name="preCURP"> La pre CURP.</param>
        /// <returns> El código verificador.</returns>
        /// <exception cref="ArgumentException"> Cuando alguno de los caracteres de la pre CURP no es válido.</exception>
        private int CodigoVerificador(string preCURP)
        {
            var contador = 18;
            var sumatoria = 0;

            const string caracteres = "0123456789ABCDEFGHIJKLMNÑOPQRSTUVWXYZ";

            // Por cada caracter
            foreach (var caracter in preCURP)
            {
                var index = caracteres.IndexOf(caracter);

                if (index == -1)
                {
                    throw new ArgumentException(@"Carácter inválido en la compisición de la pre CURP. [{caracter}]");
                }

                var valor = index * contador;
                contador--;
                sumatoria += valor;
            }

            // 12.- 2do digito verificador
            var numVer = sumatoria % 10;
            numVer = 10 - numVer;
            numVer = numVer == 10 ? 0 : numVer;

            return numVer;
        }

        /// <summary>
        ///     Aplica filtros a un texto en base a lo establecido para conformar la CURP.
        /// </summary>
        /// <param name="str">El texto a filtrar.</param>
        /// <returns> El texto resultante.</returns>
        private string Filtrar(string str)
        {
            if (string.IsNullOrWhiteSpace(str))
            {
                return null;
            }

            // Nombres, paterno y materno en mayuscula
            str = str.ToUpper();

            // Eliminar acentos en vocales
            str = RemoveAccentMarks(str);

            // Eliminar dieresis en vocales
            str = RemoveVowelDieresis(str);

            // Criterios de excepcion
            var palabras = str.Split(' ')
                .Where(i => !string.IsNullOrWhiteSpace(i))
                .ToList();

            // Preposición, conjunción, contraccion
            var arr_1 = new[] { "DA", "DAS", "DE", "DEL", "DER", "DI", "DIE", "DD", "EL", "LA", "LOS", "LAS", "LE", "LES", "MAC", "MC", "VAN", "VON", "Y", "J", "MA" };

            palabras = palabras.Where(i => !arr_1.Contains(i))
                .ToList();

            // Nombre compuesto
            var arr_2 = new[] { "MARIA", "MA.", "MA", "JOSE", "J", "J." };

            if (palabras.Count >= 2 && arr_2.Contains(palabras[0]))
            {
                palabras.RemoveAt(0);
            }

            // Caracteres especiales
            str = palabras[0]
                .Replace('/', 'X')
                .Replace('-', 'X')
                .Replace('.', 'X');

            return str;
        }

        /// <summary>
        ///     Retrieves the n internal consonant of a text.
        /// </summary>
        /// <param name="str"> The text to filter.</param>
        /// <param name="number">
        ///     The number of consonant to find.
        /// </param>
        /// <remarks> Internal means that it will exclude the first letter of the text. </remarks>
        /// <returns> The n constant. If no consonant found returns null. </returns>
        public char? InternalConsonant(string str, int number)
        {
            if (str.Length < 2)
            {
                return null;
            }

            // Validatiosn
            if (str.Trim().Split(' ').Length > 1)
            {
                throw new ArgumentException("The str must be a single word.");
            }

            var constantRegex = new Regex(@"[b-df-hj-np-tv-z]|[ñ]", RegexOptions.IgnoreCase);

            var count = 0;

            // Starts from the second char to exclude the firs
            for (var i = 1; i < str.Length; i++)
            {
                if (!constantRegex.IsMatch(str[i].ToString()))
                {
                    continue;
                }

                count++;

                if (count == number)
                {
                    return str[i];
                }
            }

            return null;
        }

        /// <summary>
        ///     Retrieves the n internal vowel of a text.
        /// </summary>
        /// <param name="str"> The text to filter.</param>
        /// <param name="number">
        ///     The number of vowel to find.
        /// </param>
        /// <remarks> Internal means that it will exclude the first letter of the text. </remarks>
        /// <returns> The n vowel. If no vowel found returns null. </returns>
        public char? InternalVowel(string str, int number)
        {
            if (str.Length < 2)
                return null;

            // Validatiosn
            if (str.Trim().Split(' ').Length > 1)
                throw new ArgumentException("The str must be a single word.");

            var constantRegex = new Regex(@"[aeiou]", RegexOptions.IgnoreCase);

            var count = 0;

            // Starts from the second char to exclude the firs
            for (var i = 1; i < str.Length; i++)
            {
                if (!constantRegex.IsMatch(str[i].ToString()))
                    continue;

                count++;

                if (count == number)
                    return str[i];
            }

            return null;
        }

        /// <summary>
        ///     Validate if a text is a valid CURP.
        /// </summary>
        /// <param name="str"> The text to validate.</param>
        /// <returns> True if is a valid CURP.</returns>
        public bool IsCURP(string str)
        {
            var curpRegex = new Regex(@"^[A-Z][AEIOUX][A-Z]{2}(\d{2})(?:0[1-9]|1[0-2])(?:0[1-9]|[12]\d|3[01])(H|M)(?:AS|B[CS]|C[CLMSH]|D[FG]|G[TR]|HG|JC|M[CNS]|N[ETL]|OC|PL|Q[TR]|S[PLR]|T[CSL]|VZ|YN|ZS)[B-DF-HJ-NP-TV-Z]{3}[A-Z\d]\d$");
            return curpRegex.IsMatch(str);
        }

        /// <summary>
        ///     Remove all accent marks in vowels of a string.
        /// </summary>
        /// <param name="str">The text to filter.</param>
        /// <returns> The <see cref="string" /> resultant. </returns>

        public string RemoveAccentMarks(string str)
        {
            str = str.Replace('á', 'a')
                .Replace('é', 'e')
                .Replace('í', 'i')
                .Replace('ó', 'o')
                .Replace('ú', 'u')
                .Replace('Á', 'A')
                .Replace('É', 'E')
                .Replace('Í', 'I')
                .Replace('Ó', 'O')
                .Replace('Ú', 'U');

            return str;
        }

        /// <summary>
        ///     Replace all vowel letters that contains dieresis with this letter without dieresis.
        /// </summary>
        /// <param name="str">The text to filter.</param>
        /// <returns> The <see cref="string" /> resultant. </returns>
        public string RemoveVowelDieresis(string str)
        {
            return str.Replace('Ä', 'A')
                .Replace('Ë', 'E')
                .Replace('Ï', 'I')
                .Replace('Ö', 'O')
                .Replace('Ü', 'U');
        }
        #endregion

        #region CONTRATO EK

        public Dictionary<string, object> GetContratoReporte(int clave_empleado)
        {
            resultado.Clear();

            try
            {
                string strQuery = string.Empty;

                #region SE OBTIENE LA FECHA DE CONTRATO
                //                strQuery = @"SELECT fecha_contrato
                //                                FROM sn_empleados 
                //                                WHERE clave_empleado = {0}";

                //                var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                //                odbc.consulta = String.Format(strQuery, clave_empleado);

                //                List<DateTime> fechaContrato = _contextEnkontrol.Select<DateTime>(vSesiones.sesionAmbienteEnkontrolRh, odbc);                
                var fechaContrato = _context.tblRH_EK_Empleados.FirstOrDefault(x => x.clave_empleado == clave_empleado);
                #endregion

                #region SE OBTIENEN LOS TIPOS DE CONTRATO
                //                strQuery = @"SELECT clave_duracion, nombre, duracion_meses, duracion_dias, indefinido, tipo_contrato
                //                                FROM sn_empl_duracion_contrato";

                //                odbc = new OdbcConsultaDTO() { consulta = strQuery };
                //                odbc.consulta = String.Format(strQuery);

                //                List<ContratoDuracionDTO> tipoContratos = _contextEnkontrol.Select<ContratoDuracionDTO>(vSesiones.sesionAmbienteEnkontrolRh, odbc);
                var tipoContratos = _context.tblRH_EK_Empl_Duracion_Contrato.Where(x => x.esActivo).Select(x => new ContratoDuracionDTO
                {
                    clave_duracion = x.clave_duracion,
                    nombre = x.nombre,
                    duracion_meses = x.duracion_meses,
                    duracion_dias = x.duracion_dias,
                    indefinido = x.indefinido,
                    tipo_contrato = x.tipo_contrato.Value
                }).ToList();
                #endregion

                #region SE OBTIENE EL CONTRATO DEL EMPLEADO
                //                strQuery = @"SELECT id_contrato_empleado, clave_empleado, clave_duracion, fecha, fecha_aplicacion, clave_duracion_ant
                //                                FROM sn_contratos_empleados 
                //                                WHERE clave_empleado = {0}";

                //                odbc = new OdbcConsultaDTO() { consulta = strQuery };
                //                odbc.consulta = String.Format(strQuery, clave_empleado);

                //                List<ContratoDTO> contratosEmpleado = _contextEnkontrol.Select<ContratoDTO>(vSesiones.sesionAmbienteEnkontrolRh, odbc);
                var contratosEmpleado = _context.tblRH_EK_Contratos_Empleados.Where(x => x.clave_empleado == clave_empleado && x.esActivo.HasValue && x.esActivo.Value).OrderByDescending(x => x.id_contrato_empleado).Select(x => new ContratoDTO
                {
                    id_contrato_empleado = x.id_contrato_empleado,
                    clave_empleado = x.clave_empleado,
                    clave_duracion = x.clave_duracion,
                    fecha = x.fecha,
                    fecha_aplicacion = x.fecha_aplicacion
                }).ToList();
                #endregion

                ContratoDTO recentCont = contratosEmpleado.FirstOrDefault();
                ContratoDuracionDTO empleadoTipoCont = tipoContratos.FirstOrDefault(e => e.clave_duracion == recentCont.clave_duracion);
                if (recentCont != null)
                {
                    fechaContrato.fecha_contrato = recentCont.fecha_aplicacion;
                }

                string contratoDesc = empleadoTipoCont.nombre ?? "";
                int tipoContratoUnidades = 0; //0 = nada, 1 = mensuales, 2 = por dias, 3 = indefinido
                int? unidades = 0;

                if (empleadoTipoCont.indefinido == "N" || string.IsNullOrEmpty(empleadoTipoCont.indefinido))
                {
                    if (empleadoTipoCont.duracion_dias == 0 || empleadoTipoCont.duracion_dias == null)
                    {
                        //MENSUAL
                        unidades = empleadoTipoCont.duracion_meses;
                        tipoContratoUnidades = 2;
                    }
                    else
                    {
                        //DIAS
                        unidades = empleadoTipoCont.duracion_dias;
                        tipoContratoUnidades = 1;

                    }
                }
                else
                {
                    //INDEFINIDO
                    tipoContratoUnidades = 3;

                }

                resultado.Add("tipoContratoUnidades", tipoContratoUnidades);
                resultado.Add("unidades", unidades);
                resultado.Add("contratoDesc", contratoDesc);
                resultado.Add("fechaContrato", fechaContrato.fecha_contrato);

                resultado.Add(SUCCESS, true);

            }
            catch (Exception e)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }

            return resultado;
        }

        #endregion

        #region TABULADORES
        public Dictionary<string, object> GetCategoriasByLineaNegocio(int idLineaNegocio, int idPuesto)
        {
            resultado.Clear();

            try
            {
                var lstCategorias = _context.tblRH_TAB_CatCategorias.Where(e => e.registroActivo).ToList();

                var lstTabuladores = _context.tblRH_TAB_Tabuladores.Where(e => e.registroActivo && e.FK_Puesto == idPuesto).ToList();
                var lstIdsTabuladores = lstTabuladores.Select(e => e.id);

                //var lstLineasNegocio = _context.tblRH_TAB_CatLineaNegocioDet.Where(e => e.registroActivo && e.cc == cc).ToList();
                //var lstIdsLineasNegocio = lstLineasNegocio.Select(e => e.FK_LineaNegocio);

                var lstTabuladoresDet = _context.tblRH_TAB_TabuladoresDet.Where(e => e.registroActivo && idLineaNegocio == e.FK_LineaNegocio && lstIdsTabuladores.Contains(e.FK_Tabulador)).ToList();

                var grpTabuladores = lstTabuladoresDet.GroupBy(e => e.FK_Categoria);

                var lstCboTabuladores = new List<ComboBoxDTO>();

                foreach (var item in grpTabuladores)
                {
                    var objTabDet = item.OrderByDescending(e => e.fechaCreacion).FirstOrDefault();

                    lstCboTabuladores.Add(new ComboBoxDTO
                    {
                        texto = lstCategorias[objTabDet.FK_Categoria - 1].concepto,
                        valor = item.Key,
                    });
                }

                resultado.Add(ITEMS, lstCboTabuladores);
                resultado.Add(SUCCESS, true);

            }
            catch (Exception e)
            {
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }

            return resultado;
        }

        public Dictionary<string, object> GetLineaNegocioByCC(string cc)
        {
            resultado.Clear();

            try
            {
                var lstCategorias = _context.tblRH_TAB_CatCategorias.Where(e => e.registroActivo).ToList();

                var lstLineasNegocio = _context.tblRH_TAB_CatLineaNegocio.Where(e => e.registroActivo).ToList();
                var lstLineasNegocioDet = _context.tblRH_TAB_CatLineaNegocioDet.Where(e => e.registroActivo && e.cc == cc).ToList().Select(e => new ComboDTO()
                {

                    Text = lstLineasNegocio.FirstOrDefault(el => el.id == e.FK_LineaNegocio).concepto,
                    Value = e.FK_LineaNegocio.ToString()

                });

                resultado.Add(ITEMS, lstLineasNegocioDet);
                resultado.Add(SUCCESS, true);

            }
            catch (Exception e)
            {
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }

            return resultado;
        }
        

        #endregion

        #endregion

        #region COMENTARIOS

        public Dictionary<string, object> GetComentario(int claveEmpleado)
        {
            resultado.Clear();

            try
            {
                string comment = "";
                var objComent = _context.tblRH_REC_Comentarios.OrderByDescending(e => e.id).FirstOrDefault(e => e.esActivo && e.claveEmpleado == claveEmpleado);
                if (objComent != null)
                {
                    comment = objComent.comentario;
                }
                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, comment);
            }
            catch (Exception e)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }

            return resultado;
        }

        public Dictionary<string, object> CrearComentario(int claveEmpleado, string comentario)
        {
            resultado.Clear();

            using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    tblRH_REC_Comentarios objCEComent = new tblRH_REC_Comentarios();
                    objCEComent.claveEmpleado = claveEmpleado;
                    objCEComent.comentario = comentario;
                    objCEComent.fechaCreacion = DateTime.Now;
                    objCEComent.fechaModificacion = DateTime.Now;
                    objCEComent.idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id;
                    objCEComent.esActivo = true;
                    _context.tblRH_REC_Comentarios.Add(objCEComent);
                    _context.SaveChanges();

                    resultado.Add(SUCCESS, true);

                    dbSigoplanTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbSigoplanTransaction.Rollback();
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);

                }
            }

            return resultado;
        }

        #endregion

        #region REL REGISTRO PATRONALES
        public Dictionary<string, object> GetRelRegPatronales(tblRH_EK_Registros_Patronales objFiltro)
        {
            resultado.Clear();

            try
            {
                var lstRegPatronales = _context.tblRH_EK_Registros_Patronales.Where(e => e.esActivo).ToList().Select(e => new RegPatDTO 
                {
                    clave_reg_pat = e.clave_reg_pat,
                    desc_reg_pat = e.desc_reg_pat,
                    direccion = e.direccion,
                    colonia = e.colonia,
                    localidad = e.localidad,
                    clave_cuidad = e.clave_cuidad,
                    clave_estado = e.clave_estado,
                    clave_pais = e.clave_pais,
                    codigo_postal = e.codigo_postal,
                    zona_economica = e.zona_economica,
                    giro = e.giro,
                    cve_shcp = e.cve_shcp,
                    num_shcp = e.num_shcp,
                    rfc_cia = e.rfc_cia,
                    expediente_infonavit = e.expediente_infonavit,
                    registro_patronal = e.registro_patronal,
                    registro_patronal_eventual = e.registro_patronal_eventual,
                    cuenta_estatal = e.cuenta_estatal,
                    nombre_representante = e.nombre_representante,
                    rfc_representante = e.rfc_representante,
                    guia = e.guia,
                    id_identificador = e.id_identificador,
                    nombre_corto = e.nombre_corto,
                    rutaArchivo = e.rutaArchivo,
                    nombreArchivo = Path.GetFileName(e.rutaArchivo),
                    fechaCreacion = e.fechaCreacion,
                    fechaModificacion = e.fechaModificacion,
                    idUsuarioCreacion = e.idUsuarioCreacion,
                    idUsuarioModificacion = e.idUsuarioModificacion,
                    esActivo = e.esActivo,
                }).ToList();

                resultado.Add(ITEMS, lstRegPatronales);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }

            return resultado;
        }

        public Dictionary<string, object> GetRelRegPatCC(int clave_reg_pat)
        {
            resultado.Clear();
            try
            {
                List<tblRH_REC_RelacionRegistroPatronalCC> lstRelRegPat = _context.tblRH_REC_RelacionRegistroPatronalCC.Where(e => e.registroActivo && e.clave_reg_pat == clave_reg_pat).ToList();
                List<CcDTO> lstCCs = new List<CcDTO>();
                CcDTO objCC = new CcDTO();
                foreach (var item in lstRelRegPat)
                {
                    objCC = _context.tblC_Nom_CatalogoCC.Select(e => new CcDTO { cc = e.cc, descripcion = e.ccDescripcion }).FirstOrDefault(e => e.cc == item.cc);
                    if (objCC != null)
                    {
                        lstCCs.Add(objCC);
                    }
                }

                resultado.Add(ITEMS, lstCCs);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }

            return resultado;
        }

        public Dictionary<string, object> AddCCRegPatronal(int clave_reg_pat, string cc)
        {
            resultado.Clear();

            using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    tblRH_REC_RelacionRegistroPatronalCC objRegPatronal = _context.tblRH_REC_RelacionRegistroPatronalCC.Where(e => e.clave_reg_pat == clave_reg_pat && e.cc == cc).FirstOrDefault();

                    if (objRegPatronal == null)
                    {
                        _context.tblRH_REC_RelacionRegistroPatronalCC.Add(new tblRH_REC_RelacionRegistroPatronalCC()
                        {
                            cc = cc,
                            clave_reg_pat = clave_reg_pat,
                            registroActivo = true,
                        });
                    }


                    _context.SaveChanges();
                    dbSigoplanTransaction.Commit();
                    resultado.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    dbSigoplanTransaction.Rollback();
                    resultado.Add(SUCCESS, false);
                }
            }
            return resultado;
        }

        public Dictionary<string, object> DeleteCCRegPatronal(int clave_reg_pat, string cc)
        {
            resultado.Clear();

            using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    tblRH_REC_RelacionRegistroPatronalCC objRegPatronal = _context.tblRH_REC_RelacionRegistroPatronalCC.Where(e => e.clave_reg_pat == clave_reg_pat && e.cc == cc).FirstOrDefault();

                    if (objRegPatronal != null)
                    {
                        objRegPatronal.registroActivo = false;
                    }

                    _context.SaveChanges();
                    dbSigoplanTransaction.Commit();
                    resultado.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    dbSigoplanTransaction.Rollback();
                    resultado.Add(SUCCESS, false);
                }
            }
            return resultado;
        }

        public Dictionary<string, object> CrearEditarRegistroPatronal(tblRH_EK_Registros_Patronales objCERegPat, HttpPostedFileBase archivoAdjunto)
        {
            resultado.Clear();

            using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    int numPais = 1;

                    switch ((MainContextEnum)vSesiones.sesionEmpresaActual)
                    {
                        case MainContextEnum.Colombia:
                            numPais = 8;
                            break;
                        case MainContextEnum.PERU:
                            numPais = 7;
                            break;
                        default:
                            break;
                    }

                    if (objCERegPat.clave_reg_pat > 0)
                    {
                        var objRegPat = _context.tblRH_EK_Registros_Patronales.Where(e => e.clave_reg_pat == objCERegPat.clave_reg_pat).FirstOrDefault();

                        objRegPat.desc_reg_pat = objCERegPat.desc_reg_pat;
                        objRegPat.nombre_corto = objCERegPat.nombre_corto;
                        objRegPat.direccion = objCERegPat.direccion;
                        objRegPat.colonia = objCERegPat.colonia;
                        objRegPat.localidad = objCERegPat.localidad;
                        objRegPat.clave_cuidad = objCERegPat.clave_cuidad;
                        objRegPat.clave_estado = objCERegPat.clave_estado;
                        objRegPat.codigo_postal = objCERegPat.codigo_postal;
                        objRegPat.giro = objCERegPat.giro;

                        objRegPat.rfc_cia = objCERegPat.rfc_cia;//FALTA FRONT
                        objRegPat.registro_patronal = objCERegPat.registro_patronal;
                        objRegPat.nombre_representante = objCERegPat.nombre_representante;
                        objRegPat.rfc_representante = objCERegPat.rfc_representante;

                        objRegPat.fechaModificacion = DateTime.Now;
                        objRegPat.idUsuarioModificacion = vSesiones.sesionUsuarioDTO.id;
                        _context.SaveChanges();

                        if (archivoAdjunto != null)
                        {
                            #region SE REGISTRA EL ARCHIVO ADJUNTO
                            var listaRutaArchivos = new List<Tuple<HttpPostedFileBase, string>>();
#if DEBUG
                            var CarpetaNueva = Path.Combine(RutaLocalRegPat, objRegPat.clave_reg_pat.ToString());
#else
                            var CarpetaNueva = Path.Combine(RutaBaseRegPat, objRegPat.clave_reg_pat.ToString());
#endif
                            // Verifica si existe la carpeta y si no, la crea.
                            if (GlobalUtils.VerificarExisteCarpeta(CarpetaNueva, true) == false)
                            {
                                throw new Exception("No se pudo crear el archivo en el servidor");
                            }

                            string nombreArchivo = SetNombreArchivo(objCERegPat.clave_reg_pat, archivoAdjunto.FileName);
                            string rutaArchivo = Path.Combine(CarpetaNueva, nombreArchivo);

                            // GUARDAR TABLA ARCHIVOS
                            objRegPat.rutaArchivo = rutaArchivo;

                            _context.SaveChanges();

                            if (GlobalUtils.SaveHTTPPostedFile(archivoAdjunto, rutaArchivo) == false)
                            {
                                throw new Exception("Ocurrio algo mal al guardar el archivo en el servidor");
                            }

                            //resultado.Add(MESSAGE, "Se han cargado las evidencias con éxito, Favor de consultar en en apartado de Consultas.");
                            //resultado.Add(SUCCESS, true);
                            #endregion
                        }

                    }
                    else
                    {
                        var objRegPat = new tblRH_EK_Registros_Patronales
                        {
                            desc_reg_pat = objCERegPat.desc_reg_pat,
                            nombre_corto = objCERegPat.nombre_corto,
                            direccion = objCERegPat.direccion,
                            colonia = objCERegPat.colonia,
                            localidad = objCERegPat.localidad,
                            clave_pais = numPais,
                            clave_cuidad = objCERegPat.clave_cuidad,
                            clave_estado = objCERegPat.clave_estado,
                            codigo_postal = objCERegPat.codigo_postal,
                            giro = objCERegPat.giro,

                            rfc_cia = objCERegPat.rfc_cia,//FALTA FRONT
                            registro_patronal = objCERegPat.registro_patronal,
                            nombre_representante = objCERegPat.nombre_representante,
                            rfc_representante = objCERegPat.rfc_representante,

                            fechaCreacion = DateTime.Now,
                            fechaModificacion = DateTime.Now,
                            idUsuarioCreacion = vSesiones.sesionUsuarioDTO.id,
                            idUsuarioModificacion = vSesiones.sesionUsuarioDTO.id,
                            esActivo = true,
                        };

                        _context.tblRH_EK_Registros_Patronales.Add(objRegPat);
                        _context.SaveChanges();

                        if (archivoAdjunto != null)
                        {
                            #region SE REGISTRA EL ARCHIVO ADJUNTO
                            var listaRutaArchivos = new List<Tuple<HttpPostedFileBase, string>>();
#if DEBUG
                            var CarpetaNueva = Path.Combine(RutaLocalRegPat, objRegPat.clave_reg_pat.ToString());
#else
                            var CarpetaNueva = Path.Combine(RutaBaseRegPat, objRegPat.clave_reg_pat.ToString());
#endif
                            // Verifica si existe la carpeta y si no, la crea.
                            if (GlobalUtils.VerificarExisteCarpeta(CarpetaNueva, true) == false)
                            {
                                throw new Exception("No se pudo crear el archivo en el servidor");
                            }

                            string nombreArchivo = SetNombreArchivo(objCERegPat.clave_reg_pat, archivoAdjunto.FileName);
                            string rutaArchivo = Path.Combine(CarpetaNueva, nombreArchivo);

                            // GUARDAR TABLA ARCHIVOS
                            objRegPat.rutaArchivo = rutaArchivo;

                            _context.SaveChanges();

                            if (GlobalUtils.SaveHTTPPostedFile(archivoAdjunto, rutaArchivo) == false)
                            {
                                throw new Exception("Ocurrio algo mal al guardar el archivo en el servidor");
                            }

                            //resultado.Add(MESSAGE, "Se han cargado las evidencias con éxito, Favor de consultar en en apartado de Consultas.");
                            //resultado.Add(SUCCESS, true);
                            #endregion
                        }
                    }

                    resultado.Add(SUCCESS, true);
                    dbSigoplanTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbSigoplanTransaction.Rollback();
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, e.Message);
                }
            }

            return resultado;
        }

        public Dictionary<string, object> DeleteRegistroPatronal(int idRegPat)
        {
            resultado.Clear();

            using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    var objRegPat = _context.tblRH_EK_Registros_Patronales.Where(e => e.clave_reg_pat == idRegPat).FirstOrDefault();

                    if (objRegPat != null)
                    {
                        objRegPat.esActivo = false;
                    }

                    _context.SaveChanges();
                    resultado.Add(SUCCESS, true);
                    dbSigoplanTransaction.Commit();
                }
                catch (Exception e)
                {
                    resultado.Add(SUCCESS, false);
                    dbSigoplanTransaction.Rollback();
                }
            }

            return resultado;
        }

        public int GetUltimoIdRegPat()
        {
            int ultimoID = 0;

            try
            {
                var objRegPat = _context.tblRH_EK_Registros_Patronales.OrderByDescending(e => e.clave_reg_pat).FirstOrDefault();

                if (objRegPat != null)
                {
                    ultimoID = objRegPat.clave_reg_pat + 1;
                }
            }
            catch (Exception e)
            {

                throw;
            }

            return ultimoID;
        }

        public Dictionary<string, object> GetRelRegPatronalesReporte()
        {
            resultado.Clear();

            try
            {

                var lstRegPatronales = _context.Select<RelRegPatronalesDTO>(new DapperDTO
                {
                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                    consulta = @"
                                SELECT tReg.*, tEstados.descripcion as estadoDesc, tCuidad.descripcion as cuidadDesc
                                FROM tblRH_EK_Registros_Patronales tReg 
                                INNER JOIN tblRH_EK_Estados as tEstados ON tReg.clave_estado = tEstados.clave_estado AND tEstados.clave_pais = tReg.clave_pais
                                INNER JOIN tblRH_EK_Ciudades as tCuidad ON tReg.clave_cuidad = tCuidad.clave_cuidad AND tReg.clave_estado = tCuidad.clave_estado AND tCuidad.clave_pais = tReg.clave_pais",
                });

                resultado.Add(ITEMS, lstRegPatronales);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }

            return resultado;
        }

        public Tuple<Stream, string> DescargarArchivoRegPat(int id)
        {
            try
            {
                var registroRegPat = _context.tblRH_EK_Registros_Patronales.FirstOrDefault(x => x.clave_reg_pat == id);

                var fileStream = GlobalUtils.GetFileAsStream(registroRegPat.rutaArchivo);
                string name = Path.GetFileName(registroRegPat.rutaArchivo);

                return Tuple.Create(fileStream, name);
            }
            catch (Exception e)
            {
                return null;
            }
        }
        #endregion

        #region RELACION FASES
        public Dictionary<string, object> GetFasesUsuarios(int idFase)
        {
            resultado.Clear();

            try
            {
                List<tblRH_REC_FasesUsuarios> lstFasesUsr = _context.tblRH_REC_FasesUsuarios.Where(e => e.esActivo && e.idFase == idFase).ToList();
                List<RelFasesDTO> lstUsuarios = new List<RelFasesDTO>();

                foreach (var item in lstFasesUsr)
                {
                    tblP_Usuario objUser = _context.tblP_Usuario.Where(e => e.id == item.idUsuario).FirstOrDefault();
                    lstUsuarios.Add(new RelFasesDTO
                    {
                        id = item.id,
                        idUsuario = item.idUsuario,
                        idFase = item.idFase,
                        faseDesc = _context.tblRH_REC_Fases.Where(e => e.id == item.idFase).FirstOrDefault().nombreFase,
                        nombreUsuario = objUser.apellidoPaterno + " " + objUser.apellidoMaterno + " " + objUser.nombre,
                    });
                }

                resultado.Add(ITEMS, lstUsuarios);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }

            return resultado;
        }

        public Dictionary<string, object> AddFasesUsuarios(int idUsuario, int idFase)
        {
            resultado.Clear();

            using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    tblRH_REC_FasesUsuarios objFaseUsr = _context.tblRH_REC_FasesUsuarios.Where(e => e.esActivo && e.idUsuario == idUsuario && e.idFase == idFase).FirstOrDefault();

                    if (objFaseUsr == null)
                    {
                        tblP_Usuario objUser = _context.tblP_Usuario.Where(e => e.cveEmpleado == idUsuario.ToString()).FirstOrDefault();
                        if (objUser != null)
                        {
                            _context.tblRH_REC_FasesUsuarios.Add(new tblRH_REC_FasesUsuarios
                            {
                                idFase = idFase,
                                idUsuario = objUser.id,
                                idUsuarioCreacion = vSesiones.sesionUsuarioDTO.id,
                                idUsuarioModificacion = vSesiones.sesionUsuarioDTO.id,
                                fechaCreacion = DateTime.Now,
                                fechaModificacion = DateTime.Now,
                                esActivo = true,
                            });
                        }

                    }

                    _context.SaveChanges();
                    dbSigoplanTransaction.Commit();
                    resultado.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    dbSigoplanTransaction.Rollback();
                    resultado.Add(SUCCESS, false);
                }
            }

            return resultado;
        }

        public Dictionary<string, object> DeleteFasesUsuarios(int idUsuario, int idFase)
        {
            resultado.Clear();

            using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    tblRH_REC_FasesUsuarios objFaseUsr = _context.tblRH_REC_FasesUsuarios.Where(e => e.esActivo && e.idUsuario == idUsuario && e.idFase == idFase).FirstOrDefault();

                    if (objFaseUsr != null)
                    {
                        objFaseUsr.idUsuarioModificacion = vSesiones.sesionUsuarioDTO.id;
                        objFaseUsr.fechaModificacion = DateTime.Now;
                        objFaseUsr.esActivo = false;

                    }

                    _context.SaveChanges();
                    dbSigoplanTransaction.Commit();
                    resultado.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    dbSigoplanTransaction.Rollback();
                    resultado.Add(SUCCESS, false);
                }
            }

            return resultado;
        }


        #endregion

        #region CAT CONTRATOS
        public Dictionary<string, object> GetDuracionContratos()
        {
            resultado.Clear();

            try
            {
                List<tblRH_EK_Empl_Duracion_Contrato> lstDuraciones = _context.tblRH_EK_Empl_Duracion_Contrato.Where(e => e.esActivo).ToList();

                resultado.Add(ITEMS, lstDuraciones);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }

            return resultado;
        }

        public Dictionary<string, object> AddDuracionContrato(string duracion_desc, int? dias, int? meses, int? años, bool indef)
        {
            resultado.Clear();

            using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    _context.tblRH_EK_Empl_Duracion_Contrato.Add(new tblRH_EK_Empl_Duracion_Contrato
                    {
                        nombre = duracion_desc,
                        duracion_meses = meses,
                        duracion_dias = dias,
                        indefinido = indef ? "S" : "N",
                        fechaCreacion = DateTime.Now,
                        fechaModificacion = DateTime.Now,
                        idUsuarioCreacion = vSesiones.sesionUsuarioDTO.id,
                        idUsuarioModificacion = vSesiones.sesionUsuarioDTO.id,
                        esActivo = true,
                    });

                    _context.SaveChanges();
                    dbSigoplanTransaction.Commit();

                    resultado.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    dbSigoplanTransaction.Rollback();

                    resultado.Add(MESSAGE, e.Message);
                    resultado.Add(SUCCESS, false);
                }
            }

            return resultado;
        }

        public Dictionary<string, object> DeleteDuracionContrato(int id_duracion)
        {
            resultado.Clear();

            using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    tblRH_EK_Empl_Duracion_Contrato objDuracion = _context.tblRH_EK_Empl_Duracion_Contrato.Where(e => e.esActivo && e.clave_duracion == id_duracion).FirstOrDefault();

                    if (objDuracion != null)
                    {
                        objDuracion.esActivo = false;
                    }

                    _context.SaveChanges();
                    dbSigoplanTransaction.Commit();

                    resultado.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    dbSigoplanTransaction.Rollback();
                    resultado.Add(SUCCESS, false);
                }
            }

            return resultado;
        }
        #endregion

        #region CAT PUESTOS
        public Dictionary<string, object> GetPuestos()
        {
            try
            {
                using (var _ctx = new MainContext(vSesiones.sesionEmpresaActual))
                {
                    List<tblRH_TAB_CatAreaDepartamento> lstAreasDepartamentos = _ctx.tblRH_TAB_CatAreaDepartamento.Where(w => w.registroActivo).ToList();
                    List<tblRH_EK_Tipos_Nomina> lstTipoNominas = _ctx.tblRH_EK_Tipos_Nomina.Where(x => x.esActivo == true).ToList();
                    List<tblRH_TAB_CatSindicato> lstSindicatos = _ctx.tblRH_TAB_CatSindicato.Where(w => w.registroActivo).ToList();
                    List<tblRH_TAB_CatNivelMando> lstNivelMandos = _ctx.tblRH_TAB_CatNivelMando.Where(w => w.registroActivo).ToList();
                    List<tblRH_EK_Puesto_ArchivoDescriptor> lstArchivosDescriptores = _ctx.tblRH_EK_Puesto_ArchivoDescriptor.Where(x => x.registroActivo).ToList();
                    bool permisoDescriptor = false;

                    var lstPuestos = _ctx.tblRH_EK_Puestos.Where(x => x.registroActivo && x.puesto > 0).ToList().Select(x => new
                    {
                        puesto = x.puesto,
                        descripcion = x.descripcion,
                        descripcion_puesto = x.descripcion_puesto,
                        areaDepartamentoDesc = lstAreasDepartamentos.Where(w => w.id == x.FK_AreaDepartamento).Select(s => s.concepto).FirstOrDefault(),
                        FK_AreaDepartamento = x.FK_AreaDepartamento,
                        FK_TipoNomina = x.FK_TipoNomina,
                        tipo_nominaDesc = lstTipoNominas.Where(w => w.tipo_nomina == x.FK_TipoNomina).Select(s => s.descripcion).FirstOrDefault(),
                        sindicatoDesc = lstSindicatos.Where(w => w.id == x.FK_Sindicato).Select(s => s.concepto).FirstOrDefault(),
                        FK_Sindicato = x.FK_Sindicato,
                        nivelMandoDesc = lstNivelMandos.Where(w => w.id == x.FK_NivelMando).Select(s => s.concepto).FirstOrDefault(),
                        FK_NivelMando = x.FK_NivelMando,
                        idDescriptor = lstArchivosDescriptores.Where(y => y.puestoId == x.puesto).Select(y => y.id).OrderByDescending(y => y).FirstOrDefault(),
                        rutaDescriptor = lstArchivosDescriptores.Where(y => y.puestoId == x.puesto).Select(y => y.ruta).OrderByDescending(y => y).FirstOrDefault(),
                        esEvaluacion = x.esEvaluacion,
                        BAE = x.BAE
                    }).ToList();
                    permisoDescriptor = _ctx.tblP_AccionesVistatblP_Usuario.Any(x => x.tblP_AccionesVista_id == 4043 && x.tblP_Usuario_id == vSesiones.sesionUsuarioDTO.id);

                    resultado.Add(SUCCESS, true);
                    resultado.Add("data", lstPuestos);
                    resultado.Add("permisoDescriptor", permisoDescriptor);
                }
            }
            catch (Exception e)
            {
                LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetPuestos", e, AccionEnum.CONSULTA, 0, null);
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }
            return resultado;
        }

        public Dictionary<string, object> GuardarNuevoPuesto(tblRH_EK_Puestos puesto)
        {
            using (var _ctx = new MainContext(vSesiones.sesionEmpresaActual))
            {
                using (var dbContextTransaction = _ctx.Database.BeginTransaction())
                {
                    try
                    {
                        #region VALIDACIONES
                        if ((int)EmpresaEnum.Peru == vSesiones.sesionEmpresaActual)
                        {
                            if (puesto.BAE < 0) { throw new Exception("Es necesario indicar el BAE mayor a 0."); }
                            if (puesto.BAE >= 100 || puesto.BAE <= -1) { throw new Exception("Es necesario indicar el BAE del 0% al 100%"); }
                        }
                        #endregion

                        #region SE REGISTRA EL PUESTO NUEVO
                        puesto.FK_UsuarioCreacion = vSesiones.sesionUsuarioDTO.id;
                        puesto.fechaCreacion = DateTime.Now;
                        puesto.registroActivo = true;
                        _ctx.tblRH_EK_Puestos.Add(puesto);
                        _ctx.SaveChanges();

                        dbContextTransaction.Commit();
                        resultado.Add(SUCCESS, true);
                        resultado.Add(MESSAGE, "Se ha registrado con éxito");

                        SaveBitacora(0, (int)AccionEnum.AGREGAR, puesto.puesto, JsonUtils.convertNetObjectToJson(puesto));
                        #endregion
                    }
                    catch (Exception e)
                    {
                        dbContextTransaction.Rollback();
                        LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GuardarNuevoPuesto", e, AccionEnum.AGREGAR, 0, puesto);
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, e.Message);
                    }
                }
            }
            return resultado;
        }

        public Dictionary<string, object> EditarPuesto(tblRH_EK_Puestos puesto)
        {
            using (var _ctx = new MainContext(vSesiones.sesionEmpresaActual))
            {
                using (var dbContextTransaction = _ctx.Database.BeginTransaction())
                {
                    try
                    {
                        #region VALIDACIONES
                        if ((int)EmpresaEnum.Peru == vSesiones.sesionEmpresaActual)
                        {
                            if (puesto.BAE <= 0) { throw new Exception("Es necesario indicar el BAE."); }
                            if (puesto.BAE >= 101 || puesto.BAE <= -1) { throw new Exception("Es necesario indicar el BAE del 0% al 100%"); }
                        }
                        #endregion

                        #region SE ACTUALIZA EL PUESTO
                        tblRH_EK_Puestos puestoSIGOPLAN = _ctx.tblRH_EK_Puestos.Where(w => w.puesto == puesto.puesto).FirstOrDefault();
                        if (puestoSIGOPLAN == null)
                            throw new Exception("Ocurrió un error al actualizar el puesto.");

                        puestoSIGOPLAN.descripcion = puesto.descripcion;
                        puestoSIGOPLAN.descripcion_puesto = puesto.descripcion_puesto;
                        puestoSIGOPLAN.FK_TipoNomina = puesto.FK_TipoNomina;
                        puestoSIGOPLAN.FK_Sindicato = puesto.FK_Sindicato;
                        puestoSIGOPLAN.FK_AreaDepartamento = puesto.FK_AreaDepartamento;
                        puestoSIGOPLAN.FK_NivelMando = puesto.FK_NivelMando;
                        puestoSIGOPLAN.esEvaluacion = puesto.esEvaluacion;
                        puestoSIGOPLAN.BAE = puesto.BAE;
                        _ctx.SaveChanges();

                        dbContextTransaction.Commit();
                        resultado.Add(SUCCESS, true);
                        resultado.Add(MESSAGE, "Se ha actualizado con éxito el registro");

                        SaveBitacora(0, (int)AccionEnum.ACTUALIZAR, puesto.puesto, JsonUtils.convertNetObjectToJson(puesto));
                        #endregion
                    }
                    catch (Exception e)
                    {
                        dbContextTransaction.Rollback();
                        LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "EditarPuesto", e, AccionEnum.ACTUALIZAR, 0, puesto);
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, e.Message);
                    }
                }
            }
            return resultado;
        }

        public Dictionary<string, object> EliminarPuesto(tblRH_EK_Puestos puesto)
        {
            using (var _ctx = new MainContext(vSesiones.sesionEmpresaActual))
            {
                using (var dbContextTransaction = _ctx.Database.BeginTransaction())
                {
                    try
                    {
                        #region VALIDACIONES
                        // SE VERIFICA SI EL PUESTO SE ENCUENTRA CON UN TABULADOR EN USO
                        List<tblRH_TAB_Tabuladores> lstTabuladores = _ctx.tblRH_TAB_Tabuladores.Where(w => w.FK_Puesto == puesto.puesto && w.registroActivo).ToList();
                        if (lstTabuladores.Count() > 0)
                            throw new Exception("No se puede eliminar el puesto, ya que se encuentra en uso.");

                        // SE VERIFICA SI EL PUESTO SE ENCUENTRA CON UNA PLANTILLA EN USO
                        List<tblRH_TAB_PlantillasPersonalDet> lstPlantillasDet = _ctx.tblRH_TAB_PlantillasPersonalDet.Where(w => w.FK_Puesto == puesto.puesto && w.registroActivo).ToList();
                        if (lstPlantillasDet.Count() > 0)
                            throw new Exception("No se puede eliminar el puesto, ya que se encuentra en uso.");
                        #endregion

                        var puestoSIGOPLAN = _ctx.tblRH_EK_Puestos.FirstOrDefault(x => x.puesto == puesto.puesto);

                        puestoSIGOPLAN.fechaModificacion = DateTime.Now;
                        puestoSIGOPLAN.FK_UsuarioModificacion = vSesiones.sesionUsuarioDTO.id;
                        puestoSIGOPLAN.registroActivo = false;
                        _ctx.SaveChanges();

                        dbContextTransaction.Commit();
                        resultado.Add(SUCCESS, true);
                        resultado.Add(MESSAGE, "Se ha eliminado con éxito el puesto");

                        SaveBitacora(0, (int)AccionEnum.ELIMINAR, puesto.puesto, JsonUtils.convertNetObjectToJson(puesto));
                    }
                    catch (Exception e)
                    {
                        dbContextTransaction.Rollback();
                        LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "EliminarPuesto", e, AccionEnum.ELIMINAR, 0, puesto);
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, e.Message);
                    }
                }
            }
            return resultado;
        }

        public Dictionary<string, object> CargarArchivoDescriptor(HttpPostedFileBase file, int puesto)
        {
            using (var _ctx = new MainContext(vSesiones.sesionEmpresaActual))
            {
                using (var dbContextTransaction = _ctx.Database.BeginTransaction())
                {
                    try
                    {
                        var archivosExistentes = _ctx.tblRH_EK_Puesto_ArchivoDescriptor.Where(x => x.registroActivo && x.puestoId == puesto).ToList();
                        foreach (var item in archivosExistentes)
                        {
                            item.registroActivo = false;
                            item.fechaModificacion = DateTime.Now;
                            item.usuarioModificacionId = vSesiones.sesionUsuarioDTO.id;
                        }
                        _ctx.SaveChanges();

                        var rutaArchivoDescriptor = "";
#if DEBUG
                        rutaArchivoDescriptor = RutaDescriptoresLocal + @"\" + Path.GetFileNameWithoutExtension(file.FileName) + DateTime.Now.ToString("dd-MM-y HHmmssffff") + Path.GetExtension(file.FileName);
#else
                        rutaArchivoDescriptor = RutaDescriptores + @"\" + Path.GetFileNameWithoutExtension(file.FileName) + DateTime.Now.ToString("dd-MM-y HHmmssffff") + Path.GetExtension(file.FileName);
#endif
                        file.SaveAs(rutaArchivoDescriptor);

                        var nuevoArchivo = new tblRH_EK_Puesto_ArchivoDescriptor();
                        nuevoArchivo.fechaCreacion = DateTime.Now;
                        nuevoArchivo.puestoId = puesto;
                        nuevoArchivo.registroActivo = true;
                        nuevoArchivo.ruta = rutaArchivoDescriptor;
                        nuevoArchivo.usuarioCreacionId = vSesiones.sesionUsuarioDTO.id;
                        _ctx.tblRH_EK_Puesto_ArchivoDescriptor.Add(nuevoArchivo);
                        _ctx.SaveChanges();

                        dbContextTransaction.Commit();

                        resultado.Add(SUCCESS, true);
                    }
                    catch (Exception e)
                    {
                        dbContextTransaction.Rollback();
                        LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "CargarArchivoDescriptor", e, AccionEnum.CONSULTA, 0, new { file = file, puesto = puesto });
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, e.Message);
                    }
                }
            }
            return resultado;
        }

        public tblRH_EK_Puesto_ArchivoDescriptor GetFileDownloadDescriptor(int id)
        {
            tblRH_EK_Puesto_ArchivoDescriptor archivoDescriptor = new tblRH_EK_Puesto_ArchivoDescriptor();
            using (var _ctx = new MainContext(vSesiones.sesionEmpresaActual))
            {
                try
                {
                    archivoDescriptor = _context.tblRH_EK_Puesto_ArchivoDescriptor.FirstOrDefault(x => x.id == id);
                }
                catch (Exception e)
                {
                    LogError(_SISTEMA, 0, _NOMBRE_CONTROLADOR, "GetFileDownloadDescriptor", e, AccionEnum.CONSULTA, id, new { id = id });
                }
            }
            return archivoDescriptor;
        }
        #endregion

        #region PERMISOS
        public bool UsuarioDeConsulta()
        {
            var esConsulta = true;

            try
            {
                esConsulta = _context.tblP_AccionesVistatblP_Usuario.Any(x => x.tblP_AccionesVista_id == 4028 && x.tblP_Usuario_id == vSesiones.sesionUsuarioDTO.id);
            }
            catch (Exception ex)
            {
                esConsulta = true;
            }

            return esConsulta;
        }

        public bool UsuarioDeConsultaTeorico() //MARISELA EXAMEN TEORICO
        {
            var esConsulta = true;

            try
            {
                esConsulta = _context.tblP_AccionesVistatblP_Usuario.Any(x => x.tblP_AccionesVista_id == 4034 && x.tblP_Usuario_id == vSesiones.sesionUsuarioDTO.id);
            }
            catch (Exception ex)
            {
                esConsulta = true;
            }

            return esConsulta;
        }

        public bool UsuarioPermisoAccionEditarFechaCambio()
        {
            var permiso = false;

            try
            {
                permiso = _context.tblP_AccionesVistatblP_Usuario.Any(x => x.tblP_AccionesVista_id == 4030 && x.tblP_Usuario_id == vSesiones.sesionUsuarioDTO.id);
            }
            catch (Exception ex)
            {
                permiso = false;
            }

            return permiso;
        }

        public bool UsuarioPermisoAccionOcultarSalarioByCC()
        {
            var permiso = false;

            try
            {
                permiso = (_context.tblP_AccionesVistatblP_Usuario.Where(x => x.tblP_Usuario_id == vSesiones.sesionUsuarioDTO.id && x.tblP_AccionesVista_id == 4038).Count()) > 0;
            }
            catch (Exception ex)
            {
                permiso = false;
            }

            return permiso;
        }

        public bool UsuarioPermisoMostrarBotones()
        {
            bool esMostrarBotones = false;

            try
            {
                esMostrarBotones = _context.tblP_AccionesVistatblP_Usuario.Any(e => e.tblP_AccionesVista_id == 4042 && e.tblP_Usuario_id == vSesiones.sesionUsuarioDTO.id);

                if (vSesiones.sesionUsuarioDTO.idPerfil == (int)PerfilUsuarioEnum.ADMINISTRADOR)
                {
                    esMostrarBotones = true;
                }
            }
            catch (Exception)
            {

            }

            return esMostrarBotones;
        }
        
        public bool UsuarioVerSalarios()
        {
            bool esVerSalarios = false;

            try
            {
                esVerSalarios = (_context.tblP_AccionesVistatblP_Usuario.Where(x => x.tblP_Usuario_id == vSesiones.sesionUsuarioDTO.id && x.tblP_AccionesVista_id == 4055).Count()) > 0;

            }
            catch (Exception e)
            {
                esVerSalarios = false;
            }

            return esVerSalarios;
        }

        public bool UsuarioOcultarSalariosGernecia(int clv_emp)
        {
            bool esOcultarSalariosSoloGerente = false;

            try
            {
                bool permisoGerenciaSinSueldos = (_context.tblP_AccionesVistatblP_Usuario.Where(x => x.tblP_Usuario_id == vSesiones.sesionUsuarioDTO.id && x.tblP_AccionesVista_id == 4057).Count()) > 0;
                var objEmpleado = _context.tblRH_EK_Empleados.FirstOrDefault(e => e.clave_empleado == clv_emp);
                var objPuesto = _context.tblRH_EK_Puestos.FirstOrDefault(e => e.puesto == objEmpleado.puesto);

                if (objPuesto != null && permisoGerenciaSinSueldos && 
                    (objPuesto.descripcion.Contains("GERENCIA") || objPuesto.descripcion.Contains("GERENTE") || objPuesto.descripcion.Contains("DIRECCI") || objPuesto.descripcion.Contains("DIRECTOR")))
                {
                    esOcultarSalariosSoloGerente = true;
                }
                else
                {
                    esOcultarSalariosSoloGerente = false;
                }
            }
            catch (Exception)
            {
                esOcultarSalariosSoloGerente = false;
            }

            return esOcultarSalariosSoloGerente;
        }

        #endregion

        #region CAT CATEGORIAS
        public Dictionary<string, object> FillComboPuestos(string cC)
        {
            resultado.Clear();

            //if (string.IsNullOrEmpty(cC))
            //{
            //    return new List<tblRH_CatPuestos>();
            //}
            var objPuesto = ObtenerPlantilla(cC);
            if (objPuesto != null)
            {
                id_plantilla = objPuesto.id_plantilla;

            }
            else
            {
                id_plantilla = 0;
            }
            //var odbc = new OdbcConsultaDTO()
            //{
            //    consulta = "SELECT a.puesto, b.descripcion, b.tipo_nomina from sn_plantilla_puesto as a inner join si_puestos as b on  a.puesto= b.puesto where id_plantilla=? and b.descripcion not like '%NO USA%'",
            //    parametros = new List<OdbcParameterDTO>() { new OdbcParameterDTO() { nombre = "id_plantilla", tipo = OdbcType.Int, valor = id_plantilla } }
            //};
            //var lst = _contextEnkontrol.Select<tblRH_CatPuestos>(EnkontrolAmbienteEnum.Rh, odbc);
            var lst = _context.Select<ComboDTO>(new DapperDTO
            {
                baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                consulta = "SELECT a.FK_Puesto as Value, CONCAT('[', b.puesto, '] ', b.descripcion) as Text, b.descripcion as Prefijo, b.FK_TipoNomina as tipo_nomina from tblRH_TAB_PlantillasPersonalDet as a inner join tblRH_EK_Puestos as b on  a.FK_Puesto= b.puesto where FK_Plantilla= @paramPlantilla and b.descripcion not like '%NO USA%'",
                parametros = new { paramPlantilla = id_plantilla }
            }).OrderBy(e => e.Prefijo).ToList();

            resultado.Add(ITEMS, lst);
            resultado.Add(SUCCESS, true);

            return resultado;
        }

        public Dictionary<string, object> GetPuestosCategoriasRelPuesto(string _cc, string _strPuesto, int idPuesto)
        {

            resultado.Clear();
            try
            {
                #region SE VERIFICA QUE EMPRESA SE ENCUENTRA LOGUEADA PARA PREPARAR EL CONTEXT DE EK
                EnkontrolAmbienteEnum idEmpresa = (int)EmpresaEnum.Construplan == (int)vSesiones.sesionEmpresaActual ? EnkontrolAmbienteEnum.Rh : EnkontrolAmbienteEnum.RhArre;
                #endregion

                #region SE OBTIENE id_plantilla EN BASE AL CC
                int idPlantilla = 0;
                if (!string.IsNullOrEmpty(_cc))
                {
                    //string strQuery = string.Empty;
                    //strQuery = @"SELECT id_plantilla FROM sn_plantilla_personal WHERE cc = '{0}'";
                    //var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                    //odbc.consulta = String.Format(strQuery, _cc);
                    //List<dynamic> lstPlantillas = _contextEnkontrol.Select<dynamic>(idEmpresa, odbc);
                    var lstPlantillas = _context.tblRH_TAB_PlantillasPersonal.Where(x => x.cc == _cc).ToList();
                    if (lstPlantillas.Count() > 0)
                        idPlantilla = lstPlantillas[0].id;
                }
                #endregion

                #region SE OBTIENE LISTADO DE PUESTOS EN BASE AL idPlantilla
                //                List<dynamic> lstPuestos = new List<dynamic>();
                //                if (idPlantilla > 0)
                //                {
                ////                    string strQuery = string.Empty;
                ////                    strQuery = @"SELECT t1.puesto, t2.descripcion, t2.tipo_nomina
                ////                                        FROM sn_plantilla_puesto AS t1 
                ////                                        INNER JOIN si_puestos AS t2 ON t1.puesto= t2.puesto 
                ////                                            WHERE id_plantilla = {0} AND t2.descripcion NOT LIKE '%{1}%' AND t2.descripcion LIKE '%{2}%'";
                ////                    var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                ////                    odbc.consulta = String.Format(strQuery, idPlantilla, "NO USA", _strPuesto);
                ////                    lstPuestos = _contextEnkontrol.Select<dynamic>(idEmpresa, odbc);

                //                }

                #endregion

                #region SE OBTIENE LA CATEGORIA DE LOS PUESTOS
                List<string> lstCategoriasRelPuesto = new List<string>();
                List<dynamic> lstPuestosFilt = new List<dynamic>();

                string puestoFinal = _strPuesto, categoriaFinal = "", Cadena = _strPuesto;
                int LongUltEspacio = Cadena.LastIndexOf(' '), longitudPuesto = Cadena.Length;
                if (LongUltEspacio != -1)
                {
                    int longUltPalabra = longitudPuesto - (LongUltEspacio);
                    string ultPalabra = (Cadena.Substring(LongUltEspacio, longUltPalabra));
                    Char delimiter = ' ';
                    String[] substrings = ultPalabra.Split(delimiter);
                    foreach (var palabra in substrings)
                    {
                        ultPalabra = substrings[1];
                        break;
                    }
                    if (ultPalabra.Length == 1)
                    {
                        puestoFinal = (Cadena.Substring(0, LongUltEspacio));
                        categoriaFinal = ultPalabra;
                        bool existeCategoria = false;
                        foreach (var item2 in lstCategoriasRelPuesto)
                        {
                            if (categoriaFinal == item2)
                                existeCategoria = true;
                        }
                        if (!existeCategoria)
                            lstCategoriasRelPuesto.Add(categoriaFinal);

                        //lstPuestosRelPuesto.Add(item);
                    }
                    else
                    {
                        lstCategoriasRelPuesto.Add("N/A");
                    }
                }

                #endregion

                var lstPuestos = _context.tblRH_TAB_PlantillasPersonalDet.Where(x => x.FK_Plantilla == idPlantilla && !x.puesto.descripcion.Contains("NO USA") && x.puesto.descripcion.Contains(puestoFinal)).Select(x => new
                {
                    puesto = x.puesto.puesto,
                    descripcion = x.puesto.descripcion,
                    tipo_nomina = x.puesto.FK_TipoNomina,
                    addPlantilla = false,
                }).ToList();

                var lstAditivas = _context.tblRH_EK_Plantilla_Aditiva.Where(e => e.estatus == "A" && e.id_plantilla == idPlantilla && e.cc == _cc).ToList();

                var idPuestosAditivas = lstAditivas.Select(e => e.puesto).Distinct().ToList();

                var lstPuestosAditivas = _context.tblRH_EK_Puestos.Where(e => e.descripcion.Contains(puestoFinal) && idPuestosAditivas.Contains(e.puesto)).ToList();

                List<CatCategoriasAditivas> lstDataPuestos = new List<CatCategoriasAditivas>();

                if (lstPuestos.Count > 0)
                {
                    foreach (var item in lstPuestos)
                    {
                        if (!(_strPuesto.Length + 2 < item.descripcion.Length))
                        {
                            lstPuestosFilt.Add(item);
                        }
                    }

                    foreach (var item in lstPuestosAditivas)
                    {
                        var objPuesto = lstPuestos.FirstOrDefault(e => e.puesto == item.puesto);

                        if (objPuesto == null)
                        {
                            lstPuestosFilt.Add(new
                            {
                                puesto = item.puesto,
                                descripcion = item.descripcion,
                                tipo_nomina = item.FK_TipoNomina,
                                addPlantilla = true,
                            });
                        }
                    }

                    if (lstPuestos.Count > 1)
                    {
                        //REMOVER PUESTO SIN CATEGORIA SELECCIONADO
                        var objPuesto = lstPuestos.FirstOrDefault(e => e.descripcion == _strPuesto);

                        if (lstCategoriasRelPuesto.Contains("N/A"))
                        {
                            if (objPuesto != null)
                            {
                                lstPuestosFilt.Remove(objPuesto);
                            }
                        }

                        //REMOVER PUESTO SIN CATEGORIA NO SELECCIONADO
                        var objPuestoSinCat = lstPuestos.FirstOrDefault(e => e.descripcion == puestoFinal);

                        if (objPuestoSinCat != null)
                        {
                            lstPuestosFilt.Remove(objPuestoSinCat);

                        }
                    }

                    foreach (var item in lstPuestosFilt)
                    {

                        if (item.addPlantilla)
                        {
                            CatCategoriasAditivas objAditivaPersonal = new CatCategoriasAditivas()
                            {
                                cantidad = 0,
                                id_plantilla = idPlantilla.ToString(),
                                puesto = item.descripcion,
                                id_puesto = item.puesto,
                                esNuevo = true,
                            };
                            lstDataPuestos.Add(objAditivaPersonal);
                        }
                        else
                        {
                            CatCategoriasAditivas objAditivaPersonal = new CatCategoriasAditivas();

                            objAditivaPersonal.id_puesto = item.puesto;
                            objAditivaPersonal.puesto = item.descripcion;
                            id_plantilla = ObtenerPlantilla(_cc).id_plantilla;
                            //string query = "SELECT * FROM  sn_plantilla_puesto AS a";
                            //query += " INNER JOIN si_puestos AS b";
                            //query += " ON a.puesto= b.puesto";
                            //query += " WHERE id_plantilla='" + id_plantilla + "' AND b.descripcion='" + puestoDescripcion + "'";

                            //var result = (IList<AditivaPersonal>)ContextEnKontrolNomina.Where(query).ToObject<IList<AditivaPersonal>>();
                            var result = _context.Select<Core.DTO.RecursosHumanos.AditivaPersonal>(new DapperDTO
                            {
                                baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                                consulta = "SELECT * FROM tblRH_TAB_PlantillasPersonalDet AS a INNER JOIN tblRH_EK_Puestos AS b ON a.FK_Puesto = b.puesto WHERE FK_Plantilla = @paramPlantilla AND b.descripcion = @paramDesc",
                                parametros = new { paramPlantilla = id_plantilla, paramDesc = item.descripcion }
                            }).ToList();

                            foreach (var itemPPuesto in result)
                            {
                                objAditivaPersonal.cantidad = itemPPuesto.cantidad;
                                //objAditivaPersonal.puesto = itemPPuesto.puesto;
                                objAditivaPersonal.id_plantilla = itemPPuesto.id_plantilla;
                            }

                            var result2 = _context.Select<Core.DTO.RecursosHumanos.AditivaPersonal>(new DapperDTO
                            {
                                baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                                consulta = "SELECT * FROM tblRH_EK_Empleados WHERE puesto = @paramPuesto AND cc_contable = @paramCC AND estatus_empleado = 'A'",
                                parametros = new { paramPuesto = item.puesto, paramCC = _cc }
                            }).ToList();
                            objAditivaPersonal.altas = result2.Count;

                            //var result3 = (IList<AditivaPersonal>)ContextEnKontrolNomina.Where(cantidad).ToObject<IList<AditivaPersonal>>();
                            var result3 = _context.Select<Core.DTO.RecursosHumanos.AditivaPersonal>(new DapperDTO
                            {
                                baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                                consulta = "SELECT * FROM tblRH_EK_Plantilla_Aditiva WHERE puesto = @paramPuesto AND id_plantilla = @paramPlantilla AND estatus = 'A'",
                                parametros = new { paramPuesto = objAditivaPersonal.id_puesto, paramPlantilla = objAditivaPersonal.id_plantilla }
                            }).ToList();
                            int contador = 0;
                            foreach (var itemPAditiva in result3)
                            {
                                //objAditivaPersonal.altas = item.altas;
                                contador = itemPAditiva.cantidad + contador;

                            }

                            objAditivaPersonal.cantidad = (objAditivaPersonal.cantidad + contador);

                            lstDataPuestos.Add(objAditivaPersonal);
                        }
                    }
                }

                lstDataPuestos = lstDataPuestos.OrderBy(e => e.puesto).ToList();

                resultado.Add("lstCategoriasRelPuesto", lstCategoriasRelPuesto);
                resultado.Add("lstPuestosRelPuesto", lstDataPuestos);
                resultado.Add(SUCCESS, true);


            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "GetCategoriasRelPuesto", e, AccionEnum.CONSULTA, 0, 0);
            }


            return resultado;
        }

        public Dictionary<string, object> EditarPlantilla(List<InputCategoriasDTO> lstCambios, string cc, int puesto, string descPuesto)
        {
            resultado.Clear();

            using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    var lstCategorias = GetPuestosCategoriasRelPuesto(cc, descPuesto, puesto)["lstPuestosRelPuesto"] as List<CatCategoriasAditivas>;
                    resultado.Clear();

                    if (lstCategorias != null && lstCategorias.Count > 0)
                    {
                        int idPlantilla = Convert.ToInt32(lstCategorias[0].id_plantilla);

                        if (lstCambios != null && lstCambios.Count > 0)
                        {
                            foreach (var item in lstCambios)
                            {
                                var objPuesto = lstCategorias.FirstOrDefault(e => e.id_puesto == item.id_puesto);

                                if (objPuesto.esNuevo.HasValue && objPuesto.esNuevo.Value)
                                {
                                    var result3 = _context.Select<Core.DTO.RecursosHumanos.AditivaPersonal>(new DapperDTO
                                    {
                                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                                        consulta = "SELECT * FROM tblRH_EK_Plantilla_Aditiva WHERE puesto = @paramPuesto AND id_plantilla = @paramPlantilla AND estatus = 'A'",
                                        parametros = new { paramPuesto = item.id_puesto, paramPlantilla = idPlantilla }
                                    }).ToList();
                                    int contador = 0;
                                    foreach (var itemPAditiva in result3)
                                    {
                                        //objAditivaPersonal.altas = item.altas;
                                        contador = itemPAditiva.cantidad + contador;

                                    }

                                    if (contador < 0)
                                    {
                                        var objPlantillaPuesto = _context.tblRH_EK_Plantilla_Puesto.Add(new tblRH_EK_Plantilla_Puesto
                                        {
                                            id_plantilla = idPlantilla,
                                            puesto = item.id_puesto,
                                            cantidad = -(contador),
                                            observaciones = "AJUSTE",
                                            check_bobo = true,
                                            check_autoriza = true,
                                            estatus = "A",
                                            altas = 0,
                                            bajas = 0,
                                            cc = cc,
                                            fechaCreacion = DateTime.Now,
                                            //fechaModificacion
                                            idUsuarioCreacion = 71,
                                            esActivo = true
                                        });
                                        _context.SaveChanges();

                                    }
                                    else
                                    {
                                        var objPlantillaPuesto = _context.tblRH_EK_Plantilla_Puesto.Add(new tblRH_EK_Plantilla_Puesto
                                        {
                                            id_plantilla = idPlantilla,
                                            puesto = item.id_puesto,
                                            cantidad = 0,
                                            observaciones = "AJUSTE",
                                            check_bobo = true,
                                            check_autoriza = true,
                                            estatus = "A",
                                            altas = 0,
                                            bajas = 0,
                                            cc = cc,
                                            fechaCreacion = DateTime.Now,
                                            //fechaModificacion
                                            idUsuarioCreacion = 71,
                                            esActivo = true
                                        });
                                        _context.SaveChanges();

                                    }


                                }

                                if (item.cantidad < 0)
                                {
                                    throw new Exception("La plantilla no puede ser negativa");
                                }
                                else
                                {
                                    if (item.cantidad > objPuesto.cantidad)
                                    {
                                        //SE CREA ADITIVA
                                        tblRH_EK_Plantilla_Aditiva objAditiva = new tblRH_EK_Plantilla_Aditiva()
                                        {
                                            id_plantilla = idPlantilla,
                                            cc = cc,
                                            puesto = item.id_puesto,
                                            tipo = "A",
                                            cantidad = item.cambios,
                                            solicita = 71,
                                            fecha_solicita = DateTime.Now,
                                            autoriza = 71,
                                            fecha_autoriza = DateTime.Now,
                                            visto_bueno = 71,
                                            estatus = "A",
                                            fecha = DateTime.Now,
                                            observaciones = "AJUSTE",
                                            registroSIGOPLAN = true
                                        };
                                        _context.tblRH_EK_Plantilla_Aditiva.Add(objAditiva);
                                        _context.SaveChanges();

                                    }

                                    if (item.cantidad < objPuesto.cantidad)
                                    {
                                        //SE CREA DEDUCTIVA
                                        tblRH_EK_Plantilla_Aditiva objDeductiva = new tblRH_EK_Plantilla_Aditiva()
                                        {
                                            id_plantilla = idPlantilla,
                                            cc = cc,
                                            puesto = item.id_puesto,
                                            tipo = "D",
                                            cantidad = item.cambios,
                                            solicita = 71,
                                            fecha_solicita = DateTime.Now,
                                            autoriza = 71,
                                            fecha_autoriza = DateTime.Now,
                                            visto_bueno = 71,
                                            estatus = "A",
                                            fecha = DateTime.Now,
                                            observaciones = "AJUSTE",
                                            registroSIGOPLAN = true
                                        };
                                        _context.tblRH_EK_Plantilla_Aditiva.Add(objDeductiva);
                                        _context.SaveChanges();

                                    }
                                }
                            }
                        }
                    }

                    resultado.Add(ITEMS, null);
                    resultado.Add(SUCCESS, true);

                    dbSigoplanTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbSigoplanTransaction.Rollback();
                    resultado.Add(MESSAGE, e.Message);
                    resultado.Add(SUCCESS, false);
                }
            }

            return resultado;
        }

        public Dictionary<string, object> GetAllPuestos()
        {
            resultado.Clear();

            try
            {
                var lstPuestos = _context.tblRH_EK_Puestos.Where(e => e.registroActivo && !e.descripcion.Contains("NO USAR")).Select(e => new ComboDTO
                {
                    Value = e.puesto.ToString(),
                    Text = "[" + e.puesto + "] " + e.descripcion,
                    Prefijo = e.descripcion
                }).ToList();

                resultado.Add(ITEMS, lstPuestos);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);

            }

            return resultado;
        }

        public Dictionary<string, object> AddPlantillaPuesto(string _cc, string _strPuesto, int idPuesto, string _strNuevoPuesto, int nuevoPuesto)
        {
            resultado.Clear();

            using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    int idPlantilla = 0;
                    if (!string.IsNullOrEmpty(_cc))
                    {
                        //string strQuery = string.Empty;
                        //strQuery = @"SELECT id_plantilla FROM sn_plantilla_personal WHERE cc = '{0}'";
                        //var odbc = new OdbcConsultaDTO() { consulta = strQuery };
                        //odbc.consulta = String.Format(strQuery, _cc);
                        //List<dynamic> lstPlantillas = _contextEnkontrol.Select<dynamic>(idEmpresa, odbc);
                        var lstPlantillas = _context.tblRH_TAB_PlantillasPersonal.Where(x => x.cc == _cc).ToList();
                        if (lstPlantillas.Count() > 0)
                            idPlantilla = lstPlantillas[0].id;
                    }

                    List<string> lstCategoriasRelPuesto = new List<string>();
                    List<tblRH_EK_Puestos> lstPuestosFilt = new List<tblRH_EK_Puestos>();

                    string puestoFinal = _strPuesto, categoriaFinal = "", Cadena = _strPuesto;
                    int LongUltEspacio = Cadena.LastIndexOf(' '), longitudPuesto = Cadena.Length;
                    if (LongUltEspacio != -1)
                    {
                        int longUltPalabra = longitudPuesto - (LongUltEspacio);
                        string ultPalabra = (Cadena.Substring(LongUltEspacio, longUltPalabra));
                        Char delimiter = ' ';
                        String[] substrings = ultPalabra.Split(delimiter);
                        foreach (var palabra in substrings)
                        {
                            ultPalabra = substrings[1];
                            break;
                        }
                        if (ultPalabra.Length == 1)
                        {
                            puestoFinal = (Cadena.Substring(0, LongUltEspacio));
                            categoriaFinal = ultPalabra;
                            bool existeCategoria = false;
                            foreach (var item2 in lstCategoriasRelPuesto)
                            {
                                if (categoriaFinal == item2)
                                    existeCategoria = true;
                            }
                            if (!existeCategoria)
                                lstCategoriasRelPuesto.Add(categoriaFinal);

                            //lstPuestosRelPuesto.Add(item);
                        }
                        else
                        {
                            lstCategoriasRelPuesto.Add("N/A");
                        }
                    }

                    //TODOS LOS PUESTOS
                    var lstPuestos = _context.tblRH_EK_Puestos.Where(e => e.descripcion.Contains(puestoFinal));

                    //PUESTOS EN PLANTILLA DEL PUESTO
                    var lstPuestosPlantilla = _context.tblRH_TAB_PlantillasPersonalDet.Where(x => x.FK_Plantilla == idPlantilla && !x.puesto.descripcion.Contains("NO USA") && x.puesto.descripcion.Contains(puestoFinal)).Select(x => new
                    {
                        puesto = x.puesto.puesto,
                        descripcion = x.puesto.descripcion,
                        tipo_nomina = x.puesto.FK_TipoNomina,
                        addPlantilla = false,
                    }).ToList();

                    foreach (var item in lstPuestos)
                    {
                        if (!(_strNuevoPuesto.Length + 2 < item.descripcion.Length))
                        {
                            lstPuestosFilt.Add(item);
                        }
                    }

                    if (lstPuestos.Count() > 0)
                    {
                        var objFiltered = lstPuestos.FirstOrDefault(e => e.puesto == nuevoPuesto);
                        var objFilteredPlantilla = lstPuestosPlantilla.FirstOrDefault(e => e.puesto == nuevoPuesto);

                        if (objFiltered != null)
                        {
                            if (objFilteredPlantilla == null)
                            {

                                var result3 = _context.Select<Core.DTO.RecursosHumanos.AditivaPersonal>(new DapperDTO
                                {
                                    baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                                    consulta = "SELECT * FROM tblRH_EK_Plantilla_Aditiva WHERE puesto = @paramPuesto AND id_plantilla = @paramPlantilla AND estatus = 'A'",
                                    parametros = new { paramPuesto = nuevoPuesto, paramPlantilla = idPlantilla }
                                }).ToList();
                                int contador = 0;
                                foreach (var itemPAditiva in result3)
                                {
                                    //objAditivaPersonal.altas = item.altas;
                                    contador = itemPAditiva.cantidad + contador;

                                }

                                if (contador < 0)
                                {
                                    var objPlantillaPuesto = _context.tblRH_EK_Plantilla_Puesto.Add(new tblRH_EK_Plantilla_Puesto
                                    {
                                        id_plantilla = idPlantilla,
                                        puesto = nuevoPuesto,
                                        cantidad = -(contador),
                                        observaciones = "NUEVO",
                                        check_bobo = true,
                                        check_autoriza = true,
                                        estatus = "A",
                                        altas = 0,
                                        bajas = 0,
                                        cc = _cc,
                                        fechaCreacion = DateTime.Now,
                                        //fechaModificacion
                                        idUsuarioCreacion = 71,
                                        esActivo = true
                                    });
                                    _context.SaveChanges();
                                }
                                else
                                {
                                    var objPlantillaPuesto = _context.tblRH_EK_Plantilla_Puesto.Add(new tblRH_EK_Plantilla_Puesto
                                    {
                                        id_plantilla = idPlantilla,
                                        puesto = nuevoPuesto,
                                        cantidad = 0,
                                        observaciones = "NUEVO",
                                        check_bobo = true,
                                        check_autoriza = true,
                                        estatus = "A",
                                        altas = 0,
                                        bajas = 0,
                                        cc = _cc,
                                        fechaCreacion = DateTime.Now,
                                        //fechaModificacion
                                        idUsuarioCreacion = 71,
                                        esActivo = true
                                    });
                                    _context.SaveChanges();
                                }

                            }
                            else
                            {
                                throw new Exception("El puesto ya existe en la plantilla del puesto");
                            }

                        }
                        else
                        {
                            throw new Exception("Ocurrio un problema con el puestos a añadir\nAsegurese de elegir un puesto del mismo tipo");
                        }
                    }

                    dbSigoplanTransaction.Commit();
                    resultado.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    dbSigoplanTransaction.Rollback();
                    resultado.Add(MESSAGE, e.Message);
                    resultado.Add(SUCCESS, false);
                }

            }

            return resultado;
        }

        public Dictionary<string, object> GetPuestoDetalle(PuestoDetalleDTO objDTO)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region SE OBTIENE LISTADO DE PUESTOS
                List<tblRH_EK_Puestos> lstPuestos = _context.Select<tblRH_EK_Puestos>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"SELECT * FROM tblRH_EK_Puestos WHERE esActivo = @esActivo",
                    parametros = new { esActivo = true }
                }).ToList();
                #endregion

                List<tblRH_EK_Plantilla_Aditiva> lstHistorialAditivas = new List<tblRH_EK_Plantilla_Aditiva>();
                if (string.IsNullOrEmpty(objDTO.cc))
                {
                    #region 50 REGISTROS (VIENE VACIO EL CC. ES PRIMERA CARGA DE LA VISTA)
                    lstHistorialAditivas = _context.Select<tblRH_EK_Plantilla_Aditiva>(new DapperDTO
                    {
                        baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                        consulta = @"SELECT TOP(50)* FROM tblRH_EK_Plantilla_Aditiva WHERE registroSIGOPLAN = @registroSIGOPLAN ORDER BY fecha_solicita DESC",
                        parametros = new { registroSIGOPLAN = true }
                    }).ToList();
                    #endregion
                }
                else
                {
                    #region 50 REGISTROS (VIENE CON CC);
                    lstHistorialAditivas = _context.Select<tblRH_EK_Plantilla_Aditiva>(new DapperDTO
                    {
                        baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                        consulta = @"SELECT TOP(50)* FROM tblRH_EK_Plantilla_Aditiva WHERE cc = @cc AND registroSIGOPLAN = @registroSIGOPLAN ORDER BY fecha_solicita DESC",
                        parametros = new { cc = objDTO.cc, registroSIGOPLAN = true }
                    }).ToList();
                    #endregion
                }

                if (lstHistorialAditivas.Count() <= 0)
                    throw new Exception("No se encontraron aditivias/deductivas.");

                int contador = 0;
                List<PuestoDetalleDTO> lstPuestoDetalle = new List<PuestoDetalleDTO>();
                PuestoDetalleDTO obj = new PuestoDetalleDTO();
                foreach (var item in lstHistorialAditivas.OrderByDescending(o => o.fecha_solicita).ToList())
                {
                    obj = new PuestoDetalleDTO();

                    // SE OBTIENE PUESTO
                    tblRH_EK_Puestos objPuesto = lstPuestos.Where(w => w.puesto == item.puesto && w.registroActivo).FirstOrDefault();
                    if (objPuesto != null)
                        obj.puesto = string.Format("[{0}] {1}", objPuesto.puesto > 0 ? objPuesto.puesto : 0, !string.IsNullOrEmpty(objPuesto.descripcion) ? objPuesto.descripcion.Trim().ToUpper() : string.Empty);

                    obj.tipoAditiva = item.tipo == "A" ? "ADITIVA" : "DEDUCTIVA";
                    obj.cantidad = item.cantidad;
                    obj.fecha_solicita = item.fecha_solicita;
                    obj.observaciones = !string.IsNullOrEmpty(item.observaciones) ? item.observaciones.Trim() : string.Empty;

                    contador++;
                    obj.orden = contador;
                    lstPuestoDetalle.Add(obj);
                }

                #region VERSIÓN 1
                // SE OBTIENE LA DESCRIPCION DEL PUESTO
                //tblRH_EK_Puestos objPuesto = _context.tblRH_EK_Puestos.Where(w => w.puesto == objDTO.idPuesto).FirstOrDefault();
                //if (objPuesto == null)
                //    throw new Exception("Ocurrió un error al obtener la descripción del puesto.");

                // SE OBTIENE plantilla_id
                //tblRH_EK_Plantilla_Personal objPlantillaCC = _context.tblRH_EK_Plantilla_Personal.Where(w => w.cc == objDTO.cc && w.esActivo).FirstOrDefault();
                //if (objPlantillaCC == null)
                //    throw new Exception("Ocurrió un error al obtener la plantilla del CC.");

                // SE OBTIENE REGISTRO INICIAL DEL PUESTO
                //tblRH_EK_Plantilla_Puesto objPuestoRegistroInicial = _context.tblRH_EK_Plantilla_Puesto.Where(w => w.id_plantilla == objPlantillaCC.id_plantilla && w.puesto == objDTO.idPuesto && w.esActivo).FirstOrDefault();
                //if (objPuestoRegistroInicial != null)
                //{
                //    PuestoDetalleDTO obj = new PuestoDetalleDTO();
                //    obj.puesto = string.Format("[{0}] {1}", objDTO.idPuesto, !string.IsNullOrEmpty(objPuesto.descripcion) ? objPuesto.descripcion.Trim().ToUpper() : string.Empty);
                //    obj.tipoAditiva = "ADITIVA";
                //    obj.cantidad = (objPuestoRegistroInicial.cantidad - objPuestoRegistroInicial.altas) == 0 ? 1 : (objPuestoRegistroInicial.cantidad - objPuestoRegistroInicial.altas);
                //    obj.observaciones = !string.IsNullOrEmpty(objPuestoRegistroInicial.observaciones) ? objPuestoRegistroInicial.observaciones.Trim() : string.Empty;
                //    lstPuestoDetalle.Add(obj);
                //}

                // SE OBTIENE HISTORIAL DE MODIFICACIONES DEL PUESTO
                //List<tblRH_EK_Plantilla_Aditiva> lstPuestoHistorialMoficaciones = _context.tblRH_EK_Plantilla_Aditiva.Where(w => w.id_plantilla == objPuestoRegistroInicial.id_plantilla && w.puesto == objDTO.idPuesto).ToList();
                //foreach (var item in lstPuestoHistorialMoficaciones)
                //{
                //    PuestoDetalleDTO obj = new PuestoDetalleDTO();
                //    obj.puesto = string.Format("[{0}] {1}", objDTO.idPuesto, !string.IsNullOrEmpty(objPuesto.descripcion) ? objPuesto.descripcion.Trim().ToUpper() : string.Empty);
                //    obj.tipoAditiva = item.tipo == "A" ? "ADITIVA" : "DEDUCTIVA";
                //    obj.cantidad = item.cantidad;
                //    obj.observaciones = !string.IsNullOrEmpty(item.observaciones) ? item.observaciones.Trim() : string.Empty;
                //    lstPuestoDetalle.Add(obj);
                //}
                #endregion

                resultado.Add(SUCCESS, true);
                resultado.Add("lstPuestoDetalle", lstPuestoDetalle);
            }
            catch (Exception e)
            {
                LogError(0, 0, NombreControlador, "GetPuestoDetalle", e, AccionEnum.CONSULTA, objDTO.idPuesto, objDTO);
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }
        #endregion

        #region CAT TABULADORES
        public Dictionary<string, object> GetPuestosTabuladores(string cc)
        {
            resultado.Clear();

            try
            {
                var objTabulador = _context.tblRH_EK_Tabuladores.FirstOrDefault(e => e.cc == cc);
                var lstTabuldoresPuestos = new List<CatTabuladoresDTO>();

                if (objTabulador != null)
                {
                    lstTabuldoresPuestos = _context.Select<CatTabuladoresDTO>(new DapperDTO
                    {
                        baseDatos = (MainContextEnum)vSesiones.sesionEmpresaActual,
                        consulta = @"
                                SELECT 
                                    tTab.* ,
                                    tPuesto.descripcion as puesto_desc
                                FROM tblRH_EK_Tabulador_Puesto as tTab
                                INNER JOIN tblRH_EK_Puestos as tPuesto ON tTab.puesto = tPuesto.puesto
                                WHERE tTab.tabulador = @tab",
                        parametros = new { tab = objTabulador.id }
                    });
                }

                resultado.Add(ITEMS, lstTabuldoresPuestos);
                resultado.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }

            return resultado;
        }

        public Dictionary<string, object> CrearEditarTabuladorPuesto(string cc, CatTabuladoresDTO objTabulador)
        {
            resultado.Clear();

            using (var dbSigoplanTransaction = _context.Database.BeginTransaction())
            {
                //Get numero de tabulador
                var objTab = _context.tblRH_EK_Tabuladores.FirstOrDefault(e => e.cc == cc);
                if (objTab == null)
                {
                    throw new Exception("El cc no tiene tabulador");
                }

                var objCETabulador = _context.tblRH_EK_Tabulador_Puesto.FirstOrDefault(e => e.tabulador == objTab.id && e.puesto == objTabulador.puesto);

                try
                {
                    if (objTabulador.id > 0)
                    {
                        //objCETabulador.tabulador = objTab.id;
                        //objCETabulador.puesto = objTabulador.puesto.Value;
                        objCETabulador.salario_base = objTabulador.salario_base;
                        objCETabulador.complemento = objTabulador.complemento;
                        objCETabulador.bono_de_zona = objTabulador.bono_de_zona;
                        objCETabulador.year = DateTime.Now.Year;
                        objCETabulador.fechaModificacion = DateTime.Now;
                        objCETabulador.idUsuarioModificacion = vSesiones.sesionUsuarioDTO.id;
                        _context.SaveChanges();

                        SaveBitacora(16, (int)AccionEnum.ACTUALIZAR, objTabulador.id.Value, JsonUtils.convertNetObjectToJson(objCETabulador));

                    }
                    else
                    {
                        if (objCETabulador == null)
                        {

                            _context.tblRH_EK_Tabulador_Puesto.Add(new tblRH_EK_Tabulador_Puesto
                            {
                                tabulador = objTab.id,
                                puesto = objTabulador.puesto.Value,
                                salario_base = objTabulador.salario_base,
                                complemento = objTabulador.complemento,
                                bono_de_zona = objTabulador.bono_de_zona,
                                year = DateTime.Now.Year,
                                fechaCreacion = DateTime.Now,
                                fechaModificacion = DateTime.Now,
                                idUsuarioCreacion = vSesiones.sesionUsuarioDTO.id,
                                idUsuarioModificacion = vSesiones.sesionUsuarioDTO.id
                            });
                            _context.SaveChanges();

                            SaveBitacora(16, (int)AccionEnum.AGREGAR, objTabulador.id.Value, JsonUtils.convertNetObjectToJson(objTabulador));

                        }
                        else
                        {
                            throw new Exception("El puesto ya tiene un tabulador");
                        }


                    }

                    dbSigoplanTransaction.Commit();
                    resultado.Add(SUCCESS, true);
                }
                catch (Exception e)
                {
                    if (objTabulador.id > 0)
                    {
                        LogError(16, 16, "ReclutamientosController", "CrearEditarTabuladoresPuesto", e, AccionEnum.ACTUALIZAR, 0, 0);

                    }
                    else
                    {
                        LogError(16, 16, "ReclutamientosController", "CrearEditarTabuladoresPuesto", e, AccionEnum.AGREGAR, 0, 0);

                    }

                    dbSigoplanTransaction.Rollback();
                    resultado.Add(MESSAGE, e.Message);
                    resultado.Add(SUCCESS, false);
                }

            }

            return resultado;
        }

        public Dictionary<string, object> GetReporteTabuladores(string cc)
        {
            resultado = new Dictionary<string, object>();
            try
            {
                #region VALIDACIONES
                if (string.IsNullOrEmpty(cc)) { throw new Exception("Es necesario seleccionar un CC."); }
                #endregion

                #region SE OBTIENE LISTADO DE TABULADORES EN BASE AL CC SELECCIONADO
                List<TabuladoresDTO> lstTabuladores = _context.Select<TabuladoresDTO>(new DapperDTO
                {
                    baseDatos = (int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Construplan ? MainContextEnum.Construplan : MainContextEnum.Arrendadora,
                    consulta = @"SELECT t2.tabulador AS tab, t3.descripcion AS puesto, t3.FK_TipoNomina AS tipoNomina, t2.salario_base AS salarioBase, 
                                        t2.complemento AS complementoReporte, t2.bono_de_zona AS bonoZona, t3.puesto AS idPuesto
	                                        FROM tblRH_EK_Tabuladores AS t1
	                                        INNER JOIN tblRH_EK_Tabulador_Puesto AS t2 ON t2.tabulador = t1.id
	                                        INNER JOIN tblRH_EK_Puestos AS t3 ON t3.puesto = t2.puesto
		                                        WHERE t1.esActivo = @esActivo AND t1.cc = @cc AND t3.esActivo = @esActivo AND t2.year = @anio",
                    parametros = new { esActivo = true, cc = cc, anio = DateTime.Now.Year }
                }).ToList();

                System.Globalization.CultureInfo ci = new System.Globalization.CultureInfo("en-us");
                List<TabuladoresDTO> lstTabuladoresDTO = new List<TabuladoresDTO>();
                TabuladoresDTO objTabuladorDTO = new TabuladoresDTO();
                int idTabulador = 0;
                foreach (var item in lstTabuladores)
                {
                    objTabuladorDTO = new TabuladoresDTO();
                    objTabuladorDTO.tab = item.tab;
                    objTabuladorDTO.idPuesto = item.idPuesto;
                    objTabuladorDTO.puesto = item.puesto;
                    objTabuladorDTO.strTipoNomina = (int)item.tipoNomina == (int)TipoNominaEnum.semanal ? "Sem" : "Quin";

                    objTabuladorDTO.salarioBase = item.salarioBase;
                    objTabuladorDTO.complementoReporte = item.complementoReporte;
                    objTabuladorDTO.bonoZona = item.bonoZona;
                    objTabuladorDTO.totalNominal = (Convert.ToDecimal(item.salarioBase) + Convert.ToDecimal(item.complementoReporte) + Convert.ToDecimal(item.bonoZona)).ToString();
                    decimal totalNominal = Convert.ToDecimal(item.salarioBase) + Convert.ToDecimal(item.complementoReporte) + Convert.ToDecimal(item.bonoZona);
                    objTabuladorDTO.totalMensual = GetTotalMensual((int)item.tipoNomina, (decimal)totalNominal);

                    objTabuladorDTO.salarioBase = Convert.ToDecimal(objTabuladorDTO.salarioBase).ToString("C");
                    objTabuladorDTO.complementoReporte = Convert.ToDecimal(objTabuladorDTO.complementoReporte).ToString("C");
                    objTabuladorDTO.bonoZona = Convert.ToDecimal(objTabuladorDTO.bonoZona).ToString("C");
                    objTabuladorDTO.totalNominal = Convert.ToDecimal(objTabuladorDTO.totalNominal).ToString("C");
                    objTabuladorDTO.totalMensual = Convert.ToDecimal(objTabuladorDTO.totalMensual).ToString("C");

                    lstTabuladoresDTO.Add(objTabuladorDTO);

                    if (idTabulador <= 0)
                        idTabulador = item.tab;
                }

                #region SE OBTIENE EL CC CON SU DESCRIPCION
                string ccDescripcion = string.Empty;
                tblP_CC objCC = _context.tblP_CC.Where(w => w.cc == cc && w.estatus).FirstOrDefault();
                if (objCC == null)
                    throw new Exception("Ocurrió un error al obtener la descripción del CC.");

                ccDescripcion = string.Format("[{0}] {1}", objCC.cc, objCC.descripcion);
                #endregion

                // SE ORDENA ALFABETICAMENTE POR EL NOMBRE DEL PUESTO
                lstTabuladoresDTO = lstTabuladoresDTO.OrderBy(o => o.puesto).ToList();

                resultado.Add("lstTabuladoresDTO", lstTabuladoresDTO);
                resultado.Add("nombreEmpresa", (string)vSesiones.sesionEmpresaActualNombre);
                resultado.Add("ccDescripcion", ccDescripcion);
                resultado.Add("fechaActual", DateTime.Now);
                resultado.Add("idTab", idTabulador);
                #endregion
            }
            catch (Exception e)
            {
                LogError(0, 0, NombreControlador, "GetReporteTabuladores", e, AccionEnum.CONSULTA, 0, new { cc = cc });
                resultado.Add(MESSAGE, e.Message);
                resultado.Add(SUCCESS, false);
            }
            return resultado;
        }

        private string GetTotalMensual(int tipoNomina, decimal totalNominal)
        {
            decimal totalMensual = 0;
            try
            {
                #region VALIDACIONES
                string mensajeError = "Ocurrió un error al obtener el total mensual.";
                if (tipoNomina <= 0) { throw new Exception(mensajeError); }
                if (totalNominal <= 0) { throw new Exception(mensajeError); }
                #endregion

                #region SE OBTIENE EL TOTAL MENSUAL
                switch (tipoNomina)
                {
                    case (int)TipoNominaEnum.semanal:
                        totalMensual = ((decimal)totalNominal / 7) * (decimal)30.04;
                        break;
                    case (int)TipoNominaEnum.quincenal:
                        totalMensual = totalNominal * 2;
                        break;
                    default:
                        break;
                }
                #endregion
            }
            catch (Exception e)
            {
                LogError(0, 0, NombreControlador, "GetTotalMensual", e, AccionEnum.CONSULTA, 0, new { tipoNomina = tipoNomina, totalNominal = totalNominal });
                return totalMensual.ToString();
            }
            return totalMensual.ToString();
        }



        #endregion

        #region DIAS PARA INGRESOS
        public bool GetPuedeEditarDiasDisponibles()
        {
            var puedeEditar = false;

            using (var _ctx = new MainContext())
            {
                try
                {
                    puedeEditar = _ctx.tblP_AccionesVistatblP_Usuario.Any(x => x.tblP_AccionesVista_id == 4031 && x.tblP_Usuario_id == vSesiones.sesionUsuarioDTO.id) || vSesiones.sesionUsuarioDTO.idPerfil == (int)PerfilUsuarioEnum.ADMINISTRADOR;
                }
                catch
                {
                    puedeEditar = false;
                }
            }

            return puedeEditar;
        }

        public Dictionary<string, object> GetDiasDisponibles()
        {
            resultado.Clear();

            using (var _ctx = new MainContext())
            {
                try
                {
                    if (_ctx.tblP_AccionesVistatblP_Usuario.Any(x => x.tblP_AccionesVista_id == 4031 && x.tblP_Usuario_id == vSesiones.sesionUsuarioDTO.id) || vSesiones.sesionUsuarioDTO.idPerfil == (int)PerfilUsuarioEnum.ADMINISTRADOR)
                    {
                        var diasDisponibles = _ctx.tblRH_REC_DiasPermitidos.Where(x => x.registroActivo)
                        .Select(x => new
                        {
                            x.anteriores,
                            x.posteriores
                        }).FirstOrDefault();

                        if (diasDisponibles != null)
                        {
                            resultado.Add(SUCCESS, true);
                            resultado.Add(ITEMS, diasDisponibles);
                        }
                        else
                        {
                            resultado.Add(SUCCESS, false);
                            resultado.Add(MESSAGE, "No se encontró información de los periodos de ingresos");
                        }
                    }
                    else
                    {
                        resultado.Add(SUCCESS, true);
                        resultado.Add(ITEMS, new { anteriores = 0, posteriores = 0 });
                    }
                }
                catch (Exception ex)
                {
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, ex.Message);
                }
            }

            return resultado;
        }

        public Dictionary<string, object> GetDiasDisponiblesParaLimitarFecha()
        {
            resultado.Clear();

            var fechaActual = DateTime.Now;

            using (var _ctx = new MainContext())
            {
                try
                {
                    var diasDisponibles = _ctx.tblRH_REC_DiasPermitidos.Where(x => x.registroActivo).ToList()
                        .Select(x => new DiasDisponiblesIngresosDTO
                        {
                            anterior = fechaActual.AddDays(-x.anteriores).ToString("yyyy-MM-dd"),
                            posterior = fechaActual.AddDays(x.posteriores).ToString("yyyy-MM-dd")
                        }).FirstOrDefault();

                    if (diasDisponibles != null)
                    {
                        resultado.Add(ITEMS, diasDisponibles);
                    }
                    else
                    {
                        resultado.Add(ITEMS, new DiasDisponiblesIngresosDTO { anterior = fechaActual.ToString("yyyy-MM-dd"), posterior = fechaActual.ToString("yyyy-MM-dd") });
                    }

                    resultado.Add(SUCCESS, true);
                }
                catch (Exception ex)
                {
                    resultado.Add(SUCCESS, true);
                    resultado.Add(ITEMS, new DiasDisponiblesIngresosDTO { anterior = fechaActual.ToString("yyyy-MM-dd"), posterior = fechaActual.ToString("yyyy-MM-dd") });
                }
            }

            return resultado;
        }

        public Dictionary<string, object> SetDiasDisponibles(int anteriores, int posteriores)
        {
            resultado.Clear();

            using (var _ctx = new MainContext())
            {
                try
                {
                    if (_ctx.tblP_AccionesVistatblP_Usuario.Any(x => x.tblP_AccionesVista_id == 4031 && x.tblP_Usuario_id == vSesiones.sesionUsuarioDTO.id) || vSesiones.sesionUsuarioDTO.idPerfil == (int)PerfilUsuarioEnum.ADMINISTRADOR)
                    {
                        var diasDisponibles = _ctx.tblRH_REC_DiasPermitidos.FirstOrDefault(x => x.registroActivo);
                        if (diasDisponibles != null)
                        {
                            diasDisponibles.anteriores = anteriores;
                            diasDisponibles.posteriores = posteriores;
                            diasDisponibles.fechaUltimaModificacion = DateTime.Now;
                            diasDisponibles.usuarioUltimaModificacion = vSesiones.sesionUsuarioDTO.id;
                            _ctx.SaveChanges();

                            var fechasDisponibles = new DiasDisponiblesIngresosDTO();
                            fechasDisponibles.anterior = DateTime.Now.AddDays(-diasDisponibles.anteriores).ToString("yyyy-MM-dd");
                            fechasDisponibles.posterior = DateTime.Now.AddDays(diasDisponibles.posteriores).ToString("yyyy-MM-dd");

                            resultado.Add(SUCCESS, true);
                            resultado.Add(ITEMS, fechasDisponibles);
                        }
                        else
                        {
                            resultado.Add(SUCCESS, false);
                            resultado.Add(MESSAGE, "No se encontró información para modificar los periodos de ingresos");
                        }
                    }
                    else
                    {
                        resultado.Add(SUCCESS, false);
                        resultado.Add(MESSAGE, "No tiene permiso para modificar los periodos de ingresos");
                    }
                }
                catch (Exception ex)
                {
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, ex.Message);
                }
            }

            return resultado;
        }
        #endregion

        #region EXAMEN MÉDICO
        public void GuardarExamenMedico(int idCandidato, tblRH_REC_ExamenMedico examenMedico, List<tblRH_REC_ExamenMedico_Antecedentes> listaAntecedentes, Byte[] archivoReporteExamenMedico)
        {
            using (var dbContextTransaction = _context.Database.BeginTransaction())
            {
                try
                {
                    examenMedico.usuarioCreacion_id = vSesiones.sesionUsuarioDTO.id;
                    examenMedico.fechaCreacion = DateTime.Now;
                    examenMedico.usuarioModificacion_id = 0;
                    examenMedico.fechaModificacion = null;
                    examenMedico.registroActivo = true;

                    _context.tblRH_REC_ExamenMedico.Add(examenMedico);
                    _context.SaveChanges();

                    foreach (var ant in listaAntecedentes)
                    {
                        ant.examenMedico_id = examenMedico.id;
                        ant.registroActivo = true;

                        _context.tblRH_REC_ExamenMedico_Antecedentes.Add(ant);
                        _context.SaveChanges();
                    }

                    #region Guardar registro tblRH_REC_Archivos y archivo en el servidor.
                    var CarpetaNueva = Path.Combine(RutaServidor, idCandidato.ToString());
                    ExisteCarpeta(CarpetaNueva, true);

                    string nombreArchivo = "Examen Médico_" + DateTime.Now.ToString("dd-MM-y HH:mm:ss").Replace(":", "-") + ".pdf";
                    string rutaArchivo = Path.Combine(CarpetaNueva, nombreArchivo);

                    tblRH_REC_Archivos objArchivo = new tblRH_REC_Archivos
                    {
                        idCandidato = idCandidato,
                        claveEmpleado = 0,
                        idFase = 1017,
                        idActividad = 73,
                        tipoArchivo = (int)TipoArchivoEnum.examenMedico,
                        nombreArchivo = nombreArchivo,
                        ubicacionArchivo = rutaArchivo,
                        fechaCreacion = DateTime.Now,
                        fechaModificacion = new DateTime(2000, 01, 01),
                        idUsuarioCreacion = (int)vSesiones.sesionUsuarioDTO.id,
                        idUsuarioModificacion = 0,
                        esActivo = true
                    };

                    _context.tblRH_REC_Archivos.Add(objArchivo);
                    _context.SaveChanges();

                    File.WriteAllBytes(rutaArchivo, archivoReporteExamenMedico);
                    #endregion

                    dbContextTransaction.Commit();
                }
                catch (Exception e)
                {
                    dbContextTransaction.Rollback();
                    LogError(16, 16, "ReclutamientosController", "GuardarExamenMedico", e, AccionEnum.AGREGAR, 0, new { examenMedico = examenMedico, listaAntecedentes = listaAntecedentes });
                }
            }


        }
        #endregion

        public void factorizar()
        {
            factorizarPlantilla();
            return;

            using (var ctx = new MainContext())
            {
                using (var transaccion = ctx.Database.BeginTransaction())
                {
                    try
                    {
                        var fecha = DateTime.Now;

                        var ccsAdministrativos = new List<string>
                    {
                        /*CONTRUPLAN
                        "001", "002", "003", "004", "005", "006", "007", "008", "011", "012", "013", "014", "016", "017", "018", "019", "023", "027", "028", "029", "031", "993", "998", "A02", "A03", "A04"
                        */

                        /*PERU*/
                        //"032"

                        /*COLOMBIA*/
                        "D07"
                    };

                        var ccsCieloAbierto = new List<string>
                    {
                        /*CONSTRUPLAN
                        "146", "162", "166", "168", "170", "180", "194"
                        */

                        /*ARRENDADORA*/
                        //"103"
                    };

                        var ccsSubterranea = new List<string>
                    {
                        /*CONSTRUPLAN
                        "183", "189"
                        */
                    };

                        var ccsConstruccion = new List<string>
                    {
                        /*CONSTRUPLAN
                        "174", "177", "182", "186", "187", "188", "190", "191", "192", "232", "234", "235", "236", "237", "238"
                        */

                        /*ARRENDADORA*/
                        //"114", "240"
                    };

                        var ccsIndustriales = new List<string>
                    {
                        /*CONSTRUPLAN
                        "043", "044", "556", "559", "A67", "A70", "A71", "C11", "C13", "C14", "C15", "C16", "C17", "C18", "C35", "C36", "C37", "C38", "C39", "C40", "C41", "C42", "C43", "C44", "C45", "C46", "C58",
                        "C60", "C65", "C66", "C68", "C69", "C70", "C71", "C72", "C73", "C78", "C81", "C82", "C83", "C84", "C85", "C88", "C90", "C91", "C92", "C93", "C94", "C95", "C96", "C97", "C98", "C99", "D03",
                        "D06"
                        */
                        "C19"
                    };

                        var ccsTaller = new List<string>
                    {
                        /*CONSTRUPLAN
                        "010", "973"
                        */

                        /*ARRENDADORA*/
                        //"001", "002", "004", "100", "101"
                    };

                        var ccsMetal = new List<string>
                    {
                        /*CONSTRUPLAN
                        "A62", "A68", "A69", "A73"
                        */
                    };

                        var categoriasPuestos = new List<string>
                    {
                        " A (SEM)", " A", " B SEMANAL", " B", " B (Q)", " C", " C (Q)", " D", " E", " F", " A (Q)", " Q", " (S)", " (Q)", " AA", " (SEM)"
                    };

                        var categorias = ctx.tblRH_TAB_CatCategorias.Select(x => x.concepto).ToList();
                        var puestos = ctx.tblRH_EK_Puestos.Where(x => x.registroActivo).OrderBy(x => x.descripcion).ToList();
                        //var puestos = ctx.tblRH_EK_Puestos.Where(x => x.registroActivo && (x.puesto == 214 || x.puesto == 120 || x.puesto == 117 || x.puesto == 117 || x.puesto == 187 || x.puesto == 247 || x.puesto == 119 || x.puesto == 121 || x.puesto == 79 || x.puesto == 116 || x.puesto == 829 || x.puesto == 78 || x.puesto == 80)).ToList();
                        var tabuladoresAnteriores = ctx.tblRH_EK_Tabuladores.ToList();
                        //var tabuladoresAnteriores = ctx.tblRH_EK_Tabuladores.Where(x => x.cc == "272").ToList();
                        var tabuladoresAnterioresIds = tabuladoresAnteriores.Select(x => x.id).ToList();
                        var plantillaPersonalAnterior = ctx.tblRH_EK_Plantilla_Personal.ToList();
                        //var plantillaPersonalAnterior = ctx.tblRH_EK_Plantilla_Personal.Where(x => x.cc == "272").ToList();
                        var plantillaPersonalPuestoAnterior = ctx.tblRH_EK_Plantilla_Puesto.ToList();
                        var plantillaPersonalAditivaAnterior = ctx.tblRH_EK_Plantilla_Aditiva.ToList();
                        var empleadosTodos = ctx.tblRH_EK_Empleados.ToList();
                        var quitarEstosPuestosDeLaLista = new List<int>();

                        do
                        {
                            puestos = puestos.Where(x => !quitarEstosPuestosDeLaLista.Contains(x.puesto)).ToList();
                            foreach (var puesto in puestos)
                            {
                                string categoria = null;
                                string puestoSinCategoria = null;
                                tblRH_EK_Puestos puestoPadre = null;
                                var puestosSimilares = new List<tblRH_EK_Puestos>();

                                foreach (var categoriaPuesto in categoriasPuestos)
                                {
                                    if (puesto.descripcion.Trim().EndsWith(categoriaPuesto))
                                    {
                                        int posicionCategoria = puesto.descripcion.Trim().LastIndexOf(categoriaPuesto);

                                        categoria = categoriaPuesto;
                                        puestoSinCategoria = puesto.descripcion.Trim().Substring(0, posicionCategoria);

                                        puestoPadre = puestos.FirstOrDefault(x => x.descripcion == puestoSinCategoria);
                                        if (puestoPadre == null)
                                        {
                                            puesto.descripcion = puestoSinCategoria;
                                            puesto.fechaModificacion = fecha;
                                            puesto.FK_UsuarioModificacion = 13;
                                            ctx.SaveChanges();

                                            puestoPadre = puesto;
                                        }
                                        var puestosParecidos = puestos.Where(x => x.descripcion.Contains(puestoPadre.descripcion.Trim()) && x.puesto != puestoPadre.puesto).ToList();
                                        foreach (var puestoParecido in puestosParecidos)
                                        {
                                            if (puestoParecido.descripcion.Trim() == puestoPadre.descripcion.Trim())
                                            {
                                                puestosSimilares.Add(puestoParecido);
                                            }
                                            else
                                            {
                                                foreach (var catPuesto in categoriasPuestos)
                                                {
                                                    if (puestoParecido.descripcion.Trim().EndsWith(catPuesto))
                                                    {
                                                        int posicionCategoria2 = puestoParecido.descripcion.Trim().LastIndexOf(catPuesto);
                                                        string puestoSinCategoria2 = puestoParecido.descripcion.Trim().Substring(0, posicionCategoria2);
                                                        if (puestoSinCategoria == puestoSinCategoria2)
                                                        {
                                                            puestosSimilares.Add(puestoParecido);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        //puestosSimilares = puestos.Where(x => x.descripcion.Contains(puestoPadre.descripcion.Trim()) && x.puesto != puestoPadre.puesto).ToList();

                                        break;
                                    }
                                }

                                if (puestoPadre == null)
                                {
                                    puestoPadre = puesto;

                                    var puestosParecidos = puestos.Where(x => x.descripcion.Contains(puestoPadre.descripcion.Trim()) && x.puesto != puestoPadre.puesto).ToList();
                                    foreach (var puestoParecido in puestosParecidos)
                                    {
                                        if (puestoParecido.descripcion.Trim() == puestoPadre.descripcion.Trim())
                                        {
                                            puestosSimilares.Add(puestoParecido);
                                        }
                                        else
                                        {
                                            foreach (var catPuesto in categoriasPuestos)
                                            {
                                                if (puestoParecido.descripcion.Trim().EndsWith(catPuesto))
                                                {
                                                    int posicionCategoria2 = puestoParecido.descripcion.Trim().LastIndexOf(catPuesto);
                                                    string puestoSinCategoria2 = puestoParecido.descripcion.Trim().Substring(0, posicionCategoria2);
                                                    if (puestoPadre.descripcion.Trim() == puestoSinCategoria2)
                                                    {
                                                        puestosSimilares.Add(puestoParecido);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                var puestosIDs = puestosSimilares.Select(x => x.puesto).ToList();
                                puestosIDs.Add(puestoPadre.puesto);
                                quitarEstosPuestosDeLaLista = puestosIDs;

                                foreach (var puestoSimilar in puestosSimilares)
                                {
                                    puestoSimilar.registroActivo = false;
                                    puestoSimilar.puestoNuevo = puestoPadre.puesto;
                                }
                                ctx.SaveChanges();

                                puestoPadre.puestoNuevo = puestoPadre.puesto;
                                ctx.SaveChanges();

                                var tabuladorNuevo = ctx.tblRH_TAB_Tabuladores.FirstOrDefault(x => x.FK_Puesto == puestoPadre.puesto);
                                if (tabuladorNuevo == null)
                                {
                                    if (ctx.tblRH_EK_Tabulador_Puesto.Any(x => x.puesto == puesto.puesto))
                                    {
                                        tabuladorNuevo = new tblRH_TAB_Tabuladores();
                                        tabuladorNuevo.FK_Puesto = puestoPadre.puesto;
                                        tabuladorNuevo.tabuladorAutorizado = EstatusGestionAutorizacionEnum.AUTORIZADO;
                                        tabuladorNuevo.comentarioRechazo = null;
                                        tabuladorNuevo.FK_UsuarioCreacion = 13;
                                        tabuladorNuevo.FK_UsuarioModificacion = 13;
                                        tabuladorNuevo.fechaCreacion = fecha;
                                        tabuladorNuevo.fechaModificacion = fecha;
                                        tabuladorNuevo.registroActivo = true;
                                        ctx.tblRH_TAB_Tabuladores.Add(tabuladorNuevo);
                                        ctx.SaveChanges();
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }

                                var tabuladoresPuestosAnterior = ctx.tblRH_EK_Tabulador_Puesto
                                    .Where(x => tabuladoresAnterioresIds.Contains(x.tabulador) && puestosIDs.Contains(x.puesto))
                                    .GroupBy(x => new { x.tabulador, x.puesto, x.salario_base, x.complemento, x.bono_de_zona })
                                    .OrderByDescending(x => x.Key.salario_base + x.Key.complemento + x.Key.bono_de_zona).ToList();

                                int contadorAdministrativos = 0;
                                int contadorCieloAbierto = 0;
                                int contadorSubterranea = 0;
                                int contadorConstruccion = 0;
                                int contadorIndustriales = 0;
                                int contadorTaller = 0;
                                int contadorMetal = 0;
                                int contadorSinNegocio = 0;
                                List<int> puestosConsultados = new List<int>();
                                foreach (var tabuladorPuestoAnterior in tabuladoresPuestosAnterior)
                                {
                                    var empleados = new List<tblRH_EK_Empleados>();

                                    var nuevoTabDet = new tblRH_TAB_TabuladoresDet();
                                    nuevoTabDet.FK_Tabulador = tabuladorNuevo.id;

                                    var tabAnterior = tabuladoresAnteriores.FirstOrDefault(x => x.id == tabuladorPuestoAnterior.Key.tabulador);
                                    if (tabAnterior != null)
                                    {
                                        if (ccsAdministrativos.Contains(tabAnterior.cc))
                                        {
                                            nuevoTabDet.FK_LineaNegocio = 1;
                                            contadorAdministrativos++;
                                            nuevoTabDet.FK_Categoria = contadorAdministrativos;

                                            empleados = empleadosTodos.Where(x => x.puesto.HasValue && x.puesto.Value == tabuladorPuestoAnterior.Key.puesto && ccsAdministrativos.Contains(x.cc_contable)).ToList();
                                        }
                                        if (ccsCieloAbierto.Contains(tabAnterior.cc))
                                        {
                                            nuevoTabDet.FK_LineaNegocio = 2;
                                            contadorCieloAbierto++;
                                            nuevoTabDet.FK_Categoria = contadorCieloAbierto;

                                            empleados = empleadosTodos.Where(x => x.puesto.HasValue && x.puesto.Value == tabuladorPuestoAnterior.Key.puesto && ccsCieloAbierto.Contains(x.cc_contable)).ToList();
                                        }
                                        if (ccsSubterranea.Contains(tabAnterior.cc))
                                        {
                                            nuevoTabDet.FK_LineaNegocio = 3;
                                            contadorSubterranea++;
                                            nuevoTabDet.FK_Categoria = contadorSubterranea;

                                            empleados = empleadosTodos.Where(x => x.puesto.HasValue && x.puesto.Value == tabuladorPuestoAnterior.Key.puesto && ccsSubterranea.Contains(x.cc_contable)).ToList();
                                        }
                                        if (ccsConstruccion.Contains(tabAnterior.cc))
                                        {
                                            nuevoTabDet.FK_LineaNegocio = 4;
                                            contadorConstruccion++;
                                            nuevoTabDet.FK_Categoria = contadorConstruccion;

                                            empleados = empleadosTodos.Where(x => x.puesto.HasValue && x.puesto.Value == tabuladorPuestoAnterior.Key.puesto && ccsConstruccion.Contains(x.cc_contable)).ToList();
                                        }
                                        if (ccsIndustriales.Contains(tabAnterior.cc))
                                        {
                                            nuevoTabDet.FK_LineaNegocio = 5;
                                            contadorIndustriales++;
                                            nuevoTabDet.FK_Categoria = contadorIndustriales;

                                            empleados = empleadosTodos.Where(x => x.puesto.HasValue && x.puesto.Value == tabuladorPuestoAnterior.Key.puesto && ccsIndustriales.Contains(x.cc_contable)).ToList();
                                        }
                                        if (ccsTaller.Contains(tabAnterior.cc))
                                        {
                                            nuevoTabDet.FK_LineaNegocio = 6;
                                            contadorTaller++;
                                            nuevoTabDet.FK_Categoria = contadorTaller;

                                            empleados = empleadosTodos.Where(x => x.puesto.HasValue && x.puesto.Value == tabuladorPuestoAnterior.Key.puesto && ccsTaller.Contains(x.cc_contable)).ToList();
                                        }
                                        if (ccsMetal.Contains(tabAnterior.cc))
                                        {
                                            nuevoTabDet.FK_LineaNegocio = 7;
                                            contadorMetal++;
                                            nuevoTabDet.FK_Categoria = contadorMetal;

                                            empleados = empleadosTodos.Where(x => x.puesto.HasValue && x.puesto.Value == tabuladorPuestoAnterior.Key.puesto && ccsMetal.Contains(x.cc_contable)).ToList();
                                        }
                                        if (nuevoTabDet.FK_LineaNegocio == 0)
                                        {
                                            nuevoTabDet.FK_LineaNegocio = 8;
                                            contadorSinNegocio++;
                                            nuevoTabDet.FK_Categoria = contadorSinNegocio;

                                            empleados = empleadosTodos
                                                .Where(x =>
                                                    x.puesto.HasValue &&
                                                    x.puesto.Value == tabuladorPuestoAnterior.Key.puesto &&
                                                    !ccsAdministrativos.Contains(x.cc_contable) &&
                                                    !ccsCieloAbierto.Contains(x.cc_contable) &&
                                                    !ccsSubterranea.Contains(x.cc_contable) &&
                                                    !ccsConstruccion.Contains(x.cc_contable) &&
                                                    !ccsIndustriales.Contains(x.cc_contable) &&
                                                    !ccsTaller.Contains(x.cc_contable) &&
                                                    !ccsMetal.Contains(x.cc_contable)).ToList();
                                        }
                                    }
                                    else
                                    {
                                        throw new Exception("no se encontró tabuladorAnterior " + tabuladorPuestoAnterior.Key.tabulador);
                                    }

                                    nuevoTabDet.sueldoBase = tabuladorPuestoAnterior.Key.salario_base;
                                    nuevoTabDet.complemento = tabuladorPuestoAnterior.Key.complemento;
                                    nuevoTabDet.totalNominal = nuevoTabDet.sueldoBase + nuevoTabDet.complemento;
                                    nuevoTabDet.sueldoMensual = puestoPadre.FK_TipoNomina == 1 ? ((nuevoTabDet.totalNominal / 7) * 30.4m) : nuevoTabDet.totalNominal * 2;
                                    nuevoTabDet.FK_EsquemaPago = nuevoTabDet.complemento == 0 ? 2 : 1;
                                    nuevoTabDet.FK_UsuarioCreacion = 13;
                                    nuevoTabDet.FK_UsuarioModificacion = 13;
                                    nuevoTabDet.fechaCreacion = fecha;
                                    nuevoTabDet.fechaModificacion = fecha;
                                    nuevoTabDet.registroActivo = true;

                                    var tabDetExiste = ctx.tblRH_TAB_TabuladoresDet
                                            .FirstOrDefault(x =>
                                                x.FK_Tabulador == nuevoTabDet.FK_Tabulador &&
                                                x.FK_LineaNegocio == nuevoTabDet.FK_LineaNegocio &&
                                                x.sueldoBase == nuevoTabDet.sueldoBase &&
                                                x.complemento == nuevoTabDet.complemento &&
                                                x.totalNominal == nuevoTabDet.totalNominal &&
                                                x.FK_EsquemaPago == nuevoTabDet.FK_EsquemaPago);
                                    if (tabDetExiste == null)
                                    {
                                        ctx.tblRH_TAB_TabuladoresDet.Add(nuevoTabDet);
                                        ctx.SaveChanges();
                                    }
                                    else
                                    {
                                        nuevoTabDet = tabDetExiste;

                                        switch (nuevoTabDet.FK_LineaNegocio)
                                        {
                                            case 1:
                                                contadorAdministrativos = nuevoTabDet.FK_Categoria;
                                                break;
                                            case 2:
                                                contadorCieloAbierto = nuevoTabDet.FK_Categoria;
                                                break;
                                            case 3:
                                                contadorSubterranea = nuevoTabDet.FK_Categoria;
                                                break;
                                            case 4:
                                                contadorConstruccion = nuevoTabDet.FK_Categoria;
                                                break;
                                            case 5:
                                                contadorIndustriales = nuevoTabDet.FK_Categoria;
                                                break;
                                            case 6:
                                                contadorTaller = nuevoTabDet.FK_Categoria;
                                                break;
                                            case 7:
                                                contadorMetal = nuevoTabDet.FK_Categoria;
                                                break;
                                            case 8:
                                                contadorSinNegocio = nuevoTabDet.FK_Categoria;
                                                break;
                                        }
                                    }

                                    //EMPLEADOS
                                    if (!puestosConsultados.Contains(tabuladorPuestoAnterior.Key.puesto))
                                    {
                                        foreach (var empleado in empleados)
                                        {
                                            empleado.puesto = tabuladorNuevo.FK_Puesto;
                                        }
                                        ctx.SaveChanges();
                                    }

                                    var cveEmpleados = empleados.Select(x => x.clave_empleado).ToList();
                                    var historialEmpleados = ctx.tblRH_EK_Tabulador_Historial.Where(x => cveEmpleados.Contains(x.clave_empleado) && x.tabulador == tabuladorPuestoAnterior.Key.tabulador && x.FK_Tabulador == 0).ToList();
                                    foreach (var historialEmpleado in historialEmpleados)
                                    {
                                        historialEmpleado.FK_Tabulador = tabuladorNuevo.id;
                                        historialEmpleado.FK_TabuladorDet = nuevoTabDet.id;
                                    }
                                    ctx.SaveChanges();
                                    //EMPLEADOS END

                                    //LINEA NEGOCIO
                                    var lineaNegocioCC = ctx.tblRH_TAB_CatLineaNegocioDet.FirstOrDefault(x => x.registroActivo && x.FK_LineaNegocio == nuevoTabDet.FK_LineaNegocio && x.cc == tabAnterior.cc);
                                    if (lineaNegocioCC == null)
                                    {
                                        lineaNegocioCC = new tblRH_TAB_CatLineaNegocioDet();
                                        lineaNegocioCC.FK_LineaNegocio = nuevoTabDet.FK_LineaNegocio;
                                        lineaNegocioCC.cc = tabAnterior.cc;
                                        lineaNegocioCC.FK_UsuarioCreacion = 13;
                                        lineaNegocioCC.FK_UsuarioModificacion = 13;
                                        lineaNegocioCC.fechaCreacion = fecha;
                                        lineaNegocioCC.fechaModificacion = fecha;
                                        lineaNegocioCC.registroActivo = true;
                                        ctx.tblRH_TAB_CatLineaNegocioDet.Add(lineaNegocioCC);
                                        ctx.SaveChanges();
                                    }
                                    //LINEA NEGOCIO END

                                    //PLANTILLA
                                    var planAnterior = plantillaPersonalAnterior.FirstOrDefault(x => x.cc == lineaNegocioCC.cc);
                                    if (planAnterior != null)
                                    {
                                        var plantillaNueva = ctx.tblRH_TAB_PlantillasPersonal.FirstOrDefault(x => x.cc == tabAnterior.cc && x.FK_LineaNegocio == lineaNegocioCC.FK_LineaNegocio);
                                        if (plantillaNueva == null)
                                        {
                                            plantillaNueva = new tblRH_TAB_PlantillasPersonal();
                                            plantillaNueva.cc = lineaNegocioCC.cc;
                                            plantillaNueva.FK_LineaNegocio = lineaNegocioCC.FK_LineaNegocio;
                                            plantillaNueva.plantillaAutorizada = EstatusGestionAutorizacionEnum.AUTORIZADO;
                                            plantillaNueva.comentarioRechazo = null;
                                            plantillaNueva.FK_UsuarioCreacion = 13;
                                            plantillaNueva.FK_UsuarioModificacion = 13;
                                            plantillaNueva.fechaCreacion = fecha;
                                            plantillaNueva.fechaModificacion = fecha;
                                            plantillaNueva.registroActivo = true;
                                            ctx.tblRH_TAB_PlantillasPersonal.Add(plantillaNueva);
                                            ctx.SaveChanges();
                                        }

                                        var planAditivasAnterior = plantillaPersonalAditivaAnterior.Where(x => x.id_plantilla == planAnterior.id_plantilla && puestosIDs.Contains(x.puesto)).ToList();
                                        if (planAditivasAnterior.Count > 0 && !ctx.tblRH_TAB_PlantillasPersonalDet.Any(x => x.FK_Puesto == tabuladorNuevo.FK_Puesto && x.FK_Plantilla == plantillaNueva.id))
                                        {
                                            foreach (var aditiva in planAditivasAnterior)
                                            {
                                                aditiva.puesto = tabuladorNuevo.FK_Puesto;
                                            }
                                            ctx.SaveChanges();
                                        }

                                        //REQUISICION
                                        var requisicionesAnteriores = ctx.tblRH_REC_Requisicion.Where(x => x.cc == tabAnterior.cc && tabuladorPuestoAnterior.Key.puesto == x.puesto && x.id_plantilla == planAnterior.id_plantilla).ToList();
                                        if (requisicionesAnteriores.Count > 0)
                                        {
                                            foreach (var requiAnterior in requisicionesAnteriores)
                                            {
                                                requiAnterior.puesto = tabuladorNuevo.FK_Puesto;
                                                requiAnterior.id_plantilla = plantillaNueva.id;
                                                requiAnterior.idTabuladorDet = nuevoTabDet.id;
                                                requiAnterior.usuarioModificacion_id = 13;
                                                requiAnterior.fechaModificacion = fecha;
                                            }
                                            ctx.SaveChanges();
                                        }
                                        //REQUISICION END

                                        var planPuestoAnterior = plantillaPersonalPuestoAnterior.Where(x => x.id_plantilla == planAnterior.id_plantilla && puestosIDs.Contains(x.puesto)).ToList();
                                        if (planPuestoAnterior.Count > 0 && !ctx.tblRH_TAB_PlantillasPersonalDet.Any(x => x.FK_Puesto == tabuladorNuevo.FK_Puesto && x.FK_Plantilla == plantillaNueva.id))
                                        {
                                            var plantillaDetNueva = new tblRH_TAB_PlantillasPersonalDet();
                                            plantillaDetNueva.FK_Plantilla = plantillaNueva.id;
                                            plantillaDetNueva.FK_Puesto = tabuladorNuevo.FK_Puesto;
                                            plantillaDetNueva.personalNecesario = planPuestoAnterior.Where(x => x.estatus == "A").Sum(x => x.cantidad);
                                            plantillaDetNueva.FK_UsuarioCreacion = 13;
                                            plantillaDetNueva.FK_UsuarioModificacion = 13;
                                            plantillaDetNueva.fechaCreacion = fecha;
                                            plantillaDetNueva.fechaModificacion = fecha;
                                            plantillaDetNueva.registroActivo = true;
                                            ctx.tblRH_TAB_PlantillasPersonalDet.Add(plantillaDetNueva);
                                            ctx.SaveChanges();
                                        }
                                    }
                                    //PLANTILLA END
                                }

                                break;
                            }
                        } while (puestos.Count > 0);

                        transaccion.Commit();
                    }
                    catch (Exception ex)
                    {
                        transaccion.Rollback();
                    }
                }
            }
            
        }

        public void eliminarDuplicados()
        {
            using (var ctx = new MainContext())
            {
                using (var transaccion = ctx.Database.BeginTransaction())
                {
                    var plantillas = ctx.tblRH_TAB_PlantillasPersonal.Where(x => x.registroActivo).ToList();

                    foreach (var plantilla in plantillas)
                    {
                        var detallesGrupo = ctx.tblRH_TAB_PlantillasPersonalDet.Where(x => x.registroActivo && x.FK_Plantilla == plantilla.id).OrderBy(x => x.id).GroupBy(x => x.FK_Puesto).ToList();
                        foreach (var detalleGrupo in detallesGrupo)
                        {
                            foreach (var detalle in detalleGrupo)
                            {
                                if (detalle != detalleGrupo.First())
                                {
                                    ctx.tblRH_TAB_PlantillasPersonalDet.Remove(detalle);
                                    ctx.SaveChanges();
                                }
                            }
                        }
                    }

                    transaccion.Commit();
                }
            }
        }

        public void factorizarPlantilla()
        {
            var fecha = DateTime.Now;

            using (var ctx = new MainContext())
            {
                using (var transaccion = ctx.Database.BeginTransaction())
                {
                    try
                    {
                        var puestosAgrupados = ctx.tblRH_EK_Puestos.Where(x => x.puestoNuevo.HasValue).GroupBy(x => x.puestoNuevo.Value).ToList();
                        //var plantillasNuevas = ctx.tblRH_TAB_PlantillasPersonal.Where(x => x.registroActivo).ToList();
                        var plantillasNuevas = ctx.tblRH_TAB_PlantillasPersonal.Where(x => x.registroActivo && x.cc == "357").ToList();

                        foreach (var plantillaNueva in plantillasNuevas)
                        {
                            var plantillaDetNueva = ctx.tblRH_TAB_PlantillasPersonalDet.Where(x => x.registroActivo && x.FK_Plantilla == plantillaNueva.id).ToList();
                            var agregados = new List<int>();
                            
                            var plantillaAnterior = ctx.tblRH_EK_Plantilla_Personal.FirstOrDefault(x => x.cc == plantillaNueva.cc && x.estatus == "A");
                            var plantillaDetAnterior = ctx.tblRH_EK_Plantilla_Puesto.Where(x => x.id_plantilla == plantillaAnterior.id_plantilla && x.estatus == "A").ToList();
                            var plantillaAditivaAnterior = ctx.tblRH_EK_Plantilla_Aditiva.Where(x => x.id_plantilla == plantillaAnterior.id_plantilla && x.estatus == "A").ToList();

                            foreach (var puestoAnterior in plantillaDetAnterior)
                            {
                                var grupoPuesto = puestosAgrupados.FirstOrDefault(x => x.Any(a => a.puesto == puestoAnterior.puesto));
                                if (grupoPuesto != null && grupoPuesto.Count() > 0)
                                {
                                    if (!plantillaDetNueva.Any(x => x.FK_Puesto == grupoPuesto.Key) && !agregados.Contains(grupoPuesto.Key))
                                    {
                                        agregados.Add(grupoPuesto.Key);

                                        var puestosFactorizados = grupoPuesto.Select(x => x.puesto).ToList();
                                        var puestosEnPlantillaAnterior = plantillaDetAnterior.Where(x => puestosFactorizados.Contains(x.puesto)).ToList();

                                        var crearDetPlantilla = new tblRH_TAB_PlantillasPersonalDet();
                                        crearDetPlantilla.FK_Plantilla = plantillaNueva.id;
                                        crearDetPlantilla.FK_Puesto = grupoPuesto.Key;
                                        crearDetPlantilla.personalNecesario = puestosEnPlantillaAnterior.Sum(x => x.cantidad);
                                        crearDetPlantilla.FK_UsuarioCreacion = 13;
                                        crearDetPlantilla.FK_UsuarioModificacion = 13;
                                        crearDetPlantilla.fechaCreacion = fecha;
                                        crearDetPlantilla.fechaModificacion = fecha;
                                        crearDetPlantilla.registroActivo = true;
                                        ctx.tblRH_TAB_PlantillasPersonalDet.Add(crearDetPlantilla);
                                        ctx.SaveChanges();
                                    }
                                }
                            }

                            foreach (var puestoAnterior in plantillaAditivaAnterior)
                            {
                                var grupoPuesto = puestosAgrupados.FirstOrDefault(x => x.Any(a => a.puesto == puestoAnterior.puesto));
                                if (grupoPuesto != null && grupoPuesto.Count() > 0)
                                {
                                    if (puestoAnterior.puesto != grupoPuesto.Key)
                                    {
                                        puestoAnterior.puesto = grupoPuesto.Key;
                                        ctx.SaveChanges();
                                    }
                                }
                            }
                        }

                        transaccion.Commit();
                    }
                    catch (Exception ex)
                    {
                        transaccion.Rollback();

                        var error = ex.Message;
                    }
                }
            }
        }

        public void factorizarAditivasConPlantilla0()
        {
            using (var ctx = new MainContext())
            {
                using (var transaccion = ctx.Database.BeginTransaction())
                {
                    try
                    {
                        var puestosAgrupados = ctx.tblRH_EK_Puestos.Where(x => x.puestoNuevo.HasValue).GroupBy(x => x.puestoNuevo.Value).ToList();

                        foreach (var puestoAgrupado in puestosAgrupados)
                        {
                            
                        }
                    }
                    catch (Exception ex)
                    {
                        transaccion.Rollback();

                        var error = ex.Message;
                    }
                }
            }
        }

        public bool PermisoTabuladorAltaEmpleado()
        {
            var permiso = true;
            try
            {
                var permisoVista = _context.tblP_AccionesVistatblP_Usuario
                    .Any(x =>
                        x.sistema == 16 &&
                        x.tblP_Usuario_id == vSesiones.sesionUsuarioDTO.id &&
                        x.tblP_AccionesVista_id == 4037
                    );

                permiso = !permisoVista;
            }
            catch (Exception ex)
            {
                permiso = false;
            }

            return permiso;
        }

        #region Datos Perú
        public List<ComboDTO> FillComboAFPPeru() 
        {
            try
            {
                #region FILL COMBO AFPS
                if ((int)vSesiones.sesionEmpresaActual == (int)EmpresaEnum.Peru)
                {
                    using (var dbStartSoft = new MainContextPeruStarSoftPLCONSTRU())
                    {
                        var lstProveedoresPeru = dbStartSoft.AFPS.Select(e => new Core.DTO.Principal.Generales.ComboDTO
                        {
                            Value = e.CODAFP,
                            Text = e.NOMBRE
                        }).ToList();
                        return lstProveedoresPeru;
                    }
                }
                else
                    return null;
                #endregion
            }
            catch (Exception e)
            {
                LogError(16, 16, "ReclutamientosController", "FillComboAFPPeru", e, AccionEnum.CONSULTA, 0, 0);
                return null;
            }
        }
        #endregion

        #region DATOS EMPLEADO PERU
        public Dictionary<string, object> GetSituacion(bool afiliado)
        {
            /*using (var ctxPl = new MainContextPeruStarSoftPLCONSTRU())
            {
                ctxPl.Database.Connection.Open();
                try
                {
                    var afiliados = new List<string> { "0", "2", "4", "6" };
                    var noAfiliados = new List<string> { "1", "3", "5", "7" };

                    var situaciones = new List<ComboBoxDTO>();

                    if (afiliado)
                    {
                        situaciones = ctxPl.SITUACION.Where(x => afiliados.Contains(x.CODIGO)).Select(x => new ComboBoxDTO
                        {
                            valor = x.CODIGO_RTPS.ToString(),
                            texto = x.DESCRIPCION.ToUpper()
                        }).ToList();
                    }
                    else
                    {
                        situaciones = ctxPl.SITUACION.Where(x => noAfiliados.Contains(x.CODIGO)).Select(x => new ComboBoxDTO
                        {
                            valor = x.CODIGO_RTPS.ToString(),
                            texto = x.DESCRIPCION.ToUpper()
                        }).ToList();
                    }

                    resultado.Add(SUCCESS, true);
                    resultado.Add(ITEMS, situaciones);
                }
                catch (Exception ex)
                {
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, ex.Message);
                }
            } */
            resultado.Add(SUCCESS, true);
            return resultado;
        }

        public Dictionary<string, object> GetRucEps()
        {
            using (var ctxPl = new MainContextPeruStarSoftPLCONSTRU())
            {
                try
                {
                    var rucs = ctxPl.EPS.Select(x => new ComboBoxDTO
                    {
                        valor = x.RUC,
                        texto = x.DESCRIPCION.ToUpper()
                    }).ToList();

                    resultado.Add(SUCCESS, true);
                    resultado.Add(ITEMS, rucs);
                }
                catch (Exception ex)
                {
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, ex.Message);
                }
            }

            return resultado;
        }

        public Dictionary<string, object> GetAfps()
        {
            using (var ctxPl = new MainContextPeruStarSoftPLCONSTRU())
            {
                try
                {
                    var afps = ctxPl.AFPS.Select(x => new ComboBoxDTO
                    {
                        valor = x.CODAFP,
                        texto = "[" + x.CODAFP + "] " + x.NOMBRE.ToUpper(),
                        datas = new List<ComboBoxDataDTO>
                            {
                                new ComboBoxDataDTO {
                                    data = "aporobli",
                                    valor = x.APOROBLI.ToString()
                                },
                                new ComboBoxDataDTO {
                                    data = "topeseguro",
                                    valor = x.TOPESEGURO.ToString()
                                },
                                new ComboBoxDataDTO {
                                    data = "comisionra",
                                    valor = x.COMISIONRA.ToString()
                                }
                            }
                    }).ToList();

                    resultado.Add(SUCCESS, true);
                    resultado.Add(ITEMS, afps);
                }
                catch (Exception ex)
                {
                    resultado.Add(SUCCESS, false);
                    resultado.Add(MESSAGE, ex.Message);
                }
            }

            return resultado;
        }

        public Dictionary<string, object> FillComboTiposTrabajadores()
        {
            resultado.Clear();

            try
            {
                var lstTipos = _context.tblRH_SS_TiposTrab.ToList().Select(e => new ComboBoxDTO 
                {
                    valor = e.TIPTRAB.ToString(),
                    texto = e.DESCRIP,
                }).ToList();

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, lstTipos);
            }
            catch (Exception e)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }

            return resultado;
        }

        public Dictionary<string,object> FillComboBancosPeru()
        {
            resultado.Clear();

            try
            {
                var lstBancos = _context.tblRH_SS_Bancos.Select(e => new ComboBoxDTO 
                {
                    valor = e.CODBANCO.ToString(),
                    texto = e.NOMBRE,
                });

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, lstBancos);
            }
            catch (Exception e)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }

            return resultado;
        }

        public Dictionary<string, object> FillComboRegimenLaboralPeru()
        {
            resultado.Clear();

            try
            {
                var lstBancos = _context.tblRH_SS_RegimenLaboral.Select(e => new ComboBoxDTO
                {
                    valor = e.id.ToString(),
                    texto = e.nombre,
                });

                resultado.Add(SUCCESS, true);
                resultado.Add(ITEMS, lstBancos);
            }
            catch (Exception e)
            {
                resultado.Add(SUCCESS, false);
                resultado.Add(MESSAGE, e.Message);
            }

            return resultado;
        }
        #endregion

        public tblRH_EK_Estados GetEstadoByID(int id) 
        {
            tblRH_EK_Estados resultado = new tblRH_EK_Estados();
            try
            {
                var estado = _context.tblRH_EK_Estados.FirstOrDefault(x => x.id == id);
                if (estado == null) return resultado;
                else return estado;
            }
            catch (Exception e) 
            {
                return resultado;
            }
        }

    }
}