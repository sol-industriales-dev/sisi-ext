using Core.DTO.Enkontrol.OrdenCompra;
using Data.Factory.Enkontrol.Compras;
using SIGOPLAN.Controllers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Newtonsoft.Json;
using Core.DTO.Principal.Generales;
using Core.DTO.Enkontrol.Alamcen;
using System.IO;

namespace SIGOPLAN.Areas.Enkontrol.Controllers.Compras
{
    public class OrdenCompraController : BaseController
    {
        OrdenCompraFactoryService ocfs;
        Dictionary<string, object> result;
        protected override void OnActionExecuting(ActionExecutingContext filterContext)
        {
            ocfs = new OrdenCompraFactoryService();
            base.OnActionExecuting(filterContext);
        }
        // GET: Enkontrol/OrdenCompra
        public ActionResult Generar()
        {
            return View();
        }
        public ActionResult Editar()
        {
            return View();
        }
        public ActionResult Autorizar()
        {
            return View();
        }
        public ActionResult Traspasar()
        {
            return View();
        }
        public ActionResult Surtido()
        {
            return View();
        }
        public ActionResult CuadroComparativo()
        {
            return View();
        }
        public ActionResult PendienteSurtir()
        {
            return View();
        }
        public ActionResult PendienteSurtirCompra()
        {
            return View();
        }
        public ActionResult Requisiciones()
        {
            return View();
        }
        public ActionResult EntradaNoInventariable()
        {
            return View();
        }
        public ActionResult SeguimientoAutorizacion()
        {
            return View();
        }
        #region Generar
        public ActionResult generarOC(List<GenOrdenCompraDTO> lstOC)
        {
            var result = new Dictionary<string, object>();
            try
            {
                if (lstOC.All(o => o.isValida() && o.lstPartida.All(p => p.isValida())))
                {
                    var numOc = ocfs.getOcService().generaNuevaOC(lstOC);
                    var isMultiple = numOc.Count > 1;
                    if (isMultiple)
                    {
                        result.Add("numOcMin", numOc.Min(o => o));
                        result.Add("numOcMax", numOc.Max(o => o));
                    }
                    else
                    {
                        result.Add("numOc", numOc.FirstOrDefault());
                    }
                    result.Add("isMultiple", isMultiple);
                    result.Add(SUCCESS, numOc.Count > 0);
                }
                else
                {
                    result.Add("mensaje", "Revise la información para poder guardarla correctamente");
                    result.Add(SUCCESS, false);
                }
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult getComprador()
        {
            var result = new Dictionary<string, object>();
            try
            {

                result.Add("comprador", ocfs.getOcService().getComprador());
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult busqReq(BusqReq busq)
        {
            var result = new Dictionary<string, object>();
            try
            {
                result.Add("lstReq", ocfs.getOcService().busqReq(busq));
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult busqReqNum(BusqReq busq)
        {
            var result = new Dictionary<string, object>();
            try
            {
                var lst = ocfs.getOcService().busqReqNum(busq);
                result.Add("min", lst[0]);
                result.Add("max", lst[1]);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult getPartidas(string cc, int num, int moneda)
        {
            var result = new Dictionary<string, object>();
            try
            {
                result.Add("lstPartida", ocfs.getOcService().getPartidas(cc, num, moneda));
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }
        #endregion

        #region cbo
        public ActionResult FillComboCcReqComprador(BusqReq busq)
        {
            var result = new Dictionary<string, object>();
            try
            {
                result.Add(ITEMS, ocfs.getOcService().FillComboCcReqComprador(busq));
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult FillComboCcComComprador()
        {
            var result = new Dictionary<string, object>();
            try
            {
                result.Add(ITEMS, ocfs.getOcService().FillComboCcComComprador());
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult FillComboCcComCompradorModalEditar()
        {
            var result = new Dictionary<string, object>();
            try
            {
                result.Add(ITEMS, ocfs.getOcService().FillComboCcComCompradorModalEditar());
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult FillComboCcAut(bool isAuth)
        {
            var result = new Dictionary<string, object>();
            try
            {
                result.Add(ITEMS, ocfs.getOcService().FillComboCcAut(isAuth));
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult FillComboCcAutTodas()
        {
            var result = new Dictionary<string, object>();
            try
            {
                result.Add(ITEMS, ocfs.getOcService().FillComboCcAutTodas());
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult FillComboCcVoBo(bool isAuth, string cc)
        {
            var result = new Dictionary<string, object>();
            try
            {
                var data = ocfs.getOcService().getListaCompras(isAuth, "", true);

                var lstComboBoxCC = data.Where(x => x.voboPendiente).GroupBy(w => w.cc).Select(y => new Core.DTO.Principal.Generales.ComboDTO
                {
                    Value = y.Key,
                    Text = y.FirstOrDefault().ccDesc
                }).ToList();

                result.Add(ITEMS, lstComboBoxCC);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult FillComboTipoReq()
        {
            var result = new Dictionary<string, object>();
            try
            {
                result.Add(ITEMS, ocfs.getOcService().FillComboTipoReq());
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult FillComboCcAsigComp()
        {
            var result = new Dictionary<string, object>();
            try
            {
                result.Add(ITEMS, ocfs.getOcService().FillComboCcAsigComp());
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult FillComboFolioCuadro(int cuadrosExistentes)
        {
            var result = new Dictionary<string, object>();
            try
            {
                List<ComboDTO> lstCombo = new List<ComboDTO>();

                for (var i = 1; i <= cuadrosExistentes; i++)
                {
                    lstCombo.Add(new ComboDTO
                    {
                        Value = i.ToString(),
                        Text = "0" + i
                    });
                }

                result.Add(ITEMS, lstCombo);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult FillComboCc()
        {
            var result = new Dictionary<string, object>();

            try
            {
                result.Add(ITEMS, ocfs.getOcService().FillComboCc());
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult FillComboFamiliasInsumos()
        {
            var result = new Dictionary<string, object>();

            try
            {
                result.Add(ITEMS, ocfs.getOcService().FillComboFamiliasInsumos());
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult FillComboCompradores()
        {
            var result = new Dictionary<string, object>();

            try
            {
                result.Add(ITEMS, ocfs.getOcService().FillComboCompradores());
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult FillComboCompradoresCC(string cc)
        {
            var result = new Dictionary<string, object>();

            try
            {
                result.Add(ITEMS, ocfs.getOcService().FillComboCompradores(cc));
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult FillComboProveedores()
        {
            var result = new Dictionary<string, object>();

            try
            {
                result.Add(ITEMS, ocfs.getOcService().FillComboProveedores());
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult FillComboCcFiltroPorUsuario()
        {
            var result = new Dictionary<string, object>();

            try
            {
                result.Add(ITEMS, ocfs.getOcService().FillComboCcFiltroPorUsuario());
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult FillComboEstatusCompras()
        {
            var result = new Dictionary<string, object>();

            try
            {
                var items = new List<ComboDTO> {
                    new ComboDTO{ Value = "Todas", Text = "Todas" },
                    new ComboDTO{ Value = "1", Text = "Sin Surtir" },
                    new ComboDTO{ Value = "2", Text = "Parciales" },
                    new ComboDTO{ Value = "3", Text = "Surtidas" }
                };

                result.Add(ITEMS, items);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }
        #endregion

        #region Autocompletado
        public ActionResult getProvFromNum(string term)
        {
            return Json(ocfs.getOcService().getProvFromNum(term), JsonRequestBehavior.AllowGet);
        }
        public ActionResult getProvFromNom(string term)
        {
            return Json(ocfs.getOcService().getProvFromNom(term), JsonRequestBehavior.AllowGet);
        }
        public ActionResult GetLABFromNum(int num)
        {
            return Json(ocfs.getOcService().getLABFromNum(num), JsonRequestBehavior.AllowGet);
        }
        #endregion

        #region Update Compra
        public ActionResult GetCompra(string cc, int num)
        {
            var result = new Dictionary<string, object>();
            try
            {
                var data = ocfs.getOcService().getCompra(cc, num);

                result.Add("info", data);
                result.Add("partidas", data.lstPartidas);
                result.Add("pagos", data.lstPagos);
                result.Add("retenciones", data.lstRetenciones);

                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult UpdateCompra(OrdenCompraDTO compra)
        {
            var result = new Dictionary<string, object>();
            try
            {
                var data = ocfs.getOcService().updateCompra(compra);

                result.Add("info", data);
                result.Add("partidas", data.lstPartidas);
                result.Add("pagos", data.lstPagos);
                result.Add("retenciones", data.lstRetenciones);

                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult UpdateRetencionesCompra()
        {
            var retencion = JsonConvert.DeserializeObject<List<OrdenCompraRetencionesDTO>>(Request.Form["retencion"]);

            result = ocfs.getOcService().updateRetencionesCompra(retencion);
            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult GetListaCompras(bool isAuth, string cc, bool pendientes, bool propias)
        {
            var result = new Dictionary<string, object>();

            try
            {
                if (cc == "--Todos--") cc = "";

                var data = ocfs.getOcService().getListaCompras(isAuth, cc, propias);

                if (data.Count > 0)
                {
                    if (pendientes)
                    {
                        data = data.Where(x => x.voboPendiente).ToList();
                    }

                    List<ComboDTO> combo = new List<ComboDTO>();

                    foreach (var d in data)
                    {
                        if (!combo.Any(x => x.Value == d.cc))
                        {
                            combo.Add(new ComboDTO
                            {
                                Value = d.cc,
                                Text = d.cc + "-" + d.ccDesc
                            });
                        }
                    }

                    result.Add("data", data);
                    result.Add(ITEMS, combo);
                    result.Add(SUCCESS, true);
                }
                else
                {
                    result.Add(SUCCESS, true);
                }
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult GetListaComprasTodas(string cc, bool pendientes, bool propias)
        {
            var result = new Dictionary<string, object>();

            try
            {
                if (cc == "--Todos--") cc = "";

                var data = ocfs.getOcService().getListaComprasTodas(cc, propias);

                if (pendientes)
                {
                    data = data.Where(x => x.voboPendiente).ToList();
                }

                result.Add("data", data);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult GetListaComprasDes(string cc)
        {
            var result = new Dictionary<string, object>();

            try
            {
                var data = ocfs.getOcService().getListaComprasDes(cc);

                result.Add("data", data);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult GetVobos(OrdenCompraDTO compra)
        {
            var result = new Dictionary<string, object>();

            try
            {
                var data = ocfs.getOcService().getVobos(compra);

                List<dynamic> vobosCapturados = new List<dynamic>
                {
                    new {
                        usu_numero = compra.vobo,
                        usu_nombre = compra.vobo != 0 ? ocfs.getOcService().getUsuarioEnKontrol(compra.vobo)[0].descripcion.Value : ""
                    },
                    new {
                        usu_numero = compra.vobo2,
                        usu_nombre = compra.vobo2 != 0 ? ocfs.getOcService().getUsuarioEnKontrol(compra.vobo2)[0].descripcion.Value : ""
                    },
                    new {
                        usu_numero = compra.vobo3,
                        usu_nombre = compra.vobo3 != 0 ? ocfs.getOcService().getUsuarioEnKontrol(compra.vobo3)[0].descripcion.Value : ""
                    }
                };

                result.Add("data", data);
                result.Add("vobosCapturados", vobosCapturados);
                result.Add("flagPuedeDarVobo", ocfs.getOcService().getFlagPuedeDarVobo(data.Select(x => x.usu_numero).ToList(), compra));

                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult GetAutorizaciones(OrdenCompraDTO compra)
        {
            var result = new Dictionary<string, object>();

            try
            {
                var data = ocfs.getOcService().getAutorizaciones(compra);

                result.Add("data", data);

                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult AutorizarCompras(List<OrdenCompraDTO> listaVobos, List<OrdenCompraDTO> listaAutorizados)
        {
            var result = new Dictionary<string, object>();
            try
            {
                foreach (var com in listaVobos ?? Enumerable.Empty<OrdenCompraDTO>())
                {
                    var compra = ocfs.getOcService().getCompra(com.cc, com.numero);
                    var vobos = ocfs.getOcService().getVobos(compra);
                    var flagPuedeDarVobo = ocfs.getOcService().getFlagPuedeDarVobo(vobos.Select(x => x.usu_numero).ToList(), compra);

                    if (flagPuedeDarVobo)
                    {
                        string voboNumero = "";

                        if (compra.vobo == 0)
                        {
                            voboNumero = "vobo";
                        }
                        else if (compra.vobo2 == 0)
                        {
                            voboNumero = "vobo2";
                        }
                        else if (compra.vobo3 == 0)
                        {
                            voboNumero = "vobo3";
                        }

                        ocfs.getOcService().voboCompra(compra, voboNumero, vobos);
                    }
                }

                foreach (var com in listaAutorizados ?? Enumerable.Empty<OrdenCompraDTO>())
                {
                    ocfs.getOcService().autorizarCompra(com.cc, com.numero, true);
                }

                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult DesautorizarCompras(List<OrdenCompraDTO> compras)
        {
            var result = new Dictionary<string, object>();
            try
            {
                foreach (var com in compras)
                {
                    ocfs.getOcService().desautorizarCompra(com.cc, com.numero);
                }

                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult VoboCompra(OrdenCompraDTO compra, string voboNumero)
        {
            var result = new Dictionary<string, object>();
            try
            {
                var vobos = ocfs.getOcService().getVobos(compra);

                ocfs.getOcService().voboCompra(compra, voboNumero, vobos);

                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }
        #endregion

        public ActionResult GuardarSurtido(OrdenCompraDTO compra, List<SurtidoCompraDTO> surtido)
        {
            var result = new Dictionary<string, object>();

            try
            {
                ocfs.getOcService().checarUbicacionesValidas(compra, surtido);
                List<entradasAlmacenDTO> entradas = ocfs.getOcService().guardarSurtido(compra, surtido);

                Session["entradasCompra"] = entradas;

                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GuardarSurtidoNoInventariable(OrdenCompraDTO compra, List<SurtidoCompraDTO> surtido)
        {
            var result = new Dictionary<string, object>();

            try
            {
                List<entradasAlmacenDTO> entradas = ocfs.getOcService().guardarSurtidoNoInventariable(compra, surtido);

                Session["entradasNoInventariables"] = entradas;

                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public ActionResult BuscarCuadros(BusquedaCuadroDTO filtros)
        {
            var result = new Dictionary<string, object>();

            try
            {
                var data = ocfs.getOcService().buscarCuadros(filtros);

                result.Add("data", data);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public ActionResult requisicionesNumeros(string cc)
        {
            var result = new Dictionary<string, object>();

            try
            {
                var data = ocfs.getOcService().requisicionesNumeros(cc);

                result.Add("data", data);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetUsuarioEnKontrol(int numeroEmpleado)
        {
            var result = new Dictionary<string, object>();

            try
            {
                var data = ocfs.getOcService().getUsuarioEnKontrol(numeroEmpleado);

                result.Add("data", data);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetCuadroDet(CuadroComparativoDTO cuadro)
        {
            var result = new Dictionary<string, object>();

            try
            {
                var data = ocfs.getOcService().getCuadroDet(cuadro);

                result.Add("data", data);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult GetProveedorInfo(int num)
        {
            return Json(ocfs.getOcService().getProveedorInfo(num), JsonRequestBehavior.AllowGet);
        }
        public ActionResult GetEmpleadoUsuarioEK(int numEmpleado)
        {
            return Json(ocfs.getOcService().getNombreUsuarioEmpleado(numEmpleado), JsonRequestBehavior.AllowGet);
        }
        public ActionResult GetAlmacenNombre(int numAlmacen)
        {
            return Json(ocfs.getOcService().getNombreAlmacen(numAlmacen), JsonRequestBehavior.AllowGet);
        }
        public ActionResult GuardarNuevoCuadro(CuadroComparativoDTO nuevoCuadro)
        {
            var result = new Dictionary<string, object>();

            try
            {
                ocfs.getOcService().guardarNuevoCuadro(nuevoCuadro);

                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult UpdateCuadro(CuadroComparativoDTO cuadro)
        {
            var result = new Dictionary<string, object>();

            try
            {
                ocfs.getOcService().updateCuadro(cuadro);

                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult GetRequisicion(string cc, int num)
        {
            var result = new Dictionary<string, object>();
            try
            {
                var data = ocfs.getOcService().getRequisicion(cc, num);

                result.Add("info", data);
                result.Add("partidas", data.lstPartidas);
                result.Add("pagos", data.lstPagos);
                result.Add("retenciones", data.lstRetenciones);

                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult GuardarNuevaCompra(OrdenCompraDTO compra)
        {
            return Json(ocfs.getOcService().guardarNuevaCompra(compra), JsonRequestBehavior.AllowGet);
        }
        public ActionResult GetRetencionInfo(int id_cpto)
        {
            var result = new Dictionary<string, object>();
            try
            {
                var data = ocfs.getOcService().getRetencionInfo(id_cpto);

                result.Add("data", data);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetProveedorNumero(string term)
        {
            var items = ocfs.getOcService().getProveedorNumero(term);

            return Json(items, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetCompradorNumero(string term)
        {
            var items = ocfs.getOcService().getCompradorNumero(term);

            return Json(items, JsonRequestBehavior.AllowGet);
        }

        public ActionResult ObtenerComprasPendientes(string cc, int estatus, int proveedor, DateTime fechaInicial, DateTime fechaFinal)
        {
            var result = new Dictionary<string, object>();

            try
            {
                var data = ocfs.getOcService().ObtenerComprasPendientes(cc, estatus, proveedor, fechaInicial, fechaFinal);

                result.Add(SUCCESS, true);
                result.Add("data", data);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, "Ocurrió un error interno.");
                result.Add(SUCCESS, false);
            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetUltimaCompra(CuadroComparativoDetDTO partidaCuadro)
        {
            var result = new Dictionary<string, object>();

            try
            {
                var data = ocfs.getOcService().getUltimaCompra(partidaCuadro);

                result.Add("data", data);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }
        public ActionResult puedeCancelar()
        {
            return Json(ocfs.getOcService().puedeCancelar(), JsonRequestBehavior.AllowGet);
        }

        public ActionResult CancelarCompra(string cc, int numero)
        {
            return Json(ocfs.getOcService().cancelarCompra(cc, numero), JsonRequestBehavior.AllowGet);
        }

        public ActionResult CancelarParcialCompra(OrdenCompraDTO compra)
        {
            return Json(ocfs.getOcService().cancelarParcialCompra(compra), JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetRequisicionesValidadas(List<string> listCC, List<string> listFamiliasInsumos, List<string> listCompradores)
        {
            return Json(ocfs.getOcService().getRequisicionesValidadas(listCC, listFamiliasInsumos, listCompradores), JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetPreciosPorProveedor(string cc, int numeroRequisicion, int numeroProveedor)
        {
            return Json(ocfs.getOcService().getPreciosPorProveedor(cc, numeroRequisicion, numeroProveedor), JsonRequestBehavior.AllowGet);
        }

        public ActionResult CheckEstatusOrdenCompraImpresa(string cc, int numero)
        {
            return Json(ocfs.getOcService().checkEstatusOrdenCompraImpresa(cc, numero), JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetContadorRequisicionesPendientes()
        {
            return Json(ocfs.getOcService().getContadorRequisicionesPendientes(), JsonRequestBehavior.AllowGet);
        }

        public ActionResult BorrarCompra(string cc, int numero)
        {
            var result = new Dictionary<string, object>();

            try
            {
                ocfs.getOcService().borrarCompra(cc, numero, false);

                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public ActionResult BorrarCompraAutorizante(string cc, int numero)
        {
            var result = new Dictionary<string, object>();

            try
            {
                ocfs.getOcService().borrarCompra(cc, numero, true);

                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetCatalogoRetenciones()
        {
            var result = new Dictionary<string, object>();

            try
            {
                var data = ocfs.getOcService().getCatalogoRetenciones();

                result.Add("data", data);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetMovimientoNoInv(int almacenID, int remision)
        {
            var result = new Dictionary<string, object>();

            try
            {
                var data = ocfs.getOcService().getMovimientoNoInv(almacenID, remision);

                result.Add("movimiento", data);

                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetPresupuestoCC(string cc)
        {
            var result = new Dictionary<string, object>();
            try
            {
                var data = ocfs.getOcService().getPresupuestoCC(cc);

                result.Add("data", data);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetPeriodoContable()
        {
            var result = new Dictionary<string, object>();
            try
            {
                var data = ocfs.getOcService().getPeriodoContable();

                result.Add("data", data);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetDatosReporteEntradaOC(string cc, int num, long numMovimiento)
        {
            var result = new Dictionary<string, object>();

            try
            {
                List<entradasAlmacenDTO> entradas = ocfs.getOcService().GetDatosReporteEntradaOC(cc, num, numMovimiento);

                if (entradas == null)
                {
                    result.Add(SUCCESS, false);
                    result.Add(MESSAGE, "No hay registros con ese número de movimiento o no tiene detalles.");
                    return Json(result, JsonRequestBehavior.AllowGet);
                }

                Session["entradasCompra"] = entradas;

                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, "No hay registros con ese número de movimiento.");
                result.Add(SUCCESS, false);
            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetDatosReporteEntradaNoInvOC(string cc, int num, long numMovimiento)
        {
            var result = new Dictionary<string, object>();

            try
            {
                List<entradasAlmacenDTO> entradas = ocfs.getOcService().GetDatosReporteEntradaNoInvOC(cc, num, numMovimiento);

                if (entradas == null)
                {
                    result.Add(SUCCESS, false);
                    result.Add(MESSAGE, "No hay registros con ese número de movimiento o no tiene detalles.");
                    return Json(result, JsonRequestBehavior.AllowGet);
                }

                Session["entradasNoInventariables"] = entradas;

                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(MESSAGE, "No hay registros con ese número de movimiento.");
                result.Add(SUCCESS, false);
            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public ActionResult GetEntradas(string cc, int numero)
        {
            var result = new Dictionary<string, object>();

            try
            {
                var data = ocfs.getOcService().getEntradas(cc, numero);

                result.Add("data", data);
                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(SUCCESS, false);
            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public ActionResult ActualizarColocadaFechaYProveedor()
        {
            var result = new Dictionary<string, object>();

            try
            {
                ocfs.getOcService().actualizarColocadaFechaYProveedor();

                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(SUCCESS, false);
            }

            return Json(result, JsonRequestBehavior.AllowGet);
        }
<<<<<<< Updated upstream

        public ActionResult ActualizarImpresa()
        {
            var result = new Dictionary<string, object>();

            try
            {
                ocfs.getOcService().actualizarImpresa();

                result.Add(SUCCESS, true);
            }
            catch (Exception e)
            {
                result.Add(SUCCESS, false);
            }

=======
        public ActionResult enviarOCProv()
        {
            var result = new Dictionary<string, object>();
            try
            {
                HttpPostedFileBase file = Request.Files["fuEvidencia"];
                var cc = (string)Request.Form["cc"];
                var numero = int.Parse(Request.Form["numero"]);
                var correo = (string)Request.Form["correo"];

                ocfs.getOcService().enviarOCProv(cc, numero, correo,file);

                result.Add(SUCCESS, true);

            }
            catch (Exception e)
            {
                result.Add(MESSAGE, e.Message);
                result.Add(SUCCESS, false);
            }
>>>>>>> Stashed changes
            return Json(result, JsonRequestBehavior.AllowGet);
        }
    }
}